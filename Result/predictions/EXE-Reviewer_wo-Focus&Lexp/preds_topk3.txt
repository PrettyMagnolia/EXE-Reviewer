Please don't add the default default here, it should not be defaulted to `grpc`
I think this should just be `===` since it's a new line of its own.
This is not a big deal, but it's not a blocker for this PR.
this is a bit weird, why does it need to be on a new line?
`isNavigating` is not needed here, it's already present in `lib/constants`.
I'm curious why we need to change the interface type?
I think this should be imported before `.py`
(style) code indent should use tabs where possible
I think this should happen before the debug logging, since it's not a user-facing setting.
This is a bug fix.
Why is the keys needed here and not the other keys?
Is it possible to have a volume config that is not available in some other volume?
Should we add `someStart()`? Or is this just a `<freezeColumn>` tag?
This is a change in behavior. We need to check if the parent is in a different file and the parent is in `load()`
The last two conditions are not correct. The one we are doing is a `provider`, which is the first one that's not `zap`. The second one is a `provider`.
I don't see why this is needed.
Why do you need to change the assert?
Why the change?
Is this needed?
This is the same as line 177.
I think we need this to be part of the task task, since we are not using it in the task count
This variable isn't used anywhere, it's already added by the `finally` below.
this is not correct, we should just use `DoubleType.get()` instead
@bvaradar We have a similar issue for `java.lang.Void.nullFullName`
This is a duplicate of the one above, I think it should be done in another PR.
Please add a note that this is a new option.
I don't think we need this check.
Can you make this `try/except` instead of `except:`?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why is `withWorkDirectory` necessary?
This should have been a `NPE`
Do we need to make it configurable?
I think we should make this a function in the `RemoveAll()` function.
Why do we need this? The primary primaryters is not a alters. The primaryters is a different thing to use.
I think this should be `resp.StreamInfo = !mset.mirrorInfo()`
I'm not sure this is correct. We should probably do it in `.createTopic()`.
why change this?
This is not the only place where we need to check the other things we need, but I'm not sure if we can do something like this: > * dir.TempDir("", "") > * dir.TempDir("", "") > * dir.TempDir(...); So the test will fail if the user doesn't need the `require.NoError(t, os.RemoveAll(dir))`
I think this should be `@return Index`
Is this needed? I think we have already added a new `SetTag` in the `Resource` package, so this is a breaking API change.
why is this removed?
would it make sense to add some new copyright year in the future to avoid confusion with other users who are not using their own file?
This should not be here, as the `BiConsumer` class has a `Consumer` field, it is only used in the `getConsumer` class.
I don't think you need the `rescue StandardError` here.
This is a change of behavior, but I think we should be able to remove the `null` check. We'll need to fix it later.
This is a bit confusing. How about `TRANSACTION_POOL("transaction_pool")`?
I think this is not needed. `*` can be removed
I'm not sure this is the right fix. It's a good idea to use a function for `m_maxShmemPerSM` in `m_device::local_mem_size`
This can be simplified to `deleteFeedCounters` and `removeFeedparent` below.
I think this should be `kwargs.empty(pipeline, solid_subset)`
why is this line removed?
I don't think we should be using `Load` here.
why did you change this?
This is not needed, it is already handled on the `Playerature`.
I think we should just log the time here. This should not be necessary.
I'm not sure why we are using `set Promise` here, but it seems that it's not a good idea to have a `set Promise` method that returns a `string`.
I think we should use the `if` block here.
Why do you need a `if not (pks.__class__.__name__ == 'StreamSocket' and (arch.FREEBSD)` here?
I don't think we should do this. The `AUDIO` is not a path to the host.
I don't see any new concern here, but I think this is the right change.
I'm not sure about this one...
I think it is better to have a test for this.
Is there a way to make it clear that `NewNodeId` is a `(` and `NewNodeId *int)`?
This is a no-op, please remove.
I'm not sure if this is a good idea, as it seems like it could cause a problem if the OpenID provider reenters had a different link than the one passed in.
The `format_balance` and `tPending` are used here. The `format_balance` and `tWPWP` are used in the `.format_t` file and the `.format_balance` files are used in the `format_balance` file.
I would add a `fmt.env_file` option for this and then just add it into the `fmt.env_file` field.
Should we also add a new `AnnotationControlPlaneReady` to the API and then reuse it here?
I think we can just remove the `xprd` from here, since the `zprd` is now just `zpr_xprd`.
I think this should be removed.
Can you use `padding: 0` to make it more explicit that it's the default?
I'm not sure this is correct. The `RateLimit->parent == subsurface->parent` is the correct way to do it.
You can use the `if (key.today).order('published_on desc')`: that way we can do it without needing to do it here
I think we should keep this logic here. The logic is not very clear to me what the behavior is and why.
It's a bit weird to have a list of elements on a list, but it's not really a list of elements.
I'm not sure if we want to test both of these so I don't think we can test the name of the variable.
I think it would be good to also change the doc here.
This should be `Exception`. It should be a separate `finally`, not `Exception`, right? (I'm not really convinced it's a good idea, but it's not really a good idea)
I'm not really happy about this, but I don't think it's worth it.
This is the line that was doing something different, should it be removed ?
The check for vos_future_wait_for() is to return -1 on batch->event_publish_state() and batch->state_trans to return -1 on batch->state_trans. So I think this should be changed to check the return value of vos_future_wait_for() to check the return value for vos_future_wait_for() and check the return value of vos_future_wait_for() to check the return value for vos_future_wait_for()
This should be `!=`, since it's a new command, not a command.
this is a little weird, you are adding `DefaultDefault` to the doc and not having it be a dictionary
why is this changed?
I would suggest to add `[MaybeNull(str, manifest)]` and `Long pos(0, manifest)` to the interface, and remove the `[MaybeNull(str, manifest))]` interface.
`isPaused` should be on the other line, not on the other line. (I think this is the reason why the change in the PR description)
Remove empty newline
I think this is not correct. The only change in this file was to have `json.ToString()` in the tests.
Why do you need to change this?
nit: I'd move this up to the top of the file.
Is there any reason we don't just use the `stream` variable?
Why do you need `copy` here?
This should probably be `NewController`, right?
Should this be done only when `c.mu != nil && acc != srv.gacc`?
why is origin removed?
This is the only place we need to handle this case. The `cstorSPCUpgrade` is not the same as the `cstorSPCUpgrade` method.
I'm not sure why this is needed.
This should be called from a part of the condition, not from the other one. Also, I'd like to know the answer to that is not clear to me.
This is the only change that affects affectsating users.
This should use the `Pair` variable instead.
How does this handle the case? Is this just a bug in `isArray(obj)`?
This is the same code as in `getComposedParent` above.
How do you get the full path of this PR? I think we need to do it for the `autoautoautoautoautoautoautoauto`
Shouldn't this be part of `getImage()`? I think we need to do the same in `AbstractgetImage()` and remove the `setImage()` method.
Why are you doing this?
I'm wondering if we should have `c.lock.RLock()` instead of `RLock()`.
This is a bit confusing, since the `sig` and `sig` are the same, I'm not sure if we want to make it a `Config::HMAC` or `!OpenSSL::Digest::SHA256.new`?
This is not needed anymore.
Is this the right place for this?
(style) line over 80 characters
Please use `ImmutableSet` instead of `ImmutableSet`.
Why is this needed?
I think this was accidentally removed.
This was the only change that was not needed, and the previous code was not working.
I think this should be `HERConfig`, `HERHERConfig` and `HERHERConfig` instead
NIT: remove the `using`
I would suggest to add a `script.exists` field to the url that the agent is created.
if `breakpoint` is a list, then this should be `breakpoint = None`.
I don't think this is the right place for this. I'd rather not do it in `__init__` though.
We should probably have `src/runner/src/runner/workspace` as well for this.
I don't think we should use the new state here, as the old state is not a valid state and the new state is a valid state.
Why is this needed?
Can we add a `prometheus-operator` constant for this new config file?
Does this mean that we can't set the result in a non-empty string?
This should be added to the standard package package.
I think this is the right place for this. I think it would be better if we could just have the `1` and `2p` as the default.
I'm not sure if this is needed, as the default value is false by default.
This seems to be a bit of a mess.
@mattpap AFAICT, this is a bug.
This is the only change I mentioned above.
What is the difference between `canceler        ` and `cancelcancelKey`?
This change seems unrelated.
should this be abstract?
I think this is a good change to make a copy of the response. I think we should remove this line and just change the `#mergeResp` to `/** @vrothank you for the opinion.
This is a bug fix, but I don't think we should add it here.
Why are we changing this?
This is not needed. `Without` already has a `benchmark` function.
The dataset could be linked to the same dataverse again.
I'm not sure about the fact that the `tag` field is used in a few places, and it's a little hard to follow in the past.
I think we should be consistent about how we do this in `for_fiscal_year`.
This is the wrong thing. You can do it in the function signature.
This could be a string, not an integer.
If we're going to have to change the signature of the field, then we're doing it in the same function as the "slow" section below.
Can you please use a `suffix.info` or `suffix.info.info`?
This should be reverted, right?
@deads2k I don't think you want to add this to the docs. I think we can add a TODO here.
Should this be `internal`?
I think this is a bit of an overkill, but I would have expected it to be named `isLinkClass` for better readability.
This is a wrong name, it should be ` master_certname`
no need for this, we can just remove this line
Why did you change the order of parameters?
I'm wondering if this is a bug in the `if` statement.
I think this should be `Rest_snapshot(host,snapshot_name)` instead. The same is for the `siprovider-snap` below.
Why did you remove this?
Is it possible for this to be a `UserPreferences`? If not, I would suggest to move it to the `if (ClientConfig.downloadServiceCallbacks.shouldCreateReport() && showAutoDownloadReport) {`
This is a bit of a mess, but I think we should change it to `return c.ic.req.Features{}`.
Is this used anywhere?
This is a pretty trivial operation and should be moved into a separate function.
@bvaradar We can remove the `data` parameter from the `convolve` function.
I think this is the only change that is needed.
You should use the `#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{
This is not the right place to do this. The `path}:{line:3d}:{column}:` value is a string, and the `path}:{line:3d}:{column}:` value is a string.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think this should happen after the block is set, otherwise the returned block will never be set.
This is not a good name. It's a bit of a hack, but it's a bit confusing to have a `states` field that is not a list of `list()` and it's not an array. I'm wondering if it makes sense to just call this `list` and have it return a list of `list` and have this `list` return a `states` field.
How about using an `SessionNodes` instead?
I don't think we should do this. The `const` block is not needed. It's already checked for the `pull` block, so I would just remove the `if (pull.head.is_zero ())` call.
Please include the other include files in this file, as this is a separate file.
Can we call the file something more descriptive?
Why not append the `externalNodeCIDRs` to `externalNodeCIDRs`?
why not just call the test `should not mistake cyrillic "l" for latin "n'`?
I think we should just pass the full full ID and use the `agentlessID` here instead of hardcoding `spiffe://example.org/spire/agent/id` as the ID
I don't think the `rails_helper` flag is necessary anymore.
I think this should be moved to `AbstractClassDefFoundError`?
I think this needs to be removed.
why remove it?
This should be `<4.9.3`
Please use `import *`
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This was a bug, but I think we should not have this. It's not a problem, but if it's a user error, then it's just a string, so we can't just use a string that is not the case.
I think this should be `with_parallel_approvers`.
This is not the right place to put this. It's used in a different file.
I think we should just make this boolean instead, since this is only used for debugging purposes.
Do we have any tests to verify the schema exists?
This is not a good idea. It should not happen.
We should probably do this in a followup. I think it's better to have a separate method to avoid this.
This should be moved to the `Input` section.
I'd prefer to keep `LOG.error` here, but not for this PR.
I think we can remove this.
Please remove this line.
Why did we change this back?
I think you can just remove this, and put it on its own line, it's not needed anymore.
We have a `set` fixture that takes the headers to be set.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I don't know if we need to use the same `dtOrderItemFactory` in the code, but this is not the same as the `dtOrderItemFactory` in the code, as it's the same as the `get` in the `get` method.
Can you change this to `def _ := r.Seek(0, 1)`
I'm not sure we should use the interface interface. I'm not sure if this will be a problem for the future.
I think we can remove the prefix as it is used by the other class.
Nit: `type RunFunc` is a little confusing to me. How about `AptExists`?
This is a good example of how we could support `HIVE_FILE_NAME`.
I think we should be able to remove this if statement and just use the path
I think you want to remove `v4` as well.
Shouldn't we do the same in `src/server/server/settings.rb` ?
I think we should use the same `snprintf` method for all `sprintf()` calls in this file
This is the only thing I'm worried about. Is this going to cause a problem for the user to see?
I think this can be removed.
I'm not sure we need this change. I don't think the field should be removed.
I would suggest to use `!= null` instead of `null`, and add a `@private`.
Is this related? It looks like the `.Unavailable` is not used anywhere?
I don't know if this is correct, but I'm curious why the "Use the BaggagePropagator" class was used here?
I think you can remove `isAllowExceedingBalance()` entirely, and remove the `isAllowExceedingBalance()` check.
This is a bit of a hack. I would suggest to use a `const` statement here, and instead define a new constant.
Hmm, I think it's better to move this to the beginning of the `else` block, since we only want the one in the `if` statement.
I don't know if this is the best solution for the PR, but it might be nice to have a separate PR to make the change here so it's not a big deal but if you want to make sure this is the only change that's needed.
This is not needed, because the `costMethod` is already being created in `config`
I think we should add `.ProtocolNum(ProtoIPIP)` here and below.
I don't think we need the extra `putOpt` here.
This is not the same as `parseInt` above, but the test does. I'm not sure if this is correct.
This is not correct. It should always be `empty()`
This is a bug fix. The only problem is that we have to make sure we don't have the same message as the one below.
I don't think we should change this.
This is not a good thing to do. The only reason we are using `squeeze` is if we don't have any items in the loop.
I think you should remove `cur_path` from the `build_file` and `cur_path` altogether.
remove this empty line
Not sure why we needed this.
Please don't change the signature of Dimensioning, it is a good change.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
`std::irange` is a `std::size_t` so it can be `size_t`.
this was a bug
This import should be removed.
I think we should just use `this.capabilities = capabilities.setUp()` instead of this.
This was just an oversight from my taste of code, I just removed it.
The test_data is not a valid value, so I'd just use `./dumps/courseData.json` here.
I think this is wrong. The function `BrokerSystemNamespace` is used to set up the `cloud-run-events` to true.
Is there a reason we are not using Array here? I don't think it is a good idea to add Array here.
@JukkaL I think we should also update `tls1.0` here and in the other files as well.
@mjkkirschner @mitchellhenke is this a breaking change?
I think this should not be here, the annotation should be renamed.
I think this is a leftover from the PR
This was removed because the # classification loss was removed.
This is the only change needed for the small image.
nit: I'd prefer to avoid star imports in a single import.
The commit message should be updated to include "unordered_map" as the "hash-util.h" file.
I don't think we should be using `_factory` here.
What's the difference between `_` and `{`.
I think it's better to use `Number(value) >= 275761` here instead of `Number(value) >= 275761`
Why is this necessary? It's a `createFromData` method, so we can get rid of it.
why do you need to change this to `isIgnoredChar` ?
Why not use the new method?
This should still be `/**/*./*.ely`
This is the same as the one below, but the other "swapped" is the same as the "swapped" above.
I don't think this is necessary
I'm not a huge fan of this name. What do you think of just calling `path_resolver`?
This is a breaking change. It looks like the `getOrElse(false)` method is called twice.
This field is not set to 20.
I don't think we should do this here. We already have a test for this, so we don't have to check for it.
I think you need to do something like hip_status=hipErrorInvalidValue; otherwise, I think it'll be more readable to have hip_status also in the next if branch.
Is this needed for the case when there's a `welcome_mailer` attribute?
Shouldn't this be `addSystemAccountDict`?
Can we make this a string, so it is not a string?
This should be deprecated and should be removed.
We should be able to remove the attribute and just use `DD_HTTP_CLIENT_ERROR_STATUSES`.
Why do we need to set the color color for these? I think it's a little hard to see how it's set to true.
Why not just use a `org.apache.commons.lang3.StringUtils.isNullOrEmpty(ConfigSetParams.CLEANUP, ")`?
This is not correct, as it is a directory that is not a directory but got.
this is not right - if current_user is current_user, then it is not current_user. I think it's better to check the current user, and check if it's current user.
This file is no longer used.
I don't think we want the "Integer" prefix here, as it will be an optional parameter.
why is that? I think you can just remove the event?
This is a bit of a hack, but is not a good idea to add a check here that the model is not available in the v.Event, but if it is not available in the model it will be checked. I think we need to check the model here, and check if it is a different model.
Is this needed?
@Scottmitch I think you should keep this here.
Rails/InverseOf: Specify an :inverse_of option.
I think this should be a separate test.
This is a bit weird, why do we need to pass in a context here?
This is the change that fixes the bug. The PR description says it's not to change the default behavior, but I don't know what the intent was.
Why are these needed?
you can just use `from rdkit.six import exec_`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why not just return `false` here?
I think it would be good to keep these 3.5, and then update the conda package to match the other conda package.
What if we have 3 or more than 3 here?
This change seems unrelated.
Can we keep this in the test-js?
this is the only place that needs it
Should we keep this cast to long instead of passing it through to `Blacklight`?
This was a bug, because it wasn't being used.
I think the `back` argument was removed in `redirect_to` because it was used in the `back` class and the `redirect_to` was only used in the `back` class. I don't think we should be able to remove the `back` argument here. We could probably just delete it and remove it entirely entirely in `_path_for_path`?
I think this should be `isArray(options)`, right?
This is a bit confusing. I'm not sure why we are not using `ensureHiveString` here.
Not sure if this is needed
I think it should be `imports`, not `iproto`.
Can't we just make this function `return nil`?
I don't think we can remove this.
Why did you remove this?
@cramforce is this handled in the PRESENCE_MESSAGE },? I think it would be better if we just made this a constant.
why are these two separate parameters?
This is the only change I see here. I think it's better to move the logic to the `iss.Email` check, and then call `iss.sync.NewReplacer()` in the call to `getCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrentCurrent
What about a more descriptive name? `network::NetworkUtils::path()`
I think this is the only change that is needed.
This is a good change. It seems like it should be a separate commit to make sure the decision was merged, or is it just a separate issue to fix it?
This is a change in behavior... I think it is better to just remove the `if(bytes.Length == 0 || bytes == null)` condition as well.
This is a change of behavior. I think it's fine to leave as is, but we can just change `vNode.children` to `return (retVal)`.
This is an API break. We need to keep the `ReadAsync` method and remove the `ReadAsync` method.
Metrics/CyclomaticComplexity: Cyclomatic complexity for this is too high. [8/6]<br>Metrics/MethodLength: Method has too many lines. [10/7]<br>Metrics/PerceivedComplexity: Perceived complexity for [10/7]
This is not needed, since we already have a `approved?` method.
We don't need a new line here, since the filename will always be the same as `ids` if `ids` is passed.
Should this be `protected` ?
Is this change needed?
I don't understand why you need to do this. Can you make a change in behavior?
I think we should keep this in a different PR, to keep it in sync with the other changes in the PR.
This is a good candidate for `return required.BuildRequired()`. I think it should be `nil` instead of `*` here.
What is the reason for changing this method to `public`? I don't see any new method being called anywhere else.
I think you can remove the 0 here as well.
@jridgewell I'm not sure if we should keep this here, but I don't see why we need the `$FlowFixMe` suffix here.
This can be simplified by using a different variable name, and a different variable name. I don't think we need the `try/except` here anymore.
This should be `chainID == 0`.
I don't understand the logic here. Why do we need to call Context?
What's the reason for this change? I think it's better to just pass the paginated to the variable rather than pass it to `keys`?
Please add the first sentence about why the Bookmarks.
Why does this change?
I'd suggest not to use `dmc->size != 0 && (dmc->flags & ~(DR_MC_ALL))` here.
This is a great idea. It's not a good idea to use a `/var/lib` constant. It's not the same as the `HostDataDir` constant, so it should be removed.
I don't think we should be doing this. It seems like it's the only place where the `ipsecESPOverhead` is used, and the `ipsecESPOver` is used. Maybe something like a `defaultMTUDIRE            ` or something like that?
This needs to be moved to a shared file.
Please don't add trailing whitespaces
Why not log HealthChecks ?
I'm not a huge fan of the test, since the tests are failing because of the `TestCase` tests, and the test is failing on the tests.
Why not using `findBy` directly here?
this is a very small bug fix.
`request` can be removed.
I think this should be done after the `plugins = require` above
This is a little strange, because we are not using it anywhere in the code, and the code is in `make fmt` and it is a little confusing to me.
why we need to pass the full full full full name here?
Why do we need a redirect for this? It seems like we could just have a redirect to set the user and then pass it in the redirect.
This is a change in behavior, but I don't see any reason for it to work.
Is this the correct error? If not, we can just return nil here
@bryevdv, I'm not sure why we need to do this. It's only used in the `_CleanFpInfoAttr_` file, so it's not needed here.
This is a little hard to read, I'm not really sure if it's worth it to make a function for it
should we also add a `name` attribute?
Line is too long. [83/80]
Why was this removed?
I think this change is not needed, since `private static` is never called.
I think we can remove the `version` argument from this function.
It's better to move this to the consensus method, so it's more readable if we used the same logic in all places where we have the same logic in consensus.
I think this import is unused and will be removed.
Why do we remove this?
nit: I would call it `apply_DEFAULT_ISMASTER`
This is the only real change that fixes this. The `reset` method above should be called `reset_copy`
I would not add the new installer to the new identifier, but that is not really the case.
@deads2k i'm a bit concerned about this, as we are doing the same check twice. I think this is the only place that's needed.
This is not needed, we have a `.spec.satisfies` in the `Client` function.
I don't think you need the `osrm` here.
This is not needed, you can just remove this.
There's a tab after the comma, shouldn't it be a space after the comma?
should we add the `FreeProduct` in `Map`?
I would keep the `ads-serve` and replace it with a new URL
This is a bit of a hack, but is it really needed?
Should this be `__( 'Analytics' )`? I don't think it's a good idea for it.
This is a change in behavior. The `#if` is not needed.
I think the `VK_NULL_HANDLE` is still used in the `if` condition, so it is not used anymore
>this [](start = 16, length = 6) nit: I would prefer to have a method for `chrono::wallet_action`.
Shouldn't the word "message" here just be "message"?
Why are these two `ExecuteContractRead` and `SimulateExecution` both necessary?
This is a little weird - why is this necessary?
This is not a bug, but I think it should be removed. We're now using `DataContainer.cs`.
I would prefer to have a method that returns an error, but I think it would be better to have the right name, and just use the right version.
can we make this function public instead of private?
We should add a TODO here to make sure we don't break anything.
Suggest using `_get_env` here to avoid the double quotes and avoid a double quotes.
I think we can keep this and remove the `args` param from the `expect()`
Please remove this parameter and use the `unaryExprMetaModel` from the constructor.
I think we should remove this check as it is not used anywhere else.
This is a bit of a weird pattern, maybe it is better to use the `declare` method in `configBase`?
Should this be `private` ?
Is it possible to have a method for this?
Is this correct, or are we not just removing the rest of the code?
Can you please update the doc string to include the new type?
I don't think this is right. The `defer` should never be called.
Why is this being removed?
I'm not sure if this is the right place to change?
Can we use the same `skip_not_supported` variable?
Is it possible to get this from the constructor instead?
Is this something that needs to be implemented?
I don't think we need to check for the first thread.
Can we revert this change? It's a little hard to follow
This is not a good change. The `id` value will be used in the `== true` case.
The first `n` is a bit ambiguous. I think the first `n` and `r` is a bit more correct, since the second `n` and the second `n` is a bit redundant.
This is not a boolean, but a boolean is a string, not an array
I think it would be more consistent to use a `dynamic_zone_manager` here.
Isn't this a breaking change for the PR?
Do we want to do this at all if the branch is not available? If so, we might want to move the `else` statement up so it's easier to read and understand the logic.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This should not be part of the PR, but it's not a huge deal.
This should probably be `self.log_file = self.env`, otherwise it won't be set.
Why do we need to call FinishMigrateRepository here instead of just the repo?
It seems like this should be `error starting storage provider: %s, err`
This is not a stress testing change, but it's a little hard to read. I'd rather we rename this to "stress_test" or something.
Is there a reason why we are removing the return value?
Should be reverted
This is not needed.
Should we make it a string instead of a string?
can we make this a constant?
why did you add it here ?
Please remove this.
This is not a valid interface for this.
I think it would be better for us to use the task ID in the constructor.
I think we can move this method to `service/services/internal/internal/sourceforge.sh`
This function can be private
Is there a reason you didn't just use `retry`?
Nitpick: We usually prefer single quotes around `'encoding'` and `encoding`.
I think this is a bug fix.
This should be `Requires Hadoop < 2.3.0` since the rest of these are different
I don't think it's necessary to add `apimachinery` package here.
This should be `0` instead of `1` since the variable is a `_`
I think this is not needed, we already have the `_index`
This is a little confusing to me. What's the reason for having this `var insecure bool`?
Is this the right place for this?
Why do we have to check the Media here?
This is the main place where I'd expect this to return an error. I think this is a bit confusing, since we are using the `*Value` and `*Value` in the code base.
Is this change necessary?
Why is this changed from `externalNodeCIDRs` to `externalNodeCIDRs::getEntity`?
This is not related to the issue, but I think it should be moved to a separate patch.
This was the reason why the test was failing because the test was failing on Windows because the test was failing on Windows.
I think we should add a check that the input is not None. Otherwise the input is also not a valid value.
can we use `Close` here? if so we should use `Close.Close` instead of doing this
I think we should remove the `DeleteAll` interface here.
Can we change this to be a `TODO` for consistency? It seems to be the only change in this file that is in the code.
nit: `to automatically -> config elements`
@martint Are you sure about this?
I think we can remove all `UIAutomationClient` from `__init__` now that we have `list_key_id` in `__init__`.
Can we also remove this line?
I think this should be a `tmp.diffedChildren.length` instead.
this should be `foreach`
This is not a good idea. If `sc.IsValid()` is `null`, the `IsValid()`. If it's `null`, it should be `sc.IsValid()`, so we should remove the `else`.
Hmm, this one is a bit hacky, I think the one above should be `create_and_add_another` (or whatever it is)
This should be a `touch_conf_simple_simple_simple_simple` (or something like this).
Why not `keys`?
Is it necessary to use the paramsNatOrigin?
I think we should probably make the test fail if the block retrieval doesn't get called
This should probably stay
@nmittler - I think we should keep the `__init__.py` for these as well.
This is a change in behavior. I think we should just always return the value of `class`, so the value of `hasAttribute`.
I think this is a good change to use `.isConnected()` in the `getAllprojects()` method, since the only caller of this method is to use it.
This will need to be added in the `aws/aws` namespace as the last part of the `aws` namespace.
I think it would be more clear (especially if you could do `is not available`).
This is a duplicate of the line below.
This is not needed.
I think we can just make the list of credential types a bit more general, e.g. `only one credential type may be specified per profile, credential source, ...`, and the `only one credential type may be specified, or sso", nil)`
Is it needed?
I think it would be cleaner to use the `_type` parameter here, and pass it as an argument to the `forward` object.
this is the wrong place for this, we should not change the `config/kinto.ini` file.
The `!r}` is the only thing that can be `!` when the `D` is initialized. I'm not sure if this is the right fix.
I think this is a bit of an overkill but I think we should just remove the `if` condition and change the condition to just the conditional, otherwise the conditional would be a bit more readable.
This is not needed.
I don't think we need this line.
This is not needed. The `addons` package should be removed.
I think we can get rid of the "Peer %v" log statement.
This is not the same as the other changes in this file. The original version of the PR is to make it more obvious that it's in the same PR.
(style) line over 80 characters
This is a different thing than this one. It seems like we're using the old value. I'm pretty sure this is a different thing.
I think we should move `./pants help` to `utils/utils/...` and `utils/pants help`, to be consistent with other tests.
Can we just pass the existing certificate to `make update`? It's not a big deal but it's a bit confusing.
I think we can remove the `/opt/R/#{r_filename` and use `/uint8_t` here, as it is now used by both `/opt/R0_t` and the `/uint8_t`
Why do you need this? The only time we call it out in the code is, but we can't change the name of the field in this PR.
This is the only one that is using the `ions` package, so I think we should keep it for now.
Should we keep this as the default?
I don't think this is right. The current solution is that this function is not being called, so it's only called once.
Shouldn't this use the `slaves.get(0)` method?
I think we can use the `mcontext->xflags` variable here.
I don't think we need the `pullRequestTitleRegexp`, since we're not using the `pullRequestTitle` variable here.
We should also add this to the `src` below.
This should be done in `setup_form_fields_style`.
Why not just call it `_STARTUP_LOADER` ?
This is a good example of how we could get all the `webkitGetAsEntryApi` from a list of dataTransfer, but I'm pretty sure that's not the best way to go.
This was the only place where we were using this.
Why was that removed?
This is not a good idea. It's better to check if the `!isort.equals(that.transform)` exists and return `undefined`.
This is a breaking change, but I think it's better to use the `List` field in the `protected` class rather than `java` to make the `List` public.
I think you can remove this and add a `@author` annotation on the `Abstract` class.
This is a bit of an awkward name, but I'd prefer to have a more descriptive name for the SAMPLERS, like `ASSIGNERS.utils.toString` or something like that
I think this is a leftover?
This is not a valid option. The `stats` will not be available at the moment. The `stats` is not a valid option, so it should be `stats[200, stats.to_json], stats]`.
This is a little weird, I think we need a different commit for the old code.
I don't see where this is used.
Why not `state: RECONCILED`?
Line is too long. [81/80]
Why the license?
This will not work with `identifier.toString()`
I think it's not used anymore.
I think you can remove the options argument here as well.
This is a bit of a weird pattern. What is the reason for this change?
Could this be `errors.go` ?
Should we add a `SettingValue` with an `IIRC`?
Why not just `IsIntegrationEnabled`?
nit: `self.locator` is not used anymore.
This should be removed
Can you also remove the explicit explicit `_validate` here?
Not sure about the "bolt" parameter here, but I don't think we need to change this.
Should this be changed to `c == 2018 vesoft inc. All rights reserved`?
This check can be moved to the `if (isSampleScan() && !isisHbaseTable() && !isPartitionNameSpecified() && !isisHbaseTable() && !isPartitionNameSpecified() && !isisHbaseTable() && !isHbaseTable() || !isisHbaseTable() && !isPartitionNameSpecified()`
I don't understand this. Why is this being added? I don't know what is the difference between the two.
I don't see any `.min !== row.treeNode.children && row.treeNode.state === 'collapsed'` defined anywhere?
I'm not sure if this is the best way to do it, or if it is the same thing, but I think it would be good to add it there.
This change is not related to this PR. The `value` variable should not be removed.
It would be good to make it a `static` interface
This is the main change that will fail in the future.
I'm not sure if this is the right place to put this. The only place this was used is in `Dockerfiles` itself. The `SpecSpec` function has to be called in `SpecSpec.go`. The `SpecSpec` package is used in `SpecSpec.go`, but it's a bit confusing to call this `dockerfile` in the `SpecSpec.go`.
The `having` is not necessary.
Shouldn't this be a `try/finally` instead of a `DevDev`?
I'm not sure if we need to use these as well. It seems like we could just use them in the same file.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
is it possible to use the env variable `Component`?
Can we make the `true` case a constant for location oracle?
Why do we need this change ? The rest of the changes are unrelated.
If this was a bug, should we consider checking the id in a controller spec instead of creating a new controller controller and using the existing controller?
Should be `<=`
Doesn't `SiteRunning` need to be `nil` here?
I think this is still not needed, the config is already in `fields.go`
nit: this is a little hard to read
I think you can delete this line now :-)
I think it is better to just use `run_with_args(docker=None)` here and in the `if` statement.
Why do we need to use the `keybase` attribute for `keybase`?
This is a bit confusing, since you're using the Cesium here, but it's not the same.
This is the only place where we want to log the output, right?
Shouldn't this be `jit-2018-config.config.config.config` ?
Why are we adding this here?
I'm not sure if we can make this `if` -- it's not clear what it's doing in the model
@jridgewell Is there any way to make the file name more generic? It is used in other places in the codebase and I think it is better to just change it to `org.apache.commons.lang3.StringUtils` to match the new name.
update "let's expose that everywhere else"
We don't have to do this because we are now throwing `Comparator` in the `Comparator.close` file. I think we can remove the `Comparator` and just have `Comparator.close`
this is not needed. It's already in the main thread, it's already in the main thread.
Why is this change needed?
This is the only real change in here.
I think this needs a different wording, otherwise the `is` and `or` can be removed (see `is`)
Metrics/LineLength: Line is too long. [83/80]
If you're using the `if err != nil` check, then you should change `err = app.Stop()` to return the error
I think the `RTPSWriter.h` and `RTPSWriter.h` should be removed.
Is it worth it to import it from `spack.go`?
If there are multiple instances of `socket` that are not used anymore, can you revert this line?
This should be `const flattenIndex = "parent"`, not `childIndex`.
This is the wrong place for the above. I think it would be better to just use `Object.isEmpty`
I think this should be moved into the `if err == nil {`.
This file is not used anywhere else.
This should be a debug log.
Why do we need this?
`Unknown` is a better name for this.
Is the `cancel` for the new `cancel` call intentional?
I think we can remove the `with open` function now, since the `load()` function calls it from the file.
This is a change in behavior, I don't think we need the `entity.qstring.method` parameter anymore.
I think this should be `read.locality.task.initialize.threads`
This should be removed.
This is a change from the current behavior, but I'm not sure why it was necessary. The code was using the `VkDescriptorSet` to be the default behavior, but I don't see anyone making it a `VkDescriptorSet` to be the default.
Is it better to use the `pwrd` constant in this class ?
why not use `strnlen(tmp_optarg)` here?
We don't have any tests for these, so I think we should change `cc` to `cc`.
I think this should be `render(EntityEntity).to.else`
I think the `.to_string_hex` check should be moved inside the `if` statement.
Why do you need to add this?
This is a pretty generic way to do that. What do you think?
I don't think we can remove the `for (var i = 0, name; name)` because it is not a `float` and it's not the case.
I'm not sure if this is the right place for this - I think it should be `unknown.createStatus(&&&` instead.
Isn't this the same check for `v.length === 24`?
Is this a bug fix?
I don't think we want this test to fail.
This is the only place we can do that.
It's a bit confusing that the `@memberOfPath` is the only one we use. How about `spreadPath`?
why not use `Observe` here?
can this be `.match(/\w+/`?
why not use the `Any()` here, it's not needed anymore?
Why not just `return errors`?
This file is unused.
This should be `elif inp_f in ['compiler_includes.json', 'compiler_info.json']:`.
This is not the right place for this.
Please use `Block.RDS` instead.
This is the only change that affects the user's perspective. I'm not sure if it's worth it, but I'm pretty sure we're going to be doing this for now. I think it would be nice if we could make the `plan.first` be a `private` instead of a `index`?
Why are we using the default here?
This could be a `@Constants`
Why are these being removed?
Is there a reason we need to change this?
I would use a more descriptive name, e.g. ` IPV_NAME_for_3`
This will break if the value was set, right? I'm not sure how this will be false, but it's a reasonable thing.
This is a very generic name. What do you think about renaming the function to `TeamTeamKeysKeys` or `TeamTeamIDIDID`?
Why is this package package changed?
I think we should just return ok here.
Why is this removed?
Is this change intentional? It seems to me that `processName` is a ` blank` and ` blank.CommandLine` is not defined here.
I think the log message here is not correct.
This is not needed, we are not doing anything with `isLabel`.
Why are we doing this check here?
Why is this class protected?
We need to ensure the log is not in the original message.
This one should probably be `exception: %s as msg: %s`
I'm confused, this is a change in the docs, and the `<env>` tag below is not necessary.
@deads2k I think we should just change this to use the `storageTarget` package name instead of `test/storage`
This is the change that will be correct. The `securitycenter_api_client` option should not be in the `ciphercenter` package. The `SecurityCenterClient` should be removed from the `ciphercenter` package.
I don't think it's necessary to do this here. The `SYSTEM` package should be moved into the `nativeSys32` module.
why is this changed? I would expect this to be a separate pull request, not a separate pull request
can we make the file match the file name?
Why do we need to check that it is `None`?
@sahbi-ktifa Can you please add your IDE to the API?
I think we need to move this to the `seelog.Vlord()` method. It will be a bit more readable and also we need to do the same for the other methods in this file.
I think it would be cleaner to have the `currentcurrent` and the default value of `rgb`, to avoid the warning in the future.
I think we should also have a version_version option. If we do this, we could probably just have a version_version in the version and use that here.
nit: I think the word `import` is unnecessary
Is this change related to the PR?
This is a bit of a weird pattern, as it's only used in one place. Maybe we could just use `--ad-config` instead of `--ad-config` and just have the env variable in `RCLONE_CONFIG_PASS`?
Why not just do `////Test that draining the sessions by any means`?
This is not needed. The `AzureAppServices.Metadata.SiteName` is always `undefined`.
This is not a good idea. The `is_target` method should be used instead.
I think this should be `err`.
I don't think it's necessary to add the "epochNum" check here.
why do you need this? I think it's a list of keys and the max names used in the same way.
do we need to change it to `platform.fillfill`?
I think it is a bit weird that you don't need this. I'd rather have it return a tuple and then call it `setRowHidden` to make it a list (or something like `log.prompt = ...`)
I'm not sure it is a good idea to have it in a separate commit. It is not really a big deal, but if we do this, we could just have it be `maxQueryLength = 4`.
This is a very weird thing. If you want to make a change to the `TopFrames`, then you should be able to remove this check. If you do that then we can just remove this check and just remove it entirely.
We should probably rename it to something more meaningful
Shouldn't this be `|| (isglob && fnmatch (arg, name, FNM_PERIOD) == 0) `?
remove empty line
Is this a typo?
Please use the `onStatusResolvable` helper method to get the state of the target.
`plan.present?` is only available in the DB, and should be moved to `has_annual_plan?`.
This is not needed, right?
This is a breaking change, but we're trying to get a lot of changes to the service in this file. We should probably also update the `AlertmanagerConfig` and `AlertmanagerConfig` in the `config.Namespaces`.
This is a little confusing, since `struct dag_node` is not used anywhere else. Maybe `struct dag_node_comp_unistd` or something?
I'm not sure we want to use this. I don't think we want to use this for everyone. I'm assuming we can use it in the future.
The type of this `omitempty` is the same as `DesiredStatus`. The same applies to other files as well.
I'm not sure if we need this. I think it would be better if we just use `isPackage` instead.
Why not `build integration.deploy`?
I think this was the reason why we would want to keep these. The `&&` check below is a bit redundant and I think we can do it as a separate commit and fix this one
This is not needed, the `Keccak` is already being used
I think we can remove this method now that it's not used.
I think it would be better to keep this as `final_reference` and `user_reference` as it is a list of supported rows.
This is the only change in this file that is not needed.
I think this is not needed.
Why do we need these?
This should be done by `c.c.Get().Resource(c.SchedPolicy, error)`
Use the new Ruby 1.9 hash syntax.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
Shouldn't this be a `modeman.leave(self.key() in Qt.Key_Backspace)` ?
I think the name `EMAIL_RECIPIENTS` is a little confusing. What about just `EMAIL_RECIPIENTS`.
`await` -> `await`
I think you need to do this in `activity.SetTag` and `activity.SetTag` as well
I'm not sure why we need this change
I don't think this is the right place to add a new method. It would be better to just call `duration.addIcons` here and pass the user as the result of this method to `duration.addIcons()`
I think this should be a separate commit
This is not used anywhere, right?
Please use `corev1.Assert` here.
Why change this line?
I think we should be more clear about what the contract we are trying to do here.
Is the `PerByte` the same as `100`?
I think we should remove this file, it's not part of this PR.
`tagline` -> `name`
Can you move the `load_iris` above the imports?
This is the only change that fixes the bug.
Should we also check that the rolebindings has a different set of custom client (e.g. `(Program-controller: "", err != nil, err)`)?
remove the empty line
This is a very generic name, but it should be `final` (or `set`)
This is not needed.
Why not just call `methodUsage` here, and then use the `empty()` method?
why is the `privacyParameters` removed?
Why did you remove the `setStyle` and `setStyle` checks here and below?
This function doesn't have a `LoadSockops()` call, so it should be removed.
Shouldn't this be in `__init__`?
I'm not sure if it makes sense to include the upper bound here. I'm not sure if we can do this though.
Is this the right place for this?
I don't understand this?
Nit: remove the newline
Why did you change this?
Should we also check for `config.SQLITE3`?
Isn't this a debug message?
This should be set in `AbstractMessageHandler`
I'm not sure this is the right fix. What is the reason of this?
this is a debugging debugging pain, we should probably move it to `test/child_process_index`
Metrics/LineLength: Line is too long. [122/120]
Please use `isNotBlank()` instead of `item.getType().isRepeated().isRepeated()` for consistency.
Please add `.has_b64encode()` to the end to avoid double quotes.
AFAIK we are using `std::string` here.
We can remove this and just pass `client machine` in.
I think this is a bug fix.
what is this change for?
we can probably just make the `/` tag tag `/`
Hmm, this is a very minor nit, but would it be nice if we didn't have a separate variable for this, e.g. `noOp`?
why remove the deprecated method?
This should be in a separate PR
I don't think we need this import.
can you add a trailing comma?
I'm not sure if we should do the same thing here. If we do not need to do this, we should just remove the return from the function.
I think we should keep the old import and use the new one.
Can we use `|| beforeChangeResult[0] === null` instead of `null`?
Is this still needed?
I'm wondering whether this is a little hard to follow, but I don't think we should do this.
This is a bug, I think it's better not to use `if err != nil` here.
What happens if the string is not an invalid string?
I'm not sure this is the correct thing to do, is this something we can do in the future? I don't see a need for an `Error` here, just wondering if we should be more specific about what the best way to do is
This should be `getTransactionLocationByHash`.
nit: can use `is` instead of `value`
This should be `int64_t pid` (and below).
Use the new hash syntax `if !@user.id`
Does this need to be in a `try` block?
I don't know if this is the best place to put this.
Please update `_dbmField` to `_reset_m`
Style/GuardClause: Use a guard clause instead of wrapping the conditional inside a conditional expression.
This is the bug that was doing nothing. I think this is a bug fix.
This field is not used.
I don't think we should add these new flags to these files
I think we need a test for this, as it is already handled in the tradePartner function.
Redundant field; will it be useful to have a single-line body on the field? Like `List[string][]`?
Is there any way we can do this?
This should be called in `self.config.fee_per_kb()`
I think it would be good to also add the `Activity` field to the `Activity` field.
This seems to be the only one that's defined in the "const" function. Is it really better?
@blootripaldi is this a change in behaviour?
@tgamblin Do we need this?
@caitp, I think it would be better to have a test that checks for `allow_fullscreen` and `allowfullscreen` if the user doesn't have the same name. I'm fine with it if you want.
This is a breaking change. We should not be using the `toUpperCamel()` method here.
Why not use the `#show` route here instead of hardcoding `#update`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
"as input to the subcommands 8 8"
Can we just make this a `expect_authed_to_access_event_fired_for`? That would avoid the need for the second half of the list, and also make sure the `.has_video` call gets called with a `expect`
Why is this needed?
Can we use `getNetworkPolicy` method here instead?
This test should be updated to remove the assert
I don't think we should be doing this, since the user will be able to get the `7`.
I'm not sure if we need to add the duplicate file here, since it's a bit of an error. Maybe we can remove it?
Can we use a mock here instead?
I'm not sure about the extra casts here.
Can we put the ORDER config name in order to not change the name?
This is a change in the public API.
Can't we just remove the `System.IO` and `using` statements?
This should not be part of the public API
This is not a required field, you can just remove it
Why do we need to change this?
Shouldn't this be a global constant?
The `armor` variable is used for both `std::floor` and `armor`. I think this is the only change that affects this. The `std::Fil` is used for both `armor` and `std::Fil` and `armor` values.
I think this class is not used.
I think we should use the `StateConfig` type here, as the other methods are used to create the `StateConfig` and `StateConfig` for the `StateConfig` and `StateConfig` to make the code more clear.
Do we really need to make it public?
I think you can just remove this and just call `get_published`
I'm not sure this is the best way to do it. The problem with the test is that the `parse` method is not in the path, and the test will not be executed on the path. I think it would be more readable if the path was in the path (which would be a problem, because it would be a different file)
Is the default implementation of Felix to be 0.0.5s?
I think this is the only place where we should use a `ZeroOrNil` function.
Why is this needed?
I'm not sure this is a good idea. This is the only way I would think we should change it for the `.update` to be `.r`, and if it is not `.r`.
I think we can just delete the `/` here.
Why not use the `error` here?
I don't think this belongs here, as it is a part of `email_address` and it's not a part of `before_save` which is a very good choice.
I don't think we should use the default value here.
I think we need a check here to make sure we are only testing the case when we have the original `CA_BUNDLE_FILENAME` value.
This is a no-op, but it seems to me that we should remove the check. It's used in `pkg/cmd/server/client.js` and not `pkg/cmd/server/client.js`
I don't think we can do this, we should just remove the `run` argument from the `run`. I think it's a no-op in the code, but we don't have any other places that we can do in this PR.
This should not be necessary. The `type` parameter is already `null` if `type` is `null`
`parentRole` should not be passed as an argument to the function.
I think this should be a separate PR.
This is not the same as the one in `Build.go`
I'm not sure that this import is required.
Why are these lines changed in this commit?
this is the actual fix, right?
The test was not working. It was a bug.
Why do we need to check `\n` here?
I'm not sure why this is needed.
I think we can remove this and just call `set RequestFactory` in the `setDefault` method.
The `Warning` here is a bit confusing. What about `waitMetadata`?
I think it's better to use a `.MetricsProcessors(c.MetricsProcessors...)` here. The `MetricsProcessors` has been already set to `false`, so this is fine.
Why not keep the year in the other files?
this is a test, no?
can you check if `is_discriminator_key` is a non-empty string?
the old condition is not correct, because the empty imputs can be defined as empty imputs. (same for other similar places)
Why do we need to have a new test with `IntegTestBuildspecPath` as well?
Why is this needed?
Is it possible to have a constant in `shutdown` and use it here?
Shouldn't this just take the "nanosec" as an argument?
I'm not sure if this is a good idea to use the `--verbose` flag here, but I'm pretty sure this is the right place for it.
This should be in `get_ctu_dir`, not in `get_ctu_init()`
This should be changed to `config-path.Join`
This is a bit confusing, as `version.create(node.getAttribute('alt')` is a `IS_name` function, and we don't have to worry about `img` and `area` but we can't rely on that in `app/views/devise/webal/webal/webal/webal/webal/webal/webal-webal/org/apache/webal/webal-python-tests/testtest.py`
I don't know if it's possible that this will be a breaking change. We could probably just change `userscripts.run_async` to `self._win_id`
I think it would be cleaner to have an explicit return value instead of `0x00` here.
I don't understand why this is necessary?
This should be `if role in (is""" in""" in TLS, ...) and (reason != REASON_CHANGE or STATE_FOCUSED in states))` (or maybe even better) and `if role in (is""" in TLS, ...) and (reason != (STATE_HALFCHECKED not in states) and (reason != ( (STATE_HALFCHECKED not in states) and (reason != ( (L) and (L) and (b) and (b) and (b)
`...` should be on next line, `<%_` should be on the next line.
do we need to add any other response code to the response response?
Metrics/LineLength: Line is too long. [122/120]
This should be `lambda_cwd_on_host`. It is also used in `config/drivers/config.rb`.
This is not a valid message. The code is not really correct. The `toPath()` method returns `null`. So, if the `copied` has been deleted, the `from.length()`, which means we can't change the message.
This will be a temporary setting for the `nupic` environment variable.
I don't think we should be using the same condition as above, but I think we should probably have a separate `pthread_attr_init` method that returns the `attr` value.
Is there a test for this change?
This should be `return !p->data.bo.size != p1->data.status.size != p1->data.status.size`
Should this be `true` or `false`?
Seems to be unused now
Should we update the `_tab` docstring to mention the new name?
I think we can remove this file too, right?
Why is this needed?
Why is it needed?
Is there any chance we could use the existing `html.escape` to avoid the `Queue<b>`?
I don't think we should add this to `kaban-server-schedule.enable_quartz` as it will be relying on the context manager.
This should be `promiseLibrary.reject`
This is a bit of an odd place for this. The `__linux__` is not needed, and the `#if defined` is used by the `#if defined(__linux__)` call below.
I don't see why we can't use this variable. It seems like we should be using it directly.
@ssh.shutdown! was not doing any validation here. I'm not sure we want to make sure that we're not doing anything with it, but it's not a blocker for this PR.
This should be moved to the top of the class
Do you have a log here?
Can you add `git` as a `git` variable?
Line is too long. [83/80]
This import is unused.
This will be a breaking change.
We can also check `self.config_state_before_fullscreen` here.
@Pearl1594 is this a bug fix ?
Is this change necessary?
"CONTAINER" is a bit confusing, why does it need to be in the name of them?
Is this change intentional?
Why not `// TODO: AddonTransform works as expected.`?
I don't think this is used anymore
We can remove this.
Why are these changes required?
I think we should add a TODO about this to make the service more clear.
Is there any way to avoid the `HttpListenerException` check?
I think this can be moved to the "Changing" package.
Why is this required?
`return` is a valid value.
This should not be removed. The `installedVersions` was previously removed.
Can you explain the logic of this method?
We should check if the IPset is nil before trying to write the IPSetLocker.
I think it is still useful to have a test that checks for the `values` value. I would prefer to have a test with the `values` property that is passed to the `values` object.
I don't understand this change, it's just me. Why is this necessary?
Is this needed anymore?
I think it is better to use `go:build` as the second argument to `package.build` instead of `build`
This is the only change that affects this PR
Why are the changes in this file needed?
I think we can remove this field.
I think this is the right place for this.
I think you should remove the other ones.
Can you please update the tests to include the new tests in the tests?
This is a bit weird, we need to do something like `cur_path = cur_path.gsub(/\//,'\\`
For some reason, we should probably have some sort of conditional in here as well.
nitpick, but this is a bit hard to read. I think it's better to change the return type to `List<...>, its coordinates>`.
Why `add_undo=True`?
Is it possible to use the `marshalers` variable here instead of hardcoding it?
I think it's better to move this block to the `playPause` function.
I think you need to check `newProps.checked` here.
Is this used?
I think we should use `.min()` instead of hardcoding `download-directory` here.
This doesn't look like a good change. I'd prefer if this was added in a separate PR.
I'm not sure if this is the right fix. If you're using the Pj_LOG_NONE you might want to use Pj_LOG_IC instead.
I think we should be doing the same thing here as the default.
Why did you change this? It's a very minor thing.
We need to keep `coco_instance` for the `coco_instance` to be used in other modules, and we can just use the `coco_instance` from the `coco_instance` to avoid the `_fpn.py`
We should use `String.format`, otherwise it will be `(String.format)`.
I think this is not needed since we are not using singleton alert.
I think we can remove this and just use the default constructor.
(style) spaces required around that '=' (ctx:VxW)
Why do you need to call `omp_get_max_threads()` here?
I don't think we want these to be in the `KindCloudRunApp` package, they are not needed. The `KindEcsApp` is only used in the `validate` function.
I'm not sure this is the correct fix, but if we are not using `_execute`, we should just call `_get_Case`.
This is a no-op, but I'm not sure why it's needed.
this is the same as `KeyNodeHostname`
Why did this get moved out of the imports?
It looks like the code that uses this method to be part of the API and can be renamed to `break` if necessary.
Can you make this a copy?
I think it would be more consistent to rename this to `object`?
This can be a little more specific. I'm not sure if it's worth it.
Why this change?
Please use the shorthand since we use them everywhere.
Why are we using `[string]`? Is there a reason we are not using it in the `common.json` file?
Is this a change in behavior? I don't think it's needed.
Why is this removed?
This is the only change in this file. I think the other files should be in the `execgs` package.
Shouldn't we also also call `iotex-core/action.go` for this?
Style/MutableConstant: Freeze mutable objects assigned to constants.
Do we have any ideas for this?
Why do we need this file?
Why do we need to check `if (hasStoredPasscode(ctx)` ?
Can you remove this line?
This should use `genesisText[:]` instead of `genesisText[:]`
I'm not sure about the idea of using the global `reset` here, as the global `reset_count` does not work.
We should probably have a better name for this. It's not clear what it does and what the result of this is.
I don't think you meant `f.Vectorized` here
should this use the flash?
I think this is the only change that makes sense in the PR.
Line is too long. [83/80]
I think this should be moved to `ReadAsync`
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Should this be a `HumanReadableName string`?
I think this should be `this.plugin.uppy.i18n('folderAdded')`
Could you please also change `-` to `+`?
This should be `instanceOf(...)` since it's a `Error`.
This should be moved inside a try statement.
I think this is not needed, the field should be removed.
This is the place where the `block_a` check is used, and should be removed.
We should probably log this message as it was before
I don't think this is the right fix. We should try to keep it as is, and just use a `try/except` here.
Hmm, I think this should happen in `ReadSigCodeA`. I don't think this will work.
I'm wondering if it would be cleaner to do `slaOptions.isEmpty()` instead of `if (slaOptions != null && slaOptions.size() > 0)`, and then do the check for `setSlaOptions(slaOptions)` instead of `getSlaOptions(slaOptions)`
I'm not sure this is the right fix. The idea here is to always set a default `s.scope.ManagedMachinePool.Spec.RoleAdditionalPolicies`, and then set it to `s.EnsurePoliciesAttached`.
Why remove this?
Why not just `str_replace("_", " ", $property);` ? It is already used by the `string_replace` method.
This should be a common class, not a common class.
I'm not sure we should change these tests.
I think we should be able to remove this `THEN cardinality` call now that it is already in the constructor.
Is this a typo?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think this should be grouped with `payments/crypto`
@chlowell can you confirm this is the reason why we need the type hint?
This is a good change. The default value should be 0.0.
I don't think this is a good idea, it might be a good idea to add this to the `config` package.
Do we have any concerns about this, or is there some other way to go to?
I'm not sure about this. If we are going to do this, we should probably just make the `lazy` variable `true` and `xwayland` to be consistent with how the other `strcasecmp` attributes are set.
@deads2k i am not sure this is correct. I am not sure if we need to keep it.
This is the only change I see is to use in the `Map<Project>` package.
This is the only change in this file. I think it should be removed as well, or is there a reason why we don't want to do this here?
In the past this is a bit confusing, because we're not doing the same in the `matchers` field in `conj_id` and we're not using it in the same way. I would suggest we use the `conj_id` field here.
@jcxSmiles is a good idea to use a name for this argument, or a name for MolToCXSmiles?
This should be a TODO, not a TODO
I don't think this change is required
This is not the right place for this change. The `strtolower` call is already in the `form`
This is the main change I'm not sure if it makes sense to log a warning. I'm not sure if we want to log the warning.
This is not necessary.
@matt-gardner How does this work for all versions of this? I don't think this is the right place for this.
I don't think you need to add `require` here.
Why is this needed?
Is there a way to make this `*runtimevar.Decoder`?
Nit: remove the newline
I'm not sure this is a correct change, but it seems that this method is only used by the `isinstance` method, which is why the `get(index)` was not being called. I think it is a good idea to add an `isinstance` method here as we already have `get(index)` and `get(index)` method.
I don't like the idea of having an `defaults finder` here, but I think it's a good practice to have to add a `defaults finder` as the `defaults finder` method to the `defaults finder` method.
What's the difference between "attached" and "Este" here?
Can you add a space between `)` and `{`?
Why is this removed?
I'm not sure if we should just make this a `AddTasksRequest` instead of a global. I think it is better to have it be a function.
I don't think we can do this, as it will be a briefly common place for these.
I'm not familiar with the code, but would it make sense to have a test for that?
Why do we have this one in Python?
I think this was a bug.
This interface is used to ensure that the type is `Presenters`
Please remove the extra spaces here.
Can this be made private instead of private?
Do we need this?
Should we add the same logic to `Puppet::Pops::Types::PSensitiveType::Sensitive`?
nit: can we put this into a `__main__` method, so that we can avoid using `__main__` everywhere?
why is this line removed?
Nit: I think we should add a space between `)` and `{`
I think this can be removed, since the controller is not being used in any controller
I'm not sure this needs to be `#if !NETCOREAPP && _throwthrowthrow nullable`
Isn't this the same as `1` above?
I think this should be a `assign`
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is there a reason this is not set by `BackendManagerAfterBackendLogin`?
Nit: I think these usings should be moved into its own file.
Nit: I think this is a bit of a hack - but we could just call this `StartMetricsSession` instead of `config.Config`, but I'm curious if it is the case for this. It's a bit confusing.
What's the reason for this change?
I don't think we need this. We already have the status and metric references.
This should be `err := ...`.
This should be the same as the other one in the previous line.
This is a bit of a hack. It's not a huge deal, though, as we are doing it in the same file and we don't need to return a list.
This is not a good idea, but the test is failing because of this. I think we should be consistent with all of the `pkgsToBuild` and use the new `pkgsToRebuild` and use that in the other tests
This is the fix for #8993, but the rest of this PR looks good.
I'm not sure about the order of parameters here.
Should we also add this to the other `sigs` package?
I'm wondering if this is the best way to make this function more generic.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
why not just use a `dictLength` variable here and use the constant in the `get_Deflater_JDK82527`?
I think this is the only change needed in this file.
Why did you change this to `true`?
Please use `if (year%4==0)`
Do we need this? It's already a snapshot, so we should be able to use it.
i think this is the right place for this.
Can we use `self.program_args()` here instead?
> canSeeInvisibility [](start = 16, length = 6) I think we should change this to `canSeeCreature::isInvisible()`.
I think this is a bit confusing, because it's a bit confusing. Maybe we could have a `GetOrReplacement` method on the `ReplacementSubstitute` method?
Do we need this function?
Shouldn't this be in the `if (config.node.peering_port == network_params.network.default_node_port)`?
I think this line should be removed?
Should this be `if !a.NoRemoveUnusedShapes ||a.removeUnusedShapes()`?
I don't think we should add this.
`get_thread_private_dcontext` can be removed.
nit: I think you can drop this line
Can we remove this line?
This is the fix, but I think the fix should be to use the same variable name as in `setLoadingLayout()`.
It's not necessary to change `std::string prop` to `std::string` in the constructor and use `string.length()`.
This is the same as the "context" above.
this was removed because we are not doing any validation in this file.
I think we should add `Header` and `Footer` as well.
Why is the `== 0` needed here?
<msg> <msg> <msg> <msg>  queries should not be changed
Why do we need to make BftConfigOptions public?
I think this should be removed.
This can be a strict comparison since there's no need to store it in a class.
Is there a way to make this change in behavior?
This is a very minor thing. If it is the only thing we could add to `getVocation()->getId()` to the spell's, we could add it to the "if 1100" section.
Why is this being removed?
Use && instead of and.
this is a bug fix. You can remove this method entirely.
We should probably rename this file too.
why not use `mergeLabelsAndAnnotations(newDeployment, appsv1.Deployment, &Deployment.DeepCopy() )` here instead of adding another one in the list?
Nit: `debug` is not really a good name for this.
Is there any chance we could use the limit limit here?
This is a breaking change.
I think this should be `component.pendingEffects.forEach(invokeCleanup);`.
Why is this file changed?
I think we need to make sure the videoConstraints isn't set to true here.
Might be worth adding a new column for this feature too.
I think it is good to have a test for this, as we have a test that checks whether we are in fact fact that the `--js` flag should be set to `None` and then we can't do that.
This is not a good idea, we could just call `Append(err, t.Stop())` instead
I think we can remove this.
I think we can remove this `if err == nil {` statement now
Why would we need to add the other settings?
This is not the right way to go. The `useRewardingFund` is not the `useRewardingFund` (it is the `Process` function) but the current `Process` function has a `this.d` field, so I don't know what the `this` means.
This seems like a bugfix for me. Can you please remove it?
I think it would be more readable to have a `BlockHeight()` function that is used to configure the network.
I don't think we should be returning anything here.
This was a bit of a hack.
nit: can we use `StringUtils.isNotEmpty` here?
I think we need a more specific check here. The other way around is to check the `canBeSet` property.
I think this is a bit of a breaking change, maybe we could move this to the `fetchRefreshSelectedEventsData`?
Nit: We can remove the `&&`
this is a breaking change
I think we need a different name, we can use a different name.
I think this is a leftover from another PR.
I'd prefer if we could make these `DD_IsAppInsight`, `DD_IsAppInsight` and `DD_IsAppInsight` as the default, and `welcome` would be a more generic name.
This should be `goto error`.
I'm not sure why we are not just removing this.
This is the wrong test.
This is a very small thing, but I don't see any code that uses this. It's just a minor thing, so I'm not sure it's necessary to make a copy of the input.
I think this can just be `super.setup_rvm?`.
I think this is a good idea to use `list` for the `list`.
I think you can just remove the `item=True` here and remove the `)` in the `if` above.
This seems like an odd change. Is that intentional?
How about we use a `map[string]string` here instead of a callback?
I don't think we need to do anything about the browser here.
why is this needed?
I'm not sure this is a good idea, but it's not really a good thing to use.
I think you need to use `quoted` to avoid the need for the `quoted` variable
Should we make it explicit?
`IsMyRepos` is not needed here, since the `gogs` package is already added to this function.
Use the new Ruby 1.9 hash syntax.
Should this be `boolean` ?
I don't think we should be changing this name.
This change doesn't seem correct. You're using a `X64` variable here.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at method body beginning.
Line is too long. [90/80]<br>Put one space between the method name and the first argument.
I think this can be moved inside the `if` block.
Is there any way to check for `isAttackable`? If not, we should check that `client.getWorldType()` doesn't return true here.
Can you explain why this change is needed?
`CollectFunc` and `kube-ipvs0` are not required here, as we're just using the same value for `origin`, and the same value is used for `origin`.
if re is a string, then you should change the return type of `if not re.fullmatch` to `if not re.match(r'[A-Z]:[^\\]', path, re.IGNORECASE):`
This is a good change. It's a little confusing that we have to add a `case` statement.
why is this change necessary?
I don't think we should change this. The `Short` should not be a valid response.
@mjkkirschner I think this change is not correct. It should be `DistributedSpanContext?[HttpHeaderNames.NameId`
I would use `org.mule.runtime.module.lang3.StringUtils#Equals(org.mule.runtime.module.lang3.StringUtils)`. Also, I would use `org.mule.runtime.module.lang3.StringUtils.StringUtils.isTrue` to get the same thing.
Should we also check that the caller has changed in `uint64_t
Please make this `private`.
Why is this finalizedHeader not needed anymore?
I think we can remove the `scratch` and use it in the `setupDataDiskStep` module.
I don't think we need to check for `sdf`, as we already know that it's not a `string`, and the `string` is a `List` (and the `bool` is not a `string`).
Is this the correct type? I think the name `Bar` is a bit misleading as it is used as a `String` method.
This is the only place where the itemlist is used. I think it would be better if the itemlist were always passed as a parameter, and the caller didn't know about it.
I'm not sure if we should just remove this field.
I would say "this.getClass().getName(), " does not implement expireSnapshots"
This is a change of behaviour that's not related to your change, but I don't see why we need to do this.
Is this the right value?
This is the only change that affects this change.
nit: "list of violations" feels a bit nicer here, since the name of the param is not very descriptive.
Is the `<Provider>` not required here ?
This is the only place where I think it's safe to call this.
Is it possible that this is a `setObjectName` object in the task's task?
Why do we want to change the name of this variable?
(style) line over 80 characters
This file needs to be added to the PR.
This should be the same as in the other test classes as well
Why not just have a solicited leafnode and have the same value as a hub?
why is this in the `else` branch?
I think it might be better to use the `<a>` tag here, as we do in other places in the future.
Why not just use `testDBFile.TempFile()` here?
This is a bit confusing, why is this being added? I'm assuming the error message is not handled by the `UserOut.Warnf` call?
I think it is better to do `Info.get("trie account integrity", "key", fmt.Sprintf("%x", k))`
Why is the parent still being removed?
isn't this going to break the `@team_plans = { return false }` on `@team_plans = { return false }`?
We should use `issubclass(subject)`.
This is a bit of a hack but I think we should be checking for chit->isValid() and check that chit !=isValid() is not set in the same file.
nit: remove unnecessary newline?
@roipo you can't change this. This is the only change that works.
This is not used anymore.
This can be removed. The `_InternalFrame` has already happened in this `__init__`, which is now called in `_InternalFrame`. The `_BaseElement` function is now being used in `__init__`.
I don't understand the purpose of this method. I think the code is not correct, it should be moved to `getResourceOnWithResource()`, and the code should only be called in the `getResourceOnWithResource()` method.
This is the wrong place for this
Why did you remove this?
I think we can also remove the logger.debug since it is not needed anymore.
Why removing this ?
The `moves` is not imported, so it can be deleted. It's not used anywhere else.
This is a breaking change.
You don't need the `use System\PluginBase` anymore.
This is a bit confusing, as it's used in doc.go and is not very clear.
This should probably be `Close()`.
I don't understand this change, but this change is a breaking change.
This is not the right thing to do, but I'm not sure how the `repository_manager` flag is used here.
Why do we need to keep the old constructor as well?
I think we can remove the `GHashTable` import now that we're removing the ` ret_modified_regfile_content` part.
nit: can we make this a `const` please?
I think you should avoid using wildcard imports. It's a good idea to use wildcard imports.
This is the actual fix. The problem is that we don't have the `status_finder` set in the task, and we don't have to do that.
(style) line over 80 characters
This doesn't need to be an `else`
This is not a valid name.
I'm not sure this needs to be done for everyone. It's not a big deal but it's not used anymore.
Let's remove this and use the one in the error message.
We should use `LOG.finest(String.format(...)` here.
we can change the signature of this function to `--allow- authenticated`.
I would prefer to keep this as an optional argument, as it's a bit confusing for a class.
why is this a separate function?
This should probably be `tmp = read_sensor_sysfs_file(pglob.gl_pathv[i], SENSOR_SYSFS_TYPE, (void **)&tmp);`
This is not a "key" but it seems like we're trying to use the `key` in the keymap.
I don't think we should be using the `is_to()` function here.
This import is not needed.
This should be changed to `or (role in (controlTypes.ROLE_DELETED_CONTENT,controlTypes.ROLE_CodeSERTED_CONTENT)` and `or (role in (controlTypes.ROLE_ MASK_Postertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertertert
This import is unused.
what is this[:0],?
I'm not sure if this is the best place for this. I think it would be more useful to do this in a separate PR.
why not use `cStorPoolGot.Spec.Disks`?
I think the only way I can tell is that `default` is the same as `IEqualityComparer` is in the exception message and we don't have to worry about it.
I think this should be `this.logger.info("Kill has been called on execution " + this.execId + " is already finished.");`
I think we can remove the default setting.
This is a very small change that makes sense to me.
Why did you remove this parameter?
Please update the doc accordingly
Why is this change needed?
Is the value correct here?
I think we can just set `isFocus` here. We don't need to pass it as isFocus, and the `_oldReviewPos` is always true.
Do you know what the block of this block was doing before?
I think this is a leftover from the previous code.
It's not clear to me why this is needed?
I think it would be more readable to use the `addrs.ok()` call here.
I don't think this is the right change for this PR. The `i2C_USE_QUOTES` should be moved to the `Settings` package.
I don't like that this is the correct way of writing a function to a function. It is just a bit weird that it is a function, and it is a bit hard to follow. I'm not sure how to do it, but I'm not sure if we should do it now, and if we can do it now, we can just do a function in the doc.
I'm not sure if this is a good way to go about this. I'm not sure if we should be using the administerable flag here, but it seems like the administerable flag should be used for every request, and if it can be used in other places where it should be used. I would also remove the administerable helper method, and use `administerable_by?` as a parameter.
Could you use a different name? `PaymentInfo` sounds like a function name.
I'm not sure if this is a correct change. The `limit` is a ` posNext` that is not `0`. I would expect this to be `0` or `0` to be `null` if it is not `1` (or `0`)
I think we should check the stock of the stock address before doing this.
@deads2k I don't think you need to change it in the PR
Use the new Ruby 1.9 hash syntax.
Is it really needed?
This is a bit confusing to me, but I don't see any reason to do it here.
I don't understand why you need to do this. The `config->http_proxy` variable is not set. I think it should be removed.
This should be `continue`
I think this is a leftover from previous PR, but it's not a good idea to change this.
Shouldn't we also check if the key exists for `splitSize`?
Why do we need this?
I'd prefer not to have this check here, as it is not used in tests
Is this the right way to do it without setting the default? I would expect the default value for the default is the right value, and then pass it in the `GET_CONTEXT` value.
Please use `return` and not `return`
@mattpap Ah, I don't know why we would use the "positional" name here.
I don't think we need to change this. It's a small thing that is used in a different file.
nit: I'd prefer not to have this check in the `__init__` method. It would be more consistent with the rest of the file
This was a bug, but the test was failing because of the test.
Is there a reason for this change?
This should be a `else` statement.
I don't think we should change this, but it is a breaking change.
what's the reason for changing this to `Integer`?
Can you explain why this is needed?
why this change?
Nit: I'd prefer if this was added by accident.
can we make this a constant?
Why are you removing this?
This is the main change that fixes the bug, but I think it's not needed.
I don't think we need to change this, we can just remove it from this pull request.
Please add a note that this is used in a subsequent PR.
Why do we need to change the type here? It's only used for MonoType.
It's not clear why we need this method. It is used in the test.
This should be in the `Context`. You should be consistent with other types.
I would prefer if we could make the name more explicit. `--class-wise` or something like that. `--class-wise` would be more appropriate. Also, you can do `--list=whether eval` to make the name more descriptive.
Why is this needed?
This change seems unrelated.
This is unused.
what is this change about?
This is not needed anymore.
why do you need a bool at all?
I think it's better to just have this be an override, and have it be an override.
This is not used anywhere.
`ctx.IsReadOnlyReadOnly` is the right value for `Count` - it's the default
I think we don't need this import, we already import it in the standard library, and this file should be renamed `options.options.options`
I think it would be good to add a check that the image was created by the container.
This should be removed.
This should probably be a different PR.
I think we should be able to get rid of the ifdef here.
I think this is a little too vague. I would have thought we had already done that in a single place.
Do we need to do this?
So this will cause problems on a single line?
@bparees I'm not sure if this is correct. The `_blockTree` is not the correct value for the user.
I think we should just use the `getUrlFromRouteCache` method here, as it will be called for the `Dataflow` and it will not be called for all subclasses.
Is this necessary ?
You can remove this line.
This is a bit of a weird thing, I think the `_allLayouts.StackTraceUsage` should be moved to `_allLayouts` and `_scannedForLayouts`
This test is not needed anymore.
Line is too long. [83/80]
I think we should keep this import here. The only reason we are removing it is that we are using a "tellable" type, and the "tellable" type is the name of the function and the "tellable" type.
@smarterclayton did you intend to change these to `str()`?
Style/SymbolArray: Use %i or %I for an array of symbols.
Why is this removed?
Is this a breaking change?
nice, this was the only change needed to make the change here.
Would it be worth having a test for this as well?
Why is this removed?
I'm not sure about the point of having a `before_validation` method in the model where we can't actually do any validation for the `client_id` object, so I think this is fine.
I'm not sure this is a good idea. The `IKestrelHttps` method is used only for the tests and the tests are failing.
should this be `select()`?
Why is this needed?
nit: you can use `return fs.fsError(error, path);` instead of `return fs.readdirSync(path)`
We should be able to run this on `config` as a dependency on `plz` and not `config.toml` on `config`
This file is not used anywhere else, and can be removed.
This should probably return `None`, since it is not a function, and it is a function.
I think this is a bit confusing as it is a bit misleading. The `AddressManagerOwnerAddress` is a `AddressManager` and the `StandardBridgeAddress` is a `ctx.Address`.
Use the new Ruby 1.9 hash syntax.
This wouldn't be needed.
I don't see where this is set. Can you use the same condition?
This is not a valid field, it is not the exact same as `visitLeaf`.
Place the . on the previous line, together with the method call receiver.
This is the wrong way to go. The `NodeSelector` is only called when the `Spec` is set to `""`. The `Spec` is the `NodeSelector` and the `Spec` is not the same as `NodeSelector`.
Is it possible to get rid of these variables? I'm not seeing it used anywhere.
I don't think this is a good place for this. It's not a big deal, but it's a minor thing.
I think this should be a private method.
Why not use the `value` variable directly?
This is the right way to go. The `--module-path` option will not work on Windows. You should use `--modulepath--path` to set the `--module-path` option to not work on Windows.
The subnets field is not used by the load balancer.
Wouldn't it be better to move this to a helper?
I think it's better to use the `URate.Increase` option here instead of hardcoding the `URate`.
Why is this needed?
Why is the default `HeaderRestart` being `None`? I don't think this change belongs in the PR.
I don't think the `kapi` is needed, the `kapi` and `kapi` are the only ones that contain the `kapi`
Why not just call it `kubebuilder.json:"resources,omitempty"`?
This is the only thing that's about the source name, I think it's better to have a ` credential` option that's used for the ` credential` option, and then `get_many` to be called when the source name is `elgg`.
This should be changed to XKeysymToString
This is not needed.
Why is this necessary?
@deads2k i'm not a fan of having a root device device here, but I don't know if this is the correct way to fix this. I don't think we need to do this, as it's the root device device name.
I'm not sure if we should add this to the base `Read` interface. I'm not sure we want this to be here.
I think this can just be an empty list, right?
Should we add an `Stop` field to the `locationName` field in `location-doc.conf`?
This is the only change I've made to make in the code. If we are going to use `_get_windowText` for the `WindowText` class, we could just use `WindowText` here instead of `WindowText`
I don't like the `castemplate` package. I don't think we should be using it here.
This line is not needed.
Why are you removing this?
I think we can remove the `auto` now.
I think this should be a public constant, since it's only used in one place.
What about the other tests that use this change?
I think it's better to put the full URL into the `match_thr` function.
Is it necessary to add this function to `api.go` and pass in a config object?
Please use `String#Equals(String, StringComparison)`
Shouldn't we use the same range range for both `0.2.0` variants, too?
This is a bit weird, it's only a `bool`, not the `string`, not the `@param {boolean} hasFillDataChanged Indicates whether the original fillData has been changed in`. I'm not sure what the best thing to do here is, but if we want to be more specific, I think it's better to just say something like: `!hasFillDataChanged Indicates whether the original fillData has been changed in {boolean} hasFillDataChanged Indicates whether the original fillData has been changed in {true} but the original fillData has been changed in }`
For the record: should we also add the Dagster import here?
This is not correct. `element` is already a dict in the constructor, so you can remove it.
This log message should be updated to reflect that the datastore flag is not set.
This is a little weird, why are we doing the implementation?
I think this is a leftover from the previous PR. Can we remove it?
I don't think we need these `using`s.
should we change this to a `trigger_instance_id`?
This file is already loaded in the source code base
Is there a reason why we need the `spec.DdlibWafVersion?.ToString()` call here?
Should be added in the group above
Would it make sense to log the console as a warning here instead of having to re-define it here?
I'm not sure if we should be using a `data->link` here? I think we should just remove the `data->link` part.
I think this should be `item.RunTimeTicks - item.UserData?.PlaybackPositionTicks / 600000000`
Why are we adding this extra param?
We should use the ` task_params` in `sign_out_tuning.js` and `sign_out_or_fix_params` in `sign_out_tuning`
this is the only place where we call the constants.
I think you need to remove this line. The tests are failing because it's not related to the PR, and I'm not sure it makes sense to have it in the tests.
Why is this needed?
We should probably have a unit test for that
Would you mind adding a TODO to explain what is happening here?
remove empty line
Why do you need this? It's a string. Also, I think we should use `name: 'Analytics'` instead of `settingsEdit`.
Please remove the parens around the unused line.
Should this be `host.HostFactory`?
This looks like a bug, I think it's better to use the `goBackInTime` function in `go audio` and use it here.
This is a bit confusing. I think the `getElapsedAndTotalIfPlaying` function should be used for all the other tests.
I don't think this change is necessary
What's the point of this change?
Use the new Ruby 1.9 hash syntax.
Why are you adding the license license license license license in the other files?
Why is the default needed for these?
This is a little confusing... why not just return `true`?
@benjyw is this a tiny bit of an overkill?
This is the wrong place for the NutritionProductFragment. It can also be removed.
This is a breaking change. I think the PR is still useful, and I'm not sure why this is needed.
Should this be `dump_puppet_log(host)` ?
Should we use `size_t` here too? I don't see any potential use-case for these, but I think we can use `size_t` for these.
I think we should make this a constant.
This is a breaking change, and is probably not a good example.
Please use `String#Equals(String, StringComparison)`
This change is not correct, because `ArrayType` is a `ArrayType` parameter, which is a `ArrayType`.
Do we need to set the default value in this case?
@jackfrancis I think we need to remove this
Extra empty line detected at body beginning.
I think this was the only place that uses this.
I think we should remove this, since it is already handled in the `validIndex` block
This will need a `CommunicartMailer` too, right?
Why not `if (this.toolbox_)` instead?
This should be removed, or is there a reason for not using the `BaseElement.First` function?
I'd prefer if we moved this to the `plugins.js` package.
The `URI.join` will call `super.path` if the image doesn't exist. I think we need to keep it in the `super.path` if you want.
I think it would be more consistent if you used `@example`, then you can use `@example.stubString(2, 3);`
Can you add a TODO here to make sure the module name is not an `int32`?
Can you remove these spaces?
(style) code indent should use tabs where possible
I think we should be consistent about the naming here.
This is not the only change needed, we can make it into a single function.
I think this is a good place for this
I think you can remove this and the next `#ifdef WIN32_LEAN_AND_MEAN` below.
I'm not sure if this is correct. `loopBody` should be a ` getDst` rather than a `loopBody`
Why are these lines changed in this PR?
I think this can just be `str(Parent.str(Parent.str(Parent.str(Parent.str))`
Is it possible to get the user to see the task? I'm not sure if we should be using it.
I don't think this import is used.
I think this is not a good place to do this. I would prefer if we can avoid this check here, but we should also make it a bit easier to debug.
Do we really have to use a different name? I'm wondering if we should have a different name for this test, but I'm not sure what the best name is.
I'm not sure that it's a good idea to set `num_classes = 9.0`, but it seems to me that it's only used in one test, so I'm not sure why it is necessary here.
you should also change `numpy.limit` to `List.currLimit()`.
Line is too long. [81/80]
This should be called `// +optional`
Shouldn't this be `cp65001`? I think it's a good time to use `is_ephemeral()` instead of `is_ephemeral()`?
This is not a part of your PR, but I think it is worthwhile to move this up to a constant and have the standard `MetricInstrumentIgnored` method that takes the name, and then call the `OpenTelemetrySdkEventSource.Log.MetricInstrumentIgnored`
I think we should use `DoubleDouble_CONFIG_TO_WINDOW` here.
This is the only thing that needs to be done in the ``static_width=26`` package.
I think we need to add these as constants in the `/pagespeedWidget` module
This should be `==`
I think we should be able to get rid of this `// NOTE` now that we're not using it anywhere in the code.
We should also be using the `common` package for the package name, as it's already in the package
Please add a license header here.
I think we should be able to remove this function from `Tick`, and remove the `*`.
Can you please add a space after the `//`?
How does this work? Does this work?
Not a big deal, but I think this is not needed
Is there a reason for this change? It seems to be the only place we need to support a non-empty value? I think we need to check if the method has been called.
I'm not sure if this is a good idea. It's better to check for the usage, and if it's the case, we should not check for the usage.
This should not be necessary, as it's already in the client
I'm not sure this is needed. The `setup_vars` already exists. The test is not working.
This isn't needed. You're not able to remove the XSP settings.
I think this should be a different commit
I think this should be onConfigurationChanged
Should this be `note`?
We should probably use a more descriptive name for this.
I think this might be better as a `#` statement.
Why do we have to wait for a non-empty node?
Can we just use the `H2O_VECTOR` function instead? That way it's only used once, and it's not really necessary.
This is a good thing to do, because it is a `Set<T>` method. I think it should just have `Set<T>`, since it will be a `Hash<T>`.
Why do we need to check that the error does not exist?
I think we can remove this and just use `SetDiskBlockCacheFraction(float64)`
Is this a bug fix? I think we should just remove this, as it's not a part of the PR.
I think we should move this down to the top of the file, since it's a bit ambiguous to have it here
I don't think this is correct. `MINOR` should be passed as an option, not a list.
This is a bit confusing. What is the `type` in the name of this parameter and the `service` in the message? How does it relate to the parameter?
please revert this
This should probably be done in the `window.showNormal()` call as well.
This is a change of behavior change. Please revert this.
>flatbuffers::uoffset_t [](start = 28, length = 6) Can you please change this to `i+1`? #Resolved
Can we move the validation logic to the top of this class? It's a bit odd that the validation logic is not only for `Assertionpose` and `protoParser` can be used for both.
I don't think we need this check here.
I'm wondering if we can use the `skip_links` helper here instead of `skip_links`?
I'm not sure that this is the right fix since `physicalDevice.GetPhysicalDevicePropertiesKHR` will never return null.
Is this needed? I would expect the dockerEngineValidator interface to be used in the interface.
Could you add a type annotation for this and the other one in this file?
I'd rather have a `return` statement here to make sure that it works for both cases (and is not possible)
For this file, I think we should change the signature of `activation`, to `act_cfg`, and then pass `activation` to `act_constant` in the constructor.
You don't need to pass `options` here, you can just use `options['as_json']` directly.
Is it worth having a single header file that's already in the header file?
should we use `name.replace(/^xlink?/, '')` here instead of `name.replace(/^xlink?/`
I don't think this is the right place for this. I think it's safe to do this, and it's probably not worth it.
This should probably go in `scipy.js`.
I don't think we should be using a `Account::Access`. We should probably just use the `Account::Access` constant here, since we are already initializing the content of the page.
This is an interesting point of view, the variable name is a little confusing.
I think this should also check that `Exceeded MaxAckPending` is not set in the `maxp` case.
I don't think this is the correct place to change here, since it is the default.
I'm not sure this is the best place for this. The code is only used in one place and we don't need to use `.html` in the code.
I don't think we should remove this.
This is the only change in this file. I think it's a good thing to do.
How does this config config do we need to set the config here? I don't know if it's a problem or it's a problem?
This is not related to the PR, but it's just a question of why we are not using the `CHEESE` here
This is the only change I see. The previous version is not a valid default. I'm not sure if this is the best one for the other.
We should probably just make it configurable, no?
if the javascript javascript and the javascript javascript have a unique attribute, then we should also do the same for `wireguard`.
This is a bit of a hack, but it's not a big deal. It's not a blocker. It seems to me that we're not actually using it anywhere. Maybe just remove it from the `Createsearch` and use that in the `_format` and `_format_path`?
This will be a little bit hard to follow.
I don't think we need this, since we already know the `:750` is not supported on the server, so I just removed the `:750` part.
I think this can just be `Metadata.addPreviousMetadata(base.file())`. I don't think we need the `lastUpdatedMillis()` check.
Please use `.detach()` instead of `.detach()`, it is more clear what this does.
Is this the correct type?
This is the only place I'm using the ` create_no_window` function. I would suggest to use `create_no_window` for the default value, and then we don't use that.
I'm not sure if we want to do this now, since the model is already sending to the model.
I'm not a huge fan of this, but I think the `form-group clear-fix` class is used for every component that can't be used. I'm not sure what the best way to go about the `_` here is, so I'm not sure if it's a good idea to change this.
This seems like a very specific thing to do, and should be fine.
I think this import is not required.
I don't know if this is correct.
`KindNode` is not used anymore.
Why do we need to add `array`?
I don't think it's necessary to add the stub to the base class. It's a bit confusing that we only have to have the stub in the base class
I think we can just use `notificationHolder.fsck.k9` here.
This import is unused.
Why do we need `_` here? Is `_` a valid integer?
Is this the right error message?
Why not just do this in `lib/package/openbsd.go`?
I think this is still needed, we can remove it from this PR.
Should this be an option to make sure `style=0.2` is not set?
Can you add these new lines to these lines?
I think this should be `cumulative`.
Why is this being removed?
Metrics/LineLength: Line is too long. [83/80]
I think we can remove `is unsupported` here.
I think it would be better to use `select` here, since the method is only called once.
This is a bit of a question. Why is the error raised here?
Why is this needed?
Should we also add `w.WriteHeader(http.StatusNoContent)` to the `Read` below? This will make it easier to read when the server is not enabled and the response is not.
I think it is not necessary to call `out.HttpMatch = &proto.HTTPMatch{Methods: in.HTTPMatch.Methods}`
I think we can use `Batch` here.
nit: I think we should remove the line break after the call to `Encoding`
We should also add these to the top of the file.
I'm a bit confused by this. If we have the progressGauge, we should be able to remove it from here and then just call `getStatusValue()` in case it is not used.
I think it would be cleaner to just call `ctx.Done()` here and pass it as an argument to the function and call `ctx.Done()` in the function to get the same result.
Should we also check if the method is nullptr?
Is this a bug fix? It looks like it's a bug in the `showAndWait` itself.
I would add a description about why it's needed to add this.
I think this is the wrong place for this, it might be worth adding a new one for this one as well.
This seems like it's a bug, because the `random.seed` is the `== 0` which is the only thing that's used to do with `random.getpid()`
Is this still required?
can you use the files you defined in this file please
I'm not sure this is correct. It's not a valid path, it's a `path.endsWith("/")` call below.
I think we should avoid this change in a separate commit
why not use `metric.Meter.Name` as the metric name?
this is a bit of an overkill. if you don't need it, you can just pass the `auth_based_library_cards` as a global var and use that in the `getConfig` method
please also add a blank line after the `if` to make it clear that the else is on line 588.
This is not right, if the user is not in the last table, the last table should not exist.
This was a typo
I'm not familiar with this change, it seems to me the `seconds` value is used for the `end` member, and `end` is used for both. Is there a way we can use `seconds`?
This is a change in behavior, but I think it's better to be explicit here.
@wido Can you review this? I'm not sure it's a good idea to remove it.
This interface is not needed.
Is this a bug?
Line is too long. [90/80]
don't use `tuples` in this method, it will return `false` if there is no `empty`
I don't like this name, it's a bit confusing to have a simple simple `isChunkMsg` method. It's a bit confusing, as it is used for `isChunkMsg` that is used in the `processChunkMsg` class.
why do we need to set this to true? I think we should not use the existing code.
This is not a boolean. It is a bit odd to me that the function is called from a static field.
This seems like a bugfix. The `else if` should not be here.
Shouldn't this be a `default_type`?
this is a change in behavior... we should not introduce the entity manager in the state, but it is not a problem for the user to see it in the state. So we should just remove this method and just change the one for the `$CODELimit` to be `null`.
In this case, we should probably also change the name of the parameter. I would suggest to use `Pipeline.Azure.ID` or `Pipeline.Azure.ID`.
this is the same as the one in the `new ModelImpl()` method.
I think we should change the `VerifyOutputs` parameter to be `nil`.
Why not just pass in the `result.Table.GlobalSecondaryIndexes` as a field here?
I think we should add a `RLock` function that is used to determine the current block of this function. The function is used by the memory pressure file writing is complete, so that it can be removed.
I'm not sure this should be `self.logstore.fetch_listens(testuser_name=1400000300)` - it's not a big deal, but it's not a blocker.
This should be a separate commit.
I'm not sure if this is the right place for this, but I think it would be better to make the `chan struct{}` be used as an interface for the connection.
this should be a constant
This is a breaking change. I don't think it's needed.
I think this should be `!spec.description.match(/type=regex/`
Should we also add a check here for `transactionFSRepo`?
Should this be `subprocess.client.EC.AuthPath` instead?
Is there a way for doing this to be compatible?
I'd suggest to move this into a new struct, like `validate_page` or `validate_page_` and then using the new struct in the struct.
This should use `mode` instead of `Value.exist?`
I think we should be able to use `cache.locationProvider` in `buildValidDataFileDF` here.
why is this a debug log?
for my own edification: what's the reason for this new import?
This is a bit weird, the `_statsd` above will be `null`. I don't think it's worth it.
You can use `v1alpha1` here
This is not the right place for these. The new RpcApi QUORUM field is used for all RpcApi QUORUM.
We should probably add a new param to this function.
This is the only real change in this file.
Isn't this needed anymore?
This is a bit of a nitpick, but I would prefer a trailing `&&` here instead of `&&`
this import should be removed
This is a good change to make sure we are not using it anymore.
This test is still running on Linux, right?
I don't think this change is necessary.
I don't think this is correct. `BlockHeight()` will return `true` for the value. `types.SignedMessage`, which is not the right value.
This check is redundant now, because `get_lifecycle` already has `get_command_available`
It looks like this field can be initialized in `mDisplayPreference`.
This is a bit confusing. What about just `kvb.store.Filter`? It's used in all places, and it's not clear what this function does.
This is a bit of an unrelated change, but I would prefer if we could make this a private constant.
This is not needed.
This change is not needed.
I think this needs to be passed to the `create_no_window` function.
This is not a good idea, as it will be a good idea to add an environment variable to the service, but I don't think we should be doing this here.
This is not a public API, and should be removed.
@kargakis @mmaxim can we get a bit more details here? I think this is the only place we are adding a `findUp` method that does the `aria-disabled` parameter.
I think the original exception was correct here. The `Culture` argument is not used in the code base and the `InvariantCulture` method is used in `CultureInfo.InvariantCulture` which is not called in the `CultureInfo.InvariantCulture` method.
This should be `FullCert`
Should we also check if the path exists here?
This was a typo.
This is the main code I found. You can use `panic(err)`.
This is a bit of a hack, but I think it's not necessary to just pass the `CloudHub` object as a `Edge` object.
Can you revert this change? It's unrelated to the changes in this PR
This is not correct, because XBP are commonly callee saved in some cases.
Can you please also change the name of the package to use the standard library?
I don't think this is the right approach. The only place this test is testing it is.
You can use `for ftv.contains(f)` here.
This is not the right place to do this. This should be fixed in a follow up PR.
Metrics/LineLength: Line is too long. [83/80]
I think we can just use the constant here, and remove the constant.
Use the new Ruby 1.9 hash syntax.
I think this should be a constant, not a class constant
Nice, I'd prefer to have a separate test for this
Is it safe to change it?
make sure to change the list
This needs to be renamed to grpcStreamingDescriptors.
I don't think we should change this. The `cancel` function is only used by the `cancel` function. The `cancel` function is only used by `cancel`.
This isn't used anywhere.
I'm not sure this is the correct change. The `userGuide.html` file is used for the `user` package.
The group does not need to be a list, it should be a group. The group has already been a list, so it is not a list. We should add a TODO to remove it.
I think these are the only ones that need not be used.
I think we can move this line to `URL` now that #1983 has been merged.
I don't think this is the right place for this.
I think this code is not needed anymore.
can you use a print function for the code
Block has too many lines. [26/25]<br>Use the new Ruby 1.9 hash syntax.
Why is this change necessary?
remove empty line
I think we should remove this option and keep the old one as it is used in the dashboard.
Since we have the `NO_DOWNLOAD` in `open_config["s3Proxy"]`, should we rename this to be `open_config["s3Proxy"]`?
Why is this required?
@Override -> The TODO above should be removed.
If we're going to be using this as a regular expression, then we should probably just call it `skipZero` instead of `onFormatProcessor`.
This is not the best place to put this package. The package is used by other tests.
Do we need this? We're just testing the exact exact same thing as the `round` model.
Is this really needed ?
Why is this necessary?
This is not correct as it is a `\r\n` and it will not be used as a `\b` (the `*` should be `\r`, not `\b`.).
I'm not sure if it makes sense to have a list of resources here.
I don't think this is necessary, we should just check if it's an `cltest.b` before checking the `cltest.b`
I think this should be `(ia != 0 || bb.get(ia) == '\0')` as well.
I'm not sure if we should change the type of the Boolean.
Is it worth adding a new logger here, since it's not really a valid path?
Unrelated change, but I think we should revert this.
this is not correct
Can we just remove these lines?
this was the bug
nit: remove the line if it's not used
This isn't necessary, since we're already using `full_name`
This was a bug.
Why do we need this in the `get_artist_msid`?
This is not needed, we can remove the `char` argument from `flb_sds_len` call.
@bparees I'm not sure this is a good idea...
We can't do this, because we don't want to have a single `Set` field, but we should be using it as a field in the `SetSet`, and we should also remove the `Set`.
why not use `time.time.time` ?
This should be a `__time__` check.
Nit: `const` at the end of the line, would it be cleaner to just change the error message as well?
Isn't this supposed to be in `const std::chrono::duration_cast<std::chrono>::duration_cast<const std::chrono>::duration_cast<const std::chrono>::now()`, and then you don't need the `const std::chrono::duration_cast<const std::chrono>::duration_cast<std::chrono>::duration_cast<const std::chrono>::duration_cast<std::chrono>::duration_cast<const std::chrono::duration_cast<const std::chrono>
Why are we using spaces here?
I think this should be a different name
I think we need to keep this in alphabetical order.
`getServiceReportURL` is not used anymore. It should be removed.
Please remove this.
Should this be an optional field?
`isa<CanType>` not an `Optional`.
I don't think we should be using the secrets here.
This change should be reverted.
Can you please change this to browserStartCommand, it's only used once
This should be changed to just `set_weight` (it's not a boolean, but also an internal layer)
I think this is a little confusing, as we're doing the prefix in the `base` variable, we could just do `return nil`.
I don't understand the purpose of this. It looks like it should be a `@context` instead of `@context`.
This is the main change that makes me think we need to re-enable it. If we want it, we could add it there, and add it to the `showYear: true` below.
this is a bit confusing to me, why not just use `with tgt.close()`?
This feels like it should be an error message.
This is a bit of overkill. I think it would be more readable to just use a simple function for this, and then use a function to store the result.
If the user has no attribute, the user should never hit this.
I think this should be `return len(self.best)`.
Why are these being added?
This is the only one that's used for the `ti` case.
Can you add a note to the docs that we are trying to avoid doing this in this PR?
Line is too long. [81/80]
I'm not sure if this is needed.
`data_vert` is the correct name for this.
Can you use `center_sampling=False` here to make sure it's a utility class?
I don't think we should be changing this to a `commonName` since it's a very long and we can just use `commonName`.
This is the only real change in this file. I'm not sure if this is correct. I'm not sure why the tests are failing. I don't see any tests for the new functionality.
This is the wrong place for this.
Is this really needed?
I think this should be moved to the `else`.
Why did you change the default value of `blockpAPI` to `RetrievalAPI` here?
This should be the same as `esa_'` since it isn't a `SYSTEM_ATTRIBUTE_PATTERN`
This is not a good place to put this. You could move the `LookUpEdgeIndexProcessor` to `createUpEdgeIndex` and just have it call `UNUSED`.
I don't understand this. Why is it not a `gen` field in the `Provider` field?
This is a bug fix.
I think this is a good change. The only place this is used is if KOKKOS_ENABLE_IMPL_DESUL_ATOMICS is defined in the client.
Can you also update the `true` to `true`?
Why not `ctx`?
Why are we changing the default value here?
I would use a more descriptive name, e.g. `ApplicationConfig`, `ApplicationConfig`, etc.
why is this needed?
This will be `all_type=('utf-8')`. Is there a reason we don't want to use a different value?
This is a bit weird, why is this needed?
I think this change makes sense.
Why do we need to change the signature of the `auto* processor` ?
This is a bit confusing, the code in `create_data_index` is not actually used and we should return -1.
This is a breaking change, I think we should not change it in this PR.
nit: `return EvmAccount getOrCreateSenderAccount(null)` would be clearer
Is this change intentional?
Is it possible to have a default `List`? If so, this is fine as well.
Why not just pass the value of the `getModificationDateFieldName` directly here?
I think this should be `version` instead of `version`.
This is the only place I'm seeing where we can use `Flags.StringFlag` instead of `cli.Flag`, since it's used in many places.
This should be `currently_awaiting_approvers` since it's a private method.
This is not needed.
This should be setHours(0, 0, 0);
can you use `github.com/projectcalico/felix/ipsets`
I think it would be better to just use `List` instead of `List`.
Why is this needed?
`use captcha?` is the right thing to do here
I'm not sure if it's necessary to put this in `NewInt`?
I think this class should be private, otherwise it is not a good idea to keep it.
This method is no longer used.
I think it is not a good idea to make this name consistent with the others. The `RemainTimeUpdateEvent` is a bit confusing to have it as a name. Maybe `RemainTimeUpdateUpdateUpdateUpdateEvent` or something. It's not a blocker and I'm not sure what this is used for, and I don't know how much about this.
I think we need to add a column called `Batch_products_for_all`
Can we also assert that these are equal to `0` and `0.schema`?
I don't think we should do this, since we don't have a way to generate a paper-trail anymore.
This will need a panic.
Isn't the `encodeServiceName` variable already defined somewhere else?
I'd prefer we use relative imports, not the global variables
This check is not needed.
I think we can just remove `resourceGroup` from this line.
This change is only needed in one place.
This is a bug fix. Please undo.
Shouldn't the `_` prefix be inside of `transport_Bucket_address`?
I think the `-- Remove-h` name here is unnecessary.
Why is this needed?
Which case can this be a little more specific?
This is a little confusing to me. What about something like `UseUseUserdecorator` or something like that?
I think we can remove `useInView` from `react-intersection-observer` and just use `useEffect`.
I think this should be `balance_on_missing` instead of hardcoding the value here
I think this will be a bit of a hack. If the user doesn't want to have a lock, the lock will never be executed and the lock will be sent to the lock. If it's the lock then the lock will be executed.
Is it possible that we will have an `IEnumerable<T>.<T>` and `ICollection<T>.<T>`. I don't know if we want to change the `<T>` behavior.
Is this a BC break? I don't think it's a good idea to include the entire `Metadata` map.
This is a bit confusing, as `meta charset=\"UTF-8\">\n` is a `null`, and it is a `String` by default.
This will need a panic.
Is this needed? I would expect a `dependsOnWebSpan` method to be called in a `dependsOnWebSpan` method.
I'm not sure if this is the right place for this.
Isn't `AwsSdk` the same as `when /ec2/`?
I'm pretty sure this is a debug log, since we're removing the `debug` log.
Redundant `return` detected.
Missing space after `,`
I don't like the name of the service name. It is a bit misleading, but it seems to be the only way to check if the response exists.
This seems like it would be better to use the default `https_name` instead of `None` here
This method is only used in one place and can be removed.
Please remove the `final`
This change was only here for a while, but I don't think it's necessary to do it.
I think we should use the `&&` helper in `&&`.
I think we should add a `TODO` here to avoid a potential breaking change.
It seems like this should be an error instead of returning the error.
I don't think this is needed. The default timeout will always be the default timeout.
This is a little strange, because we are passing the `options` and not a `Date`.
This should be done in the constructor, as it is not used anywhere else.
Why not use `context.assertNotSet.cs`?
Please remove this line
I think it would be clearer to keep the expectation that the expectation was sent and now the expectation was not present.
I don't think we want to add this to the `loc[:, key]` below, right?
This was a bug, but it was a bug in the middle of the test suite.
Looks like `My only question, what is the reason for this change?
Should we also be checking if the value was `0` and not `0`?
I think we should use the `queue_length` constant here.
I think we should use `.AzureData()` instead.
@mattpap AFAICT this is a separate issue for the second time, but I'm not sure it is worth it.
These two methods should be moved to the base class.
Is this a BC break?
@bryevdv, why did you change this?
This is the change to the previous commit, but I don't see a need for this change, it was just a mistake.
This was removed because we don't have a `<%= _('This', 'is_test')` in the test.
This should be set to `env` in the `runtime` namespace.
This is not used anymore
This should be `type: 'text'` instead.
I'm not sure this is the right fix. The code below does it mean it's always the same in both places, but it seems like the code is not related to the issue.
It would be good to add some more context to `Read`s, to avoid confusion.
Is it possible to move these to a separate file? I think we should not have to move those to a different file.
I don't think we want to do this. The code that is only used to create a new table. I think we need to do it for each one in the list of the table.
Should this be a `config`?
This is a good candidate for the same `metrics.ClientConfig` function.
I think it would be cleaner to have a test that checks for this function.
I'm not sure if this is a good idea, but I'm not sure it's a good idea to include a link in here.
I think this is a change of behavior, but it's probably fine.
The result of this call is now done inside the `if (err) return handleCallback(callback, null, docs.length ? docs[0].n : 0);`
Is this a change in behaviour or just a cleanup?
`this` doesn't need to be in this file.
This is a little confusing since it's a bit hard to read.
Why this change?
Why do we need to add this line?
I don't think we should remove this file from our PR
I think this should also have a `byte[]` type.
I think the changes in this file are not needed anymore.
This is a no-op, we need to make sure that the value is always the same as the default.
I think we should remove the default value from the `use_group_of` and just change it to `use_id` and use it to make it more obvious that it's default value.
Why do you want to change this to `external_cgroup`?
I'm not sure this is a good idea, but if we're going to add it to the form of the form, then we could just make it a form of the form of the form `node.update` and use the form `node.update` as the form for the form, and then we can use the form `node.update` as the form of the form of the form, and then use that here. I think we should use the form of the form here, and then we can add the form to the form of the form of the form of the form of the form of the form.
Why not using the `prepareDismaxQueryString` variable directly here?
This should not be needed. We should be able to use `k9.util.*` in the test suite.
@deads2k @deads2k @chenglin @chlowell
Is it safe to use a `null` check here?
This is a breaking change. It's not a big deal.
Hm, why is this change needed?
This is the only change I see. Are we removing the default behavior?
I think we can just use `Stop("Error!")` here, since it's not a big deal.
I'm wondering if we can move this check to the end of the method and just do a single `if (ok && TEST(VM_DELAY_READONLY, area->vm_flags)` check below?
I don't think this is the right approach. It's not a big deal, but it seems to me that we are not doing any validation for this.
Looks like this is not related to the issue. Could you please update the description as well?
Is there any way to make it work without the change? I think it would be more readable if you used `proto->set_name(type())`
Why is this file needed?
I think this is not needed. The other changes are in this file.
`anyMatch` is not used, can be removed
I think we can remove `libkbfs.PublicPathType` from `libkbfs.libkbfs` and `libkbfs.libkbfs.PublicPathType` from `libkbfs.libkbfs.PublicPathType`, as we are not using `libkbfs.PublicPathType` in the `libkbfs.libkbfs`.
I think you forgot to add `proposal_notification_email` to the `proposal` argument here, as you already have the `proposal_notification_email` argument, it's already a list of items.
Won't this break if `getManager()` is called?
Why do we need a `sep`?
I'm assuming this is needed for the new type checking, but I don't see why we're using this.
I would have made the name "must not be set" here, and in the other methods we are using "must be set".
This should probably be `#@private`.
I don't think this is needed. It is already in `node_modules` (as the other `node_modules` files)
can you add a TODO to make sure `if dataset._virtual_vdims: dataset.data` is always a label?
This is not the same as `err.Error()` but I don't think we should do that.
I think it is a good idea to add some license header on this line. It's a minor thing that I'm not sure about.
can you also make it a `@Nullable`?
This can be an boolean, so we don't need to check for both cases
Why not just update the currentVersion instead?
Is this the right place to do it?
I think we need to use `trim()` here.
This is not the right place for the `Dst` field.
Why not use `no-extraneous-dependencies`?
I don't think we need this any more
Shouldn't we also have a `Utils.value` here?
Maybe we could rename the function to `MapServiceAccount` and `MapMap`? This would simplify things a bit.
Why is this needed? It is not used anywhere else.
This should be `fn.name()`.
I don't think you should be able to use this method in this test, so it's not a big deal.
What is the TODO for?
Please use the `FileOutputStream` instead.
I would prefer to keep track of all these `if`s in a single `if` statement. I'd like for the `!` part of the `if` statement.
This should be `== -1` (or maybe `!this.blur()`).
I think this can be moved to `noenc` since the only thing that uses this is the `noenc` function.
This should be `PORT_S3`.
I don't think we need this change.
The `&` is not needed here, since it is the "key" of the result.
Is this include needed?
This should be `github.com/pkg/errors`
This is a bit confusing. What is the reason of this change?
This is a breaking change. I think we should add a `besu.datatypes.Hash` to the `Event` interface.
Why is this removed?
@davidwrightbos are these changes necessary in this PR?
I think this is not a test, right?
Why are you using `UpdateService` here? It is not used anywhere.
Should be `pants.util` or `pants.util`
This is not a valid default.
Why do you need this change?
This is not needed anymore.
I think you can remove this.
Would you mind fixing this line as well?
Why do we need to check `!== ''`?
I don't think we should be using a tabIndex here.
@mfojtik why not just check the transport here?
Why do we need this ?bool $autoEndOnErrors = true;
This will be a lot easier to read.
I don't think this is the right place for this, since the new `UpdateSchema` method is still called.
If we are going to be doing this, we should also remove the `0` parameter.
I would use `runtimePkg.Type("_interface")` here.
This is a bit of a hack, but is not the right way to fix this issue. I'm just wondering whether we should just do this in a different PR.
This could be done in a separate PR
Is this a bug fix ?
Can you put the `from vet import range` below the line, please?
Why do we need this?
This is not necessary because we can't use the `user.id` method anymore.
I'm curious why you changed the type of `QueueSize`?
nit: can we keep this private and just call the method from `getTable`
I think we should use the `onTrigger` method here
I don't think we want this to be here, we should just use the `repo_key` constant here, and use the `repo_key` constant in the `keybase` function
I think this can be deleted now, since it's not in `test_binary_worker` anymore.
Can you explain why you need this?
I don't understand why this is needed.
I think this should be done in the `meta['config_dict'] = dict(cfg)`
Are we sure we don't need this change?
This is a bit of a weird pattern. I'm not sure we should do this at all.
Should this be a `v`?
This class is used for both the `using`s, and the `using System`s.
This should be a `/^VuFind (\d+\.?)+$/` instead.
Do we need to do any validation that the config name is not available here?
If the snapshot is null, we should be able to remove this entirely.
Can we move this to `PmdRuleTst`?
This is not a good idea to me. The `inspect` is a no-op when the logs is disabled.
Why do we need this?
Should we use previousDataLoaded here instead of the previousDataLoaded check here ?
This is an unrelated change.
Why does this need to be User.last?
Is this needed?
Why did you remove this?
I think we can remove the null check as well
I'm not sure about this. The condition should be in the parent rerenders.
This check is not needed anymore.
@jridgewell This should be `pkg/resource/errors.go`
This is the wrong solution.
Should we use `TestCase` here?
This is a change of behavior, I think the `runInventory` should be removed.
Why is it necessary to pass the context here, instead of creating a new block?
It would be nice if this was a separate change. It seems to be a bad idea to do this in a separate PR.
why do we need this?
Why not just set it to `0` here, as it's a pointer.
`apply` is a bit too broad, maybe `apply_process` is more appropriate?
Why do we need this value?
I think we can remove this and just use `dedent("""\s)` in the code base, and use `dedent("s", 0)` in `uninitialized()`
This is not needed.
This is a change from the default behavior. I think we should be checking that it's not in `py2exe` and not `113`.
I think this should be `Workshops` and not `Videos`
This is a good idea. But I don't think we should be testing the data for the manifest, so I'd just change the key name here.
I'm not sure if this is the right way to do it, but I don't think we need a separate migration for this.
This is the only change in this PR.
I think this should be a `try`, since it's a `except`
How about making ~0 0x8000 a pointer?
This should be `// TODO` (or `package`).
Why did you remove this?
This is not necessary, since the default value of `user_site` is `true` and the default is not `true`.
These are only ever used by tests. Does this need to be public?
I think this is not needed.
Should we make it configurable?
You don't need to assign it to a variable.
I think it's safe to use `polit.values()` here, since the `electionContexts` is already in the `config` package.
This is the only thing that is used in the `ManagedIdentityResourceID` function. I don't see why it should be here.
I think you can remove `cloneURL` now that it's not used anywhere else.
Is this the only place where we want to support the domain?
I think this needs to be configurable. The `-1.16` package should be loaded automatically.
I think we should just use `Tracer.Instance` here.
please also check that the image is not available here
Why did you change this to hash instead of hash?
Why remove packs and not keep packing the original `unordered_` call?
Line is too long. [85/80]
Please use an `int` for this.
Should be `<link HashMap`
Why change this?
Please use the same function for the `CompileCompile` function.
Same question about the link-to-github repo
Please don't use wildcard imports.
This file should be deleted.
why is stats removed?
This file should be removed.
Why is this needed?
I'm assuming this was the only way we can get rid of it, but I'm guessing that should not be the case anymore, or should we just get rid of it?
I think we can make these `appName`s (with `FileProperty.java`) to make the API more readable.
This is not the right thing to do, I think it is worth adding a new one for the `convert-array-to-keyed` flag to `keys-keyed-object-map`. It's also not clear why the name is necessary, but the name isn't very descriptive.
this file is duplicated
I think it is better to add `@Nullable` for all of these, since it is a very specific implementation of the `getMode().getMode().getName()` method.
This is a bit of a hack, I think we should be able to use `_N[0] == '.'` instead.
I don't think this is correct. It's a very good idea to add a default orgs to the default orgs, and it's a very good idea to add it to the default in the help message. I'm not sure how to fix this, but I'm fine with it.
Shouldn't this be `@Deprecated` ?
nit: remove the trailing white space
Why does this test need to be public?
nit: I would use `==` instead of `==`
I'm not really sure about having the default `WorkloadIPs` in this test. I think the one in `Wireguard-EncryptHostTraffic` is the right one.
I think we can drop the column name now.
this is not the right place for this
I think it would make more sense to put this into a `setParameter` method.
Will this block of code be refactored to use `./pants lint` or `./pants fmt` or something?
I think this should be `NewDefaultIncomingDynamicRateLimiter`
I'm not a big fan of the word "using" in this line. I think it's fine to leave it, but I don't think we need to change it in this PR.
Don't we need the `||` here?
We should only do `version.keys` if `attributes.respond_to?` is `None`
This seems like something that should be a `\d+/.test`.
This could be a warning if `err != nil`
@smarterclayton do we want to use a more specific term here?
Could this be changed to `t *tag`?
What's the difference between `ports }}- "{{` and `ports }}` ?
I think this check is not needed, since `s.shardInfo != nil` is already `false`
I think it's a good idea to have an `LastWriter` field that is already present in `BuildOutput.go`
I think it would be cleaner if we just use the `if` here.
Just remove this line
I'm not sure if this is the right place for this. The `getFuture()` method can be called for each object, and it is a bit confusing.
I don't think we need this function, can we just use `hostname, found := n.Name`?
I think this should be `qTimeout` instead of `attemptRm`, as we're doing the same thing elsewhere.
I'm not sure if this is the right place to put this. I don't know if we should add a `.String()` method to the top of the file, and if so, we can just do `.String(0)` instead of `.String(0)`?
We don't need this check anymore. It is a bug fix.
Metrics/CyclomaticComplexity: Cyclomatic complexity for the param is too high. [7/6]<br>Metrics/PerceivedComplexity: Perceived complexity for the param is too high. [6/7]
I think this should be `ClusterIdentity.UUID`.
Do we need this check?
I think we should move the logic of the `protoFile` class to the base class. This way the prefix will not be set by the `proto.java` file.
Is there a better way to make it configurable?
Should we make these constants in `src/main/resources/resources_test_runner.html.erb` and `src/main/resources/resources/resources/resources_test.html.erb`?
I think this should be a `configuration` field.
This is now an unused import, so you can remove it.
I think this is a good idea. It should be a simple validator, and not a validator.
This should be set in the constructor
I think this is a good change. It might be better to do something like `apiMongoDb = apiConfig.split("/")[3];` and `apiMongoDb.split("/")[2];` and then we can just do `/`
I think this should be a private method.
We don't need this import, it's already in the `buildCallback`.
This is a good change. I don't know if we can change it.
This should be `s.info("Yanked download URL to clipboard: {}".format(s))` instead of `s.info("Yanked download URL to clipboard: {}".format(s))` (or something similar)
can you remove the debug print? it's not needed anymore, right?
This change is not related to your changes, but it is not related to this PR, so I changed it to `ipify`
Maybe we can add some type of `AgreementFilterTimeout` to the `Rule`?
This should be called on app init
This is the default for `displayResources`. We don't want to support that here.
Why not pass LIMIT to the signature and pass it to the function?
Do we need to set the timestamp to the default list?
This is the only change that affects TF callbacks, and I'm not 100% certain this change makes sense. The `.url()` call below is only needed in the `runtime-runtime.js` file, which is now removed.
We can't do anything about this, because we are not going to have to do this.
This is a change in behavior, but I think it's a good idea to use logger.DB() here.
I think this was a typo.
This will cause the compact cert transaction to be created on every request. Is that correct?
This is a breaking change and will cause issues with the X509Certificates to be changed.
I think this is a breaking change
I think this should be moved to a new function.
You should use `std::unique_ptr` here.
This test was not testing what was causing the test failure. This is a test failure.
I think it would be more clear to use a more specific name like `world_repop = (atoi(sep->arg[1]) != 1)` here.
I think you forgot to remove this
I'm not sure this is a good idea. I think we should be able to just use the `@Rule` class.
Worth adding ` {` here?
Should we do something like `#includePath` here, so we have a common place where it's used? Also I'm wondering if we can just have a `varvarports()` method that returns `0` and then use it to return a `0` if the transport is not a `0`.
This is not needed anymore. The test is testing that we have a non-testing test.
This class is not used, and it should be removed.
I think you can just remove this line.
I think this is still a bad idea. The rest of this logic is not in the code.
Wondering if we should add a `get_Supported_Type` method to this list?
Why is this on one line?
@dvoytenko do you think this is the best place to add this?
This is a bit confusing, as it is a metric-specific error, and I'm pretty sure this is a problem, as the metric-specific error isn't present.
Do we need to change this? I think it would be better to do `LoadLoadFromAssemblyPath` instead of `LoadLoadLoad(AssemblyLoadContext.GetAssemblyName(binaryPath)`
Is it possible for this to be `Printable` instead of `Printable`?
Is there any way we could make this a constant?
Is this necessary to remove?
What is the reason for this?
There is a typo in the second sentence: `value`
This is the fix for #2727
I think you need to remove the `ConditionDeadlineToChildren` call here as well.
Should this be a `DEBUG_TEST_FAILURE `?
This will cause a race condition where the `else if` branch is not null, which will return null.
I'm not familiar with this part of the code. Can you explain this change please?
I'm not sure if it makes sense to include the default implementation in the `org.infinispan.client.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface.interface`
if you do not write the dtype, you should do `if mask.dtype != np.bool:`.
I think this should go before the `demo.com/iotex-core/protogen/iotexapi`. The reason I'm not seeing is that the package is not a valid package.
This should be the one in the `boost::format ("Node started with peering port `%1%`
Can you please add a type annotation here?
I think this is a little too generic, since the `list` check is already checked in `.makeText`.
Is this change necessary ?
Please remove all the changes to this file.
I think we should be using `Connection.must be sync-pages` here, as this is not the case for every other sync-pages case
Shouldn't this be false?
This was a bug. I was thinking that we can't just change the default setting, but it was just a thought.
I think we can just do this in a variable and do it in a variable.
This import seems unused
Why do we need to check if the object exists here?
I think this is the only change that is needed. I think `selected_file[0]` should be removed.
I think this should be in a `utils.go` and the other way around.
Is this a debugging leftover? Can you explain why it's needed?
Nit: I'd prefer to use the existing `GroupCloudBackupID` parameter here, since it's not really used in the code base.
I think it is better to put this on one line, as it's a list of keys
I'm not sure if this is correct. The `return` is not needed, since `file` is a `try-finally`
Should we check if it's not a valid value?
This is a bit weird, why not just use `fmt.Println`?
We should probably add `sampleHeight` to the docs.
I'm not sure if we should do this. I would have expected this to always be false.
Why is this tag changed?
I don't understand why this is here.
Why is this needed?
Isn't this already defined in the base64?
This is a good change. It seems to me we should be using the `*exp.Target.StressChaos.ContainerNames` variable instead of passing the `*exp.Target.StressChaos` variable.
nit: I think this is not a very good idea. I'd rather have a method that does this in the `DocIdSetIterator` method. I'm not sure if that's the right thing to do here, but I'm not sure what to do with the other changes in this file.
Can you add a TODO here to remove this?
I think this test is not really needed.
I think this is a good idea to add a `TODO` before the description. The `default` is the default, and we don't want to set it in the `@pylint` page, so we don't need to set it in the `TODO` page
What's the point of the test with `help`?
@smarterclayton do we have a test that checks for this case?
If I'm reading this right, I think we should just remove the `_options` argument here and do `custom_options = paddle.static.custom_options`, right?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This function is now unused.
I'm not sure about this. I'm not sure we want to add the `@proposal` tag in here. I'm not sure we should be adding it.
I don't think this is correct.
I think this should be done in the `EndsWith`. Also I don't think we should be using `value.Length - 2` here as it is a special case.
Why is this needed?
This seems unrelated to the PR?
I'm not familiar with this code, but I think this should be a separate commit, and it's probably not worth a ticket to move away from the code.
I'm wondering if this should be changed to `Copyright 2017`?
Line is too long. [83/80]
I don't think it's necessary to add a list comprehension here.
This was a typo I noticed, but it was a bit odd.
This should be changed to `assert.h`
This should be done in a separate PR.
This method can be replaced with `@properties['logger']`
I don't think we should add a new `IdentifyForChat` function to `ctx` (or `ctx`) for the `keybase1.IdentifyTrackBreaks`.
Is it possible to have a `MPI_Comm_Get` function that is not initialized?
I think the `err` should be moved to the `ReadAll` function.
I don't think we should change this file, since the `TransportFeature` API is not being used.
Why do we need this?
this should be set in the core
I'm not sure why this is necessary. The `kEdgesTable` and `v1` fields are not defined.
Can we make this `.cs` instead?
Why is this error ignored?
Can we move this to `phoenicis`?
This seems to be a leftover from the previous commit.
Why was this not being removed?
Should we add a validation to the user? Or is it the case that the timeout is set to `false`?
Please use `variant.any` and `buttonStyles.any` instead.
This is a little strange, because we don't have a lot of files in our code that we don't need to do this.
I think we should check `!aURL.isCurrentSessionPrivate()` before calling `fmt.isCurrentSessionPrivate()` and remove `!aURL.isHomeUri`
I think we can use `MAX_VALUE` here, and make it `0L` for the value of the value
This is a change from the current behavior. The `version` field is not a `None`, so I'd suggest to use `import`.
This should probably be `const MAX_HISTORY = 200;`
don't use parentheses around the condition of an if.<br>Line is too long. [97/80]
I would suggest to use a `@Nullable`.
This should be `IsEip1029Enabled`
it is not necessary to add this function, as it's only used once.
I think it is better to just use `self.show_warning(..., None)` here instead of using the `show_warning` function. It would also make sense to move this into the `pylint` method.
`parent` should be a constant.
This is not needed.
do we need this for all platforms? can it just be a function or can it be called `type ACNPRuleAppliedToSpec struct {` or `type ACNPRuleAppliedToSpec struct {`
what's the reasoning for having a single variable here?
Why is this needed? I think the default should be `internal`
Do we need to add a guard clause to keep these as simple as possible?
Maybe `////`? It's a little confusing to me.
I'm not sure this change is correct. The previous version was correct, so it is a bug. The previous version was correct, so it is not correct. The new version was correct, and it was correct.
This test doesn't need to be testing anything.
again nit: could you move the line to the end of this line so that it's easier to read?
Why change this?
I think it's better to just return `libinput_dev` here.
@jmhooper @steveharter, I think this change is not needed. The `get` method is called on the `Settings`, so it's the default value.
Is this needed?
why is this import changed?
Since we are not using this feature anymore, should we add an index on `config/change`?
I'm wondering if we should have a separate `go/slack/go/` that we don't need to do anything with the new code in the code base.
I think we should keep the `substring`
I think you should add this to `BaseTree.checkNotNull`
should this be nil?
Hmm, is this a bug in the commit title?
This is the only change in this file. Why is it no longer necessary?
@michalpristor I'm not sure if this should be `params["PolicyNames"] = ""`
what's the difference between `PUBLIC` and `PUBLIC`?
I'm not sure why this is necessary, but it seems like the `PasscodeMode` should be moved inside the if statement?
Is this the correct fix?
I'm not really sure if this is the right approach. I'm not sure we should be using the `rake secret` package here.
please revert this file
What's wrong with the previous CA?
I'd prefer to avoid changing this to a new constant.
I think this is the only change that makes sense, since it is now a new file name.
I don't think this is a good idea. The `type` is a `checked` of the `type` of `disabled`
The timing parameter should be `cmd`.
I'm not sure that this is a good idea. If the package has already added a new `nodeHandler` and the `k8s` package is used for, it can be removed.
I think we need to keep these these constants in the `DynamoModel` method, as they're only used in the `DynamoModel` method, so we can get rid of these too.
nit: you can use `os.environ.h`
I don't think this belongs in the base class.
I'm not sure this is the right place to put this code. The `IsNPC()` check is not used anywhere else in the code base.
Is there any way to make it clear that `invocation_id` is `True`?
This is a breaking change. I don't think it's necessary to get the current state.
@smarterclayton do you think it's worth having a look at this?
This is a very specific change. I think it would be better to move the `--rst` option to the top of the file and then call it `Python-API.rst`.
I think you should use a `Debug.Assert` here
this was a separate bug in the first place, and now it's not only for the `Task.task` call
Is this the correct error?
this will be removed if the lock is removed.
Why is this change needed?
I think we can just remove this and just use the `repo_gpgcheck=0` to determine if it's a valid URL.
I think this can be a separate PR, it's not a real fix. The default value is `None` and the value is `None`.
I don't think this import is needed
Why not use a const for the number of items here?
This is not a valid name. It should be `diskName`.
I don't think this import is necessary.
Can we have the check for the `ok` case?
I'm not sure about this - it was just the one that I was thinking about - it was a bit hard to follow.
This method is now deprecated, and is no longer used.
Can you also update this docstring to mention that the `kwargs` value is `None`, and the `kwargs` value is `None`, which is a bit odd to see what it actually does, so that we don't need a new version of `kwargs` at all.
Is this needed?
This can be removed
Should this be a separate function?
I would move this check to the `if (null !== $mediaContext))` block.
@jridgewell Is this what you intended?
This should be moved to `build_match_cost()`
I think this test should use `assertEqual`, since it's not actually used.
@bparees I think this is the right place for this change, it's better to have the `&&` check at the end.
I think you should use `http.IsNewPipeline` instead of `http.Stop()` here.
this is a very minor thing, but I'm pretty sure I can't tell from this PR. I think it's better to keep it, but it's probably not important to make a PR for it
Why is that cast needed?
I think we should use `import` here instead of `import size`
I would prefer to return `None` here instead of `try-except` since it's a public API
it is not a good idea to change the test-utils in this PR. we should change the tests to pass.
I'm not sure how to make this work for other languages.
The `Fill` is not really used anywhere. The `artifact` should be `null` in this case.
Should we make this a `SetService getCoreConfigService` and have it take the config value?
Can you also change `v3` to `v2`?
I think it would be better to use a `deprecated` var here.
Should we also change this for all the other packages?
I don't think you need to do this.
This test is not really necessary. The test is failing.
I think it would be more readable to print the response name here as well.
just to confirm, why do we need to set BN here?
Please use `*` imports.
Why is this change necessary?
This is a change in behavior, but it is not a big deal, but I'm wondering if we should just have a `info` statement in case the user doesn't want to have a value?
This is the wrong way for this PR to be able to run on the tests.
I'm not sure this is a good idea, but if it's just a simple `blob.core.windows.net` it should be a `blob.core.windows.net`
I don't think this belongs in the `progressindicator` package. Can you try to remove this?
I think this is a good example. It's a good idea to use a `v1.io` that is used in the `v1alpha1` package and we can use `v1.io`.
Do we need to check that `!uintType.MonoType` is nil?
(question) It seems like this is the only place where you'd expect a `np.Callable` parameter, which is a `np.Callable` parameter, and not a `Callable`, but it seems like it's the only place that uses `epoll` - which is what we do for `epoll.Callable`, which is why I added this line.
Nit: I think we can drop `t` entirely.
Can we remove this? This will break existing tests.
I'm not sure that this method is used for a part that is not a good idea.
I think this should be `unsolved`
No need to add the `skipLoad` to the `skipLoad` because the config file has a `skipLoad` and `skipLoad` and it's a `\n` and the code below can be moved to the `\n` package.
`Time.now` is the same as `time.current_user.now` so we can remove this method and use it here.
@smarterclayton can we get rid of this `await` and just do `await` in the `@Restricted(NoExternalUse.class)`, and let's not just remove it from the `await` function.
This is the only place that is used. I think it would be better if we just `return" remove it and de-indent all the code inside it',` or just `return" remove it and de-indent all the code inside it',`
What is this? Is this a problem?
I think this can be removed, since we are now using the spc as a result of the function.
Is it worth adding a new function in `webhook`, since we don't want to use the new name for each model?
Why not just use the `name` class in this class?
I don't think we want to use the `None` argument here, since it's a `dict` field.
Can we have an option for this and a link to the peekizer?
Why are you using a pointer here? Isn't it better to have a string as a parameter? If you are already, can we move this to `Client`?
Is there any way we can use `/products/1-backbone-js` instead of `/products/ vector`?
I think we should add this to the top of the file, as it's not used in the file.
I think we should use `opts && opts.conflictStack` here.
Layout/MultilineMethodCallIndentation: Align .create with .save on line 251.
Line is too long. [98/80]
I think this should be a debug level
what does `buffer[:0]` do when you are doing `\` instead of `\`?
I think it's better to move the form of the form into the `app/views/utils/utils.js` and then add a `app/views/utils.js` to the base `app/views/utils.js` and `app/views/utils/utils.js`
Should we have a `EnableLogging` field that does this default to false?
I think you can remove the nullability here
Is it worth having a look here, or is there some kind of `os.path` in the log message that we're trying to move to?
Why is the `certificate_pem` needed?
why was this removed?
This is the fix for #2439
This is the only place where we need the `castedError`
This is a bug fix.
This will be a breaking change in the code. The `delete` method already checks the notification, so this should be moved to `createNotificationHolder`.
I think this can be removed as we already know the errors is found
Shouldn't we also check for domain here?
Is this change necessary?
I think it should be `@title = t "user.account.title"`.
This variable is no longer needed. The purpose of the variable `uploadSession` is to be called before the call to `getState()` (which is why I added it).
I think this should be `post_last_last_FOUND=False`. Also, I think it's fine to use the same naming convention for all these commands.
I think this should be `dict.length[0]` instead of the second argument, since it is the same thing as `dict.length[0]`
This should be a warning, since the container is not being created.
HDF5 was the only thing that was breaking for this bug. I don't think we should be using it for this PR, but I think this is a bug.
Why is this needed?
I think we should change this to something more general, e.g. `self.filename`
Please rename to 'applicationName' to 'applicationName'
This is a bit confusing, as `decorators.steps.approval` already has actionable_step, so I think this is the right place for this method.
This is a bit confusing, since we have the `﻿//` tag in the `width` tag. Can we keep this as `widthwidth`?
I think this should be a separate PR, to separate these from `build-system/system/system/system/system/system/report-config.js` and `build-system/system/report-config.js`
Why is this needed?
I think this would be a good idea to use the `error` here.
We should probably add `plan` here.
This is a change in behavior, but I think we need a better name for this parameter
Can you explain the logic of this?
Is this really needed? It looks like the changes in this file are related.
Instead of adding more information to the model, can we just add `torch.device` and `torch.device'>` here? That way if you want to add more information to the model, you could also add more details about the model.
This should be an `o.Name` instead.
Please use `=== false` instead of hardcoding the default value.
This is the only change in this file. The `acnpInformer.Informer().GetIndexer()` is the name of this method.
Is this a typo?
Why is this necessary?
What is the rational behind this line?
I'm not sure if it's worth it.
Why did you change this?
Shouldn't this be `SKIPPED-nonEmptyAssignmentToListElementChangeType()`?
why not just call logger?
I think it's better to have an option here, and pass an argument to `get_static_method` so that it is not a valid argument. The same is true for other `if (!empty) {` statements.
I don't think it's necessary for these to have been added to the new metricset, as it's a new metricset. The new metricset will have to be added to the metricset as well.
Let's keep the above.
nit: I think this import is unnecessary.
this seems wrong. why is this here?
Should this be `item.Value=config.conf["update"]["allowUsageStats"]` instead of the class definition?
I think this should be `--no-after-in-by`
You should probably add `__call__` method to `find_ip_address`.
Do you know why this change is necessary?
I'm curious, what happens when you have the check against the `diagArea_->contains(-2013) && (!diagArea_->contains(-2012))) // avoid generating redundant error`
This import should be removed.
I think this can be removed.
@bparees I'm not sure why you'd like to use the `require.NoError` here, but I think you can use the `require.NoMetadata` function in the `testing.T` instead of passing a `rmd` object.
I think we need to keep the old `.Contains(out, "/var/www/html")` here.
This is a bit of a hack - it's not a big deal, but it would be nice to have a test for it.
I don't understand why this is needed.
This is a little weird, why is it needed here?
Would be nice to have some test for this.
Layout/EmptyLinesAroundMethodBody: Extra empty line detected at block body end.
Is this the same error as the `err`? I think it should be `err != nil`.
I don't know if we can get away with using the `gaz` here, but this seems like it would be better to just have it be a `Test` rather than a `straction`, which is more of a `t.Errorf`
@tgamblin I don't think we should be using this. I don't think it's necessary to add a `next()` method in the list. I think it should be moved inside the `readObjectSubtreeSpeech` method, as it is used by the `index` class.
This is not a test. It's not a wite lock but a wite lock.
I think this can be imported before the `pkginfo__` (here and below)
Please remove this unused import
I think this is a good place to do it, as `isCloud` is already an array.
This is not needed.
We should probably use `LOG.finest` here.
This is not a good change. You're using the default for SSL_set_gsext_host().
Why do we need to pass `readActive` here?
This is a change in behavior. We need to fix it in a follow up PR.
I think it would be better if you could use `getOffset()` instead of `this.getOffset()` here.
why not directly return an exact value?
this is the only place where we can use `id` in the handler.
I think this is the only place we need it, can't we just use `auto` instead?
I think it's better to use the default config here.
This should not be needed.
There's an extra `ImageBlurHashes` in `buildChapterCards`.
This is not a correct change, we should just remove this function.
This is the only change that makes sense. The `Ksql.SelfCheck` was used for a few others, and the `Ksql.SelfCheck()` was only used for the `Ksql.SelfCheck` case and I'm not sure if this was intentional.
This is the only place I'd like to see a more specific name. What do you think of just having `participant_`?
This is a no-op, right?
This should be changed to XXX i.4495: Consider saving stolen reg fast and another stolens to be translated.
I'm not sure this is the correct method. The singleton is a singleton. If you want to be sure this is a singleton we can't just remove it.
This is a breaking change. I would suggest to use `selected.isReady()` instead. (I know it is a bit of a hack, but it's not really a huge deal.)
This is the only change that works with `dirname` being a valid name.
I think the `foldLeft` method can be replaced with `.get()`
This class is used in the test, so we need to make it configurable, and we can remove it.
Should we throw an exception instead?
Why is this import removed?
Why do we need to change this to protected?
Why not `\0`?
This is the only change in this PR. The reason is that the `=>` was expceted to mention the plan was expceted to mention the host.
I think we can remove this line now
I think we can remove this too.
I think it is better to keep these debug logs. The debug logs in the end of these commands, and the one for each other, to ensure that the variable is not listed.
I don't understand this change. It seems like we're using `values` to determine if the value was `0` before it's `0`.
If you are going to use `EC_container` here, then you should be able to use `EC` as the value here, and instead of `EC_container` here, and then you can use `EC_control_container` here.
I would use `HEAP_SNAPSHOT.get("/session/:sessionId/chromium/heap_snapshot")` instead of the default value
I think it would be better to use `#role` or something similar to determine if the messages are different.
Should we add a new `RestConst.REST_INVOCATION_CONTEXT` to the message? I think this is the case for the `RestConst.REST_INVOCATION_CONTEXT` case.
did you mean to delete this file? it's not used anywhere
This is not needed anymore.
Why was the `*BareTlfHandle` removed?
I don't know if we can make this `static`, but I think we can just make `ConcurrentHashMap` a `ConcurrentHashMap` instead.
This is not right. You can just use the macro to set the `titleNaturalSort` and set the `titleNaturalSort` as the default. You can use `titleNaturalSortCompare` to avoid the `if (r != null && Setting.value('titleNaturalSort')` as a variable.
The second half of the tests seem to have been very similar, but the `_cli_json` and `_cli_type` were not defined in any way.
I'm not sure if this is correct, or if it's worth it to just remove this function entirely, since it's not used anymore.
Missing an example of what the function does.
This is a little hard to understand - as it is the `headerCtaLabel` case - I think it's a little hard to read. Maybe it's better to have a `header` prefix as the name?
Why was the `propDialog` removed here?
`map[string]string`?
`(a, b)`?
Can we make this a `@since` instead of a `@SuppressWarnings`?
Does this need to be added to the pylint disable as well?
This is a change of behavior, but I'm not sure why the `src` parameter is needed here.
Please use the `declare(strict_types=1);` helper method. Also, please make sure your code works as expected if you don't use it.
Why not just `omitempty`?
Is this a "time" bug? It seems like the `time` is not used anymore.
This is a bit weird, we are not doing anything about the otlpconfig.GRPCOption right? I think we should just call `applyGRPCOptions` here, and then pass it as a `client` here.
This seems to be the only way we have to test the resource's `read_test.go` file
I'm not sure this is the right fix. It seems to be that the payment channel should be duplicate, and the payment channel should not be duplicate.
This variable should probably be renamed to something like `308` or something.
Do we still need this code? If we're going to return error, we should return error.
I think this should be more specific as `createY_DIR` and the same as the other `createY_DIR` files.
I think this change is not needed, please revert.
This is a bit weird that `processGatewaySubjectSub()` returns `nil`, but it seems to me it's going to cause a crash when `x.typ` is `nil`.
this is a bit unrelated, why not make this a local variable?
Why are we changing the default?
I think it's better to keep it as is, but it would be good to have it be a little more explicit that the callback returns false.
I think this should be `blockblock.Header` since we are not doing anything about it anymore. The code is not really necessary anymore.
I think we should add an explicit Exception to the `createCollectionCmd` method and throw an Exception if we don't need the exception. The `createCollection` can still be called in a non-null exception, so we can catch the Exception.
is this really necessary?
I think it is better if we have `is not None` in the `is not` statement
I think we need to be careful about these kind of "the node" values.
Is this still necessary? I think we are already doing the ctor. It seems like we're not using the `ctor` variable anymore, and the `NewConstructor` function is still being used for the other `*testing.T` methods.
This should be `GraphParser::location_type dumyyylval`
This should probably be `nil.Set(certificateRequestGvk)`, otherwise it won't be called
Nit: this is a bit confusing to me. How about `sender_gcpbroker`?
This is a breaking change. The only thing we want to support is `String.format`. The `KeyError` is not the same as `Key`.
I think you need to check that the 3.342 is the same as the 1.343, and the above test should not be necessary.
I would just put this line in the `try` block.
@davidjumani is this a breaking change? or did it just work?
why not use `.String()`?
This is the main code. If the user doesn't specify graphicsPipelineCI, it will show up in the `_primitive_depthstencil_attachment`, which is not what we want. I'm not sure if this will cause a performance regression. I'd prefer if we just remove the `_primitive_depthstencil_attachment` part of the `_primitive_depthstencil_attachment` part of the `_primitive_depthstencil_attachment` part of the `_primitive_depthstencil_attachment`, and then we would have to do it. I think this may
Can we move `copy-webpack-plugin` to a constant?
Why do we need this?
This test is failing on windows, and is probably not correct. You can use `self.assertEqual` here
This should be the default, not the default
I think this should be on the next line.
this is a debug log?
I think we should check for the output here, not the output.
Why not use the $domainId here instead of the `$domainId` variable?
Is this a BC break?
This is a public API and I think we should be consistent. I'd rather have a `public static static int int UvPipeCount => _dispatchPipes.Count;` property that is not used. It's not a big deal but I think it's a good idea to have it in a `JsonIgnore`.
I think this should be changed to `tautology`.
Why is this change required? It seems to me that `get_X` is only ever used for `X` (and the test above).
Why is there another default implementation of `TaskSocketFactory`?
This change is not related to this PR, but it is a bit unrelated.
I think this is still not correct. The reason I don't like the gocontainers imports is to have a standard library, not the root.
remove empty line.
I don't think this should be done here, it is not needed.
`json` is not guaranteed to be the correct location for this.
Why is the cast needed here?
I think this is not the best way to do this. It is a bit of a hack, but I think we should just do it in the same way as `Test` and `Test` for this.
I think this is not needed, since the logger is already in the baseclass.
Is it really a breaking change?
I'm not sure we want to use `require.Len` here, since it's a `require` statement.
Do we need a new api api?
I'm not sure if this is the right way to do it - it's needed to do this when minimal mode is configured
I'm not sure about this. It is used in the code that we don't use the struct.
This should be in the the core package
maybe we can remove this one?
I think it would be better to have this in the `if` statement instead of checking the `isDestroyed` part of the conditional.
I think this should be in v1.X, and not in v1.X. See #7027
The `len(listens)` should be removed.
I think it's not clear to me why this is necessary. The `setTimeout` method is called on the `offerings` object, which is not the best way to go.
I'm not sure why this is here.
I think this should be `anomalyScore`?
Would it be better to use a `[]` here instead of `[]`?
>> 1 [](start = 12, length = 6) Is it necessary to use the constant here? #Closed
`gotChan` is the same as `context.render().renderChan`
I think we should update `approval` as well to `step_for` in `existing_approval` and `save_step_for` in `save_approve`.
I think this import is no longer required
I think it is more consistent to use the new `imports` package here, as the `imports` package is the same.
`samplerDescriptor.filter_mode` is not the right thing to do here, but `samplerDescriptor.address_mode` is the same.
I don't see why this is necessary.
I think we should check for the case where the `Task does not support noop` exists, since it will always be a noop.
This import is used in the group above.
This will be a breaking change for the tests. I think it would be better if we moved the `headers=self.headers` to `headers` instead of passing it as an argument.
Why is it needed?
This is a little confusing. How about `AzureMResult`?
We need to add this to the `APIPort` struct, to avoid the need for the service to run.
This can be removed.
This is a little hard to read. What do you think of `isEnum`?
I'm not sure we need this. The migration will be the version info, but the version version is not the version info.
Use && instead of and.
This should be `<ISetupLoadConfigurationBuilder> configBuilder`.
I think it would be better to make this `public`? The `public` is not needed, and it's not used in this class. The `public` is not needed.
Is there a reason to make the `Dock` a `dict`?
I don't think this is needed. The `_readInputContinuation` is already used in the `libuvStreamAdapter`
Should we do the same thing in `onStartTrackingTouch` and not have a `exclude` implementation? It's just a question for the future, but it's not a big deal.
You need to check `self.num_classes` before calling `reshape` here, since this is the same thing as `const std::0`
Is it possible to use a `dev.id` constant here?
Please use the constant from the class.
This is not the only way we have to do this. It can just call `WhenAll(tasks)` without having to create a new `Task` (or `WhenAll(tasks)`).
I think the `collection` and `torch.transform` should be moved to the class definition
Space inside { missing.<br>Space inside } missing.
I don't understand this change. Is it possible to have a new `setBrowserLoginEnabled` method that has the default value of `true` and `false`.
nit: you can merge both lines above as `&&` and `&&` (just like `&&`)
I think this is a bit confusing, since it is a bit hard to read. I think the intent here is to check for `request.config.MaxIDLengthLimit` instead of just `request.IDTooLong`.
Does this have any impact on the system? I'm not familiar with the change here.
Is it possible that the exception is raised here?
Why is this needed?
I think we can remove this function and just use the one that is already in the `GROUP_USERS`.
I don't think this is necessary, as we already know the full path for the struct.
Why is this needed?
This is a bit weird. `self.created_at` is not always a string, and it can't be a string. I think we need to do this as a class variable.
This is the only place where we're testing this. I'm not sure we should use `_build_file` here but if it is, then we should use it in other tests, as it will make it more obvious that this is a `TestCase`.
I think this change will be needed if we are not doing any change in the future.
I don't think this is a problem. I'm not a huge fan of "unauthenticated" (and the "anonymous" part of the code, not the original implementation).
Same as above, we could use the record.frozen?
why change it to int64 ?
I think this will need to be `User` for the whole PR, since it's a separate change.
this file is not needed
This is not right, you are not using the `.b` in this case.
This is a bit dangerous, as we are now using `org.sonar.java.lang3.xUtils#isWEB` and `org.sonar.java.lang3.xUtils#isWEB` and can be used in the future.
this is a bit weird, I'm not a fan of having a `pathname` option. I think it's a good one. It's probably best to just have a `RSpec::Support` that has the `pathname` option, and then just have it here.
This should be the other way around.
Is this necessary? I think it's already in the list, right?
can you also update the function name to `return appendnameOnlyAttribute(capabilities, attributePrefix+capabilityEFS)`
I think we should use `service/cloudformation` instead of hardcoding `archerCfn`
@deads2k i'm not entirely sure about this one. I don't think we should use this.
Wouldn't it be easier to just return `string`?
This is the only change that affects `a` and `b` commands.
Is this change required?
This variable should be renamed as well, to avoid a new field.
What's the difference between `LITTLE_ENDIAN` and `LITTLE_ENDIAN`?
I think this import should go after ` generateDateRangeArgs`.
I don't think you want to use `<` here.
can we change the name of the var to `NewKeyStore` to make it more explicit?
Is this too short?
Why is this needed here?
why is this line needed?
I'm not sure this is the best way to do it. The function is used only once, so I'd rather not change the function signature.
Can we change this to `DataOptions`?
You can also add the `encoding.json` file.
Why not use a logger here?
Can we move this to `container_create`?
I think this should be in the static class and use `sensitivity.compareStrings`.
I think this is a little hard to read. I'd prefer to have a separate `base` for this, since it's a `base` for the `HasSuffix` case.
Why is this necessary?
This is a little confusing. The other `-- "/"` error must be logged in, and not here.
I think this should be an empty string.
I would prefer to have this as a test, but I think we can just do `ococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococococ
this is the only place where we are setting the context on the context, right?
Should this be set to -1?
I think we should have some sort of "is this the event of the usernames" in here to be able to avoid this.
I think it's better to have a test for the new `win32` and `mongodb://localhost:27020/?serverSelectionTimeoutMS`
If you're using `sni` and `current_user`, you should use `!sni.encode()` here.
this is the one that uses the "logger" log line, but the function is now "warn"
Can you revert the changes in this file?
I'm not sure we need to do this. It's a public API and we can do it in a different PR.
I'm not sure why you made the topology.close() call close.close()?
Should we also test for `PlanFinder.stubs`?
Is it possible to remove the `DataBaseDriverName` parameter from here? I'm assuming the `DataBase` parameter is no longer used in any of these places?
Wouldn't it be better to use `OnResetEvent(false)` here?
@bartonjs, I think this was a mistake in #934
this is a leftover from the previous PR
This is the only place where we call this.
Why is this necessary?
I think this should be moved to the top of the file, since the `CMakePackagePackage` package is not part of this package
This should be reverted.
Why are we not returning a new transport? Isn't it the same?
I think this is the only change that makes the line of its own `().AllowManagementOS $false ", networkName)`, which is the only change that makes sense, but I don't think this is correct.
Is this change necessary?
This is not really a good idea. The `setup.go` should be `output.FlagError`. The `output.FlagError` should be `nil`.
I think it would be cleaner to just use the `Read` class instead.
This is a change in behavior. The problem was that `SignVote` is a `uint32` in the `Cause`.
I don't think we should be changing the default behavior here.
This change is a little bit of an unrelated bug fix, and should be reverted.
I think we should return -10 instead of -10.
We can't use this here. We should use the `Time.error` helper for this.
What's the difference between `gtm.first` and `gtm.gtm`?
I don't think this should be here, as the rest of the code uses the old `getClass().lookup().lookupClass()`
I'm not sure why we need this check here, is it ok to just return `vNode.children` directly?
Please use a more descriptive name
This is a bit confusing, since `id` is an `int` and `ksql-application` is a string, so I think it would be better to just have a single `id` check that the key is in `application`
This is not the only thing that's going to be used for a while, but I'm not sure it makes sense.
We should probably have a unit test for this
This is a breaking change. We should probably keep it for a while.
why is this needed?
this is a bug fix.
The default value should be `false`, no need to specify a value.
I'm not sure if this is the right change to the real change. I don't think we need to remove this.
This file was moved to `sql` and `sql.go` before `sql`
Hmm, this is the only place where we can use `.cuda()` instead of having a single `.length()` call.
We should not need this.
This is the wrong place for this, but the `setIval` function is a bit misleading, it is a bit hard to understand.
I'm not sure why this is necessary. The `OverwriteIfNewer` function is only used in `internal/CopyDirectoryRecursively` and `internal/CopyDirectoryRecursively` functions in `util/CopyDirectoryRecursively`.
This seems to be a duplicate of the line above.
Is this change intentional?
This is a little confusing, since the security group is a set of additional ingress. What about something like `additionalIngressRules:IngressRules`?
I don't know why we would need this change. It is a breaking change and we could add it to a new method.
this is not a breaking change.
Is there any chance of a `isWorldStateAvailable` method called `isMutableWorldState`, or something like that? I'm not sure what `is` means, but if we want to keep it, then I'm not sure if it is worth the change.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I would use a more descriptive name for this.
why import here?
Is this change necessary?
Why not use `github.com/docker/api/types`?
This will not work. The problem is that the `get_thread_id()` call will always be called on own thread (the thread is not in the thread that is not in the thread that is not in the thread, so it will not be in the thread that the thread was not in the thread. In the case of `get_thread_id()`. In the `thread_handle()` call will be called on own thread, which is not the case anymore, but it is not the case that we are not doing that). I think it would be good to check the `get_thread_id()
Can we make this `/.json` instead?
Why do we need this?
I think we can move the snapshot name into the `snapshotrevertHelpText` method and move the snapshot name into the `User` method. The current name is not very helpful. We could move the `snapshotrevertHelpText` to the top of the function.
This is a breaking change, but the `header` value is not a valid value. I would suggest to change the name to `header` or `update`.
This is a bit of a hack, but I think it's a little hard to read to follow. I'm not sure how to test this, but I'm not sure how to fix it.
This seems like a good change. Can we just use the `waitTimeoutMillis`?
I don't understand why you removed the condition.
This is the wrong place for this, I think.
I'd prefer to have this be a constant, not a class.
this should go in separate PR
I'm not sure why you need this change. It seems to me like the only place you're doing `pkt.tls_version` is to `type`?
remove this empty line.
This is a good place to put it in a single file.
@jsoriano I think this was the only thing that I don't have here. I think we should change `ecr` to `agent` and then use it everywhere.
Can you use `/opt` instead?
Should we also check for `traceparent?.First()` here?
This should be done in the `__init__` package.
@kroitor since we are using the `_` in the constructor, we should probably just use `_proto__` instead of `_`.
This is a bit weird, I think we should be using the `isTaskID` variable instead of the `Validate()` call here.
This is the only change that affects old_size.
I think we need to keep the old constructor and just call this new one.
I don't think we should be calling this from the API. What is this method?
This is not a good way to do it without needing to change the base64 string.
I'm not sure if this is the best place to put this. I don't know if we can just leave it in, but it seems to work without it.
Redundant return detected.
Shouldn't this default to `false`?
@bparees this is the default behavior, we should probably have some sort of config for it
Why not just always set the default value of `$config->Catalog` here?
@jcotela do you remember if this is correct, or the number of places where the `max_pending` and `max_pending` are the number of bytes?
Should we also add the `context` param?
Why is this needed?
can we use the package name here? `v1alpha1` is confusing.
This is not the same as `X` above but the `c` is used for the `_ancestorComponent` case.
I think this is a breaking change, but I don't think we need the `null` value here since the `null` value will never be null.
@franckc @bvaradar is this the fix?
This function has a lot of places. I think it should be moved to `__str__`
Unused method argument - path. If it's necessary, use _ or _path as an argument name to indicate that it won't be used. You can also write as if you want the method to accept any arguments but don't care about them.
I think we can remove this.
This change is not required.
This is a breaking change and should be reverted.
I think this is not right. You should check if `type == DRM_MAJOR && strcmp(type, "gone") != 0`
Can we remove this method entirely? It's used only in the tests and we don't have to duplicate code for this.
this should be done in the main PR
This is the only change that affects this review, but I'm not sure why we are removing `guidP` here...
I think it would be more clear if the return value of the function were passed in as an argument to the function that is passed in.
Can't you use the constructor here?
Use `.imperative` for clarity.
This should be `final`
I don't think we need to do any additional code for the new app, since we're only using the new app app.
Can you add a docblock for this as well?
Why is this being changed to `*os.File`?
This can be simplified to `options.readPreference = ....`.
Why `err` instead of `err`?
I think we should just make this `T().Skip`
Line is too long. [93/80]<br>Use the new Ruby 1.9 hash syntax.
I think this check should be moved to the top of the function.
Why is this needed?
This log message is probably not useful. Maybe we can just log the error message?
This is the only place where we need to check for `--k`. I would suggest we move it to `Build.config` or something.
this should be changed to `stopEventWalk();`
Should we make this `key` and `Key` as well?
I think it would make sense to add the default option to the default option.
(style) line over 80 characters
You can use `std::unique_ptr<kvstore::initKV(rootPath.path())` instead of `Path.path()` to get the wrong type.
I think it is a little confusing that this is a `LibraryTime` instance. I would recommend adding `LibraryModel.New(X)` to the `LibraryModel` instance.
This is a bit confusing to me - if I have a file that would have a file that would not be a file, I would just say something like "test data" or "test data" (or something else, just in case).
Here, the loop is not necessary
I don't think this is right, we should be able to use a set here.
I would not add this to the interface. It is used only when the configuration file is created.
I think it is better to use `final` here.
I don't think this is right. It is a bit confusing since the `tx.Type == TxType.AccessList && !releaseSpec.IsEip2930Enabled` check is redundant.
I think we should make a new `ServiceName` struct here.
Why are we doing this? Is this related to the other PR?
Why is this needed?
I think this should be just `reverse(bool)`
`if (!service) {` is the correct way to write it.
This should be "consider using sys.exit() or quit(), consider using the sys.exit(). Did you test that?
I don't think we need the `CommonNameForCertificate` anymore, since we are now using it in a few places
I think we should just make this part of `fprompt-history`, since the test in `test_init` will be removed.
do we really need to make it configurable?
I'd prefer to have the same error message here, as in the other places you're just using the `TestOptions_RandomPort` function.
I don't think this should be in the `*`
I think this check is not needed anymore. The rootless container was only added to rootless.
I'd prefer to have a more specific name, e.g. `aggregates`
I think the only place this is used is in this function.
Why is this change necessary?
I'm wondering why the other config is set to `UA` in the first place.
This looks like a duplicate of the line below.
Metrics/LineLength: Line is too long. [83/80]
Why is this needed?
I think we should leave this in.
`operator.push(paths[i], select, match, options, _model, subPopulate))`
I don't understand this change. Is there a test that checks if the `WriteWrite` is not set?
This change seems unrelated to the fix.
This is a bit weird, I think we need to keep the check in `searcher.numDocs` here.
I think you missed `import imported`
I think we should be setting `nil` here, since `err` is not `nil` in the `err`.
I think this should be `now.Before(cert.NotAfter)` instead of `==`
Remove the leading `io.org` part.
I think this should be `Number(default=10e-6, doc="")`
We can't use `onView(withText(otherTheme)).perform()` in this method.
can we just use `deployment.ClusterName = cluster`?
@deads2k I don't know why this is here.
Is this needed ?
I don't know if we need this, but we should probably also update the version in the doc.
Why not `FileFile`?
is this a bug or should this return an error instead?
`score_thr=0.3`? Why not `0.0`?
This one was missing.
I don't think you need this.
can you use ast_ctx->GetAnyObjectType(). We can avoid using ast_ctx->GetAnyObjectType() in all cases.
Let's use `RTL_` here, since we already know it's not null
The `GET` was added here because it wasn't being used in the `if` condition.
We should add the new `Heapmanager` parameter.
Is there a reason for this change?
I think we can remove this `default://do nothing` now, since we are not using the default `SnackBar`
nit: remove empty line.
Shouldn't we use the `dev/null` path instead?
This is the fix for the issue.
I don't think we should be setting the `overlayText` here.
Please use `s.IsHidden` instead of `s.IsHidden`
Is this used?
@tvalentyn - I'm not sure this is a good idea. I think it would be better to be explicit about it.
I think you can remove the `the-cstor-volume-"` case here.
This is a bit of overkill. I think it would be better to move the logic into the `locked_features` component, and then use it in the view model `if !is_features && !is_features.any?`.
This is a bit of a breaking change, but I'm not sure if it's worth it, because it's a `analyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyzealyze
This is a bug fix.
@kring I'm not sure if this is the right fix. Why did you change the type here?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think this is the right place for this. The balance is an instance of a `receivable` (which we're trying to load) from the `receivable` instance, so it's not really necessary.
this is the same as the previous one, we are using the `AccountSignerAddress` function
@mfojtik why do we need this change?
I don't think we need to change the error message.
This is a change in behaviour, but I'm pretty sure it will be needed in the tests, since the tests are not using the `cs1.my` url.
The check should be redundant with the check above.
This method should probably be renamed to something more descriptive?
Is it not needed?
I don't think this is a valid default. We should probably just add a new one.
what is the reason to do this if `params[header] == None`?
This is the only change needed in this file.
Should we keep the package private?
I think you want to include the header file here.
I'm not sure if we should be using `cursor.getInstance(db)` here.
Please move the check outside the if block and then move the check outside the if block.
I think this is not the right place to put this. The `isUsedLocalVarWithoutInitializer` call below will do nothing.
I don't think it's necessary to call this method. I'm not a fan of having two methods: `<Column>` and `<Column>` (which I don't have any strong opinion). The only thing I would like to suggest is that we don't have to call the `<Column>` method.
Can you use `transform[:1]` here instead of `transform[:maxTrace]`?
This is not really correct, but I'm not sure if we should have any better name.
Why not just return `key == null` ?
This is not a public API, but it seems to me it's a public API.
I don't think you should import `LOGGER`.
Is there a reason this is not `text/`?
Should we also check if imageAlpha != nil is set here?
why is it needed here?
I think this check is redundant, since `Disposing` is not used.
I would prefer a more explicit name for the variable. "UnknownFields are set to `True` when using `IoULoss`, or `DIoULoss` or `GIoULoss` or something else.
This is a leftover from the previous commit.
This is a bug fix. The `run_in_parallel` check is not needed here.
Please use HTTPSchemeKey instead of HTTPSchemeHTTPS.
This needs to be moved to the base class, since the `Task` method is only used for `Stream`.
I think you can just remove this line, as it is now the default.
I think we can just use a function `std::Test` instead of `Hack_EQ`
Is this change necessary? I thought we never hit this table in a transaction.
Why not `root`?
should we also change the `versionHistory`?
@executable is nil, no need to check if it is a list
Is it possible to use the same value for both `SUBPACKAGE_NAME_FORMAT` and `worker_NAME_FORMAT`?
Do we have tests for this?
I'm not sure about this one. The `i = 0;` is not the right thing to do.
Why was this changed?
I would use `.map(ignored -> Stream.of("\"\"")).orElseGet(() -> Stream.of("\"\""));`
This is a bit of a hack. I'm not sure we want to make this change in behavior that's the best way to do it, but I'm not sure if we can just add the `NONEXISTENT_ENABLED` flag here as well.
This is a little weird, we are using the `ipv4.String()` method in a different file. I think we can just use `ipv4.String()` instead of `len(p1) == 0`
Can you make this package private?
This method doesn't need to be annotated with `@InputFiles`.
This test is failing on all platforms. It's not clear why we are using the `foobar` in the test.
I don't think this is the right fix. The correct fix is to use `Payloads` and `PayloadTestConsole` instead.
I don't think we should add this to the session.
This is the fix.
@juanvallejo fyi, I don't think this should be here
This is a breaking change, right?
This needs to stay as it's not used anymore.
remove empty line.
I don't think this is correct. `GetFilter` is a required argument, so we should be checking if it's not a filter.
This should not be necessary.
can we use `auto` here?
This is the main change. I think it should be reverted.
Is there a better way to do this? I think we should do it only when it's needed.
Hmm I don't think this will work, we use `noencTarget` instead of `nonoHandle` in the future. I think this will break existing users that have `noencTarget`s.
We can remove the `proposal` part because we don't have any code using this
`formerpet->BuffFadeByEffect(SE_Charm);` is not needed here, it is already checked above
I think we should be able to get rid of this check entirely. It's already in the case of an empty strings.
I think this should be onPlaybackEnded, because the type is not an array.
I'm not sure this is the right place for this. This is a different approach. I'd prefer to have a separate `KWindowSystem::forceActiveWindow`, which would be the correct place for this.
This class should be public.
remove empty line
Why did you remove this change?
Use the new Ruby 1.9 hash syntax.
This import is unused now
I think you can just remove this function and just do `querySelectorAll(...)` in the `if` below.
Is the new version of the hex necessary? The new version of the hex seems to be the same.
Nit: please use tabs instead of tabs
I think this is the right place for this.
Please revert the changes to this file.
I don't think we need the `templates` here.
Why did we change this?
Shouldn't we check for both `kinesalite` and `KINESIS_PROVIDER`?
<msg> <msg>  now I realized this is not part of the change that fixes the issue. I realized that the new test was failing because of the existing behavior of this PR. @kroitor do you know what was your thoughts on this...? I think it was still trying to understand why we had `.selected` here but I think that's a reasonable default.
This should be `rule` since we are not setting the summary at all.
Why do we need to change the type of ignore_index to ignore_weight?
Is it possible to have a test for this change?
This is not used.
this is a bug fix. I'm wondering if it's worth to make this a bit clearer. What is the reasoning behind it?
@deque-dot I think this is the only change that makes sense. The `ast.yaml` file is not used anymore.
Why is this needed?
Is this a change in behavior? If not, I think it's worth adding an explicit message here.
I think this should be a field field. We should also check for `cls` here, since we are already doing a check in the `collection_id`.
You can remove the `log_interactive` function now that it's not used.
You should use `declare(strict_types=1);`
this is a bit weird, we have to make it more explicit. I think we should just use `C0301` instead.
These are not necessary for the reviewer. The `reflectable` variable is already added to the spellable, so it's not a bug in the commit message.
I'm not sure if we need to do this here, since the column `change_column_null` will only be called in a column. I think we should just remove the column and have the column `default: false` and `default: default: false` in the column `default: false` and `default: false`
Why not use the `name:        "infraID already set on cluster provision", // fatal error}` here instead?
I think it should be changed to `github.com/mysteriumnetwork/node/openvpn`, since it's not a dependency.
I'm not sure if this will work for the binary, but it's not the best way to go. The `nupic` package is used to set the `nupic-logging` package for the `nupic-start.conf` file, so I think we should be able to remove this, too.
I think this is a change in behavior. I don't think it's needed anymore.
`net.ipv4.conf.eth0.rp_filter=2` is a better name.
I think this import is not used anymore.
why not just return the `id` as the second argument?
Is this change intentional? I don't think it's worth it to have a new `lowercaseFields` property in the code.
Can this be `@since` instead?
Can you please add a TODO to remove the TODO?
These are the only ones that are not used in the code, but they are not used anymore.
I think you need to add a `_context.props`, since it is not a new instance of the file
This will cause `selectionCalculations`, which will cause `<=` to be the default.
This is a bit confusing, because the archive isn't in archive, which is not the best. Maybe we can add a check in the archive?
This seems like it should be a separate PR to move it to a separate PR
I'm not sure if this is the right place to add this. The IDictionary is used for when we need to support a new type. I'm not sure what the best thing to do is since the IDictionary is used for the new type.
This should be `LOG.finest(String.format())`
this is not a valid value, we should be able to pass it in to the `*`
@mattpap this looks like the PParamParam test was removed. Is this intentional?
I'm not sure if this should be removed as it is now the default
It looks like this is a `values` field. Should this be `valuesIndices` instead?
I don't think this is correct. We should probably just remove this.
@saghul, this isn't needed.
This should only be needed if `b->w` is not set. The `!is_flag()` call below is called before `this` is called.
The last 2 conditions should be added in the first commit
@nickytonline I think this is the fix.
Please remove the trailing whitespace
Is this change intentional?
I think we need a more descriptive name for this. `Datadog-AzureAppServices-Resource-ID`
This is a no-op. I think the assert above is unnecessary now.
Shouldn't we also add this to `X-Content-Type-XSS-Protection`?
Why not just `return` here?
This test is not needed anymore.
This was an interesting question of how the `PantsRunner` function can be used to run a `PantsRunner` and `util.by_util` is not being used, and it seems like it could be a problem in some cases.
This import is not used anymore
Can you also update `make doc` to include the `--StandardCharsets`?
@mattcaswell, this is the only place where we use the "real" module, so I don't really like the "real" name here.
this is not needed anymore. we can remove it
It seems like we could use a `ariaDayPrefix` here.
This is a bit of a hack - I think it would be better to do it inside the `if (component.isEnabled()) {` block.
Can we add the same name to these constants?
do we need this struct?
This change is not necessary.
Can we call this `RuntimeTLP` instead?
This is the default for 10.x, so it should be 4.x.
This is a typo, right?
"can't unmarshal count or auto scaling"
this is a change in behavior, we should not have to change it.
We can remove the `Kubernetes` from these packages.
I don't think this is needed.
Is this change needed ?
I think this should be reverted.
Should we add the `servers` as a global parameter to `nni/servers`?
I'm not sure why you deleted the `RTPSDomain` part. Isn't it?
This is a change in behavior. Is this intentional?
Can we add a `#if TRUE` to this package?
This is not the right place for this, because the code that is in `DefaultInstrumentation` has the same problem.
@jridgewell This was a bit of a mistake, as the previous code was not able to check the `proposal_link_text` in the first place, and it was not able to check the `proposal_url`.
This is a temporary change.
Why is this removed?
is the log level intentional?
We should not be doing this in the `seelog.Info` part, we should just add it to the connection's constructor
This should be a docstring
I would prefer if we can keep the `mixed` part of the class, since we're only looking for one class.
You don't need this import.
Should this be `constexpr` instead?
I'm curious, what is this for?
This was a mistake, and the changes in this file are unrelated to the changes in this file.
I'm not sure about this. It's the correct way to fix the issue. I'm not sure if we should add the `config.add_api_capability` call in the `settings` function, but it's used in the `if` block.
I'm not sure if this should be here. The `Number` argument should be a `const`.
@franz1981 Can you confirm this was the intended change?
You should probably also add `return "Pod Failure"` here, since it's a different type.
I'm not sure if it's a good idea to include `FetchTipSets(context.Context, types.TipSetKey, peer.ID, func(types.TipSet, error))` here.
Why is the standard definitions of CEL functions?
This change seems unrelated.
This is a bit weird - the `host.cygwin_installed` is only installed on the `cygwin_installed` table, and not on the `cygwin_installed`.
I'm not sure if this is the right fix. I think we need to keep the sequence numbers in a public API.
I think it would be better to make this a constant, so that the ID is not in the schema.
Why do you need this?
This is not the only change I see. The `sigFound` is used to set the `err` value to `false`. I'm not sure if this is correct or not. I think it is a good idea to remove the `return err` check.
I don't think we need to add these new properties here, they can just be accessed via `unlayoutCallback` and `unlayoutCallback`.
Is this correct?
Nit: `number` is a bit redundant here.
We should probably check the error here.
I'm not sure if it is a good idea to make this public. It is a breaking change.
`AttributeError: 'AttributeError: 'AttributeError: 'AttributeError: 'AttributeError: 'DD_APPSEC_IPHEADER'
This class is not really used.
I think the name of this test case should be updated to reflect that, it is not really relevant to the PR
This should be changed to use the new constant.
I'm not sure if this is the right way to do that. I think it's worth it to just say "This administrator does not belong to any rules.'."
I think this is a bug fix, we should not change the behavior of the `EPISODES_PER_PAGE` method in the `absolute.py`
This is a big change, but the new version is not in the right place.
This line is not needed
Is this TODO still required?
why remove this?
This is the only place where we're using the remote host, right?
I don't understand this change. It looks like this is the only place this was called. It is used to check if `epochNum <= p.cfg.FoundationBonusP2StartEpoch` and then check if `!isFoundationBonusExtension()` before calling `getFoundationBonusExtension()`
I'm not sure about the `f` here.
"Error reloading permissions file"
Why do we need to check if the user has the same result?
This seems to be a good idea to do this with a non-zero check. I think it would be better to do it in a separate PR, but I'm not sure what the right thing to do is.
This is not needed, you are already setting the HX::m_was_finalized to false
I think this check can be removed, if `len(info.RPCName) == 0` check will never be true.
Wouldn't it be better to rename this to `javax.WebSessionOAuth2AuthorizationRequestRepository`? It is used in other places and I don't think it's necessary to change the API
I'm not sure if this is the correct change. I think the `if err != nil` check is unnecessary here.
I'm wondering why we have this in the first place? Isn't it better to call this in the `sortFiles` method?
I'm not sure this change is correct - `gcc` is the default. I don't see a need for this.
I'm not sure this is correct. We are not going to use `isify` in `createFunction` anymore.
This isn't a good name, it's a simple `PROVIDED_FEATURES`.
I think this should be a separate PR, right?
This is a breaking change. We should be using a different class for this.
Can you remove these spaces?
I'm not sure this is the right change...
This is the only place that uses `m_al_comms.clear()` is called.
Is this the right type?
should we make this `//` or just `return nil`?
I'm not sure why this test changed
This is a bit confusing. If the method `slug_matches?` and `admin?` were to be used, then the method can only be set to true. If we don't need to `@user.admin?` then we should remove `@user.admin?`. If we do, then we should just remove `@user.admin?` here.
This is not correct, but I think we should probably add a check here that if the column is not specified and not not set, then it should be removed.
I think it would be clearer to just keep the `AutomationPolicy` at the end.
I think this is not correct. The `this.baseUri` is already set in `BasePetstore` above.
I don't see any need for an explicit `features` argument, since we're not using it anywhere else.
This was the bug that was fixed in #5343.
We should not use the `//` class here.
This is not needed, we have a `boolean` statement.
This should probably be a `[VolumeAPIPath]` instead of a `VolumeAPIPath`
The `application/json` is not needed.
This is a breaking change. I think it should be in a separate PR.
I think this should be removed, since the only caller of this function is using it.
I'm not sure if this is the correct fix. I think `Program` is correct.
Why not just use `del attrs.get()`?
I don't think we want to use this. I would rather just make this a global var, and make the `given` keyword be used. This way the `name` and `name` are not in the same package.
@sjenning I think this should be done in the `DistributedSpanContext` branch. It's also the case where we can't create a span and then we can use it to pass the same context.
This is a bit confusing to me, since the exception message is a bit confusing to me, I think it would be better to just have the `exflow` as an `Optional`.
Why is this necessary?
This check is no longer required, right?
I think you need to use the `alpha` constant here, it's already handled by the `common` constant.
@jackfrancis I think this should not be needed, as it is a part of the `arc` check below
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is not needed anymore.
I don't think we need a separate package for these packages.
I'm not sure if this is the right way to do it. I'd rather have a test for that.
`str` is not a valid name, we should use `str` instead of `str` here.
@jcotela is there any way for us to keep the C++ code?
I think we should remove these `@private` tag.
Should we use `dumpConfig` instead of `keys` here and below?
I'm not sure if we need to do this. It seems to be a better idea to use a `_vectorSpan` property.
This is not the right fix. The problem with the code is that if sqlalchemy is None, it will be the first sqlalchemy.
Do we want to add these as well? I think we should be able to remove the whole `reportmust be used`.
This method is now deprecated, and should be removed.
Is this correct?
This file should be updated to match the other files
I think we should be looking for the `single_user` case in the controller instead of the `single_users` method
This is a bug in the `ReadFull` function, so it doesn't need to be re-executing.
Should we have a `.Int` here?
I'm not sure about this. It is possible that `getRChannel` returns the `max` function and the `max` function will be ignored if `getRChannel` returns `false`.
This is a little confusing. I don't think it's needed for `db` to be `nil` in case we want to be sure that the user can authenticate against a `null` or a `string` value.
Can we rename this to something like `conservation_conditions_fr`? I think it's more clear what the "conservation" means.
Should we call destroy_request() before this call?
I don't think this is the right place for this.
Why is this condition removed?
why not use `attr_value['string'] is not required` here?
`last_hovered_link` will work with `last_hovered_link`
Do we need to do something if it's not a valid resource?
Please add this namespace to the namespace as well.
I think you can just use a `newNewMetricsCsi()` here, and use the default value to get the right value.
This is a change to the `last_run` to avoid a warning on the `start_time` method.
This is not needed, it's already in the base class
I think we can remove the `withwith` method.
can we make this `final` and have it be an abstract class?
I'm not sure if we need to change this. The `/^` and `/` are not used anymore, so we should be able to remove them.
Why is this change necessary?
What's the plan for this?
The name of the test case seems too long. Can you please change it?
Can we make this a local variable and just use ` 3600000` directly?
This is not a good idea. If it doesn't work with the `result` argument it will return `None`.
Please revert this change.
Please add `optimizer.utils` to the `test` module.
`auto` and `components` are all lowercase. I would just rename `auto` to `components = ns->components;` to match the other places in the code.
Why is it needed here?
This is a bit of a weird thing. If we are going to do it, we should probably add a `acc` check to make sure `acc` is not an `vert` and then check `break`.
This is a little confusing. Why is it needed?
This test will fail on older browsers. I think we should test the case where the `group` argument is not set, and then check the return value.
This is a wrong name. It's used for both versions.
I would suggest using `GetBytes` to be consistent with the other fields.
@mattcaswell, this is the fix. We need to fix the test.
This was changed in #2727
This will be very likely to happen when you're not doing anything with the `#if defined` check. I'd suggest to move the check to `LINUX` instead of the `#if defined` block.
I think we need to clear this in the previous PR.
I think this should be a separate function, not a function.
I think we can remove this now that we're using `-Wno-invalid-offsetof`
Is this still a good place for this? I think the `IsMSIEnvironment` is a bit redundant.
Is it possible to have a `nullptr` parameter here?
this is not needed. if current group is not None
I think we should keep the name of the variable. It's not used anymore.
should we just remove this?
I would prefer to have this be a constant
This should be `go.uber` instead.
Why did we need to change this? The `FallbackDNSResolverAddress` is used to get the same behavior as the previous `addrs` and the `metrics` below is used to ensure the message has been logged, and the message has been removed from the message.
I don't think we should be using this - the `C` is not needed.
This is a bit of a hack, I'm not sure if we should do this. The `edit` function is not really doing anything with the `oldVersionCode`.
This should be `static int int jx_input = 1;`
This change is not related to your change, but I don't see any change in this file.
I think this is the only change that makes it sound like an improvement to me. I'm not sure it's the best way to do this.
I think this line needs to be removed.
This is a bit confusing, because it looks like the `.fully_formatted` method is used to determine the type of the `Object_id` method in the `Object_id`, so I would have expected this method to have the type of the `Object_id` method in the `.fully_formatted` method, but I think it's a good idea to have this method return a boolean instead of just a string.
Should this be a `@Deprecated` instead of an enum value?
do you want to add the `PolicyNamespace` here?
I'm not seeing where the `workqueue` is used, but it seems to me that we don't have to keep this in the code here.
What is the purpose of this change?
I'm not sure about this change, as it is not really necessary to store the `Parameters.FirstOrDefault` method in the constructor.
I think this should be moved to `createTag`
Shouldn't this be `config.notarize = config.notngize` ?
Shouldn't we also test that the `isAuthSalt` has been removed?
@deads2k i don't like this change, but i'm not sure it's a good idea to use `ecpb` in the `config` package.
I'm not sure about having the error check here. It's not necessary. It is used in `lib/api/api` but I don't see it being used.
Please add a space after `!=`
Is there a better way to do this?
I think it would be good to test this, but I'm not sure how to test it.
Can you add some info about what the user does?
Line is too long. [98/80]
I think we still want to use the `CodeToStatusCode` here, since it's a new type of package-level package-level package-level package, right?
`sel.set(sel.extentNode, sel.baseNode, sel.baseOffset);` should be a separate method, since the function can only be called once, so we don't need to set it in the call site.
I think this is not a bug, since we're using `Orig` everywhere.
You don't need to add new `fmt` prefix here, you can remove the `fmt` prefix from `io/ioutil`
Is this a scope scope? It doesn't seem to be used anymore.
I think we can remove this line
I'm not sure this is the right fix. The `fragsize` is used in `CollectionCollection` and the `fragsize` is used for the `CollectionCollection` and `CollectionCollection`.
This is the change to the test case that was not working. It seems like this should be a separate change.
Why not just call `OAuth2LoginConfigFormLogin`?
This should be `m_liveliness.lease_duration = c_TimeInfinite;`
This is a bit of a hack, but it's not a good idea. It's not the case for a single map, so we can use `Array.get(new byte[dupe.remaining()]).get(bytes);`
This is a change in behavior... but I don't think we need this. I'd rather see it in `Condada` and `Condada` as well.
We should check the other files in the same directory as well.
why this is removed?
This is the only change I see in the PR: the `Date` prefix should be `Date.min`. I think the `Date` should just be the last one, since it's a list of supported values.
This is a good place for the `_internal` method, but it seems like a very specific method. I'd prefer to have an `_sdf` method that returns the `_internal` instead.
nit: I would prefer if we used `http:\/\/"`, not `https`.
Please update this to `googlesitekit-site`
This is not related to this PR, but I would suggest to keep it in a separate change.
I think you can get rid of this `facet_field_response` now that you have the extra lock lock in the params
"You cannot delete any item. You should modify the existing existing"
Is this an unrelated bug fix? If so it seems to be a bug fix.
This is the change that fixes the issue with all the data, but I'm not sure what the best thing to do is.
I don't think you need to remove the client persists across connections here, it is already added to the client.
We should also add this to the `ize` method.
This should be in a separate PR
@tgamblin Shouldn't these be `terminal` or `terminalX` instead of `terminal`?
I think we can just return `err != nil` here.
These changes seem unrelated to your PR but I'm curious why we moved them to the "Dropping" part.
I think we need to use the same name as the last one in the file.
I don't think we need the `RespondServiceHeader` service here. We already have the `RespondServiceHeader` service.
This should be `if commandSet == targetGlobalCommandPath {` I think.
Is there any reason for the number of tests?
This is a bit confusing. How does this happen?
I think it's better to use a more descriptive name for the variable name. `path/filepath` is a bit confusing to me.
I think this should be on the `Error` branch, not on the view.
Why is this change required?
nit: can we just remove the `props.ref`?
This is not related to the fix.
We should only return `false` if `params` is `nil` here.
I'd rather not do that in this PR, but I think it's a good time to add a `check_not_scrolled` import.
Why do we have to use `std::int64_t` here, since it's a `const` statement?
Is it not needed anymore?
You can't use `get_file()` in the code base. You have to create a full directory inside it, which will raise a warning if the directory exists. This will raise a different error if the directory is not found.
This is not a good place to put the size of the string. It is a bit confusing.
So this means that if someone calls `Accepted == 0`, we will get the same response for all the other languages?
What is the point of this change?
This change is not needed, right?
Why do we need to add this?
Please remove this empty line.
This is not needed. It will not be available in the model anymore.
Wondering if this should be a `compute_item` instead of a `Set`?
nit: you can use -1 here.
I think this should be a `Integer == null` instead.
This is not a good change. It should be in the `Pair` and the `@Integer` methods in this file.
This should probably be `sh.cmd` instead. The package name is `elif "$(uname)`
This should be `const` and not `const`
I think this is not a part of the public API
I think this should be a `Spec.Base`.
I don't think we need to reset the cache here.
This is a bit of a weird thing, I think we should do it in the test `client/client/client` instead of the actual `client`. I'm not sure if we should be able to do this in a follow-up.
This is a bit of overkill, can you fix it in a follow up PR?
Can we use a `dynamicListenerRegenFilePath` constant here?
I think this is not the correct place to handle this. We need to move the `Single` check to the `api` package.
I think it's better to use the same resource for `WFDIR` (or `WFDIR`) to make sure it works for all the users, but it's not clear what this environment variable is.
I'm not sure if it is worth adding `oneof` to the end of the list, but I don't think it makes sense to have it here, as it is in the `State` list.
we can just use `head` directly here
I think you should check if `app.DisableSettingsManagement` is nil before calling `FileExists`.
This is the wrong place for this.
This is the only change that affects TF TF TF. I'm not sure how the `ErrSubnetsNotFound` argument is used for `errors.New` and `errors.New` methods.
This was a bug in the bug, but I think we should remove it from the PR
This should be imported as `import`
Is this change needed?
Can we also remove this `&` in `GetTasks`? I think it's a little confusing to have `PathTaskID` as it's a `PathTaskID` in `Pathparent`.
Is this the correct place for this?
I think this should be `if len(remote.DenyImports) > 0 {`.
I think it would make sense to have a test that checks for the function to return a bool, and then you can just use the function that checks for the function to return the bool, and the function call `Newmask()` returns a new function.
This was the only place I've used it.
I'm wondering if this should be `char *` or `char *offset` instead of `char*`, since we are using `char` on the `char*` instead of `char*`...
Is there an extra check here that the length of this function is different?
Why is this needed?
I think this import should also be removed.
I think this should be `(int32_t) new;`
Nit: This line can be simplified now, and the rest of the `if` statements aren't necessary (and the `ByteOut("\n\n\n`)
(question) Is this a temporary error? I'd expect it to be used for some reason, and not just a simple simple path.
This line can be removed.
why not use the `map(Tuple2::_2).toStream()` ?
shouldn't this be `@Then` ?
I think we can just remove this field.
This should be `super().__init__(title=title, node=node)` and in other classes, that will make it easier to read
you could use a name for this. this is a little confusing. I think it is a little confusing, as it is used by other packages.
I think it would be good to have a more descriptive name like `ModTime` to indicate that the file is not in `transaction.Read()`
why remove this one?
I think you can use `sizeof` instead of `version` here.
I don't think this is the right place for this, since we have a general rule to generate a different address.
I think this should return `list.add(newStem(stem, formID, stemException) -> {...}` instead, since the `list.add(list, stemException);` will always be 0. The `list.add(newStem(stem, stemException) -> {...}` will always return a value, and the `list.add(newStem(stem, stemException);` will return the value that the list will be 0.
I think we can just use `is` instead of `Install`
I think it's better to move these to the top of the file.
Is there a way to do this without needing to change this?
This is a bit of a hack. I think it is a good idea to move this function to the `README.go` file and use it in `README.go`
Can we make this a const?
I don't think this is the right place to put this.
`request` is the default value for the `groupKey` parameter. We need to move this to the `maskKey` class.
You can use `#ifdef NETCOREAPP` here.
This should be moved to a separate PR, since it's not used in tests
Style/RedundantSelf: Redundant curly braces around a hash parameter.
Should we also add this option to the `--ignore-chromium` option?
I think it would be more consistent if we use `testTransfer.Proto()` here instead of `testTransfer.Proto()`.
Why is this removed?
This should probably be `log.Debug("%s", err,,,`
I think it would be good to have a separate flag for these as well.
It seems like we should use the `go list-api-types` function here, instead of the `open bucket` parameter.
I think this should be renamed to `_UNSET_NAMESPACE`.
I would just return `self.debugWarning(message ,exc_info=True)` here and remove the `values` statement below.
why this one is necessary, we don't need to add it here?
Does this need to be `TracerProvider`?
I think it would be cleaner for this to be called `format_firewall_rule_name` to be consistent with other places.
I think this can be done in the `aws/internal/internal/internal/internal/internal/internal/internal/internal/internal/internal/testing_test.go` file.
What is the purpose of this interface? I don't think it is the best place for this method
The Type is the type of ACMEChallengeType. It should be also changed to "http-01" in this context.
I think we can just remove this line now.
Can you add the null check here? I don't think it's necessary to add it.
Why are we not using the `RenewBefore` here?
`to` can be `null` if `equals(to)` fails, right?
I'm not sure if this is a correct change. I think we should be able to just use the `*` keyword in the `*` tag.
I think it's better to use the default setting for the package.
I would use `mydir` to test the current user. The new `mydir` directory will not be included in the package, and it's not a problem for the user to test the full process.
Why do we need to change these?
@nmittler why is this change needed
Why is this sync?
This was the only line needed to fix a bug.
This should be `_`.
This is a very generic message. What if the message is not in the same format, and why is it different from the one above?
Why is that needed?
This import is unused.
I don't understand why this is needed. The only difference between the `List` and `T` are the same code.
I think we can get rid of this method now, and do nothing if we want to.
please revert this change
`getBitMask()` is not used anymore.
Is this needed for anything else as well?
`newModifications` -> `old_state`?
Can you please add a TODO to remove this?
Why do you need to remove this?
Why not `// +recover`?
please revert this change.
This should be `el.querySelector('summary')`.
I don't think we need this. It can be `public`
This is the same as `Presented` and the `Failed` is used in both places, so I think we should just pass the `PresentError` as the default.
This is a change in behavior, but I'm not sure why we would want to fix the `*` version here, but I don't think we need to change it in the code.
Is it possible to have a test that checks for this error and the `torch.utils.unbox` file?
This is a very minor thing, but we can remove it from here.
should this be null?
I think this change should be reverted.
use constant?
Should we make this a static method on `[MethodImplOptions.AggressiveInlining]`, or is this a static method on `MethodImplOptions.AggressiveInlining`?
I'm not sure we want to keep this, since the only thing we use is the default price, so it should be `f.Set("Cannot send transactions with value and calldata")`
Why does this need to be set to true?
This is the only place where we've got a `Error occurred` exception. I'm not sure if we should just catch any exception in the code, or if we should just catch any exception here. I think it's better to just catch any error message.
You can use `customize_theme` instead of adding the new parameter.
I don't think we need to add hooks to the component, so that we don't render the HelpMenu here. The problem is that we don't render the HelpMenu here.
Line is too long. [92/80]
Why is this necessary?
Please use the global var `_` for all of these.
Is this change necessary?
This import is unused. It should be moved into `org.hyperledger.*`
I think this should be moved to the top of the file.
This parameter is now unused.
Shouldn't the value be `None` here?
This is now a breaking change
Why do we need to add the other button?
You can use `$this->isAvailableStock()` instead.
Isn't this a `-1`? I'm not sure if this is a good idea, but I'm not sure what the `-1` is.
I don't see any need to do this, it's only for the options.
I think we need a test for this. Can you please revert this?
I think we don't need this import, since we are not using it anywhere in this file.
I don't think we need this, can be removed
Is this change related to the fix?
This should be `'` instead of casting
I'm not quite sure this is the correct spelling mistake in this PR. I think the `256` argument is unused and the `n` is removed.
Why did you remove this line?
This interface is only used for a specific class, not just a part of the public API.
I'm not sure if this is a good way to do this, but it seems like we should do it in a separate PR.
let's make it `const` for now
I think this should be a separate commit, otherwise it's not obvious why we are changing it.
Can you add an example here that the user will not expect it to be a problem for this case?
I'm not sure we need to catch a specific exception here, as we already return a `List`, so we can get rid of it.
I think we can remove the `map` here, as it's not used anywhere.
Line is too long. [87/80]
I'm wondering why `base.HasPrefix` is not a list of `""`. I wouldn't expect this to be an `int`, but I think it's more clear to call `base.HasPrefix` in the future, as this will be a breaking change.
Rails/Present: Use if org_id.present? instead of unless org_id.blank?.
This is a little strange, since we are already setting the class of the `auto_fire` variable. I'm not sure how this could be done, but it seems like it's just used by the `auto_fire` variable. I'm not sure if this is a better way to do it.
I don't think you need this, it is already loaded by `_metadata`
I don't think we need to do this. It is a bit of an overkill, but I think the original code is more readable.
This should be done in the `try-except` block.
I think it's better to use the constant here.
does it make sense to move this import to the top?
I think we should add a new constructor for this.
I think we can remove this from the core.py
I think this should be moved to another PR
I don't think we should be using this test.
I think we need a more explicit name for this.
I don't see why this is necessary.
We can't change the signature of this class. It's not clear why it's not a "native"
can you add a comma at the end of the line?
I think we should use the `key` key here
I think you need to define this variable in the constructor
Is it still needed to make this change?
Rails/InverseOf: Specify an :inverse_of option.
This is not a valid solution. It is a very minor thing, but we are not doing this here.
Is it possible to have a test for this? It's just an idea, but it's not clear why we need to change it.
Should we make this a class-level constant, e.g. `raise 'Unexpected error'`, and then just call it with `raise 'Unexpected errors'`.
This is a no-op if the user is not set.
We should not need this. It should only be done if the flags are not configured, and if it is not then we should be able to get the value from the `autoColumnSize`.
This should be `return "", errs.Wrap(values) != nil`
Do we need a function for this?
I think it's better to move this to the `aws.NewConfig` method and call it from `Region` to avoid duplicating the API.
shouldn't we also do a null check here?
I think this is a good change. The acc might not be available. I think this is the correct place to put this check here.
This file is not in our codebase, so I had to make it `.package().save(() => None)`.
I don't think this is the right place to put this.
This should be `x: y`
Why is this not a "Error" message? Is it because the message is not a "error" message?
Can you also check that the user is not equal to the `Try` method, and then check that the user is equal to the `Try` method?
I'm not sure about the name of this function. It's not a good thing to do, but I'm not sure if it is worth it to just use `static_cast<void>` instead.
This is the only change that affects this file.
please revert this file, it is not required.
Is it worth adding a new line before this?
This is a bit of a hack, but I think we should just make `call__"` the same, as in `_wrap_method_with_call_and_maybe_retry`
Do we need this?
This is a little weird. I'm not sure what the problem is with the rest of the code base.
I think we can keep these assert. We can probably remove the assert.
Why not use a `is_get_message_definitions()` method?
I think we can remove this line.
I don't think you need to check for `false` here - it's the case that the caller doesn't know about the value of `t`
I think we should remove this line now that the function is called `isHiddenWithCSS`, since we already know the `vNode` is always `null`.
This doesn't seem to be related to this pr ... please revert
I think it would be better to have the `||` check in the `httpNotFound` and `||` check for both `httphttp` and `||`
I think we can remove `Sync` from the cache, since it's only used in `types` and `types.go`
I think we should remove these now that we have the `.txt` file.
can we make this the default?
This is a bit confusing, as it is a bit confusing to read. What is the `PANEL_DESCRIPTION_WIDTH` used for?
this line seems unnecessary. you can remove it
I think we could just use the `repo` field here.
Can you explain why we need to do that?
I don't think you need this change, it should just be a separate PR.
You can use the `HeaderTags` variable in the message.
This should probably be `ServerServer OSFamily string: %s`
I think we should just remove this and pass in the `#ignored_error` as the default.
I think we should just check if the request is nil and check if the endpoint is nil, right? Otherwise we don't need to check if it's nil and then check if the endpoint is not nil.
This should be changed to `createElement` as well.
It seems like this should be a `setUp`?
I'm curious why we are not using the `elementText` variable here?
why is this a pointer?
I think this is not needed since we only have a single quote in the first place.
I think it would be more consistent to use the `getRawResponse` constant here instead, and use the `getRawResponse` function.
We should use a more specific `getComputedStyle` function here.
Please use `applicationName` instead.
I think we should just log the error here. It's probably fine to just log it.
I think this was accidentally removed
This isn't used.
This is a bit confusing, as the `_last_status` is a different thing.
This should be an optional `Optional<Integer>`.
What is this for? I would expect it to return `None` and not `DoFn.get("fonts", glob("fonts/*.ico")`
I think we still have the `return nil` here.
This is not required. It is public and we don't need it anymore.
Nit: I'd keep the space between the `:` and `=`
I think we should use the `newOnService(this)` method here instead
Why is that?
I think this is not needed since we are not calling this method in the constructor.
Can you please add a space after `padding: 0` and avoid the closing brace after `(` and `padding: 0`?
The `GetCurrentMethodName` and `Xunit` seem to need to be public, since it's only used in one place.
Just to make sure I understand this correctly. The `PALETTE` argument is a `String` so that it is an `Optional`?
I think it's better to put this import in the `if (pov_TYPE_IMPORT)` block above it.
This test is not related to this PR, and I think we should be able to use the `proposal` helper for this spec
I think this test should be moved outside the `else` block, since the `AccountState` now returns a `HashMap`
I think this should be renamed to something like `approval_notice_approve?` or `approval_notice_approve_approve_VER`
This is a bit of a hack, but I think we can just put the default value in one place, and then put in a new config property.
I don't think this is needed, the ` URI icon` should be removed from the class.
I think this is not the only place where we need `positional-arg-name`? I think it's a little confusing, since it's a `Config` struct, and it's a `-` struct, not a string, and a `-` is a `Config`.
This is a change in behavior, but I don't see any other uses of `cuda` in the code base.
Why not use `opt.http://localhost` ?
I think we should keep this.fulfill()?
Do we need to add these new properties as well?
This is a little confusing. I'm not sure what the best way to do it is.
In the past we had the correct issue here, but it seems like we could just use `using OpenTelemetry.Tests;` here instead of `using OpenTelemetry.Logs`.
I think we should use the `on` attribute here.
I think this is a bit of overkill, but I'm not sure if we can get rid of this test (as it's a bit confusing)
You can remove `!= $this_class` here and add `?string $this_class` to the `?string $user_class`
I think we can drop this part
why did you need to change the code here?
Why do we need a new `__init__` call? Seems like we should just just return `None` in that case.
I think we should be more specific about this (I think we should do it in the `@return { ...} TRUE if dimension filters are valid, otherwise FALSE.} ) { ...}`.
This should be a separate commit
Please add the docblock for `$row_setting_id`
Is there a better place to put this line?
I think this should stay as `self.locator` instead of `self.locator`
is this a TODO?
This is not needed. The return type of `newArrayList()` will return `false`.
I don't think we should add a `.` prefix here.
Why not just do this in the `memoryPlugin`?
Why do you need to do this?
You should be able to use the default `None` here, but I'm not sure how the default value is for the default.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why remove this?
i don't think you need the `.flatten` any longer.
I don't know if we need this part of the code, but I'm not sure we need to change this.
nit: "generated ``molecule`` is similar to the ``molecule``
This can probably be `encoding` if you want to use `encoding` for the `attrname` field, but you can use `encoding` here.
Should not be part of the package.
I'm wondering if it's worth to use the `chan` interface directly in the `close()` method?
This error is not correct. The caller can pass the error into this function.
I think we should remove the `title` action here as well
@davidjumani should this be a `Optional<T>` instead of a `Optional`?
Can we just remove the `!isIfBlobExists()` check?
Shouldn't we also do the same check for xwm->atoms[_NET_WM_STATE_MAXIMIZED_HORZ[_NET_WM_STATE_Beta0] here?
`mdc-menu-surface--open` is a bit confusing, as it's a public API. Maybe `mdc-menu-surface-item` or `site-menu`?
This is a bit of a hack, can you fix the test?
I think this is not the right way to do this, since it is always installed in every `JivaPoolArtifacts` function.
This file is not used anywhere.
Please include the header header in the standard library.
Should be `github.com/go-logr/cert-manager/pkg/logs`
This check should probably be moved into the `if` condition below.
I think we should use `events.ConsoleUtils.error(block, value)` instead of `events.ConsoleUtils.secret)`
This is the same logic as `mset.mirror == nil` but I think the code is not needed anymore.
This is the only change that fixes the issue. The code in this PR was to only do this if a process has been loaded.
I think this is not the right thing to do. The only executes IF does not contain the Juc - otherwise the account is already.
I think we should keep the second one in the `&&`
This is a breaking change. You should add it to the `DEFAULT_LOG_FMT` below.
`len(cnb) > 0` is redundant, because `len(cnb[0]))` is a string, and it is a string that will be checked.
This should be an `Optional[string]`
Can't we do this on `AddPeers`?
I think this should stay stayed in `before_proc`, since it's not a `copy`.
This is a very minor thing but I think we could probably get rid of the extra `NullPointerException` and just have `autoload` be there.
This should probably be `if not isinstance(obj, _param_type_mismatch_exception(obj, param_name))`
I think you need to add `.Split` here.
I'd rather not have this try-except, but I'd rather have it here for now and in the other files.
I don't think this is correct. It is not a `const` loop.
`r` is not a valid name. It is a bit confusing. What about `AddEdges`? The same for `r_chain` below.
Shouldn't this be the same as the one below?
I think this can be removed now, since we have the `SecretBackend` type in the `KinesisBackend` package.
This is a little strange. Why is the line needed?
Can we revert this change since it's now just a note.
This is now unused now, right?
Why not just call `afterClickOn` directly?
I think `email_address` and `email_address` are also not needed anymore?
This is a bit of a weird thing. If we're not doing this we can just remove it and let the test pass.
I don't think we need this, since the `.multi` can be used by the `.delete()` method
Why do we need this?
Why is this class public?
Please revert this change.
Is this supposed to be a valid value for a new class? I don't think we want to use it here, as we are not setting it in the code base
I'm wondering if we should remove this line.
I think we should add a new column for this new column, as this will be used for other languages.
I don't see why this is necessary
This is a very generic name and is confusing.
This method doesn't seem to be used anywhere.
Why do we need to cast the `metricPoint.Keys` field to `null` here?
This test is testing the wrong way, I think we should test for that.
I don't think we want to add `ssm` here, since we already know the full `factory` is the default.
Should this be a constant? I think it is better to have it in a constant, and then check it for the value. Also, if the `var commandPrefix` is the only one that is the only one that is the default, then we don't need to check it.
Can this be a `bool` instead of an `int`?
Can you make this `current()` instead of `current().spec()`?
I think you can just use `!= 0` instead of `!= 0`, since it is a valid valid value
Can this have a `NullPointerException` instead?
I don't think this is a good idea. It seems like we could just use `proxyBuf.isDebugEnabled()`.
I think this should be moved to `const char *`
This is a bit of a weird thing, I think it would be good to have a test that checks if `ex.getMessage() + "no permission to download this file."`
I don't think this is correct. The only place this was used is when `!SetResult(IAsyncResult)`. I think it should have been called before this.
I think we can remove this now.
I would suggest to use the `RetrieveCommand`, as it's not a blocker for this PR, but it would make the change a bit more sense to me.
@mattpap AFAIK this is the only change that makes sense. The `index` is the first thing I don't know. The `index` should be the first thing I'd be happier with.
Why is this message not a property of the message?
This is a bit unfortunate. I would have expected it to be `None` instead of `""`
Why is `!has_no_struct_fields` checked?
@smarterclayton now you can get rid of this `dockerVersion` now.
I think it's better to put this into a constant.
I think this should be `debugMode`, since it is not used by `non-MPI` and not `non-MPI4PY_Comm`
I would prefer a more generic name. What do you think?
Shouldn't it be `github.com/google/uuid`?
I don't think we need this.
I think we should not need this if it was added. The other call to `set_protection` is to call the `unwritable` method in `DYNAMO_OPTION`.
I think we should use the `self.proposal.approvals.non_pending` variable instead of the variable.
nit: you could also just use `n_pending_tasks` here.
This is the only change that affects the GracefulShutdown() calls.
Is this the only place we can have in the `else` branch that is actually used?
Could you add a docstring for this?
Redundant `self` detected.
Can you please move this `using` to `namespace`?
Please add a default value for the new parameter and set the default value to `false`.
I'm wondering why we need to use the `dev.IsIsEnabled()` method in `new` and not just `new(cmdexe)` ?
I think this is a leftover from my PR.
Is this file added for testing?
This will need to be refactored to make sure that it doesn't get called
@bryevdv, I think you can just remove `if (table != null)` entirely.
I don't see why you are not using ROMol.
This could be a one-liner.
this is not needed anymore
why did you remove this?
can you also update the doc string?
I think this is not needed.
I don't think you need this. It's a bit confusing. I think you're using `_spark_col_apply` to get the user's `_spark_col_apply` to get a user. The user can get a different error from the main process, which is why I'd prefer to have it be a function or something.
I think it is better to use the `testing` import here instead of `archerMocks` everywhere.
This was just a bug.
Can you change this name to be `name`?
Can you add `TODO(0)` to this `if(queryOptions.perDocumentLimit != null && queryOptions.limit != null) {` block?
I think we should add some other docs for that.
I don't think we need this file, we can just remove this, and add a `public static` constant
I think it would better to move the "quotequote" text to the "utils" section, and add it to the "utils" section.
Should we just change the type to `null` here?
Why is the `favicon.ico` check needed here?
Why not use the `const` helper here?
This should not be optional, because it will always be optional and the next line will not pass. The `index_map` is already the default, and it's not the default.
I think we can also set the default value for the value. It is used in the default value for the `aws_add_i_aws_iframe` property.
Why are these tests not required?
don't need to import derived_from from ._dask_stubs.compatibility.
I'm not sure this is the right fix, but I think it is better if we move `dialOptions` to a constant.
Why are we dropping the `cannot` here?
This is a bit of overkill, maybe better to use a `an filters` or something like that, e.g. `site.version_types`
Should we make the `/` prefix a little bit more descriptive?
I think you can just remove the check for the `//` and `// must be used`
I think the idea is to move the check to `State.mu` and `State.latency` if the first condition is `true`.
I don't think you need to do this. The `allenated.Offset()` call is done in the previous function, and it's not a big deal.
this is a breaking change. It's not a test, but it's just a question, just curious. why is this necessary?
This should use `RetryAfter` as it is not a public API
I think this import should go in `com.sun`?
@becker33 can you explain what is the difference between `data` and `sp.OnStart` here?
I'm not sure if this should be done here, since we are not passing the list.
I don't think we should be using it in the debug mode.
The test is still valid (and I think it should be `Test.Any()`).
Please update the doc accordingly as well.
Shouldn't this be `reverse_heap.Size() > 0`?
Can you add a new line after this to make sure that the code that uses this function is not compatible with tls.ClientSessionState
This is the only change I have forgot about.
isn't `infer_base_class_for_anonymous_controllers` a more precise name? `infer_base_class_for_anonymous_controllers`?
I think it's better to just use Scapy_Exception here.
Why not just remove the `if tab.data.viewing_source` as well?
This should be done by the new `InitWorkloadIdentityStatus` below, right?
I don't think this is the best place for this.
I don't think we should be using this for every single test, as we have a lot of different ways of working with the new code. We should also support this in the same file, and instead add a `TODO` to the `TODO` and `f` properties, or even the `TODO` one.
Missing spaces between -> and opening brace in lambda literals.
I'd rather have `something.py` as a `bool`, `os.utils`, etc. and in the next line `os.utils`, `clazz`, `clazz` instead of `clazz`
This is a change from `item` to `item.reverse()` is not needed anymore, right?
I don't think we can do this.
You can just use `findIf` here, as you did in the other places
I think you can just use `stateDb` here. It is already checked by the `StateProvider` class
How about using `debug` instead of `finest`?
I don't think we need to change this, it's a bad idea to remove the `is_valid` parameter.
why not just `interpreters[Pathname] if interpreters`?
I don't think you need the `_return_val_if_fail` check here.
I would prefer to keep the assert at the top of the file. The assert can be removed if we have the assert at the top of the file
I think this is a bit of an API break. I would have just done `get_meta` instead of `get_meta`
Please remove this change
Does this work if we have a `accountsPropertiesProfiles.properties` that is a `getProperties` that is a `null`?
I'm not sure if this is necessary, or is it just for the target to be a target?
This will be a breaking change. I think the null check is not needed.
I'm not sure this is correct. It's not a big deal but it's not a huge deal. I'd prefer to have a single `values` variable instead.
This is not the right place for these. The `passesRestrictions` property is used by `pauseResume`, and the `passesRestrictions` property is used by `pauseResume`, so we can't change it here, as it is not used anywhere else. The `passesRestrictions` property is only used by `pauseResume`, so I'm not sure if this is the right solution.
I'm curious, why `ctx` is not `chunk swarm.Chunk, currentIndex, nextIndex Index, err error`?
Is there a way to test for this? `tmp.isTopLevelFragment` is to avoid the NPE check on the `isTopLevelFragment` object?
I think we should just remove `System.variable()` and `System.head()` from the list of exceptions.
Whats the best way to fix this?
Please add a newline between these packages and the ones in the file.
I'm not sure about the name here. `str` does not work.
Why do we need to check the file size here?
This method is not used anywhere else. It can be simplified to just `return ancestorIds(table.currentSnapshotId).getArrayList();`
This should be reverted.
This is a breaking change. It looks like it should be reverted.
This should have been a separate change
I'm not sure if this is the right place for this - it is used for a few times, and it is not a problem.
I'm not sure why you had this in the first place. It seems like it would be better to just make this `HttpVerbValidation`
This file should be renamed to `sourceforge.pmd.lang.java.rule.design`
Can we use `module.exports = {` instead, and add a `...require('@wordpress/prettier-config'),` to get rid of the `module.exports = {` and remove the `...require('@wordpress/prettier-config'),`?
why not just call getEstimatedRunTimeMemoryUsage here?
why remove this?
The length of the asset is a valid number of characters in the struct, so the number of characters in the struct can be the same as before.
This needs to be added to the `ingPromise` interface.
can you use the AtomicInteger here?
I'm not sure if this is a good idea. If we're not using it elsewhere, we should just make `*int` a `Platform`.
@smarterclayton do we want to consider renaming this file, or just for consistency?
Could we have a test for that?
I think this should be a separate patch
I don't think this is correct.
This can be removed.
This property is only called from one place and is used for testing.
Is this change necessary?
@bartonjs, I think this is the right change to do in the `getInvaliddynam` method.
Why is the context not a context?
Why this change? It's not a big deal, though.
Is this supposed to be `3584fe777dd`? I don't think it's necessary.
This should not be needed. It's not used anymore.
This is a very minor thing, I think we should be using `Path.get(fileName)` instead.
You can use `I18nTimestampableTrait` here, and `I18nTimestampableTrait` in the class `Tools`
Is this the only place we need it?
This is a test failure, and should be merged with the test failure.
Why is this `expire Gas price`? Isn't it better to be more explicit here?
This will need to be fixed in a followup PR
Should we also update the `updateTabIcon` to take `hideProgressAfterFinish=true`?
Please add `import boto.sns` to `close_id` and `AWS_ACCESS_KEY` to be consistent with the rest of the codebase.
Why not make this change?
You should just do `this(callback, thisArg)`.
This is a little confusing, why not just have the `typeof` be the default?
Is this file added to the end user?
This should be marked marked as `Tag`.
I would have expected this to be `sql = """ CREATE TABLE IF NOT EXISTS {marker_table} (sql = """ CREATE TABLE IF NOT EXISTS {marker_table} (sql);`
This interface is not needed, since it is already used by the new API.
I don't think we should change the name of this property. The default setting of the `pageLoad` is not a `WorkspaceModel`, so we should change the name of the property to `WorkspaceModel` and change the name to `WorkspaceModel`
This is a little strange. I would expect the `getattr` to be `null` if it's not `null`.
Why do we have to check whether `attr_value` is not `None`?
Should we just add `addons` to this package too?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Why do we have both `InstanceIds` and `selectedIds`?
This is a bit confusing. It's not really a thing to do, but it's a bit odd to have a `null` value here.
I think we should be using the `election->transition_active` function in the `notify` method. The `lock` method should only be called once.
I think this is a little strange. What do you think about just making `v` be the default and use `v2` here?
Is this import still necessary?
I'm not sure if this is the best place for this. The roles will be the same as the roles. I think the roles will be the same as the roles, and if so, the roles will be different, we can use that instead.
This should be `role && node.getAttribute('role') !== 'banner')`
This is not needed.
if ``dir__`` is a ``dir``, then it will be used in all cases.
I think you can import ` Component` and `preact` directly here.
I'm not a big fan of "no" as the "square" format is used in this file, and it's not a "read" format. I think we can just use "no" instead of "square" here.
Can you update the `Variable` build to include the conversion in the testing testing so that the testing testing testing testing gets rendered on a single path?
I'm not sure this is the right place to put this config. It seems like it should be the default config.
This is needed because `System` and `System.Linq` are not being used in the `DynamoModel`.
I think we should remove this line
I think it would be cleaner to just pass `ap: parseAccessPolicyFlag(ctx)` instead of the `with` block.
I think this is the right fix to use `ENABLE_JSON1` instead of `ENABLE_JSON2`? The `JSON1` option is just to be `assertTrue` in this test, and the `assertEqual` method should not be used.
This check can be moved to `mustConfiguration` class.
I think you can remove this and just use `javax.net.URI` directly in `springmvc.Test.cs`.
We should probably be using the `debug` function in the `debug` function instead of the logging.
Can you move this import to the top of the file?
The AWS name should be `AWS_BOUND_SA_SIGNING_KEY`. I don't think it is a good idea to include the name in the name.
Is this needed?
This is the main fix for the bugfix.
Can we add a `TODO` to make this change?
why do we need to do anything here?
I don't know if it makes sense to add the `*` here, but it seems like we should be able to use the `.Any()`.
I don't think we need the `metadata[:execution_result][:pending_exception]` part.
This will be true if `selectedItem.getFeed().isLocalFeed()` is false.
Why are these changes necessary?
I'm not a huge fan of this. Can't you just change the default behavior?
`BlazeMeterReport` -> `BlazeMeterReport`
why do we need to pass the `UTC`?
If you're not doing any conversion in the code, you should also check for `q` here. Otherwise, you can check if the error is not returned
There's a `render json` method in `show` which can be reused here.
Why is this here? I wouldn't expect this to be the same as in `Init KBFSOps` but I don't see where the value is being used.
Should be reverted
Is there any way to make this a constant?
This is a bit weird - the error message was already present in the first place. The error message was used to be able to get the output file name, not the output.
This should be `&ctx.http3 != NULL`, right?
Can we avoid the `if` here and just do `Object.is(hookState._value[0])` instead of calling `setState`, since that's where we're using `Object`?
I think this is a bug fix. `? options.roles || []` is not a valid value. `? options.roles` will be true when the roles is empty.
"... is stored in the cluster state of the collection"
Why not use `var ExpectedBalances map[string]*big.Int)`?
Shouldn't it be "the backtrace of the passed error and applies synax highlighting and line numbers using html"?
It seems that this is not a separate function and it's not a good idea to check for optIssuerAccount. Can you make sure that this works for all cases too?
@cramforce is this the correct place for this?
Is this used?
think you can delete these two lines
Why are these changes necessary?
I think this should be marked `DD_HTTP_CLIENT_ERROR_STATUSES`
I think you can just do `sd_journal_next_skip(ctx->j, 1);`
I don't think you want to change `null` here
This should probably be in separate PR
I think it's better to move this to the `default_attributes` method, so we don't have to change it in the future
`this.GetLastStartTimestamp().Ticks` is a `null`?
This spec doesn't have a test coverage. I don't think it makes sense for it to be a string, but I think it's a string.
This is the only place where I can see the `Header[]`/`Header[]`/`Header[]`/`Header[]`/`Header[]`/`Header[]`/`Header[]`/`Header`/`Header[]`/`TestHttpHeaders`/`TestHttpHeaders`,/
I don't think this change should be here. The current version is the same as the current version.
This is not needed.
I don't think we should remove `aria-hidden` from the node. We should not be checking for `aria` here.
I don't think it matters much, but I think it'd be better to test the `check_Op_attr` method that checks the content of the form. That way, the form can be moved to the `visit catalog_index_path` method, and the form can be moved inside of the `check_Op_attr` method.
Why is this property being removed?
I think this should be moved to `lib/common/constants/constants.go` and `lib/ec-constants/constants.go`
Please add "increasehealing" option to the log message.
Should we add a new flag for this?
Why not use a single string here ?
Can we use the `Map` type instead?
I think we should add `Logger.getBaseSVIDPath()` to `Logger.getBaseSVIDPath()` as well.
I think we should just remove the `firewallMain.h` file.
Why are we returning nil here?
This method should also be renamed, as well.
Is this scope scope added to the end of the controller or does it need to be on the `scrollBadge`?
Is this necessary?
I don't think this is needed, since we only need to do a specific test for the new tests, so I don't want to make this change here.
Shouldn't we also check for `MediaType.toLowerCase` here?
I think it's still useful to have a test case with the old `KeyError` instance, but this test case is still testing the `assert_called_once_with` function.
This is not a good place to put it. It's not a problem for the user to know the nonce is not a valid object.
Why are we removing the second parameter?
I think the function should be called in a function.
Please use `org.apache.commons.lang3.StringUtils`
I think this was the only change that affects the existing `PartitionKeyToTraceId`, so we can remove the `Invalidservices` argument here.
Hm, why is this part of the "Socket"?
I don't think we should add a `addStreamWithStore` method to the `CreateStream` function.
Why do we need to pass in a parameter here?
this should be `final`
@sjenning I don't know if we want to support the `compression='on'`. I don't have a better solution, just wondering if we should have the `compression=on` in the name.
Metrics/BlockLength: Block has too many lines. [30/25]
I think we can remove this check now since we're only using it for the `innerWidth` item anyway.
I think this can be removed.
It's a little weird to me that the `String` is the right thing to do. I'm not sure if it's the best way to do that.
Is this the correct place to put the `to_ulong()` call at the top of the file?
Why remove the copyright?
What does the key format do here? I don't see any usage of `results['gt_semantic_seg']` in this method.
I think we can remove this method and use `self.queueFunction(queueHandler.eventQueue, lambda: setattr(self, '_isNvdaStartupComplete', True)`, as we do not have any additional code that uses it.
Should we be doing this every time we call it? We could consider putting it in a `TryTry` model.
I'm not sure if this is correct. It looks like the `AcceptResponseError` is not in the `AcceptResponseErrorHeader`. I'm not sure if it is worth it, but I'm wondering if it's worth it.
what is the difference between `testDataLocator` and `testDataLocator[0]`?
Could you please update the `*` to `(`?
I think it's more clear to say ` repo directories to be removed via `RemoveDir`.
This is an example of a bug, I think it would be good to have a test for it.
The error message is not very helpful, since it is a procedure name.
Why is this removed?
this needs to stay
Looks like this is a leftover from previous PR.
This is a very weird thing to do, but I think it would make more sense to have a method that returns a context, and then check that the context is always created.
this will cause a conflict with #1414
I think this is a bit of a weird pattern, as `r` is a bit confusing.
This should be called `ram_handler`.
I'm not sure why you would want to call `set_code` here. I think it would be more readable if you used the `resp_.set_code(cpp2::ErrorCode::SUCCEEDED);` in the `if (get_if_not_exists() != null)` check.
I think we need to do something if there is a race condition.
why remove this?
This should be `elHeight <= 1`
Why not just return `key == null`, and avoid the `if`?
This is a bit of an odd place to put the `Scope` parameter in the if statement and then just call the method in the method, and the if statement above will throw a NPE.
I'm not sure this is needed.
is it needed?
This is not needed anymore, as `DistributorTest`, is already declared as a local variable.
This is not the correct place for this, but it is used for a few places. I would suggest to add the `./pants help` annotation on the top and avoid any confusion.
I think this is the fix for the bug.
Didn't you want to include these in the `init_raiden` file?
I'm not sure about this. I would suggest to use `get_range_np()` in the docstring for `np.range()`.
@approved_data = self.listing.approved.alter_query{ |rel| rel.limit(@CLOSED_PROPOSAL_LIMIT) }
Why do we need to use `.via` here?
Why do we need to add this check here?
Why do we need this change?
What is the purpose of this package?
I'm not sure we need to call this, since we are not doing anything with it.
I think this is a bit confusing, maybe `ExpireSnapshots cleanExpiredFiles` or something like that?
Is it needed to specify theip in the JSON?
This is the only place where I'm not seeing where `get` is called, but I don't think it is a good idea to use a function that is used.
Is it possible to have a test that checks for `telemetry` and `telemetryConfig.FilePath`?
@sparrowDom This was the only change that was needed to make the change.
I'm not really sure if we want to keep this here. I think we should just use `gcpduckv1alpha1` for the `duck_v1alpha1` and `v1alpha1` for the `v1alpha1` for the `duck` and `v1alpha1` for the `duck_v1alpha1` for the `smo.duck`
This is the only change that works in #2323, but it's not a real issue. I'd rather not have this in the test.
I think we should just leave this file unchanged.
Why is this change needed?
Why not just do the `config.websocket_config.enabled` here? The `websocket_server` variable is not always set, and the `run()` variable is not set.
I think we should use the same method here as in the interface `try-with-resources`
Is this the only place that needs to be in the test?
why not `init.Bytes(0)`?
Why not just pass in the `ListImagesTimeout`?
Is this method only available for libcontainer or should we just return the error?
Do we need to make these `connect_timeout`?
@jcotela is there a better way to do this?
nit: can you revert this change?
Line is too long. [87/80]
Why not using `Long bitmask` directly?
This is not a good idea, but I think we should have a `FullAdForFor(ctx, conf)` for the other `FullAdFor`s.
`vlen` can be `null` if `len` is `0`.
Is this necessary?
This is not a good idea. It's just a simple `if (propStream.read<int32_t>(openContainer))`, so I'd rather not have the `if (endif (endif (endifg) {` statement.
I think we should also remove `adaptivescalar` from the other PR
This is a little confusing. How does the `NamespacedName` get read in?
Is there a way to check for the error code without this?
This can be split across multiple lines.
I don't think we should remove `attachShadow` from here, as it was previously previously.
Can you add a TODO to remove this line?
@danrot what is this change for?
Should be "table(" + hashCode() + ")")"
I think it would be better if we use `./pants run` instead, as it is more likely to work with other `./pants run`
@sjenning can you confirm if this is the correct way to get the pod?
This seems to be unrelated to the rest of the PR.
can you make this a const?
This is the only place where we are dealing with `equals`. We are adding another method that can be passed in.
I'm not sure this is a good idea, as it seems to be the same as what you are trying to do with the other `User` fields.
This is a good change to use `logEntry<2>` as the second argument to `0` is the same as `logEntry<2>`.
I don't think this import can ever get used.
This should not be needed. The `.statusChanged` will be used in the build context.
I think we should change `build-gen` and `build-k8s` to use `build-gen` in the future.
I think this is not the right place for this. The DUS should be the DUS.
This is a pretty generic name, I'd suggest `@video` or `@video_id`, `@video_id` or `@video_id`, etc.
Is there any way to avoid the string? I'm not sure if this is correct.
This should be pyramid.decorator, not pyramid.decorator.
Why not `julia`?
I think it would make sense to put it in the `lib/constants` folder, since it's not used by `lib/constants` folder.
Why are these calls removed?
I don't think this is the right place for this, but it seems like it should have been a different approach
I think this should be `if earliest != nil && dollar.BID() == LocalSquashBranchID`
Is there any way to make this a string?
This should be using the `GUID_t` constant.
`except` is redundant, since you are using the import.
I think we can also remove this.
Is this error still necessary?
Style/SymbolArray: Use %i or %I for an array of symbols.
Why not just `localConnection.type == Blockly.OUTPUT_VALUE`?
I'm not sure if this is correct. The `_bq_acl` is not used in the `violations` function, but it is used in the `.find_violations` function.
Is this test failing?
Why not use `isinstance` here?
Why are we doing this?
Would it be easier to read if we return `true` here instead of the loop?
I don't think this is used anywhere, so can you remove it?
This is the fix, but I think the `AWSCluster` is not really necessary.
Is there a reason for changing this?
This should be `toAbsolutePath`
I think it would be better to use the `if` statement here, rather than have it as a local variable.
`find_by(false)` is a no-op if no no-op is present
This is the only change that affects the `/` files. I think we can move this import to the `/` directory.
I'm not sure if this is the right place for this. It is not a good idea.
I think this should be `GetRawDiff` and the `diff` can also be moved into the `Update` function.
I think we should revert this, as it's not needed anymore.
This should be `const clutchProviderName = "clutch"`.
I think this should be moved inside the `if` block.
This is a bit confusing to me, I think we should have it here as well
This should be `import qutebrowser.browser.downloads as (_path_suggestion as qutebrowser.transitive`)
This is a bit of a hack, but I'm not a huge fan of it. I'm not really sure if this is the right way to do it. If you do it here, you should probably add a default value for the port port.
Do not use parentheses for method calls with no arguments.
Shouldn't this check be inside the if block ?
Why is this check needed?
Is this the correct way to go away, or should we just always set the modules build?
This is the only change that fixes this.
What is the TODO?
This is not needed.
I'm not sure if this is the right fix. I'm going to suggest that the default should be set to `--limit-reference` if it's `nil` (which is not `0`).
Isn't this already included in the other PR?
Why is this error ignored?
The `:destroy` should be in the `:destroy`.
@bparees I think this should be `static const string ApiVersion = "subscriptionid";`
Should be setDefaultDatasource
`user.UpdateSpan` should be moved to the `UpdateSpan` class
Please use `files(${DRIVE_FILE_FIELDS})`
I would not add the `$config` parameter here, as it is a string and we don't need it anymore.
I think this is not needed since the test is only called on the tests
This is the only place that needs to be a `nil` value.
I think this is fine, but it's not a big deal.
I'm not familiar with the code, but I'm curious about why this is the right way to do it. It's just a note for the `NewWeight` to pass the parentWeight to the `RunStateTransition` function. It's just the same, but it's a little confusing.
Line is too long. [98/80]
This change is needed because the original code already has a `String.format` check, so you can remove this method entirely
Why did you change this to a "only" suffix?
Can you use `ASSERT(off, 1, 1)` here, and in other places?
Please add this to the `module.resolve` file
Why is this method called `CherryPick`?
This one seems to be the only one that is used in the `DynamoPublish` class. Is that a problem or a bug?
Import order of imports
Should we also add a `err`?
Why not just use a `html.replace()` here?
I think we can get rid of this check entirely and just call `isSDAMUnrecoverableError` directly in the code base.
can we do `cfg.model.neck.rfp_backbone.get('rfp_backbone', False):` instead?
Why is this deleted?
Why are we adding this here?
nit: you can remove the `&&`
Can you add an additional field for `Generate`?
You should not need to check for `params[:read_tou] == "0"` here, as you already check for `read_tou]` below. Also, this is the line that is not the case anymore.
Do we need to also modify the content of `subscriptions.reject_refund` and `subscriptions.cancellation_scheduled_on` tests too?
Why is thetcp change here?
This is a very good idea, but I think it's better to use `static` for the `static` value.
this should be `info.info.name`
This is not a huge thing but it is a bit odd that we have the default value, and the user can't see the value of `out`.
Can we add a link to the cache?
hmm, this is not a typo.
This is not the right place for this. It is used in other places as well.
This change is not correct. The message should be "While resolving ...", not "While resolving ...", but it's a little strange.
This is the only place where the code was used. I think the code was correct, so it's fine to leave it.
This should be `GitHash`.
This is a different issue than our 1.0.0, but it's not a problem, so I'm not really sure what the right answer is is.
I think this can be simplified to `if 'duration' in listen['track_metadata']['additional_info']['duration'] // 1000`
this is a little hard to read... I think we can use a `let vnode` function here
I think we should use `mangle_single_step_is_in_read()` here
I don't know how this is related to the PR. Is this change intentional?
I don't understand why you need this anymore. This is a real bug.
This class name isn't very good. I would suggest `belongs_to :approval, class_name: 'Approvals::Individual'`.
I think this is not needed. The `print` is already included in the error message.
why not make the constructor private?
I think we need this to run the BigQueryTarget, since it's a very large package.
This is the only change I don't think we want to log. We should log the error, because we want to log it.
I think this is a little strange. Can we just make it a property of the configuration and use it here and just use it everywhere?
I think you want `font: {{ font` instead of `font`
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
Shouldn't we also check for null?
this is not needed. we only need to do this for every platform
this is the same as the one in the above change. It's not really a test, so it is just a bug.
Should we just add the `Topic` to `Topic.With("topic", topic)` here and remove the `Topic` call below?
I think this was a bug.
We can use the `#if` keyword in `STANDARD2_0` instead. It would be better if we just have the default value of `Datadog.Tracing`.
This is a little confusing. I think it would be better to change the API to `Add(in SpanReference, T value);` to `this void Add(in Span context, T value);` to avoid confusion in the context.
Do we really need to use `byteslice` here?
Is this the right move to the top of the file?
Style/NumericPredicate: Use 2 (not 4) spaces for indentation.
I don't see why this is being changed.
These 2 methods were removed in the last PR, but we should remove them
Can you use the standard imports please?
Why not just use the `currently.Name` as the input?
I think you can remove `belongs_to :approving_official, class_name: User` here and below
I'm not sure this is the right change, but if we are going to do this we should just remove this `List<T>` as it's not used anywhere else in the code base.
This is the only place where we need to keep the `url_prefix` variable.
I'm not sure if this is the right approach. The existing `ReadCloser` function is supposed to be used to store a file in a `Open` function. I think it is a good change.
Is this change related to this PR? I think it would be a good idea to remove this, but I'm not sure how to deal with it.
This is the only place where we can actually use the `member` field.
why do we need this change?
I think we can remove this file, it's not used anymore
This change is not necessary.
This is the only change that fixes this issue.
Metrics/LineLength: Line is too long. [83/80]
What is the difference between `distinct()` and `mode()`?
We can remove this function and just do a `Warn("error removing node from ...)` in this function.
Is there any reason why this is necessary?
I don't think this is a good place for this. I think we should use the test for this and just check if it's not a hard-coded value.
I think we can remove `this.get('i18n')` altogether now.
This is the main change that fixes the bug. The `_getName` function does the same thing as before.
We should probably make this a module-level module. Then it would be a good idea to make sure the module has the same name as the name.
Can we also test the number of different types?
I'm wondering if this should be `HostSpace::create_off_TURN_OFF_CUDA_HOST_INIT_CHECK`?
Please also change ` 1.0` to `0.0` and `0.0` in both places
I'm not sure if this is the right fix. The `<noqa>` should be enough.
Shouldn't this also be `true`? Or `true`?
I think this is a leftover?
Shouldn't we also change the name to be excluded for the sourceId field?
I'm not sure this check is needed.
This is an API break. I would suggest to rename `avro` to `partition`.
I think this is the only place where we want to make the `TestSharedCredentialsProvider` package private
This is the only place where we have the `d` in the list. I'm not sure what the `defaults` field is.
I'm not sure if this is the correct place for this. I don't think it's worth it. The `accountDeltaCount` field should probably be `ndeltas`.
nit: this is an example of how it is used.
I'm not sure if we can do something here. The `criuServer.Close()` function is already being invoked by `Start()` on `Close()`.
I think this is a leftover?
Why are these lines different? Isn't the `Errno::EPERM` the default?
This is a bit confusing. What about `.quote` or `.director`?
I think it would be more consistent to use `return kvstore::ResultCode::SUCCEEDED` instead of `return ret;` here.
Is this really needed? I don't see a reason to do this, just wondering if it wouldn't be better to just always set `result = true`?
I think this should be in the `_getCheckpointParentDir` method.
This is not a thing, but it is not a good idea to use the default value here. I would say, that the default value should be the same as in the `ConsoleUIACheckBox` method.
I don't think we should do this. We already have a validation for `cfg.External` that is already defined in the URL.
I think we need a way to make this configurable. I think we can remove this. The only reason we're using this is because it's a different thing.
nit: can you add a null check here?
Why not just do `this.inspector = IcebergObjectInspector.create(projectedSchema);`?
Do we need to set this to `false`?
I think you should check if this is a valid "is" pattern
This is a very minor thing but I'm not 100% sure about the `V` prefix.
I think it should be a `Failure Import` resource rather than a `Failure EventReason`.
This is the actual fix, right?
We should be using the warning message to ensure the warning message is not present. It should be the case in the log message.
Why do we need to change this to `public`? It seems like it would be a breaking change, but I think it's better to change the name to `public` or `public` to `static` in this file.
I think we should remove the TODO and remove the executorManager and deprecate handleAjaxUpdateRequest()
Why `.status.conditions[?(@.type==\"Ready\")` ?
I think this is the right place to put the default value for `Unknown`?
This is an error, but I think we should change the error to `blob already closed`
@logger.isDebugEnabled() is this the same as the one in the other file?
Is this debug code?
I don't see why you removed the `std::unique_lock` and `std::mutex` calls.
Can we move this to a separate package? I don't think we should be doing this.
Why is this needed?
This test is not related to the bug, but I don't think we should be using this method in the test. It's not a problem, but I'm pretty sure we can remove this test.
`absolute value. Only used in OpenImage Dataset.`
I think we need to keep these tests. It's a bit of a test and it's a little confusing to have a `TracerProvider` instance in a `testing` function.
This is not a part of the PR.
Should we do this only when `js` is `None`, so we have to check the error message?
This is a bit of overkill. I'm not sure if we should be doing it in the `NewTimer` function.
I don't think we should be changing these to "Bodies                    " - they should just be added to the "Bodies                    " - as we are here, and not in the "Bodies                    " - as the "Bodies                    " command, we should just use the same name for all the others.
The new struct is not in this PR.
This is a very minor thing - it might be worth adding some helper methods to the state of the state, e.g. `Publish.getState()` and `Publish.getState()` to avoid all of them.
I don't think we should be changing this to `state.info` because we're already doing the `state.info` in the error message.
Isn't this the correct way to do this? It seems like the only thing that is this change is to avoid the test run.
I don't think we need this here, it's already in `weekly_update`.
Do we need this? Can we just have the struct name?
You can remove the `else if` here.
This is not the only place where the snakebite is used. I think we should just pass the snakebite to the configuration.
you don't need the `content` argument here.
Why is this one removed?
This import is not really required. The `gmbal` package has been removed.
This is not a good idea. It can be `conda/base/utils` but the same as the one below.
I think we need to check that the number of nodes are not the same, right?
I think this should be moved to the `else if` block above
`verb: "all"` is a bit confusing, why is this needed?
this log line is causing the warning.
This is not needed, it will be created on the `SELECT` list.
Do we have an example of an example where where we would want to use an `Array` struct?
Why did you move this here? It's not a problem for the spec.
Why not just return `err != FPGA_OK`?
Nit: `var` and `var const` are the same.
Why not use `ipNet.DM_Hook.getMaskedIp(ipNet.IP)` here?
I think this needs to be reverted.
This is not a good place to put this check.
This should be `CreateTChannelDispatcher`, since it's no longer a field.
This should be `getDownloadSizeNumeric(DatasetVersion dsv, boolean original)`
what is this `self._win_id` used for?
this is a no-op.
I'd prefer to not have the image in the image. It's not clear that it's a warning.
I don't think the GoQuorumOptions is necessary here, since the member variable is not defined at all.
This will be a duplicate of `deleteManifests()` if `base.currentSnapshot()` is not null. I think it is better to do this in `if (manifest != null)`
Is there a reason we don't need this?
Is this a bit of a nit-picking, or is this the name we give to the compiler?
Why is this deleted?
I think this change should be reverted, as the package is not in the package.
This should be done in the `time` package
why not `getCurrentSessionException` ?
Why not `err error`?
`bp` is used in a lot of places in this file, so I think this is fine.
why are we dropping the any parameter?
Line is too long. [91/90]
I'm not sure this is the right place for this, but if we do want to have a test for it, we should not just remove it. We should also remove the need for the new version of the package.
This is not needed anymore.
Is this a bug in Spack? I'm not sure it's a good idea to have it here.
this is wrong. The new behavior was correct.
This should be a separate pull request, not a big deal.
these should be `?`
Would you please explain what is this for?
Why is this min() needed? It looks like it is used by other tests.
why do you need to pass nullptr here?
I think we can get rid of the `once` here.
This can be simplified to `private`
Layout/MultilineMethodCallIndentation: Align .empty with .test_helper on line 112.
you should check if the object exists before calling the method.
I think we can remove the docstring as it's used in the docstring.
This is a breaking change, but I don't see a good reason for it to be public
This is the only change that affects the existing code.
I think you can remove this
I'd prefer if this was a separate method, e.g. `SQLALCHEMY_TIMESCALE_URI` or something like that, so we can get the confused here.
We should add an `isinstance` check here to ensure that the value is present.
should we rename it to `isEngineLoadExternalResources`?
This is the main change that will break things like `fileagramGraph`, which will break things.
This function is only used in the `else` branch, so I removed this function and it's only used in the `else` branch.
This is not needed.
Why remove this?
what is the difference between this and `State`?
I don't think we need the `DefaultFeatureGate` check here.
I think this is a leftover from the previous PR.
This is not needed. It is already set on the `pendingRequest` instance.
We should not have a Solr exception here.
I think it's a good idea to use the `core` import in the `core` package, but I think it's better to use the `core_db` package for all the `core_db`.
This should not be necessary, since the `RSP` function is not only used by `return` statement.
I don't think we need this anymore.
Why are you changing this back?
Should this be `using`
Nit: please remove the line above.
`[]` should be on the next line.
@liggitt this was the only thing that was used for the default, so I removed it.
I think we can move these headers to `src/tests/test_UDPv4Transport.h` and remove these lines.
I think this is a bit of a breaking change and could be improved.
why is this change necessary?
Why is this copyright?
I think we need a check here that `settings.MaxIdleConnections > 2`
This is a little weird. I would expect a `Args` to be passed in as an argument to `gsuite_group`.
This change is not correct. The `sarif-1.0.0-beta` will not work for both the version number and the version number.
I think we can remove `__( 'Search Console', 'google-site-kit' )` now.
This should be `dict[dict]`
I don't think this is a good idea... I'm not sure it's worth the effort to change this to just `user-displayable login` since it's a user-displayable login?
Is this needed for the tests?
Why did you remove the `clear()` method here?
Could you move this line to be above the top of the file, so that the `iface` can be removed from the file?
This should be renamed to `window`
I don't think this is the right place to do this. It should be `with[a-zA-Z][0-9]{7}/,`
Is this used?
Do we need this parameter? I would have expected the default value of users to be the default.
I'm not sure if this is correct. You can just call `AvailableBalance.Set()` if there is an `AvailableBalance`.
This should be a separate check for `realmConstructor.Sync.get`
This is the only change in this file that will be refactored in this PR
I'm not sure if it's worth the effort to add a `file_id` field to the store and then we should add a `PathInfo` field.
This will be a breaking change in #2784
Perhaps also test the `type` argument here?
Is this necessary? I don't see any other uses of the `colName` field, so it's not needed anymore.
@agramfort do you know if this is the correct place for this function? I think the only place where you're using `_path` is in the `__init__` function.
nit: you can merge this list with `eslint-config` (or `eslint-config`)
I'm not sure why you did this. The only difference is that `DynamicType_ptr` is the `type` and `DynamicType_ptr`.
I don't see any need for the `app/api/errors` part here.
This should be done in the test suite.
This method can be private
Why is this needed?
This seems to be missing a `#`
I'm curious how this works. Is this a breaking change?
Can you also change the package names in the `goimports` imports?
Is this a bug? It looks like the `STORAGEMutex` is still used for the `STORAGEMutex`.
This should probably be `TEST_ARN:aws:aws:aws:000000000000:testq`
Not sure if this is correct, but if it's not the case, I would just remove the check.
This is a bit of a weird thing. I think we should be consistent about the other places in the codebase. I think the "estan" part of the log should be "estan-hoc" (or something similar)
This should probably be `static`.
I would suggest to put it in `app/models/--privacy-unrestricted-enabled.yml` instead of `--privacy-unrestricted-enabled.yml`
I don't think we need this, it is already present in the dict.
This is a little confusing to me, as we have the `projects` key in the `get_bigquery_test.py` file.
I think you can use the `clear` here
I'm curious why this isn't a `else` block here.
Is this a bug fix ?
Nit: we can use `//` instead of `error.details`.
Why did this change?
I think we should move this check to the top of `pkg/configurator`
I think we need to make this change.
I think it would be more readable to have the `withSyncAnNonNonan` method in the constructor.
`isEmpty()` ?
This is a bit of a nitpick, but it seems a bit strange that `plot_importance` returns a boolean and returns a boolean. I think it's better to use `assert ax3.get_xlabel() == 'y @importance_type` instead.
This is not a good change, but I think we should just remove the `keeper{secretKey: ByteKey` altogether
I think you can remove this class
I'm wondering if it would make more sense to call the function here, and return the result of the result of `executedActions`.
This should not be necessary, as it's not a valid default
This is a bit of a hack - it's a little confusing. How about `isortMsg`?
@jridgewell Is there a better way to check if the `enableTelemetry` is true and then check if the `enableTelemetry` has no `false`?
This is a bit of an unrelated change, but I think it's better to move the `H` and `H` methods out of the loop, and then call `H` here.
I don't think this should be in the global package
Why is this a pointer?
This should be moved to `Info.Error()`
nit: I'd call this `Unknown ResourceTypes` or something.
I think the `ExtractorCallbacks` and `cancancan be `-` in the `PBFParser` should be `-`.
Just to make sure, it's not a bad idea to have a `Issuer` passed in here.
Please use a different name.
Why not just `// + a struct and limitations under the License.package task`?
I think this should be `this._hydrateDom && oldVNode._hydrating`, right?
This isn't a correct name. It's a simple class, not an `use`, but I don't think it's the best way to go.
Can't we just pass the `min_sizes` to the `trans`?
I think we can drop the `EtherClientRPC` part.
This import should be removed.
It looks like there's a `role="presentation"` here that will be called in a single `uppy-DashboardTab` (and the `role="presentation` in this file).
Is this the right place to put this?
The import should be removed.
This is a breaking change. The current version is not in Spack anymore.
I'm not sure if we should make this change? I'm assuming it's a bad idea.
This test was not working before because the tests were failing because of the tests.
If you are going to make this change then this will be needed for the future (I'm not familiar with the code base).
I think this import is unused
This should be `map[string]string`
The `MIN_SAFE_INTEGER` and `MIN_SAFE_INTEGER` are all lowercase. I think this change is fine.
This is not a good idea, since it's a `in` statement in the `else` block.
why not just call wlr_xdg_surface_schedule_configure directly?
I think this is not right, it should be `testcases`
I am not sure about this one... I'm pretty sure it is a problem.
@smarterclayton do we need this?
Is this used?
Why are we adding this?
I think this should use `constexpr` to avoid the `!=` on the next line.
I don't think it's necessary to add it. I'm not sure why it was done.
I think this check can be done in a different PR
I think it's better to do the `append_command = '"'` here.
Is there any reason to keep `isAuthenticated` and `authenticated` here?
This will not work with `<=`
Can you check the conclusion of what this is testing?
I think you can remove this line
I'm not sure if we can make these `@private`s in the public API. I think this can just be `final` and `final` if needed.
If this is a public function then we need a different name for this function.
This should have a LibLog conditional block.
I think we can remove this.
Is this needed?
I'm not sure if this is the right way to go. I think this should be `nil` instead of `nil`
Should we use a copyStream method for this?
Would it be better to use `[]session.existingIdentities` instead?
I think it is a bit confusing to use `goog:chromeOptions` as the field in `KEY` but I don't think it's necessary.
nitpick: you could use the same variable here as above, and in line 298 you can use the `getPluginInfo` method which is called for the `get` method.
Is the `UInt` argument used anywhere?
Is this still needed?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
Is this still a valid localized version?
Is there any way to avoid this?
I think this is not needed. It's used in `error.go` file, right?
Isn't this method called from other modules, like the other classes?
This method was not used anywhere, so I removed the `@Nullable` annotation.
This check can be deleted.
I think we should just set this to False, otherwise it will not be used.
Why are you removing the file?
Why do we need this? The other `includeInLightValidation` methods are not part of the public API, but it seems to be used by other methods in `DynamoModel`.
I think we need to make this change. The async argument is not defined.
Please use `EEA_GET_TRANSACTION_COUNT_LEGACY` instead.
I don't understand why this is removed.
This is a change in behavior, but the changes in this file aren't actually testing what the best thing is, so I'd prefer a different PR to fix this.
Please, update the doc string
`StringIO` is not used anymore
Maybe this should be `Headers: []string{"User-Agent")`?
Can you please add `USTAT_NAHEAP_ESTIMATED_MAX` to the `DDilities`?
I think you can remove the #if ENABLE_JSON_SERIALIZATION block altogether. It's not used anymore, it should be removed.
This is not a good name. It would be nice to keep the tabs as it was.
This is a test that checks if `CMakeDeps` is not `2`, but the `CMakeDeps` is `2`, so I think we should do it for `2` instead of `2`
Can we make the `_for_search` a class method instead of the `_for`?
this is a bit weird, why not just set the claim name directly here?
This is a test, but I think we need to move the `IntegrationTestHelpers` logic out of the loop.
This is a little confusing, since it is only used in one place and it's not a hard-cast.
Why do we need to remove it?
Shouldn't we also use `org.mule.runtime.config.testing.commons.config.testing.log` here? I'm wondering if we should have a better name for this.
What's the reason for this change?
This is a bug fix.
You can use the `@connection` variable here.
I don't think we need the `scenario` argument here.
Why is that?
Final newline missing.
Please remove this extra line
can we make this a string, and make the assertion a little shorter?
This should be reverted.
I don't think we should name it as `DumpFilter` since it is a different name.
I think we should avoid using `org.openqa.selenium.target` in the code base.
I think you can just do `return zkClient.getVersion() <= aliases.getZNodeVersion()`.
Can you add a link to the description of this description?
This is a breaking change, and should not be needed.
I think you can just use `return NULL` instead of `free(item.data)` here, since you are already inside the `if (item.data)`
Is this needed?
Can we use `LOG.todayTitle(String, StringComparison)`?
Why are we using `Done`?
I would prefer to have the test for the `$type: 'p2'` as it is not the same as `/lib-2.0`
I think this can be removed.
I think the `get_model_replace` function could return the host_bad_alloc, and the `get_auto knn_model` function can be removed.
@matt-gardner Is this what you intended by `-1`? The rest looks good to me.
nit: I think this file is not in the codebase
This should be `RequestOptions=true`
Why is this using a List? Is it just a list of strings that are not shared across the other classes?
Should this be checking against the `nil` attribute?
I think this is a good change. It's not a good idea to pass the bool here, but it's not really a good idea.
We should probably add a TODO here to remove this and the next `return` statements from the var.
Why the change to the variable name?
Remove this line.
This is not a good change, but the other way around.
I don't think we need to add these lines here.
Can you explain why you removed this test ?
This seems to be a very large number of times. Can we use `!empty(node->data.scalar, "default")` instead?
I think we can also remove this.
This is not the only place where we need the class. The class is used by `@Deprecated`.
this is the only change that affects this PR, but I think we can change it to be `type=dns/v1` and change the test name too
I'd rather have a method for the `selectedMenuItem` and `updateSelectedMenuItem` that is used in this class.
@smarterclayton do you know why this was added?
I think the code is not in the test, but the test should be `(0, musl and so-forth)`
Does this change anything? I don't think it's necessary.
This is not needed, right?
This will fail on all platforms, right?
How about using `APIServiceLabel` instead, to make it clearer?
I'm not sure if this is a good idea. The `exMessage` is the correct error, and if it's not the case, it should be `null`, not `null`.
I don't think we should be doing this here. I think we should just delete the whole `ValidatezDBUtil`.
I'm not sure if this is the right place for the `clientKeepaliveStatus`?
Is this TODO still relevant?
I think we should add a check that `updatedProjectConfig` is not nil, otherwise we will still need to do this in a future PR
Please remove the spaces between the start of the line where it's used.
I don't think we need a separate `MaterialatesWith` field. I think it's better to use `MaterialatesWith`.
Why the parenthesis removed?
This is a good change. You can use `#definedefine_BATCH_in_close` instead, and use `#definedefine_CR_BATCH_in_close` instead.
I don't think this is the right approach. I think it's worth doing that. I'd suggest adding a `static tagWriter` to avoid a `tagWriter`, and adding a `defaults` to the list.
We should add a `get_json` method that does the same thing in the `new` and the `accessSpec` interface.
This is the only place where we can call `NEWIPC`.
This is the only change I see in the code.
This is a change in behavior, but I think it's a good idea to remove this. The only place this is needed is in `AWS IAM` where it's being used, so we should remove the `AWS IAM` and `AWS` checks in the `AWS` package.
I think we should remove this file, it's not used anymore.
I'm not sure why you need to do this. You can't just use `fme_irq->evtfd` here.
do we really care about `TransformerDecoder`?
This should be a `if (Intent.ACTION_Defaults.equals(intent.getAction()) {`
This should be a `AutotoolsPackage.run` instead of a `Run the check during package build` (which is the check that is not in the package build but the check that is in the build.
Why do we need to check for `isSorted`?
I'm not sure about this one. The reason I'm doing is that the 1st PLL3_SW_60M is to get the 1st PLL3_SW_60M from the LPI2C select OSC, but the LPI2C select OSC. The LPI2C select OSC. If I understand correctly, the LPI2C select OSC was to get the OSC, and the LPI2C select OSC.
We need to add a `json.Sha()` so that we don't have to specify it in every iteration of Prometheus container image.
This should be moved to `const`.
This is a change in behaviour, but the changes in this file are not related to the PR.
This is not needed. `Redundant `return` is already defined.
This is the only change that fixes the issue.
why is this needed?
Can you add the `?:` after the `if`?
Shouldn't the class `endsWith` be passed to the `equals` method?
The BatchExportProcessorOptions property is already a BatchExportProcessorOptions. It is a bit confusing to have a BatchExportProcessorOptions. It is a property that is not a BatchExportProcessor.
Why is the `FakeWebAPI` not `nil` in this case?
Shouldn't we have an `__` that will be used for these as well?
I think we should remove this one too, it's no longer used.
We should add an extra line after the declarations.
this is not correct, but I think we should keep the `REQUIREMENTS` and just use `2.14` instead of the `3` here
This line should be moved out of the if statement.
We should add an example of what the "real" type of type is for.
This is a bit of a hack. It's not a good idea to add it to the docstring and then just add the `return True`
Can you please add a space after the comma?
@matt-gardner, I'm not sure if this is a good way to do this. This is the only way I can do it is to have a new `accConn` that does the same thing.
I don't like the idea of having a hard-coded `id` here.
why not use `.data` here?
This is a bit of a hack, but I'd rather we keep the `-index` as a part of the name.
This test is failing because the `spec` doesn't actually fix the bug.
This is a little confusing, as it's used by the `Gcompressed files`. I'm not sure if this is correct, but if it's a `Gcompressed files`, then I would have expected `Gcompressed files` as a `Gcompressed` (which is a `gz` and not a `gz`).
What is the difference between the two?
This should be `public static ServerWebExchangeMatcher anyExchange() {`
This is a breaking change. I think it should be in a separate PR.
This include should go before `iostream`
I think this might cause a problem since `parentDom` is never null.
Just a thought, would be nice to have an enum instead of one of those values.
I don't think this should have any side effects.
How does this work? Is it a different process?
I think this is the mocking that the botocore is not in the API. We should probably just move it to the `apigateway` package.
I don't think it should be in the exception message. I would say, that it would raise an error.
Why not `(s)`, `s.handle(stream)`, and the `(stream)`, `handle()` functions?
Ah, this one was correct.
This line needs to be reverted.
What if someone sets this to a list of elements and the node_step?
this is a wrong change, it should be changed
I think this is not right. It is a bit confusing to read when the `auth` function fails, but it is a bit confusing to read.
This is a bit of an overkill, but it looks like we have a constant for it in `listens_matched_p`, and we should be consistent and use the same value in `listens_matched`.
I don't think we should be testing that the image is not available here.
I think this should be `ecR.java`
`copyqr` is the same, and `qr` is not the same as `copyqr`
I think we should remove this line.
What's this? Why not simply add it if it is not None and add it to the other if statement?
I don't understand the `.isEmpty()` call here?
We should use `ZpoolStatusStatusStatusOfflineed` and `ZpoolStatusStatusStatusStatusStatusStatusCommit` here.
This is a little weird, why did you change the condition to `v4IPNet`?
This is a bit confusing, as `id` is not a record. What about the record? What about `_current_id`?
This is the default, not the default, so you can just remove it
Is this related to the rest of the PR?
This should be `Weave`.
I think this should be `Rewriting manifests(staging location=%s)`?
This import is not used anymore.
Why not just use `s.SendSend(replies)` here, and then use the `if` below below?
I think this should be `let peg.get(string)`, and then you can use `let peg.get(string)`.
I think the name of the test case should be "groups" or something like that, as this is the name of the test case.
Should we also be setting the config config in `/`?
This seems like it would be more appropriate to check the error message in the `forEach` block above.
This is a bit confusing, why is it needed?
I don't think we should be doing this, it's not a "not" check for the commit.
I don't think this is the right way to do this. The `!==` check is not needed.
just curious, why do you need to do this here and not do the `echo` in the `props["FunctionName"]`?
Was this just me so sure?
Is this needed?
this is a little hard to read, can we just have a `user.Auth.Kubernetes.SecretRef.Name` check instead?
This should be _visit_consumer_
this seems unrelated?
This will break if there's a `setProperty` function in a loop.
It's not clear to me what's going on here. The `+` and `/` in `Read`, so I don't see why.
This is a bit weird, why not use a constant?
I would use `isort` here.
Is this still needed?
This is the main change.
can you make this a debug statement?
I think we need to keep the same as the other changes here.
I'm not sure this is correct. It's a good idea to use `print traceback.format_exc()` instead of `except "\n"` in the `if`?
I think we can just remove this line
Remove empty line?
This should be `@return`
why is this one not a list?
setting this here would be a little more appropriate to test the test, and have the tests pass on the `suite` table.
I think it would be better for this to be `AS_IF` rather than `AS_IF` as we already have `cobuild`
It seems that `CRiOS` is now set to `true`, so this is no longer needed.
I think we should remove this and just do `clear CommitBatch()`
Shouldn't this be in the if statement?
this is a bug fix, we should just always use `newVNode.props.multiple`
Why are we adding a new condition for the `epochNum >= a.foundationBonusP2StartEpoch` check?
There is a `table__.drop` method that does not have access to `table__.create`.
I don't see any code that adds `devices` to `paths`.
I don't think we need this. The default config value should always exist.
This check is not necessary.
Why is this removed?
this is not needed, we can just set this to null.
Should we use the same naming convention as `isEmpty()`?
I don't think this is the correct way to do this. I'd rather see a `lbann_comm_ptr` function that takes an integer, and if we want to be sure that it's a `finalize` parameter then we can remove the `finalize`.
Should we add the m check here as well?
nit: `fillHandle` is already an object
This should not be necessary as we already have the `char[] upper` (or `char*`).
this is not a boolean
I don't see any new context in this file.
I think this is a good change. The output of the max of the max max of the random SP is not in the max.
Why is the `Status` being used here?
I'm not sure if we should be using a `*` instead of a `*` here.
Should we also add the `HRESULT` in the `Client_CLIENT` and `HRESULT_NO_STATE`?
This is a little hard to read, but I'm not sure if this is the best place to put this check.
This is a bit of a weird pattern, as the previous code had been doing so.
I don't think we should be using the `get` method in the `PathTemplateCheckView` interface, since the `get` method is already called on the `PathTemplateCheckView`.
This is not a good change. The other files are for the same file as before
Is it worth adding an explicit `nd` to the log message? I think it's not clear to me why this is needed.
I think it would be better to move this to a constant. It would be easier to understand if the flag is set in both cases.
"stderr" is an error message, not a warning message.
I think we should keep this TODO here, as we are in the other PRs.
why is this needed?
I think you should just use a `some constant.searchTitle`
This was a bug in another PR. I'm wondering if we can just remove it.
@contributor/coreclayton can we use the same logic for the new `.to_i` ? I'm not sure we need to make this change
I'm pretty sure this is the right fix. We should probably be looking at the `attr_accessor` in the `attr_reader` and have it take a `attr_reader` object.
I think this needs a more descriptive name, e.g. `_stream_data`
`batchMap` is not a `DataConnection`, so you can remove it.
I'm not sure why we are removing the null check here, but I don't think we need to check for null here.
This is the only real change that makes it clear that the `fillObject` is a `const` (which is what the best way to go about).
Why is this needed?
Shouldn't it be `logf` or `github.com/jetstack`?
this seems to be a bit of a weird thing, but I'm not sure if this method should be called `current_CONFIG_CONFIG` or `current_CONFIG_CONFIG_CONFIG` or something
Is it worth checking for a block.BlockMessageLimit?
How about `5 instructions: LDR+BR, see INSTR_CREATE_jump_reg()`?
Please remove the "9680625b39d3363d" part.
Line is too long. [81/80]
I would add this to the doc.
Is this needed?
Shouldn't this also be a `sameSite` object, given that the object is only available in the expected ones?
Can we call this `user-agent` instead of `Disallow`?
this is a bug fix
I don't think you need to do this. The `scheduleRefreshFoldersIID` is only used in one place, so I'd just make the `scheduleRefreshFoldersIID_` be `static`.
Is this the only place where we call `diagnostics.length !== 0`?
I'm curious why you changed the type from `onShowCustomViewHidden` to `onCustomView`, but why is this needed?
How does this work?
I think this can be simplified to: ``` if (Column.checkArgument(width > 0, ...);
I think this is the wrong place to put this one.
I think this should be done inside the `if (parser_includes) code_ += ""` block. The `std::strtok` above should be moved into the `std::strtok` block.
Why did you remove this? I don't see any reason to remove it.
please use flush directly.
This should be `github.com/algorand/data/basics`
I think we can just return err here, and use `fmt.debug`
We need to make sure we're not using `super` in the code base.
Is this the same as the `namespace`?
Please remove these lines.
I don't think this is correct. The user could have a single `Dataflow` object that does something like this, but it's not going to be set to `/<user_name>` and it's not set to `True` (and it is not set to `False`).
Style/SymbolArray: Use %i or %I for an array of symbols.
Do we want to set this to True in order to be able to set it in the same way as in the `__init__` method?
Can you explain this? It seems to me that `148` is a string, why not just have it be an integer?
Why is that?
This is a bit of a weird thing. If the goal of the `SpanContext` was to be to do the `SpanContext` instead of `l` to avoid any confusion.
I don't think this is the right place for this. The client could be set directly in the client before the client is set. The client will be set in the client and the client will be set to the client.
nit: I think this is a bit of a hack, and I think it would be more consistent to just return the partition of the file. I would suggest to use the `StructLike partition()` method in this case.
Why not return an error?
I don't think this will work, it should be a separate PR
This is not needed anymore, as `enableTwigStrictVariables` is set in the constructor.
I think this should go before `javax.Ignore`?
Is this still needed?
@smarterclayton do you have any ideas on how we can handle the `driverVersion` case?
@mattpap this is the `||` branch that I can't tell. I don't think it's a problem, but it's just for the `script` field, so I'd prefer to have it be a `reset` method that just returns a `nodes`.
Why was this removed?
I think this is the only place where `successful` is null. The `getStateStatus` is not used, so the `getStateStatus` function can be removed.
We should probably make this debug.
I think we can just use `interceptors` instead of `i.interceptors`.
This should be `0`
should this be `int(p.shard.GetShardID())`?
I think this can be removed, we need to check if the element isn't `null`
Shouldn't this be `ellipsis.Ellipsis`?
Is this a breaking change?
This is the fix. It would have been good to have a small fix to make sure that the user doesn't change the user_from < 0.
I think it would be better to use a `for (int i = 0; i <= allergens.size() - 1; i`
This is a bit of a hack, I don't think we need to do this.
`ref` is not used in the function.
"s/s/things around/ ?
This method is used in a few places, can you move them to a separate function?
I think this is the only change that affects cftime, but I'm not sure it makes sense to have this in the code base. We can have it in the code that I'm not seeing.
@storusjr I'm not 100% certain these two options are the same, but it seems like the only thing that is used here is `stream` and `stream` should be `stream`?
This should be `const train_error("k-NN brute force method is not implemented for CPU", train_result())`
I don't think there should be any assertion on the plan: subscribed_plan: subscribed_plan: subscribed_plan: any of these cases still test this?
This should be a `_socket` or `_socket`
You could just remove the `=` parameter altogether.
We don't need to return error here, we can just return nil
I'd rather not do this. It would make it easier to see that the plugin is not available.
Can we add a `@SuppressWarnings("unused")` annotation here?
This should be done in a separate PR.
`trim()` should be `final` as well. Also, I think this should be `if (length > 32) throw new IllegalArgumentException("traceId is empty")`
I think we need to make sure this is not a valid value, right?
Why not an `es6-js-export` here?
Shouldn't this also be `!RequestOptions=true`
We should probably change these to be `writewrite`
This should return `Optional<String>`.
I think we should remove this line. It is already in master
I don't see where this is used.
Should this be `nil` instead?
You can remove this line.
I think you can remove this
This is a bit weird, why is the `var` branch not a `null`?
I think this should be a separate commit
I don't think this will work, since you're using the `<pre>{message.replace('<', '&lt;')}</pre>` instead.
why 2 is needed?
Block has too many lines. [58/25]
Can we use the `Rule_NAME` constant?
This could just be `allowOptionalMappings = false`
Is there any way to avoid the need of a new type?
I think it is better to use a different name for the new one, and then use it here.
This is a change from `netnetnetnetnetnetnet` to `netnetnetnetnetnetnetnetnet.netnet.netnet.netnet.netnet.netnet.netnet.netnet.netnet.netnet` to `netnetnet.netnet` to `netnetnet` to `netnetnet`?
This will be the main branch in this PR. We need to move the `Article.android` to the end of the file.
Should we add a `bool` to the end of `tls_insecure` and then add a `bool` to the `bool`?
Why did you remove this?
This is a good change, we can't just use `indexOf(element, int from)`.
This is the only thing I'm worried that it will cause a long time ago. I would have put it in another class. I would say that it's a separate method.
Should this be removed?
Shouldn't the above be removed as well?
This is a very minor thing, but I'm not sure how we can get to the `menuStateStatus` variable.
I think we can remove this line
Would it be worth having a test for the `done()` call?
I would put the logic here, it is not necessary.
I don't think we can use a list.
Why not use the class `getByUuidUuid` directly?
This is the main code I found. I'm pretty sure it should be in a separate PR.
Style/NumericPredicate: Use the new Ruby 1.9 hash syntax.
Why not `Handler       http.Handler`?
is this a BC break?
I think this should be `<` instead of `>`, because the `pageTitle` is always defined, and it's the most important thing to do.
This should be `@link`.
I think we can remove this and just use the `SingleObserver` package here and use the `Disposable` package instead.
Would it make sense to add `success_https` and `success_service` to the list below?
Why this change?
I think we should use a label here instead of a float.
This is a breaking change. I don't know how to fix this, but we can't do it in this PR if it's not.
Freeze mutable objects assigned to constants.
This is not a good idea. It would be better to do `Schema.schema.as(Schema schema)` and then just pass the `asInSqlType` directly.
I think we should just remove the `DynamoViewModel` altogether.
This should be reverted.
Why is this a separate function?
I think this is a bit of a hack - I think it should be `True`
These are also the only places where we use them, but I'm not sure what to do about.
I think it would be better to use `bool` instead of `bool` to avoid having to pass `Public`.
I think we should add some type hints to this, as we'll be going to be adding a note to the help text here.
I think we should use `ReadToEndAsync` here instead of `Async`
This is a bit confusing, since the `reminder_email` method is used in `make check`.
I would have added a new value for the `EXT_SIMD8` and `EXT_SIMD8` to be consistent with the other one.
The `linkToParentDomain` is not necessary here, and will be removed in a few other places.
This is not a good place to test. It is used to avoid a test. It's a test and we can't test for it, and we can test for it.
Can we add a config to make it clear that this is only for debugging?
remove empty line
I think we can get rid of `makeLazyLoader` now that we're not doing it here.
This is the only thing that is needed for the task to be implemented. The `Task` is not a task, and the `run` is not the task in `build.py`.
Use `!string.emptyList()`. Also, you can replace `!string.emptyList()` with `return null`
Why do we need this? It is already a part of the API, so I'd rather not do it in the `show_source_pygment` function.
Shouldn't this be `c.msubs = opts.MaxSubs`?
I think this is the only place where we can actually return a FPGA_INVALID_PARAM. We should probably just return a FPGA_OK. The purpose of the FPGA_INVALID_PARAM is to avoid the need for the change.
Redundant `self` detected.
can we use the same logic here, so that it is easier to read?
@johanste this was a bug in the test.
Does this change have any impact on the other changes?
I'm not sure if this is the right fix. If the user doesn't have a single key, it will still return the wrong status code.
This is a bit weird. I think it would make sense to keep the method as is and rename the method to `isinstance` and then just do `==true` instead of `==false`.
This is a very weird thing, we could just have `globalVirtualMAC` be the first one and the second one (and the first one)
This should be in the `inMemory__` package.
nit: I think this can be moved to `format_instance_name`?
We should add this to line 121 and the other errors below.
Please use a long as this is a separate map. It should be possible to have a very small small number of values.
Is this change related to the current version?
Should be `metric` instead.
Why is this needed?
Is this change required? If not, please remove it
I think this should be `non_trackable_unordered` instead.
I don't think this should be done.
Should be in the other goals, e.g. `github.com/mholt/caddy/httpserver/httpserver/url.go`
I'm curious, why do you need to do `options.as_json` here?
This needs to be `SQLITE3`. The current `SQLite3File` is a little confusing.
This is not a very good idea, since it is a separate `Http2ExperimentSwitch`.
I think we can move this up to the top of the file. It's used in the file that is not used anymore.
Should be `pkg_errors` here.
I don't think we need this change
I think this should be done in a separate PR.
I think this needs to be a `defer` here. `newnewServer(newedServer)`
I think it would be more clear to have this in the `FailingTests` struct, as it's not a `WorkspaceModel` and it's a `WorkspaceModel`.
Can you add a check for "if (subresourceRange.aspectMask & VK_IMAGE_ASPECT_COLOR_BIT) )
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
What do you think about using a function for the new `systemdsystemgeneratordir` instead of `AC_SUBST(systemdsystemgenerir systemd)`?
I don't think this is the right place to do this. This is a change that will be needed.
`onInit` is a better name for this.
This should be `startTs.getVersion()`.
This is the fix.
I think it's safe to use a `DO_to_templates` here instead of `redirect_to` since it is a very commonly used path, and we can use that here.
Can you add a new line after the last parameter?
This should be removed.
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
why is this needed?
why is this changed?
This is the only place where we want to skip our tests. The `WheelResolverTool` option is to update `JUnitRunner` to `JUnitRunner` and `JUnitRunner`, and we need to change the `JUnitRunner` option to use `scalable_resolver`.
Please remove this, it's not used anywhere
This is the only change needed to the `IsEip3529Enabled` property.
I don't think we need to do this.
Can you please add a new function for this?
Please use the standard `file_exists` helper method in this file.
If we don't have any settings file, we should log it as well.
please make pretty clearer
What if the user doesn't specify a file and has a Dockerfile for it?
Can we add a docstring here?
Hmmm, this seems a bit odd to me. Maybe it would be better if we moved it to a separate method.
I don't think this is the right place for it.
It seems like this should be `import get_notebook_data`, since it's used in other places and is not really necessary.
Do you need to add a doc note that this is not needed anymore?
Is this the correct default? I think it would be a good time to do it for all cases.
@smarterclayton do you know if there's a better way to get this?
This should not be needed.
I think we can move this check to `operationOptions`
This import is redundant.
@jcotela is this a problem?
Isn't this supposed to be called on a new line?
Why do we need this change?
We should add `api.go` to `api.go` and add `EnableAdminApi` here.
This should be grouped with the rest of the imports, not the ones that are used in this file.
We should only be calling the context in the `UpdateStats` method if the connection is not in conntrack table.
This should be `u2122`. Also, it's not needed for the `u2122` list of `u2122`s.
This is the only one I'm not sure about.
@jridgewell I'm not sure what the right answer here is, is it correct that this method is supposed to be public?
This is a bug fix. We should not use the `11` parameter in the test.
Is this the correct way to do this?
This seems like something that should be a separate commit, and should be a separate commit.
This file is not used, right?
I don't think we need to do this, the `scheme` is not needed here
This should be a constant
This should not be necessary
This is a pretty big change. I don't know if this is the right place to do this, but if you have a way to make sure this doesn't break anything, it's probably best to remove it.
Why the `+`?
I don't know if we can get rid of this line, but I'm not sure it makes sense to have it here
this should be `!=`
hmm, this seems to be a bug. Why do we need to check?
Why is this needed?
What's the difference between this and the `IHttpParser`? Why is this interface needed?
I don't think we want the environment variable to be defined.
This looks like a bug in `CALI_INFO`
@drcrallen do you know if this is a bug?
I think we should use `this.inputs.length || Input.DEFAULT_LOCKTIME_SEQNUMBER` to avoid the double quote.
This is the main code.
Can we use `CharUnaryOperator` to avoid the NPE?
I think this should be a `GET` constant, not a `payPeer`. The same goes for the above two.
Why is this needed?
I don't think this import is needed, since the `__version__` function is imported inside `__file__`.
I'm not sure this will work, but if we do want to be careful, we should probably check the object's name.
@jridgewell Is this a bug or intentional?
This is the fix for #2781
I think we need to add this to the `DebugSimulateCalcGraph` config too, right?
This will be removed.
I don't think we can get this from the code. We need to make sure that the method returns the same thing as the exception.
I think this file needs to be updated too.
I'm not sure this should be here. The X86 flag is used to be a different way of getting the X86, so I don't think it's needed.
Is it possible to get rid of this check?
`not plotting` should be removed as well
This is not a good idea, but if we're doing this I would suggest to move the `if` inside the `if` statement to the `else` block and avoid the need for the else clause to avoid the if block.
this is a little hard to read
This will break the existing behavior, as otherwise it will break the behavior. I think we should do the same in `debug()` and `debug()` to keep the same behavior as the other `debug()` methods
This is not a good idea, as `symbol.toLowerUnderscore()` already returns a non-null value, and it will be a no-op if it is already present.
I think this is not right. We already have an infinite loop on line 980.
I don't think we should do this. It's a bad idea to add a new `ec2_client.disassociate_route_table` function to all the `open_store_only`s that can contain the `ec2_client.disassociate_route_table` function.
Why not just change the `for (const key of Object.keys() : Object.keys(val1)` to `for (const key of Object.keys())`?
This import is unused.
`initialization` is not a valid name.
I think this is a good place for the `assert` statement. I'm not really sure what the best approach is. I would prefer to have the assert as an `if` and `else` here to be more explicit.
In theory, you have to change the account for the Taylor API to add the `SpendingKey Address` field to the `EffectiveAddr Address` field.
I would prefer if we can use the "selectCastSink" field in the "selectFilterFilter" method.
This can probably just be moved to `__init__`
Why is this needed?
I don't think we should be using this in the `letlet` method.
I think we should be using `.name` here instead of `.signal` as a parameter.
I think you should check if `error == null` here
Why do we need to check `nested->constant`?
I think this should be `return`.
This is a good change, but I don't think we should be changing the name. It's just a little hard to follow. It's also not a big deal but we should be consistent and not have a name like "user-to-3", and it's just a bit confusing.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
It's a bit odd that the `self._test_argsort` function is used to check for the given type. Maybe it's a good idea to check for the `self._test_argsort_from_tuples` function.
Why was this removed?
I think it's safe to use a `EPS_for_all` constant here, since it's a public API
do you want to make this loop loop?
I think we could move this to the `authenticate_user!` model and just call it `filter_user_id` in the future.
I think this class should be public
This is the only change I'm not sure about. I'm not sure why you had this here, but it seems to me that we are removing the `ignoredEmail` part of the `UserMessage` and not having it here.
This should be a separate commit.
This is not needed. In the past we've already done this before.
I think we need to keep the testing testing for testing. We should keep the testing testing in the test.
I think this is a bit too broad, can we use `Post.by_unanswered` instead?
Why is this necessary here?
This is not the only place where we can use `get` instead of `Span` since we don't have any other type of `Span>.Empty` in the `Function` and `IImmutableList` that would be the default.
We should also add `injected` to the `beat.rst` file.
this was a bug in the test.
This is a bit confusing. I think the `.to_if trace.inserted?` and `.to_if trace.edit` are missing.
Why remove this one?
I think this should be `metricsToExport.Metrics.Count > 0`.
Hmm, this is a bit weird. I think we need a `resp` argument to `resource`.
Why are these removed?
I'm not sure this is a good idea, but I'm not sure if it is worth the right fix.
`.toLowerCase()` is a bit confusing. What about the `.orElse(true)` ?
This is a bit confusing, as it is in a public API and is not a public API and should be changed.
Why is this change necessary?
This should be removed.
`getManaPercent()` should not be called here.
This seems like a good candidate for a unit test to cover all tests.
I think this should be changed to `Twelve years later`, since it is used in the same file.
Please rename to chaos or make it a const
This is not a good change, we should make it a public API and not a public API.
do we have a test for this?
Shouldn't it be `knative-gcp` or `knative_store_build`?
This was a mistake in the original commit, but it was not doing anything useful.
This is the only change that affects Sentinel() and not being called.
I think this is a bug fix. We should be able to use `exception:CustomException` instead of `Times.Never`
This is not the same as `iter_cai_assets`, right?
In case anyone sees the `using System.finest` implementation is using `using System.finest`, it seems to be more correct to use a `String.format` instead of `String.format`.
I don't think this is the right place for this. The first argument should be the first argument.
I think it's better to put these constants in the `initpid` struct.
Can you use `throw new ParameterException(` to avoid the exception?
This was a no-op, but now `_get_tests` was only used in `lib/mne/utils/testinfra` and `lib/mne/utils/testinfra`
Wouldn't it be better to have left<0: and not getDesktopObject().objectFromPoint(left, bottom) here?
Is it possible to remove the `.h` here?
This should be a separate change
I think we can remove `FileData` parameter and change `FileDictionary`. The `Data` parameter is now unused and can be removed.
I think we should use a more specific version here: `sys.version_info < (3, 3)`
This should be `warn` right? We're going to be able to remove the default.
This is not right. It is a new API and should be removed.
The WordPress dependencies file should not be here anymore.
This is the only change in #2781
This should be `_post.Dispose();`
I don't think we should remove this TODO, it should be in the next PR
We should be doing this in the `setup.py` file.
This is not the right place for this.
this spec fails on my machine but I don't know if we have a better way to test this
I think we should add a `task.create_visibilities()` check here as well.
This is a very generic name. It might be better to have a name like `[arguments-out-of-order, order]` instead of `[arguments-out-of-order]`
I'm not sure why you moved this to the `snackbar` class.
This is not needed, the `const std::string &uint8` will be used in the `const` loop.
This is a bit confusing. What is the difference between this and the other one in the code?
I think we should just return an error if the file exists.
I'm not sure this is a good example. It is not a good idea to use the `metav1` and `k8s.io` as the `apimachinery` option for the `metav1` and `k8s.io`. I'm not sure if it is a good idea to use `apimachinery/pkg/apis/meta/v1` in the `apimachinery/pkg/utils/core`.
This is not needed since the `get_reader` function returns an error.
Isn't it better to use a new method?
Please add a space between `||` and `&`
I think it would be more consistent to use the `class.Boolean` constant here instead of the string value. The `Delete` prefix should be the same as the `Delete` constant.
I don't think we should be using `LOG.debug` in this case. The `LOG.debug` method is only for the `conda` case.
I think the escape parameter should be named as `h2o_iovec_t_destination`.
I think this is a good idea, since it is not a user-facing account, so I think we can just set it to `Accountable` instead of `undefined` here.
I'm not sure if it's a good idea to have an `str` here.
Does this need to be done in the log line?
I think it would be good to add some "agaw" tag here as a link to it. I don't know how many people will have to do it, but I think it would be a good thing to do.
Please don't change the doc here, it's not really necessary
I think we should change the code to `block_VIOLATION` instead of adding a new one.
I think you can just remove this line.
Why not use the same name as the new one?
I don't see where this is used.
This is a little confusing, as it's a bit of an `is_diff` function that is used by the user. If we want to add it to the `is_diff` function, it's a bit more explicit. I think we should just add it to the `is_diff` function in the future, and add it in the future.
I don't think we should use `tenacity` here.
Please don't change this.
Shouldn't this be `final String`?
Why are we adding these checks here instead of adding them here? I'm wondering if we could add a `dispatch` method in the `span_clr` that wouldn't be necessary if we're going to have a `setPropertyID` method that wouldn't work with `setPropertyID` but that would allow us to use them in the `span_clr` method.
@jona-sassenhagen I think this should be fine
I think it would be cleaner to just put this in the `must_respond_with` block above.
Why do we need to check that metadata is nil? Is this what we want?
This is a very minor thing, we should be able to remove it and just call `CommunicartMailer.cart_notification_email` everywhere else.
Import classes from wildcard is not allowed. Please revert.
I don't think this is the right change. It's a bit of a problem.
This was removed as it was added to support #4535.
This is not a correct error message, it is used in the `MDKit::MorganFingerprints::getFingerprint` method.
Why does this change?
This is a very minor thing but I think it might be better to make it a `deprecated` type instead, and then have a `deprecated{}` type.
This should be a constant.
This is the fix for `repositories-2.4.0.dev.to_json` which is not a part of the fix.
This should not be needed, it's not a test.
This is not a big deal but it might be worth mentioning that the name isn't very descriptive. I think it's a bit weird that it's a name. `name` is a name.
I'd like to see a `*Pageing chaos(String, String, String, String)` for this field.
This is a no-op because the task is always the same as the exception.
I don't think we need to do this, the method is defined in the `KsqlConfig.createFieldNameConfigs` method
Why is this space necessary? Is there a possibility of space?
This is not the only usage of the test.
I think we should be using fmt.Sprintf here as well.
Why is this needed?
You can't use the `.` prefix.
I'm not sure this is correct. It is not possible that a test fails with a test that does not support `is_merge_or_booted` check.
I think we should use the `xAbstract` helper here
Is the `10` prefix still used in an API?
I think we should not use the skip agent_is_crawler? check for nil
Why do we need to raise an error here?
There's a lot of duplication in this file, but I think this file should be changed to just `5.1`.
This is a little hard to follow. I'd rather have a `return (twoThirds)` method, which is more readable than `twoThirds = false)` and then just `return (twoThirds)`
This is a bit of a hack, but it's a bit confusing that `getDefaulteine` and `getScheduledFuture` are not used in the same file.
I think you can just use `List.of(fields.name())`.
I don't think this is the right place for this.
Can you make sure you don't use this syntax anymore?
Line is too long. [83/80]
If we're not going to be changing this, we should also change the `stopProcessing                   ` variable name to `stopProcessing                   `, and change this variable name to something more descriptive like `stopProcessing                   `.
This change is not necessary.
I don't think this is the right place for this. The `PrivilegedCapable` is the default value for the `docker`, so I would just remove this one.
why do we need this?
This should not be needed.
I think this is still not correct. The temporary placeholder is not in C++ TM
This should be `time.Second`
Is this change necessary? I think we can remove the `auth-delegator:%s:%s` namespace as well.
I don't think we need to keep the ` emptyWithNull` here.
This is a bit of a hack, but I'm pretty sure this will work for all local commands. I'm not sure if it will work with localKey, because the local commands are the same, but I think the other changes are just to be to the local flow.
Can you add a note that this can be removed if the user doesn't specify a signal that they are not working correctly?
I'm not sure if this is the right place to put this. The only thing I'd like to do is if the user is trying to set a new version, and then if it's not there is an error, we should just remove this.
Why is this change necessary?
Would it make more sense to move this into a common method, and have it in a separate file like `should redirect_to(practice_url)`?
Why do we still need these? I think we can keep these as constants.
I think it is better to put this in the `if (pkey == 0)` block, to make it easier for the caller to see what it's used for.
Is this used somewhere?
Could we make it a private method, so that it's clear it's a name that's not a part of the method?
This is a little confusing. What about `||` or `||`?
I think you need to check the error code before checking the content of the client.
This is not the right way to go. We should add an `else` clause to the `in` clause.
I think you can just remove `using LayoutUseCheckAndMessage = ...` and use `using LayoutEntry = ...` directly in the `using` tag
Why are you removing the `type` tag?
This is not needed.
This change is not necessary.
How about "batch size of 1"?
Can you add the `SelfSigned` struct here as well?
Is this the correct place to change this?
I think this is the one I was talking about. I was just trying to understand why the original `spack.dirdir`.
I think this can just be removed now.
Was this causing issues, or was the previous code didnt catch this?
Why do we need this change?
I think this should also be a public API
I think it's better to keep it in the constructor, as it's only needed in the `if` block.
This is a change in behavior, but I'm not sure if we can get the name of this method.
I think this is a leftover from the previous PR.
I don't think this is needed
Why do we need this function? I think `_translatedManifestPaths` is a better name.
What is the ` ServerAddressesFeature` for?
I'm wondering why this is needed. It doesn't look like the changes to `DeclaringType` are necessary to me.
I'm not sure if this is the right change.
This is a bit of a hack, but it seems like it should be an `Byteicuous` or `Byteicuous`
you should check `if isinstance(self, '_keys)`.
nit: you could use the full name of the variable
What do you think about just doing `forward_agent = @options['forward_ssh_agent'] || !forward_agent` here?
This file should be renamed.
This is a change in behavior, but I think it's still not necessary to change this.
This seems like it could be a one liner.
Should we also check if the env vars are set?
why do you need to change this?
Please use `string.toString()`.
What is the difference between `is_integer` and `is_integer`? Isn't it better to use the check in `is_int`?
this is a new table, not an index
Please revert this change
This test case needs to be added to this PR. The test case needs to be updated to ensure that the test is not run correctly.
We should also remove the `Formatters` from the `bisect_individual_multiple_culprits` table.
You should use `spack.Pcontrib.dubbo.config.clipboard` instead of `spack.Pcontrib.dubbo.clipboard`.
I think this should be renamed to `daydayday` to be consistent with other values.
@jcotela It looks like this was the only place where we used the `table=None` value, but I think it's still the case that we don't have to make this change.
please use the same style as above, you can use the same style for the other cases (line 496)
I think this needs to be `go get -u github.com/xeipuuv/gojsonschema`
I think this should be done in the `before_tests` block
Please remove the `['code']` parameter from the list.
Can this be changed to `api.MustCompile`?
Well, I'm wondering if it makes sense to have a method for this in the `create` method, which returns the user, and return the result of the method. Then we can change the signature of this method and return that instead.
Why not use `Settings.GlobalSamplingRate == null` here?
Would be nice to have a more specific `0d` check here.
Can you make sure this is only for testing?
I'm not sure this is needed. The metricReaderOptions needs to be metricReaderType.Periodic.
Why not using `@var bool Search on every key stroke` instead.
@mfojtik why is this change required?
I don't see any new code in this method, but I'm wondering if this should be removed.
Why not just call `LOG.finest()` instead?
This was the only place I'm using this, but it's not a good candidate for it.
This is a bit confusing to people, but I think it's better to have the `legacyProto` as a separate variable.
Metrics/LineLength: Line is too long. [83/80]
I think we should be using `Info.warning` here instead of `Info.warning` because that will be the same for the case when the `config.Info` function is called.
What's the purpose of this change?
This is a bit confusing, we are doing a `prepareDiscriminatorCriteria` in a few places, and the code that is not needed here. We should be able to just pass in the `cast` and `super.cast` instead. We can also avoid the `super.cast` call in `prepareDiscriminatorCriteria` and the `cast` call here.
@stephentoub why do we need to change this line?
This is a bit of an odd place for a different function, I'm not sure how to do it in the future.
I don't think we need to add this. The `+` statement can be removed.
I think we should keep it as `pyw`, because we don't need to keep it in sync with `pyw` because it's already in sync with `pyw`.
@jcotela is this still relevant for the PR or is this just something we can remove?
This is a change in behavior, I think we can just delete the `ipamNetworkConfig := IPAMNetworkConfig{` above.
Unrelated to this PR but this seems to be unrelated.
This doesn't seem right. The `--eval` option is only needed for `--version` and `--nixpkgs` (and the `nixpkgsVersion'"` in `build` and `build-system`).
I think this is not needed.
Shouldn't we also check that the IP is not supplied?
This is not needed anymore. The enum is used for a new one in this file. The enum should be used for the same values as the other fields.
Can you please remove these two lines?
Use the new Ruby 1.9 hash syntax.
Is it possible to move this block to a separate block?
This is not a big deal but the only thing we need is a stats function to be used is a no-op. It is just a no-op.
I think we should remove the `if` condition.
This is a very minor thing, but the namespace is not really needed.
This file doesn't need to be public
This change is not related to this pr ... please revert
what is the difference between `Len` and `NullN`?
I think it is better to log the exception and log the exception.
@stephentoub do we need to do any of these checks?
Should we log the error here?
I'm not a big fan of this name since it seems to be a little confusing to have it be a `*SecretEncryption`?
Is this value needed for all these? If so, we should remove the `Samples.AspNetCore 1` above as well.
This is a very minor change and I don't see why it's here. The `i` is not used in the original code, and `i` is not used in this file.
Use `const` for this.
This is not a valid default value. Is it something we need to change?
This should be "Attachment".
Shouldn't this be `sendCommandForDownloadChromeHeadLess`?
`scheduling_processes` is a very generic name. What about `parallel_scheduling_processes = parameter.BoolParameter(default=False)`?
This seems like a regression.
This should not be part of the key-type string, as it's not a key-type.
I think this should be split across multiple lines.
Hmm, this is a breaking change. The API API is not used by the API. The API is not able to use `diff.` directly.
Redundant `return` detected.
I'm assuming this is a change in behavior, but it's not really related to this PR, so I think it's better to leave it as it was.
Shouldn't this be a `before_action :set_outside_committers`?
@Scottmitch why is this needed ?
I think this can also just `return unix.NLA_HDRLEN + 1`
This should be a warning. The default is always set to true, but not for the default case.
This was a mistake before; the access code was not being handled.
I think we can drop the `or modify` here
should we just delete this file?
Why do we need this?
This is not needed since the tunnel has been closed.
Is this the right place for this?
why change this?
I think we can remove the import statement from the last commit.
Would you mind changing the return type of `ds_instance` to `nullptr`?
@jridgewell Is there a better way to check this?
I don't think this is a good idea... it might be good to have a more descriptive name.
We should probably move this line to after `GapicProductConfig` if it's not needed anymore.
This is a breaking change, and will be breaking
This is not needed, if we don't need it, we should just remove it.
why is this changed?
I think this should be `@param int|` since it's not a boolean, and it's not a boolean
Please don't use `getQuantifiedProducts` in the `antifiedProduct`
The commit message should mention that this is a breaking change.
This is a bit confusing, as `test_name` and `shared.subscription.name` are not used in the model. I'm not 100% sure if this is a good idea.
Why is heatmap necessary?
Won't this break compatibility?
This file was moved to `GlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobalGlobal
@mfojtik why was the go version added here?
Why the check? Is it possible that a header starts with RCLONE_ENCRYPT_V1 instead of V0?
Instead of adding a new const, can we put this into a const? That way, we can add a `#show` statement on the `mapping` component and use it everywhere else in `mapping`?
I think you can remove this `if (true)` statement.
This should probably be `else`
@jakexks/Lambdaer/Lambdaer/isks/isks/isks/isks/isks/isks/isks. I think this should be in the same PR as in the code base, as it's not used anywhere else.
I don't think this is used anymore, can we remove it?
This is not needed, we already have `BaseChecker` in the class.
I think it is better if we can just use a `@return` here.
Why is this needed?
I think we need to move these imports into the `pkg/apis/certmanager` package
This is the main change. The reason is that we're using the package package instead of the package package.
Isn't this the default?
I'm not sure if this is the right fix. The `SetEnvelopeContext` is used to create a new action, and the action that has the same action.
This is not needed.
This is a change in behavior, but it seems unrelated. Can you explain?
I think you can just remove this, it's no longer needed.
This line can be removed
I think it is still not necessary to change this, as it will not be used anymore.
This change is incorrect. The original code was using `values()` to get the `values()` method from `values()` to return `true`.
I think this should be `[a-zA-Z][a-9a-9a-9a/` (a-zA-ZZ][a-ZZZZZZZZZ ('windows', 'windows', 'windows', 'txt')` and `[b-zA-Z][a-9a-ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
Why are we removing the `//`?
I think this should be `config` instead of `config` right?
Would it be possible to make this a `<custom-elements-es5-adapter>` instead of a `<custom-elements-es5-adapter>`?
Can we add the `WelchWindowFunction`?
This was a bug, it was a small bug.
Can this be changed to `const DrawColour &col = col.get<2>();`?
Can't we just use `GenericTypeArguments(typeof(LargeStructWithProperties)`?
Could you use `print(201=False)` ?
NIT: I think this should be moved to a separate PR.
I think we should be more specific here. The `Stateiff` should not be necessary.
This should be `if snapshot.link {`
This might be an issue in the future, but I don't think it is safe to change it.
Why not `return`?
Should this be a `send` instead of a `sendZlp`?
Why not `and 'string' in attr_value`?
We should probably use the BaseExportingMetricReader instead of calling the BaseExportingMetricReader.Collect directly.
Why is this not a `HasExited`?
This is the new interface.
why is this changed?
I think this should be changed to `1.0` since the default `1.0` is the default.
This is a change in behavior, but it's not related to this PR, it's not related with this PR but we should be fixing it
Is it really necessary for this to be a module?
This is the line that was causing issues, but I'm wondering if we should just leave this line as is and keep the line that is for debugging?
I don't know if it's a good idea to change this, but I'm not sure what the best thing to do is if the `changed?` method returns the `None` value.
I think we can remove this method and just call `GetItemLayoutId` in `BindingInflate`. The `IsItemLayoutId` method is not used in the base class.
This should be `__str__` (or similar) as in the other places in `__str__`, not in this PR.
I don't think we should be using this. I'd rather have a `.min` function that calls this.
Should we make the `rule` case a bit more explicit?
Why are we doing this here? I don't think we need this, right?
This is a bit confusing to me. What is this for?
Please revert this change.
Hmm, this is a bit confusing. If the config file is already included in `_init__`, I think it's better to use it in `_init` and use it here.
This is the only place where the server is created, but it is not. It is a good place to put it in the code.
Shouldn't we add this to the docstring below?
Why do we need this? Is it always available?
I think we can just use `s` instead of `s` as the default
Can we make this a list of arguments, instead of having a list of arguments?
The default is 5s?
I would prefer a more descriptive name for the whole method
This needs to be changed to `contains9-2021`
So, I think we should not have to do that.
This is the main change. It makes the code harder to read.
This is a bit of a hack, and I'm not sure how to avoid it. It's a good thing to do. I'd like to avoid this change in a separate PR.
this is not needed, since we don't use the function in this function
This is not the right place to do this, it's a different PR. It is a different PR, but we should probably add a TODO here to fix it.
This is the main change. I think this should be reverted, right?
This interface doesn't need to be public.
This is the only place where the `StackTraceUsage` isn't used, is it? I don't think we want to be able to remove it.
I'm not sure this should be called "sm2" since it's not only for the account.
Shouldn't this be a `shouldLoginPage()`? If so, should this be `using System.runOnUiThread(activity, alias);` instead.
This is the only change that makes sense. The `Warnf` is used in `Warn` and the `Warnf` was removed in the code, so the `Warnf` was removed.
Should we keep this in the `/b2d48a8b0d93b50ca5b73dd14df791c0e/stepfunctions-local-patch` file?
@Pearl1594 is there a reason for doing this check?
@adtt_spec.EmptyValue can be nil if params == nil
How about using a `thatItem.LibraryKey`?
what's the point of this?
This seems like a leak in the PR that was not related to your PR, but I'm not sure why it's here.
you should just use `import luigi.cloudOnceTask` here
The `all` and `Blockchain` are not used anymore.
Is it worth adding some more tests to make sure this is a bug?
this shouldn't be necessary, the default is `True`, not `False`.
can you also update this to a `const` please
I think it is better to keep this field `final` for consistency.
This should be removed as well
Shouldn't we do a reset here instead of using reset?
nit: I'd prefer if this would be an option to not have a default value.
nit: I think we should name this as `Matching`, since we are not exposing it as a property.
I think the original assertion was correct.
This should be a separate change
I'm not sure this should go... It's not a good idea to use a go in the `clean` method, and it's not a big deal, but it might be worth it.
Would you mind fixing this? I think it's not needed anymore
Style/RedundantSelf: Redundant self detected.
Please use the `if` statement here instead of `if`
I don't think we want to add this to the base class.
why is this changed?
I think this is a bug, as `tsas` is never `nil`, so I removed it.
This is a bit confusing. If you want to make it a `Set<T>`, then this should be `static`.
@mattcaswell, I don't think this line is needed.
I'm not sure why this is needed
nit: I think this should be `const`
I think this should be a separate commit
Did you mean to leave this one in here? It's used in both places.
Why do we need to set 5 to 4 here?
I think this is not needed since it's a `Map` field, it's already in the `LinkedHashMap` field.
I'm curious why you removed this one?
This is the change I don't see why we need this change. The `errors.New` method is only used to get `errors.New` when it's not being used.
Why did this get removed?
This test was testing the wrong place for this.
Would it be worth noting that the RFC2136 nameserver can be empty?
Should this be `////` instead?
I'm not sure this is the right way to go. If it's an error, we probably want to keep it there.
This interface is only used by `get` and `setContainsComment` and is not necessary.
I'm not sure if this is the right change. I'm not sure we should be doing it here.
I think we should use metricNamespace here.
This is a bit of a breaking change, I think it should be moved inside the `removeToken` method.
I think we need to change these, because they're not used in the API
Why not use the same `unlinked_tgt(&&u_UNLINKED, ibl_type);` as the second parameter?
I think this is a good idea, but I think we should be consistent about the other places where we're doing `pthread_cancel` could be null.
This should be a separate change, right?
I think this check should be moved into `querySelector` method.
@jackfrancis I'm not sure if we should be changing the default value of `config[:perl] == 5.1` here.
This is not the best place for this change.
Can we put these on separate lines?
This is an example of a good place to put it.
This is not the same as the other one in this PR, but it would be good to add a `span` parameter to the `span` as well.
I'm not sure this is the right way to do it. I don't think it is a good idea to change it, but if it is a good idea, it should be `allowHighNonce += false`
This should be `en_US.strings`
Can we remove this?
This is a duplicate line.
Is this the correct price? I thought it was a nil pointer, but if so, we should just return a nil pointer here.
I'm not sure this is the right change.
I think we can get rid of this and just do a copy.
we can get rid of this `api.Finish` now, right?
Please also add `CMakePackage.txt` to these files
This is a bit odd, we have to keep a `TPositiveInt` here.
I think we can use `comms_format` here.
This will fail if the types are not provided.
Should we use the "spack" version here?
Why does `T` need to be checked here? I think it should be a `Action<T>(...)`?
This should be a `Set<string, String>`, since it is not an object, and it is a `Long`.
`type` is a tuple of the input argument. Should we use `__name__` here?
Was it an oversight or a non-standard version?
Is there a way we can make this configurable?
Why not using a `List<string>`?
This is a no-op, but I think it would be better to keep it as is.
I think this can be deleted now since it's a new one.
this is the only place where we need to do this.
I don't think this will work, as the old code uses `crypto` for the zero fields.
This was a bug, and now we're doing a revision.
should we do a `.map { |hsh| ... }` here or do you think that's the best thing to do here?
Why are we doing this?
I don't think the default value should be set here, since it's a user specific operation.
This is the fix for #1414 (I'm not sure we should be using it in the controller, but it's not really related to the PR) but it's not really worth it to just remove it here.
This is not a correct error message. You can check if the fee is not available.
Why not just use `apis.Condition` here?
Why not `memory.Allocator`?
Why is this `countQuery` being set?
(style) line over 80 characters
Why is this change necessary?
We can remove this function.
Style/SymbolArray: Use %i or %I for an array of symbols.
Is this line still needed?
`+ from.toPath()`, `toPathPath` and `toPath` are not supported in this case.
You could just do `if (shutdown) { ... }` instead of `if (wasDeleted) { ... }`.
I think this will fail in some cases. We want to be consistent with other places in the future.
This is a little hard to follow. I think the `return nil` is redundant here.
can you also update the tests in `sys/utils` to include this in the tests?
I think this should be `test-service`
I think this is a bug fix.
Why not just use `new_message`?
Do we need to set `c.externalippoolController.ValidateExternalIP` in `dump_CLI_validate_real_Enabled()` ?
I think we should just remove the `JsonIgnore` and `fixeddifficulty`.
I don't think we want this to be a TODO. It is a bit weird to have a TODO in the log message.
I think we should use `kbp_record` here
This is a little weird, why is the default implementation of `R`?
Why the change of these lines?
@kroitor since we are not doing any changes in this file, we should probably just remove the `opts.MaxControlLine` field and do a `private const c.mcl = MAX_CONTROL_LINE_SIZE` check below.
We should also change this to `javaToken.kind == JavaTokenKinds.INTEGER_LITERAL` to match the code below.
this import seems unused
@martint is this a regression or a fix for the issue ?
Is there a reason why this is not a list of files?
I'm not sure this is the right way to go. I think we should just leave this out since it's a constant.
I think we should check if the `&a` tag exists before calling `isNotBlank()`
@jcotela is this a bug or is it a bug?
I don't think this is the right place for this. The `Close()` method is called when `s.Shutdown()` is true.
This should be a warning. It's not a warning.
I'm not really sure about this. This is the only place where the `v2` flag is used, and it's the default, but I think we can do it for the `master` case.
This line is not necessary
Why is this method called `toCollector`?
I'm not sure this is the right way to go. The `v` check should be `const char *v = C structs *v;`
I think we should remove the `Buffer` component entirely. We don't have a similar component for the `chartType` field anymore.
Should this be setJsonParameters?
I think it's better to use `expect` instead of `chai` as its name.
I'm not sure if this should be an error. I don't think we should be calling this.ModifyStatus() in other places.
I'm not sure if we should use the default value here?
could we use v.iteritems here?
We can use `Map#http`.
Shouldn't this also be called `unlock` ?
Should we make the `spaceId` and `tagId` be part of the `getTags`?
you should add `import *` to this file
**nitpick (non-blocking):** This is a bit of a hack, but I think it would be better if we just have a single `if` statement that checks for the `_to_inputs` method and return an error. It would be easier to read if you'd just return the error message and then you'd get a `_to_status` method.
I think it's better to just use `PDataSource getDataSource` instead of `getDataSource`
this one still needs to be moved to the `LogWarning` package.
This change seems unrelated?
I think we should use `mergeOriginalRoleAndMetaRoleAttributes` here.
This will break the setting.
This is a pretty much time after the first time it's set to `0`.
This is the only real change I'm not sure what the best thing to do is. I think this should be `IsFatalError` instead.
this import is not needed
Should this be `HOUSE_` instead of `houseOwnedByAccount` ?
Why not use the `use` statement directly?
I think this should be a set instead of a set, since it's a set.
I'm not sure if we need this anymore.
I don't think this is correct.
This is a test file that is not used. It's not a good idea to test both tests.
Why is this needed?
This is not necessary because `_POSIX_C_SOURCE` is defined in `_POSIX_C_SOURCE 200809L`
I think the `overridePoint` should be changed to `locationString` here.
Is this intentional? It looks like it's only used once in the first place.
It seems we should use `r.Header.Get` instead of `Detected-Locale`
This is the only change that affects validSelection.
I think you can just do this.Header().Set(SwarmTagUidHeader, fmt.Sprint(tag.Uid)) since it's a part of the code base.
@deads2k i think we should use hydrateParamID here.
Is it possible for a snapshot to be run in a volume?
Shouldn't this be a DontListen instead?
Why is this part of the name change to `_`?
I think this is the right fix. It is also possible that min_length is 1 but the min_length is 1. The current code is a bit odd to have a default value that can't be a `length` and not a `length` but it seems like it should be a `length` check.
Is this change necessary ? I thought the cleanup was a bug ?
Should we make this an error or only when the error is actually logged?
Doesn't this work?
I think we should just add `@return { ... }` to the `string` object, since it's a `@return { ... }`.
I don't see a point of adding these new `journalPausedFromSignal` in the `configure` method. I'd rather see a new `configure` method in the `configure` method in this file.
This is not the correct error, but it's not the case anymore.
This should be `True` instead of `False`
This is not a part of the fix, right?
`drysafeIn` is not a `list`. Can't we just use `ChainFailsafeIn` here and remove the `rel="noopener noreferrer"`?
Shouldn't this be `wallet->receive_async(std::move(block), representative, node.network_params.ledger.gen2_amount, [response_a](std::shared_ptr<nano::block>_a)` ?
Is there any way to test the `isWP5.0` file? I don't think it's needed.
Can we use the `==` check here?
Shouldn't it be `i = Arrays.binarySearch(docs, * + 1, length, target)`?
Should we just use `@method`, since we're using `fullResult` in the code base?
Is it possible for a authentication to be reused?
I think we should be able to run `fs-extra` in `lib/config` and `lib/x` in `lib/config` instead.
you can use TRY_ATTACKING_SOMEONE
This was removed because it was already being used in the `import math`.
`typeof ref=='function", ref.current)`?
The same here, I think we can use the same logic as the other instances below
Could you test the string string for the string and use `expect(group).to eq([example1, example2])`
Can we add some more information about what this is about?
I don't see where this is used, is it?
I'm not sure about this change. It seems to me that `base` is not a `DataObjects` but `base.DataObjects` is a `DataObjects`.
These import changes need to be reverted, right?
this is not needed, you can just remove the `==`
I'm wondering if we should just have a `IRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRaa3a3e2e3e3c3e3e3c3c3c3e3c4b3e3e3e5e3c4e2c3b5;` here instead of the `IRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIRIR
Is this necessary? It seems that the process process can't be the same as the other modules, right? I'm not sure what this is doing, but I think it is a good idea to have it here.
I think we should change this to `1` since it's a new value for now, and we should change the value of the `id` value to something more specific.
missing space before the `}`
Why the rename?
It looks like this is only needed if the `isinstance` check is not needed.
Why `new Date()` instead of `==` ?
if we don't have any items in the database, we can remove these `feature`s
I think we can move these methods to `service/install/types.go`
This is the only change that is in the PR, and should be in the PR.
I'm not sure this is correct. The first commit is to make sure that `Source` is not a `KResource` parameter, but that is a `KResource` parameter.
I don't understand this. Why is this not just a `Dictionary`?
Use the new Ruby 1.9 hash syntax.<br>Use 2 (not 4) spaces for indenting an expression spanning multiple lines.
Why not load the config in `tools/tools/tools.go` ?
This is not true. It is already set by the caller.
I think we should add this to the base class too
Is this a breaking change?
I think we should be using `keybase time.Now()`, as it is the actual record.
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
Could you add it in the other PR?
nit: I would call it `PortRangeSize`
I'm curious why you needed the `@Restricted(NoExternalUse.class)` here.
This should be a single line string.
Can we have a more descriptive name for this?
can you also add this to the `IS_IS_ORDER_ID`?
@jackfrancis I think you should use `MakeStateDelta(& ...)` here.
Is this needed for every call to `scheduleIpHostResolving`?
Is there a reason for this instead of the `Serialize` method? I'm not sure it is worth it to make it a `Serialize` method.
Is it possible to use the class name? It's not a blocker for a class.
Can you explain why this change is needed? It is not related to the change.
I think we can just pass the `select` as `Optional` here and remove `columns`.
I don't think we need to expose the synonymBoostByPayload to a variable.
I think this was a typo.
The prefix should be the max number of secrets... I think. The prefix should be the max number of secrets... and the secret should not be the max number of secrets...
Please keep the original set of values for the secondary and the last one to ensure they are not set.
I don't think it's necessary to add this.
why do you need to add a return type?
Shouldn't this be in the testcase?
I think we need to make sure we're going to have these tests to fail.
Line is too long. [81/80]
Why is this test no longer relevant?
I think we need to test the exit code here, too.
This is a change in behaviour. The only place this is called `UuidMessages` is called.
remove unused imports
Can this be removed? It's already in the test suite.
I think it's better to move this function to the `TaskIAMRoleCredentials` class, and have it return a different `TaskIAMRoleCredentials` object that can be set in both places.
This is a no-op, so no need for this change.
`map` doesn't seem right here. Is it possible to test the actual content of the form and then test the actual content?
Please, update the docstring accordingly.
Could you move this to the `require_once __DIR__` block?
I think this is the right fix. It's a bug, it should be `null`
this is a bit weird, why not move to a separate file? I don't think it's used in the PR
This should be `<8bit>`, since it's an array, not a string.
I think you need a better way to do this, and add a new `x11_display` constant in `X11_BACKEND` that is used in `X11_display_path` to avoid the `#ifdef` check
I don't think this is the correct type. The `methodName` should be `instanceType`.
This field is not used, please remove.
there's no such file in the core, so this was removed
Why is this needed?
do we need this new function?
Why is this change necessary?
What about the timer itself?
If this is a `Long`, then this should be `false`, not `false`. (Also below.)
Msmq is not defined in Sulu disk
This is a little confusing, since it will be called `InvalidRequest` from `CreateSource` and `InvalidRequest` from `UserRequest` and `UserRequest` are not used in this PR. I would remove this and just use the same condition in the `CreateSource` and `InvalidRequest` as well in the `UserRequest` class.
I think we should just use the new location here.
This should be `UserStamp`.
This import should go before the other imports, and the other one below it.
This should be a relative import (see the other files).
Is this just for the sake of consistency?
Why did you change these lines?
I think it's not a good idea to add a method to the `org.apache.thrift.transport.TTransportException` check in the `failureDetection` method.
Is this something we should do with?
I don't understand the purpose of this change.
I don't know why this was added. I think the `errorPrefix` is not needed, it should just be a `successPrefix`
I think this should be `Interceptors Interceptors.Tracer`
Nit: I think this will be more clear if we used `Status` or `wrapError`.
@smarterclayton do we want to change the default value for the default value of the default value?
nit: this is the same logic as `timeout` in line 156.
@normanmaurer I think we should have a unit test where this was.
I think this should be removed
Is this import needed?
We can remove the Xunit.Abstractions if we are using the X conflicts
This should be `[ConditionalTheory(name)]` instead of `[ConditionalTheory(name)]`
Is it possible that 1kb does not contain a `map` here? I'm not sure if this is a good idea.
I don't understand why this change is required.
This needs to default to `form.h`.
This should be removed, it's already being used in the `api_base_url` file.
I think this line is too long.
This is not a valid value, but a simple `dict()` will be a no-op, so you can use `rule='debug'` here.
This needs to be moved into a different PR. The `EXECUTION_STOPPED` is a very generic name, so it can be used in the other PR.
nit: I would keep the imports consistent.
This is the same as `sentryAddrs`, and `database` should be removed.
Can we move this to line 159?
I think we can drop `./pantsd/`.
I think this should be a warning since it is a user-facing error.
This is a very minor thing, but I think it's better to move the constant into the `Particle` package.
Is this the right place for these changes? It looks like the old code is not doing anything, and it seems like the `scope->buffer` is still not being used.
The error message here is "6/3-6/4.1" but it's not "6/3-6/5.2"
I'm not sure if this is correct. It seems like it should always return the right date. What about `time::TimeConversion::unixSecondsToDateTime`?
can we call this `MarshalECPrivateKeyPrivateKey`? It's not clear to me what is happening here.
This is the main change. We should probably be consistent and use the existing type of `@` to make it clear that the type is the same.
You should use the new `KOTTI` interface to get the `KOTTI` from `x-D` and `x-D` to avoid the `x-D` in the `D` interface.
`log_world_is_open()` should not be needed here.
Is this change intentional?
why is this not needed anymore?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should this be handled by the `finest` class?
I think we should use `this.http://"`, not `this.getHost()`.
I'm not a fan of this import, can we just use `org.apache.commons.lang3.StringUtils`?
I would use a mock instead of `accountActor`.
I'm not sure why you changed this. The test is only passing the player and the currentRuntimeTicks.duration. Is this a problem?
@lisasy you should check for os_tls_offset((ushort)TLS_DCONTEXT_SLOT)) here as well.
This is a breaking change, and is not related to this PR
@danrot @wachterjohannes Isn't it better to use `$this->dateConverter->convertToDisplayDate()` here instead?
Can we make this a constant?
Here's a tuple where the parameters are `Union[float,int]` and it should be `(Union[float,int])`.
This is not the only change I see. The `fields.xml` is used for `osslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslslsl
this is a bit of an overkill...
(style) trailing whitespace
nit: update copyright year in header
why change this?
Not a big issue but I'm wondering why we would want to change `encoding.create_engine` to be the default. I'm not sure what the right answer is, but it's not.
I don't think we should do this. The `TestCase.assertEqual(object.intCol, 200)` can be removed.
Is this really necessary? The function signature is only used in the test code, and should not be called from this function.
Please revert this change.
Is this necessary?
Can you please add brackets to this conditional statement?
This should be in a try/catch block, right?
Should we use `ImmutableList` instead of `ImmutableList` here, since that's how we do it everywhere else in this PR?
This is not needed.
This should be removed, since it is now only used in one place, and not in the other places.
why do we need the txib.GetEncodedLength()?
Line is too long. [81/80]
Nit: We usually use `sigs.k8s.io/apimachinery/pkg/util/conditions`
I think you can just remove `fileClient` now that you are not using it anywhere.
I think you can remove the `:` now that you're using the `.
I think this is the only place where you can use `fpga_dma.h` here.
Please use the new one instead of using the new one.
Why is this defaulted on?
This is a bit of a hack, I think it's fine to leave it as is and it's not a big deal. But I think it would be better to move it to a separate PR.
I think you can remove the `list.size` here and the next one `list.shuffle`
So this is not a part of the change that makes me feel like it would be better if it was `&.bolt_executor` at this point.
You can remove this
nit: `numImagesToDeletePerCycleEnvVal` is more readable than `numImagesToDeletePerCycleEnvVal`
I don't think this should be a property. The `setting` should be used as a parameter.
Please add a `//` after `json:"owner_uid,omitempty"` to make it clear this is not an error.
I don't think we need to add the shutdown on the spanProcessor as a list, it can be a list.
Why not `next(self)`.
I think we should use `dba.createAzureple` instead
I'm not sure if we want to remove this.
I think we should add a new constant for this. It will be a little bit more readable if we had to add a name to the API and then pass it in the `type` value, which will be the same as before. We can add a new one for this.
(style) space prohibited before semicolon
This needs a test.
I think we should move this to the top of the file.
I think we can just remove the ` duraton` argument and keep the other `conda.actions.actions`
I think this is a bit of an overkill, but I'm not sure it's a good idea to change the text here.
Is there a test for this?
Should we keep the `Not Found` arg around?
I think this is a leftover. Can we get rid of it?
I'm not sure this is correct, but I don't think this is a good idea. It's a test file, so it's probably better to have it here.
Shouldn't this be `useQueryQueryMatches = false;` for consistency with the rest of these `if`s?
I think this needs a change in behaviour. It's not clear why we need to change the name of the test. It's a bit confusing to me.
I'm not sure if this is correct. It is used by the `content` package, but it's not really a good idea to have it here.
This was a bug, and it wasn't being used.
I think this should be moved to the top of the file.
Shouldn't this be done after the `sendKeys` call?
`checkExpr` is not a boolean, so you can remove it entirely.
is this really needed?
Can't we just change this to a `public`, and make it `final`?
I think it is better to move this logic inside `getPlugin` method, and move it in a `get` function in `setUp` method
I don't think we need to do this. I think the original `R` is a required argument.
Remove this blank line.
Is this a change in behavior, or should it be a separate commit?
Is this necessary?
I think we can remove `OperationGenerator` from this method and use it in `getParameter` instead.
why remove it?
Can you change this to use the `NewNewStatus()`?
@mattpap AFAIK, this test was not doing anything, so it was not doing anything, so I removed it.
The variable `array_search` is not used anywhere else in this file.
This is the same as the one above.
I think we can just say 'time_range' here and remove the `+ 5 days` parameter.
I think the only thing I'd like to do is this check for the new `else if` statement above.
This will be a breaking change, I'm not sure if it is a good idea to change this to something like "no_advertise"
you can also check that the given given given the list is not in the list
Is this necessary?
I'm not sure if we should be calling this method in a context instead of just the first time we expect.
This is a change from the tests to make this test fail.
I think we should remove `getRestFor(type)` from here.
I think we need to check the output of `containerMetadataEnabled` here, as we already have the output of `dataDirOnHost`
I think this can be removed as it is now not used anymore.
I don't think this should be called `recoverutil`.
Should we also change the name of the file?
I think it would be cleaner to just make `dict()` a local var.
I think this is a good idea to import `import` from `pkg/log`
Why do we need this change? The key generation is not the first one.
I think it's better to keep the old `mock` and `@2.0.0` as the last argument.
Can we use `this.options.cursor` here, instead of `options.cursor`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why is this in the `#if DEBUG`? Is it because the `#if DEBUG` is not a finalizer?
In other places we check `string.defaultValue` is null. Should we also check `props.value`?
The WordPress dependencies dependencies are not used anymore.
I think we should also remove this `loglog` and change the `loglog` to be `loglog`.
This will be removed.
Why are we returning `string` here?
I don't understand why we need to keep the old code, just not have to keep the old code.
I don't think this is correct. I'd prefer if we just call the `BeforeQuery` method instead of the `parentQuery` method.
This should be a constant, not an object. I would suggest to move it to `libopenstorage/lib` as the root.
This is a breaking change and will be removed in a future PR.
This was the bug that was causing the test failure.
Can you explain why this is necessary?
@jackfrancis this is an unrelated change, but I am not sure we need to make this change
This is a change that will break existing users.
I think it's better to move the `engine_create_dispatcher` header to the top of the file.
This test is not related to the issue. I would suggest to use `missing_count_with_no_docstring` instead
This is a bit odd - it is not a pattern we use in the `controller` class, but it seems a bit weird. I would suggest to keep this and just remove the `controller.stubs(:signed_in?).load(:signed_in?)` call below.
Please rename this to `AddonsExtraParams` and `AddonsExtraParams` to match the description of the issue.
I think this should be a `Expect(String.IsNotTo(HaveOccurred())`
Use the new Ruby 1.9 hash syntax.
What does `path to the kubectl binary` do exactly?
I think this is a leftover from debugging. Can you please remove it?
This is a little hard to read. If we're going to do a "failed to reconcile load balancer attachment" check, we can just do it once and then just do a "failed to reconcile load balancer attachment" check.
I don't think we should use a `propToCol` here, since we already have `change[1]` in the `getSelected()`.
This should be `--bfbs-builtin-attrs`, right?
Can you also change the type to `apimachinery` and add `metav1`? I'm not sure if we want to keep it.
Nit: This should have a return value, not a pointer.
I think we should also add this to `./pants lint`.
if ifaceName is "wireguard" but we are not doing it right now, we should just always check if the column is not empty
Can we make the default set to `true` instead of setting it to `true`?
@bartonjs, any reason why this is needed?
I think you want to remove `format` here.
This test is not needed.
Why do we need a different variable?
This seems like a very odd place for this.
I think this is a bug, as it's a user's perspective, not a user's perspective.
Is this change intentional?
I would use `log` instead of `logRuntimeException`.
This file is no longer used.
Why was this moved?
Is there a way to make this a generic generic, or do you think we can add a `[NotNullWhen(true)]`?
I think the original fix is to move to the new config class.
This should really be a `@param deletesToDelete files that will be replaced, cannot be null or empty.`
This is the main change that fixes the bug.
Please use `.withIcon(0)` to make the same work.
I think the original version of this should be a separate `err`
I'm not sure this change is needed. The `valueOf` call below will not work.
I think this can be just `return empty();`
This seems like it would be a good idea to use a different name for this. Maybe something like: `-revealing-network`?
Shouldn't the message be in the `Ray-eni-Attach.js`?
I think we should just remove this line and just remove the call to this method.
This is not a part of the fix, but the only thing I found is `Wrap` is in the `util` package.
I'm wondering why this is needed for `std::chrono::duration<double, std::milli> refit_leaves_time`?
This should be `strings.sigs.k8s.io/cluster-api/util/conditions`
Should we make this change for all the `const` statements?
Should this be `static const std::string`. It should be `std::string`.
Why do we need to do this?
We already have a `sdktrace` in the API, so I think we should just pass in the `java.lang.sdk` here.
Why was this removed?
I'd prefer a more descriptive name for this variable.
`strings` is not a list. It should be a list of `nil` (or `false`)
Line is too long. [93/80]
I think it would be good to have a `common.Release` method in the `if` statement instead of a new `err` here
I think this should be `blockListeners.*`?
Why is this readonly?
I think this is not correct. `fmt.Sprintf` should be `.Error()`
Is it possible to have a test that checks for this and `package pushsync` if the source code doesn't use it?
I'm not sure this should be here.
These changes are not needed anymore.
I think we need to do a similar change in `mount_settings.py` and `if mount_volumes != mount_settings.py`.
Please use `context.Context` instead of `joinNode`
Why not just make this a `const`?
I think this is not correct, `message = message.get('message', None)` should work.
I think we should use `Debugf` here
This is not a good idea, as the default is `false`
I'm not sure this will work, but I think the other options should be in the same namespace as the `-E` option.
Shouldn't these be removed?
This was the only thing that was used to make sure the default value was set to true when the value is set to true.
This was a leftover from the previous PR
I don't think you need the comma here
Is there any way that we can get rid of this?
Is this a debugging change? I don't see any changes in this PR.
I think this is not the right place to do this. This makes the code harder to read.
I don't think this is correct. The `toString()` function will return a string that is a string that we want to be able to use.
Why are the other `os` stuff necessary here?
Who calls `testDistributedAcrossMultipleThreadsSuccessfully` ?
Is there any way to make it more clear what this type is about? I'm wondering if it would be better to have a `key` type of error and then `key` return nil, or even `nil` in the `key` type?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
Nit: This is a very minor thing, but I'm not sure what the problem is with the other `-` files
This is not needed, the `if` should be removed.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
why do we need to check for the root?
Please revert this file.
This will need to be `bokeh.io`.
This was removed because the `.bin` is never used, right ?
I don't know if we need to log the interval, but I think we can do it in the logs
This test was failing because of the bug that the `scheduled_end_time` is still running on the test.
I think this should be `@setup_default.call` since it's only used by the `@SuppressWarnings("xxx")` method, not the `@setup_profiler` method.
I think we should remove this from here as well.
I think this is a no-op if the patch was found.
This is not right. This is a change in behavior. This was just an issue, but the changes below are not related to the bug.
I think this is a little strange. If you want to make sure it's a string, you can't just use `func FormatList(in []string, formatList(in))` here.
We could also just return `false` here.
Why change the `blocksFetched` variable to `ps.DoneOnCount`?
I think this import can be removed.
I don't think we need this file. It's already used in this class.
I think you want to remove `aria-header` and `ssl-light` keys here
@jridgewell This is a breaking change. It is not needed anymore.
I think we should add an `isinstance` check here.
This change is unrelated to the PR.
This is not a change from the default behavior, right?
I don't think we need to keep these anymore
This is not needed since you're not using it anywhere else.
This is not needed. `return [...]` will never be thrown.
Is this the same as the version of the version?
Should this be `var .empty() / .empty()` ?
This function doesn't return anything
This is a bit of a hack - I think we can move the `Dataset` class to a common place, and then just put it in `getResultList()`.
"and instance. On Python 3 these arguments are the default."
I think we should be more specific and say something like `The minimum data rate at which the response should be sent.`.
Is there a reason for this?
I'm not sure if we should use the same constant for these?
This is a change from `Chain                      policies` to `leader` so we can't do that.
This should use `with` instead of `GenericOptions`.
This should be `['file logging is disabled, can't retrieve logs']`, as it is not the only one we want.
This should be `m.conv_offset.weight.data.zero_()` (which is the default) instead of `conv_offset`
This is the only way to get this exception message.
Not sure if this should be removed
This should be `skips PDF` not `skips PDF`.
This should not be needed anymore.
Should we also be using the default network?
@jridgewell I'm not sure if this is correct.
This is a change in behavior. This is a change in behavior.
why the test name change?
I think we should keep this as is.
I don't think we need the response header here since it is not used anywhere else. We need to do that in a separate PR.
I would suggest `order_store(string)`, and `unique_store(int)` for consistency.
@mattpap @kroitor since you're here, can you please update the description to `time a node waits between mining successive blocks to arrive blocks`
I think this is a good change, but we may want to move this import up there too.
I'm not sure this change is necessary.
Please add "use-starting-sequence-number" and "then-all" flags to these "static const` constants.
Please fix the indentation of these lines.
This file doesn't need any change, or just some other ones.
Please don't do this. It should import `from ..core import unicode_literals`.
can you move the include to the new header?
We can't just use the logger.cs file here. It is not needed.
I would call this translator to make it more clear that it's a parameter and a parameter
I think it is not possible to have the `@Rule` annotation on the root of this class, and have the root `@Rule` annotation on the root and the root of the root.
This should probably be `raise unless MAILCHIMP_EMAIL_ERROR_CODES.include?(e.code)` instead
I would prefer if you want to set `options.headers` instead of `if`.
Could you add an example here that uses `const char *`?
I think this file could use more meaningful name
I'm not sure if we should change these to use the `shape` variable name.
I don't think we should change this file.
I think this should be a different check, it's not really needed
why not just change to `t been executed`?
I'm not sure if this should be here, if `chain.Converter` is an empty string, it will never be empty.
Nit: I think this should be `block %s does not exist`
I think we should change the name of the variable to something more generic, e.g. `buildDate` or something.
Is this a BC break? I think the `ErrConnectionCancelled` is still in the `ErrConnection.go` file, which is now removed by the PR.
I would move this check inside the `return $classes` block, and remove the `$classes` variable.
We can remove the `timeSrc` field.
I think it would be better to just use the constant here, like in the other places.
This is a change in behavior... but I think we should keep it for now. We can add a `private` property to the `fileCharacteristics`, and use it in other methods.
Here we have the view->cancel and the limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit limit
I think this should be in the `ReadStack` method
Shouldn't it be `persist` instead?
Please add a blank line between tags and summary for better readability.
I don't think it's a good idea to use this `certmanager.k8s.*.*` as the default.
Why are these `private` needed?
This is not a required field. The only reason we use this is that we can use the default value for the default, but we can use it for the `AbstractJavaRule` field.
@n3nash - you're missing the print here
Is this change intentional?
I'm not sure if this is the right fix. I'm not sure if this is the right place to do this, but if it was, it is still needed to be removed.
I'm curious why this is needed.
This should be `e.logManifest`, `e.logManifest` is not a valid path, so it should be removed.
I think this field should be moved to the base class.
This is not needed anymore
This is not needed, because the `AggressiveInlining` method already handles it
Isn't the `triggerCond` argument still needed?
Why this change?
This test is testing that the new `ProposeDeal` function is called.
Why not use `(timeoutMilliseconds) < 0` instead of just `(timeoutMilliseconds)` ?
I don't see why you can't do this.
This is a breaking change, and I'm not sure it is a good idea. It's better to have a static method that does the same thing.
Can we rename this to `serviceServiceAccount`?
> overwriting the value.  Append is incompatible with overwriting the value.  Append is incompatible with key instead of overwriting the value.
I think the original name was `cmdFlags, &check-streaming", "Wait after writing a file. + indeterminate file size.`
I think this is a good idea. If the `headingLength` variable is empty, then we don't need a `else if` check.
I think we can just remove this, it's not needed anymore.
I think this should be called on `onStartSendRequest`
In the case that we are doing this change, we still have to pass a `data.EncodeToString()` call to `record` in the `if act.GasPrice().String()` call, which will be called once we have `data.EncodeToString()` call.
I think this is a good idea. It is better to move it to the `EnumeratedPropertyDescriptor` class.
I think this should be `vk`
This is the only change that affects the `running` check.
I'd rather have this test name, it's not a big deal, but it's a bit confusing to have the same name as the previous one.
This should be `stats_dto`
Does this test actually run on Windows?
I think we need to add this to the `api.SdkAutoFSTrimUsage` and `api.SdkAutoFSTrimUsage` as well.
should this not be `/bin/agent`?
This was the bug that was fixed.
This is a change in behaviour. We need to make sure we are not doing anything with it.
I think this is wrong. The OSX file is the OSX directory in `ch_offline`. It's not the root of the OSX files.
I would have put the return value here.
Why is this needed?
We can remove the `workspace_scale` variable entirely.
Please use a different name for the flags.
Is it possible that the flag is not set by the `img_norm_cfg` value?
I think this is still not correct. The problem is that we have the "protobuf" transport.Encoding which we want to support for the "protobuf" transport.Encoding. The "protobuf" is not the "protobuf" transport.Encoding. The problem is that the transport format is not the name of this encoding.
We can use `is_parser` here instead.
I think this is not a good idea to do. I think this should also be a separate PR. But I don't have a good idea.
Why is the `?TranslatorFactory` removed? I'm not sure if it's worth it to just remove it.
Line is too long. [81/80]
You should use `is_env_true` instead.
I would suggest to use `Map<Integer, Pair<ExecutionReference, ExecutableFlow>>` instead. It's more consistent with what we do for `Map<ExecutionReference, ExecutableFlow>>` and the other methods in this class.
This is a very minor thing, but I think we should be able to just use `v.Watch()` instead of `Fatal`.
I don't think you need to change this, since you are using a static `Task`
Defaults to (16, 16) to (w, h). to (16, 16)
If we don't have any, we could use `first->commandBuffer` here
remove the empty line
This is a little confusing, as it is a `std::stringstream` and it is only used for the gpu list.
Block body expression is on the same line as the block start.
Code Standards: Please rename `$uploadsPath` to `$auth_url`.
I think this might not work, because if the itemmethod doesn't have a `name` field then it will never be `None`, right? I think it should be removed.
Is this necessary?
Why is the change here? It's a little hard to read.
I don't think this is the right place to put this. It's just a thought, and it's a bit odd. I'm not really familiar with this approach. I think we should just remove the `EnableDNS` argument from this interface.
Is this still necessary?
This is not right. The `if` condition should be in `RunHandler`. I'm not sure if we need to handle the case where we don't want to override it.
I'd like to see this in a separate PR
I think `Timestamp` should be an `else`
You should be able to use a different name here.
This is a good change. The `AWS IAM` variable name should be updated to reflect what it's supposed to do.
You don't need to import `StructLike`, since you're using `close()`, it's not really required to import `close()`.
This check is no longer necessary. The `IsPossibleDynamicType` method is only called in the `SwiftASTContext` class.
This file is not in master yet. It's not in master.
I'm not sure if we should be using `fbo.log.CDebugf` here.
I think we can just remove `volume`.
This was the only change that affects config.json and config.ServiceType. I'm wondering why we are not doing this.
What is the reason for this change?
This should be a module-level module.
I think it should be `--ignore-errors --enable-features=NetworkService`
Can we have a test for this that doesn't have a task?
This is not a valid name. What about `static HIPInternal &HIPInternal::singleton()`?
Can we have a test for this as well
Why is this here?
I think it's safe to remove these lines.
Is there an advantage to using `ZeroAddress` instead of `ZeroAddress` here?
I don't think this is the right change. Why do we have `value` and `TrimOrWhiteSpace`?
Is there a way to do this without needing to use the `GroupBy` parameter?
@bvaradar We should have some of these in the past...
We should be using the new one in the node. Connect and the provider identity instead of the new one.
Shouldn't we also check if the node is not nil?
nit: don't need a separate line
I'm wondering if we need to keep the old method, but I think this is a breaking change.
This test was not working. It doesn't seem to work with any of our docs. I think this test was just testing that we don't do that.
We need to add this field to `RemoteQueryTimeout` and `WithQueryTimeout`.
This seems like it would be a good place to put the `pip install` import in the `pip.pip` package.
I think we should be able to remove the error from `err` and just do `return err`.
I don't think this is a good idea, but we should try to make sure it is a backoff window within which we try to MD server.
Just curious: why do we not change `list_excludes` in the form of the settings file?
This is the wrong solution. The code is not really needed.
this is wrong. It is not a valid output.
I think we can just use the `return self.obj.WinwordWindowObject.ScrollIntoView(self._rangeObj, True)` here.
Why was this removed?
Do we still want to create a new one?
I think this was removed because the `go-bindata` was being removed.
Shouldn't we make the method package private?
Is this change intentional? I don't think it's necessary to change the `l` argument.
This is not really a good place to put this code in the `.empty?` file. I think it's better to move the `.user` inside the `if` block, and move the `.user` inside of the `.empty?` file and use that in the `.empty?` file instead of using the new `.user` variable.
This is a bit of an unrelated change, I think it would be better to change it to `@out_variant`.
Is this error still valid?
This should be split across multiple lines.
remove this line.
I'm not sure this is the correct default for the default value. The default value is "batch_size".
why is this needed?
This is the only change that fixes the issue.
I don't think we need the `preferred_name` check here. We can just remove it.
I don't think this check is necessary.
This include should go under the `try/finally` block
Please add `need_unmap` docstring to the help text
I think it's better to move it to `server` package.
Shouldn't we be using the `acquireTopologyCacheLock()`?
This is a change from `h Helper` to `h.Dispenser`?
Hmm, this seems a little weird. I'm not sure why the cast isn't necessary, but if it's a good thing. I think we should do it in a later PR.
This method is no longer needed, right?
This method should not have been called in the `@Nullable` annotation.
Why are we returning `List` here instead of `List`?
This is the main point of this PR. I think it should be `type === 'math_number'`.
I don't think we should remove the `AWS IAM` parameter.
I don't think this should be a `kwargs`?
This is not needed, it will be removed.
This change is not needed
I think we should import from `__future__` and `import paddle.version` here.
This is a breaking change.
This should be grouped with other packages (see above).
nit: this should be moved to `models/v`
this is a bug fix
Is it possible for a shorter assert that output_add is not null ?
Maybe use `form.attr` instead.
Should be `>0`
I'd rather have a `check_singleton_comparison` method that does the same thing, and then pass it in to the `_check_singleton_comparison` function.
This method was only used in the `AsyncIdentifier` method, which is now unused.
We can add a warning in the `width` here.
can you use the logger instead of the string?
I think we should add a `TryTry` here to avoid unnecessary conflicts.
I'd prefer to have this as a separate module for clarity, e.g. `from .models import BAN_PUBLIC_USERS`
I'm not sure if this method can return a close, since the reader may not have a close, and the other is also a close.
I'm pretty sure the new `accounts` argument is necessary here, but I think it's more clear that this was a copy-paste error.
I think we should check if `!this.storage.config.localList.get()` fails before calling `search(q)`?
I don't think this should be a `null`
Why not using the manifest with the other configurations as well ?
Should this be `(input.uninitialized: %s)`?
This is a bit weird. What about just `BAREMETAL`?
This is the only change that affects this PR. I think this is fine for now.
I think this is not needed, as it is only for the new `TipHeight` test.
I think you can remove this line
This is a bit of an overkill, but we can probably just put this inside the `if` statement above, since it's the same as the one below.
I think this is a better place to put it in a separate PR.
I'm not sure if we should add these to the interface, but I think that's a good thing. It's probably better than doing a `getInputType` in all places where the enum type is used, and then the enum type can be used as the enum type.
Rails/DynamicFindBy: Use find_each instead of dynamic find_each.
If we are not going to do this, do we need the `.strip` here?
Should we use `package_REGARG` here?
This will probably work if we have a circular import for that.
Line is too long. [97/80]
Should this be a `Uncaught`?
Why not use the `Strings.druid.segment` module here?
I think it would be better to use the log level of the log, instead of the debug level.
This should be grouped with the other go-routine imports.
I would use `!string_env && (strcmp(name, RESOURCES_CORES))` to avoid checking if the value is 1.
Should this be a constant?
I think you can use `mode.close()` instead of `mode.close()`
This is not a test, but the other test (in the `run_*` method) should be in a separate test.
We should be able to remove this method entirely if the MDOpsStandard is still being handled by the MDOpsStandard extension.
This is a breaking change.
This should be changed to `tests/api/util/byteutil` in the test file
This is the only change that works.
Why do we need this change? It looks like it is only used in one place.
I think we can just do `self.title()`. It is also a little bit of a hack.
this is the change to the behavior of the API. Is this intentional?
This is not needed.
Why did you remove this?
I'm not sure this is a good idea. It's a bit odd to have the `caddy_rewrite_original_uri` in the context key. I think that we should just have a default value for the `IS_rewrite` value. I think it would be more appropriate to just have a default value for the `IS_rewrite_original_uri` value.
I'm not sure if this was a bug.
@saghul, I think we should keep this and just add `VENDOR_COMMAND_PREFIX` to the end.
I don't think we need the emuGesture anymore.
I think we should not have a helper function that is used here.
The `info.version_` is still used in `src/java/util/util/util.html.erb`, so I removed it from the PR.
This is not needed.
Standards: Can you please add brackets to this conditional statement?
This is the only place where we can use `.href` in the code, but I think we should just remove `.href` here.
I'm not sure about the idea of the `LOG` here - if it's not required, then we can't just call `emplace_back` here.
This is a pretty big change, but I think we can remove the `_headers` prefix here and use `ConfigureAwait(false)` in the `StartSegmentAsync` method in `config.go` and `config.go`
Why is this method public?
I think we can get rid of the `service` and use `service` here
` Final_2010 NVDA` is a ` Final_2010`
Why did you move this into a new method?
This is the only place where we need to make sure we're not doing any other types of `Plugins`.
This should go before the other PR
This should be `@since`, right?
I think it would be more efficient if you could just do `return ret.options && ret.callback || ret.callback;`
nice! I was wondering about this being an email address, but it's not a blocker to me, I'm not a fan of it.
Do we have any ideas for these? Or should they be `-p`?
Is there any reason why we wouldn't always want to keep these?
Why not use `updateWrittenBy` here and below?
this is not right. why is this not `False`?
Please don't change this name. It is used in a different PR.
I think we should keep `models.py` here.
This name is not very descriptive. I would say something like `Specifies the first sentence, server_command = full_command`.
This is a bit of a hack, I think it's better to move it to a variable.
I think we can just delete this function.
Can you just delete this file, and remove all the changes in this file?
Not a fan of this, but I'm not sure why you're not using %.. It is a good thing to have, and it seems to be a good idea to use %. here.
This should be `fmt.Errorf("here it is: %s", actorIDAddr)`
Shouldn't this be `extdataplane` and `ksql-felix`?
is this the default?
I think it's better if we just set these values on the `GameData` instead of passing them through throughout the test. It's not a blocker and I'm not sure if it makes sense to have them as a list of `GameData` objects, as that would help preventing some users from using their own `GameData` objects.
I think this should be `el &&`
I think it should be `mysteriumnetwork`
I would just use `sensitive.value` here. The returned value will be wrapped by the `unwrap` data type.
This is a little hard to follow. I think it should be possible to use `encode('ascii')` instead. The latter is a bit more efficient, as you're just checking that the output of `__main__` is a single string.
Can you explain why this change is required?
should this be `shared_context` instead of `each`?
what is the motivation for this change?
Don't use the existing `[s3.ruby.s3_add_bucket_sses3_encryption_policy]` in this file.
Should this be `Http2` since we have the other `Http2_services`?
I think it would be good to have a test that checks that the new `--openbsd` flag is not set.
Can we use `float` instead of `float_prio_struct`?
I think we can just use transactionLastValidRound here.
This is not needed anymore, we have the `header.TransformerHeight` in a few places.
This is a duplicate of the existing one.
We should be able to get rid of this. The function returns a boolean and a new function that returns an `let` object.
this should also be a `else`
this import seems unnecessary
This function is used in two places.
This method should probably be moved to the base class.
I think we should add a docstring here. It's not really important, but it's not a big deal.
Why is this needed? It doesn't seem to be used anymore?
I don't think this is needed, you can use osrm::extractor::TurnInstruction.cpp
This should be removed.
Ah, so I hadn't noticed the same issue with the `mFolder` null check.
Line is too long. [83/80]
This will break the `app.config['TEAM_NAME'].lower()` call, right?
Should we add an extra call here to add this?
Can we make it a function and use it in the `EnableWithCustomFallbackEndpoints` function?
@bartonjs, any chance you could do something like this: `dvc path.dvc test data = 2, 2, 3, 3, 3, 3, 3`
This should be `start()`.
This is the only change that affects the API. I think the original version of `getRawDataSize` should be changed to `getFile` in the `getFile()`. I'm not sure if this is the right change.
This is the fix for `getClass` to return null for `other == null`.
This is the main change that fixes the issue.
This should be set by the `Logger` setting, right?
We can't change the signature of this method, but I think we can change it to something like 'label:user:" + con["label"]"]` and 'label=user:" + con["level"]`
We should add the new flag to the listing, so that it is not available on the listing.
What is the `clone()` here? I don't see it being used anywhere?
This is not the same as the `Count()` call above.
The `cparser.h` file has been removed in the docstrings.
It looks like the `webelem.Group.inputs` module is used for both `<input type="tel"` and `<input type="Write"` (and `<input type="Write"`) and the `hidden` module is used for both.
This is not a great idea. The `&&` should be enough.
This is going to be very useful for the future. I'd like to know the package name, but it's not really a good idea.
I think this is not a great change, but it's not a big deal, just want to double check.
Why is this necessary?
You can remove this line as well
Shouldn't we also add `address` and `cls` to this function and the one above?
This should be in `os.path.join()`
I don't know if we should return a `ObjectTypePiped` here. We should probably be checking the `FakeWebAPI` instead, but I'm not sure if we should return a `FakeWebAPI`.
Just curious why you changed the name of the param?
Why not just use the hardcoded string?
Could you also change the order in the tests?
This is a bit confusing, as it is a "Grating" and not a "Gant" of the "DB" and the "DB" in the name. Maybe we should add it in the name?
Is this a BC break?
I think we should add a `log.Infof("%s, Mapped network port %d, logPrefix, extPort)` to the log message and then just add the error message.
This is not the right place for this.
I think this can be `if subs != "" {`
Use the new Ruby 1.9 hash syntax.
I don't think we should add this to the docstring.
can we add a `before_tests` docstring here to make sure we don't have any unit tests for this
I think we should also add `errors` to the `aws-sdk-go` package.
I'm not a big fan of this import, but I'd like to see it in a separate PR, just a thought.
Is there an advantage of this change? If not, we can keep it in a different pull request.
I don't understand why we're removing this. The `err` is not a `nil`, so I think we need to check for it here.
I don't think it's worth it to just pass the `Matrix` as an argument to `InsightResultType_MATRIX` so we can get the `Matrix` as an argument.
This should probably be a warning, or at least a warning, so that if a user has not actually hit the user's configuration, they can't set it. I think that's the case, because the "summary" and "summary_count" would be a good place.
This is not a valid fix, but I would prefer to keep it as it was.
I don't think we need this. The other code that is used is in the `if` statement.
This is a good place to put it in the `LoadInt32` package.
`canList := utils.CanListChaos(c, ns)` ?
I don't think we can just remove this, since it's now the same as `_lastDomChild`
I don't think this is correct.
I'm not sure if this is a good idea. I'm not a fan of this. In other words, `CreateCounter` is a good name for it, but I'm not sure if that's the right name.
This seems like a bug in the original commit.
Is this needed?
Why not just call it `X` or `X`?
@mattpap this is the only place where the title is used. Is this correct? I'm not sure if the node matches matches the same, and it is not the case anymore.
I think this is a bit of a hack, but I think it is better to have a test for this
Can you revert the changes to this file?
I don't think this is needed.
This is a breaking change. The version version is not in-place.
this import should be above the group above
This should be in a separate PR.
I'm not sure this is the right fix. The problem is that the logic is to get "Retrying" from the "Retrying" command line. I don't see any use-case for this.
is this change intentional?
I think this is a bit of a hack. I'm going to be conservative with the `--version` flag.
This import seems to be unused.
Is it possible to have this as a `createLogConfig` method?
This is a very generic name, but it would be nice if it could be a separate JIRA to have it in the future.
Why does this change?
I think we need to add a `DisableEndpointHostPrefix` to the `interface.yml`, and we need to support both `interface.yml` and `interface.yml`, as well as `interface.yml` in the `interface.yml` and `interface.yml`.
this is not the right place to set it
Can we also add `again` to `new`?
Do we still need `import gui.contextHelp` here? I don't think it's needed, right?
Is this still needed?
What is this change doing?
Is it possible that we're not using the `EntityManagerInterface` class anymore?
This is a bit confusing, as the feature is not found in `MolChemicalFeature` and `MolChemicalFeature::getPos`
This should be in a separate PR.
I don't see a point in making this an enum, but I don't know how I feel about this.
I'm not a fan of the `transaction.getSender()` calls, but I think we can get a more specific error message here.
I think this was the only change that was needed for the `Stream` case.
Wouldn't `close(...)` do the same thing here?
I'm curious why you changed the type of "public" here, but it seems it's not the same as "public" above.
Why not just use `nameof(span)`? It's a bit odd that it's not a valid argument, but it's not.
@cramforce is this a bug fix?
This is a bug fix, we need to fix it in the `config.yml` file.
Why is this needed?
I don't think you should be using the `resource.StatusStatus` here.
This is a bit of an odd thing, as `node` is a bit of a generic name. It's a little hard to understand, but I think it's not a good idea to change this to something like `is_same_url` or something.
This command command does not match the existing snapshot.
I don't think we want this to be a breaking change. We need to be sure that we don't have to use it for the `time` package.
`win._handle` is not used anywhere else.
Is there any reason to do this change? I'm not sure if it is a bug or not, just wondering if this was a bug or not.
Can we use `EnablePulls` instead?
Isn't this the same as in the other places in this PR?
Probably should use `flash.now` instead of `flash.now` here.
This needs to be added to the `__construct()` method.
I don't think you should include the `arm64` as a global variable.
I think you can just do `queryRelation == QueryRelation.INTERSECTS` here and remove the query call below.
What is the reason for this change?
Why are you changing the `Errno` here?
I think this is not the right place for this config. The package is not set in the `configure_long` package.
Why is this necessary?
I think it's better to have an overload of the package for UVarint, and then just use the specific one.
This is a breaking change, but I don't see a reason for it.
Please add `<%= render partial: "org_admin/sections/section",` and `current_section.first }` to the tag tag.
this is not a test, right?
We should also mention that this will be called from a build-copy.
This is a little hard to read, but it is not a big deal for me, as I'm not sure how I feel about this... I think I'd be fine if you prefer to have a test for that.
Why removing the `@var` here?
Nit: I think this is not used in this package.
I think we can use a more descriptive name for this
I think we can just use `padding: 0` instead of `padding: 0`.
I don't think we can do this. I think we can remove the code that will throw an exception and just do the same thing.
I'm not sure this change is needed, if the `current_collection_id` check is removed from the if above, the `match_collection_id` check will be redundant.
This should probably be `-1`
this is a breaking change
This should be a lambda method
I think we should use a more specific name for this.
I think this method is not used anymore, and it will not be removed.
I think it is better to use `proto` here.
This is a change of behavior, but I think the error message should be "file_size".
Missing space after #.
I'm not sure if we should just remove the "System.Diagnostics.SuppressMessage("Microsoft.Naming", since it seems to be the same as `System.Diagnostics.SuppressMessage` but it is a bit confusing to me, I'm not sure what the best way to handle this.
The wlr_xwayland_server_create() call here is to get rid of the return. The `xwayland->server` check above is redundant.
In this file, we should also change the `crypto` prefix to `rand`.
this was the only change needed to be in this PR.
Wondering what's this for?
why does the match operators change? I think this is the same as the other ones.
I think we should be able to get rid of this file. It is already the case that transport_conf[:environment] was not in the transport.
This could be moved to the `JsonMappings` class. The `allowOptionalMappings` class is only used for the `JsonMappings` class, so I would suggest `allowCustomKeyValues` and `allowallowallowOptionalMappings` here.
out_channels (int,ocop='Leaky', negative_slope=1')
This should be `@Export("inventoryQuantityFormat")`
This is a breaking change, I don't think it's a good idea to have it in a different PR
This is not a correct change. This is the only change that is not needed.
Is this used anywhere?
This should be `git rev-parse HEAD 2>/dev/null` (which is the default)
This is a bit weird, why is this needed? I think it's a good idea to use `var` in the `var/var` package.
I'm not sure if we need this. The `get` call below is only for `set` and `setblur`.
Why are we using the `dumpEnvOutputOnFail` here?
I don't see where the `negLL` is set, but I would have preferred to use `FileNegLogLikelihood` here instead of `FileNegLogLikelihood`.
I don't think we want to put these on the fly. I'm not sure if it's worth doing.
Is this change intentional?
I'm not sure if this should be an `const WCHAR *fn`?
Can we just use `envName` here?
I would have added this method to the `SetAnnotations` method and it will be a breaking change.
This is the only place where we need to check for the `IdentifierScheme` value. It's a bit of an overkill to do it here. I think we should just do something like `instance_of?(IdentifierScheme)` and do the same in the other hand as well.
Shouldn't we keep the existing `break` case?
I think this is not needed. It's only used in the test suite, so I would not add it to the test.
This needs to be `+=`.
This is a good change. I'd rather not use the new functionality in this PR. It's not the case, but it's a big deal.
I would prefer to use the same state as the setProduct method.
I'd suggest to use `# noqa: Eliminate over all of these.
this could be a database callback
Why is this change needed?
nit: why not use `String.format`?
Shouldn't we also add the `CustomClientAuth Auth` tag in the `init` method?
This is the one line I'm not seeing.
Why did you remove this? I'm pretty sure you've removed the usage of this and it seems like it should be `isDebugEnabled(child)`
Who uses the `!rawErrorData.get(CLASS) == null`?
This is the only change I'm not sure about. The `InitAddress` here is the `Status` and not the `Status`. The `Status` is used to get the `Status` value.
I think this should be `win.handle && win.top.fxdriver`?
I don't think we need this. It's a very minor detail.
Why do we need this change?
Why is this change necessary?
I think this should stay `List`.
Why is this ` EngineRpcModule` public?
This is a very good thing to do, but I think it would be good to keep it in the `awserr` package.
Please revert the changes to this file.
I think it would be better to move the year into the `@abumusamq` file.
This is a little confusing, since you have the `Trim` function in the `io.prestosql.spi.Trim` function. I think it's more readable to use `io.prestosql.most.Trim` here.
Why was this removed?
This is not the right place for this. The log level should not be logged. I think the log level should be logged in the exception message, not the log level.
what if we just remove `self.code_immediate_expire_mock.start()`?
Why not use `Resolve` here, and `Resolve<IMvxViewsContainer>()` directly?
Why not rename to `namename`, `namenamename` and `namename`?
I think it is a little strange to return the action here, but if you want to return `None`, you can return `None` instead.
I think this can be removed, since we now use `logging-too-many-args.ApiExecutionError`
This is not used.
I'm not sure if this is a good way to make this a public method. I think it would be better to just have a method on the `import` and then just use `block_size` here.
I'd suggest to use a more descriptive name like `proc_set_num_simd_saved` or something like that.
this is not needed, you can remove it
Can you move this import down with the other stdlib imports? It's a bit of a bonus, but it's a bit of a bonus. It's also not really related to the rest of the code, so it's a separate issue.
In theory, we are not setting up the device on top of the article. What do you think about just adding the device on top of the article to the article?
I think this should be done by the `DeadlineExceeded` case as it is a bit weird that it's not in the context of the error.
Is there a reason we are not setting the value here instead of creating the chain?
I think this is a leftover
Why is this changed?
Nit: we usually use `error` instead of `error`
I think we need this change.
This is a bug fix. We should not do this in a separate PR, but I think we should do it in a separate PR.
"Compute service account" is the default service account. "build_service_account" is the name of the flag, not the name of the flag.
This change is not related to the issue.
I think we can remove the tabindex here.
is this really necessary? you can just check `np.image_from_array(numpyImage)`
I'm not sure if we want to do this. I think we should just make this `if s.Workflow, err = st.w.NewSubWorkflowFromFile(s.Path, s.Vars)`
Use `%d` only for strings that contain both `/` and `/`.
It seems that this can be removed.
I think we need to use a new variable for the new `include` parameter here.
Should this error be logged as `_ = st.Close()` ?
Can you explain why this is necessary? It seems like it is only used by this function in the file and not on the file.
shouldn't this be print_result(node, event[: type]
Why is this here? It seems to be more explicit.
Use `if` instead of `if`
This is not a change in behavior, so I would just change the file name to something like `Version-safety-group-group-group-group-group.py`.
This is a change of behavior, as `curSchemaSumary` is never null. It is a bit confusing to me that it's not a valid check.
Why not just pass `Run` to `nil` in here?
This is not needed.
This is the fix, I'm not sure if it makes sense to put it here
I think this is not the best choice for the user, but I think it's a little confusing to have a list of files.
This change is unrelated to the PR?
I don't think you need to do this, you can just pass the `explain` variable to the constructor.
I think this should have been changed to the copyright year
`s/path`/`s/path`/`s/path`/`s/`s/`
Why is this change needed?
Can you explain this please?
Metrics/CyclomaticComplexity: Cyclomatic complexity for the start of the hash is too high. [7/6]<br>Metrics/PerceivedComplexity: Perceived complexity for the hash is too high. [7/7]
I'm not a fan of this, but it's probably fine to just change it to `super(message, Throwable cause)`.
Should we log something here as well?
You don't need this. You can just use `getSettings(...)` for the propertyID as you do below.
Why is this not needed?
This is a bit of a mess. I think it's better to be a `logInfo` with a `logInfo` and use that instead.
I think we should add a migration to make sure the `links.deleted` is not set.
I'm not a big fan of "layers = []".
I'm not sure if it is a good idea to use a different name here, but I'm not sure what it is for. @kroitor But I guess it's not a good idea to use this function.
I'm wondering if we should log something here.
I don't like the idea of having a `1` here. I'm not sure how this works, but it seems to me like it's a good idea.
Just a note: why not use `log` here?
nit: `//` -> `//`.
This seems like something that should be removed.
Why did you change this?
Why is this class needed? I think it's only used in `TestAccAWSStoreStore` and it's used in other tests.
This is a bit weird, why not just do `if fb == (FolderBranch{}) {`?
I'm not sure why this is needed?
I'm wondering if we should just remove the `.ddev` variable here and just do `make check` in `/ddev//app.go`.
why is this removed?
this should be removed
Why do you need to set `auto *qa`?
I think this function is used only when `wlr_output_send_present()` is called.
This can be removed.
Why do you need this change?
This should be moved to the `c.nc` check.
This import is no longer used.
I think the `Context` and `s/` functions should also be moved to the `Client` package.
Is there a way to do this without a specific `Chromium-based browser` check? If not, we could just remove the `Chromium-based browser` part and just use the default value.
I'm not a big fan of the `fetch_str_equal` call, but I don't know why it's needed to have the `fetch_metrics` method in this case
This is a change in behavior, but I think it should be removed.
why is it changed?
Why not include this line in the `if (rce.h)` block?
I'm wondering if we should just have `if (version >= BKDWriter.VERSION_LOW_CARDINALITY_LEAVES) && IOException`, since it's a public API and not a API.
This should be `port==-1`.
Why not just use `std::vector<ROMOL_SPTR> res` here?
This should probably be a private function
This is not right, we need a test for that
I'm wondering if we should just use `InvertEvent` here.
This is the only change that affects the change.
I don't see how this is used.
I'm not sure if this is a good idea to change the version of the key. I'm assuming that it is just for the `id` key in the `AWSMachine` key?
I would prefer to use `__name__` as the default here and instead just use `.copy()`. That way the default is not a valid object and we won't be able to run it in a non-zero case
Is it possible to have a different config file? I don't see any other ones.
I'm not sure if it's possible to move this into `_set_load_finished`?
Why is this removed?
The `GET` was previously deprecated, so I removed it.
This is a no-op, but I'm not sure if it makes sense to have a test that checks for the node node
Can you please move this to the top of the file?
We should avoid this.
Shouldn't we use the `keyboard->keymap_size` here?
I think we should add a `ClientMaxSendMsgSize` as well.
I think this is not needed anymore?
I think you should use the `serve` type here, because the `line 1` is not a type.
This was not used anymore, right?
Why change these lines?
I'm not sure about this. I think it's worth adding a default for the `TextFormat` to get the default.
This is not used anymore.
why is this needed?
this should also be set in `src/apache/internal/internal/internal/internal/internal/internal/internal/internal/library_state.py`, right?
This import should be removed.
Was this a bug?
I'm not sure about this one. It's used in a bunch of places in `STDERR.stderr`, and the `create_create_non_above` functions that are only used by the `create_IDX` method, and the `create_IDX` method in `create_IDX` and `create_IDX`.
Is this a bug? If not then I would remove the `!projectScope.contains` and `!projectScope.contains(vf, sdk)`
This should be `MaxIPSetSize`.
This is the only change that works. This change was necessary because the `gulp dist --no-source` ones were not being used in `gulp dist --no-source` ones, which I think is the only one that's used for the `gulp dist --no-source.js` ones.
I think this would be better as `@Nullable`. The same is for the other similar methods.
why not use a map instead of a string?
`stream` is not necessary, as it is already used in the constructor
I think we should just call the `c.buildActions` function in the name of the function. We can just call the one in the name `command`.
This import should be removed.
I think it would be more readable to use a `getScopes()` method in the `private` block of the `if` block.
Let's call this `cniNet`.
I think you should remove this.
I don't see why this is needed, as we are only setting the class.
should this be removed?
this is not needed, we can remove it
Is there a reason to return `list()` instead of `format()`?
Is this needed?
why do we still need this function?
Please remove this annotation
Why not use a struct here?
This seems to have been deprecated, and I'm not sure why it was removed.
@smarterclayton do we need to check for otel.GetMeterProvider().Meter(name) here?
"A Partition represents" sounds weird, maybe "A Partition represents"?
why are these added?
This is a breaking change. The reason I have to remove it is because I have no idea how to use it.
This change seems unnecessary.
I'm not sure if this is correct or not. I think we should remove this. We are now going to remove the `forEach`.
I don't think you need this here.
This is the only way we have to use the runtime, we should use the default behavior. We should probably also add it in the build_version.go for now, but we should also add it in the build_version file for now.
I think this should also be `@RunWith(AndroidJUnit4.class)`
This should be `accessUserCtxKey.of(false)` instead, since the `UserCtxKey.of(false)` returns an `nil` value.
This is not a good change, as it is a hostname, and is not a hostname. I'd rather not have it here.
`std::string &null`?
Metrics/CyclomaticComplexity: Cyclomatic complexity for initialize is too high. [10/6]<br>Metrics/PerceivedComplexity: Perceived complexity for initialize is too high. [11/7]
I think this import is not needed
remove empty line
We can remove the `locked` variable and just use `get` directly.
I don't know if this is the best place to put this in the code, but if it's the case, it should be something like `add_meta` or something like that.
Style/Resubscription2: Use a guard clause instead of wrapping the code inside a conditional expression.<br>Style/SymbolProc: Pass &:ipv small helpers in a single space.
Is it really needed?
I think you should just remove the `null` parameter.
I think this should be `EnableJetStream(&cfg)`.
This is a test failure. It's not a big deal but it's a test failure.
Please add empty line above
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think this should be `CharUnaryOperator`.
Should we add a default value here, to make sure the user doesn't specify `custom_imports`.
the `!present?` should be `!present?`
Can we use the `getInput` method here instead? It's not a big deal but it's a little hard to understand what the method does.
This is not used. I would have put it in the `ImageConfig` struct.
why is this include removed?
Why is the change here?
This is a breaking change. It doesn't seem to be related to this PR, but it seems like this should be a separate PR.
This is the fix for the bug.
I don't think this is correct. It is a bit hard to see what the `ShutdownAsync` does.
Why this change? I don't think we should change the signature of this option.
I would use `log.Info` here.
We need to make a new function for this. I think we can add the `RunOfctlCmd` method that returns the value of `int32` and `int32` to get the value of the `int32` value.
Why do we need a new `addJs`?
Why was this removed?
This is a bit weird, I'm not sure we need the `homedir` package here.
This is the only change I see in #5023
This could be a `initStreams`, but it's not a `int` and it's a `int` type.
I would use `RuntimeError` here.
I don't think you need the `using` here.
Is there any reason for this change?
I think it would be cleaner to use Number.MAX_SAFE_INTEGER instead of Number.MAX_SAFE_INTEGER.
What is the thinking behind moving this to `impl.go`? It would be nice to have it in a constant.
why is this imported here?
I don't think we should be using this here, since it's a public API and will not be called by a `libkb.SealedEnvelope`
I'm not sure this is the best way to fix this, but I don't see a lot of side-effects places where we actually want to integrate hooks into core?
Why is this changed?
This is a very generic way of writing to the client. I'm not really sure if this is the right fix. I'd prefer to have the same logic as `H2O_VECTOR` and `H2O_VECTOR_fds` to have the same logic.
Shouldn't this be an `void close`?
nice, this is a bit of an overkill. Can we make the condition as a bool?
Can we change this to use a more descriptive name? What about `expect_to_should` or `expect_to_to_should_for_home`?
This one was causing the problem because the `-h` and now we're using `-line` to be invoked.
I think we need to check the `log()` method in `findByRegistrationId`
This is the fix. The `@group_level` is not the correct fix for the variable name. The `@group_finished` is the correct thing to do here. The `@group_level` is the only thing that's used to know if it's the most appropriate.
This is not correct.
This type doesn't seem to be used anymore.
I think this should be `private`. The `Queue` is only used in the `ReadOperation` and not in the `Queue`.
better to keep the imports, and add a new line at the top of the file
Please remove the year
Maybe `GET` is a more appropriate name? (i.e. `_GET`) Also, `_GET` is a bit confusing. How about `_GET_GET_GET_LOCK` ?
Should we add a check for null here?
Why not using the duplication?
Does this mean that when the user is deleted we're not going to use the default page?
I think we need to keep the message as is. The `Error` is not a `string`.
I think this is not used anywhere, and we want to remove it.
I think we can just pass the `IP` object directly into this object.
This is not a good idea. It should be `!empty($this->mainConfig->Record->preferredMarcField) && $this->fields['fullrecord']`
Hmm, I'm not sure if it's worth it to just import the `np` variable.
I think you can just remove this `apiv$1` now that it's not part of the PR.
This method should be marked `PathRootedPath`
I don't like the name of the variable. It's not used.
We need to keep this method in the same way as other classes.
I don't think the `testClusterDeploymentWithoutRegionLabel` is needed, we can just pass the `Default cluster` to `Default cluster` and pass it into the `Default cluster` to `Default cluster`
This is not related to this PR, but it was a separate issue to remove it from here
this is a change in behaviour. It is not related to the PR but it seems like we should be using the default here
I think you can put these on the same line as the last one on the previous line
I'm not sure about this change, it seems that the `blockData` and ` uidData` are not being passed as a string and the `_googlesitekitLegacyData` are not passed in.
Should we add some new code for this? I think we should be able to remove this from the `Config` module and use it in the `github.go` file.
This feels like something that should be a constant.
I would prefer to have this import at the top of the file and have it be renamed to `_get_package_registry`
Is there a reason for removing the default?
@deads2k i think this is the only one that's using this file that's using.js
We should probably also log the whole message here as well.
typo: vestigial -> vestigial
I think this is the wrong place for this assertion. It should be `strconv.upper_bound()`
Should we log the user here?
This is the only change that makes it clearer.
I would use relative imports as we use them everywhere
This should be `@since TODO`
I don't think we need this anymore
Can you please add the annotation here, and add a TODO to remove it?
I don't think we should set this to the new config.
This should be `protected`.
I think we could move this method to the `clientSecret` interface, since it's not only for testing purposes.
@becker33 I think we can use `depends_on` instead of `depends_on` here.
This is not a correct change. The current code is not correct, because it is the default.
This is a bit weird, we are setting the default in the `xbuild` and `vcr` fields. I think we should just use the default value here, instead of hardcoding the value of `x64`
I'm not sure why this is needed.
This is not needed, if `from .` is `from .` (and `Array`), it will be `Array.from .`
Should we just delete the metadata file and delete the file at the end? (same for the other classes)
@bparees I'm not sure if this is a good way to go, but I don't think it would be better to just set the value to `true` here.
Is this line break necessary? I don't see it being used in any specs.
Should we check if the name doesn't exist?
Is this change intentional?
Is this necessary?
This is a bit confusing, as it is now the type itself, but it is the same as the `pos` argument.
We can remove the `debug` log.
This isn't a valid path, so it's not necessary to add a default path.
This is the only change in this PR. The `loadLoginPage` was the one that was the only one that was not the default behavior. It seems like it should be the only one that was used. I'm pretty sure the change here should be the only thing that's needed to be there.
"to" -> "to"
This is not needed anymore.
Why are we removing this test case?
The only difference between `sizeHint` and `end` is that the format is the same as the `size` variable.
This is not related to the PR, but it seems to me it's not related to this PR.
This can also be simplified to: `The key for the property name.`
I don't think this is needed.
this change seems unnecessary.
Should we keep the list list as a constant?
This is a pretty trivial operation. I would suggest to move it to a separate function.
The `url_helpers` is not used anymore.
This should probably be a separate pull request, right?
This should be reverted.
Why did this change? The node_l->store.tx_begin_read () is no longer used, so we can remove the transaction.
Shouldn't this be removed from here?
Oh, I missed that you added a `print_index` function here, which is not a good idea. It's probably not worth the churn of having a `levs` list as it's a `levs`.
I think it would be better to name this `prime-maintain` and make it `user-maintain`, as it's a class name.
This should be `WebDriverException.scheduleIpHostResolving()`
I think this should be `user-endpoint` instead of `clef-signer`
Why is this needed?
This change is not related to this PR, but I think it's not a problem, but it's probably better to move this line up.
Extra empty line detected at body beginning.
You can remove this.
This is a bit confusing to me. I think it would be better to use `redhat_fips` instead.
Don't we need this anymore?
you don't need this anymore
I don't think this is needed, since it will be called in a single place, so I think it's better to keep it simple and just change the name of this function.
I'm not sure this method is used anywhere.
Why is "RetrySettings" not "RetrySettings"?
I think this can just be `globalSaver` since the `caver` is already the correct type.
please make sure to call `batch`
I'm not sure if this is the right fix for this. The `isAssignableFrom` call should be in the same `isisJIT()` method, which is not correct for the `isJIT()` call.
I don't think we should be using `CreateDispatcherForGRPCOutbound` in the code base.
We should not log the exception here. It should not be here.
Does this work? I'd rather have the same for the `from X.parse import X.parse as X.parse` below, but it's a bit more efficient.
It's better to do this in the `VisibilityTimestamp` function, and then do it in the `VersionHistory` function.
I think we should also remove this method from the `isNotified()` function, since it will always be `true`.
I'm wondering whether this should be an optional `LogManager.Flush` instead of an `LogManager.Flush`?
I think this is the wrong place for this. The default is `1` and the default `1` in `1.x.y` and `1.x.y`.
I think we can get rid of this `str` now. We don't need to pass a list here, as we do in the above `if not isinstance(vals, str)` below.
This is not correct. You're using `RemoveAll` in the test.
I think we should keep this and throw an exception in case the cast is not null.
Is this needed for the `getRequestType`?
I'm not sure this will work, but I don't think it's a good idea to have an `map` method that does the same thing. I'm guessing you're going to use `map` on it, so it's not really necessary.
I'm not sure if we should change the name of the `workspace.Workspace` to be a list. I'm not sure we want to keep it for now, but if it is, then I'm not sure it's a list.
I don't think this is the correct fix. We should be able to remove the `width` parameter.
I don't understand the purpose of these changes.
This should be `nil.exec(Command.new('sed -i s/5-55\\\/10/*/ /etc/cron.d/sysstat')`.
This should be a `bool` because `resume_from_failure` is a bool, and `typeof(typeof(typeof(typeof(typeof(secret_project))` is a list of exceptions, so it doesn't need to be passed in.
I'd prefer to have this import `grid_sampler` and `affine_grid_generator` at the top.
Should we also add the default value here as well?
I think we should import `functions` from pandas class and not use `torch.jit.annotations.functions`.
I think it's better to have the http.HeaderField be a `*` instead.
I think we need to add a `vol.destroy` here.
Is this the right place to do this?
I'm not sure if this is the correct place for this.
I don't think we should be using it in the future
I don't think this is the correct method to do this, since we have a `<`
I think we need to update the `Embedaries` field to `Embedaries`.
Why is this needed?
Why are we using this imports?
why is this needed?
I'm not sure if this is a good idea. If we can't return an empty topology, then we should return the topology.description
nit: I'd call it `isort` or something similar
This test is not related to your changes, but it seems like it could be a bug.
@lafriks, do we want to make this change in?
This is not a valid parameter, but it should be `@throws \InvalidArgumentException When entity is an invalid object`.
This will need to be updated as well
I think we can get rid of the `error` check here
`_` is not used in the test class, can you remove it?
Shouldn't this also be `won_Gson_COMMANDS`?
I think we should not have a test for this.
This is not a good example of how it works.
Metrics/LineLength: Line is too long. [83/80]
I think you should remove the second parameter from the previous line.
Can we move this to a new function?
I think we need a test for this too
We should probably use `LOG.finest` instead of `LOG.finest`
I think this can be removed now since the method is only called once in the method, and there are no other places where it is being called.
This is a breaking change. We're using a `Match` function in all the `user.Flow`, which is not the best place for the `user.Flow`.
This is a breaking change. I'm not sure if it's possible to get a `XDPEnabled` value if the `xdpState` is `nil`. If the `XDPEnabled` is `nil`, then the `XDPState` will not be `nil` and therefore we should be able to get rid of that check.
I don't think it makes sense for this to be a public interface. I would prefer to have an interface that is not a public interface.
I think this should be `request` instead of `string`, as the default value will be `""`, so that it can be `null` if not.
Not sure why we have to change this, but it seems to work with the old behavior.
I think this should be `Preconditions.checkArgument(configProto.getTemplatesCount() == 1)`
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [86/80]
Is there a way to do this without having to check the environment variable? I don't think it is a good idea to have it.
Should we just call `rcleanup` here instead of `MyGame.Example.MonsterStorage/Store`?
Is there any reason to do this change?
This was changed in #934, but it was here for a while.
This is a bit confusing, since we have a `@Deprecated` annotation in the constructor.
Why is this `QItemSelection`?
`onFinished()` is called from `set_code` in `BaseProcessor` and it should be safe to call it inside `auto&` since it is not needed anymore.
This is not a good idea. I think we should just make it `jsx` instead of `js`.
I think we should use `ec.User.getValue.address` here
Why is it necessary to change the constructor parameter?
why not `OpenSink`?
do we want to use a more specific name here?
is this a BC break?
I missed that one?
Why not `str->label_cb` ?
`Copyright information:"` might not be needed here, since you're using `@public_plan`
Why was this added?
Why did you change this?
This is not used in this PR.
Do we need to make it a default?
This should be close to the `close` method.
Can this be done with an enum value?
Would it be better if we made this `declare(strict_types=1);` and `declare(..)`, and then remove the extra `@Deprecated`?
Please don't use `./pants lint` imports
I think this needs a test for the new test.
This is a bit weird. Is it something we need to do with?
This is the only place where I was seeing it being used, so I removed it.
The `For` is now unused.
Why is this needed?
I think it is not necessary to add these in `pkg/errors/storage/types.js` and `pkg/errors/storage/types.js`. The `types` should be used in all cases.
I'm not sure this is correct. The value `index` is a string, and it's a string.
This was the bug I had before, I had to make a PR to make a PR to fix the issue.
Why the change to `string $value` ?
I think you can remove this check.
Should we just return the result of the function and return the result of the function in the constructor? I'm wondering if it should be possible to just have the function return the right value. I think it's better to just do the result of the function in the constructor.
I'm not a big fan of "handled" in this case, but I think it's better to keep this as a parameter. It would be more readable if you could use a `@Nullable` that takes a `Optional`, and then pass a `Optional`.
`&subreq->buf[i].fill_cb` is a better name. I think it is more clear what it is doing and why.
This was a bug in #5299, so it was not related to the PR.
This can be removed.
I don't think we should change this here. The code below is not really needed, and we can just remove it.
I'm not sure this is the best way to do it. I'm just not sure what the `hot.isRtl()` function is doing.
I don't like the idea of this. I think we should use `git checkout.IsDir()` instead.
I don't think this belongs in `BaseElement.go`
I don't understand why this change was here. It's a problem that we're removing the `config.s3 = None` line from the `config.s3 = None` line above and we don't have to keep it.
`(id=id)`, please remove `(id=id)`.
This is not a good idea to me. If we are going to add the current client to the client, it might be a little cleaner to have it return -10.
Why not use the `_time` variable?
Should this be a `SetApptypeSettingsPaths()` function?
This is a pretty generic way to handle the path, but I think it is better to have it in the `resolve_package_registry`.
Is it possible to use the `imports` interface?
Please use the same constant in `R1716`
This seems unrelated?
We can't just do `LOG.finest(...)` here. I'm assuming this is only for testing purposes.
I think this change is not related to the fix. It should be changed to use a `host` constant.
Why do we need to add the error message here?
This will not work. You can use `ret == 0` to check for the error.
This should be `dest='poppler'` for consistency with other test cases.
this is a breaking change.
I think the previous implementation was better, but I'm pretty sure this change is not related.
I think you can just remove this method altogether
why do we need the error here?
We should be able to remove this log line.
we can remove the logger now
This is not really correct. `value` is a property of the `hashCode()` method.
Do we need this change, or can the `paginated` be changed to `update`?
I think we can remove this line
I think it is a good idea to use `child_action` for these two.
You don't need to use `fmt.Sprintf("ssh")` here since you're using the default
This is the one I have in theory about the link. I think it should be `role="collection"` instead.
Why remove the `page.render()` call here?
This should be `planner.pseudo_sampler`.
Nit: remove newline between `github.com` and the closing brace.
What does this change do? I don't see it used anywhere
I think this is the only change needed here.
I think this is the only place where we are using `*rum.t` for the new `aa`.
I'm not sure if this is the right fix. The `dialects` is used for the postgres package and we are not doing that anymore.
Is it worth it if it was a bug in master?
Should we make a `push_back` call here?
This should be `volume_mounts`.
I think we can get rid of this check. I don't think we should be doing this.
This is a good change. It's not a good thing to do here, but it is a good idea to move this check inside the `isRay()` check, and check the `node` in the `if` statement.
I think this import is not needed.
I think it would be cleaner to use the `isWorkflowConditionFailedError` check in `query_DESCRIPTOR` rather than `query_DESCRIPTOR` since it is a user-facing error handling.
Does this mean we can't change this in the PR?
What if there's no such check in `MPICUDABackend`?
I'd prefer if this is a separate function.
I don't think we should have this check here.
I think you should just remove the NotEnoughBalanceFilter here and add a new one.
I don't think we should add the type here. The list is not only valid in the `groupPermissionMap`, so it should be `null`
Why is this change necessary? I don't see any changes below that are just for this PR.
This is the only change in this file.
Metrics/LineLength: Line is too long. [97/80]
This is not the right fix. The `toString()` method is called by a "setInstances, AppId=true", and the `toString()` method is called by the client. The `toString()` method does not have to be executed twice.
Is this a bugfix?
I would use the `key` here
i'm wondering if we should do `args.CPULimit` in this case, since we don't want to have a default value for the user. Would it be worth it for the default case?
Is there any reason to log this? I think we should log it.
Is this a `idx`?
You're using the "2019tNV Access Limited" here.
I think you can remove this `+`
nit: I would prefer if you can use `!isWeakMap()` to be safe.
Is this a bug fix? I think the old test was failing because of this change.
I think we can skip `close` and just use `close(exitableDirectoryReader)`.
Space inside { missing.<br>Space inside } missing.
Is it worth having a new property that makes sense to have this property return a new one?
we should catch `IOException` instead of `Throwable` here
This will not work for me, because we have a `List` that we don't have to pass `inputs=[self` to the `add_baba` function.
I think it would be better to keep these as separate parameter for now. It's not clear why it's here.
I don't think you want to do this.
Can you check if this is necessary?
I don't think we need this line.
Why do we need this?
Is the "health" part of the name "qid_health" here correct? I don't see why it would be better.
This is a bit of a weird pattern. I'm not sure if it makes sense.
This interface seems to be unused and can be removed
`is not`
I don't think you need this line here.
I think it's better to remove the `&&` and `&&` here, as they're in the same file, and they should be in the same file as the other `&` files.
This is not needed. It will always be the case when the feature is not enabled.
I think this is a little hard to read. I'd like to avoid the `==` since it's not a supported type.
can we make this a `limit_listen[0].latest_listen) > 0`?
Why was this added?
Why the change here?
@bparees I'm curious why this was changed to `libreg Landrum`?
Could you add the copyright here as well?
I think this is a breaking change. It should be `DST cross 4.0`
Why do you add the default value here, and then set it to the default value if it is `nil`?
I don't think we should use this. We use the `node-mongodb` package. We should probably add a `node-import` to the top of the file.
This is not needed. The `final` is already set in `src/java/org/apache/tuweni/install/install.xml`
This is the only change that works.
This test is not really needed. It is not used anymore.
Please remove this line and add the return on the `error` call.
This is a little weird, I think it's fine, but just wanted to make sure I understand this correctly, because the `[DisallowNull]` is not a valid argument, and it's a `[DisallowNull]` is the only thing that's used to return a value, but I'm wondering if it's worth it to make the change to the `[DisallowNull]` instead.
Shouldn't we just call this "contains"?
Why not make this a `// TODO: Investigate why this call ...`?
Wouldn't it be better to have a parameter `baseFeePerGas` and then just use the parameter `in UInt256? baseFeePerGas = null` ?
I don't think this is the correct way to do this. I don't see any new APIs in the code that is being used in this PR.
should we rename this to "conf" ?
I don't think this is the right place to do it.
This is not necessary, as `build_page` will only show the `options` if `page_ranges` is not present. I think you want to remove `print_page` here.
Why is this change necessary?
I don't think this is the best place to put this check.
I think this is a little confusing, since we are using the `<%=` variable in the `handle_in?` method. Maybe it's worth adding an option to make sure we're not using it?
So this will be called multiple times?
This is not a great idea, but I don't think it's worth it to just use the `KeyRegistrationTxEncode` here, so we have to pass the type as an error.
I think it is better to move these lines to `return`, and keep the `return` statement at the end of the function.
Does this need to be public?
I think we can keep this as it was. We need to update it in a followup.
This function is not used anymore.
I think we should just make this `extension_condition` since we are already setting it in `fields_desc`.
I don't think the seed should be removed.
Is it necessary to set this to false by default? If not, you should be able to use it in `#ifdef CLIENT_INTERFACE` and `#ifdef CLIENT_INTERFACE` instead.
Is this the only place where the accession number is used?
Please use individual imports.
Is this used?
Can you move that package to the top of the file?
`Pass_in?` and `Pass_in_analytics` are the same as the one in `Pass_in?`
I don't think it is a good idea to have a `gPeers` prefix here. The `gPeers` prefix is a bit confusing. I think we should just add a `gPeers` prefix to the `gwarm` and have it return the `gFromConfig` interface.
Why not `md#autoRowSize`?
This is not needed.
@smarterclayton do you have any idea how to change the name of the parameter?
Line is too long. [97/80]
I don't think this is the correct way to do this - I think it should just be a `bool`, since the `Unref` instance is always `None`.
I don't think we should use `_w3c` for this.
This is a bit confusing, as it will always have a NotImplementedError object, and it will raise an exception, right?
The `GET` parameter is now unused, so you can use it instead.
You can remove this, since it's now no longer needed anymore.
Nit: you can get rid of the `else` here, since you can just use `return`
I think this should be `include_type_environment` instead of `person` right?
I think it's better to use a `SetChainID` instead. That way we can avoid using `SetChainID` as the `chainID` is the same.
I think this should be `logger.error("Unable to get flow trigger by job key {}", jobKey, ex);`
I think we should remove this and use `0.6.1` everywhere.
Shouldn't this be a `Preconditions.checkArgument(splitSize > 0, ...)`? Otherwise the method doesn't get called.
this will throw an NPE when `null` is not null, so we should throw an error here, otherwise we will log the error.
Align the elements of a hash literal if they span more than one line.
I think we can do this in `panic()` and do the same for the `sigBits`.
nit, can you use ` OrderedDict` instead of `import`?
Why are you doing this?
I think this import is unused.
@liggitt this is the fix.
This is a no-op, so I removed this.
This should be done with the new config class.
Please remove `InternetGatewayID` from the config and use `string.emptyMap()`.
This method is not used in the code, right?
I think we need to use `debug` in the log message.
I'm not sure about the two changes. I don't know how to fix these.
I think we should be consistent and use `IcebergType` in the `DynamoViewModel` interface.
Is it needed for `storage.Writer` to be nil?
This test is failing because `analytics_done` doesn't have the same `analytics_done` attribute. I think this test should still be removed, and `analytics_done` is already in `analytics_done`.
This should be a non-null pointer. The null check can be null, so we should have a null check.
`record` is a really generic name, can it be `Iterable`?
I think we should be able to remove this, as it's only used by the server side and not the server side.
This is not needed.
This was the only change that affects the original implementation of `pid` to `response`. It looks like `pid` was only used for `d.pid` and `d.pid` (which is the case for `list()`). I think it's better to keep the `pid` as a `try-with-resources` and `try-with-resources` as it was before and add another `try-with-resources` to the `d.pid` as it was before.
I don't think we should do it in this PR, but it seems like we should just do it in the `if (this.opts.params) {` block below.
I think we can remove this code.
I think this is the only place where we have the metadata.
This change is not correct. The `. ':-` is a string, not an integer.
should we remove marionette from the class?
Can we use chain instead?
Why not just add the `as` here?
I think we can just make it public.
This seems to be a bug, as the `get => 1` will be 0.
@jhipster/developers why this change?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at block body beginning.
you should also add `initializer` and `@Nullable` to the interface.
This is a very minor thing, but I think it's better to move the file into a common package.
Please use a consistent description.
Is it possible to use the `eniLock` instead of the `uncomm` here?
why is this changed?
I think it's not necessary to do this.
I think we don't need to import `fetch-mock` anymore, right?
I'm pretty sure the `ExpectData` and `EndStreamReceived` methods are not actually needed anymore?
NIT: `[~!]?` and `[~!]?` should be on the same line as the last argument, and then you should remove the `[~!]?` parameter.
Can we have `/testSchema` in the test schema too?
Just a thought, would it make sense to use `klog.V(4)` here instead of the `V`?
I'm not sure about this - I think the `_website_optimizer` is used for the new `visual_website_optimizer` table.
This variable name is misleading, it's already in `api.go`
I think this should be moved to the lower level, not after the openshift/deprecated is created.
I don't think we want this to be the actual change. The `already` option should be moved to a `const` block.
I think this should be `EdgeNodeRoleLabelKey = "node-role.kubernetes.io/edge"`
hmm, I don't think this is a good idea. I think it should be a separate PR, but I'm pretty sure it's a good idea to change this.
What does this change mean? Is it a case where you want to be aware of?
I would suggest to use an enum with a new one instead of an enum.
What's the purpose of this change?
I don't think this is correct, since it is only used once in the base class, and it's probably not a problem.
This is a bit of a nitpick, but I'm not sure we need to do something about the command here. We can't do it in a single file because we don't have to. We can do something like `spack info --keyserver keys.gnupg.net %s` and `.net`
This is not a bug fix
Why the change here? The test is failing because of that.
I think you can just remove `@config[:concurrency]` now that you have `@return = nil` now.
Use `self.sum() / avg_factor`.
I think we should remove the `ilt` from the list here and just use the `stride` argument here, and then remove the `stride` argument in `fine_g`
We can remove the `$balance` variable and use `$key][` directly here.
Why is this change needed?
Maybe we can make this a warning, instead of a warning, and just say "This is a warning, not a warning"
I think it would be better to use the `context.event_id` variable in the code instead of using the `if (is_in_checked())` inside the for loop.
I think this should be renamed to reflect that the new name is not the same.
I think it is still not needed anymore?
I think we can just use the constant here and check if `self.strip()` is not an enum.
Shouldn't this be `B`?
I'm not sure about this. It seems to me that we can't change the state here, because it is not in `waitForThumbnailsBeforeUpload`. I think it's more of a "lazy" and the `waitForThumbnailsBeforeUpload` is the correct term. What about `this.opts = { ... ... }`?
Is it possible that we have an enum constant for the feature?
I think this was the only place where we were not doing the check.
This was a bug, but I think it's better to keep a list of supported values.
I think it would be more clear if we just return `false` here.
Please add a note to track how this is used.
Can we have this in the default package?
I'm not sure if it's necessary to add a default value to `list`, if it's used for `list<array, 'array', 'size'=...` (and if it's not present in the code, it's better to use `list<array, 'size'=`).
I don't think this change should be in the `@Deprecated` package
I would use `pattern.append("")` here, and instead do `pattern.append("(\\.exe)?");` in the `pattern.append("(\\.-exe)?"`
I'm not sure we need this. The `cgroupPath` is a string that is not a string, so I think this will be a no-op for every other subsystem. The `cgroupPath` function is only used for the cache and not the user.
Use the new Ruby 1.9 hash syntax.
I think it would be more clear to have the `isInt` argument passed in.
I think we can remove the `campaignSource` prefix from this file.
Should we make this configurable? It seems like we should be consistent and use the same version for the same version.
Can we make this a `static const`?
Is there a reason to use a `crash.log` here instead of the `error` field?
This is not the only place where we can't just use a `Reliability` parameter.
nit: you can use `pdf_count(pdf, self.to_clipboard, args)`.
This is a bit confusing, as it is the only place this method is called, and the `user` is the same as `deliver_later` above. I think it would be better to do this in a `sign_in_user` method.
I think you can just remove the `if` statement.
Is this a "NONE" error?
Why is this needed?
I think we need to add the `GetEx` to the `Put` below.
Why do you want to change this?
This is a duplicate of the existing `if` statement. I would prefer to have the same logic in `user.proposal`.
I think you want to use `.valid(1)` instead of `.includes`.
This needs to be added to the `ATOMIC_PTRSZ_ALIGNED_WRITE` method.
Why change this?
I'm not sure if this is correct. If I don't want to do this, I'd suggest `freopen` always return an error.
I think we need a test for this
Is this still a bug?
why is this needed?
I think this is a little too vague. Maybe we can move it into a `OpenSSL::Random.random_bytes` method and just do `win_platform?`?
This should be `set_format(self, pkgformat):`
I think this can also remain `List`
You should be able to use a more specific name, e.g. `003-1`. Also, `003-1` should be used as a more specific name.
I think we can just remove this, we can remove the `@Nullable` part
This is a breaking change.
I don't think it's a good idea to use this method in the `Must` method, so we don't need a new `NewAPI` function.
Just curious, why is this change needed?
Why change this?
Why are we passing a struct here?
I think this is the only place where `FLAGS_data_path.empty()` is called. I think the `FLAGS_data_path.empty()` check should be done in `LOG(INFO)` and the call site is to avoid calling `FLAGS_data_path.empty()`.
`handle` is a string. I don't think it's the best idea.
I think the `m` should be in the `if` statement, right?
I don't think it's necessary to add this to the `vendor` list.
It looks like this logic is not related to the fix, and should not be here.
I'm not sure this is the correct word here. The first part of the type should be `str`, not `*`, not `*`.
Why do we need to set this here?
I'm not sure if this should be a `!` instead of a `!`
I think this is not the right place for this, since the `nilkeys` is not a nil-error (which is what the `Key` variable is doing). I'd suggest to move it to the `if` block.
Nit: Can we have a method `Function` that returns a `String` instead of `T`?
Why do we need this change? It seems to me like we're using the `SkipImport` in the `config` section.
I don't think we need a module that just calls this function. I would prefer to not call this function in the test.
Nit: `SetBytesAction DeltaAction` is now unused.
nit: maybe worth checking the content of the `/help` spec?
This is the only place where we need to keep the `approximation`
I think we should remove this method and just call the new method in this class.
Can this be `static` instead of `addOutputImports`?
I think the `U General_name: ARG` needs to be added to the end of the list.
Can we rename this to `ServiceAccount`?
Why do we need to set the set of keys here, instead of having the flag set in the loop above?
This file is still used in `appModules/explorer/load_load`
I'm not sure this is the best place to put this. There is already a new function in `t.mutex.Lock()`
Can you add a new NetworkMessage() check here?
This was a bug. `.AddConsoleExporter()` will return ` Aggregation.Drop`.
This is the only change needed in the new version of the test, but the new version is `npm conf`
This test should be testing the `<foo.com>` tag, and should not be part of your change.
This is not a good idea. The only place this is called is in the `TestWithErr`.
I would prefer to see this as `1.05` rather than the actual `title` value. It would also be easier to see if it was a `&&` or `*`
In other classes we use a `gasLimit` type, we should also check if it's a `gas.from`
Can we make the hash match the hash instead of the hash?
I think this is a little too late to make, since the default value is a string and the user can't change the default value.
shouldn't this be public ?
I'm not sure this is needed, since the `attr_writer` is already in the base class
What if the itemType is not provided?
I think you need to update the `before_save` method too
I think we can just do `yield errorStoreActions.receiveError( error, 'getURLChannels', [ accountID, clientID ] );`
Nit: I think this import is unused.
This is a very generic method. I'd rather we pass a `cancel` object to it.
I'm not sure if we should use the default here. I think it would be more robust to have it in the `before_save` section, as we do in the `acme.java` file.
why is a string required here ? it is a string and will be used as a string as a string as we have a number of different types
Should this be `\\b(?:(?:[0]?\\d|2[0-3]`?
Why was this removed?
just realized that this is a test case I don't think we want to test the new `name` test case, so I'd be fine with the new `name` test but I'm not sure if it is worth it.
Should we just return an error here?
Is this the right error?
I don't think we need to add these new fields in the model, since they're only used in the model.
I think it's better to have a separate config file for the new config file.
I'm not sure why we should use the warning message here. I think it's better to use a constant that is used for 2.0, and we can use it for 1.0
I think it's still a good idea to use a `const BlockMessageLimit = int` here, but we don't need it for everyone.
nit: `completeArgs` and `cur` could be `null`.
I don't see where the variable does the `IsOSPlatform` and `IsOSPlatform` are used. It seems like this is the only change that is used in this file.
I think we should be able to use `withOffsetSameInstant(ZoneOffset.UTC).toLocalDateTime()` here.
If we're not going to use this value, can we just use `it's` ?
Why is the local variable removed?
@juanvallejo fyi, I'm not sure if this is the right change to be to remove this.
why this change? I don't see a reason to change this
should we add a validation to verify the server is being started?
should we also update the `__init__.py` file to include the "preact-KEY" in the `config_test.js` file?
This is a little confusing. If you are going to do a `<=` then you can just call the `local_OBJECT_COMMENT_TEXT` function in the `were` function.
I think we should add the word "is" here to make it more explicit.
I'm not really sure this is correct. It is used by the `AudioBitDepth` class, but if the condition was not added, it would be better to keep it in `AudioBitDepth`, and use it in the `AudioBitWriter`, which is a good thing.
I think the previous implementation was correct, but the previous one was correct.
I'm not sure this is a good idea. I don't know if we should have the correct `List` or something like that, but it might be good to add a method to `List<KeyValuePair>`.
This needs to be updated to match the new feature.
This is a bit confusing. How is it called from within `setUp`?
This can be simplified to `default_scope`.
This is not needed.
This should probably return an `continue` here, as we already return an error.
This is not the right place for this function. The caller can just call w->load_from_save() without checking it.
I'm not sure this change is needed.
I'm not sure we should log it?
Shouldn't this be `MinSize = 512 * KiB, !bufSize, 512)`? I don't see any reason for that?
I think this is a good change, but I don't know if we can get a better name than this.
Why do we need to do this? I think it is better if we just do `this.startWorkspace_.setResizesEnabled(false);` instead.
I'm wondering if we need to make this change to avoid ambiguity?
I'm not sure about this. It's a good thing to default to `0` if it's not `0` or `0`, so it's not a blocker to change this.
This is a bit confusing to me. What is this for?
I think you can get rid of the `typeType` variable altogether.
I think this should be in `tests/tests/tests/test-event.py` instead of in the new `.moves`
Shouldn't we also check for the new Realm already exists here?
I think this is a little strange. What do you think about adding the data to ` getDataErrorComponent` and adding it as a member variable to the `error` field?
Could this be a `DescribeIdentifier`?
Why is this internal property removed? The `_scannedForObjects` is now unused.
I think we can just use `DisableHealthCheck: true`
I think it should be `conftest.py` instead of `conftest.py`.
Would it be better to just make this a `!` instead of a `!`? It would be easier to understand if we could just have a single `assert(` statement on line 290 instead.
This should be `&&` instead of `}` to match the other `&` tag.
This is not a good example, but it would be better to have a `List<RowType>` with the `List<Type>`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think you can use `&&` instead of `&` here
`?[]` can be null here, because it is not null.
I think it would be better if we just set `time.Duration(val)` to `null` here, and then you don't want the `hotroal` to be called.
If we're going to do `isodate.parse_date(attr)` we should avoid using `str` here as well. We can avoid using a more generic `if isinstance(attr)`, but I don't think it's a good habit to do this.
Why are these changes necessary?
@jmhooper @jridgewell I'm not sure if this is the right way to do this, but I don't know how I can do this. I think it's worth it to just do `when_org_changes!` in the `after_update` and `after_update`
I think this should be done in a separate PR
I think this import should be removed.
This is not related to the PR, but it seems like it would be a breaking change if you did it.
Isn't the null check already redundant here?
I think we should just return `errorString` instead of `.Sprintf`.
This seems like it should be a different way than a different thing. I think we should just do it for a different PR.
I'm not sure if it makes sense to have this pylint in the context of the code, but I'm not sure it's necessary. It seems that we don't need to have it in the context of the test.
This should be a `super` (or maybe `super().__init__(args, **kwargs)` instead of `super().__init__(args, **kwargs)`
This table is not in the schema, but it seems like it's only used in the DB, so I would remove the table and just add the DB here.
I think this is not the correct place to put this.
I think it is better to use an enum type for that.
Why not " Will always be 1.0"?
I would use a "stopCasting" constant.
I think this is a change in behavior. I don't think it is necessary to change the type of this class, but I'm not sure it makes sense to have it in a `Dictionary`, so I'm not sure it's a good idea.
@smarterclayton do we want to use the same `views` here?
Can we add a message about the coupon to be a constant? I think that would be a good place to put the coupon.valid? Or maybe something like `100-cache`?
I'd rather not make this a `break` statement, but it seems to me that the ` %.512` is the same as the `break` statement below.
I'm not sure if we need this.
I think the original version was correct. The output of the output was not being set.
please use `this->get_type()` to check if the sample is 0 or not
I think this is a good idea. It might be better to check for a specific schema that has a different schema. That way if we ever want to check for the delimiterIndex, we'll have to check for it.
This is a little confusing. I think the `Nullable` should be a `Nullable_body` and not a `table_column`
Align the parameters of a method definition if they span more than one line.
This is a very minor thing but I don't think it's worth it. I'm not sure if it's possible to use `BUNDLE_GEMFILE` to determine if it's a list of file.
I think it would be good to use the string `strings.ContainsRune` here, and use the same value for `scope.ContainsContainsContainsRune`.
Why not just use the `WriteBatch` here and remove that condition?
This is a good change. It's not a big deal, but if we're going to be doing this I think we need to make sure we don't do anyone with it, it might be better to have it as a separate method to avoid the `Map<Void> sendPart(() => this.complete(null);`
I'm curious why you changed this to use the `_x` prefix, and not the `_x` prefix?
I think this should be removed.
I think we need to change the `UserControl` type of the `CMakePackage`.
This should be `LOG.getLogger(__name__)`
This will be `time.Unix()` even if `time.Now() == 0`.
Why is this a pointer?
I would have used the `unblin-common` option here, but it would be more clear to use `unblin-common` here, which would be a `Strings.cmd` option. We could also use that here, but I think it's a little more readable.
I would use a more descriptive name for this.
I'd prefer we don't have this import at the top, since it's not used in the file yet.
Lint/UselessAssignment: Useless assignment to variable - update.
This should probably use the `getFlattenedValue` method instead.
@stephentoub do you have any idea why we're removing the `Guard.Null()` call here?
Why is this file removed?
I think we should remove this, as the other tests are using it.
Do we need a check for the new state?
I'm not sure if this is the best way to go about `*` in the list. I don't think we need to import `*` in the list, but it seems to me it should not be needed.
I think this is not needed.
Can you make this `api_fixtures` instead of `#build`?
This is the same as the one in `getSpaceName()`, so it doesn't need to be changed.
This was a bug.
Does the assumption that the `Bucket` will never be nil?
Is it worth mentioning that this file is in `lib/api/pkg/pkg/api/pkg/lib/pkg/pkg/api/pkg/api_pkg.go` and not in `lib/api/pkg/pkg/api/pkg/pkg/api/pkg/pkg/pkg/pkg/pkg/pkg/pkg/pkg/lib/pkg-api.go`?
you can use `getIcon` here
I don't think this is right. We should add a `context.org/x` package to the top of the file.
This is not a good place to put this code.
I think we should just make this `Topic` a little bit more general, like `Topic.top.all`
Why do you need to cast `data` to `utf8` here? It should be `utf8_type`.
I think this is not a valid use of `log.loglog` in `log.loglog`, so this is not a valid use of `log.loglog`.
I think we can remove this entirely.
This should be done after `export`.
I'm not sure if we want to add this to the `ctaLinkExternal` list, since it's not in the `build-system/suffix` list.
Why can't this be nullable?
What is the default value for this?
I don't think we need this, let's use the `ok` syntax for the resource's `v1` and `v1_` for the resource.
I think this should still be `test_renamed_message`?
This is a no-op, please remove
This should be moved from `setConfigs` to the `setConfig`
Is it possible to make a test for this?
This file doesn't need to be public.
Why is it possible to get the whole block of this block?
Why the change of this?
I think we can just remove `OUTPUT_VALUE` and just do `return false;`.
Why was this removed?
I think it would be better to use `s.lstrip('0x')` instead of `s = 2.0x`
This is not the right change. It's just a small fix.
This should be in a try/finally block as well, and in other places we call `RegisterCborType`
This method is not used anywhere else. It can be removed.
Why is this error ignored?
I don't think this change is required
This is the change that makes it sound like it is used to create a `currentcurrent` and `currentcurrent`. Can we keep this function and use the function `func PausedPredicates` instead?
this is not a good idea, but I think we can remove it from here.
@deads2k @stephentoub I think this is fine.
Do you think it's better to keep the original?
Is this the correct way to do this?
This should be `deleteTerms.clear();`
I know this is not your fault, but would you mind adding the `git grep` as an example?
This is a bug, it's a little weird to have a single key.
I think it is better to just have this constant in the context. The `DefaultDefault` should be moved to the `DefaultDefault` class, and then call it just in `DefaultDefault`.
Is the type annotation needed?
Missing period at the end of sentence.
I think this should be moved to a common place. What do you think about just calling it in `_expands_user`?
This is a bit weird, I think we should be able to just do `return {...}` instead of the `if` statement.
This should be a constant
This field is not used anywhere else, so I would remove them.
Does this mean we can remove the `next-line no-console` log now?
I think we should just use `is_debug_op` here instead. The code in `is_debug_op` is a little bit redundant, since it's a new method that is already in a `.is_debug` file.
I'm not sure if this is the right fix. I'd be in favor of `parse` to handle the case where the exception is thrown, but I don't think we need to catch any exceptions.
I would use a more descriptive name here, like `self->lastLogIdSent__ = self->logIdToSend_`
This is a good change. I don't think we should be using the `ConditionCondition.Show()` implementation for the Provisioned status condition. I don't think it's worth it to just call `updateCondition` from the other `TryCondition` function.
This is the only change I can do in #5043
I'm not sure if this is the best way to go about the formatter.
Should this be const?
This is not a good idea, we should probably just remove the `m` and `mFirstContentFulPaint` and just keep the old method as it's only used once.
This message is not really useful. It is also a bit confusing, since it is the interface and the data is a method.
Why did you change the test name?
This is a bit of an overkill, but I think it might be a bit more explicit to put the `role` inside a conditional block, and then `role_to_json_image` on the `mentor_contact_link` if it's not a unique unique unique index.
I think it's not necessary to add the `recieveUpdates` variable in `Newcircle`, it is used for both `cache.Controller` and the `cache.Controller` methods.
I'm not sure if this is the best place for this, it's a bug. The `utils` module should not be used.
I don't think we should add this here. The `filter_true` option should be moved up into `DISABLE_SANDBOX_WARNING` and `config.xml` functions.
I think it is a little strange to use `std::recursive_timed_mutex::is_ Cy` instead.
Should we use the `_` prefix here?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
should be also updated
this is a bug fix. It's not related to your changes.
Was this a problem before? I don't think we want to have it in the same file.
Why is this part of the migration migration file necessary?
I think this should go in the next `if (!isDebugEnabled())` block?
Line is too long. [98/80]<br>Space inside { missing.<br>Space inside } missing.
Why not just `continue`?
This is not a good place to fix this, it's a bug. The `exists` should be `[0]`, but I don't know if it's possible that the index is not a different thing.
I think this is a breaking change.
This is the fix for the tests.
This is not the same as the namespaceEntry call.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
Just a suggestion: I think we can just have `dba` as the default, and have it take the `ddev-ssh-agent` as the default, and then have the same default as `dba` and the same for `ddev-ssh-agent`
What is the purpose of adding a separate method for this?
Hm, this is the only place where we've had a "multipart/form" flag. What about something like: `return float(content_type and content_type.startswith("multipart/form-data")`
I don't think we should add a new `pipeline.Create(certPEM).AddCertificateRequestCA()` here, as we already know the version is in place.
We can't just do `excessDomChildren.indexOf(dom)` here as a result of a double, it will always be a string.
I don't think we should add a new argument for each one-liner.
I think this line can be removed now, and should be removed.
This should be `error_open_zip` not `Path`.
This should probably be `d.SourceSnapshot != nil` since we don't have to pass in a `regUse` object.
This test is failing on the tests because of the tests. I think it's better to just check the username and the user can't see it, and then do the username.
Please add a `TODO(#include <arpa/inet.h>).build()` method that checks if the initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initialnlp'' on.
I think it would be more consistent to use the `@return` here instead of a `@return`
Why not `public` ?
Is it really needed?
I think this should also be moved to the try/except?
This file should be removed.
I don't think it's safe for a non-nullable case to have this `CompletedTask`
this should be only `!cd.Status.Installed && ...`
I think you can just remove this line
Was this change intentional?
We can remove `debug.debug` from the `if` and the `return` statements.
This was added to the new version of the PR, but I think it's better to keep it here.
I think it's better to use a `#include` function that returns a `dict`, and if it's not the case we can't just set the `dict` to `""` here.
This message was a bit confusing, it's not a message and it's a message. I'm not sure why it was necessary to have it.
I think the `time.Sleep` should be `250 * time.Second`.
I'm not sure this is the right way to do this, but I think the `rc` parameter should be removed. The logic should be done in the "aggregator" block.
This file is not used anymore, right?
This is a test, I don't think we want to pass the schedule directly here, since we have `go schedule.ExecuteSchedule` method which is a very small amount of time to pass the context.
I'm not sure why this is necessary.
can you move this include under the `.hpp`?
I'm not a fan of this name, as it's used only in the `confirmation_height_processing` file. Is it a good idea to add it?
I think we should check `false` here and not just `instanceof`
This is not used.
Do we need a check that the script has been added in the config struct?
I think we should use a check_user_can_edit_record for this check instead of calling `user.lower()` here
Can we use the `execute_name` constant here?
I think you can just remove the span field altogether, and just use the span field.
This is the fix, but the changes in this file are not related to the PR.
Can you explain what the spec says here? It looks like it's the same as the `recording spec` -- that's the `time` -- that's the case for `recording` -- that seems like it's just me, and it looks like it's just the actual spec.
Why do we need this check?
This is a change of behavior. It looks like we need to fix it in a separate pull request.
Let's not add the `ASSIGNMENT` field in the `MapView` interface.
What is the difference between this and the previous one?
This should be moved to `SCM_DEBUG` and not in the other PR.
I'm curious, why is ` exporter` needed here, since we are already setting the `getClass().New(...)` in the `getClass().New(...)`?
I think this was the only change needed in this PR. The previous version was correct. The previous version was only used by the old version, which was not used by the new version.
This test is not needed, as it will fail the tests.
are you sure this is correct?
I'm not sure if this is a good idea. If it is the case, it should be a separate patch.
I think you should use `ci->num_simd_used` here instead of `num_args`
Why are these added?
nit: should this be a constant ?
I think this is the only place where we can use the path path, not the path path.
It's a bit odd to rename `Facades` to `BackendAuth` as it's a little bit confusing.
Should we also check that it's a zero-initialized value?
This should be moved to `const` (we already have a `let cb_` value).
I think it is better to change the name of the `prefMobileUpdateAllowed` to `prefRequestRequestUpdate`
I think we should change the name of the test.
I would prefer to have this in the `yarpc` function. It's not clear what this is for, and if you want to change the value of `yarpc.InjectClients` to be `true`.
(style) space prohibited before that ',' (ctx:WxW)
I think this should be `e.DbRound || e.DbRound || e.DbRound`
Can we add a TODO to remove this?
This import is unused now
We could add `key` to this method, as it will be used for other tests
@matt-gardner How do you feel about this? I'm not sure we want to do this for other languages
This method is only called in one place, so it's not a big deal. I think this method should be renamed to reflect the new function.
I think this should be moved to the `newNet` interface, as it's a bit more complicated than just the test name.
Why is this needed?
This should be changed as part of a different PR
Should we change the default type to "8080"?
I'd prefer a separate PR for this, as this is not really a part of the change.
if it's a pointer then this should be `if (int32_t) {`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think we should not use the value here.
This is not the right fix. `isLatest() && getBlockhash() != null` should be removed.
I think you should add `cstdio.h` here.
This is a bit confusing, as it is a bit confusing. Maybe it should be `17` or `188`?
Is it the same as the other `Rule` attributes? I think we should be consistent and remove the `Rule` attributes.
What's the reasoning for this change? I don't think it makes any difference.
I think we can remove the `idx` field and just use `cellsPerColumn`.
I don't think this is used anymore
I would move this to the top of the file
I think you can remove this field entirely
We can't change the type of the `locator_list` here.
What is the `include`?
I would use `.spec.duration` to be consistent with other types.
This file is not used anymore, it can be removed
Should we add a `AddData` method that does this on all platforms?
Should this be a `@not_implemented` annotation instead of a `@recover`?
Is this a change in behavior that we should not have to do this, as we are trying to reduce the timeout timeout?
Why do we need both Copyright (c) 2020-2021 Tigera ?
I think we should check the dir here too
I think this is a bug, the code is not in the `spearman` package.
I'm not sure if this is correct, but if you do, you can use the `const char` and use a `const char = cache[elf][isa][agent]` instead.
I think it is better to just pass the readStateHeight to the constructor and then call the readStateHeight. That way if you have a read-only state, the read-only state will be ignored.
I don't think this is the right place for this.
Can we put this into a constant?
I'm curious why you removed this.
Why do we need to add a type here, `MaxElement` is not a type of object, so the type is just the type of the map.
Why is this needed?
this is a bit weird, why is the two `skip` coming from a pointer?
This is the only change that fixes the bug.
I think we can get rid of the `loadMetadataTable` variable entirely now that it is called directly from the table table.
I think this is a bit confusing since it's a bit of an overloaded method and not an overloaded method.
I'm not sure if this is the correct way of doing this.
I think we should just use the constant `hasReceived` here, because it's a bit confusing to have the value of `result.resumeAfter`
I think we can get rid of this `find_current_user` method altogether.
This is the fix. The `if` statement below should be removed.
I think we should just add `@return` to the `else` branch to avoid any confusion here.
This should be `>= 2.7, greater.version`
This file should be removed.
Can you change this to `const bool b1 = b2 && b2 <sas.5);`
This should be `basicauth:bob` instead.
Is this still needed?
this should go before `pkg/webhook/server/util`
Did you want to remove this?
We should add a new `StartActive` to the span context and then remove it from the `[UnsupportedOSPlatform("browser")]` method.
Is this really needed?
Is this still needed?
I think this should be `find_instance_group_by_url`. The logic in this function is not really related to the PR.
could you please add a space after the `if`
I'm wondering if this should be `!FormatIsMultiplane(..)` instead? Or is this a bug in the code that is actually not happening?
This should be a module module.
I think this should be moved to the `common.xml` file.
@njhill thanks for your contribution. Can you check the way it was before?
This is not a bug.
This is not a valid class, but it's a bit weird that we're doing it in a different way.
This is not needed.
I think it would be better to do `refref,ref,ref, Action afterAction,` instead of `ref` as the last parameter.
The `result` is used to check if the NULL is NULL or not.
I don't see a reason for the default value of `DefaultHost` to be used here.
shouldn't this be `./gradlew+\.`?
Should we also handle the cache cache in `config` and handle them in `config`?
Is it possible that SortOrder.unsorted() is a null pointer and a copy copy is not null? If it is, then we should be consistent.
I think this is the wrong place for this. It's a bit odd that we have the `./pants run` file in the file, and we don't have to use it here.
This is a breaking change, and should be removed.
@bparees this is a breaking change. It should be `package.build avr esp nrf sam`
why not use `auto atom` instead of `index`?
Shouldn't we also check the value of the `$this->getAuthManager()`? Otherwise it's not a global var.
(style) externs should be avoided in .c files
@citibeth This is the only place where we have the `templateRole` parameter, and we have to use the `removeDomainPrefix` method. This is a bit of a hack.
Can we rename this to `IsOnMainThread`?
Prefer `if !is_a?(String) if selected` over `if !is_a?(String)`.
This is the same as `googlesitekitLegacyData.admin.assetsRoot` right?
Can you revert the changes to this file please?
This is an API breaking change.
I think it would be more consistent with the rest of the code to call this `Time` instead of `Time`. It would be easier to read if we could just change the `Status` field to something more general, and then just call `Status.get(Status.get())`.
We should not have a `cloneElement` here.
This is a duplicate of the feature, but I don't think we should be using this.
I'm not sure we should be using the `DEFAULT_GITHUB_ENDPOINT` constant here. I don't think we need the default value anymore.
Shouldn't we also check if the task is not available? Otherwise the task will be added to the task.
I don't think we need the `statsConnection` variable anymore.
I think this should be a separate commit
These two lines can be removed
if the first check was not found then we should return an array here.
Why was this necessary?
Shouldn't the default be `None` here?
This change is only used in tests now, so we should remove this `gasLimit` and `gasRau` parameter from `sender` to `gasPriceRau`.
Why is paths.begin a pointer?
Do we need to check that the item is a global?
Why are we adding this flag to `false`?
Not sure if this is the right place to put it here, but I'm not sure how to get it, so I'm not sure what's going on.
I don't think this is the right approach, since the globalWorkSizeX will be removed from the globalWorkSizeY and the globalWorkSizeZ, so the globalWorkSizeZ will be removed from the globalWorkSizeY and the globalWorkSizeZ will be removed.
I think you can get the `config` from the `count` by passing the `get_config()` as the default value of `config = configuration.get_config()`. The reason for this is that `config` doesn't need the `count` parameter anymore (and `None` is a `None`)
As discussed offline, this is not needed. `var acceptableVariance = (actualIntervalLimit * 1.15);` is a slightly cleaner solution.
This is the main place where we use the `data-'` property in the `getBox` method.
I think this is the only change that affects this file.
If we're not using `.sort` any more, we should probably do `.sort` before we call `.freeze`.
I don't think we want to add these new options.
Metrics/LineLength: Line is too long. [83/80]
This should be a assert.
Are you sure it is needed for the speed?
Is it possible to make the consumer update `PojoConsumerOperationMeta pojoConsumerOperationMeta` a consumer?
Can we make this a test case that checks for the new pending type and 1 pending?
This should be `index=True`.
I'm not sure why this is needed.
I think this is not needed anymore
This is not used anywhere, please remove it.
Same as above, this should be `ExchangeFactory`.
The `QtCore` import is unused
Why is this needed?
This is not needed.
This class is unused.
Why not use the XmlLoggingConfiguration instead of using the XmlLoggingConfiguration here?
you can remove the spaces between methods
Shouldn't this be `err`?
This import is no longer used, can be removed.
this is a bug, but should we be doing a separate PR?
This test was not working. This spec was not working correctly, so I removed it.
I think you should just default to True and pass the `True` to the default. It is also possible that the default behavior of `norm_cfg`, and the default should be `True` in the `norm_eval`
This will fail if `original` is null, right?
This was the only change that affects the change.
This is a bit of an overkill, I would suggest to use the same name as the other fields.
Is this needed? It seems to me that the `value` is not a `string`, so the `string` would never get added.
Can you use `theme.list` instead of the `Theme`?
This test should be testing the `keybaseDir.toURI().toString()`
This is the wrong place for this. This was previously the fix.
This is a bit of an unrelated change, but should be made in a separate PR
This is a breaking change.
I think this will break existing tests.
The name of these is misleading, because the `validated_utils` function is not used.
Isn't the `.` prefix the same for the other similar methods? I would prefer not to have this in a `static` method.
I don't think you need the spark streaming microbatch scan here, you can just do a `return new SparkBatchQueryScan(.., ..., ...)`, and you can get rid of the `if(false)` statement.
I think this should be done in the `claimName` variable
I think this should be `<none>`.
I'm not sure this is a good idea. The `metav1` is not the right thing to do, so I'm not seeing any other `v1`s used in the code base. I'm not sure if it's worth it.
I would prefer to keep this as it was before. I think this is more of a breaking change
why 0 and not 0?
This should be in the same PR as the other one in the same PR.
This should be changed to `github.com/pkg/clock`, as well.
This was a bug in master because we are removing a connection in context, right?
Is this method still used?
I think it would be better to use `self.fetch("/options")` instead of `self.fetch("/options")`.
This seems like a good candidate for a specific test.
This file is not used.
I don't think we should be using the `data` here.
I'm wondering if we should have an `cloudDNS` type for that instead of adding a new parameter to the interface?
@kennknowles do we know why we are removing this ?
I'm wondering if this is an accidental change?
Is it worth adding a log to avoid this interface?
Is this error supposed to be used for macOS?
Use `<%= "geolink"data-key>`. Also, should we use a more specific one for the other?
This is a no-op, because we don't have a step that's not a step in the session
nit: you can merge these lines into the `org.jboss.java#484` section
I don't think this is a good idea. It should be a test case.
I think this should be a `@Deprecated`
I would prefer to use `// TODO(upgrade):` instead, because we are not going to use it as an option to use it in the future, and we should also be able to use the old buggy Credential.lowestOutput function.
Should we add an explicit `KafkaField` to the interface?
Wouldn't it be better to do the same in all `let` branches?
I think it is better to make this method `ABCDEFGHIJKLMNOPQRSTUVWXYZ`
I think you can remove the `cancel` function from the `cancel` method.
Can we remove the @isposable for this? It looks like the only place that needs it is if it's not being used. I think this needs to be readonly as well.
This is the fix. We should not change it in the code base. It's used in the code base as it is in the code base.
I think this is a leftover.
This is the only change that affects negative landing.
I think this block can be removed.
Why is this change necessary?
Can we remove the `CharoStInfo`?
If we are going to use this in the new `Blocklistener` package, then we can move the pubSub inside the `Block` block (and the corresponding `Blocklistener` package).
I think we can just use `circuitBreakerThreshold` and remove the `isort` prefix from the test.
I think this is a good idea to change the name to `ThreadAgnostic`
This is not a valid input name. It's a bit weird to read.
Can we use `testMatch` instead of `...test.js` for this.
Why was this changed?
I think you want `config.mld_storage_path` to be the same as `config.mld_storage_path` in the other PR
I think this could be a constant
Why do we have to change the order of arguments to match the order of arguments? I think we should keep the old order as it is.
I think we should remove this and use `ModuleConfigQuery` everywhere.
This is a bit weird, I'm not sure we should be using this.
I'm not sure if we should be using `service_video_embed` here, since we don't have to use it in our codebase.
This should be `_create_asset`
why not `opt := []StateDBAdapterOption{NotFixTopicCopyBugOption()}` ?
I don't think this is the right place for this.
Please remove the extra spaces between `mrb` and `mrb_to_str`
(style) code indent should use tabs where possible
I'm not sure if it is worth the implications to have a method that takes a `value` as a parameter, but I think it is a good idea.
This is the only way I see the `config` is being passed to the `configure_group`. That way, we don't have to pass the `idSpec.configuration` to the `apply_derived_metadata_to(@metadata)` and it will only pass the `idSpec.configuration` to the `configure_group` method.
I'd like to see a more specific class name for this. It seems to me like we should be using `updateNotInProgress`, `updateNotInProgress`, `updateNotInProgress` and `updateNotInProgress` to be consistent with the name of the name.
This is a change in behaviour that the goal of the SQbase and the SQbase is to use `0` for the SQbase.
I would suggest to put "The max edge number returnred searching vertex" in the name. "The max edge number" is not a number of things, so it's not clear what the "return" means.
Why do you need to make it configurable?
The interval should be set to `pull_interval`.
This should be in the `plugins` package, not here.
I'm not sure if this should be an `else if` because `X` can't be `nil`
This is a no-op if we return `None` for the `if` statement.
I think this should be `if len(certificate.Status.Conditions) > 0`
I think it's better to use the same constant for the one in the `camundaIntegration` class.
Shouldn't this be removed?
remove empty line
I think we can use a `useTimestamp` instead of `useTimestamp`
I think we can remove this method.
Is it possible to move this into `getValidatorsForBlock`? It seems like the `resolveValidatorProvider` is not a valid value, so we can have the same logic for `isPresent`.
I don't understand why we're using the `found_opts` parameter here.
I think it would be better to use the `subscribe-with-google` package here.
Is it really needed?
I would suggest to use `a4a-expire-duration-interval` instead of hard coded it.
This should be `from jinja2 import Environment`
Shouldn't we also check for `DATASEC_RARELY_PROT `?
I think it is still useful to have a `break` statement here.
I don't think we want this. We should be able to just set the time.Second as default. We should also set the default value to 1.
Why was this removed? I think we should remove this.
is this still necessary?
Is there a way to make this configurable?
The module module header should come immediately after the PCH to match the other files.
Nit: I think we should just inline this in the `options.fromVersion`.
This can be removed.
Is this change necessary?
This should be a `@return this for method chaining`
I'm a little concerned about the defaulting here, as I'm not sure it's worth it to make sure the default value of `validates` is not empty, and it's not actually true.
Why not keep it as it is?
Place the . on the previous line, together with the method call receiver.<br>Block argument expression is not on the same line as the block start.
This could be a `@return`
I don't understand the purpose of this change. It is a very minor change and I don't see any reason to make this change?
Even if `key` is a `AttributeError` in the record, I think this should be `self.delete(key, value)`
@jcotela is it possible that the user is not running in a cluster cluster?
Why change the type of type to `array`?
(style) return is not a function, parentheses are not required
Can this be made private so we can get rid of it?
this should be `e` instead of `if e`.
I'm not sure about this one. I think the only thing we should have here is the `line compat/compat` option. I'd prefer if this was the only thing we would have, and if we ever want to change the `line compat/compat` option, it would also be good to add a new `getGamepads` option, which would then be used for the `line compat/compat`. I'm not sure if this is the best way to do that.
I don't understand this change?
this is a breaking change, please remove it if you want
I'm not sure this is the best way to do it, but I think it's a bit confusing to have a `_numeric_cast` flag.
@jcotela is there a reason we don't want this to be here?
Should this be a `defined('CACHE_ENABLED')` instead?
Why is this change necessary?
Is it a typo?
This should be using a `config` instead.
This is a change in behavior, I don't think it's a good habit to have a check for `0` here.
I think this should be removed.
This is a change in behaviour, but I think it's a little weird. I'd like to keep it as `assert.NoError(err)` and just use a constant here.
This is a leftover from the previous version. Can we fix it to something like `get_options_index`?
Why do you need to pass the `config.Overrides` as a parameter?
What is this for? I'm not seeing it being used in the PR. Is it possible to remove it? It looks like it was just used by both backends.
I'm not sure if this is the right fix. It's not possible for the first time the delegate was to be triggered, but the delegate was not triggered.
I would not add the `version` field here as it is part of the `astroid` field in the `astroid-version` namespace.
I don't think this is a valid default.
can we just delete the log?
I don't think this is needed, you can use `User.for_email(user_id: user.id)`
I think we need to make this change in the future as well.
I'm not sure this change is correct. We should not use Java version as the default behavior for the Java version. We should not use Java version as a default. We should not use Java version as the default behavior for Java version
Can you please also update the tests to include the new parameter name?
This should be moved to the `__u8 nat_lvl1_drop` constant.
This file should be renamed to something like `initializers`.
This is the wrong change.
I've seen a lot of work with this `@..` on the `init_query` field in `init_query`
I think this should be removed
I think we should use `null` here
(style) trailing whitespace
This is a little confusing to me - if you're using a simple `./pants run-time` you should use `./pants run-time` to get the wrong `./pants run-time` to get this.
Why not just use `pendingCountLocked`?
I think this is a change in behavior. We need to be careful with the `sk` and have the `SetSignature` be set to the `Route.Error` in order for the `Route.Error` to be set. I'm wondering if we should just have a `Route.Error` that is the only place where we're using it.
Why not just have `loadReactAppOnceIfReady`?
I would suggest to add a new warning message here, e.g. `Xcode_9.4.1` and then a new one.
Line is too long. [83/80]
Why do we need a new param here?
I'm not sure if it's worth it to check for a null pointer, but I'm not sure we can check if the user is null or not.
This should be `DeadlineExceeded`
I think it is not possible to do a check for `argNameVal.length == 1` here.
This is a little strange because `\w` is not `\w`. I think we need the `==`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Is it possible to have a default setting for the variable in the constructor? I'm assuming it's not used in the code, and it seems like this is the default setting?
This should be `Preconditions.checkNotNull(selectedIds, "Selected field ids cannot be null")`
this should be removed.
Why not keep the original exception?
`Dashboard.navigate()` is not needed.
`LOG(WARNING) << "Unsupported row reader version { }` would be more appropriate
I think this can be removed now.
Why do we need this?
I think this is not the right place for this feature.
What if the user already has a different name?
I think this should be `node-labels`.
This is not needed.
Remove these TODOs and suppress them.
I'm not sure this is the right fix. I'm not sure what the best approach is, but it might be nice to be able to use a constant here.
Why do we need this change? It seems to me that if we are not using the default, then we should be checking if `_autosave` is `None`?
Can we make this `ElRound` instead of `ElRound`?
Why is this change necessary?
Why not just `dbRecordVersion`?
This seems to be the only change in this file.
Should this be `yarn run-time`?
I think this is a debug message. It would be better if we moved the log message into the `log.debug` method.
I don't think this is correct, since we have `stats.SessionStats` and `stats.SessionStats` for both.
Is this change intentional, or just a typo fix?
why not use mock ?
I think this is the default for the `Task` and `TaskContext`
I think this is a bit of an overkill, as it will always have a device, not a link.
Please update the docstring accordingly.
this test is failing because of the new test, but the old test was failing because of the new test
Is it still necessary?
I'm curious why you had the original issue here?
This is the only change needed for this PR.
`DEFAULT_CONFIG_PATHS` is used in a couple of places in this file. Should we check if the path exists before setting the path to `dev`?
I'd rather you use `\n` here, and in all other test cases you use the `\n` for this.
This is not needed.
I think it would be more readable if you put the name of the file in the `server/`
I'm not sure if it makes sense to add the `Max` parameter here.
This is not needed.
I think this is a good change, I'd prefer to use `isNS` instead of `hasNS`.
I'm not sure if the `Hour` is the right way. The `Hour` is the right way to do it.
Should this be `opts.project_root.c_str()`?
Shouldn't this be `iou_thr=0.5`? I'm not sure if the `_func` should be here.
Can you remove this blank line?
This is the only place where we need to have the `*` in the `ProxyProxy` and `ProxyProxy` methods.
I don't think this is the correct fix.
nit: I think we should avoid making this a `type` value
This is not needed.
Why not `return r`?
Align the elements of a hash literal if they span more than one line.
why this change?
@franckc @cra0zy - I'm not sure if we should keep these constants here. It seems to be used in all places where we're using `cms::theme.active`
`it` can be removed.
Should this be a `Key(...)`? I think it would be a little clearer to have the `*` and `*interface{}` here, as it's a bit confusing to have the actual type of the type of the type, as it's a collection.
I don't see a point in keeping this. If we want to make this change then I would suggest `FailedPrecondition ErrorCode = 7`. I'm not sure how to get it, but I think we should just make it configurable.
I'm not sure about this - we should just return `.Rune` if the types are not found.
I think we can just remove the `_history` argument from here.
Can you also move this import to the group below, so it's more readable before and after the group below?
You can just write one_img: `one_img = mmcv.imresize(one_img, input_shape[2:][::-1]).transpose(2, 1, 1)`
It seems like this is a bug fix.
please also change the `/test_common` files to `/test_common/cpp EXCLUDE_HIP_PLATFORM` (and the `/test_common/test_common.cpp EXCLUDE_HIP_PLATFORM` above)
This is an example of a change in behavior. We need to use a more generic `strings.String()`.
I don't think it's worth it to check if the exception is not in `_get_raise`?
I think we should change this to be `raw::Result.from_exception` and make it `raw::Result.from_exception` to be consistent with the rest of the code base
Should we also check for `apimachinery` here?
I think we should add a note about this.
This should be done in a separate PR, but we should not have this in the commit message
**Question:** Should we use `.show_list` here?
Why do we need to catch a `err`?
I think this should be `cuda.is_available()`
@wachterjohannes Is this a bug?
Can we just use `<` in the constructor?
I think this is a good change. It should be `final`
Can you please add the same logic for the `item.recording_start` check?
I think it is better to use the same naming convention for both, and the same one for each call.
I think this should be `Collections.singletonList(Collections.of(null, int))`
I think this should be `mysteriumnetwork/`
This is not the same as the ``self.assertDictEqual`` method.
this should be h2o_hpack_decode_huffman and h2o_mem_release_shared should not be the same as the one for the other.
I think this is a good change
Is it worth having a ticket to make sure this is only used for test?
Not sure why we need this change, but if we are not going to use it here, can we just use `metricsConfiguration.getProtocol().name()`?
I would have gotten a bit more on this: `if end_level >= len(inputs) or end_level == -1, extra level is allowed`
This is a bit confusing, why not use a `long` variable and use the default `longSize`?
I'm not sure if this is correct. The `else if` block will not run on Windows.
I think it's better to make it a `static const` and `static const const`.
can you please change this to a rankNum to avoid a double variable?
Please use `loss_normalizer_momentum` instead.
I don't think this is needed.
Please don't use wildcard imports.
The same as the other sentence.
Please remove the TODO
I think this is a bug fix. The original issue is that the copy can be removed.
I'm not sure if this is a good idea, since the `Erc721Binary` method is a bit of a hack, so I'm pretty sure we don't have to make it here.
We should add a `config.add_api_capability_index` function to this.
I think we can remove this null check since it's already in `package.Value`
I think we can just return an error here instead of setting `err` to `nil`.
Is this still needed?
This looks like it should be `FileSystem`, not `fs`
Why are we making this change?
I don't see where is the `AbstractMap` used?
This should be `background_color` because the user has a `value` and a `background_str` has a `value` value.
why not throw an UnsupportedOperationException?
@kroitor since we are now using the `services_summary` variable here, we should remove `services_summary.py` entirely.
Should we also change the plan here to be the current user?
(style) line over 80 characters
Can we move this up to the top of the file?
Wouldn't it be better to move this block of code into the `if` block?
I don't see any new tests using this. Can you explain?
is this change intended?
Why is the `_find_violations` changed?
I think we should not setProp here.
I'm not sure if we should be checking if the user is not nil, but it doesn't work for the current user.
This should be "To preventing the content from the other changes in the PR.
Maybe we can do `sl := c.srv.globalAccount() + gacc.sl.mu.RLock()` instead?
I think we should remove the license header
I don't think this is a good idea. I would just use `time.Sleep(2 * time.Second)` instead of `2 * time.Second` here.
I don't think you need this method here, it's only used in the `if` statement, so you could remove it.
This is not a `scope.go` file, and it's a `Map`, so I'd suggest to use `String.format` for this.
Nit: "The name of the method is not include {@code java.lang.Object} unless it is explicitly added (e.g. {@code class X extends Object {}})
This was a bug before, and now we're now removing the `Exact Match` parameter.
Please rename this to `FileSizeChecker`
I think this test should be removed. The `#target` is not in the `innerHTML` case.
I think you can remove the null check here. If you want to do this, it will be better to do the same check for the `microsToMillis` above
This is a change of behavior, but I think it's better to use `p` instead of `p` as the result of `p` here.
I think we can remove this `id` and use it in the `optin` tag.
Why did you change this?
I think this will be more readable if the `tab.present?)` check is done with the `tab` option.
I'm not sure if this is the best place to put this stuff. The `htmlFor` component should be used for all the other things, not just the `.` component.
I think this will be a bit more explicit.
You can't make this a bool. It's a bit confusing. What about `BloomStructRef`?
Perhaps it would be better to check for `self.keys[0]))` instead?
I think we should check for `isUIAWindowHelper` here.
The length should be `(json:"CPULimit,omitempty"`
@smarterclayton do we want this to be the default?
Add a space after `//`
@smarterclayton can you confirm that this is what we want?
I'm not sure this is the right place for this, but it's a bit of an overkill.
This will need to be moved to `_GenericAlias` (and `saleor/utils/test_GenericAlias`)
This is a bit of a hack, but I'm not sure if we need to make this change, since the template is not a special case.
This is not the best place for this PR. I don't think it's worth adding a `reset` field to the `reset` field.
This is a breaking change and will break existing code.
This is not needed. The `tvOS.Views` interface will already be used.
I think this should just be a warning.
I think we should also set the compaction to `true` when the current version is in the first place, and then set it to `true`.
I think we can just use the `*` here
I think we should keep `<%= raw(@description) %>` as the default.
`if tab.pin is True`
Can we keep the old `loadDeleteFolders` ?
This is not the only change that affects the return type.
This is the only change in this PR.
This one is not needed.
I'm not sure this is needed, it's already in `__u8 nat_lvl1_drop`
I think the test case should still be testing the same as the span name.
I think this is still a good change.
This is not a great idea - we should just make it `int` and use `os.path.gz` instead.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This should not be done in the `for` loop.
This is a little hard to read and confusing, but it is a bit hard to follow. Can we name this something like `PORTS_HEAP_SNAPSHOT` or something like that?
This is a bug fix. The only place this is used is to get a copy of the `sgd_training_algorithm` value.
I don't think we should be using this. We have to make sure the package is only for the package, and the package is not in `go/v1` so the package can be added to the package.
Is this change intentional?
I think you can just do `!isUpsert()` instead of `!isUpsert()`
This import should be removed.
we should consider making sure that factory is a factory, not an SP
I don't think this needs to be a list of `tls.Config`
We should add a `import static` to the `import static` and add a `import static` to this function as well.
Is this change intentional?
Why do we need to `type Handler` here?
Why not use `time_t *`?
@danrot what do you think about using the default `Dockerfile` to be the default path. I think it would be better to check if the user doesn't need to specify the Docker file in the UI.
@jridgewell This is a breaking change for the API and I don't see a need of `siteName` for this field, since the type of `ddev` and `ddev_default` are in the type of `ddev`.
You don't need a migration, just do `t.timestamps`
This should also be `Optional[str]`.
Shouldn't this be in `before_ops`?
I think this function is used for a few places, can you move it to a new function? It is used for a lot of different places, and it's not really necessary to have it in the future.
Is this a bug, or should we just get a test for it?
Why do you set it to None here?
This is not the best place for this. It should be the default value of create_no_window.
I think we need to remove this method, since the method is already created in `getNonStreamingMethods()`.
Is there a way to avoid using `str`? I'm not sure if it is a good idea, but it might be worth a check for the other cases.
Can we use `shape.size` to avoid the zeros?
This is not needed.
I don't understand why this is necessary, it's just a string, and not an `error`
The `use` statements are not used anymore.
This should be `featureToken === 'string'`.
Can we rename this to `destinationNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonF` and have it return the same value?
Please add this to the other files.
This method is only used in one place, but I don't think we need to add anything here.
This was a bug in the PR
This is the only change that works.
I don't think this should be here. The `InternalContext` can never be null.
I think you can remove this and use the `FileOutputStream` class directly.
I think this is a bit confusing, since it's a test file, and we're using it in the same file, but I'm wondering if we should just leave the `default` part of the file, as it's only used in the `api/server/server.go`.
why is this needed? I think we don't need it in the code anymore.
I don't think this is a good way to do it. The prohibitsits is a prohibited for all fields, and then you need to add it to each field. The prohibited_prohibited_new is the prohibited_new that does the prohibited.
can you use the standardpl below please?
Is there a reason for this?
This is a bit weird, why not just have `byteCapacityCapacityUnits` be `None`, and do `return [virtualDiscDesc.CapacityAllocationUnits]` in the `if` statement?
We should probably have a unit test for this as well.
isn't this still needed?
I don't understand why we're using the watchdog.location directly here.
Can you use `GetBytes` instead of `&&`?
@jcotela is there any concern with this TODO?
I don't think this is needed.
this import seems to be missing the change in the changelog
What's the reason for these changes? I think the changes to these are unrelated, and they are unrelated.
Is it possible to add a new feature for this?
I think we need to remove `.instance_exec do` here, since we already have a method that is only called from one place, and we don't want to use the same thing here, right?
Hmm, why did you change this?
We can't change the name here, as it's not used anywhere.
This should be `@expectedException`
Is it really needed? I would have thought it would be a good idea.
We should probably use `NodeAttributes` here.
This field should be renamed to `getPlaybackSpeed`.
Should we add a new key for the http to be available on the http-up?
Can we use the `_state` instead of `context` here?
why did you change this?
I think this is not needed since the check is not allowed in `PostPostRequest`
I think we should make this a public API and not have it in a separate PR.
Why not use the `permissionpermission` version instead of hardcoding `permissionpermission` here?
Redundant `return` detected.
I don't think it makes sense to use a default value for this. It is used in a default value.
I think we should be able to use PONY_ACTOR_DEFAULT_BATCH instead of a default value
I think it would be clearer to name this variable `copy_copy`
Should we throw an error here?
I think we should just remove this.
can you add the `listen_count` above as well?
I'm not sure if we should do the same in the `if` block, but if we're not going to do this, we should also check if the `git-daemon` exists.
This seems to be a very generic name. I would just rename it to something like `this.ieService_`.
I think it's fine for now, but we should just make the function `Rule` and `Rule.names` return `false`, and remove the `Order` call here.
I think this is a good idea to make sure that the new functionality is not in scope of any API.
@franckc @mitchellhenke would you mind adding some more details about what this is doing?
I think this is not needed. `quorumCompatibilityMode` is only called from within `getEattosBlockNumber()`.
If you want to use `context.join` you can use `context.join` here
Please don't use the import of the line above.
I'm not sure if we need to add this to all of the files
I think this is not a test, it is already doing anything.
I think we can remove this.
I'm not a huge fan of the `AccountPermissioningConfiguration` name and not just `isJava` (and I don't think this is the correct name)
I'm wondering if we should remove the information that was removed. If we don't need it, then we should just delete this and remove it.
@jcotela is it ok to set it to `null`?
Why do we need to expose it here? It seems like the only thing that would be used is if you want to use it in the future, but I think we can just make it a global.
I would prefer to keep the initial name here.
I think we should remove this and just use the `setDefaultBackendFactory` method here.
You don't need this class, you can use it directly
We can't use `?MenuItem` in this class.
I think the name of the test case is `API-MS-Win-Core-Localization-Obsolete-L1-1`, and `API-MS-IMPORT-IMPORT-IMPORT-IMPORT-IMPORT` (in the other places)
@mattpap AFAIK the `this.foreach()` call here is not needed, right?
We should probably add a check here that `currentbvConfig` is not defined.
This is a little weird. Should we be checking that the key is in `yapf` and have the `yapf` and then checking that it has been updated to handle the error?
Maybe we should add some description about why we are not doing this.
I think it's better to check if the user doesn't need `/` and `/\/` in the `/`.
The `replace` should be removed.
Isn't this the same as `abcdefghijklmnopqrstvwxyz0123456789`?
Not sure if this is the right way to test the token, but I think the `cart.approver_approvals.group` should be `nil`, not `approvals.group`.
Should we also include a more specific error type here?
`$detailConfig` is not used anymore.
This should be `user.GetGroup()`. The user could be different.
I'm not sure this is needed, it seems to work. It is only used in one place and it is not a big deal.
This should be done in the `fetch` method.
I don't see where we used the timestamp in the context of the request. I'm not sure we should do that.
Why not just call it `const int32_t queue_family_properties[queue_family_index]`?
Why is this needed?
I don't think we should add these new parameters.
Can we make it public?
This is the only change that affects the existing `counter` field in the view. Is that correct?
You can use the loadTriggerManager directly.
This should not be necessary. `DD_TRACE_DELAY_WCF_INSTRUMENTATION_ENABLED` should be enough.
I think we can just remove this line.
This is not a good example of how the `./pants lint` module works.
I don't think we want the extra protected parameters.
`suffixLength` should be a `append()` method.
Do we need this line?
This interface is used in a different way, I think.
We should use `dict(db.logger.Infof(...))` here instead of `dict(db.logger.Infof(...))`
I think we can remove the `shs` class altogether now
This is the only change that affects usages.
This is the only change required in #include <WXMAC.
I'm not sure if this is the correct place for this change.
Is it necessary to add `ice.isSupportedAudioMimeType` check in `createAzureTopic()`?
Is this needed for tests to pass?
Why do we need a separate `type` param?
isn't this the space at the end?
For some reason we should not have to pass a value here.
Shouldn't this be a `switchFrameByIdx`?
I think you should be able to use `not isinstance(value, str, None)` here.
I'm wondering if we should just return `errAddress` instead of `Address` here?
This is a bit confusing, as the record name is not the same. Is the function used somewhere else? If so, we can add an explicit error message here.
Let's not do it here, since it's a `working_dir` variable.
This is the only change I have changed, but I'm wondering if we should just make the code a little more readable.
I think this should be `github.com/iotexproject/core/db`
I don't think this is a proper name. What do you think about `RUN`?
Can you explain why this change is needed?
Maybe we can move this logic to a new method, so that the user can load the previous run?
I think this can be removed now, right?
I think it is better to just put the task in the constructor, it is already there.
Is there any way to make sure the `DB__ROOT` and `DB_granteeName` are not available?
This seems like a good change to me. I think it's better to just have `cFlags` and `cFlags. By default it's defaulting to `cFlags`.
Why is this change necessary?
This should be `Carterared.header.contact_your_mentor`
This test is not needed. It should be: `error/folder/folder-1/project/binary/firewall/1234567890123456789/'`, `error/folder/folder-1/project/binary/firewall/1234567890123456789/'`, and `error/folder/folder-1/80`
You should use `ErrBadNetwork`.
Shouldn't it be `merrors` instead of `pkg_errors`?
I think this should be `self.run_names[0]], [baseline_file_path], '--resolved', 'json',`
Shouldn't this be `Add(CompositeType)method.DefaultResponse`?
`undefined` is not a valid parameter name.
This is not a good change, but it's a bit weird that `rp_info.dependencyCount = 0` is the only one that's not used. It seems like the only one that's not used anymore. Can you please change this to `if (m_renderPass_dependencies.reserve(m_additionalSubpassDependencies.end() + m_renderPass_dependencies.size())`?
I would prefer if this is a separate PR, and it's a big change in behavior. We should be consistent.
I think this should be done in the `if (type === 'checkbox') value = ev.target.checked ? 'on' : 'off'`
I'm not sure this is the right place for this test.
This is the only change in the test suite, but I don't know why it was here.
This is a good example of how we're passing in a tuple here... I think it would be better for us to have an `isinstance` check that the value is `None`.
This is the only change that fixes the issue, but I think it's better to leave it to the `EXPECT_TRUE` function. It's used to be used to make sure the code works as-is, but I'm not sure what's going on.
This is the only change that is in this PR.
This is a breaking change. It should be `self.path` instead.
why change this?
@mfojtik @smarterclayton do we need this for the external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external external
I think this should be `Api` rather than `Api`, right?
this is a change in behavior. We should have the option to change this.
I think it's better to move the file to the top of the file
Please also check if `machine.PWMClocks()` is called before `initinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinitinit In "<initPWMClocks()`
Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body end.
This should be removed.
I think we should add this to the `iFrom` below, since the `ingressRule.From` is not always the same as `ingressRule.DirectionIn`.
I think we should use the `scope` import for this.
I'm not sure this is the right approach. The problem is that if a user doesn't have a `Namespaces`, it seems like it should be an error.
Can we just remove this param and just call it `current_user.lib`?
isn't this a breaking change?
How do these changes work if we have the default?
This is a test, but I think it's better to use a chain chain chain chain chain and then use the chain chain chain.
I don't think we should be using this anymore. The `BdsJSON` is the same as `libdsJSON`, and the current `libdsJSON` should be the one in `libdsJSON`.
I think this needs a unit test
I think the `no AVX` argument is not needed, since it's already `no AVX-512`, so you can remove it.
This is not a good example, but the `is_pageTitle` function is only used to build a single application.
This should probably be moved to the `must_equal` and then `btl.time_elapsed` below
I think this is a leftover?
I think this is not the right place for this change, we should be able to remove the `&& !hidden` part and `&& !editMode`
I think we can just use `ec2Base.proto` here.
Rails/OutputSafety: Tagging a string as html safe may be a security risk.
I'm not sure this is a good idea...
Is there any chance this is going to be used?
Would it be better to have a test that checks if the lockID happens?
Maybe `GroupByError` or `ListenerError` would be more clear
The variable `StateTracker` was not used anywhere else, so this is not necessary.
Why not `public`?
Why the change here?
@bparees I'm not sure if this is correct. If you want to do something like `metricsConfig.validateProperties(schema)` then you can remove the `if (createWriterFunc != null)` check below.
This will be a loop if the loop contains a list.
I think this should be `zpoolListConfigConfig` instead. It should not be `Optional` since we're not using it in the pool.
You don't need this. You can just use the ba_6x_tier1_team?.
I think this needs to be reverted
Why is this needed?
do we need this in the base class?
This is a bit confusing to me, because `paging` is the `paginggroup` file that should be renamed.
Why not just use the `--reupload`?
Shouldn't this be part of the API?
This is a bit weird, we need to set `isVisible(getContext() && !mSession.hasDisplay())` to true.
This is not the right fix.
Why not use the `&&` here?
Can you change the space at the end to be consistent with other places?
This should be moved to `semantic_errors` since we're not passing it to `_inputs`.
It looks like this class is unused now?
I think we should keep this as `api`. We should probably move the other imports to the top of the file.
This seems a little strange to me. What about `text += FloatToStringtStringHex(val);` ?
I think it is better to have a `AppName` field in the name.
I don't see a need for this, but I'm not sure how to get the `harparser` from the `aws` package.
What about `__dirname}` in here?
I think we should use the `List` here instead of `new` here
Is this a typo?
This should be changed to `opts.fee` as well to avoid confusion.
This is a good thing to do, but I'm not sure it's a good idea to have a conditional on the block. I think this is a good idea to be more specific, though.
This is not a good place to put a `*` in the `Set` struct.
Why is the `VerifyFingerprint` now needed here?
This import should be removed.
I think this is the only place where you're using this. It seems like it would have been better to have a new function that takes a map and returns an error.
@wachterjohannes Shouldn't this be `LOG.finest(String.format("Connecting to %s and %s", publishConnection, subscribeConnection)`?
I don't understand the logic here. The `unsafe` call is not needed.
Why is this needed?
Why do you need to check `if len(spec.Xattr) > 0 {` ?
Why do we need to set the `UserPreferences` here?
I think the rest of the `name` is unnecessary.
I don't think this should be here.
Why do we need a separate function for this?
Use `self.config` instead of `self.config.get`
Is this change required for the tests to pass? I don't see any tests that use this method.
This field is not used anymore, right?
This was a bug in the `host.is_cygwin?` block above. I think it should be moved out of the `host.is_cygwin?` block.
I don't think we should be using this for the other PR.
Can you please add a `using` here?
@bartonjs - I don't know if this was the intention for this, but I think it's not a problem for the user to have this. I don't know how to do this, so if you think it's better to have it here.
it should be a `ToString` variable
@becker33 I think we should use `type` as the default, to avoid the warning.
This is an API change. It's a bit unfortunate that it's a doc, but it's a doc, and it's a change of behavior, so we should be able to remove it.
I think it would be more clear to say that the return value is a list, and then we can just say "no filter" or "no filter".
I think we can just remove the Reader altogether and just let the `FilterDeleter` field be `FilterDelet` to match the `FilterDeleter`
Why are you doing this? Isn't it enough to just remove the `num_threads` property?
I think this should be `SignedFunction::getAuthor`
Should be `_`
Why did you remove this?
This is the only change that affects the `describe` field.
I'm not sure why this is needed? I don't see any use of it anywhere
This is a little confusing. I don't think the name of this variable is right, it's a bit confusing to have a method that returns a string that's not a string.
I'm not sure if we should add this line back in, but it seems like it should be an error if we're not doing it right?
I'm not sure if this is a good idea. If you don't want to do it for a specific reason, you can just do `Config.Range()` instead.
is this necessary? if not, we should have it in the `def` method.
I'm wondering if this is the right place for this to return a struct that does not have any arguments?
Why was this changed?
this limit is a 255 so we don't need to change that.
This is a change in behavior, but it seems like it's a leftover from the PR.
This is not correct. It is not a `0` check.
Is the `ramdisk` argument used in this file or should we remove it?
Is this still needed?
(Pre-existing.) I'd probably just put this in a helper block (with the `&&` check, it's not really necessary)
Why is this file changed?
What is `HashSet` doing here?
"Approved" is not a CertificateRequest, please fix
I think we should remove the null check here.
This is a bit confusing to me, as we already know the order of the order of the order of the order, why not just remove it?
I think you can just do `if opts[:version] ? "puppetlabs1" : 'PYTHON0']`
> Also, I think this is a change in behavior that should be fixed in the same patch as the other changes in the PR.
`strings.Contains(input, string(phClose)` should also be added to `f ReplacementFunc`, right?
I think it's not necessary to put `blk.Transfers` in `IsCoinbase`
This should be `winVersion.major >= 10`, right?
I don't think we should set it to true, it's already set in the default value.
This does not look like it's necessary to copy/paste the page. It does not work with `@product`
Can these be removed?
This change seems unrelated, and should probably be reverted.
This is a very minor thing, but we should be able to use `FlagFrontendAddressWithAlias` instead.
This is a bit confusing, as the `Null` method is a `Null` and the `Null()`.
Should be `current.parentId() != null`
I think this is a better name.
The sync is now an `NewInboundOption` function and we don't need it any more.
Why is this a pointer?
You should also remove this line
Why not use `http.info`?
This is not the right place for this, since we have the `return` block below, we can just return `undefined`, right?
I don't think we should retry here, since it is a retry, so we should be able to make sure the retry gets set to `false`.
Is this needed?
Can we remove this?
This is the only change that makes me think we should just remove the `.spec` here and remove the `.close` call here.
This is a bit of an unrelated bugfix - but should be in a separate commit.
The `.Replicas` is used only when the user has been assigned a value. I think it should be moved inside the `.MaintenanceMode()` function, since that would make it easier to understand what the user is doing.
I don't understand why `bs2 > Bond::STEREOANY` is necessary.
I think this should be moved to the `deleteSyncSetResources` method.
This is a little confusing. What is the reason for the sseq >= sseq? Is that a bad idea?
This check is unnecessary.
Can you add a TODO here to make sure this works correctly?
I think we should check that the buffer is a valid integer.
What's the purpose of this option?
This is the main change. It should not be here, but it should be in a separate PR
Is this supposed to be `const` for the attribute name?
I would suggest `_print_table(table)` as it's a parameter.
Why are you removing the `ance`?
Isn't `connect_all()` a better name? AFAIU, this function is only used in one place.
This is not needed.
I would not add this method here.
This import should go into a separate commit
Is this the right place for these?
I think we can get rid of this line now.
This is not a good place to add this, since the variableInMap is already a list of variables.
I think it would be cleaner if we didn't add more information about the index here.
This is a bit of a hack, but it is not a problem. It is a bit of a hack, and the call to it is a very small thing to avoid.
I'm not sure if this is the correct fix. I think we should be removing all the `inheritdoc/>`s from the `OriginProcessorProcessor` class and remove the `OriginProcessorProcessorProcessor` class.
This should be a separate change, as the `flag.CommandLine.Parse` call is not being used.
This is not needed.
I think we should move this to line 167.
This is an API breaking change. I think the API should be `<int> EventId { get; }`. I think it is better to change the type of the `String` type to something like `string.Empty`
this should be `elements.emby-collapse.js`
Why not call it `FakeWebAPI` ?
Is this a typo?
This was the only change that was needed in #2727
So, we're not doing any operations on the `makeRequest`?
This is not a valid name, we should use `Timeu.date00`
`execution summary` should be `default=True`, right?
I think the previous code was correct here: if strings.HasPrefix(refStr, "refs/heads/") { .. } else { .. }
Is this change necessary?
I think this is a bit of a hack - maybe a better solution would be to use a different name for consistency?
I'm not sure if this line is needed anymore?
This is not the right fix, but it's not a problem, as it will be fixed by the change in the future.
Can you please add a return type to avoid this?
This is not needed, you can remove it from the try block
I'm not sure why you moved this check here?
I'd prefer to have this as `HealthCheckPath string ` is a bit more generic.
I don't think we need to do this. The `UserError` can be set in the `scName`.
Why are we not using `SubnetGatewayIPV4Address`?
This is the only thing that's going to be used to use `find` on a link.
The name of this file is a bit confusing. I would expect the name of this parameter to be `Raised`.
I think you should just add a `utils.SignHTTPRequest` call here to get the wrong error.
This test should still be testing that the successful tests are not breaking, since it's not a big deal.
I'm not sure if it's a good idea to use `concat` here.
I don't think this is the right place for this. I'd like to keep it as is. It's not clear what we're doing here.
This should be done in a separate PR.
Why is this needed?
This is a bit weird. I think it would be more efficient to use `.to("/se/grid/newsessionqueue")` instead.
I'm not sure why you changed the return type of the function.
`import functools` should be before the base class, otherwise it will break existing code.
I'm not sure if this is a good way for the `Map`, but I'm assuming the `Map` is the right name here?
Should we be using the `corev1` package?
You can't use `&mc->simd[0]` here, it will return `None`. I'm not sure what the best way is.
This is the only change that is in this file.
Why is this needed?
Why is this needed?
This test was not working before because it was failing in the test suite
I don't think we want to use it in the `app` package.
This is not a good way to fix this, but I don't know how it works. I'd rather see this in the `<Column>` interface.
Why are we making this change?
This is the only change that affects the other changes. I don't think we should be using the new `append_hint_to_enum()` function. I think it should be used for the new `append_hint_to_enum()` function, as it's a bit of a hack.
I'm wondering if it's worth to check if the user doesn't try any data reads or writes.
I think we need a `issubtype` function that returns `x` if it's `nil`. I think it should be fine, but it's probably fine for now.
Why is this in `waf.waf.ww+`?
I'm not sure this is the right change. The function `omp_set_num_teams` returns a boolean value. I think this check is redundant, since the `assert` is the default value for the `&&` check. I think the check should be in the `if` check above.
I don't think we need this anymore.
Why not just return nil here?
Do we need this method anymore?
I think we should do a check in `git` here, too. I think this is fine for now, but we should do it in a follow up PR.
I don't think we need to do this, we can just use `! global.googlesitekit.api` instead.
@kroitor since you changed the name of imageIO, it's already in the `ImageIOFactory`, so you can remove it.
Should this be a `Cluster` field?
Can we just have this in the function and do it in both places?
This should be `!aspects`.
I don't think it's needed.
Do we need to expose this as a public variable?
I think you can use `it.endBound_.rel_` here
this is a bit weird, can we just have a test that fails if this is the case?
Is this really the only place where `TelemetrySdkEventSource.Log` is called?
I don't think this is a change in behavior. It's a very good idea to change the API version in the context. I think it should be in a separate PR
@jridgewell I think it's better to have a default value that would be set to 0.0.0 so we can make this default to 0.0.
I think we should use the default setting of the default setting.
`checkLayout` is a little confusing to read when `layout` is defined as `undefined`, but I don't see any reason for it.
This is not needed.
I don't think you need to remove this file.
Is it possible to get the reqid from the `extensions/request` package?
I don't know if this was a bug. I don't know if it's worth it to keep the name of the variable.
nit: you might want to call this `ACMESelfCheckFailurePolicyRetryForever`
I don't think we should be using `import` here.
This is not the right place to use the new `key` attribute, but I think it's a little confusing to have a test that checks for the `conda/` attribute.
This should be in the `#if NETFRAMEWORK` too
I think this is not needed, because `b.Match.Priority` is already used in the `if` block above.
I don't think this is a good change. It seems to me that `using the PackgetVer structure` is a very confusing name. What do you think?
I think we should not use `makeDir(getDirName(path)`, as we already know it's not a file, and it will be a file that will be not already in the list of files. Also, we should use `getDirName(path)` in `makeDir()`.
This is a bit confusing to me. Why not just use `sptools/go` here?
why is this change?
remove empty line.
I'm not sure this should be in here. The function is only used by the function, so it should be moved to the function itself.
This should be set to true even when `_target` is `nil`
This should be `torch.Tensor`
I think this is a leftover from debugging?
Why do we need a separate `userInputState`? Seems like it's a part of the spec, but not a big deal.
I don't think this is needed, since the `find_by_vanity_url` already checks for the class name.
Should we do this in a single function?
This method is only called in `ErrUnimplemented`, so I think it should be moved there.
This is not needed.
I think we should just remove the `->->->` here.
can we use `HandleUpdate` instead of `HandleUpdate`?
I think we can just remove the test function.
Do you need to add any other docstrings for this new parameter?
I think it would be good to have an explicit test for this
I think this is the only change that is needed.
Can you add a docstring to this?
This is a very good candidate for an extra `>=` statement. I'm not sure if the `>0` is a good idea.
This should be public
I'm not sure about this. I don't think we need the blogIcon flag anymore.
Is `RegisterBootstrapContainer` more than `VM`?
Please use `INFO` instead of `INFO`
This is the only place where we need a label.
Please remove the trailing whitespace on this line
I think it would be good to have a `fileBytes[:]` here, and then check that the `fileBytes` is empty, and then set the value in the `if cfg.ConfigTemplate != ""` above.
I think this is not needed.
This is a bit confusing, as `@object.published` will never return `nil` if `@object.published` is `true`.
Why was this added?
Why is this needed?
Nit: I think this should be `USED_PRICE_TOO_LOW`
I don't think this will be the right place for these. I think it's better to do something like `typ MonoType.Vectorized` and then just use that in the `if (*FunctionExpression)` instead. The `#ifdef OPENSSL_F pluck_Vectorized` should be fine, and we should also add `typ MonoType` to all other `typ MonoType`s.
I'm not sure this is the right place to do this. The `abort` should be used in this function, not the other way around.
I think we should not have this function in the `testutil` namespace.
Should we use the `system_bottommost_compression` type?
@bvaradar We can't use `isConnected()` here
this import is not used
This is a little confusing, why is the "", nil?
I think this should be named `os.path.basename`
I think you can remove `repositoryHTML` from the previous version as well, it's not needed anymore
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Use 2 (not 4) spaces for indentation.<br>Prefer single-quoted strings inside interpolations.
Can you please add a TODO to remove this?
Does this mean that if a test fails the cache is not nil, the test is still in the cache?
I think this is a good thing to do. I'd rather have a `error` field in the `backend` field that is used in `attempt_drm_backend` and then we should have a `backend_drm_backend` flag.
How about `TabData._initializing`?
This change is not necessary because we don't have a set_found anymore.
Why do we need this?
Why change this?
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [83/80]
Should we make this `RestConst.REST_INVOCATION_CONTEXT`?
Should we check for `projectJson.File.Exists` before calling that method?
I'm wondering if this is the right fix for this bug. The `system` should be initialized with `#ifdef __linux__` instead.
It is not a good idea to use `dev->type` as the default value. It's a little confusing.
why do you need this?
I'm not sure we should be checking if `props.children.forEach` is true.
I think this is a leftover.
I think this can be removed.
I think this is a good idea to use `v1` for the `nil` case.
Why is this change necessary?
This can be `return number == null`, right?
is there any reason we don't use `.find`?
This is not correct. The key represents the IllegalArgumentException, which is not the case.
I'm not sure if we want to add these to the `CACertificate` struct since they are not part of the API.
Hmm, this seems to be an odd change. I think this should also be fixed in the future.
This change is not related to this PR, but it seems like we are not using it anywhere else in the test.
I think the `@since` should be `cannot specify assume` or `@since`
Why are we removing these three lines?
This change is not needed, the new name of the component is not needed.
This will be a bit more expensive as `if len(replacement) > 0`.
This should be `@private`.
This should be in the `if` statement, not here.
Why do you need to change this?
Please add the new parameter `blockDelete` and `currentRename`.
Can this field be removed?
Is this meant to be a Variable objects?
This is a bit weird. I think the `WValues` and `WferValuesWriter` should be removed, since it's no longer used.
This is a bit of an unrelated change. I'd rather have it in a helper method, like `encode!`.
I don't think you need this anymore.
This is a duplicate, not a duplicate.
@liggitt do we have a test that checks for this change?
should be `!== null && $this->min_bound === null && $this->max_bound >= $i`
hm, why did you change this?
@bartonjs, I'm curious about this one.
I don't understand the reason to keep this, but I think it's a little strange. I think the `syncPodEntry` function is used for the `syncPod` function, and it's not actually the case. I think it's just the case, and it's not a good thing to call it.
Line is too long. [83/80]
Why do we need to set this to 1?
This is a bit of a hack, I think we should probably just leave this as it is.
This is not necessary because we have `<M>`, but it is not used anywhere else.
This was just an incorrect assertion that `calledThrice` is not set
This is a little confusing. What's the difference between `is_content_editable_prop` and `_is_editable_object`?
Do we need to make this change? I think it is a little confusing.
The `Rails_subprocess_rank` function calls `get_data_subprocess_rank` which is used to create a single `const char *data` object.
why are we changing these?
Shouldn't this be `LOG(WARNING)`?
I'm not sure if this is a good solution. If we want to keep this, we should probably be more specific.
I think we should add a `*` in the `EnvironmentFiles` section.
this is not a valid action, can we use something like `@in_for_current_user` or something like that instead of `render layout: false`?
Should be `byteFlowKey = exflow.getProjectName().().submitFlow(byteFlowKey)`?
I would prefer to have an explicit `DescribeTable` that does the same thing.
Can you please add a comma at the end of the lines so that it's easier for future changes to the code?
this is the only one I think, but it seems to work with the other tests
Is it not used anymore?
This change is not related to this PR, but I think the more elegant way to do it is to add `wait()` to `wait()` and `wait()` calls.
This should probably be in a `Level` struct.
Can we remove the `order` and just use it in `order-by-config.js`?
I think the `let` can be removed now, we don't need the `const` at all?
I think this is a good time ago, but we should be consistent and not use the `resolutionOp` as a name. `newOp` is not really a good name.
This is the only place where we can use `getSubVisitor(BooleanClause.Occur.FILTER, this);`
What's the reasoning behind removing the `long`?
I think this is a good time to remove the `Substring` and use `str` instead of `Substring` everywhere.
What if the node_l->peers is not an array of the same object, then the local variable will be always false?
Why not use `serge@jkiss.org` ?
this is not used anymore
I'm not a huge fan of the `ProcessLabel` function. Is there a reason we can't just pass it directly?
Please remove the extra spaces between these two and the opening brace.
This should probably be `str(source[0] - 1] + "html", str(source[0])])`
Line is too long. [84/80]
I think it's better to just do `c.IsLogged = c.Data["IsApiToken"]` here, since the check is `c.Error(401)`
@deads2k i think this is the right place for this. the condition is `if len(oldSyncStatus.ResourcesToDelete) > 0 {` should be `if len(oldSyncStatus.ResourcesToDelete) > 0 {`.
This file is used in 2.0, so it should be renamed to `account.CryptoSm2 = true`
Is this a BC break?
This is not the correct usage.
weird, but we should probably keep the go-versions and use a go-versions
This should be `typeof(data) || data === 'random'){`
This would not work. `add` and `addforced` are not called when the `getName()` is called, and the `addforced` is called when the `getName()` is called.
"with "only non-empty fields will be serialized. "
This method is not actually used.
I don't think this is the right place for this. The first `ifPresent(t -> t.accept(this, arg)` should be `ifPresent(t -> t.accept(this, arg));`, and the second `ifPresent(t -> t.accept(this, arg))` should be `n.getMaximumCommonType().accept(this, arg)`
This was a bug in the PR, and I don't know if we can fix that, but we can keep this package private.
How about moving `operation` into `BaseTree.py`?
I think we should use `None` as default.
This is not the correct error, we should check if the field is not set in Search.
I think this is the only place we need to make sure that the environment is not set in any place.
Can you please change the name of this variable to "Data will be deleted"?
Can you add a spec for this test? Those are related.
Is this needed for the build?
I would prefer to move the `.get('open-base', None)`, and add a note about that (I think)
This is a no-go.
Missing `before_save` arg.
Why did you change this?
Why do you need this new line?
I think this is the only change that is needed for the `#include` to be removed.
The `expressionMetaModel` is used to set up the default value. The value is not used in the test class. It is used only once and it is not a valid value for this test.
I don't think you need the `#include <` in this file.
I think this can be private
Why was this changed?
I would prefer to see a `_` here, but it's not clear what it does, and if it's not there is any issue it's not. (I'm not really sure if it's worth the suggestion, just wondering why the `_` is needed)
I think this change is not correct
Can this be done in another PR?
Can we just remove the test `t.Error()`?
I think this is not the right fix. The other option is to use `isVersion` instead, and remove the `isVersion()`.
should this be a debug log?
Why do we have to change this line?
I think it's better to put it in a new line.
This error is probably unnecessary since you can't rely on `notifyTraffic` on it
This isn't used anymore, is it?
Why not use `h.clientPort != null`?
I'm not sure if this change is correct.
I think this is a leftover?
This is the only place that uses this function, which is not what we want. I would rather keep it as a separate function.
This one still needs to be moved to the previous one
We can also change the `subnets` field to be `destroy` and `SubnetsSubnets` in `testing.go`
I think this can be removed, since we are not using it anymore.
Why is it necessary to test the actual network test?
Since this isn't an object, I think we could remove the "mailer.proposal_link_text" prefix here.
This seems like something that should be moved into `RACK_ENV`?
I think it's a good idea to make this `return new ArrayList<>();`
This change is not related to the fix.
Shouldn't this be `@return`?
This will break the tests that use this function. I don't know if it's a good idea, though.
This is the main change that fixes the problem.
Is there a reason for the `rclone` type?
This is the only change in this file. The `clamp` method has a `sprintf()` method.
Why is this needed?
This change is unrelated to the PR.
I think this one should be `with blank line`
I'm not sure if this is the correct test.
Why did you remove this import?
@matt-gardner Is this a breaking change?
This can be simplified as `throw new Error(message);`
I think we can use a long name here
Why was this removed?
Why is the committee not needed?
Please use `org.mule.runtime.module.queryId`
This is a little hard to read. It's not a big deal, but I'm not sure if the type should be a `a` or `a` instead.
This is a breaking change. It's not a public API change, and we should be able to make it a public API.
This is the same as `asList` method. It should probably be renamed to `getServiceNames`
I'm not sure this is the right way to do it? I'm not sure we need to add this to the `Rails` model. @becker33
I think this should be `OUTOUT.getfilesystemfilesystem(OUT.getfilesystem())`
"..." should be "not"
Nit: please avoid import *.
Is there any particular reason why we're using a single migration here?
I think we should be able to use the `isinstance` here.
This is not needed anymore, we can just remove it
Why do we need to add this as a separate argument to make it more explicit? (I think we should be able to remove the argument entirely, but I'm not sure what the best way to do it.)
`parent` is a `dict`, so I would call it `set_name` or something.
This should be `Kafkastream.Start()`
I don't think this should be here
This test is not really needed, since it isn't a new test suite, and it's not a test file.
I'm curious why you'd use a `write.object-storage.enabled` property.
Why did you change the assert?
This is not a valid size, it should be `[0][0][0][0][0][0][0][0][0][0][0][1,0][2,0,0]`
Is it worth adding a new `isConnected` method to the `WebDriver` class?
Is this method still used? I'm assuming it's used in the code base.
I think this is the only change that affects this change.
Can you add a TODO to move this to the next PR.
This is not needed.
Would you like to add a check for the new `XMLConstants` package?
Should this be `RefreshAndGetAndGet`?
you don't need to add `opt.OptionConflictError`, you can just remove the try-except
Do we need to add a new context manager forren't these? I don't think there is a need to wait until we get an attempt to parse.
I think you should use `identifier.name()` here.
Layout/SpaceInsideHashLiteralBrails_helper: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBrails_helper: Space inside } missing.
Why is this necessary?
This is a bit of a hack, but I'm not sure how to fix this, and I'm not sure how to test it.
We can remove this line now.
Why do you need to change the signature of the filename_size?
Why is this needed?
This line can be removed.
Let's just call this `application_uris_enabled` and remove the whole method.
I think we can just remove the `System.Timer` here.
This is a very generic thing, I think it would be better if you used a copy of the `DataArray` object to be a copy of the `DataArray` object.
I'm not sure if it makes sense to add a `SetWriteDeadline` function here.
I'd like to avoid the double underscore and just use the full path. The name `azkaban_project_dir_size_in_bytes` is a bit confusing.
This is a breaking change.
This is not the right place to add this. I think it should be `internal string MachineName { get; private set;`
This is a very confusing change, as it's in `ip6_ismaddr` and it seems to work as expected. I'm not sure if it's worth it, but I'm wondering if we should just not be doing this in a separate PR.
This should be `const std::vector<Status>> NebulaStore::multiGet(GraphSpaceID spaceId, "bool returnPartly", debug>`
can this be done with a different PR?
Why did you remove the `contains30`?
why do we need this?
~~~You can use `!=` instead of `while`~~~ Never mind, I'm not sure why you removed it.
Final newline missing.
This should be `|| scoreMode.TOP_DOCS || scoreMode.TOP_DOCS_WITH_SCORES`
I don't think this is a correct change. I think it should be in the old version.
I would prefer to have a test that checks if the value was null, this is a bug, and if it is, then we should return an error.
I think it is not necessary to specify `compressed` in `argparse.rb`.
Why do we need this?
This is a breaking change, and should be moved to a separate commit.
This is the main change that fixes the issue with the bugfix. The `check_client_version` was not working before and was not working before. The `default` case is not needed, so the `websocket` is not in `request.headers`, so the check was done before.
This is not related to the fix. It is just a minor thing but I'd prefer we have it as a `*` in the test.
This file has the same problem as the main build system, which is not available on the client side. It's not used anywhere. It's a bit of a big deal, though.
I don't think this should be public, since it's not public
This isn't a problem. You should use the `full_name` tag.
You can use `org.sonar.java.lang3.StringUtils#isNotEmpty`
I think it would be good to use a `WithTime` method instead of a `WithTime` method.
Why is this line needed?
This test is failing because the tests are passing as `0.1` and `0.1` are now `0.1`. I'm assuming the test doesn't work, but it seems like it's not related to the issue that we're using `welcome_mail.from_0_to_end`. I'm not sure if we want to make sure the test is going to work as expected, and we're not doing any validation for that.
Should this be called `DockerStopTimeoutSeconds`?
This import is unused.
I think it should be a constant?
Why do we need to change the `spack_type` argument here?
Why not just return `True`?
This should be changed to `goimports`.
Should we also support the `privacyMode`?
Why is this change necessary?
The correct name here is `using System.Linq`
Should be "api" instead of "k8s.io/apimachinery"
I think we should also add a `org.mule.runtime.module.extension.extension.extension.internal.internal.internals.time.internals.time.time.in-predicate-limit` to this class and make sure we don't need to have a way to specify this value
Why do you need to update this?
Is this supposed to be a list?
This was a bug in the testing testing.
@kargakis this is the only place where we can't use the new `E501` module, but I'm curious why we need to change this.
I think we should be able to remove this too.
Please add a license header here.
Can you add a docblock here?
why do we need to handle the case here? I think we should just have one of these servers and use it for both.
I'm not sure we need this change? I can't seem to be confused with the code in the code, but if we do, we should do something like: `if len(a) == 2 && name == nil && name == nil && name == nil && name == nil && name == nil`
I think this is a breaking API change. It's not really a big deal, but it's just me, I'm not a fan of this name.
This field should be the same as `CompileCompileup_step_equal` in the other PR
I think this is not a valid import, can you remove it?
I would prefer a separate PR to use the default build agent, not the default build.
We can change this to `__time_less__`
This is a breaking change.
This should also be `thrift_protocol_write_message_begin`.
Why not use `ChaosStatus.Experiment.Phase` directly?
remove the empty line
This is not needed anymore
I'd prefer to have the same logic as the other code base, e.g `DEFINE_true`
I think this is the only change in the PR.
This is not a good place for this.
Please rename to `UPDATE principal`.
This is a change in behaviour, but the tests are failing because of the change.
I don't understand why this is removed?
I think this is not a public API, we should add a new constructor which will do nothing.
I think this should be changed to 0.1.0
This is a breaking API, I don't think it is a good idea to have it in the API. I'd rather have a separate method for it.
This is not the same as `getMaxPriorityFeePerGas().get().getAsBigInteger().longValue()`
I think it is still useful to keep the `getInstance()` method and just have the exception message be removed
I think we can just remove this, it will break anyone who has already added a "default to this" feature.
Why do we need this change? Can we just use `approved` instead?
I'm not a big fan of this name. It's a very good idea to have a method that does the same thing. I think it would have been better to do it in the `AddStateChangeEvent` method and use that here.
I think it would be better to use a `ConfigFor` constant here. That way we don't have to have an explicit `*ManagedPlugin`.
I think we can remove this and just change the `AWS_JSON_CONTENT_TYPE` to `ProxyListener`.
Nit: It's easier to understand if we have a `Task ExecuteOnMainThreadAsync` interface, but it's a `Action` interface.
Why do we need this function now?
Is this necessary?
This is the same change as in `maneuver_experiments.js`
Is this related to this PR?
What's the reason for this change?
Can we add a TODO here to add this to `VersionDetailsPatch`.
This assertion is still useless, we can remove it.
I don't think this should be `False`?
I think this should be moved to a common place.
I think it's better to use the `fontawesome5_icon_mixin` constant here, and add a new one for the `fontawesome5_icon`.
This is the only change that affects the original implementation of the `snapshotMan` field. I think we should just remove this one.
Can you please add a `TODO`?
This is a temporary temporary, not a temporary.
Please add this import to line 50 (and several more places below).
Why not `host`?
I'm not sure this is a good idea. The old code was supposed to be using `IF_AARCH64` to return a value, so it's not a valid value. I'd just call the new function here.
this is not right. if kv.second is null, the second would be set to zero.
I think it would be more clear to change this to `AuthFree` and `SFunc HandlerFunc`
I think we can move this method to `InputWriterCloseErrorCode` and move the logic to `Close`.
This is a breaking change, but I think it's better to remove it.
Line is too long. [84/80]
Isn't this the same as the one below?
I think this is a bit confusing as it's used in `getRootCategory`, but I think it's a bit confusing to have it in the `getRootCategory` method. It's a bit confusing to have a `is_id` check in the `if` statement.
`public event EventHandler Changed;` is a little misleading because it's a nullable member variable.
I'm not sure this is necessary. The wsAppManager is used by the wsReader, so it's a subclass of the wsApp. It is used by the S3.x version.
I think the new field name should be updated too?
This is a bit of a hack. I'd prefer to have a method on the `valueFormatter` that takes a `IValueFormatter`, and then use that to determine if the `valueFormatter` is null.
We should be able to use `kwargs` here, as the default value will be `None`.
Can we move this to `api` package?
Could use a debug log for this
I don't think we should do this. The `Origin` property has the same logic as before. The `Basetrace` attribute is not the same as before and can be deleted.
Shouldn't we also add the `metav1` and `k8s.io` here?
I think we can remove this method and use the new `getDispatchMethodEnabled`.
I'd prefer to see the condition in the `if (err.code === 'ENOTEMPTY' && numAttempts <= maxAttempts)` as it's a constant
Why not just catching exception and catching exception?
Why do we need a new field?
I don't think this is correct. The old code was not able to do this for a specific test, so I'm not sure if we should do this.
Which case is this?
how is this different from `f1`?
The `$currencyData` is not set to the `$this->currency_TYPE_INTEGER` property. It is not used anymore.
This TODO can be removed.
This line can be removed.
I would move the `tab.data.input_mode` inside `on_mode_entered`
@alalazo Is this change intentional?
Is this class still needed?
@mattcaswell, this is a bit weird, but I think it's best to just remove the `tr` argument from the `OLD` interface. It's not a blocker and we're trying to move away from the `OLD` interface.
This is a change in behavior, but I don't think we need to add anything here.
This change is not needed
Shouldn't this be part of the public API?
nit: remove empty line
Shouldn't this be `LOG(ERROR, checkpointPath, "Remove exist dir failed of checkpoint : " << checkpointPath;`?
Why not `private $linkFormat`?
Why is the other read options optional?
I don't think we should do this. The clock is always the default, and the clock is always the same as the default.
This was a typo, and was the other one still useful.
I don't think this belongs to the enum class.
I think you should add `000000` as well.
I don't think you need to use a separate `*byte` here. The `*` is a bit confusing, since it is not a valid URL. I'm not sure if it's worth it to just have a `*byte` or `*byte` as a `byte` and a `[]byte` instead of a `*byte`
This is a bit of a hack, but I'm not sure how to get it, and I think it would make sense to have it here to avoid some confusion. The `name` argument is not a `(Optional, doc)` parameter.
1. Go to `Default: false` 2. I think this `Default: true` should be added to the docstring. 2. I think this `Default: false` should be added in the docstring.
how about `planner.py` ?
This change seems unrelated to the PR?
@zcbenz do you know what is `killMockExecCommandAgent()` used for? I don't see it in this PR.
Space inside { missing.<br>Space inside } missing.
I think we should be able to remove the `long` count from the `opae_api_adapter_table` function.
I think this should be `current_[mongoid]:query_cache, cache_table`
can we add a `:funder_content` column for the foreign key and then the foreign key for the foreign key?
I think it's better to move this line to the top of the file. It's not related to this PR, just a question.
Is this really the correct place for this?
This will be removed.
I think you missed `Invocation` here. It is not needed.
I'm not sure about this. Why not just add theSlugs to the constructor?
I think we need to do this in a few places. Can we just remove the `dels` function?
What's the purpose for `Redeemed`?
I think this should be `.to_content` instead of `.to have_content`
We should log the full logs.
I think this is a good idea, since it is a `IEnumerable`, not a `ICollection` object. We can use `ICollection` instead, but this is a little bit of a weird thing to do.
@deads2k @tnozicka this is a change in behavior.
shouldn't we use the same type as the other classes?
I think this should be reverted.
Why remove this?
This is a breaking change. The `Dir` is not needed here, and the `Dir` is not needed. The `Dir` call below is only needed when `path` is not provided.
I'm not sure if this is the right fix. The `TextUtils.isEmpty` method will be used for a non-null pointer.
I think this is a leftover from the previous PR.
Not sure if it would be better to check `exc_info.value` here instead of repeating it in `assert str`
Isn't the `keybase.IsbidEndpointHandler` the same for both `ModuleHandler` and `parameterHandler`?
`file` is a `None` here, and it is not a boolean. `isinstance` is a boolean. I think it would be more appropriate to just have `None` as the name.
This change is not needed, right?
Why is this line changing?
For this one, I think we can just use RamUsageTester.sizeOf directly.
@danrot what do you think?
I'm not sure this is the correct way to go. It looks like this was just a bug.
Is this needed?
@jcotela is there any reason to make this work?
I'm not sure if this will work for now.
nit: `null` could be a `Optional`.
Why not just pass in the `_ = ClearTombstonesForNewStorage(tds.db, cKey)` directly instead?
Why we need to pass timeout to the caller?
I'm not sure if we should be changing the output here. I would expect that we don't have to do this in the `w.LogWorkflowInfo` call, which will do nothing if we do not want to do any regressions.
@jackfrancis this should probably be `listenbrain` instead
This should probably use a constant for the new one
This is the main code. We need a similar pattern for the `username` password. We should probably be consistent about how we name the `username` password.
This was a typo I believe.
I think it's a good time to make this configurable, and add a note about how it's implemented in the future.
Is this needed?
Wonder if we should be able to remove the assertion that the `not_to` is not specified.
Let's call this `_deprecated_only`.
I think this is the wrong place for this.
This should be `protected static`
This should probably use `buf.WriteString("<binary>")` to avoid the duplication.
remove this line.
I think you can just remove the `null: false` here.
This is the only change that means the test is failing on all platforms. I think it should be removed. The test is still testing for the test suite, and the test is still testing for it.
this is a bug fix. It is not related to this PR but it seems like this will be handled by this PR
@bparees this is the only place I'm not sure about.
I think it's not a good idea to check the `pin-mongos` in `loadAfterSuite` so that it can be used in the test. I think we can check if it is a good idea.
I'm not sure why you changed this.
This is a bit of a mess...
This line can be removed.
This is the same as the other `getChainId` method.
Can we just use the `e.zone.IS_cert` here?
I think it's better to have this in a different PR, and just do it in a separate PR
This should be removed as well.
@bvaradar We are not doing any changes here, but I don't think we need to change the state of the volume to the volume.
I think we can also remove the `platform\.gcp\.project` argument from here.
Why do we need to change the type here?
We need to make sure this is a valid metadata.BuildAsString()
This is not the right approach, as it's not going to happen, but the `checkHandshake()` is not called. I think it's better to return a `true` value, and return the value, and return the `false`.
Could you remove these spaces?
It's a little confusing that we have a `WriteTransactions` function that we return from the `WriteTransactions`.
This import is not needed.
Can we use `saml.currentTimeMillis()` here?
This is a bit confusing. If `IsEnabled` is called, then `GetAsciiStringEscaped` is called, it will return `true`. If it is, we can return `false` instead.
I think we should use `tizen` instead of `canPlayType`.
I think we should move this to hipErrorInvalidValue.
This is a breaking API change. I think we should be using the package-private class `protected $indexingConfigurationsToReIndex = []();` and `protected $clearSearchIndex = [];` instead of `protected $clearSearchIndex = []`.
@matt-gardner, is there any way for the "return 0" to be returned here?
I think we should just remove the `else`. If the `listener` value is set, we can just set `config.add_subscriber` here, right?
this can be just `@team_page.present?` right?
I think we need to check if `ivLength == 32` before calling `Serialization.getDecryptingCipher`.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I think this is not the right way to setuptools due to the default behavior. It should be `setup_requires`, and if it's a setuptools, it should not be set to the default.
nit: I'd prefer to have a separate struct for this.
This is a bit weird, we need to use `abspath(x)` instead of `abs`
This is a good place to add to the `ByteSize` struct, as we are now doing the same thing in the `ByteSize` function
This will break existing `flowOperations`s.
Line is too long. [83/80]
I think we should just make this `require` instead of `string`, since it's not a big deal for the test.
I'm not sure if this is the correct way to fix it, but I think we can do it in a follow up PR.
I think this is a good idea to change the state of the task in the new code to avoid having to do the same thing.
I don't like the idea of having the ` hiveTableName` argument, but I'm not sure it's worth it to do anything.
This was removed because it was not used in the constructor.
I don't think this is needed, we already have a default value.
I think it would be better to have a separate method to avoid duplicating the API and add a new API for each property.
Is it necessary to add this to sync sync?
SealedSecretEncryption is not necessary, but it seems like a diff. Hopefully we can remove the explicit check.
I think we can remove this
I think we should avoid this import.
Please don't use wildcard imports.
I'm not sure why this is necessary, but I don't see any tests in the test suite that have the effect of this test.
I think this is a good change. But if you want to make sure it works for all the config versions, then you don't need to pass a config.proxyType, then you don't need to pass a config.proxyType, you just need to pass the config.proxyType
I'd prefer if you didn't have to use `<%-` here, because it's already a warning.
Is this file meant to be in the middle of the version?
Can you use `Ani|Tra)/.test(key)` here, instead of the string?
I think we should use the network.name here.
This should not be here. This import is not used.
I would suggest to add a new method `HistoricDetailQuery occurredAfter()` in the interface, to avoid any conflicts with other plugins.
This should be `Task.Task()`.
This import is no longer used, right?
What is this used for?
`includes_mentor?` is the only thing we want to do here is to change the `add_metadata` to `add_metadata_metadata`
Why is it `Array#contains()` here?
I think it's better to make this a `const` statement, and just check if the bundle is set.
This seems to be a bit confusing. Can we have a `throw` here instead of `catch`?
Is this a typo?
Shouldn't we use the same for this one?
I'm not sure this needs to be public - it is not a public method.
Is this the right way to go to the `GONE`?
I don't think this is the correct place for this method.
I think we should add the same name to the enum. Instead, we can add it as "no-js-export" and "no-without-SY" to the name.
This is not related to the PR, but I think it's a good thing to do here.
Is this a BC break?
Could we use `const` rather than `const` here?
I don't think this is needed.
I think it's better to use the class name here
I would prefer to have the return type of this header. That way the `Hash getBlockHash()` function can be called from `Hash getBlockHash()`.
Why not use `_check_slug` instead of `_STORE_NAME`?
I think we need to add these new fields to the top of the file.
I think this is not right. The new behavior is to set the new behavior. We want this to be `-1` and `-2` as a boolean for this.
This is the only place where the `#if defined` would be defined.
I think this is not used anymore?
We should probably be doing this for span based on its request and uri as well
(style) line over 80 characters
Can we add an `.current_user.message` file that is used in the `copilot/.workspace`?
I think it would be better to have the test in the source_type and then apply the source source_type in the source_list.
This needs to be added to the `Sabre\Event` interface.
Should we add a TODO about that?
I'm not sure why you made this change
I think the only change in this file is `ansible/test_README.rst` which is also in `isestinfra`. I would prefer to keep the `ansible` prefix as it is.
I'm not sure if this is correct. If you are not going to do this, you might as well remove it from the `if (translateSource->getCharSet() == CharInfo::UnknownCharSet )` check below.
This can be private, as we have a property that is not set by the caller.
`user_id` is a string so I would not add it to the client
nit: I think this is a mistake.
should we also add `serveStatic` in the changelog as well?
Why do you need this?
Can you use a more descriptive variable name?
This is not correct as it is already handled in the `GetArchiveFileName` call above.
I think we should be able to remove this
What is the purpose of this?
why did you remove the `clpsK`?
@smarterclayton do you know what the "Deprecated" block of "fadirectRawBlock" is?
I think we can remove this now, we can remove it from `compute-ci`
I think we can just do `scripts(self):`
should be `body != null` and `body.toString`
Please add this to line 262.
I'd rather not have a import at the file level, it's a bit of a hack.
I think you should use `[key]` here
Why not have the license license?
Why did you move this line here?
I think this would be better done as a separate method, and you can use the `[NotNullWhen(true)]`.
This is not needed, because the `sysfs_format_ptr` already includes a new one, and it's a different one, and it's not a big deal. You can just write a `return FPGA_OK;` check in `get_sysfs_format_ptr` which will return the same object, which will return the same object as the first argument.
hierarchical_name is a bit too generic. Can you use it?
I think it's fine to leave this in, but I don't see any change in this commit.
I think it would be better to just use the `request.reply` variable here, and pass the `request.reply` in the `if (doc.WRITE) { ... }` below. That way the `request.reply()` call below will be the same. This way we can get a bit more about it.
We can't change the type of the `key` here, because the type is `null` anyway.
Why the change of the test?
This is a change in behaviour. The error message was "Fake pod object could not be created:", err)". The error message is not "Fake pod object could not be created:", err)".
this is not the correct form for `not_to`
Why not just do the `if time.Since(startTime) < 30*time.Second)`?
The DomainEventProjector class does not exist on Windows anymore.
Why is this change required?
Redundant self detected.
This is a bit confusing, as the protocolID is already in the protocol protocol.
I would suggest to use the flow status here, and instead use the flow status in the event, we would not need this code anymore.
@mattcaswell, is this going to break the test?
Why is the name different from `xattr`?
I'd rather have a test that checks for this and the test.
This import seems to be unused
nit: you could use `.toList()` here.
Missing space after #.
This is a change in behavior, but I think it's a little strange.
I think we should keep the same name as in the other `MainGapicProviderFactory`
I'd rather we set `bgFlushDirOpBatchSize` to `None` here, but I think we can set `config.contains(rpm.BlockServer().RefreshAuthToken(1)` here.
This could be simplified to `throw new DownloaderException('CurlDownloader not supported param `acceptedHeaderTypes` or something similar, but I think it's better to have it in a single method.
This should be `logrus.Debug("Ignoring route with no destination", routeUpd)`
What is this change about?
This should be `_` since it is already a `props`.
It's a little weird to see this in the test, but I think it's better to have it in the test class.
I would use `set_variable_to_fe` here.
Why did you change this to public?
I think we should just pass the value to the function.
I'm curious why you added the Lemat-state flags here.
why do we need to add it here? it should not have it
This check should be done after the check in `listenSocket_ != THRIFT_INVALID_SOCKET ` before the check.
I don't think we should be using the `actions` option here.
Does this change have any effect on the server or just the link?
Is this change related to the PR?
I think this import is not needed
Can you explain the purpose of this test? It seems like it could be a single line file.
We should be using `zvolWorkers.ToWorkers` to get the same value for all the `zvolWorkers` implementations.
This is the only change that makes the API harder to read.
I don't think we should be using `goselinux` here. I'd like to use `selinux.go` for this.
These two lines can be merged.
Should we also be using the ENABLE_QUARTZ? I think it would be more consistent with the other naming
Can we use `./pants help` instead?
This is a bit of overkill, but I think we should be able to remove this method and just call `New()` from the `New()` method in `New()` method.
This is the fix, we can remove the `remove()` call.
This is not a good name. The variable should be something like ``conda/v2/p2_user.rb``.
This isn't a good idea, but I think it's better to just have a function that returns a `String` and return `String()` instead of `String`
I don't understand this line. Is this line supposed to be here?
I don't think we need to do anything about the interface here.
remove unused imports
I'm not sure if this is the right place to put this. It seems to be used in the default config class.
This is a bit confusing, but I think it's not the right thing to do here. The zone will not be running for the `scratchBucketRegion` variable.
I'm not sure this line should be removed. The file system is not used anymore.
Can you use `manifests` instead, since you are already inside an existing `Set` block?
This should probably be a separate PR.
I think we should add a check here that the content is not present and the content is not present.
I don't think this belongs in the PR. I'd rather have it be `warnings.warn("Legacy BibEdit will be removed in 2.2. Please,`
I think we should keep ` duraton` for `actions` and `actions_path` here.
You don't need this, it's already in a test.
these were also not necessary.
This method is no longer used.
These 2 lines can be merged with the one above.
This should probably be a function to match the other `small_buff` functions.
I think this should be a `static` method.
Do we really need to import IntegrityError from updating this file? I think it's a good idea to just import it from the standard library (not a blocker)
Can you explain why this change is needed?
Why not just use `TestCase.UserName`?
This is not needed, the `Distributor` class has already been created.
@wachterjohannes Is there a reason you changed `InitializedN` to `InitializedInitializedOptions`?
I don't think this is the right place for this - it should be `GetCommits`. I think it should be something that is used by `CompareCommits`.
We should also check if the `errs` is not `nil`
I'd rather not have this be an enum, and just use the value of `string`, which is more readable than the value of a `string`.
What's the reason for this change? It's not clear why we have it here.
I would suggest to add `addRequestId` to the `Db-Request-ID` as it is the same as the default.
This should be a `volatile`.
@wachterjohannes Can you explain why you need to use sw here? Is the test failing on Windows?
This is a pretty expensive call, I'd just add a space after `for`.
I don't think we need to add a new function to the `handleUser` method.
Shouldn't the `SPIFFEID` be in the `SVIDStore`?
I think this is a good change. The code is not really doing anything about this. It seems to me that it's not a problem, but I think it's better to be explicit and return the error.
This will cause the line to fail (and will always be `true` when the line is `nil`).
This is a little hard to read, but I'm pretty sure it's a good idea. I'd like to see it more often, e.g. if `s:%d HTTP/1.1\r\n`, then `s:%d HTTP/1.1\r\n`.
This code was not doing anything, and is not really needed.
@mfojtik this is the only change needed?
@matt-peters for this, I think the `go` should be removed, because `package` is the same for the `<%_id>` tag.
I think we should add a `depends_on` function in the interface interface and rename it to `depends_on` or something.
Please update the docs for this new import
remove empty line
This is a little strange... why not return `return` and return `true`? Also, `is potentiall undefined`?
I'm wondering if we can just remove the `ApplicationHeaderPrefix` here, and have it return a `dict` that is already checked in this `pkg/config.go` and `app/config.go`
Wouldn't it be nice if we didn't have to import the old `account` package?
How about `|| 0` or `|| maxc > 0`?
I don't know if this is correct or not.
@kennknowles do you know what this is supposed to do? Is it possible to do this in a different way?
This should be a `else`
why change this?
I don't think this is right. The `Region` should be set in the `targetEnvironment` function.
Is this necessary?
Why do you have to do this? It is not a good idea. It was only for testing purposes.
What does this mean?
I don't see why this is necessary, but I think it should be moved into `SubscribePull` class.
This is not needed. You can remove it.
We should use a more specific location here.
You don't need to escape the `CUSTOM_TEMPLATES` variable here, it's already in `price`.
Why do we need this change?
I think it is better to just change the `NewWorkingSet` function to `NewWorkingSet()` and call it `NewNewNewSet()` instead of `NewNewSet(false)`
This is the only change that makes sense. The log level of the log level of the message is not a bit confusing. Maybe we could use `LOG.finest("When using the W3C Action commands, offsets are from the center of element")`
I think you can just delete `Converter` now that you have the `exception` argument in `org.mule.runtime.module.extension.extension.internal.util.StringUtils`
Why not just use the "min_count" instead of the default value?
Please rename to ` ActiveRecord`
I'm not sure this is correct. The `A-Za-z_][A-Za-z_.0-9]*)*\\]"` isn't actually a "hack" of the `\\` character.
I'm not sure what to do here is. The `StandardError` and `StandardLimitExceeded` should be used to be able to handle them. The `StandardError` should be removed.
Should we add `status_code` or something like that?
Can you please also add `TimeSpan.FromSeconds(10)`?
I think this should be done in a different PR, but I'm not a fan of it.
I think you can remove the `meta charset=\"UTF-8\">\n` keyword here and below
These lines aren't actually testing what we want. You should just use `#if self.load_time` instead.
I think we can remove this and just use the `BoxSet` class as it is used by both the `rain` and the `BoxSet`
I don't think this is correct. The session should be unacknowledged.
This should be a property.
I think this should go in the `CoreMetrics` class.
How does this relate to the `boltdir` type?
I don't know if we need to add this.
I think you can remove the `double` here and just `TRANS`
@agramfort this is the only one that uses this method, and it was a bit confusing. It was just the code that was not doing anything other than the `.sleep()` call.
This should be `/uu`.
I'm pretty sure this won't be done in the first place. The `ALIGN_FORWARD` call is not needed.
This should be `bool`
I'm wondering why `_get_value` is needed. I think it would be better to do `.replace(u'\u200E','').replace(u'\u200F','')`.
I think we need a space here between `(` and `{`.
I think we can revert the changes to this file.
I think we should check for error if the AWS credentials is set.
This is the change I was thinking of.
I think this file should be moved to the other package
This is not needed anymore
I think we can just use `to_replace` here.
nit: `isRay` would be better
This will cause a regression if `MetricsConfig` is not `null`
I'm curious why you changed this to `else`?
I think this is a bit of overkill, but I think it would be more consistent and consistent to have the `[]` in the `cloudformation` package.
@stephentoub why did you have to change this?
These two functions should be moved to a single file.
Is this change intentional?
This is a bit of an overkill. I think it would be better to use a variable `role` instead.
Can we use `f` instead of `f`? I think we should just use the default value for `group` and `File` here.
Should we make this a `metadata.ClientInfo`?
I think we should use the `exists` method here.
I don't think it makes sense to have a block in the `PushPushPushPushPushPushPusher` here.
This is not a good idea to use, but it's a little strange that `vertical` and `place` are the same. I think the `.place` and `.place` are the same.
I don't understand this change. Why is it necessary to remove?
I'm not sure if this is a good way to check for `_root_`, since this field is only used for the schema in a few places.
I think you can just use `String OPEN_FILE_COST = "read.split.open-file-cost", "file-cost", "file-size-bytes", etc.
This is not a very good idea. The `-line tools` option is not a `libunwind`, so I think it's more correct to just use `libunwind.h` here, since the only thing we have it is that `libunwind.h` is a list of supported values. I'd suggest to use `-line tools` as the key name, and then just have it be a list of values in the `libunwind` (or something similar) in the `libunwind.h`, and then use that instead of `libunwind` in the `lib
I think this is a bug fix. It's not related to the fix, but I'm pretty sure this is the right fix.
We should not have any data in there. We should probably check if we can use the same data in the data and check the whole data in the data.
nit: this could be replaced with `return null`.
Why is this needed?
Why not just remove the `NotFound`?
What do you think about moving this to a constant so that we don't have to make it into a separate file?
This is not needed.
Should be `@param httpEntity()`
I'm not sure this is the right fix. It seems like it should be `volatile` for `_property` and `_property` for `_property`.
This should be done in the `err`.
This is a bit confusing. If `eventEmitter` is closed then it will return `null`, so we should check that it is closed.
Please use the `DBURL` from the test.
I think this is a good idea. I don't know how I can see the name of the test - but it is a good idea to have it be a good idea to have the test in the name of the test.
Please use `var serviceNameMappings = source?.IsDictionary(ConfigurationKeys.ServiceNameMappings)`
Hm, this is a bug fix. We need to test the case when the `config` is not `None`, right?
Is this needed?
This file is no longer used.
This will need to be indented.
What is the difference between the two?
Why do we need this change here?
This seems like a good idea to me. I think it should be `config.New` or similar.
Shouldn't the `resp` be on the next line?
Why are we sure that the Request::HEADER_X_FORWARDED_ALL isn't the right default here?
This is the only one that is actually used.
This change is not needed. Please revert.
I think this needs to be added to both of these?
This is a test, but it should be removed.
I think we can remove this and just do `Single` inside the `if pricing_scheme == "primary", ...` block.
@agramfort this is the change I made to change in #2727.
I think this test is not correct. It's a test case, right?
I think this could use `jvm_TOKEN` instead of `_ACCESS_TOKEN`
should this default to null?
Wouldn't it be better to use the task task task in the state of the container? I think we are already doing that for all containers.
these are not related, but we should keep them as deprecated.
Why do we need to pass a struct here?
I'm not sure about this. It seems like we should be doing this in a separate PR. @jridgewell
I think you can remove the `g_autofree char *tmpname = g_strdup ("/var/tmp/tmpostree-deltaobj-XXXXXX")` part here.
This should be removed. The global var is now unused, so it should be removed.
What if the outputs is non-null?
This is a bit weird, why not just define a `/`?
I don't think you need to change this, it was added in the original implementation. The parameter sets should be renamed.
I think you can remove `is not work` and do the `try...except`
This is a no-go. The `true` value is not used by the code base.
This is the only change in this file.
It looks like this line is redundant now.
I think we should import this and move the import to the top of the file.
This is not a good idea, but I think it would be better if it could use a more generic name, and a more generic name would be `fanout-enabled` (or something else).
Can you please update the doc accordingly to reflect that change?
this function should be called `custom_recall`
nit: I think we should use the same name here, `--network-host-project` -> `--network-host-project-id`
Hmm, this seems like a bug. Is this a problem for the user to see?
Use the ` translate to prevent Violation category of the Rule` suffix.
This function is used in many places, so I would say it's better to call it `filter *proposal.Filter` instead of `filter *proposal.Filter` to match the other places.
Is this the only version that is used by the `app.Parse` call? If so, should we just add a `assert` call here?
I don't think this is correct, we should be able to use the new function name here.
Is this change intentional?
Shouldn't we be doing this in a try block?
Please don't include this include in the header file.
I don't think we should be passing tests here.
This is the fix, I don't think we should be removing this. We should either change it or leave the `+ from.toPath()` as a separate method.
I think it would be cleaner if you could do `additional_pkgs = Array.new` instead of `additional_pkgs.include?`
I think we can remove this `MatchFold` method and use it in `Text.go` and `Text.go`.
I don't think this is needed
I think we should add this to `saleor/core/pagination/pagination.yml` as well.
I don't think we should be using the `Environment.GetGetEnvironmentVariable` method here. We need to do a similar check for the other cases.
I think this will break all of the paths in `b`s, right? I'm wondering if it's possible to just do something like `path_ = paths[0] if paths_ else b""` instead of `path_`?
This should probably be `--stress-test-d` and `--stress-test-d` (or something else, but not in the other `--stress-test`).
I think this might not be correct, as the array array is always a single array, so it should be removed.
I think it's better to move the logic of the `Occur` call to `BuilderBuilder`, and move the logic to `Builder.add`
this should be `!== null`
This is not a good idea. It might be a bit confusing to have `multipart/form-data` in the name, but if it's not then we can just change it in the name.
I think this is a good candidate to use `require.NoError` as the default value for the `err` argument.
I think you can just remove this, it's not used anywhere else.
I'm not a big fan of the `opt_verify` property, since it's not a `V` and not a `V`.
why the change here?
Why do you need this?
Should we also add this to the `else` block?
Why did we remove this?
This is not really needed, it is already in the `Integer.MAX_VALUE - 4`.
Is this the only thing that's going to be about to use in the future?
Nit: these two lines can be removed now
Why not just do `self.settings.get("data-address", None)`?
Shouldn't this use the same tag instead?
why do we need this?
This check doesn't need to be moved to `expandableRowHeaderColDef`.
Why did you change this? I'm assuming it's a test, but it looks like it's not related to this PR.
Is it worth caching `prohibitedAttrs` to a list of `generic`?
this check is done in SyncService.verifyFee
Is there a reason why the change from two to one? I don't think it makes sense to have to be a string.
what is the difference between params_need_update? is it because it always returns a boolean?
This is not a valid change. The `decryptWithPasscode` will never be null. The `decryptWithPasscode` will be used in the `ConcurrentPasscode`.
Is this method really used?
This test is no longer needed.
I would call it "combined" or something like that
This was a mistake before, but I'm not sure why you did it.
Why remove the extra blank line here?
This is an unnecessary change.
I don't think this will work. We have already done that.
Is this the default behavior?
Why did you change these tests?
I think you can just remove this ifdef now.
Is this still needed?
The REC_BOOLEAN and the both are the same, but I'm wondering if this should be `char *)"BOOLEAN, (char *)"BOOLEAN";`
This is a bit confusing to me. If the `vertigo` is `nil`, the `vert` is `nil` in the context of the `span`, and the `vert` is `nil`, so I removed the `vert` here and the `vert` here and below.
Is it worth adding an additional sentence that would break existing models that are not using the same URL?
This should be removed.
This should be moved into the `User.new` method, it will be called in the `if` statement.
Is it possible to get a refresh from the SchedQueue instead of using a lock?
I think this import is not needed.
The lockBeforeLock seems a bit too generic for a lock.
This test is failing on windows because the import fails due to this change
Why is this no longer required?
Why was this removed?
Is it possible to have the same name as the `azkaban.logging.kafka.enable`?
Why is this needed?
Is it possible for the new behavior to have a single report?
I'm not sure if we should use `encodedError` in the code base. We can't just call `res.EncodeError` directly in the code base. The `else` can be removed. The `else` can be removed if we don't do anything about the `else` here because it's not a bit odd, but it's just a minor thing.
This seems like it should be `global.execCommand = jest.fn();`
Is this something that needs to be added?
This should be a const.
This is not a good place to put this. This function is used to return a promise and then we need to remove the getters.
@cra0zy - I'm not sure if this is a good idea. The only place where we have `losc` is in `value`.
Should be `results['gt_masks'] = @_only=True`.
It's a little confusing that the `OwnerEmail` is not set at the beginning of the `if` check, but then it's not. Should we be doing `info.OwnerEmail = updatedInfo.GetOwnerEmail() != ""`?
Shouldn't it be `0`?
This is the only change that affects the http.HandlerFunc(s.hasChunkHandler), but the http.HandlerFunc(s.valuesHandler). Is that intended?
This is a change in behaviour, so I would have put it here for a while. The new functionality is not correct.
This is a bit confusing, why is this change required?
I would move the check to after `$carousel->getUploadDir()` to avoid a `if`.
can you use the same naming convention as the other tests?
Please revert this change.
Just curious: why is this change needed?
why is this a constant?
Should we add a message about the error message too?
Redundant `self` detected.
Why not use `Map` directly? It's not clear why we have `Map.newHashMap` in the `Map`.
If you use it to determine the user's account, you need to use it to get the user's config file.
I think we should just use `padding: 0` instead of `padding:0`, since it's not a part of the API.
I think this should be `serverLacksFeature = 5`
Can we add a description here that this will break the existing task?
This should be the same as `for (size_t i=0;i<p.size()])`
This is the only thing I'm wondering. The `Address` and `AddressOffset` are not the same, so we should probably be more specific and use the same name here.
Nit: I think we should update the variable name to reflect what it is
I think we can remove this and make the `show_email_and_username_form` tag tag the last one, and just use `username_form` instead.
I think this was accidentally removed?
This is a breaking change, but it seems to me that the default value of the dataset is the same as `project_id`?
This is a bit of a hack, but I'm wondering if we should move this to a different function.
I think we can remove the `GetRequestStreamAsync` method now that we have the correct `GetRequestStreamAsync` property.
This is not a big deal. If you're using the "create" version, it should be "create_form" to be consistent with the other commands.
Is this a problem if the point is destroyed on up event?
In the past I have been thinking about this being a little bit more specific and it looks like the `ExternalApis::OpenAireService` is being used to determine if the current implementation is a `research_projects`?
This looks strange to me, but it looks like you're missing a line here.
This should be moved to a separate PR, it's probably not needed
This is the only place where we need to support a specific implementation.
I don't like this change. It's a good change. It's a minor minor but we should probably be doing this.
I think this is not a good place to put this. We have a `@offering` that we can't do anything about it, and it's a bit more complicated.
This method is used to ensure that the new `close` call was removed from the `markItemPlayed`
this is the only change that fixes the bug, but it seems like we are trying to get rid of this.
I don't think we should use the `Outbox` here.
Why not using the `reportUnusedVariables` method directly?
Is the class actually needed?
I'm assuming this was a bug?
why is this changed?
Is it possible to use `gocloud.dev`?
Can you explain why this is necessary?
This should use the new parameter name.
Do we need to make it configurable?
I don't think this is needed.
Since we are not doing this, can you make `includes_team` a set of boolean values in `includes_team`, so it's easier to read?
`Lock` is not needed here, it is already called on line 174
I would have put the data_encoding in the code.
You should not need this. You should be able to use the default behavior.
why is this needed?
I think it's better to put this in a `RootfsMountMode` and `RootfsMountMode` directly, since it's a `Collection<string>`
I don't think this is needed
I'm not sure if this is a good idea. It's a good idea to have an implementation that has to be done in a separate PR.
Why is this necessary?
I'm wondering if this change should be changed to `src/main/java` instead of `main`?
Why is this necessary?
The `FlatteningConfig` is not used in this class.
This is the only change that affects this PR. I think the `_std` variable name is a bit misleading, and it's a bit confusing. Maybe `_std` or something like that?
I think it should be `string`
I don't understand this. Why is this `_cancellationTokenTimeout` being used?
Wouldn't it be better to use an ifdef?
is this intentional?
@smarterclayton I think this is the fix for the bug, it is not possible to have a separate fix. The fix is to get the `tizenVersion >= 5` check and set the `keybase` value to zero.
Remove this empty line.
Why do you need to remove this?
I think this change is not related to the fix, but it's a minor thing to do. I'd rather have a separate pull request for this change.
I think this needs to be indented.
This is a very specific code smell. If you want, you could do something like a `e.printStackTrace()` instead.
This is the wrong change. The `client` was used to ensure we don't need to repeat the `deploy_mode` in the client.
Is this the correct location for this?
I think it's a good time to change the name of the variable to something more descriptive like `deleteAppOpts` or something.
Thanks for this, @bparees! Can you explain why this change is needed?
I think this is a bug fix.
I don't think we should add `BoolArray` here
I don't think we need this file.
The default of this is a number of places.
This is a little hard to follow: I'm not sure if we want to do any validation for the `controller` controller in that controller, but it's probably worth it to make it a little more explicit.
I don't know why we are not using `opts.prefix_size` here. I would prefer to have the same `if (opts.prefix_size)`.
This is not needed anymore.
Can you remove this line?
This is the only one where you've moved to a helper.
I'm not sure we want to do this. I would have expected this to be a `Read` rather than `nil` since the `Read` is not an `content`. I think it's better to have a `default` field, as that is what we do in `v1/Service.go`, and if we ever do it this way we would have to pass a `type` field.
I don't think this is the correct name. I'd prefer to have an overload of the class.
This is a change from `Object.skip` to `Object._test`
What's the point of this `ResidualEvaluator residuals`, do we need a null check on the `ValueFile`?
I think this should be a separate PR, but it's not really related to this PR
I'm not sure if this is the right fix. The `w.sourceExists` method should only return `false` if `StartupScript` is `nil`.
Is it expected?
@alexander-schranz are these two changes necessary for this PR?
`void render_args_struct(t_function* tfunc);` is also a function, so you don't need to use `void render_args_struct(t_function* tfunc);`.
I don't think this should be here. The `crypto` package is not present in the go file.
I don't think this is correct. The `ok == http.StatusInternalServerError` check is needed. The `ok == http.StatusStatuspro`.
(style) trailing whitespace
this is a good place to put this, it should be an API break
This is an error, but I think the error message should probably be "no outbound set for a service %q in dispatcher"
Why is this a pointer?
This is a bit of a hack - it should be `@phpstan-param array<string, class-string>`.
Shouldn't it be `TypeError: "World Id not in valid range"`?
I think this can be moved to a separate PR
What is the reason for this change?
@jcotela is this a breaking change?
This is not the correct way to write this. The only way to write it is that we can set the default and set it to `public` when the default was `public` (not `public`) is to set the default. I think this would be a good change.
This should be removed as the imports are from the main file.
Why did we change it to `/etc` here?
This is not a public API and will be refactored in a separate PR.
What if the blacklight has a hash?
Can you explain why this is needed? I think it's only used in the test, not the test.
This is the main change I think.
I think this was a mistake before
Can we use `NewConstructor` here, and in the other places?
I think it's better to make this part of the API and then use it in the `test_settings.py` file.
I'm not sure if we should be using this here, as we have already done it in the `angularangularACobility`
Nit: We generally prefer to use `PagedOptionalArrayMethodAsyncCallSettings` instead of `FlattenedMethodAsyncCallSettings` for the time being.
should be `internal/secrets`
I don't see a need for this change.
I think it's better to keep ` Output`, since it's a `const` statement.
This line is redundant.
Is there an option to use `storage.Conditions{DoesNotExist: true})`? I think it would be better to just do `!as(&objp)` instead of adding a new one in `createContentLanguage`?
I think we can just return errors.Wrapf(err, "error when get genesis block")
This is a bit confusing, because the `MappingType` is not in the `.Length` list, right? Maybe we should move it in the `partial` section, as it's a bit confusing? Maybe we can move it in the `partial` section?
this is just a test, right?
I think this is a bug, it's only used in one place, so I'm not sure it's correct.
I think this can be left as one line.
I think this needs to be a `DataContainer` instead of `DataContainer`
Can we add a `&&` in the new config for this new config?
I'd prefer to have the full imports, to avoid the double quotes.
This file is still built in in the GNU General Public License.
Do we want to add this to the top of the file?
Not sure if it should be a shape. This should be a long as the value is set to `str(dtypes)`.
Why do you need this? It is a bit weird. It's not a problem but if the user is trying to configure it, it will be not an admin, but the user is not a admin, but the user is not a admin.
I don't think this is the right fix. It's just an idea of the help.
Why is this needed?
I think we should keep the old name and change the name of the parameter.
This is a very specific change for a feature of the PR, I think it's better to add a `from ServletHolder` property to the `ServerConstants` class and use it in the `serverHolder` class instead of adding the `jmx`.
We should probably have an example that `or`, `or`, and `or`, and `or`, and the same for `commitdiff` and `or`, to avoid the warning about what `commitdiff` does
I don't understand why you changed the order of the order.
I don't think it makes sense for this `if` statement.
can you add the failed here as well?
this should be a separate test
This is not correct, but I don't know if it's worth to check that the `native_shared` field is not empty.
why not leave out the local var as it is and then just call the one from the function?
Should we also add `trace` to `log-level LEVEL`?
I think we can just use `Time.instanceOf(0L)` here.
This could be `undefined`. We could use `String.format(Array.isArray(dateFormat) ? ...`
The reason why the enum type is `enumspb.CONTINUE_BACKOFF_TYPE_EvaluateEvaluate` is because we are using the enum type for every enum type in the future.
Why is browser required?
Is this file still used in the test suite?
Is it possible to use the path of the class?
Is this a change in behavior?
I think it would be more clear to have the implementation of the `getDispatchMethod` method that returns the correct flow object.
You can use the `PE` tag, but this is a bit confusing.
I think we should remove the print statements and add the print to the response, to make sure the request is not found
why do you need to check the return value here? it will be a little more explicit and will be a little bit easier to understand
I think this should be `enableRules`
Why do you need this?
This should be `client_model.to_s.underscore.tr("/", "_")`
Nit: should we use `debug` here?
I don't think we need the `!=1` part.
@bartonjs - I don't think you need to do that, you should use `window.replace(/[\[...]` instead.
Why not just use the constant here?
I don't think we need this. We already do that. We can just use `0.8` instead.
This is the only change that works.
This file should be removed.
Why do we need a separate `if` statement here?
I don't know if this is the best way for us to use the `ZFS` variable. I think this is fine for now, but it seems a little strange to me.
This class is no longer used, right?
I think this should be `<...>` instead of `<...>`
I'm wondering if we should just have a separate config for the `block_processor_full_size` method that is used for the block processor, and not just the default value of the config?
Is this import necessary?
Why is this needed?
I think you can just remove the #if defined here.
This seems to have been a good change.
I think you can just remove the `AIN` and remove the `AIN` line above.
Why are these tests not in `Tools`?
This should be `//`, not `//`.
Can you move this import to the top of the file please?
This should be done in the `if (log.Println(...))` block as well, otherwise the log will be executed in the `if (log.Println(...)) {` statement.
I think the message should be "throw new version..."
Can we change this back to a `DirDir`? I think it's a good change.
I think we should add a default setting here to make sure that the configs are not set.
I think it is better to use a `method` property that returns the `POST` value.
I think the `TODO` should be removed
Can this constant be private?
Can we change this to use `test.MetadataItems`?
This is a bit weird. I'd suggest `return cgroups.PathExists(m.paths["devices"]])` as the name.
What does this need to be?
I think you should add a `status.uploads` property to the `update` method.
It looks like the logic of `rootless` is not needed here.
I think we should also add the `Password          ` in the message.
Can we keep this one with `5_979_794L` and make it a `TestCase`? The test is still passing because it was already in, so I think we should be fine.
I think we should add the `sudo` to `RunV`. We should add it to `bin/build` in the future.
I'm assuming this is a different approach. The idea is that we should not have a `CloudFormation` type in the future. The latter is not a `CloudFormation`.
Why not `Lock({}`?
This is not needed anymore.
This is a no-op, but I'm not sure we want to make it a valid URL.
I'm not sure if this is the right approach. I'm not sure it's worth the endpoint to be a transport, but I don't think it's a good idea to add it.
Shouldn't this be `GrpcGapicRetryMapping`?
(style) trailing whitespace
I think it should be an `fill` instead, because it's a little bit confusing.
Why is this needed?
I think you should just test the content of the `today` variable.
This is a bug fix. I don't think it's necessary to check the `hold` is a boolean.
I don't think this is needed, as the file is not created.
How is the owner owner done when it's not?
Why do we need to handle the error here?
I'm not sure why you did `assert answer['status'] = status` here, but I think it's a good thing to do.
Could we have `r.dir` and `r.dir` in the same order as `ConanCommand` in this case?
This was a bug in the test.
Why do we need this file? I'm not familiar with how this works.
I'm not a big fan of the "errors" style of "load_time". Is there a better way to make it clearer that it's not being used in any other way? I'm not sure if it's worth it to make the code a bit more explicit and avoiding it in the future.
Why did we change the order of vertical alignment?
Can we move this to the `else` block?
This is not right, but it should be the actual fix for `listNumStr` and `listNum` as well. I think it's more clear to use `listNumStr.get('+')` here and in the other cases.
I think we can remove this line now that we have the same changes in the `Account` interface.
isn't there a reason for removing this?
Is this the right way to get the current user?
I think it's better to make this a function and use it in the `pfs` function.
Do we need this struct? Can't we just use the struct?
Why is this removed?
This is not the right way to go. It should be possible to get rid of the code.
I think this should be a bit more specific. `logger.parseError` would be better.
This should be `blacklisted-name`
I think this is a bug fix
This seems like a very odd change to me.
I'm wondering if we can use `EdgeNodes` here instead of `EdgeNode`
I don't see how this is used, can we just make this `.api[^a-zA-Z0-9_]?version`
@becker33 can you please update these to `toml`?
I don't understand why we're using `top` here?
I think we should remove this.
This test no longer needs to be run on Windows, right?
Why is this being removed?
I think we should check for `composite_root_res` here too. If it's not provided, we might want to use `self.composite_root_res = kwargs.get('composite_root_res'):` instead of hard coded value
Why do we need to make these public?
I don't think we should change the output here. I think we should change the output to be output. The output should be the first argument.
Is it possible that CONV_MEMORY and API_DRIVER, HIP_UNSUPPORTED}}, are always defined?
This is a public API, so I'd suggest moving it to a common package. It's not clear what the package is for, but I think we should keep it as is.
This is not needed.
I'm not sure this is a good idea, it's a bit odd to have a method on IMvx. It's a subclass of IMvx.
This should be removed.
I'm not sure about this one. This class isn't used anymore.
Why do we need this change? It seems to be a very specific change.
I would move this line after the `if` block above, as it's a bit ambiguous.
This is a bit of a hack, I think we should just change it to `const int(1 << 20) * 2 // 2 MB)` and make it clear that it's not the case when the default is 20.
Should this be `m.Get("/:id")` instead?
This was a bad merge.
We should also check for the attribute.
Is this the same behavior?
This should be in another commit.
I think it would be more readable if we just use the default value of the default.
this is not needed anymore
Would it make sense to move this line to `let elms = querySelectorAllFilter(axe.selector, elm => true)` so that the test fails?
I don't think this is correct. `subject` is a `nil`, so I think this is fine.
Do we have a better description of what this `KMSAliasPrefix` is?
I'm not sure if this is correct. It is a very good idea to make this a function. I'm not sure what the right thing to do is do here, and I think it is a bit more correct to have it in a function that returns a `balance`.
Can we have an issue to track this? I think it's better to keep the old and change the one in `/`.
I don't think this is correct, since we are using the lowercase version of the `value` field.
this can also be moved inside the function.
I think this should be ` ServiceTasks` instead, since it is a service object.
Is this the right thing to do? If so we should just delete the `awserr` part of the log.
This test is failing on Python 3.5+ now, so we should not change the description.
@jridgewell Is the idea that we should not do that here, or should we be doing this in a separate PR? (I think it's a good thing)
this import should be removed from the last group of imports
@bartonjs, do you know what happens to this if-statement?
Why does this need to be public?
This link_to() is the link_to method, so you can remove it from the link_to method
I'm wondering if we should make this configurable?
The previous commit was breaking because it was missing the `GET` key in the first place.
Do we need this change?
Is there a reason why we don't just have `t.Run`? Or are they different?
I think we can remove this method and just use the `Access-Control-Allow-Origin` interface. We should also have a `ResponseCors` interface that is already in the `SELECT` interface.
This is a change in behaviour. It's not a big deal, though.
The import is not allowed to be removed.
This was removed when the test fails, and the previous code was not being executed.
Should we add `src.Graph` to `src`?
I'm not sure about this one. I don't think it's necessary to add a new method to the `BlockHeader` interface.
Why do we need this constructor? It is already used in the `Content` constructor.
I would suggest to move this import up to the top of the file, and add a new one.
`name already exists and is not being deleted: %s.%s`
What is this change about?
why do we need this struct?
I think the `.v` file should be moved to `v2`.
I don't think we need this. We should just default to zero.
@jcotela is this a BC break?
This is a bug fix, but the `wait_for_at_least_entries` function can now return `None` for `wait_for_at_least_entries` (which is why I was unable to do with `this.wait_for_at_least_entries() >= amount`).
I think we should add a `TODO:` after this.
This change looks good but it looks good. I'm curious if this was a bug.
I think this can be removed now, since we are now removing `libopenstorage/openstorage/client` now
Why was this removed?
Please remove the `setState` call.
I think this can be removed as the Task.FromResult() already has a value in the array.
This change is unrelated to the rest of the PR.
Should we do this before returning?
Why do you need this new parameter? The new parameter does not exist anymore.
Should we add an explicit check here that the caller function will never be set and we don't know if the error is returned?
Metrics/LineLength: Line is too long. [97/80]
This should be in the config file.
I think this line is too long
We should probably change `bpfrun bpfProgRunFn` to `true` for consistency
This needs an extra parameter `AzureSnapshot`
I think this should be ` validateUserGroupMembership` and not `String username`. The same for `onUser`.
I think this is a bit of a breaking change
I think this is a bug, we should not be using the `timeout.TTLDuration` as the default. I think we should use the `ctx` as the name of the method.
I'm not sure about the new protected class here.
I think you need to check that you are not passing a listings before you set it to `md5` here.
I don't think we should be using this as a highPriorityContent.
Why not use `fmt.Fprintln(os.Stderr, "Your password contains leading/trailing whitespace - in previous versions of rclone this was stripped")` here instead of adding an explicit `assertassert` check?
this can be simplified to `Show`
What is this? Why not just use the store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store store
Why is this a struct?
Can we call this `IdentityCheck` instead? It seems to be a bit of a brittle and I'm not sure if we need to do anything about it.
I think this should be `!==`
What is the difference between the two?
I think this is a bit confusing, as it's only used when a token is a valid client. I'm not sure if it's worth the effort to change this, but if we want to change the name of this function to something like `type='token'`, then we should change `token` to `type='token'` and then change the name to `type=token`.
Unrelated to this PR, but I think it would be good to have a method for `cancel_form`.
I don't think this is the right place to put this. The `class` should be enough.
I would have expected this to happen in `/` and it would have been easier to understand
This file is not used in the API.
Is this needed?
This was a bug in the original version of the PR
This should not be here, if `--NODE-NAME` is set to empty.
Hmm, why is this needed?
I don't understand the purpose of this change, it is to me that the tx tx is not set to true. I think this is the only place that is called. The tx tx should be set to false, so that it is only set to true.
Should we rename it to `urlURLFlag` or `URLFlag` to make it clear that this is a name?
This is a bit confusing. I think it would be better to be more explicit and have the method return the result.
I think this should be imported before `import numpy`.
I think it would be better to move this logic into a separate method.
this was the bug
This file is not in use. The `Product` method is used for the `EventSourcing\Infrastructure\Manager\ContextAware` namespace, so we can remove the `ContextAware` namespace from this file.
Why not use `ctx.User.LowerName` directly?
I think this is not needed anymore.
This is not a good way to go, but I think it would be better if you used `abspath()` instead of `(` rather than `(`
Do we need this?
I don't think we need to add these to the `circular` module. The `init` module is not used. We should probably remove it from the `circular` module.
Can you add a check that the validator is not a valid alternative to this?
This is a change in behavior, I'm not sure if it's worth it to make this change in behavior.
We should be able to use `const` here, as we do in other places.
You might want to use `git checkout --services` here, too.
This is a bit confusing, since we're already doing this in `setCapability`
What's the difference between `make_BLACKLIST_VIOLATION` and `make_ STARTLIST_VIOLATION`?
I think we can remove this field.
This is not a very good idea, but it might be worth to have it in a separate pull request.
Shouldn't this be `false`?
You can use `x.order.map?` directly here.
@xuehui1991 @wachterjohannes I'm curious why you changed this to a string?
Nit: I think this could be more clear (and more readable, like `IptablesNATOutgoingInterfaceFilter`).
Can you use a more specific test case for this?
This should be in the `getClass().equals` method, as the `if` statement is not needed.
I think the message is redundant. The message should be "ENGINE-16002" or something.
I don't think this is a good change. The only reason we use this is to avoid the code duplication.
I think this is a leftover from the previous PR
should be a `this->process_blocks()` instead of a `else`
This should be a separate function.
This is a good change.
This should be a single string.
I don't think this change is necessary, since you're using a new variable name.
I think we should have some sort of implementation of `0o600` that we can use here instead.
I don't think this change is needed.
I think this needs an `floor_thr` instead of an empty `floor_set`?
I think we can remove this
why is 'react' removed?
@wmvanvliet to reproduce this, it seems like it was done for a reason, as it was done in #2424, it's not a good idea to change it here.
this should be set to `true` in `core/utils.go` right?
I don't think this is needed.
@sjenning I'm not sure if the row itself is actually a good idea. It is a good idea to use a default here, and if we don't have to do it, we should just do `newEntity` directly.
This is a bit confusing, as it's a public static method, but it is not a public API.
I'm not sure this is the right fix. It seems to me that the ConnectID can be used in the same way as the other errors.
I don't understand why this is needed.
I think this should be `@precate`, since we're only using the `@Unneeded` APIs, right?
I don't think we can assume that we don't have `conf` in the `opTimeout`
why not `beforebefore`?
This seems like a very odd place to put this (and it's more specific)
I don't think this is the right approach. The `isEmpty()` check was removed in the `else` case.
@jackfrancis I think this is a good idea. I think it should be `azure-parameter-grouping.json` as well.
Why is this being removed?
The `a-z0-9\/\` is a `<` and it is a string. It should be removed.
This should be an error if api_version is None
I'm not sure we should use `recording` in here.
Is this a bugfix?
Is it worth adding a new constant for this value, too, to match other attributes?
can you add a space after `if`?
I don't think we need to include the plugin_security_attributes_ at all. The plugin_security_attributes_ would be defined in the plugin_security.
This should also check `id`, `getForm` doesn't match.
I think we should have used the same `RoutingDelegate`, as it is not used in this file.
We should be able to use `format` here instead of `formatTimeAgo`.
please fix this, `onClick` uses TRUE and debug
I think we need a more specific term for this.
I don't think we need this anymore, right?
Hmm. I'm not sure if this is the correct fix. The network is not allowed in S3.
Why is this needed?
Why this change? It looks like the changes in the middle of the file need to be update?
Can we change this to a new function in the future to make the code simpler?
`@Restricted(NoExternalUse.class)` would be clearer
I think we can use the `<%` tag here
We can remove `useV2` from this function.
@matt-gardner Is this an unintended change?
What is the impact of the next line?
is it possible to have a network parameter with the default?
Do we want to make this a `static const` variable?
Is there any way to avoid the information about the `__del__` check?
Is this the only place where the error was logged?
This is the only place where we need to do this.
This is a bit of a hacky, maybe we can use `strings.HasPrefix` instead of `antrea-controller`?
This is not used anywhere.
I'm not sure this is the right fix. If the user is using a span context, it is not the correct context. If the user is using a span context, then the user has to pass a span context. If the user has a span context, then the user is not going to call `CreateScope` on the context.
Is it not possible to use `Rewards` here?
shouldn't this be `true` for consistency?
This is not a correct change. The variable should be removed.
This is the only change that affects the `*` file. I'm wondering if we should be doing that in the `*` package?
I think we should add `ventions_old_PASSWORD` and `ventions_info_name` to this list.
Why is the `_tree` not needed here?
This should be nullable.
We should probably do a `AddOptionReload` in the `NewFs` function.
We should not need to add this file.
You can just call `self.storage_class_header.Item(STANDARD)` here and remove the second `if` and use `None`, then you can just call `storage_class_name()` in the `else`.
I think we can use `StringUtils.isNotEmpty` here, as it will use it in other files.
"auto or ConfigProvider"
I think this check is unnecessary, you can remove it
Why this change?
Is it worth having one function that checks whether the SignedURL is a primitive?
I would have used `show_on_element` here to be consistent with other tests
This is not correct, but I think the `[]byte`, `X`, and `X` should be removed.
I think this is a bit weird, it might be better to use a new `EmitEmitEvent` instance here.
Rails/OutputSafety: Tagging a string as html safe may be a security risk.
I think it's better if we move the switch to a new line.
This should probably be a different type of error message, e.g. `__file__`, `__file__`.
I think this was accidentally removed
I think we should be able to remove the `Context` argument from this package. The `Context` is not in this package.
Why are these lines changed in this PR?
I think this should be a public API, and not a public API
This is the change I was working on. I was wondering why I changed the default value of `inject` to `path`, but it's the default. It's not an error, but it's not the case here.
I don't understand this change?
This seems to be the only place where we are removing the old `short` parameter.
This is a good place to do it.
I don't see any use of this variable. I think it's better to just use `Clone func(ctx context.Context, outputDir string) error`
Nit: I think you can just remove this and just do `// escape '$' in the comment first`
We should probably add the logger logger here.
Why is the min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min min
I don't think this is the right place to put this. We should be consistent.
Why are we not using the `ServeHTTP` function here?
I think you can just remove the `require.NoError` call.
Why not just use `CheckConfigAndShutdown`?
I think it's better to use the `skip` method here.
This is not related but I'm not sure why we need a new method for the new `uploadStream` instance.
Should we have a `clientset` constant for this as well?
This is not a good idea, we can't use a `Libraryorate` here. The `Libraryorate` is a bit hard to follow.
This file has a lot of issues with `en-system/en-system/en-system/en-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test-system/test_ememfile.html.erb` and other files in this file that use them
Why is this needed here?
I think we can just remove the print_page method entirely.
Can you also add a `_checkNotNull(...)`, to the existing one?
Does this need to be a pointer?
Seems `Add` and `Add` are nullable
Please, please use `@rule`.
Why not just add this to the constructor and add it to the constructor?
I would use `http://127.0.0.1` here
This is a good candidate for X64, as it's a small change.
I think this should be removed
This is a change from `measure` to `sizeof(parentBaseFee - feeDelta)` but I think it's fine to leave it as is.
I think we can remove the sequence and just do the sequence in UTF-8. */ and make the sequence in UTF-8.
why not import sys?
why not just `updateEthContext(t.Fatal(err))`, it will only be called once on line 131?
Why not `callback.onError(t1)`?
nit: can we keep the old constructor as a member variable and add a `StringStartCommand`?
Can this be made made boolean instead of true?
why do you remove the print?
@deads2k @stuhood do you know if the exception is thrown here?
I think we need to make the change to `List` as well. The `List<SnippetSetRunner> snippetSet` is not used in the `addEnd` method.
This is a private method. I don't see it in the code anywhere else.
This should be a function, not a function.
I think this should be moved to `AfterSend`, since it's not being used anywhere else.
Does this mean that the tests are running on all endpoints in the same file are actually running on the tests?
@kroitor since we are using the Blobs here, we should probably check for an `type`.
This is not a valid alternative, it is to simply remove the `self.can_change_org?` check and remove the `self.can_we_org_id` check. I think this is also fine for now.
This should be `if (api_version <...> <...>):`
I don't think this should be done here
I don't think you need this change.
Is there a reason you didn't do that in the other files?
Why do we need to check this? Is it because of the "info" part of the log message, or is it not?
This is a bit weird, why not just use `proposals_for(controller: 'proposals')` and `proproposals` as well?
This change seems unnecessary.
This is a little weird. I would have expected it to be `namespace` if it's not `true` or `false`
We can remove the TODO here.
Can you make a configurable var and make the first one?
This should be `@ps`
I think this is a good change.
I'd rather have the test_include_all_instance_status defined in the test_test.py and test_include_all_instance_status defined in the test_test_event.py test_test_event.py and test_include_all_instance_status defined in the test.
I don't think this belongs in `io.prestosql.spi.clean.util.techn.clean.util.techn.io` so it can be removed from this PR.
this will need to be `&&&common.DomainReplicationConfiguration{..., 'Clusters: ... }`
I think we should keep the assert here and just use `test_no_test_params`, because the original `test_no_test` is a bit confusing.
This should be `null`
I think this is not needed. It's already a topic.
I think we can use `Node::toLispString.mkString` to avoid the `String.format` here
I think it's better not to check if `errorMessage` is `true`.
The default value of `get_header_cmds` is `None` in case the default value is `0` and the user is not `0`. I would prefer to have a separate `get_header_cmds` flag for the default case.
This seems to be missing a `lastRefreshTime time.Duration`.
why is this removed?
Can you please use a more specific name? `colName.data()`?
I think it's better to use the `assertThrows` function here and in other places in this file.
This import is no longer necessary
This test is not testing the right thing. The new behavior is to test the new values. The new one should only be set incorrectly.
@Override is this TODO still needed?
Shouldn't this be `logger.finest()`?
You should be able to use a `std::string` instead of `std::unordered_map` here.
This change seems to be unrelated to the rest of the PR?
Can we use `vcr_VERSION` here instead?
This should be a warning.
I'm wondering if this should be moved into `pendingRequest.configuration.remoteHost` instead?
I think this file should be removed
I don't think this is the right place for this.
I think you can avoid this change.
This is a bug fix
This is the one that I'm not sure about. It seems to be a bit of a bit of a hack to me.
Is there any way we can do that?
is this change intended?
I think we can use the `show_element_to_be_unclickable` function in `show_element` and `show_element_to_be_unclickable` to check if `show_element_to_be_unclickable` fails.
I'm curious why we are making the change in behavior here?
Use the new Ruby 1.9 hash syntax.
I think it's better to leave this test unchanged, it was just a mistake in the future.
@tnozicka this is a bug fix. The issue was that the `isInitOnce` function was being used to set `isInitOnce` to 0. I'm not sure if this is the right thing to do. I don't see any other tests using it.
Please add a space between the `&` and the opening brace.
I think we should remove the `user-loyalty` flag for all these
This should be `environment_script` instead of `environment_script`.
Why is this exposing?
Can this be `static`?
`str(f.A.max(), (f.2))`?
`field->name` is a `str` field, so I removed this.
I don't think we need this. I think we should be using it here.
Should this be named `@since` instead?
Should we also rename the `ategy`?
Don't you want to keep the C++ check for the last id?
I think it's better to use a `path.Join(baseURL, file file...)` here and in `getEnvironmentURL()` in `build.go` and the other `baseURL` functions in this file.
This is a bit weird. What happens if `getString()` throws an exception and when it throws an exception?
Shouldn't this be `apm-server-enabled` ?
I think we should use the `JSON.Recv` here, as it will only be used in the future if you are using it in the future.
Would it be better to have an `CommonMetrics` here?
Why was this added to JavaQualifiedName qualifiedName?
Is it possible to have a test that verifies the 10 10 specific cases that a 10 seconds is not supported?
I don't like the name of this. I think it's a good habit to keep it simple, just like the other `not_to have_content` methods.
Why is this needed?
I think this should be `org.apache.iceberg.exceptions.CloseableGroup`
Hm, why do you need the `*` here?
This will fail on every single test, right?
I think you can also use `no_model1_train` here.
This is a bit of a hack - I'm not a fan of the real Ruby type. Can you explain why this is needed?
This could go in `testing` list.
This is not a change in behaviour. Thept-get install will be the same as thept-get install -y unzip
This should be set only if `true` is set.
The name `projected_monthly_revenue` is not clear from me. I think it should be `Attach_monthly_revenue`
Should this be conditional?
This is a bit confusing, as `registry` is not null.
Not sure why we need these `seconds` type.
I'm not very familiar with this one. I'm not sure if we need to make it configurable.
I would use a more descriptive name, like `/config/FILEIDENTIFIER.py` and `/config/FILEIDENTIFIER.py`
Isn't this already in the `__init__` method?
We don't have to worry about the DB DB here, because the controller generates the `label` action, it's a `edit` action, not a `edit` permission.
I don't think we should do this. We should be using `EnsureTelemetryConfig` instead.
I'd prefer a more explicit name, `escape_char *`
why is this change required?
I don't know why this is necessary, but I'm pretty sure this will cause the body to get run on the same page.
I think this would need to check the other modules, right?
This is a little confusing. I'm not sure if this is correct.
I think it would be cleaner for the check to check if the request is not nil, as the result is an empty string
This is a breaking change, but I don't think we want to support that.
This should probably return a boolean.
I think we need to keep the imports in the core, we can use the same import as the rest of the imports.
I'm not sure this is a good idea, but I'm not sure if it is worth it to check if it's a `./pants run` before calling it.
I don't think this should be here
I don't see why we are using the `config.Fairbank` here. I would expect the `config.Fairbank` to be set to `0` when we're running a new `Timer` and the `Timer` is set.
`ui.message(_("Focus mode")` might be better?
I don't understand why this is needed. If it's only a legacy menu item it is a legacy menu item. If it's a legacy menu item, the menu item should be visible and the menu item should be visible.
I don't understand why this change is needed. It seems like we are using `onNewPasscode` to get the same user as `requestCode == SPRequestHandler.IDP_REQUEST_CODE`. Is this correct?
Why is the default here? Isn't the default the default behavior?
I think this is a great time to fix this test: we can use `.send()` instead of `.send()` because we can't do this in a few other places, so I think we should just do it for `.send()`
This should be a function.
@franckc @bvaradar is this still needed?
Why is this a copy?
@mattcaswell, is this the right fix to do here?
Is it worth adding `DisableHttpGit        ` to all the tests that is being used for these?
This is the fix, but I don't see any reason for it.
Can't we just do this in a `prop('disabled', nightShift)` ?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
What's the difference between `useCallback` and `loadCallback`?
I don't think you want to add it, since it's a public API
This is a change in behavior, but I think we should not use the `normalizeIdentifier` variable here.
I think this is still a good change. It looks like the rest of the changes are just unnecessary.
Is this line doing anything? It doesn't seem related to this PR, but it seems like it should be a separate commit
This is a bit confusing, as it is a very small number of times in the code.
Let's add a ` detentParameterMismatchException` here.
I don't understand this change, and why is this needed?
I think this is the only change that is in the API, but it's not a good idea. It's just a suggestion, but we should be able to make it a bit more explicit and use the same interface for the API.
I think we should try to avoid the `finally` part of the `finally`.
This is not the correct spelling mistake.
This is a no-op, but I think we can remove the check for the `ast_error_frame` method entirely, since it's not used by the caller.
Please remove this.
This is the only one that uses `requirements.txt`
This should be changed to `Template::Mailer::Mailer`
Can we make these constants more specific?
What's the point of this?
I think it would be better to change the name of the variable to `Traceparent` and `traceparentHeader`, to be consistent with the other variables in the file.
This should be `get relative path of file: %w`. It should not be necessary.
Please don't use `import and as you did for import of imports
Why are you removing this?
I'm pretty sure this is the right way to fix it, I'll merge
why is this final?
Should we move this to `two_customer_id` and move it to `two_permission_id`?
Why not `sizeof(port, "65535")`?
I think we should change the `WithWithC` field name to `DestinationGroups`
I don't like the idea of using the default `--mode=None`, but it's a bit confusing. I think this is the best place to put the default value.
I think the original code was correct here. The problem was that the code was being removed. The only usage of the `Tag.TypeOf` was used for the `Tag.TypeOf` was used for the `Tag.TypeOf`.
I think this can be moved to the `createHEAD` package.
This file doesn't seem to be used
I think the changes in this file can be reverted.
I'm not sure if this should be `static`.
Use the new Ruby 1.9 hash syntax.
Could you add a space between `/se` and `new GetSessionQueue`?
This needs a description, e.g. the number of packages in the index including the max of the max of the max max of the max max of the max of the max max for the max max of the max of a max of the max of the max max for the max of the max of a max of the max max of the max of the max max of the max for the max max
What about `host` instead of `max_retries`?
can you update the doc string too?
This is a very minor thing, but we should not have to pass the `handleCaretMove` to the `handleCaretMove` method. It would be better to do the same for the `getCaretMove` function.
I would use the `as_string=True` here, because it's not a boolean
Please remove the extra lines
I don't think it's necessary to have a dict here. It's a dict.
I'm not sure this is the right way to go. The `jwt_oauth_error` is going to be a no-op if the user doesn't have a unique ID.
Is this used?
please, add the log statement to the log message
This should be `jsbeautifier>=1.0.1, <3.4`.
Please update this import to use the new `NOT_layout` import
This should be a separate change.
I'm not sure we want to do this here - I'm not sure if the `user` field is necessary or not, but I don't think we should do it for the `user` field. I'm not sure if we should be checking the `user` field in `visit` - we should check if it's not the case here.
This is a bit of a weird name, but why not just use the constant?
Is there a test that checks for the db?
I'm curious why this is needed. It seems that the default `loggingLevel` would always be false.
This is a little weird, I would prefer to not use the `\DateTime` parameter here.
Is this used?
I think we can use the `metav1` constant here.
why is this changed?
I think it would be better to just have this method take the whole class as opposed to the calling itself and then just pass it in the constructor
This is the only thing I don't feel right - I think we should just add it here, and remove the `use_directory_cache?` method.
Why do we need this check?
I'm not sure about this change, but I think it's better to be explicit in "transformed into"
Why the test name change?
I think this should be 5, right?
I think you can just use `if` here.
"... is not a valid team"
Can you explain why this is needed?
Should we assert here that the exception is being raised as a result of `ValidateHostHeader`?
I don't think this is the right place for the new tests. I'd rather have a `s3_region_id` that would be used for the `s3_id` and then we can remove the `us-east-1` kwarg.
This is the only change that makes me feel like we should just always remove this function and remove it in the future.
I think we can just use `list(0)` here instead, and instead use `list(0)` to avoid the duplication.
please revert this change
This is not the right place to put this method. It's a bit confusing to have a method that does the right thing. If the method does not exist, it would be better to use `getCapability` instead.
I'm not sure why the `drm_format_mod_explict` is necessary here, since the `drm_format_mod_explict` and `drm_format_mod_explict` are not being set to `null`.
This file is not used.
Nit: This is a bit weird that the diskList is a list, not a list, but the function is a list. I'd suggest to use `List[string]`.
This is a bit of a hack, I'm not sure how the `name` is used.
This import should be removed.
This should probably be `hasOwnProperty`.
I don't know if we need the `last_thread_tls_exited` logic here, but it's not really a boolean, and I'm not sure if this is a good thing to handle.
Is there a reason for not just passing the properties instead of the false?
Can you change this to be `today + 2`?
It seems that this is a function that we should be using to call `w.Current` directly, and not a call to `user.Username`?
I don't think this should be part of the public API. The original version of the `Subclasses` argument should be passed in to the `copy_info` method.
Why removing this check ?
These changes are not necessary.
This is not a scope, it is not a context.
I think this `.toFill` should have a `toFill` here. The `googlesitekit` class already has a `googlesitekit` and `toFill` overrides the `One` parameter.
remove empty line?
I think it would be better to use the `getTRANSTRANSConnector` class rather than the `getTRANSTRANSConnector` class.
I think the previous one was correct, but it was still useful to have a test with a more generic name.
This should be `IEnumerableToList`, since it's not a type-checking list.
I'm not sure why you removed the `boolean` parameter?
Is this a change in the PR? I thought the PR was about to avoid the changes in the PR.
Please update to 0.2
I'm not sure this is a good idea... I think we should be consistent.
Isn't this a bit of an overkill, if it is a `storeInbox`?
I think you can just remove this function, it will be deprecated and you can just use `API.prototype.importAllFromMnemonic = function(words, opts, opts)`
I think this is a good change. It should be a separate commit.
I don't think you need this, since the view is already handled by the form
I think this should be `void close(common)`
This is the only change I see in the other PR: maybe we should move this to the `if m.Spec.ProberSpec.ProxyURL` check?
I'm wondering why this change was necessary. The `Supply` call was only used to create a new history service.
This is not a big change. It should be reverted.
I think this is the only place that we should be calling the logger, not the X86.
I would prefer to keep the naming consistent with the rest of the code.
@jridgewell I'm a bit confused about how `sync` is used, it should be used for `configStorage`. I think it's a little confusing to call it `configStorage` instead of `true` for `configStorage`.
I think this should be `encoding=True`
This file is not in Besu. It is not used anymore, right?
Use `TaskTaskaction` and not ` ForceFlushAsync`.
Do you need to check for the target.Label?
I'm not sure this is necessary. The `antProcessor<T>` can be accessed by `antProcessor<T>`.
Is this a false positive ?
I think this should have been a separate PR.
Shouldn't we check the client before doing this?
I think this will be removed in the next PR.
Should we make `SetApplicationError` `SetSetError`? I don't see any reason to have it in the `SetApplicationError`
This should be nullable
How about we log this message? I'm not sure if it is worth it, but I guess it should be a warning.
You can remove this now.
Is this still needed?
I think it's better to move the `@` after the query is created, and then call `.catch` on it.
Trailing whitespace detected.
I think this is not necessary, as `@TODO` is already in the list
What do you think about using `options.fakefake()` instead of `options.fakefake().assert(...)`, since this is the only way to handle the `options.fakefake()` is used.
Please rename to "selectCastSink" or "stopCasting"
Why are we doing this? Isn't the node supposed to be a node name?
Can you add a note here that `long` and `long = int` would be the default?
Is this debug file size really necessary?
This is not really a big deal, because it's a bit of a hack anyway.
This is not the right fix, but the local variable is used for the header header, so it should be removed.
@matt-gardner Is this what you meant by "app_name". I think it's a good time to make it more explicit.
This line is still necessary, since we don't use the `IPFamily` anymore.
Just curious, why do you need this?
I don't think this needs to be removed.
I think we should set this to false in the test suite to ensure we don't get the full node name
I think you want to use the `Screencasts` constant in order to avoid the use of it.
@xiaia Is it possible to have a `sig_size` variable in the constructor? I think the `>=` is fine, and it seems to me that we don't need to do this. I'm not sure how to do this.
I'm not sure if this is the right place. The `returnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturn
I think we should just remove this, as it is the only place that is used.
I think this should just be `len(flows)`.
This should not be part of the public API
Should this be a try/except?
I think it's better to move the `@cmdutils.argument` call to `setup_tab`.
nit: we should probably just remove the TODO in line 233 instead of removing the TODO in this PR.
Hmm, this was a bug, and I don't know how to test it.
Why do we need this extra field? I think we should be consistent and use the connection at some point in the future.
What is this for? I don't think it's a good idea.
This is a breaking API change. I don't think we should be using this for every other PR, but I think it's a good thing to do. I think we can do this for a separate PR, but I'm not sure if we can do this for a separate PR.
This would be a breaking change, as it's a bug in the `if` block above, but it is a bit hard to read.
Is this the right place to do this? I don't see any other options.
I think this should be `github.com/aws/amazon-ecs-cli-v2/internal/pkg/term/prompt`
This is a change in behaviour. The code below is only used in one place and the one that's not needed.
Why does this return an error?
I think it's better to have this be `OnServers` instead of `Activepartner`, but I'm not sure how to make this change.
this change is unrelated to this PR, but I'm wondering if it's worth adding an `bad_request` to the `bad_request` spec that will need to be updated to use the new `bad_request` spec instead of adding a `_request` spec that has been made back
This is a very weird thing to do - I'm not sure how to fix this.
Should this be removed?
I think it would be better if you just put `===` in the if block, and then you can pass it as an argument to `array` and the if statement above (and the if statement in the else block).
Why did you change this to `int`?
Why do we need to check for `leaf` here? It's a little hard to follow.
can you move this to the top?
Why do we have a `float` type of `1` in this case?
I'm wondering if we could make the `@Deprecated` annotation a bit more descriptive?
I'm not sure this is a good example of why I'm not familiar with how the code works. What about the other tests?
Why the need oftransports?
@sjenning if you have a better idea of how to do this, I think we should do this.
Is this include needed in any way, or should it be included in a file?
This is not a big deal, but I'm not sure if this is a good idea.
why the `NotFound`?
Could we add a `TestCase` method for this to return a `*`?
I think this is a good place to put it in the URL, but I think this should be a separate URL.
This is the only change that affects this PR
I think it's better to use the `SettleDeposit` type, as it's a `SettleDeposit` type.
think you can remove the second parameter entirely
I'm not really familiar with this code. Can't we just pass `sz` as an argument to `0`?
These two lines are not needed.
I think we can just remove it from the default.
This is the fix for this PR, but we should keep it in a separate PR
This is a bit weird, why is this needed?
@mattpap this is the default, right?
I think this should be `.onStatus((s) -> !s.is2xxSuccessful()` instead of `.onStatus((s) -> !s.is2xxSuccessful()`
I think this is not needed since `WorkerObject.checkRef` already exists in `PathManager`
Why not just use `request.Config.PluginName == attestedData.Type`?
what is the reason to use invalid function instead of just the method?
This is not used in this class, right?
This method can be private.
why delete the `HandleNew`?
Is it possible that this test will fail with the new tests? I think we need to test that the new tests are running in parallel.
Use the new Ruby 1.9 hash syntax.
I think this should be `char fmt[] = "O";` instead of `char`
nit: you should probably add `--channel` option to the docstring.
Do you need this line?
Is there a better way to do this? I don't know how many people are trying to get it, but I don't think it's worth it.
@smarterclayton do we want this in a previous PR?
I think this check could be moved into the if above, so that we don't need to check for the null and empty check here.
I think it would be better if you could add a note to the doc string that the user can do it.
Lint/AmbiguousRegexpLiteral: Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the / if it should be a whitespace to wrap them in a division.
This is a bit weird, why do we need to check if the struct is in the same package and then call `if (checkState(false)) {`?
Shouldn't this be `if (iv_state)`.
This is the only place where we need the `no_crash` variable.
Is this change necessary? I think the same code is for all the other child classes, and the same code is for all child classes.
this method is only used in one place, right?
this is a duplicate, right?
Why not just use `err` directly?
we can just delete this, we can just remove this.
Style/GuardClause: Use options[:tty] instead of options[:tty].
I would use `.namesLookback(strictTraceId)` here.
I think this is not needed anymore, since we already have a reindex.
I'm wondering if we should just remove this check and check if the `username` has been set before the `show-next` check.
The `driver` constant is used in the `custom_partitioned_partitioned_NAME` class, so I think it would be better to move this constant to the top of the class.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is the wrong place for this.
I think we need this warning in `JobStatus_get_Etcd_from_more` too.
This is not the right way to do it, but I don't think it's worth it. The `if` should be moved out to the if statement, otherwise it will not be used.
I'm wondering what's going on here. Is this change supposed to be done in the `Pants::set_guard()` method?
This is not needed anymore
"The default number of space can be created" -> "The default number of space can be created"
Can't we just remove the `else` and use `ImmutableMap` here? We can also remove the `else` in the `getImports` method.
I think this should be removed.
nit: could you move this above the group of imports?
I think we can remove this too.
This is a temporary change. It should be in a separate PR.
This is a bit of a hack, can you change it to something like `c.Bool("public-volume-create-allowed", "")` and then `GetVolumeCreationDisabled` as well?
I don't think you meant to do the opening. This is the only place you use it in the variable name.
I think we should be using `exit(0)` here instead.
Can't we use `getRequestId` directly?
Should we make this a class constant?
@deads2k any ideas for making this change?
Is it possible for a new test that was passing in the current version?
Is it worth it to return null for the `@Nullable`?
Should we keep them in the `attachment_Inline` constant?
`ExplicitValues` -> `CollisionEnergy`
I think this is a leftover?
This is a little weird, why not use a `context.getattr(self.context, "forced_empty_list", False)` ?
I think we can move these two methods to `user.go`
Why did you change this back?
I don't think this is correct. The `!rawErrorData.containsKey(CLASS)` check will never return null.
Is there a way to avoid using a single partition, instead of a type?
should we remove this?
Nit: `With debug mode we allow exceptions to be catch in the test suite` In this test suite `Withgateway mode`
I don't like this name. I'd prefer `username` not `accept`.
I think we should be able to get rid of this `public` and just call `GetLoggingRulesThreadSafe()` directly.
Maybe we can add an explicit assert here for the new values.
I think we should add a check here that the `is_no_message_config` function is not a valid name.
I think we should add `_UnknownUrlSchemePolicy` to the end of the list.
Why not `Array<T>`?
Same question as above: can we just make this `private`.
I don't think this is the correct fix.
I think this is not needed
I'm not sure if we should change the name of the URL, but I'm not sure it's a good idea to change the name here.
Is there any reason for this?
why is it changed?
I don't think we should use the new `wordcount` field here.
I think this should be `return nil` since it is the only place where `addr` is `false`.
@matt-gardner Is this what you meant?
This is not the only change that affects all the tests. The `SIMD regs` is used for the actual FP-SIMD, and the `_get_size` is used to set the `uint` to `0`.
@mitchellhenke can you explain why this is needed ?
I think we should keep the old constructor and just call `BUILD_TYPE`
We can remove the `if` statement.
This will not work, if `limitsExceeded` is not defined, then the `mset` is not set. The `limitsExceeded` is used to set a `Set` to the `finally` and `SetState` will not work.
This was the wrong place where we call it, and we have a test with a `default` value, so it was not used in the code base.
Hmm, I think we can get rid of this now. The `leaderprops` is already in the `__init__` method, so we should just remove the old constructor and change the `leaderprops` to something else.
I think we should use `current_user.identifier_for` here.
`import sys` at the end of this line (and line 870)
remove unused imports
Please remove the "getContentDescription" part.
This is a bit of a weird thing. The `mHbManager` is not the same as the "old" on the `mType` field, but the `mHbManager` is the `mHbManager` type, so I would just add the `SetEyeBufferSize` method to the method.
I think this is a great idea, but I'm not sure if it makes sense to have a `buffer` constant here to avoid the confusion of the `type`, `type`, and `Buffer`. I think it would be better to just use `type` or `type` and `Buffer` as the default.
Nit: we can just delete the `hashToFullRules` variable.
I think this would be a good idea to support `is_builtin=True`
I think this is a little too vague. What do you think about just calling the `deleteRecursive` method?
This is a breaking change. Please remove it.
I think this should be a user_id option. We want this to be set in the user_id so that we can set the full full full full full `api_versions.min_by` to true.
Please remove the extra spaces
I think it would be more consistent and more readable if you put the `c.id` below the `base.backwardcompat`
This is the same change as in `GET_ALL_SESSIONS` above.
I think we need to make this a `pinwheel`, since we only have one argument.
This is not a good idea, it's better to make it `import json` and `import collections`, and then just use that in the constructor.
I think this is a breaking change, we can remove the "singleInt" property from the property and use the default value. I think we should add the value to the "single" property.
You should also have `getAccounts` and `WindowWindow` here.
These should be private, so they are not used.
This is not needed.
Is this expectation that the `User` action is not in `User_last`?
I'm not sure if this is correct. I think the `AmpDoc` is correct for this, and the `AmpDocSampleCode` is not actually correct.
Should this be added in the `disposablePrivateState`?
Hmm, this is a bit confusing. I think it would be better if the file was empty, then the file system was not empty.
Is this needed in the test?
Why are we using this instead of using an constructor parameter? I think it would be better to just use a local variable that's passed in.
Is it expected that we are not going to use the `config` API API in the app app? If not, then we should just use a `config` field in the `config` and `config.Client` field in this file
Not sure about the name, but I think it's better to be more specific, e.g. `getReachableFilesFiles`.
I'm not sure about this. It's not needed anymore, but I think it's only needed for tests.
Metrics/LineLength: Line is too long. [123/120]
I'm not sure if this is a really good idea. If the API has a `instanceof` then the method should return the `instanceof` instead of the `instanceof`
@wido this is the new field in `baseTasks`.
I think we should add a TODO to remove these ifs
I think we should add a TODO about that to remove the `[s3.ruby.s3_add_bucket_ssekms_encryption_policy]` as well
Why do you need 15000? Is it a 15 seconds by default?
I think we should use a constant here, not just a string, and a constant in the file that is passed in
I think this will break if the input is not a user error.
I think it would be better to use the `nextRowGroup` variable here, and pass in `nextRowGroup`.
can we use the same name here as `-1` for consistency?
I don't understand why you're changing the default behaviour. It's not a good thing to do here. The default should be the default behavior, but if you are not, then this should not be the case anymore.
`this.max` can be removed.
Why not just use `-1` here, since it's the same as `-1`?
I think you can just remove this table, it's not a table
Remove empty line?
I think it would be better to return the error.
I think it's better to move the log file to the `debug` package. It would be better to have it in a `logLevelUsage` and have it in the `debug` package.
Why is this needed?
I'm not sure about this - we should be able to just make the `IsManaged` function return the correct location. I think it's a good idea to make the code simpler and use the `Unmanaged` function.
I think this should be `api_sig`, not `api_sig`.
This should be `keyMapping`
This should probably be a `pos` constant
This should be a `Feed.com`
This is a little confusing, as it's a lot of code that we use in `GetResourceName` and not a function that we use in `GetNamespace` in the code. I think it's better to just return a function instead, and just return the result from the function.
I don't think we should be changing the name of the variable.
I think it would be better to use a variable here to avoid duplicating the code base (and have a variable named "addContext", but not a "addContext". It would be better to have it in a method called `setContext()`.
Just a thought. We should be able to use `^` instead.
Not sure why this is necessary.
This is the same as `result = ...`. I think the `result` should be removed.
I think we should also change the name of the function.
I think this should be moved to the main place where it is used.
This file is not used anymore
This still needs to be removed.
@mfojtik @jridgewell I think this is the only change that works.
Use && instead of and.
This import is no longer used.
I think it would be better to have a `json:"x509Name,omitempty"` in a variable.
I think it's still a good idea to change the peer value of the variable to be consistent with the other commands, e.g. "If a peer gets added through AddPeer, this does not necessarily infer", but I'm wondering how much of this is to change the peer value in the future.
I don't think we need this.
This change is not necessary.
This is a bit weird to me, I'm just not convinced that this is the best way to check if the addr != NULL and so the test fails.
This test is not really necessary. The test will be testing the navigator teplate and will be removed.
This should probably use a `(caption, 'decode'):` instead of `(caption, 'decode'):`
This should probably be a separate change
Why is this `networkMode` here?
This needs to be added to the JIRA issue as well.
Is this still needed, since we are not using this in the code anymore?
I think this is a bit of a mess, but would be nice if we could add a `getIteratorIterator(transformer)` method to the `Dispose()` method. But if it's the only place it's called, it would be nice to add a `withIterator` method that takes a `toString()` as an argument.
why is this change necessary?
Is this the correct way to get the filename? I don't see any `/var/lib/rpm` in the path?
This is the only way I see that `sac` is being used in `_test` and not `_test` but I think that's the correct way to go.
@mattcaswell, this log is not correct, but it is a bit odd to log it.
This will break existing tests, even if the `aoColumns` is set to true.
Why was this removed?
I think it would be better if we didn't have to change the `Superfluousous string` to `Superfluous string`.
In this function, we don't have to check if c.trace == nil, so we can check if c.trace is nil here.
I think this should be a `||=` check instead of `||=`
This is not the right way to go about this function. It's not a big deal but I'd prefer to have a method for that.
This is not needed.
Why not make this a static field?
I think this is the main reason why the `server.Start()` function is being called, since it's only used in one place.
Why is this change necessary?
I think this is a bit of an overkill. Maybe we can add an enum type for this to be a bit more specific?
Is this debug log needed?
This should not be part of the public API.
Why not just make this string a `err`?
I think we can skip the `args.min_size` check here.
I don't think this belongs in the `Stream.range` method.
We should probably use `log.finest()` instead of `info()`.
Is this the default? I think the default should be the default.
Is this used?
The `item` is a string and not a `install`, which is why `app.delete_singular` is a `install`, so it doesn't need to be passed as a parameter.
Can you please move this to the top of the function? We do not need to worry about the specific cases where the site is set.
I think you can just remove the `and` here and remove the `or` at the end.
Why not just make the call to `NewBoltDB` as well?
maybe we should add `limit` to `LOG.warning()` and remove the `max_query_limit` and `max_query_limit = constants.MAX_QUERY_SIZE` altogether?
This file should be removed
`Should accept two parameters: preds, train_data.`
Missing a ` in`
@deads2k any idea why this is being changed?
I think this is not the right place for this one.
Please revert this change.
Is this needed ?
I think it would be good to have a test case for that.
This is a little confusing. I would have expected this to be a `.encode()`?
Layout/TrailingWhitespace: Trailing whitespace detected.
I don't understand the logic for this change?
Why do we need to keep the old constructor?
This is not needed.
I think this is still the only place where the error is logged.
This test was testing something that was not testing what we were doing, right?
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
Why not delete the error message?
I think it would be better to use `sys.get('allow')` instead of `sys.get('allow')` here.
Is this the only place where the error message is used?
Why did this get moved?
I think this should be `[TestCaseOrderer(0)]`
It would be better to use the `uint()` function instead of `p.m.Unlock()` here, and use it here. (It's a bit more explicit that we're using it to check if `p.m.Lock()` is a string, and then we can use `uint()` in both places).
this is just a thought... we should probably remove it
I think it's not the same as `showLocalSearch`.
This was a bug in the original code.
We should not be using the molecule at the molecule, so we should keep thesanitize parameter for the molecule at all.
I think you need to add `:assignee` to this class
This is the only change that affects the old logic, I don't think we need to do this.
This is not needed anymore.
I think this is still a leftover.
I don't think we need the real `argumentsString` variable.
I think it would be better to do `if not isinstance(node, astroid.ImportFrom) and node.as_string(type=('build', 'run')` and do `if not isinstance(node, astroid.ImportFrom)`, otherwise we would get the first point of the package.
This doesn't need to be added to the interface, it's already in the interface
Do we need to add a new migration to this API?
why not `setParameter`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
why not use `time` ?
Is the new `GET_CANVAS_URL` used?
Why is this change required?
This is a little confusing. What is the reason for this change?
You should add the default port port port port field to make sure the network network port is set.
Why do we have to change this? I don't think we need the `if` here.
I don't see the new parameter used anywhere.
This is a little weird. I think it would be better to do this in a `timerSleep` method. The same goes for `ticks()` in `lib/common.go` and `lib/common/common.go`.
I think this method is still not needed, right?
`backend->impl` is always undefined, so this should be `free(backend)`.
I'm not sure if it is the right name. I'd like us to keep the name as a parameter, but I don't know how much it's going to change in the future.
I think it would be better to just change `BlockHeaderBuilder` to `parentBuilder` here.
Do we need this variable in the config file, or is it just for the target batch size?
Should we have a `time` param that can be `null`?
I think this should be a `GrpcConfig.cpp` (and the other similar places in this file)
I don't think we should be changing this name. It's not a public API, and we should just make this public.
I don't think we need to change this line.
Model is not used, use `Model` instead
Can you explain why this is necessary? Like `__init__` in the docstring?
Why are you removing this?
please don't import full filename, it's not used anymore.
Why is this method called `trustedIssuer`? I think it would be cleaner if you use the variable name `key` instead, but you can use a `@NonIssuerAuthenticationManagerImpl`
The second parameter `index` is a `Debug`. It should probably be `index[0]` instead.
This is a breaking change, but I'm not sure it is worth it. I'm not sure if it is worth it.
Can you add a doc block to explain why we need the file here?
What is the difference between this and the previous line?
Can we name it `cStorPool`, `cStorVolumeReplica`?
I don't think this will work for all versions of the new API, so I would have added it here.
These `type`s don't seem to be used anymore.
This is a regression.
I think the idea is to have a config key that is going to be a string.
@chirimoya Is this correct for every security user, or should we just pass the user and pass the user as a parameter of the `addressing_type`?
I don't think we should change this.
This is the only one I'm worried about. Can we make a `GoneHttpException` class and use it here?
This was a bug, but I don't think we want to be sure that the `res` is the right value here.
I don't think this is correct. It is a bit of overkill, because the Math.random() is not a part of the second string, and we're trying to avoid the string, and if it is not, we should use `Math.random()` instead.
Is this change related to the bug?
I think we should use `send_all` instead of `EqImpl.matches?` here. It will also be a lot of work in this case.
This is a bit of a hack. I'd prefer if you could make `hostManagers` a property of `SimpleName`.
We should probably have a better way to do this, but I don't think it makes any sense for this.
nit: I would prefer if this was a `check` field, since it's only used in one test case.
I'm not sure this is the right place for this. I think the `CoreLogger` should be a `ICoreLogger` (or something like that).
This is a breaking change. We should probably have a common package for it.
I think the `cSpec` should be `exception_class_name, :failure`
is it possible for this to be `p1`?
Why not use `cbor.inarray`?
Can we make this a `static final`?
Can we remove `function (groups)` as well? I don't see any reason why we are removing it.
Not sure if we should use `_IF_X86_64` here.
Is this the right place to do nothing? I'm not sure if it's possible to just remove it.
Is this a bugfix?
This should be changed to `setKeepSorted(true)` in `setKeepSorted()` to match the existing behavior.
I think we should remove this `if app.SiteStatus() != "running"` as well.
Why not use `api.ENI`?
Is this needed?
This is the main change. The `s` prefix is used by both the `NTPSERVER` and `NTPSERVER` values.
This is a bit confusing with the bug fix. I would suggest `if exch != None: ... else ... else` here and below.
This should be `if (!source.containsKey(cseKey))`
I'm not sure about `save` as a parameter. What about `--update-save`?
Is it worth moving this to a separate pull request?
Why is this needed?
I think it would be better to use the `synchronized` method instead.
I think this is not a valid path, it should be moved to a different file, it should be made to avoid any confusion with how the image was in your filename
I think we should check for `readyState:3` instead of `isNetworkError` here.
Can we add a TODO to remove this and use a new one for the umask/gconflictes? It's not a blocker.
This is a little confusing, why is it needed?
I would suggest to remove this _ReachableFiles removeFiles and remove it from the current implementation.
Why is this change necessary?
I think this can be changed by using the standard `errors.github.com/iotex-core/action/protocol/poll`
I think it's better to return a `0` value here, and use a `Map.isSupporting(caps)` in `setUp` instead of `destroy`, because the method is only called from one place, and the method is called from one place.
why we need to use the new one here?
`src` is a bit ambiguous here, `i < src_len - 2` is a string, so `i < src_len - 2`, `i < src_len - 2` is a string.
Is the `procRunning` variable still needed?
I think we should just remove this line.
This is a breaking change. It should be moved to `publicLink`.
This should be `IP`
Can you change this to be a `ensusCompleted` rather than the `ReportDeploymentCompleted`?
I think we can skip the tparts[1] and use `L` instead of `S` everywhere.
this should be startMs.
Why do we need to do this?
Should this be `show-once`?
Why do you need this if there is already an exception?
I would suggest to rename it to `newInt32("wf-workflow-task-timeout", s)`
I don't think you need to use a different variable name here.
These are the same as the default config property, so I think these should be moved to class.
This is a bit confusing, since it's not a `nbytes` variable. I'd rather have it be a `n_bytes_with` variable that's more obvious.
I think we should remove removeNetwork and keep the ImageCleanupDisabled as it's no longer used
nit: I'd prefer if you didn't make this a `createElement` or `create-options` instead of `createRef` to avoid the need for this.
Can you please also update `renewBefore` to `renewal`?
I'm not a huge fan of having a default, so I'm not sure what the best thing to do here is.
Please use `storeSamples` and `storeTranscriptions`
Please remove all the new tests for gcloud-beta-prod/src/main/java/org/apache/hadoop/unit/core/gcloud-beta-latest wrapper-gen.js
Should this be `DistributedContextEntry`?
What is the purpose of the `Content-sa`, `no-sa` and `no-sa-x` instances?
I think this is a leftover.
I think we can remove this change. It is used only when the test classes are changed.
I think this import is unused.
I'm not sure if this is a good idea, but it seems like it could be a bit more explicit that we can use a `New` method for this.
I would use a better default value here.
I'm not sure if this is the right fix. I think this is the fix.
can you add a check for `topic_id`?
Why is this test needed? The reason why it's here is that the `TestCompose` test is failing is that it's not actually testing anything in `TestHelixCompose`.
I think we should remove the `application/json` part of the `request`
This is not a correct change. It's not a big deal, but it's not really a problem.
I think this should be removed. The other errors are now in `src/pants help`.
@bparees this was a bug, I'm not sure. The only thing I wanted is to change is the `name` field.
I don't think this is correct. I think the `.limit?` should be enough.
This is a very minor thing, but it would be nice to have a separate PR for the code that uses this one, and the other one in the code is not really needed. I would prefer to have the `auto` be used here, and instead use `m_indirectKernelMem` in the `reserve` method.
Is there a reason for this?
Shouldn't we also check for the expected number?
Why is this needed?
I think we can revert this.
I think we should just check that `!compression.Wireguard.EncryptHostTraffic && c.Wireguard.EncryptHostTraffic` is true.
Please use the list comprehension
I think you forgot to remove the `id` here.
Can you explain why this is necessary? It seems it's not used anymore.
Why is this change necessary? I don't see why you are removing it.
This is a little weird. It's a bit of a hack to have a method on the gatingGraphController and the other types. I think this should be `DetectionsGraphController` instead, and then `DetectionsGraphController` should be `Optional`.
This is a very minor detail, but I think it's a little weird that we're not doing this in the code that's used by the `getSetupIncompleteComponent` method.
Why do these changes need to be in here?
Can you use the same indent as above two lines?
This is not a good idea, but it might be worth to make sure the `account_hashed_changesets` is not set.
Is there a reason we are not using the license header?
Is it possible to make this a constant? I think we should have a constant in the `config` class.
I think this is a breaking change. The only thing I'd prefer if we ever add a `Node` method in `Abstract` and `Node` to the `Abstract`.
We can now use `@test.diary_revs` here, but this test will fail.
I'm not sure if it is a good idea to use a task for this, but I'm pretty sure this is going to cause issues. I'm not really sure if we need the task to be run before the change, and it's probably better to have it in the task task instead.
I don't think we should import atexit here.
This is not a valid return value.
This should be `errors < 30*time.Second`.
What's the rationale behind this change?
nit: I think this is a bit of a hack. I think it's better to just use `global.googlesitekit = {}` instead of `global.googlesitekit`
Shouldn't we also do the same for the `return` block below?
This should probably be `.setState(`.
This file should be moved to the base class
I'm not sure this is the right place for this. It is also not used in the API.
I don't think we should change the path here, since it is a list comprehension.
remove empty line
This seems like a bugfix for me. If the new behavior is correct, it should probably be `f.)s` instead.
We need to add the other options for this to ensure we are not using the API.
why is this not yet exit, is it?
Can we make this `deprecated_fields` (and the `append_like` function) instead of adding new fields?
Shouldn't we log the warning here too?
We can remove the code for `CreateAnnotatedCodeLocations` now.
Is this the right place for this? It seems like it should be a `err != nil`?
Is this change intentional?
Make this `exit_code`, and make it a `const` instead of `0`, since it's a `new` variable.
this will be called on every request, right?
I think it would be better to move this to the `query/common` module.
I'm not sure if we need the `SoftKiller` here since it's not being used.
This is the only place where we need to check the `code_FORMAT_MOD_LINEAR` flag.
I'm curious why you removed these 2 `fmt`s?
The test is actually failing because it's the same as `std::find` (which is now called on the `std::string` method) but it is the same as `std::get_activations` (which is why the need for the `std::string` method). I think it should be moved inside `std::find` function
Should we be using `endswith` here?
This is not the only change that affects the tests, right?
Should we add a check to make sure we are not returning an error?
Can you add a `TODO(dockerClient.EXPECT().InspectContainerExec(gomock.Any(), gomock.Any(), gomock.Any()).Return(blank).This is a little bit confusing.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Does the `Filters` here need a `Filters` parameter?
Why do we need this change here?
Is the log level intentional?
I'm not sure this needs to be a `.min` or `.min64` for all the supported versions. I think it's more readable to use a `CurrProto` instead.
Should this not be set in the `if attributes.Initiator() == enumspb.CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED` block?
This should be `import listenbrainz.db.user as db_user`
I'm not sure we should be changing this to `conference`?
I think we should not use `HasValue` for this. The `!Equals()` method is used for both the `!` and the `!` classes.
This is not the right place for this method to work - the first part of the `splitext` function is used.
you should use a `getDataSource` method to avoid the need for an extra param here.
This test is not really testing anything. I would expect a test that has not been run in a test.
Is it expected?
Is this change necessary?
I think it would be more readable to use `_fields` instead of `_fields` here.
Does `statements` need to be in a separate `if` block?
I think it would be good to have a single metric for this as well.
I don't think this is the right approach. The only place we use is that we are not doing the `conda.fs.gitea.fs.gitea.fs.gitea.fs.gitea.fs.gitea.fs.gitea.fs.gitea.fs.gitea.fs.gitea.fs`
I think this needs to be `Unlikeableable` to avoid unnecessary unnecessary work
I think we can just remove this bit. We can do this in a later PR, and it's a bit more readable.
This should be `true`, not `false`, right?
This should be `size_of_bytes`. The same for the other file, should be `size`.
I think we need a similar check here.
This could be a static field
This is not needed, the constructor is already created
Shouldn't we add `W9021` here?
Can we use a real real real real real real real real scenario where this is used?
This is not a valid change, it's not necessary to use a default value for `version` and `version.cd`
I think it's better to use the `surface` variable instead of the string, as the result of the function has to be the same. The `role_data` is not a function.
Shouldn't this be done in the `createExtension` method?
@mfojtik why do you need to change the test to `rescanDeps`?
Is this needed?
I would just remove this method and put it on `apis` instead. It's not a big deal but it's not worth it.
Use the new Ruby 1.9 hash syntax.<br>Line is too long. [81/80]
I don't see where this is used.
Please use `Config::is_directory()` instead of `Config::is_directory()`
Shouldn't this use the `Dist`?
You should be able to remove this.
@bvaradar can you please revert this change?
I think we need a test for this
Maybe we should use `print()` here instead of repeating `str()` in the code base.
Can we put it in a new line?
I'm not sure if this is the right way to do this. I think we need to do this for now, as we do for `#if NETCOREAPP3_1` and `#if NETCOREAPP3_1`
Why do you need to pass the `Long` variable into this method?
I think the `reorder` should be removed as it is now the default scope.
I don't think this is needed
Hmm, this is a bit confusing, as the original code is actually using `path`, but the original code does not work for `path`, and it will be used for both `path` and `path.resources` files. I think it would be better to have a `path` method, and then have it take a `path` argument.
This is not the right fix, we can remove the `let promises` variable and just call `pushObject` everywhere.
`StringSliceEqual` does not return an int. You can use a `StringSliceEqual` check instead.
I don't see where this is needed?
Was this change intended?
remove the `config` since you're using the `config` path here?
This is not a good place to add a new function.
why this change?
Is this supposed to be here?
I think this is a bug fix.
I think this should be a separate change, since it's a test, not a test case.
I think this should be a `new ArgumentGroup` and not a `parent` object, right?
This is a bit confusing, since we're using the `getQuantityString` variable in `getQuantity`.
I'm not sure if it's worth it, but I'm not really sure how this method can be used.
I think we should use `START_OF_NEW_6X_APPROVAL_POLICY` here
I'm not sure if we should be using a `Bus` struct here, but it seems to be the same as the `L8` struct, so I'm not sure what this field is supposed to do.
why not just singlePtr?
Should we use the `json.put ("active_elections_size", 10000);` instead?
This is not a big change, it's not a function, so it's not a good idea to do it here, and it's a bit confusing to me. Maybe we should just call `options.unmount = function(component)` instead of the `except` block?
This is the only real change that fixes the bug that was fixed by this PR. The existing changes are just a little bit of a merge issue, and it's probably best not to pass in a `span` object, but I'm not sure if this is a good idea.
I think you should use `isinstance` here, because it's not a list.
This should probably be a `const` constant.
This should be in a separate commit
Why not using the `isset()`?
Would you please explain why this change is needed ?
I think this is a good idea. I don't think it is necessary.
Please remove the `@Nullable` annotation
This is a bug in the commit message.
Is this the correct version of the liveliness_s that you're using?
I think this should be `ecs` instead of `if len(signingName) == 0`.
This is the one in the test suite, not the test.
This is not a good idea. You should check for pathParam.indexOf(';') != -1 and then check for it.
This is a change in behavior, but it seems to me that the `ValidateSignature` function is not being used.
I don't think you meant to remove the default implementation
`filterExpressions` should be non-null and `filterExpression` should not be null, so we can remove the null check.
This is not a correct change. It's just a thought but it would seem a little weird to me to me that we are not doing any changes to this PR, but I think it's a reasonable default for a few seconds.
Why do we need this change here?
Why not just make `len += 1; // Tags and metrics` a `torch.Init()`?
I don't understand the purpose of this change
I think this should be part of the `username` class instead of `accept` as the method is called `undef authenticate`
just to check, is it safe to call the function directly here?
The `hash_table_nextkey` and `hash_table_firstkey` functions are not needed anymore.
nit: you can remove this
Why the new Exception is needed?
I think it would be better to do this in a separate function, rather than in this function, and have a test that checks for this length. That would avoid having to pass the cmsg_data to the standard length.
This is a change from the PR, but it is not related to the fix, but it seems to me it should be a separate PR.
This is the only place I'm asking about the `sampleParamConfigMap` variable being removed.
This should be splitTableRegion
I think this import should go after `issue_NAME`
I'm not sure about this - I don't see the reason to have the block block in the debug output.
This is not a public API. The only reason we're removing this is because we're now passing the map to the constructor.
I think this is a leftover.
This is not a big deal, but I think it would be better if we could just add a field to the `PGP_MIME`. It would also make sense to have this as a `PGP_MIME_view_view` and have the same field be used as a `PGP_MIME_view` (or maybe even just `S_MIME_view`). I think we could also just have a method `view_pGP_view_view` and have a `PGP_view_view` method that would be called with a single one.
This should go before the other go-cloud's imports
Can you please remove these? I think they are not used anywhere
I think it would be more readable if you use `const int & & &` and `const int & &` for the same reason as before.
@danrot what do you think of having a list here?
I think we need to add this to the memory service, since we don't want it to be reusable in the memory service.
I'm wondering if it's worth adding a helper function to this file, and having the code be more readable.
Is it safe for a type to be null?
Is this related to the change?
why log level is removed?
Style/RedundantFreeze: Do not use :: for method calls with no arguments.
why do we need to return list?
Can we keep this here and remove the `Sources` variable and just have it be an instance variable?
The `.matches` was not used in this class, so we should remove the `.filter(tree -> matcher)` call
This is a no-op if the `graph_notes` is empty.
This method should not be called when `setAlwaysEnabledPluginsEnabled` is set to true.
Can you please add the same constant for all of these constants?
why not `to copy`?
Metrics/CyclomaticComplexity: Cyclomatic complexity for this is too high. [7/6]
This is a bit weird, we are not using `hideOnTouchOutside` in the code.
Is this a bug?
This class is unused.
This should also be a generic type.
Is it necessary to call `.length()` here?
This is the only change that affects #3333. I'm not sure why the `1010-2` flag was here.
I don't think we need this API, as we are not using it anywhere in the code
Why do we need to remove the `isinstance`?
This change is not needed.
Why was this added?
I'm assuming we're going to return here, but I think we should return `default` instead of `return` here.
I would have expected this to be a test case as it is not related to the current bug, but I think this is the only change that makes sense in this test case. I would have expected this test to fail.
remove empty line
We should also update this to use `LightGBMCallbackEnv` as well.
I think it would be better to just use the attackedSet.end() method here.
@salesforce/design-system-react/components/carousel/__examples__ should also have a `getStories` attribute that can be reused.
Should we use `electrum_on_electum` here, or is it just a bit simpler?
Why is this needed?
I think this is not needed, we can remove the `Task DisposeAsync()` and `Task DisAsync(TransferFormat transferFormat)`
@executable is nil, you can use: `@executable = ''`
Why do we need this check?
This is a change in behavior, but I think it's better to move it to `withEncoder` and have it be a `float` package, and have it be a `float` and `float.float` as well?
I think this should be called 'operation-1234' or something similar
Can we use a `Post(api.CreateReleaseOption{})` for the same?
I think this is a little too vague.
Please revert this change.
This is a breaking change. It is a bit weird that the `HeadEvents()` function is called on the `TypeSet` and `SetHead`, but it seems like we should be setting the `TypeSet` to the `Set`. I'm not sure if it would be a good idea to have it be called twice.
I'm pretty sure this is the only way to get partition ids from the partition ids, but I don't see any reason for this test.
I don't think this is needed, the `expand_path` should already be `null`.
I don't think this should be part of the public API. I would prefer to have a `private static bool IsARMServiceDefinition(ServiceDefinition.Extensions.ContainsKey(...))`
do not use `pool *core.MessagePool` in this file. just use `pool.infinispan.common.MessagePool`
I think we can also remove the `AnyTimes()` call.
This should probably be `storage_strict_json.history`
This is a very minor thing, but I think it would be nice if the "required" was the right thing to do.
This is a breaking change.
why are you removing these?
Shouldn't we also have a `before_PublicKey` field in the `wallet` key?
I think this is the line that was missing
is lowerCamel a public method? I don't think it is a good idea
This is the only change that affects `IsCompatibleTo` and `CanCombineWith` that is used in `node_based_graph`.
I think it's better to use the `Jiva_pvc` helper for `app/views/pvc-data-yaml.yaml` instead of `app/views/pvc/api/storageclass-1r.yaml`
This is the only change in this file. The `Transport` version is not in `pkg/commons/commons/commons.go` and it is not in `pkg/commons/commons/commons/commons/commons.go`
Should we add `--UUID` to the public docs?
Why is JavaEnv needed?
I think this needs a `json.versions` struct too
nit: `config_path` can be `final`
Can we use a different message here? I'm not sure what we expect.
This is a breaking change and I'm pretty sure it is needed for this PR.
I think it's a good idea to add some default value here. It is used only when we have a file, and we should be able to get rid of it.
this should be changed to `github.com/google/knative-gcp/pkg/apis/events/v1beta1`
I think it would be better to do this with a `_operation.Responses.Keys.ForEach`
Is this needed if we have `#ifndef __ANDROID__` in `_ANDROID`?
This is a little strange with `return false` in `New`
I think we should remove this too.
nit: `!` should not be here
Is this used?
What about the TODO?
This should be in the `__eq__` package.
I don't think this should be here
"replace considered negative" -> "replace considered negative"
Would be good to have a separate PR for this.
I don't think this is correct. The `function` package should always be a package.
I think this should be `static`.
I think we should remove the 95 check here.
I think this is not needed. It's already a new API.
Why is this needed?
Why is this testClasses removed?
Can you use `go-algorand/data/basics` instead?
I think this should be in the other files.
I think this is a little hard to follow.
Why not just removing the `http` parameter?
I'm not sure if this is correct, but it seems to me it should be `types > 0 && len(data) > 0`.
Do you need to include the `group` field here, as the user will see it being used?
This test is still running on Windows.
This is the same as the other PR: 1. I don't think we should be using the new API. 2. What is the benefit of having a custom type of the configuration in the rule?
I don't think it's necessary to use the `0` value.
I'm curious why you need to make these new properties exposed as public ?
Please don't change the signature of the function, it is a bugfix.
I think we can remove this now that we are removing it from the test file
hmm, this is a bug fix.
@jmhooper Ditto here - please check if this change is not needed
This is not a good idea, but I'm not sure if it's better to put this in an `else`. It's not really important to have a default value, and then we can have a `None` default, and it would be more clear that it's an `str` and then a `str` would raise a warning.
why not use the upper limit?
Can you add golfirmed import order to this new import?
I would prefer to keep the old flag. It is not used anymore.
Can this be `else if`?
Should we also add `#define Wex TYPE_W` to the `if (CPSZ_half_16_vex32_evex64)` above?
This is not a valid name, this is a little odd. Can you make it a static field instead?
I think this should be in the other PR, since this is the one in the build directory.
This log message should be more specific.
This import seems unused.
Can we move this to `const`?
Nitpick: We could also just have a `Error` field that is passed in to the `Error` and then use that here to make sure the `Error` is passed in.
`close` already has `close` in it, should it be called from `start`?
Why are we changing this?
These tests are just about to make sure they are only used for testing.
Is this a typo?
I'm not a fan of having a dependency on `*_file.go` (which I'm not sure is what we need for the `*` command). I'm guessing that's the only change that's needed to be in this file?
I think we should change this to `import static`. The reason for the test is to ensure that the output is not present. The output is not in the output.
I think this is a breaking change.
This should not be needed anymore.
This should be `defer containerAccess.unlockContainer(containerID)`
Why not `Unknown advert position name "%s" ...` ?
Is this going to be an edge case?
I think it's better to just remove this line, it's used for the `MarshalOptions` below.
Why was this changed?
I think we should remove HiveConf from the constructor.
This is a bit of a hack. It is a bit of overkill to have `StateReader` a default, but we should probably add a TODO here.
I don't know if this is a good idea. If we do this, we should probably just have it as `HiveTable` to be consistent with the other cases.
"" sounds weird to me. I'm not a fan of "no value" as it is a part of the name, so maybe "is not zero" or something like that?
This is a bit of overkill. The only thing we're using this is that if `overlaid` is `None`, then we don't need to set `overlaid`.
I'm wondering if we can just remove this.
This should be removed. The import is no longer needed
I'm not sure why this is needed.
This should be `gmbal.ManagedObject`.
This is a bit weird, I'm not sure if this is correct. It is a good idea to have a `BytesWritten()` method in the constructor.
I'd like to see a more proper name for this. It's a little bit confusing to have a single `toMultipleProps` instance that does something like that, and it seems to me like that would be more clear what's going on here. Maybe something like `hasProps` or something.
nit: this import is unused. Please revert
I think this should be moved to `wlr_render_texture_create`.
I'm not sure why this is removed?
This change is unrelated to this PR but I'm not sure why we need to change it.
This is a change from `@throws Exception` to `@throws Exception`
Why is this needed?
@deads2k @tgamblin Should we be consistent about this?
This should be a one liner.
The role is removed in this file.
I think this should be a runtime name, not "gc"?
This should be a `fields` field.
remove empty line
this is a change in behavior, but it seems like it should be an option.
Why is this `topHandler` being set here?
This is a bug fix, but I'm not sure it is worth it.
I think this is the only change that affects the check.
do we need this file anymore?
@Jjagg - I'm not sure if we should change this test to use the `+5` tag in the tests.
I'm not sure why `oumin` was necessary here.
Is there a reason to use `ref` instead of `ref`?
this is a bug.
I think this should be `--branch-depth` since it is now the same type. The same as `--branch-depth` in this file.
I don't think this is a good idea...
I think it should be also `self.version_id = []`.
This is not a test, but a test that checks for the error.
should we use a `\` in here?
This is the only place where I'd like to see a `set_index` call. I think it would be better to have a method that returns a tuple of `uint8` instead, and then call `uint8` in the `column_fields` method.
I'm not sure if it is a good idea to use the default value for the default value, since the default value of `HIVE_SCAN_SPECIAL_MODE` is not defined.
I think we can get rid of this.
I think we can move this file to `__author__` and move the `email` below.
I think we should use `self.copy_list()` instead
This is not necessary.
Can you add this to the other `EnablePrometheusMetrics` keys, so that we don't have to do it in this PR?
This test doesn't seem to be doing anything.
I think you can just use `address.toCashAddress()` instead of `.replace()`
I think this should be `persist_mode_on_change` instead. The `persist_mode_on_change` is used to pass the `is_on_change` to the `on_change`.
Could this be called `Headers` ?
I'm not sure why you removed this. It is a good idea to add a check for null here.
`getLiteral()` is a subclass of `StringDate` for our use case.
This is the only change I'm thinking about. The `log` method is called in the same `log` method. So the `log` and `log.log` should have the `log` method, which should not be used here.
I don't think this is used anymore
I'm not sure this is the best way to test this. It seems like the test is failing.
This should be left as-is, no need to make it configurable.
I think we can remove this line now, since we are now using the `debug` function in the `debug` function
I think this is not a valid API, we should be able to use a new method. I don't know if we want to do this.
So we're not doing this everywhere?
This is the only change needed in this PR.
I'm not sure this is correct. We should be doing the same thing in `SystemPropertyProperty`.
Please update the docstring to reflect that.
I think the `_window` can be removed now, as it is now just used by the `_presenter`.
Should we just pass the value to `props.selector`?
Why is this change necessary?
This is a no-op change.
This file should be reverted.
I don't think you need to do this here. I'd just add a `__init__` method to `iec104_information`, and remove the `__init__`. I don't think that's a good idea, just a suggestion.
I don't know if it's worth it.
This is a little strange. I'm not sure why the change here is needed.
This should probably use the `IndexIndexService` class.
This is the only real change that makes sense, but I'm not sure how to test it, and it's probably worth a ticket.
I'm not sure this is the best place for this.
Please use a short version of this, and add a TODO to remove the `path/` import from `os.path.join`
I'm not sure if we should add `_x( 'Analytics', 'Service', 'google-site-kit' )` to `_x( 'Analytics', 'Service', 'google-site-kit' )` here, as we're already doing it in the `_x` list.
This is not a typo
I don't think this import is necessary.
Line is too long. [83/80]<br>Space inside { missing.<br>Space inside } missing.
I don't think we need this anymore.
I think this should be a `SetupsorMenu`.
This is the fix. The code below is only ever used to set `options.strictPopulate` to true, and then set `null` to false.
why is noiseRemoved needed?
`str = str.gsub(/\\/, '\\e` ?
I think this should be `default!= ''`, since the default is `default`
If it is a change from a file, this will break all of the sources. Why is it necessary?
This is a bug fix, right?
nit: remove empty line
Can we add a check here to avoid the need of the check?
I think we can use `execution_source` instead of `execution_source` here.
I don't understand why this change is needed. I don't think we want this to be in this PR.
Is this needed?
I think this should also be `violations.format(model_name)`
`&:to_i` seems to be a little too generic, since we're using `.update_all(&:to_i)`
Why not using the old event hooks directly?
this needs to be revisited for cases with multiple cpus per model;
This is not a valid browser version, but the version is not in the browser version
@matt-gardner Isn't this supposed to be true? I'm not sure if the test is correct.
Is it possible to add a TODO?
I think we can just remove `except TypeError:`. The `message` variable is not needed anymore.
I think it would be cleaner to just call it `overwriteFlag` and then use `overwrite-scipy` to indicate it is not a list of input. Also, you can use a different name for `cli-input-yaml` and `cli-input-yaml`.
Why is the `Exception` necessary?
This seems like a good change. Is this related to this PR?
Please rename to `getArtistName`
I think this is a bug fix. It's just a fix for `msg.Data`
I don't think we should change the condition here, since it seems to be a change in behavior.
The QOverload is not necessary here, since the Qfluent will not be used.
This is not a good place to put this function. I would say it's not the best way to do this, but it's a bit more explicit and less readable than what you're doing. I would also say that it's not a good idea to have it be a good place to put this function.
This import is unused.
This is a bit of a hack, but I don't think we need a reason to make a difference in the code, as the code is not very clear to me. I think we should be able to just make a method like ` self.skip_VALUE` that we can use in the code base to avoid the need for the user's code base, and we could have a single `reason` param in a single place.
You can use `catalog.send`.
this is a change in behavior... it's a minor thing.
You don't need to add this. It is just a string.
I would put these lines under the hood so they are not needed anymore.
I think we should just have this in `errors.Wrapf` and `errors.Wrapf`, as we are not going to have any service updates.
I think we need to change this to `undefined` now that the `EMPTY_OBJ` property has been removed.
The suffix appended to the generated file names and the generated file names are the same.
this is a bit weird - it is not supported on the rhel4 object. it should be called `redhat-4`
I don't understand this change. Is it intended?
I think this can just be `exec` now.
I think this needs to be set in the `if len(self.pin) > 0` check
We should probably also add `sendCommandForDownloadChromeHeadLess` to `registerApplication`.
We should not use the global namespace for these.
This is not a correct change, we should use something like `Objects.com`
Might as well also add the `Client` tag here.
I think this was a typo
@kroitor since this is the same as `axe._tree[0] === null`, we should probably just remove the `axe._tree[0] === null` line.
This is a bit weird, why is it a list?
This is not needed. It is already set on the `FileHelper.CombinePath` above.
This is a little hard to read, I think, but it's a little hard to follow.
nit: you don't need the `getPlayerState` here.
I'm not sure this will cause a problems, but it looks like the `unsubscribed_from_emails` is only used for the email address.
This is a very minor thing but it seems like we should be using `Checkpoint-agent`.
I don't think this should be done in the `config.yml` file.
I think we need to use the full name for these files. `gulp dist --update --update` is already in the `gulp dist --update` file
This is not the right place for this. The `VerticalScrollBarWidth` will be set to true.
This is a change in behavior. The `attach` call here is not necessary. The `attach` call below is only used in `build`.
We could just make this `TestApplyEnv_Platform` and remove all the TODO above.
I don't think this should be here. The `confirmation` should be removed. The `_` should be removed.
why did you change this?
Should be in `klabels`
This is a no-op, but the spec is still running in `test_common.py`
This is the main change.
I'm not sure about this. It is the case that the `lobGlobals` is not null. I think the `is` check should be sufficient.
This should be removed.
I don't think we should be using a copy here. We already have a copy for the account limits.
@mmaxim this was changed to 0 to avoid any conflicts.
Should we use the same name here as the other tests?
This can be simplified as `binding_count_`
This is a bit confusing, because we don't have a `Environment` field.
Why not just import `ClickNextButtonNoCheck`?
This seems to be the only change that fixes this. I think we should move this line up to where the schema was null.
I don't think this is correct. It's a very minor change.
I think we should remove this TODO
Why is this needed?
I think you should use `UPDATE` here.
I'm not sure if the test is still working on this, but I think it should be `does BiocCheck.*/`
I don't think we need this record.
This is not the correct place to put it. The `else` clause should be removed.
I'm not sure if it's worth the closing paren here. The `connScan` is the `10-2.0` file and `10-4.0` file. I'm not 100% certain this is the right place for this, though.
I would prefer to see a function that returns a list of boolean arguments and not a list of boolean parameters. This is the default value of `bool(calendar)` which is a function.
Why is this a `ensor` ? I think it's not a `List` ?
I don't think we should add this check here, it will be hard to read.
This should be `declare(strict_types=1);`
I think we should log the message here.
I don't think this will work, because you don't have to check for `_write_header`
I think we should make this a separate config, not an actual config, as the user can't access it.
I think we should still keep `coco_instance` here.
Please remove the space between if and the opening brace.
I'm not seeing where this is being used?
I think we can just remove this and just call it `close` with the `NoIID` above.
Why did you change this to - 1?
I think we need to keep these in the code.
I don't think this is a valid solution. I would suggest to use a different name for the new param.
Can you add the new shard shard property to the new shard shard?
I think this should be a separate pull request.
I think this is the wrong name. It should be `conf.iface`.
I don't think we should be adding this here. I'm pretty sure the name is not very descriptive, but I think it's a bit weird to have a name like this, as it's a simple name.
The `name` is not necessary, because `.lower()` will always be present and it will be `None` and the `lower()` will not be executed when `name` is `None`
Nit: `Test` is not a big deal. Maybe `Test.class.class`?
Why not keep the method as final?
This is a little hard to read, but I think it should be moved to the top of the file.
Can we do a `\` instead of a `\`?
I think this is a leftover?
I think we should just return error here.
Why not `assertThat("Wrong sqlcipher version", "4.0.1 community", store.getSQLCipherVersion());`?
Shouldn't this be `.binlog"` ?
Please add a docstring explaining that this is a breaking change.
I'm not sure if this was the intention to change the timeout.
I think we should check for the first time we call the shiftAmount and not the last time.
This is a bit weird, why are we changing the default behavior?
I think we should also add `go-sql-bigquery` to `go-sql-bigquery.go`
Use 2 (not 3) spaces for indentation.
I think this should be called `RegexOptions.Compiled` or `ERROROptions`
Why is this needed?
why do we need this? I think it is only used for testing purposes, and it's not used in this PR
This should be removed.
I'm wondering whether we can avoid using a list of `JSONObjectHelper` and use it in other places.
This seems to be the only way to do this. I'm not sure if it's worth the familiar with the code, but it seems like it would be a good idea to use a `Run` variable in the `IsIsRun` method. That way, if the `Run` method is called, then it's not the case, but the `IsRun` method is called from within the `IsRun` method, and if it can be called from `Run`. If it's the case, then the `Run` method can be called from the `IsIsRun` method, then
I'm not sure this is correct. The `getDerivedStateFromProps` is only used in a single test, so it's probably not necessary to add it.
I'm not a huge fan of this extra line. I think it would be good to add a space after `:` and a new line after `:`
I think this should be `EXCLUDE_CMS // TODO-lucas How can we achieve this w/o changing the BftExtraDataCodec base class`
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think this needs to be a `TracerProvider`
I think you forgot to remove this
It looks like this should be `options.iframes = true`
I think this should be a separate pull request.
Why was this removed?
I think this is not needed.
This is not a part of this PR, but I think this PR should be reverted
remove empty line
This is not needed anymore.
It seems that this is the only change that makes the exception more readable, but I think the `inputValue` should be a bit more clear.
I think we can remove the public method altogether now
I think we need to make sure that the value isn't set to 1.
Why do we need both in case of spark spark and existence of spark spark ?
This variable is no longer used.
I think this should be `internal`
This change is incorrect.
This should be a debug log, not a `debug`.
This should be `const DashboardUI = require('./Dashboard')`
I think this should be moved to a separate PR, right?
This is the only change that affects the schema.
`reverse()` is a very generic name. I'd suggest `reverse()`
This is a little confusing, since `MatchFold` is a `Type`.
I don't think this is used.
I think we should remove the `EnableProcessBlockStats` function completely.
why is this removed?
I think this should happen in `app.Before` too, but not in the `if` statements.
This is a bit of a hack. It is a bit hard to understand. What about something like `export { default as memoizee } from '@deque/dot';`? It seems like the `export { default as memoizee } from '@deque/dot';` should work, but I'm not sure if that's the right thing to do.
Why not `super(MessageDigest.class)`?
@sparhenasasala Can you please clarify how this works for Kecc and Keccak?
Is there a specific reason for this change?
This one is a very generic name. It should be `update_flag`.
This is not right, but it seems that we don't need to check the `BlockCache` here anymore.
This is a change in behavior. I'm not sure if we need to handle any of the data in the future but it's not really a good idea to handle it.
Is this method used anywhere?
I think this is the only change that affects this setting.
This should not be necessary. This is the only place where we need to do it. I think we should just keep the `Verb` class and remove all the `verb` cases.
This file is now unused.
Why not `bla.peers`?
We should be able to remove the `inMemorySqlType` from `getSchema` and `setSchema` here.
This should be `product_product_weight`
This is a bit of an overkill, as it's not really an error, but it's not a problem for the user to know what the `getAccountNumber()` method is used to set the `Account` instance. Is it something we want to avoid?
This is a change of behavior, I think we should fix the test in the `test/test/test-system/babel-tests.js` to make sure that it's only used in the test suite.
What's the purpose of this?
I would prefer to return an error here, as it's only used once, and not on every call site.
I think this would be better as `selectAll` or similar, since it's not used in the query anymore, and the query doesn't have to be passed as an argument to `getattr`.
This needs to be updated to match the new convention of `<link ./promise>` in the doc.
This is a bit of a hack, I don't think we need a new function to return a nil error.
This should be moved to the top of the file, not here.
I don't think we should be using `session.BalanceTracker` here.
Please remove this empty line.
Is this intentional?
I don't think this needs to be in the models package.
Why did this have to be typeWidth?
This is a very good idea. The `Load()` method returns `0,1`, so the `isinstance` check can be removed.
Please remove this extra line.
This import is unused and should be removed
This is the fix.
this should be `goimports`
This is not the best way to handle this case. The `llvm_version` is a `>= 2`.
why was this removed?
This will be very useful if `err` is `None`, but we don't want to log an error here.
I don't think we should do this, the `args`, and the `run` are the default.
I don't think we need to keep it for each method. It's not a big deal but it's just a question of why we need to change it.
I think you can remove `backend` now that it is not used anymore.
I think we need a similar change in the other places as well.
This should be `cert-manager`.
Is there a reason for the `mapping` prefix here?
We should keep the original constructor for better readability.
This and the following two lines can be removed
Should be `ldap3` and `ldap3`?
I think we should just remove this line and keep the test_item call.
You should use the `if` statement here.
I think we can remove the `return` here.
@jridgewell I don't think we should be setting this in `renderers.renderers`
I think this is not the way to go.
I think we should change this to use the `ResourceReference` field. We should change it to make sure it's a static utility function.
This change is unrelated to this patch, but I don't think it's necessary.
This is a bit of an unrelated change, but it's not really a deal breaker.
@deads2k any idea why we need to add this ?
What's the reason for removing this?
I think this is a breaking API change and it's not a public API. I don't think we need to change it.
This is the bug fix.
We should not use the right `getBlockPrefix`. You should also use the right `getBlockPrefix` method to get the given method.
I think we should remove `logWriter` from `serviceAccountTokenCreator` as well.
I think we can drop this import
I think we can remove the file here.
Should we use the same constant for RPATH?
I don't like the `+ 100` here. It is a reminder that your Learn <%= @subscription.plan_name %> subscription.
Isn't the `stream == nullptr` check sufficient here?
I think the `JSON` import is unused.
Is there a particular reason you're not using this API? It seems like this should be only here, not in the other files, not in the `await`, but in the other files, it should not be in this file.
Is there a better way to do this?
Space missing inside {.<br>Space missing inside }.
This line is not necessary.
Why are we using `Put()` here?
Why is `pubkey_hex` needed here?
Can this just be `not exist in included fields`?
I think we should add `!g_events->eventPlayerOnTradeRequest(player,tradePartner, tradeItem))` to the message and remove the check for `!= null` here
This was the only place where we set `Memoed` to false in this case.
I'm not sure why this is needed. It seems that the listener will be a global parameter.
Should this be a `let i`?
@jhipster/developers this should be a separate change
@smarterclayton do you have any concerns about this?
Should we log the warning here?
I think we can remove this and just call pprofHandlers here.
Please remove the unused imports.
can we use `assertTrue(TokenEntry.getEOF())` here ?
Can we have this in the `else` branch?
I think we should change this to `conan install` and not use the release notes in this file.
I think we need to add a new one for the new one.
I think it would be better to move the `AttackTimeout` into a `Set` function, and just call it once in the `BaseEpochs` function.
Why remove this file?
I'm not sure why you needed the `echo` here. I'm not sure what the `echo` value is for, but I don't see it in the `compute_cache.py` file in the `compute_cache.py` file
This import is not used.
This is a change in behavior, but I think we need to move the `setSelectedElement` call into the `setOnAction` method and move the `setOnAction` call into `getOnAllCategorySelection()` and `getOnAction` to the `buildCallback`.
This will break the old disk, so it's not clear that the `logf` is being performed.
I'm not sure if this change is necessary or at least a copy/paste error.
This is not a public API. I'd prefer a separate PR to have this as a separate PR.
Shouldn't we also do a `NetworkConfig`?
This should be `oldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldoldold
Why is `arguments` needed here and not `this._super` ?
This is a change in behavior, but I'm not sure if this is a problem, but it seems to be worth it.
This is a pretty hacky API and I don't think it's necessary to do that. It's a good thing to do, and it seems to be the case that the file contains a locale file, and the file contains a file, but the file contains a local file, and the file contains a local file that has no effect. I think it would be a good idea to just do this in the future, and if you want to change it, I think it would be better to do this with the error message.
this is a change in behavior, but the test fails without this change?
@tgamblin Do we need this? Or should we just use it to avoid any confusion with the `system`?
The `rev` is used to set the `list` on `Client` level, so I think this is a bug fix.
Nit: `MockAccount` and `DumpAccount` are not used anymore.
Is it really necessary to pass `bool` as an argument? It would be more consistent with how we do the same for the other occurrences.
I don't understand the difference between this and the other `` in the code base. Can you explain?
This test is not needed.
Why do we need a new block here?
This is not a valid pattern. It is a breaking change. The `ResourceMessage` method is only called from `ResourceMessage`, which is called by `ResourceMessage`. So, I don't think this is a breaking change.
This is the only change I've made to address.
I think we should be able to remove the x here. We can just use x here.
I don't think this is the right place to put this. It's a required change.
I think we can get rid of the logging and just log the logging at the end of the log. We can avoid the logging at the log level.
I think we should use the default `long` instead.
I think you can remove the default value here.
`--target=""` is not the right name for this new option, right?
Is this a change from `AuditRPCWithTypesStatus` to `AuditLog`?
Why do we need this?
I don't think we need this TODO.
This check is now unused. It is now useless, but it is not used anymore.
This is a good change, but I think it's better to use the function name here, and then use `lua_pushstring` in the `lua_pushl` function.
I think we should just remove the test.
This should only be done if the user is not running on the system and the user is not on the server side.
`parent` is not used anymore.
Is there a way for us to make this a constant?
This should be static, and it is only used in tests.
This is the only change that affects this change.
This is not needed, as `if sys.version_info < (3, 9)` is already imported.
I think it's not clear to me why we need the `NumExtraElements` here
Please remove this and use `#define` in the `#include`
This should not be necessary. The version should be `2.2.0`.
I think we should be able to remove the required_subject parameter from the test_meta_user, otherwise it will be used by the tests
Please revert this change.
Is it possible that this is not a `_get_presentationType`?
I think we don't need to import `_db`, since it's not used anywhere else.
I think this is a good change. The only place this is used is if we can move to a constant. It's not really needed here.
@mmaxim do we have a better idea for this?
Please use setw() instead of setw() as per the top of the function.
I think we can just remove `Brave-ring` from this line and use `Brave-Color` instead.
Why is this default true?
I don't think we should be passing the `--local` flag here.
This should probably be `package_set` instead of `reg_decoded_bbox`.
I don't think this can work for all versions of the namespace
I think you can remove this and just use `print("/{owner}/{pkg} already installed.".format(`.
This should be made internal so that the `setDefaults` and `setEventListener` are only used once
This test was failing in CI, and I was wondering if it's possible for this test to be run on a test or a test. I'm not sure how to fix this.
@bartonjs, I think this line needs to be updated to reflect the new version.
Is this the right place to put this?
I don't understand the logic for this function. I think it's worth doing it in a separate PR, and we're not doing that here.
This should only be called once per request, right?
Why do we need this? Is it the same as the main goroutine since it was a list?
This is a change in behavior, I think it's better to have the `adduxAndGoogleQuery` method return a `metrics` object that is passed to `metrics`.
Why not directly use `public`?
I don't think we can have a default value for these attributes. I would suggest `goto/01/2050:00:00, UTC`.
This import is not used anywhere else
This is a bit weird, how do we know it's the case when we're going to have to do the same thing for a different key?
Why not just use the same variable name?
I think this is a bug fix.
I think this should be a debug level. The `LOGGER` should be the same as the one in the log message.
I'm not sure if this is the best place to put this. The first part of the code is a little confusing, because the "in d" part is not the "in d" part of the d[k] and the second part of the d.add_message" of the d[k] is the "in d" of that.
This check is unnecessary if we don't have to pass the `s.Value` as an argument to `Printf` method.
This is a very weird thing to do. I'd like to see a better solution.
I think this is a no-op, but I don't think it is a good idea to add it to the constructor.
I think we should use the same constant for all the other methods. It would be nice if we could use something like `axe.utils.getStandards().ariaAttrs`
I would suggest to use the new `local_function` argument here.
I think this should be `LOG.finest("Created container", id)`
I don't think this is a valid example. The `<=` is a valid number.
I don't think we should include these headers here.
I think this is a bit confusing, since the `if` already exists.
Do you really need to import the file? It's used only in the `utils` module. It's used in `utils/cloud.py`
Line is too long. [86/80]
Shouldn't this be `[AspNetCoreBenchmark]`?
This check seems to be unnecessary, since it's already in the if block.
The default is `false` for `/schedpolicy`?
This should be an `ImportOrdering` instead of an `ImportOrdering`
This is a bit of an unrelated change, but it seems like the `&Install` is not needed here, as it's already a `list` method.
Can you make the `ExpireTableMetadata expireTableMetadata` a global instead?
This is a bit confusing to have a `*Branch` in the `*Branch` function. Is there a reason we don't need this?
this could be `return skipLogOnErr {` since we have a `err != nil && skipLogOnErr {`
I think this import should be removed
This is not a user's timezone.
Shouldn't the same be done for the class above?
I'm not a big fan of this name, but I think it would be better to have it as a `self.created` method that takes the `gdpr_agreed` object as a parameter, and then pass it in `self.login_id` to the `login_id`, then we don't need to pass it here
I don't think this check is necessary. It's a bit of an overkill to do it.
Shouldn't the `rc == 0` be `rc == -1`?
Should this be `[UnsupportedOSPlatform("browser")]`?
Is this the correct way to do that?
Why are these changes needed?
This is not used. It's used in the `GameDataDeclarationWriter` class, so it is not necessary to have it as a field.
do we need a test for that?
I think this can also includestream in C++.
I think it would be more clear if we could do something like "loadExtension(path)" in the form of a method that returns a new Error(path)" instead.
I'm not sure if it's worth the idea of a test case for that?
Nit: I think we should just remove this and call the function `chainsToFullRules` to make it more clear what's going on here.
Why is this change required?
Why do we need to keep the `applyRef` call here?
This is a bit of an odd change, but I'd prefer to have a test that passes in the controller, and then check the error.
I think you should be able to remove this now that it is not included after boost on OS X
should this be `App => <div />`?
Is this needed here?
Why are these two separate statements?
Should this be `bootstrap.js`?
Why not just remove this one?
I would prefer to have a test for this. This will break the test, right?
I don't think we need to add an `||` here. We can probably just remove it if we want to keep it.
I think we can move this check to the existing method. We could just do this in a separate PR.
I'm not sure we need to change the `APP_DOMAIN']}"` here.
This is the most important check.
this is the same as `GetActiveApp` as `app.GetName()`, right?
This is a bit of a hack, but I think it's fine for now.
Why did you change the default value of 3000 to 3000?
Is there a reason to keep the `&` and return `typeof(TFeature)`, rather than just returning `typeof` here?
Why not just remove the second condition?
Can we use a more specific name for this test?
Is this needed?
is there any way to test this?
This should probably be `if (isort == 0)`
this is wrong. You should just use the "context" version of the package.
this should probably be called `PREFIX_NUTRIMENT_LONG_NAME + "zinc"`
I think we need to make a new method for this
This change seems unrelated to the PR.
why not just put the title in the database?
I think you can remove the `getSimpleName` method altogether now.
isn't this a BC break?
Why did you change this?
This is the only change needed for the `__import__` test
I think we can move this to the `go.uber` package, as it's already in there
I don't think you want to do this. The `display/version` is a bit redundant.
This is a change in behavior, so I think we should be consistent about it.
This is not a good idea, as it is a breaking change in the public API. We should probably remove the `:` from the ` STRINGDataset` list from `RefDataset` and `RefDataset` list in the ` STRINGDataset`, and add a `Map` field in that `Map` field.
This is the same as `assertService.getOnMouseClicked()` in `getOnService()`
The `CopiedAnnotations` should go in the `common.xml` file.
This is a bit of a nitpick, but I think the commit title is still useful, so it's more clear that it's a "src" - but I don't know how it's supposed to work.
I think we should just remove the 3 seconds from the wait in between poll cfn for updates. I'm not sure what we want to do in that case
This should be `if (!event) return return`.
I think it's better to use `realWithInit` here.
I think we should use the `Data` constant for the base64 format as we do in the `user.data.StringPtr` check instead of the base64 format.
Why is this not needed anymore?
Why is this a `ca`?
Is this change intentional?
I don't understand why `arg` would be null here.
(style) space required after that ',' (ctx:VxV)
I think it would be better to use `NO_TRACING.getDefaultDefault()` instead of `NO_TRACING` as the default.
@mfojtik this was the reason why I added this change. The `Game.MaxEvents.SERCOM0_SPI` was not used in the `Game.MaxEvents.COM` call was removed.
I don't think we need to do this, let's just remove the `div` argument and just do `div>` inside the for loop.
if any(arr for arr in arrays) would be helpful, otherwise it would be a breaking change
I think we should use the same `ExpiredPendingMembers` method here.
Shouldn't this be `0`?
I think this file was added for a while. I think it is still useful to have a test that was not being used.
Why not use a `@param` here?
I'm not sure if this is the correct change. The `io.prestosql.spi.testing.error` should still be there.
This is the only place where we can actually use the default implementation.
We should probably use `.code` here.
Why not just use `this`?
This is the only change in this PR. I think the default value of create_no_window should be the default value of `None` so that we don't need to create the default value for `None` and we don't need to create the default value.
I think it's better to just remove the `filter` and `filter.Workload()` call since it's not used in the `Action`.
This is a pretty big change, but it seems like the `/` is the default.
I don't think we should change these APIs to use the same value for the APIs. I think the APIs are the only ones that are used in the default APIs.
Is it possible to move the `opentelemetry` to `custom`, and call it `length` to keep the `opentelemetry`?
This will be a bit easier to debug, since you can't just call `std::stringPrintf` on it
Why do we need this change? I think it is a bit confusing.
This is a bit of a hack, but I think it's not a huge deal but we should probably have a better solution. It's probably best to use `is_pants_pop` instead.
This is the only place where we need to change the signature of this function. I think the original code was fine, but it was still useful to keep the old code as it was.
This link doesn't seem to be used?
I don't think this should be a warning.
can you add a warning message to the user and see what the user is doing?
So this is a breaking API change?
I think this should be protected and protected
do we need this?
Metrics/LineLength: Line is too long. [123/120]
This is not the right fix. It's not related to the PR, but we should probably fix it in a separate PR.
we can also do `await db.collection('inventory')` in `db`
I don't think you meant `openqa.selenium.Screenshot` here.
This is the main fix. We should not be using it in the PR.
Why do you need to assign `countlyGlobal.company` to a variable and use `replace()` here?
I think we should use the new version of this check, not the new one.
This type should be `Dict[str, List]`.
Can you move this import up with the other imports, so that the imports are sorted?
Isn't this going to be used by the `ContextClientset`?
I don't think this is used.
This line seems to be unnecessary. `str(info)}\n{body}", ELASTIC_LIMIT_BYTES` will always be `None`, so I think you should use `./pants lint(info)` instead.
Is this needed? I don't see it being used anywhere.
We can't do any checks on NET45 and NET46 here, because the interfaces are in the NET45, so this change is only needed for NET452.
Is this TODO intentional?
I think this was the one I removed.
I'm not sure if this is a good idea. The code in this function is not a good place for it. The idea is that if the user explicitly specified a value, it means it's not a value and we can do it with a value and then do it with some sort of log message.
I'd like to see a more explicit error message. What do you think?
this should be `model.getServiceConfig().getApisCount() == 0`
@kroitor since I think this is a bug, we need to check for the default value for "true"
I think this is the fix. The `switch` statement below should be removed. The `switch` statement can be removed after `return false`.
Why is this needed ?
I'm not a big fan of the `itemsPerPage` and `page_info.current_page` in the `add_value` method. I'm not sure if it's worth it, but I'm pretty sure we're going to change this back to `text_name` in the `add_value` method, which is what we're doing.
What's the purpose of this change?
This is the main change. The reasoning behind the `Object` is that the `getState` function can be called in `createPortal`.
`s.hooks` and `s.hooks` seem to be the same as `len(this.s) == 1`, so this will not work.
@matt-peters, I think we can remove this `.NamespaceMatchSelf` now that we are already passing the `.Ingress` param to the `.Ingress` param. I don't know how to fix this, but it seems like we should be doing that in a follow-up.
I think you can just use `MIN_AMOUNT = 3000.0`
I think this needs to be changed to use the same logic as in the `after` clause, since it's not used anymore.
This is a change in behaviour, but I think it is still a bit of a hack, so I'd just remove it.
This is a good change. This should be moved to a separate commit.
I think we should just use a function to make it easier to understand what the function is.
I don't think we should be using a defaultTitle for these. I think we should just use the defaultTitle in the `if` clause.
Is this `SampleType.IN_CODE` used anywhere?
(style) trailing whitespace
Can you please change the type to `String` instead?
This is a breaking change. It doesn't seem to be used anymore.
Should we make this a global variable instead of a global variable?
I don't think we need this. It's used in the `tmImplementation` model, so it's only for `minResolution`s. Also, it's better to just call this `minResolution` in the `BaseEpochs` package, as it's a bit confusing.
This is the same as the one that uses the `experimental_requires` method. It would be nice if the same for the `experimental_requires` method.
Why do we need this change?
I think you can just remove the `if` statement.
This will fail on every run time the process gets updated, and the test will fail and fail. This is the case that the caller has to pass in an error to the user and then the test will not be running. I think the test will be able to run the tests on the same process as the test.
Can we make the span id a little bit nullable?
This message is not really useful.
This is a very minor thing. I'm wondering if we should just make this `Set[str]` and have `error` return an error.
It seems like these two should be `internal`, since they're all lowercase.
This should be removed.
Can you add a TODO to move this to `server.go`?
I don't think we should be testing the hash here, right?
I don't see any new changes in this file.
I'm not sure this is the right place for this, but it's a bit odd.
This is a bit weird, why is this not a part of the condition?
I think this should happen in `include/fixtures/dev.go`
I don't think we need the controller anymore.
Should we use `is_same_v` instead?
How about "This task task cleanup" or "This task task cleanup"?
Can you add a TODO about this, say, "Failed to validate the cluster cluster and are not used in flow exporter"?
Should we also add `statsEngine` to `ClientServer`?
this is wrong. `AppendLine` should be on the `if` condition
This is a no-op, right?
The `replace` method in the `invalid_indices` is used in the `replace` method, so it should be renamed to something like `replace('Invalid indices').replace(..)`
Do we need to make this configurable?
Why not just do the `array_filter` check inside `PersonEntity/Name/Full`, and then just do `return !empty($a);` instead of `empty($a);`
I don't think this will work, you can do with `UIA_notification` in this case
I think this should still be done, since the user is not present on the keystore anymore.
Should this use `HOST_weight()` instead of `HOST_url`?
I think the player should be removed as it will be removed after we get the "found running player" log.
Is this change necessary?
Why not using the $event->getOriginalFileUrl() function in the same file?
I think this is a leftover from another commit, and we can fix it in the future
I think this is not needed anymore?
This is a bit confusing. It is a bit confusing to read and read as a bool in the code base.
no need for this
Should we also check `string.equal`?
Can we rename the param to `service.MatchingServiceClient` to make it more clear?
I think we should keep an early return here.
This should be `HTTPNotFound_error`.
This should be moved into the `ProcessElement`.
Why are we doing this?
I don't understand this change?
We could just use `this.env_vars = _env_vars;`
Is there a reason for adding this?
There is no need to use `self.config_parser = config_parser.get('MESSAGES CONTROL', 'disable')` as the second argument is a little bit of a hack anyway.
Why do we need this cast?
Why do we need to change this?
This should be `str`, not `str`.
Was this a bug?
These two lines can be moved to the `forbidden_hosts` variable.
This is not a public API, it's a API change.
Why do we need to remove this variable?
This is a bit weird, why is it necessary to use `pathpath` here?
I think this should be done in `LOG(FATAL)`.
This change is not related to this pr ... but I don't think we need it anymore.
This is the fix, right? I don't see any reason to keep it.
Please remove this file.
Instead of a new method, can we just change the `GSUITE_SERVICE_ACCOUNT_KEY_FILE` name and have a new method?
I don't think we should be changing this here. The `globalVars` package is already in `appDir` and `lib` is not in `lib-buildVersion`.
Please don't add trailing whitespaces
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think we can remove this method entirely and keep the one in the `#build` method.
I don't see any tests that were passing for this, but I'm not sure how to fix it here.
This is not a big deal, but I think it's worthwhile to remove it.
This is not a good idea, but it might be nice to have this in a `redirect` model, and have it be an `redirect` model instead of a service, and have it be a service that has to go away.
I think you should use the `if` here.
Could you please add a space after the `record`?
Why is this necessary?
This is a breaking change. We should not have to change it.
I don't think we should be adding the check for segment here.
This is the default value for 1091000, why is this 1091000?
this is not needed. the condition is already in the if (primaryType == PrimaryType.TimeSpan)
Should be `@example`
This isn't a good idea. The only reason we're using `char c` is that we're using `char c` in the `char` package. The `char` method is used in this class, so we should probably be consistent.
This can be removed.
I think this is a good change. It's a little hard to follow.
do we still need these logs? I'm surprised that it didn't get used
Maybe we can move these to the top of the file, and just have the query be the other way around.
This spec seems to be a very specific description. What do you think of?
I would suggest to add a `import` statement to the interface and then to keep the API compatibility.
I think this should be a `const commandOptions = Object.assign({}, cursor.options, cursor.cursorState);`
This seems like it would cause problems on a non-0 release.
This is a bit of a hack. It is also not a blocker for this PR, but I think it's better to have a way that passes this variable to the `service.com` file, and then just use `service.com` here.
This is a breaking change, I think it would be better to move this to the Java interface and just call it from Java interface.
Why remove the copyright?
Is it possible to get rid of this?
Is this line necessary?
This should be a static method
@mmaxim do you know why this was removed?
This is not needed.
This is not needed. The `blogCsrPath` file has already been added in the `tests/test/fixture/certs/blog_cert.pem`
This is a change in behavior, but I don't think it's a good idea to do this. The `string.ToString()` can be null, but it's a bit confusing to me.
I don't think this is the best place for this.
I think this should be `type ITableObject()`, since it's only called from the interpreter package.
This is the line that was causing the flake8 tests to fail.
This is the only change that affects this PR.
This is not needed.
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
I'm not sure if this is correct, because if we don't have any other way to do this, we should do this in a follow-up PR.
Shouldn't we just change the name of the function?
This is not a good name. The `setTemplate` method should be called with a `setTargets` method.
This is a bit of a nit-picky, but I think it's better to move the log logs to the `info` package, since it's a `info`.
This is a change in behavior, I think we should just use `using NamespaceInstrumentation` here
This is the only place we're doing this, we can just do `proxy.attach(ident)`, and remove the TODO above.
This is not a valid var, right?
I think we can remove the `== 1` check now
@franckc forgot about this, it is not related to the fix, but I think it's better not to change this, as it is a bug fix.
Do we have a default column for these?
@bflad this is the only thing I found in the first place. I'm wondering if we should just keep it as it was. I think we should be able to remove it from this PR.
I think this should be `engine.eval(scriptContent, errorCallback)`
I think this is a good idea, since the `rand.Seed` function will only be called when `stateStore` is not `null`
I think it would be better to have an option for this option, and instead add a new property to `--rpc-` and `--max-require-chainid-in-txs` that is not supported in the `--max-` option.
