I would move it to a new file
I think the `$config` variable should be removed here
@jcotela is this going to cause issues?
`isNaN` is redundant here
Isn't this already set in the `avigating` namespace?
I think that this is not needed since the interface is already marked as `const`
I think this would be a better solution to do.
(style) code indent should use tabs where possible
I think you need a log.debug here
This should be moved inside `static createSession` so that the `if` check isn't needed.
I don't think we need the `join('')`
Is this going to work? The rest of the changes are from the other parts of the PR. I'd like to see a more generic name. For now, this is a bit more like a name, e.g. `getModuleValue()`
I'm not sure we need this extra line. Can you explain? I think we can change that, but I'm not too happy about it.
This is probably the only thing that's done to do in this PR. I would rather we do this in the `*0000000000000000` and then use the `Array.0000000000000000` as it is, and if the `0000000000000000` is the default, we should use that. It would be better to use a more specific check than `Array.00000000` and then check that the `Array.00000000` for the field.
In this case it might be worth adding an `error` check in the debug mode, since `provider` is an `int` instead of `nil`
This was removed because the "use strict" part of the conditional was removed, and it is never used.
Why are you checking the number of values here?
I think you can remove this, it's already added in the `stderr` branch
Please use Status.EXECUTION_STOPPED to align with Status.EXECUTION_STOPPED
Instead of `switch (dev->type)` you'd be able to return `true`.
I'd rather have this be an `Task`
This is not correct. `NONEXIST_ENABLED` should be a bool.
This is a bug fix.
Should this be handled by `java.lang.Void`?
Shouldn't we use the default constructor instead of adding another parameter ?
This needs to be removed.
Why do we need to return here? I don't think that's what we want, since we're now passing it to the type.
This line seems to be too long. It'd be nice if we could just put the line at the beginning, and only put `CONFIG_PATH = os.path.join(options.CA_DIR, 'args')` after the line below.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I would not use `org.apache.commons.lang3.String#Equals(String, StringComparison)`
This is not really needed.
@logger.result.stdout << std_errerr
@mfojtik why do you need to call ioutil here?
I am not seeing where it is used, why is it needed?
@smarterclayton do we need to change the `.history` part in the `if` block ?
I don't think `topicName` is necessary, you're not doing any check inside `topicName`
why is the change to 0 here ?
I think we should use `require.NoError` instead of `dir` here.
I'm not a fan of adding this `@return` statements. I think this method should be renamed to reflect that.
I think the `case` should be here, right?
This was removed because it was unused and now is unused now.
the 2014 CERN. looks like a typo
This import is unused.
I don't think we should be doing this here, we don't need the `rescue StandardError => ex` check anymore.
I think you should use `? []` here
You can remove the `VALIDATORS` field from the string, it will already be set by the value in the `TRANSACTION_POOL`
I think this should go before the upper newline
This line is a bit ambiguous, the problem with the previous one is that `m_maxShmemPerSM` isn't a boolean.
Is there a reason for moving this code out of the loop?
I think this change might be unrelated to the PR?
I think we should remove this line
Should we do this only for the `context.Context`, or is that the only reason we are doing it for a specific `SetHead`?
Why do you need a `int` here and not `int`? The value should be `int` if you want it.
I would prefer not to have this check here as we don't need it for every creature package (and the creature is in place of having this check).
I don't like this change. We're using the "last time" format for the time. This is the problem that we have to connect to a new topic. I can fix this by using "find time" or "last time".
You should check if `lib` is a function. Otherwise, we should probably return something like: `Address.isDebugEnabled()`
What about using `--AddMaybeExportedDependency` for this, or `Module`?
I think you want this because you are using the `loaded` method below.
Nit: This `//` statement can be removed.
Is it safe to call this just `// RegisterAppStart<>` ?
I think we can use `Map<String, Object>` instead of `<>` here.
This should not happen.
We should add a new param for every parameter, to be able to remove the plan parameter.
This is not needed, the `MkdirAll` already has a `IsNotExist` function.
We can probably move this to a new feature, so that the feature is still in there and it makes it harder to debug.
Same here, I think the wording is better here.
Why are these added twice?
I'd like a separate PR for this, to be clear what's going on here.
I wonder if it would be better to have an `ActiveKey` that has a `zprd` that is the default (i.e., `Y_zpr_xpr_xprd`) for that. The same is for L228.
This should be removed.
This should be changed to `padding: 0`.
I'm not sure about the use of `.prev`.
Should this have a `@NullPointerException` or something?
>table->isExternalTable() [](start = 28, length = 6) nit: you can use a variable here. like `table->allowExternalTables(list(table->isExternalTable(),`
Doesn't this have to be added as a new constant?
I don't think we can do this, it's just a string but not a requirement, so it's better to have an `@tester` arg.
I think we should just remove win_id param.
Why not catch `Exception`?
Wouldn't it be possible to use the `Warn` here rather than passing it as an argument?
Could you please rename the class to have the same name as the corresponding `RESTRICT` in the instance variable?
This is a bug fix. We need to return 0 here to make sure it is not zero. I think this is the case where the batch->state_trans would return 0.
Is it worth having one function that returns a function that has this flag?
this is an actual bug, but should not be fixed.
why are these lines deleted?
I don't think this needs to be in the public API. I think we can just make the manifest public, and use it here, to get the current time of the public API.
`isPaused` is not really needed here? I'd rather have a test function that returns a boolean
Remove empty line?
This is incorrect, as it was previously in the actual change.
Why do we need these checks now?
Nit: I'd prefer to avoid adding an `is` statement, as it will not be there. We could probably just remove the second `TODO`s from the `assert` below.
I would prefer if we used `stream=True` for these to be public.
I don't think we want this. The `copy()` method is used by other tests as well. We should just make it a helper method.
Is there a reason this needs to be called from test?
Should this be done in a finally block?
why do you need to check twice the origin?
Can you please add a todo to make this `if not len(args) != 0` check instead?
I'm not sure why this is needed, but we're now not using the macro here.
This was the reason for this change?
Is this needed?
Can we call the variable `Pair<ExecutionReference, ExecutableFlow>` and have it take `PasswordPassword` instead?
Why are we doing this? Isn't this just an `else if`?
This should be `null` to avoid a null check.
Why are these two lines changed?
why do you need a new constructor here ?
I would not add this to the `package.init` package.
I'm not sure if this is the best approach to make the tests work, but it's probably not really a blocker to use the `RLock()` interface.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at method body end.
I don't think the `RequestId` is necessary here - it's only for the `RequestIdId requestId` object
We should use `Array.lengthlength` instead of `Array` here.
Is this change necessary?
We should avoid this annotation on the client side. It's used only by the server side and it will not be used.
This needs to be changed to `use` instead.
This is a change in the `libflux/core` package, we need to use it as a dependency in the future.
I think we can move this check to the other one like `if err != nil { ... }` block
I would suggest to have the config option name `Z0.1` and `Z0.1`, and `Z0.1` as the default here.
NIT: unnecessary new line
this is a little strange... I would say that it could be a problem if you have a rebase with the "addheaders" name, but it would be easier to find it.
I don't think this change belongs in the PR
why do we need to check `_w3c`?
How did you decide whether to do this even if it's a `workspace` directory?
I think we don't have to do this. It will create a new master event.
It would probably be good to use `!is_platform_with_index()` here instead.
Can we call this `app.kubernetes.io/name`?
We could probably just make a `Tags.InstrumentationName`, but this is just a thought.
I think this needs a `1b` import.
I'd prefer if we use `inst_param` as a variable to make it more obvious that this is used by both `_prop` and `_prop_` and `_prop_`.
I think we can set this only when it is `false`.
"media" - Set this quality to all media manager
@Scottmitch is this correct? Does this mean we will have to set the struct?
I'd rather have something like this: `for (var i = 0 && i.slice.call(obj).match(/\s(\w+)/)[1].toLowerCase();`
Is it possible to remove this line?
This was changed in #ifdef below but now that #else checks are not necessary.
shouldn't this be abstract ?
@erwinmombay I noticed this was the only change that was needed to pass in a response. I was wondering if the request was not being used anywhere, whereas the response would be passed into the response. I would have expected that it was removed from the client to try to set the upload object to the client. I wouldn't think this is something we need to update in this PR.
The `Until` call below seems to be unnecessary.
is it possible that a warning is raised here?
This is only for testing purposes.
This test is not needed.
I think the previous name was `tag` instead of `textGroups` as this is the `textGroups`
I am not familiar enough with the code that is actually not in our code base... I'm just noticing this one because it is used in the code base as a way of doing it, but it seems to me the `scope` should be used here. (And I'm not sure if it's worth it here though, since the `for_fiscal_year` method has a similar method.)
Should be self.log.info("RabbitMQ connection got closed!'", self.connection.add_timeout(5, "RabbitMQ connection got closed?"
Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
If I'm not mistaken, this line is still needed for all the others. It looks like the rest of this line are unnecessary.
You can get rid of this.
Isn't this the only change that is `ConsumerInfo` and not `ConsumerInfo.PaymentVersion`?
This is a change in behavior, so I think we should be checking `klog.V(4)`
Should we call SetParentProvider here?
This seems to be the wrong change
Use the new Ruby 1.9 hash syntax.
no need to import this, just pass in the list.
Why did you need to change line 306 for the last line of the method?
It is not possible for a FPGA_INTEGRATED_DEVICEID to be a part of the FPGA_DISCRETE_DEVICEID.
I'm not sure if this is the best place to make it work. The `Restoring` command should have a `Rest` command that is used to determine if that's the case.
Why was the original code removed?
Isn't this equivalent to the other `updateReport`?
Do we need to do any validation that is already passed in?
Is there any harm in adding this?
Is this the same error as in line 290?
this is not a valid use of `convolve.data`?
I am not a huge fan of changing this spec since its a new one.
This should probably be `local_message`.
Doesn't `path}:{line:3d}:{column}:` mean `path}:{line:3d}:{column}:` in the message?
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Please use `getStatusToAsync` instead, and add another method that does the same thing as before. (The problem is that if the `_socketInputStream` is called after the block, we don't need to know the returned block.)
I'd use `states.get_states(controlTypes.STATE_READONLY)` as it will be more obvious what it's doing.
Why is this no longer required?
I don't see the point of this. If I see a PR I need to fix it, this will cause a flake8 tests to fail.
Please move these to the core.h file. They are used in other files.
Is there a better name for this to be something more descriptive, like `alertQueryURL`?
Why is it important to pass in a pointer to `externalNodeCIDRs`?
nit: can use `assertawait engine.syncTables();`
@jridgewell any reason to move `agent` and `agentlessID` to `elines.org`? It looks like these `elines.org` are all about `elines` and `elines.org` are not used anymore.
I guess this is a leftover?
This will throw if `NoClassDefFoundError` is not null.
I'm not sure if it is better to keep these as public.
this was the only change needed in this package?
this is for testing. we should probably add the dependency on this to be able to run `spack install` in `build-system/commons.py`, and then add the new dependency on `build-system/commons.py`.
I think the import order is wrong.
Line is too long. [98/80]
This function can be deleted.
I don't see any tests that use ``.second`, I think.
Can we make it clear that this is a `install-` instance? I'd recommend using the `install-` instance instead of the same `install-`
`volatile` is now unused, right?
Is it not needed anymore?
I would suggest `fields.get(i).fieldId() == ManifestFile.SPEC_ID.fieldId()`
We don't need this function, because we are returning a `*` in a `NullPointerException`.
Why this is different from what it was before?
Would it make sense to add this to some common package, and then check that it's not a `LOG.error`? That would avoid the need to add it in all cases.
What is this used for? If not, it should be removed.
This is not needed, as we are not removing it anymore.
why change the default value to `1`?
we could add some description about what this does, and why why we need this?
We should be able to use `assertIn` as default.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This class is unused, and should be removed.
Could have used `_ := r.Seek(0, 1)` for this.
This is an API breaking change as it is used in other places
Is there a reason why the property is set to `azkaban`?
I'm curious if it works fine to have `exec.Cmd` and `getSecret()` (which is why I had to do this).
This is a very small change for this one.
@matt-gardner you could also have used a ` directory.Combine` file instead of a `Path.Combine`.
i think this should be changed to `mux`
Shouldn't these be `authorization`?
Why not using the `snprintf` function here?
this needs to be moved up after line 1034
Is this a BC break?
Why did you choose an assertion for that?
So if the user doesn't have the same `id` resource? I would expect it to have the same id, but I don't understand how this change fixes it.
Why is the new version changed?
This should probably be `type`
I think this check should also be removed.
I'd prefer a separate function for the `Access-Control-Allow-Origin` as we discussed in the other PRs.
I think we should just remove this if we do `flow.request.headers.pop('Upgrade-Insecure-Requests', None)` in this PR
I don't think it's necessary to put this line into the list.
I would prefer to have an `else if` here to be consistent. The call to `IsRTLS()` is `HBASE_DELETE_COSTING` which I guess wouldn't be able to call it out.
I think the other ones in `lib/zfs-config.go` should use the same `.ProtocolNum` prefix for this one.
Is this change related? What happens if we are running into a 2xx status?
This seems to work. This can be removed.
This change should be reverted.
This is the only change that fixes the bug that was causing the build failure.
This is the fix
I think we don't need `labels >= 1` anymore.
What does this do when you create a file?
remove this line
These 3 lines are not needed since we only have one of those | an `else` clause.
Can't Dimensioned be null here?
Please keep the old `name` as the name of the variable.
this is a change in behavior that will need a unit test.
@agramfort this is the only change that works. I'd rather have this return an error.
wrong import order
I'm surprised that this isn't `this.capabilities`? Is the `this` in this method used?
this is not a huge thing but we should probably make a note in the changelog
The `fields` is now done by `test_data`. I would recommend not to use `./dumps/courseData.json` here, as you're not using it everywhere.
This change seems to be in the middle of the container, not the container.
Is there a reason to make this change?
I think you can delete this too.
I think this is not the correct way to do it.
This class is unused, can you remove it?
I don't think we should be doing this here. Can you please remove it?
This is an unrelated change, we should revert the line here
I think we should just use `api: smallImage` to indicate a size.
Please remove all imports.
This is not used.
@deads2k @smarterclayton do we need to have a separate import from `core/ip`?
Is it possible for the `cmd` to be an enum?
I think we need to use `Number(value)` in the next line
How about `createFromData` instead? That way we won't have to pass `createFromData` as a parameter.
I think we can remove `char ch` entirely
I think it's better to make a mock.
This is a bit odd - we were just removing the `B` part from the name of the function, since it isn't used anywhere.
I don't think this should be called from the `object_push` array. I think it would be good to just have this in the `client_class` function, so it's clear why the compiler had that problem.
You should use `<%= @note.class.name) && current_user != @note.report && !reportable_id: ...`
@kalefranz1981 can you check if this is a `File<path_resolver>` or not?
This should use the `contains` method in the `element` package.
Please use a different name.
Is this a bug?
This will break all the SipSuccesss in the package. This is the main issue.
Is this supposed to be here?
Can we just make this `if !Account != s.sys.account && acc != s.sys.account {` and remove the `if !Account != s.account` check below?
This variable should be defined as a constant (not just a name)
What exactly is the purpose of this change. It is not related to the fix, but I think it is a leftover from my PR.
I'd prefer a more descriptive name for the variable name.
Why is it a requirement, here and in the other places?
I think it's better to use the constant from `ConfigSetParams.OVERWRITE` as a variable.
I think we should check the `archive root directory` error here.
I think you can move the condition outside this `if` block, since it's already in the `current_user` conditional block.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we can use `Integer.ServiceProvider` to check for null here.
This is a test that was only here before, but I don't know if the event was removed.
Could we use a `EVENT_` prefix here?
Should not return protocolContext as protocol is also used in a test method. This is only called from a test file and should not be added to the "new protocol" class.
I think this should be removed as it isn't used
i don't like this name. I don't see how it can be, I think it's better to have a test for this :)
Can we just use a directory here? I would prefer to have a `file.Name()` return `0` and not a `file.Name()` return. This way we won't need to check the `file.Name()` and return the given result, and the test should not have failed with that.
This should be `uplink.config`.
This is not a valid parameter, but a typo!
Do we know how much this works?
This test should be removed.
We could just remove the `TestCase` from this class entirely, and make the `TestCase` explicit with it.
Why not return here?
why the change in this PR? I would have expected it to be named `2.9`
Can you use if (!realpath($input_path) === realpath(__DIR__) . DIRECTORY_SEPARATOR . 'bin' ) ) print(__DIR__) . DIRECTORY_SEPARATOR . 'psalm') else if (!__DIR__) . DIRECTORY_SEPARATOR . 'psalm' .`
Why is this import needed?
why did you remove this?
Can you add some more context here?
Metrics/LineLength: Line is too long. [97/80]
I'm a little confused as to why the format format is being passed to `_markdown`, but not for `_resources`...
Line is too long. [81/80]
I'm not sure we should be setting Array.isArray here.
This is the main change that works for some reason.
Was this change intentional?
Can you add a TODO to remove this?
Should this be `return nil`?
The `int` and `int64` seem to be used in many places. Is it just `tealLogicSigSize`?
I don't think this is correct - we are now returning an arbitrary ID and a string.
i think you can remove the locale here as well
why do we need the time here?
I'm not sure if we should be doing this, or if a resource is not a special, or something like that.
Don't change the metaServerServer for the the metaRootPath_. also, I am not sure we need the metaRootPath here, as this is the only place where we have the metaRootPath_
This is not correct. You should use the same version as the `driver` attribute
I wonder if it makes sense to make this change in the future so that we can have an `Optional<prompt>`, as the default value of the variable. It would also be nice to have a way for us to make sure that this can be a problem in the future.
>bytes? [](start = 24, length = 14) Is this necessary?
why is the else removed?
Is there a reason for this change?
maybe we need to check that the return value is not set?
I'm curious why `final_approver_email_address` is not passed in. Do you think it's worth it to check if it's not null?
We need to make `sortId` take a `dict` parameter, and use `keys` instead of `keys` as an argument to `keys`. The `error` parameter has the same meaning as the `buffer` parameter, so the name isn't always a parameter.
I am not really sure if this is really the best way to do it, I am not sure if the `throws` on the `protected` is needed. The `protected` on the `protected` on the `ReaderWithSTINCT`.
Is the forceRDKit a problem?
I would have used `guid` as it was before, and now it's a part of the loop, as `guid` is the same as `getPlayerGuids.end()` (in this case `if` and `getPlayerGuids.find()`) will return nullptr, so you could return it here (in all the other cases).
I think you can also delete the `RequiresRequiresPatchApplicationsProperty` property from the system layer
I think this should be part of the `return required.Errorf("service does not have required methods BuildRequired")`
Why is this needed?
@wachterjohannes Shouldn't we keep the 1 here and the second one?
Can we just change this to a `filename` and remove it from the `FlowFixMe`? I can't see why we need it in the `FlowFixMe` namespace.
Is it possible that we can always return a list of errors? I'm not sure if it makes sense to have it here.
can you please also move this to the top of this function
Why `#extract` rather than `#IsValid`?
This should be: - `Container(type, bool paginated /*= true, paginated)` - `Container(type, bool paginated /*= true) : paginated` - `Container(type, bool paginated) : paginated)`
Please remove this in the final commit message.
This is not needed anymore, because `ValueError` is already in the `visit` module
This should be in a separate patch.
@scheibelp Can you please add a space between this and the other one in the file?
Is this still a copy? It should be a list of strings.
This is not really necessary. The `Try` method above has a `Try<MeasurementItem>` and `Try<MeasurementItem>`.
remove empty line
I'm not sure what the `opts` variable is for here...
nit: why remove the line here?
Shouldn't this be a query instead of a entity?
Why did you change this?
If this is a test, should we change the test to check that the method is called with a different `request`?
I am not sure we should do that. It is a bit of an API break, and I think it's better not to do it for all versions of the plugin.
I don't think this is correct. `renameAndDeletionLock` is set for all runners. The function is called only in `TestCase`, so we should probably move this `renameAndDeletionLock`.
why do we need this one?
Shouldn't this be `get "/videos/vim-for-rails-developers" => redirect(" 250-for-rails")` ?
Do we need this?
@mhoemmen This is a breaking change, but we should probably be consistent with the above, so we could get away with it
@becker33 can you add `_CleanFpInfoAttr` here, so that we can get rid of it?
Can we have the same naming: * `cb_state, (vkCmdBindPipeline()` * `cb_state, (vkCmdBindPipeline() / options_errors)` * `cb_state, (vkCmdBindPipeline() / options_errors)` * `cb_state`
shouldn't this be `name:name` and then `name:name`?
Is this intentional? Or does the code that uses this method?
this needs to be removed
@kargakis this was the only change that needed to be made to the `GET` class.
This one should go before `version=`.
Is this a typo?
This was removed because it was already imported
Is it not needed anymore?
@adamjstewart Is this the preferred way to check if the site is in-by-key-secret or not?
This is an API change. The only reason why we need to change it to the API. The API should be able to be applied for the task. This is because the task is not the only one that's used by the task.
nit: I don't think we actually need to have the installer defined in the name. I don't think it makes sense for the installer to be used anywhere else. If you need it in the name as well for the user to change it.
The `KafkaData` is already defined in the loop above.
do we need to keep it in this file?
This function can be refactored and moved to `std::vector`.
this was causing the test failure to fail because the build fails due to the `container` value being set as an empty string to avoid the `!has('.gh-editor-container')` being set.
There is already a trailing comma here.
this should have been added to the `use Thelia` below
Is there any reason to remove this?
Hmm... should we have a default for this config as well? I think we can do it only when `azkaban.jvm.cmd.args` is true.
Why was this changed?
I'd rather not have this check in the constructor, just to avoid adding another `#if` in the constructor.
I don't think it's safe to do the `VK_NULL_HANDLE` check here. It should be removed.
This line is the main code, it is not required.
Should this be `message('list(string, ...)` ?
This seems like it should be `SimulateExecution`.
Can we move this check to a new line?
This class and others are not used anymore. Can you remove it?
Should this be an abstract property?
I don't think we need a new method for this.
We don't use this anymore. It seems to me that this could be a separate PR
Suggest calling `QUILT_USE_TQDM=lower()` here as well
Does this need to be removed?
Is this used?
is this no longer necessary?
Isn't there a need for this at all?
It seems that `use Request` is only ever used in the middle of the Config object.
This is a good way to check if `getByName` is not `nil` and if it is `nil` we should not use it, so it is possible to return null.
This was a leftover from the previous PR.
why do you need it? is this required for other devices as well?
This seems like a very bad idea to me. I'd prefer `errors.Close()` to be safe here, and instead we can call `NewHandler(tty)` in the `Start` method, which will call `set` and `set`.
Can you please add a check in line with this change?
Why the change?
I'd prefer if we just use this as an example, but we should have a test for that.
Why do we not want to remove this check?
Is `err` really the right error here? It looks like this could be `nil` rather than `err.Close()`?
Should we have a check in GLOBAL_DCONTEXT for this?
If we are not changing the default for this method, should we just remove the existing `ConfigureKestrel` method?
I am confused why you didn't use `id` here.
Wouldn't it be more informative to use something like `fprintf( stderr, "Error: %s, count = %d\n",poll_res, (int)count);`?
this line should be `if (array_key_exists) {`
I think you should add the "dynamic_zone" flag to the "zonelist" section too?
I think we can remove `always()` now, because we already have a single `Collection<DataFile>`, and it's no longer used by any tests.
Unused block argument - current_name. If it's necessary, use _ or _path as an argument name to indicate that it won't be used.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think this should be set to false if the `WithWarmupCount` is true.
I don't think this is needed
I think this should be `localUser.getInstance(repo, repoPath)`.
It would be nice if this was a `container` type. I can't find any other options for this type
Why are these lines needed?
So, the `TopicPayloadPoolRegistry::release` method was always called with the `reader_payload_pool_` variable? That's why I'm not seeing the need for this change, and the `connection_size_history()` method was called after the `if` statement.
I don't quite understand why this change is necessary. The only change here is that we don't have to do that.
Why do we need this method?
Why is this in `lib/annotations`?
This seems a little strange to me. Why not make a helper method like `&Step{name: nil, Timeout: w.DefaultTimeout}`. The logic is not clear that the logic is different, and if the default timeout is less than zero, then we should be looking at the default timeout.
I think it might be better to use the constant for the max length instead
Nit: We should remove the two imports.
This isn't right - we should use something like a context manager.
I'm confused, why did we change this to -1234?
This is a bit scary, but it's probably not a good way to do this. I'm also not sure if we need a separate package for this interface, and if the package is a public API, then this interface should also be added to all clients. The `get` method should have a method that does it. I think it would be better to just keep a method that can be used here, and just do a `get` method to avoid this interface, and pass a private interface and use a function.
We can just rename this to `resourceListOk` to be consistent with how we name it `resourceListfn`.
This is not a good place to add this. The reason is that we have `go fmt` package to go through API review, and we need to move the package to `go fmt`. The `go fmt` package is not a special case anymore. The `go fmt` package is the package package for all versions that need to be refactored.
You can remove this line
I don't see any use of `deleteSecret` in these cases, but this is one of those cases. I'm not sure how to get it in the future.
Can you use a better name for this `Requires Hadoop` instead?
Should we make this a separate package and call the package "sigs.k8s.io/apimachinery" instead?
This is the only change that works with the JIRA ticket, but I'd prefer if there is some more race conditions we need to make a PR that works for the future.
Can we call this every QUrl instead of using the new one every time we import?
Why do we need this? I don't get it anywhere.
I'd prefer if the code in `DisableHttpGit` and `DisableHttpGit` are the only way we could get the right message here.
Why did you change this?
I think this is not used anywhere.
Please use `String#Equals(String, StringComparison)`
Why is it necessary to append the `externalNodeCIDRs` value if the ip is not an `true`?
This is just to check if the function is empty (as opposed to the function)
This seems like the only thing that should be moved from here, if there are more tests we can use in this file that might be useful.
Should this be a function?
why not just return an error. The user should never hit it.
Shouldn't this be `DeleteAllAll()`?
I'd prefer if this was an intermittent and not an intermittent, but it seems like a nice change to make the change here. I would have made it a separate PR to add this to the code so that it is easier to maintain
Can we just use an `Optional` here, and use a `DataContainer` instead?
We have a `EnableOpenTelemetry` function for this, so we should be able to remove this `EnableOpenTelemetrySdk` entirely
This is not the right place for this, but it might be nice to keep things consistent.
Shouldn't we do this before the openygraph?
@DanVanAtta .length file here, should be `tmp = excessDomChildren.length; tmp--` (or similar)
I think we should change `array_merge` to `array_values()` here.
You should use `JQMIGRATE_CHECK_demo` here.
Hmm, this one is not really needed
Is it necessary to set the full `--run-settings`? If so, you can just set `--run-settings` to `True` here.
Should we pass a string here as well?
This should be `s2` instead.
this function was never called
I don't see where these are needed.
isn't this going to be the same if we have ` segments_RESOURCE_NAME`?
We have a typo here: "hasApplication('headers') -> tableGrid"
We have the `getAllprojects` constant.
Shouldn't this be a "manensing" type?
It seems that this line will not be needed.
nit: missing newline
Is this needed? I don't see it being used anywhere else.
I don't think the original version should be wrapped in `ErrCodeSharedConfig`
Is this needed?
Should it be an empty line?
How did we get to this?
The outputs should be `[0].shape`
Shouldn't this be `o.opener`?
This needs to be a public getter.
I think this is the only place where we need to import the group, but I think we should just keep `bls//fsm` as the group that's already there.
We have already `options: { ... }` in the `TODO` files, so why not use `@babelrc: false`?
I think the intent of this line is to pass the full "Peer" to the log message. The "Peer" command should not be the same, but that's why I'm not sure we want to do that.
This is a good change to me. You could add a `const std::service_type=rgf` to get the wrong message.
(style) line over 80 characters
This should be in another PR, as it's not a separate PR.
The `current_app` is unused.
You should only do this if there are no params.
Why the change to `/opt`?
Add this to line 121, line 122, line 9 and line 207 below.
This should use `contromi-apu.0.0` as the default in `contromi-apu.0.0`
What if the default is `https://localhost:4317` (and the default) then we don't need to change the default behavior? The default behavior is to change this. The `https://localhost:4317` is the same as the default behavior.
We should probably make these strings as well, since they are not related to the PR.
If the intention is to make this test a bit clearer to the user that it gets called.
This looks to be unused, so I would keep it.
I think you can remove this line.
I think the changes in these tests are just to make the code more readable, as they don't need to be updated in the future
Why are you using the `page` variable here?
This isn't a boolean, and is a bit weird. HIP will be removed after the caller is re-enabled?
This is not used anywhere.
I think this is a bug fix.
Why remove `tc.wantErr` here?
Shouldn't we check for null here? If it's not required it should be null?
I would use `ImmutableList.of` here
This file doesn't belong here
This is the only thing I found - it should be `ASSIGNERS = Registry('sampler').check_file()`.
I'm not sure we should do this before, but it would have to be `@hosts.each`
Should the stop_list be the stats instead of stats?
This is an interesting change. The `is` operator should only be used here.
Why is it necessary to expose the package package as a parameter?
I think this is the main change.
Line is too long. [81/80]
I think we have some code coverage for that.
I think you need to check if this is not null.
I'm not really happy about this. It looks like it's only used in one place. Can you move it down?
Why change this?
Why not use FPGA_NOT_SUPPORTED here?
This is a very brittle detail, but it would be better to just have it in the `time.Time` file.
Should we add the description of the size?
It is not necessary to use a variable here
nit: "line 55" -> "not"
Why this change?
This line is redundant now. (it was here before).
I don't think you should be using the variable `--format` here. I'd like to use the variable names that you added, but it's not a blocker for this PR.
Could you revert the spacing change here.
Please, add brackets.
I think I'd prefer a separate method for it. I think the use case is better, but I think that would be a more general pattern.
I am not sure if we really should have any validation for this, but I think it would also be a better solution for this if we want to be able to get the right error message. I don't see the reason for this
This class assumes the id field for your documents is called.
should this really be a `\r` and not a `\n`?
This interface is not necessary
I think it's safe to use `errors.Create(cfg.SynchronizableEntitiesPrefix)` instead of creating a new error.
I think this can return the right directory if the directory is not defined.
I think you want the same order for the `users/noreply.github.com>` tag.
I think you could use a different message here: `__str__`
I think these will need to be public, since you're just passing in `hcl.Mattic/externals/`
This is a little bit hackish. I would suggest to use `forward_agent: true` and set `forward_agent` to true.
Is there a reason for not making this `Component`? If the input is not present, we may not want to have it in the `cancel` namespace. It's not an issue, and I'm not sure what this actually is.
Does it make sense to log it in the `config.FlagKeepConnectedOnFail` case?
Can you revert this change and why it's needed?
Use && instead of and.
Should be `selectedselectedRowHeader = new Set();`
Does it make sense to have a `siteInfo.AddRow` method that takes the `siteInfo`? It doesn't seem like the `finally` is needed for the `siteInfo.AddRow` case, and it seems to me we're trying to remove all the `siteInfo.AddRow`s from the `if desc["status"]` and `if desc["php_version"]`s in these cases. That might be a problem for the `siteInfo` case.
Is this a breaking change? I think it is not needed anymore? (It's just because it was a breaking change in this PR)
nit: not a big deal, but I'd like us to see a test case for this as it's a separate change
@tgamblin Do you know what's the difference between "ctrl-c" vs "select public subnets" vs "ctrl-s"?
Should this have a trailing `# pylint: disable=subprocess-run-check`?
Please use TestUtils::mockSchemaMan() instead of TestUtils::mockSchemaMan().
Should we also add the `unsafe.Pointer` in this function?
I'm wondering whether we should do something in a single `execute` method instead of adding an explicit `execute`, but I don't feel strongly about it, so I think this is fine.
is it necessary to call `labels["operated-alertmanager"]` instead of just `Annotations`?
Why do we need to check that `default` is set here?
You could just return a function here, and return `section` if it's `(customization, section, show_custom_sections)`.
why do not import this, we should just use the full path of the module.
Can you update the docstring to mention that the doc is present in the addon that it is installed?
We don't know how to test if anyone wants to test `using`
You should also set a global setting here, not use the global setting.
I'm not sure this is the correct fix, since `return code` is used for both the `return` and the `return` loop.
`mergeest` was removed as it was not doing anything useful to test, so we could just remove it
Why does the first `--min-gas-price` flag get removed in the last two places?
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
This will cause an error, but I don't think we want that.
I think you can just remove this include, it will be nice to have a test in place to make sure it's not used. It might work for now though, but you might as well just leave it in there.
Why is this import removed?
This was incorrect.
This is a bug. The childIndex should always be the same.
Should this be `maskables.forEach(i) =>`. This is a little confusing.
Was this intended?
Maybe `find_by(displayString=None)` to make it more explicit?
We should also make sure `Result toReturn.dialect` is not `LOG.finest(String.format(...)`
isCanceledMx is enough
"isNotExist" is better in Python 3.
Can we remove this function now?
I don't think this works anymore - I don't think the `with open` method has a `load()` function.
We can probably get away with just passing the `method` to the `fetchMergedEventGroups` variable here.
Does this mean the other config options need this?
Is the plan to move this up here? I think it is better to move it to `buildDeployedConfig.CreateDeployedConfig`, and call that from here as well.
@tgamblin @mikedoanF - is it intentional to have the default value of `VkDescriptorSet` in the `VUID-vkCmdBindDescriptorSets-pDescriptorSets-parameter`?
Can you also revert these changes since they are not used anymore?
You can just do `fprintf(tmp_optarg, ...).ifPresent(endptr != tmp_optarg)`
We don't have to do this now since we have `cc` and `cc` in this file.
This test case needs to be updated to remove tests for `else` branch.
@lilleyse, the `if` statement should already be needed here
I'm not sure this is the correct name, but it would be good to include some sort of flag for that.
I think we should not need this. Can we check if the function is not null.
@jridgewell Is `colours` and `operators` actually being used?
do you think we should use the existing helper here?
This is not related to this patch, but I'm not sure how to make this change in the original PR.
I think this change is not needed. We should check that the value is not null, right?
This test was not working as expected. We should be able to remove it.
Why not just do the `return res.Wrap(err, "could not create registry caller", err)`
It's like you meant `com.google.common.base.spreadPath` to be more specific here and in other cases.
why use `time.Since(start).Milliseconds()` here?
This test name is strange to me. You're using `.fictional_character_name` but it's only the one you're using, so I'm not sure how to deal with this
why is this in L1010?
Why do we need the `[UnsupportedOSPlatform("browser")]`?
This import seems to be unused
I'm a bit confused here, when the local build file doesn't exist? Is it a problem in the `_build_options.py` file or something? Or was that not the case?
Why not use `ErrorDurationDuration` here?
I'm curious how to get rid of these two `Block`s
I think we need to use `.reject()` here
I'd like to keep it simple here, but I'd like to see a more verbose name, e.g. for `py-fixer`, but it's not a public API, it's a subclass of a `py-fixer`.
I'd prefer to use a more general `@NotNull` here instead of a `@NotNull`.
Why was this moved?
Should be: key, value: key_attributes =DEFAULT_TYPE_ATTRIBUTES, description=None):
nit: can we use `Optional.empty()` instead of `long()`?
Is it expected?
I think it should be `desiredKeyGen`
this is the wrong place for this, it is already a v1beta1
This is just a minor optimization. We should be able to make the handler a little less generic. I'd just make the handler be used to be consistent with the handler, and then pass that to the `RouterUnrecognizedEncodingError` so that the handler is not the same as the handler itself.
Is this necessary for the future?
I think it is better to check `processName.Equals()` before calling `processName.CommandLine == commandLine`, and check `right.Contains(evt.ProcessName)`, and if it's empty, then use `processName.CommandLine == commandLine`
I think this is the only one I'd prefer to keep the log line as it was.
is this a BC break?
Why was the `keyTag` moved to the base class?
Why not use the `@since TODO` helper here?
@tnozicka this change is the fix, right?
Please don't use msg as the output of output output
I assume this is a breaking change?
Can you also remove this `storageTarget`?
Why are we not using `v1beta1`?
We could just put this import in shlobj.IsDebugEnabled()
why is this change needed ?
I think that's the right approach. It's better to move the check to where it's used, and instead use the return type. I would prefer `rule` to be the same as `RetractTable`.
I think `checkpoint` and `None` can be removed, because `None` is never called in the `init_cfg` variable and the `init_cfg` method will always return the value `None`
@jridgewell Isn't this a breaking change? I am wondering if it should be changed to `public void beforeChangeValueOf(WebElement element, WebDriver driver, CharSequence[] value)`
This is not the only place we're going to do this. In the end, I would prefer to have the task in a separate task.
I would suggest using `output.strongTextColor = 'rgb'`. It would be nice to have the same logic as the one below.
I would put these at the top of the file and make it clearer what they are doing.
I think we don't need to keep the imports, either use the imports or the imports (and do the imports)
I don't think it's necessary to change this line.
Why not just make this a string, and have `--verbose` be used here, instead of a string?
Shouldn't this use a configurable `Collections.emptyMap` instead?
This should be `AzureAppServices.Metadata.SiteName` since it's not used anymore.
Lint/UnusedMethodArgument: Unused method argument - parameter. If it's necessary, use _ or _options as an argument name to indicate that it won't be used. You can also write as `@deprecated` if you want the method to accept any arguments but don't care about them.
I think the `error` here is redundant, it's only used in one place (which you're not doing in the `error`)
this is the same as `http.GetEpochNum(hu.FairbankBlockHeight()) // extend foundation bonus from fairBankEpoch + 1 year` so it doesn't have to be in this PR
Is this going to be very expensive? I'm not sure how this is a copy/paste from the UX perspective. Maybe we could just have a list of servers for this, and have the "default" flag for each of these types be in the UX perspective?
Why are we doing this?
I'd rather have an `log.prompt` return the list, that way it's a list of files.
nit: missing space before `Process`
Does this mean we can always use the `topframes`? If so, then we should be able to remove the `if (TopFrames == 1) {` block and remove the `if (TopFrames != null) {` block altogether.
This is also not the most recent part of the PR. It's a little strange, but I'm pretty sure the `@return` statement can be removed as well.
Isn't it better to check `isglob` on a nullptr?
remove empty line
This should not be an if statement, right?
I would suggest adding a `timeoutMap` after the `timeoutMap` above to avoid a specific `timeoutMap` warnings in case of an event-set it's not the right-out of the `timeoutMap`.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this can be removed
`Alertmanager` and `AlertList` are both being added in the list of `AllowList`, and the list of `Charsets` is not being used.
(style) trailing whitespace
can you add an example in the doc string for the doc string to ensure that the URL is not in the URL?
Why not just use `DesiredStatus` directly?
If you want to be able to use the `s.Image.BuildConfig(wsRoot)` method, it's not clear what it does in the first place, but it's also what you do in the other hand.
Why not rename the test to `build integration`?
This is not a bug, as it is a fix in master.
I would prefer `kuma/core/kuma/core/kuma/ ?
This is a no-op, so no need to keep it.
I think these are all out of place. The SCAN_WITH_STATS_COLUMNS is the same as the SCAN_COLUMNS, but that is the only place where the SCAN_WITH_STATS_COLUMNS is used, so we should change the order of the parameters.
For this, the `nvMySQL` will be always available.
This is a regression, but the changes in the file were just a bit redundant.
Whats with the change here, why did you change the value of minSpeedChange to `np.empty()`?
This is probably a great change to make it more clear that it will be ignored. But this method doesn't need to be in the `SchedPolicyPolicy` function.
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
Shouldn't this be `modeman.leave(self._win_id, usertypes.KeyMode.command, ...)` instead of the second argument? (And, the `Key_Backspace` above is just `text`).
I am not sure if this will work in any way, since `EMAIL_RECIPIENTS` is a setting setting and so it should probably be a setting.
`await` -> `await`
This is the main code for `SemanticConventions.AttributeHttpClientIP`, but this should be `SemanticConventions.Split(',').First().Trim())`
What's the reasoning behind the change here?
I would call the new method `to represent represent represent represent represent represent represent represent represent represent represent represent represent represent represent represent represent represent represent represent represent represent represent represent
I don't think we should be setting `useCircuit` here.
This is a no-op if you have a boost::system::error_code.
Can you please add a deprecation warnings here?
This is a little confusing, since the `jwtsvid` variable is used in `service.go`.
Doesn't this mean we only have to do the `FamilyOrAssembly` check when the contract is not empty?
The `Per` and `Byte` are both used to set a value for `timeout` - this is why I'm not seeing the point of having a value in `timeout`. If you want, you could just use `Hand` for `100`.
@bparees I think you can also use the 'user' parameter here, since it is a part of the package now.
@jona86 @juanvallejo fyi, @jihoonson @jridgewell
Hum! This is a big change as the rest of the imports are not needed.
I don't think the allow_None is needed here, since the default argument is `True` (same for `field`).
Shouldn't we check for `Program` here?
remove the empty line
What about a common helper that is used for the new tables that don't have `IPath`/`IPath`?
Did you mean to remove this in your PR?
I think this should be `return Optional.of(methodUsage)`
why is this being changed?
Can you add a `bool` as a property to get `""` instead of a `int`?
This should be removed since the `ifName` is no longer used.
This isn't necessary. The `__init__` method returns the `__a` object, not the `__init__`.
I think we should use `nc_bool` instead of `nc_bool`
We should not call this twice. This will avoid the trivial logic and will be very hard to debug.
Wouldn't it work if we just call it from `parentsorbetFocus` ?
This should be `gcp_clients`.
Why did you change it? This means the default value change won't be changed from the value to the default
I think we should have a better name for this.
Is there an `Console.WriteLine` that we can remove?
This is a good idea. If the user has a different name for the number of bytes in the `besu` table, it will be re-used by other fields and the other is still in the `besu` table. The same here, but the `besu` property is also used.
Does this need to be added to these?
There are a `require` statement here.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.<br>Line is too long. [125/80]
I think that we should not have this check here. We can do this check for other types of instances.
This should be removed.
Is `flatbuffers::DetachedBufferTest(std::string &bufferbuffer)` still needed?
I'd rather have a test for this.
Why do we need this check?
what if somebody wants to use `<=` here?
we don't use `.user().user()` anywhere
Why is this in an empty resource?
I'm not sure about this - I'm not sure what we are going to say - if we don't have a very good solution, then we can keep this method and just remove this method.
Is it possible to get the scrollIfNecessary when the scrollbarWidth is the correct time when the scrollIfNecessary is set to false?
You can remove this line.
Shouldn't this be a dummy dummy dummy dummy section?
This should be `generator->oltOptInfo()->setAqrEnabled(FALSE);` to avoid unnecessary `//     `s and can't find a way to take care of an empty set of `FALSE`s.
Is this still needed?
Can you please explain this change? It looks like the line below should be `|| beforeChangeResult[0] === null`.
Is this file still required?
Why not just have this return `libcontainer.Exec()`?
if tx is nil, should return transactionObject{}
What about `is_valid_commonname` instead of `is_valid_commonname`?
I think you can use the `where(['lower(nice_name))` constant here
This method is not used in this class, so you can remove it as well. (Also this will be called once you have no issue.)
nit: I don't think this is a good example of what we do for `-` (I don't think we should do, but it's not really a good idea)
Why did this change?
Line is too long. [89/80]
This should be `std::string QuestManager::gettaskname(uint32)`.
I don't really understand how you're using a "Approve" here. Is it supposed to be in the "user" section?
Please update the doc accordingly.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is not the only place where we need to return `err` if the error is not found.
Why not using the PartitionSet here and the `com.google.common.common.config.commons.lang3.LocalStreamer` ? It will be more obvious in the future.
Why do we need to add this? I think it's not clear what's happening in this pull request.
I'd be fine with this but I don't have an opinion that it should be a separate commit if it's not related to the PR
Metrics/LineLength: Line is too long. [83/80]
Let's add another method to `constructor` and `state` in the code base.
I'm not sure this is the right place to add this, it seems like it would be a good place to add `@command('')` to `build` and `@return` methods.
Should we use a `map[string]` for the `Activity` case?
It would be better to use `Variable<T>::` instead?
@kargakis this is the right place for this to be `iFromPeers`. The goal of this is to have the `AddressGroups` and `AddressBlocks` in the `beforeProps` of `iFromPeers`. The `AddressGroups` is to have the `AddressGroups` set in `ksql-explaining-service.AddressGroups` in `ksql-service.AddressGroups` and the `AddressBlocks` and `ksql-service.AddressGroups` in the `BuildSize` function (the only reason that is that `beforebeforeProps` is to avoid the `
We should probably also check for the error in that case (since it's the same as the one below)
Can you use the function 'allow_params' in the array. It is a bit hard to follow what we usually do in practice.
`Config.json` is not necessary because you are already calling `toUpperCamel()` on the same line.
Why not build this as a one-line option?
Indent the first parameter one step more than the start of the previous line.
"as input" is called the dataframes are saved to HDFS.
can we make sure `video_name` is set to `undefined`?
I believe this line will not be needed, since there is only one place we set it for the default.
Shouldn't we use `getNetworkPolicy` here too?
I think you could remove `Context app.get(Context)`, as it is now no longer used
I would keep the `keybase1.7` here, because it's not really needed for the `version`
This one is missing the `noDuplicates` command.
This is a bug, but it seems to me `v` and `v2` are the same. Why?
This will not work as expected, as the original code is actually not correct. `coTransformAndRequest` should be `coTransformAndRequest`
Can we make this string more specific?
Is this method still used?
Nit: We generally don't put `System.IO` on the class `using`
`is` not needed anymore, please?
This is a breaking change, we need a new type for each type.
I would have used the `css` rather than `Config`
This is a change in the `constants.json.yml` file that was removed from `constants.yml` to `constants.yml`, is this not needed?
what does the 3" represent?
This class should be renamed `@CheckForNull`
The `Connect` is not a `Optional.` so we should just call it `*SessionCreationConfig`
I think it might be a good idea to add this flag to `loggerFn        `?
I would prefer this over `@videos = Video.published.recently_published_first`.
@kring do you know what's the difference between `content` and `parse`?
is there any way to test the value with Felix and test the default?
Wouldn't it be simpler to just use `if left.ZeroOrNil(leftField.Interface()) {`?
nit: I would move this up to where the `src/pip` folder is used
I think it would be more consistent to use the `.update()` method on `legend` instead of `prime`. The code is also a bit easier to read.
Won't `response` not be used in this function? I'm not sure we need to worry about it, since the `if` block already checks for `InMemoryKeyVersion` and `InMemoryKeyID` below will be removed.
Why not make this `// TODO: use generic container`? We should avoid creating a separate variable to `onOpenFileBrowser`.
I think it might be clearer to have an `::to?` return a string that we don't need to do this.
What is the reason for this?
This is now removed.
I think it would be better if it would be a `const`
I don't think the path should ever be changed. I would expect this to be a path to a path, not the path itself.
The type format here seems to be unnecessary (a type, type)
`parentRole` should be moved to `parentRoleRole` (or similar)
Nit: This import should beats the line break after the imports.
Why is this changed?
Wouldn't this be an `int`?
Why is the type needed here?
> static_cast<size_t>(num_data_)); [](start = 16, length = 7) Why don't we just return the value of std::min? I'm not sure we should have such a call in the first place.
@jridgewell Is this a bug or intentional?
is there no way for this to be connected with a non-null string instead?
Please move the header to the top of the file.
Would you elaborate more on why it would be better to have an `queryService` method that takes `VERSION` as parameter?
Can this TODO have been removed since there are a bunch of TODOs in the code?
Should the `MetricsProcessors` parameter be set to true if it's not set?
Please revert these changes.
This line is not necessary, since you're using the "curl -O #{link}" variable below, you should just remove the if
in what case would it be useful to use an `is_name`? to determine if this is a valid value or something.
Please use the `if (inputs == nullptr)` instead.
Why not just have this as a `IntegTestBuildspecPath`?
I think it's better to do it in a local function in the constructor
Why is this `context.Background()`?
Is the "nanosec" correct here?
I think we should add this to the API and not have the API to include it. I think we can just remove the `defaults` argument from the API.
I would suggest to move this down one line to where it's used. The same below.
This is now useless, right?
`js/IS/IS/IS_name_text: true` is a bit redundant here. `isIn^\s+$/.test(node.getAttribute('alt')` returns `null`
I would just put this `userscripts.run_async` on it, as it will be a `try/except`
@saghul is there any way to make this a default value for a `0x00`?
I'd rather remove this.
I'm confused about the `if` here. I'm guessing the `if` is not needed.
I think this should be `use !...` rather than `...`
Nitpick: We usually don't use parentheses around the body of a hash, like `respMsg = fmt.Sprintf("Response code: %d, response body: %d", resp.StatusCode, string(body)`
Line is too long. [91/80]
This should be indented by `get_` prefix.
How about `toPath()`?
It's not possible that the user would see the `nupic` in the `obj` directory (and not the `obj_filename`) but not the `nupic` directory.
I'm not sure if this is the right fix. The PTHREAD_attr_init() check is to always set it and then set it to the "if" block.
Is the `fields` part part of the previous version correct?
Should this be checking if the result does not exist?
Should this be const instead of const?
Seems like this import was not used anymore.
`super().__init__(parent)` is unnecessary.
I don't think we are adding new versions of this file anymore.
Why is this needed?
This is a no-op, right?
Isn't it still a valid integer?
This should probably be moved to `models/internal/install/install.py`
This is the same as for `promiseLibrary`, right?
Can we make this a function of an `__linux__`? It looks like it will only be used for `__linux__`.
I'm not sure if this field is really needed.
I think this should be in `shutdowncue` since it should not be part of the user's account.
Why are we doing this?
I'm curious how does this work in the case of `stderr`?
Shouldn't this also be a `ConfigTemp`?
Line is too long. [83/80]
You can remove the `getStateEvent()` from `getState` and use it here.
(style) line over 80 characters
I am not sure we want to do that in the future, but I think this is a great solution to me, because it seems to me that if the config is not in the config file it is in the `self.config_state_before_fullscreen` method. I think it's better to do the check at the top of the method, rather than having `window_state_before_fullscreen` and `self.state_before_fullscreen` as the name of the method. What do you think?
@JukkaL This was causing the CI failures on master. I think this was causing a bug where we would want to fix the fix because we can't figure it out, but I am not sure what this is
Why does the `+v` here need to be checked?
Is there any way to show this part and not show it again? I'm not 100% sure it is a problem or something like that. What if the user wants to show it in the container?
Is this change necessary? It looks like this is the default, and it is a bug, not the user.
@mfojtik this should probably be `test.go`
please use `static`
Can you add a `name` argument here?
Don't we have already any side effects? Is this related to the other changes in this file or am I missing something?
I would use a more descriptive name like "time".
Why not just call `cancelOperationException()`?
Is this used?
Can we use something like `bool empty($htmlAttributes['class']) && empty($attributes['class']) !== '';`?
Why do u need `return` here and below?
This is the only change that is needed in the `installedVersions#remove` function.
I wonder if the logic of this method should be in the same `create_command` method? It would also be nice to also have a test for this, and that's why it works.
I think we can get rid of this error and just return early.
This should have been in the previous commit
@dvoytenko is this still needed?
Should this also be updated?
Do we need to keep the package_stage? It seems like we don't have the build build build build only for 1.1. I don't know how much we have to go for 10.1.
I don't think you need this. It will be used.
Why not just do `multiple && len(dep.Outputs()) > 1`?
Can you make the call to `equals` the same as the other uses of this constructor?
I think this can be simplified to `return memberPreference` instead, since it's only used in one place now
This is an example of a bug. We should be able to reproduce this test later.
I believe the order of the tests are failing because of this change...
This is an example of how the `cur_path` works
For some reason, we are removing this, but not in the device by default.
I think that we need to keep the implementation of this interface to ensure the API is not passed to the `goto` package.
Please use `self._current_tab(tab, add_undo=True)` to keep the docstring consistent with the others. The current name is a bit misleading.
Is this really a code smell? I'd prefer if this would be called `PushBackNamed` or even just `PushBackNamed`.
@sahbi-ktifa Is this really what you want?
I don't think the `checked` should be a string, so this should be an `else if`
Do we need this at all?
I'm wondering if this should be `(default=True)`. I'm not sure if `default=True` is the best name for this.
nit: `RowKey rowKey` is a string.
this is wrong. It's only used in the Pj_ctx_test.py if you want to use it as part of Pj_debug_ERROR
Is the change from 1.5.0 to 2.0.0 so we can change it to 1.5.0?
Why is this change in this PR?
This is a bit confusing, because we have `coco_instance` already defined as a `_attribute_instance`. I think we should just remove this.
We need to use `String.format` here.
I'm a little confused about the singleton alert, why are we doing it on the server side?
I would suggest to use this.
This should be a single boolean argument for `Check` (the `install` argument)
Just for readability, do we need to make sure the timeline contains all of the data?
I am not sure this is a good idea. If you want the full set of checks to be the best choice, I think this is good. But I am pretty sure the test doesn't pass.
Why not use `_w3c`?
Why is this no longer needed?
why do we need the container container here ? this is a separate key for the container container ?
can't see this being used
This should be marked `case`.
This is not the right place to use a copy. We want a generic map. I think the copy can be removed.
I'd prefer to have a separate method for this. If we can, remove this interface, and use `Task` in the `Close` implementation.
This is a good change. It looks like there is a similar bug here.
Is there a way to make the method package private instead of creating a new method?
You need to update the `mergeRecursiveWithOverrule` method to reflect the new order in the `mergeRecursiveWithOverrule` class
This seems like a good idea for us to have a better name.
This change is unrelated but the change in this PR is not related to your PR and should not be needed.
nit: I think you can put all of these in alphabetical order.
The name seems strange, it is a bit misleading, I'm not seeing any "all" in there?
This is a breaking change. Please move it down there.
Style/MutableConstant: Freeze mutable objects assigned to constants.
It's better to use a function that returns this error, like `handle_stub_err` or `handle_stub_err_path ` and then check the return of the file, there's no point in keeping it in this function.
Why do we need an empty package?
Why do we need the check for the class name?
I'm not sure about this change - I was not able to see that a test fails. What is the reason for this change? I think we still need to use this package for the new package for some reason.
I don't think we should change this. I think this is a breaking change and we should just add it to the `genesisText[:]` below, and remove that `genesisText[:]` as it isn't a breaking change.
I don't think the `reset` function can be removed now, it's used in many places in the codebase. We should consider using a more descriptive name like "How about the actual name of the input."
I think this should be `if req.Pagination.Token == 0`, since we're using this anywhere else anyway.
We should use `f.Setf(nameof(nameof(nameof(nameof(nameof))`
Redundant curly braces around a hash parameter.
I think it should be possible to keep it in the `namespace` package.
Use `if self['is_cygwin'] == true` instead of `is_cygwin` to avoid the `result` in the code.
This variable is not used anywhere else - it's already in there.
Use options[:recursive] = File.directory?(source) if options[:recursive].blank? instead of options[:recursive]
I think we need a more specific name for this. The name "HumanReadableName" is probably confusing for how we're dealing with other names for other types, e.g. `GetVroigReadable` or something similar. We can probably move the name of the field to some common package (in a future PR) to make that more generic.
how does this work for all versions of the package package?
Thank you for changing this. I think this is what the best approach is. I think the `+` should be here to indicate the correct behavior for `-` as well.
This exception is thrown a few lines down. I don't think this is correct. I don't think this change is correct.
This looks like the wrong thing to do. I would expect the `RenderAppendBuilder` to be used for the `_layout` object to be used in the `RenderAppendBuilder`. In the case of the `_layout.IsThreadAgnostic` we should probably add it.
This class does not contain anything, but the field name is very misleading.
I'd be tempted to just make the function take `block_a` and call it `rails_block` or something, and have the call `block_*_*` in the name of the function. I'd like to understand why you need to do that.
this should have been changed to debug.js
This should be a try/except instead of a try/except, as it's not a part of the API, right?
This should be `procCodeA == procCodeB`. The first check should be removed.
This should be a static final constant.
I think it is better to return a `EnsurePoliciesAttached` error.
Please revert unnecessary changes.
I think there is a reason to do this, but the test should not be removed as it is not used anymore.
should be `returnType == null || returnType.isEmpty()`
This should be moved to a separate commit, not as part of a separate PR
I would use `_norm` in these cases
I think this should be a `else if`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think we should remove the alias import.
@danrot what do you think about this? I'd prefer a more descriptive name for what type is and what it is doing and what the other types are.
This is not a good idea. The `featurefeature` flag is not really the number of bytes in `featurefeature` but we should be consistent. I would suggest to move this to the `featurefeature` package instead.
I'm not very familiar with this code, but I think we shouldn't be redefining this in a future PR. Can you check for the case of an existing test case ?
I don't know that we need to make a separate file for the new ones
please use `if (strcasecmp(value, "lazy") != 0) {` to avoid duplication.
Why was this changed?
This class is not used.
This will not work for `return err` (we need a new error handling in the `sigFound` case).
This is a bit confusing, as this is the "no" key in the context. I would say that if we have a "no" value, we wouldn't want to set a value in the name. WDYT?
Is there a way to avoid using MolToCXSmiles when a name is a parameter?
I don't think we need the `dict` here since it's an `dict`
Why the change in this commit?
Why is this change necessary?
Why does this need to be ignored?
Nit: Can't we use System.IO for the specific type?
@jridgewell can you confirm that this will change the behaviour in the future?
This is a no-op, because it isn't used anymore.
@deads2k @bvanzarek Can you confirm if we need both (ex strings) here? Or is it the same for all?
Is this still needed?
Is this used somewhere?
This should be synchronized as well.
I think I had to put these two methods on each table: - we can remove the `defaults finder` and `user` fields - `actions` and `defaults finder` - `actions` can be confusing to the service. - The `defaults` and `user` should only take care of the `defaults` table. - `actions` and `actions` should be the `defaults` method. - `actions` should be a `defaults` object.
Can you add the `const` tag?
what is this for?
Why delete the errNoCert?
Can we put this into the `AddTasksRequest` namespace?
I would prefer if you moved it down to where it is used and you can't use the same variable in the partial.
I think `the Outpost ARN from EC2 Metadata: %v` should be sufficient here
should we remove these "though the Python-Install" actions from the main package?
Should we have the same problem for both the call sites?
This is not a public interface, it should be public.
Do we need a `r.base` variable here?
Can we remove this, I think it's unnecessary since we are now using it.
Why do we need this? Is there any particular reason for it to be a specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific specific obvious?
Shouldn't this be `[Puppet::Pops::Types::PSensitiveType::Sensitive]`?
Can we use `__main__` here?
Why do we need this?
I'd like to see this change to be in a separate commit, but that's not a real change that's a separate commit and will be a separate commit.
Isn't this going to need to do anything if a controller has the `render_gif...` constant?
I would suggest not to add a `#if !NETCOREAPP && empty string == null`, as the property is removed. That way, we can avoid a `#if false` check and remove the `#if` below.
These 2 should be `1`, not `1`.
This is a duplicate of the one in line 118.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This should run UpdateManager, I think we can remove it after the user's touch.
This using is no longer necessary.
Nit: `StartMetricsSession` is not a function that returns a boolean, it can be simplified to `TestPackageBase` directly in `TestPackageBase`
I'm not sure about the name of the test. I think we can do something better here. :)
I'm not sure if `provisionFailedTerminal` is the best name for the variable, but I think that is not the right solution. `provisionFailedTerminal` might be used in a more suitable way than just this one.
I don't understand this?
This is a good change to the old behavior, we need to fix the CI CI
I'd prefer to use `if (!is_value()) {` here.
Is `pkgsToBuild` actually available in the "certing" package? If so it might be a bit too much to make it work for a single package.
This is an error-prone as a case where the `create` is being executed. So we don't have to worry about the `create` in the `if` statement here.
This is a breaking change. I'm not sure we want to make these changes to the `span` namespace.
Is there a reason to use `go.com/` everywhere?
Do we need `@memberof` here? Can you please rebase?
This could use a `conftest.NAME` constant.
I don't quite get why this change is necessary. The `Deflater_JDK8252739` method already has the `dictLength`.
This method was not used anymore.
Is this the correct way to do this?
I think you can use `==` instead, as you have in the other places in the file.
I'm pretty sure this is the right place to add to the docstring. I think it might be better to make the name more explicit to the docstring. In other words, we could add a `with_binary_doc` method.
This formatting is not correct.
I think this is not needed.
this method was only used in the `const` statement, so it is no longer needed
The original code seems to be missing some context and should also have a default value. I think that we could use the same logic to avoid this.
Do we need a panic here as well?
I think you can drop the `peering_port` variable altogether.
This seems wrong to me. I don't think it should be there but if the image is still in the name then it will be removed.
This is a little hard to follow, but it seems we can't do it for all of the `if` statements here.
I wonder if we should have a similar test for roleText that uses roleText and not roleText.
This is a good place for the race-httphttp. As I mentioned above, I would prefer if we could use a better name for this parameter.
I think this is wrong. The problem is that `tf` doesn't have `tf` and `tf.yaml` must be the same.
@deads2k any reason this is not needed?
I don't think this is a good idea. It's not the case anymore. The code below should never be called.
Should this just be removed?
Why do we need to change the output of the output of the output instead of using the same name? This seems like a good change. It might be good to replace the output with `vars->Print("import (\n");` with `vars->Print("import (\n");`
This seems unrelated, IMO
I'm not sure this is a good idea... it's not a blocker. It's a good place to add it. If we do want this we'll end up with a "return" and we'll have to go back and see it.
Is the `auto` parameter really required?
<msg> <msg> <msg> <msg> <msg>  above, why is this added?
is this an API break?
Can you add this to `utils.from vinto.core`?
This should have been `@activated_on` as well.
Would it be better to check for `argSpec.isOption()` here?
Is it possible that 1100 is a current thread-safe spelling issue? I'm thinking about a more specific version that we want to be doing in this patch.
Can we just revert this change?
I don't understand why this was moved to the beginning of the component, but I don't think it's worth doing it here
Why does this need to be in the first place?
is this the only change that is in this PR?
Why do we need to pass theDeployment as a pointer here?
We should use `LOG.finest` here
The issue I see is that the issue is in `lib/lib/lib` (or even in the other cases). So I think it makes sense to add a new limit for this (i.e., do we still need this?)
Please don't remove braces. You'll need to update them all as well
You can do the same thing here as the other PR: `afterPaintEffects.some(...)`
Can you please remove it?
`videoConstraints` can be set to `false` in `videoConstraints`, since the `videoConstraints` will always have a value.
Can you please add the same on the `slug` column? It's not clear what the model is for.
I think we can also remove this check. It's not needed anymore, since we're in a transaction.
This should probably be `defer err` (or maybe even `defer`) to make sure the test fail
I don't understand the difference between `span.SetAttributes` and `span.AddEvent` (I do not see any new code using this function). Is it the same?
I think we should add a TODO to make sure that the `Resources` is always a resources and the `SearchTopology` is not set.
This would be much better as the "clear" type is always available at the beginning of the test.
Why is this needed? Seems like you might just want to call it once
I would just keep it the same as the original implementation.
@bartonjs, any reason why we are using the interface to use `BlockHeight`?
Why is `exactly` needed here?
Isn't the linter going to use the same variable for the `ConsistentRead` field?
@bflad you can merge both lines above as `if (!o != null) {` and `o != null`, but you don't need to check if the path exists in case the `if (!o != null)` has been added
Why not just check for the other property?
Can we just use the `dataType` type here?
Nit: remove space character
We don't use "VUID-vkGetQueryPoolResults-flags-02827" for the query count for the flags, so this can be removed as well.
Why the change? The `Bytes` key seems to be unused.
This is a bug, I don't think we should return a `Cause.Cause` here. I think we should get rid of the `x.tbk` error, since it is a `dict`.
Is it a good idea to have a constant for this?
This check can be moved inside the if statement above.
This is a bug.
The `collection` is not needed here, it should already be there
This seems unused
I think this can stay just `sh.export 'TRAVIS_RUBY_VERSION'`
This can be done in a follow up PR
I think the code here was a bit weird: `datetime.utcfromtimestamp(from_ts) == 0`
This seems like a regression.
`swarm.Address` is called by components that need to score peers, it is already called by components that need to score peers.
This is the same as line 118.
Can you include the OS specific header in `common/concurrent/Barrier.h` and the OS specific header should be added there?
This was changed in this PR. I don't know how to make this change.
This is not a public API, please remove it.
These are only used in one test, but we can remove it if we are not using that feature.
Why we don't need to pass `ctx.User` here?
Use the new Ruby 1.9 hash syntax.
You can just use the value that will be passed in.
I think the `_dogStatsProcess` can be removed too.
This is fine, but I think it's better to change the return type of the `X32` check to make sure `sizeof(X64)` is `None`
@mjkkirschner I think this change was correct. We should not change the `TRACE_ID` variable name in the `gulp check-js.js` file, but we can change the order of the arguments to be the same, as in the next PR
Line is too long. [90/80]
I don't think this can work, you need to use something like `TryParse(pair, "escapedPair = string.Join("(, decodedPair.Split('=').Select(Uri.EscapeDataString))`
is it ok to have a `ByteFunction` with the same `ByteFunction`?
You might consider adding a new one that has the confid as a crappy method to convert to a new one.
Not a big issue but you could just make this configurable.
This is wrong, because the test case is not correct.
Could you please add a doc for this?
`features/Test` should also be updated to call it from the function.
Nit: I'd rather have a separate "Short" constant that's a single value, e.g. "multisend" or "JSON_DATA".
I think you can just remove the old constructor and change the old one to `nn.leader.DistributedSpanContext?[HttpHeaderNames.ParentId`
this should be a constant
Should we check this for total_dotshielding, if it isn't there?
Please remove this empty line.
Why did you change this? It's only used in one place and we don't have a finalizedHeader here as it is.
Remove the declaration for `scratch=true`, just use the same name as the other `scratch`s.
Why not just `.format(type(inplace).__name__)`
Can we change this to `values["Baz"] = "Bar"` and not have the string in the JSONValue map.
What do you think about just replacing `item->startDecaying();` with `Item::length` ?
Is this used somewhere?
I'd prefer to remove the metadataLocation field from the current state, to make sure metadataLocation is a metadata location.
Why is this change needed?
Is this the correct thing to do? It seems to me like this should be the only one that is used in this class (or at least it's not in this PR).
This was an interesting issue.
Lets not just call it `LabsG` or just `LabsG` or something.
I don't see any new examples here. The `else` is correct.
this is not a very good idea to me, I'm not 100% certain this will break the API, but I'd like us to make it a little confusing. What do you think about adding a method to the "parallel_default_flow" method?
Is this a superfluous change?
Why change this to `int`?
(style) line over 80 characters
Is the version needed?
This test is failing on Travis, and it looks like it was intentionally removed.
Why is this a pointer?
why is this being removed?
Same as above, let's use `<a href="">Hey, before you start this...`
Is it possible that a cfg can be a single function?
I think this is not a change in behaviour.
I think we don't need this.
This is a change in behavior, we need to make sure all callers don't have a different type of class names, but I think the order of methods we are using is a different type of class names, so we can't just change `setParentNode`, and use the `Node` type directly.
This was a bug, and it wasn't working before.
I don't understand how this works. This is because the `Win_ssh` property is not present in the same file.
Why is chit->isValid() checked here? Why is it a bug?
Can you change this to `with 'lodash'`?
We should keep this public API and keep the API private.
This file doesn't seem to be used anywhere.
This can never happen, right? I'd think it would be better to keep it as a `@(DataFrame.name)`, and pass it as a bool in there.
I think we can use the existing `is` method instead of using `List`
I would not do it for the `CITYPackage`, but I don't think it's a huge deal either.
Why did you remove this?
I would have put this log line in the function, but I'm not sure what it means.
Isn't this needed anymore?
should be `import`
Should we make this `DATATopicReady`?
This is unrelated to the changes in this PR - can you fix it please?
Can it be an `int` instead?
I think we need to handle the case where the response body is empty, or we just close the response body to avoid memory/connection leak.
I think this should be changed to `[a-zA-Z0-9][a-zA-Z0-9\\\\-\\`.
This should be also in a different PR.
I think we can keep the `AspNetCore` parameter now that we have in the `diagnosticSourceSubscriber` constructor.
The `g_free` and `g_ptr_array_unref` are not actually used in this file.
I think you want the default `VXLANVNI` to be 4, so the default is 4, and that's why the default value was `0`
I think we should avoid the wildcard imports
We should also check that it's an empty string.
(style) line over 80 characters
This is an unrelated change. I'd suggest to move it inside `Newscrypto` since it is not a `ValidateSignature` call.
This is a no-op, so please don't update the doc.
This line is duplicated in the other PR, but it should be removed from this pull request.
I think this is a breaking change in behavior for the `error` and `errors` functions. I'm not really sure why these two functions are added to this PR. It is a real problem, and I don't think they should be removed.
We should probably log it, since `Result toReturn` is not used and can be removed.
nit: "not authenticated user is a service account"
I don't think `Use` is a proper type? Do we need to add a `Optional[str]`?
@andrewkroh I think you meant `Usages: []cmapi.UsageKeyEncipherment,`
You should use `free` here, as this function will return a value and will throw an error.
What's the difference between keyProjection and keyProjection here?
Is there a reason why you are doing this?
Why not just use the `jrpc` package here?
Can we have an `or (role in (controlTypes.ROLE_DELETED_CONTENT,controlTypes.ROLE_ west32))` and `or (role in (controlTypes.ROLE_ west64) and controlTypes.ROLE_ west32`? The `hasName` should be used for the `hasName` method instead of `hasName` (or `hasName` should also be used for the `<%=` and the `<%=` should be used instead of `<%=` and `or` should be used for the `<%=` should also be used
I'm not sure about this - is this change intentional?
Is this change related to your PR?
Why is this necessary?
This will be a breaking change for all platforms. The `cStorPoolGot.Spec.Disks.DiskList` should be `exec` for all types of `UpdateHash` and the `cStorPoolGot` should be `exec` instead of `UpdateHash`.
I'd expect it to be fixed since it's a fixed fixed by some other PR.
Would you be able to remove this code? I don't think it is a very good idea to have it here. Also, it would be nice to have `logger.info` as the `flowFinished` is in a `if`, which is what we do for `this.flowFinished` and `this.logger.debug` (or something similar) in the future.
I think it would be better to use the `InitialIntervalInSeconds` constant here, as we're not using the default value.
I think this is the right fix. The `frame` is supposed to be a `mdash;</td` but it seems to be something we want to keep in mind if it were to be an `frame` instead of a `mdash;</td` or some other `td`
Why do we need this change?
please, add explicit variable
I'd like to avoid this, it's the way it is to do this, but we don't need `ownerSVGElement` for every attribute, and we don't need a attribute in the attribute.
Is the `response` for the `response` in this test case correct?
I am not sure if it is worth the context of `getReviewPosition`.
Why the change of this assignment?
This should be an error.
I think it will be more clear if the user user is already using the user. It can be changed by the user user and the user has a user with the name of the user.
I'm not sure about that. Why do we need to check for `addrs.ok()` ?
This will be very unusual and probably should be moved to the `Settings.I2C_clockSpeed` module, which will be called by the `Settings.JSONBoolWithQuotes` module, so it's not needed anymore.
I'm not sure we need to change this here. The only difference is with `data_Fols` is that it can be a `.to_pandas()`. I think we can use `.copy()` in the previous `if` statement instead.
use the `current_user.id?` as we use the `user.id` method in `administerable`
We should add these values to the dashboard model
I think we can get rid of the ` posNext` now.
We need to check all stock stock objects.
this should be a separate pull request, not a big deal
These are a bit confusing to me. How is `ON CONFLICT` different from `PTransform`?
Is this the correct form to use?
This test is not testing what is being done for the test. It should be either `ArgumentOutOfRangeExceptionException<ArgumentOutOfRangeException>(1, maxCapacity)` or the test `ArgumentOutOfRangeException(2, maxCapacity)` - I'm assuming that we can remove the test and just use this method, which is not what it is.
I think the intent was to set the `config->http_proxy` to `None`, but I think it would be more appropriate if we just set `config->config->http_proxy = getenv("HTTP_PROXY")`.
I think we can just remove the `== null` part.
@mattpap these should be in the base path, as they are not part of the PR, but it seems that the default constructor should have the default `http`
This looks wrong, if the split size is not found, then `splitSize` will be `None`, right?
"Divide" is a bit too generic and is a bit more standard for what it means, maybe we should just have a `.Network` method that takes care of what it's supposed to and then use that to indicate that it won't break anything? (I'm guessing that's a good thing to do.)
Could you also add this option to the `compute_service_account` check below, and add the `compute_service_account` parameter.
I think it would be better to use a `GET` var instead, and use it in all places in the code.
Please remove this blank line - you'll have to update the lines above to match the existing `if` statements.
`do not` -> `positional`
This is a no-op, but I think it would be better if we had `config.remote.ReplicaSet.getfilesystemfilesystem` which is the correct type.
Nit: "the first time is a length file"
I don't think there is any difference with this, but I'm curious why you changed the `default` parameter because `not ''` was `null`.
I would have left `sp2` from the name. We should change the name. We can use `w` instead.
I think you should be able to do `selectAllPhotosUpToFav(getImagePosition(m.getPath()));` instead of `selectAllPhotosUpTo` and `selectAllPhotosUpTo`.
Why change the options argument to be optional?
what is the meaning of the maxSessionCount object? is it really a compatibility break ?
why is this change needed?
Is it possible for this to happen at 32-bit?
This should include the daos_metadata.h field in the file.
`rec->ExceptionInformation[1]` is more of a `rec->ExceptionAllowed`, and the `rec->ExceptionAllowed` is a `rec->PathInformation[1]` instead. The `rec->PathInformation` is not a `rec->ExceptionAllowed` so we can remove the `rec->PathInformation`.
Why is this removed from the commit?
I think we can keep the list here.
Why are the changes in this file needed? The new ones in this file have changed.
Is the `isFirstAdmin` field added at all?
What about `Type MonoType`?
This change is unrelated. Can it be reverted to `internal`? (It's also not a real bug that's not really needed here since it is already in scope)
Can this be an alias for the identity?
This seems to be the same as for the other options, and the options that are different. Is there something else?
@dunglas, do you have any insight on this?
This change is not needed.
I'd prefer we do `from config import template` instead of `[]` because it isn't used by the file at the top
what does this do?
this is a bit weird. It should be called "google.golang.org/grpc".
Can we add a new attribute for each parameter?
I think this would be more readable if we just wanted to be able to pass the override and override to the function.
We can remove this and just use `update_column(:deactivated_on, Date.today)`, it will do the same thing.
`p.IsReadOnly` is always set when it is not set, right? Shouldn't the bodyParameterType be set to the value of `p.IsReadOnly`? If not, why not just set `bodyParameterType.ComposedProperties.Count(p => !p.IsReadOnly)`?
This is a real change in behavior that is a problem in the future. I'm not sure what to do in the other PRs like this one is. If it's the best thing to do to remove it and just leave it as it is, let's just import the `text` dependency.
We need to set the default to `none` here, to make sure it's not specified.
Why is this removed?
This should be left as-is.
Is it not possible to have a potential exit for a potential exit? If so, we may want to make a change in case this won't be a problem?
`replace("{1}", (totalRecordCount ? startIndex + 1 : 0).replace("{1}", (totalRecordCount);`
Do we want to check for `uint64_t` in here?
Is there anything we need to set this in the `WriteTime`?
@bartonjs - I think this should be `_blockTree.Flush();`
Can't we make `elif` a `=`?
nit: un-initialized
Why the `if err != nil` check?
Well, if we do this we need to get rid of the `Aggregate` call here. If `StackTraceUsage` is set to `true`, then `0` should never get set.
I'm not sure this test has changed, is it? If not, it is still valid to remove the tests that the test is failing.
Line is too long. [83/80]
please revert this file.
I'm not sure we want to change any of these tests. Do we still need the `str`?
Trailing whitespace detected.
@cvializ any reason for removing these changes?
Is this the correct behavior? We're not using `rule.FromScheme = ''` as the default?
I think this was an unTED bug. I'm not sure why you did that.
@matt-gardner Does the err still get added in the task?
This was a leftover from a previous PR
We don't need `clear_many` in any of the model. The model needs to be updated as well.
nit: I'd prefer if you could add an additional check for `IKestrelHttps` here, since it is a new `static` thing.
I think it's a little strange to do `select()` instead of `select()` as we don't need to call `self::STATUS_TABLE`
I would add a `addJs` and `addJs` here, to avoid code duplication, but would be good to add a `addJs` method to the code base
I think this will need some logic.
Can you update this to: `const TestContainerDocker = "none"` The "order of the container is the name of the container.
Is there a specific reason why it is `package`?
Why not use `get_registry_url()` to get the url?
Why is this change on the `ctx.Address`?
Use the new Ruby 1.9 hash syntax.
` char` should be a ` char`
What's the rationale for this block of code?
Is there an extra `visitLeaf` method that returns? What happens if there is an invalid field? I'm thinking about this method, if it is the case, then the `JenkinsQuery` method should still be used instead
Lint/UnusedMethodArgument: Unused method argument - 1. If it's necessary, use _ or _models/ as an argument name to indicate that it won't be used. You can also write asUTESUTES as entity entity.
This function is a map, not the container name. The correct name is just an map.
Why is the `Object` necessary?
Is this just a context manager? I don't see anything in these cases.
I think we should also add these to the `strict_WINDOW` base class.
I'm wondering whether we should add an explicit check here for `value` or `null`?
I'm a bit confused about what this is about, and what it is being added in the `args` loop. Should we also check that `--modulepath` is not set before calling this?
Should the `original` field go in the `needsSource`?
We can't do this. We can make this change in a different PR.
This is the wrong place for this. We need to check the number of languages, right?
Why is this change necessary? I thought we already have a test where this was used.
This is not a great change, but we should be able to get rid of it. We should also remove it from the other PR.
Can't `getUsingUsingHeader` be nullable here.
Should this be `Resources []runtime.RawExtension`?
I think you can just `options.has_many :exercises`
This is not necessary. This is the only change in the code.
You can remove the `if` and the `,` statements as well.
@bartonjs I'm not sure if we need to check that `index` is not None here, or does it need to be a `index.copy`?
@sda1/coreclr Does this work? I think it is better if you have `dev.DeviceName` be `nil`
why remove this?
I think you can also do `is not None`
Can you also use the `StopTimeout` field?
I don't think we should use this helper for the `WindowText`
Can this be changed to `m_k8s.io/v1alpha1`? We don't want to have `v1alpha1` for the package in this file. It seems a bit weird to have to pass this down in to `castv1alpha1`?
I think we should add an error here to ensure the actual user has been merged.
I'm wondering if we should make the `WARNING` constant more explicit and use `./pants lint` instead of a `./pants project` constant.
I'm not sure why you're changing the `first` here, but it seems it makes sense to have a test for this.
I'm not sure we need to change the name here. `_find` should just be the same.
this is not the right place to put this
Should we also do the same for `/in the second stage`?
How do we know it's `ctx`?
This is not the only place where we need to pass icon names for the JS, but I'm not sure if this is the best option. I'm not sure we care though.
Should we also update the `min_flow` version?
How about `!hasFillDataChanged Indicates whether the original fillData has been changed in player player player player player player player player player player player player player player player player player player player player player player player player player player player player player player player player player player player player
The name `FileSystemIntermediatesManager` isn't very descriptive enough to me. I don't think it's safe to do it here, but I don't think we should change it in the future.
I think you can use `element.is_displayed()`. I'm not sure if you want to have any check here?
I'm not sure this is correct. The datastore flag can only be used in the debug command. Do we need this check here?
I think the `err` here should be a `err != nil` since it's not the actual error.
Nit: Can use some more descriptive names for these
Please remove the DnsTests
should we change the default value from `trigger_instance_id` to `SELECT_instance_id`? It's a bit confusing to have `trigger_instance_id` be an integer.
Is the file added by the way to go? If not, then it should be added to the `build` struct.
This should be in `appsec_blocking_enabled` (in `appsec_blocking_check_cache`), otherwise we will need to run `make gen` to see if we are running this for other tests.
Group with the group above.
This should be moved to the top.
Shouldn't we do this in a `if ( -cc)` method?
This is a little strange, why is this needed?
This seems to be an issue, I don't think it's worth it to check for a config object, since it is not an error and should be logged
I think it's not the preferred solution for this PR, but it makes sense.
Shouldn't the `r.Client` be removed from this function and the `LoadSecretData` call here be removed?
Why this is needed?
The `LOG` here is not necessary since we return `LOG(ERROR)` on line 139 above.
Are you sure this is needed? I don't think it should be.
I would suggest we move these to the top.
Can you also remove import if we have to.
This is a bit of an overkill, but I'm not sure if we need to make it a component?
Please keep the old name for the new property and use `settings_init` to make it easier to understand what is the difference between these two and the new one.
I think this is still a good idea to have a context.Context that is already in the new API.
This is a change to `goForwardInTime` so that it's not obvious what the `goForward` function does.
I'm not sure about this one... I think the only thing it's used is in the `getElapsedAndTotalIfPlaying` function.
I'm not sure about these two changes - they are the only one that's used in this test :smile:
I think we need a TODO here.
Use the new Ruby 1.9 hash syntax.
Could you add a license header here.
Please remove this string from the `SpanCount` list.
This should only ever be true for a opcode. If the opcode was previously defined, then the next one was not being executed.
I'd prefer to have an `HOSTS` be a `HOSTS`.
This can be removed
Shouldn't this be a pointer instead of a pointer?
Shouldn't this be `dump_puppet_log`? I would think that if the exception is thrown, the log is not present.
Should we have a cast to an int here, to avoid duplicating the code blocker?
This is not a very good idea to have the same value. I think it would be better to make it configurable by default.
This is a good thing but I'm not sure why we can't use the interface to store the id, but this is a breaking change
There's a similar issue here as in the other similar cases below that will need to be added for the other cases.
I'd suggest to assert it's an error and not returning a `ArrayType` (or a `ArrayType`) instead.
I'm not sure why you added the `InstallCRD` here.
`hiveutil-created` -> `hiveutil-hiveutil-created`
Layout/EmptyLinesAroundClassBody: Extra empty line detected at block body end.
I am not sure if this is a good idea for the new stuff. I would just remove this and keep the `aws-sdk-s3` case as it was for the wrong reason.
is this still necessary, or is this related to the rest of the changes?
this is not needed
This will be unauthenticated and then an `if`. I don't know if it's worth the extra `if (`
Why do we need to add these if statements?
Please add `import org.apache.commons.lang3.lang3.initial_plugins` as a separate entry for this. I think we can remove this and move the code in `plugins.js` and use it in both places.
This will probably need to be a user-facing endpoint since there's a new image that we can use in the URL and we can't use it here
nit: can you add a blank line after all the other stubs in this file?
Can you add this to the doc block too?
This line has a couple of spaces, and it's not really related to the rest of the PR, but I don't think we want that.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
There is a lot of code in here: - It's a bit odd to see that `get_subscript` returns a string, which is why `bool` is passed. If it is the case, we could add a note here that it's only used by some other debug functions - I'd rather not add a `get_infer` method in the future. I would also suggest moving this to `get_infer_match` instead of having a list of `get_subscript_match`, and then call `get_infer_match` in the `get_subscript_match` (and
Why the change to 1?
can you add some description here?
Is there a reason for not just calling `_WIN32` here?
Why do we need both ` getDst` and `loopBody` ? Is it possible that we don't have a `-st` ? The reason we are trying to avoid is that we're not trying to use the `loopBody` in `resultInput`.
I think this `if` block can be moved inside the `if` condition above?
I would prefer to have a list of imports and only use it in one place, and then use them in one place and one of the imports in the imports.
Can we just do this in a separate PR? I think the `historyEngineImpl` is a very common pattern that we're going to need.
I'm not really sure this is a good idea. This is the only use in the `DefaultClient` that is used by the `CreateClient` and the package name is used by the server.
We could use the `^` suffix here.
Do we need to remove the `bamStubber` part?
This is a bit dangerous, since `num_classes` is an `Variable` value in a 3D Tiles file. We should probably do something like `py-roi-head`. Though I don't have any suggestions for it, so I'm just fine with it.
you can use the `Exists` method here too
Do we need to make a separate method for this?
Should this be named `Instances` ?
Is it not possible to use `cp65001` in the `connect()` method and get rid of `get_connect()`? I don't see any point in having a hard-coded `cp65001` method here. @bparees do we need to do that?
This is not needed anymore, right?
nit: this could be `constexpr` if you want.
This can be replaced with `model=True`, and `hidden=False` are in the end.
Why is this defaulted to `mobile`?
Why do we need the `if` here?
This seems like something that should be moved into the `var` block to keep the old behavior.
I think it's better to keep the `v3` package for `overAppApp`
Please remove this include.
Why not make this an `panic.NewTicker`?
Is this needed?
This might need a bit more context. I'd suggest `clang-format + 1` or something.
This is not a part of your PR, but the changes in this file are just a test.
I'd prefer if we didn't change this logic, but I think that would be much more efficient if the code was not being called.
Why is there only one usage for this?
I am curious why this is moved to `BazelWorkspace`?
I think we should just keep the vulnerability and have a vulnerability in your code.
(style) space required before the open parenthesis '('
@zjffdu I think this is a good change, we need a unit test.
Can we make this `onConfigurationChanged` instead of `onConfigurationChanged`?
This is not the only place where we use it, and we have a `attr` method on each `STMTHEAP` in the future.
Should it really be `DAGSTER_EARLIEST_RELEASE`?
This is a regression, not a bug fix.
I think it should be `json.exists()`.
This is not really a thing to do with the other changes, but if you do, you should check that it's not the case in the list. The other changes should be in the list.
I think you could remove `_getHash()` from the `txs` above.
Can we have a `// hack + validate genesisblock`? Or should there be a warning in that case? Or would it make sense to have it return `0` and then check if the caller has the right value?
Why not just make `SetDiskBlockCacheFractionSetter` a `Set`, and do the same for all the `ByteCacheFractionSetter` functions below?
Is `addr.ByteString()` the correct way to do this? I'd rather have `finally` be `nil`, but that's not the only place this is called in `addr`.
I think you can remove this `else` statement here and below.
It would be nice to move these `isinstance` calls into the `elif` statements.
This should be in the `service_type` section.
what is the meaning of this?
We should also check for window.windowState() here and in other similar cases, if window.windowState() is set to window.windowState() in the `if window.isFullScreen()` check in `window.showNormal()`
This will break all the tests that call `!browser.firefox`
>flatbuffers::uoffset_t [](start = 36, length = 7) I don't understand this change. Can you explain why this change is needed?
Is this TODO still needed?
I'm not sure if we should remove doc here since this is only used once in `spack doc`. Wouldn't this mean we have `ismaster.js`?
This form shouldn't be necessary for the task to be included in the form, since there's only one form that is in a form, not a form.
This is a bit weird. If the function was used as a list, why do you still need to use `(uint32_t i = 0; i < *pPropertyCount; ++i)`?
This is just a real bug fix, right? I think this is not needed.
Could you change this to `dialect.name = 2`? `dialect.name = 2`?
I wonder if we shouldn't have to return `Iterable[offset]` here, since this is a `prefetch_list_types.UOffsetTFlags_LENGTH` (which we're not passing in the argument of the `Iterable[offset:offset]` above)
`act_cfg` is not a valid name for this argument. It's used in a couple places where it's used.
You don't need the `as_json` variable here since you are already passing the entire `profile_json` variable.
Did you mean to include this include in `lib/cpp2/server/ThriftServer.h`?
shouldn't we be using `/` everywhere ?
Can you use `this.hot.rowIndexMapper` instead of checking the value?
We should probably make this an option, e.g. `AmpSupport`
I think `Account::Access` and `accounts` are the only ones that need it.
Not sure if this is the right fix here...
Can we just return the value of the result and check that the result has to be 0?
how is this related?
This should be `format.xml`, right? `format.html` can be removed now.
Whats the purpose of the `diskLimiter DiskLimiter`?
how is this being used?
How does this work for the config config for all new config (i.e. `x`) ?
this is the only change to the new method?
This is a no-op, right?
I don't know if it's good to have the test in the test, just to make sure it works for me.
why do we need to check both if we just set javascript and then check if it is not specified?
This is the only place we've moved the `search` component to a single place where we had a chance to fix it.
We should probably make sure the journal has been removed in the next iteration. The journal should be added to the `getRangeFromJournal` package.
I'm curious what does "sub" mean in which case the timeout won't be? Is it supposed to be: `.toClick( '.mdc-menu-surface--open li', { text: /united kingdom/i } );`
I think we need a test for this as well.
Please use `.detach()` instead of `.detach()`, as this way you can check for other methods (which are more correct).
nit: can we use `cls.__a = ''` ?
I think we don't need to set the default to the `True` argument here, it should be the default value for the default
I have not seen this method being called anywhere else - it's going to be called for every call site (I don't know why it's here).
The `form-group clear-fix` will cause a conflict.
This is a bit weird, I don't think you need a `causalConsistency` option for this.
This import does not match the `*` import.
I would move this check to a constant so it is only used by one place and not on the other.
This should be `KindNode`
I think we should use `array)$this->config` to check if the current locale is not defined.
I think it should be called 'return 0' or something like that
This class is only used to add the `notificationId`.
I think you should avoid using wildcard imports. It's not clear how the imports are used.
Shouldn't this be an `else` instead?
We need to do a copy/paste error here.
Why is this here?
Why remove this?
I don't think this line is needed?
These changes are not really needed
`ClassSelector` and `ClassSelector` seem to be a little confusing to me. What is the name of the class?
This is the only place you've removed the `throw new KeeperException`
Metrics/LineLength: Line is too long. [123/120]
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this should be `unfiltered.filter?`
Is this error-prone to see if a user has a different error for some of this stuff?
Why is this change needed?
this should have a test to verify status is enabled
I think we can remove `out.HTTPMatch` and just check if the `HttpMatch` is not nil
Maybe we should make a separate pull request for `observers` and `user` methods instead of adding those to the source?
I would have used `//// Commit` and then the only place it is called when the feature is used
So we're still ignoring the expected type?
This is a change in behavior, but why the `+` here and not an issue?
This should be `t.fd` instead of `t.fd` right?
This seems wrong, the nullptr check is redundant here.
This seems like a very odd abstraction, since we're not using the `showAndWait` method. Is it possible to get the error message?
Is this going to work for all users?
This should be a constant, not a body.
I don't think this is right. We need a better way to have a different time in the handler for it.
Should we just call `border_color_marked` here, and not have it in the description?
can we add an example here that the `make test` is not expected?
I would prefer to have this logic in `setUp` instead of having a single `try (String path)` method on `isEmptyLine`.
I'm not sure this is needed. It looks like this was added in the first place.
I think the `metric.` prefix is not required here.
@wachterjohannes Shouldn't we have a config that ensures that the user is not present and we want to know the user is disabled?
This is the only change that works in #934
Should we do something like: `update_attributes` to ensure that we are not passing the email in for the last name? That's because we're trying to move the email into a user in the first place, and we're not doing that in the last name, but it's probably worth having trouble here.
Is this just a debug print? I can see the last sentence.
I think this should be moved back up so that the `seconds` is always set to 1, otherwise it will be set back in the first place.
I'd prefer if this was a separate change to avoid any kind of thing in the first place.
@gustavonalle does it need a skip generating MachinePool flag?
I think we need to be careful with the new interface to make it easier to see what the interface does.
I don't think this is correct. The `client->QueuePacket` should be moved into the `if` block.
Layout/SpaceInsideHashLiteralBraces: Space inside parentheses detected.
I'm assuming you meant to use `empty` instead of `tuples` since you are using `set` to get the `x`?
can we make this a const and use it here?
this is wrong, you should use "hexa" in the tests
I'd prefer if this was a separate method to be used in other places instead.
This is a breaking change as there's no need to add the `else if` statement here.
I think it's better to keep the messages consistent across all messages, e.g. `shift.NOT_messages`.
you can just do `getEntityManager()` without the `${->politFrame(null, string, string)`, it will be the only caller of `getMediaManager()`
It would be good to add an additional constant to the name of the property.
this method should not be called twice. You should also remove it from here
I would prefer to have the same check as the first one in `locallyCacheResults` and then just call the `verifyActionResult` function. That way, if we have a test for this, it can be hard to see how to do it here, and if we do it we can use `c.locallyCacheResults` here, which is not the case, but it's probably not a good idea.
nit: I don't think we need to call this `status`, since the field is already validated against the `Status`.
This will need to be changed to `l.trackerMu.RLock()`.
`self._create_test_data(testuser_name=1400000300)` seems to be a very generic name, and it would be good to do it as a separate change
Nit: this should return `false`, not `false`.
I think the cPorts was a bit confusing. I'd like to see a `CustomPort` as an interface that gets passed into this object.
`user.Password` will be set in sdk.jit.annotations
This is a good example of why we would need to do this. It's not a big deal if we had it in the tests.
I'd like to see this in an explicit way. If the spec does not exist (which I think is not the case, we should probably be able to use the `match` argument for this). It will be easier to read and see what is the case for that.
This is not a valid repo, but it will have to be created on every repo repo (which is already a few lines below)
Is it worth adding a `AuthPath` field here?
Is this a bug fix? Does the position be in the `visiRanges`?
`fetch_until_empty_page` will do the same thing. I think `State` should also be added here
This change is not needed anymore.
Can we change this to `cache.locationProvider`? We do not need to change it in the other place.
I would say we should log a message here. If the user has an event on the server, we should log this message and log it. What do you think?
I think this can be combined into a separate PR. `ecs.time.Duration` should also be added to the `jwtgo` package.
This is not the right way to do that. The `_statsd` above will be `null`. It will be `0}"`. The `Send` should never return `false`, so this will return an error. It's a bit more readable, but I don't think we can add the `is_Send` check here.
@tgamblin I'm not sure if `v1alpha1` is the best idea. It should also be `v1.alpha1.k8s` for `v1alpha2.k8s.io`. But that is not a problem, since it will always be `true`.
Please use RpcApi QUORUM from RpcApi(), also, make it consistent with the other RpcApi QUORUM
I'm not sure if we can make this change, but if you really need to check, I can see that `checkCoinbase` will be used by this point, it's probably better to keep it as is, like checking for a single file
Shouldn't we just call protocol.helper.New(t) instead?
This will be defined and defined in the other places. I don't think it makes any sense, but we should be able to remove all that if we're not going to change it.
Why do we need to check for guidance?
This will need some lint error
This is a very confusing name. It's not used in the PR, and is unrelated to this PR.
Should we add a test for this as well ?
Same, missing a space between `Kernel` and `RSpec`.
Should we use the default here? It would be good to have an explicit name for it.
This is not right. We have `get_lifecycle` and `status_code` defined twice.
This is not the only change in this file that is in this file (in the `ValidatePictures` method, I believe this is the only usage of `mDisplayPreference`.
This needs to be indented by the "Filter" method, otherwise it will return a string that we want to delete the log.
This should be `static`.
Is this needed?
I don't like the change, but it seems like it would be a lot of work to just change this to `./map/rspec/core/resources/formatter_specs.rb:56` to avoid confusion.
I'm pretty sure that this should only be used in one place. Maybe `chrome_options_set=True` and not just the default service.
This isn't used anywhere - it's not used anywhere, and it's used by both backends.
This is an internal function, it is not really needed.
This is a change in behavior... but is it not necessary to use the inner logger?
This change should be reverted.
I think it would be good to use `ConfigCertChain` here as well. We could also just call `NewCertChain` in the `if` block.
Shouldn't we use the `gstop` suffix here?
@bvaradar can you confirm that you don't want to get an unrelated error here?
can you make this a `map[string]string`?
Should this be part of the constants constants?
I would prefer a separate PR to make these changes.
@kennfranz should we also change the XBP to be 1 instead of just XBP?
Can you add a docstring about these lines?
I don't think we should remove this, it's only needed if the Changeging goes through and goes out of scope for the PR
This is a good opportunity to use a `contains` function for the function name.
This was not the fix, but now I had used this check to make sure that the `ValueError` was not being executed before the call. Is it correct?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
We already have the same pattern elsewhere in the codebase.
I would move this to the top, it's more of a debug statement.
I don't think the `backend_service` constant is necessary here.
Can you use a more meaningful name?
This is now done by the change in `non-identity`, so I think it's safe to do this here.
make them in the same PR.
Is this used?
This should be `dp_inStream = static_cast<std::istream *>(tmpStream) || ((*tmpStream->bad())) `
Why is this necessary and why not just make it final and use the function directly?
I don't think the convention is correct. The original code is still correct, so this was the original version of the help.
The default here isn't a valid group, it was previously a different type. I don't see where it was used. I guess it would be more correct.
Why is this part of the version not being changed?
I would suggest to keep the `bigquery-credentials.json` as the name.
Why do you need to do this? It's only used once, not on every call site.
I'm not sure this will work, since the `this_l` will only be applied to the `create_bulk_pull_blocks` case.
Please use `print()` in this file, not `print(...)`.
Block has too many lines. [32/25]
Why not use the map type here?
Nit: please use single quotes around the argument name.
Why is this in `newAWSMachineSpec`?
I think it's better to remove it for now.
Why does this need to be here?
Can you make this part of the TODO?
I'd rather not add an `io.prestosql.spi.blockProcessor#core` method that takes an extra parameter and has a default of null. The same is true for null and empty, so we have to add `isDoneDone()` method to it and we will get the default value if the null collection is not null.
We need to keep theinsightfilestore for all other things
Do we still need this? We can use the same check for the other `@round_count`
I think it's better to use this. You can do a `_` rather than the right one.
I think you can revert this change since you are using a default now.
Should this just be `&` instead of `&` ?
Please add the `find_by_api_email` method.
This should be `join()`
This looks wrong to me. I don't understand the logic here.
This is an API change. I don't quite understand how it can ever be.
`r.URL.Path` was `nil` before this line.
Who uses `self.aggregator`?
I don't think this change should be here.
This is the default for the new `ResourceType` field. Isn't there any other reason?
i'd love to understand why this is needed here - can we just pass the `ChainID` and just pass the `Tip` in?
I think this is the only one we need to keep, but the `@see` is still needed.
nitpick: you can merge these two lines with the previous one as the last one you added
This can be removed.
I'd suggest using the `self.recording_msid` as a property here.
I'd prefer if you could change this to `strncpy(s_val, tmp, flb_sds_len(tmp))` and make the same more robust.
Please remove this.
I'm a bit confused about the logic here - the logic below seems a bit weird, why do we need to pass the `ref` param here? I'm not sure if this is the right thing to do, but maybe we should do something like `gulp dist --all --all --all --exclude`?
this will need to be removed from this PR
This is very weird... I think it should be `if not [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' [' ['',', 'rost.
Can you use the `const` constant here?
This will fail if the next time was not enabled, right?
We should add a new field for the new one.
I'm confused why you wouldn't do this. It is the only way that the `loaded_http` test is a `with_nms` is a `with_nms=True`.
I don't know if there's any need to import the module here, but I think this can stay.
`service.pagePath` will be the default for the `drilldown` service, since it's a service that is not the default for the user.
This should be removed.
I don't think it's necessary to put this in the UI
Does this mean we are not returning the correct type for all the methods? I think it would be better to just have an `Optional[str, root]` that would then be used for all the methods in the `if` statement instead of doing a similar check.
I think it would be good to have an secrets in order here to make sure that the config is not present.
This is not correct as it should be changed as well.
This class is used to avoid creating the browserURL.
This can just be `static const`
This is the only change that affects handling in `base`: > The prefix prefix will never be false and the value should be `nil` or not. In this case, I'd rather not have it return false here.
I'm wondering why we would want to use `SCM_task` instead.
Is it possible to get the same sections with `<page>` ? I think it would be easier to get a type for it, since it is only needed in the UI
I would rather have this test in the name, so that it doesn't break the API that is used.
Shouldn't it be time.Now().After
I think this is a good change. But I guess we don't want to have any code using a simple function in this file.
this is not correct... the log implies the `python1` is zeroed
Should be `return len(self.best)`.
@wangxiv maybe we need a better name? `system.maxWorkflowTaskTimeout`?
This test was not working as I was getting the fix. I had to make a test for it to ensure that the tests pass.
We should be using this flag instead of `_get_permission_NAME_SIZE`
Line is too long. [85/80]
This is the only one I'm wondering. What is the `integration-test` for?
I don't think we should change this to `dots-vert` or `more_horiz` as the default. We should keep it simple and add a check for it to ensure we have a list of supported values.
I don't really like having this default argument. Is it always set to 1.0?
`commonName` and ` serialNumber` should be moved into `NewInt`. It would be a bit more readable if we had a `get` with an `commonName` (and a `commonName` and `NewregionNumber` as a single call to `Newregion()` on it).
What's the purpose for this? I don't think it is a reasonable default.
why remove this?
Just curious, why do we have to do something here?
This is the only change I have here is just to make sure that this is the only change needed.
I think this is a good time to remove the last 2nd arg from the API call. It's not needed anymore.
I think the name here is wrong. It might be a bit confusing. `SYSTEM_ATTRIBUTE_PATTERN` should be used to specify the same name twice.
This function is used only by the `UNUSED` file, which is not really needed here.
This is a bug fix, and we should probably do something about the user to not have to worry about.
Should this just be `len(p) - len(s.dataForWriting)`, to make sure it's not zero?
I'd move all the configuration stuff to a separate function.
Why removing the second parameter? It's not the same as the second parameter.
Can we also change the `WithTimeout` call to `defaultFn()`. That way, if we ever need to keep these things, we can just use `WithTimeout(ctx, cancel)`
Is it possible to use a `seconds` instead?
This is not correct as it is a `_tab` and not a function, so this will always be an object that is not an object, so it is not a function that is only used for this test. If I'm correct, I think it should be in another PR.
<msg> why is this needed? I'd expect this to be an array?
@mfojtik this change makes me nervous but it's not really important to use the default, as it's not a valid default.
This should be a private method.
This change is not needed because it is in the `else` branch.
Is there a reason we are removing these 2 lines?
I think we don't want to return -1 here.
This change seems unnecessary, since `getRawUserQuery` already calls `getRawUserQuery` in the constructor, it should not be necessary to remove the `else`.
This should probably be `Account`
Is this needed?
Hmm. I don't like the idea of having a single `if` statement here. What about `if (v != "")`?
I'd rather not do that.
I think we need to move the `version` declaration to `PackageInstallRun` since that's where the `version` attribute is used.
What do you think about using `Flags.argparse(Flags: []cli.Flag{` here?
this is a bit odd, why not just have a method on the `currently_awaiting_approvers` instead? That way we won't have to do that in every test, and we can just call `actionable_approvers.include?` in a later way
I would move these above the `SecretAccessKey` above
This should be setHours(0, 0, 0) instead.
This should use `ipsets`
I'd like a trailing period, but I think that we're missing a comma here.
Why not `// power;`?
`$this` is an array, why not use `$urc = true`?
Is there a reason to use `uint64` instead of `uint64` in the `NewUInt`? If we're not using `uint64` then we might as well just use `uint64` here and below.
Why not keep this final?
This could be a private method, IMO
I would prefer to have this as a public interface and make it public in the interface and have it private. Otherwise we can make it private and name it `RemainTime`.
I'd use `update` here as we already have the auth token in there
Should we also change the assertion in `_InternalFrame` here to be sure that these are actually correct?
I think this could just be `self.updated_at.to_i`
What if we have a `var Path.Join(workingDir, appExe)` return an `int` that we don't need here?
Please remove the logger.error
This import is not needed, it should be added to `brain.brain`.
This function doesn't do anything
Why do we need to `resourceGroup` here?
I don't understand why this change is required.
I think the label can be more concise, "please provide a label with 0 or 1 for whatever reason".
Can you please create a separate issue for this and similar methods for the `transport_active_address` above?
This is the only change required.
Why is it public?
Why do you have the custom enum class or a explicit Enum class? I would prefer to keep the enum class as it is.
This doesn't seem right. You're only testing for `dispose` and not having `cls.handlers` as a param. We need to use the `function` here to prevent a circular dependency.
I think `useInView` is unnecessary, we can remove it.
Why is this change required?
I would use self->lastLogIdSent_ instead of self->lastLogIdSent_
I think this is a good change to make it more explicit. I am not sure about this...
Why `Metadata`?
Please add a new line after `meta charset=\"UTF-8\">\n`
Should this be a test case?
Can we just call this `DelayHelper` and have a test with the right name?
@jridgewell I think I missed this one, but it seems like I'm missing something here.
shouldn't this be `when /ec2/`?
This should be handled by the log level, as we don't want to log the user.
Redundant `return` detected.
This should be removed. See the other files below.
This should be a different check.
This is a bit hard to read, but I'd rather have a look at how the `protocol_name` value would be used.
Would you be able to remove this from the PR?
Please remove this, and use `System.instanceof(System.instanceof(System.memoryLimit, ...)` in this class.
Please rename the parameter to `query`.
Why is this needed?
This is a little strange. If the feature has been removed, the feature should be removed.
This should probably be `return h.handler.Call([],reflect.Value{reflect.ValueOf(reqBody))`, right?
Not sure what the best thing to do is, but I'd rather have a separate `_keepAliveTimeout` property that is used here. I think this is fine, though.
Is it a bug in `full-check-compare-*` and not just a `full-check-compare-*`?
Is it possible to have a non-blocking `Clear()` method that takes a `_ApiStringMap` and then just return a `null`? I think the logic of checking for the `Clear()` method is not needed.
This should only be needed if the logger is a connection-specific logger.
Do we want a test to verify that these are not available?
shouldn't this be `expect (analytics?).to be_true`?
You should use `key.emptyList()` for the `Index` argument.
why do we need a new enum value here?
Looks like this can be removed
We should probably have a test with `.0` for the version
I think the `queue_length` should also be removed, since we are now using the `GameData` and `GameData` in this file.
this is a test for the new plan, not just the old plan
@mikhzke What do you think about this?
Can we just remove this interface and keep the interface as it is used by other instances.
Is `Shutdown` a valid processor? Is `ctx` a valid processor?
This is a bugfix
This was a bug, but it was a typo
I'm not sure this was necessary. I'm going to remove a "h1" for now, because it was not working correctly.
We should add the `cluster` attribute to the `IL` package.
This was the only change required for `llnl.util.t` and `llnl.util`. I'd prefer to avoid this import (as the rest are the same) and to avoid the need to change the `t` import.
Can you add a TODO to remove this?
Is it safe to remove this? It looks like it will always return anything, and it will not be handled by the caller.
Should we add a `0` here, or is that because we're doing the right thing here?
@liggitt is the idea behind this, but the `server.conf` test is failing.
Can we do a check for null here?
Should it be in `TestResultsFile` instead of `surefir_dir`?
This is a bug, we need to pass in the `video` to that function.
Why do we need to cast to strings here? The latter is probably not needed anymore.
This will be a partial, not a form-specific partial.
I think this should be `ctx, cancel := context.WithTimeout(context.Background(), time.Second*40)`
I think we should move away from `result.toArray((err, *);`, to be consistent with the other call site.
What happens if we have `http`, `quic`, and `http` and `https://"`, etc.?
This change is not related to the fix, but is not related to the bugfix.
I don't know if it is worth it if you'd like to avoid adding the `map` in the file, and just to avoid doing a `/` here.
Why not using a generic `String::isPresent()`?
I think this will not work, you need to add `metricsConfig`, and set `table.properties()` on each node, then set `metricsConfig(MetricsConfig.fromProperties(table.properties())`
Is this change needed for any of the tests?
Should this be `byte[]`?
I think we should remove this, as we don't have the title in the user.
This is not needed, because the type of the function is not a `candidate_map`.
I'd also rename it to `enter_interval`.
This should be `external_cgroup`.
Instead of hardcoding the values, can we just use a `PasswordPasswordPasswordPasswordize` here?
@wmvanvliet to check this change here, as we have `prepareDismaxQueryString` in the `getSearch` method, and it will not work. This code is not used anymore. I think it should only be moved to the `getSearchHandler` method in `createDismax`.
This should be removed.
@deads2k i have a concern about these changes, I just realized that I don't like the latter, and I have the concern I missed.
I don't think we want a `null` check here. The result of `allowedExtensions` is never null, and the result of `null` is always `null` in the result of `allowedExtensions`.
This is not the right default
Should we use the KeyValuePair<string, StringValues> instead?
This is a breaking change. I would move it to `build...`
Should we do `opts.spinner.Stop("Error!")` instead?
I would prefer if this is a debug print.
I don't think the warning is right here
@jcotela is this change intentional ?
Is this a change in behavior for a reason?
I'm not sure if it makes sense for some license license header to be needed.
Is this needed?
This may be a bit confusing, how about `Integer.isSupporting(caps)` or `Integer.isSupporting(caps, "always-filter", "always-filter", "always-filter", "always-filter", "always-filter", "always-filter", "always-filter", "always-filter", etc. `isSupporting(caps)` would be more readable than `isSupporting(caps)`
I think we could use `libkbfs.PublicPathType` here
I would have put this `proposal_notification_email` as `proposal`, but I'm not sure we can safely safely use `check_script` here since the `proposal_notification_email` is a subclass of `proposal`.
same as above we could also add it there
How does `sep` get set to `0` in the next line?
Does this need an `const Type& type`?
Is this change intentional? It looks like it is just a `string`, and the type is `string`.
I would prefer if these were `#` instead of `#` here since that's how we want to keep things simple.
Can we have an `node_modules` that is passed in here instead of `node_modules`?
I'd suggest to use `if dataset.virtual_vdims:` as the name.
I think you can just use `err.Error()` here.
I don't like the extra empty line here.
`passSlf4j` should be renamed to `trace` (and other similar methods in this file, `debug` and `debug.warn()`).
There's no need to check if a `as_index` is an attribute (or `len(by) == False`. Also, if it's not `false` then `as_index` will be a boolean, right?
Why not just update to the currentVersion instead of the newVersion?
This is not needed since the only package that uses this module is the `install` module and is already the default package.
What's this change doing?
I would say "supersupersupersupersupersupersuperain, I'd like to know that this is not a key for the log messages." The message will be more clear.
Should this just be `import/no-extraneous-dependencies': 'off'`?
I'm not sure why you removed this - if it's needed to make this change - we need to make sure we aren't actually using them - we need to keep the `spec_helper` action in this file.
I don't think it's necessary to call it `ConsumerCnt`
I'm a little worried about the default param name here - what if someone added a different parameter for the `CloudAuditLogsSourceServiceName` and then `CloudAuditLogsSourceServiceName`, and if someone changes it to the `CloudAuditLogsSourceServiceName` and I don't think it will be used in that case.
This is not related to this issue. The issue is that the build won't have the "local" variable in the if condition.
This seems like the wrong place for this.
This is a duplicate of `expect` -- I think we need to test that it works.
I don't think we need to get the errors here.
Wouldn't it be better to just delete this line? The code below is a bit ambiguous, and it is not a problem, but it might make more sense to move this import to the `FileOutputStream` package.
This change is not required, because the descriptor_class can never be null (it means that there is no null check)
This will need to be `== -1`
Hmm, this is a very minor thing that I'm not sure what this `noencTarget` is. I'd expect this to be `noencType`, but I think it is actually `bhTarget` if it's not used anywhere else, since it's a `noenc` method.
This should be in the `if `s3_with_PORT_S3` case and not in the `PORT_S3`.
I think it should be in `setUp`, `setUp` is already in this class.
There are two places where we set `result` in the engine's `const` operator.
This can include a C++ header, as this is a part of the "fmt" folder.
I think this import should go below the `k8s` package.
Is this used? I guess the error message will be better?
This will not work. It's a change in the tests. It will be useful to test with the new Code class.
is this still relevant to the PR?
This is going to fail if the exception is thrown, not just the original exception. I think this should be `Exception`. I'm also surprised we didn't catch it before.
We should probably have a test for that too
I'd prefer we keep this as is. It would be more readable if we could make a generic method that takes a `ctx` object to access this.
Are we sure this is correct? It looks like we should be removing all the `Use` classes from this class.
I think we should just add these to the error message.
Is `typeof window` and `typeof window` available in this case?
I would suggest to use the `Unit` package, like in the other packages.
This is a breaking change and should not be needed.
We can probably remove this function entirely if you're not using it anywhere else
This could be `var pType = typeof_this.getValue(path, typeof(path))`
I don't think we should change `parseInt` to `parsetabIndex` here.
I think you can just do `body[:target]['host-key-check'] = {}` and remove the `body[:target]['host-key-check']` check.
Can we make this `private` instead of `bool`?
I think it would be better to use `setUp` instead of `bool` to be consistent with other uses.
nit: `UpdateNameMapping` should be renamed to `UpdateSchema` or `UpdateSchema<string>`.
Why is this needed?
Why not just do a `c.getLLVMType(runtimePkg.Type(...))`?
I am not sure about this - it looks like this is the actual code. Is this a copy/paste ?
I think it would be more appropriate to use the default value here, as it is the default
We should not be using the new `if` block anymore.
Is it possible to add `name` as an option on `Datesecurity`, since we don't need to have a dependency on `Task` anymore?
I would prefer a `arguments` here, that way the `getOrCreateWorkflowExecution` method can only be used once, and we can remove the `arguments` function and return the given argument.
Favor modifier `unless` usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
why the `_000_000`?
Why not call the method `getPathPath(Core.getPath())` and use the default instead.
This is a no-op.
this should be done in the test `connect` method
Why do we want to stop_pool?
You can move this logic inside the `send_command`. That will make sure it's not called.
Do we still need this anymore?
why not just `meta['config_dict'] = ['x']]`?
Are we still using this channel names?
I think `span.End()` is not necessary, it is already handled in `End`.
Should be `v :=` instead.
Is this class needed?
This should probably be a constant too
This should be split across multiple lines.
I would suggest putting all the `snapshot.manifests()` in a `try-catch (like before the `if(isDebugEnabled)` check below, since we have the `cache.CloseableIterable(cache.filterFiles(rowFilter)` in `cache.filterFiles(create(rowFilter))`
This should be a class
We need to do something like: `DO::ValidationError.copy(inspect)` or `DO::ValidationError.copy(inspect)`
Why is this needed?
@jridgewell This is the only change that works with previous data.
I would have expected a test for this change. This is not related but I think this is a change that makes it easier to read.
I'm not sure that's a good idea... but I would prefer if it was an improvement, like I did in the spec.
remove empty line.
Please revert this change
this is a bug, you can just use `! empty(! empty(! empty(! empty(! empty(! empty(! empty(! empty(! empty(! empty(! empty))`
I don't think the `_nextDom` is needed, because we are not using the parent context in a different thread.
This is not the same as `LocalMessage.getMessage(uid);`. The `completedMessage` is used to create the localFolder instance every time.
We should use `errors.go` for this as it is forcing a new field.
This is not needed. The plugin is already in the plugin for this package
Should we also add `TestMemberigon` and `GetMemberigonImpl`.
This is a change in behaviour.
What does this do? Is this what we want?
this will make it a `*` in the `if not`
why do we need this?
Why don't you use `bool feat_is_unconstrained ` and not `CHECK`?
Why do you keep the API here?
Do you need this for all node role in the Node and Node?
I'm not quite sure we want to include this as a separate patch, since it's not really a "bug" (which is the default).
This can be removed as the module is now imported and can be deleted.
I'm not sure that we should be doing `NVDAObjects.containsA` here.
Is this supposed to be in the `main` package? If it's not, it might make sense to rename the package name to something like `main`.
Do these need to be in a different PR?
Should we add an explicit `HASH_CONFIG_KEYS` here?
This line needs to be reverted, right?
I don't think this is the right way to do this, since the ECSTasks shouldn't be in a working directory.
How is this different from 0x8000 to 0x4000? I'm trying to understand the purpose of this field, but it seems like we're not using it at all.
This file has already been added to other files, so can be removed.
Let's change the signature of `admin` to `users` to match the other arguments
@jridgewell Is it possible to have a test for that? I'm not sure if the test is actually correct, but I don't see a reason to use this.
I think it would be more efficient to move this to a common place, like `DynamoModel`
I think we should move `v1` down there
This should be `p Thatera<0.8.0`
nit: if it's null, we don't have a variable in the if
I think it's safe to call this `electionContexts` instead of the `artifactContext`.
Do we want the same check to be done elsewhere, or can we just use the same condition to make sure we're getting a warning on that?
I wonder if we should do this before the `cloneURL` call?
Why are we using `.ManagedDomains` now?
This is not a good example of a new PR, but it would be good to have a separate PR to separate this, so that we can change this to something like: `host1.example.com': '10.3.1.5'}"`
I think we don't need to pass a path to the client, it's a list of strings.
I think the only thing this should be called is a `ecs_ listener_type` and the `get_callbacks` call can be done in the `get_error` block.
I'd like to see the hash type in a separate PR, but this is not really necessary as it is the only place where we need it.
Why this code was removed?
Use the new Ruby 1.9 hash syntax.
Is this part of this PR or just making it a public method?
Should be "The {@link HashMap}-based implementation of {@link TreeMap}-based implementation of {@link Multimap}}
Why did this change?
do we want to use the `Compile` version here?
I don't like this name. It's not a user-facing SDK. It is just the text of `.forward`.
Please use `org.apache.commons.lang3.StringUtils`
This file is not necessary. You can get the version from the package. And remove the dependency on line 130.
Hmm, I think we should change the signature here too. It is a bit confusing to have a stats function that returns the same state, but the context should still be stats.
I'm not sure this needs to be done in the future...
This is not a great solution. But I think we can keep this as it is. The `null` property is a string and it is the same as `get => string.Empty;` by default and it is a string that is the property itself.
I don't think you need this anymore.
I think we can remove `name` and `appName` here.
Should this be `net/utils` or `Settings`?
why are we using package package here?
I think the `init` method should be renamed to `is` since this is only used to be used by other tests.
I don't think this is the right approach. We can use the function to determine if the input is a valid input.
I don't think this needs more refactoring. We'll need to update it for now since we're not doing a default orgs check in our tests.
This should never be `public static`.
Why did you remove this?
Please rename to `show tables`.
I am not sure we should have the conditional in the test suite for this, but it seems like it would be useful for the same case as `isspace(c)`.
I think we should just use the `Wireguard.EncryptHostTraffic` here.
I think we need another name for this service.
so if the file doesn't exist, you can use `!var.file.write(fileset.dest, file + 'module.exports.source:):`
why is this needed?
Here's another example where you want to do `.empty?(k)` because you don't need the `.empty?` here
I don't think we should add the limit to the limit limit in the state machine.
I think you can just use `klog.V(2).Testf("Cannot find...").Testf("Cannot find...", that can go away
I think the logic here should be in the other PR too
This probably isn't the right way to go through.
I would move the function to the top.
Why not call `c.closeConnection(ReadError)` here?
@cra0zy - This is a bit weird. I would expect the `list_` prefix to work, but I'd have expected that the `list_` prefix was not being initialized as a dependency.
Is there some reason to make a named variable here?
This will cause some confusion. I'd rather not have a global var for this.
@strib I don't think we want this change. I'm pretty sure the `s.shardInfo != nil` check will cause the controller to fail.
I don't think this is used
This looks like a regression
I think this was accidentally removed from this pull request since it is no longer used anymore.
Please remove the space between the two lines.
nit: this is a bit of a weird name, could you please describe?
I think this should be `qTimeout` instead of `q5`, since the value is `0`.
Is this safe to do?
Why is this change needed?
Metrics/LineLength: Line is too long. [155/120]
I'd suggest adding a `Get()` method to avoid the need for the `uuid` struct.
I'm not sure why we are not just using the callable here. The "l" prefix should be used for the other cases.
I think you need to set the `protoFile` here.
Isn't this going to be `0` by default?
Can we move these to the same level of the `time` package? I think these are only used in the code.
This can be removed as we have a mem leak in the `if (configuration.usingUnifiedTopology()) {`.
Space inside } missing.
Is this TODO still needed?
I think the intention is to have a more descriptive name to make it work with more than one query. The intention is to just have the limit of the timeout limit and then we can have the limit of the limit of the tab, or something like that.
`apiMongoDb` -> `trim`
This should be a named constant.
You should be able to use `build()` here too.
Is it possible to use the envvar like other places?
This is an API change, I think we should move the `yank-text` code to `Config::format()` and move the question to `a4a/dev/dev.xml`. We can just do the question check for the `yank_text` and have the error message still exist.
this should be `elif 'Stats' in event`
I'm not sure we need this anymore, because it looks like it's not related to the PR, but I'm curious.
I'm not sure if we should make these changes.
Is this needed? `add_to_i18n` seems to be a very large choice.
I'm not familiar with the name of the property, but I think we should just add "Show raw resources gathered" as an argument. Also, this is the name of the property that we are using.
nit: `final long millis ? LIMIT ?` is a bit ambiguous. I think it's better to keep the `final` and pass the type `PlanCleanupLimit` to `PlanCleanupLimit` and just do it once after the `if` statement.
Why is it OK to use the `TimeNowPtrUtcAddSeconds` function? It's a bit confusing, but maybe it's just for clarity.
I'm not sure if this is the best solution. The `elif` condition is not necessary. The `elif` condition will not return the `null` value for the `list()` case.
I'm not sure why the options is being used here. Can you check if it is only for options in a single place and the `if` is not there?
I think it would be nice to have a `transformer` function here, like `logger.Sugar()`. It's easier for us to see what `sugaredLogger` is for, but I don't have a strong opinion on how we can use it.
Why are we changing the default here?
I'm not sure if the logic here is correct. The first line only does the second line of your function.
This should be X509Certificates since we already know that X509Certificate is not null.
I think you can remove this and just use `gendoc.To`
Should we also check the error when the `Ready` is not set in the constructor?
What's the difference between partitions and partitions?
This is now the same as the one below, IMO.
Why is this a pointer?
I don't think you meant "IAM" here.
Can we make it configurable instead of hardcoding the message?
Why not ` violation.size` ?
I'd rather not do the `Transports` at all. The `six` method is used in the code base and will not be removed.
I believe this was intentionally removed
I don't know if we need the `@author` part, but I don't know if it's a good idea to do that.
This is the one line we're just removing. I'm not quite sure why it's here.
this is a test case, we should be able to remove it
Should we also add the `RESOURCE_options` and `Supported_TypeClass` to the `RESOURCE` list? We could also add the `Supported_options` field to the `RESOURCE` field as well. We could also add the `GraphIndex` field to the `x` class to the `RESOURCE` field.
Why the new column is being removed?
not clear what we are doing?
Is it possible to have a `MetricInstrumentIgnored` method? It's a bit confusing to have a `MetricInstrumentIgnored` method, and it's a common pattern that is used as a private method in the `OpenTelemetrySdkEventSource`. If we don't want to have a more descriptive name, then we could have the prefix for the `MeterProviderBuilderSdk`
This should not be needed.
I'd prefer if we can get rid of this too.
Why not `directconnection`?
Why not use `int64.histogram`?
Please use an enum for the `isQueueProcessorActive`.
@dvoytenko I don't think it's worth having a sanity check.
This is not a test, right?
This looks like a very good candidate for an example. The function can return the wrong error and the user is not doing anything about it.
This is a bug fix.
This is the only change of this PR. I think this should be reverted.
Why was this added?
I think the above is unnecessary as it is used for the `*SyzkabanURL` method.
if mask.dtype != np.bool op does not exist you should add it to the end of the line.
I don't think this is used anywhere.
I think this is a debug log? I know it's not used anywhere, but it's really just a note.
Theoptional struct is now an aliasing bool, which we want to be able to make sure we are only using the struct for the struct.
I don't think you need to do this, you can use the .getActivity() directly.
I think the PR is correct, but this is a little too much to make it clear that the previous version was being used. I would recommend changing this to `!nullable_handle = compile_layer.addModule(module, resolver);`, as it would also be the same for other commands that are not needed.
Please use a `@Deprecated` annotation.
I'd rather not make this change. We can't make the `Connection.prototype.syncIndexes(string)` method return an array
Why is this a false?
This should have `domain/__init__.py` and `domain/__init__.py` for each other.
shouldn't this be `grpExpr->generateCacheKey(cwa);` to be consistent with the other two?
This import seems unused.
Why are we adding this here?
I think this is a little confusing, it is better to just have a `.filter(is_default)` return a list of files.
This is the only way that we could do that, but I wonder if there would be a way to only do this when we're doing that.
Can you please explain why this is not on the keggCol?
Nit: can we rename this to `GroupWithBackupID`?
I think you can just remove `Domain.of(Domain.SCPFCCSPCF)` from the name as it will not return anything.
This change will not work. `git checkout` does the `String` and `git checkout` need the `String` check.
The fix is correct, because `self.config.get("method", "GET")` is a value of "class object that is not defined" in this case. In this case we should always return `None` for the value.
This is not the right place to put this. I think this is something we can do.
Is this still needed?
Shouldn't we check the time here and check for the time?
Why not using the `StatusFilter` field here?
The variable type should be `true`
Why not `getCoreContainer`?
I don't think we can use the `Version` type here. We already have `ImmutableDataEncoding` in `Version` so I think we can just use `Data                 ` instead.
Is the `*exp.Target.StressChaos.ContainerName` still set anywhere?
This is not the right thing to do - it's just the default, not the other way around.
nit: `LOG.isDebugEnabled())`
@wachterjohannes Shouldn't we use the `[DismaxParams` in the `else` branch?
This could be a `Date` object, which would be more accurate.
I think the product is the right description. Maybe we should just say something more specific like "This should contain 255 characters or less. What would be the best way to go here?
Was this a bug in another commit?
This is a slightly less error prone, I think we may want to do something like `custom_options_files` and `local_options` here to be consistent with the other `check_options` functions
I think you want a `.merge` here, since you're already setting `http_adapter` as an argument, which you can just do `.merge(adapter: connection_config[:http_adapter])`.
We can probably remove the chain chain for this (or at least make it so that it still works)
I think this is not necessary. I'll fix it in the following PR.
I think we can delete this file
I think `value.EndsWith(quote)` should be sufficient here.
Why not call `close()`?
`supportedPolicies` is the only way that we don't need a member variable. I would prefer we pass the `supportedPolicies` as argument.
Why is this in `MakeFBOsForExistingJournals`?
Did you mean to change this one?
Shouldn't this be `.to_string`?
This seems wrong. I would use the `get` method to replace the list with the names in its `get` method
I wonder if this could be `sh.export...` or `sh.Secret` or `sh.exportexport...`?
This is needed because the `assert` header is already built on `stdlib#include` and `assert` header is removed.
This should be done with the number of other changes.
What do you think of using a logger here?
Can we add a more explicit `aws_cmd` function to the existing `ctx` package?
>'mpi4py' not loaded correctly\n" [](start = 28, length = 8) Should it be a 'import' or 'import_mpi4py'?
Is this a bug? Is this the only error that uses `resp.Body`?
I'd rather have a separate test for this
Is the new name of the namespace intentional?
How do you know it's a "NABoolean isFirstBatch"?
I don't like this name, you need to use the variable for `kEdgesTable.size()`
I'd just call it like this: `.cs.Create(....)`
I'm pretty sure we should return here. I think the `defer udpConn.Close()` should be used instead.
Can we add another name to this enum? I think the other one is fine.
I think it is better to use `const char *msg` instead of `const char * *persistdir` here. It's easier to see that it has already been the same as `const char *msg = True`.
Why was this removed?
I'm not sure what the purpose of this field is. Can you explain ?
Do we want to make sure the button has a default variant, so we can't change it for now?
The default is `<str>` instead of `<str>`, so this is fine.
I'm not sure why it is necessary, but the SessionStore.get is a Session table not a Session table. I'd suggest to use `isCurrentSessionPrivate` for the `aURL` case.
This is not really necessary as a constructor argument to `BuildManifestBuild` is called in the `FunctionResource`. The `FunctionResource` is called by a `MAX_VALUE` method.
Shouldn't we also check `type_id` for `modified integer`?
This should be a const.
don't you need to do any validation on the cloud?
This is a bit of an odd thing but is not a single function. It's a public function that returns a single function. It is a public API for some of the existing behavior of the public API. I would suggest `getSignKeyId()` as well.
Why is this needed?
it looks like there's an extra whitespace here.
What does it take to do with a new key?
I'm confused, if the original code is doing the same check right now. The above conditional statement is not needed, right?
I think this is a bad idea. It would be great to have it as a helper function.
this should also be a `*[]`
Why is this change in this PR?
I'm assuming this is a public static class and should be moved into `internal`?
I think we can just put this on the base class and have `admin_index?` method in the base class
Maybe it would be nice to use the new `stricts` type here, and have it return the same function, as the other errors?
Looks like this is causing a test failure. Can we revert it?
Is `TestAccCompose` a correct test?
can you use `config` as the last argument?
Why is this change needed?
I'm not sure how this is used. I'm thinking if we can get rid of this entirely, but this line is still a little hard to follow. If you are going to add `wlr_log` to the code, then the code will not work. You might need to add `wlr_info_init` as the default value for this function. I'm also not sure what the best thing to do here is to check if the input is not the default.
Not needed
I would move this function to the top of the file, since the `static inline` function is now part of the file.
why not use the `proto` constant?
This is not a good name since we have `null: false` in the model.
This is the only function that is in `go/slack/go/` and should also be in the `go/slack-go` file. The other package we need to do is move to `go/slack/go/`
I think this is fine, but we may need to rename the parameter to something like `substring`, `substring`, etc.
@tgamblin I think this will cause some issues in the future, but will not allow the user to know what to do in future.
I'm not seeing where these columns are used
I would keep it in one file and add a `@Rule` annotation
Isn't it going to be `r.Log.Error` here instead?
@mraible is this a bug?
I think we should also add `order` and `PUBLIC`.
This should be `setMode(PasscodeMode.Check);`
Can we make this use the same as others, and have the others as well?
Missing space after #.
please remove this extra lines.
What's the difference between these two lines?
So we have this for a while, but it's not going to be a problem for a single one, right?
I'd like to keep a second nitpick: We can probably remove `# FIXME: this is broken`
It seems that the `type` and `disabled` are the same.
The `address` argument is not used anymore.
I would recommend to use `k8s.io/kubernetes/pkg/config` instead.
I believe the `NAV_DRAWER_TAGS` constant should also be removed.
nit : this include include on the new line
I think the `any` prefix should be left as-is?
I'm not familiar with `PassCharmTargetRestriction` - I'm not sure it's a good idea to move this logic to a new method to avoid this logic.
Is it necessary to call Column() twice?
This will break all tests that use the transaction transaction, which is not the case. I'd rather we have a separate "daos_FILE_final" field that is set to true.
@deads2k @tgamblin Do you remember why we need this? I thought that wouldn't be a problem if it was a volume, not a volume.
This is a bit of an interesting point, as `--rst` is a list of strings and no longer exists. I think the original `--rst` option should be in the `Python-API` namespace. We need to be sure to fix this.
I would use an explicit `Set` here instead, but it's a good idea to use a `set` here.
Also here, if we're not using `execute_task` any more, then we don't need to make a separate method for that.
I'm not sure if there is a good reason not to make `chan struct{}` a new type, and have it return an error. What do the impact of changing this? It would be great if we could just pass in the switch and return the switch.
this could use a function
Is this change intentional? It's not related but it seems like the only place the `getFormType()` calls `getFormType()` calls `setFormType` calls, which is used by all tests.
Those 2 lines are the same.
I think we can use `os.environ` instead of `os.environ.get("Doc")`
I think you can remove this, as it is now deprecated.
I'd prefer we use the same logic for the RTO and RTOs as for the number of places that we are trying to get the number of places.
This should be in a different PR
nit: this import is unused
@sjenning what is the reason of this change?
I don't understand the reasoning behind removing `Pass_type_key` here (and below) - is it just because I wanted to ask you to fix that in the PR?
This should not be necessary. The `ABLE` method is only used when you're already inside the `ABLE` object, so it should not be here. Also, I think it's a bug.
This is an interesting thing to do, but it seems like it could be a breaking change. What do you think @lasote?
Would be good to add these as simple as possible
Why not use a simple simple processor to create it? We should have this interface and have the same implementation as `DataRate MinimumDataRate`
It's not necessary to call R_AS_INT on the data, as this is the same as the other code.
@chlowell can you confirm this is the right fix.
I think we don't need these, as the latter is not a big problem
I'm not sure this will work, but I don't think we have a way to do this without using `Match Cost` for this.
Should we check the value here?
@deads2k i'm not sure about this. This is the fix as the code is not very clear. The exception is only being thrown in the `Session. Using WebDriver` class and the message is not the same as `other_Session`. I would say it should be thrown before calling the exception.
I'm curious why you moved this under the `http` block as opposed to the function in the service?
Is there any chance you can make `force` the entire password?
Should be `int64`
We can't use `None` here.
I think we should try to pass the `Issue` and not just ignore `return result`.
What do you think about using a different typehint for this test?
We should add a default setting here to make sure the user does not set this to `0` or it will be 1) and we don't have a default set.
I would prefer to have an 'Fill' and 'Fill'. It's easier to read and understand when it's not.
I'd rather have the default constructor be public
Can you please change `klogr` to `v2`?
@deads2k this is the only one that is used in here.
this seems like a change
can you explain this change?
This is not used.
I think that you should remove these debug messages.
Would you mind changing the default number to 500000000, and then set it to 100000000 in all cases? That's what we usually usually usually, if we can't set the default in 0.
nit: not sure if this import is really needed
is it possible to have this as a format string?
I think this should be a separate PR. The same question for the others below.
A few of the changes in this file are not necessary.
This is the only place where we can't use this domain.
I think it's better to just call this `progressindicator`. That way we won't need any kind of naming conventions.
@tgamblin This is what I did with @smarterclayton, I did a lot of changes to this file.
can you explain this change?
(the _ncessarily_ of the arguments to the function)
I wonder if it would make sense to move these inside the for loop to avoid code duplication.
Can you revert this change? We are using the namespace for ROM, so it's easier to understand.
I would suggest to add a method for this as well.
I'm not really a fan of this method being used anywhere. Can you please remove it?
This is a very small change, so I just added it in the first commit.
Prefer Date or Time over DateTime.
Should we do this before `await` and then remove it?
This is probably a bad idea. But I don't think we should change the code here. I think we need to update this.
why not `if not hasattr(context, "num_stages")` ?
I think we can remove the last sentence.
I think `s` is unnecessary.
should this be a class field?
This is a bit of an odd thing - the `_head` suffix is used to match the `dcn` field name. I would also change the name of this test in `_dcn_timeout`, and change the other test files to `_apply_head`
Can you also include a docblock here as you have done that in your example and you can see what you're doing now?
Is this a typo?
is there a case where we can't use the JS JS path for the existing `/products/ified -2` app that will use this path?
why do you need this?
I don't like this. It seems a little strange to see an `opts` check in the `if` condition, and then I don't see an exception thrown in the if statement.
Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body end.
Line is too long. [90/80]
Why is the err not being set anymore? If you want to do it, you might want to use the background logging.
Is this something we can make for?
I would make a `table` field for the authenticated authenticated authenticated stream as well. The contents of `Base.png` are not the same as `Base.png`, so you can remove it.
Should the `EnableLogging` be changed to `enableLogging`?
It is not a good idea to use a global `setUp` function in `get_run_status()`, as that's how the dataVersion values have been loaded.
This will be a bit of context and also an issue.
You can remove the spec check now that the `certificate_pem` is not `!`
we need to call `propro_feature_release` before calling `propro_feature_release` to get the same result.
I think this is still a good idea for the current implementation, we may need to remove the "logs" part in the future.
Shouldn't this be an `Optional[ Request]` instead of a `0`?
I don't think we need this - we already have the `IsEvmTransfer` method defined below.
This is the fix for the unit test.
Does this need the `NotFoundErr` field?
I think it's better to have it in `config.me.offline`
Please revert this change.
I think you can move this line to the top of the file. This line does nothing if it's already. You can add it to the `update_user` method, which is the only thing that needs to be called in this file.
I think we need this in the `constants/getStateClient` method, as it's not used anywhere else.
You can just pass in a dict here.
This test will fail if `dict` is not `nil`, right? I think it would just return a `dict` object, but I think the test will fail if `dict` is `true`, and `Object.keys` will return an empty object.
This should probably be a warning, e.g. if a container is not available, then this was in the network mode and the network mode is being loaded. I would suggest to use `!validNetworkMode(container)`. I think it would be better to have a `Debug.Printf()` method that returns a `Debug.Printf()` and `Config.k` if it is not an error?
@franckc I don't understand how this works, is it possible to get this change in the test, or are you going to make it configurable?
Why do we need to handle `nil` for this?
Why does this change? I'd rather not change it, as it's not related to this pr ...
Please use the constants in the constants
This method name is very confusing. How does it handle different operations when actionable is not found? Is that the method we already have?
Is it still needed ?
I'm curious why this variable is not here?
This was the only place where we're passing the class, so we should not use the class anymore.
nit: make the error message more clear
This is a breaking change - it was causing the build break before.
should be `?string|?`.
Why is that necessary? It is a bit of a mess, but it's probably fine.
I think it would be clearer to move this to the `wl_container_of` call, because this is a different place for the need for the task.
Instead of "one" I'd prefer "one-torch-device" as "Exposed" or "one-torch-device"
`GetJob` will not return a `Job` object, so this is probably best just to make sure we don't have to.
Please use `$trustedHosts_toString()` instead
I don't like this change. The `acnpInformer` is used for both `ControllerController` and `ControllerController` methods, so I think `op.acnpInformer`.
Is the `__future__` needed here, or are we still testing for this?
Why is this function needed?
What is this change supposed to do?
I would prefer a similar approach as `Tags.AzureAppServices`, but I would also add the `[]` on line 156 above.
Why are we dropping this?
Shouldn't we take the call to `SKIPPED` as a parameter?
`debug` should be in this class as well.
I'm a little confused by this. The `use` statement is not necessary.
maybe we want this to be a number too?
Let's keep this as it is and we can keep it as is
Please use `import torch.distributed as dist` and in `get_dist_info`.
nit: remove empty line
The label of the checkbox is not allowed to toggle anymore?
I would keep it `--no-after-in-auto` to make it clear that we are not using the `-` prefix for these.
Should this live in `__call__` class?
For clarity, can we change the `DateTime` value to `LocalDateTime`?
Why do we need to do a test to ensure that a specific error is returned?
This seems wrong.
I think you want to keep a `@Form`
Why not just call `RootMetadataOrBust` from the `rmd` package? That way we won't have to test both.
The change looks good. But I don't see how this test can be working with the change.
I am not sure if this belongs here
This is a little weird - can we do a similar thing in `is_NVDAObject_init`?
This is a good time to add an extra `before_filter` clause to the `set_current_user` table. I'll merge this PR with this PR and merge it with #4276 as the PR is merged.
This is a bit of an unnecessary method, it's a method
Prefer single-quoted strings when you don't need string interpolation or special symbols.
We should be able to do the same for both the errors and the errors.Wrapf in the config (the same for both). This should also be a debugging error message.
I'd like to see some testcase for this as well.
I'm not sure we need this anymore.
I think it's better to have a test case for wite lock here. We can probably just get the test case and get it a little bit of an issue.
I think this can be removed now (and the next one, the rest of the code).
You should remove the changes in this file.
This is not a bug, you can remove the condition from `isCloud` and use `v(.+` instead
This needs to remain `if ((LobTgtFileFlags)fileflags` instead.
I would have added `LOG.finest` to this line
This is the only place this was used. It's a good thing that was not possible to do. I think it's better to keep it here, and just have the default set the character and set the SNI hostname in the first place.
I don't understand why we are using this to use the `readActive` from `readActiveBlockProducersByHeight` to get the actual `readActive`? Is it because the field we are only using the actual `read` in the field in `readActive`?
I am not sure this is a good solution. I would prefer a more descriptive name for the variable. In any case, we can use the method to check whether the method should be called or not, not the method
This is probably the only way to handle the old code. I'd recommend not just make `this.getOffset()` return a `BaseElement.skip` and then call `this.getOffset()`, which is also an issue.
is it a typo?
Does the write write the same for all the other places we do this? I'm wondering if we should use `getPackage` to do this for the actual test, or is there some reason you need it?
Should not this function be called from the `handlePeer` function?
I think we want this to be configurable, since the user could not see the new default.
I think this should be a `Eventf` check since we are not using the value of the `Context` and we should probably be checking that the value of `Context` has been set before we fix it.
Should this be an empty struct instead?
This variable isn't used anywhere.
Do you think it makes more sense to just return `errors.Wrapf` if there is no requirement?
Shouldn't there be a `participant_` constant for this?
This was not used in this PR, but it seems to me that the `libpath` object was used only in `liblib` but now it's a dependency.
I think it's better to use XXX for this test.
Why does this need to be removed?
Shouldn't this be `selectedOptions.filter(option => option.actualNode.selected)`?
Can we move this to a class? I think it's fine to leave it, but just to be consistent, we can use `dirname(__file__)` instead.
This is a little too big. We could use a different function to return the correct type of the `foldLeft` function. It's a bit of a weird thing that we should be able to handle this.
This can be removed, or just moved to the `master` package.
I'm not sure this change is needed?
Why not move the `golang` package to the group of imports?
Why not simply use `private`?
Can you use the `\` in the docstring?
I'd like to see the wording that it would be great to keep it as a warning and keep it as a warning.
I don't think the new import is needed
Can you remove this? This was added because we now set the "maxPendingWrites" suffix to be set to 3 in some other places.
I think we need to keep these debug messages as well.
Is this necessary to check that `values` is `0`?
I think `text` is a better name, because `Execution stopped` is a name that's the number of items.
I'm not a fan of having this get class being called everywhere - it's not a big deal but it's a bit confusing to have a single map of the `heap_snapshot` property. I think `HEAP_SNAPSHOT` is fine, but if you want to use the `heap_snapshot` property here, then you should remove the `heap_snapshot` property from the `get_unVPC_count` and use that instead.
I think this is not necessary. The `role_path` will be removed in the UI.
I don't see where you use `RestConst.REST_INVOCATION_CONTEXT` here - it looks like there is no reason to have `RestConst.REST_INVOCATION_CONTEXT` here, but I think we should be consistent and let's just leave the `this.httpServerFilters` above the same.
did you mean to delete this?
Should this be `@SuppressWarnings("unchecked")`?
I think this should still be `*BareTlfHandle, error` since this is the default behavior.
Please use `org.sonar.java.lang.StringUtils`
`if (r != 'title' && Setting.value('titleNaturalSort') || Setting.value('titleNaturalSort')`
The above tests are failing because the form of the `err` is not found. I would suggest to use `not_to_same('remote_pid', local_pid)` instead
Why are you adding new param here? I'd prefer to not pass the param directly.
I think this is still needed in the `dases_file_coin` section
I think we can remove `_x` altogether now since it's no longer used.
Why did we remove `WasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWasWas
The default should not be the last part of the hash. What is the type of ENI for?
why did you remove this?
This is an example of how it can come in an abstract class. I'd like to have an example for it to be named "gettableGauge" or something.
I'd suggest to add a utility method here.
We have an example of how we're passing the entire string to the Feed model (and not the other one). So, the Feed model is not clear to me why the Feed model was not a problem in the past. It seems to me we're not using this part anymore, since we are only using the old output anyway...
Wouldn't this be better done by `declare(strict_types=2)` instead of having a single `declare(strict_types=1)` ?
Could you add a `omitempty` and a `value` to this point?
Could you also add a type hint to the constructor?
This isn't a function, it's only used once, and it's not a function.
Is this the only change needed?
Why is this line changing?
Is it possible to have a test that checks whether the hashBytes is non-empty?
Can we add a TODO to move this to `ObjectObject`? This will avoid the diff.
I don't think this should be here, it is a public key.
Is there a reason this was moved?
I'm not sure about this change. I can't think of a reason why it needs to be a GATEWAY. Can you make a separate PR to make it more obvious?
this line is causing failures on master
Is it intentional to just make this default a 10 * time.Second?
I don't think this is going to be problematic, since you don't really use the struct, you'll just get the `MapLen()`.
why do you need to check here and in line 426 below?
@dvoytenko do you want to catch any exceptions here? I think we should catch any exceptions in the exception and throw an exception.
I think you forgot to remove the `rbind()` assertion that you can't rely on `datatable.rbind()` on `include` and `create` methods.
I'm not sure if we should change this to be an empty string. It is not necessary to change the test in tests.
what is the difference between `Eththththththth` and `_` ?
Why not use `NewConstructor` directly?
This is wrong. You're using the lexer.yylex() method.
I think we can remove this and use the `certificateRequestGvk` from the `pulumi-experiments` API.
I don't think this is a good name. I would rather see this type of error handling handling for the other types of `sender`, so the `sender_gcpbroker` is actually the name `sender_gcpbroker`.
This should be reverted.
I think you can do `assertTrue(abs(nrmse.getMetric())`
Can we just do a `try/except` here?
@tvalentyn - I think this is a leftover from our CI and we should be able to remove it from here
This function is a bit of a bit of a hack but I'm a bit confused by it :) I think it's a bit of a little confusing to read the code here. I think it's better to keep a name of `unknown_internal_yarpc` and `unknown_internal_yarpc`.
Can we avoid calling `_this->topology_at_rasterizer`?
Is there a reason why this was added to ensure we're not passing `./assets` as an arg?
Why do you need to make it public?
Should this be `self.assertEqual(pySp.getRandomSP(), C++())`?
`chan` is a subclass of `chan` so this should be `public static`. Also, the `chan` is not really needed here, as the `heaviestTipSetCh` is the default.
This should be removed as well.
this should stay
I'm wondering if we should just use the output function for it (and only if there are any errors). Maybe we could make this an `DecodeString` instead?
This is a nitpick, but you should do something like `this->add_pricingGroup(self::PRICING_GROUP_ORDINARY_DOMAIN_2, $domainId);`
Is it possible to have an `context` property that we want to expose to the user? It seems like the `context.go` API is not in the `context.go` namespace.
This should be a public property, not a public static class, so we can add a static static property to the UvPipeCount.
I would keep these as it was. We'll have to update the `is` for this and all other methods.
Why do we need to remove the call to `worker_result_handler`?
What's the `resourceSettings` for?
I don't think we should change this. It's only needed when the bool was not found.
Should be in the `github.com/opencontainers/runc/libcontainer/logs` package.
remove empty line
I'd prefer to have this on the existing `if` block.
I don't think we need the segwit=True here.
Why is this needed?
Isn't the default `0`, `1` and `1b` the same concept?
Why not `if --local-logger`?
The `json` tag still needs to be added to the end of the struct. The `UMessages.txt` is the only one which we are doing. The `UMessages.txt` and `file.txt` need to be passed to the `docker` section. The `docker` is the only one that is used for the struct. The same applies to the struct in the struct, so we can remove that section.
Just a thought, if we're doing the `require.Len` we should check for `t.Errorf` before returning?
`random_` is unused, right? I would prefer if it was removed in #2727
I wonder if we could just make the code a little less obvious and call `KBFS-2026`
I'm not sure why these are internal?
Please avoid wildcard imports.
maybe just `html_safe` instead of `html_safe`?
Can we move the check to `if (this.splashWindow && !this.splashWindow) && this.splashWindow.close();`?
Is this the same as before?
(len(listens) -> (len(listens)
`setTimeout` is not used. Also, please remove it.
again nit: I think this is where the go is not
The type should be `anomalyScore`
Should be part of the public API and not the retry
@cra0zy do you know if we should change this? I don't know if we can change anything, we should change the `if (matchClause->where()` to be `null`
`gotChan` can be passed by directly using `contains()`
I think the `order_for` and `update_attributes!` calls are unused.
This should be removed as we are in the same package.
can we make this package private?
`kkDescriptor.address_mode` is an integer, but `kDescriptor` is an integer. I think `kDescriptor` should be `kDescriptor.filter_mode` and use the same name as `kDescriptor` instead. The `kDescriptor` should be the same as `kDescriptor.filter_mode` to avoid a `samplerDescriptor`.
why do you need need to call info here?
Should we just change the type check?
This should be grouped with the other import imports.
you don't need to check the status here.
`c.state` is never null, because it is a non-null, so no chance of null values.
Shouldn't we check this in the SDK list before setting it?
Is it intentional for this to be configurable, or is it a utility for 10351?
Why is this change required?
what about the other types of strings that are using?
I don't think we have to do this, since the migration has a version info and it just gets updated. I think we should be doing the `db` version in the `Version` package.
Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
Why do we need this? I think it might be better to make it a `configBuilder` instead of just `skipConfiguration`
Why do we need to change this?
This is the only change in this file, is there a reason you changed the default?
Can you use `_readInputContinuation` instead of `_read`? This will make it easier to read if we can
Should this set the other key of the input?
You need to add an `-1` here to avoid breaking change.
Is it always true? I don't see any reason to keep the old name.
please revert this change
Should the `WhenAll` call be renamed as well?
@mattcaswell, this is the fix.
Use 2 (not 1) spaces for indentation.
We should also check if there is a `BaseElement` in the constructor and then use `BaseElement.setBrowserLoginEnabled(true)` instead of the `BaseElement.setBrowserLoginEnabled(true)`
I'm not sure this is the correct way to fix the bug, I'm not seeing how the other tests work for this, so I don't think this is correct.
Should this be `request.config.MaxIDLengthLimit()` instead of `request.GetRequestId()` ?
Does this change the behavior of the new state that was in the past?
`self.__parse_request(req)` is the `try` catch block here
Is the `i` prefix used here?
I think this might not be the right place to do that. I think it's better to just have it be the default of `GROUP_USERS` and then `GROUP_ValueType` and `list_to_f`
I think you can remove `self.engine.find_file` from the `path` package. We don't even use `get` anymore and we don't need to use it here.
Why is this public?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I don't see a point in using os.path.dirname here. It should be in a separate test.
Why do we need to do that here?
I don't understand this change. I think the previous version was correct, but I think the original version was correct. It was just "aefik. If you are doing this, it's fine. But I don't see why you need the `error` part in this pr.
Same here about using the `if record.frozen?` instead of `if record.frozen?`
why change it to int64
How about we make it `eligible.freeze` instead of `eligible.freeze`?
I'm wondering if this should be `import sys` since the next line has been written.
This seems to be a no-op if we have a different value for `os/`
nit: can we name this variable `true`
this is a duplicate feature, we should move it to `RSpec::Support.rspec_core`
Do we need to worry about other components/functions around? (I'm curious why the `.statusCode()` here is needed)
Is this still relevant for the test?
can we rename this to `return appendNameOnlyAttribute(capabilities, attributePrefix+capabilityEFS)` ?
We have to go with `v3` now, so we should remove that import.
Why do you change the type of `action` to `string`?
Is this the correct type that's used?
I think you need some kind of `0`s here, and in some places in this file `0.1`, `1.1.0`.
Is this change necessary?
I think this is a bit of an overkill, but I'm not sure we need to do this in a separate commit
What happens if the package exists and for the package being allocated? I'm not sure it matters but it's a good idea to have it as part of the package-level, and not having it here.
We usually don't use DATE, so this import is unnecessary
I don't think this needs to be a separate prefix. `<accountID>` is not a blocker.
can you rename the key to `keystoreManager`?
Is this a valid default? If the value isn't `0`, it may be more appropriate to have an enum value for `1.1.1`, so we can have the constant `1.2.1`.
Please add a blank line between tags and summary for better readability
why do you need this? can we avoid this everywhere ?
(style) trailing whitespace
I think we should add some doc about how we support
You can remove this line, it's already part of the pull-req
Is there a way to handle this case? If so it's probably better to use `pthread_create` here instead, since the code that uses the `if` statement.
Can we rename this to `container_create`?
I am not sure we should handle this here - I think the `sizeof` should have been a bool, not a boolean
Can we have `strings.HasSuffix` here instead of `strings.LastIndex`?
why is this a pointer and why is it a `json:"-"`?
We don't want to unmarshal connection config here, so we can just ignore the error.
Let's add the "unit" flag here.
I think this should just be `ococ` rather than `ococ.`.
this should probably go under the `keybase.Version` helper
Should these constants be renamed as well? I don't think they have any benefit.
I think this is a leftover.
I think we can get rid of the `win32` part since it's already being set by the `displayClient`.
This seems like it would not happen here, because `tls_start.ssl_conn.set_tlsext_host_name()` is called twice.
this is the one that was causing the error to fail. It was just a typo and the previous behavior was incorrect. We need to make sure that it's a different behavior.
Why is this removed? The `replace` call is not needed anymore. You can remove it.
I think this can just go in ServicePortSupplier as we have other port related port changes.
I think it would be better to move the `close()` call here and do the other `close()` call below.
What happens when we have the `spec_helper` block?
This change seems unrelated. Can you revert it?
Should we make the test fail if there are no tests that use this?
Why do we need to pass this to BatchingActivityProcessor if we're just using SimpleActivityProcessor?
this should be removed.
I'm not sure if this will cause any issues in the past. The only difference is that `DynamoView.RegisterNibForCellReuse` is `DynamoView.RegisterNibForCellReuse` but I am not sure whether it's a good idea to do it in the future. If we don't need the `DynamoView.RegisterNibForCellReuse` method, why not just have it take the current implementation of the `DynamoView.RegisterNibForCellReuse` and call `DynamoView.MainBundle` to be able to do that ?
I'm not sure if this is a good idea for us to use the default here. If the default is used, then you could use `Config` and instead set `Config` to `true`. If it can, you can use `close` instead of `Config`
This was a bug in the original version of the PR
As far as I can tell, this is the only place where the `json_encode` function would return a `null` value. It should not always return a boolean, so you can change it in the first place. You could add the `WP_json_encode` call to `WP_json_encode_default()` and return a `null` value.
@rathukugan please make sure this doesn't break anything.
I think it's better to just have `ComputerName $(hostname` as it seems as it is only used for the other cases.
Nit: we can use the `%v` format here
Is this the only change needed? Does `Err` always return an error?
I don't see why this change is required. I would recommend using the `getModeMetrics()` method to handle both `getModeMetrics()` and `getModeMetrics()` methods.
I think this change should not be necessary, as it was before.
This is also not needed.
I'm not sure that we can use this variable name for the package, and if it's not used, then I think we should remove the `nlst()` function altogether.
why not use `getCurrentSessionValue` ?
We should probably be able to do this in a future PR.
Remove this, and remove the `Config::unique_ptr` above.
Shouldn't this be `volatile` ?
Does this mean we have a function that will never get called?
this is not needed, the method is already defined in the exception
Prefer single-quoted strings when you don't need string interpolation or special symbols.
i think we should not have a separate `Exclude` field in this class and `Exclude` should be passed to the `PropertySpec` field. it would be easier to understand what the difference is and why it is happening, but maybe a simple `Exclude`.
Shouldn't this be `referer-header`?
I think this is the same as the `JitInterface` above and it should be moved inside the `JitInterface` namespace so that it can use the `JitInterface` instead.
Why is this part of the `type` block?
why do we need to handle keys?
This is a breaking change.
why did you removed this import?
This was the only change in this file. The code was only being removed in #5206.
what if I'm reading it correctly? Should this be a `.cuda()`? `.join()` returns a `None`?
We shouldn't use `LOG.finest` in this case. If `open_open_open_open_close() == 0`, then this should be `open_open_open()`.
can you update the function as well?
I don't think this will work for a reason. The `CopyDirectoryRecursively` function returns an empty `String` so I would call it the `default` parameter.
I'm not familiar with this code, but I don't think this is a problem in the original code. I'm assuming it's a problem, and it's not a problem for a reason.
Why are we dropping the `MarshalIndent`?
Is it possible to have a map of additional ingress and not having a single map?
This needs to be public.
I'd prefer to keep it as an array, but I don't think we want to add a space after the comma here.
Can you explain how this is used, please?
I think we can now remove the `factory_bot_rails` route and just call it `spec/factory_bot_rails/oo` to make sure they are added. We can also remove it from this file.
why float_x?
why import from outside?
Why do we need to check for `t.Fatal` and not `t.Fatal`?
I'd prefer a `/api/types` here, not `/api/types`. This is a very minor detail, as the code is not in the code that I'm still not familiar with the code base.
You should be able to remove the context. The context is already loaded by the caller and it is a bit confusing to me.
This should probably be a `Map` statement.
Is this a TODO?
You might want a more precise name, like "why is the snapshot passed in"
I'm not sure we should change `logger.String()` to `logger.Status()`.
I think it would be better to use os.getenv('QUILT_USE_TQDM', '').lower()
This was a bug that was causing the task to fail.
I'm not sure about this `if (opts!==FORCE_RENDER)` - if you're not trying to remove the `or` component, it should not have been here.
We should remove this.
I think we should use os.environ.get('JAVA_OPTS', '').strip() or something similar.
Can you also update to `exception.clang`? I think we need to be more clear about how we handle these imports in the future
The original check was done with `pkt.tls_version > 0x0303` above.
This is an unrelated change.
This is not necessary, it will be checked if the file doesn't exist.
this is not a problem, it is a `current_ecr` function
Why did you change this?
I'm not sure this is what is happening in `TryIndexTraceparent`? I think it's a little strange that we are returning `First()` instead of `if` and not all `traceparent` if it's `null`.
is this going to work with the `self.deprecation_horizon` word in `py/regard::InvalidOperationException`.
@kargakis this is a breaking change. I am trying to understand why we need to do that.
I'm not sure if we really need to add the `taskManagerImpl` to `GetTasks` as well? It's not really necessary for this PR but it's also a big deal for it to be a single function.
This change doesn't make any difference because `new_size` already has the old_size?
I'd prefer to remove this and add a new method in `ProgramPathContainer`.
I'd prefer to not use this method in the API for the API for the client, since it's not a "hasLongrunningReturnValue()" method. It would be a better place to put it in a separate PR, but this is not the case for the API for it.
Please use the base64string from Spring Boot
I don't think there's any need to keep a plain text here, since `updated_at` is only being used in the code.
this is not right - if digits is 1, we are not using the actual values in your branch.
I don't think it makes sense to put `item` here. We don't want to pass `item` to the `this` so that the `item` attribute is always set to `nil`.
why do you need this? I don't see it in the PR description
Why did you have to pass the `Shibboleth` as the `Config` param?
I would prefer to not use "max_pending" here, but I think the "pending" is not the correct thing.
We should keep this and make the change to `go fmt`
Should we use the attachStdin bool parameter instead of just passing the parameter?
Why not `v1alpha1:alpha1`?
Wouldn't it be better to just use the ancestorComponent here instead?
This should be `_null != 0`
I'd like to see this as well. It will be easier to read if you just put the gquicVersion0 in the wiki or not.
Is there any specific reason this needs to be added to `__str__`?
This should be `&& first_run?`
I think we can move this check up into the `if a.Tag is None` block.
This is no longer required, right?
this seems to be the same as we did with `year}</version` and it's not being used anywhere else in the docs.
I think this should be "type, "gone") != 0 means we don't have to do something about it, and we need to fix the test to ensure that the flag is not specified, and the test should not fail.
This is not necessary, but the print_page() method returns a list of requests and never used it. You can remove this method, and just call print_page() from the list of requests in both cases.
Can you please add a line between the two-line imports?
Why are you removing this?
This can be moved to `self.marks[parts[0]] = 1`.
You don't need to keep these. You can just use `5.1, 2.5` and the `16.1` to get the DevStatus.
Use `.im` instead of `.im` to skip errors in the code.
should be `transient`
I don't think you meant to have a function that can be called from an external module, so it is not a big deal for this.
Is this change required to be changed to `js/fileupload.js`?
Is this correct? Why is this not a `*os.File`? I would prefer to be explicit.
Should `readPreference` and `command` be added to the `ReadPreference`?
Why `*` instead of `*`?
Why do we need to call `T()`?
Line is too long. [98/80]
I'm not really sure that this is correct. The result is simulated to miss its deadline in a different way.
Is this the right way to do this?
This is going to fail on the client. The problem is that we can't get the config setting from any specific code for the `KEY_CLIENT_CERT`.
This works for now but maybe we can get rid of the option `--verbose` and use it here?
This is the same as `stopEventWalk()` above, and is the one for the `stopEventWalk()` call.
Is this a typo? What about other places?
I don't think we should change this, but I would prefer to keep the original behavior for now.
You should be able to use the `totalscanf` constant here.
You can use the same separator here as the corresponding corresponding one in `main.py`.
I think we can add a `IEnumerable<T>` tag.
Is it necessary to do this in a file that doesn't need it? It is just used by the test file and will be removed in future.
This is a change in behaviour that we're not relying on the loop to get the code to do. I'm not sure if this is a problem or if the loop is still being used.
I'm not really happy about having this in a helper.
I think this should be `@NonNull FeedFile`
I'm not sure it's necessary to add content to the constructor and set the constructor as an `int` in `setUp`, which seems to be used for all the `parent` methods.
Why the check?
I'm not sure how much this would ever happen, but it's not really a fan of how we're using `ServiceName`.
What happens if the user is not running yet?
Isn't the indentation here a little bit redundant? Can't the following 2 lines be changed to just `return mock(0)` and then just `return mock(0)                                                                                    \`?
nit (I think) for ResNet (bool)
this can't be `if (service)`
Do we need to be careful here as well?
We have to check if the common name is correct here, or if it's a different name?
Should this be a `@pytest.fixture(autouse=True)`?
nit: `pickle-protocol` is redundant, since it will already be used by the cloud package
Should we make this a `*testing.T`?
nit: not used
I think this is the only change that affects rootless.
Is there a reason for the "aggregates" flag?
nit: can you use core_get_deep_copy_stream from above?
Why is the ` registrationToken` optional?
Isn't the `form_SLASH` variable name more readable?
Why not just call the struct `numRekeyWorkers = 8` instead of using the variable here?
This test is not related to your PR, but it is a little hard to follow with the fix in my PR. I'm not aware of it.
I'm not sure if this is the right place for this. The `header` class is a bit odd. Maybe `header-container cancelled` or something?
@cescoffier is this intentional?
`typeof` is missing from the else-clause, so it would not work here as well.
I don't think we should do this, since we are not using prune.Mode anywhere else, it's a bit of an edge case.
Is this a change in behavior that the `irq_buf` is used for all the tests?
@lafriks, I'm not sure if there was any issue with `count == null`?
I think it would be better for a test to ensure this is not being done.
I think it's a good idea to have some sort of bytes that will be the same in `v:%v`
Why is this needed? The function is a private function, it's used to create a new instance with the new JWT type.
Remove empty line?
I think this is a bit confusing to call a new method in a different PR. It would be good to have a more descriptive name for the public API, e.g. `rtol.Number`
@daniel-beck : do you know why the change to "onView" is required in the "clickPreference" method and not the actual name?
can you explain why this is the case?
I think the `await` should be removed here since the `fileServer.Pages` is already there
This is not a valid input. Do you think we should add this to all of the other languages?
I'm not sure what the best way we can do this would be, but I don't think this should go to the `RequestRequest` package, as it's only used for a specific `RequestRequest` class.
This was just a mistake before, and I removed the try-with-resources here.
This doesn't make sense in the past... but I guess it should be possible to make it explicit here.
please make sure that it is not compatible with the `score_thr` above.
@aghassemi @joewell any ideas for removing this ?
I think we could use `\s+/g` and `\J+/g` here too.
Why not just use `GetAnyObjectType` directly?
I think it would be a good idea to use `routines` instead of `RTL` here. Also, you can use `routines` instead of `!this.flyoutWidth_`.
Isn't the `GET` prefix still needed after the last `=`?
We should update the docs as well.
Is it expected or should this be in `models/models.json`?
@dvoytenko I think this is the right place to put it here. If the `coordinatorLayout` is not present and the `esome` header is used, it can be removed.
nit: remove the extra blank line?
Should we also update the URL in the new `ext.jit.perform` file?
What was the reason for this change?
Can we remove this condition? I think we are already setting `overlayText` in this file.
Please rename `IsHidden` to `IsHiddenIfableable`.
I think it's better to keep these up in the list of packages, rather than in the `/dashboard/utils/` namespace. We can also make it clear this is used to not create a new enum value
this was a wrong place
Should this be named "storage-cstor-X-X-Y"?
This is the same logic as above, I think `locked_features` and `locked_features_list` could be moved up to the top of the file.
I believe this should be `qutebrowser-prefix`
This is the only change that works, but the code paths in `Isort` are only available in the `NotFound` path, so the `directory` path should always be `null`.
Can't we just use QVariant::fromValue here?
Use 2 (not 4) spaces for indentation.
If you're not using the balance, this will need to be executed. Otherwise, it will not work for any of these balances, as the last one will never be executed.
This should be `AccountSignerAddress`
I am not sure if it is worth it to make this a constant.
Should we just make this `container`?
I think the test will fail with a valid URL, if not, this will break the tests.
This is not a good thing. It seems that `variableBase` is always a variable name.
This should be a separate PR
This is only used when a feature is not found (e.g. `DefaultachedBlockHeaderValidationRule`) and `DefaultachedBlockHeaderValidationRule`) is called, so it might be better to have it be renamed to something like `DefaultachedBlockHeaderValidationRule` or similar, and have a more descriptive message about what the feature is about.
I think we can do it in `setUp()` instead of creating a new one in `BaseTree#run()`
Here's another bug. I think it would be nice to move the `name: value in` and `name: value in` instead of `name:` to avoid any confusion.
I don't quite understand why this is necessary. The `certificate` is already defined in `Component.plot_pe_509Certificate` (which it does).
I think the package name `go` should go into the package.
This include header header should be removed.
The change here is to avoid changing the default value of the value from `cursor` to `final`, which is not what we want. The change here is a bit confusing, as it's not a blocker for this PR.
Please move the condition to the top of the file.
Shouldn't we have a `getDefault` function that returns the result of the caller?
Please remove this, and add a TODO to remove this and add a TODO to move it later
Is this just a small optimization that `rTrace` has been already added in this function?
this should use `user.utcnow()` for the expected behaviour
I'm not sure why we have this be here. The key should only be set when `Headers` is `null`, but if `Headers` is null then we should throw a `Key`, or maybe we should not set that.
Isn't this the same as the one that is used in the `Queue`? I would have expected the `Queue<T, ** **Queue** T)` to be `T`, but it's not a big deal.
This is not needed.
Is there a reason to use `script.type` and not `script.src` here? If not, please use `appendChild` instead.
I think this should be `if imageAlpha != nil && len(imageAlpha.RolloutTime) > 0 {`
we need a `String()` on the `NewUUID()` method, so we don't need to pass it in here.
I think it's better to do something like this: `if (GraphSummary.Disposing) || !GraphSummary.Disposing)` I think we don't need the check on `Disposing` because the `IEnumerable<Disposing>()` will return `false`, but if it's not the case, then it should be `!GraphSummary.Disposing`.
This is a bit odd: the `Unknown` prefix was used in the first place. I think it's not really necessary to have it in the first place.
We could also add `platform.0` to this function, so that we can get the default value.
Is `run_in_parallel` ever true?
What does this need to do in this PR?
Why not use CopyToAsync for this?
Why are these needed? It is already added in the `[0]` block.
This should be in a separate PR.
Is this method used?
This import was unused, can be removed.
@deads2k @dvoytenko is this the right change?
This was a duplicate of the existing logic and it was not related to the PR. I think we can remove this and just remove the `@executable` part from `#merge` to the existing `attr_accessor`
I don't think you need to update the doc here.
`editing` -> `done`
This will not work on older browsers (e.g. the new `i`, `zapu.w_pathc`)
Why was this line removed?
I think the fix to `Map<Stream>`.
can you add a TODO to remove the `NONEXISTENT_ENABLED` and `ALL_EXIST` arguments from the file?
I'm a little concerned about this. If you don't want to be able to get the package from the package, you may have to add a `res` param to the end of the function. And you can get the package from the package.
I guess you missed a "go" here
Why do we need a nullptr? Isn't it redundant with `@InputFiles`
Is this still used?
> Also, why do we need to use the `Payloads` and `PayloadTestConsole`?
@bartonjs, can you add a little more information to the API about what this does?
Is `base_factory` guaranteed to return a `String` object, and the `String` object is no longer being used here?
We should add an `// +build` after this change, as I see we are already doing that elsewhere in the PR description.
We don't want to use `cmdhistory` in this file, as it is not used in Saleor's `cmdhistory.py`
Why is this public?
remove empty line
This is a little weird. I would expect a warning to be returned here instead of just returning nil and just return nil
This line is the same as `h2o_sysfn` above.
can we have the `auto` function for this?
`DataFrame` should also be `DataFrame[0]`
I don't think the `.moners` needed here, since the user already has it on the `config` model.
This is needed for the `noencTarget` case.
We could add a check here that the `proposal.client_data_legacy` is not a `Object` and we would end up with `ncr`. But this could be something like `get_proposal(const uop_name, cart.proposal.client_data_legacy)` which I don't see what we need
`TaskB` is a `Dataflow` so I think it's fine to leave this in, but I think it should be fine, since it's not a "Dataflow" method.
What if we just make a constant for this?
Is there an existing method that is called from the `clearCurrentlyPlayingTemporaryPlaybackSpeed` that does nothing?
Is it possible to use this in an app? I guess it's a different thing than it's been there, and I'm pretty sure it's just a different thing.
I think this is not the right name.
Is it not used anymore?
Why not removing this TODO?
Use the new Ruby 1.9 hash syntax.
I think we don't need `--log-DER-packages` anymore
I'd prefer to see this in the `if (typeof target === 'string')` as it is the same for the caller.
@jridgewell I wonder whether this is the only place where we want to have an explicit flag, e.g. `9c2fb14affb3ff6d1617`
this should be in separate PR
Isn't it better to call `UpdateAllInstanceNoExternalIP` here?
The last column can be removed as well.
I think this is still wrong, as it will not work with the `app/lib` imports.
This was the only place that was used.
This line should be indented one level.
How do we know it's a `string`? Wouldn't it be better to do `DateInput.date` or `DateDate.dateFormat`? And also, we should probably have a `string` for these methods
This is the main change that fixes that.
this is for `ignore_index`, right?
I'm not sure if the endpoint name was really useful.
I'd prefer if this was used as an option in the future.
is this going to cause some weird weirdness?
@deque/dot is a bit confusing to read. Can we just delete the `AbstractTestCase` path from the `ux` path, and have the `Class()` path be renamed as well?
This should probably just be `Console.ReadKey()` since it is not a valid value
Is this the only change needed?
If we're going to do this elsewhere, would it be more appropriate to check for a typedef like `from_value_value()`?
is this debug debug debug debug or is it a debugging debugging artifact? if not, please move this to the next if statement
Why not use the simple simple `declare(strict_types=1)` ?
this is a bit hard to read. I think it should probably be `C0301_id` or `message-id`
why not just spells[spell_id].reflectable]?
Should we also add an `default: false` here?
This is a good change.
Why are we passing these three imports?
I think it would be more consistent to use the same `nupic-logging.conf` in the `_init` method (and other similar places).
I would use a more meaningful name. It's not clear what this is doing.
nit: I would have put this in the same function as `net.ipv4.conf.eth0.rp_filter=2` since that's what it does in the other places.
nit: unused import
I think we should rename the function to `switch` to simplify the code.
Since you're using `lowercaseFields` instead of `String.Encode`.
Should we use context.getTaskAttempt(). Also I would suggest using `@since TODO.getName()` instead of `@since TODO.getAttempt().getName()`.
Can you please add a TODO to the `BOOST_ASSERT`?
I think we should not have the `DynamoViewModel` implementation here because `IEnumerable<success>::PersonComspace>::` and `ICollection<success>` are not used in the `DynamoViewModel` interface. We should also be able to use it here.
This is not true anymore, we are changing the default implementation of `DbProvider` to `context`, right? It should be `context. properties` instead of `context. properties`.
I'd like for the test to see this as a separate commit.
This is a bit odd, as it's the only place it's used in the `_files` function. Is there a need to do this?
I would use the `typeof opt_port !== 'function'` constant here.
Why is `KeyValuePair` needed here?
We should also check if we're doing this in the docker image.
This is a good idea to use a constant here. We don't want to have it in the UI. The user can use this variable name.
@michalpristor This is the only place where I can see that we're removing a pointer from any of the 10042. Is there a reason we can't remove all the TODOs?
is this supposed to be here? @mmaxim can you confirm that this is the right value for the changes in this PR
This can be removed.
Is this necessary, or just a copy?
We don't need this, it's in the test
We can't just do that here. We should do a different approach, like `do_*_messageq` and `do_*_messageq_destroy`.
The last last two lines can be removed too.
@mjkkirschner is this right?
I don't like `@var string[]|null */` but I think it would be better to have it return an array.
This is an example of the only change I'm thinking about. The `-tags` is only used for testing purposes. The `.Join` method is called for every `.BuildTags` that is used for every single test, so it would be easier if you prefer it it way. The `.Join` method is only used for `./` and we should have it here as well.
Do you think that it should be a warning and not a warning?
This is a duplicate of the one that's done above.
Is there any reason to keep this?
Is this still needed? I'm surprised it didn't catch this.
Why this change?
I don't think this is right. It might not be an issue for the user to write to the client, but it might still be better if we want to stop the server.
Can we keep the original import? It's the one in the core.
I don't think this will work. I think the `.lower()` method above needs to be removed (it's the same for the `isinstance` case).
I'm not sure if this is the right place to put this.
why do you need to import this?
This looks like a typo.
I think you can get rid of this if-statement.
I think this is not the right place to change this.
do we need the field for PodReference?
Do we need the `[]string` type? Why not just `DeviceName`?
NIT: can we call this `RuntimeTLP TopLevelProperty`?
This line does nothing now now.
I think we should keep these pylint pylint, otherwise the code will be ignored.
If I'm not mistaken, it will be a little hard to follow. I'm also not sure if it makes sense to use a `org.apache.commons.lang3.StringUtils` to determine if this is true or false, which is the case indeed.
can we have a constant in the if statement?
I think it is a better way to use a `KubernetesBaseurl        ` variable in the future to keep the `kubernetes` prefix.
I would use `var networks` and `var PrivateKey        ` to be consistent with other `create`.
The PR description doesn't match the description of the PR description (if you don't want to change this), you should use `./gradlew` or `./gradlew` to match the order of arguments.
Why the difference is_array() call twice?
I'd like to avoid using the `servers` as it is used only in `cluster.go` and `cluster.go` files.
I think it is better to just remove the `RTPSDomain` and `RTPSParticipantAttributes` altogether.
I think it would make sense to just make this a `var scan = 0; scan; ++scan)` and make the loop loop consistent.
I don't think we can ever remove this. The new code is in the code that will work as expected if we're doing the same thing.
This should be done in the constructor
Is this an unrelated change? I don't think we need to do this.
This should probably be changed to `array_pop` and not the $nameArr.
I'm a little confused, these changes are unrelated to the PR.
is the log level not correct?
I don't think this is the right place to do it, it might be better to use `seelog.Infof` instead of `Info.f`
This should be a different class name, since it is used for other languages and it is not really important as this argument is a class method, and it's used only once in the same module as the other one in the future.
I'm wondering if this will be more correct as `mixed: false`?
Nit: could you move this up with the other goals?
I would suggest to add a check here that it's an array of strings and it is an array of strings, like `(trim_front_preference)`
I think you can remove this.
This import should be removed as it's used in a different commit
I don't see any new code using the new one.
Should we use `NewGauge_golang` here too?
Is this a bug fix? It seems that the new hash will be removed. If so, we should remove the hash.
It seems that `Pod Failure` is always true since `Killing` is only called from `Time.instance`.
I think this is a bit of a good idea. If the type of `FetchTipSets`, the caller could pass `done` to `done` and the `done` interface, and the `FetchTipSets` is a very common name.
I don't think the `md#standard-definitions` file is needed.
Why do we need this?
This is the same as the `host.cygwin_installed?` check above.
I don't see any changes in this pull request. I'm wondering if it makes sense to keep this simple, just like the rest of the PR.
Do we have any consequences around the rest of the config? Can we use the same name?
I don't think we need to add this. The only reason we have it is to use it is for the `tools` type of `name` (and `name`) in that it's not a type. The `name` should be just a type and not a string. So the `A` should be used as a dependency of the `name` type.
This should probably be `if err != nil && err != nil`.
Is this still necessary ?
This is the wrong term, I think.
This should be reverted
This should be moved to the controller instead of in the `else`.
Can we use a constant for the `id` value?
`The member set of values are `data` and not `size`. It's more clear that we have the `Default` suffix here.
Is this file still required?
I would have expected that we would need to change the `TestCase` to `TestCase.assertNotNull` here because the `TestCase` is not available in the `TestCase`.
Should this be `servicecomb.loadbalance.stats.timerIntervalInMilis`?
This doesn't seem to be a user option. I don't know if it works.
Why do we need this change? I don't know why we need this
This should be a bool.
This line can be removed
Is there a possibility of accessibility on the struct ?
I'm curious about this - why is this not just `app.config.Application`?
why not pass in the options here instead of using the actual host?
This is a good change to make sure the first 2nd match the previous one.
This is the main change that is needed. The `+` should be removed.
"Error reloading permissions file"
I think we don't need an `elseif` check here as we don't actually have `Email`
I would add this in the log message to make it easier to track it and add a warning about it.
Please update the type annotation to make it impossible to understand the reason for changing this
Is this change required?
@rakanalofwolski This is the only change that is the real change. The `javax.WebSessionOAuth2AuthorizationRequestRepository` is used in the `javax.WebSessionOAuth2AuthorizationRequestRepository` package. This change is only relevant for the `javax.WebSessionOAuth2` package.
This change is unnecessary as we already have a parameter for `return (false)` below, which means it will be `false`.
I'd prefer to keep the cache as it is. This way it is not needed for a analysis in this case. The other option is to just change the cache in the `sortFiles` method.
This is the fix, but I'd prefer a more descriptive name.
What do you think about using `json.args` instead of `json.length` as an option for this value?
I think this is a little hard to read - maybe we could just make the method a bit shorter in the `validation_flag`? This way the `validation` variable is not set, but it will be easier to understand.
this is not needed anymore
I would prefer to have the `@SuppressWarnings` annotation as it's the only way to handle the expiration.
Are these two changes necessary?
Would it make sense to set the previousId to null? I'd be happy if you can use it in the future.
Why was this changed?
Is this going to work in practice?
Do we need to check for connected is an unknown address?
This is a change in behavior. I am assuming this is correct.
This is not related to this pr, but I wonder if the `slug` can be removed. It should be in `user.admin?` to avoid having to worry about the performance impact of the time we call `user.admin?`.
this is wrong. if there is a test that checks against true, then the test will be failing.
I don't think this is necessary
I don't think this should be `if (options)`
I'd like to see that we're using `features` for the file, not the other way around.
The previous logic was not clear about this change but the logic was not able to handle a `nullptr` check. I'm not sure if we should be doing that before.
Why is the `//` removed here?
This is the default. The test is failing because of the test. It is a no-op and is not a big enough change, and the other test will fail.
I think this should be moved to the `VolumeAPIPath` class above too.
This is a breaking change and will be reverted, right?
This should be a part of the public API
I think this line is not needed
I assume this is a leftover?
Shouldn't it be `fatal.get("IAccessible2::attribute_current", ariaCurrent)` instead? That way the `ariaCurrent` is always `None` in the `init()` case.
The `+` is not used here.
Can we just pass the context to the span?
Is `exflow.getFlowDefinitionId()` more than `if(options.getFlowDefinitionId() > 0) {` really correct?
Why is this needed? `DateTimeInterface` already has a default value
I'm not sure we need to change this.
Did you intend to use `alpha` here too?
nit: this is not a bug fix. I would expect `log.info` to return an empty string.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
why do you need this?
Should we use the `apimachinery` package for both the `v1` and the `k8s` package?
Why the extra line?
This is a private function that does not have anything to do with the new parameter. You could also check that the `element` has any other attribute.
Is there any reason for this to be in the rootless file?
This is not really needed.
We don't want to decrypt the config, we already know it's not the same.
This is not a good idea as it can be a property of the variables and we should use `_vectorSpan` instead.
Wondering if we can just do `isinstance` in the name?
I think we don't need this one, since it's only used for one place.
This is an example where the `delete` flag is being used.
I think we need a new commit for this
I think we should remove all of these files from the file as the source of the file. In theory the file should be only used in the other file.
should we change the `single_user` method to something like `single_click` or something like that? It looks like we're just looking into the `single_click` method in the `click_link` initializer, which is what we need in the future.
Does this mean that the caller of this function can return a boolean?
I would suggest using the `address.Int` variable here, so that it is clearer that it is a new type.
Why is that necessary?
nit: `db` and `object` seem to be a bit ambiguous. Maybe it would be more appropriate to have this also be a `String`?
This should be a part of the public API
I'd prefer the name here as `struct st_h2o_http3client_req_t *req` rather than `struct st_h2o_http3client_Group`. It's not a big deal, but if you could rename it to `struct st_h2o_http3client_Group`, then it would be better to keep this as it was. But I can also rename the function to `struct st_h2o_http3client_req_t *io.struct st_h2o_http3client_Group`. It is also more clear to
This seems a little odd - why not use a constant?
Why did this change?
What do you mean?
just confirm that this will be a copy of the list, right?
Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
This file is now empty.
I think we need a new `TestAccAWSDriverName` here.
This doesn't have the same meaning as the processSuccessfulRun
@cra0zy I think we should change this to use the `List<Iterator<T>.class`
why this change? seems more like an API break
Please add a doc for it
Hey @bryevdv, why not change it to 1-9][0-9]+|0|[1-9]?
I think we should be removing `with` here.
We could use a more descriptive name for the `B` and `B` for this.
The previous version was `<= 0`
this seems wrong to me. Can you explain?
Do we still need this? I think the `chomp` can be removed if we just need this.
Should we keep the `@author` annotation?
Please use relative imports, it is the conventional ones
`auto it` is a little confusing. I think this one can be simplified
I think it's better to use a null pointer.
I think you can do `break`.
I think this can be removed as well.
should we check the Object is not the same as the one we have in there?
why adding the two flags to these flags?
I don't think the use of this is correct, as it is not used by the code that has the correct value for `HTTP/1.1`, so the `n` is not necessary in the past.
What about `Just to confirm`? It's used for many cases in our code base as we are in here
This import seems to need not belong here
This will cause `LINUX` to be set to zero, and the error handling is not correct
I'm not sure this one is the right place for this one.
I'm not sure this is a valid use-case for this. It looks like this function should have only one element.
I think you should change the signature of the `Wno-deprecated-offsetof` now.
Do we really want to expose a `IsMSIEnvironment` or `IsMSIEnvironment`?
Is this change necessary? I'm not sure if this is a bug.
Metrics/CyclomaticComplexity: Cyclomatic complexity for remove_target is too high. [7/6]<br>Metrics/PerceivedComplexity: Perceived complexity for remove_target is too high. [8/7]
The `UNASSIGNED-cache-file-error` suffix is not needed for this test (it's not related)
should this be in 2.7+?
This is just a small optimization, but it doesn't seem to be used anywhere
Is there any way we could add an `go.uber.org` to `v1`?
This will break the execution log. I would say that it is the only issue we should be doing that, and if it is the case, we should not log. We will log it as soon as we are running the tests, so that we don't get a warning
I don't think we actually need `IsProfilerAttached` here, right? I would just rename it to `IsProfilerAttached`, `S` etc.
I think you need a way to do this, but it's a little strange to do something like a "everything").apply()
this should be `static int int jx_input = 0;` (or something similar) as `static int jx_input = new_input` to avoid confusion.
Is this change necessary?
I think this might be too much a bit better, `shlex.Date`?
This file has been removed.
Maybe a `Object_number` could be an instance of a subclass of `Object_number`?
I'm not sure why we are removing the `@Disabled` annotation here.
Nit: `PolicyNamespace` -> `PolicyNamespace`
I am not a big fan of the `workqueue`, and it's more of a name.
What if we added a `Initialized` property to the `XXXXXX` class?
This is not the right thing to do - it's just the `FirstOrDefault` method. It is used to set a value that is not a `String` by default.
This seems like it should be an error in the context of `createTag`
notary_password should be in separate line
I think this is not a bug. The `/wordpress` should still be there.
I think it's a good idea to add this to the `create_extraction_config` package. We could just change the `extraction_config` and use it to generate the same file. I would also suggest to add the `create_local` and `extractors`.
I think you want to call `DisableKubeProxy` directly, and `DisableKubeProxy` for both.
Please don't change the name of this. This is a very old API and can change in the future.
Should this be moved to the end of the function?
If this is just for testing, can we change this test to be a runtime check?
We have a couple of places in `gen2` already.
Line is too long. [87/80]
I think we can remove the `_codeToHTTPStatusCode` now that we have `yarpcerrors.Code` now, and remove this line.
I'd call it `setBaseAndExtent(sel, sel.extentNode, sel.baseOffset)` instead, and add a new call to that.
I don't see a benefit to using `Orig` as a parameter.
This file doesn't need to be included. The other `fmt` files are used as `io/ioutil` package and should be removed.
I would put these columns in a single migration file
I think we can just call `Retry.MaxFunc()` here, and call it inside it.
This is wrong. The variable should be named `Spriteize` and `Sprite` (or whatever).
I don't know if this is the right way to fix this, but it is probably better to just make it `if host != 'localhost'`.
Why not `setServletPath` and use it here?
There's no need for this variable since `m_liveliness.lease_duration` is already defined above.
We could use a more generalized variable name.
I don't think this is the correct place to fix. I'd suggest to remove it.
Why does it need to be `${env.APP_ROOT}/static/logo-sm.png}`?
This is not needed anymore
Why do we need to support these commands in these places? It seems to me we don't need them in a way that is more than maximum allowed.
Is there a reason this was added?
can we add `||` to the log message as well?
I'm not sure what `site` is about. `googlesitekit/datastore/site` is used for.
The actual time the manager is a newer version, so the compiler can't change that, so it is only for a minimumSecondsSinceParent. The actual time the minimumSecondsSinceParent is a different one.
@davidjumani should you add extra whitespace here?
We don't really want to expose these to the top of the file, as it's a different PR. We should add them to the top of the file, or just the error message. I believe that the function can only be called once, even when it's not really the case.
Is this change necessary?
Should we rename these to mdDecryptionKeyGetter?
I think it would be good to have an `Task` interface here, and then we could have a `@AutoValue` method that does the same.
We should not need this one. It should be deleted.
I would call this everywhere `fakeDestroySender` can be used
Is this just an example of why this was necessary?
This is not a huge thing, because we can't do this. I don't really see a reason to use the `metLink` variable here.
Unrelated change, but why is this needed?
This is the only one that uses this property.
I'm not sure this is a good idea. If I'm not mistaken, we should just use `RespondServiceHeader` instead.
I am not convinced we'll have a better way of doing this. It's probably not worth it to have a separate function, but this code does not seem to have the same code as the one we added. I don't know if we should be able to just do something like the `if commandSet == targetGlobalCommandPath {` instead.
This is an actual test that checks for regular regular tests.
This should probably use a `try/except` to prevent the error from running on macOS.
Is there a reason we need `from_path` here? I'm assuming we are going with `path` in the code base.
Please move this to its own component.
Why is this change needed?
Is it still needed here?
I don't think this needs to be here
Should this return `select`?
I guess the line should be after `test_scroll_bdd`?
I think this should be `size_t`
The `Script` is the right type. The `Script` function is a bit redundant. The `Script` module is not a "not" package. The `Script` module is not a valid package.
You could use `zip_file_content`, too, right?
Should be `1, src+":0, dst+":0`
So we now have the response to be set by the `using` block?
Why this change?
I think the link is unnecessary
I'd prefer if you'd prefer a separate method for the reporter id.
I'm not sure this is the right fix. If we want the `@Nullable`, we can remove the `@Nullable` and the `@Nullable` methods on the `build` method. If we do not want the check here, we should also add an `if`/`else` to this method. I think this is fine.
`opObj` is not the same as `RecordDefinitionPath.IsNullOrWhiteSpace`. Let's rename the method to `RecordDefinitionPath` for consistency.
Is it possible to have `snprintf` in both the ` ResourceInstance` and `get_or_derived()` calls for `get_or_derived()`. What do you think?
@Scottmitch why did you change this?
I think this needs to be moved down before `ObjectKey createMin`, as it's no longer a valid `Integer` check.
This seems like it's not used anywhere?
This should be `sh.cmd` not `CampaignCampaign` since you can't modify anything in the package.
This is a very minor thing. I'm not sure why it needs to go. I would just put it in the `lib/const` package.
This should probably be a part of the spec (a couple other tests)
I don't think we want to send the status to all of the files. I would just say that there is no "No name" or "really" as the result of `nil` here.
Isn't it the same as the `synchronized`? Or is there something else we can avoid?
Is it possible to use the `err` variable here?
This is not a function, it should be called `Rxn SmartUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
This function is used to return a copy of the error and not the user. You can just return a reference to the user that has the same issue.
Why have the `api_v2.go`?
I think it would be good to add these as individual individual individual fields, like `WFDIR.Format` or `WFDIR.FormatConfig.Format()`
Can we add a doc for this?
we could call the new test function in this test. It's a little unrelated to this change.
If this is only used for testing, then I would remove this line.
This should be `on_match(/ERROR/, result.raw_output` (or similar) instead of `result.raw_output` -- the `assert_match` value should be `true`, not `on` -- the `result` has the same result.
why change to `s`?
This is a change from "revisit" to "revisit" to "revisit this"
I think this should be another another commit (not sure if this should be a copy/paste or anything).
Is this a bug?
How about `maxTaskID` to make it work?
I think it's ok to just change the `nvidia` constant to have it in a separate pull request. We can change it later in the code that is used in the `nvidia` package, as we already have it in the `saleor/main.py` file.
I think this line should be removed, since it's the same condition as line 138, right?
(style) externs should be avoided in .c files
This was just a small fix that is not related to the fix, and it was only here before
Is it possible to do this without checking `offset`?
Is there any reason this needs to be false?
This was only added to ensure that we can't remove the dependency on `package` and `.package.package` in the file
this import is redundant
This can be simplified to: ``` if (X32_t) new; } // #Closed
The `!clrstack -i is unsupported on this target.\nn` is a bit ambiguous. How can the user handle the case when the user explicitly explicitly run a different type?
Please use the `raise` helper here.
Should this be `static` since it's not `true`?
why change to `toStream()` ?
This method does not seem to be used
We can remove the `Key` field and add the `Exists(name string)` to the set above.
Can you add a `_` prefix here to make sure that it's not a package, and that's the only way this is used for the class.
I think these two functions could be moved to a separate function.
The file name is misleading, you can use `err.ModTime`. I think you want to check here too.
can we remove this test?
Why do you need to export this?
I think it might be more readable if we just use `user.full_name` instead of the `.user`
Is it possible to have an empty list here? It doesn't seem like it should be the default? I don't see any potential use of a mocked list, though I think the `list.add(newStem(stem, formID, stemException)` wouldn't do it anyway.
Please, use a more specific name.
I'm curious why this line has changed, it's not needed.
shouldn't this be a `\n` in the `else` branch ?
I think it might be clearer if the listener was not generated.
why is this needed?
This needs to be done with the `IF_ARM()` call in the `before_action()` function, which is not the case for `yield_ARM()` calls, but I'd like to be sure.
I'm a bit sad that this is the default behavior. The `groupKey` and `maxResults` are the same for `results_by_member` and `maxResults` and I'm not sure if it is the best option to do the `request` or `None` as the default. I'm not sure if that would make sense. But if the `groupKey` is the best option, then the default should be the default.
I think this needs to be done in #ifdef OPENSSL_CONF0
I'd use `pytest.importorskip` here and in the other tests, since this is only used in tests.
Style/RedundantFreeze: Do not use semicolons to terminate expressions.<br>Style/RedundantFreeze: Do not use semicolons to terminate expressions.
Should we add a `use_instance` flag here? (or even better, if it's a `use_instance` flag, it should be just an option)
why is that change?
Can you revert these whitespace changes and left unrelated changes in a separate commit?
This is a good candidate for `log.Debug("%s", err,,.Stack())`.
I'm not sure it's necessary for this to be imported, as it does not work for the types in the package - but it might be good to have it a separate option.
This might break existing users.
This is a little strange... I think the `.py` check is redundant.
This is a bit weird that the debug logs are removed. Is there a reason for that?
Should this be called `minify`?
Doesn't this need to be `~TracerProvider`?
This was the only change in this PR.
Should we also have a `aws_test.go` file that we can use here?
I think this should be `using System.Threading;`.
I think this should be removed.
I'd suggest to use `?defaults(null)` here.
Can we remove this `""` check, and add a `TODO` check for the new `""` case?
This should also be `*string`.
Is the `to` necessary? If yes, I'd be in favor of `equals(to)` in favor of `instanceof`.
I think these changes should be reverted.
Do we have a good reason to keep this default, or is it only available to v2?
@tgamblin Do you have any concern here about the new test? I'm not a fan of making it more explicit and I'm not sure what we're supposed to do here is. The test is still failing on PyLinter, so I would just call it `mydir`, and then just call the test in PyLinter.
I think this should be moved to `registerregister`.
I don't think this is necessary.
Why do we need a sync here?
Shouldn't it be an `_name`?
this is an example of what we want
Why not using `!Constants.ECONNRESET.HasValue` here?
I'm not really happy about adding these to `src/service/service/config.php` and adding them to the new `src/service/service/config.php` file, because they're not really needed.
This was a bug, but the tests were failing because of this. I'm wondering if we should be doing this.
I think the `else if` should be removed
This is a no-op, right?
@Jjagg - I think we should change the year in the copyright.
Can you please add a note to check this change
What happens when we are using a custom node node?
This line can be removed.
this change will break existing functionality. It's a very minor thing to fix in the PR.
Can we rename `InitCodeTransformer` to `initCodeTransformer`? It's a bit weird to have a test-only constructor that gets passed in.
I would say that we don't need this, as we're not doing anything about that.
please, also change the order of these parameters
I think we should just use `el.querySelector('summary'))` instead of `el.querySelector` because it's the default.
This should be marked as `[ConditionalFact(OpenIN, 'no-x')], Mvx.Resolve<IMvxLogProvider>().GetLogFor(MvxAndroid");` and the `[ConditionalFact(OpenIN, 'x')]`
Can we make this configurable?
This is the wrong change. It should be `const constexpr double FAR_LOOKAHEAD_DISTANCE = 20.0;`
I wonder, why is the `tarball` in a local var and not a local var?
Can you add a test to test this to ensure that it is now run, instead of just passing the page in?
Why do you need to check this? The `dataManifests` will always be null, right?
I don't know how this change gives us the implications of this change. This would make it more obvious that the user is trying to write to the user, but I think it's just the scope of this PR.
should be in `antrea./api/`
I think it would be nicer to move this method inside `AggressiveInlining` and move the logic for `AggressiveInlining` to the `pkg/api/` package.
I think the better way is to do this, as in the first place the test should not be aware of.
Should this also be called OnClientProcessExit?
Nit: you can remove the `else`.
I think we should make this a global constant.
I don't think that it's good to have this method as a warning.
Line is too long. [89/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why are we using this? What if there's no other file, or just the file?
I would prefer if this was a separate commit, to be more clear.
This change is not related to this pr ... I think the fact that we're not doing a `origin_changed` here will be the one we want. The code is not correct.
This seems to be unused?
I think these changes are intentional, but they are not needed. The `deny` should never be dropped and we don't want it to be in the `const` namespace for the `JumpEqImm64` namespace
`ast_childcount(params)` is always 1 so we should be sure to have all the other types of resources in the same order.
I think we should use a more descriptive name for this, e.g. `configure_READ_PERM`
This is a change in behavior that will need to be fixed in the future.
What's the idea behind removing the `TODO` parameter?
You should check the `false` value here and in the `else` case above.
This should be `void run_stride_unroll(int, int, int);`
this doesn't look correct. You're just using `x` and `x.iterating_code`, right? You're just adding `x` to the list, right?
What's the difference here? Is there a test for "long"?
This is a good example of why I thought we had to move the interface to `api.go`
Can we use `collection.configName` instead? That would make it easier to read and use `collection.configName` in the future.
Is this still needed?
This change is unrelated to the PR?
Can you remove the const std::string & delete line above?
Can you explain this change?
This should be the other way around, and I think this should be an overload
Hmm, this is a bit confusing, as `inc_dir` is the directory being created. What is the `--I-pants-state` directory?
let's rename to `yolact_head` to be consistent with existing `yolact_head`.
I would prefer `crypter` here too.
This doesn't look like it is related to a bug but it is not obvious why it's needed.
What is the plan for not returning a new map here?
This should use the standard `system_exclusion_patterns`
style/LineLength: Line is too long. [123/120]
can we add a check that `JSON.HasPrefix` is nil? or should we just always call `JSON.HasPrefix` here?
I think it should be on a new line, `.to_a` instead
I think you could check if the feature is disabled by default
I would not do this. This will make it a `metadata` instead of a `API` object.
We can use `send_alert()` here and in other places too.
This should be moved inside `System::vector` (as in the other PR)
This is already defined in `capabilitySecretEnvSSM                     `.
does this need to be added to the other PR too?
You don't want to have to pass in `JUnitUtils.initOwner` here, so you could pass in `getScene` directly.
Can you explain what this does?
I think this is a good change, but it's not related to the fix, it makes the test fail.
Do we still need to delete the validation?
I would use the new global as its optional.
I think the capacity should be in the log message.
Please, update the doc and doc accordingly
can we add this back in for now, so it's a bit hard to see what it does and how it's going to go to it (e.g. a different folder)
this is not a key in the account? it's not used anymore.
I'm not sure this is a good idea. It is better to be the way it has changed.
We should not change this, this is a change in behavior and I can fix it later
This is not a part of the fix, but the fix is to fix that in a separate pull request
I'd prefer this to be `Invalid username`
Why do we have to change this? I think it's better to change it to `resType == model.ResourceTypeService || resType == constants.ResourceTypeEndpoints` to `resType == model.ResourceTypeService`.
Should we also check for `raise` here?
@wachterjohannes Shouldn't you check that the policy is not in the `static` class?
Please remove this.
This should probably be moved into the `err` list.
Do we need this check? We could use the same check for every function `GetAddressDetails` in `Address`
I think it might be better if we just pass the name of the function to `BalanceRegion` and pass it as a parameter to this function.
I'm not sure about this one. I'd rather you change the old logic to use the existing `blockblockTime(0)` method to be more explicit.
should we also check if the acc has been added for other jobs that do not have to be set in this function?
This file can be removed
Why not use `!spec.must_learn & 0xf`?
This is a bug in the test suite. Can you fix it?
Can the message be removed?
I'm not sure if this is the right description or what the correct answer is. I'm not sure that's a good idea.
Would this be an error if a user passes an existing function with a different name that does not exist?
@bharatviswa504 I think this was correct before. The `_stream.ResetAndAbort` was removed. Is it OK to remove it?
Nit: remove extra lines
Can you explain this please please?
If `self.__wrap_method_with_call_and_maybe_retry` is not defined any more, this should probably be `if callable(x)`
Do we need to keep the original `ReferralCode`? We don't seem to have enough information for us to keep track of whether a struct is required.
`HttpContextTypeName` should be marked marked as non-static
Why did you remove this? I think it was used to check for null and then no more important.
Shouldn't this be `get_message_definitions()`?
Does this mean we can't change the key in the API?
This is a little strange. `return false` means we don't need to use `== false` anymore.
I think this should be moved to `isHiddenWithCSS`
Are we sure this is correct? I don't know what the original point of this package is, just curious.
Since we're removing the `||` below, I think it makes more sense to change the `httpNotFound` to `|||| httpGone || httpBadReq ||DECONFIG` and use the `||` in the `scipy` method to avoid confusion.
I don't think it's possible that the cache is always the right place to put the `Sync` param, and it's a bit hard to understand what is happening here.
This is a bit of a pattern we want to use in the `.txt` file, as it's in the file file name. I would recommend to use `.txt` or something, that's not what we want.
I'm not sure if this is the best way to go. The new `EpochReward` is still the same for `200000000`.
Why not use a constant like `is_PANEL_DESCRIPTION`?
this file is unused
I think that we can remove `repo` from `repo` to `owner`.
This change seems unrelated?
I'm curious, is this change related to the issue?
I'd be happy to see this if there was an error.
I think you can just remove this. The only reason I've added is that you don't need `Server OSFamily` anymore.
This is a change in behavior, we want to avoid having to add to the state machine-wide ones.
I would use a constant here instead.
nit: can we call this `createElement` or something similar?
I don't think this method is used?
Why the change of this?
Why do we need to add `DeviceID` here?
I think we can just remove this loop now, and do the `java.lang.exe` in the loop below to avoid the debug output when there is a conditional.
Why did you remove this?
We should probably use `window.getComputedStyle` here.
Could you add this to the doc, so it's consistent with the other ones and the other changes?
nit: I don't think the `encoding` is required.
I think we can delete this line.
@jenellij config config config, you want to be sure that you don't need the `!BUILD` variable here?
I'm assuming this is a part of the `_last_status` but I think it's better to check the `_master.stop()` function and return the self._last_status directly.
Is this a typo or an `Optional<Integer>`?
I would use `error.force` here and instead remove `fonts/*.ttf` in `./pants lint/fixtures`.
I think this was the only change we had in #27801 so this was not necessary before
This change is not required.
This looks like a typo.
Please make sure we don't have any public methods on the root directory in the future :)
this is a change in behavior... we don't have to do this anymore, right?
What does this do when the method is called?
This is not necessary, because you can't use 0 here, right?
Can you explain why this was removed?
This is a change in behavior that I'm not sure what's going on: it is a bit of a brittle and not something that needs to be fixed.
This can be reverted since this file is not used anymore
this spec doesn't have any test coverage
Just curious, why `Item.AccountState` is not a list here?
Should this be a constant?
Why is the default here and not in seconds?
This should be URI.
Why not a single string, `ExcludeLabels`?
Should have used deltas.cuda
Why are we changing the value of the `http://`?
We can't do this. This is only a single function, and we want to keep the original promise at all. It's not clear what the best approach here is.
Should these be `json.TRANSTRANS`?
Should we also add these to SceSize, like in SectorSize? Also, I'm assuming it doesn't work, and it's not really important.
Please update this one as well.
Why the change to "on"?
The record could be a record. This is the only case where it was a record. It was only used once.
Can you add a space before the `,`?
Please add this to the docs for the new config and the new one in the future.
I'd prefer to have a test for this.
This is a little hard to follow. If we can add a `@property` constant, we should probably add a TODO here for the next time we run `self.run_on_main_process()`.
This will be the only real change in #2990.
The original code was supposed to be doing the `Router               `, but it's only used here.
Please use shorter names, `$row_setting_id` instead of `$row_id`
Is there a better way for the test to make sure the `AllowRenegotiation` is not set?
Well, this is the only place where we've used the other one, right?
@Scottmitch could you please add a TODO to remove this?
This is a `List<T>>` because the `newArrayList()` method has a `default` argument. We should be consistent about whether `T` can be a `List` or not.
How about `if 'ctu_phases' in args:`, then, to be consistent with the other places we call this one?
I would use a more descriptive name for this.
This is not correct. It would be nice if `state` was not `final` in the `else` case.
This can be removed.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
We should probably also remove this once we are rebase.
i think this can be removed. `.flatten` is used for some reason
@mattcaswell, I've removed this, and I don't understand why you did this. This is because the only place the default setting would be touched in `tls_key_path` - it is used in this file.
nit: "generated ``molecule`` folder" is similar to the ``molecule```` one for the same reason as above.
What if the user didn't specify `encoding=1`?
remove empty line
this was a mistake, the `doneChan` was being removed before the `close()` call.
Is there a reason this error is not ignored instead of return error?
I think you're missing a space between the concatenation and the closing brace here
I would move the logic to `setStyle` so that it's clear what is being returned.
Why does the `!blobExists` not return an empty array?
I would have done this by just doing it in a variable and then doing `token_tag` in the loop, it would be a nice idea to have it here, and not need to check that it has a `token_tag` attribute, and the code below will be more efficient.
Do we want to keep the `mdc-menu-surface.md` prefix? It's more clear what's going on here.
`String#includes` is not supported in IE.
I think the `list` can be removed now, since it is now only called once.
I don't think this is a good idea. What are the changes in this file? I don't think it can ever be used in any of the other PR, but I'm just not convinced it is worth it.
shouldnt the module be added to the CMakeLists.h?
I think we need to be more specific about these imports, I think we'll need to remove the `logf` package from the `log` package for this
This is a very minor change. I'd suggest adding a `if ((ptr != nullptr)` check instead of just `if ((bytes == 0)` here.
Do we need the `events.GetFileNameWithoutExtension` method here?
You should use `mset.Script().assert()` here
@cramforce do I need to check if this is a pointer?
If `IssuerAccount == "" && !acc.hasIssuer(juc.Issuer).ifPresent == "" && ...` we should check if `IssuerAccount != "" && !acc.hasIssuer(juc.Issuer)`
I think it is still possible to use the same `step` method here.
This is a leftover
`len(cnb[0]))` is not the correct value. It would be good to have a `int6464` function that is only supported in one place.
This is a breaking change, but I think we want `is{}` to be consistent with the rest of the code, and we should probably use `isIn{}` here as well.
I'm not sure why we need this? We do not need it for anything.
I'm not sure we should be changing this, as the proc is not a valid utility function.
I think you want to have an empty alias for this in case of a feature being added
@kroitor since this is a default value, this should probably be `not isinstance(obj, param_name)`.
Can we use `path.LogString` for this instead of adding the prefix?
This is not a part of your PR, and we should probably try try to make it so that it can be combined with the other changes in this file. We could also make a `io.prestosql.plugin.utils` module instead of using `io.prestosql.plugin.utils` to avoid this file.
`mutex` could be replaced with `std::lock_guard<std::mutex>`.
Why not use the `AddEdges` as `lib/ec2/woss_chain` here?
Should we also include the `rulefmt` command below, and `rulebid` for these three components?
This is an example of how the secret is set to null in the constructor.
Just to confirm. Is this a BC break?
Can we just remove this, since it's not being used anymore?
Do not use PropertiesUtils here.
Why not call `dispatcher.submit` here, and remove the `if` in `afterClickOn`?
I'm a little confused. Why do we change this?
Should we make this package private and call it just `InternalApi` ?
Aren't we supposed to remove `multi` from here?
This is the only place where we set it to `false` above, but we should consider a better name for this context.
Why do we need both `SparkStreamingWrite` and `StartWrite`?
Was this a change from a pull request?
Would it be possible to make the default `GET` optional?
Please revert this change
This is a change in behaviour for a while. Can you please change it? Thanks
I wonder if there was any issue with using `BASE64NOMETADATA`?
I think the `project` is redundant here.
Layout/SpaceAroundEqualsInParameterDefault: Surrounding space missing in default value assignment.
I would prefer if we used `metricPoint.Keys.Length` instead
This test is not related to your PR but I would prefer to test for a separate test
I'm not sure if this should be here?
We should use the `get_os_path` helper here as we're here
I'd rather have a test to test the exact same result. This test is not testing what we want and why we need it, and I'd have thought it'd be useful to see that the `keystr` and `is_special_key` don't exist.
Can you add a `currentName()` method to this constructor, so that `spec` doesn't need to be passed in?
Why not just use the `file_contents` variable and use it here? `file_contents` is already checked in the `*` and `*` methods, so you need to use it.
This is going to cause some issues. Why not just have `getResource` return true?
Why are we doing this?
@n3nash : this is a bit of a hack. I think the `!` here is redundant as it's in `const` block.
Should we make the permission also a full message of the error? I don't think so, it's possible to have the permission in the client and the client.
Shouldn't this be a `Debug.Assert(Activity.Current == null || Activity.Current == activity)`?
Is this change related to the current change?
I'm not sure this should have been added. I would prefer if we want to set `RetrieveCommand` in the config instead of in `state.Config`?
this should be a strict comparison
Should we do something like `throw new Exception($message should not be in hex; message);` instead of calling `TimeUnit.message}` for the same thing?
This is a pretty heavy function. You could probably just call out the `inputs_tensor_type` function, like you have for `.to_(dst_type)` in the docstring.
Why do we need this check anymore? It seems like it should be `[NotNullWhen(true)]`
is this going to be breaking the build?
nit: the `Model.IsNullOrEmpty(name)` method is unnecessary here.
Shouldn't we do the same thing here as well?
This needs to be added to the license header
I don't know if this is used anywhere else.
why do we need this? I think it's not the same as in master
Would it be worth having one function for this?
This should be `Dispatcher.on_approver_removal`.
This isn't the right thing. The reason for it is because the `n_pending_tasks` should be used instead.
This is the fix that is incorrect, but it should be removed from the GracefulShutdown() method as well.
Is this a BC break? I think we should use the output constant in the key. Also, I think we need to add more context when we actually have more context.
do we have tests for this?
Redundant `self` detected.
I think this can be removed as well as the test below.
Why do we need to add it when it's set to true?
Line is too long. [83/80]
Hmm, this was the only change that fixes this bug that I was expecting. I don't see any usages of `run=True` for this. I think it was better to have the test run on the next run. I can see some troubles with it though.
Is it needed to remove this test?
I think we can remove the style: auto, and add a style to the `Start` tag.
Please use the `@table` variable for the `boolean` case.
This could be a problem, but this is a bit confusing with `MCSResult`
Hmm, I don't see why it would be needed
this is not needed since we only want to have the check for the render method
@mraible is this change needed ?
I think this is better named `metavar`
I think we should check for the `Issuer` property.
I think it would be nice to have the full `_spark_col_apply` import for the second arg. The same is for `_spark_col_apply`.
This should be `mocks.test.mocks`
Why was this error changed?
Why do we need to add a new constructor to make sure the table is only present if they are present?
I think it would be better to move these `if` statements into the `else if` above, so we can get more specific error codes from `if (checkNotNull(queryOptions)) {`
This is a very minor optimization, but I'm not sure if it is a good idea to include it in the `auth.ServicePort` package.
I would prefer not to add these here, as they will have the same name as the "openqa.selenium.grid.distributor"
I don't really understand this, why not just have `blockquote` be the `*` here? It would be more consistent.
Is this related to the change?
I'm wondering if this should be a `favicon.ico` instead of an `favicon.ico`.
I'd like to see an explicit test for the `_std::exception &e)` case, but it's not a big deal if you prefer.
What about `Optional[List[str]]`?
I think this should be added to the docs for that.
I think we can just remove the `AB` argument here.
don't import long, use `import ._dask_stubs.compatibility.methodmethod`
Why not just append the `dialOptions` and append it to the `credentials.NewTLS`?
Why not just do this in `redics.Duration` ?
This can be `analyze_imperative_element`
Should we just check `parent.stringify` instead of hard coding it in tests?
Why the #ifdef here, but not for this test case?
should we check whether whether the value in the method is `nil`?
It's a little strange to do this check inside `ExExplicity.Offset()` since we already return a nil string, since it's not really a nil map.
this is not needed, we already have `files` in the list
This should be in `tests/tests/test_tests/tests.go` and it makes it obvious that the build doesn't need to be in the core.
Shouldn't we also add this import in the `GameRecord::is_lang3` package and just have a `GameRecord::is_lang3` method in the `GameRecord::is_lang3()` and then use it in the `GameRecord::is_lang3()` package? Or is it just for other instances?
I don't think you want this. You can just `sp.OnStart(span.data)` if you have the same behavior as the span, and you already have the `data` variable.
This is not related to the fix, but it would be good to add a new error message to the caller.
This should be moved to the `DebugEnabled` method and remove it.
This test is no longer testing what this is testing?
How is that different from the name?
The `BOOST_ASSERT` calls `reverse_heap.Size()`. The `reverse_segment_id` left which is the only thing that's done here.
Why not just do this in `clientState`?
Should we have a `GetNumBenchmarks` type for `ctx`?
is the default `true` for `infer_base_class_for_anonymous_controllers` needed here?
Why is Scapy_Exception used for all PcapTimeoutElapsed here? Isn't it enough to just use it directly? I think we should use that here.
I'm not sure if this is the best way to get this, it will be more efficient to remove it from the API.
This will be a lot of work. You have to set `ctx.WorkloadIdentityStatus()` to `ctx.InitWorkloadIdentityStatus(s.Status.InitializeConditions)` in both `ctx.FromWork` and `ctx.FromWorkloadIdentityStatus`
I am not sure about this - it might be nice for this to be a different approach.
I think this is a no-op if you have `__oalasasasas`.
Line is too long. [90/80]
It looks like these two import statements should be removed.
This is the main change, I think.
Can this just be a local variable instead of a simple function?
What happens if the service is not nil? I mean we are not going to assume that if any service is nil, we would not have to set it to nil if v.Event == "DEPLOYMENT_WAIT_APPROVAL"
Do you need to make this test specific? If not, can you make it a private method of StateProvider()
would be great to add a log statement here.
I think you want to be able to remove the `try/except` block. I don't think it's a problem, but the `try/except` block will be removed in a few different places
Redundant `return` detected.
I'd probably add a `_return_val_if_fail` and just do a `return (self->loadstate == OSTREE_SYSROOT_LOAD_STATE_LOADED)`
I think the tests for the new `getResponse` calls will be better
I don't understand what is this used for?
I think you can also remove this line, as you do below
I think we should have the same pattern for `getMode().getMode().getMode().getMode().getMode().getMode().getMode().getMode().getMode().getMode().getMode().getMode().getMode().equals();` and `getMode().getMode().getMode().getMode().equals()`.
This is a little weird. If the target name is a name, it's a pattern that's a name, and not something like "delete". I'm assuming it's a pattern we could use in this specific case? (And I'd be fine with it, though.)
This is the only change that affects the "orElse" usage, and is a bit more efficient. I'd prefer the "orElse" part in the code, like I did for the other usage, and I don't know if this is worth it, and the "orElse" is more confusing than "orElse".
I would use `is not None` here, and instead just use `values` here.
Why are these different? Isn't it the same as `pauseResume`?
We need to ensure we are not supporting a request here.
Please add an additional check here that `tmp` is `null` in `isTopLevelFragment`.
@nickytonline I think you missed to remove `in`
It should be a `use` statement
Please add `kubernetes-pkg/` to the end of the line, and also remove the `k8s.io/kubernetes/pkg/kubelet/cm` part.
This change is only needed when the `None` value is `None`, not `str`.
Why not use `it->second->path()` here?
Should we also add the `getSnapshotId` method in `table.currentSnapshot()` and `table.snapshot()` to align with this method?
This is a weird fix
This is unrelated but we should probably just fix this, it's not really related to the fix.
Is this the right way to get the service from the `clientdata` table?
Why did you choose to change this line?
Why are these `PropertiesNamesCamelCase` and `HttpVerbValidation` necessary? The same below.
I'm not familiar with this file, but can't we just get rid of `PmdRuleTst` and have the test get rid of `RuleTst`?
I'd like to see this in a single file, but I think we need to do it in a single PR
this is not right. It's used to set `numStreams` and it will be used in the if condition
why is this needed?
Please add a note that this doesn't break anything.
Can this be a `const int`?
Shouldn't this be `length` instead?
`Platform` and `platform` should be `int` (since `Platform` isn't a namespace) or `Config`.
This was just a mistake in the last PR.
This is the main place that we want to check the status of the page.
I think you can just remove this, it's redundant with the others above.
Why do we need to change this?
@kennknowles any reason this was using `pip.java`?
We don't need to change these, since they are public methods in a public API.
What is the difference between `dvc.read` and `GET`?
Why not using the new ` DaylightDummy`?
Why is this a separate change?
is this a change in behavior?
This is the change in #5995, I don't think the `3584fe777dd` should have been added.
You can remove `./gradlew spotless` now
Is it worth having two separate methods for this class, so we can use the same method for both methods?
I see no test coverage for this, but we should probably keep it to be `I18nTimestampableTrait`.
Is this change required?
Hmm, I don't think we need to keep the 3.x version anymore, since we're just adding 3.x to the top layer file.
Why is there a need for this price?
Shouldn't we have a test for this? I think it would be more consistent with the `root_a` and `remove_lock` and `remove_mutex` functions that call this method.
I don't think we should be passing `hideProgressAfterFinish`, right?
Please add docstring for `import boto.sns`.
Why are all of these changes needed?
I would prefer to see this as a separate commit, just in case, I'm happy to leave that in.
I think this would be more appropriate if the function doesn't have a typeof name, and the function does a typeof name.
Is this file still used?
This is a nit pick, but shouldn't `Tag` be a `const`?
Please remove space before the `if`. `sql = """ CREATE TABLE {marker_table} (sql);`
Is `null` needed here?
This is only available on a single entity, and it is not really necessary. The default `ImmutableList.checkNotNull` should only be used for any type `ImmutableList.checkNotNull`.
Is this method used? If so maybe it is more clear to use a simple `@return` statement.
why the `#`?
Is there a reason we are not using this package? We are not going to add this as a dependency in the codebase
I think this could be renamed to reflect our new action that we have to do this.
I don't think this is the right place for this `StringSlice` call. The `StringSlice` is not the actual return type of the function.
@liggitt this line breaks the build, I think we want to avoid having to pass `SymbolSupport` to the `const` (and the `const` above). The same for `getSymbolSupport`, but it is also a bit of a hack, and is really not a huge deal. It's also possible in this case.
I am assuming the idea was to do that.
This is a bit confusing, because we don't want to send the data in the data, right?
I would prefer a separate class name, not name. It's more readable
I think it would be more appropriate to move this to a separate function.
I think it's better to have an `if` here to avoid unnecessary string concatenation.
`MDCLoggingContext.clear()` should be changed.
if `__dir__` becomes a boolean, we could have `setformat_dir` as a list of `dir` here.
why was this import changed?
This should stay `profile.InvalidArgument`.
Normally we use the ternary operator here as well. I think `.gradle` should be a `.format`
This is not a config option, it is a required option.
NIT: we usually don't remove this file.
I would suggest to change it to `defaults.yml` and remove the `AWS IAM` argument in this PR
Can you use the same logic in `di.Error_NAME`?
I would prefer the `JSON1` flag be `common`.
I would prefer this to be `null`, because the `mdmLoginServers` should not be set to `null` if the value was null.
Why do we need this import?
I think you should be able to use a different location, but I would also prefer to see a call to `finer`.
This is the test we had in mind: we should probably add `core` to the `build` in `spack install` package and test it only in the `build` package.
I would prefer if this was a separate error, but I would have thought it would be a great idea to have the name of the `AWS_BOUND_SA_SIGNING_KEY` as well.
Should this have the same effect as in master?
What if we set prv to zero, or we set prv to zero?
Should we be checking that the `checkKeys` is in `pkg/configurator` and check that the user selected for BSON when running the tests? Otherwise, it's not necessary to make that change, so we could remove it and just do `checkKeys: false` in this PR.
this should be an error instead of a re.
Is this necessary for the other methods we are using?
Should the `set_exception` return be `nil` here?
This could be `selectedItem.isLocalFeed() && R.id.share_item`
Should be reverted
I'd be inclined to keep these as `docstore.M` as they were used in the code base to make them explicit
`BlazeMeterReport` should be placed in a separate `var/var/var/var/spack/efs.py` module.
why not just use the `Generate Flush`?
I think you need to handle the case where the `q` is `>\n`.
I think we should use `render json` here
Why is this needed?
I don't think you should add any new lines after `.TB()`
I'd prefer a single string here, `errors` or `errors.name`
I don't think it's the right choice to change here. The original version of the package is the one we're using for. The test is just the case that the `testing.T` is not expected to be a temporary file (i.e., it's not a temporary file that is the one we're doing, and it's just the case for the one we're just doing)
This will be a no-op if `http3` is set
Can we just call reducer(hookState._value[0], nextValue)) instead of this. The idea is that when we get a value in the state we're not using a value. The only difference is that `Object.is` is a `Object.is`.
I don't think it's necessary to add the `roles` argument to `isArray`. I think it's better to avoid adding an explicit call to `roles.get(options.roles)` and then just use `roles.get(options.roles)`.
I'd prefer to avoid `@Restricted(NoExternalUse.class)` in our code base.
We should use `Int` here, and in other places we use a function that calls `info.Int`.
I think we should just remove this `if code;` and the `else` above since they are used in the base class and not in the base class.
This seems unrelated. Can you make it more explicit?
I think this could be moved to where the IDP app is null
Where is this variable used?
@wachterjohannes Why did you change this?
Why is this change necessary?
We should also be able to set `DD_HTTP_CLIENT_ERROR_STATUSES` in the future.
I think the original `sd_journal_next_skip` should be tested.
I think we need to make sure all tests still pass?
can we remove this?
This is the default value, right?
What does this mean? Why does it need to be on a new map? Is it a problem, or is it an existing bug in the constructor?
This is probably a great change to make the tests pass
@cramforce is this going to be needed here?
Why the change to the version change?
This looks like it is a problem for the next release, but we're still going to be doing it here, right?
This is not needed, as `aria-hidden` is already defined.
`excessions` is not necessary.
Why do we need to have this property as a public field instead of a public field?
This is the only change needed in `lib/systemd/constants`
Please add a license header.
I would add a new `has_all_data` property to `cycle_timestamp`.
This will need an update
why is this needed?
I don't think this should be here. The value is not a built-in property and should be a `secret_NAME` by default.
I don't think this is needed.
I don't think we need a new function here, since the function is already inside the `UpdateProjectSingleSignOn` (which is only used by the `FakeWebAPI`) - we don't want it in the `FakeWebAPI`.
Is this needed? The method is called every time a package is called and it should be deleted.
Is this column visible from the scope scope?
Please use the existing test.
Do we really need to call `PSModulePath` on all these specs, or is this just a bad idea? If so, should we call `.set_PS(k)` in the same way as `.set_PS(k)`, or is that what we are doing?
I don't think this is needed.
Why are we no longer passing the error code to `KeyError`?
Is this because `blockchainBridge.GetNonceAsync()` is not called anywhere?
Why the double underscore?
should this also have a test with the `RLock()`?
should we rename this to `getStringBy::getDomains`?
Was this a separate bug? Or is it just for debugging?
Please don't change the description of the configs.
I think the `addStream` should be used instead so that it is only used in one place, right?
I don't think we should add this to the `CreateExecute` function. I'd like us to avoid adding it as a flag in the future.
`targetEntityConfig` is not a boolean, so it is a string.
@jackfrancis I'm not sure about this change, it seems that we have to add `compression=on` to the list. We need to add it to the `compression=on` in that file.
Metrics/LineLength: Line is too long. [83/80]
This can just be removed.
This was a mistake that wasn't working. It was a breaking change.
This is a breaking change, right?
This is an example of an example of a bugfix.
I think it is better for the copyright to be guarded with a new copyright.
I would call this `results`
Why do we only need this if we don't do any completion errors in the user?
This is no longer required if we don't have any other way of doing it.
I believe the `appHeaders` fixture can be removed since it's not being used anywhere.
Why this change? The test is testing the same as the testDataLocator, which is the case.
Is this a safe change?
I'm assuming this is a change of behavior, but it's not clear that this was just being removed.
`this is set and ShouldRetry is called`
I guess this was the only place this was used, and now the attribute was used?
I think it would be more consistent to keep these `Skyline.Util` and use `Util.Util` in the `namespace`
This needs to be cleaned up.
not related to this PR, but I wonder if we should just have a separate PR for this.
This is the only real change I see. Are we sure there is no such changes in this patch?
I think it's not clear what's happening here
This doesn't have to be in the long run, and I'm not sure why it is necessary.
I don't think we should remove this. We should only do the validation when `capacity=capacity` is true.
I think it would be better if you explicitly check for `if (req.get_if_not_exists())`
who uses this? how is this related?
this should be removed as it's not used anymore
this should be `elHeight = (style.getPropertyValue('position') || elHeight <= 1`
This is wrong, if `getInstance` returns null, it will always return null.
I don't think it makes sense to have the same `tracer.Settings.AdoNetExcludedTypes` call here.
You could add some more info about the imports in this file: `v1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1beta1
is this a BC break?
I don't think this is used?
This is a bit odd - it's a bit confusing. How about `switchswitch`?
this is an unrelated change, we should move it to a new commit.
I think this is still not needed anymore?
It seems like this should be moved into `setup_halfd`?
I think it is not a good idea to add the `alter_query` annotation to `ClientVConfig` class, which we could then use for `alter_query` to `ClientVConfig` as there are already a `alter_query`, and it's a little confusing to me that `alter_query` and `limit` can be `ClientVConfig` and `ClientVConfig` is not the best idea.
Why do you need to do the conversion here? Is it because the `.then()` returns an appropriate value, and `.via(executor_.get())` returns a string?
Which check is this not correct? It is only used for the `TryGetContext` case right?
Is it possible to keep the old name? It seems a little strange to have the name `isDeltaValue` as a property, so the name of the property is "is" rather than "is"?
What is the purpose of this interface?
This should probably use the `ksql-test` package.
I'm not sure we should add a `map` here.
Is it not needed anymore?
Let's use the `@param` annotation here.
I'm not sure how the `algoh` command should be here
Can we keep these changes?
@deads2k any idea why this should be here?
Can you explain why this is necessary?
This is the only place where you'd want to use this. I'd rather not just have the `googleapis` in the test files, but just want to make sure you don't run any tests for it
I think this would cause a regression.
Is it possible to use config.websocket_config.enabled and pass in the config object here?
Why do we need to make this delete public?
Is it possible to have a list of supported values here? I'd rather have this be something like `src/caffe/test/data/sample_data.h5` or something like this, but it's not really necessary in the list of values.
This looks like it should be changed to `NewInt`
Why is this not a pointer?
I think this should be named `New` and `NewReactive` (and maybe more descriptive).
Was it a problem for the user to connect to an input?
Is the TODO still needed?
nit: `this[]` instead of `!`
Unused method argument - current_site. If it's necessary, use _ or _options as an argument name to indicate that it won't be used. You can also write as `overwrite_transport_data`.
I would add a new field to this, so it can be used in many other places.
This is the only way I can think of a better way :)
This is fine. I don't think it makes sense to do this. It's better to just do it for the vchild, and then do it for v0.
This might not be necessary since it is already in `allView`.
This is a change in behavior... why not make this a separate PR?
I think the `adaptivescalar` and `adaptiveScalarEncoder` values are now just used in the `dba` field and there are some other ones here.
Can you please rename this to `NamespacedName` for consistency?
Is it not necessary to delete the code?
This file is not required anymore. This can be removed.
I would prefer a separate test function for this and not just `var fixture = document.body` since it's the default
Can we just make a `runUnifiedTest()` function instead of hardcoding it in `utils.js`?
How about using a `options.nameof()` instead of a `id`?
This is going to be a good place to do this. The code that we need a name that is not a required table, and we should probably just call it as `LocationProvider`.
I think we should keep the description as it was.
I think the wording is still wrong here
Not sure we want to change this to `with session.transaction()`.
No need for the `ConvertFromTransferPb` call since you can just pass that into the block.
I think `n.getParent()` should return a `StringUtils.equals()`?
We should not be using `get` for all the benchmarks in the message.
I think it should be possible to get the log to create iter->logEntry() method.
please sort the new files in `__lastupdated__` (it's the only one that is used in `lib/utils`), it will just be imported into the `__lastupdated` function.
I don't think this is right. The default `nil` will be the default version of `CloudBuildSourceStatus`, which is `nil`. I think it should not be the default.
Is `const` the right name here?
This should not be in this PR.
I think this should be a `before_action` instead, since `before_action` won't work for `X-Frame-Options`
How about we set the default in `if uh.MaxFails > u.MaxFails`?
This is not a pattern, but it's a nice thing to import from `pdk` (which is a pyramid module)
I'm not sure if we should do any checks for this.
I don't think the original URL opener is still in the URL. We need to check if that's the case.
No need to pass this to sessionStorage so that we don't know what this is doing in the past.
This is a breaking change, and should also be handled by the other PR, I'm not sure about the reason for this change.
I'm not sure about this. It is better to move it to `if earliest.BID() == NullAction.packetID()`
I don't think we should use the installation_TYPE here.
Is this going to change the default value in 11811?
`except` is redundant.
Shouldn't this be in the same package?
Is there a way to do this without the IP forwarding?
Use the new Ruby 1.9 hash syntax.
Why not just `localConnection.type == Blockly.OUTPUT_VALUE`?
Why we're changing this? The method doesn't need to be public, and it's a public method. I don't know how it should be, just wondering if we should just change the signature of `_policy_violations` to make it clear what `bq_acl` is and if it's a private method, it's not a good name.
These strings should not be capitalized
I'm wondering if we should do something like `setHeader(filename)` and have `SetHeader(filename)` and `setHeader(io_config.linear_tree)`. It would be nice to have a method called `setHeader(filename)` and avoid having to call `setHeader(filename)` for the second argument.
Isn't this the correct place to check for the error? The `Wait` is the only place we get the error.
I don don't think this is needed. It's used in a test and it doesn't really work.
`/mutate/addlabels` is a part of the API, so I think we should just change this to a new API. `/addlabels` seems a little strange to me. What do you think of having it on the `/mutate`?
This is the only real change that affects my understanding of this PR: if we are removing the `AWSCluster` field we should not change the `return` part of the API. We should keep it for now, and instead just add the condition here.
Why not make `FSGlobalGlobal` public?
I think it might be good to check the path in `getServiceDescriptor`, and then pass `toAbsolutePath` in in the method.
This is a breaking change for the config file.
What is the `else` in here? I'm not sure how this relates to the `else` statement?
remove empty line
I'm not a fan of this, can you put this in a constant, so we have it in a separate file instead? It's just a question of whether it's worth it to make it a little clearer
Should this be `GetRawDiff` instead?
Is there a chance this can be `NULL`? We don't really care about this if we can.
I would move the `email` above the `clutch` variable, as it is used by both places. We should at least have it in the `clutch` package.
This is a bit weird. I think we should have a separate `fallthrough` function that we already have in the `fall` function.
Is this needed?
Wouldn't `_path_suggestion` have the same problem?
isn't the default port port port port port port port?
Do we need `initializer` here?
Is there an issue tracking this?
Why is that condition removed?
Should this be `default || require` instead of `.default`?
I think we could leave out the new name here
Is this TODO still relevant?
nit: I don't think this is used anywhere
I'm not sure what the best way to do it is. If you do a `Hash` or `Hashf` you need to return a `nil` here. If you need to do this, you can do it with the `return nil`.
I'd suggest `#include <stdint.h>` instead.
Why is the role binding added here?
Why do you need to add this again? I don't know if we need it for any reason (I don't feel strongly)
I think you need to update the name to mention the version.
Please remove all references to this variable.
`UpdateSpan` is a `List` because `UpdateSpan` is a `string`. So I think this needs to be updated too
Is this used?
I'm not sure if this is the correct way to fix this, but it's also not the best place to use it
I think we can just remove this test and leave it in the spec as it makes sense.
This is a little unusual, but it seems like a very useful pattern to have a `*json.RawMessage` that is not a `nil` in the code base. What about something like `*json.RawMessage`?
Can we just return `-i` and remove this `else` case?
Why is this needed?
Line is too long. [82/80]
Is the `name.toLowerUnderscore()` needed here?
Why do we have the $me->getAdminLocale() here?
Why is this changed?
I think this is unused now.
I would prefer a `@return` here.
Why `Library_secret_access_key` and `Library_secret_target_NAME` here and in `ops.py`?
this import statement is effectively effectively reverted
Should be in this package.
Why does this need to be changed as well?
We don't need this check, it's just a very small optimization
`rfp_backbone.get()` will always be `False`, so this will be `False`. But if you are right here, you'll have to set the `model.neck` value here, right?
Why do we need to get rid of `.new` here?
The wording here seems to be a bit odd to me. Can you please update it to `cxx_XXFlags        `? It would be better if we could rename this to `cXXFlags`.
nit: `&&` instead of `*`
I'm not sure this is a good way to fix it. I don't think it's a good idea. It should be an array. `keybase` and `keybase` are the same. We need to keep track of all the other fields.
Is the condition still valid? If it is, then `params[:read_tou] == "0" `
I think we need a more specific description for the new `JobStatus_scheduled_on` and `February 19` parameters, like `add_inverting_scheduled_on_inverting`
Let's keep it here. We need to keep the old versions around.
Should this be a different type than `static`? I think it's better to have a method `rootedAtomAtomAtom = std::rand();` and have a `static` constant `(rootedAtAtom)` and have the same name as a member variable.
This test is not testing what I was trying to do. It would have been really nice if there was some test coverage with this?
I'd probably just put this on the `build` function instead of doing it in the `static` function, so that the `dso` function can be moved up one line.
Why don't we use the same `@param` ?
hmmm. I'm not sure this change is correct. It seems like there's no reason for this check
This is a no-op, right?
I think this will still be the wrong place for this case.
Please use `unsafe()` instead of `unsafe()` (in `info.java`)
I think we need a migration.
I would not add this to the "makeflow" base class, since it's a public API and will only work for "failed.%d" base class.
This is the only change that affects this logic.
I think the function name `vnode` is better? (i.e. `vnode`)
This should be a `static const` variable (or a `f`)
I think you can just remove this line
This was a bug, because we're doing this in the same package.
This class doesn't seem to have anything to do with the other changes.
Do we need to also print the error here?
I would suggest to use `LastExecutor` instead of adding a new constructor. It is used only in this class and it can be used in many other places, and we don't need to pass null as an argument.
nit: I'm surprised that this didn't happen often, but if I've gotten this correctly it looks like we're using it in the same file. What is your opinion?
this is probably the right error. The error should be logged as "Fatal() failed"
I don't think this is a good idea. It should be a global setting.
`font` will be a bit more generic. What do you think about this?
Style/EmptyMethod: Put empty method definitions on a single line.
Why not do this if check for null?
This should be `if (!it->second.getGroup()->access)`
this is a very weird pattern... what about we call `blockIsCreatedByProposer()` to get a `max` and not a `max`?
@tnozicka can you check that the annotation was added here and not the test at line 118?
Was the change here intentional? It looks like it's a copy/paste error.
Is this a debug print?
I don't like the idea of this. The new constructor is a bit too broad, especially since this is a change in behavior for the `using the `using the `Ignore` argument; I'd like to see the change in `internal/internal` interface.
Style fix indentation of the two other places.
I think this is the right place for this. The default `yank_text` could be used to check if the default `yank_text ` is not None`.
do not use spaces inside square brackets.
Shouldn't there be a newline here
The `/` tag was added here as well.
Should we make these new dependencies?
Should we make this a constant?
This doesn't seem to be needed.
Can we use a more specific type for this type of thing?
Why remove this?
Why do we have a path for the existing one here?
This is a breaking change, so it should be added to the page page instead. This is the case for the page page.
This is going to break existing tests. I would expect this to fail.
The same thing here.
Hmm, this is the fix for the `exc_info=True` line. It seems that the file is not actually being used.
i don't think we can do this now, we can just remove the `byteConfiguration` function from here, right?
So the `mode` field is always `true`?
I think it should be the last line.
Line is too long. [87/80]<br>Space missing after comma.
I think this should be `Warn` instead of `error`
why do you need to change this?
We should also check if `_botocore_parser_integration_test` is set in `cloudtrail`.
I'm not sure about this... the `agaw.delete_singular` is used in a single form.
I am not sure why this was necessary. The `_getName` check is needed when the `opts` is `nil`.
Why do you need this? It's used in `LOG` so we don't have to use it here, and in `LOG` we don't do this.
Can you elaborate a little on why `startColumn` is not null?
Shouldn't we also be checking if KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK is defined?
@kroitor since we are setting a null, we are going to send to the empty string. Can we also change the value of `getAtomWithIdx` ?
Can you use `!empty($htmlAttributes['APP'], $attributes['APP']);` instead?
Why are these changed? It seems to me that the `cachefs.PathConfig` and `cachePath` are not used anymore.
This was used as a static import, so it should be removed.
Can you add a new constructor for `fieldId`?
Why is `check_acked_status` removed? Isn't `mp_listener->onWriterChangeReceivedByAll(this, change);` supposed to be `nullptr` for this case?
Can you update the docstring as well?
can you move the `TestMessage` into `TestMessage` so that it only applies when you use `TestMessage` in `TestMessage`?
Why `d for d in scope.args.defaults` and `all_defaults` can be None?
Isn't this a BC break ?
The name of this class has to be updated, it is confusing to me as it's an implementation detail.
Is `criuServer.Close()` the same as `SequenceSequence`? If so, should we add a check for `SequenceSequence`?
why not `gulp.task( 'npm run test:js'):` ?
Why do we need a known known at all?
should this be a `@example`?
Shouldn't this be an `if` condition to make the code easier to understand?
Can't the line above be `stream != NULL`?
I'm not sure why this isn't the test case, but this should be `_getCheckpointParentDir`.
We should also add the `ConsoleUIACheckBox` to the model, and the `UIAGroup` to the label, and the other two lists.
I don't think we need to do this. The output of the context needs to be set to `False` when the context is created. This is also what the `skipClient` is about for `Task`.
I would prefer to have this in an `if (isDNSLabel)`, since it is in the base class and not in the base class.
> We don't need the conversion for `DESKTOP_CHECKING_DIDIDIFlFluid`.
This was the only caller of `getReadColumnNames` to set `selectedColumns`, which was never doing before.
Do we need a new migration for this?
is this right? if len(fn.normalCalls) == 0 && open <msg> I think you should check if `c.dashboardEnumEnumEnabled() == 0` before removing this check.
This should be `const` not `VXLANVNI`
Can we call this `Failure Import`? We can make it more clear that the error is raised.
This is an unrelated bugfix. The problem with this is that the `&rbuf_ivar_id` is a `pluggable_i-return` not an `pluggable_i-return` flag in `c_global_variable`.
This is only needed to ensure the logging statement is removed from the log level, so the log level is not removed from the log level.
Why is this in the default version of `X`?
I don't think the TODO is needed. In general you should add TODO here.
Why not use `.creationTimestamp` here?
What is the purpose of these changes?
I think we need to keep the error.
@logger.isDebugEnabled && () => (logger.isDebugEnabled)
I don't think the console.log call here is necessary.
There are some more similar places in `std::unique_lock` that are in `std::mutex`, but I don't know if it's necessary to do the same thing here.
Can you move that import with `models/config`?
You can use `return AddParameter_opnd_nLE(1U << 31, enc)`
This is a change in behavior, so I removed it as a test.
Sorry I missed this in 2.1.x. We should also make this `normed_bbox` for the latter, and then pass the `Default` to the `absolute value` in, to make it clear that the value is the default.
I think that we can get rid of `p1.TracerProvider` here and just do the `got := global.TraceProvider(&p1)`, which is the only place where we're using it.
This should probably be removed.
Is this really needed? I don't see anything in the rest of the code, just asking.
I think this is the only place where we need to do that.
Can the param name be renamed to something like `Bodies                    `?
Why are these new params needed ?
This can just be `manager.eventPublisher.Publish(StateEventTopic, StateEvent{{State:       NotConnected, ...)`.
Please add a link to the `uppy` page as well.
Is this change correct? It doesn't look like `async` is being called anywhere.
`\` is not supported in IE.
We have already added a pointer, so this is not needed, right?
We should only check if the file exists in the file, and if it's not then we should check if the file exists and only if the file exists.
This is a change in behavior, but the other 2 calls to snakebite are not needed, so this code is still not needed, it is a separate change
you can remove the `content` param here, since the content has the same meaning: `content == content`
Why was this changed?
This import can be removed, since it's not used anymore
This can be removed.
I think we need to use `Bytes` here too, right?
Why the extra check?
@t3on This is the default value for `/all`.
I think it should be "not error" or something like that. I think we should just log it, since it's only used once when the user is started.
This should be `count`
Can you please add `// +optional` and `// +optional`?
Why did you remove the second argument here? Isn't that a problem in terms of passing in a `uint8_t_names`?
Why not just remove it?
This could be `undefined` if we have more than one `var`s.
I think we should use the IP here as well
I don't think you want to change this, just curious why we are not changing the method signature
This is a pretty much the same as for `Qt.Key_Enter`. It seems like a better idea here to just use the `list` as a function to avoid any possible possible refactoring of the logic.
Can this just be `WithWithDispatcher`?
I don't quite understand this one. Why is the `getDownloadSizeNumeric` method only used for a file that is only used for the file that is not in a file that is not present on the `DataFile`?
Please remove this extra line
This debug statement can be removed now, right?
This should be split into a separate PR, but we should also add a warning about the warning.
Not sure why we would need the extra param for the last one. I don't think we can do that.
I think it is not necessary to call `deleteManifests()` here, as that will cause the exception.
why not `groups`?
Should we set this to `1` in this config, so it can be used in other places in the codebase.
why remove this?
I think you can remove this `spack install --crd` now.
`pauseContainerTarballPath` is not used anywhere, so it can be removed.
This should be implemented in a separate PR.
This is a very generic error. I don't think it should be possible to do that.
`bp` is the name of the test, not the name of the test.
why the change here?
Line is too long. [89/80]
I don't think we need to expose these new files here. I think this file should be moved out of the package and the package is not in the `RuleViolationFix` package.
Please remove this.
This needs to be moved to the "IS_host_enabled" file.
this was changed to 1.8, so we have to update `protoc-gen-go`
This should be removed.
should be `?`
I don't think we need to add this to the interface.
Can you also change this to `volatile`?
why change it to setLossSkill(true); ?
This is the change to `once` because it is the `Var` and `Var` are not used in the `gulp dist --in` case it can be used in many cases, but the `Var` and `VarType` are not needed in order to be able to be re-entrant.
Why do you need this change?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This should be done in the testing method so we don't have to worry about the error message in the future
We should probably rename this to just `pipeline_name`.
Is it safe to make Sleet source final?
This is the change that fixes the bug.
I'd like to leave this in the generic file.
I think it might be safer to return `None` here, since the check for _ts is not needed.
I would suggest to put the word "80" here so it's more clear what it's doing.
This variable should be named `eligibleEngine` instead of `eligibleEngineLoadExternalResources`.
This change is unfortunately incorrect. The original one is not really part of a bug fix.
This function seems to be unused, can you remove it?
Why not just move it to L39-34.md?
Why are we removing these?
what's the benefit to having a check on the class?
@cicdw @mjkkirschner I'm not sure what `2p.2p` means here, and if that is the case, the `2p.2p` is not a `map[string][]`, we should be able to remove the `map[string][]` and use it here, as we are already in the `new` loop above and we should probably just do a `map[string][]` check here
Shouldn't this be named `app/apis/apps/api/v1/namespaces/default/cdn` ?
Is this a bug fix? I don't understand why the change has to be changed.
Should we add an explicit check here to check if this is null and return false?
This line should be added by the import order in the import order.
This needs to be a "hack" `time_name` (to ensure that the value is not available).
The `fds` here was a little bit confusing. I don't think you need to pass in a `TimeUnit.singlepass()` here.
Why are these changed?
These `type`s should be the same as the `type`s.
for my own understanding, why is this package being changed? I don't see any reason why it is here.
This isn't really a good example. It would be nice to have a separate `if` statement and the second sentence, e.g. `if (!exportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexportexport
Why are you using the default version in the version?
I don't think this is necessary since we now have a `.h` file that has already happened in a file.
I think you can just do: "If Cross-TU analysis is enabled and it is removed."
Is it safe to change the variable to `?name` or is this because we always set the first value in the first place?
I think this should be on the other side. The only reason it adds the copyright here is that a user could change the copyrights for a while.
Why this? The only caller of the sql will be to set the sql instances. The `[Expressions]` is the same as the `[Expressions]` on the `[Expressions]`, so we could set `[Expressions]` on the `[Expressions]` on the `ClientClient` itself. This is a weird pattern to change as a non-`[Expressions]` on the `ClientClient`.
This method name is a bit misleading. Is it really really useful to use a `deprecated` decorator?
Can you please change these two lines to: `"" version 1.0.0-beta.5"` and similarly in the other places where you use the default value `"" version 1.0.0`
I think `__(__( 'Search Console', 'google-site-kit' )` might be a better name
Please add docstring for this.
Maybe a description? Maybe `script_to_s` is more appropriate
Wouldn't it be better to just use `close()`?
Wouldn't it be better to use the new ArrayCollection() method instead of creating new ArrayCollection() ?
Why was it added here, but not in the other `go-spiffe` package?
This can be simplified by removing the `window.__mochaResult__` from the interface as well, and then removing the `chobvious` will be set here.
This is probably the best solution. I would expect a `with: /[a-zA-Z][0-9]{7}/,` part to have a `default_blank` attribute for each format.
Is it necessary to put this in the `pickle` package?
I don't think we should use this argument here, but I would prefer to have it as a default parameter to make it obvious that users are not in the default argument.
I think the `AvailableBalance` can be removed.
Is it necessary to add `Sync` as a field in the message? If so, it is not possible to do this in a field to set it.
I think this should be `if len(pods) > 0 && (pods[0].Status.Phase == corev1.PodSucceeded) > 0` and not `if len(pods) > 0` right?
Is it still useful to add a new file?
This is an example of why `0` was not `nil`.
Perhaps this test should actually test the content of the size of the byte array, since that is now a smaller number of byte array.
I think this variable name should be more readable as "columnModeMode"
I think we can just use `from conanfile.dimensions import alarm_actions` here
Please add `eslint-config` to the list of files, so that people know how to do it, and they're just "eslint" the default of files.
I'd suggest to keep it as it was.
Is there any reason for this change?
I'm not sure about this one, but if it's not a big problem, can we make it a `subscription.reactivate`?
This method is not used anymore.
this is not correct. it is already called in the new `HeaderButBodyNotWritten` test
This can be just `pass`.
why did you remove this?
This is the only change required to use `spf13/` here, so I removed it.
We need to change this to take `apm-` as a pointer?
I think this test should be moved to the `test_ARN` module
I'm not sure if it's possible to get a warning here, since we already have the correct value for the user. I'd rather see a separate function. I'd be ok just to not do this for now.
This is the only place where I don't see the need for a `defestion()` method. It can be used by the `.get(string)`. It's not a big deal, but if the name of the function is a good idea to add it to the `.get(string)`, it could be a bit easier to understand. But I'd prefer if we didn't create an issue for that here and just add it into the debug command and have it return an error.
Should it be an `_`? It is not a `string`.
The description says "Enable unrestricted (stores payload onchain) privacy (default: ${DEFAULT-VALUE})") but I don't have a better solution. It might be clearer to rename the `--privacy-unrestricted-enabled` to `--privacy-unrestricted-enabled`
I'm not sure why you needed this. It is used for `export` and it does the same thing. I'd rather have it be a dictionary, not a dictionary
Isn't this going to be the same as for `get_bigquery_projectids`?
I would suggest to add a `return ...` to `return ...` so that we can avoid using the context.
I think we still need these `#if !IF_HOST_X86`s because they are not really used anymore.
Why the change here?
Nice. I would move this code to the beginning of the `if (assembly.error)` block below.
This should be done in the constructor.
can you make it a private member of `useRustParser` and return the error?
I'm not sure why you need the `<A>` here. If you do this, you can just call `A. prepend prepend(...)`
Please remove the `[DisallowNull]` on the interface and add a `;` on the interface.
I think this can be removed now since the default value is an `Optional`. @bvaradar
@jcotela is there any reason why you did `string=True`. It seems to me `string=True` would be a bit better?
nit: I think the name `keeper{secretKey: ByteKey` might be too confusing to read.
This import is unused.
I'd rather have a function to check for `raCtx.Producer.String()` and have the `createMemorialTransfer` return value and call `executedActions` here.
this should be `if (!service) {`, but the `if(noopService()) {` block is not necessary.
Can we make this an optional argument to make it clear that it doesn't exist?
@bparees this test fails without the change in the test suite.
How about `scssCodeLocation` to handle `assembly` values?
This is not the right place for this. You can move `v1alpha1.Network` to `createInternet` and `createInternetGateway` to `v2alpha1.V`.
This is a breaking change. I'd prefer if we could just have a `EnableDNS` variable that would be more readable by just doing `EnableDNS` and then pass that in in.
This should not be part of the `Debug` block, since we are only using it in the debug message.
Why not just `Unknown ResourceTypes`?
I'm wondering how much of the `ExtractorCallbacks` is used for a single `PBFParser`s...
Is this a BC break? Can you make sure that `Issuer` is `nil`?
This should probably return the promise
Why is this file changed?
Shouldn't this be an error if the user doesn't get a connection connection?
should it be `plugins.gallery-media` or `plugins.gallery-media` instead?
You can just use `SSDAnchorGenerator` instead of `max_sizes` here.
Why not just add this to the end of the `MystAddress`?
This should also be added to the other go files (iotex-core.db.github).
Do we need to have a view for this?
Why do you need a new task task? It seems like it would be better to move it into the `createStateChangeEvent()`.
This import is not required.
This test is no longer needed.
I think we can get rid of this TODO now since we have it in the `acmeAuth`, since it's not part of the scope of this PR
This test was not related to this PR: I'm not sure if the above tests still test that the spellcheck contains the attribute (and it was not running before). But I think it's just an error, and it was not really an error, so it's a no-op. It's just me, just wondering what the expected behavior was.
Shouldn't this be set by the client as well? Or is this related?
This import is duplicated.
This is a bit of a mess, but I think we need to be careful about the default.
I think this change should be reverted
Should the `hComPort` be deleted?
Why is this change necessary?
I think it's better to remove this, and add it to `api/api/api-types.go` and `api/api/types.go`
Should these be on the same line as the first `//` tag?
I don't think this import is needed.
This seems like it could be extracted to a dedicated method.
why change this?
This is a bit of a hack, but I think it should just be a separate `static`.
Why not just make it a `Valid`?
I would prefer to not have this check here. It will be cleaner to have an option to set the collection in a filter, and then check if the collection is empty.
@liggitt I'm not sure this will work as expected. I wonder if we should be able to do `0.6.x` instead.
Is it `isAuthenticated` and `authenticated` necessary?
This line can be removed.
Isn't `assertEqual` enough? If so, why is it not `assertTrue`?
Please, add the `to_s([0-9])` to the `master` operator.
Can you make this `final` please?
I don't think this is correct.
Do we need this in the constructor?
Is this a BC break?
I think you can just remove the constant so that you can avoid adding new entry.
I think the more elegant way to do it, could have a `ErrUnimplemented` method that does something different from `ErrUnimplemented` in the `Unimplemented`. I think it would be good to make `ErrUnimplemented` a property of it? The `ErrUnimplemented` method can just be `ErrUnimplemented`.
This seems like a good candidate to have the same code as in `Stream.getDeclaredMethod()`
Isn't there a `[]session.mock.idmFake` that we can do?
I think it would be a good place to put this in `__init__` for consistency.
Is there a reason for not just passing the `getPluginInfo` directly here? I'd rather see that `getPluginInfo` is always a `warn` method.
Is this change related to this PR?
Is there a way for us to remove this, and only do it when the Writer contains the value of the `bucket driver.Bucket`?
Metrics/LineLength: Line is too long. [83/80]
I think you meant to remove this too
I think `blk.CUDA` and `blk.CUDA` can be removed.
We can get rid of this too.
Is this method used?
@matt-gardner, I wonder if there's something wrong with this? If not, then we could remove it.
This is probably the right place to go. The `CertificateRequest` option should be just a `dict`.
Why do you need this?
Why was this changed?
This should be called `includeInLightValidation`. I don't see the difference between this and `includeInLightValidation`.
This should be defined `global fileWaveFile(fileName, asynchronous=True)`
Is it better to make this a single `EEA_GET_TRANSACTION_COUNT()`?
I'm assuming the log level is not a problem for some reason?
This is the actual fix. I think that this is the correct solution.
Please update the doc here, not required
Why not `StringIO.StringIO`?
Why not use the api variable?
Can we add a TODO to remove the `USTAT_NAHEAP_ESTIMATED` from the Spack file and use the same `0.05` here, or the new `ecs` suffix?
Is the idea to use an enum instead of a dictionary?
I think this will need to be `:0:` since we're not using tabs, right?
Shouldn't we have a test that checks that these are actually not supported? I think the `uname` package will not be present on the server.
I think you forgot to add the `_for_search` param here
Do you want to add this to a later PR, or did you intend to change it in the future?
Is this needed? Also, why not just have the `#if NET5_0` on line 212?
I'd suggest to use `// consensus is doing the work and then calling `.cfsm.CurrentState() != consensusfsm.InitState()`
Can we also remove the test for `spellCheckCompRH`?
I think we need to avoid using import directly here.
I think this was supposed to be fixed with the changes in here.
why do you need to check the type of the string?
I'd prefer if you don't use the old `if` here and avoid having to pass the `)` here.
Why is this change necessary ? The problem is that if you don't have any unit tests, you don't need to have `self.scenario` anymore.
Can this be refactored to something like a private field in a transaction?
Final newline missing.
`onPreExecute` is a method on this class, I think it should be called `onExecute`.
I think it would be cleaner if we just pass the `with_feature` into the `subject` block, and the `end` block above (even though the code is still in there)
I think we should be removing the `clearTimeout` call here too.
I think it might be clearer to rename this to `DumpFlows`
nit: this is an unused import.
I think the `getVersion()` should be moved into the `3p2` function.
This is the change I mentioned above, but it seems like it should be moved into the `yield` function, since we don't want to have it in this package.
I would use a `isApplicationObject` method here instead.
Should this be `item.isDebugEnabled()`?
Is it really needed? I'd expect it to be a `Caffe` object, not a `DEFAULT_mode` object...
Can you please add a docblock here?
Why do we need this new field?
Can we have `sysconfdir` be `(call-module-dir)`, too?
This import seems to be unused
this is the one that we're doing to make sure the host is not in the extension right?
I'm not sure we should do this. The `-1` is still present for some reason, but it is probably not the best choice for the sake of folks that use the default.
This file is not really necessary.
I would use `!number` here
I would use a more generic name here. In this case, we have to pass in a List and a list, so we can make sure all other types of things use the same type.
Shouldn't this be `detached:` ?
I think this should be a separate PR.
This should be indented as a helper function.
Why not use the variable name directly?
Remove it from the previous commit?
This is not a real problem, as the user will see the wrong thing. The problem is that if you don't add an object to the `SegmentId` field you will remove the `addContext`. I think it should be fixed.
This is not needed. Please remove this.
This change is unrelated to this PR?
This function is not really necessary. You could use the function from_is_extension() as an arg to the interface to indicate that it's an array, not a list (e.g. a boolean) and then a single value to have a single value.
This isn't the type of the operation, right?
This is probably wrong, since the class is already obsolete.
this is the main change
Please use `getters["countlySidebar/updateSelectedMenuItem"]` and remove the `if`.
I think we should also remove the version in the shuffling version.
This will be a very large number of different values. What happens if someone wants to do the same in the future? (And a few lines above?)
@guglielmo This is why I moved the ` proto.RegisterFile` into a separate file
I'd prefer to not have this as a separate class, as it could be used directly in `getClass().getClass().getName()`
I'm not sure about this one... I don't see any benefits in making it a function, and it's a function, so I'd like to see it as a field on it.
Should this be `~` instead of `APIServiceLabel`?
This is the main change that works for all the `exMessage` cases. I don't know if `CAMessage` should be null, but I think that is what the right thing to do here is to make it a breaking change.
I don't think you need a `ValidateFunc` here. If you want to keep the `ValidateFunc` as an example of how `ValidateFunc` can be used.
This is a very minor thing, but I'd be tempted to move the logic out of the function in the `PSystemSrvr_list` function.
Can you remove these? We are already throwing a TODO in the middle of the PParam object.
I think we still need to do this.
This field is not initialized as a member variable, it is initialized as a member variable. I'm not sure why it was removed, but it looks like you changed the code of `private` below.
Why do we need to specify a specific type of metrics and not a struct? This seems like it should be a struct, but I would prefer to have it in a struct instead of "Reflect" struct, as it's a field in the JSON.
The parenthesis should be in the next line
I'm not sure about these two changes, since these are the only places where we need to use them
I think you're missing a `static tagWriter` here, and you don't need to use this.
This is a good change. I'm a little confused. If I have a PR to get a few of those I'd like to see, but I don't think this is the right solution to the user.
what if `NEWUSER` has been checked for?
This is also not needed, because you're not doing the exp-contrib variable in the function.
I'm curious about this one. I don't quite understand the reasoning behind this change.
I think the changes below are a bit confusing, as they were not being used in a few places.
This should be in the same `IRQ` list.
This is the most important change.
I'm not sure how we should use the "setAction" for the new intent here. I think it is better for `startActivity` to be called with the same intent, since the "getAction" in the `getAction` function can be called with multiple values.
Should the error message be logged at a lower level?
Use `this.isSorted()` instead.
I think the PLL3_SW_60M case can be removed now
@mfojtik we are using the old version for this and other components in this PR. Does this really matter?
Do we still need this?
This is a good change. We can use the name name in the `name` package.
You can make them private
This looks unrelated. I'm curious why you removed the `and` and the `and` below.
Why not use the `stopped` argument here?
I think we should add an example of why we need to do this.
Would it be safer to use `.get()` here and check if the object is empty?
I'm wondering if we could use some kind of utility method here.
I don't know if we can do this.
Thanks. This is not the only place where we have this. The `site-kit` option isn't really needed.
nit: I think we should just remove the `reverse` here and remove the `reverse` here.
We should add a new one here.
this was a bug
I would prefer to see this in a different PR, as it's done in #2020.
Isn't this the same as for `ServiceAccounts`?
This is probably a bit of an unrelated but I think this can be a separate PR if it's not related to this PR.
This is a duplicate of the code that does not have a default value. It will not work with null, but is not the expected behavior. You should use it instead of null for the `$null` case here.
@aosyatnik, I'm not quite sure this is a good solution. Can you confirm?
This is a breaking change, it seems a bit weird to have a global var for the name? I don't think it's the right approach here
why is the second set of tests not needed anymore?
I think this can be a one liner `DataContainer.EventEmitter}\n`.
`with_questions` is a subclass of `expect(Quiz.with_questions).to eq([first_quiz])` so this doesn't have to be a subclass. `expect(Quiz.with_questions).to eq([first_quiz)])` seems a bit too broad to me
@jcotela I don't think we can get rid of the `.gz` here. We have a `.Status` function which has no value.
Why does this have to be a `pass`?
We should be consistent and remove the `@since` annotation.
Why was the doc removed?
I don't think you need the CMakeDeps file here.
why did you need this?
Is it needed to use a set of 20 values? I am not convinced if it will be used for all values.
`primaryPivotFacet` is not needed anymore, because `openFacet` is already declared above.
This was the only place where I found this `waitpid.detach` was. The other two classes used this method and `detach_specs` were used.
I think you meant `apigateway` here
This is not a big deal, but I think the intent is to just remove the "feval" part in the error message since that is a different message.
It looks like we should not need the `handle` argument.
(style) please, no space before tabs
I don't think the fix is correct. It should be `!vp->nl->GetItem(g, vp->k++, tdp->Usedom);`
I think you need a `const` at the end of the line to avoid unnecessary `step.name`. Also, it's not used anywhere else so you can remove the `if` here.
This seems a bit hacky to me. Why the change?
I would use `Could not approve the stage because you (%s) is not in the approver list`.
I would use `stats["listen_count"] * 100.0,`
I'd probably have made a new test for this.
this is a bit weird - can't it just have `ececgen` now?
Why is this change necessary?
This is a change in behavior, but I'm not sure why you needed to change it.
What does "on_input" mean in here? Why not just make this `else`?
I think we should check the other `isEmpty()` check here, since the other `isEmpty()`s are already fixed in the same PR.
I think `ZpoolStatusStatusOfflineed` and `ZpoolStatusStatusStatusStatusStatusStatusEmpty` is a better name.
This is not needed.
I'm not sure about this one... the record ID is still in the record file, is that ok?
Is it possible to use the same name as the default one in `lib/lib/`?
Is this a breaking change ?
I think this is not the right way to get the user from the client. The client could have a different client. But that would be more correct.
This should be an optional string.
I would prefer not to use the `@Jsonn` annotation here, as in the other places you used `@Jsonn` and `@Jsonn`
What if the WC entry doesn't have a `Unlock` attribute?
This should be `let recreate(null, 0, source)` I think.
I'd suggest adding the `.TOKEN()` here, as the `.Unenciate()` calls `.Unenciate()` and `.Unenciate()` calls.
Shouldn't we be passing `Config.boltdir.path` instead of `Config.boltdir.path` in the config?
This seems to me like a great way to do this. I'm not sure how this could happen if we have `col_by` that would be a non-empty string (e.g. when `df_or_s`) but if so it would be better to check the error.
I don't think this is needed. It is already in the `CustomProperty` method
This looks like a lot of code, maybe just "if the commit is unknown then it is not safe"?
I don't think we should add a `!=` check here.
why not a short_uid() ? You already have the short_uid() in the OPTIONS and the OPTIONS are not defined as the OPTIONS. I'm not sure if this is the right place for this, but if you have a new OPTIONS you should use this for the OPTIONS you can do if you want to do this (the short_uid() is a short)
I guess this is the only change to use of the `AppDomain` variable.
Should this be a separate field? I think it is not needed.
is this a typo?
"visit_consumer" is not the best name, I would say.
Is this the case for the test?
nit: `setProperty(newProps).sort()` should be in `setObject(newProps, (i)`.
I don't understand the purpose of `TRequestHandler handler` here, and in `io.prestosql.sql.testing.JsonJsonSource.poll.getPayloadPayload`, so I would have expected the test to be updated.
Should be the constant here, or at the very least `ensureensureensure her` is a constant.
Nit: It would have been nice to check whether the value is set. It would also be more consistent and less likely to be a bit more efficient than the `if` statements.
What is this TODO?
Can we have a helper for this? It would be better to use the same helper that's used for the other helper methods.
can we use the logger here as well?
Why the vulnerable Protocol and vulnerable Protocol?
I'd use a logger here, not just the code
Please remove this.
can you use the `ipsets` import from below?
Should not this be `@return` ?
why do you need a separate config?
setting setting setting is hardcoded in the database
Does this mean we have a test to verify that it's not a "cobuild"? If not, why not just make it "cobuild" and set the `AS_IF()` in the test to ensure the path is not present?
I'm not sure if we should use the same logic here, since we don't want this in the future.
@JeremyKuhne I think this needs to be changed to `IKeyValueStoreWithBatching` and `IKeyValueStoreWithBatching` as well
What if the Exception is not None? Should we log an error if the Exception doesn't have no offset?
this change will need a test for that
I think we should not have to change this, we can change the default behaviour. It is not a big thing.
I think it's still a good idea to use the CloudAssetInventory table here, but I guess this is just another branch.
Should this return `false`?
I'd suggest not using `HidepidDisable` as a variable.
Is this check actually necessary? I would think we should do something like `GoQuorum mode = ParameterString.format`.
@sayden, this was causing the build to fail. Is this a problem for the build system?
This might need some additional check.
This is the only way we can have a helper function that can return an error.
I'm not sure about this one, it seems like we should be doing a `finalize` instead, and the `lbann` above are not doing the same thing. The `finalize` should be `final` instead.
This should be `delete m = MolToSmiles(*m)`
I'm not sure about the `fillHandle` change here. `fillHandle` is not used for this PR, so I just left it as is.
nit: I'd probably prefer `toLowerCamel` to be consistent with the other tests
`true` as a default, so we can just use this in `afterTimeout`.
This change seems unrelated... the change seems unrelated.
Can be a bit more specific, why not use `stripUnlearnedColumns`, and replace all the `outputVector` with a `getNumColumns()` in `getNum`?
Is this a change to the current behavior?
I would prefer we keep the `else` here. I think `i.e. because a renewalal is already happening` might be confusing. What do you think about: > Note: the renewal inside at at the end of the list of the `if` statement and making the code more obvious that `i.e. because a renewalalal is already happening`
I think the `extern` is not used. It is used to create a new class.
Is this a change in behavior?
I don't think this is a good idea. The only difference between `codes` is the `id` is the `id` and `FLAGS` is that the `id` is the default. This is the `Error` method that is the `id` and `Error` is the `id` and it's the `Error` method.
I think it might be more appropriate to add an interface for this one to the one that is already added
We should be using the new "initialised" naming for the "initialised" (which is also used in the `_config` file).
Shouldn't this say "Not run the client"?
Is there any way to avoid hard-coding a path without a flag?
We should use this to check if the `err != nil` check was returned.
We can't do this, we have a `TimeStreamStream.abort()` in `TimeStreamConfig`.
Why is this needed?
why is this a pointer?
Why is there any exception thrown in this case?
@contributor/KonajuGames - How does the list help?
I don't think you should be able to use a `attr_reader` variable here. I think it makes sense to just have a method on a `attr_reader`, and then just let the `self` do it.
I would prefer if this could be a different name
Can we just change this to `NewTaskType`?
`getAccountsByType` can now return null. I'm not sure what the right thing to do here is.
Shouldn't the `fill` parameter be removed?
Can we make these `using`s instead of `using`s?
Should not be in `pkg/logs` package.
I think you need to add the `else` case here
Is it possible for the `block.BlockMessageLimit` to be a block? If so, we can just use `block.BlockMessageLimit`
@mrunalinikankariya I think you should be able to remove the X86 code from the system. You can do a XINST_CREATE_jump_reg() call here as well.
This is now a "azure.14" file. We need to update the docs to reflect that.
Line is too long. [83/80]
This variable needs to be renamed to `HidepidDisable`.
Can't we just change this to `this.RenderEmptyLiteral = true;` ?
I don't see why it has an infinite loop here.
Why is this needed?
Please don't use an `else` block.
I think you are missing a `static`
Is it possible to have this as a `const` block and then reuse the same code below?
Shouldn't the constructor be removed from the interface?
I think `uint64` can be removed.
This should be the first parameter in the class.
I'm not really happy about this one - but I think it would be better if we just use the `i2h` field here, and have the other field be added to the `name` field.
`this.strtok` is a little redundant here, as it is in `std::String` already.
This one is still not needed, we can remove it.
please use flush here, as it is used for flush in the same place as flush, it is used for flush in our tests
Can you add gitea copyright line to header (and keep gogs one next to it)?
Why is this error raised here and not just the one above it?
I think this can be `super().().__init__(request)`, since we have `RouteFactory` already there
Can you please add a doc for this new function to avoid the `func` ?
Please, fix this one
Shouldn't this be `.route("/<user_name>` instead?
Line is too long. [81/80]
This is a little odd because it is used to set `async_select_unrequired` to True. I'm not sure what this actually does.
I think this is the wrong term for this. We're testing all the origin names, and not the new syntax, I think we should just test with an underscore with a different name.
Let's also update the `pngscribe` field in `src/podman/podman` to be more specific here
We could add a helper function here, to make sure we're not using the same name for the new invocation.
Should this be `if` instead of `if wf`?
nit: I think we can drop this method as it's used by other places.
I think this is not right. If we want a repo name to have a repo name, we should return an error.
I think this is not needed, it's the default behavior.
Is there a chance we can use the default here, rather than just the default one?
Is this change needed?
Why not just use an enum instead of a hardcoded value?
This will cause us to get the `version` version of the `driverVersion` field.
Should this be checked against the script rather than the script script ?
Why do we have both `xmlReader` and `ReadElementContentAsString`?
We should check for null here. We can check for `String#Equals(String, StringComparison)`
we should use the same logger as the other logger, as the logger.Warningf() will use the logger.Warningf
I'd use `interceptors` here
Why not move this check up to the top of the file?
this is wrong. the `if` here should be changed to `int(p.shard.GetShardID())`.
I'm not familiar enough with this - we should use `tree.put(element, element)`.
This should be a class-level class, not a class-level one.
The local variable `jsonStr` was unused. It is now the same as the one below.
I think we should change `request.args.get('from', 0)` to `request.args.get('from', 0)`.
I would prefer `for (int i = 0; i <= allergens.size() - 1; i)` instead of the loop.
This is also needed for `isNullValue()` check above.
What about this logic? I think the logic in all places should be moved to a separate method.
"... if not cleaned up"
can we call this `roundtripper` instead of `!quic.Config`? that's a bit of a bit more complicated to me.
I think the original issue was that the cftime is a `use` and the `util` is the same as `if ()`, but it seems the wrong place for this check. I'd like to see the actual exception in the `if ()`, not the `if ()` block. So this may not be the case here. I would also expect that the `if ()` block is still needed for this PR, and if it isn't needed, we should probably just have a unit test for it.
Is this a typo?
This was just a copy.
We should probably change the spec to `cancellation` to make it clear that `can_downgrade_instead` and `can_downgrade_instead` are not supported
Is this a change from the current code?
I'm not sure it's safe to assign to a thread_pool, when the number of arguments is a thread, and if this value is an integer, it will be changed to an integer and the number of arguments should be changed (and if the number of arguments are equal). I think you can do a thread_pool.get_local_thread_id() in the first place.
This is the only place where we've had the option `POST.NewSPDYExecutor` which does the same thing, but I'm not sure how this works.
Why was this added?
Shouldn't it be `@Autoely disables` ?
I think you should remove this line
What's the reason for this change?
I think it would be better to use a `Set` property of the `HTTP-destroy` (the `HTTP-destroy` property is used) and we could remove the `HTTP-destroy` property.
I'm not sure if it is the right thing to do here. The `es6-js-export` option isn't available in this file, but is not really a good idea. It might be worth checking for a version of the overrided namespace. For the future it would be good to check if it is a utility for this option.
This is an unrelated change, I don't think we need to change this, since the new `RequestOptions` function does similarly.
Should be fixed in favor of just being `artifact.name`
I'd suggest `return DocIdSetIterator(false);`.
why the master list here?
I think it is still not used any more.
Shouldn't this also append the `nil` check?
We can remove this line.
I think we should leave it.
Please use `varHolder` instead of `inputs` (and below)
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This looks like a bug in the code base. Is this related to your fix?
why change this?
Block has too many lines. [32/25]
This is a breaking change and can be made in a different PR but I am not aware of it.
I think this function should be named `allowOptionalMappings`.
This is a little too generic, can we add an `int` to the `Start`? I think we should add a `return []transport.Transport{o.transport}` or something
I'd suggest a warning here, something like "This is not a good idea, but it should be used in an environment variable or a different name".
I think we should move `tm.lock.Lock()` to here and remove `if watch.nonce == nonce`.
I think you can remove this line, as it's used below
The `tls_insecure` flag is not used in this class, so I'd just remove the `TLSMap        ` and just do it in the `config.js` file and have it in the same file that you can use.
Why did you add this to the PublicHeader struct below?
Why is this in `get`?
Let's add `TODO` here too
This is the bug fix. We're not passing a `terminate_after` value to the `_after` object. If you don't want to set the `_source` value to the user, you'll need to set it to `None` in the `_after` value.
This is a very old code, can we remove it? I'm assuming we are using the old code to be able to configure the new code.
I would not make a new variable. This means we can make the same change as the default.
I'd move it to the `version` section
I would rather see the `find({}` and `raw` methods defined in this file, and have a test that fails with this change, that is why `find({}` and `raw` are used in this file.
Is it worth adding some extra brackets here to indicate that this method is only called from outside of the else block?
I'd prefer to use a function in the `Fix` function that is called from `Gemells_peers`.
This is a bit confusing, how does this work on the other plugins? How could this work on a `getByIds` method?
The previous code was not able to see the term term being used, and it was only used as an integer. I don't see any use cases where the code was not doing the same thing. The problem is that this is only used in the `currTerm` code, but it doesn't really matter for me as it's not really an error code.
Use && instead of and.
I don't see the difference between `Handler` and `Handler       http`. It seems to me that we're not doing anything with `reqlog` anymore.
these tests are failing because they are not related to the PR
I'm not sure this is the best fix. The `pageTitle` and `visible` are already within the string string.
This class does not match the class name
I'd suggest to use the `SingleObserver` class instead.
Would it make more sense to have a separate `success_https` field in `tsu_ts.go` for this?
If this is a different change we can just change the addr variable name to `self.local_port = addr` to match the name of the variable
I think you can remove this line
This test types will not be included, right?
This should not be changed
This seems to be an unnecessary change. Why not just always use the `asStructType` method?
Is it not needed anymore?
How about moving the exception to a separate method?
It looks like the `target` and `target_link` are the same, so I think this one should be removed.
I think we should remove this, since we're just using a "create" name.
Layout/SpaceAroundEqualsInParameterDefault: Surrounding space missing in default value assignment.
I think we need to make sure we don't want the environment override to default to true here.
This is the change that will cause issues when we try to disable the arguments for the same package, and we will have to fix it later.
This test is failing because `ReadToEnd` is now called twice.
I think the `reminder_email` can only be used when the last struct is not enabled (and the `try` block above).
Please use the same value for all the `EXT_SIMD8`s.
Should this be a little more specific? `unitParentDomain` is superfluous, but `linkToParentDomain` is superfluous.
I don't think this test belongs here.
Can we make this `prefQueueSortOrder` instead?
I don't think this is used any more
`__dirname` is an array of the `makeLazyLoader` object, so this should have a `const dbLoader = makeLazyLoader(`
I think you need to remove this. It's not really needed in this file.
`<>` part is not correct, since this will only work for a single table. I think that we should be able to keep the same logic.
Why do we need this check?
Why was this moved?
I'm not sure that this is what you want. If it's the best we could move to the `result` package, then we don't need it in the `result` block.
Redundant `self` detected.
can we use the log.WithError instead of the start?
@zcbenz this was a bug. I had been using the version in the version and it wasn't working before.
I think this is a leftover from debugging now
I would use `@world.reporter.report(examples_count)` here.
@tristantarrant I guess this change should be reverted.
You should just use the `Action().LoadRegRange(int(marksReg), macRewriteMarkRange).`
This needs to be renamed as well.
I think you should check for the `config_file` value here instead of `instance['vm_name']`, right?
This is a little confusing since the message in `log.go` are being logged in. What about something like: "Aoring console to functional state: %v\n" ?
I think this should be an abstract class instead of an abstract class (and it should be a separate PR), otherwise it might be a good place to add a new one.
Is there any way to test this?
This method is not used.
The changes in this file need to be reverted.
I'm not sure why we need to change the state of the filter here?
Line is too long. [81/80]
You don't need to pass `null` here.
This import is used to avoid the duplication.
`as_json` is a `dict`, not `admin` right?
This should probably be in `explorer.db` since we only use it in the tests, right?
I would suggest to call this `_` instead.
I'm not sure what `set_value` was here.
Can we keep these as separate groups?
I think it would be better to just use the `errValueValueNotAString` variable rather than using `errInvalidGitHubRepo`
Is `flag.getString(i)` still working?
The commit message needs to take care of it.
why do we need the `--erun` flag here?
I don't think this is right either. I'm not sure we should be using the full `pip install`. What do you think of adding a check for that in the `if/if-else` block, and using it as the default value of `pip install `pip install `pip install the `pip flakiness`?
This seems strange with `.to_s` in the name. Is that correct? I think it'd be nice to do `.to_s` as well.
What is this change for?
Why this ifcationCompute is no longer required?
Should this be a `_` instead of `len(0)`, since the code is always called when the overload has spaces?
I think this is what we want, since the `startTs` property has a `class.toString()`. I guess it would be good to have it also in the `class.toString()`.
We need to make sure we're not setting this to `undefined` when the URL is assigned to the `createAttribute` state.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Can you use a descriptive name here instead of the system property?
I don't think this should be removed, it's already in the interface
we don't need `approve` any more?
could you explain the reason of this change?
remove the port from the configuration.
Should this be added?
Please remove this line.
Is this a different PR?
This should be handled after `linkedSource` below.
this is the one in genesis/core/v1/azure/core/v1/azure/core/v1/azure/core/v1/azure/v2/azure/core/v1/azure/v2/azure/core/v2/azure/v1/azure/v1/azure/v1/azure/core/v1/azure/v2/azure/v1/azure/v1/azure/v2/azure/v1/azure/v1/azure/v3/checkv2/azure/v3/checkv1
Please use `../' . $symfonyDumpFunctionPath` instead of `../' . $symfonyDumpFunctionPath` for clarity.
If you're going to do this, you should add a TODO in the `if provider != nil && err`.
Please add a return type to pretty_list so people will have to add a new header header here.
Is this the only version that needs to be added to the new version of the Dockerfile? I'm not sure if that would cause the problem if the user is using a Dockerfile to change the default version in the Dockerfile, but I think it is a reasonable value to change it. Also, if it is the case, then I'd just remove the flag entirely.
`is_being_called` returns `node` and `parent`
I know you're already doing this, but do you mind just checking the value for 0 and the default value?
I think this should be `public void testOlderThanTimestampWithPartitionWithWhitSpace()`
Could we add some docstring here?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why not use the default value for `cfg.Genesis.KamchatkaBlockHeight = 10`?
Should we make this `1.0`?
Isn't it a project?
I don't think this change is right. We need to do a validation check on the operation that is present, and then we don't have a case when `fullResponse` is undefined.
I don't think you can do this. You can use `is_lowercase` instead, as you already had `disable_lowercase` in the package that already uses it.
@smarterclayton do we really need to have the console in place in this case?
Isn't it better to keep the old constructor as a pointer?
This is a bit confusing, as it's a "template" thing.
Should this have a migration or something to explain in what the user is doing, or is it a user?
I'd prefer to have `import sqlalchemy` as a `try` block. I'm not sure why you had it.
I think you could just use `if exp.flowRecords.ValidateAndUpdateStats(key, record) {` here, as you know the exact same code is in `klog.V(2)`, which would return an error.
Please update `u2122` and `u2122` to match the other ones.
Why did you change the order of the parameters? The other parameters are a bit different, so I think we should be able to remove the 3.1 at the same time. Also, we should keep the same order for the new parameters, and make sure that we're not using the same result.
@kargakis I don't understand why we need a LogHeader1? Isn't the behaviour that you're calling LogVerbose with the same name as the LogHeader2? If you need the LogHeader2, you could just call LogVerbose with an LogHeader1 and just pass the LogVerbose to LogVerbose.
This test is failing because of the `.toEqual([[0, 0, 11, 0]]` check, and the `.toEqual(0, 0, 11, 0]])` checks for the number of values.
I think it should be set to true by default, otherwise we don't need to set this to false, right?
I would remove this line.
Please remove this import
can you make it a part of the code?
Does the name still need to be a `Interface`? I don't know what the name of the service is.
This is a bad change, but we don't actually want to use it in the core, so this file should be changed.
This can be done in a later PR, but the `if` branch is not correct.
@zjffdu I think this is what was there before?
This will be a bit more generic, I think...
this needs to be torch.add_^.Tensor
This is the one I don't think this is right, the `!` should never be `null`. We should either have an `Optional` or remove the `where(status: 'actionable').first.user.email_address` call here or remove the `is_approver_email_address` call.
Why do we need this?
Same here, we have `Internal`, `HttpParser`, etc.,
You can use os.environ['ALLOW_INSECURE_CATALOG_ACCESS'] instead.
I'd suggest moving this to `struct cali_tc_state_lookup_elem()`
This is an error and should be reverted
I think this can be removed.
This function is a bit misleading as it will fail when calling `data_format`, and it will raise an exception, because it will raise an error. You could also just write: `InvalidDataFormatError(...)` and `data_format(...)`
This should probably be a private method to avoid having to create an issue for the nullability of the class
Shouldn't this be http.paymentType()?
This won't work. `0x420000000000000000000000000000000000000F` is the default version of the `0x420000000000000000000000000000000000000F` context. The current solution is to allow the `0x420000000000000000000000000000000000000F` context instead of the `0x42000000000000000000000000000000000000000000000F` URL for the same user to run.
This file has a couple of lines above, `__file__`, `llnl.util`.
Could you please add a space after the `if`?
Remove this TODO
This should be `WireguardHostEncryptionEnabled && configParams.KubernetesProvider() == config.ProviderEKS`.
This should be in the `needsAfter` struct, and then you should probably also add a `bool` field to the `Status` field in order to make the value more explicit.
Let's not have this in here, as the default value is a string that's not a valid value.
This variable can be removed, as we already have the method above.
nit: can remove the empty line.
Nit: I'd prefer if you made this a function or something.
I would have expected this to be a function. I'm also not sure it makes sense to add a check in the function that will be called with the original behavior of the function.
I would have just made it an enum value, not a list.
This is the only change I think about. The `if` condition here is a bit weird, maybe the same condition is for the `if` and `else`?
Style/MutableConstant: Freeze mutable objects assigned to constants.
I'd be tempted to move this check to be part of `LOG.error` as it is the only one used in the `create` method in `build()`
I'm not sure if we should use `symbol.toLowerUnderscore()` here - as the method already returns true, it's only used once.
I think you can get rid of the else clause as well
I'm not very familiar with this code - is it a valid change or something?
Why is `keys` nullable here? Should this be `this.assertEqual(val1, None)`?
Please remove all the changes from `gmbal` to `ManagedObject`
This is a breaking change and should not be necessary.
This should be a separate PR (and probably not, I can do it as part of this PR)
I'm not sure if we can just do the same thing. I don't think we have an `SpendingKey Address` for the account.
Could you rename "selectCastSink" to "stopCasting"?
This is going to work without a `__all__` error, but I'm not sure we want to include any files in the future.
Shouldn't this be `ContainerInterface`?
Can we just remove this `private` variable and just call it everywhere?
you can just use `.eslintrc.current_user(signal)` instead, and you can get rid of this function altogether now
Shouldn't this be `this.getExtension(path, (error)`?
Why is this not nullptr?
nit: this is not needed
This change seems unnecessary?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Nit: I think you can just `self.assert_eq(pser.argsort().sort_index(), kser.argsort().sort_index())`
Why the `Uri` variable and not just its `Uri`?
I'd just make a `Set:` and a `Set<object>` and `Set<object>`. I'm assuming this is an internal API for us.
do we need to make this loop loop? Or is it something that the user has not trying to parse?
I'm not sure I like the name of the model. What if I remove the `User_user!`?
This should be a `getAs`.
This change seems to have been added for me, but it was just a mistake in #2540.
I think this should use `String.format`
Can you explain why this is necessary? Is it because it is a property?
I would use `protected` as it is only used in tests now and is not used here.
This test is testing what the '1' is here, right?
why did you remove the `_`?
How about adding a new `new` type?
We should probably have some sort of `running` type in here to ensure we're not using any of the other attributes.
I think this change was intended to be removed
Please use the `unless` statement here.
We should remove this class entirely
I think we can remove this check. It can be simplified to `if (this.getMetrics == null) {`
Hmm, this is fine, but should probably also be a warning.
Why the space after the colon?
Should this be `width: width * 2` instead?
I think the code is wrong here.
This is an API break, I don't think we need to add an `True` arg.
I'm not sure this is the right way of saving our `SUGGESTION` to be `WARNING`... if I understand correctly, the `WARNING` constant isn't used, and the `unlink` constant will only be used for every request. If so, the `unlink` constant will only be used as the `WARNING` constant. If the `SUGGESTION` is used for the test suite and the test should still be the first time.
I think this is the only usage in this PR.
Maybe `params` is a more common place for these? The metric names are not really related to this PR but it might be a little confusing to me
why is this test necessary?
"of" is unnecessary.
I think we should just check if this is true. It's a little strange if we do return emptyString.
Isn't this public?
Is it possible to use `NumOfCallFromPayloads` here?
This import is not used.
You can't change the signature of this class, as it's only used in the `init` method.
I think this is not needed because `s_thread_pool_size` was already added to `s_current_reduce_size` and `s_thread_pool_size` is not used anywhere anymore, so we can remove it
If we're going to be adding a new field we can just use a `null` value here, right?
This was just a minor bug, but it looks like a different commit.
We should probably keep `", LOG.finest(String.format("Adding %s %d times", caps, info.getMaximumSimultaneousSessions())))` to be consistent with other places
I think the `name_id` argument should be `sql.first`.
Should we make this part of the API and then pass it to the interface?
I think this should be a `throw new ParameterException(.., "Current all all data from privacy-public-key-file: " + e.getMessage(), e);`
why is this removed?
I would not add `x` here. It will be a bit easier to read if you just set `None` to a string.
The other include of `C++` files are in this module. Is it needed?
Should this be `OptionalOrMethodInvocation` and not `PreferCollectionTransform`?
I'm not really sure this is the best name for the fileDictionary. Is there any reason we don't just use an `FileData`?
What if we called this `sys.version_info` and then use it everywhere in the `python_main` file? Just trying to understand the `vic-machine` in the test suite
This is going to be used by tests, and I would not add it here.
This is the only change in this file.
The name of this file is not quite right. It should be `lodash` and `lodash-`.
The binary binary can be removed.
I think it's still fine, but I wonder if there is any way to make these checks the `Walk` call?
This is the only place I'm seeing in the past, so I've removed the TODO and changed the other code to use it in the next PR.
I think that this is a no-op, but it should be in the other ones.
Why do you need to set `TaskArn` here?
I think this spec could probably get moved to another spec, since it's used in the specs, so it's not necessary here. We can probably make a spec like this for example: `it 'does not raise an exception when querying multiple times' do.to_a(end, "when an exception when querying multiple times' do.not_to raise_a)`.
why did you add this?
Do we really want to make it a `arguments-out`? It seems like the order is used for order is in the order order, so we could use `complete_to()` instead of `arguments-out-of-order`.
I think the `coordinatorLayout` should be removed from this list.
This seems to be the only place where the `portFromHostAddr` method is used. I think it should be safe to move the code to the `ipFromHostAddr` method.
Why not use a `const` tag here?
I think we can move this into a constant.
I think this is the wrong solution. We want to use `metav1`. The `metav1` and `metav1` don't really need to have this package.
I'm not a big fan of having a single model, since the method returns a constant.
@widget is not a boolean, you are missing a return value
I think this one should be moved into `chunk_defaults.h` and `chunk_defaults.h` as well in `#define FS_CHUNK_SIZE_DEBUG_MOD`
Please, fix the indentation
I think it would be better to log the `dependencies = set(...)` in `create_dependencies` as well.
Please don't use int escape here.
This is not needed since it only applies to one account. I think it is a good idea to set the `Accountable` flag in `server.py` and the one in `server.py`.
This is a bit confusing. I don't think it's necessary to use a `str` here because `str` is the default.
I think this is a leftover?
we should add the `name` field to it, so it's consistent
Should be `s6::s2`
If the new error type is `None`, then the `add_VIOLATION` will throw an error if the `sys_engine_block` is set. If the error is thrown and the error is thrown, the error message is not present.
Can this be removed now?
This should probably be `fromConfig(GenesisConfigFile.getMainnetConfigOptions(), PrivacyParameters.DEFAULT, false);` for consistency with other methods in the class
This is the same as the one above, no need to add an empty method on the decorator.
is there any advantage to using `--verbose` instead of `is`?
We should add this to the `setup.py` file.
Where did these annotations come from?
I think this is not the right thing to do, because the old username is not actually set by the user. If the new username is empty, then this will never be empty, because the new username will not be set.
Is this a debugging cleanup, or should we just set the `dispatch` in the function and then remove the `setPropertyID` here?
I'm wondering if we should also remove the assert in `Server started` now and keep the original error. If we can, please add a `TODO: add an assert in this case.
This test is failing, but I don't think we want it in the test
`Metadata` is not an error in the test, so it might be useful to call this `index.BuildMetadata ` and do the same in both cases
This method can now be private.
Please don't use wildcard imports.
this is an API break. I would just do it for all other components.
This line seems to be deleted.
Is this the correct type for `getFingerprint`?
> When block was updated in the ledger, block was updated in the ledger.
The `json` tag should be `count{}` not `count{}`
Can we make it `0_0.627_776`? It's not really needed, we can use a different name for it.
Would it be better to use the constant for `repositories_code` and just `ALL_FEATURES` to avoid the confusion?
This import can be removed (as it's above)
Do you know what the difference between "name" and "name"?
I'm not sure if this should be a part of the API? Or are they defined somewhere?
@bparees this may be correct. I don't see any use of `Yield()` anywhere in the code.
I'm not sure why we are using the `diagCollector` type here. It seems we should have a `KsqlEngine` class that we should have, but I'm not sure about it.
Is the space needed here?
You should not be using the path path here, you just need to update the path for all the tests.
Is this change intended? It looks like the only place it's needed is when `subj` is used.
Why did you move this to the top of the file?
You don't need this class anymore, it is in the `Chenes` package.
This is not right. The `!added_new` condition should be removed.
I think we should not change it. If we have a new `xe` property, we should use an attribute to filter it.
Why the change to BftTransactions?
this will fail if `search_is_crawler?` is `nil`
I'm assuming this is a very large number that's not supported on all versions. What do you think about using `_set_unit_to()` to ensure that the file doesn't contain an exception?
This file should be in the same file as in the other files.
I'd prefer to use `isConnected`, `isConnected` is a better name
remove empty line
I think it would be more efficient if we could use `fields.name()` instead of repeating it in a field.
Should we also add `protected Scorable leaf collector */` to this method?
I think this is a little confusing as it will be `index_clip` even in the `merge_config` method (which is what we're doing with), but the `merge_clip` is a `dict`, so this is not needed.
Line is too long. [83/80]<br>Use the new Ruby 1.9 hash syntax.
Why do we need a separate arg here? Isn't it better to make it a bool? If so then it would be clearer as `isNUFile(bool, "as e.g. `hasBufferedEvents                )`.
We need to make sure this gets called by `NewRandom` being a `WorkspaceWorkspace` here. I think we need to update the call to `build_New()`.
Is it possible to get the `PrivilegedCapable` from `docker` to `true`?
why remove this? you are removing this will break some existing config changes
Is this a required argument or just using a specific version?
@matt-gardner Is this the best place for this? I'm not sure what `tm_cpp` is about. If you want to change the default, it's the default that is the same as `tm_py`
Why are we adding this variable here and not just in the original PR?
should we rename the namespace to namespace as it is now the name of the service? (it seems a bit strange that we have some of the service and the namespace?)
I wonder if it would make sense to have an emptyWithNull in the static class and avoid an emptyWithNull in this class?
I don't think we should be calling `parse.local` everywhere. The local key will not be the same as the default case.
This is the default behavior as well.
This is only used in the `if` statement below.
Should not be part of this PR, but we should keep the package private too.
Would it be better to just remove the `practice_url` block altogether?
Why do the training training here and not just ` DatabaseNameKey`? The `Interceptor.Name` and `Interceptor.Name` need to be passed to the layer type.
`wait_for_event` is also not used anymore, right?
We should probably be using `arn.staging.name` here
I would prefer to have the applicationVersion always defined as a constant, to match the other metrics metrics.
I am wondering if this should be called `context.createTaskQueueResponse(nil)`, and in all the places where we return an error (the function `local.createTaskQueueResponse()` returns false).
I would move the check outside the loop
I don't know if we want this to be an explicit `in` or something.
Should we also include the `using LayoutUseCheckAndMessage` here?
Why was this change necessary?
Is there a reason why you would expect it to work? I think we could just use the `execute.as.user` as the default
What about `DictionaryUtils.ACE`?
We should test only support 'hide' for batch size of 1?
I wonder if it would be better to have an `setSignedIssuer` type of `BaseRaw` for this, and only set the `SelfSignedIssuer` to `true`, and just have a default `setSignedIssuer` in the `BaseRaw` section.
Is there a specific reason for not removing it?
I don't think the `.Contains` is necessary.
This should be a public static final getter.
Was this causing issues in the code? I think it was just a typo and was not related to the PR
This method is used only in one place, but I think it's better to make them final.
I think this is a bit of a breaking change. It is really unfortunate to have this in a public API and it seems like we can expose the type as the name.
I think it should be `java.lang.import json`
This is a no-op, but is not a good candidate for `nil`
I think you should also add this flag to all of these public methods.
Why do you need a separate constructor for this?
I'm not sure if it's worth the context of this PR, but I'm not sure what the function is supposed to do, or if it's only used in one place (if there are any instances) it might be worth to have a method in the API for it.
I'm not sure why this class is necessary, and if there are any other types of the properties in the class, we would need to be consistent in what type there are.
Is this intentional?
I am not a fan of adding this here, as it's not really a deal break break. It's a very common thing, but I'm not sure what the best option is here.
This is a pretty weird place to do this. You could just use the `js_is_valid` function to get the value that you need to do in the `if (retcode >= 0) {` block.
you don't need to define anything in the `if` statement, you already have that in the `if` statement, it will do nothing
This is not really necessary, since the exception is already handled in the test suite, and it is already checked by `seconds=0.00`
You can use `@options['forward_agent']` instead of `@options['forward_agent']`.
Is it not used?
Why was this line changed? Is there any reason for this change?
is this a typo? i would expect the code to be in *any* column_label in *any* column_labels
This should probably be `ECS_FTEST_FORCE_NET_HOST`
why not use `module_value`?
Please rename `toData` to `to 22Delete`.
What happens with this? Is it the case that we don't have a `dtype` and a `type` value? I'm wondering how to deal with it with this.
Is this needed at all? If not, can we just move this down to the controller?
nit: unused import.
Can we assert here that this is not a test that has no test failure?
This was a bug in #8327.
We don't need to keep `transfer_primary` here. The `run` function is used in the `clipboard` and it will be removed automatically.
No need for this. The default is 1, so this is 3.
This should be a separate PR
I don't like this change, it is a very good idea to change it, as you've added a reference to your change in master.
Can we use the new `CD_` prefix here as well?
Can you add a TODO here for `add_add_OPTIONAL`?
There is no need to include the `code` field in the array, it's always the case.
Can't you use a regex for this?
Would it be worth adding a helper for this to create and return the result here? I think the return code should be inside the before_create method.
I'm not sure how this works - if the globalRate is a valid value, the global is a valid value. This should be set to `1f`, not `2f`. I'd suggest to add the global in `2f` as an option.
I would have used the new function `x86 Program Files.txt` instead of just `x86`. It seems like this would have been the only place this was used.
I don't think we should be setting this to `true` - we shouldn't be using `props.dispatch` to build a different widget, and we can just set it to the `moveToFolder` value. We already have `props.dispatch` in the `Based`.
Is this related to your change? If so, I'm wondering why this is needed?
I think it's not the right idea to add `@var bool Search...`
@mmaxim do we still need `FileUtils.isPreviewAllowed()` here?
why is the null check removed? I think the null check should be changed to just the `return getMethodConfigMap().get(methodConfig)`.
This should stay as `info` rather than `finest`.
This is a breaking change as the service is not fully configured. The `PublicLoadBalancer` field needs to be removed from the config file.
this seems to be the fix, can you make it explicit?
Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.
This is also a bug that the db capacity was a bit different, and the db is a bit different.
Isn't this supposed to be `unlock` ?
This should be a try-catch and not a try-catch.
I think it's fine to just do `!hasUser && bundle.getBoolean(IS_GLOBAL_STORE) || ...`, right?
This is not a good idea, but I'm not sure if it's a good idea to include the test, and I'm not really sure if that's the right thing to do... I would prefer to have it be a simple `handle_textChange` for the time being.
I think this should be `getChildren()` instead.
This should stay as `pyw -3.7-32` and the other one below.
I would prefer to keep all the changes here, as it's not related to the issue.
Why this change? Isn't the `ipamNetworkConfig` already being defined somewhere?
Unrelated change.
`nix-instantiate` is the preferred name to me, it should probably be `'nixpkgs-E'`.
You removed all of these. If you remove them they can be removed.
Should it not be `errorNodeCreationIPFailure`?
Please don't remove the public constructor.
I wonder, should we have a unit test for the new case?
Use the new Ruby 1.9 hash syntax.
Is this necessary?
`None`? I think the only reason we are using `None` for stats?
I think it would be good to add `listenOptions.Add(new ListenOptions(Constants.DefaultServerAddress))` here as well.
The `.h` is already in `AIN::fastdds`.
This file should be renamed to something like `[assembly: BenchmarkDotNet.Attributes.AspNetCoreBenchmark]]`
This will break compatibility with existing files, but I think it's fine to just change this to `name = "name"` as it will not work.
This should be a separate commit.
Why do we need this catch?
Hmm, this is a bug fix. The `==` should be kept as long as it's not part of your change.
Why is it `http` or `http-STRING`? Shouldn't we check for a `writeError`?
I think it's better to add a `*SecretEncryption` property that is only used once, and instead just use it in all the places where we use it. The `*SecretEncryption` field is used in the context of `*SecretEncryption`.
With the record, we'll want to keep the `Samples.AspNetCore 1` as we do for now, as we'll be using it in the Kibana context.
`getAtomwithAtomAtoms` should not be used in this function.
Please use `const descriptor_base<task::clustering;`
Not sure I like this. It seems to me this is the only one that is used in this PR.
This test was failing to test with different layouts. I think it would be better if we didn't change it to just change the test, but I'm fine with that.
Shouldn't we use `0` for all caps of the class?
"The default is the number of available CPUs"
this could be changed as well
We should probably add a `RunTracker` to this log message.
This test is not needed because the `Object.getPrototypeOf(prim)` returns `Object.keys(...))`, so you don't need to use a new one.
I think this should be `diff.angfs( completly):`
Missing space around string interpolation detected.
Why do we need to initialize the card here?
Shouldn't we also add the `before_action` in the `before` section?
@Scottmitch why is this needed? It is not the same as the `instanceof Run` check.
@agramfort can you check if this was intended to be a valid number of bytes?
This is just an optimization.
This line is a little bit long
Did we intend this to be `master` or `master`?
can we just delete this and just call it `mysqld.sock >& /dev/null`?
I'm curious what the difference was when we update `has_many :235, dependent: :destroy` ?
I think this is a good thing. The first condition is `destroy`, but if it does, then the first `destroy` is `destroy`, then the if (stream->tunnel != NULL) and then the if (stream->tunnel == NULL) is `destroy`.
Is the `Enable` part of the code intentional? It seems like we're doing the same thing for the `Enable` and `enable`?
why change the value of `other`?
Can we remove this and just do `metav1.k8s.io/client-go/kubernetes` instead?
This is a pretty generic way to do this, and the code above would not need to be moved. It's also a good change.
Can we do a check for verdaccio.version instead of verdaccio.org? and check only the other cases in verdaccio-version?
Can you use an empty set instead?
We have an extra `extraProto` in here and the `CustomProto` in the `distributor.org/podman/podman-service/unitunit/podman-service/unitunit/org/models/podman-service/org/models/google.example/unitunit_service_org.test.py` files that take a configProto and a `productConfig = GapicProductConfig.clearclear` when we have the `extraProto` in the configProto. I think we should just move that configProto to its own configProto and then pass it to `pod
This is not a valid integer, but if you want to use it, please add `breakPos` to the output.
@mitchellhenke Is this intentional?
is this intended?
Why not just call the method `getInt(false, $result)`?
Please revert these two changes.
Please don't use import from line 152 to make this more readable
This should be removed.
Why is the [' ['x', 'CONNECTION'] never defined?
I think we should not change this.
I'm not a fan of this import, just curious, does it actually work for any reason?
@mfojtik, I think this is the root cause of the issue we did for a while.
This is not a test, but I think I'll just leave it.
It's better to use the `#show` pattern in the form, like you did in `form.id`
@jaeilepp any idea why `1` isn't `true`? It looks like you can get rid of the `tr_mul` check and do `tr_mul` in this file, and you can just do `tr_ex` instead.
I think this could be renamed to "body", not sure what this function is
We have an issue about the `GatewaySolverEnabled` value. It's a good idea.
This should be removed. (Or did it happen?)
I'm confused. Is it actually actually not `no_CHECKING`? What's the idea behind that?
`this.ieService(service)` might be confusing, as it is a bit confusing to have a default of an empty string
I'm not sure what `*bpf` is supposed to work here. `*bpf` is only used for `*bpf::unique_ptr` so I don't think this is a good idea.
Should we make these `apiutil` labels and make the package private?
This seems like it should be `github.com/spiffe/spire/pkg/common/logger`
Is this a breaking change in the public API?
I think this should be moved to the `SetEnvelopeContext`?
I think this is fine for now, but it might be worth adding some extra flags to the `<amp-story>` section.
This is still a valid fix. It seems we should use a `_` prefix here.
It is not clear to me why this is necessary but I would prefer to see it in a separate commit.
This line was not required.
I'd prefer to keep `\n` and `\$/g` as the name.
`values()` seems more readable
is there any reason we're not changing these?
Why is this needed?
`config` is an abstract class, and it is not really needed.
I think it is not necessary to add a new location location to all the clients that we can use. We should just add an option to the `<custom>` tag and add the `<custom-elements-es5-adapter>` tag.
this is a bit of a hack to me, it seems that in a different file, it should be "LanczosWindowFunction" instead of "WelchWindowFunction"
This was probably the problem that the changes in this file are still passing.
Can we have the conversion for `b` and `b.b` as well as the same for `malloc`. It's not used in this PR, but it's used for a couple of things that should be used for the other changes.
Can we have `GenericTypeArguments` type as an `int` type? We should probably make this configurable, e.g. `SimpleStructWithProperties` can also be removed as well.
Missing `@: mark`.
Why are you removing `StringValue><!` and `StringValue` objects?
I'm not really sure this is necessary - the `elastic.SetSniff(false)` will be `false` for every other case.
I think this can be replaced with `if (!cd.SourceSnapshot && ok) {`
This is a very handy API change, but I think it's better to move it in a separate PR, and then remove it. The other option is to move `this.provider` to a separate `private`, and call `api/vic/testing-resources.js` in `build/core/utils` and pass in `this.authProvider` directly.
It looks like you're missing a `default` in the `close()` method above.
Is this an unrelated bug fix? Seems like the wrong place to put this. The user might not want to write a copy anymore.
Why do we still need `is not required` here?
Is there a specific reason for moving this line up ?
Why does this not need to be modified?
Same thing here; I'd expect `HttpClient.Exporter`.
why not have these in the interface
this is not correct, but `arg2` doesn't really need to be a `2` (as the original code already have it).
I don't think these changes are necessary?
This file doesn't seem to be used anymore
This is not a big deal but I don't think you want to remove that, it's a minor cleanup.
I don't think we should change this, it seems a little bit complicated to change
You can use `GetItemLayoutId` to avoid a similar change as in `ViewManager`, just use a new one.
Is this really the same as in this PR? It looks like you are just using `__str__` for the other types?
Why is this needed?
I think this is the only change that is required to have a check for `uint64.length` in `buildbuild`. This should be reverted.
Why is it necessary to return `true` here?
This should be a hash (dictionary)." instead of a hash)
I am not a big fan of the `statusQuery` field here.
I don't think the extra surrounding surrounding `RECENT_LISTENS_KEY` is needed.
You need to add this to the other PR as well, right? Otherwise you'll get the same error as the other file.
<!--new_thread; commit:3e9c8b8d3c3; resolved:0--> Which of these is really necessary?
I think we should remove `Singleux` from `Remux`, because this logic can never be wrapped with the check on the `session.TranscodingInfo.IsVideoDirect` check. I think this logic is redundant because `TranscodingInfo.IsAudioDirect` is already in `Singleux`.
This should be `s + quickly`
Can you also update `addon_xdev_api` to `addon_xdev_api`?
The default is 5s to 2. It's the default.
I think the `before` block can be simplified
There's an empty line here between function and |
So we are still creating new field `map[string]string` on the type `map[string]string`? Is that really what we want? If so, we might want to leave it as is.
Is it possible to avoid this change?
I think we can use a ternary here.
I think you need to change this to `ns_const char`
Can we make the file _right_ option more explicit and more specific?
This is wrong, since `_convert_fs_path` will only have the same `bytes` instance. You can use `bytes.fs_path` directly, so you don't need to modify `_convert_fs_path` below.
I think we should just make the interface `IHttpHeadersHandler`, since I'm not sure what is going on.
Is this really necessary?
This is not a pattern, but it should be `MarkHidden`
Shouldn't this be in the `NumberPage` class?
I think the changes in this file should be reverted. The changes were intentional?
Should be changed to `b2d48a8a8715dd31de2af75b0aa04c0c0091fa3c/stepfunctions-local-patch`, too.
Is it possible to have a constant here and have a constant somewhere?
I think we could remove this, as it is already added by the `_` in the if statement and not here.
Isn't the null check for `thatItem.LibraryKey` still needed?
what is this function used for?
This is only used in a single place, right?
you can now just pass `--uigi` directly to the constructor. It's a bit of overkill, but this is a change in behavior.
I think you missed to revert these unnecessary changes.
I think it might make sense to put this on the `else` block since we're still using it in the `if` block.
this shouldn't be here, the default value of `True` is `False`.
can you use a constant here instead of leafDefault?
I think it should be `volatile`
I'm not sure about this one, it seems like this should be an array, rather than a list of strings.
This seems like a weird thing. What happens when you call it instead of just calling a new function?
nit, can we put the `let` in a `before_action` function?
Seems a bit unrelated... just remove
I guess the idea behind that we should change these tests to make sure `Server started` isn't being used? (I can't think of a better way to check, just like we did for `/Server started`).
Is there a reason we are using `textArea.innerHTML ` instead of just `string.value`?
I believe we don't need to wait before we get to run before we start using an go.
@Jjagg - I think we need a better fix in `info.go:3000`. It looks like there is no need to use the `logger.go` file in the test - I'd rather not run this test on the tests.
I'd prefer to see this as a separate commit to the PR.
Line is too long. [86/80]
I'm not sure this is needed, since the return type of `isinstance` is already `@since`
don't need it anymore
The syncer.chainStore was a bug. The syncer.chainStore was a bug, so we can just change this to syncer.
This should not be a `static`...
@cramforce is it correct here to `misc.MinimalLineEditMixin` ?
I would prefer if the server doesn't use it yet, since it is the default, it will not be able to do this.
this is the only real change in this file that is not part of this PR.
This is a breaking change for the public API. The `Collections.emptyList()` is already implemented in `src/java/org/infinispan/test-types/resources/` and `test-java/org/infinispan/test-types/test-types/resources/`
Is `Cartuns2Flag` still necessary?
Why did you need to pass the constant here?
Is it safe to remove this import?
(same as above - if it's a private file we don't need to care about it, we can just use an `isinstance` check here too.
Why this change?
Is it not required for the new tests to run in a different folder?
These changes seem unrelated to the PR.
I don't think this is a valid fix, since it's in a different PR.
Please use `std::string(string)` here instead of `std::string("key.")`
Is it possible to remove it from the different PR?
I'd rather have a method to make sure that the method still works.
@smarterclayton do we need this line?
Why not use `componentNamespace`?
@jridgewell This is a very odd change, we should have done a similar one as for the others and then not use a different one.
this is a change of behavior. I think it is more of an API change and we can fix this one
Why do you need a `import *ibl_trial;` ?
What about the `pthread_join()` check below?
Should we also do `user.getProperty(ZMSConsts.ZMS_PROP_USER_DOMAIN, ZMSConsts.USER_DOMAIN)` and the `user.getProperty` calls in `Object.java` as well?
Is it needed ?
@jmhooper During @rileyajuine-ho is ok, but i don't think this is true anymore
Why do we need to change the order of operations here?
Can you also add the `.rb` and `.rb` at the end of these lines?
I would have named this `COUNTER`.
The formatting of this is not really correct. It's a little strange that it's just used by ` ErUseize`, so it's easier to see what the formatting of the expression is doing.
please add it to the doc and make it consistent with the code above
This should be removed.
Can you please add a new column to the new one so that we can add a new one?
Why is this needed?
I think you have a bug here. You could use a constant here.
I think the removal of `superIDType` is now unused, and the `superIDType` should be removed.
why not use `artifact_id` here?
I think it is a good habit to pass the stages to the `genPool` instead of the stages, so we can pass in the stages here
can we remove this?
Please remove the whole `T` statement.
Do we still need this?
Do we have a test for that?
We don't seem to be using the `spack.go` in this file.
This is a breaking change. We're just adding a default parameter here.
I am curious why this needs to be an optional call to `Long()` - it looks like this cannot happen in the `Long()` case.
`f` at the end of the list is not supported in IE. I don't think it's necessary to do it here since you are using `seconds('Sequence', 'CLASSES')` below.
Why did you change this?
Is this a bug fix? Can we use `isArray` here?
This doesn't seem to be needed anymore
I'm not sure about this. The new release is still a good idea for the new release. I think it should be the one for the JUnit4-junit.
This is a change in behaviour.
@smarterclayton do we want to keep the `session.rollback()` here? If so, we should just remove this `except` statement entirely.
I think this line will cause an infinite loop.
What is the difference between this and new argument?
should this be `hsh['verified']`?
Do we want to make sure the testutil.RandomPort() is called for each testutil? Or should we keep it as the testutil.RandomPort()? I'm not sure why we need to do it.
This argument should be set to `True`.
this is the actual method, can we just have a `!` here? that's how we do it in a bunch of places in this file
Should we check the returned value if the only case is the default (e.g. if it is the case) and not the user?
I'd suggest to move this to the top level, as this is only a top level (like in a generic generic class) and it is used in a different places. We may be able to just call this `apis.Condition` and have it get the top level condition and call it in a separate function.
Why not just have `memory.Allocator`?
This needs a `countQuery` parameter as well.
This is not needed anymore.
I'd just return `_in_memory.length == 0`. The check should only be done if you want to check if the `isinstance` and `_unloaded.exists?` are equal or not, if `_pipeline` is set to true, then you don't need to check the `exists?` check.
I'd rather have a function that has asked us to skip settings file manipulation, then check the set of settings file.
Style/SymbolArray: Use %i or %I for an array of symbols.
Is it correct to call ` inspect` here? I think it's a good idea to remove `const { inspect } = process.env.MONGODB_URI || process.env.MONGODB_API_VERSION = process.env.MONGODB_URI` since it's not used anywhere else.
This was an unrelated bug fix.
You could use `shutdownHook.isNotEmpty()` here, as it's already done in `getRuntime`, so this method doesn't do anything. You could use it here to do a `Runtime.delete()` instead.
I don't think this is the right place for this. I think the message here should be `nil` and `err`.
I'd rather return an error here to make it obvious that this function returns a string
@deads2k i think we should add an entry here. that is why we are not using it.
Is it possible that the `Outbounds` test can not have been created?
This should be an option to use `(3)`.
This is an interesting one, I'd rather have a single `if` statement on it, and then just call `const`.
I think it is a good idea to set a default value of the default and check for `ServiceExternalIP` in the `real` and then check if the user is not set.
Why is that needed?
Please use the `Defaults` field of the `Defaults` field instead.
I don't understand why the old `kbp_record` flag is needed, it should be removed.
Why not use an empty `Iterable<T, U>>` instead?
I don't think you meant to remove this line.
Why is there no unit test for this?
We need an `base` after the type of field `base`.
this import should not be changed
Is this change related to the PR?
Is this still needed?
I think it's good to keep this as the last commit message as a separate commit.
I think it is better to check whether it's a `@Test` annotation, or if it does not work with it.
@jcotela can you please check that the type of System.Net.SQL_NAME_type is not an object of System.Net.SQL_NAME?
I'm not sure about this - we can get back off the log level for the job.
I think you can just do `timeLeftToClaimRefund = deposit.GetTimeLeftToClaimRefund(now);`
Maybe add a TODO about why we need this check?
Could we also change the return value of the mouse settings panel to return the label, so we can just do the mouse settings.
Should be the same as above.
This is probably the only thing that was done to check the null value in the first place, and only if it's not null.
I'm not sure if we want to include the `diff` in this file. I think it's fine for now, but just wondering if it's better to have this in a followup.
Why is this a `Long`?
I'm not sure about this. I think we should have `_shared` and `_shared_cinit` defined in `build/utils/server.js`.
Should we log the status at the beginning? The current approach might be to update the refresh.
I think this is a good change. But I guess it's better to use `0.0` as it will be `0.0` in the code, and instead define it in `__init__`.
do you still need to do `items[i-1]`?
It's weird to use "http://testUrl" here, but it would be nice to use a helper method to test that tests the `http` is running and we can't use that.
Is it possible to set the lock to the `PImageFormatInfo` ?
The key is used in the DB above so that we can use `&&tagId` here, and then just check for the `.size()` in `kTagsTable` above.
Do we really need a separate file?
The `else` should be in a single line string.
Should this be public? I think this class is already declared above.
@mraible is it possible to have the actual log message be configurable?
Why is this line removed?
Why not call `mergeOriginalRoleAndMetaRoleAttributes` instead ?
I would use `seelog.xml` here instead.
I would use spaces instead of tabs for indenting.
I would prefer to keep these methods in the interface as `func (modError) Unwrap(); return err.error`
this import does not match other imports.
Hmm... should we check if the configuration is set?
I removed the unused import here.
This seems like an odd choice. What is a different set of non-Cgame types? Is it the only thing that would cause to get the user to have to know about?
This was a duplicate of the previous one.
This is a breaking change in behavior, I believe the "test" module should be named "test" (the same for other tests).
This test was not run on Windows. Can't you just test the build and import it as `lib/bincover`?
Why do we still need this?
I think you want to be more specific about what this is
Shouldn't this be `client.getLocalPlayer().getWorldLocation()` instead?
nit: this was a typo as `op_data[2 * MAX_OPERANDS] = -1;`
We should be able to use `!r.Header.Get("Detected-Locale", string.Header)` instead of `r.Header.Get()` here.
This is wrong. You should be able to just set `fmd.isRestricted() == true` to true, and you should only set the default value if you need to.
I think it would be good to do this in a separate function to make it easier to understand what is going on in the future. I think this is a good change.
Do we need to have an option here?
I'm pretty sure we'll need this. What if we added a `snapshotCreateCommand` to a snapshot and not a volume?
Why do we need a new column here? The new column could have the same problem.
Why the name change?
I'm not a big fan of the check, but if the first condition is the right value, then the first condition should be the first one.
Is there any reason why we can't use the `Bytes()` method here instead of passing the `Write` argument as an optional argument?
Should we also add an option to the filename of the vin simplicity of the vin simplicity?
Should we just check here that the command is not an attribute?
Is it possible to have an `string` instead of an `string`? I'd prefer to see a `@private` tag in the `getServiceAccountSiteURL` method, which is more explicit
I would have used `journalPausedFromSignal` for the name of the function to avoid duplication.
This should also include the return value
It looks like this variable has been missed.
Why not just add the the above `getContainer()->get('sonata.media.manager.category')` and use it instead of the above one?
`drydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydrydry
@michalpristas As this is not part of the public API I think it's better to do it in one place and just pass in the type to `wallet->receive_async` and `wallet->store.representative` to get the same behavior.
Can you also make this `isWP5.0`? It looks like it is only needed for the new `isWP5` case, and if we're using it here then `isWP5.0` is unnecessary.
why is `&&` required here?
`i` is the default for a `(0)` value.
I think this could be improved. But it's probably okay.
Why is it needed?
nit: can use `fs-q`
should we just use `auto_fire = false` here?
Not sure why this file was removed.
I think the ref can't be null.
Wouldn't it be possible to do this as a constant in the class? That way, it could be easier to understand if you wanted to do something with the user to know what the user is expecting (but not a partial)
Space missing to the left of {.<br>Space inside { missing.<br>Space inside } missing.
Can we move this to the `@org_by_30_day_commits`?
This is a breaking change, but I'm fine with it. I'm not sure what the best way to fix this is, and is to add a TODO to remove this, since it seems to be the only place we need to add this
This import is no longer used.
why change to mock?
Is this a breaking change?
@trodro9 I think we should be removing that line.
Can you move this to a new method?
Why change the type from `id` to `value`?
missing a space after the comma?
Why did you remove the `*blob.Bucket`?
Nit: can we put this inside the try block?
This is not the right place to put this. The default behavior should be `empty(Descriptor)`. But it is not important to add a default value if the current user doesn't specify the `Descriptor`.
I don't know why this is here, but the `click_on I18n.t` is still needed?
@jackfrancis this change is not required. The `@load` function above is called when `config` is `nil`. So you can use `iframe.run()` instead.
I'm not sure if we should add a note here about the change implementing stuff.
This is the only change required, we can leave it as it was.
I think we can get rid of this and just do `GetType().Name}`. It seems it is only necessary if the `Name` isn't `null` in the `Dictionary` callback.
Use the new Ruby 1.9 hash syntax.
This is an example of why we need to pass an empty string here?
This is not necessary, the only place the download is in the cache is used.
@jackfranc @jihoonson - I think this is a good idea, it would be better to move the "window" logic to the base class, and pass this into the "add" method to the "add" method. That way we can get rid of this function and have the `(windowHandle": "current"})` in the base class as it can be called from the base class.
Why not a constant?
It's probably best not to use a constant here, and pass it in in the `err` instead of `s.w.recordStepTime`?
Layout/EmptyLinesAroundMethodBody: Extra empty line detected at block body end.
I don't think this import is required.
Why is this error needed here and not just for `v`/`v`/`lib/`lib`/`lib`/`lib` (not in this PR)?
Can't we just get rid of this import statement now?
Is it correct to include 0.20.0 in the release release, or just say it's correct?
Not sure if this should be an issue in the changelog.
Do you want to add this to the doc?
This is a change in behavior.
I don't think it's a good idea to have a JIRA reference.
Isn't it better to keep this one as `booleanboolean`?
Is there a use statement that can't use this class? It is not a valid `TranslationAdapter` class (or a class) but it does not.
Can you explain why you need to change this change ?
why do this change in the constructor and not use a new one?
I am not seeing any reason for this change.
I'm not sure that this was the right fix. The test for this is not related to the PR.
The type here was `bool` which was `*`
@Scottmitch why do we need to change to be consistent with the rest of the API?
Should we add `to             _from` to this function?
why do you need this?
remove empty line.
I think we can just use `MAX(1)` here. The latter is fine for now, but it's probably fine to use a constant.
Redundant `return` detected.
Why was this test removed?
Can we call this `exit_early` and just call `exit(42)` in the test, to be sure that this is a test failure?
Is this really needed?
remove the star import
can you add a test case for this?
It seems we are missing a lock. Why do we need this function?
I believe this `getValidationError` can be removed as you are already in the `merge.getValidationError`
You can use `expect(Close).to eq(A B C)` here, no?
you can just change the argument to `team`
Please use `require_once __DIR__ . '/Psalm/Internal/exception_handler.php` instead. Also, I'd like to see a more generic way of setting this to `int`, and then check if it's a directory that can be a module-level module (since that's a single file).
Please add an `@Nullable` annotation
remove empty line
How about we move it to a constant?
Why do you need this? The WLR_HAS_X11_BACKEND function is only used once, and the WLR_HAS_X11_BACKEND function can also be renamed to reflect that.
Can you add this to the `FailSourceTypeName` above, since the `FailSourceTypeName}.{nameof()` method has `instanceType().AssemblyQualifiedName()` already?
I'd prefer to have a `isHighPriority` property instead of `is`.
could you make sure this is the right version of the package-level release so it's only used once?
Should this be called `uint errno_val_0_3?`?
Why is it being removed?
I think we can move these to the `new` interface, and remove the `deletionState` prefix.
What does this mean? I'm assuming there's a way to make the user more explicit and avoiding the timer?
If the option is set to true, the `dial` will be false anyway.
I'm not 100% convinced by this one...
This looks like the main code.
I think the tests for testing are failing because of the new testing.
Why is it needed here?
This import is unused.
This is the one we're not doing with. We don't really need to use a dependency on the `config` package, since `DEFAULT_LOG_LEVEL` will be used for the config, and it will be used in the `if Kratos::path.py` file
this was just a typo
this import is unused
This is probably not the best place to put a `failureDetection` check, but it is just for testing purposes.
Isn't this supposed to check for the exact exact same rate limiting on the types of the same netloc?
I think we should log the user output here.
Is the runclear to me that we don't have a constant in this file, or does that not belong in this file?
I don't think this is correct. We already know the exact requests for the purposes of the server.
We have a constructor with `String.prototype` which is `nil` here. We can't use a `String.prototype` function to generate a `Status` object.
This is a no-op, right? Why would I use a null value here instead of a `?`? Is it possible to set a default value? If so it looks like the default value is `""`, not `""`?
I don't like this change but it's a minor minor but this is the same as the other test files.
What is `Unable to get the name` ? We can't change the name.
why not just `caddy.LogDestination = logfile`?
This file seems to be unused, right?
Why is the #if remembered to add this #if to avoid the warning?
Is this supposed to be a `_`?
This should not be a separate PR
I don't think this is the right place for this. The code in this file is not correct. The `VUID-` prefix is used as an `else if` condition. I don't think it should be here. The current `else if` statement above should be moved up into the `if` statement above.
I would move this to `wp_tablet_tool_v2.h`.
This is not a valid URL.
Should we keep the package for every version of the package package?
Can you make it an option for these values, and just use a dict?
@JeremyKuhne might want to confirm here that the new flow status will not have the right flow status. This will make the flow status fail for you.
I'm not sure if this will be the best name for it.
why change these?
Can you move this to `devel` package, so that we can move the `render` imports inside of the package where we can't move these imports inside of a function?
This line is the main change in this PR.
I think this is not the best choice for this, but the `aria-label` is probably a good idea. I don't think that's a good choice for this, but it might be worthwhile to add some more `ases` tags.
No need for this variable.
Is this change required?
The error message is not clear as it is.
We can remove this condition as it is now handled by `time::TimeConversion::unixSecondsToDateTime`.
Why not just `error = t.Error(err)`?
This should be renamed to `getAssertionString`
Please add `,` to the docs
`debug` could be replaced with `log.is_open()` and the `log.open()` call below.
this is wrong, it is not needed
I'm not sure this is the right fix. The `Call` call will never be needed if `artifact` is true.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I would prefer to have the same log message as the one with the logs, as they are used to see whether there is a problem.
We should probably make sure that it can't be a remote operation.
Is this used anywhere?
What about just `Contains`?
Well, this is not a valid signature. You need to pass the `* 10000` in.
This seems to be a no-op for the `instr` base load function. Is this intentional?
Should be `ChainDBPath: ...` instead.
@danrot you added this line here as it was the reason why we didn't do it before
Should this be a `App`?
Here's the reason of this, because the `execution_time` function returns the same value for a non-empty `Union[float,int]` and it's more of a tuple where a size is different, e.g. `execution_time(Union[float,int])`.
I would prefer not to use `LOG(FATAL) << path << " failed";` as the error message is not directory. The idea is that if we have `os.path.c_str()` you should not call `os.path.init()` and call `os.path.init()()`.
Why not just catch `Exception $e` as the second, and the exception message here?
This will fail when someone changes the host (and the port) in the server. The proxy host is not in the server but that is the port. The proxy host will be a "debug" of the command (i.e. "debug" is the default).
Is it not needed anymore, or is it?
why did you change this?
Does this mean the `encoding` argument will not be used anymore now? Or do the other changes need to be removed?
This test is failing because the test was not running in the test.
I think this is the only place where we're not calling this. We should probably be doing something like `.Is_first_first(const char)` instead.
Shouldn't we also have a `/bin/puppet` prefix?
Shouldn't we also print the error message here as well ?
Shouldn't we also check if the process exists?
We should also have a `const char = NULL;` for the value of `static g`
this method is no longer used and can be removed
Is this the correct place in this file to remove it ?
This is a bit of a mess. Maybe just remove it?
Is this a bug or just for readability?
Line is too long. [98/80]
Shouldn't this be `sigs.k8s.io/apimachinery/pkg/util/conditions` ?
I'm not sure about this. This is the right fix and I think we should do it once per file.
Why are we changing the type here?
nit: this is a bit weird, can we just have `fpga_dma.h` be inlined?
This was the only real change that was needed in #6027.
This will be ignored if the default is specified, even though the user explicitly has the default.
I'm not seeing this being used anywhere else. I'm not seeing it being used anywhere else.
I think this was accidentally removed before
here I'm confused why the `sign` is needed.
We should check if the source file exists in the new RuntimeExceptions.
nit: I wonder why the `numImagesToDeletePerCycleEnvVal` is changed to `numImagesToDeletePerCycleEnvVal`
This is wrong. You can use a BaselineTreeDbWriteBuffer or a BaselineTreeDbWriteBuffer
We should also do this on `io.prestosql.spi.OwnerUID` so that if a user uses the cgroup manager, then it will still be able to accept it.
I don't think this should be part of the SCMS build. We should be able to remove the Jira ticket and just use the Jira ticket for the SCMS build.
Isn't this redundant, because `this.getFilter()` already handles the `list()` method.
Please use the same naming scheme as in other places as well.
Why was this removed?
I think this should be `RootCAs: a.Config.TrustBundle`.
why do you call current_year?
Shouldn't we be doing this only once after the write?
This should be `isset[ERROR]`, otherwise the index is not selected.
We should probably add some docstrings to this (i.e., `actions`) and `actions = []`
I'm not sure that this is needed.
Can we add a `TODO` to remove this TODO?
I think this is not the only place where we can change this?
Would you please create an issue and test that `errors.log.Fatal` fails on the next line?
Why is this line removed?
Shouldn't we also have a type for this?
why change it?
Can we rename this `filter` method? `with` would help with other `i18n` methods.
This field was never used
I think you should remove `tests/config` import from the `filecoin/config.go` package and `filecoin/config.go` as it is already in the `tests/tests/go` package.
Why is this removed?
If `checkExpr` is not defined, then this will still return `None`, you can remove the `checkExprDepth` call.
why was this test removed?
Can we move this to be package private?
How about using the `this.props.getPlugin` function here?
I am not sure we need this - `mapper` can be null
Remove this line.
This is the only place where the node is being created, right? If I am not mistaken this is correct, the old code is still being handled by a `common.[]` and it is not a `common.[]` (and the other places that you've changed it), then it will be a little cleaner. I'm just thinking of making this a "hack" as it is, and it is probably better than a "user-*"
Shouldn't this be done with `this.getAmpDoc()`?
Please fix the indentation.
We are not testing the right exception here anymore.
Why not use the new `VerifyPoSt` method here?
Why remove the duplicate code?
The variable $countries **`**`$countryCodeAlpha2` should always be defined.
This seems like a reasonable change to me.
I'd suggest to use `time_range` here, as we have for 3-5 days, and if it is a number it should be a number.
Please make sure the value in `outputs`, and use `&&& new` here.
This should be changed from `calypso-1` to `calypso-2`.
Can you use assert_ok here too?
This should be `ZMSImpl.getZmsInstance()`
The `execute.as.user` is only ever used by the `ProcessJob`. I think we can remove this.
This change seems unrelated, can you remove?
Shouldn't this be `@Nullable`?
I think we can move this check to the `devMetadata` where it's used in the `if len(errs) > 0`, which will be a no-op if the name fails (in the future), and it should be a different set of other keys.
We should probably add this to all of these macro, because it will be defined by the `const` branch
I don't think this should be here, since `config` is only used once and should be used.
I don't understand these two lines.
why change this?
I don't think this is needed
Should be: `keyGen KeyGen, user`
This is an unrelated change.
You need to do this as a separate `_model` block.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I am a bit confused, why not just have a finalizer be set as opposed to a subclass of `#if DEBUG`, and have a finalizer set as opposed to a different length?
Isn't it redundant to have `props.value` nullable?
Let's just change the `indent` to `close` in the `meta/Imports` folder.
Please remove this and the other similar ones as well.
@jsoriano How do we know that it will always be false, but we need to keep the SDK in `app/services/services/tests/`?
The `value.str()` check is redundant.
Why not just delete this code?
Should we just call `asQuery` directly?
It's a little bit weird that the init is not in here, but we need an extra set of inits in `libopenstorage/pkg/correlation`. If this is the only place that uses inits, we could use that.
This is a bit hard to read and read, as we already have it in the `[Output]` on line 131 and 488.
I think we need to keep track of all the code that calls `New` and call the method with `p.mu.Lock()` on the same line.
This looks like something we can get rid of?
This code was only used for testing.
I'm curious why this is needed, but why did you change it?
I think this is the right place for this - it is needed for this header to work - but it should be removed in #ifdef OPENSSL_Runnable
@tmds I don't think it's worth the fix to use the new behavior of "global count" here, but I'd prefer if it was done as part of a separate PR, as it was done in a separate PR.
This is no longer necessary
Please don't make this an issue.
This is a breaking change. This test is still testing what we're trying to fix in the test and thus not sure we want to fix the problem.
Space between `)` and `{`
i think we should have a way to make these strings more clear: - `./pantsd/constants` - `./pantsd` - `./pantsd/constants` - `./pantsd/constants`
I don't like this change, as it is in `EnsureBinary` which is called for the test.
I think this is going to be a little more descriptive when you're doing the "failed to reconcile load balancer attachment."
Wouldn't it be better to do `change[0][0] = instance.propToCol(change[1]]`?
I'm curious why you changed to "bfbs-builtin-attrs" here?
Why is this still in `config.go`?
Nit: We usually don't make `i` a `const`
This should not be needed as it's a new one.
what is the meaning of `wireguard`?
could you please rename this to be a const?
@cramforce is it possible to get rid of these calls?
Is this an unrelated bug fix? If so, could you please update the docstring?
This test is not correct. It is not needed anymore. `record` is already in `format`.
Wondering if we should just do this in the same way that we don't want to have it in the `@@additional_pkgs`?
This is a breaking change, and is not really necessary for the `pluginID_t` method.
The `CommonParams.FL` should be removed.
Why was this added?
I would use something like `$this->findLockFiles()` to make it obvious this is not a correct change and you should use `$exception` to get the right behavior for the correct type.
This import is unused.
Is this change intentional?
Is this used?
I would prefer a separate method `isCpuCircuitBreakerEnabled`
This seems like it should be `Optional`, since it looks like it's used in the interface and not all of them.
What's the point of this?
nit: this is not used by the variable, it is already added by the `.withIcon()` call
can we just return errors.Cause(err) here instead of errors.Fatalf(...) ?
`valueOf` can be removed
nit: I think this could be a `return empty();`
Please add a note to the docstring about why it's here.
Should be in `TestAccAWSProcessor` and `TestAccAWSProcessor`. I think we should have some `TestAccAWSProcessor` here and the others that we use.
This was added in #33773
this is not a problem for Spack, but it's a bit confusing
This is an unusual way of writing the config for a new config for a new config. The only way you can do this is if you want to add a new config object (which is set in the config object), then you need to set the value for `std::chrono::duration<double, std::milli> refit_leaves_time` to `const` and `const` to `const` and `const` to `const EPS = 1e-12;` or `std::chrono::duration<double, std::milli> refit_leaves
can we also add `strings.sigs.k8s.io/cluster-api/util/conditions` to the end?
Is this not a problem with the previous change?
I know it's used in multiple places, but is it a problem to use `k` and use that instead?
Is there a reason we're not using the `if paste` argument here?
We have a `sdktrace` in our API, so I would call this `executabletrace`
This is no longer needed, right?
This should be a different name, and not a biggie, I'm not sure what the problem is here is, but it seems to be the same in other places.
The result result is already in the `strings` and the result is `nil`, so I don't think it's necessary here
Line is too long. [84/80]
This is not a great method, but it is just a thought, so I'd be ok with just passing an error instead of doing the same thing here.
Why did you remove the `blockListeners` here?
Please remove this empty line
This feels like it should be `fmt.Sprintf(formatPrefix, a...)`
@sparrowDom Just curious, are these changes related to the current pull request or are they needed?
>pPipeline->graphicsPipelineCI.pDepthStencilAttachment->layout == VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL [](start = 28, length = 17) I think it will make it more clear to call this `pipelineIndex` instead of the boolean.
These changes are not required for the `BOXES` parameter.
This is the most important change, but I'd like to make sure that the logic is correct (and probably not) to make this change, so it would be good to have the `mount` prefix in the future (or even a separate PR).
Is this intentional?
why this change? It looks to me like the `-1` part of the code is not doing anything with it.
Why did you choose to change the default value to `None`?
I don't think this error message should be logged. The error message should be something like "foo is set".
This should have the same logic as the default `false` in `SearchVisible`.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Can you use the constant `0` here?
I think it would be better to move the condition of the if statement below to make it look more obvious what the default is and how it works for now.
This is the only change needed for this change.
This is also a breaking change. Please change the order of the arguments to a single-length list.
I think you need `strings.push` here too, right?
Is there any way to make this a property? If not, I'd suggest to add `logging` as the default, to make sure that we are not doing anything.
This is really an overkill, but I would prefer if you want to keep this around for now that I'm going to suggest. If you don't want to do a check for `.to_a` it's not an `if`.
`value == null`?
@lilleyse this is the default part. It should not be needed if the default is the default.
This method is now being deleted by accident.
This should probably be `fs fakeStorage` or `fs fakeStorage`
Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
I'm not sure why this is necessary
I wonder if we need to make the `FUNC3(Class<?)` private, and use `Class<?> arg` in the `class()` method. I don't think we can get the correct spelled.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
Why not `ClearSuccessors`?
Please remove this.
It looks like this is a no-op. Is this a problem?
@gmajoulet We should probably have a JIRA to track this, but it seems to me that we're not using this.
Why is this change necessary?
Please revert this change. The changes in this patch made it so it's not a big deal.
I believe this should be `@SuppressWarnings("unchecked")`
I think we can remove this and remove the `Hidden: true` part because it will not be used by production code.
this was just a test that was not passing. I had to move the package to the new app. i don't know if we should do this, but we should keep a package that is a bit of a burden of doing that
Why the change of this file?
We should rename `in` to `keybase` for readability.
I don't think the `in` operator should be necessary, since it is a `static` block
I think we can just change the variable name now.
This one is not related to this PR, but it should be a separate commit.
This isn't used anywhere, remove it.
this is a weird form, we shouldn't remove `navbar-search` altogether.
I think the check for `DisableLocalhostConnectionRateLimit` is redundant here
Is it really needed for these changes?
Can we change these to be a conditional? `issubset(package_stats)` and `get_package_stats`
this is just a minor thing but the changes here are not needed as this is in this PR.
I'm not sure if there is a good reason for this one to be compatible with Python 2.6.0, so I think the version number is correct?
I'm not sure this is correct. You are doing this in the test itself and it is not necessary to include an enum in the test. You can just check if `check_expr` is `True` or `False` in the test file.
We should probably check for `is_same_OBJECT()` here.
Isn't this a change that we can't use for `v1` in the code?
As above, the `OutExeReplacement` will always return an error (as opposed to a double `var`).
I think `NewResMeta` can be dropped if the `pkg/WriteResponse` function returns an error.
I am not a fan of the name of this API, I would have thought this should be a class or a static class (as it can be used to return `String.Empty()` instead of `String.Empty`).
"and instance. On Python 3 these arguments are the default."
Please use `NPE.IsNullOrEmpty` instead.
Isn't this a public API?
How about `cse.uploads.fileSizeThreshold` ?
This change was not related to the PR but now it's just me, I'm not sure why it was here. I think it's a bug.
@deads2k i'm a bit concerned about this. Is this what we want? Can we have a unit test for that?
This is not a good idea to use an error instead: if c.options.Filepath == "", return "", errors.New("file logging is disabled, can't retrieve logs")
You don't need `.data` here. The `.get` method is used below.
Isn't this redundant now?
What's the purpose of this change?
Please put the entire block on the previous line. Also, don't use a single block, just use an `-` prefix.
Shouldn't you import * and use the same asterisk imports in the same class ?
Is this a typo?
I don't understand this change. Why is it here?
I think this should happen after the if statement above to be removed.
why change the `1_200` to `5_000`?
I don't think we can safely change this file.
I'd prefer to avoid this, but I'd like to avoid this in the code that uses it as an explicit command line and instead call it something like `RespondServiceHeaderKey`.
Is it worthwhile to test for a mdb_store here?
I think we can just do a `time a node waits between mining successive blocks as arrive`
Let's not use this import, we can just make this a function.
This is a bit of a nitpick: it would be good to make it `padding: 0` to make sure it's more readable.
This should be set in the docs to make sure `use-starting-sequence-number` is not set.
Please revert these unnecessary changes
This file was only moved to a common file, so nothing else can modify it.
I think this is a leftover from debugging, and should have a trailing semicolon at the top of the file.
Remove the extra leading whitespace
I am a bit worried about this change - can you check if it's a public API for `DynamoViewModel` instead of a class name? That way we don't care about it for other actions.
Is this needed?
Can you also include the other methods in the future (i.e. "in reverse the comparator that sorting is done in reverse the SonarQube)
This seems like it's just for testing purposes. Maybe we should check if the key is in `create_EMAIL_ERROR_CODES` instead? Or maybe it's better for a `create_EMAIL_ERROR_CODES` to be in `create_EMAIL_ERROR_CODES`?
`getResponseHeader` will always be available. You should add `options.headers && this.headers`
I think this should be a constant.
Why not use a private `type` block for the new `||`?
I think you forgot to change `shape` here
why do you need this ?
I don't think this will work on some kind of stuff, as it is only used in the tests.
Not a huge fan of this but since we're using a new batch, I think it's better to keep it as is and make the `Batch cannot be re-executed/` in a variable.
is there a way to make this configurable?
Why is this necessary? I think we are trying to get a message to this.
We can use `DateUtil.formatDate(this.releaseOrCreateDate)` here.
"connection _though_, I'm not 100% sure about the "no connection" part of the name. Is it something that should be cancelled? If we want to keep a different field, then we should use a different name.
I don't think we need the `in_array` here, since the body_class already contains the `record()` object.
why do we need this?
I think this is a bugfix. The correct fix was to use `convertIP` to `chain` and `convertIP` as default.
It is not obvious what this means for a particular appender. It would be better to use something like `<see lang**fileCharacteristics` instead of `<see lang**fileCharacteristics` and `<see lang**fileCharacteristics`
This is not a very good idea, as it is, but it is not a good idea to add this to the view, as it does not seem to be used for other cases.
I would move this line up here.
Why are we not using it inversedBy?
I don't understand this one. Why is this needed?
I think this should be part of `add existing settings settings to not use existing settings.
I don't think this is a valid change. I don't think it's correct. The `cachedCommonPluginLoadProps` class has to be public.
This seems to be a duplicate of the two.
@tgamblin Do you have any concerns about using `print` in the print statement?
This seems wrong...
Why did you remove this?
This will cause the same error as `find_many` on `attribution`. The `many` is not in the condition that the `current` is set to `true` and the `current` is in the same place. So the `attribution` here will not be necessary here, since `attribution` can't be set to any value.
Not sure about the extra namespace here... it is a good habit of having the same namespace as the one in the other hand, but if this is a change in behavior I would prefer if we could make the namespace part more general. In the context, we could have a more generic namespace and name the namespace.
This should be a field instead of a boolean value.
This should not require the content in the `emojiRegexText`, right?
Is this method still used by anything? Is there a chance you could move it up?
This could potentially be a breaking change. I'm fine with the current solution, but this looks good.
I think it's still not needed. The wire and java.n are also not needed.
If we set this to `true`, then we should be sure `ProposeDeal` is always set and set to `false`.
I think this would be more appropriate.
I think we should remove the reference to Xunit.Extensions here.
Is this class actually required, or are we just removing the `StringUtils` annotation?
Can you change this to be a different name? `beat/namespace` does not seem to be used anymore.
nitpick: I think this function should use an enum type (the same in the other PR) rather than the other one, e.g. `jit.module-types.py`. `the` should be renamed to something like `the_it.module-types.py`
This seems like the only way to check both the struct and the struct's struct.
I think you can just remove this check since `headingLength = ...` below.
Do you have a problem with adding this as a placeholder for each container? I would expect it to be used as a placeholder instead of an actual placeholder.
I am confused, is this needed for the tests?
In what case is `actionHash` coming from?
@n3nash : I think this is not the only change that is needed in `EnumeratedPropertyDescriptor.properties`.
This should be done in the new function `CreateSamplerYcbcbConversion` above
We can remove `running` now.
what about other tests for this?
Shouldn't the imports be removed after the last line?
I'm wondering if we should just use `fmt.Sprintf("%s-worker-0` here.
I'd prefer we keep both `api.SdkAutoFSTrimUsage` and `api.SdkAutoFSTrimUsage`. It's also not clear why we need to do this.
Is this used anywhere?
This was just for backwards compatibility, but we should probably move this to line 212.
what does this `g.Entries` do?
Do the need for `#ifdef` here?
you can remove the `return` statement here, as it's already the same.
I'm not sure what the best way to test here is to test this test.
This is a change in behavior for `workspace` and `pt`. The `games` field was not being used anymore.
Please add spaces in the square brackets.
Is this the default?
I think we should change the transport transport to "protobuf" here as well. It's used for both the transport and the transport.Encoding methods.
Is it necessary to include `/core/uri_parser`?
Maybe it would be better to do this in a separate patch as it is done in a different PR, and instead we could add it to `underlayer` class, but I think it's not a good idea to do it here. We could do it in a single PR but we can do this in other places.
Why is that? Isn't it a separate translator? If so, we may need to check that `TranslatorFactory` is not a separate translator
This is not needed anymore?
This is a bit confusing, since the variable `OUTBOUND_HTTPS_PROXY` could be just a `dict()` method.
This is not a good idea... it might be better to have a single map of the map of `Map<ExecutionReference, ExecutableFlow>>` that would return a boolean.
I'm not sure if there is a better way to do this. The `err` could be nil if `err == nil`.
I think you can get rid of this `Task` now that this is only used by `Task.cs`.
Aren't we missing ` Defaults`?
I think the barrier is now always available, so we can call it once here.
This import is not used. It should be changed with the other import statements.
Why do you set it to a string?
Block body expression is on the same line as the block start.
This is now the main change.
I guess we can remove `frame` because it is a no-op anymore?
Why is this needed?
In what situation do we want to return the correct price?
This is a very small thing. It seems like we could just call `EnableDNS` on the end of the repo. We need to do something like `setUp` and `EnableDNS = false` for the same reason.
Is this still used? I would prefer to see it as a separate commit.
Is it necessary to check `nil` in the `if` check below? I would expect it to always be true, and if we are already writing it outside of `if` check we are not sure how that's a good idea.
This was just a typo I had in mind, but I was thinking that it might be a good idea to change the name, so that this is more clear.
I think `if currentTime == lastTime.Timestamp` is redundant here, because `instanceof` returns true for both cases
I would move this line before `if`
Can you please change this to: `UpdateAccessKey.java demonstrates how the access key for [...]` Also, the `AWS IAM` will be the default and the key in the struct is a bit confusing to me. It's still the case that the `AWS IAM` will be the default.
This class does not contain interfaces, so I think the `org.apache.iceberg.StructLike` should be renamed to `java.io.Serializable` (it was already present in `org.apache.iceberg.StructLike`)
Is this the same bug as before?
Can you also update the doc accordingly?
this should be an error.
I would just make it a `Data=True`, not a `string=True`. But we can also use the default in these places.
This is a change in behavior. Is it possible that we don't have to pass a `*json` and we don't need it here?
This should really be version instead.
Please use the function `from google.cloud.security.common.gcp_type import resource_util`.
This should be removed.
Can we just make this a `InvalidStatus`?
I'd prefer to have an `assert` here, as it's the default.
Can we use the `Config` field instead of the String path?
Why do we need to get rid of this `probeSvr.Start`?
@bparees this looks fine. I am not sure if the current implementation is correct or not.
Why is it necessary to return response? If the response was not found, the user should never get a response.
I think this can be `null` if `value` has `null`?
Should we just make it configurable instead?
This is a very minor bug. What about just passing `pageStreaming.getbufFieldName(...)` and then calling `getManagerFactoryFieldName(...)` in `getODEFieldName(...)`? It looks like the same as the above two lines below.
I'm not sure if there's any point adding this line.
I think the other `else if` statements should be moved to the line above the `if` blocks?
nit: move line above this line
This is a change that makes the logic easy to read, so it's a no-op, and is not a good idea to change it here, but I think the logic here is more clear.
This test was not working before. It looks like it was not working before?
I'd like to see an explicit name here, but I'd like to understand it.
Can you add this import to the file?
Would it be possible to just change this to error? I don't think it would make sense to return error here.
Why not use a constant?
What's the motivation behind this change?
I would not add the plugin here, just like I did above the `if (Fields($this->normalizeIdentifier)])`, and if the `$this->plugins[ $this->normalizeIdentifier($id, ]`, you wouldn't need to use the `this->normalizeIdentifier` variable here. I don't know how to fix this.
I'm not really familiar with this code, but if it's not possible to have a `null` value in a `safeMode` object, we don't actually need it, because it would be a `null` object, and it would be better to do it in the `isSafeMode`.
I'm not sure about this one. You can just call `ScrollIntoView` from `_rangeObj`, which can be done with the `_rangeObj`'s try-with-resources.
Why are we not doing this anymore?
Same here, you can use a set_case to ensure you have an set set to the same value.
This import is now unused, right?
Why not `private`?
Is this necessary anymore?
This is just a suggestion I think... but I think I can't think of anything in the future... I'll do it in a follow up PR but I can do this in a separate PR, though
Why do we need a return here?
We could just do `b.createTLSConfig(c)` and then do this in every `if err != nil {` check instead.
this seems to be the only place where it was used. Can you explain why it is safe?
This should be added in the group below.
I think this can be moved inside `std::read_options` (in `std::read_options`) since this is now a list of `1.0`.
I would prefer to have this as a default and use `set` instead of an empty string.
This seems like an unnecessary change.
Who will this be using the `street_name_suffix_table`?
Does this need to be in the check for the new function? I can't recall what this is for, but it seems to me that we can't just call it once.
This should be removed.
This one seems like it should be a `need_unmap` argument.
I think this is still not needed
`startTopologyCache` -> `startTopologyCacheLock`
Can we put a `h.Dispenser` here and in `src/service/h-Dispen_test.go:2`?
Why are we passing the cast here?
Why is that removed?
Would `s/query/null/` be a better name?
I think you should check `sonm.Total` instead of `Total` here.
I don't know if this is the right place for this.
this is the only change that is needed in this case.
I'm not sure about this. I would have called `check_commands[0]` as it's a bit confusing. What is the difference?
@exclusion_patterns = full_backtrace ? [] : DEFAULT_EXCLUSION_PATTERNS.dup : full_backtrace.map?
This was a mistake in the first place and was a mistake in the original commit.
It should be a `#version` or `#t mitmproxy` instead of `#version`
This is a very minor thing, but I think we should add a note here that this is a breaking change.
This line should be removed.
I'd like to see this in `pkg/api/v1/client.go` since it's not a part of the code base.
The reason for doing this is that you can use `reset_column_count` instead of `reset_table` directly, because that is what you want.
should be output_add_notify
Why do we need to add this `form`?
I'm not sure how this change is related to this PR - can you explain why this is failing ?
This is a bit of a hack. I don't have a problem, but I would think we should have a more descriptive name. I think it would make sense to add `_check_singleton_comparison` here as well and add `None` to the user to add it to the user, and add a new one for it.
Why make this virtual?
`ACtsrc` should also be added to `podman 2.0` so that it can be removed from this line.
this is wrong, if you want to use a print to print, it is better to print something like a logger.info that does not print a warning (or something else)
Hey @aghassemi @danielVF what is this doing? I guess you have an example that `CodeFlow` is a `internal/cli` and not a `CodeFlow` but it does not look like the correct method.
I think it is too much sense to import this from the `modules/` module, it's not a `strconv.models`. I'm not sure how to do it in the `modules/` module, so this can be reworked.
I don't think it's necessary to add a new method in order to close any resources. The only reason this is to close the values in the `PageReadStore pages` class (i.e. it is not really used, but the method doesn't have to be called by a new method) is to avoid this change.
Would it make sense to add this option to the feature above? I think this should be `undefined` rather than `true` as it will make things easier to read
Is it possible for a non-empty string to be used?
Why are you using `getAnnotation` here, isn't this just a null check? Isn't this already a `Bean`?
Why not `//`? Is it a public API or something?
Should we just use `str(input)` here?
I'd prefer to add the `KUBERNETES` annotation for the new name.
This is the main change. It's in `appErr`. It's just a question of what this code is testing and what it's doing.
This test doesn't need to be testing the new `TipHeight` variable.
Do we need this line?
Why do you need to do `-1` here?
This is a change in behavior that doesn't have any effect on windows. The new behavior is that if the `row` is not in the directory, the `row` value will never be used.
As mentioned previously, the enum enum is no longer defined in the constructor.
I think we should move `@search_context_response` to `search_session` instead of removing it. It will be more consistent in the future and we could move it to `@previous_document`.
I think `profile_paths[name] = p if` is unnecessary here
This is a function that does nothing but I don't think it's necessary, since we only use it in the `REG_##reg`.
It's a bit weird that the username and the username is not the same as the "class I don't know exactly what you're going to" - I would have expected it to work. I would move the "class-dependent" form to a new line to that, but that's a minor one.
Line is too long. [98/80]
Why do we need this?
this is a good change, please move it to `harvard`
I am not sure this should be called log.info
Can you add this new import?
This should not be necessary. You can just use `if (!is_empty())`
I don't think we need to include this in the `JsonleyUpdate` file.
I think we need to use `mode` in this test
This could be a separate test, and we can be more specific and more flexible.
I think we can just return `md.New("ResolveBranch not supported by MdID"))` instead of hardcoding the variable `New`
Can we get rid of this change as well?
I don't know why you used the external external imports. I think this should be grouped with the other `go test` imports.
This was a bug, since we're doing the `buf.WriteTo(w)` already, which is the only place where we return the `buf`.
This name is not very descriptive. Maybe `is_upfront_shutdown_script_enabled`?
This is the main bug fix. The `_update_load_status` method is already called in `self.title`.
this is the only change that works with `Drop: false` but is not the `Metadata` attribute set.
This is not needed. You can use a single `force_187_p371`.
can we rename this to `goog` now that #1983 has been merged?
I would just put this into a constant.
I am not sure if this was the best way to fix it - it might make sense to change the version to `_test/config.go`
Is there any other way to do this?
`emuGesture` should be `func.emuGclose( emuGesture)`
I think the `if` statement here will be removed as well, right?
I think we should keep the old signature and just remove the `info`.
This is not the right place to do this. In fact this isn't the right place to do this.
This is the wrong change. The `==` operator should be removed.
This doesn't make sense, since you only need to use `href` to build the context, and the `url` already checks for it.
I don't think we need to do this, as we are not doing anything about it.
This can probably just be deleted.
Why not use ProxyConfig socks instead?
This is wrong. It should only be included in the version. If we're using a package-level package, it should be fine.
why this change is needed?
You could just use `?` instead of `?` as you did in the other files
Can't do this, but I don't think we need this, and we're just adding it back
This could be a `const`
This should be `@since`
Is this really required?
`have_css` is not an email, so you don't need to create it here.
this probably should be changed to `const`
Can we just remove this and change all references to `UnboxDictionary<object[]>` to `UnboxDictionary<object[], int>>` to `UnboxDictionary<object[]>`.
`out->name` can be a const.
this should use the `_get_listen_count_for_user` constant to prevent any user from being able to set it.
I think this is still a leftover?
nit: can you change the type of the `_base_repository` to `_base_repository` in favor of `saleor/moved/unit/__init__.py`
"cc" is not a full term.
$Ignore the change.
@striboonsochen I don't know about this, but I don't think this is a correct change. It seems like it is just a util.GetLatestVersion() that is just the latest version, so we should have a separate version.
This is a pretty big change as it's not used anywhere else. It is used elsewhere so I'd just remove it if possible.
Not really sure about "Backoff ended for %s" here.
I don't think it is the correct error here, but I am not seeing that it might not be a problem. We need to do some checks in the `ksql-test-` file to make it easier to debug.
Should we rename the `extdataplane` package to `felix/ip`?
This looks like it would be a good idea to use the one in the `SecurityGroupOverrides` that is set to `nil`.
I'm not sure what this does, but what's the difference between `norm_cfg` and `Drive_cfg`?
This should be `el.tabIndex > -2`, and the `<>` line should be `<>` instead. Also, you could use `el.tabIndex > -2`.
I don't understand why the import order here?
Should we be using `a bool` here instead?
@agramfort do you know why we would want to use `encode('ascii')` here?
You can remove this line.
This seems to be an unrelated change?
what is the motivation for this change?
I don't think this will work, the problem is that the `[s3.ruby.s3_add_bucket_sses3_encryption_policy]` is not in `aws-sdk-s3`
Can we rename this to something more generic? It is a little confusing since it is the other name.
Should we also check this for the tc's `-`?
I don't get the idea of making this an optional parameter. What if the user has a default value and then the default is `0.0f`.
Why are we passing the transaction instead of creating a new one?
I think it is better to use `header == nil` to avoid the need for the copy.
This should just be renamed `StandardsPoliceCompileModule`.
This should be done with the `//` below and the other places in this file. The `!ImmutableRootMetadata` check will do the trick.
this could be simplified to `return sprintf( ExtensionStart://www.dailymotion.com/video/%s', $media->getProviderReference())`
is this change necessary or is it just for the CI-defined packages that have `v1`?
This was an oversight. I've added a new dependency to pass a list here to ensure that it's not a valid value for people with a valid deps.
This is a bit confusing, I don't think it's safe to do `getFocusableElements` here, but since the `getFocusable` method returns an array, it's not a list of `null`s.
I'm not sure this is the best way to go. It's a bit confusing if the `_format_msg` method exists and the message should always be there. It's just for the `\n` to be set to `\n` in the next line to avoid the warning, but it's not actually the best way to handle the error.
The `@SuppressWarnings` annotation needs to be added in the public APIs as well.
Do you need to add any new header for this file, or is it needed?
This seems like a hack to me, but I would prefer to keep it simple, as it's a simple variable.
`$$` is not needed.
Line is too long. [91/90]
This should be a `app.config['TEAM_NAME']`, not a `app.config['TEAM_NAME']`. The `app.config['TEAM_NAME']` option should be the `app.config['TEAM_NAME']` option. This change is a bit unfortunate, but I think we should try to use the `.config` option to make it clearer.
this could use a `if` in the `if`
Can't we just use a pointer here instead of a `and` here?
I would prefer to have a `rootNode` that is already in the `WorkspaceWorkspace` block. We could also make the change in the `WorkspaceWorkspaceModel.getOrCreate` method and call `GetOrCreate` directly from the `WorkspaceWorkspaceModel` method. Then this can be done with `WorkspaceWorkspaceModel.getOrCreate` and `GetOrCreate` and `GetOrCreate` and `GetOrCreate` methods.
Why not call `set` directly?
@njhill thanks for the cleanup!
this is a change in behavior... if I'm not wrong. why is failing?
Just to be sure: this file still needs to be indented by a unit test.
The other options should not be optional.
Could you update the type of the field?
This is a bit confusing, I don't think I understand why, but is there a way to do this without the listing?
We can also change the `clone` method from `clone` to `clone` in order for now that we're using it for backwards compatibility.
This check should be moved to the `try` block above.
I think the wording should be "must be set"
It seems to be missing the type here (and in other places too, with the same signature).
This looks a little weird - maybe a `&&` instead?
Should we make this a pointer, and have the same struct set on `s svc`?
I'm pretty sure this is a bug fix. I think it's just `data1[0:1000] + [(2, 2, 2, (), (2)]`, not `data1[0:1004]`
This is wrong. You can use the same logic as the `_size_key` above.
You should be able to remove the `function throwExpectedError()` call here as well.
This needs to move to the `get_free_tcp_port` function.
What's the idea here if `entry['directory']` is `file` and `directory` is not `file`?
I'd rather have the function return the error so the error is not always true.
I think the `authenticated` argument is unused.
Why do we need to pass the map here?
Why is this change necessary?
This is not needed.
Is it correct to have 0 as the first parameter? I'm not sure if that is correct or not.
this should be the error message, not the log message.
This is not correct. The location_map is an array of strings, which means that the value will never get a list of strings (since it's an array of strings).
Is this a bug fix? If so, can we use a separate variable to make sure `if subs != "" {` works as expected?
Use `go.opentelemetry.*.*` instead.
this seems unrelated to the rest of the PR
can we add it to the `before_listener` namespace so we can add it there too? It's not really clear what it does and is a bit confusing.
This seems a bit odd. I think we should just have a separate `aws/` prefix here.
Can you also remove the `/* eslint-enable no-unused-expressions */` part?
Why are these changes in this PR?
I don't understand the difference between this and the other PR: what about the other changes in this file, that way it would still end up getting the error returned by the user?
What's the reason for changing this to `GetInsightDataResponse`?
I'm not sure if this is a good idea. The `summary_data` is used to get the "summary" buffer from the cache, and that's why the "summary" buffer has the "summary" buffer (and the "fd" entry in this case). It looks like the logic here is to not be able to use the `fd_close` buffer. The "summary" buffer contains the "fd", which is why we need to use the default value for this. We need to do it for the "summary" buffer and not for every other cache.
Is this a bug fix?
I think we can also use `getRootRoot` instead of `prefix` here.
I think it would be more clear if it would be a `bool` or `false`, and the `bool` would be more readable.
This doesn't appear to be done in the code.
We should be explicit about this.
why did you choose to use a single `x` here?
I'm not sure what the best way to handle this is, is it?
Why is this nullptr?
Can we move this to here, so that it doesn't break anything? We can avoid having it in a separate PR.
This seems a little strange. Why do we need a new service here?
This is the only place in the `text.sanitize` method, is it safe to just remove the `if` condition in line 130?
I don't think it should be here. It is a `RelationshipType` and it can be removed.
Can you explain why these changes were made?
this seems to be a wrong change
This is a little confusing. How about something more like `NewResourceVersion()`?
wrong import order
Is this something that we want to make sure we have no `user.Register`?
can we make the test fail if the start is true?
The test should be false.
I think we need to do the same for `__call__` and `__call__`.
This import is no longer used.
Is this something that we don't need for the `context` in the `createTable`?
Can we have a test for this?
Should we check whether the serial > 0 is set?
I'd rather not do the modeled in this case.
Can we remove this?
should we change to `api.enter password = "enter password (again)" ?
you should remove the file name now that it is not used anymore
I'd rather not do this now, but just curious, why is it needed?
I think this is not correct, the type is not correct
Is this a BC break?
The location of the chemical feature is a string and it should not be a string.
`is_page` instead of `is_page`?
Shouldn't these be `volatile`?
@deads2k @smarterclayton do you know if there are any other places that might want to fix that?
This is a change for now, is not related to this PR, but I think the `Stream` is still not correct.
Should we use the `Set` method here?
These changes seem unrelated to the PR. Are they intended as separate commit or am I wrong?
I'd suggest we throw an NPE here, instead of casting to a `nameof` and the exception, we can use the `Passed` context instead.
I don't know if it can happen that the proactively is not the option, but the proactively seems to have been added.
This is an API break. You should add this to the `this` function above.
I would keep this, as it is no longer used, and we could just delete it.
I think you can just remove the `if` here, since the method is already inside the if statement
I'm not sure this method is really needed here, since `getTagName` can only return a `true` if the branch name is already a `Brain`
This command is used in the snapshot function in the snapshot module. Why not just remove it?
@lannka FYI - This change is needed for a specific example of the changes in this PR.
I'm not sure about the name `handle`. The `win` is the same in the API.
Why not just remove this method?
It seems like you can get rid of `ctx.Handle` here.
nice catch! I'd suggest to have a separate "if (!flow) { return; }` statement here.
Shouldn't this be `flash.now[:warning] = "You are about to modify a fully qualified name for this method?
Same here. Not sure about this one.
Can we use `t.Log` here?
@Pearl1594 is this necessary? Is it possible to get the client's current implementation, or can we get a better idea if that's not the case?
Why is this necessary here?
This is the only place that works in the middle of a feature, I assume that in the first place we'd want to have this `Errno` or `ErrErrM`?
Where is this being used?
I don't think this is needed
Why did we delete this file?
This should be a separate PR, right?
I think we can drop this section. It also makes it sound like there is no `and` section in the form.
I think this is unnecessary because we can just put these in a `createTestClientRequests` namespace.
We should be able to use `-1` here, since it's not the option for every other command (like we already know)
Is this the only one you want to use for?
This can be removed as it is the only one that uses theDateTimeInterface
I think this may be wrong. We should be able to get a task in the future if possible.
This is a change from what I was thinking of a new message that would not trigger the job in the case where a message was not supported. The error would not be useful, and that is the "empty address" is the "empty" in the case of an invalid job. If you think it is better to check the service, and then check if the service is actually not supported, and throw the error
Nit: this should probably be `padding: 0`
This change seems unrelated, can you revert?
This is a change in behavior. The current_collection_id is not an object, so I think it's ok to change it for the future (if we have to change it) but this is a very small change.
Please use `-3` for all the variables
This was a mistake before, and now it looks like the `wtimeout` was removed.
Maybe just use lambda as lambda?
Do you know what exactly are the `pl` format of `1`?
Can't we just do `this.appenders.Length; ++i`, and do `this.appenders[i] == null` in the method?
Why is the name change required?
Probably a better place to put this code into the `assert_size` function. This is just used in all places.
This should not be part of any API
Can't the compiler have a different exception that should be logged in. What does it mean to do here and not just the other ones?
The `xwayland_server_create` is already checked in `server`. So the `&&` here is never being passed as a `bool` and `free`. So, it is not necessary to `xwayland` because it is the one that was not found. This is an easy change and I was not sure about how this is called.
`crypto` can be removed
This import is already here.
Is it possible for this to happen at a different level?
This is a change of behavior, but I am wondering if we should keep the `zfs.py` prefix as a parameter and make sure the prefix is not available.
I wonder if there's a way to have a transport file to not have a transport file that is set to `@environment` but if it doesn't exist, it wouldn't be better to have a transport plugin.
This should be `allowOptionalMappings == false`
static import for `layer`, `dict` and `type`
This should be "inventoryQuantityFormat", not inventory
No need for udsServer?
This is the fix. We need to make sure we do not have to change this, right?
I think this should be done after the map map is called, not before
I'd rather use `git rev-parse HEAD` in the name, since it's only used in one place, so we might be able to move the `version` part there.
Is this needed?
I think this is fine, but it's not a good idea to use `dlg.contains` instead of `contains` here.
Is there a test that didn't run this on the test? It seems that the `EnvironmentTextOutputOnFail` function will fail and we will get `EnvironmentTextOutputOnFail` to run this test.
Is this actually needed?
I don't understand why this condition is required, and if not, we return if the token is NULL. I would say it is not required here, because the token was NULL before and the result is not null. It seems a bit of an error if it is not and it should be handled by a null reference.
What is the reason for not using `ReadAsync` here?
Nit: `file_exists`, `file_info`. The `*` should be `const TCHAR *fn`.
Can we call it `env` or `envName`?
I think we should make this a `SetAnnotations`, since we are already using that in the base class and we're not using it in the base class (e.g. in `pkg/server/server/server.go`).
Do we have tests for that?
Shouldn't it be `break`?
This is not needed, right?
This is a special case. I think this can be removed now.
This file should be added to the `janned` module.
You need to use `putExtra()` here, as you have in the other places.
I think you meant `require` here to be consistent with the other tests
you can drop `TrackingVoltage::PagesController` from this class
Is this needed? It looks like we don't return anything here?
Why not use the `.Deployment` field here?
We need an additional `CustomClientAuth Auth` struct to be able to use it in the `ClientClient`.
NIT: do we have a test for that?
This seems wrong. The child will still be false if the `child` variable was not defined.
Why did the change here?
Should we add an `else if err != nil` check here too?
`handle` is not used by `win.handle` but `Object` has `win.handle`
Shouldn't we set a default here?
What's the difference between this and the new one in `Engine`?
I think you can just remove this, as this will be used in any place and this will break other users.
This method is deprecated, and it can be removed.
I would prefer to not have this as an `Optional`. I think we should just remove the `EDIT` and `InMemory` methods.
This is an error, should we be using the `awserr` as well?
Please make this a constant, otherwise this will break the build that is not allowed.
We should probably add some kind of header about how this pattern works.
@smarterclayton can we do this in a follow up PR and just call get's `chain.Trim` on its own line?
I don't think you need to add the return value here.
This should be `info()`.
this is a breaking change. It looks like we're doing this for the next time
Is this the correct thing to do here? I think `_viewsContainer` is still used to set the `Resolve` property and the `_viewsContainer` property is not defined in `_views` (as it is already added by `_get()`).
Is this needed?
We can remove this `if` and the `get_holdingpen_objects` function now.
This can be removed as it's not used anywhere
Is this needed?
this is not needed anymore?
Please put a space before the `,`
this is a very minor thing, I'm not sure if we should have an `super` or `super` at first, but it's probably not a blocker for this PR, so it's not really necessary in the code, since we're just doing it here
Is there any need to include in `pkg/api/errors`?
You could just call `elly_` with the capitalization and have the double `elly_`, just the double `elly_`.
This should be done only in `DeadlineExceeded`, but I don't think that we need to do that.
can we call it `chainStore.Repo.Config()`?
I think `*` in our code base is not in the code base but it should be in the same package
Why do we change the default value?
This check can be moved to `app/models/test-configs/test-configs.js`
This should be a different PR.
Why was this removed?
"Compute service account to be used by importer. When empty, the Compute Engine default service account is used..."
I believe we're supposed to be using the `git checkout` option here because it's not used anywhere else.
This will need to be updated in a PR
I'm not sure that you should be checking for `numpy` here, as it is now the type of `assert`
Is this line break necessary?
Do you need to check `.year`? It looks like you can get the correct type than `.year`
This function can return a `bytes` value for each call to this method.
Why did you change this?
Why do we need to set this?
This is not related to this PR, but it's also not related to this PR, and it's not related to this PR.
should these be print_result or print_event_result?
Why does this need to be public ?
Use the `@user` as the latter would be more idiomatic
Trailing whitespace detected.
I think this should be `curSchemaSumary == null` instead of `ClusteredIndex`?
Why are these two separate methods for `_` and `_`? I think we can remove the `Run`.
Shouldn't this be `_` or `github.com/cake`?
@kblees Can you explain this change?
Do we want a better option here? I think the name of the property should be more specific, e.g. `ll.imated.Comparing bare callable`?
This is not related to this PR, but why is this removed?
You should not be calling `computeConcern` here, it should be a `const WriteConcern = resolveReadPreference(parent, this.options);`
Why not keep the rest of the code as simple as possible?
`matcher` is a little confusing with how the `Spark_path` works, but is `Spark_path` the default value? It looks weird to me.
Why does 0 need to be checked?
Can we remove `==`?
Rather than doing a `.compact.compact` here, let's make sure the field doesn't exist.
This is the change I was about is to make sure I understand what's the point of this change. I'm not sure how to make this change, but I think it's a good thing to make it work. I'm also not sure if this is something we want to change in the James, so I'd suggest to change it here as well.
We need to be sure that all these are being used for the `identity dto_discovery.Identity` package.
You don't need the `profileID` here.
I'm not sure this is the good idea. If you do it in the `DEFAULT_ptr` block, then you can call `std::unique_ptr` in the `DEFAULT_ptr` method.
Why not use `this.node.getAttempt() > 0` instead?
I would move this `has_many` to where it was used, and if you want it to return the file it's a `team` object, this would be easier in the future.
why we need this?
Is this necessary?
can you make the logging at the end of the function?
This is a bit confusing. I think the `.each` should be renamed as well.
Prefer `Errorf_Errorf` over `Errorf_Errorf` over `Errorf` over `Errorf.Errorf`.
This is not necessary, we can use `.gitignore` instead
This is wrong, I think.
Can you please change `null` to `false` here and in other places?
Why was this changed?
Can we use a `try/finally` here to ensure this is a bit confusing, and not a blocker. It would be better to just use an `int` here, which would then be `write` and would be a bit more specific, and the user should have `int` the same as `int`
Should be `if (c.trace == 0)`
This is now done by a lot of noise. Should we be doing this in a `Join` package?
why remove the public methods?
Can you move this back to the group of imports?
I think this will break the API. It is not needed anymore, as it is not used anymore.
I think you need to use the function from wlr_output_event_present in wlr_output_map.
I'm not sure this is a good idea, as this is used for the other types of the same table (e.g. we already have the `_ discounted_annual_payment` method).
How come this is not breaking anything?
Do we still need the `isort` check?
Would it make sense to import the `moves` here?
Is this a typo?
This is not a valid example of the `Chromium-based browser`, so we should be able to remove it entirely (or even add another one to the other).
Please add a return type to the current ref.
This is the only change I have forgot about.
These could be combined in many other files, as they are the same.
I'm not sure why these changes are needed here. Can you explain?
This is not related to your change, but should we remove it?
Can you use a short message for this? It's not obvious that the `if` statement will do.
This is a duplicate of line 174 above. The only reason the `taut` format is being removed is because `taut` is `undefined`.
`lines` could be `""` here, as it's not very useful.
This seems to be unnecessary, as the old code can't be removed as it's already in the `if`, right?
Would it break the warning?
This could use `req.CommRs` to get the `acent` variable.
Do we have a test for this? I think we can just make it a function in `notification::dismissed`
I think we should remove that line.
Is this really necessary? I don't think we need it in other areas, as this will always be false.
I would move this to the `build_system.py` file, to keep the same behavior for each new one.
Is it possible to use the `_autosave` instead of `session_save`? We could also support `_autosave_list = self.session_save('_autosave', quiet=True)` for the `session_save` method, and use that instead.
I don't know if it's worth it, but why not just remove it?
I'm not sure we should be exposing it here, since it's not really required.
nit: this is a breaking change.
remove empty line
is there a reason you are changing this to `PendingPendingTarget`.
I would call it `wl_keyboard_send_keymap` here as it is a function.
The new `ClientMaxSendMsgSize` struct is used to be able to use the new one for the `ClientMaxSendMsgSize`.
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
I think you can delete the `(line1) for those fields that is `t', type(line 3)` here and in `line.
I think `Args` is not needed here.
The same goes for the other tests, I believe, should we have a `req("q","*:*", "wt","velocity",VelocityResponseWriter.TEMPLATE,"foreach")` check?
Seems reasonable to pass in a context and use this instead of calling the function
Is this a correct change?
I would have expected this to be named 'RootRoot'.
The `!=null` is not needed here
I'd prefer to not use `apis` in this PR.
This was just me, but I think we should remove the `handleOwnershipTransferDelay` call.
I think the `Config.empty?` can be dropped now, right?
I think you should return `0` here.
What is the difference between `MaxIPSetSize` and `MaxIPSetSize`?
I wonder if we should be able to remove the `showDeleteAttachment(attachment, i18n)`.
Can you add some more details about the visibility of these things? This would allow us to make a change in behavior that will break some of those.
The name `DockerLabels` is confusing. How about `DockerLabels`? (or something similar?)
Is this method used?
This is a bug, I think we may need to make sure that we return `c.buildActions` instead of `err` when returning a `err`.
Can you explain the purpose of this import?
I think it would be better if we just return `null` here, because we don't have to return it in the `if` clause, because the `if` block above will be removed and the `else` statement will not be needed.
Why is this necessary?
This is the fix. `computeIfAbsent` is only used by the `QueryConverter` class, but is not the correct method. `computeIfAbsent` can be used in many places as it is used in many places in the code base, and `default.getContext()` should probably be removed from this class as well.
The `backendConfig` property needs to be updated, it is not used outside the package (e.g. it is a property that has it called from the package)
Same, this should be done in a different commit
This was a bug.
Why not just add some docstring to the docstring?
This check is redundant, as `updateEvent` has a `boolean` check on line 283. I think you can get rid of this.
I think we still want to keep this. The rest is important.
Is this class needed?
Why do we need to make this configurable?
This is a bit of a hack, as it seems like it would be `private final Integer`.
@sahbi-ktifa Can you please revert the change to this?
Could you add some docstring for that?
Should we add `name` to the volume type as well?
Why not just inline the `ServoRegistryRegistry` variable?
Why do we need a cast to `Object.second` here?
I'd suggest to use `.forEach(testSuite => {Analysis(runOn)); }` for this.
I think that we need to move this line down the road.
This is not used by any of the tests, so we should remove it.
Why not just remove this?
nit: can we call this `deepUserCtxKey` or something like that?
This is a no-op change. It would be great if the hostname was already added.
`context` or `TestNonNull`
this is not a nilest, you need to pass @attributes and @attributes
This file should be grouped with the rest of the imports.
Shouldn't we replace it with the other "github.com/iotex-address" imports?
This is an internal API change, not an issue.
`config["solids"]` is the default, so you could just use `self.get(type=self.get())` instead
Should be a class constant, not a class name.
I don't like this. This should be called when creating a user-facing container, and not having the `PartitionValue` object as the default key
This is a very good change. But this is a very specific fix. It's fine to just return 0 here.
Why do you want to do this?
This should be `session.connect(function(err, client))` and remove all the other lines.
Please remove the blank line.
this looks unused, can you remove it?
Could we have a better name for this new header? It's more likely that all the other types of `sqlSeq` are being used for each header.
Should it be None by default?
Shouldn't we use `.present?` as well instead of `.present?`?
`getInput` is not a public method. Can we name it as `clearInput` and use a different method for the `getInput` instead?
Can you rename this to something like `name                   `?
I think you should include the header header header here.
Why did you make this change? I'm not sure if you have to.
@bflad not sure if this should be `self.location.pathname || value || '';` ?
Use the new Ruby 1.9 hash syntax.
Isn't the `DoneAsync` now redundant? Seems like it should have been done a lot of time before.
I believe this is a bug, and it's only relevant for `isdel` but `undefined` is now an empty string
The message should be "ArgumentException stats sent: ", sessionId".
We should use the `include/configure` function in the `int` function to avoid the warning.
I think the `_build` constant should be part of the module
Why are we not just logging the exit code anymore?
Same as above, this is not needed
This is not a part of this PR.
Why do we need this function?
We should also add the `Multimedia\Service` annotation in the constructor.
I think this is a wrong place to put the ulong-freq resources in the UI. It will also make sense to move it in every place for a separate PR.
Is this something you meant to do in here?
Not really related to your PR but I would prefer this one as it is more readable.
What is the thinking behind this change? I think we should change it so the headManifests and headManifests are always returning a headManifests that doesn't break anything.
I don't think it's necessary to import the function here since the docker is already the reference to docker, so it's only a module-level function.
Why is this needed?
I think this is not right. The only reason we have a lot of side-effects is that the pachd side-effects was that this is an unfinished side-effects and we are only using that. I think we should just do it here.
This change is not related to this PR, but is a bug fix now
H2O_VECTOR is a very generic type, why not just define it here, and not do this on line 141?
This could be an `@throws`.
not needed, we have the check for "zone is empty"
Line is too long. [89/80]
This message is now unused now.
@cra0zy do you know why this isn't a `computeIfAbsent`? It seems that the `computeIfAbsent` is used and `computeIfAbsent` is a `computeIfAbsent` object, so I don't have a strong opinion.
`!== @group_level - 1`
This will break all calls to `SwiftASTContext` in `fetch_TYPE_error`.
Is this used?
Why not use `private` directly?
better to do `pylint: modules/users/users_to_Pickle`.
nit: this line is unnecessary.
The `debug` class should not be used here.
How about "something will be set"?
What's a better way to do this? I'm not sure what the right answer is: - you can't use the constant "schema". It is the same as the one you removed in the "schema" section. - It should be `schema.php` - `schema.php`
I think it would be better if it were called `_data_tracker_root` or something similar, and it makes it more obvious that the root google analytics tracker is a root.
The previous code was not doing anything to catch the bug. I had to add this to the `Error` method in the `catch (Exception exception)`, otherwise, the error message was not correct because `exception.MustBeRethrown() == 0` is called. I had to do a similar check in #2590
I think this could just be moved inside the `client` since it is a `const`
I'm not sure if this is a good idea. The global `isAuthenticated` method will always be called on an unrpc-up request. If the latter, then the `isNotInMemory` method will only ever be called once. If the key is not found then the request would be called for all the `isAuthenticated` method.
I would put `!empty($this->mainConfig->Record->preferredMarcField)` in its own line.
Why did you add these white spaces?
I'm not sure we have to use `\b` here. The `apiv$1` is used to create a new "z2" one that can do the same thing.
Should this be a `GetPathRooted` class? (Or is it because it is the type that is a `PathRooted` already?)
Can you please add the same check on the other side of the page?
We should remove this method and just keep the original method.
This seems like a good change. Is there any specific reason to move the test to a separate module? If not, then it would be better to use the same name for all tests.
I think this can be removed as the second check is now no longer needed
why not using `float64` instead?
Why the index?
What is the reason for this change? It seems like we can just get rid of it entirely?
should we also support that?
Is it worth adding an example here that `foo` and `foo != nil` will raise an error when the env variables are found?
This line is the one that I don't think is needed anymore.
Is there any reason why this is removed?
The `sass` package should be renamed to `dev-sass` for clarity.
Why are you not using a global var for the second param?
typo, "in the future" -> "in the future".
@stwstppr this was the bug before?
I think this log message could be more clear. Maybe: "logger.info("Project " + name - 1)
This is an unrelated change and I'm not sure why. I'd prefer the `stats` prefix, as you've already used the analysis.
`__init__.py` files don't use a dependency for this, so we should import it from `pytest.py`.
This is an API breaking change - it is not really a public API. The other option is to just call this method `getAllAllAllAll()` and return an `int` value.
This seems wrong. You have `dependency` already in there. Is it a reason to change `list`?
What if you remove this and the other `checkstyle` keys?
can we just do a config.locks instead?
It looks like the `PerInvoke` property is used for both the `GameData` and `GameData` methods. Is it safe to remove them or just the `GameData` property?
I think we have an issue with this, but I'm not sure if it's better to move this method to a separate module.
These are the same in `app/api/lib/app.go` and `app/api/lib/lib/app/api/lib/app_test.go` and `app/api/lib/lib/lib/types.go`
This is an unrelated change. I don't think the old version was a problem, but we have a new version that was a no-op, so I'm not sure what to do here is.
@pjainan @william, @jcotela is there a reason to use the new `xbuild` instead of `cut`? Isn't it the same as we did for the current `xbuild`?
We can probably just make this a ` requires a static final field in `InputCommand`
I'd prefer to use `as_string_instance` to avoid this kind of condition.
I think we should just delete the metadata file from the `previous-log-max-count` and keep the original metadata in `aws/aws/logger.go` and make the default setting public
@bparees this is the only change needed for this patch.
Is there a reason we are not just removing the `GET` prefix? I think we're missing an `GET` prefix, which is the only way I would expect to be to change the API, right?
Should this be checking whether a iframe is found?
Why do we want to set 10 here?
What if we added the `keybase1-parse-to-print` to `dig` and the `configured_level` key?
There are a lot of code coverage here. Is there a better way to do this?
We should keep the log message as it can be more robust.
This is a bit of a hack but it looks like a lot of code in the code. What is the idea here? I'm assuming that we're only using this in the `app/views/image_content.rb` file? I'd just add the `app/views/image_content.rb` file to the `app/views/image_content.rb` file
We should be doing this only for the new page and also also in the `loadLoginPagePage()` method.
I think that you have to update the description to reflect that it is more useful
Why is this needed?
Would it be possible to have an `if` block around here?
`parseConvert` is not used, right?
This change is not related to the PR, but I think it's worth changing. We can leave it out.
I would add a "TODO" message about the parameter name. It is possible to have a more generic name like "in Javascript-file"
I don't understand how this line is used.
this is just to make sure it does not have the same change as the one in `objects.txt`, right?
Please keep the space after the comma.
Why is the `FakeWebAPI` not needed here?
the `.show` method is used in many places, so this is not a good example. The `Url` method should be kept there.
This is the wrong place for this.
why is this removed?
Why did you remove the `auto node_l` here?
Why is this needed?
you should not allow a `order` variable to be passed as an argument. You should be able to just pass an int here and pass an int in a variable that is used by an int
I think it would be clearer to use `prime-maintain` as the class name
Is this really needed ?
We should consider renaming `clef-signer-endpoint` to `clef-signer-Active-assert`
Is `scss` already covered by `fullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfullfull
why did this change? is it necessary to add this change?
I'm not really a fan of adding this attribute to `dashboard_to` as it is a new method. I'm not sure why we would want to do it, but I wouldn't expect it to be called with a `redirect_to` method.
This is not a `template.log`, right?
Is the new "models" name needed at this point? The `modules/modules` name is not very descriptive about what it is doing. It looks like the `modules/modules` name is used here.
I don't think this is right. The problem is that there's no guarantee that the user is not actually calling the raft, but that is not the right thing.
I would use relative imports
This was added for a while (I was not able to see it being used in this PR, but it seems like there's a lot more of these in the code, I had been writing out a bunch of things that might be a good thing)
Is there a reason to use a different type of error here? Isn't it better to use a different type of error code in a different type, and have the same error message? I don't think it is a good idea to have the type be a different type.
Shouldn't we also remove the "RetrySettings" prefix?
I'd suggest `types.Context` and `types.Save`. Also the name `saver` should be more clear.
I'm pretty sure we don't need `batch` here
This is incorrect. The `isAssignableFrom` check should be removed.
@becker33 can you confirm whether you have any idea why this is here?
We should not use the logger.info method, as it should only be used in the log message.
This is an interesting one. I would have put a couple of `\b`, that's how you want to make a `\t` package for the same thing. I don't think you're using `\b`, but I guess that's not the case anymore, and it's not really a good idea.
I think this is the only thing that would be a bug if we had a non-test number of seconds, right?
This is wrong, `isNotified` will always be true for the callback, so you should be able to remove this check (or simply simply `isNotified`).
I think we should just have a `LogManager.Flush()` call here.
I don't understand this change?
I think this is a good change, we could change this to: `if not isinstance(vals[0]: list):`
Is this change necessary?
We should probably throw some sort of exception here, e.g. with a `DictionaryStore` that has a `DictionaryStore<T>` error, but it's probably not too hard to understand.
This is a good idea to use a different value, and a different value will be defined by `set` anyway.
I don't understand this change. Why did you remove all of this line?
I would keep this as a `@Deprecated`
I think this is not the right place to fix the issue.
I think you should change the 'rum' to 'i'. It's a 'rum' for all the new 'rum' values.
This should be `nil[0]` instead of the second `if`
This is the main change. I think it's better to make the decision here so that the pipeline is only performed once, and then call `get_resume_from_failure`. I suggest to make the name more explicit.
I think I'd prefer a `grid_int` or `grid_int` in the future.
Should we also add a `else if config.AttackTimeout > 0` check instead of checking for `0`?
Is this import still needed, right?
Why is this being added?
This should be a `return` instead to avoid having to pass the `id` as a parameter to `vol` and then it will not be needed.
I'm not sure about these changes.
I think you can just do `time.Sleep(namespace.CacheRefreshInterval + time.Second)` instead of `time.Sleep(namespace.CacheRefreshInterval + time.Second)`
`mmcv.ops` is not used. Please remove.
I'd prefer `// TODO: Remove vpx entry once servers are migrated`.
I am not really sure why this is here. We are now using the default, so we have to update it to reflect that.
Why do we need the `r.h.ResolvedWriters()` check?
Why are these changes needed?
why is the change here?
nit: can we call it `getattr_topology` or something?
Please, fix the typo here and in the other examples
This test will fail on Python 2.7+. Is that correct?
@zcbenz is there a reason we wouldn't want to do that?
Why was this removed?
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
I'm pretty sure this is the correct behavior for `expects error` and `not found`. I don't know if we should change this to `expect`
This should be set in the `_` interface.
Shouldn't this have a `won_store_home` attribute?
I think we can remove this.
Why do we need to set `load` here?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at method body beginning.
I'd suggest to keep the old one. That way the old one could go back to where it's used.
I'm pretty sure that it would be good to make this change to `ctx.Handle(500, "RefreshRepositoryMirror", err)` and then just do `if len(ctx.Handle(500, "RefreshRepositoryMirror", err)`. But that seems like it's a little more readable and more efficient.
Why is this change necessary?
Why do we need to log at all?
I'm assuming this is a leftover and not a fan of it?
this should be a separate function
What happens if we have a `XDPEnabled` value in the config package?
I think we should add a new constructor for this, e.g. `method.QualifiedName qualifiedName`.
I think it would better if you had this for V2 or V1 for V1 for V2?
Not sure we need `catch` at all, can the checks just run on a pointer?
What is the issue here?
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [98/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is not the right place for this. It's a bit weird to have to worry about the environment variable. If we want to have it as a field, I think we should be good to have it here too.
Why switch this to a pointer?
I think we can use the constant here.
This is the line that I'm doing with the other imports, but just wanted to point out, I'm not sure if this is a problem, or if this is a good thing to change.
This is a no-op.
@mattpap Ah, this is a no-op in my opinion. We can do `str` here instead of `QItemSelection` because we are already doing `str` for `spack install --run`, which is a bit more of a `.git blame`.
Shouldn't `unlock_shared` be initialized as a local variable?
We should also be able to use `jsx` for the tests as it could be confusing if the object type is `js`.
I think this import should be removed as well
How does this change help in the future?
@pgavlin Do you mind adding `Open` here too?
can we use a `((((((((((((((((((((((((((List))`
Not sure we want to change this here, but if this is a specific test, I think it would be helpful to move this to the `cli` package as well.
so glad to remove this one
This change looks good. It was only added for the `str` method, so we're not using it here.
This should be the same as `Copyright information:"`, since you're now using `@public` on it, right?
This is a little weird, the first two functions are being used to return a pointer and then the second one.
This change is not needed.
Is it always `connect` for some reason?
Do we know that this will always be configured?
This doesn't look like a good change. I think a `close()` method should be called from `this.awsClientFactory`
This can be simplified to: ``` if (second_intersection_name.empty() || len(intersection[1].name_id) && (first_intersection_name.present())) {
You can use the same signature for both `declare(strict_types=1);` and `declare(..)` below
this import should be unused
Should we also add these new tables for the DAO and DAO?
I'm not sure about this. `return theNumber` is a bit simpler. `const daysMatch && daysMatch[ 1 ], 10 );`
I believe this line should be removed
Why was this removed?
Is the ServiceType used anywhere?
Could you add a `git grep [...]` here?
The value should be a `str`, so it should be `str(idx + 1).rjust(2)`
Is it worth it to keep the original `CanonicalHeaderKey`?
This is a good place to fix the test.
Why not log in the `if (Iterables.size(files) == 0)` check instead?
Can this be a `const ItemType& it = 0;`?
I'm not sure if this should be changed.
I don't think this is the right fix. You should check for NULL here, and then check for NULL before calling `assert_subreq->size`.
I think we should make it configurable by adding `in_time_zone` method. We could avoid having to make this work with the code base.
you're doing this just to be a list of strings. you can remove these lines as you did in the other PR
I think we can revert this change. It's a breaking change for the test.
this is probably not a good idea, but we should probably make it a simple function
This is probably fine as it's not just forcing the `IsDirectory` function to return the directory, but it is not used anywhere else.
This is not a good idea, IMO, the class name is a little confusing to me. I think it would be better to have this method only when it is used.
Why do you remove the config? It seems a bit too generic.
`(id}` should not be necessary here
This is an unrelated change. I would have added it here. If it is only used once, then you can remove it.
Why not directly write `_time`?
this is a no-op change?
This is the main change that works for both the generic and the generic generic generic generic.
This is not the right place to put this. You need to remove `@memberof axe`.
I think this is the only place where we can set the `chained-comparison` property in the `a < b` block.
Is this change intentional?
We can't use `LOG` here
You should use `request.pretty_host` instead of `host` here.
Is there any specific reason to keep this message here?
Is the `!ret != 0` really needed here?
This should probably be `dest='poppler'`.
This change is unrelated to this PR but is not related to this PR?
Why not just add `goto` to the else and add `log.level`?
This should really be a method that takes a boolean parameter, not a method.
This is the only real change that works.
We should keep this in log message as well
Should we change these tests to use log.logger?
Isn't this the right place to use a different `value`? I think that would be clearer if we use a different `hashCode` or `StringUtils.equals(value)` to avoid the check that null and the empty value is null.
Do we really need this change?
You don't need the extra `=` here.
This should be `static const string ChildActionOperationName = "aspnet-mvc.request.child-action";`
I think it would be more readable if you just added the "ssh" command to the form. Or you can change the command-line option to "ssh.monershell.js" and then you can add the command-line option to the output
This will cause an infinite recursion, but I don't see why it's here
Why was this removed?
This import is not used anymore
This is not a great name, but I'd rather it be a separate package, or something like that.
Should be `l2tp','l2f` instead of `l2f` here.
I'd use `configure_Joint` to get a warning message if it's not present or not.
Is this really what we want?
I don't think you meant `importgres` here, you can just remove the `dialects` from the package.
Is there a way to avoid this and just check the result? I think it's more accurate to check for the `assertThat()` and the result.
What do you think about moving this into a new method?
You can remove `volume_mounts` and just add ` also` in the `` pdbos`` package.
Why is this not a static variable.
I'm pretty sure this is going to be a good idea. I'd prefer to have this in a separate PR.
@liggitt I don't think you need to import `spack.util` here since you are only using `version.list`.
I think we can get rid of the `isWorkflowConditionFailedError` and just use the `isWorkflowConditionFailedError` variable in `query2.(*persistence.CurrentWorkflowConditionFailedError`.
Does the changes in this file need to be reverted too?
Is there any specific reason for not having these in a macro?
This should be moved into the interface interface.
This is the only place I can do is check if this is a valid node, and it's not a problem in the code.
I would not add a `InvalidConverterConverter` and `IndentationConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterConverterPackPackPackPackPackPackPackPackPackPackPackPackWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindowWindow` to this PR.
I'm not sure this is correct. The list of groups will be added by the user, so I'm wondering whether we should just add a list of groups here, like if we are doing some type checking, like if it's the case that the list will be `null` if it is.
Is there any difference between this and `get_object`?
I would prefer to keep the `Namedorsors` as it was before, since it is only used when a `try` block (which is not the case) and it is actually used
Metrics/LineLength: Line is too long. [82/80]
This error is probably a better error message, but I don't think we should be changing the error message.
@agramfort this is a change from the previous behavior, I think you should add `@return True`.
Is it better to use `key` as an argument instead of just `ctx`.
I think the `else` should be moved out of here.
this is a log line, we should log the resync at line 130.
I think this should be `idx.length` since it is the default.
Should this be `iaright (C) 2006-2019tNV Access Limited`?
Is this the right way to specify it, or was it just the old code?
This is the only place where we call `setPrototypeOf` in this file.
This is an unrelated change. I'm wondering if we shouldn't need this check here since it's only used by one place (and we can also remove the old one).
This assertion is redundant now that you are doing the `open` above.
Space inside { missing.<br>Space inside } missing.
I think we should remove this property and make the property `public bool RecordException { get; }`. Then we could just call `set.Run` instead. It's the only thing that is being used in this PR, but I don't see how this is used. I think this should be `Pulumi state` and `Pulumi state` should just be a `WorkspaceModel` property.
we could just catch the exception here.
I think it's better to use `inputs=[self` instead of `self._unstable_apply(inputs=[self, callback=callback, ...)` for consistency with the `if` statements.
Maybe we can add `.` prefix to make it less likely, since this is a bit verbose.
I'd prefer a `const` here and instead `const` (and the same for the following line).
this change is unrelated...
This is actually not a part of the `new Header[2]`.
Why was this changed? The only time we have this is the default, we don't have that.
Is it a good idea to use a constant for this? I don't think so.
this seems to be wrong. I would remove this and put it on the `ftp` method
Why is that needed?
This should be reverted.
This line should be removed as well.
is it really necessary that this test is failing because of the `@JsonFacets`?
This isn't necessary because it was only used in the `time` branch and it was removed in #2421 (see #2421).
Do we need this? We can just remove all the `BytesDecoder` URLs.
I don't know that this will be a problem, but this code doesn't have to do with the previous code (e.g. `mymymymymy_listens`). We can also make a helper for that.
The type is `<` (the type) so this should be changed.
@tgamblin Do you have any idea what this was supposed to do? It should probably be in `lib/scm.h` (or similar)
@danrot I think this should be `# type: ignore` instead
Could you make it more clear what the copyright uses of 2013 and how it works?
Should this be `DST crosssign.inds`?
Why do we need this in the new config?
@Jjagg - I think the `node-mongodb` is still needed for this. `node-mongodb` needs to be moved into `node-mongodb` as there is no reason to use the `.js` in this file.
Is this used?
I think we should also make the test match in the other file
This test seems to fail because it's not being used anymore. I don't really understand why we need it?
@tlauda is there any reason to do this?
This is a little unintended change. Is it really necessary?
Should we make this configurable?
Is this a TODO? Is it the only place that needs it?
`in UInt256? baseFeePerGas = null` is the correct type.
I think it should be `Byte1`. Same question for the other `Byte2` methods below.
should we use a different set of table table table for that purpose ?
What's wrong with this change?
You probably want the test case here, but this is not right.
Should we be returning the result in the same way we do `t we'll be using the right args here?
This seems to be missing a `AllowConnectionWindowIncrease func`
This is a bit confusing to me. If it is just a warning, why not just use an else here ?
` named `do_data_param` has a couple of issues here.
This is the only place where I'd prefer if we could use the `KeyRegistrationTxEncode` function here.
@zjffdu Why is this change required?
Is it possible to change these to a struct type?
Do we need `Source.do_commit` here?
Is this just to make this function public?
This seems like an odd place. I think it's better to use `extension.filter` instead?
I wonder if we shouldn't just have a single `all`/`all` be the same.
Is it possible that CLIENT_INTERFACE will be set to true even when no batch_INTERFACE is set to true?
This is not related to this PR, but we should also change these to `CHMolLines` and `CHMolLines`
Please use single quotes in imports.
Is this being used?
this is the line that you've changed
`Pass_in?` and `Pass_in_analytics?` should be added to the list of `signed_in_item`.
Why not `gorm.ErrWantSelf`?
I'm not sure if this is correct. You can just call it `md#autoRowSize` if you want. If you don't want, you can just make it a `md#autoRowSize`, or, say, you can call it something else in case you want, and you don't want any other version in that case.
I'd just delete this variable too, it's used as a constant in the class and don't use it anywhere (see the other functions below).
Why does this change?
Line is too long. [87/80]
This is the only place where it's used. It might be worthwhile to add some more context than just checking for the first block.
Can you please use `self.size_t` instead?
This is not a part of the public API, right?
Hum, this was a bug.
I think the previous `WriteToReadonlyNodeError` was correct here, it was only used in one place in `configconfig.KBFSOps()`, so it's ok to just remove the `WriteToReadonlyNodeError` here.
We should be doing this for all cases in the code. `res` is going to be nil if `--applicationErr` is nil, which is the case for the `else` case.
I would make a test for this as it's already present in the tests
this will be removed after upgrade.
I am not sure we need to add the debug level `enableSerializationHack()`. It will only happen if the user is not found, and that will only happen if the user has been deleted in that case.
I think this should be a dependency on the library, not just the dependency on `v1.8.0`
Should the wording be "Cannot create a plan with a openFileCost that is not positive..."?
I don't think the `phoenicis.png` is needed here.
Align the elements of an array literal if they span more than one line.
I'd like for the extra `*` to be a bit more verbose, but I'm not sure what the best option here is.
nit: I would prefer to avoid creating ` OrderedDict` as it is a `cast` (which is also in `__init__.py`.)
Can you please revert this change and fix the test in master to ensure we don't break anything else.
In the future we should just keep this, because it's not a big deal.
this seems unrelated
This is a change from outside of the scope of the PR. The `variable_atomic_type` was used to set the `_call` property and the `call_arg` field to the `_method_call`, but it was not being removed in that file. I guess we want to remove the `TTemplateParamClass` property in the PR, and not here anymore.
This should be done with your `foreach`, since it is not really related to the other changes I would have made.
Why is this `InternetGatewayID`?
nit: `BigInteger` -> `BigIntegerHash`
This should be `debug`, right?
These two assertions used the same logic.
I think this should be a `private` (and similarly its `protected`)
Is this file still needed?
I think this test should still be conditional on `analytics` too, right?
This is a non-standard class, and I don't see where it's used, so I'd be surprised if we don't need the null check here, it's used to be a bit more.
Can't use a `CloseableIterable<Record>` here
I don't see any usages of globalize here?
this will not work. you'll need to check for an explicit `assertEquals(self)`
The `pid` is a bit of a hack, so you should just return `pid.Join()` here (and then use `isConnected()`).
Shouldn't we just always return `true` if `false`?
Would you be able to do a `var (0)` in the name? It seems like it would have been more consistent.
I would prefer if we have `logger.parseparse(example_group)` as it is not a block?
this was the wrong place for this
is this the only place where the display_name is used? if not, I'd recommend to remove the const.
why not use chain.Store instead of chain.Store
Why not just add the validation to the disk attachments?
This is a very commonly used API. Can you also add a new one for the specific one?
What about other types of properties in the class?
@jhipster/developers why we need this change ?
Seems like you removed the param param here, since it's no longer used.
shouldnt this be nullable and then just set `initializer` in the constructor?
This seems to work as expected. Can we move it to the `modules/internal/internal/internal/internal` class? It would avoid having to pass the `modules/internal/internal/internal` package.
I think this change is not needed anymore.
We should not be doing this anymore, right?
I'd prefer if we'd use `reverse` and `reverse64` here.
@jackfrancis I think this should be `IP.join()` as we are not setting the "got IP" event.
I don't really see why this import is required, but it seems to be unused
Why not keep the `ExpectData` and just call `Http2Stream` directly?
This should probably be reverted.
Would we ever want to do a test that checks if `load()` is `null`?
is there any reason this is not passed in?
I don't understand this block. If you are going to put it in a file called `pip.header.header` it means that the cache will be sent in the main path, and that you can get rid of it (and it will not be able to be reproducible in the future), it's probably not the case anymore, but it is not.
I think this might be a breaking change?
I think we can do a similar check in `cgroupManager.Freeze` instead of hardcoding the `ENTKILL` here
This should be changed to `const MongoURIError(`skipping SSL tests, MONGODB_URI environment variable is not defined`
@stuhood @harry-cpp - Isn't this the only place where the user can use this resource?
Is this change intended?
Should not be required here.
This method name is not very descriptive. Maybe `setUploadedFlowFile`?
What's the reasoning behind this change? Is it just to make it more explicit? Can we just remove it?
I don't know if we have any way to check for `oconIntoView` here, but I'm not sure how we can handle this here in the future...
Should we do something here, or should we do something if we have apt-key?
Hm, why was this removed?
I would just rename `queue.isSingleValued()` to `isSameAs()`.
I think it is better to keep these as `Unsafe::ThreadPoolExecutor` rather than `Unsafe::ThreadPoolExecutor`, as it is the same as `Unsafe::ThreadPoolExecutor`.
you should check whether `mean` is set by `loss == 'none'`.
Not sure about this change...
Please revert this change.
Why did you change all of these to `plot_to_base64`?
We have this in the build.go file.
Is this a bug fix?
Is this still needed?
We should not have any way to implement this function.
Could we just have an test for that?
Please rename the constants to ZMS_PROP_PRINCIPAL_STATE_UPDATER_DISABLE_TIMER.
Please also check that there are multiple options for the same result
We should not use the default here. We need to keep this in sync with other places where this needs.
@deads2k any idea why we don't need to keep the `queue` path?
Should we just return the stream?
Can we just use `$this->serviceLocator` instead, to make it clear that we don't have to pass in a `AccountCapabilities` object?
I'm not really familiar with this part, but I think it's better to use `PodPhaseSelectors []string` instead of `PodPhaseSelectors`
Should we have a more specific description for `AllowlistedModules`?
Why do you add it? It's used in the list, not from the list.
Please remove this.
This is an important change, and I don't see a reason for this.
This is a bit of a hack, can you move this to the next line?
nit: `[]` is not necessary
I would prefer to have a default argument here and a default value in the `if` block.
Hmm, this is probably not correct. I think the only change here is that it is used that we can remove this. If we are going to change this to a `boolean` then we can remove it.
Please use a constant for this.
Can we use `Run.js` here?
Is there no way for the user to enable the handler, since the only thing that's being called is the `isNodeProcess` check?
I'm not sure why you'd want to remove this. It seems like the `Reliability` argument is not a `string`, but it seems like we should be doing this on all the other places. I'm not sure what it is supposed to do.
Can you add this to all versions of the `pdf` and the `pdf_count`?
I think the `deliver_later` method should be renamed as well, since it's only applied to the `user` method.
This is an improvement as we do in theory of the code base.
This should probably be `if (!IsDoorOpen())`
Why is this needed?
can we make this `Put` and `first`?
I don't understand why we have to change the condition here, since this is only a single boolean. Can you please add a space after `&hdfsAsciiSourceData_[attr->getNullIndOffset] = -1;` in the line above?
This should be done by `include ExceptionPolicy` in line with the other `role` operator.
I think we also need to do `.to_r(1)` for this.
Can the `state->table_space.table[table->branch_type]` be empty?
Why change the copyright year?
Isn't there a need to return here? I'm not sure how this would happen...
I think it's better to use the same number of those objects as the rest of the file
Is it still valid to have a type annotation here, so that we can just use a type as `o`?
Can we use `block(map[string], ...)` here?
I think this should be in `Openudi-issue`.
I think it's better to use `set_format` in this function, and just use `set_format` in the docstring.
This is a very minor change.
I would use `pathlib` here. The name is a bit confusing since it's a `copy` and it makes it more readable for this type to be a `copy`.
Why is this necessary?
In a followup PR, I'd suggest removing that parameter from `backend`.
I would rename this to `NewAPIAPI()` to make it clear that it's only used in the `GetDeploymentChainRequest` function.
this change makes sense, but if we're using it elsewhere, we should just change the default behavior to `w` and `w2` instead (or at least remove it from the `CreateServer` method).
Why change the value to 1?
I'm not sure about these changes. I don't think they are necessary.
Should this log at `lib/zfs/partial.py`?
`handle` is used to specify the type. I don't think it will work here, but it's not used anymore.
This is not needed.
I don't think you need to change this, but it's only used in the `vendor`. The `vendor` prefix was not used in the project.
`old.copyFromPump()` should be `null` instead of `get(0)`.
This is probably not a good change, but it would be nice if we could remove the `Handle` and `type`.
I'd like to see the `provisioningDelayCondition` at the top, but not to have it here.
I don't think there is any need to specify the `!` here anymore, since the only case where it's not in the image is in the image
This is a bit confusing, as it will not work on Windows. Maybe the `nilkeys` is not necessary here.
Same here - we can make this `SetAsync`.
Why is this being added, I think?
This file should be in a separate PR.
Nit: we usually use a set here, in order to avoid a very large number of these three things
should we add an expectation that the new one is not properly turned on?
why not keep the twoPhaseIterator?
This seems like a regression, and should never be used.
I'm pretty sure this is a good way to go and see if this is a different issue and we don't need to add any other types.
Can you make a note in the changelog that these imports are in a separate patch? I think it's better to move the code from `#commit` to `#commit` to this file.
This is an unrelated change but I'm not a big fan of it. It's not clear why the API is needed and it's not just the permissions.
Why do we need this check?
I don't know if it's better to leave it here. We don't need to have it in the other module
Is the `t.mutex` argument used here?
Is `GenericContainer#addTask` really the correct thing to do here? If not, then we should add a new `GenericContainer` to the `createTask`, since that is a new `createTask` that will be lost.
I think we can remove `Test` too, because it's not related to `Test`
This is the only way I thought we were going to make the default `false` and not `true`? We are going to support it and they both get the right default.
I don't like having this in the test, but I think it would be a good time to refactor this into a single `includements` method. The same is for `str` below.
I don't think this will be useful. I don't think we should add a log.Start in the log log.Exact().
This needs to be a `*_05 = self.handles['fig'].suptitle('', y=1.05, **title])`
In the current PR, `to.String()` is not used.
Is there an extra `RunActions `?
I think the name of that file should be a bit clearer, e.g. `num_layers` and `num_layers`
This should be just `getView()` and not `getInfo()` as it was just added by the `viewInfo` constructor and we should just remove it from here
This should probably be in another PR
Why do we have both staff and user?
I think the name `bundle` should be `bundle_bundle_save_on` (same for the other class)
I would move the `yield errorStoreActions#receiveError` above the `yield` above the `getURLChannels()` function.
I think we should remove this import
Is it possible to use a constant here?
This is now a generic "html". The only thing I would expect is to change the default behavior for the test, which is not correct.
why do we need this?
I'd prefer if these were changed to `[0-9][0-9])):][[0-9]))\\b]:` and `[0-9][0-9]))\\b]:` as well.
This is a very weird thing to do in a non-static class (the class `TInstrumentation` is used as a static method). It's just a static method on the `ByteByteSourceAdapter` which does this for the class `ByteByteSourceInstrumentation` and it's a different method.
Not sure why we need to change the test name here. I think it is not possible to just test the specific test case, and check if the test case is not present.
This is a no-op, but I think we should have a `fbo.isaud() {` method that returns an error and returns a `None`.
Should we add some type of error to the function?
I think this is not the right place to put it in a migration file.
This should be moved to HIVE/wheel.hive.
I'm a little confused. If the warning is raised and the output message should go before the warning message.
I'd like to see a `const BlockMessageLimit = 512;` above, to make sure that it works well, but it's not a good idea to make.
This is a good time to run a test for this.
Is this the right default? I'm wondering if the default `IsWindows` is the default so we should be using it. If it is not the case in the code, we should remove it.
Can you please use a different name for this param?
I don't think this change is correct.
Why is this removed?
This file is not in master
This is a change in behavior, I don't think this class is necessary.
shouldn't this be `user.com`?
it's not necessary to have a separate folder in the strings. it's only used once in `config.js`.
Isn't there a way for this to be able to be able to be passed through as a static field of `GetTextTable`?
This can just be `locally-disabled,useless-suppression,suppressed-message`. I don't think it matters much but it seems a little weird to have it as `locally-disabled.get("locally-disabled:suppression,suppressed-message")`
I don't think this is a right change - we should just remove the condition.Value from the if block.
I don't think this is necessary. The previous code was not doing any work, so it should be moved to the top of the file.
I am not sure that this is correct. I don't know that it's a good way to make `base` nullable here. The `base` should just be `base` if it's nullable, but it's not.
nit: "only" -> "only"
Is this a TODO? It looks like you're using it to make sure we're not actually deleting them.
I'm not sure I like this... the naming of the ``default_scope`` doesn't match what it does, but if you are not, I'd probably just call this ``scope``
This file has been deprecated.
This is unrelated to the change here. If we want to make a PR in the future, we can add it to the "err" section.
I'm not sure if this is correct, since we have the w in weight list which will only happen for one runner.
I believe this class was only removed in the PR.
I think we should be able to use `message-layer` to check if `CONFIG` is not a path.
This should be `MinSize`
It seems that the `h2o_settings_t` function is only used by `h2o_settings_t`, which is why the other change in this file is needed, and the new version in the list of the values are not there.
This should be `!this.startWorkspace_.setResizesEnabled(false);` (or similar)
I'm not sure why this is needed, but this is a test of the processBuilder that I'm not seeing
I'm confused why we have a `VXLANVNI` constant in the config file here.
I'm not sure that this is the right idea, but I'm not sure it is better to have it in a separate PR.
This is the change to `getClass().getClass().getNameAsString()` as well.
I would rather we do this for other components as well. We can do it for the `.data` module instead (which would be the same as `.data`).
I wonder if this should just be part of the `if anything.getConfiguration().getSS() { ... }` block.
We can use `continue` in these methods to avoid `torch.insert` calls.
Why do we need to update `DescribeIdentifier` as well?
I don't think this should be internal. This is only internal for the user.
I think this needs to be removed too?
I don't think we need this change here, as it was already merged and we can remove it
Why are these changes needed in this patch?
Can we make the default 0 configurable? I think the `if (oldVersion < 1070296)` should just be removed.
This is a breaking change - I think this should be fixed as well.
Why do we have this method in the state machine? Why not simply pass in the `.with_subscription` to the `purchases`?
Use a guard clause instead of wrapping the code inside a conditional expression.
`[]` not needed here.
I think you want to use `DataScope.RecordTimer` here
I think `parse_date` and `attr` should be all-caps.
Please remove the extra space after the closing parenthesis
@liggitt I'm a fan of this, but I think I can get rid of it too
I don't think we should add any of these options here.
I think this should be `*`.
I don't think this needs to be here - the `Namespace` is now an `TaskQueue`.
I'd like to see an `Field` for `AccessList` as we discussed. But I think that is the case for `AccessList` to be non-null, so we might need to make the same change there
I'd suggest to use the `errorString` constant for this.
Should the user just return the flow process?
What is the motivation for this?
why do we need this?
This table doesn't need to be in the DB.
I'm not very familiar with these two functions - is it because the `struct flb_http_client *c` is a `const char *proxy`? If that's not the case, we could just remove this function altogether, and just change the function to be `const char *proxy`
This is the main change. We can change that to `<TableID> 0` instead of `<TableID>`
This is a breaking change. I'm not sure if there's a better way to check it.
Could we use a more descriptive name for this variable? `getCastSink`?
this should be a separate PR
This is a breaking change, we can remove this one.
Could this be called a coupon? Because it's the one we are using in the coupon, and we want to know about it?
I think this should be removed, as the output format is not supported for errors - as the output format is not supported by the output format - and it is not used anymore.
This interface is unused.
I think this is the fix. It should only be done if `Output` is true. The `CombinedOutput` is not present in the command, so you need `Output = exec.Command(prog, args...).Output()`
Please also add `) {` statement.
Would this be better handled in the lowerDomainInResource?
I think the `<topics>` should be nullable, it will be more consistent in the code.
Use the new Ruby 1.9 hash syntax.
Line is too long. [86/80]
Would it be better if we just use `t-6` here instead?
I think it would be better if we had a test for that.
I think we should use the `part == null` instead. It's more clear what we have here that the `onTrigger` method returns a null, but that's the case here that it is called, and it's not a null-returning exception.
I'm not sure what the purpose of this test is here. I'd expect this to be something like `_x_site` or `_x_site-kit`
Can't we make the Flow.Flow a const?
Why not rename to `GraphSummaryToolbar`?
You should remove this
Should this be done in 2.1?
I think this should be a separate PR, but we can't do this for now - it's probably better to use the default config variable for all these tests.
I think we still need to use `-O` here, since `alpha` is only used in `app/models/test-go` and the default for both `alpha` and `app/models/test-go`, and we need to use that in `app/models/test`.
I don't think we need this change. We can do a similar change in the tests for `default` and `defaultdefault` in `oArg`, which is not the case here.
Why is this import necessary?
Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
This change is unnecessary.
Why did you change all of these tests? I don't think that's an issue, but we need to do that.
Why not just remove the file license?
Is this the right thing to do here? It seems to have been `ProductImage` but not `PACKAGING`...
This is not related to the PR.
Please revert this change.
If the feature is not enabled, then it will still show up in the `[0-9]*-x-369]` file if `default is not empty`
Hrm not sure this is needed.
Why not just `log_` and replace `isInteractive_` with `log::getSpaceName()`, and remove the argument `log_` altogether?
`stderr.deviceInfo.get()` can return `stderr.format()` if match.type is no longer available, and you can do `stderr.get() > 0`
I think we shouldn't use `Bucket` as the second parameter, as this will be a valid value.
This file should be renamed to `api-config.js`
this will need to use the `getEditLink` function, right?
This is not a great place for a new package.
This should probably be `get_meticalicalBy`, otherwise it's not used.
@mattpap AFAIK, this should only be done if `Topic` is an `AtomicInteger` instance of `Topic`
There is a more elegant way of doing this, but I would expect this to be something like "stderr -DER_type", which I think is what you want. I don't know which approach.
This is probably not correct, but should be a bit more specific.
Why do we need this?
This can be removed now.
this is a bit scary. We need to make sure that this is the default behavior and not break.
Why is this needed?
Can you add the $mailTemplates to the new parameter so that it is not set by the new parameter in the controller?
@k8sqan What is the point of using a new resource?
How about "Removed as the end user"? (and similarly for other tests below)
Can this just be moved outside the `New` call?
Should we have a test for that?
Why are we doing this? It looks like the test is still testing the right thing, and the test is still testing the same.
Shouldn't it be `getceanbaseValueHandlerProvider`?
This should be reverted.
This one is not related to your issue, but why the change to the original implementation?
I think this should go in the `else:` block below.
Why do we need to remove this?
I'd prefer a more explicit check for `s.lstrip('0x')` here, because it will be very confusing when someone has the `lstrip` and `s` they are not.
I don't think you want to change this to `StringUtils.isNotBlank`
This isn't used. Is it?
I believe it should be an `Optional<String>`. It looks like the code that is used to set the schema to the `new` in a bunch of places where it comes from.
Why not just return ErrConnectionCancelled?
How about using `tm_cpp` instead?
@jcotela is this change intentional?
I'm not sure if we should just always set the default (and not be set here).
@ke-yu any reason to make this change?
why the change?
We can probably just return the `subdir` object here, but this code is still in the test.
I am wondering if this should be `deleteTerms.clear()`
I'm not sure that's the right approach here. The yaml is not really the right one, so I would prefer to keep the old one.
I am not sure if we should be using a flag.
nit: I think we can drop the prefix `_`
I don't know why this is needed, but I think we can't have it here.
I'd like to see `raise "#{e}\n#{e.backtrace}"` as an example.
The `expands_user` attribute is used when there is no way to set `_expands_user` to `False` in the `expands` API. I believe that we need to move the `exp` attribute to `None` if it is not there.
@jcotela is this an unrelated bug fix ?
Can we move this to `Resources/` package, so that we have `io.prestosql.spi.sql.sql.DATE.LOGLOG#model` ?
I think you forgot to remove these?
I don't think we should catch the `next` here.
This is a bit weird. I think it would be more efficient to just have a list of strings and a list of strings, and then a set of strings (or a list of strings). That way we can have a list of exceptions in a list of strings that can be set to false.
Please use the `parse` helper instead of the catch-catch.
`self->lastLogIdSent_` is a string, so we must check the `self->lastLogIdSent_` attribute.
I think this is a good idea to have the same logic as the Provisioned status. The other option is to set the Provisioned status condition, which is not a problem for the Provisioned status.
please use tabbed_browser.tabopen() to make it easier to get it, and add a tab to the next line
I think we can just remove the formatter field and do a duplicate in the test_replace_it.rb, which is equivalent to the formatter field.
Shouldn't this be const?
this seems to be unrelated
Can we put the message in the `boolean` instead of the method?
this is the same change as we did in the PR.
You could just do `mentor_contact_link(current_user.mentor)` here, and then remove `mentor_contact_link` entirely. It's already a minor thing and doesn't seem to be a huge deal, and could be a huge deal.
why do you need to pass the `recieveUpdates`?
don't need to import from `utils`
Why does the `global_true` include the `_WARNING` entry?
This is a bit of an overkill, but the `std::recursive_timed_mutex` and `recursive_timed_mutex` are only relevant to a new map, so this is a breaking change.
I think we should be checking for the error instead of returning error here
Line is too long. [83/80]<br>Space inside { missing.<br>Space inside } missing.
should we also update the `font` param?
this is a bug in our tests, so I don't know what happens when this happens, so it's not clear to me why we need this change
I think this is the only change that works for the server side but I'd like to understand why it's needed.
Why is this being added? Shouldn't the default of `TLS` be the default?
I think we should remove `List` from `lib/core/utils/__init__.py`
Line is too long. [83/80]
nit: if the type of bytes is a string, we should probably check `if notbody.status == 200`, and if it is, then the return of response would be `nil`.
I think this is a breaking API change and will break existing functionality. We need to be sure we don't ever want to do that.
You might want to add some basic doc for the new parameter.
Can't you use a `is '',` method instead?
Can you add an additional check to make sure this is not `create`/`createEnabled` is not found?
Metrics/CyclomaticComplexity: Cyclomatic complexity for serde. Parenthesize the block of block containing the block size, yet the block size is no longer supported.
Just a suggestion: do we need to add a new `dba` to the `ddev` as well?
This could be `[type]"`
This is the only change I'm not convinced that it will return 1 for a content type. I think the check for `multipart/form-data` is actually correct.
Should this be `Empty`?
Can't `excessDomChildren` be null here?
This is not needed.
I thought that was a mistake before...
It would be good to move these lines into the folder folder, but it's a little strange to have a single directory.
This line is redundant, since the if statement below is not in there
I think this test could have made a lot of changes in the tests. We need to ensure it works with the unit tests.
Please add a blank line between tags and summary for better readability.
This method could be renamed to `setCustomData`
Why this change ?
Is this the only method that is used for a query object? I think we should remove it.
The logic of this function is not needed, because it is not only used in the catch block below.
This is not a good idea, but should be removed.
Why the change here?
why is it necessary to do the check for nil? can it be nil?
Is this change necessary?
Was this just dead code?
Would be nice to have a log message for this. The `debug` method should be used in the debug logs to avoid the need for the debug logs.
This should be changed to "go/extractors/bazel/extutil" instead of "go/extractors/bazel")
Should this be a breaking change?
This should be `(other_fields.yml, StringComparison. Using WebDriver);`
Is the assumption that the new `Wait` will not work?
This will break the log level that's being called with 0.
Why was this removed?
This seems like it should be moved to a different place.
Why the switch?
Is it needed?
There is no need to add these to the `confirmation_height_processing` namespace.
We should not do this if we want to do this in a separate PR, but I think the original behavior is still valid. The `manifest_file` should only be set when `false` is set to `false`.
I think this is a bit too much.
Do we have a migration for this?
This should probably be a separate pull request since it is part of a different approach (and I don't think we should be doing that).
@jridgewell Can we have a look at this?
Should we have a similar test for the span span in `StartActive`?
I think the `date` constant should be removed. The `Case` is the same as `Case<String, String>`.
Can we make this `describe` block unchanged?
Same thing here, just `election.active` should be replaced with `election.active`
why is this change needed
I'm not sure about the `DEFINITION` field. It is not necessary.
I don't see any benefit for using an enum here
I'd be tempted to move this to some common helper function. It's not a good change to me.
This is a change in behavior. I think we should fix it.
Why not just make it `protected override void UpdateReadMetrics() => Metrics.EthRequestsDbReads++;` ?
We should use `self._tcpproxy_off` to make it more explicit, e.g. `def _tcpproxy_on()`
Line 158: Use next to skip iteration.
This seems a little strange. Why did we get rid of this?
Can this be changed to be `num_simd_used = 0`?
it seems that these are not in the "permissionpermission" folder, and not in the `permissionpermission` folder, but in the other two places we use `permissionpermission`
I am not sure about this change. I think we can do something more specific about it if we can set authenticationAlgorithm and then set authenticationAlgorithm to null.
This is the right place for the path. The code below does not have a path, and it does need to be recreated before it was done.
It's a little weird to have a class `Facades` in `BackendAuth()`. I guess it's only used in one place, and we don't have to update that in the `Parameter.use(Defaultades\BackendAuth)` call above.
Why is this needed?
This line does nothing.
Can you make the property private and public instead ?
@kube_client_request_seconds is a bit confusing to me - is it a problem for the test?
I'd rather we have this in an earlier PR.
I would suggest `(handle) + 1` as default. It would be a bit more readable and also, as you're just doing a `(handle)` in the function signature.
I don't think this is the right place for this. I think we should be returning something like "round %d is not defined" instead.
Why is this needed?
Should this be in a try/catch block?
can this be `true` instead of `key`?
Please use the `Organization.yml` version instead of `UPDATE`.
I think this is a change in behavior. I'd just make it a little clearer since the `IsZero` function returns a non-`nil`, and then just return a new one.
Nit: This name doesn't really make sense here.
I'd prefer we use `copy(nodeStack, inputPlan.Roots))` here.
Why is this removed?
Why do you add `v` and `8080` here? I don't quite see why the `v` is being changed in this PR.
I think you can just do this in the `ANDROID_NDK` and do `ANDROID_NDK_HOME` directly.
if it is not defined it is 0. I don't think you need to set it to 0.0 anymore.
Do not use parentheses for method calls with no arguments.
I would not do that, but I don't see where the value is used.
I don't think this is needed. The `isLatest()` method will return false anyway
can you add a note to remove this and just add the standard library?
This is a bit of an unrelated but it should not be here
Is this the right place for the remove?
What does this change do?
Can we rename this to have a method? I can see it's used for other languages
I wonder if we want to keep this `@FunctionalInterface` and keep it `@FunctionalInterface` to avoid the change. The reason for this is that the `@FunctionalInterface` will never be called.
I think this is a bit of an overkill, and I could not think of a better name, if we do not change the name of the variable, I think `seq` could be used for other actions, e.g. `seq_for_length` or something
How is this import changed?
Can we just do `locator_list.end()` here?
I don't quite understand why this is needed. The `if` is redundant here, and the `else` is unnecessary.
I think it's better to use `.spec.duration` instead of `duration`.
This is a test of AbstractArchive, not the parent class.
This is an API breaking change and will be future proofing.
I think we can get rid of all this method entirely in `getAlgorithmInstance` and use the function in `getCacheInstance` and `getItemsInstance`.
Why we need to handle the timeout in the `StatusGatewayTimeout`?
I don't know if this is the best place for this change.
Is this a BC break?
This is a bug fix. You should be able to make a separate PR that will complain about.
This is a bit confusing, why is the cache `static` not the `exes`?
I'm not sure if the `readState` function is really used here, can you explain?
This was a hack, and I'm assuming you are not actually using it.
Can you change this to `BOOL`? We need to be sure that the timestamp is correct.
Can you please explain why these changes are needed? I don't see it being used
`... `... `... `... `...`?
Is this an accidental change? I thought we'd want to keep this in for now, but I'm not sure how much we would like to do this.
this is not needed
I think you can just use `.shape[-1]` here, right?
I don't think this needs the spark object passed here.
Is it expected?
I don't think we want this.
I think it's not clear to me why we need a check for `hasReceived` here.
This is the only change I mentioned above. I think we should be checking if `FORCE_USER_ID` is true.
@liggitt this is a bug fix. The code was not working. It looks like the fix is to check for the if/elseif block.
I'd suggest moving these into a separate JIRA file instead, and instead create an issue for the fix.
This should be `>= 2`.
I don't think we have any tests for this
@jackfrancis What is the idea behind changing the `inline DataType` to a `std::isnan`? The `inline` is a little bit redundant, because `std::isnan(x1, b2)` can return `const bool b2 = b1 && b2) ? one : zero;`
This is just a minor cleanup. I would remove the line.
Isn't this still needed? I thought we wanted to keep it in the same place as in `mockcache` and `mockcache`
Could you please move this import down below the line, so that we only use it once?
I don't think this is correct.
I'm not sure this is a good idea, but I'm not 100% sure if this is a correct change
What about `#if NET452`?
Is this TODO still useful?
I think we should check whether `instance_group` and `continue` here instead.
This is not the same as in `else` branch.
Shouldn't we check that the image is always available in the image?
Please don't make any changes to this file. It can be a real diff.
This just needs to be moved to after the `common.json` file.
I think you can just remove these now, and add them to the `selectedItem` interface.
you should also update `volume_type=None` in the method signature
Is this `IntegrationDbIntegration.IntegrationName` used anywhere?
Please remove this. We already do the same for the `Ethththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththingsingsingsingsingsingsingsingsingsingsingsings
Should this be `false`? It looks like you can get rid of `ref`.
This is not correct, since the local variable `p_obj_RESOLVE_LOCAL` will be NULL
Why does this default to "127.0.0.1"?
shouldn't this be `^\w+\.`?
Should we add a warning here or is that a `map[string]string`?
This is a very broad and could cause a lot of problems. But I think it should be in another PR.
Hm, why did you make it a file type? I don't think it's a good idea to use it here.
this is a temporary change
Why do we need to add `!mimxrt1062`?
This is the only place I've changed the loop.
Shouldn't it be `$config->getConfig()` instead?
Should be `const char* path, char dot, size_t* allocated_size`
I think we can also remove the `removeDomainPrefix` function altogether
Why is this needed?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Can we call this `_googlesitekit` to make it more obvious what this method is for
Why the change to `4.1.0`?
This property is used in several places in the codebase, so I removed it.
why not a `string`?
We don't need this file anymore.
Do we need this at all?
This is the wrong place for this. The default value should not be set.
Do we really need to call this `labelPrefix`? Seems like that would be more readable if we added it to the `capability` package.
Can you use `stats.IsNullOrEmpty(statsErrors)` here instead of using `stream()`?
Why are we not using it here?
These two lines can be removed, and the other test files were failing to compile as well.
So, we always use `list.props` when revealOrder is a list? Should we always use it instead?
Why was this changed?
Why are these `@classmethod` and `@staticmethod`?
This is an unrelated change that fixes the problem.
Shouldn't `std::copy` be called only when `rfc3339_opts` is provided?
If the `getInput` method gets called for every single item, it might be worth moving this up to a separate change. We can also remove the `foreach` call below the `type` function and return the correct type.
I'd rather have this be false.
This should be `@plugins`.
Is this needed?
I think you can remove `config` now, because it is not used anywhere in the codebase.
Why not use `var acceptableVariance = (actualIntervalLimit * 1.15);`
Can you use `$options['lazy']['text']` instead, to avoid the need for the extra check?
I think this test should not be here since the `using` statement is already there.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
How about adding a helper function here, e.g. `QUIT_DIALOG_TEXT_or_VERSION`?
Metrics/LineLength: Line is too long. [102/80]
Can you use assert instead `assert (p != nullptr) && "This participant has been previously invalidated");`?
Can you explain the rationale for this fix ?
This change does not look like it is related to the change
This test fails with the new `only pending` word, so I think it was fine to leave it. The `only pending` was the only place `send_notification` was used.
This should be ` saved_config = dict(index='UT' || norm_type=2)` and the next line should be ` saved_clip`
remove this empty line
Does this need to be removed?
This should not be needed anymore, you can remove it.
I think this will cause the same problem as `TracerFactory` has been removed in the other PRs
This doesn't seem to be used anymore.
Is this a regression for the new release of the release?
Can we add some description about what this means, if it is a public API that is used for?
I think it would be better to use a different name, e.g. `@Deprecated`
Why not keep the XmlLoggingConfiguration in this method?
you can remove the spaces at the end of the list (in the line below)
I think we should be using the actual error message here instead.
In this case, you can just use `import (reflect, shortlect)`
I'm not sure if this is correct. The `span(DR_MAX_OPTIONS_LENGTH)` function will not be called after `opt_info->extra_opts[idx]` is set, but it's not the case anymore.
I moved these because it wasn't being used in the spec and I didn't know the spec that the spec doesn't have any impact on the spec.
This is not the only place I'm using the `cancel` module for this. I would just make this a `dict` parameter.
This is a breaking change. `_original` and `_enumerable` are only used by `_list_api`.
This change is not required.
Shouldn't `Action_ptr ptr` be `Action_ptr`?
Why is the cast needed here?
Shouldn't this be the default?
I think this test case will be removed.
You can also write `var pos = -this.workspace_.scrollY + delta;`
`showLockedTasks` is not required here, since it is already present in `topic-names`.
This is not a valid script, right?
I think we need a test for this, too.
I don't think this line is needed.
Why not just have this method return a `static`?
is this TODO still relevant ?
This is the main change. The `addDefaults` below does not have a mapped value, so it is possible to get the mapped value from the `objectConverter`.
I think we could remove this `createElement` method and just do `create(common, axe)`
I'd like to keep this as it is, but we can add the other instances of a package to make it easier to track
nit: ":` and " are used"
why did we have to change to 0 here?
I'd suggest not having all of these fields in the struct, as the value is not a single string. It's a bit odd to have a method that returns a `auth.server` and `auth.request_auth`. That way the code can be more specific. I don't think we want to have a way to do it, so I would just add the `auth` arg to the struct, but I would also like to do it.
Why was this added?
I think this can be moved to a different PR since it's only used in one place.
This method should be renamed to reflect that the method name is only called from the `Base` class. It's not a big deal but it's probably better to have a method on `Base` that returns the `Base` instead.
`self.fetch("/options")` is always a list, so it would be good to also test the value in a `put_json`
I'd rather not have a separate `sh.failure` call that returns the value. The reason being that you want to include a new `rescue 0` and then the old `rescue 0` will do it, but it's not clear what this is doing.
Please add a license guard statement.
`font` is a very generic name. It can be `data`.
I think we should keep this error and just pass the `cloudDNS` param
@kargakis @jsoriano Is this actually correct?
I think this is an unrelated change?
I guess this is a bit of a mess... maybe I'm wrong but I don't think that this is the correct place to do it.
This is the change of behavior, but the tests were failing because the `if` statement was not in-place. I think `return nil` is redundant.
I don't like this, it's not a part of the code, it's a "manually" element, and it doesn't have any benefit from it being a `man/man5/man5/man5//m5/man5/man5/man5//m5/z5/ ? I don't know if we have any of this approach, but we can use `edit_path` for it to be part of the spec, so that could be a bit easier to understand.
This was an error before.
Shouldn't these be on the same line?
You should be able to use `std::unique_ptr<kvstore::initKV(rootPath.path())`
Should we make these properties on a separate line (like `MaxQueueLength`)?
We should not need this, right?
Is this needed? It doesn't seem to be used
I think we want to keep the `let` here.
This is a very common pattern, as it could just return a `ABCDEFGHIJKLMNOPQRSTUVWXYZ`.
the `cancel` was being moved into the `cancel` function above
Why did you add the IDisposable here?
I'm not sure that the null check is necessary since it was the bug in the workspace, since the workspace is a static field (e.g. it was before).
I'm a little confused, why not use `torch.angu.SCANNER_OUTPUT_CSV_FMT`? (just wondering if it makes sense to have an `torch.jit.com` constant in the config file)
I think we should use the constant in the code base to ensure we have a value in the storage storage.
Shouldn't this be in the if block ?
I'm not sure we should change these tests here
why not just remove the `CharSequence` field?
If you're using the `Blocklistener` interface here I think this needs to be moved up to the `new` interface.
Is there a reason why you are using `isort` instead of `usingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusingusing
is this really necessary? is this just to be agnostic?
This is a bit odd, since the only time that `get_model_inputPattern` is called is a bit in the inputPattern itself, which is not a bit in the inputPattern, but is not that important.
nit: this is not needed
Was it intended to remove this assert?
If you are going to remove this, you can also delete the `config.mld_storage_path` declaration and just use `config.mld_storage_path` directly.
This is going to cause problems with the `Stop` method.
We could remove all of these now, if it's not needed.
Please remove this.
Can we add a check to make sure this gets included?
I would use a `schema` option here, and instead use `!== null!`. Also, please add a `or` or `oror(or)`.
I think we need to move this to the top
I think this should be moved to the `serviceserviceHandler` function.
I'm not sure if it matters, but I'm not sure that's a good idea to add a link to a link to a link, but it might be nice if it's ok.
This should be done in a different way.
The only time I see is that the timeout_cb() is removed and the timeout_id() can be removed.
We can make this a private method and reuse it in the other classes, since it's only for debugging.
I'm not sure this should be here?
I don't think we need a `static` constant here, since the name of the field is `updateNotInProgress`.
This should be `timeRemainingTicks`.
This one is still a number. It is just a number but it's a number that is the number for a number.
Is this change intentional?
Should we make it configurable instead of reusing it everytime? It's a bit hard to understand why.
do we need this in the other files? can we just use the same package for `localize`?
I think this is not correct, as you have the same logic for `BoundReference<X, Y}) => x(ref, toLiteral(v))`
This is the only change needed, as it is already in the `if`.
Hmm - I'm not sure that this is the case.
I am not sure this is the right fix. The only difference is that `camundaIntegration` is `null` in a few places.
This is the main fix. We'll need to check that the `_state` is always a valid `ID` in the context of the task (or any that is not a valid task)
nit: don't go in separate lines
I think you can use `queryPreference.useTimestamp(true)` instead.
I don't think we need this anymore
Is there any particular reason for this change?
This seems like it should be just `found_opts` here, since we only have one array, not a string.
Can you also delete the `bulk-edit` from the `subscribe-subscribe`?
This might be the one that's used for the above purposes, e.g `aria-logo-*`.
This is an unrelated change.
`__future__` is a subclass of `__future`. It's not clear why we use `__future__` but if you need to do that we can do `import sys` directly instead of `from jinja2 import Environment`
Do we really need a `DATASEC` in this case? Can we just make this `DATASEC`?
Can we move this call to `done()` as part of this PR?
This looks wrong. Can you make a PR to change this to `redirectTimeout`?
Is this just a typo?
Why is this change required?
What is the point of the `Resources`?
Did you mean to include these in here?
I don't understand what this is for?
I'd prefer if you'd rather not have a `&mem` in the first place.
Is there a risk of a change in the `callback` method for this?
This method is a bit pointless and can be improved - maybe `RewriteFiles overrideSequenceNumberForNewDataFiles(long sequenceNumber, sequenceId)` or something like that.
Unnecessary spacing detected.
Why are we removing this from `ApiApi3`?
@guidance_presenter = GuidancePresenter.new(template: @phase.template)
`@since` is not used, please remove it
I'm pretty sure this is not a good idea, since the original `clearTimeout` is a very common thing to call. I think we should be fine to remove this.
The `else` branch should not be needed here since `value` is always defined.
@ravening should we consider adding some new helper here for this one? It seems like we can do some checks for `-Rest-registry` here
`array[]` is a string, not a `[]` parameter.
(style) trailing whitespace
`tabbed_browser` is not used for this function. can we just call it `_start_cb`?
I think it would be better to have a `e` as a parameter of the `Append` rather than a `nil` since it's not being an intuitive name and it's a nil-error-*-is.
Can you use an empty line after this `if` please.
I'd prefer the two functions to be renamed to `LoadOnRequestException`.
Why remove it?
What is the goal of this change?
This should be `./pants help` to match the `./pants help` file.
Why not `defined('CACHE_ENABLED', $useCache)` ? It would mean the value is not always set.
I think we need to add `VerifyTransitionDependenciesResolved` for `TestTransitionDependenciesResolved` and `TestTransitionDependenciesResolved`. The reason is that we can't use the `Dependency` package to get a specific `Dependency` object to get the `Dependency` object.
I don't like this change. Can't you just update the test to use a `.desc("Address of the Zookeeper ensemble; defaults to: "+ZK_HOST + '.')` ?
Shouldn't we use a more specific `application_default_credentials_json`?
Why do we need to return `columnSelected` here?
Why was this removed?
This seems like it would be good to just have a `aws_build_system` that has both `system` and `system/system/system/system/system.go` and `system/system/system/system.go`.
This should probably use `sys.platform`.
Should we add a check here that the logger is still in the same scope?
Please update the doc accordingly.
Shouldn't we also be removing the `auto shifted_bearing` variable here?
I am not sure about this one. It's used in the `Table.py` file.
Is this needed?
You probably want to use `Fatalf` here, so you're not actually testing the `.dvc` in the log.
`User.for_email(` should be tested as well
Is this change necessary?
We need a space between the `!` and the `)` operator.
Can you change this to `string $name` instead of `string $name`
This seems to be a very generic name for this. Can we make the change to the default?
This file needs to be renamed to `local` and `local.add`
why did you change this?
hm i'm not sure i'm going to make this change
I'd like to see this in a separate PR, but I think I can see that the tests were failing because they're in the same file.
Do you need to keep $sliderItemData->domainId ?
I would prefer to keep this message as non-nullable, and keep the message as non-nullable.
Why are we making this change? Isn't this supposed to be `mcsIdx`?
why not use `pendingCountLocked`?
Is there a way to get a test for this error?
Why is this necessary?
I think the warning should still be `Xcode_9.4.1` here.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should we add some new rule that we can't use here, too?
I think it would be nicer if `!getBootConfig(frontActivity).shouldAuthenticate()` returns `null` here, but then we don't need to check if `isHybrid` is true for null.
Why is this change necessary ?
This seems like something that should be moved into the `else` block
This is a bit of a weird, as the `||` is not a valid value, but if it's true then it is an `||`
Style/SymbolArray: Use %i or %I for an array of symbols.
Is the variable name still needed?
Can we use the message message here as well?
this line is useless, we remove the `String.format` line
This test is failing because of `NoImplementation=True` right?
`Dashboard.navigate(getProviderConfigurationUrl(id)` is not needed anymore.
This is a change in behavior. The log line should have been removed, right?
I think `UIAHandler` can still be `query`, if `isUIAAvailable` is not `query`.
is it really necessary to set this in the `BaseReplacePartitions`?
For these three platforms, you should be able to use the same `WebDriver::WebSSBridge` variable.
This is a bit of a hack but I think it would be better if we move the `_activate_user` method to this place and call the method in the `_activate_user` method.
How about using `node-labels` here?
This should probably go in `input_def.metadata` instead
Remove the TODO, and just make it `//`
Shouldn't we use the same constant for all of these?
Doesn't this need the extra parentheses?
Hm, why are we adding new routes here?
This change is also useless.
I'd be tempted to do something like this: > > 1: 1: the `dbRecordVersion` variable name is `true` and the `true` is `true`
Shouldn't this be `-1` to be consistent with the other version of the `-` prefix?
I think we can just use the constant for the timeout here.
You should remove the debug logs. It's not needed.
This could be called `stats.SessionStats` I guess
Is it a bug that you get here? If not then I'd like to get a warning.
Can we remove the `.thenReturn(SymbolReference)` here and remove the two `.thenReturn(SymbolReference)` in `build()`?
Can we remove this?
I think this is a little hard to read. Maybe a better name would make sense?
`Videoable:bool` should be `crypto?`
This test was testing the wrong thing. Do you think it was correct?
Should we also change the type for `GoogleCloudProject` and `ReSecret` to `const` ?
I think we should be able to remove this from the code as well.
This should be in `__init__`, right?
`DEFAULT_CONFIG_PATHS` is used in many places. We can use `ApplicationConfig` here
I'd suggest putting the test in a test function and a test function that returns a ``None`` object, and then calling ``__init__`` method, and then passing a ``None`` object to a ``None`` object, that calls `dump_slack_output()``.
This should probably go into the lower case for this new parameter.
This is going to change the default behavior, and will break for all the tests, right?
Can you please add a TODO here?
Why did we remove this?
This is going to be a breaking change for the new functionality
This should be reverted.
I would use something like `write_write_path` to make it work.
I would add the `_` prefix here as it's an option.
This is not correct. It will be a breaking change, and we should not be adding new functionality to the new functionality.
Why are all of them all defined?
I'd like to keep the cast as it's not needed here since we have already done the same in all cases.
I think you want the `isNullable` check here to avoid the `Optional` case.
Please keep the original implementation. This is used for debugging only in our tests.
This is a very minor change, but I think it would be more clear to have it return the same type as the one in `getFinally`.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
why the change to use a regular expression ?
We should use `_on_theme` in this file.
Why do we need to get rid of the `ClientMap::iterator end` here?
Should this be an error rather than a collection?
Why are we removing this field?
We should probably have some sort of `createRuntimeCall` type of `stringToRunes`, that way we won't have to go back to it again.
could also be a separate `_load_prepared_history`.
this could use `install` for consistency with other imports
This should probably probably be `show_img = (one_img)`
I think this is a bug fix. Can we just use Math.min and not just add the last parameter of the list.
Please remove this from the file.
This is a change in behavior, and should be removed, I believe.
You're not going to run a test failure, but it's really a bug in the test suite?
I think you can remove the `subprocess` parameter here and just call `self.match_events` in the docstring
can you use the constants for `sigs.k8s.io/apimachinery/pkg/types`
It seems that this is not used anywhere?
Shouldn't this be in a try?
**Question:** Should we make this configurable? It's a matter of taste, but I think we're using it for all cases.
We need to handle the case where `Exception` is not null, and this is the only thing we want to do.
this is the bugfix.
I'd prefer a single test for this as it's a separate test and not a separate test
I would not add this method to the public class, it is already there.
Why do you change this?
`item.recording_start` is a string, you should use `item.recording_start` instead, and you can use the `recording_start` constant
This should be split across multiple lines.
I would prefer to keep the same change. It's not clear what's happening.
I don't see why this is needed.
This is a change in behavior that is not in the `set_http_response`. We should have the check that `set_http_response` is set to `None` when `assertDict` is true.
this is a bit weird, why do you need that change?
Why not use the default value of `SystemDialog`?
Is this a typo?
Is it expected that this won't be called without a `if`?
please also assert that end_level is -1 or end_level == -1
This is a good candidate for an array.
Is there a better way to check for this test?
I would suggest to use `t.TestVersion.EventEventEventEvent` instead of `int.TestVersion.EventEvent` to prevent any immediate confusion.
no need for a parameter here?
No need for `loss_normalizer` to be set.
Why do we need this if the function is not defined?
Please revert this change. We are not using imports in your IDE.
Please change it to `samples < x. This is the Q-function by the tail probability of getting samples further`
I'd prefer if these were to be moved to `for_disp_init` or something, but it's a nice thing.
I think it should return the copy. That way the caller may not need to check if the data is in the array. The data is not in the array, right?
I think this is still a valid use case, so I'd leave the message as it was.
Is this line needed?
This will cause NPE if the `version` attribute never changes.
Should we also add the secret id here?
Again, no need to add this, this should be `pthread_np.h`.
Should we make this `else` since we have a `fs.removeSync(user_data_dirdir.replace(...))`?
Is this change intentional?
This is not needed. Please use the `Optional` class from `Map<object>`.
Shouldn't it be `background_color`?
this is not needed, it should be called `throw new UnsupportedOperationException("Cannot manage snapshots from a metadata table")`.
I'd suggest moving this to DataAccess if it is a separate file (as it's part of the file)
Probably we could also use `_up` here as well
(style) 'nd' may be misspelled - perhaps 'and'?
Why does this need to be added?
This is a little confusing as it does not belong to the `if` block.
How about adding a `corev1` arg?
this is a regression, should be changed to `x` or `1`.
We can't just do `self.assertEquals(2, len(violations))` anymore, and we can use `self.assertEqual(...)` directly here.
Why is this change necessary?
this is just a thought. Want to fix it in a separate PR
Please use `\s` instead of `+ "` to make it more clear what the default value is.
This seems a bit hackish to me. Can we do it in a separate patch?
I don't think this is the right way to do it. It is possible that any license header is run in a release, but not in another release. I am not sure why this isn't in this package
I would prefer a separate method for this. It is easier to read than just using it in a single method, so you can just create a new one for each test.
Is this the right way to do this? I would rather keep the original code.
This interface is already in the `handleAPI`. It's not in the API.
I'd rather use a `@since/@since/` here.
This seems like it should be a constant.
Nit: this import is unused.
I'm not a big fan of the test here, but it looks like there's already one. Can we put this in a test?
You can use `Integer retainLastNum = args.getLong(args.getLong(2));` here.
(style) line over 80 characters
I was looking at the code, but I think this might be the only change in the future, as it is not a part of the public API, so I left it as is.
This is a bit of a hack, could you please change the name?
This is an interesting question, but shouldn't it be `current_tab.present?)` ?
I think it's better if you make a `htmlFor<label>`, and then have `htmlFor` be called `super().map( ( value, i ) => (1) terms)...` and `super().map( ( value, i ) => (4) terms)...`
It's not necessary to call this function in this function.
I'm not familiar with the idea of having this flag in `Read.json` since this is a new one anyway and I don't think it is needed to be a public API. The `ephemeral` property is a public API.
Perhaps we should check that the user has the wrong value and not the `key` attribute?
Can you please add a check that it's not a valid one?
Should we also change the type of the struct struct to be the same type in the struct?
This is an unrelated change. I'd rather we leave it to the `FuncIndex` or `Func`, and add a new description to the `Func<T>`, or the `FuncIndex` type.
This feels like it is unnecessary to call it.
I'd suggest to rename it to `goimports` for consistency.
This is not the best place for this, since we are now removing the `@Deprecated` annotation. We should probably just remove all the `@Deprecated` annotation if necessary.
We could use the new `_GenericAlias` import.
This is a bit of a hack, but I think it should be a `<% %>?` instead of an `else` here, as it could be confusing if you'd have multiple `if`s in one line.
this is not needed. you can remove it
I think this change will still work in some cases?
The name of this interface needs to be updated as well to be consistent with the other APIs in this file
Do we really want to delete this information? It seems to me like "this update operation wasn't possible" is more correct.
I don't think we should be setting this variable in this constructor. What do you think about just using it as a variable?
Is this a bug? I'm not sure it is actually necessary.
Please remove the `auto_discovery_link_tag` method altogether.
`return tab.pin is True`?
Can you please change this to `Config.parseTouse(this)` ? Thanks
Isn't this the right place to return? I don't think we want to return the exact integer type, since the only case where `isDefinedAt` is null is.
This was added as an intermediary change. It was not needed.
This one is a little hard to read and understand, the problem seems to me that the `rule` and `forwardingrule` are not going to be the same. Is it correct? If the user's `rule` they are using, then we can remove `rule` entirely.
This is the only change to `__u8 nat_lvl1_drop` is needed, right?
`SqlServerIntegration.selected` -> `SqlServerIntegration.query`
This is the only line that was needed
This was previously used as agnostic way for `.map` to be able to get the actual path to `.map`
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I think this should be `results(predicate)`, otherwise if the left left won't be empty then the first thing should be `results(predicate)` instead.
Shouldn't this be the same as in the other PR?
Rather than making a new parameter here, could we just change the parameter name?
I don't understand why we needed to keep this.
I think it is better to keep this change, as it will be used for the user. I would keep it as it was.
I don't know why this is required, but I'd like to see this change to the existing behavior.
This is a good change. The only way we can do is have a `org.glassfish.gmbal.ManagedObject` to be used in the `Map` package for the `gmbal` package. I'm not sure how to do it.
I think we can remove the factory entirely, it's not used anymore.
This should be a `MinVersion - server.VersionTLS12`.
I don't understand why this is necessary, it is only valid for unit tests.
Is this change necessary?
Why are we removing `type Handler` and `@since`?
Can we use `gmtime_r` here too?
This is not the actual fix. `dvc repro` is used to set the default to `""`.
@becker33 I don't think this is a good name for this. I'm not sure we can have a better name.
this should also be `t.timestamps` and should also have a `scroll` index
This should be `if os.path.exists(filename)`
You need to make the container as well.
why do we need this function?
Is this the only place in the context of this PR that we want to support? It seems like it could be useful to support a constant in a single place.
Why `connected` is required?
I think you should create the default parameter in the parameter of `create_no_window` so that the default parameter will be passed by the argument, which is not needed here.
I'm wondering if we can just use `getNonStreamingMethods()` here?
I don't understand why you are using `str` here - is this supposed to work?
I think it is better to do `shape.size(), 0`
i'm not sure if we should be using `--profile` or `--profile_examples`
I would prefer to use `_x( 'adsense', 'AdSense', 'Service name', 'entry-kit' )`.
The `use` clauses are in alphabetical order, can we remove it?
I'm not sure if this is a good idea. I think we should not do that as we are not doing it yet.
Can you make this part of this pull request?
The only reason why we use `confirmed_fixed` was to make it impossible to use a copy.
`elements` is not null as `@Nullable`.
I think we should use `proposals-completed` here and not `keys`
I think you can just do `c.Log.WithField("dir", dir).Stat("Creating spire agent UDS directory")`
This is not needed since we only use the root span when the root is actually in the `InternalContext`.
No need for `java.util.Map`.
This is a good example, but I think we can remove it from this PR.
why is it needed?
I'm not sure that this field is really necessary. The prohibited option is just prohibited that is set in prohibited, not prohibited for that field.
Is there a reason this is not used here?
This is the only place where we've used the `g-` prefix.
I wonder if we could simplify this if-else by just doing `if virtualDiscDesc.CapacityAllocationUnits == nil || ...`
I'm not sure this is the correct test.
I am wondering if this is the right way to go
why the extra `top` here?
Wouldn't it be better to check the error message and return an error when it's not set and the return value is `0` and it doesn't seem to match what happens when the error is returned?
@mhoemmen why is this part part part part needed?
Can we call this `_approved` instead? It seems like it would be more appropriate to call `expect(proposal.reload).to be_approved # sanity check` in the future?
this is a change in behavior... we should try to keep things together.
What does the `.eslint.ish` do now? Can we just remove it?
Is this needed?
Why do you need the `instance_exec` check?
Hm, this is a change in behavior that will cause issues with `-3.1` in a bunch of other places.
I think it would be nicer if these were changed.
Should we add the `@expectedException` annotation here as well?
Same thing with the `if` here.
This is a test, no need for the `Url` node, just the `UrlNodeAttributes` is already checked.
Why is this needed?
I think it is better to just pass in a `DataContainer.newName()` instead.
This could be just `return props.children(context)` I think. The `if` statement here is not needed since we return early and `(props)` in the `children` block, so the `if` statement will be removed as well.
why did this change?
Shouldn't `if (req.getQueryString() != null && allowedPostRequest(req)` be sufficient?
Would be good to have this in a separate commit
why not removing the `permissionpermission`?
Use the new Ruby 1.9 hash syntax.
I am not sure we can use a default here, as the default setting is "rotatable"
I am not sure if we can use the PONY_ACTOR_DEFAULT_BATCH. I'm not sure what the best thing to do here is though. I am not sure if it makes sense to use it here, but I think it might be good to have it there.
@kingjr I think you can get rid of these now. I think it would be better to have them in the code, and then have them be in the other PR, and then do it in the code
I'd rather have something like `throw new Error('Payload must be 20 bytes')`, just like in the `Buffer` case.
I think we should just remove this, since you're only using it if the 0 is not a valid array.
This is not used anywhere. Can you fix this?
I wonder if we should have a unit test for `git-daemon-export-ok` instead?
Shouldn't this also include the `service` parameter and the default?
Can you please explain the logic here?
Not sure what this is, but if it is, it can be simplified to ` getProducers`
why not set by relayTemplate ensure that it is a subtraction?
Nit: can you please add a space after the comma?
If you're using `context.empty()` you should use `&&` instead of `reason`, otherwise you will have to write `&&` to a new `@cancellation`.
This import should be removed from the other PR.
This can be removed as we already have a `absabsParser.DEFAULT_authenticate_TO` function.
should we use `org.sonar.java.lang.EventUtils#strip` here instead of hardcoding `root`?
Why did you remove the version?
I think `isJava` and `isJava` would be clearer
Please remove these two lines. The same below.
this is the wrong place for this
Why is this needed?
The problem seems to be that the peer should be committed before the write write to the caller.
I think we should keep these private and just call the `createRecordCallback` method.
You don't need this one.
Plz use a full class name `array`, `array` and `[]` for the MainMenuItem class
I think it would be cleaner to use `SET-circuit` here too.
@wachterjohannes Can you check that `IsConnected` and `_peerPool` are the only thing we need for to do? This is the only thing that needs to be changed in this PR as we can't tell when we have a bunch of these.
What's the point of the change?
I think you can just write `gacc.no(x -> T)`
Nit: we could just use `return "N/A"`.
I'd suggest to keep it as `http:\/\/"`.
The `replace` is not needed, because the `result_replace` is used to get the default of the `True`.
Isn't this the same as `IND.finished.finished_NAME`?
Not sure if I like this. I'm not sure if this is the correct solution for this -- but it looks like it is used for every invocation of this spec?
I'm curious why the wording is here? Is it because it's a "string" error?
Please don't change these in the `protected` tag. It is a bit of an implementation detail.
You could move this check to the `user.go` file
this is needed to avoid mixing up of a test with a test case that would be useful
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
@bparees this is where you'd be using the timestamp to be less generic. I'd rather you do a `request.timestamp()` here, and pass it into the timestamp directly.
Why not just call `queue_PY2_float`?
What is this? Why is it necessary to add the `ENCRYPTED` in the constructor?
These tests are failing because of the test failure. It is not related to the issue, but it is not really related to your change, and it is a test that was not working. I was thinking we should change it to not break the test.
Can we make this a constant?
The parameter `counter` is not the `Integer` argument, so I would remove the `@param [Integer]` argument here and below.
You don't need the `TriggerManager` member anymore, right?
I'm not sure about this - is it a better place to put this property? If you want to put it in a property, then I think that it should be moved inside the `DD_TRACE_DELAY_WCF_INSTRUMENTATION_ENABLED` property.
If you want to use `tab_url` instead of the try/except?
This should be a util, since that's the only one you're using.
This was removed in #5398 and will cause a conflict.
`suffixLength` should be tested with `prefixLength`, not `prefixLength`
Why is `freeze` always `true`?
This one is a bit dangerous, it is not a public API. Can you explain it?
This one is really confusing. It is the same thing as the `Infof()` on line 629.
Please, fix the indentation (and the next line).
[cosmetic] Could be renamed as `using OpenTelemetry.Trace;`
Please, remove this, it is not needed.
I'm not sure about this change, as it will cause issues when we have the `AWS IAM` key in the future.
I am not sure about this change, it looks good to me. I think it was a mistake, but it is still a bad practice to do this.
Why not `UnknownType`?
Why do we need this? I think we should be able to use a dedicated method.
Is there some specific reason to change this line?
Could you also do a single function in your single `caffe::set_mode` so that we can do this in all cases ?
Why not use the `as_is_equal()` method in the test file instead of the actual one in `parse_parse_url`?
We should make the docstring more explicit: > > (not isinstance(value, None) or (not isinstance(value, value)) > (not isinstance(value, conversion=None) or (not isinstance(value, str)) > (not isinstance(value, str))
Why is this check deleted?
`setupLog.Error` is the correct type here.
Shouldn't we use the `working_dir` variable here?
This is not right, `TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));` will always return `null`.
I don't see the reason for the package being called from the `db` module.
nit: can we keep the `RUN` prefix as it is an `internal` suffix?
Is it necessary to add a `properties.forTable()` call?
Maybe this should move to the helper? We are returning the wrong encoding, but that's probably not what we want.
Please don't import this at all, it's not used anymore, and it's a separate PR.
Can we move this down after the if statement above? I would expect that the `updateTaskENIDependencies` method to be called on every task.
Why do we need to change this?
This is a good idea, as the `cFlags` is not defined above (and it is a `cFlags.IsEventLAGS`) which is used by other places.
I don't see how this would be used, it would be good to have a separate set for that case.
hared seems to be the main place for this
Please rename cv_data_converter to cv_data_converter
I would prefer if we use the same name here. It's better to have a more descriptive name that is passed by the user.
@deads2k any idea why these were changed to be here?
I don't think we should use this to determine if the `--review-status` option is actually running.
I would prefer if we have this logic as a separate method, and we would be able to get rid of it entirely
I would just say 'number'
This is a bit of a hacky to me - the only place this is called when `rp_info.dependencyCount = 1` is used.
This TODO can be removed now
Is this the only place that will be called? Or is there something else we can use here?
is this still needed?
I think this should be `animirileile` rather than something like `print >> sys.stderr, 'Script load errors:", err=False)` and then the `try >> sys.stderr` should just be moved to the `try` block.
There is no need to check for `Dict(name, tuple)` here, since it is a `str`
I think this is a change of behavior. The `schema_TRUE` function is only used in one place and should be removed from `schema_blocks`. The same is used for the `EXPECT_LE` function.
This is not a security issue, but I don't think the security issue is needed. The idea is to change the default of `imeime` to the user to use `imeime` instead of just `ccreator` for example. The `imeime` should be enough.
Would this break other packages that depend on a `str` path?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I don't think you need to put the space after the `%>`.
The name should be `Image\DirectoryStructureCreator`
Is this the right place for these?
I don't see how this file exists - is there a way to make these files more specific to the client?
I don't quite remember exactly why these are here.
The `has_many` will have a `nil` in the code. We don't need to do that here, because we have `first` already in the `first`
This is a bit confusing, because the `Map_CONFIG_MATH` is a `NAN_CONFIG_Lol_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_leader` in my head, and the code is now in the same place.
The variable `iFromPeers` is unused.
Is there a reason for this?
Does it still make sense to have a test that checks if this doesn't break anything?
This is a duplicate of the existing `Config` in the `VolumeUsageByNode` interface, right?
Shouldn't this be `io.prestosql.sql.sql.buffer.recovery_NOT_TYPE`?
How about we make it `--print-config` instead of `--skip-db-cleanup`?
I don't think the `calcGenBlk` is needed here, since `NewSyncer` already uses the same namespace.
This is the only place I see in this PR that I've seen this in the other PR
So this change is a little hard to read? If so, could you add a check for `Automatically send usage statistics` here?
(style) externs should be avoided in .c files
I'm not sure what to do about this... I don't think it's an API breaking change.
this was not being used anymore?
Shouldn't this be `var eventListenerCount = 0;`?
why is this needed?
Should we also add an `ecs.proto` file to the `temporalio` package?
Rails/DynamicFindBy: Use find_each instead of dynamic find_each.
I would have put the `ev->flags & ASIO_DISPOSABLE` at the top.
Is this needed? It doesn't seem right to me.
Won't this always be false?
Why do we need this? What's wrong with that?
Is the `state_data` no longer needed?
I'd prefer `@NonNull` to be consistent with the rest of the code
@SzymonPobiega do you know if you could also add the `name` property to it?
nit: remove the newline
Can't you do this in a follow-up?
I'd rather have it be `list` rather than `List` because we are not using the `zpool` in the `Vpool` class anymore (and not the `zpoolList` one)
This is probably a good place to put this. It's a bit of a very minor thing that could result in a single statement in the code that you're just doing.
I think we can remove this warning. If you want to avoid any conflicts with other users who have been doing this.
What about `private` instead? `org.apache.iceberg.Table table`
Should this be `self.f = focus;` ?
This should be `azureregs`
I think you want here `push_p.add_argument("--reupload all fragments, even the ones the server already has")`
Do we have an opportunity to rename this to something like `Utils.warning.toDefault` or something?
this line is redundant now, please remove
This should be in a separate pull request
Why not have a single function for the `Commit()` function that returns the value of `uint64`?
is this the space at the end of the string?
This fixes a bug that we had in mind. The `semantic_errors` was never used.
Why is this changed?
This is not related to the fix, but it is just a note that it's only for the "api" case.
@matt-gardner you have a problem here but I don't know if this is a problem or if we get into the `base_type` of the type.
Do we need to make this configurable?
Should we also update the `_harparser` in the release notes in order to have a new version of the `har`?
What about moving all these lines into `build`? Seems like the wrong place for these files.
Should this be `message.new(T) List<T>`?
Would this be better done with a call to `Object::stat::anDF` that is a new one?
I think it's better to keep this around around.
maybe it's worth adding a `if len(str)` to remove the conditional check
Do we need this to be public?
Why is the `VerifyFingerprint` needed here?
I think this is not needed, the `ServletException` can be deleted.
I think this is a leftover?
I think this should be in `debug` instead of in `debug`
You may need the "failed to allocate memory" part of the H2O_HTTP2_ERROR_PROTOCOL_CLOSE_IMMEDIATELY.
I would just make the `ReadAsync` method return an int
I don't think this is the right fix. The Xattr should always be set to the Xattr when the `spec.Xattr = req.GetXattr() >= 0`.
Why do we want to set the `!wasSkipped` flag in the `repeat_v2` case?
Please use the `name.empty()` function here and below.
Whoastore, do we want to add this? I think the only time the package is being loaded is on the server, so maybe the package should be added to the server. Or maybe we can just use `package.is`.
please, make this a separate function
This is the fix. It is a good time to change the default value from `guess_type` to `type` to `None`, but I would have thought I'd have to change that. I think this is the only way to change it, but I don't know how it works either :)
@bartonjs, do we need to make a new `boolean` here?
Why did you change this?
This is the only change in the `env` method.
I think this should go above the line above the import `github.com/algorand/go-algorand/protocol`
I don't think this new call to `Disassemblers` is necessary. I'd prefer a separate commit that can be reverted.
We should consider adding an extra check for this to ensure we have a chance to do it now.
it's not a big deal, but I think we should be able to remove the `.` prefix altogether.
@garyrussell, is it really the best way to run this?
This is a change in behavior... it's only used once in the file, not the file name of the doc
Isn't this a breaking change?
Is this really the correct type, or just an idea. The reasoning behind the pointer is that it's not clear to me that the `FilterDeleter` will never be set to `None` (or anything else before). It would also be a breaking change if it's not needed.
Why not remove this assert? I'd like to see it in a separate patch.
I would prefer we keep this code here. We have the code below the result of the function.
Should be `_`. The `build` and `regexp` is used to avoid a specific use-case for the `build-system/common` package and `common.go`
This is wrong... it is not needed. The `Article` attribute is already loaded in this class.
I would prefer if this is more intuitive, like `type == null`
why did you move to a separate file?
This is not the right place for this. This code is used in other places.
I think we can remove all the tunable here.
This class is already imported on line 169, so I don't see any usage of this class here.
Can this be made private? I don't think we have any access to it in the past
I'm not familiar with how this works but I can't find it in these cases. Is there some specific reason you'd want to make a separate function for that?
Why was that moved out of the `if`?
Can you update this description to include the other changes in the type?
This is a change in behavior, not your changes but I am not sure why it wasn't here.
This is the only change I have is that this should be changed to `tmpInt >=0`
This should be a separate flag for all users of the same object. (This should be added to the same object, not to the other, not to the user.)
Doesn't this need to be `#ifdef MPI`?
(Pre-existing) I'm wondering if we can just make this `throw domain_error(description)`? I'm assuming that's a more general Exception, and I don't know how much of the `conda.hpp` is.
Can you change this file to use the file, please?
I don't think this change is necessary.
"Approved" should be "join"
I think we can remove this entirely and move this `if` below `return <ProgressBar small />;`
I'm not sure why this is here. I don't think we should be using the new `accessor` for the `uri` class, it's already the default.
if you are using this to get the format, the format should be "0"
> (Not part of your change, just curious. how does the change look in the test? :smile:
I'm not sure why we are converting to an empty string here, because we don't have any other files with the empty string here. Should we do a constant for this type?
this should probably be a `for i := len(blk.Transfers) - 1; i >= 0; i-- {`
This is a regression, so the first line of code uses `winVersion.major >= 10`. So, this line should also be removed.
I think this should just be `config.destroy`
This should be `@offering`. It does not work for any other functionality (and I'd have left out the `@product` variable to check for that).
This is the wrong way for the default value, it should be `0d21840abff46b96c84b2f3b`
why is this change necessary?
This is the one that uses `EnableRemoteClusterConnection` which is not guaranteed to be set here.
The `NullNodeModel` should also be updated.
This should also be a private method
Please add a return type on these lines and the next line to make sure the rest of the code works as expected.
Why change the name of the variable?
It looks like the `m` prefix can be removed here now.
remove this line
We should probably use `close()` instead of `close()` since the method is being passed as a list of `quoted` to the caller.
This is the only real change I see. If I remove `onFinished` it will be the one in there.
I think it's a good thing to put here but if the first one is `uses_make?` it should handle the case of retry, right?
This should have a `DataContainer` tag, not the name of the `﻿//`
This is not a big change, the latest version of this constant is for the package. I would have expected it to be in the `else` and then we should not change it in the package.
Doesn't need to be in this case?
Should we use `12.5` here?
Why don't we just return the error here?
Why did you remove the `!` part ?
I'm not sure this should be here?
This is a change in behavior and I can't seem to be confident. It's not the same as `return 0` and `return sseq > o.asflr`
Is it possible to use a null check here?
This should be an `http` module since it's a subclass of `update_exact` (and a few more instances in `redirect_to_me`).
The `*` here looks like an incorrect variable here to indicate it's a list, not a list.
What do you think about just adding an `is` field here (and other places) to the existing `get` function in the callsites? That way there are no other places where the `--ar` flag is set.
I think you can use the same `setParameter` constant in the `createQueryBuilder` method
@jeherve - This is not needed since the attribute attribute is not a attribute-time attribute.
This is a breaking change and will need some changes.
It's not necessary to change the signature of this class.
I'd prefer a more descriptive name, `PMIX_RELEASE_IS_FREE`.
Would it be better to make this `@Ruleied` rather than `@Rule`?
Why do we need to add the package-private functions here?
This file should also be renamed, right?
Can we make a test to verify that this will always be true?
I think the `.Lock()` here is a bit too vague, it could potentially be `nil`. Maybe a mock could also just be `read(string)` instead.
I wonder if the existing code should be written as a `List<T>` instead?
This field should be removed. The schema is used to ignore packs, so we need to ignore packs from the finalized.
This is the fix.
Since this isn't used anymore, I'm not sure why you deleted it.
This should be a `return`.
Why not just have a String.cs file that is already on coverage?
This is a bit of an overkill, I think we should be more specific as we do in the "update device status buffer" package for all cases (e.g. if the channel is run on all platforms)
The type here should be `static`, so that we don't get any `<int>`.
Thoughts on this: This was a bug, @bvaradar @mmaxim
I guess we should also rename this function, if we do not want it to be used
Isn't there any specific reason you changed this to `def != NULL`? It looks like you are just trying to do this in a separate PR.
@tgamblin Do you know why this was added? It seems to make it a no-op if no-op is set.
So if we have this field, we don't have a way to write it like this, we could just have a method to do this. I think it would be better to have this check inside `validation.go` and have it call `getRegion` with an `if` instead of `change.Attachment`.
This should be the `date00`, `Time00`, and `Time00` functions.
I'm wondering if there should be a separate test for that, but if it's just for the case that could be confusing. I wouldn't expect that this should be the same as `default=None`. I wouldn't think it would make sense to have a separate test for this, as it's probably the case that it would be a simple string that would be used for the case of that.
We should add some notes here about how to use the same `TrimPrefix` API.
Can we just remove the `Write`?
I'm not sure why the change needed here. I would like to keep the test in mind that we don't have to make a copy-paste for the same reason as the others.
I think this can be reverted.
This is not the right change. This should be reverted.
Is there a way to do this (the slot is not) instead of doing this? If not, we could remove this entirely entirely.
This will not be needed if a file is deleted.
Why not make a `IsStackable` check for sold and then just skip the check for `IsStackable`?
Should it have a `yaml` type?
`vol.Annotations` could be a method of the list. Also this could also be `vol.Annotations[string.StorageClassKey)]`.
Why is it necessary to call this individual individual individual individual types?
This should be `find_by_id` instead of `.first`
The name of this file should be updated.
Can we make the error message more explicit?
We should also mention that the successful tests are actually successful.
`user.where(plan: self, access: role_values)`
I think we can remove this too.
@bharatviswa504 What do you think about moving this out of `BlockOps` and making `CancelPrefetch` an `if`?
This is a very good name. Perhaps `txid`?
I think this is still a bit of a hack. We can't rely on the `<` prefix here.
I think it should be on separate line
This import can be removed.
Missing spaces between brackets :)
I think we should keep this as it is. I don't have a strong preference either way
You can use `else` for `activate`
I think this is a typo.
I don't think you are intending to use the version as a parameter. It seems you can do it for the constructor. That said, the version is a parameter which has to be set by the version in `EDITION_COMMUNITY`. I'm not sure if it is possible to move the version in a `if (version == null)` check above.
Shouldn't this be `const` and `const FieldDef*`?
Please add the extra `TODO` to the end of this file.
I think the default should be `taskGroupNameDefault`, so it can't be used in this package. Also this should be `taskGroupNameDefaultDefault` and not `copilot-task` but not the default (or any other value)?
this is not true. we can do something like `<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This should have been the `&&` change as it does in a separate PR
I would not add the "your" prefix here, since it's only used in the `append_AUTO` function.
@mfojtik this is a bug fix. It seems to me that the cache is only set to the first block cache, and the first block cache is still the first block cache. Is that what you intend?
I think the docstring should be updated to reflect the new parameter.
Is this a change in the behavior that is not correct? It seems to be a bit unrelated.
Shouldn't this be `omp_set_num_teams(512)`?
I'd rather have a new `fname(resnet50)` here, that would result in an `resnet50.resnet` which is what you're trying to do here.
Is this going to cause problems?
I think this should be `find_by!` because `update_trails_state_for` is not a part of a spec, but it doesn't seem that it matters.
@Eric89GXL @agramfort can you please check if we're going to remove the `f` part of the file from the `Create` package as well? It's not the case, but I don't know what it was supposed to do.
I don't really like that. I'm a little worried that we'll always see the global global API in the build. What do you think about just using the global API instead?
Why not just pass `FileModeType_ReadMode` instead of `FileModeType_ReadMode` here?
I would add a `Cluster` type for it to make it clearer what is the best idea.
Can this have a migration?
why are you adding this?
I think it might be better to move this to the `get_Permission_path` function. That way the code is more readable, and it will not be used in the `get_Permission` function.
I don't see a reason for this new property? It should be called `wineEnginesPath`.
This is a bit of a hack - is this intentional?
Nit. Please move this line to the beginning of the function
This is a bit confusing. The `OrderExportProcessor` is not a valid name, and the `DroppedExportProcessorItems` is the name that is the same as the method. It's not a public variable. The `OrderExportProcessor` is a very common pattern that is used here.
I think we should make a `v29.0` constant.
I think we should remove this.
I'm a little worried about this. If the user sets the default items, they'll get the same set of objects. So maybe you can just remove this and call `loginOptions.setJwt(...)` ?
This is a bit confusing, as it is a `layout === 'viewer'`. I'd rather have it return `false` in the `focusElement_` method and then check `checkLayout` in the function. I would suggest to just change the `focusElement` to only do this once and remove this function. We'll need to check the `layout` parameter, and then check the `layout` parameter.
This should be `java.util.List`.
Another one that needs to be changed.
I think the `RequestIDCtxKey` can be removed, since the `if` statements are used in the `if` statements above.
I'm not sure this is correct. It looks like it will be a bug if it was a bug.
Why not use `ACMESelfCheckFailurePolicy` directly?
Instead of doing this, could you change all the `import` to `import` so that we can make sure `gpg_error` is always available in the `result->context`? Then we can do it here too, and we can just make it a separate change in both places?
Just curious why this was needed, what was wrong with the original code?
This is not needed.
I think this can be moved to `ttier.js` and `ttier.js`, as well as in this PR.
is this intentional? is it because if this is really a problem in the future, we should have the wrong place for this
nit: remove the extra blank line.
Is this used?
Why is this change necessary?
Can you remove this line?
This function is only ever used in a few places (e.g., a function that is not used in this function). This function can be removed in this PR.
This line should have been left behind.
I'm wondering if we should use `torch.jit.annotations` for this instead of `torch.jit.annotations`?
Is this change correct?
Just wondering if we need to keep this and `userInputState` for now? I think it is a good time for this to be set directly to `userState`.
I think this is not a valid API, but it might be good to have an index with a name like `find_by_vanity_url` or something.
Why not use the `err` variable?
Is this used anywhere?
I'm not sure this is the right fix. The `public function getSource()` is used in `Baseutil()`, and it is used in both places.
I don't think this can happen anymore since the compiler will be re-used with the same thread, and the `-1` is the same as the other thread-safety.
Shouldn't be part of the new API?
I would suggest to keep the test and test the same with `this.isTrue(checks['duplicate-id'].evaluate.call(checkContext, node));`
While you are at it, I think this can be moved inside the `try/finally` block, as it's not used anywhere else.
Should this be moved to `ElasticsearchHttpStorage`?
Can we just do `assertTrue(isinstance(TP(), TP))`?
Shouldn't this be: -t and ['<Return>']
Could you also add a `TODO(*, error)` to remove the `>= 1`?
This is a very generic name, and could be renamed to something like `public int RequestTypeTimeoutTimeout { get; set; }`
I think `settings.icon` is not used in `blogIcon`, right?
I'd rather have the `RegisterBootstrapContainer` as a default, and then pass that in as a parameter. That way if we can make it a default, it will be hard to parse the client's default (and it's a little confusing)
We should use the `Infof` syntax for the capacity, not just one thing.
Nit: This is a bit confusing. It would be nice if you could use a `getAttribute`.
@danrot this is the root cause for the tests to fail. It should be implemented as a `getByNickname` method, which has nothing to do with the new tests.
I'm assuming this is a good idea to use `_ := ioutil.ReadFile(cfg.ConfigTemplate)`?
Should this be called after the call to `updateLibrary()`?
I think this should be also changed to use the template_export_ms? instead.
@liggitt I think this line was incorrect before.
I think the original code was lost here, and the code above is no longer necessary, right?
Nit: This should be `copy`.
I think the original link was wrong here, since `Vectorized` is not in `FunctionExpression`.
I think the original `abort` is a better name.
I think it's better to move the `testutil` prefix to the `BaseMessage` and check the `lambda_function` in `BaseMessage` rather than having the `testutil` prefix here.
Should this say `default`?
Can we just have this be null, we don't need to check for the local spans here.
Should be changed to use a separate line
We need to keep a `bool`, `New` and `New "",`, or add a `default` param to `NewSource` as well?
I would use `os.path.basename(event['location']['file']])`, and then just check if `name != 'location' in event else 0`
this is a bit weird, we don't have any way of getting the icon from the api object. It's just a minor thing.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This looks like a typo
I'm wondering whether we should just not do these in a `try` block?
This is the main thing that was originally doing. The `attempt_drm_backend` function should return a `backend` object (which we can't rely on it for), but the `backend` object has been removed for the `drm` module. I would expect the `drm_backend` field to be present.
Can you move this to the top of the file.
This change doesn't seem to be related to your changes, though I don't see why we need to keep the old one here
Why did you make this change?
`base` should be `func (b.blockBuffer) Pop(height uint64) []peerBlock`, and remove the `//` part.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
If there's no `RestConst.REST_INVOCATION_CONTEXT` on the server side it's still needed, I think it's better to remove it and just call `this.RestConst.REST_INVOCATION_CONTEXT` on the `RestConst.REST_INVOCATION_CONTEXT`
Should `Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
@cramforce Is this still relevant to your fix?
It would be better to move this line up into a `if (dev->type)` block.
@normanmaurer - is this intentional?
Can we move this logic to the `isArray()` method and call `isArray(string)`, to make the logic more readable?
Unrelated to this change.
This is a bit of an odd operation to have, but I would recommend to move it to the interface.
Should this be done on line 173?
I'd prefer a different approach than `this.queue.TryAdd`. The same for the other changes.
This should be the `throw new IllegalArgumentException(argName, double number, null);` instead, since we are not returning the same message.
Why not use `.find` here?
`@return A self reference.` should be the same as `@return A self reference.`.
Should these be in a different PR?
I think this was intentional.
Is this correct? It seems unrelated to the current test and so it should be correct.
can we rename `SecureAssumeRole` to `SecureAssume`
Why did these changed?
I think this was accidentally imported before
Perhaps we could make this a helper instead of a helper?
this is not needed, as `@Deprecated` is not used in the constructor
This seems to be the same change as before. The rest of this PR seems to be merged.
This should be removed.
I think it would be clearer to put these checks in the `remove` method, as it's only used in the `Function` namespace. It would be easier to read than doing it with `remove` or `remove.remove`.
Why are we using Public here?
I think we can remove this now.
This was a bad merge - it was just a typo :)
can we just change this to use the `encode!` method in the model, and change the model in the model?
This is the only change needed here.
I'd prefer `FormatterLoader` here. It's already an array, not a list.
@deads2k @tgamblin Do you remember if it was intentional to add this as a new field in the API? I'm not sure why we need this?
I think this can be simplified to: `(string $i) ||`
we still want the 2014CERN.## in some files, so we need to change all of the files to use a new release version of the decorator.
Why is this needed?
This will need to be moved to a different place, since it was done for a different place.
Line is too long. [91/90]
Why did you change this?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I am not sure if we should be doing any other things here...
Huh. Why is this one needed?
This method should probably just be called `_is_editable_prop`.
Should we make this the default, and just have it go to the existing `*` in the `ServiceMonitorSelector` type? (I'm not sure if it makes sense to have it as a separate type.)
(style) trailing whitespace
nit: can we have a test case for this?
This is not correct, we have the function `CHECK_EQ` which can be called once per operation.
I am not familiar with this part of a feature of the code base. I think this code is actually something we need.
This should be `EnvironmentFiles` instead.
I think this should be moved to the `render` package since the only time the user is already in the controller is the controller that we want to support is the controller.
This seems like it will be the only thing that is for the `submitFlow` case. I'd like to see a test for it to make the behavior less readable, but it might be good to have it return a constant.
Why do we want this change? Is it possible we have a test for them?
I would call it "WelchWindowFunction" or something like that.
This doesn't seem to be the case for the folder. I don't see any other places where it was already added.
Won't we still need this?
this is not needed
I'm not seeing any changes in this file that were using it.
Can you remove the 2nd param in this file? (not that I'm confused why this file was removed)
Shouldn't we use a variable instead `let`?
I'm pretty sure this is the correct solution, but I'm guessing the `case *resolutionOp:` is supposed to be used as an explicit `case *resolutionOp:` and `case *resolutionOp:` as well.
Won't this fail if the query is null?
I think we can simplify this to `long`.
Shouldn't this be in a `else if` block?
Is this the only place we have? Or should I have something like that instead of putting this code in the `if` block?
Why are we changing the copyright?
Can you remove this file?
I think we could just return this error, and return the error directly.
This needs to use the `SharedMemTransportDescriptor::` prefix for all the other classes that use `~`
This is a breaking change. `--outfile` is used in several places so this would have an unnecessary `\n` in this file.
please update the function signature
Why is the check removed?
this seems to be the one that is "if len(oldSyncStatus.ResourcesToDelete) > 0 {
Should it import the group of imports and not the top-level `cmd`?
This is a bug fix, because `Validate` returns an error (which means the conf will always be nil, so the user can not set it in a conf.
This is the one place where I'd actually prefer to use `bool` instead of `<T>`.
can you add this new line?
@franckc I don't understand, is there a way for us to avoid using `==`?
I think the `getType()` method should be wrapped in the `add` method and the `add` method should not be called on every request.
`empty` -> `empty fields` (and only have a field mask?)
This change is unrelated to current PR but I think this method is no longer required, so I'm just curious why it isn't needed for this method.
This is the same as line 130 below.
this was the reason for the fix. It is a ton of sense that this was here to be able to run the tests with the new import
Hm, we are removing this field entirely, and if we are already setting it in the span now, we should still remove it altogether. I think we can just leave it to `operation`.
I would use `ip.0.0.1` here and below.
Is this change the behavior of the code? It seems like a good candidate for a specific error to be logged as the user might not expect to see it.
I think this should be a constant.
Is this "Data will be deleted"?
Is this used anywhere?
Why is this not a new field?
this should be done in `urllib.parse.quote`, no?
I don't think the extra conversion is needed here, we already pass in `createLocator` directly, and it is not used anywhere.
I'd like to see a unit test where the name doesn't break anything - I guess we could just always use the same name.
This test doesn't fail if `sorted()` returns `spOutput`, because it looks like the type of `spOutput` is a `sorted()`? (It looks like the same logic is still here.)
Not sure why this file exists.
This is unrelated. Why is it needed?
The `expressionMetaModel` argument should already be removed, right?
Is it needed here to make the `Ray_set` `rtps/builtin/data/ProxyHashTables.h` `include`?
This is a very minor thing to do... I think the abstract classes are unnecessary.
Shouldn't this be changed to LoadAccount()?
I'd prefer to have an `else` block here.
Why do we need the `.spec.acceptDict()`?
I think this should be in another PR, and the user should be allowed to do that.
isnt `t.Error` the same as `t.error` in our test cases?
I think you can just remove the method entirely, and remove this `return !isVersion();` below.
This is the bugfix.
nit: `31557600` could be removed
This is the fix for the `<` key
Why did you change this, and not just return nil?
This is the only place where we need to make sure there is an actual `guidVSPackage` in the constructor.
@saghul, I'm not sure about the null check here...
Please revert this file.
The formatting here looks good.
I think this needs to be added to `build_defs` and `build_defs-path` in `build_defs.go` since we can't use this function in `./test/test-go`
Is this a change that we don't need to change anything?
Shouldn't this be `subnets specifies`?
The AWS tag already exists here, is it?
Why was that added?
The `proposal_link_text` method should be called `_url` and `_url_for_text`, so I just changed the `proposal_url` to something like `proposal_url` or something like that.
I think this is going to get run in a different way than the test suite
Should this be called `getRecentlyFinishedFlows` instead of `setRecentlyFinishedFlows`?
This was changed to use Java 11 for some reason, but I think we should be consistent in other places.
This is a logic change. Is the way we can fix the `@return` below?
This is wrong - it looks like it would have been `err.code` but the error is returned to the error message.
`close` can be replaced by `close()`.
Why is this `rclone` in the output of `namespace.Config{}`?
I'd be inclined to replace all of these with a single `clamp` or even just do that in the future.
I think you meant to remove the #ifdef here.
This change was not necessary. This was the main change that was not related to the PR.
I'm not sure we should be changing `with blank line.` here.
I'm not sure about the use of this. I think you are just passing the `FakeID()` as `nil` and `AsUserOrTeam()` in the tests.
This is not needed anymore.
Is this a change in behavior?
This can be simplified to `throw new Error(message)`
I think we could use the same timestamp here.
Why was this removed?
why is this not a pointer?
I think this should be `queryID_IN_ID` instead, since it's a global var.
This should be `a registration entry with trust domain...`
Why not `_precise` instead of `_format`?
Why the `describes` here and not the span one below?
I think this is a leftover. We'll probably need a migration to remove this
Is there a reason we were not changing the order here?
We don't need to check for this. It's only for the first table, and if not, then the message message will be displayed to the `sort-order` property.
nit: can we move the import to the `for` loop, so we can just move the import to where the `for` loop can be removed?
Why do we need a `merge` here? The `merge` is only called in `video` if we can get a `Construct` of the `video` object
This should be `User: arn:` instead of `Encoded authorization failure message`.
The test is actually failing because the tests don't run on Windows (I don't have any ideas why this is necessary).
Why not make it `includePrivate`?
could you explain more about this? what happens when you have a link? what does it mean?
I think we should start a new upstream error, not a new one.
Is this really needed?
You can also test the actual error here.
This should be named `ClassStream`.
I think we should change `String` to `String.Empty()` to make this more readable.
This is not the right place to put the type. It's used in a different PR for a different PR.
Why is this in? Is there a reason why we don't want this now?
I am not sure if this is the right place for this. The code is not really needed.
This is wrong, `getuid()` is used as an alias to the path. I think we should be able to remove this check and just keep the path as it was before.
This will be ignored in the future. If you want to render the pipeline CFN template and then render the pipeline CFN template to render the request, you can just skip the entire file. It's also used to render the pipeline CFN template if you don't want that.
This is a no-op, I'd prefer to have a single array inside a `@var` tag instead.
Can we move this to be a `@SuppressWarnings("unused")`?
Can we use the `RefreshAndGet` method here? It is not clear what the type is.
you should also have `optoptik_option(self, "args, **optdict)` in the function signature to avoid breaking existing behavior
Shouldn't we also check that the Maven Maven has been removed?
This was an error on my local machine and now is no longer a problem.
Layout/SpaceAroundOperators: Surrounding space missing for operator `.
Why do we need to make `ks.Series` public?
If the notebook has been deleted, can you make this variable a class-level constant?
I don't understand why you deleted this line?
Should we use `const char_t filename_size` here instead of `const char *filename` here ?
Forgot to remove this and use it for the `NEXT` case as it's not a part of an API and should be renamed
I think it would be cleaner to remove the `defaultValue` member variable and just call `defaultValue.contextType()` in the function. Otherwise the `defaultValue.contextType` will never return null, so we will never have to delete it.
I think this method can be private and and `any` can be simplified to: `if self.is_environment?`
This should be `static`
This should be done in a finally block.
Why don't you just return `time.Now()`?
This should also be added into the `azkaban_project_dir_size` module.
this method can be private
Can you please update the type annotation as well? It's also possible that the IStringValueRenderer parameter will be removed from the class.
if `ip6` is a string (e.g. `next(ip6).if_ismaddr(ip6)` it is not a string, then you don't need to check if `ip6` is not an `next()`
This is a bit of a hack, why not do it in an `Error`?
Is there a better way to handle this?
Why are you removing these?
This seems like it should be a `h`, right?
Why are we returning an object here instead of calling `sh.if "$(sw_vers -productVersion 2>/dev/null | cut -d . -f 2) -lt 12)`?
Final newline missing.
I think we need to move the `||` to the `||` and `||` to be consistent with the `||`
I'm not sure that we should change this to `ca.pem.defaultKeyFile`, but I don't think it's needed in the other PR.
Why do you need to check `!empty()`?
Would you mind adding a `compressed` field here instead, so that the value `binary` is always initialized to `false`?
this could be a function that can't be passed through as it is.
I think this can be moved to EthereumJsonSerializer.
This is a bit weird, how about we just make it `None`?
I think we should add the `.chomp` argument here as well.
The alias seems not necessary anymore?
why is it a public getter?
This isn't used anymore?
You don't need to add this.
I'd like to make sure that the `DataContainer` is in a test case, to not use that.
I don't think this is the right solution since the variable name is used as a string, it is no longer used.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
Shouldn't we be using the standard `DockerStop` here and remove the `if` in the `dvc/etc/etc/etc/etc.yml` file?
This should be removed.
I was surprised this didn't actually have any effect because I don't know why it was here. It seems to be a very useful default to the `name` object.
`$` is not needed here
Is it possible to use the same function for `isSelectionAnchoredAtStart`?
Can you put it on the last line, please.
I believe this is just for testing purposes? :)
This test case is not related to the fix, but I think it is better to move it down to the next commit
I'm not sure about this change, the compiler will not be using it.
@kennknowles @siddontang do you have any idea why this is the "checkpoint" package?
Do we want to make this a constant or set to 200?
Why do you need to add this back to the description of the doc? It seems to me that it is only needed to add a tag to the doc, which is only used by the doc.
Why is this needed?
Is it safe to remove?
@jona-sassenhagen this is the only change needed to be in this file.
This needs to be moved down to where it's used.
Did you mean to include this include in this patch?
@chlowell can you confirm if this works with the code in master?
I think there should be a warning message here to avoid duplicating the refresh if not refresh.
I think this check is unnecessary, because if we don't return a `a` value, this will return an error.
This change seems not necessary.
Use the new Ruby 1.9 hash syntax.
I think you need to remove this.
I don't think the build is running in a build, so it should be in a build.
I'm not sure why these are needed. It is now the same as they are before.
Why is this not being used in this class?
I think we could just get the value from the `value` here and remove the `thrift_fortesting_object` and `thrift_fortesting_object`.
Why is this here?
Remove this or use a separate location
Can we remove this? The same is for System.Windows.Forms.Button().
I don't see why `DEFINE_true` is required for the code to work.
this seems to be the only place where we use this. should we just use `self._filename` and remove `self._proc_error`?
This seems unused, and should be removed.
Just a question: do we need to change the name of the button to be the exact same?
Is this the only place where we're not using the method?
Please remove the extra blank `if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB)`
This is a very generic name. It can be `isDocker`.
This will be removed in #2732
can you use `.anyMatch(FieldConfig::useResourceNameType);` here?
This is a bit confusing, how can you do the same for `Math.max` ? Maybe it would be better to call it `min` instead of `Math.min`?
Why removing this exception?
This seems unrelated to your change?
I don't think this is a correct change. The `static` field is not being used, so we can change this to `static`. We can change the `static` field to `static` if the `static` is used with the new `static` field in this file.
you can just use the `AddStateChangeEvent` function, it will only get executed when the task is closed.
Can we have an example that would be better with a `*ManagedPlugin.lined`?
I don't like how this PR will be merged into master, but it's probably a mistake that will be fixed.
Nit: I'd move these `using` statements to a single file. It's a little bit confusing because we have to have them in a different file. I would prefer to avoid doing `Task ExecuteOnMainThreadAsync` and then use `Action` in the same file.
I think we should just pass the blockInterval here and pass it to the `timeBasedRotation` function.
This isn't necessary.
This should be reverted. See how it's used.
Why not use `WrapWrap` here as well?
What's the purpose of the `site#communities`?
@zjffdu Why not have the `VersionDetailsPatch` prefix here as well?
@nmittler - This change isn't necessary.
The `if` statements are not needed here.
I think this should be `0` as well
Is this line necessary? I'd expect that if `fontawesome5_icon` is enabled, it will return `0.2` and so on would be fine.
If we're changing the default behavior, should it be set to 1 for this and `FeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeatureFeature
This is not needed. It can be removed, but it's used in `if ($container->hasParameter('locale') && $configPasses ...`
This is a temporary temporary. You could just use `puppet_tmpdir(name)`.
Please update the doc
you don't need to change this import
I don't like the naming of this line. Can it be a separate function?
this can be `dt.second.getInt() > 999999`, right? If so, you should use a constant
We don't need the `Method` variable here since we're using it directly in the controller.
I think this should be moved into the `if` block?
Is this related to this PR?
Line is too long. [85/80]
Is this really the only place where we call this? I don't think we want it, and it's probably worth it.
This is a bit of a hack, but it seems like it would be nice to check if the user didn't specify a valid `uniqid`, and if not, we'd just check if it is a valid `id` and `uniqid` or `is_id`
I think it is better to make an interface for null, as this is the default.
I don't think it's necessary to change the wsProjectManager to include wsAppManager here. The wsApp manager is only for wsClientManager and can be accessed from multiple threads.
I think the intent is that we can keep these as they were here. I don't really know why they were used in the first place.
This is the one that uses the `_valueFormatter` (which is used for internal and internal) so this is not needed since we use it everywhere in `setValueFormatter`
Add docstring explaining what happens and why it's not default true (as it is not default)
I think this is a leftover from debugging. Can you please add it to the docs?
this is wrong. since the task is the delete, you need to use the logger
I think the origin tag should be actually in the span?
@smarterclayton I have no clue what this is doing. Can you explain why this is needed?
Can you add a default method for this instead ?
It seems like this should be a separate change to `qqqqqqqqqqqq` and then the next `setTimeout` calls.
`log.info("Modification detected, reloading config file")`?
I think we should return the `s.eventsEnabled()` instead.
I think the `escapeExpression` should be removed as the `is` is already in the `RemoteSafe`.
`newType.getDerivedStateFromProps!=null`, so this is always false.
Please, add `45:00` and `guid` to the list of `CompletableFuture` types. This would allow us to make sure we don't break anything, and we could just change the value of `CompletableFuture` to `CompletableFuture` instead.
Why do you need this?
@becker33 I think it might be worth checking if the bytes exists in all the bytes, and having the correct type be changed.
This will need `std::mutex` in `checkout.prototype` and `checkout.prototype` if the lock is not an lock.
Why not `tab.data.input_mode = mode`?
Can you use the `configureCluster` here instead?
Why not keep the `name` attribute in the `ApiService` method?
The `<%= dom_id(plan) %>` tag seems not necessary here
This is a very different thing, and I'm not sure what we were doing before.
We're not using the actual version anymore, so I think we can just change the version here.
I don't think we should be passing the `user-read-currently` as a constant here.
nit: I think this is not needed
I'm not sure about this. It is not needed, we only use the snapshot file to exist by default.
Please remove this empty line.
I think we can just use `.warning()` instead of `isArray` here, right?
This test fails without this being added.
This function was only used to check if the footerText was set before.
This one is unrelated to the other PR.
I think we should add the `.iloc` here and move the `.iloc` below the `.iloc` above.
Please use `Config::getServiceService`
I think we could add some more information about what we do with this API
1. Go to `date`? 2. Use `use_date_group` (and the default value in this case) 2. Use `use_date_group` instead?
I am not sure this change is needed. I would keep the original signature of `pulumi up` in the public API. It's a public API.
shouldn't this be `NewMasterIndex`?
@smarterclayton can we use `validateExecExecCommandAgent(t, taskEngine)` ? I'm not sure if it is a good thing in the codebase
Space inside { missing.<br>Space inside } missing.
I don't think this will be used in this file.
Shouldn't this be `if defined?(Mongo::QueryCache)`?
can we name this `:funder_id` so it's not clear what the column does?
Is it possible that this test fails with `js` branch as well?
Would it be possible to have sn.Paths[1:]] and sn.Paths[1:] instead of sn.Paths[1] here ?
I think this should be a separate commit.
Please revert this, it doesn't make any difference
@rakanalh @damenchoum : if you want to rename this, you'll have to add theSlugs interface for the new field
This is a change of behavior, I'm not sure if there's a good reason to have it.
I think we should have a `json.Map` type for that
I don't understand what this is testing. This is a test that fails on `/propropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropropro
This should be in `LOG.finest()`.
Can we just use `ClassToSkip`?
Why are we not passing the `math/rand` as a list anymore?
I think we should remove this and `Environment` completely completely remove `log` and `loglog`.
I'm curious about the `pendingConfiguration.port` here - is this intentional?
@becker33 can you review this change?
Same here, there should be a `.Last()` call here that you've removed the `if`.
Please use `String#Equals(String, StringComparison)`
I think this could be a separate test. But I don't have a good opinion, I think it's a good idea to have a separate test.
This is a bit confusing, I think the `assert str` check is redundant, but it might be helpful to see what the behavior of this exception is.
This is just to match the API, but I think this is a little bit of overkill, and would be great if it was not possible to use a simple `handle` method for each new `return` statement. I'd also consider using `return nil` to be consistent with how the API would be used for the `return` statement, but I'm not sure what you think
Should we also do `isinstance(x, dict) for x in itervalues(node)`, or is the expected behavior here?
This is the change that will break compatibility.
I'm confused, why is the `torch.second` in the first place?
Would be nice to have consistent naming conventions.
@jmhooper @mitchellhenke can you confirm if we have any kind of issue on adding an infinite loop?
This is the same as the `<Float> arr_eigval = array<Float>::zeros(1 * component_count);`, so it should be `<Float>`.
Line is too long. [98/80]
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think the `Rule` should be renamed to `isContainerTestBase`
I think this can also have a `ManifestFiles.read` method in `features/podman/podman/cache-plugins.sh` and a similar one in `features/podman/plugins.sh`. We have a couple other similar cases in this file.
is this a debugging bug?
I don't think we should be changing the default behavior of the function.
This should be `Port(n).Run("...."` instead of `h.Run` to match what you did with the `w.LogWorkflowInfo` below.
@krzysztofwolsols is this a breaking change? I think it makes sense to add a default to the `listenbrainz` as well.
Is it worth making a new enum class, and having a more generic name, such as `LABORATORY` or something like that (and maybe more generic name) and easier to find?
I'm not sure why these are necessary. It is just for testing purposes?
I think it's better to use `Array.map` instead.
This is not really the right place to put this code. This is because it was the default config and was just used once in the future.
Is this needed for other modules?
We need to test for the case where `not_to raise_error` was specified and `not_to raise_error` wasn't called. I don't know how to test this.
`If True` is applied to disable if there is no default.
What's the reason for the new property? I'd expect it to be a property?
Why is this needed?
I would use the `PathString` type of `strtype` for `strMap` and then just use `strMap.String()` directly, since the value is `""`.
remove this line?
This table is only used in one table, so can we just remove it?
the `Enabled` is never used, so can't be removed.
Why not call `isYou` here and above?
This should be removed
I think it would be clearer if you didn't do this, but I would rather keep it `@pin-mongos = testData.skipReason || testSuite.name !== 'pin-mongos'` and then remove the `@pin-mongos` check here.
@bartonjs - I think it's better to just have a single method.
you can get rid of the `s` here.
Is there a way for us to use `path.resolve` here?
I think you can remove the `isQuorum` check altogether.
This is not necessary, as the `e.zone.ctx` already has an `Insecure` value.
I'm not sure if this is the right place for this. You can add a new property to the root of the root `aws-sdk-s3` and `aws-sdk-s3-`
Is this property used anywhere?
`cvc.Spec..CStorVolumeClaimPhaseBound` is never used.
is this change intended?
nit: you can use `type = fullTableName` here as you will be able to use a different name.
I would have put this line after `createAll()` (which would make the code a bit more robust, e.g., for the user to see the metadata, not the metadata)
I think this is more of a good thing to call the SSL_pending check, and if the caller is using it the user might want to know about it, and we can have a better message.
This should be `src/server/server/server/prefix/_cltest_step.py`
I'm not a huge fan of making the function a bit more generic and confused. It's a very nice name for this.
This should not be changed.
Can we add some more information here?
Can we use `IsEnabledEnabled` instead of calling `GetAsciiStringEscaped`?
this should use `!tizen` instead of `==`
@smarterclayton I think this should not be here. if you want the function to return `dstCtx == srcCtx` (or whatever you want it) then you can call hipErrorInvalidValue instead of just calling hipErrorInvalidValue, but the function does not return anything.
I think the `indexingConfigurationsToReIndex` is already set in the constructor, so we can just use that instead of using `clearSearchIndex` here.
If we're not going to use `pmix_output(0, pmix_globals.debug_output)` you should use `gulp dist` instead of `rescueize_output(0, pmix_globals)`
just curious: how can we set `_ServiceProvider_history` here?
this is not needed since team_page is already a team_plan_quantity_select_attributes which can only be called when you have a team_page.
Why is this `if`? It seems like it could be an `if`?
Use the new Ruby 1.9 hash syntax.
This is a bit hard to follow, but I'm not sure how to fix this.
Should be an optional
This will be a bit confusing with the current code. I think the `abspath` method will only be called in a single `if` statement.
This function is only used in one place and will need some extra checks.
This was not related to the bug, but the `flowOperations` was still in the `ctx.flow` but not in the other places.
Should it be `a4adc8f4da9c7cc6d2dd93b50ca5b73dd14df791c0e`?
I don't think we want this to be here
nit: maybe name it like `resp` or something like that, `string_text`?
Shouldn't this be a "if status == execcmd.Restarted"?
Is it worth having one `char * hiveTableName` or similar?
Should we just remove the jobProps method?
The option `resize_image_enabled` is `True` in this case?
We should add `[DisallowNull]` here
I think the logic for this should be `!config.sync.fullSynchronized !== undefined && config.schema === undefined`
SealedSecretEncryption is a nil check. Isn't this a nil check?
Can we make these service types for the same reason as these package-level variables?
why is this removed?
Please use java.nio.IOException for the class
This test fails without the test run on Linux as the only functional tests that is not running in tests. I'm wondering what's going on here.
I'm pretty confused, if this is the fix for the test suite, we don't need to make it set in the constructor.
@xmatthias Is there a way to check this, or should we make sure the above tests run only for `<%-`? Or is this just for testing purposes?
I don't understand this change. The only place in this file are used is that we can use `gmail.com` in this file.
Would it be worth noting that we can skip the `Ani` and `Tra)/` namespace at this point?
This should be `return data == null`
Remove this one.
This is the same as `_` below
I'm not sure if this is the right place for this - we want to be consistent with how we handle a `Task` function. I'd prefer if we could avoid that (and possibly make it clear that we are using `Task.Task()` in the code that is only used for the `Task` function).
I'd suggest to move it to a constant.
What does using the pylint fix here?
`includes_mentor?` is a bit confusing since the `add_UD_to` call here is not needed.
Why this change? I don't think this change makes much more sense.
This is the wrong place for this.
This is a little weird. I would have gotten a bit more on the caller and just call `schedule().Export(...)` on the end of the `catch` because it's a `string`.
Is the PoSt right away the miner actors? I think this is not needed.
What is this used for?
I don't think we should be calling this method here, since we have two different methods.
this is a bit tricky, can we do it in a helper method and avoid this one?
I don't think we should be catching this TODO, since the second half of the methods should be sufficient to maintain the problem.
"copy for C++ object-based API" -> "copy of C++ object-based API"
I think this was added to avoid duplicating these tests. The `default` property is now being used by `gulp help`.
I don't think this is the right place for the user. It seems like the `-D` and `-D` are not necessary.
Could you please elaborate on why you need to use async function?
I'm pretty sure you removed this line because it is now done in the previous line.
I'd remove this file if not needed
I would rather have this in the `Hash getBlockHash`
nit: can we use tabs here?
Do we need to do a similar change for other languages?
Why the newline?
I am not sure if this is needed. The existing code will be used to generate a new interface for this case.
It seems we are missing some of these methods here.
I would rather see `Uri uri.PathAndQuery` in `pkg/Uri/`
(style) line over 80 characters
Do we need to check that the file exists, or does it only work if we need to set it toExistingFile?
You're missing a space after `)` before `Trail`.
This file needs to be reverted.
I think it'd be better to do a `var/var/var/var/var/spack/etc/etc/self.Stop` here and then just use the new `apachethrift.Stop` in `pach_server.go`
nit: I think this is a good change.
I don't think this is the right fix, the `devel` should still work with `en-latest`. The `io` should be the same.
I think this is the only place where we have to check for the `pip install` block. The `if` block above should also be removed.
Why do you need a new Dictionary at all?
This is not a good name. It should be `User` not `client_slug`.
Just out of curiosity. Why are we changing the test name?
Why the change to stdout?
Why was this removed?
Can we just use `index->getAtomicNum()` here?
I think we don't need `!string.IsNullOrEmpty(archiveFile)` anymore.
I would recommend not to set a default value in the `OptionalLong` package, because this is not a part of the flow and we want to avoid doing a null check.
This is not a warning and it will be easier to debug
why remove it?
@tgamblin This is the only place in the file where I would like to see the name of the file in the file.
I'm not sure if this should stay
I think you should also check the reload error.
Would it be more clear for the name to be `body` instead of `body.toString`?
Please don't add trailing whitespaces.
Please remove this, it's no longer needed.
This should be a `Unhashable`, since we have `[unhashable-dict-key]` below.
Should this be removed?
Can we use `std::string::fill_Factory` instead?
Is it not needed ?
nit: you can just set this above the `sysfs_format_ptr` check below.
hierarchicalname should be kwargs.get('firewall_rule_hierarchical_name', kwargs.get('firewall_rule_hierarchical_name'))
@deads2k @smarterclayton do you think you can change this to something like `IngressClass](https://kubernetes.io/docs/@Restricted(IngressClass](https://kubernetes.io/docs/@Restricted(IngressClass](, Helix_networkingress.class, Helix_version.class, Helix_version.class, Helix_version.class, Helix_version.class, Helix_version.class, Helix_version.class, Helix_version.class, Helix_version.class, Helix_version
This line should be removed.
@deads2k @tnozicka is this a bug? Is there a way to avoid this change?
Why did you make it more explicit?
Why the change here?
this is a bit of an overkill because the string 'this' doesn't look right to me, and I'm not sure we need to change the type of the 'not_to' of the spec
I'm assuming this is a change in behavior, but if this is the best way to fix it, then you should add a log message here to make sure it's not set to true. (I'm not sure if this is the best way to do this.)
Isn't that a `DBALException`?
why are these moved?
Can you update the doc string to reflect the new fixture?
I think we should remove the `state` here and below
We could also use a different method for this.
@mrunalinikankariya please review this test as this is only used in test code
Why do we need to add these?
This should be removed.
This import is still used by the build system, and should be removed.
I don't see any usages of this method.
hmm, maybe `a skip` instead?
This should be in the `AccountStateByHash160`, right?
This is the main change that we should fix in `clientconfig-only` in `MainGapicProviderFactory`
I think we should do this in a finally block.
I'd use a `==` here instead of a `is` check
I think we should log the log with the `if routeUpd.Dst == nil`
Why did this change?
can you please move this to `Basedb/core/config.js`?
I think this can be removed now
I think this logic could be combined with the previous behavior. It's not clear that the `feval` is a `feval`, but that's a bit of a hack anyway - if not, it should not be the expected behavior.
Why this change? Is it because the interface is a private method?
I'm curious what the reasoning behind `time.Duration` is for `time.Millisecond`?
Why the `instance of `instance of the node` here, and the `instance of the ~~`
Why are you adding this here? It seems like this should just be an actual map.
Why this check? Shouldn't the THRIFT_INVALID_SOCKET be changed?
I'm curious if we weren't setting `credit_card_form` in the DB and how it works in both places?
Standards: Please add braces to this condition and spaces around the `if` operator.
Is it not possible for this to happen in a single line? I think the tests pass so it wouldn't have to be inlined.
Is it possible to use `goimports` here?
Can you move this to `test_build_environment.py`? It's used in many places, and I think we should have it in `test_build_environment.py`
This is not the right place to do that. I don't think this is the correct name for this change.
This is a really unrelated change?
Is it really necessary?
"especially" is the wrong name for this.
Should we be using the ENABLE_QUARTZ constant?
Can you also check if there is a block here, instead of calling it in the `if / prefer_e == e`.
This is not necessary. `panic` is a private method
What's the difference here if there is an exception? Can we do the validation in there?
This will fail if the host is not configured, but if it is not the case, we should check if it is not nil, otherwise we won't be able to handle this case
Why not just call GLOBAL_STAT instead of GLOBAL_STAT?
You need to add H2O_COMPRESS_HINT_ENABLE as well. You can get rid of it in H2O_zone() and make H2O_COMPRESS_HINT_ENABLE()
Why is this change needed?
nit: can we revert this?
Is this used?
Can you please update this to use the `scratchBucketBucketNonPhoneZone` function as well?
I would move the `bios_grub` above the `bios_grub` above, so that we don't have to do it in the code.
Why do you need to do this? This looks more like it should be handled by the `parseElements` method below.
Is `snippetPair<string, string>` intentional?
I wonder if we can keep both `/v` and `/` as the default?
I think this should be `warn_chain`
We need to add ` duraton` to `action_path` in here.
You don't need to use `.DataFrame()` for the new `.find_release` test, you can use `.find_release` instead.
Should we keep this and return true?
Why was this removed?
These changes seem unrelated to your pull request. Can you explain what this is doing?
This is a temporary function. You can just use the `const` in the loop and pass it in to `_WIN32`.
Shouldn't this be in the `getRequestStreaming()` method?
Please don't do anything to do it here. You can move this import to a new module, or you can move it to where it is used.
Shouldn't `recursive_mutex` be `Node::recursive_guard`?
Why are you removing this?
This is no longer needed.
is there any case where `null` and `null` would be returned (and would be null or empty)?
I am not convinced that the commits should be the commits at the end of the registry. Is there any other way that one is going to be able to do the commits?
I think this is a good change. It's not clear how we're trying to use this in the future.
This is not a big deal, but I'd rather have a better name for it.
I think it's better to just have `secondsRebuildCommitFrequency defines the number of accounts that would get added before the memory cache`. It's also also possible to have `secondsRebuildCommitFrequency` be a number of accounts that is not in the memory cache.
I don't think this is right, I would add it to the `const tus = { ... }` above
Shouldn't this be `final`?
I think you can use `contains("JavascriptCompiler$CompiledExpression.evaluate(" + source + ")"")`
why do you want to disable the `slots_t` variable?
I think we should move this logic to `pkg/configurator`, and make it more generic.
This is an important change, we should probably also add `SPIFFEID` to `SVIDStore` and `SVIDStore` to `PythonPython` as well.
The `TestCase` is used to check if it is `nil` and `undefined` is not `nil`, so this will need to be `nil`
this doesn't look right to me - if the console is not set then it will return the input of the function.
This is the fix for the test. It should be `.encode()`
I'm not sure what this means, is this supposed to be? Is the idea that the value is not an error?
@mitchellhenke Is it possible to have a default value in some way?
@danrot you are adding a python file for this. I'll take care of that.
Does this need to be added to the base implementation?
Please also move this import to the top of the file, it's not needed for the other changes.
Nit: import sorting
I think this check is not needed
This is a very specific bug. I'd just call it `ApplicationHeaderPrefix`. It's a bit confusing to have a common header name in the service.
This import was unused.
Should be `1 || len(mset.config.MaxConsumers) >= maxc`, right?
I think this is not correct. `_timeout` is a string, which is not a `_timeout` because the timeout is a string, and is not a `_mypy`.
@kroitor since this is a new fix I think this should stay in an `else` clause.
I think it'd be better to make it more explicit, like "rwm" and "generic", like "generic", or even "rwm"
I think this should be `time.Minute()` instead of `time.Minute(() => time.Minute).Minute(()).Minute(()).Second // maximum allowed time for a message to be read or written.
@smarterclayton do we want a new function here?
Is this change necessary? I can understand why `ingInterceptor` was added here but now it's not being used.
Is this change needed? I don't see any new lines in this file.
Should not be there. But, if this is a test, we can get it back from if-condition
I would like to see the same error message as the last one. This function doesn't have to be called by the `oref` command which has been called by the `oref`.
remove this, please
We should also log the warning here.
I think we need to keep this as an alias of the `CUSTOM_TEMPLATES` variable, as it's no longer being used. Otherwise, we can just use `None` as the value for `uint32_exc`, which is not what we use in here.
I think this should be changed to `ManagedAgentsUnsafe. updates`
I think it would be a good idea to make the `NewWorkingSet` take an argument of `ws`. I think this can just be `Set` if you want.
Should we log something? I see we are doing that in this PR.
I think we should just use `constexpr` for `Converter`. It's the same thing as in `lib/common/config.go`.
This should be removed.
I don't think this is the best place for this. Can we just use the same variable?
Why not `\\[([A-Za-z_][A-Za-z_][A-Za-z_][`?
Is it possible to use `Retry limit exceeded for #{name}` instead of just `Retry limit:` here?
I would prefer we don't use `status_code` in the form for this case.
I'm not sure about this one. If you want to be sure it is possible to have a test case, you can't use `TimeSpan.FromSeconds(10)` which will be the case for `TimeSpan.FromSeconds(0)`
I don't think this change is needed.
This doesn't look like anything is being used in `html.js`? It seems like we should just remove this and just have a single `meta charset=\"UTF-8\">\n` in both cases.
This is a little confusing, as the first `#` is a `SearchNotification` that is used in `SearchNotification`, which does the most likely cause a `SearchNotification` to be used by the reporter. Is this intentional?
I think it is fine to just change this to `BoxSet` and `displaySet` to match other `BoxSet` functions.
I think this should be `writeConcern.w || 0` instead of `Gacknowledged writes`
I'm curious if the `NullValue` value is being passed to the `Value` property. Is this something we can do with? I'm assuming we don't have a way to do this, but we should be able to make the `Value` check more specific, so we can just do `get(Formats.RETENTION_TIME).get("Value", ...)`.
The `horizontalAdvance` should be removed from this class as well
I don't think the `boltdir` is a good idea here since it is a user-facing configuration. I would just add a `boltdir` argument to the `configure` class, and have it be an `configure` class that can be used in other places, and then we will need to re-enable it later, as the `configure` method will only work with `configure` class.
What about making a constant in the `process_config`?
You need to add an additional `include_temp` parameter.
Why did we need this change?
Why not `gs.resolve(process.cwd(), '..')`
This would be better as a separate PR for all uses of X86/ALIGN_FORWARD
This can be `bool(bool)` without the `[`
If the `_get_value` method is used to return the left-to-right window, it will return a boolean and it will return the left-to-right window, which is not what we want. If you want to do this we can do it in both places.
Please don't add trailing whitespace
Is it really required ?
Is there any specific reason this is not set?
Why do we need this anymore? Isn't this going to break any existing services that do not contain `high` types?
Isn't it better to have an interface that does this package/class and have it only take an annotation?
can we make this `root` a string and use `.basename()` in the `.basename()` method ?
please fix formatting issue here
nit, should this be `protected`?
This change seems to be unrelated, and is a bug fix.
Why is `arg` being set before it has been set?
Would it be better if we used `[namespace` here as well, to make this a single file?
I don't think this will work, but it seems like we'll have a bunch of these in `src/main` to have the same effect for the `Examples` package, and it's just an easy change.
These two classes aren't used in the tests.
I think we should use a more meaningful name
Do you think this should be part of the `Abstract` decorator?
Can you add a `f` prefix to remove this?
@deads2k @deads2k I'm not sure we need this as we are running on the server for all versions of the server, right?
Why not use `exists()` here?
@wachterjohannes Why is this not enough? Does it need to be a new instance?
I am not sure why you did `.gitignore`. I think this is fine for now.
I believe the namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace
I'd rather have a separate config for the simple example.
Please add a space between 'read' and 'split', to make sure the table matches the data file.
What does this `*` do? I don't see the `libunwind` variable added to the `jvm_manager.h`
This change seems unrelated? I'm curious why it is necessary
We should not need the data in these places.
This is a bit scary... I don't think it's needed... the `exceptionally` on the `exit` method will be called.
This won't work on Python 2.7. We need to make sure that this is not part of the `ModelType` instance.
Why not `NotFound` and `NotFoundNotFound` as the parameter?
you don't need this extra `conf` if you're using `each` as it's already there
I don't think we should use the main method in `debug`. It's a little bit confusing since it is used only in a single file.
Should have a `@param` annotation, otherwise it might fail with the `@param httpEntityNonnull` parameter.
Why is it necessary to return `_` here?
why is this not a `emit`?
I think this is a good idea to add a new JIRA to `createEmitter` and `createEmitter` to the `changeStream` that is passed to the `eventEmitter` function.
We can remove this line and add a `methodURL`
We could consider to pass the `--with-all-egress` option to the client.GlobalNetworkPolicies().Create(nil) instead of creating another one.
Please update the type hint in the docs.
Please add a TODO to fix this.
This is a test file name, not just the test name.
Thanks for updating, I was going to say that this can be a separate PR if you prefer.
This is an example of a situation where we could do something like `if (is nil && !is nil)` instead of something like `if (is nil)`?
Is it intentional to use `getConfigOrThrowSolrException` here and not use the check above? It is not needed anymore.
I think we should add a new type to the end of `findCondition` so that it's always 0.
This seems to be an overkill... I'd prefer a separate test to see if we can avoid the risk of having a new `Name()` function in the struct, and have it return a boolean.
I don't think we should raise the exception here.
Isn't that going to be the default behavior? It seems like it will be a string. Maybe we should just set it to `true`?
This is not a valid key. I'm not quite sure if it makes the sense to include it here. It's a bit odd.
This import looks unused. Can you remove it?
this is just a thought, we should also have this in a `_index/index`
@tgamblin Shouldn't we use the same `dispatcher.submit` here instead of using the `submitOn` constructor?
I think this needs to be done in the `after_action` callback since `current_user_has_active_subscription?` method is only called when the user is not found.
Can't this be final. We don't allow `List` because `readType` is already declared as a `ImmutableList` in the list.
Is this test failing?
I would suggest to use `is_ACCESS_TOKEN` here.
Why not a default column? We could have two distinct index types: `null: false`, `null: false` `null: true`.
Would you mind to move all containers to the same place?
these are not related with the changes in this file - are you so sure they are not needed anymore?
I don't know why this is necessary, but I can't find a way to get this. I'm not sure why this was done.
Shouldn't this be `var`?
This is a good thing to change. We don't support it in the future. The `g_autofree char` is just a `const` for the `tmpname` instance.
This is wrong, because it is not used anywhere else, which is a bug, it is not necessary.
This is a good candidate for the outputs to be something like a constant. It can only be used once when the outputs is null.
This is an example where we should use the same `r\n` prefix for all `r-gcp` files, not the one for the other url.
This is the line that was fixed by #3332, but should we also remove that parameter? If not, I would recommend renaming the parameter to `_` or something similar.
Shouldn't we have an explicit try/except around that? I think we should have it there too, and not print an error when we're trying to do it.
I would use the default value of `0` here, as the default value is `0`, so it is no longer the case.
Is this just for debugging?
We should probably move this to the new location of the function.
I think you want to use PipelineFailureSensorContext here.
Should we also add a license header here?
I'd prefer to have an `Byteify` class that can be used here.
why not an `erb` for `erb`?
There is a more meaningful name here, could you rename it?
I don't think this is the right default. I don't think we should be doing that.
It's not necessary to add `Client` to this file, it is already in the `internal` namespace.
Why do we need this?
It looks like `app.Parse()` is called twice here. Is it something you can do in a non-const place?
I don't think this needs to be a separate function
This one seems odd... I don't see why it is needed...
Why do we need this for the magic ostree-prepare-root?
Please remove the include.
Is this related to the current change?
Is this a bug? The `+` is never being used, right?
Can you make it a private variable?
I think `MatchFold` could be moved out of the `if f` block since it is used below.
This is a bit of a minor detail, I'd prefer a `@product` tag here.
I think we should add `git grep x`.
I think this is a great way to get the `store.IsNullOrWhiteSpace` method, but I don't see where it's used.
I think we should check `path_ == paths` in all cases (the paths paths that may contain more than just paths paths, and then the paths paths that may contain paths in the path)
This will probably work in a future PR, can't we just move the `--stress-test` option out of the `type` and `remoting`?
This is an array, but the second parameter is `array`.
Why do we need to set the `Occur.MUST`? I think it's not needed.
Is this change intended? Can we remove the telemetry URI check?
This should not be in this PR, right?
This is a little strange... why did we get to `require.close(nil)` here?
The `while (true)` is unnecessary.
This is a little confusing, because it does not look like the `opt_verify` flag is being set in the config. Is it a problem to just set it to `opt_verify`? If so, maybe a `if (opt_verify.h) {` here would be clearer?
why do you need to pass the db through to the `blockNS`?
Why do we need this? We can't rely on the `auth_failure` prefix.
This is now unnecessary because `notification_important` is already set to `true` when there isn't a user's default.
Why did you remove this?
This seems to be a bit dangerous. How about `Integer.MAX_VALUE - 4, "_spec_id", ...)`?
Why are these lines changed?
I believe we should only have the `#include` block.
Why not `self.settings.get("data-address", None)` ?
I would prefer not to do `atomic.StoreInt64(&t.Total, total+split)`. We could use that instead of `Config.LoadInt64(&t.Total);` here.
@zjffdu Why did you change the cast to `null`? Is the cast needed?
This is not a great name :-( I'm not sure it's a good one to do, though
Why is this necessary?
I think we should keep the `generic` here and remove the `prohibitedAttrs` part of the previous `prohibited.rb`.
Is there a reason this wouldn't be a valid check on `UsingOVM`?
Is this change intended to be in a PR?
Indent the first parameter one step more than the start of the previous line.
Please use `decryptWithPasscode`.
I'm wondering why the `calculateHashOfBftBlockForCmsSignature` method is used for the internal state of the properties in the `WorkspaceHeaderFunctions` class?
This class is not used anymore, please remove it.
I think you should use `combined` instead of `combined.type` as it is more readable.
This is not used anymore
Why does this need to be removed ?
This should only be done for a single call, but for now I think it's a good thing to do, and it's not a hard time to understand why.
This change does not look correct to me. It is not related to this patch, but the test is failing because it has been changed in another PR. The fix is to keep the test name as it was before.
I think we should add the default value to the `HeaderMap` struct instead, otherwise it will be removed later.
@matt-gardner Is this what you intend? It looks like you're doing this twice?
What if there's no other option?
We should use the `_get` constant in the tests
The `char *)"BOOLEAN` will never be `nil` because this will never be `null` if `char *)"BOOLEAN` is `nil`
This is a breaking change for me, as the test name is no longer valid now.
This line seems to be unnecessary.
nit: this variable should go to the other `if` statement above.
This is not really related to my PR, but it might be good to add a check here that the user doesn't need to have a `@fillment_error` in the database
`zone.clock.Now()` is more of a name. Maybe worthwhile?
Could we use a wildcard for this, please?
This is a pretty trivial bug. The `switch` lock in a lock is not a lock, so you should be using an error instead to get the `mStatus MergeStatus` object.
I don't think this belongs in the test
Why are you removing the `//`?
This was the only real fix. The `metricReader` can never be used.
Wouldn't we want the `.kafka` in the name to be a bit more specific like "azkaban specific"?
Why does this need to be removed?
nit: use `.replaceAll(`.
Shouldn't this return `errors.EncodeError`?
Is it the case that the `http://localhost/...` URL doesn't exist?
Is this the right way to test this, but it's a bit hard to follow and debug
I'm not very clear on what this means. If you want to have a migration file, then I would suggest to keep it as part of the convention.
This is the only change in behavior. I would have done something about it in a separate commit.
I think we need to do this for the route. We can't use this for the route. So we should use the same value for `losc` instead.
This is wrong - we want `results['gt_masks']` to always be `True`. If `gt_masks` is `True`, then we want `isinstance(results['gt_masks'])`, which will always return `true`.
why do we need to remove the last `if` condition here?
Why is `r` an attribute of type `int, nil`?
Is it expected that `s.hasChunkHandler` is true?
I think we should keep this here, and make the `EnableEnableOf(new[])` a `default[]`. If we want to support it, we can just leave it alone.
@tarekgh I'm not sure why this change is necessary. Are you sure you want this behaviour?
Please use if (!file_exists($carousel->getUploadDir() . DS . $carousel->getFile()) instead
can you move this to the top of the file too?
Please revert these changes since they're in a separate commit for a while. The PR is a little strange.
Just a question, why are we passing `id` as a string here rather than the `id.ID`?
Why is this needed?
This is the actual fix. You could change `BaseEndpointResolverError` to `BaseEndpointResolverInfrastructure`, and add an additional check to ensure it's only used by the `EndpointResolverError`. I think it's better to keep `BaseEndpointResolverError` as an arg here, and add a TODO to remove it.
Redundant curly braces around a hash parameter.
This is a change that means that we don't use this field in this class.
I'm not sure if this is the best solution, but this line is actually too complicated. It's the default, so the last line should be the last line, so we don't need to change it.
I think the default value should be `padding: 0`. Also, this should be `f(padding: 0),`
Can this be `serverLacksFeature`?
Can we use `CA` here?
Could you use a more descriptive name for this type?
This was not a good idea, we're now using the `address` argument here.
Nit: remove extra space
I'm wondering if the `header_path` method can be renamed to something like `username` or not?
I'm not really sure if this change is necessary, or if it is just a copy/paste error we can use here.
`project_number` needs to be passed in to `NewPrecondition` as well.
Is it not used anymore?
What was the reason to change the implementation of `GetRequestStreamAsync` to `GetRequestStreamAsync`?
this is wrong, it will return false, so no need for an error.
I would use a temp variable here
Does this still work? It seems like this was just to be the `ExternalApis::OpenAireService` but now it doesn't.
This should be static, not static
This is not used anywhere. Please remove. Also remove the name.
This should probably be in the constructor.
Is this still needed?
this seems to be repeated
This is a change that should only happen if the user has a single thread.
This seems like a regression in the test, as you're using `t.Stop()` to get the same result as `t.Reset`
this is just for testing purposes. we need to make the change to the previous commit. we need to make sure the `MsgQueue` is only used once and we can't change the logic for this change.
Why do we need to pass the `$codebase->reportUnusedVariables` as a member variable here?
We could probably remove this method entirely. It would have been a separate change in #36369 and I am not really sure what the benefit of having two separate class methods is for now
why not `get_rank`?
This is a bit confusing to me. I would rather expect it to have an 'a' property as an argument to the `a` object.
@sparrowDom Just curious, why did you remove the `--no-secret` flag?
Can we change this test to use `1.9.1`?
You can also remove the 'UTF8' argument here.
I don't think this extra can ever be passed.
nit: you can use the same logic as the method above.
We need to make sure that all the old `includes_team` columns set to `true`. Otherwise this will be false in some cases.
why is this a pointer?
nit: I don't know why this is necessary.
@chenjwicka Should we be using the `Description` as the default here and check the `master` as before and not an explicit default?
Why is it no longer needed?
This should probably be `RootfsMountMode`
Why is this not needed anymore ?
I'm not sure why you need this?
I believe this can be reverted.
This is now just an extra line break.
Why this change?
We need to keep this setting up in `java/index.js` for this.
This doesn't seem to be the same as `_get()` with it. Is there a reason why you need it?
should be `?string`
I think the `_` prefix is not needed.
This was added to the PR above, but it looks like we're not using the `$USER` variable for `write` and `x` in a few places. I would prefer to avoid the double `echo` on the first line.
This is a no-op, right?
I'm not sure if the `video` check is necessary here, but it should be removed from `tizenVersion >= 5` and the test `video` is no longer needed
Can you please move this to `go.opentelemetry.io/api/trace`?
Can you also include `InstanceNetworkInterfaceScanner` in the base class?
I'm not sure if `where spark_column_labels` will still return `index_spark_columns` when `where spark_column_labels` is provided?
Should be `index` instead.
I think this should be done in `getCurrentPlatformPlatform` as the default.
I don't think you want this here, but it seems like we'll need to move this to the `client` package for some reason. We're not doing that anymore.
I'm wondering if we should just make the `base` a `map[string]string` here.
Is it expected?
I think it's not necessary to change `canonical` here.
I think this can be removed.
@cra0zy - This is the fix.
I think this import should go before the file system (after the one above `site`).
I think we should also include the default of the default, to be able to use the default values of "TEST" to make this more generic and consistent with other resources
Is it safe to add a err here, or would it be better to do a controller instead of an error? Or should I ask you to use `controller` or even `controllercontroller` if we're going to change it?
Use `opts.prefix_size` to avoid code duplication.
Can you remove those lines?
I don't think you need the `return` here since you're using the `callback` above.
this change is a bit strange, I think you need to remove this one
You don't need to do anything about this, `errors.Marshal` is enough to just do `errors.Marshal` here, right?
`internal Please use `Use the private private set;` property. (It's a little strange to do a `Customize` property in this file.)
This is not the fix for the fix, but we should not change it in the PR. We can keep it in mind if we want.
I think this is still a good idea, we should not have any version of this class as the library version is not in `displayFile()`. If it is not then, we should add a `@Nullable` annotation to the `buildFile` class.
I am not sure we need this method here. Can you please make the method a bit more specific?
This should have a unit test as well.
This is incorrect. You have `|| vals.LocalHeight() == 1` in this file. Also, I would suggest to move the condition to a new function.
Should we be checking for errors here, if it were not, that would be a problem.
This function is only used in this function.
Why is this here and not in `pkg/crypto`?
Is this change necessary?
(style) line over 80 characters
I think you can just delete this, this is the last thing that's used
This should be moved into `BaseMessage.go` and `BaseMessage.go` and use that in `BaseMessage.go` to avoid breaking existing code
We have a `cancel` processor in the processor processor so it can't be determined from the processor.
This should be a constant.
This is just a question for the future. The error message could be improved to say: "World Id only in valid range"
@jhipster/developers why we need both `tags` and `limitFlag`?
What is the purpose of this? Does it cause a test failure?
@jcotela is this supposed to be a high level setting?
This is now unused and should be removed. The `static const char * szTypeRef0 = NULL;` is now never `const char * szTypeRef0 = NULL;` because it is a static variable, and it should be `const char * szTypeRef0 = NULL;`.
Why did you need both imports?
Shouldn't this be `== 0` instead of `==`?
What's the reason for this change?
This is not a good idea. It should be the "is" `.fetch(:adapter)` check. It is only used in the `if` statement above.
Can you explain why this is necessary?
This is a new function that does not have a dict, so it should be a dict.
I think it would be better to remove this line
Can you explain what this extra param is? Is it really used for?
This needs to be added to the `buildTarget` package in order to fix this issue.
should this be named something like `Bobility`?
Nit: we can remove the `PagedOptionalArrayMethod` here and just use the `FlattenedMethodAsyncCallSettings` above.
This is a bit weird to me. Why is `internal` not `secrets` here, but not `internal`?
Shouldn't this be `!!!;`?
Why do we need both methods?
Please add a type annotation for `Cluster`, and add a type to `.py`, as the module name `Cluster`, or something like that.
This is only used for testing purposes, so I don't think there's any need to check for it here?
This is a good place to put it here. The sync genesis block should only be triggered once.
@cra0zy - Does this look OK if you do a member member variable instead of a member? Is this a bug fix?
hmm, what is the difference between this and the above?
Should this be done in 2 different places?
This line can be removed, since the block size and the block size is already closed (which you're now passing in the array)
Please add a `using` tag
@deads2k i am not sure if we need this
I'd call the function `basestring` or `basestring_tuple`.
Could we remove these lines. They are only used in the first place.
I'm not sure why you are changing this. I don't think we should be doing anything with the `&&` here.
Not sure if we want to do more than just `md`, and then `str` with `dtypes.to_markdown()` (same for the other usage)
You can use `this.servers.isNotEmpty` here, as you're already checking the return value.
I don't see why this is necessary. The only difference between 0 is the correct value.
Please use `String#Equals(String, StringComparison)`
I think it's better to move the default value to the new `cert-dev` namespace.
Is it possible to use feature flag for a new feature? I would prefer to avoid any regressions.
I'm not sure that this is the right thing to do. This PR doesn't make any sense, and is still useful to get back a different PR.
Is `v1` the wrong name? If so I can't think of a reason this is a good idea.
I think `get_node_first_ancestor_of_type_and_its_child` should have a `python_node` argument. It's not the same thing.
I'm not sure we want to do these in this PR, but it seems a bit of a hack to have to pass in an `error` object, so it's not a good idea to change it in this PR.
I'm not sure why this is necessary. If the user has `None` and the user is not returning a `kill`, they should only be set when they are enabled.
Isn't this the correct type?
This should be removed.
Should we add more info for "debug" or "debug" to help ensure we are not logging the wrong message?
I would prefer to keep the lock. In theory, `1L` is the same type as `1L`.
We could probably use `List#clone` here.
The issue is about the enum type. I would just remove this enum type as it is no longer the case.
This line should be reverted.
Is this file used anywhere?
This is not needed anymore, right?
I think this should be a `const`
What about `public DispatchMethod(getDispatchMethod())` ? It would be better if the above method returns an empty string (e.g. `getDispatchMethod(getDispatchMethod(), context)`).
I would not change this to an array, it is not a blocker
what is this key key for?
why do we need to do that here and in the other places?
why was this added?
Is this necessary? I don't see it used anywhere
This is a private method, I think it should be moved to the `Proposal` class.
I think we need to do something with this. I don't know if we need it, but I think we should use `LOG.finest` instead.
I think it's better to have 1>&1 1> and then set it to 1>&1 1>
I'd like to see that this function is a function (not a function, it is a function) which can be confusing to have a function that can be used for the caller to call `window.getParameterByName` directly.
I don't think the "bublist" part is needed.
This seems like a reasonable default.
Why is the `adence_sys` part of the change needed?
again import order
Nit: this doesn't seem correct.
@kargakis I'm not sure what the `ZFS` is here for?
This is a breaking change and I'm assuming this will not work on the system?
I think it is better to make this `(string, spell_name)`. It's a little confusing. Maybe it should be `(string, spell_name)`. It would be nice to have some sort of implementation in `<amp-index>` to make it easier to understand why.
why is this one not the only one that uses it?
This file should be renamed.
This was a typo.
I don't know why the original code was added to this point, it was not doing anything else, but it is not used anywhere.
I think this would be a bit simpler if you have a single `b = bytes.Replace(b, []byte(scrubbedRootDir), -1)`.
This is the only change needed here.
Is this change related to the PR? I'm not 100% sure.
Do you think it's worth doing this in the future? If you want to add `//` to the exception, it would be easier to read.
Can you add a note that these tests are still working on master?
This should be done on `log.path`, but the `lln` is the default for `processing yaml`, so this will break on Windows.
I think we should remove this warning and make it easier to see when it was written. We should probably just make the warning message more clear.
I don't understand how this fixes #1717. @dvoytenko do you think that `logsDir` will break the existing behavior? Or is it a bug fix?
This is the main fix. We need to make sure that we don't support the configs in a different PR.
I think this is a bit confusing, since this is a test file and I'm not sure how it should be used.
We should probably also remove this.
I am not sure how this works with the "set" property. Do you have any concerns about this?
I think we should use `assert` here too
This is a bit weird to me, but I think the name `devices` would work better (or even `devices_add`)
What are the conflicts here? I think it's just a single `internalAMPContainerID` and the `internalID` that is passed in.
Should this be moved to a separate file instead of a file that would be used for all platforms?
`m.config.Path` is `nil` so this will not return an error.
I'm not sure what this means, is it really needed?
I think the original issue was fixed in the test cases.
I think it might make sense to move this to a common place in `bin/build` to match the other places where we have the `RunV` function. That way we can just do `bin/build/v1_apmyst` and `bin/v1_apmyst` where the `func Ubuntu` is created.
I don't think this is correct. The `CloudFormation` is used in the `cloudformation` package. I think the `CloudFormation` is still used here, so it can be removed.
Why does this need to change?
Should we also have a `elb` imports?
We should remove this file too.
Why is this necessary? It should be a `error.message` field, no?
Shouldn't this be `RepoRepo`?
Shouldn't this be in `aws_error` instead of in the `aws_sts_endpoint`?
I don't think this needs to be a static method. The interface is `fillObject()` and you could just call it with the `fill(n, "fill-only", "fill", "fillObject()"
Please don't add this field.
This test is a bit pointless now right? What's up with the `today` variable?
This seems unrelated, why is it necessary?
nit: I think we can remove the `catch` call here
`owner = {};` is a safe variable
Why the change from original?
I think this can be moved to a separate PR?
I think we should remove this code as it's no longer used
Whoops, did you try to remove the `IProgressStatus`? I think it should have been a breaking change
Is this used?
I would keep the `:load_time, :errors)` as it's not an attribute.
Why is this a regex regex regex regex regex regex, shouldn't it?
this should not be done in the code
This is the only place where you're calling this with `sprintf()` (or `p_buffer->errorText`) and it should be removed. (I'm wondering if it is possible to get rid of the `list()` check in `char_release()`.)
Why do we need a `Account`?
Please remove this
Should we use `BackendError` here? I'm assuming the error handling is a bit confusing to read.
I'd prefer a `switch` here to make it obvious what this function is and what it is doing, like `switch: "ephemeral"`
What's the rationale for removing the `ifaceConfigurationEnabled` param?
I'm not sure why this was removed?
This needs to be moved to the `get_info` function.
Is it possible for this exception to happen in a future PR?
this is a bit weird, I would expect it to work with the `C0111` in `tests/tests/test_tests.py` file
This is still a useful return value. I don't know why you changed it.
This seems like it would be better if the error code had to be added to the `#endif` statement above.
I think it might be better to use a constant here instead of `Services` and remove the `EdgeNodes` prefix (and the `Edge` constructor). The same for all these.
I think we can also make this `.jit.repo.version.instead of `.jit.repo.version.to.instead of `.gitignore`.
@bflad not, as it's a good idea, we're trying to remove the SNS and S3 here
This check seems to have been moved down into the new if statement, but I don't think the change is needed
I think the Proto version should be `1`
This test doesn't use use files, so it's not needed anymore.
Is this a BC break?
can't this just be `self.composite_root_resources = kwargs.get('composite_root_resources') or 'None'` since it's a default value?
This is a bit odd as it's only used by the `Action` method and it is not used anywhere else. Is it just me or is there a reason for this?
How do we know `Output` is an output?
@maestromac I'm not sure about these changes. I think we should be able to remove these.
I don't think this is needed, we should have it in the core, and have the new name, and the new name is "image"
Do we know if we want to use `/tmp/non-existing-dir-%d/process_test.pid` here? It will allow for the future to read the file.
This is a breaking API change, can you please update it to something like `public interface IMvxElement<TViewModel> where TViewModel : class, IMvxViewModel>`.
Do we really have a problem in the code that `provisioner` is not used?
I'm not sure we need this at all. We should not have it in the middle of the array.
@jridgewell any reason this is needed?
If you're using token here, you should probably use `g.useruser.is_active` here.
Why do we want to use the number of bytes here? I think this can be omitted.
It is better to use `req.Get()` instead of `m.Group("/branches",/branches)`
I think it's not necessary to add `VolatileValue` to `RandNum` and `RandNum`
We should also do the `if (attribute.Equals(default(...)` in the `else`
Do we still need this `else` branch?
This should be called `export`
This class does not contain any default implementation
this is the fix.
I am not sure if this should be here
why is this change needed?
"" -> "This is a potential potential bug". Should be "the user will need"
We should probably have a test for this.
I think you need to remove the path as well.
This is not a part of the public API, and I would suggest renaming to `toLowerCase` for clarity.
is there a constant in the top_count?
This seems like an odd place to put this?
This is going to be very slow if the error isn't present or if the `txError` is present. I'm not sure if that was intentional, though.
I'm not sure why this test fails without this change. The test is still testing the old `asList(isTrue(...).isTrue(... )`
I think we need to add a commit handling method in `validateNoConflicting']`
this import seems to be wrong..?
Wouldn't it make sense to add some validation to the span?
Is there a reason you need this instead of just passing `path`? This is a no-op, right?
This link link_to() does not exists.
Nit: this is not necessary. `filter` and `filter`.
I thought we already had issues with `W3C_MINIMIZE_WINDOW` and `W3C_window/maximize` being copied from `W3C_MINIMIZE_WINDOW`?
Do we need to do any changes to this file?
This test was a bug. I was thinking we're missing a test.
This is a bit ambiguous. What if we make the `ResponseCors` a field and have it return the correct value of the `list`?
I think this will break some tests.
Please, fix the indentation of these blank lines.
Why is the empty check removed now?
Is this the only place in the `src/parse` file where it's needed?
This is a breaking change and I don't think it makes sense for this property to be public. Can this be a breaking change?
Is this needed?
I'd suggest to put this in `clean_util_utils`
`name already exists and is not being deleted: %s`
@bzz Sorry I missed that before, this was a breaking change.
How do we know this is an existing hash? Is Devnet a valid url? I'm not sure.
Is this a different form or a different form than the other `vade` directory? If so, I think it's the right place for this, but it seems a little bit weird to me.
Isn't this variable the default?
@fowczarek Can you double check that this is a breaking change in the PR?
This change is not related to this PR, but we should be sure that this change is safe.
"" should not be executed on the caller thread"
please revert this, it was a mistake
again the line above this should be grouped with the other imports
I don't think we should remove this
This is a bug fix, right?
Is this needed?
Why does this change? Is this to avoid unexpected side effect?
Should the check for `if` instead of `if`?
Why did you remove this?
I think this is a little bit overkill. I think the caller function will need to return a copy/paste error.
Please don't use spaces between parameters.
This is a good idea, but it seems like the `.gitignore` file can change as part of that PR
the default value is 0.
We can remove the false check here
why not just use the `c.Data["CASSnapshot"]` variable?
This should be `onUser` and `onUserStatus`.
I wonder why we need BlockTree here
This is the only thing we should check the service in the service, and if not, should the user set this to `service.NewWebAPI(ctx, ds, sls, alususususususususususususususususususususususususus
This should be removed now, right?
I'm not sure if you should change the logic to be `include/x-amz-server`
I'd like this to be moved to another class. The reason we are not using it to create `priority.PriorityContent` is to keep it as is and just have a constant.
Why do we need to check this is not `password`?
Is this an unrelated change?
What is this? Can we just remove it?
Nit: `envconfig` is not a struct - so I'd call it `config.TYPE`
Is this the only place where we want to use the new `IdentityCheck`?
`!=true)` seems a little out-of-place here
If you use `errors.MarketAddr()`, you don't need to pass in the input as a parameter.
this does not make sense
Unnecessary spacing detected.<br>Put one space between the method name and the first argument.
This is already in the `SingleLocationTuple`. Is that really necessary?
This test is still testing what it should do. We should test the content of the test and also test the content of the "isEmpty" test if the "isEmpty" doesn't exist.
Why not `<pierre>,@awhetter.com>`?
@tgamblin Do you understand why we need this?
This is not the only usage of this PR, but it seems that the "session_TELEMETRY_HOST" is used for the "session_TELEMETRY" part and not used for the "opentelemetryNetworkHost" part of the name. The same below is used for the "return" part of the "non-Default" one.
I don't think you need to do this. You can get rid of this function.
Not really sure about that.
This code is not very helpful to read. The only reason we can't use a new block (and the code is not really needed).
this is not a pointer now, right?
We can probably do some checks in the code that we want to do so.
I'm not sure if this is really needed?
I think this should be `createaction(GeckoSession.SelectionActionDelegate.ACTION_UNSELECT)`
This is an improvement.
We should not use the `ContextAware` interface since that is the same as `Product`
Why not use `ctx.User` directly here?
I don't think that we should change the name, so I don't think we'll have to do anything with this.
I don't think we should default to null. `(` -> `(`
Is this used anywhere?
This should be moved to `circularjson`
This is a good candidate for the validator to be able to use an explicit `MergeState` variable here and the `MergeState` variable.
This should not be necessary. The directory name was not a directory" or something.
Is this still needed for version 0.6.3?
What's the reasoning for the `master` here?
should be count or null?
Shouldn't the other field just be `make_Expanded_VIOLATION` here?
I would use `https://*:80/"` here and below.
The last two of the query parameters seem very similar to the same thing. The other two arguments are the same.
This should be set to NULL, right?
I think we need to do something like: `x.order.blank? || x.order == :random ? Kernel.rand(list.size) : 1`
@xuehui1991 I think this is fine for me but it's not a big deal.
Nit: I think this should be `config:string;"`.
I'd prefer to have `NewInt` and `New ErrNotEnoughBalance` here.
This could just be `Optional<FieldMetrics<?>>`
I'd suggest to have a test that passes with a "ENGINE-16002" exception and just pass in the error to the message and the message is different. That way you can test the message and not just ignore the error message if you don't want to be aware of it.
This could be removed.
This file can be deleted.
Shouldn't the block be removed as well?
This is an unrelated change.
I think we should remove these unnecessary changes as they are in a separate PR. I'm also not sure if we can remove these from here...
I think the name of the flag could be a little misleading, it's just a little bit confusing. What about `crash_test`?
I think it's better to use an interface to pass the request body and then use a different name.
What's the thinking behind adding an additional context of permissions here?
this is wrong, the first one should be the same, and the second one should be the last one
This should be an empty list (and it is never an empty list) - which is a bad idea.
I think you should use k8s version import
The integration tests fail if `react` is not `./pants lint`, so we have to change the integration tests.
@mraible was this intentional?
I believe this will break existing code base for the `totalFileCount` property.
Why is this `nextEpoch bool`? Why do we need it?
This should be `final` I think. Also, I think we should use a different type than `entity` here. The same is true for `getRow` in `getParser`.
Shouldn't these also be constexpr unsigned bulk_push_cost_limit?
This is the main change I've made. The previous behavior is to use the `isID` method in the type of `MessageFromTunnel` instead of using the same `MessageFromTunnel` method.
This is a weird thing, but I would prefer if we used the default value here instead of `null` or `null` (which would be the right default for `0`).
I think this should be an `AtomicInteger` object instead of a `id` object. I think we can use the `id` object directly.
I think this is a good change as I can't tell from this. If this is a `opTimeout` we should have to do it for the `libkbfs-ConfigLocal`.
Isn't this the same as the one for raCtx?
This seems to be a very odd place to put it in the middle?
I don't understand why you are removing it?
this test was only here before
I think this method should be removed and this method is no longer relevant.
The `a-z0-9\/\:_\-\*\[\` seems to work fine here.
Not sure why you need this `else` here
I'm not really sure what this should be ran into. I'm guessing we can't do it for `json` and `recording_msid` as it's a special case?
please also change the size of this parameter
Isn't this the same as the last 2nd argument?
can we also update all of the `is_no_SIZE()` calls in this PR too?
I think this would be better done in `m_userDefinedId(0)` and `m_isAlive(true)` for consistency with other methods like this: `m_userDefinedId(0)`
This is a duplicate of the previous check, I believe.
I think we could have done something similar in `pkg/cmd/go.go` for these, but we should do it in a follow up PR to avoid adding them.
We should also update the `format` prefix to use `format` here, and change the signature to use a more specific name
please use TRUE instead of TRUE
I'd like the idea of the inf/signed/signed-or-replace a `serialize` method, to avoid having to add the inf/signed-or-replace "list" code.
I would prefer we have an enum instead of a string.
This change is unrelated to the fix, but it's unrelated to this PR.
This should be the same as the one above.
Why the change of this file?
Is the `strstr` check necessary here?
I'm not 100% sure what `bool` is here, but `string|bool` is the default value for `ObjectObject` - which is a boolean flag.
why did you change this?
Why change the error message?
@mattcaswell, the issue here is that this won't work, as it's the same as the "if" statement above. Is this the correct error? Or is this "else" ?
@pgavlin Thanks for cleaning this up
Please remove the empty line here.
Why are we checking for this? Isn't the `else if` above guaranteed to be `null`?
I think this is not the most appropriate approach. You could just do a simple `notifyObjectDeletion(self)` in the `__del__` and check `if self.notifyObjectDeletion(self)`.
This will not fail. `r.Config.Logger.Log(fmt.Sprintf(...))`
This looks wrong, why are we using `["example answer"]` instead of passing an empty string here?
@matt-gardner, this line was incorrect as we discussed in #5341.
I think this can be reverted.
I would prefer a separate method `GetContext`
why are we using a data type here? we should use the `Rewards` method in the other parts of the code.
should we move this constant from `org.mule.runtime.module.runtime.module.module.runtime.module.."` to `org.mule.runtime.module.."` ?
nit: this should be `if(*name == '_') { name}`, otherwise this will fail.
Should we add a TODO here to make sure this is only used once and then we don't have to worry about it when this is run?
I don't think we need this, as we are not using the default password.
Why are we changing the type of `_tree` to use the new `Commit` implementation?
Shouldn't this be `Optional.convertconvert(ConnectionAbortedException)` ?
We need to move the check to the file that is created.
Is this needed?
I think this can be removed now that the ``self.bucket.connection`` is used to set up the ``Class_storage``.
Should be `StringUtils.isBlank() ? "script";`
I think we can just change the return type to `keybase region.join`.
The other way to check if the rawPlayerName is nullable is to avoid a "null" check. I'm not sure if the other way is to check for this check is that if you want it to be null and pass in the 'add' method.
Is this necessary?
I don't understand the purpose of these changes.
We should also update the `XHTML Test Page` in case that the user doesn't want to be aware of the `on_element` attribute, right? (just to check the `XHTML` attribute in the `on_element_to_be_unclickable` method)
Why is this function needed?
This should be a `EmitEvent`.
Rails/DynamicFindBy: Use find_by instead of dynamic find_by.
This one is missing the `Post` method
`__filename__` may be a better name
I think this is a breaking change for the tests. @juanvallejo fyi, this is the way to go to `app_name` and `app_name` in a container.
This is a very confusing method name. Why don't we just use `/home/weavewait`?
@tgamblin This was the bug before. The only change we were passing the default values.
I think we should be able to remove the `ThreadUnsafe` from the constructor, otherwise it will be called multiple times.
`configPath` and `path` are not used anymore, and `config-path` is only used in the path, and should not be removed.
is ok ok ok? why not use ok?
Can we make these `short.Int16`s instead of this?
is this necessary?
Can you make sure `Git` is the last repo? It's not a huge, but I guess it's not an issue.
I would suggest `\A` (similarly `\A`).
I think it might be a good idea to use `LOGGER` as the message is already part of `warning`, since it has a reason to use `LOGGER` directly. I'm pretty sure this is a commonly used API and will break things later.
why is it changed? I think we are still missing a `json` here
I would suggest using `status_FINISHING_undefined` as the default.
Why did this change? It looks like the error is being handled here.
This looks a little strange to me. I don't think we need a new function here.
Why do we need a new config param here?
I'd prefer to have this as a static method, as it is not used anywhere else and will be easier to understand why it's needed to pass the new param.
This should be `reGridFSStreamError` instead of `jobjob`
Should be "clientset"
It looks like the interface is not used. It's an interface. It is an interface, so I'd recommend not make this interface public
can we put this in a `# type: ignore`? It seems weird to add a `list_require` in `Clouds` to the `list_require` block, and maybe just have an `list_require` in the `Clouds` block?
You can use .key_function as the default here
I think the `.array()` method can just be extracted to the print statement, since it's not doing that.
this should not be needed. We should have the IReadOnlyDbProvider passed through from here and not from the configuration.
I don't think you want to add an 'l' parameter here to be able to remove the 'n' parameter from the string.
Should this assert? I think it is not needed
This is an implementation detail, not a `Location` object, not a `string`.
If we're using this in other places can we fix the formatting here?
Why do you need the cast?
this should be `if (num_raw >> 24 == 0xffffff) ...`
I don't think it's a good idea to test the `.then()` instead of `.then()`
This is not the right fix. This should be reverted.
Should we have these in an `is_no_content` and `is_no_content` defined here?
remove empty line
Were this not happening?
This is a very confusing change. How do we get the error when the bodyConverter is not null?
nit: remove extra empty line
nit: I would prefer to keep `isort` and set `true` in the default value.
please print the `time_backward + 1e-3 * 1e3 / loop_num` route, otherwise it will break people's code. (The `time_naive_forward` part has been updated)
@deads2k any reason you changed this?
do we want to make a `private` getter here?
Can we also remove the `writeThrough` prefix?
It is better to just return `self.num_classes` instead of `self.num_classes.size()`, which is the default value.
This is a very minor thing, but it would be nice if the batch is `undefined`. It seems like we're only doing it once in the `AfterSend` method.
This can probably just be `options.ThreadCount = 4;`
Is this an accidental addition of a bug?
This is the one we're using for the nil checks. Isn't it better to just do `self.can_change_org?` instead of `self.org.id.to_s`? Then we will have to call `super(new_org_id)`, and the code below also needs to call `puts "$$$$ new_org_id`.
@KonajuGames @harikrishna-patnala What do you think of using a different name for YCbCr? Is this a problem?
So it is not related to the rest of this change. If the user changes the order, and the other ones are not using the `job_failed` key?
Should we just change this to: `newCreativeNode.type = 'progress' && !i` and let the user know about `newProps.value`?
Can you just make sure the C++ header is also in Sandcastle, i.e. `#include "caffe/oo`?
I think we should just call `finest` instead of calling `info`, as this is the logging statement in `info.info`.
Can we add a description here that this will not be used in this PR?
This is a duplicate of line 467.
We should add this to the `namespace` below, to make sure that it is a `const` at the very end of the file
This is the main code. I'd expect that you can use `abs` and `(key, value)` directly, but I can add a TODO to fix that.
This should use a constant.
Why did you remove this and the other ones?
why not using a dict?
I think we can just remove these `_test_test` method altogether.
Is this supposed to be here? It seems like it could be moved outside the `check_output()` function, since that is only called when the output is `True` (and the `if` clause above).
should we make this a private method?
I would prefer to see this as a separate PR to make it easier to understand why we need a different fix
Shouldn't the whole try/catch and return the result instead?
I think you can just do `@products = topic.products.ordered` instead of `@episode.topics` here
Wouldn't this break compatibility in the middle of the tree? Is it a bug?
The other test that checks if the `repoModel.ModelTypes.First` is changed, but the `name` is not defined.
@franckc @kalefranz should we be adding a new option here for this?
This should be in a separate PR, and I think it is better to move it to a separate PR.
Why is that necessary?
This should be a separate check for a non-empty string.
I think you also need to remove the `resBody` and `resBody` for both `10` and `resBody`.
This is the only place I can see this used by a user, but I think this should be moved down to a different commit, and it's better to have it here as well?
This is a bit confusing, as we have a test for that, and we have the same test for it
What if you just made the original method a bit more descriptive?
Why this change? Is this related to the PR?
You need to do a `static` before calling this.
We should probably change the method name to match the API for consistency.
Can you please add a `TODO(sh.if '-z $GOMAXPROCS', ...))` block above?
why not use the `if` as above?
I think the check for the `pendingRequest.configuration.remoteHost` is always defined here, right?
I think `import lodash from 'lodash'` is redundant
is this the same as the one in `WebDriver::SYS_init.c`?
I think the `geckoSessionSettings` and `Telemetry` imports are the same, so we should avoid this change.
maybe move to `GAUNTLET_MAP_meta`? it's just used in other tests
This should be the `.eslint` since there are multiple projects for the same application, but it's a bit weird.
This needs to be a `panic("global option")`
isn't there a more specific check we can do here? if focusObject is null, we can do something like `if focusObject is Y`.
Can we have an issue to track this?
Hmm, this is a breaking change, but should we also make sure it's only a single method?
Use the new Ruby 1.9 hash syntax.
Should we also check that `iJs` is a non-empty object?
@saghul is this change ok?
Please remove the argument from the `addDistanceEffect` method.
Please add a check for the `user-loyalty` param
Do we need this in this PR?
Is there any way that we should throw an `Exception` instead of just catching exception?
This doesn't have to be in this PR.
`fn.MAX_equals(DT[:, f.A.max())` will do the trick
Why do you need the `UnqualifiedName` field here?
We should use the existing helper `isinstance` attribute here.
`fillObject`. I think we should use `fill` instead of `fillObject`.
I don't think it's necessary to add this. It is not related to the PR. @kennknowles do you know if it's worth considering how it is doing it?
This line is useless.
This file is used only in `config.Join`, which is a bit confusing. What do you think about just calling `.Join(baseURL, URL)`?
Isn't this `type` statement sufficient?
We should probably be consistent about the version here.
Is this still used for anything?
I think this should use the `CommonMetrics` type instead, as in the future it's more clear that it's the same type.
I would prefer we use `final` instead of `final`
I thought the `dropTable` was already called by the 10 seconds, so this is not really needed.
Could you please explain why this is needed? It seems a bit strange that the `not_to have_content` and other occurrences seem to have the same meaning.
Why the change to the std::numeric_limits?
This change seems to be a breaking change. Can you please rebase?
please, pass in an int instead of dilation_data
This is not the only place where the test runs. This is used to create a test with a test failure. The `[NotNullWhen(true)]` on the next line is the only place where the tests are running.
Why do you need to do this? It's already in the `ckpt_dir`
Why are these TODOs?
this import should go to the top of the file and not the other changes.
Just a thought, I had to remove thept-get install -y unzip git from thept-get install -y unzip git from thept-get install -y unzip git from thept-get install -y unzip git from thept-get install -y unzip git from thept-get install -y unzip git. Is that intentional?
This will be true if `true` is true.
I wonder if we should just have a method for that instead of adding new code here.
This is not related to this issue but I think I would prefer to keep all of these `Collections.subSequenceRangeCheck` calls under `subSequenceRangeCheck`.
I don't think this is correct. It will be non-zero. We need to make sure that `registry` is null.
Not related to this PR, but I think we should just remove these lines.
We should use an empty string here.
This should be a separate PR
Is this used anywhere?
We'll want to consider adding a unique index for the controller to enable/disable the controller. This controller will fail if we ever want to enable/disable the controller as a controller. What do you say?
I think this should be a `&` instead of a `&`
I'd just use `.replace('_', escape_char + '_')` here to get rid of all the `.replace('_', ...)`.
The same here. This should be done in a separate PR
this seems like it should be moved outside the `if` block?
Why do you need the `config_map` here? Is that really just the case that the output is the only only valid output?
if we're only exposing this value in the middle of the fee, we could add a check here for the fee, right?
I think it would be cleaner to move this block of code to a new function.
This should also be moved inside the `if len(w) < 2` block.
I think this should be `return (output->format == format)`
Let's use `from databricks.koalas importmode` here. It's not used anymore.
I don't think this check is needed
I think this should also be removed.
If we don't want this to be true in the `aws/v2/` package, we could set this to `0` in `aws/v2/` but the `aws/v1/` version is `0` as well.
this is a bit confusing, how about "Browse mode mode mode to interact with controls in documents: The mode that presents text in a flat representation that can be navigated"
This is a bit hard to understand - the menu menu item was not being created, so we don't have to worry about that.
I think it should be `requestCode == SPRequestHandler.IDP_REQUEST_CODE`, right?
is this the right place to do this?
This was added because the email_catalog_path was not working before.
This seems a little weird. Why would we want to remove the first call and not create a new one?
I wonder if we can just use the constant in the message instead of using a simple field.
Do we need to add a note about it that it is only called when `block` is enabled in order for this container to transition?
I'm curious, why `AttributeError` is here?
Should we also update the `DisableHttpGit        ` field to include all the tests we have in the `api.go`?
hum, I didn't know you could do that
Not really related but you can use a single string here instead of the string `out`.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
Please use `useCallback()` and `ArrayInProgress` methods. It's not clear what the `using` means.
Why do we need to pass the `CStorPool` into this method, and then just pass it into `nil`?
This change should be reverted as well
Is the idea here to check that the result has a valid path to the function? If it's an error, we could check it again in the file that the result is not. I'd like to see a way to get rid of this if statement.
I think this line can be removed.
Why does this error get called on a new function?
Does this need a rebase?
This is a breaking change.
I think it's still not a bad idea to add it in the `if` statement, since that's how you're trying to fix the issue. But I don't think it is correct to add it in the code, as it's a bug fix.
How about we just make this `finally`?
Why did you remove the extra spaces here?
Nit: `ast_error_frame()` is not used at all for the function. Maybe it is better to remove the `read_type` arg?
Why is this needed?
You should be able to use the `nameof` method instead, as it's a `Function`.
I would not add the config parameter here, just not sure what is needed
Can this be moved to the common place in this file?
What's the reason for this?
@saghul should we have some concerns about why we need to change the name of this value here?
This should be a `Getwd`, not a `Path`.
Should not use `import inu.harvard.iq.dataverse.*;`
@jridgewell I'm not sure we should add this to the interface, as the only thing we want is to add is `outboundservice`, and the only thing we want to keep is `yarpc.failed` to `ybances`, which would allow you to use it.
I'm not sure if this is the correct way to go about that. I think we should have a helper for this and link it here, as this will result in an error in feedback mode.
Can you remove this and change the variable names to be final? (and keep the fields private, just for the sake of consistency?)
Should we add a guard clause here to make sure the token is still available?
@franz1981 this was the fix.
Do we need the `as the source for this rule`?
I'm not sure if this is the right way to do it, but it is not a good idea to change the test in this function. I don't think that is a good way to fix it. It's fine if you do it this way, since it's not really a problem.
Same here, let's not use the new one
This was a `var methodHEAD = "HEAD"` so I think it's clearer.
Please remove this, it is not used
I think we should remove the console.log call here.
Why not `volatile` as above?
Use the new Ruby 1.9 hash syntax.
The reason I'm not convinced about the `delete` method is that if someone went to using `to`, it will be easier to get the `<something>` instance, and it will be hard to see how to fix this. The code below seems to have been doing the right thing, I'm not sure we need to do any changes in the PR, but if we really don't want to keep it in mind.
This is a breaking change and is not really related, but I'm not sure if it is a good idea to have it as a param.
Is this change related to the rest of the PR?
can we also rename the package to `UpdateLabels`?
Should we make sure this is the default?
Well, you'd just make this `Topic already exists with different tags`, but you'd want to make it a `default_string='InvalidParameter'`.
Can you add this doc block to the doc block?
I think the `model_cfg` can be removed, as we already know that it is used for both a dict and an int.
this is not really needed
This can be removed.
please, add the log message in the log message
You should probably update the docs to use `cssutils` to make it less readable.
Please make the `imgpress` package private
I'm not very familiar with this. What is the difference in here?
This spec doesn't seem to have anything to do with the `user` key
This is not needed anymore, right?
would it make sense to have a test for the new test case?
I'm not sure if this was a bug in master
Please add the `$dateTime` property to this interface and `SegmentId` methods to avoid unnecessary changes in the future.
Should we be adding the `extend` here?
Why not `metav1`?
why is this port being removed?
I think you can remove this method entirely, but this is a bit of a reformat. It's also just used to be part of a public API.
why is this needed?
Why is this needed?
This should be just "If "\*"
I think it would be more consistent to use the `format_realm` from the original one.
Why is this value necessary?
I'm not very familiar with this, but I'm assuming this is going to break things during the build. But it seems like it's fine to check here.
Actually, `not_update` doesn't have a `not_` in the output.
I think we need a more specific type for the sh, so we can use the `short` as a part of the `JaegerTag::isAll` API that will do.
Shouldn't this be `HttpUtilities.ValidateHostHeader(host));`?
I think we should make this a single string with an explicit explicit default.
This is not a good place to remove this. I think the code is still correct here. The code is not in the `parentNode`. The node is already in `removeChild` function.
I think this would be a breaking change as it's not just testing `from` statements. I think we should be consistent and use `in` as the name for the dictionary.
Those need to be updated to use `<timezone>`.
This is a bit weird, can't you just return `0` instead?
I think the code here should be changed as well.
This interface should be added in the base class.
We need to pass a `client.V(4)` here as well.
This is the only one that is used to know if the field was empty, and we don't have to check if the field exists.
Hmm. What does this do exactly?
I think it would be good to also add these new fields here.
I don't understand what's going on here. Is it possible to set a local copy of the original code? I think this is a very high level of issue.
I'd rather not call this `PrivatePubKeys`. The rest of this file should be the same. Also, the function should be renamed.
The original code was correct, but we should not change the original `today` parameter to not break existing tests. I think it would be better if you removed this line. The code was only needed at first, but I guess it was not needed.
I think it's better to have `user.Current()` return `nil` here.
This does not need the `attribute` argument - it just checks for `invoke`.
This check is not needed because it is already done in the constructor
Please don't add new space at the end.
@KonajuGames - How is this related?
I think this should be `me`
remove empty line
I'd prefer to have a test for this
The formatting of these changes seems unnecessary. The rest of the changes are a little bit long.
I think you can remove this variable and use a `IEnumerable`.
Why is the parameter not removed?
This change doesn't seem to be related with this change?
Why do we need this change? It's not related to the PR.
I think the original code was correct. It was only removed in master.
Please use `getWeight(storeInbox)` instead.
Why is this needed here? Is this not enough anymore?
This is a breaking change as we are using the `vagrant` API. We should probably use a `vagrant.group(:` here and then do the same thing in every single place.
I don't know if this is really correct, but I can't see where it is used, so maybe it is a bit confusing. How would I ever call these strings inside of `semanal`? I can see that `semanal` and then `semanal-desired` and the `SCM_url`? Or maybe just call them `SCM_url` or something like that instead of having to do something like this.
I don't think this method should be called `Customize` because we don't really need to close the method. We should be able to get rid of it if you don't.
It looks to me like this logic is not used anymore.
Is there a chance that the history service is always an history?
There is no need for the `aria-haspopup` attribute.
I think this is not correct, we have a chance of a user-passing code to set a user-pass code in a user-pass code. This is the only place where `d_r_is_avx512_code_in_use()` is used, and should be handled by `setup()`.
This is a bit hard to follow. I'd rather have a separate issue for this, but it seems like the `_New_GlobalCommit` is still a `_New_GlobalCommit`, since the value is not set in the config file and we should not be using it in every place. The code can still be refactored in the future.
I would prefer to keep the `sync.RWMutex` as it is a no-op, since it's a public API
Is it possible to have an argument for the `encoding_type` argument? If we need this for other variants, we could consider moving this call to a dedicated method to make it more clear that it is a private method. Also, I think it's fine to just have it be an `reset` method, and have the `encoding_type` be a class, which is not used in this function.
Why the license?
This is a breaking change for now. We should be able to use `TaskTask.Term` to avoid the `TaskTask` instance in the `CancellationToken` API. I don't think we want to have a better name.
Why don't we just remove it?
Looks like the `private` can be removed as it is no longer used in this class
is there a test for this?
I think you need to add this import
This is now being used by `setUserClient` and `setUserClient` (see the one for `setUserClient::init`) and the other for the `setUserClient` method.
I'd prefer `s.state.WaitForBuiltTarget(l, pkgLabel)`, but if it's not there then it can be simplified to just `s.Get(type=l)` to make it more obvious what this field actually is.
Why are we removing this?
I think it would be better to move this to the `if ($addadd()) {` block, and remove the `if ($addadd()) {` block above.
Hmmm... this is a breaking change and we should log it as well.
Why is this necessary?
The `gentleVerifyToken` controllers is not needed any more.
Is the descriptions here intended?
Trailing whitespace detected.
I don't think it's necessary to include the `@cmd_options` in the list (in the case the user doesn't have a `default: normal`).
What do you think of changing this name? I don't think it's a good idea to include the version.
Please rename this to "stopCasting"
Why do we need to check this?
This should be moved to a separate `if`.
This looks like it should be in a different PR.
This is a good change. The code is now in `build_options()` instead.
I'm curious about the explicit "path" here. Why the "path" in "path" ? I don't see why it's necessary, it is a small change of the code
This is a very minor detail.
Hmm this seems like it's a bug in master
Do you need to create an issue for that?
Remove this.
I think it will be better to use the same constant here. And also, I'd prefer to just use the `disable_snapshot_annotations = true` helper in the code to avoid the need for this config
What do you think about moving this to a constant, and then doing it in the controller that you have to add a new one like `validate_a_with_time_block`?
@xuehui1991 Is it possible that we are doing the same in the old `sig[0]`? I'm not sure it's possible for some `064x` target to be 0?
I'm not really happy about adding this method in this PR. Can you explain how this is used and why it is not related to the change in the commit?
This is a bit of an awkward name. It's an error.
Why this change? The `resolve '%s'"` part of the exception is a bit misleading, and it looks like it should be fine.
This should be a `String#format`.
I think this is the only change I can see, the `except`/`except` should not be in this `try` block.
I think this should be `!a:: tag`, not `preferred`
This is not right. Is it correct? Is that a problem?
Do we need `_object_path` here? (Or do we want to make sure that we're not passing the path path to the file?)
This is not a connection.
What about `accounts: select( STORE_NAME ).getAccounts() );` ?
Can this be `self.kubernetes_config.max_retrials`? The naming `kubernetes_config.max_retrials` is more readable, but I don't know if it is worth it, but I don't feel strongly either way.
I think we can just change this to `if size := chunk.Size(); size >= biggestSize {`.
This is the one we wanted to avoid. We have a way to do it for a user's perspective to know if the user has a different set of objects or not. The rest is better.
I think the `pkg//#{.go` file should be added in `pkg//#{.go` too.
Should this `GVariant` be moved inside the `GVariant` class? (And I've added it here for a reason)
I think you need a return here
I'm not sure we really need `OnServers` here?
I don't think we should add this here.
I think this is a leftover from the previous refactoring. I would have just kept it as `raise Exception(jobInfo.workerCompletionMsg)`
Is this the right place for these? I'm not 100% sure if this is a real problem, and it's not a real problem.
Can you use `isNullOrEmpty( $cartItem->getQuantity() > $cartItem->getQuantity())` instead?
Why this change? `bytePassword` is already in `lib/byte` right?
This can be simplified to something like `getAt` and `getAt`, but if you're not mistaken, you should use an integer of `getAt`, like L388.
remove empty line.
I'm a little worried about this. The `float` should be an `int`. I'm not sure if `a` is necessary in this case. Maybe `a: A, * * A, * int` can be a `float` and not a `int`? (And then, I'd be happy with the `float` as the last thing in this PR).
This is not related to the rest of the PR.
Shouldn't we also update the test in `col`?
why is there no `transports` in these columns?
I don't think we should be removing this.
Is this include needed?
This is a bug, we should probably not do this.
why did this ever get called?
This method should also be renamed to `GetDefaultVersion` (or something similar) to `GetDefaultVersion`
Is this the right answer to the URL vs. the URL?
Why not use `<` instead of `<` here?
I think this should be `common.SettleDeposit(req explorer.SettleDepositResponse, err error)`
This should be `$user`.
I would prefer a more explicit default value for 0, so that it's easier to change in the future.
I am not sure if this is a problem.
This could have been `public`
Can we add an `isDebugEnabled` check here to avoid unnecessary work in the future?
@cramforce is this a breaking change?
@jridgewell can we have a better idea about this?
I'd use the new one `is2xxSuccessful` to get the `.onStatus` method, that way we can make sure we don't have any better name.
Do you think it is worth it to remove all the logic from 'public BytesRef' to 'public BytesRef' in this PR?
Why do we need to test that?
what is the reason for the `unsupported_read_mode`?
I would suggest removing all of these `notification_service_factory_class`, which we already know the state of the state of the state.
Why does this need to be public?
I don't think this `cidSet` should be a warning since it is being used as a parameter to the user.
Is the encoding not supported? If so, I'd recommend using the `invalid` version here.
Use the new Ruby 1.9 hash syntax.
Is this used anywhere?
"enable brave" sounds better to me, and have some options not to start in the name of the option.
What does "Unless there is a point to SkylineTester" mean?
Is this the only one that is doing before we do it for 5.0?
@sivabalan Should we keep it for now?
nit: this can be simplified to `checkSimpleWord`
This should be `<p>In the event a condition returns a Promise, the polling loop will wait for the wait condition.`
you'll need to update the corresponding `purchase-show` controller controller to use the existing `pages#show` controller
This seems a bit redundant and I'm not sure about the name of this change
I think this should be `if (iv_state) { return false; }`
I think we need to remove this and remove it for `no_crash` as well.
Is this a bug fix?
This is a pretty much a breaking change, and could be simplified to `Locale.list(languages)`
I don't think this is right. If the function is called with a `removeChild` function, why not just remove it as a separate function?
Wouldn't `errors.New()` be more appropriate here?
we should probably add something like this to make clear this is not the place for the format
This will be `--tty` as an option to enable things like `1.2.0`.
I don't think we want to change the default to be set here.
This is a breaking change. The `reindex()` function is not really needed, as `const` is already a list.
I think you should check if the element has no output. If you do this, then you should only set this when `this` is set to true.
How about `LinkedRecord.getProperty` instead?
This is the only place where I can use the name of the system roles. I'm not a fan of having this method in the `SYSTEM_ROLES`, and I don't think we need the name of that roles.
Shouldn't this happen in `getModeOperationException()`?
Can you please use `IN_text` here and everywhere in `IN_text`?
Can we have the same in `couldnt this happening as the check is in `couldnt we just use a constant `servicePortMap` here and not just check for the error?
Shouldn't `std::lock_guard` be a `guard<std::mutex>`?
same thing here - we can just set up the block value to zero
"The default number of space can be created"
Why are these changes required?
Why is this removed?
Nit: This import should be above the group below.
Shouldn't this be the last time we createOrder?
This import should be unused.
i think the name `GetVolumeCreationDisabled` is misleading here
I'm curious why you needed the variable for the number of places in the other places...
I don't think we need to keep `exit(0)` here - it's a little hard to follow.
I'd be tempted to keep this consistent with the other `getRequestId()` calls below.
I'm not sure how I feel about the better solution, but we might want to consider that.
please revert this change
I think we can get rid of this, and just change `Uh ...` to `Uh ...` and remove this.
Is it necessary to add a return type here?
I think you can just remove `prefSocksProxy port` and `GlobalSocksProxy port` from the name and use the variable `prefProxyPort`.
`ExplicitValues.CollisionEnergy` is not always `true`.
Why not just `if isinstance(it1, DynamicMap, HoloMap)`?
I'd rather check the value of _extract_filters, that the context is not always a list
Should we use the error message?
This is the only one that uses it, but is no longer needed
This check is redundant as we have already added a check in `STACK_TRACE`.
This should be a private method.
shouldn't this be a class field?
What is the issue with this?
I'm not sure why you added this, but it seems like it would be a good idea to keep the service service service as an icon to not add any new username
Why not just call the `List<LoggingRule> LoggingRules.Add(rule)` directly from `GetLoggingRulesThreadSafe()`?
Is this an unrelated bug fix? What if the user doesn't specify a single key?
I'm not sure that the `./p2` prefix will work, but if you do that it should be `allow_not_config`.
Looks like `_UnknownUrlSchemePolicy` is an undesired name for this, and `mod` could be used for other types in the future. I think this should be `mod[str, typing.Any]`. Otherwise it could be a follow-up PR.
Is `Array` a normal `Object` object? I think we can remove `Object` and `Object` here.
Unrelated to this PR, but I think it's better to just make this public since it's not a public method.
This will not be an error.
This is not correct. `return (value / base) == 0`, but the value is not `1`.
should this be `validates :username, format:` and `URL_FORMAT` in the end of the line?
@smarterclayton is this correct?
i'm not a fan of adding this parameter to `userv1.Probe`. I don't understand why we have this in the first place. Can we make this change in a follow up PR, instead of making it an issue?
Should this be a bool instead of a verb?
This is the only change in this PR. I'm not sure how this change fixes the issue, but it was trying to reduce the number of changes in this file.
I was going to say why we need to load sqlite plugin if not needed.
This should be `mutex_num_simd_saved()` since the benchmark method is also used for the `m` loop.
@bparees I'm not sure this is the correct term. What does this do?
This line was not used.
We should not be testing the whole block of the `log.V` in this case. If this is an issue that is no longer valid, this should be removed.
It's a bit odd to use the `limitsExceeded` instead, but I think we should be more familiar with the code in `limitsExceeded.cs`
Do you need this variable?
How about adding a helper method that returns the intellij `leaderprops` and then calling methods with `cloud.BASE_URL_PROP`? Then we can get rid of the `BASE_URL_PROP` and just have that constant in the method.
I'm not sure if it makes sense to add a check here for `current_user.identifier_for` and `current_user.surname`
I don't think this import should be used.
We don't need this field, and can be moved into a function like `isReady` or `lang3`.
Should be `getContentDescriptionContentMethod`
I don't understand the point of this change
Is this used somewhere?
Why is this needed? I think they are used in the chain.
I don't think it's necessary to wrap this string with a list of strings.
This is a bit of a hack. What do you think about adding it to all the `deleteRecursive` package?
why is the logger needed? is it used in the code?
I would move this check to the `api_versions` method, because we don't have to call the check on line 138
Please remove the `pick` annotation on `enzyme-adapter-react-16` and replace it with `pick-lock`.
why not just `base.backward(r, r.WithContext, "")`?
Why not just use `is null`. It's a more common check.
Is this necessary? I don't see why you are doing this in the `@pinwheel`
I think you can remove this import now
I don't see the idea that this change should be part of the PR.
You could do `getAccounts = []`, too.
Is it necessary?
This is only called in a single file, so can be removed.
Is the expectation for these values still necessary?
I think this should be called `AmpDocCommand`
Is it worth logging this in the right place?
This check will be redundant now, since `config_file` is a directory.
Is this used by the other tests? If so, could you also add it into this PR.
What happens if you use `Func<ITransactionProcessor, IRewardCalculator> rewardCalculatorFactory` instead?
Is it really necessary?
`getDefaults` should be called in the same method, not here.
I am not sure if this is correct or not
Metrics/LineLength: Line is too long. [97/80]
Why do we need to do the IOException here?
Please revert these changes.
This should be `const ( // Only values for Linux 3.14 and later are listed here)`
Don't you have any clue on this?
We can also remove 15000, it's the only one that's been referenced.
I think it would be better if the addon is not a subDirs, then that's the only way to get an existing file, and we could also just get the `.getRunningAddons()` calls below. I think it would make sense to have a test with an `if not os.path.relpath(curSourceDir,fromPath) == "addons": "addons"` check. That way the file wouldn't be able to just be the current file. This would be more clear where we could just use the `addons` and `default`
We don't want this to return `nil` in the user's input. I think this should be moved out of scope to the user.
I think `nextRowGroupStart` and `nextRowGroup` are the same, can we remove it?
I would have added a `command: -c` here. It is a bit confusing because `-` is an uninitialized string
Isn't this going to break existing functionality that's in a different PR?
this can be done by just using Math.max
This will need to be updated to make the `using` statement match the next to `shutdown()` and `shutdown()` calls.
Use 2 (not 1) spaces for indentation.
Is this line still used anywhere?
This will be a little confusing as you are doing the check on line 175, why is the tag not needed in the `*done split: %v`? I think it would be a good idea to do the check here (e.g. `done split: %v`) in the `*done split: %v` check. I can do that in a separate PR, but if you do it this way wouldn't be clearer.
Why do we need to export this? It's only used by the `logLevelUsage` below.
I think this check can be removed now that we're removing all the the image in this class (e.g. the new one)
I am not sure this is the right place for this. It seems like we could just have a `IsManaged` method in `TestAccAWSStatus`?
Should we consider re-installing the same error for `key_sig`?
I think it makes more sense for this map to be rendered as a string. I know you're just looking at the type of `keyMapping` in the map, but I think that's a mistake.
How about "or delete it will be permanently deleted"?
This is the only change of this file. Is it correct to use the existing `Feedpose` function in the `IobCobCalculatorPlugin`?
You should probably check if msg.Router.Source is modules.DynamicControllerModuleName
I think the `attributes` should be renamed to `attributes` and the `attributes` can be removed.
Why are we changing the name of this method to not use the same method for each key?
This is a bit confusing, why not use `Name.Value` instead?
Not sure why you removed this, but I think you can revert the changes to this file
This should be `static const`.
This is not needed, as the `filterbaseapi` has already been added to the `cache` package.
This is a little confusing, as it's not in the `setFirstPingTimer` call, and it's not in the `init` call.
This file should be reverted.
This file was moved from the license header to the license header and I added a new license header
@jmhooper During our PR description. I think you can remove this `if` statement. I think it's not necessary to be here, but you'll have to do `sh.echo "Runtime kernel: #{`uname -r`.
Should we check this for all new cases? Might be worth adding a check to ensure we don't have to check whether it's a path or not.
This is unused and will be deleted in a separate PR
Can you add a TODO here that we're only looking for one place?
Please update the docstring accordingly
We could also just have a helper function that checks if the browser is empty
We should also add `webdav.Object)(nil` here.
`!image*/` should be `!image*/` (or `return`)
This test is not necessary because it is the actual bugfixesitng. We can test the navigator teplate with a different method.
You can use `(caption, x, x)`.
This is a good change. It seems to be unnecessary to keep the argument `0` for the next argument. The reason for the argument name is that the argument `0` is not the same.
Hmm, is this what's happening here?
This is a good place to make it configurable.
Do we want to consider renaming this to `update_pattern` or something?
I don't think the `transformer` can be called here - is there a way to avoid this?
why is this change needed?
Is this not needed anymore?
This is also the `sac` param, right?
I'm not sure I like this change. It seems like it's only used to create some dataplane driver, so I would like to remove it if the dataplane driver contains the same logic.
This will break all of the tests, as the `aoColumns` will be false by default
Not sure why you changed the receiver here, this is a change in behavior.
I'm not sure what the `_notifications` means, but it seems to be the same?
This is the culpos log that we want to do, but I don't want to have the ability to add this check in the log. The `traceInOp` method has already happened.
I wonder if there's a way to avoid this check (or at least the user could not see the "s2" value of 0, so the value is zero, and that's what they are doing).
I'd prefer a separate migration (e.g. `isPluginV2`)
I wonder if we should remove the `&&` in the future?
This can also be moved to its own PR, since it's a separate PR for a separate PR.
Is this function really required in this file?
nit: I don't think you want to use the `id` field in the test, just to be sure.
I don't understand why this is needed. I would have expected this to be done in the `@Override` block as well, and the `@Override` block can not be executed in the `@Override` block.
Could you use the logger here?
These should probably be changed to something like `observe.Address`, which is the actual fix, as this is not related to the fix.
This is a little confusing since the OCI file is not allowed at the server level, but I think it would make sense to move the `configs` prefix to `NEWUTS` instead of the `if` statement.
Is it really needed to make this change?
Would you please explain why this is needed? I would expect the test to fail with the new tests.
I think this should be `info.create(version).finest(version());`
Is there a reason we can't do this in the future?
I wonder if we can make this ` preferred preferred preferred time` or `FetchCertAlternatives`. It wouldn't be clear enough to have all the fields in the `caching` or something.
I'd probably just put it under the `item` callback and make it more explicit, like in the `build_dependent: true` case
I'm not a huge fan of making this a new setting, so I am fine with it. But I am fine with it.
this is probably the only way that the `fields` works with `utf-8` is in the `fields.yml` file?
I'm not sure about this, I'd like to understand the idea of having a function in the config.Chain.ChainDBPath, which is not a function. I'm not sure why you need to fix the problem, because the former is not a big performance hit, and the latter seems a little odd.
do we want to add `limit` to the `LOG` call as well?
Why is this needed? Seems like we should only be setting it to this file if we don't need to.
This can just be `Should accept the default metric in params, set it to the string ``None"``.
Would you please rename it to `Cports`, or `Cports-windows`?
@wilderrov I think this should be changed as well.
I'd like to have a `logentry_to_json` that has a return value, but it's not a valid return value.
I think we should keep import order here.
This would probably be more consistent and less consistent with the other methods.
If it's not used, why is it needed?
@chlowell This change doesn't make any difference. I would expect `encode` to be present for `utf-8` in the `utf-8.js` files that are not installed.
I'd use `self.cart_item_traits.build` here, to keep consistency with other calls in the code.
This should probably be a separate function.
Why does the `VolatileObject` need to be updated?
This is a bug fix. We should not have to fix it in this commit.
Could you explain the reasoning behind the context change?
Should the `pulumi up` test also be updated?
should this not be `_text_content`?
Would this error be better if the error is different than the previous error?
I think this should be `sys.get('file.on.execution.stopped')`. The reason is because this property is not in `sys.get('file.on.execution.stopped')` (same below, in the other `file.get('file.on.execution.stopped')`)
I think this is the wrong place for this.
Why is this line deleted?
Nitpicking, but we can remove this `using NLog.cs` since it's not used elsewhere.
Can we use something else here?
Is this just a typo ? It's not related to the fix and it was not related to the changes but I'm not sure we should remove it.
This is a change in behaviour. It's just a small change.
this was a bug in the bug, right? should we check that the value is in the attacker?
We should also update `mypy/mypy` in this file.
I think you can remove `has_many` from `belongs_to` and change `has_many` to `has_many` here
I don't think we want to run `v1` on this test.
This should be a separate method, since we're only ever testing that a file has been created with `.to_enabling_button`.
I don't believe you want these headers to be included in the VS PR?
This test should use `GetCurrentProcessId`.
Why not `unsafe_string()` here, since it's only used internally in tests? Also, it should be safe to include the test in the module.
I think we can use `IndependentContext(Independent context, Language language, Class<?> functionsClass)` directly instead, and remove the method entirely.
Do we need a doc for this?
Why is this necessary?
Layout/MultilineMethodCallIndentation: Align .title with .must_equal on line 29.
why is it named as VoucherInfo?
Is the default for `uploadFile` still necessary? If it is, I'd remove the `GET_CANVAS_URL` constant.
I think this is a bug fix. The test was passing as `dvc check-pro` in the `dvc check-pro`.
Why do we need to change the name of this parameter?
Does this need a `@return` or can this just be a `Thanos = "grpc"`?
@zjffdu Why did you change this? I don't like that. This is a change in behavior, as it is not related to the changes below.
I would prefer to keep the `top` argument as it was. This is the default argument for the `mb_id` argument.
I wonder if we could just return `uint32(d)` here?
I would just remove this and just remove the `ExpireSnapshots executeWith(ExecutorService executorService)` part.
same, missing brackets and empty line.
I think the name of the manifest is misleading as it can just be an instance variable.
I'm not very familiar with the interface, what's the difference between `BlockHeaderBuilder` and `currentHeaderBuilder`?
I'm not sure if this will work, but if you have a better name - the config option is something like `fetch-batch-size`.
this is not correct. `time.time()` returns an int
I don't see a need for this, but why do we need this for a mock ?
This isn't publicly accessible (i.e. we don't use this public members). Can you explain why it's needed?
Shouldn't we be able to use the thread safety here?
Why do you change this? This makes it easier to read and see what's going on.
Call `__init__`, coalesce is deprecated, remove it.
Why are you passing passing `string` instead of `patient`?
I would have done this forgotten, in the first place, we don't import anything from there
Why don't you just make the constructor final?
The original code was breaking the code, but I think that it's a breaking change. It's a breaking change in this pr.
Could you please also change `blockDownloadDuration` to `blockDownloadDownloadDuration` for consistency?
nit: remove the leading underscore
Why do we want this to be `num++` in case the value is `nil`.
I'd rather you add a doc for these new APIs and it makes it easier to grok what these are.
I don't think this should be a `=` block. The only time we use this is that it is in the `rpc-allow-unprotected` block.
These `type`s are being used for `value` but the `type` is used for both. I'm not sure if it is worth it to just remove the `type` parameter and use `using`.
This change was necessary to ensure that the previous version was changed as part of this PR.
I think the `enode` property should be removed. Also, the key name doesn't match it's name.
@chirimoya What do you think about `addressing_type=None`? I would have expected it to return `None` if there are any items that would pass the user ID and not the user ID
Is this change required?
This class is not used anymore
This is a bug, we need to remove all the `delete companion.providerTokens[providerName]` calls.
We have the Math.random() around v1, v2, v1, v2 and v2 are duplicated in v1, v2.x (2) v1, v2.x (3) v1.x (3) v2.x
This is a bit weird, it should always be the first line.
You don't need to do this here. You can do `.any??` without checking `EqImpl.matches?` right below, but it's also `.any?`
Why not use the `auto` variable?
I'm pretty sure this might be a problem for some sort of thing. I don't know if we have a better solution. We could change all these to be `router-expose: 1.0`.
I think it makes more sense to keep this test-only, since it's not very likely that a user can easily read the server (and not just the actual fix) and just get the "health" error, which is a bit misleading.
I think this is still not correct. `ICoreLogger` should only be used when the `ICoreLogger` class is used for the `ILogger` class, right?
`gather` -> `DockerID`
I think this should be a `.tap` instead of a `.tap`, it should probably be a `map`.
@bparees this was a bug.
Does it make sense to have a `private` field for this struct?
Is this needed? I don't see it used anywhere, is it?
Can you add the `.sendSyncPlayCommand(sessionId, 'ListGroups').then(response)`? The reason being this is because the `response.json()` is not the `function` and it is already the `response.json()`.
(style) trailing whitespace
The message could be more clear, "this times is called"
This will be ignored if `ArrPassing` is not set.
Is it safe to remove the null check?
I think we should use platform.SiteRunning here too (and also use platform.SiteStatus in other places)
Why not set the default at 1?
Is there a need for this to be a `mutex sync.RWMutex`?
Should we use `host.exec('platform'].include? 'sles')` here as well?
This should be `self. translupe {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@ {@filtersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfiltersfilters
Can we make the message match the message?
This is a bit confusing to me. Can you add `save` to the namespace as well?
Why does the change from `unfinished` to `fetchUnfinishedFlows` need to be passed to `ActiveFlowHelper`?
Is it safe to remove the `IntegrationIds` from here?
I don't think this will work. I would suggest `synchronized Set<String> getFieldNames();` or `synchronized<String> getFieldNames();`
can you use `set_path('/Screenshots/foo.png')` instead of `return self.get_screenshot_as_png(self, filename)`?
This is the only thing I'm trying to read, but is there a better place to check this?
Should it be `Umask` or `Umask_uint32`?
This seems like a good place to put this.
This method can be private, since metadataLocation is defined as a parameter.
I don't think the `a` is required for the `<key>` tag.
this should go above our line below
shouldn't this be count count?
why we are not using it here, but still pass in in the `new`?
This is not correct. I would have expected a check to be more specific and check for the `i` for the type above
Is this a change in behavior? It seems like it is just a bit of overkill.
I think this should be `index.filter` since this file is not in sync with the rest of the codebase.
Can we make these `@method` on the interface, e.g. `DynamoViewModel`? Or maybe `DynamoViewModel`?
This should be removed. `IPAddresses` is only used by `apimmingStatus` and is never used.
Can you change this to `ReportDeploymentCompleted` instead of `ReportDeploymentRequest` since this is the same type for the `ReportDeployment` struct?
I think it would be cleaner to do a `Properator.Clean(tparts[0])`, then you can just do `tparts[0]`
this is the same logic as the startMs. Can this be removed and the startMs be removed from the UI?
This is a change in behavior. Is this intentional?
Should we not use the existing `action` namespace here?
Isn't this a BC break?
Why not make these `wf-workflow-task-timeout`?
I think this was the main change that we can use for the `serializeHtml` as it's a static field, not the name of the class.
I think the `0Gi` should be moved to the `fc.xml` file, not here.
It's more explicit to say "with its 'itemsize' by explicitly executing its count. Use Spark's web UI"
This was the bug that was removed because it was removed from the console. I was looking at the console with the new request to get the number of changes that made the test fail, so I made it a bit more testable.
Why do we need `createRef`?
It seems like this would be more idiomatic. IMO, if we do not have a certificate, we would have a certificate with an certificate, and a certificate with a certificate, we would have an certificate to use the certificate, but I'd also recommend making it a certificate instead.
Why is this removed? The `Port` field is no longer used.
The service should not be set in the `map`, so the `storeSamples` will be used.
Please add `GcloudBetaLatestWrapper` to all of these these
Shouldn't this be `DistributedContextEntry`, since there's already `DistributedContextEntry`, and we're trying to move away from it?
I think you want to use `\n` here instead. It will also affect all `\n` cases.
This should probably be moved to a separate PR
@nmittler This change isn't correct. `joining` is used by other places in this PR, I think it's a good change to avoid the change to `join` for the class name
I would prefer this import to be unused.
I think this is a good change. I would suggest to use `void` instead of `void`
Can we change to 0.0?
Is there a better way to do this? What happens when globalconfig.DdevGlobalConfig.LastUsedVersion == globalconfig.DdevGlobalConfig.InstrumentationOptIn == false?
I don't think you need the `topic_id` here since it's a column.
If we're not going to use the test in this file, should we just test for it?
This is not necessary because the default is not set on the request.
`last_update_ts = db_stats.get_timestamp_for_last_user_stats_update()` can be removed from this function and from here, the `if` condition is now done in this function.
This is the only change I'm concerned about. It's not a big deal, but it seems to me that the other two places in this function are only used in one place and is probably not needed.
I don't think we can do these changes here since we are in `subscriptions_subscriptions_IN_KEY` where we can safely safely remove the other key information from `subscriptions_subscriptions_IN_KEY`
I'm not sure why `limit(1)` here was the intention. I think it would be more clear to use a `Object.keys(1)` in the `Object.keys()` method.
what's the point in this PR?
How about moving this to a new `isMaxConn` function?
If the target leader is only configured for the expected leader, why not just do it here?
Can we just have a test method and have the same logic as the method?
Is this change necessary?
I think we can move this to a constant so that we can get rid of it. It can be confusing if the default is indeed being used in both places.
Could you please create a follow-up issue for this and let the others know it will be easier to read?
If you add an optional field to the form you can also add the hook.
Doesn't this need to be checked for each element, as the other one that uses the state that is passed to this function?
Please don't use braces.
Could you explain the rationale behind `DetectionsGraphController`? It seems like we're only ever using the `DetectionsGraphController` in a property that should be the only case.
@jridgewell This is the default, so I removed it here.
Is there some concern with this change? It looks like it would be a good idea to have this on the next `tree.getType` and `tree.getArguments()` to be called before the calls (e.g. on the other side).
These ones should now be `</</</</</` (as opposed to the ones below).
`data=True` is not clear enough here, because this is a new setting.
This file is not used
Naming/PredicateName: Rename to constants.
Is this change intentional?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is the only place where the task is used to generate an upgrade, which will be set to `nil` in this case (not a valid task) and if it is not set then `vic-machine` is not set to `0.2`. It might also be good to check if that's the case. (I'm fine with the change here as well, just curious)
Not needed since `close` methods aren't actually used
This should be `Response.Status.BAD_REQUEST` as a constant (not `Response.Status`).
I don't think this is correct. The problem is with this if `Lame_duck_duration` is the same as the one that is used with `Lame_DuckDuration` and the `Lame_duck_duration` is a single thread.
AFAIK this is only ever used in the `__name__` case, right?
I would use `global.googlesitekit = {}`
Should we check this in `SUCCEEDED` and check if it's empty before checking the result and not nullptr?
This is a change in behavior. `s/g` and `s/g` were not being used. I'd prefer to use something like `s/g`.
We can't remove this. We don't want to be using this.
I think it is better to check `if (!true) return true;` instead
Could use a list instead
remove this line
Just to check, this will be `true` when `compute.ops_on_diff_frames` is `True`?
We need to add this function to the `wrapper.query()` method.
I'm not familiar with this code. Is that intentional?
@adamjstewart Can you please update the test to include a new version?
We should log the warning in case the supplier is not enabled.
`data` should not be a global var for the right one here.
I'd prefer if we were going to do this, but I'm wondering what's the difference between these two and the same logic.
What is this? I don't see any usages of `Import` for the `Directory` type. It looks like this is the only type of `failed`, so I'm not sure why it is needed
this seems like a bug, we can't do it inside the function.
this will need to be updated to `sendnable_index_for`
I think it's better to change the variable name to `query/memoryCircuitBreakerThreshold` and `query/memoryCircuitBreakerThreshold` to be consistent with other parts of the codebase
I'm not sure about this one... It seems to me that the `SoftKiller` method returns the same object, not the same one.
The `code_FORMAT_MOD_LINEAR` function is not used in this function. Please undo.
Should we have here a `fmt.Println` or something like that? We've been trying to avoid code duplication.
You can get rid of this `std::find` now.
this is a bit weird. why do we need to check if `nvda.pyw` is `None`?
I think it would be nicer to keep these `stderr=LOG.error` and remove the `stdout` parameter.
Why is this necessary? The user can use `MemberOf(td)` to get the message.
Can we add a `use` to make sure this is only used in one place in other places?
Worth adding the `TestCase` version to the default `ruby_version.xml` as well?
This should be `Filters = yarpc.Filters(Filters, yarpc.Filters))`
I think this should be a `hash` suffix
We should probably remove `uri` entirely here.
@deads2k this should be a separate commit.
Should we set the enumspb.CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED flag to true?
nit: I would prefer a `user` field instead of an `db`.
why did we change this?
I think it is better to move the logic of the `!` to after the else clause, and have it return the first if statement for the else clause.
I'd prefer using the name of the key-to-parts, because it's not a part of the name of the file.
You could just use a `record_default` variable, which is already covered in `if (getDataSource)`.
This is a no-op because the ExternalResource function already has the Externalest method.
Is this new import meant to be here? I don't think it's needed.
We need to keep the line length before `**kwargs`, so the default value was changed.
Is there a reason this is not just a boolean?
Is the `statements` argument used at all?
I'm pretty sure this will not be the best solution for this PR. I think the way to do it is to change the config name to something more descriptive.
This seems like something that should be defined in the base class.
Why not just remove the parameter of `removeSmallerNonces`?
I'm not sure this is the best place to do this? I think it would be more readable if you could use a custom message, and the `defer nc2`.
Shouldn't this be true?
Shouldn't this be `public`?
Is this a bug fix? I think it's only for `dumps`, but not for `DynamoModel`.
This should be a static method in Stemmer
This is probably fine, but I think we should just make the constructor final.
This needs to be added in `Wubbo-config.yml` since there's no `Weless-user-doc`
Can you use `INQ` and `LIN_` here instead?
This will be a part of the public API if `pe_ver` is `None`, so this is fine, but I'm pretty sure we will need to fix that later.
I think this is a bad place to do this. The other way around it is to just do `surface *layer && !view`.
Should we use `this.driver()['loadExtension'](path)` here instead?
Why do we need it here? It is already the case.
Is this really needed? Is `OstreeDiffDirsOptions` in the same file that we already have for these?
Do we really need to add `Deprecation.warn` here, since it's not only used for testing purposes?
Use the new Ruby 1.9 hash syntax.
Is the name of this method really needed? It seems like it would be better to make `ActivityTraceFlags` a constant.
I think this was just the wrong place for this.
Is it really necessary to set a 20 to 20?
` Hyperledger Besu` -> ` Hyperledger Besu`
I think this should be changed to `channel_v2_v1_select()`
I'm not sure this is the correct description for `a_number` here.
Do we want to print the content of the `request` here, or should we print out the `content` at all if it's not present?
Please add a new param for this.
Is this to be part of the existing behavior in `src/main/application.go`?
Should this use the `BitMap<String, Object>` type instead?
Why not just `reorder`?
We should probably add the `tabBar`, as it is a bit of an `AtomicInteger` field in the `tabBar` field, but I'm not sure if we should do it for other types of `tabBar` objects, or even just an `AtomicInteger`.
The original idea was to have a `parquet()` method that returns `string`, which has the same value, and `string` and `string.empty()` (in a separate PR).
This does not look like it is necessary, and it does not seem to be a bug, it is not a good idea to call it in the `pushObject` method.
Why are you doing this?
This should be `using ParameterList`.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
remove this file, only the path path for the file
This change should be in the new commit as the commit message should stay in the new one.
We should add a new type annotation on this one.
Is this the correct form for all the new `child_process` namespace? I'm not sure what the best thing to do here is. What's the purpose of the code?
Should we just return an error?
I think it might be a good idea to make this `final`.
Should be `new ArgumentGroupGroup(() => CommandArgUsage.CommandArgs_GROUP_IMPORT_REPLICATE_NAME, input_TO_FILE, input_TO_FILE);` to match the `new ArgumentGroupGroup(new getProle_IMPORT_wowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowowo
This is going to be a test that checks for any value of `getQuantityString` that does not exist.
I'm not sure if it makes sense to return -1 here, as otherwise the count will never be null.
This is going to produce a lot of time to read. The `-1` value should be always specified. If you are doing `-1,2,6X` and ` -1,5,5,6X` you should also check the `-1` value.
I think this needs to be added to the `L`-parameter too, as it's already the default, and we should be fine with it as it was before.
This is a good place for the `ptr unsafe.Pointer` field.
Is this a problem in terms of new functionality?
I'm not sure if this should be `!=` or not.
Should we add a `NullPointerException` to the existing existing behavior?
I think that you should be able to use `.data` instead of `.ndarray`, which I think is the expected behavior.
This should probably be a `const` constant.
@adamsitnik I don't think `BetterErrors.editor = :subl if defined?` is a good thing.
Why not using the `isinstance` variable here?
Can you add the message here to make sure the command line doesn't exist and will be removed before running the tests?
Since there is a `using` statement in here, should this be removed? Or is the enum actually used by other components?
Isn't `getContextClassLoader` the only thing that is supposed to be public?
This seems like it's just the actual fix.
This is a very brittle change. It's not necessary to change this, since the `liveliness_s` and `liveliness_s` are only supported on the tests.
Maybe `ecs` should be a constant?
This line should be removed as well.
I'm not sure about this change, since `pathParam` is the same as the default, we can use this constant to determine what type of operation it is.
Why are you changing this? `return crypto.ValidateSignature(plaintext, signer, signature)` is not needed anymore.
do you want to keep the old constructor?
`filterExpressions` should be null. It should be `filterExpression == null ? filterExpression() == Expressions.alwaysTrue().size() > 0 && filterExpression() == Expressions.alwaysTrue() == Expressions.hasEntry().size() : null`
Can we use the "user" message here to ensure we are using the "decode group" format?
Why is this change necessary? The `norm2_name` below is no longer used.
This was an improvement over the platform-style violation. The reason why `len` was removed is that the "Close to the IP" code is to avoid unnecessary field names. It's not clear why this is necessary.
"FastSync" is a little weird. Can we change it to something like "something is not allowed on when it is allowed on when it is optional for example?
Why are we using authenticate? I don't think this is needed
maybe we can move this into a new function? and then move it to the top where you can just call the function
You can use `hash_table_firstkey` from the `*` to avoid the `>=` on the line above.
nit: you can just pass the value of objectValidator
I think it would be better to use the new logger for the edge-specific modules.
I don't think this is the correct behavior. You want to use the `cmsg_data` value to be 16, which is the default value of `length` to handle the case of 16, which is what you want.
This method is not used anymore, right?
Is this used?
I would suggest using `createTableRegion` and `defaultTableRegion` as the default, to keep the code consistent, and use the default value for the `createStatement()`.
I think we need to keep the `import` statements.
Why is it needed to get the block from the `[0-9][-9-8];` on line 164 instead of the block? Is it possible to get the block from the `[0-9][-9-2]` on line 164?
This is not related to the issue, but I think I've been trying to get a test on my part of the previous review.
This is a breaking behavior change.
I don't think this is needed, since we already have `S_MIME`.
I don't think we need this here.
I'm a bit confused by the change here: 1) Why not `minWorkerThreads(5)` and then use the default `maxWorkerThreads(0)` ? If we don't do the same thing with `max` then `10` can be set to 1) then we don't know for sure we need to do this
This doesn't seem right.
@dvoytenko Is there a reason to do a `List<T>()` instead of `T extends WebElement>`?
I don't understand why it was necessary. Can't we just use `type Service`?
nit: can we move this to the top of the file?
This is a little strange... why not use `set_by_dict` here?
Is it possible to move the errors in a separate function? If yes, then it will cause some problems with all of the errors.
I think this should be done in a separate PR
Metrics/LineLength: Line is too long. [83/80]
why use list instead of loop?
I think this should be removed now?
You can simplify this to `includeTree.getMembers().stream()`
Why remove this?
This method should be moved into a setSettings method.
Should we use the new constant?
Could you use Array.valueList instead of Array.value?
Metrics/BlockLength: Block has too many lines. [29/25]
I think you can remove this line
Do we need to do any checks that the `UpdateSpan` and `SetException` are already in there? Also, why not make a `UpdateSpan` call for this?
I don't think this is required.
Is this used anywhere?
I don't think we need this anymore.
We're not really using a new `dotnet/#additional-permissions-for-iis` here, so I would just add a new `dotnet/#additional-permissions-for-iis` to this one.
@nickytonline as I understand the issue with this, but the `<` is not really the best way to track and link it again? I don't think we should do this.
I don't think we can remove this, it is no longer used
@cramforce should the `before-action` be changed as well?
Why not set it to the protected?
This looks like a leftover from debugging?
Is this supposed to be a separate test?
this import seems to be missing a line break
I think we should also change these `LightGBMCallbackEnv` to `LightGBMCallbackEnv` as it's not used anywhere else in the codebase
Is there any way for this to be simplified?
This is the only line that's needed in the PR.
We should add a link to the docs and link it here.
Why do the other `setParameter` call need to change?
Can you add some doc here to explain why this is necessary?
I don't think the `@executable` is needed, we have a `@executable_text` variable that can be used in the controller.
This is a part of the fix that can be made in the same PR as the `sendPing()` method, and I think it's better to call it out for the `State()` method.
I believe we have to import `lodash` now.
Can you add a new method for the new parameter?
This should be `m.Group("/commits/:commitId", v1.userReleases)`.
I think `getRegistry` should be a property, not a set.
I don't know why this is here
Should this be a `map[string]string`?
this test should not be testing what you are testing - can you fix it please
Not related but I think this should be moved into the `return()` block.
Can you use `serviceDefinition.Extensions.ContainsKey` here?
do we need a separate PR to remove all the extra changes here?
Hmmm. I'd expect a more specific name. The `WORKFLOW_EXECUTION` is a bit confusing. I think it would be better to do the `WORKFLOW_EXECUTION_STATUS_UNSPECIFIED` in the config and then pass it in.
This is also a great way to fix. We could just use `storage_strict_json` from within `if_configured()` here.
This is not a good place to put this. This function is used only once, so it is only available at the beginning of the file.
This class is not needed. The class is just used by JUnit 5.2, not from a specific implementation.
please also change the param name of this var to `IAM_id`
Can you please move this to `before_PublicKey`?
You don't need the `.spec.duration` anymore.
I think I missed this one.
Why is this change required, but not the other changes?
I don't think this is a good idea. If we can't use the `JivaPVCArtifacts` package it will get confusing in the same `JivaPVCArtifacts` and it will be used in the client, so we can use it in both places.
I am not a fan of using this class name.
Should this be `public final` or `needed`?
I think you also need to add this to JavaEnv since it's not really an JavaEnv.
I think it is good to have this in `apitypes` and it should be in `apitypes`
nit: this is a bit weird that I think the `config_path` might need to be an `IO` instead of a `IO` object.
I don't think we should remove `flattenedTree` here, it should be a different type of exception
This is not needed
@ktrzcinx Why are we not adding these to the default behavior?
Why are you using the `v1beta1` version?
I don't think this is correct. You should use `bool(false)`.
I think this should be inside `#include <numdb.h>`. It's also not in the same file.
Is this a debugging leftover or unrelated? Could we just make it a separate commit?
This should just be `throws`.
nit: `!` can be combined with the `if` above
This is the main change in behavior for this PR: it's worth it as it is a bit weird in the code, but if it's a resync, then we could use it to determine the resync.
What does `path == path` do here?
I don't like this. What is this special for? `composite_root/root//` is always available as a full name, and the other functions in this file are already in the resource name. Is there any way that the full name should be configurable? I'm just not sure about the actual solution, and it seems reasonable to add some more details about what this does in terms of this check.
Why not delete the `||` block?
" Checks" sounds a bit odd to me. What about "It is not considered negative"?
I would prefer to have `config.TLS` be a property of the `http` object that's not the default, and it's more of a single field in the future.
Should this be set to v2.Corpus?
Why is this necessary?
It's not necessary to change the option to use `isEnabled` or `isEnabled` here.
I wonder if we want to do this at the same time, and if there's a default value in the `job.addaddle.isNull` method?
This is a very weird place to have this variable. I don't think we can just get rid of it.
Why is this line removed?
This will need to be added to the `github.com` file.
Wouldn't it be easier to just use `@Restricted` ?
Seems like we don't need the `Root` here.
I'm not sure why you are removing the $config['cdn']['fallback']['master'] ?
Why do we still need this?
Do we have a migration to set this to `group`. I'd prefer to not use that.
This test is not needed anymore because it was removed in #6335.
> the validation rule is not in the corresponding '.md' file. I'm not sure if it is worth the rest. What about something like 'Combineing rule, before the corresponding '.md' file?
@mjkkirschner I wonder if we should just use the same constant from there and pass that in as the result to the function, and just use the result in the head.
Shouldn't this be removed as well?
This is the only change needed to be here, as `var_sp->SetLocationIsConstantValueData(is_constant)` is also defined below.
Nit: can you rename to `IndexAnalysisTarget`?
I'm curious why you changed this to a "yaxis" thing, and not the "yaxis" thing?
This is not a good example. It looks like it is used by `cancellationcellation` and `cancellation` and `cancellation` but is a better way to avoid the commit and fix.
This should be `Optional[str]`.
what does `t.Fatalf` return in this case?
wrong import order
Shouldn't this be defaulted to defaulted?
You can use `not(textarea)')').length`
Shouldn't this be the other way around?
This is a little hard to follow with my IDE
@jridgewell I'm not sure I like this name... I think this is something we want to be able to do...
Shouldn't we log this message before the logging? I'm worried that we will be looking for the logging at the log level that we want to log?
remove unused import please.
Please remove all this `if`s since the next line will be removed
Should this be `Error` instead of `Error`?
do not use `close()` here
I think it would be better to have these `@SuppressForbidden` calls in this method and `@JsonRepo` methods, which is what we want.
These tests are failing because `KEY_tests.go` will use the `ApprovedUpgrades` value for the same reason. We can just use a single value in the test.
I think this would be more appropriate if we just use the `builderConfig` instead. I don't have that strongly about the `builderConfig` part in the code, but if this is a change I'd like to see it as a separate issue.
I'm not sure it makes sense to import `github.com/opentracing/go`, just because I think the `github.VSP-api` package is the best option for this.
I would use a `path.join(name, "1", expected_error_message)` instead.
I think this needs to use the same name as the `Allowlist` above.
I think this should be `[sprintf]`
Why is this change necessary?
Please add a space between the `}` and the comma.
I think we should just make it configurable.
I don't think it's necessary to change this, since it was a separate pull request.
Why is this change necessary?
This test seems wrong
This doesn't look right. Is the `StateReader` already in the `merge` state?
Is it possible to do this check outside the `if ((cachedNATable->isHiveTable())` block above?
Thanks @stephenroller this is the change in behaviour.
This was a hack, but I think you should just be able to run `overlaid` when `self.overlaid` is `True`.
We should probably add a description of the `TODO` before it (the last PR I can fix this in #3332).
Please don't import * it is used
We can avoid using X over imports now, right?
Can this be removed? If not, I'd recommend using `gmbal.ManagedObject` from this class.
Do we need to call `StartTimingWrite` here too?
Is this used?
Please don't use wildcard import.
I think it should be possible not to use wlr_render_texture_create here as well.
I don't know if we should keep this, and just keep this, but I think it's worth doing too much here.
Wasn't this a change in this patch?
What is the reason to remove the nullptr?
We should probably move `use Thelia\Base\Coupon` out of this class, and just remove it.
@deads2k i think it would be good to have a default implementation of 'tg' in the 'server' parameter for the 'server' in the 'server' parameter.
Use 2 (not 4) spaces for indentation.
why is it deleted?
Why is this a `gc`?
Can you check if `options` is `null`?
Can you remove this line?
Why not just use `string`?
I would call this one `kubernetes` and have it return a different name
I'm not sure why this should be `editor.apply()`
Why is `nil` nil check needed here?
This line is no longer used?
Why the change to 5 ? (In case someone is using 3, 5, 5)
you need to add `np.abs()` here as the second return value will never be equal to the `None` value
Is this change related? I don't think we want it.
I would use the existing `isset()` methods.
What about `--branch-depthdepth`?
Should this be a constant somewhere?
I'd prefer if this would be an `Optional[str]` instead of an `Optional[string]`.
Is there a reason for removing this line?
Why the need for a separate entry in the error? Looks like this is used in many other places.
This can be a breaking change as we already have the `set_index` method on the `index` module.
I think you want to keep the current logic in this file, it would be better to move it in a new line.
I think it might be more robust for these to be in a separate function.
I would just add `some author` and add `off`, to the next line (and only for `email`)
If you want to call this, you can do it in a single `try/catch block` block.
The `XAX` fixture is never used.
Not a big deal. If you have a config for `EnablePrometheusMetrics`, then you can remove `EnablePrometheusMetrics`.
I don't think the term "color_enabled?) is needed here since the custom success color must be a legacy view view."
I think this should be `address.getMillis(double)` instead of `double` since it's only used by tests.
I think this should be removed. We now only use the `persist_mode_on_change` method in the UI. The test is failing because there is no `persist_mode_on_change` method in the UI.
Missing semicolon after the comma.
Why are you using this instead of creating a new one with an empty array?
`getLiteral()`, `getDate()` can be passed to `ProxyDate`.
I don't see a need for this line, but can we get rid of `SendResponse` in `TestBase` ?
This should be removed.
The test fails if no `user` is present in tests because there is a test that has not been released yet. It should also be added to the `user_id_and_url` method.
I don't think we need this.
What if I recall correctly this was a wrong approach. I think we need to fix that. The rest of the file is to change the name of the function in the future.
why not call Flush();
So we are not using the manifest file anymore. I think it would be better to use the manifest file instead of creating a manifest file for the manifest file.
I think this should be a constant
I'd prefer not to do this for `checks.rst`.
I think this is fine, but it's a bit confusing, as the "incoming" function can only be called in the `Tuple`. What's the "strdup" thing? How about something like `find_exists(self, None)`.
This is not needed.
I don't think this can ever happen.
Why are you changing `Defaults` to `true` in case of any special cases?
@tgamblin Shouldn't we have a `lib64` file that is passed in as `lib`?
Not sure if this line is needed
I think `__DIR__` is better
It's probably fine to have this in an else clause to avoid the project specific to your branch.
Should this be `== NULL`?
I think this should be named "x-cse-src-microservice"
@jmhooper so I think we can remove this.
What's the purpose of this test?
this is not right: `sys.path.join(os.path.realpath(__file__))`
Should the `_x` be removed here and below?
This is a change in behavior. You're just trying to get all of the stuff that does the code. I think it's better to have an `eval_set` and `eval_names` in the first place.
Is this change needed?
I was not able to get rid of `+` and `.content` before.
This is not a good idea... I think we should use a private function to make this more readable.
Should we have a separate interface for this?
This is a bit hard to follow. I think we should just do `strictPopulate= false`, and not just do the `resolve_type=true`.
Why do we have both noiseRemoved and noiseRemoved?
I would have called this `str`.
I'm not sure we want to use `Action.Allow` to be consistent with the other `Allow` attributes
This will be a bug fix.
This was a bug, because the `kx` was `*` before.
nit: remove empty line
Why do we need to call `stream` here?
I am not sure we need this here, since `execution_source` is used in a few places and can be confused with the code above.
Let's not add `w` at all for this information (e.g. for `error`)
Is it possible to get the current version instead of the existing version?
nit: I would just call this 'violations' since it's a name for this variable.
This is not a good example of where the exercise_ids is called, but for the user to see how we can get a different ordering of the exercise_ids and the user can get an extra step back to the DB. I don't know how to do this, just think.
Why not just call this method here?
This is wrong, because partitioned was added for non-partitioned processor. The problem was that we need to revisited, and we have the wrong value here. The value of the partitioned processor is the same as the existing model, not the new one.
This change is not necessary. I think `isort` is a bit confusing for the non-zero value.
@garyrussell, any reason why you added the global checksum?
What if the user has a `Iframe` or an `int`?
Isn't this the wrong exception for the `get` method?
Can you please rename this to `overwrite`? It's easier to understand why it is needed.
Why is this change required? I thought `Exception` would always return `null` but it seems it's a good time to make the change to this?
This can be removed.
I think this is a very good name. What if a user has access to a different filename (or a different name) that we could have and have an name as a different name for the new name? I think it's a very good thing.
I'm assuming this will break all the `event.Data` logic? I think it might be too much to pass in a `default` object, and then just set it to `true`.
I'm assuming this was just a mistake in the first place.
The QOverload is a Qfluous string and the Qfluous string is a Qfluous string, so we need to change it here too.
I think we don't need this, right?
I think this should also include the `CodedOutputStream` field.
I'd prefer a `track(event: "Cancelled", properties: {})` return a ` self. reason` and `track("/Cancelled", properties: {})` in this case, to make sure it's only used once.
This can probably be deleted.
const auto data_arr_host = la::matrix<float>::wrap(data_arr_device).to_host();
I don't think this is right. The `concurrent.create_color` will do the right thing. I am not sure we should be doing this.
why is this added? I don't see any tests using this.
This will be a breaking change. You should be able to remove this, and just call the existing one.
I think the original `win` function can now be replaced with `winParentVNode` now?
`--filename-suffix` - I don't think you need to change this.
this should be removed, as it is now supported on rhel4.
Can we have an extra line here instead of passing a block?
I'm not 100% sure about these `RootPath                     `. Can't we just use the `WebsiteErrorDocumentPathKey` variable?
Shouldn't this be False?
Do we need to make a separate constant for this?
Isn't the new `NOT-plugins` the same as `NOT-rules`?
Is this not used?
Might want to keep this as it's a normal update.
Please remove this line
This is an example of a change which is actually not the case here. I think the `axe` variable should be renamed to `error`. We should probably just fix this, and remove the `axe` variable.
Is there a reason for not doing the old usage?
Why is this needed?
I don't think this needs to be a config parameter, since it's not a config parameter. The user should use a config from the `config` instead.
nit: can you move this to the top of the file?
I think we can remove the `unsubscribed_from_emails` helper method completely completely completely.
This doesn't seem like a great name for a user. It is used as a default, so it should be removed.
Should this constant be renamed to STATE_KEY_NUM_ATTACHMENTS_LOADING=1?
I think it's a good idea to have a log.log in the `deleteBlobs` function. It's not the best idea that `fileIDs` is the name of the file.
I'm not sure this is a good idea... this will cause some problems. I think if we can't get to the status, we should not set the `VerticalScrollBarWidth` setting to true. We need to set the `VerticalScrollBarWidth` setting for the `VerticalScrollBarWidth` field to the `this` field.
This is not a bug, we should not be doing a `attach` at all.
This doesn't seem right to me. What do you have in mind? I'm assuming we are trying to make things more robust.
Should we also test that the `_upcase_path` method isn't in the `ProgramController` namespace?
Why do you need to set the length here? I think it's the responsibility that you are doing the same thing as you have in the `newnew` function.
Should we have a standard library for `kubernetes`?
This was just an unrelated fix
I think it is better to use an empty array of `__` methods, and call it `toJSON.toString`.
What happens when we have a non-nullable `NULL`? Would it make sense to move it to a `static` method?
Is this needed? I would expect `Xaml` to be present in other places.
I'm curious about the situation where we would want to set `limits` to a non-empty string here.
@mmaxim this was a bug.
Shouldn't we use the `--no-sa` flag here ?
`global_index_range_map_` is a valid integer and so the variable name is misleading.
Why do you use a custom processor?
I think this is not the correct place for this.
This seems like something that should be moved into the `if (isNotNotNotActiveOrSchema()) {` block?
Please fix the spelling mistake.
I think this TODO is still necessary since this method is now in a transaction. I would rather just change it to: 1. The message is not clear to me that this is only for testing purposes. 2. The message is not clear to me. I'd suggest to move it to a helper function that returns this constant.
Should we use the `require.NoError(err)` here?
This is a very minor detail, can we move it to a separate PR?
I'm not sure this is the right way to fix this. I don't think this is going to work. I don't think you want the tests to include the new test, just wondering if you can just set `data[:config][:bioc_check] = true`, and just have the new test `test_files.py` test and test `test_files.py`
This can be removed.
This should be reverted.
I think we should not use the `connScan.Scan()` method anymore.
Can you add a TODO to remove this?
Is `List[col].dtype for col in self._metadata.column_fields]` redundant here and elsewhere?
Is this something that is a bit weird? I'm wondering if it would be a good idea to do this for the other cases, e.g `getExtendedIdentify` could return an error.
This function is not really needed, since we have a `ContainerConfigurator` class which is not a `attr` object
I don't understand why this is necessary, since the `Fatalf` and `f` functions are only called in the `Status`.
This could be `_write_header_present`
I would not use a constant for this. It would be more consistent with other methods like "scheduled".
I'm not sure we should still use this.
@benzonico I think this should also be added in the list
This is not the correct way to do it, as it is already the default.
I think I would add a note about why this should be true
Why did you change the return value of - 1 ? I'm assuming that you are not doing anything with it :-)
What do you think about adding an enum to BOOLEAN and adding an enum to the enum as opposed to using the enum enum ?
I think this should be `getParentSvg().width.baseVal`
Can we also add the `ignore-on` prefix for all these?
why the move outside the the `writers` here?
@Jjagg - I think you need to add the `conf.iface` property here as well.
I'm not sure about the `permit` prefix, the `name` is used here. It's not necessary to add a `URL` method to the index
The `name` variable is not used anymore.
Do you need to test that the `cacheIf()` call fails on this line?
Can be final?
I would make this a const or an int
I'm not sure why the join check isn't needed here.
Is this a BC break? It's only for the `AddRegistered` case?
I think the name of this variable name is a bit misleading.
Why does this test fail with "4.0.1 community" ?
I think this should be split across multiple lines. (The same goes for the other changes below.)
Can you make the `self.config.new('changing-open-has-open-has-root')` and check that the `self._config.new('changing-close-close-hanging-open-has-hhpl` and `self._config.new('changing-close-hhLogging-open-has-root')`
Why the change?
What does it mean? Isn't a `&` value sufficient?
This is a bug fix
this could be moved to a separate file, but I think this should also be moved to a different place
Use 2 (not 3) spaces for indentation.
This will need to be a core resource, right?
Were these `std::cout` added in the middle of the input?
Why is this needed?
What's the purpose of this?
remove the TODO?
Doesn't look like this is being used anywhere - it was just a mistake in the past.
I think this logic should be in the same method.
this is a function, please remove.
I'd like to see a more explicit error message here.
Line is too long. [83/80]
@Jaeger Do we have a problem with using `TracerProvider` in these two places? I'm not sure how this is going to work as expected in the `buildExporter` class.
Why did you remove these tests?
This should be an options object.
I think the record is now unused now, so I removed it.
Why was this removed?
can you please also fix the indentation?
I'm wondering what this was doing before - it's probably not a problem for the `operator` case - but I don't think it's safe to remove?
Is it really needed? It is already in the `protobuf` package.
I think we should use the existing `paych` package instead of `paych`, as it's not a blocker for users.
@wachterjohannes Can you please check for error message instead? This is a bit weird and will not happen, it seems we only try and throw exception when there are cases in the exception message.
I think the `private` is redundant here.
I think we could also add `base.HashLength*2` to `HashLength*2`.
Is it a bug that this is not a flow flow? If not, why not check if the flow is not in the first place?
What do you think about renaming the method `UTF88AndOs` to `UTF8Util#createQueryFactory` or something like that?
I don't think we have any use of `IEvent` here, is that intentional?
This should be a constant
We can remove this and use `debug` below.
I don't understand why the ternary is needed, is it?
`isHydrating = false;` is redundant here.
This should be a single function.
Minor NIT: We don't need to copy copy anymore.
I think we should only have one place to have this field in the `aliasing`.
I am not sure we should have any use of `javax.Match` here. The `run` should be renamed too, since it is already declared below and I think it would be good to keep this.
I am not sure about using the `EnableProcessBlockStats` parameter for the variable name. The reason for the `EnableProcessBlockStats` is because I don't know what the `EnableProcessBlockStats` is when I see it. It would be a good idea to change the variable name in the `create` function.
why is this removed?
Do we want the global log level here? Seems redundant.
This is not the best way to do this
I don't understand this. Why do we need this class here?
@scheibelp I think this should be removed, it should not be here.
Is this a public public API? If so, should we rename `object[]` to `object?`?
Is this expected?
This should also be done on line 408
This was the only place where we've changed the type of `map`, and now it's the type we're using, so we can just leave it here.
Should be removed, and use `@Deprecated` below.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This change is not correct. The only usage of this is that the constructor is not called on the method. The `verb` is the `container` object that is used by the `FlowFile`. The `FlowFile` object is used by the `FlowFile` object, not the `container` object. The `FlowFile` object is used by the `verb` object, not the `FlowFile` object.
Why did you remove these?
Why is this being changed?
nit: `return TypeUtil.select(schema, requiredFieldIds)`
I'm guessing that's the only thing the compiler is setting `productCodes` here?
`accounts.put` will return null, so we can remove this check
Why is this change necessary ?
Would you mind making it a `List` instead of `List`? I think it would be clearer to use `List[str]` in all these cases.
I don't like the change here, but I'd rather we have a `using gc .(*gcOp` flag that is in the next release, so that's what you're going to do here.
I would have expected this to have a `getMode().getMode().getMode().getMode().sizeof(id, child_id) AS` method. I don't think there is any reason why the caller can't do that here.
There is no need for a `?` part.
I think the function `ernetesDev` is a better name.
This seems to have the wrong name
what does ` receiver` stand for here? it seems like it would be more efficient to use it here.
I don't think we have any other URL for all the services. We should be able to get the URL directly from the API.
Why is this check necessary? If we are going to do this, we may want to consider it a `0` value.
We should be able to remove the `DEFAULT` here because that's why the tests pass. I'm not sure it's a good idea to import it at the top. It's probably not important to have a `const` here.
Can we add some `requireNonNull` type here?
why does this need to be `30`?
This should be `Module\Base`.
Wouldn't it be better to have the `package` class as well?
This is a breaking API change. I think we can get rid of the if-condition in the if-condition in the case of `getWidth` being called.
I believe we can just remove the `serializedDataSize` field.
This doesn't really look like a bug. The only thing I would prefer to have it as a `\` and `\` but that doesn't really add any new code to the `>=`. In the case that we're using the `>=`, it doesn't matter, but I'm not sure it's worth it in the case when a user doesn't want to support it.
This was the only place where the "Retrieval" was moved.
Why do we need to check this for all clients?
This is not needed because `args` already exists in the `config` package.
This is a change in behaviour, but we should make it more explicit that we have the `Supplier` in both the `Resources` and `ltc`. In the future we should not make this change for all public APIs.
Hmm, this is a bit confusing. What are the `Backend` and `backend`?
I'm wondering if we can just have `-88.884` here and have this `nodata` be a `float`.
Why does this need to be a `-manager`?
This is the fix, right? Maybe we should just make this `_mappping`?
What is the reason for removing the `ActionAuthenticationToken`?
I'm a little confused about the `off` and `off` here. I think it is a bit confusing. Maybe we could move these lines to the top of the class?
Should this be `<=2.2.0, <2.2.1`?
I would keep this test, but can't you move to the end of the test?
We should use the `if (class_exists(\\Element\\SelectElement)` here
Shouldn't we also add a `long` parameter here?
this should use `_set_stock` instead of `_set_backend`
I think this should be moved to the `status` package
I think this change should be reverted?
@michaelkuhn shouldn't this be a `:` ?
Why not just use the return value of `Combat_ptr`?
@adamjstewart Is there a reason for changing this to just `auto offered?` to `auto offered?` instead of just `auto offered?`?
These imports are only used in the coreclr, so I removed them.
Why are we changing from `internal` here?
Is there a way to do this without `v` ?
We don't need the extra code since it isn't in `package.json`.
I am a little confused about how these are supposed to be used in production. If we're not already in production, we may want to use `logWriter` here instead
I think `graphics` is unnecessary here.
I think you also need to keep the `type` argument for `destroy` and `destroy_destroy`.
Why is this here?
I think the `. 100` is unnecessary. It is also an unnecessary extra `.to_currency(string)` for `+ 100`, but it seems to work.
I think this needs to be a check for `stream == nullptr` before calling `stream_t` and the check for `defaultStream` is redundant with the if above.
This was changed to match the other imports
Can we add an additional command to avoid creating creating creating creating creating creating creating?
Should we do something like `Err("Expecting a numeric status code or '*', got '" + what + "'") `.Atoi(whatInt, err)`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Please don't change this.
I think it's better to put this into the `getStateThing`, since we don't use `Put`
should be `pubkey_hex_is_Hook`
This is the only error that's used by a few tests - I don't know why we are testing this. What about just passing a custom logic into `predictedFieldInfo`?
Should we add a check to ensure there is a way to ensure the trade is always loaded before the trade is sent?
I think this was accidentally removed
Shouldn't this be a function instead of a static method?
I'm not sure we want the `oldDom` parameter here. I'd rather we move the `let` parameter inside the `let` block and then call the method `let` inside of the `let` block. This way the `let` can be more easily easily easily easily easily easily easily easily. This will make the code more readable and will make the `let` be more readable.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
@hrobertwb do we want to check the cache for MvxViewModel?
What's the reasoning behind removing the `try` here? It is the `err` above but the exception message is not needed.
Should we move this down to the top of the file?
This import is unused.
Can we use assertTrue here?
Is this in the previous PR or did you intend to remove the `aliasProxy` check below?
I think we still want this to be `yes` since we only need to have an `~m4` version that is `2` if `2` is `2` or `0.7`, so this is the only one that's in that version
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Is the `AttackTimeout` going to be an advantage of the connection, or is it the only one that is being used here and is still in `client.go`?
Why was this removed?
I'd suggest to move this logic up with a new function that sets the value to `true`
This is probably a bad thing, but it seems to be a bit confusing, since the `Iterator` class already has a `Lists`, and we don't have to have the `Iterator` field in the `netflix.iceberg`
`getSelectedElement()` is already called in a static method
I think it is better if we get rid of the disk in the log message.
Shouldn't you use the `char_t` constant here?
Do we need to add these as constants? I think the `@Deprecated` and `@Deprecated` are already being set in the class, so we can use them to make it more obvious that they are not set in the package.
Shouldn't the `NetworkConfig` be `blockConfig` instead? I'm not sure why it is necessary, but it's not in the `aws/util` package
I am not sure this is correct. `parallelism > 0` should be `parallelism` to be `null` and `false`, but it should be `0` for now.
This should be called `actions`. Same below.
This is the only change in `_hydrating` that is used by `CreateHydrating`. I would suggest to use something like `_hydrating_to_open_attributes`.
Should we use `path.name` here?
There are more than one extra parentheses in this line.
I think it would be more useful to just change `system` to `const` (or something like that) since it's not a part of `systemGuestRoleName`. But this is a change for the implementation, it's not clear how to call this `const` at the end of the file, so we could change it at all if possible.
The `var rev` should be removed.
This change is unrelated to the fix, I think.
Is `double *` the right type? I'm pretty sure that is the default behavior.
The only time this happens is if the account is in the first place and the user is still in an account, and the account was disabled.
this test should not be here, because `string` is not defined.
Is this still needed?
This is not an obvious name. It might be a good idea to include it in the `ResourceMessage`, but the name is something that can be used in the `ResourceMessage` that does the same.
What's the rationale behind removing the `sys.exit` call here?
This is a change to the x and not a c.
I think the convention is to remove the `blacklistTypeStr` parameter and just add to blacklist the db. For example, when `addToBlacklist` is true, `blacklistTypeStr` is true.
The original code looks wrong to me, as `logger#error(..., port)` would fail.
I don't see the needing for these, but I think it's better to use a local variable here.
I am not a big fan of this name, since it is a new name. Maybe we could consider just calling it `close_in_visible` or something like that.
This check is not needed because `+config.Target.Triple` is already in `--target`.
This change will break the old behavior, but if we have a way to get this from a non-default value, would that cause any problems? I think we need to do something here.
This should have a constructor for this.
I am not really happy about the TODO. It's important for the future to try to see that it's done in a separate PR. I'm not 100% sure how to fix this.
This was a bug in master, but it seems to me it was not working before. I am fine with it, but now I've made the change to use the interface.
I'm not sure if the initial implementation is correct, but if the `lua_pushstring` method is called, the `lua_pushstring` method is called.
is it possible to make the test more specific?
I'm not sure this is really necessary.
`ASTAnnotation` is already declared in a method, so I would not change it here.
Why is this a `shceptor`?
Please revert this and make it static
Not sure we need to do any of the `memset_s` here?
I think you can just do `if sys.version_info < (3, 9)`
This is the only change I'd prefer not to store the `NumExtraElements` variable in the `try/except` block. This way if we can use the `try/except` block we should just add it to `models/test/test/` and then `models/test/except` in `models/test/except`
I'd prefer the name "saved" to make it more clear what's going on here.
I'm curious why you changed the default?
This is the test, right?
This is no longer used anymore
I don't know if this is a good idea. I'd prefer `super(UIA,self)` instead.
This line is now unnecessary
I don't think we should be using the `.defaults`. The `.new` check should be in `after_update` and `after_update`
This seems a little strange... what's this?
This one is a little confusing, as it is a list of `yarn` properties, not an `yarn` one.
I think we need to be more clear here about these.
I'd probably rename it to `houseOwnedByAccount` to be consistent with the other places.
@saghul, I'm not 100% sure if the `--` flag for all these commands are needed? The only reason for the `--` file is to allow both paths to have them, but I'm wondering if we shouldn't be able to make these changes in this PR.
This should be set to True in the `background_label_to_set_let` callback, otherwise it'll break existing models that have no `reg_decoded_bbox`.
should we also rename this property to `PlatformrelationIdentifier` or `PlatformrelationIdentifier`?
Nit: I think it'd be nice if we could have a more generalized input here, e.g. "if the version is not None, then we could use that to know the version is not None."
I think we can simplify the typehint by adding an additional `UserUser` property. Then you would not need the `UserUser` param anymore. (I think the `UserUser` property is not used in this PR, as it's a breaking change in the code.)
I would just say "The number of rules should be exactly the same as the length of SUPPORTED_RETENTION_RES_TYPES".
@bparees this is a breaking change, please revert
Why not use the right `cspcObj.Name` here, since we're using a CSPC in the name?
This is a good change, we should probably make it configurable
I don't think this line is needed.
should be in the main goroutine since it was
I would use the `isConnected` method here.
Should be removed as they are not used anymore.
I'm not sure why we need this, as we have the same in the tests, and it's not really required.
I don't think this should be here.
"If we're not using the AWS KMS customer master key"
This is a little strange, as it does not have a `EnableCommits`, why is that needed now?
We need a better way to do this; I don't think we should just do the validation against this anymore, but it should probably just remove it and keep the validation run in the next PR. (It's probably not worth the changes to this PR though)
We should be able to remove the last `logger.finest` from here as well, since it's not a part of the fix.
This is not a boolean, so it's a little odd. What happens if a dict is not a string, but a string, or a string?
We can probably make this a `FIXME` if it's not only for `B`
Can't you just return `true` here?
I don't see this used anywhere in the code in the codebase
@jridgewell I don't think we should be using `ariaAttrs` here. I think it should be removed from this and `push` below.
I would suggest to use the new interface to avoid confusion here. If you want to use `local_user` instead of `None` to set the default value, you can use `None` instead of `None` to make this more explicit.
Why did you choose the `LOG.finest` call instead of the `finest` call here? It seems like the log message is a bit ambiguous.
This is a little bit hard to understand. What's the motivation for this?
I think you can remove this line.
This is the main change. I don't think it's the right way.
Do we need to import `get_root_logger`?
Line is too long. [83/80]
What do you think about using `[AspNetCoreBenchmark]` instead?
`req.getParameter` will return true for this value. Is it because it is true for any other value?
I don't think we should use the `/DELETE` path for the user. It should not be in the user. Also it should be `/minSchedPolicy`, not `/Schedpolicy`.
This class doesn't have the exact same meaning as the one passed to `Kernel`
I think the `appArgs` is not necessary here, it is only set once in `appArgs.secure`.
We can add `ExpireTableMetadata` as a `WorkspaceMetadata` method to this interface
do we need this?
Why did you need the skipLogOnErr bool here? I'm pretty sure it will cause a crash if there is no error.
I don't think we need a separate package for that.
I would put a space before the `,`
Shouldn't this also use the `daal::algorithms` ?
I would suggest making this a constant.
I'm not sure this is necessary. This check is only in the `if` statement.
I'm not sure it's worth it to have a test for this. The first "rc" above is a "rc" (or "rc").
Why not use the same value for these?
Is there a specific reason for doing this?
I would move the logging. If you are using `config.log()` this is the only place you are using `debug()`.
Can we call this `JsonStatus` instead of `platform`?
We should be able to remove the `&` check for the `dev/xvda` part from here as well.
Why do you want this in the `.cout`?
I think this error message should be a little more helpful: `loadExtension(path)`
The test in this file is to ensure that we have the new version of the server server in the test file (e.g. `Jenkins_cert_VERSION`). The tests are failing because of that, which is not good enough and is fine as-is (not sure how I missed this before).
I would prefer to keep the name of the full rules and name of it `[hashToFullRules]string` but not `[hashToFullRules]`
`myId` and `checkState` were not supposed to be used.
This is a bit of a nitpick, but would it make sense to move this up, and move the call of `applyRef` inside the if block, and move the if statement inside of this if block?
I think we should just pass `nil` here and check `c.Register(...)`.
I'd prefer if you could make these files more robust.
This function is called only from the `FSComponent` interface, so it should be removed.
I think this should be in `config/hash`, since we only use this for testing purposes.
You need an update here.
"bootstrap.js` bundle must be loaded after jQuery UI to avoid conflicts."
Is this class still used?
@mmaxim do we need to check for an error here? I mean if it is present then we won't have it.
Should these go in `build go1.15` instead?
Isn't this the same as in the `getNotificationNotificationEnabled` method? If so we could just use `return;`
I don't think we need to include `APP_DOMAIN']}"` here.
This is probably the only change needed?
I think it should be `Failed to start: %v`
I think the hostname is a little confusing. How does "TLS only if the plugin has a valid plugin" and not its own plugin?
Why this change, was this intentional?
What does the `key` mean here?
This is a bit unfortunate, but I think this is a bug fix.
Do we need to use `Resource_name` here? It's already used for the test.
I think this is a good change, but it's a no-go.
is there any reason to change the test name?
I'm curious why this is not `if (command == 0)`
this should probably be renamed.
this should probably be a global variable
This will need a release note. You'll need to use `StringUtils.empty` here
This change will break all the tests that use transporttest.NewMockHandler, but that seems like it should be here
I think the convention is to remove this, it is just a single entity, and it's only used in one place (which is a single entity, not the title)
Should we be returning an empty string instead of returning null?
Is there a way to get a specific target object without using the full target object? I'm not sure how this works. What do you think?
@wido Can you check that the latest version is not set?
Is this file still needed?
Is the `go.uber.org/zap` line needed here?
`already.log` will be in this file. We can remove this
Could we make this a `String.format`?
@Scottmitch why is this being removed?
This method should not throw an exception when `value` is true
The name `CopiedAnnotations` seems a little confusing to me. What is the `CopiedAnnotations`? `fineAnnotations`?
This file should be removed
I wonder if we should be using this `LongLong.WithWaiterDelay` instead of `2.2`?
This could be moved into the `if` above, as it will never be true.
I'm a little confused by why we need a "real" setting here.
Not needed anymore?
this seems to be dead code now?
Isn't the test `ca.crt` the same as `true`?
Why do we still want to support that?
I think we can also change `None` to `None` here.
(style) trailing whitespace
This is a very minor thing. The operationTracer can be used as `NO_TRACING`, but it is not a `string`, right? I guess that the `NO_TRACING` method is only ever used in `ObjectTracer`, so I guess it is not a big deal.
This should be removed.
Can you use `proposal_as_type` instead?
technically this is a change in behavior, but in my opinion, the name of the variable name is very misleading. The condition is not a boolean.
This is a bit of a hack - it's a little hard to remember to understand the purpose of this API. Can we add a TODO here for this one?
I think this should be a private constant
This file is covered by an GNU General Public License.
Can you add a description of what this does, to indicate that this is a public API.
I think we should remove this check as we'll have already done it in the same file.
this should be in the `keyboardFrame.Height` block, no? If yes this is the case here.
Sorry I missed this in this PR, but just checking, I see that we are not doing this anymore...
I'm curious if it's possible to just call `this` before calling the function?
I would create a default value in the constructor.
Can the `Rule` be replaced with `<Rule>` since this is now done by the `Read` method?
This is a very minor thing but you could also just call `return $ y { y }`
I would prefer the naming consistent, I think `selected-apis-forwarding`, and `module-apis-forwarding` should be more generic (like `all-apis-forwarding`).
Do we need to make sure the `custom` namespace doesn't use `opentelemetry`?
This is not the wrong idea. This is why I wouldn't do it in a `compute_system_run`.
This change is not related to the fix, but it should be reverted.
Why not `set to `GIoULoss`, or `DIoULoss`?
Is this change related to this PR?
Could you also change the copyright copyright?
Is this still needed, does it still return an error?
can we make it configurable?
This seems like a bug, as `version` is not defined above (and so I'd suggest making it as a class variable).
I think it's better to have a method `private`.
do we need this for the others?
Metrics/ClassLength: Class has too many lines. [39/100]
We could use "latest" here
You should use `db.delete()` here.
nit: "The output type for a screenshot."
Why is this not a `string`?
Why not just `for (var key in jQuery.i18n.map[key].replace("Countly", countlyGlobal.company);`
Note: this is a case where the new release is removed, but I can see this is the only change in the PR.
This type has to be renamed to `Iterable` (as it is now `Dict`), so it's more clear what's happening here.
can we use the `jwt.v2` import from other imports?
Shouldn't we also have a separate `const` statement like the one above?
This should be done in $prev_ref
this is just a minor cleanup. We shouldn't be changing the default info here. `get_bytes` should only be used for compression as we are already passing in compression
Can you add a new utility method to make these static?
I think this should be `#if NET452 || NET46`
We don't need this TODO anymore, right?
Why is this removed?
This is a very good thing. I'm assuming you can't use it in a way that's more of a way that's a thing.
I think the variable name should be "SCAPY_ROOT_DIR", since it's not a variable name.
This should use a static constant.
I'm assuming you meant to add these properties in `HMB Sync`?
this is the only case where we're trying to get the token from the transport error, but not the token. I don't think this is the right fix. I'm wondering why we're returning `false` if we're not setting it to false?
I think we should keep the same as in the other PR, to be sure we don't have to add new APIs
Don't we need to keep the old `.` and `.current_page` in the same file?
Is this related to the rest of the PR?
I don't think the "get" part is needed. The reason being that we use here is because "remove" is not the correct type.
`s.hooks` could be moved to a separate package.
I don't think the new attribute name is required.
I'm not sure what `MIN_AMOUNT` is. Why do we want to set the default value here?
Why not make this a `crash-data-subrow` as well?
This is the fix, but the problem is that `./test/test_os.py` is now not a `failure.c`. It should not be here, because the test is failing because the test is failing.
why this change?
This is an actual fix.
This is a breaking change, we should not use `title` as a part of a multi-valued module, because we have no `title` attribute in the UI. We could probably change the type to `titleTitle` so all the tests can be omitted.
Is this a bug? The `SampleType.IN_CODE` is used only in `BaseTransformer` so the `BaseTransformer` is never used, and the `BaseTransformer` should be used as a `static` in this method, and we can remove `FixTransformer` from the `ChasesTransformer` method.
(style) line over 80 characters
I think we should use a timestamp here, otherwise the key may be incorrect. We need to be careful with other types of resources that contain the timestamp, and the new timestamp may contain all new entries.
I don't understand this new `StreamOutbound()` call - it seems like we should be using it directly - we should have a separate `synchronized` method in the other ` Unary` and `synchronized` methods in this ` Unary` class
I would prefer if you'd like to avoid the `participant` here and then pass it directly into the `DEFAULT_default_participant_qos` method. That is, you can have a way to get the value from the `participant` to the `sima` object, and the `sima` object in the `participant_qos` object instead to get the `DEFAULT_default_participant` function.
why not `cpp` ?
This is the same code as in `./pants run/spack.py`, which is what is actually doing here. I'd suggest to move the `and` and then remove the `\A` line.
Why remove these?
I'm not sure about this change, since the `extensions` setting can be `null`, but if you want this change then you could remove the `extensions` and `isort` check below and just call `win32` below. This change will break things that don't do a `const` on the connection
Is there some specific reason why we wouldn't need to do this?
I think the `spanId` is not needed, right?
This was a bug in the next release that it was previously added to the user.
Nit: I think you could just remove this `else` clause.
Why are these `generateDependenciesLoaded` and `name` constants?
Should this be a license header?
Is this a typo?
I don't think we should be calling this `.tools`, as it's a special file for the test.
This needs to be `final` since the `Classic Editor` class has the `ILogger` interface.
What is the difference between `build_langserver` and `lps`?
Would be nice to have a test for this.
Why is this necessary?
I am not sure if it is worth the index, but it might be better to just have the controller return a string, and check for `@articles = @topic.articles.by_published`
I'm not sure about the `is_gpu()` check.
Why do we need to add these new methods?
I'm not sure if `validateFlowExporterConfig` is the best way to go. I think it would be good to move this into a separate function.
This is a no-op, we can just have `Ksclient` that has `statsEngine` and `ClientServer`, and then pass `ClientServer` to `Ksclient.ClientServer`, so you can get rid of this function altogether. I believe we have `Ksclient.ClientServer` to the `clientServer`.
Not required, but this seems to be an unnecessary cleanup
Why not move this line out of the `getLifeTimeInQueue()` function and use that here instead of removing it from the constructor?
This change seems unrelated. I'd suggest to move it to the `invalid` package and add a `TODO` to the `invalid_indices` that is actually used for the case where there are no other types, and if it is then `replace` would be better.
This is a bit confusing since you have `models/v1` and `models/v2` as well, but I don't want to add a `linuxOS` field to the list of supported supported supported values.
I'm not sure if we should use a different name for this. I would rather have the `isinstance` check for it.
Would this fail if the desktop isn't present? I'd be happier with the code to check if it's a windowHandle.
This is the only place where we need to handle the error.
this function is used as an alias in the list and the other one is only used in the function, so you can remove it from this function
I am not sure if this should be `if (Text.standardize(playerName) && player.get(runningPlayer) != player;` but I'm not sure if the player was correct here or not. But if this is the case then we can't just remove the log line entirely?
Can we use `false` for `id` instead of `true` here? (And also in other places too).
Can you add a default value here, if it doesn't exist, and you have a default value, so it will be hard to find the path to the user.
i think we can just use `api_quota_configs = notifier_configs.get('api_quota')` directly here.
I'm not sure about this change - I don't think you need to import something like this. I'll merge it later.
This is a bug fix. We can't change the default value here. We want to make sure the default value change is only used by the `items()` call.
Add `from scapy.autorun import *` as well.
This is a bit weird. I think it's not an `string`, but it should be an `string`, not a `string`.
Just curious, what is the purpose of this change?
I don't think this is the right place for statsd exporters. I think we should just get a statsd data.
We should make sure that the `httpexceptions` argument is available in the `azure-core` module.
We should use a `SetMetric` instead of a `SetMetric` because it's more of an existing one, and the other is more of an existing one.
Why is this check needed?
@franckc forgot about this one
This should be an environment variable instead.
Can you explain why you need to make these public?
This is a bit confusing, why not have the `global_set_option` variable be used here?
The historyShard interface is used only in the history. It's a bit odd to use the new `History` interface here.
Should this be a const?
I wonder if the error message would be more useful if `extras=extras.info` or something like that
Was this supposed to be `.to have_scheduled` or something or is it just me?
can you update the `list_event_id` to check the full typedef and then use that in the `try/except` block?
This should be `protected`
why remove the `isLogin` here?
Why did we drop these?
I'd be tempted to make this a `return` instead.
I think we should remove the `PYTHONPATH` from the os.path here as well.
How about just `o.appName`? This would be clearer if we just use `o.appName` in the file.
This file should be removed.
Instead of a new constant, could this just be renamed to `GROUPS_DOMAIN_SUPER_ADMIN_EMAIL`?
This is the one I was trying to avoid in the first commit.
Not directly related to your PR but why not just use `DisableInMem bool` ?
Do all of these also work? I think we could just remove this and just use `.run['GSA18F_APPROVER_EMAIL'] = ...`
I think this should be `SpriteBy`? Or maybe just `SpriteBy`?
Why do we want to catch any exception here?
I think we should remove this file.
This is a duplicate of the `update` method, not a list.
I think we want to put the `if err != nil` check inside the `if` block.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at method body end.
I would have expected this to be `Sequence.Errorf`. I think the `error` should still be there, because the error message is not in the `add_sync_named` method.
why do we need this change?
Is it possible to get the NPE somewhere? I think we need to check that there isn't any existing value for that attribute.
Is this still required?
We need a test for this
Is there any reason to do this `@example` and not use `preventWheel`?
What's the reasoning for this change?
I believe the import should be removed.
can you add the `is` statement here too
do you mind adding it in the beginning of these lines?
I think we can remove this method entirely, as it's no longer used outside the `if` block.
This seems to be a leftover from the PR.
Should be `authDataHandle` and `authMap` as well?
This will be a breaking change for everyone. But I'm not sure how this works, so it looks like you have an actual bug.
This will not work for any of the others, as this is a no-op.
This can be removed. We already had a regexp and I think it should be moved to a regexp so that we can be able to use that in the future.
I think we can remove this and keep the other classes as `BOMModel`
Why remove the file?
Whilst this is needed for `65` to get the containerized flow due to the pod failure, and it doesn't really make a lot of sense for it to happen, right? If so, this will be the only place where `POD_FAILED_FINISHING` is called. I don't think this is the best thing to do.
Why not `if (!nodeName)`?
I think this should be `Boolean.of(null)` instead.
Was this intentional?
I would use a more idiomatic name for this.
I am not sure if we want to use these for testing purposes. I don't think we can do that.
`string s = reader.Value?.ToString();` can be simplified
Is it necessary to add it?
I'm not sure if this is the right place for this. The new package can also be deprecated.
I think this is not enough for the future, as this is now only the TBB_INTERFACE_VERSION one.
This will need to be changed, the first `localstack_pattern` function will be removed.
Can you add this line back in? I think it's not needed
Use the new Ruby 1.9 hash syntax.
I think it's fine to have a check for `lelow_WIPIP_NAME` here and in this loop.
Is it possible to remove the config altogether?
I think you can get `$this->setTargets(...)` directly by using `$name` instead of the variable here
I'm not sure this is correct... `error.message` should always return `true`?
This is a breaking change. We should probably update the docs for that. It would make more sense to have a "last set" implementation and have a "last set" name in the code base.
Is it possible that you are trying to use `*Proxy` as a name here, and then you're doing a similar check? I think the `*Proxy` could be moved inside this `if` block?
Should this be `let` ?
This is wrong.
I don't think this is a good change. The previous code didn't have the 'Fee' argument, which means it can't be changed. I think this should be changed to 'Fee is more than ' +1' to ' +1' or something.
Should we add a default to the "Ports" struct ?
@bvaradar this is an API break.
I'd like to see a test that failed because of this
I don't like having the `rand` variable here - is it necessary to create the `rand`'s parameter instead of the `Seed`?
It would be nice to have a default here to indicate that it's a boolean. Also, you can just use `--protected-require-chainid-in-txs`.
