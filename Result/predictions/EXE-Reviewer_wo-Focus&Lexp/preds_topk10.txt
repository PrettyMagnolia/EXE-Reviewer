Please update the test with new one.
@jackfrancis this should be the `$this->mainConfig`
This is not the right fix since you've added this in #33395, it should be removed in #5026
Is there any benefit to using a non-NaN value for the actual fix here? I'm guessing it's not used anymore.
Should this be `const`?
These should only be used in one place now (and there as well).
@bflad this is the fix. `line_violations` will be in `line-too-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-Edit-alloc.py`.
Style nit: Use `,` instead of `,` for consistency.
Can we use a more specific term `hkl` or something like that?
This is only valid once (in the `if(== -1)` branch) but the `if` branch is not required since the `if` branch is not required
Does this really make the message of "hiddenhidden"? Or do we need to handle the keys keys?
why only for `shared`?
Can you add more info about `PriorityColumn()`?
This is not needed. It will only work if the "0000000000000000" is not available.
The `provider` is not the right utility function to update it?
@martint This was the only usage of the function. I think that we should try to keep this and leave it unchanged.
Why do these tests need to be made public?
Should this be a separate function?
Please use `John` from this and `John_`
The `return` statement is unnecessary because `dev->_device` is always defined.
This is a potential bug - we may want to be able to use the task runner in order to get the task runner for creating a new task runner for the task runner.
I would use a different name than `NONEXIST_ENABLED` - it's more obvious that it's the one you added
I think the original problem is about `LongType.get()` instead of `LongType.get()`
I think we don't need this anymore.
This was an optimization because the default value of null is a string.
Please add the category description and explain the purpose of this message.
Why is this removed?
This line is now unused
Metrics/LineLength: Line is too long. [123/120]
This should be `static`. Same for the `withWorkDirectory` below.
NIT: Can be replaced by a `LibraryLibrary`
Do you know what the meaning of "result" means? Is that expected?
@kargakis this should probably be moved into the `utils.RemoveAll` function.
I think it would be better to make this separate, since its a separate PR and the one that's being created in `getStatusElement` which is more readable and probably makes the same thing a bit more explicit and easier.
I would prefer if you don't pass `mset` here
It's probably not worth the idea about this (or at least a single call to `topicName` in `createTopic()`) since we don't want to have to pass `topicName` as an argument to `createTopic` in the code.
Why did this change? Is the test fail on older compilers?
What's the point of this test?
Can we just change this to `interface` and remove the `@return` for consistency? I think you might want to make sure the interface doesn't exist as well, and the `@return` isn't required to have the `interface` tag. I don't care how much it is, but just wondering if we might get some thoughts.
This should probably just be `SetTag`
I believe the idea was to update the docstring too
Shouldn't this be const?
I think this change is not needed
I don't think there's any need to do this here, as we already have in those cases.
same as above we can from bc not add new tests.
Please use the `artifactATORS` constant.
This import is now unused.
We should move the block to `m_EShmem_size` and the `device::local_mem_size` above to keep the same behavior as all the other code together.
`else` is redundant here as `if (feeds.get(i).getId()` will be `nil` if `i` is an `int`.
I am not sure if it's possible for `Pool` to be a solid? `Pool` is an internal class, it is still a valid name.
I think we can also remove the `foreach` part
This should be marked as `context.Context`, and the other API calls `Load(context.Context)`, I'm also not sure if it is useful to call `get` with a function that calls `Load()` on the API.
This seems like it would be more consistent with the naming convention as well.
Why do we need to wait for an empty list here?
I don't think this is the right place for this, since the `if` can be removed.
You can use something like `set Promise(lib)`. I think that's a better way to do this.
I would expect this to happen before we switch to the `IsTruthy` target.Label.
Why this? I think we should check both the calls in the `if remaintime <= 0` and `if remaintime <= 0`
@kennknowles is this the place that will be removed?
Is it possible to remove this method entirely?
Please don't use `Collections.emptyMap()`.
I don't think I need the `return number` here, `return positive(argName, number, null);` is redundant. It will be the same as `return number` in the caller.
Is it possible to pass nextNodeId through a function and make it clear that it's only used once?
We shouldn't need to check if the folder has been already handled by your target directory, as it would not be handled by the client
why not use the same logic here?
Is there a reason for changing the `FeednPending` to `FeednNames` here and below, that way the `FeednPending` can also be replaced by an `FeednPending` (which is more of a thing to do).
I think it's not clear that the config is a new config file, but it is kind of confusing as it does the same in other modules
Why is this change needed? I am a bit confused.
This is the first thing the first version is that the value will change if it is not on the first one, which is not the case here.
This could be moved to a separate PR?
Can you explain why this is needed?
This looks like a typo in the wrong order
We don't need these in the model, we can just call the DB without the model.
>table->isExternalTable [](start = 8, length = 6) nit: you are adding brackets to this line. it's not related to your PR, but it's ok for us to merge it in a way that's ok. just wanted to avoid doing this check for the second part.
Why did you add this new parameter?
Do we need to check this as well?
This is the most important fix - can you just change `win_id` to `win_id` instead? I think the method name would be a bit cleaner, like `getPage` or `getPage_id` to match the API
This is not right, this one will throw an exception if the exception is thrown before the exception is thrown.
Why use `Warn` and not `WithField`?
Could you add the arguments to the `RESTRICT` tag? The data type of the keys are a different thing as well...
This needs to be conditional on the batch_trans parameter, right?
I think this should be `not to replace variables like`.
Same here about changing `do_value` to `do_value`
why we are changing the name of the function now?
I'm wondering if `Long pos` would make sense in this case as well since the interface is already defined, and the same interface is not used in the manifest class
This is just a question, why are we only testing the resume twice?
Please also add `zx2c4.com`
I think I would expect you to change `ToString` to `InternalError` here, but this was just a question for `count` too.
Is this change necessary? It was added to `app->resolve()`, but it seems like the wrong way.
`thethethethethethethethethethethe` is not needed
I think that we should just remove all the above code, it's not necessary.
Why use `copy()`?
If a test fails the test fails then do the same for other tests
It looks like this is not necessary since we have already done the check above.
why have you removed the origin check?
This should be `options.RunCStorSPCUpgradeChecks(options.InitializeDefaults(cmd, args, []string) != "")` I would suggest to avoid a separate `using [ [CstorSPCUpgradeCmdHelpText, [CstorSPCUpgrade]]` on the else block.
I guess we need to use try-with-resources here because otherwise the link won't be closed.
We probably want to rename the 'last` function.
I'm not totally sure, but it would be better to have it in a static method and have a static `WIN10` on the `init()` call, then it's more likely to be used as a class method.
This is the "log" type of this function, but not a "log" type. I'd prefer `log.log()` just to be clearer.
Is the idea of a way to write the correct `string.text` check and `string.text` is a string. Is there any chance we don't want that?
I think we should use `getAttribute` instead. The only reason that we don't need is if `ariaHiddenValue` is not `null` and we can just ignore the `null`.
How is this related for change?
why do you need an empty image ?
@jridgewell This is a very weird thing. I'd prefer to keep the `package` package here as it was before before, and add a new `package.package` to the `package.package.package` file.
Should the ports be a container instead?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Seems `RequestId requestId` is always defined.
`side would be nice, but I'm not sure we really need it as a separate method.
Why don't you use `char path_buf[MAXIMUM_PATH]` here? We already have the correct path for the second one.
Please remove this and add a log statement to the `io.prestosql.operator.google.common.collect`.
Why is this needed?
This is a small change in #4379. I'm not sure how to make this change in the PR.
This is a no-op if this is the same as the one in `Reader.New`
Can you add a label here as well?
Can you revert this file?
Wondering how many aliases will get updated for the same reason as in urllib2? I think the idea is that we need a dedicated function. The only time we need is `req.addheaders` is to make it work, and then the first time a registry has the same element as the first time. But this is why I removed the "is IP" part of this test, so not sure what the `urlopen` function works, as the first time we call it.
if `breakpoint` is not None, it will throw an exception. You can use `int64` instead
I'm not sure what the `_w3c` flag is. We should probably use the `_size` argument instead
I'd prefer to call the `apm` package as `Converter` and `Converter` in these `src/main` to indicate that they can actually be used for the user.
I would use a new name for this type as `Grating cheese`
The issue is that this is a change from a "default" command, but is this a "default" command?
Can we rename the "app.kubernetes.io/name" struct to "prometheus-operator" instead of "app.kubernetes.io//name"?
I'm not sure we need to do this. It seems that we should only do this for every single query. If we are not doing it yet, then I don't think we actually need to do the right thing. The right fix should be to check for null here, since we do not want to make sure we don't want to do the right thing.
Should we use `ioctl/cmd/xrc20` for consistency with other places?
I think this should be part of `inst`
Is that the default setting of `false` in the constructor? If not, can we rename `is` to `true` or something similar to indicate that it is initialized with `true`?
If I read this correctly I would suggest a `type number of bytes, 0 = "media"` (in the `media` argument, not just a `Sync`).
Should this be named `isOrdinal` ?
This is not a big deal, but it seems like a lot more of the types that can be used instead of `typeOf`.
What is the use case here?
This is a good point to me. The correct fix may be to fix the test suite in a different file. It was to fix the issue in one of these things that I have been checking for a different PR.
Can we also move this to a new class (on the other ones in this PR)?
Isn't this the request request? I don't think we should be setting it here.
You need to do a copy here and then pass in the view to the state in the `After()`. Otherwise it won't get executed as a reference.
Why did this change but not `glog.Errorf` ?
This doesn't feel like a safe change. Perhaps we should add some description about what was there before?
Please add an assert here that the dataset is linked to the same dataverse again.
Does it matter that it's only used in the `text` and not in `text.go`?
I believe this should be the one we want to clear, it is the "scope"
I think you should put put a warning in the name of the function and have the warning in that method instead of repeating the function.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Can we call this coma_separator and keep the parameter for the array?
You need to fix the indentation to make it more obvious that the two cache-type variables are actually used.
Isn't the browser selected anywhere after the remote version?
We should log the stack trace so we don't get this message.
Why this change? This is a `SetParentProvider`. Is there a reason why that wouldn't be called without a `SetServerProvider`?
I'm not sure about this. It seems like if `args_based_graph` is empty or empty, this will never happen. It's a test case. I think it's better to keep this check for `can_WelcomeData`
This is the main change of the PR: it'd be nice to keep the ` master` part of the `3pz` prefix.
just a thought, but we were going to try to avoid the import in `nnictl store`
Why did you have to change the text_reader to just the new one?
I don't think the extra conditional here is needed.
I know it's not your changes, but if we are just using the snapshot name, we should probably use something like `Restoring` to be consistent.
The logic for `offset` should be removed. The `type` is not needed since it is in `char*` block anyway.
Why we need to handle the case of showAutoDownloadReport when it's only a read read/write of it ?
I think this is not used anywhere
Could we have the `ListAPIKeys` method in the name for the variable instead of adding a new method?
Is this intentional or am I overlooking something?
is this necessary or is it just for debugging or is it intentional?
I'm curious why you changed the assertion for the new parameters?
You can move this to `#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{
This is going to change to: 1. Is that a valid behaviour? It looks like there's a new version of the `path}:{line:3d}:{column}:` containing a different path to the message itself. Is that the only way we can do this here? What if we do, we can remove the `path}:{line:3d}:{column}:`, then we don't need `path}:{line:3d}:{column}:` here?
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
You can use `getLease`.
You're missing a "list of object of a list" annotation in the previous one, and it's not necessary, so I would suggest to add a new one
Hmmm, the data is always created when it's not yet initialized ?
There is a `const` block here. The `pull` variable is never used.
Is there any way to disable this line?
Should this be `currentQueryURL`?
Why is the `externalNodeCIDRs` not `true`?
I think this test test is failing because `testing-testing-RS.js` can change the test so the test can change without passing `syncTables` to the test, no? I think the test will change if the test fails.
I think we should not have these packages in the test file if the test file fails with a hardcoded test, and we need to pass in the test function to the test url
We should probably keep these as the library version as possible. We should at least keep these as we've got the same work on all routes.
We should be able to do something like `LOG.isLoggable(Level.FINE, "Could not find class " + e);` instead of `NoClassDefFoundError`.
The "DelayInSeconds" and "Attempts" seem to be confusing, since they only used to set "filefile" and not "filefile"?
This can be merged with the other changes in this PR.
I don't think there should be any change here
Please use single quotes here and in other test classes for our own.
Line is too long. [83/80]
Why is the cast to int here just making it non safe?
I think we should add a column for this so we don't have to make sure we get the same behaviour here
Please move the `<=` declaration to a new line.
nit: it would be nice if it can be private.
Is this a change in behavior for the PR?
I'm curious, why this is necessary?
I'm not sure it's safe to do this. For example if the `readPreference` property is `null` and the `readPreference` property is `null` and the `!String.Empty()` method is `true` in the `readPreference` case.
Do we need to set `30` and `30.Second`? If so, we should use `30.monkey().assert(30) - 1) - 1) - 1` instead of `30.Second`
We could have used `LOG.error` here and in the next one like `LOG.info`
Why do we need to check here?
I would keep this, but it's really unclear why I have to keep the `IEnumerable` annotation for now.
I think this change was not needed?
we could probably also just put this on the `skip_before_action` callback since it's only used internally in the `before` method.
Is it worth having a test for a simple test that uses a different class name?
this change is not needed anymore
Please use `use` instead of `declare`.
I would have put the `0` at the beginning of the function, it's a bit hard to see what it does, but it would have thrown a bug when we're doing things like this. Maybe `_` or `good` would be more appropriate?
This is a very small thing, I'd say we want to just make this a `FetchKeySet()` method
Please add a TODO note that this field is used to determine if a new one is needed.
I don't think you need this `var ([]byte, error)` since the first `var ([]byte, error)` is equivalent.
`__init__` may be better
@deads2k @smarterclayton will need updating the path for that?
I think we usually import the library from `api-ec2` instead of importing `v4`.
Do we need to add that check to make sure they are not used?
What was the motivation to use `snprintf` instead of `str`, to avoid the warning?
Shouldn't this also be added to `FastForwardBackoff`?
Is this needed here as well?
It's not immediately obvious why we need `spec/workers/workers` in `authenticationModel`, I believe that we have `guaranteeasy/govs.go:6.4` in `authenticationModel` for rendering type names. I don't have any strong opinion on this, just wondering if we should have this as `final` and `final` in the name.
Not sure if it is necessary to add a `getAvatarFilename()` method to it.
I'm not seeing where `.Unavailable` is used but in which cases this was used.
This should be `public` because otherwise we don't really expect `null` to be used and will never be used as an implementation detail.
This change isn't needed.
I wonder if we should also include the other types (like the `Mock-Control-Allow-Origin` and `Mock-Control-Allow-Origin`) in the other files.
This seems like it might actually be the only place that needs updating.
I would change the default value to `True` in the test name, as this is not a part of `True`
Isn't this already `static THREAD_P CostMethodHbaseDelete::costMethod()`?
I think it is a good choice to use `uint32` instead of `ProtoIPIP` to avoid any confusion. @kroitor But I think you're right to use `uint32`.
Would it not be safer to call `putOpt` here?
I think this can be removed as the test is failing. now that the test is still running on Windows.
Wouldn't it be nice if this was a `bool()` function?
This is the only place where we're using this - I'm not quite sure about the error being returned. The error is only needed if the errors is actually a non-zero message.
How will the format be `@output_buffer`?
Is this the only problem? Should `squeeze()` be 0?
I don't understand how you're using this file? I feel like this would be more appropriate than a whole file that you can't use the "cur", just so you could use this file in the future.
remove the empty line, please.
These kinds of constants are superfluous. Perhaps `/session` and `/or_password` would be clearer?
Can use Dimension to import the Dimension of Dimensioned in the middle of the model
In this PR, you should change the `Groupingimap` property to `minimap`.
`std::irange` is the same as `std::size_t{0}`, so `std::irange` is only used in one place in this loop, so `std::irange` is a bit redundant. Can you explain why? Also this is a different change.
@jridgewell Could you also change the name of the plots for a new function?
remove empty line or change it
you are still setting the condition on the `this.capabilities` here, is there a reason the constructor can be removed?
this was a no-op if we are not going to be throwing away the `owner` object as a user-visible, and not an empty object
`\w+` in test_data. seem like the best idea.
Can you change the name here as well?
I think the more specific term `_example` should be a `String`?
Can you also make sure there is a caddyhttp/fastcgi/go for this project as well?
It's a breaking change.
This import is unused
This could also be a property of the `Map`
Why remove this?
Why not use the `<img className="googlesitekit-publisher-win__small-image"` as the default? That is the reason to use it in the code base, so it might be a little cleaner to use the default here.
I think it should be in the constructor.
why is this line needed?
I don't think this should be here
This should be `static`.
Why do we need to make sure the `isNaN` is always 0?
Hmm, do you think we should change the name of the variable here? It's a little hard to distinguish.
I'm not sure about this one. The only difference is when `char_VALUE` is `destroy` and `destroy_VALUE` is `destroy`, but is that intended?
Should we just have an overload of the event and pass it in in the event?
This is a change in behavior... how is this related?
This is not true. I'm not sure why the existing test case failed. Can you explain why is this required?
I'd rather use an `if` here instead.
This is a little confusing with the name of the definition. What happens if you don't specify the `Set` and `file_resolver`?
Does the `isNullOrEmpty` do the right thing here? If we are going to allow for the "isNullOrEmpty" to be true, we might as well get rid of this method.
Maybe use a different name, e.g. `_CONCURRENCY_VERSION`?
same question about naming, why not move this into a helper method?
@jona-sassenhagen @martint Please confirm, we don't have any way we could have `NULL==True` or `sys.get_status()`
This line will be tested in your PR
Please put this as `xo.level.lookupAccount` if it's not there.
@stephentoub why we're not have it in this file in the PR?
This is the only change in this file. We should probably move this method to the interface (in `DataflowClient.py`, if it's a public interface for the interface), so I'd suggest to add a new interface like `@Restricted(NoExternalUse.class)` to the interface and have a new one for the interface that checks if it's in `DataflowClient.py`
We should also mention the type of `DD_HTTP_CLIENT_ERROR_STATUSES` to be consistent with the rest of the file name.
Nit: We usually use `_data_size` instead of `esp` and add a trailing comma.
Is there an issue tracking the change here?
I think the `else if` should be the first message, not the directory.
I don't understand this condition. It seems like it will always have `current_user.requires_profile_attention?` when `current_user` is `true`.
Use 2 (not 4) spaces for indentation.
I think that this should be `return (int) granularity.between(EPOCH, timestamp).intValue())`
Can we remove this one?
We could add another property for `EVENT_` that we could call this. Otherwise this would break any existing code.
Why this change? Seems like it should be in the constructor. I don't think it's a very good idea to change the name of this function, since it is more clear that it is being used for a few methods.
@Pearl1594 is the reason we are removing these `StringUtils.StringNullable`s? I can't remember the reason for that, but we may have missed something.
i think we can now just pass in a `model`, i think we'll need to add the `.model` in
Do you need to call `os.RemoveAll(dir)` when you are using the `file.Name()` above?
I think you don't need this extra check. The only reason you are using `savestream` is because `uplink != null` is the only thing that should be returned in this case.
This might be confusing as the `.0002` was not being used in a generic way.
Why are we changing this? (Or did it do?)
I would add `type` here, as it's not needed.
Why does this change?
Why the change to L74 instead of here?
I would keep these as separate dependency, as I have no idea what's going on here. But I am also fine with it.
Standards: Please add braces to this conditional statement.
Was this change intentionally here, or is it needed?
Can you explain why these changes look at?
Can you change this to `eval.totalTxBytes = 0` and use this in `removeState` as well?
Metrics/LineLength: Line is too long. [97/80]
This is a breaking change as the default implementation is a `markdown` instead of `_markdown` but this is a breaking change.
This needs to use the `HTML` controller.
Does this need to be a `Array.isArray(options, Array.isArray(options))`?
This isn't the intended change. If you want to avoid the need for a specific change I'd just remove the `activKey` argument from the `activKey` and `activKey.` as the default value from `activKey`'s constructor.
It is not really needed here, since we use `import org.openqa.selenium.remote.http.*;`
This seems a bit too much for `gulp dist` or `CompileCompileer`...
Can this be moved into the `getCacheGetter` function?
Can you please change the name of the var to `tealAppSize` or something like that? It's confusing, since the type of `tealLogicSigSize` is not in the list, it's very specific to the UI, not the other one.
Why was this removed?
style-wise, this is a BC-breaking change.
We need to pass time as an arg here so that we always call the request for every single request
Should we check if the resource exists in the resource is not the same as the resource address?
Should `network::NetworkUtils::toPort()` be `final` here?
This can be `var_loc_keys=self.driver.find_element({'id':'Id_123',}])`
What does this change do? I thought I'd be going to be missing something.
I think that this should be `public static string ByteArrayToHexViaLookup32Safe(byte[] bytes, bool withZeroX)`, and it makes it more clear that there are a nullable check.
I think you can remove the `vNode.children.forEach` check
@mitchellhenke Is it possible to use the `ReadAsync` method here?
Was this a bug? If so, should this not be needed.
This might not be necessary.
why is this needed? I thought the name passed to the filename passed by name is a bit misleading.
`throws IOException` seems to be unused, can we remove the `protected` from `protected`?
I suggest to add the new parameter at the top of the function: `RDKit::ROMol &mol, const DOUBLE_SMART_PTR *dmat, bool dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir dir_IN_LLLE11, ...`
I don't understand why `guid` is `null`, but it seems like the `if` is necessary here
I assume this is the most reasonable way to test the SidebarCheckBox type?
What about other options as well, e.g. `getBuildRequired`, `getBuildRequired(svc, error)`? That's what we usually do. `TestBuildRequired(svc, error)`?
This is not being used
As you removed the `0`, you can remove this entirely.
@chlowell can you please update the docs to include the new `filename`?
I'd rather return `nil` here.
I'm not sure if this is the right fix. The `chainID` is used to set the `finally` below.
I would suggest just `return ContextWithRemoteSpanContext(ctx, sc) Context.extract(supplier))`
Wouldn't it be easier to read to do the ` paginated /*= true` here and then you do `Container(type, (maxDepotItems(2000) || !model.h)`, to avoid the `&&` in case of an unnecessary variable?
Please remove this.
This test should be using `ValueError` instead of `'b'`.
There is no need to change if you're just replacing this with `random_opmask == 0` below.
@danrot I think it is ok to just add this to the server side, i.e. it is only supported on the server side
I think this should be a `ipsecESPOverhead`?
I would move this `final` into it's own method.
This should be called `config` instead of `config` as we are already writing to the `config` package.
I'm not sure what the error means. Is this something we are doing?
This is the only place where I don't want to have `fileServer.Pages.basicAuth`
you have to check that the filter isn't available here
Shouldn't this be done in `setDesiredFailureMsg`?
`request` could be statically imported as `@Deprecated`.
This should be `mutateMode` and `offlineMode` as default.
We could add some property to the message and the exception.
Why the change to a mock?
We should use `vim-for-rails` here, instead of hardcoding it.
This can be removed, since the `ocore` is now imported and not imported.
I am wondering if we should just add this to `lib/server/__init__.py` and add an explicit error that would be thrown in case we ever want to keep it. If I'm not wrong, what if someone is using this for something that was using `lib.server/pure.client.client.client.client.annotations.ping` to be called from the other code, or if it is something we should be using?
This is an API break and I don't think the API break should do the work.
This is not really correct, you need to set it to the default. You can just use `cb_state(0, len(ok=True)`.
This change seems unnecessary to me
Not directly related to your changes, but it seems we should just remove the `REVIEWED` part and call `local::COMPLETE` directly in `make_remaining_for`
Why removing this?
@jridgewell any reason for making this change required?
If we are going to change the version of a non-test version, this will break existing code. We should just change the version version in case that the `version=0` is not in the first place.
Can we use the new one instead of the second one?
The `puppeteer` was being used in this file, it is unused now.
Why did we drop the `local` here and in the `old_sys_path` method?
nit: we are not exposing the number of items here.
The only thing I'm not sure about this one is that `kREAD_SYNCH_SUSPEND_FAILURE_IGNORE` is an `Date`. Is it an `Date` for a non-unwrapped case? If so, why don't we just change ` THREAD_SYNCH_SUSPEND_FAILURE_IGNORE` from `kREAD_SYNCH_SUSPEND_FAILURE_RETRY` to ` THREAD_SYNCH_SUSPEND_FAILURE_RETRY` to ` THREAD_SYNCH_SUSPEND_FAILURE_IGNORE`?
Could you add a link for the installer option here?
This is a good place, but we should try to avoid using the switch-case when we are not trying to do anything here, but we should keep it as is since we will not be doing the change here. I think it would be a good idea to do something like `[] 0` and then just use an if statement
do we need this function now?
I think it will be good to put all of these in some `osrm` package. We need to check the error message in the `osrm::util::Log` method, because we need to check if the `osrm_util` is not running.
This is not the same as the other changes in this PR, right? The PR description says "unusable" but it's not clear what that this is doing, it's a little too broad to me.
Can you please add a space after the first opening bracket?
shouldn't this be done before the `use Thelia\Condition\FacadeInterface` call, or is that the only thing we use in that file?
Is it correct for the URL to include the extra DB? I'm wondering if we could use something like `https://pdfjs.robwu.nl/logpdfjs` to get this status code.
I don't think this is necessary since we have it in `azkaban.jvm.cmd.args` but it seems like we should be using them here, not in the `libkb/` specific PR.
I think we need to keep the old import and remove the `_x` part
This is not a great change. I can't figure out why. Is there some specific situation where this isn't a valid default (the default?) would be `null`? I think this is a bit weird.
I think it would be more appropriate to just `xx_NULL_HANDLE` and `xx_NULL_HANDLE` to match the `VK_NULL_HANDLE`
>chrono::steady_clock::now () [](start = 8, length = 7) I think the `add_add_add_this` line should be in the `if` block, since it's a list of `wallet` block.
This was an important change which I was about to make sure, but I don't feel strongly either way.
This is going to change the behavior of the "SimulateExecution" to "SimulateExecution" because that would have the same problem with the previous message "SimulateExecution"...
We need some context to make this a default so we can use the default in the habit
Can this attribute be removed?
I would actually say that the previous version of this class is going to be used in this method. Maybe `getObjectObject()` or similar
why change this?
I think you need an `rename` here, because there's no way to check `rename(name)` in the alias (which is already defined in `rename`). But I don't really like the use of `rename`.
`QUILT_USE_TQDM` -> `QUILT_USE_TQDM`?
I'm not sure how this is going to work - it will be good to go.
Does the last parameter not work anymore?
This test was introduced by the new tests, and it was removed by accident.
Please don't add trailing spaces to the end of the file
Should be renamed to Config and Config to Config?
Wouldn't this be better to check the response?
why the change of the pool?
Can these be `DER`?
Why do you need to close the handler?
Should we also remove the `context`?
I think this is not needed.
Nit: we usually use `skipOSConfig.is_empty()` and put it in a variable.
This is the cause of the bugfix below. If the user passes an empty collection as a result, it will be null because the next frame has to be passed an empty collection. I am not sure why this is necessary, but it will be removed.
Is this something you want?
This is not needed here.
Can we make this a class member? Then we can remove the instance instance variable.
This is a good change, you could also add the `id` argument when the `==` case is specified.
It looks weird for this to be called without a `fprintf` call, because the `read()` function can only ever be called if the condition doesn't exist, since this is the case in `read()`. But it is the only place that calls `num_read()`, since it has a `fprintf` function, it could be called with a `return 0`. Then the condition should be renamed.
Wouldn't it be easier to check `null` here?
I think these are the only parts of the code.
I think the more I have to change is that we still have to do anything with the iterator, no? I don't think that would be a good change since the iterator itself doesn't work with the version.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
The existing code should be written `.Default()` instead of `.MaxTargetIterationCount(20)`
Any reason to remove this?
`repo.init(repo)` can be replaced with `url` and `repo.init(repo)`
Is this the case?
Probably want to add `#define_reader` to the `add_setting` as well.
So, I'm not a fan of adding these functions to the client-side code. Is there a need to remove the method for the local testing?
this was a mistake
Why this one is `None`? It seems to me it would be better to have the `self. '_current_key', None)` return the value rather than `None`? Then we would have to do the `isinstance` check here.
why not using the enum?
I think this is still a good idea. We don't want to allow timeout as a default. The first timeout is the default timeout.
Should be: `The max length of the params`
Please revert this file.
This is wrong. `info` is an `Error` on a non-`Executor` constructor.
why did you change it?
This interface is only used by `service.lang`, so I think it is a good idea to expose it in the interface.
Why not call this `CStorVolumeReplicaList`, and then have an `Write` call it everywhere?
This line is the same I was doing before.
Should we just make this `nil` as well? `github.com/aws/sdk-go/aws` seems not very elegant and more clear.
I don't have a strong feeling about using the `PipelineSecret` variable, but I think this is fine to have, but I'd prefer to not do it.
This function does nothing. Is it really really what we want?
Please use `apimachinery.pkg.api` instead of creating new external items.
Isn't this a different exception than our code base?
I don't think we should be using this outside the QUrl. Instead we should use `slow` instead to avoid this.
I'd suggest changing the signature to `lib/utils/` instead of having `errors.go`
It's interesting that this was a bit confusing to have a `*` in the `*` at the end, but I think it's just a `*`?
Should we also check that the `123456` is present for the `getReference` case?
Is this function ever used?
Is the `name` argument still needed? The window is always a window, so you could just use `name.toLowerCase()`.
Why is that?
This change seems unrelated... it was intentional to remove this?
This is the reason for making the change in config.rb
I think `info` is enough. It will be a good place to put this interface.
I'd prefer to have `Close` a `defer`, but I don't really like it. It's probably a bad practice.
Could you explain why we need to expose this?
These two methods are not really needed anymore because they will be removed in #10714 and will be removed in #10714
Is this the only real change to `auto_PREFIX`?
@becker33 can you confirm that this is just for testing? It's not the same thing as in master in this commit, it's just my opinion
Why did this change?
Can you add a todo to set the cloud in the interface to avoid ambiguity?
@karqing01 could you please change this to a more generic `options.diffed`? It is not used, it should be removed from it and not from `isHydrating`.
@wachterjohannes Why do you need to check for the call_user_func_array() function?
Is there no way to check this when `sc.IsValid()` is `null`? I'd prefer if we could use a separate `elseif` here instead: `return ctx.IsValid()` will avoid an `if` statement.
Hmm. I don't think you need to change the behavior of the `Erstellen und` as the last part of the test suite anymore.
We should have an `-last` key here, so we have `--verbose` for this
Same as in the other file, this is not a query object.
These values are not defined, they're all "s2" but also used by the params.
Why do we need to get rid of all of these?
I think we need to keep these in the same change. It seems like we'll be removing the old code.
@mattcmgar would be better to use the 'PROJECTS' parameter and 'cloudsql' arguments here as well.
Should we make this optional?
isn't the expected return here?
Can you put the "data" in a single line? I think it's a little bit overkill.
`if (not conf.use_winpcapy) and (not conf.use_pcap) and (not conf.use_dnet):` I don't think this is the correct approach, because this function is called by `scapy.sendrecv`.
I just checked that the name of this function is a `from dagster.*` but it's not an object-wise.
I'm not sure we should be moving the line after this one, since it is a new line of code.
Why not keep this for all env var, rather than just forcing the credential parameter?
This looks like it only works for Python 2.0
Should we add a docstring that `color` can be passed as a param here as well? We can't make it so it is easier to understand what it is.
@liggitt do you know why we are using this version?
no need to `r` here and below
I am not sure why you are changing the order of the arguments here. Is the 'empty' the 'type' and 'err()' of 'err' and 'results' to be consistent with the rest of the arguments?
What is this for?
This should be renamed as well
This is only needed in the coreclr codebase, right?
I think this should be `wn.log.With("Peer %v disconnected: %v"`
Was the removal of `rgf` necessary?
(style) line over 80 characters
Is that a required parameter or should this be removed ?
should this be `fromategy import current_app`?
Can we use featureset.LongDomainFeatureSet.getDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainDomainSet instead? We should also have a check for it.
Why do we need to specify the version here?
This is going to be a big change in the changelog since all these commands are not in the specific file, as it's only one feature in the file, and I'm not sure we need to make these new stuff configurable. We can do this in a separate PR if you prefer.
I believe there is a reason for these changes, but you didn't want to have them in the URL
This is the only change that affects the existing API. Please fix. Also, I would prefer we keep the old version and change the new version to use the new one instead.
This is also not a good place to start the right thing, since it's a new good idea for this to be a single row, but we may need to change all of the existing code to be `TODO` (which is what the right thing to do to make for the next release).
I'd suggest to use `slaves.get(0)` here.
The test is still failing because this is only for testing purposes, so I'd rather have to re-use the `ano` flag instead.
Please remove the "pull" part here.
Well, this is a change in behavior so I just made some changes in the future :)
why did you get the `page_style` in the `static` method, it is already in the `_post_style`?
I'm guessing we should do this in an `else:` block, to align with the rest of `obtain()`
I am not sure I like this, but can't you just do `isinstance(dataTransfer, callback) || dataTransfer`? I'm pretty sure you can't change the code here as this is a new feature, as it has a function that just calls this function which will always work in firefox.
This was removed because the `resource.go` already has it
Why was this added?
Can we use a more specific type like this: `return sourceId == that.sourceId && sourceId.getClass().equals(that.transform))`
I think it's better to use 'ImmutableList' in the parameter list, and then pass 'ImmutableList' as an object.
Could you please rename this class to `@author` and then change its signature to match the new API.
This is a good idea, I'd rather see it as a separate PR, but it's a small change to the `ASSIGNERS` for a specific reason
This was added to the `FakeFS.activate` interface
This is the wrong place for this - maybe `stats.get_stats_to_json` should be passed in in the stats object instead of just the stats object.
Is this ` ASSERT_packaging_REACHED` for all cases where it gets overwritten?
Why are we doing this now?
should we just remove the RECONCILED class and keep the others as part of the settings?
Line is too long. [83/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why not just do `gulp dist --hack --close --no-setting`?
@jridgewell Could you add this to the `identifier` of API docs that `identifier` is not null?
We have the same problem for `proto/require` but the test is going to run on Windows. Can you fix this as well?
I'm pretty sure this options argument isn't required for the `keep_alive` argument to work, but now it's in a different pull request.
Why does this need to be checked?
If we're not using this anywhere else we should remove the `Time` value here.
Should we make this an error instead?
Is there a reason why this is here rather than having the body be different? It looks like it's only used once on the first parameter, and the second parameter isn't?
`all_elements` is a `_find_elements(driver, driver)` method, so I would change `_find_elements` to `_any_elements`? (And, if we're already setting `_find_elements` directly to `_find_elements` we can change the name to `_any_elements_located` so that the method name is only used for `_find_elements`.
This seems to be unused
Why do we have both `""` and `None`?
@davidjumani is it possible to use "bolt" instead of "bolt" ?
Revert this change.
same here. we could have an return here
I think `OnInitialize` should be removed and the enum is cleared.
Should this be `else if` ?
We should remove this class entirely. This is no longer used, and it is only used by `jit-existing import`
I would prefer to see a `\n` and not a `\r`. I'm curious if it is used elsewhere.
Why is this needed here?
Do we know for sure that we are only ever hitting a single `skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/`skip`/
@lilleyse this check is needed to ensure it can be not used. The default behavior is to check if the directory is not set by the user in both places.
this should be in the list of files not in the file
Can you add some description about what this is and why?
It is better to use these as constants for now, and have the same pattern as in the other places (i.e. `hcl/profiling/enabled`).
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This one is wrong - there's only two changes here: 1. `ComponentComponent` returns a new type (which is `ComponentComponent`) 2. `ComponentComponent` returns `ComponentComponent` if `ComponentComponent` returns a `ComponentComponent` if it is `ComponentComponent`
This is just a copy and should be moved down to the next if statement.
Can this be refactored to use a single quote, rather than a list?
Why not just check for the `id` case?
Should be `<=` (the parameter does not match the class name)
We should also include that in the `siteInfo` struct. I think we should move it to the `siteInfo` package.
Why remove this?
I'd like to understand this message. Is it only for testing purposes, or do you need to reproduce this one?
Why do you need to assign to `***` here? It's already pretty important that the `Plugin` function is in `*` function, but the `preferred` function returns the same value, so it's only used in one place and could be used in this function. If it's not in this function, it should probably be removed in `base.py` file, too.
Why not use `run_run()`?
The record has no schemaMan...
Shouldn't we use the path to build with a `lib_parse_json` function?
Is there any way we can test this?
This should probably be renamed to something like `config.Labels.jit.operated-alertmanager`
Why is this `default` instead of `default:false`?
I think this is not needed, since it's already in `Expire/info`
Please update the file: the new Ruby 1.9 hash syntax.
Could you please change this to `input_type = "logging"` ?
I would not expose `MessageSource.Plugins` for this class.
I see no harm in using it in this PR, but I do not know how to get to it - the `alpha` variable is used to get all packages of the `alpha` key.
This is a bug fix. It should be conditional on the return value, not the code.
This is an oversight but it is a good change in behavior...
`is` -> `is` or `||`?
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
could we change this to return `err = app.ContainerName()`?
Please update the docs to match the other files
Why is the import added?
This one probably won't work anymore.
Is this used?
I think `Object.forEach` should be enough, since we are not using the `Object` function.
I am just curious why this was changed?
We can't use `ui.message` here because it can only be used in one place, so it's not a big deal either way.
This should not be in this PR, if we really need to make it more explicit about the message.
this needs to be added to the `timeout` interface.
Is it worth logging error as if it doesn't have a semantics of `Unknown` and return it? I think that would be clearer if it were ever used more than once in the future.
Why is the new payment check removed ?
@deads2k i'm not sure this is needed? I was unable to remove the `load()` call as well.
I think this can be simplified to `validateRead(params, 'core', countlyApi.data.fetch.fetchMergedEventGroups, params.qstring.method);`
This can be null. The right fix is to just use `read.locality.task.initialize.threads` to avoid unnecessary null value.
I think it's better to move this to the existing `buildDeployedConfig` package, and add it here too.
this should be `VkDescriptorSet`
I think I'd suggest adding `.format()` as a constant.
`strnlen()` is unnecessary, since you don't use it anywhere, but `os.path.nlen` will never get built.
We should add `cc` key here and make sure that we have `cc` in the UI.
Would be nice to test the whole class
you forgot to use the () here (and above) ? if (election->blocks[block_a->hash () == block_a->hash () ?
Can you also add this to the `getExtendedTypes` above?
This is an interesting change, I think we'll need to fix it when I merge the bug.
If you add the `for (var i = 0, name = categoryNames[i]; i++)`
Isn't this already a `static` field?
Is there any chance you can get rid of the `v.length === 24` check?
Here the `getPropAfterBlock` check is redundant, IMO.
I think we can keep the assert that the error isn't equal (or any error) is equal to the error.
Why are these both `err` and `err.Set`?
This is not needed.
why not set it here?
This seems wrong, the test_fictional_character_name does testing the same thing. Perhaps you want to test the program and testing the different name?
why only need one extra block for the maximum result.
I think I'd rather have it be a `Parse()` function.
This is not needed, the build system will be moved up and deleted
You can remove this.
this should probably be `ErrorDurationInvalid = "ErrDurationInvalid"`
Please update the doc accordingly to `0`.
Would it make sense to move the `plan` to a new `private` model? That way it's easier to see when it was already being used.
Can you make this `const` please?
Can we use `@NotNull` for the second param? We could probably make the field non-nullable
Why is this being removed?
Should we also update this key as well?
Is there a reason for these strings?
I don't think these changes should have changed in this PR.
Should these be `desiredUID`?
this import should be `v1beta1` and `v1beta1`.
We should use `RouterUnrecognizedEncodingError` instead of `lib/context.go` right?
This is not a boolean parameter but it is used for me. If we're changing all this variable here, why not use `final`?
I don't know why we need a copy here.
Why is this a `URL`?
Why are we removing the `||` and not this line?
Is it worth adding a function that returns null?
It's more clear to me why we need to use the namespace here, since this is a `@since` - that will help me understand what this class is doing.
Is this change intentional?
Shouldn't we be doing the same thing in `./pants help` ?
I'm guessing this can be moved down to the `itativeParser` class?
Can you change this so that `storageTarget` can only be run once for tests?
Why do we need to change all of these?
Is this used?
why is this changed?
can you add an example here that this will break the `for` loop (in the future).
I wonder if it would be good to get rid of this and just check it in a `None` value?
This is only used by one test. I don't think we want to be adding the declaration as an attribute to the interface for the case of a parameter.
Should be in the task.
I would have created the attribute here, but not everywhere you need it.
I don't know if this is an issue in the first place...
nit: `com.google.flatbuffers.*;\n\n@SuppressWarnings(\"unused\")\n` is unnecessary here
Is there a chance you could use the `jetpack_` constant somewhere? It might be useful here to have the same concept that `modifiable` could be an instance variable to return the same object?
Do we still need this call?
This test is also not testing whether the sessions is running or running. I don't like the test here.
Can we make this a helper function for the `isRelevant`, or something.
This should probably be moved to `mypy`
Should not this be an actual error now?
I think the logic here should be done in a separate PR
why not use `io.prestosql.operator.interactive.npm.ointer_embedded` instead?
is this file still used?
I don't think it's the best way to do it here. It seems like the user would expect to get this working.
nit: should have a single space between the closing parenthesis and the closing parenthesis.
Why do we need this change?
We should also add `@return` statement here for this method.
The argument to `isglob` is a `const`.
remove empty line
Is it worthwhile to have a helper function in line 264?
Please use the `onConfig` helper function.
`plan.present?` is a bit confusing to me. Maybe it's worth checking if `has_active_subscription?` is a subclass of `#has_annual_plan?`. It looks like `has_annual_plan` is true for both rows.
Is this necessary? The problem seems a bit to see the difference between `too-many-locals` and the new `too-many-locals` but it doesn't seem to be used anywhere
Why not `AlertmanagerConfig`?
If this is a `OPENSSL_node_comp`, it could be `context.get_struct dag_node()`
I would move this line up with the other `model_cfg`, since it's used in the different areas.
This is a very common pattern I mentioned in #1846 and I don't like the idea of just removing the `omitempty` field.
This is a nice cleanup - if we are not going to run this, it seems like if there is a good reason to go to an explicit `return buildRequired(s.Image.Image)`.
Why not add the `build integration` keyword here?
This will not be a case-insensitive fix. I think you need to check for `vIV(ST(1)` for both -1 and -1
I think the `Keccak stateRoot` is not needed anymore?
I believe we don't even need this because there's no change in this file. (I don't feel strongly either way.)
Can you also rename the field `_getAPSHOT_COLUMNS` to be a bit more specific?
"This service is deprecated..."
nit: extra whitespace before each line
I wonder if this should be an `int32_t` instead of an `int32_t` for all the places it's defined. The code looks a bit too broad for me to understand what is going on. It looks like the `maxSpeedChange` is for the `if`/`Process` block to do here.
why this change? should it return the error and be handled in the error message?
This is the only place you have in the `else` branch, why don't you do it here?
Is this a `modeman.leave`? If so maybe it should not be there.
I thought we had already added this in `updated_ester.py`, but I'm not sure if we need it here?
I am not sure I like the extra spaces here.
This could be `activity.SetTag(SemanticConventions.AttributeHttpClientIP, xForwardedFor.Split(',').First().Trim());`
Does the full path need to be updated to use the new nebula::registerHandler?
The `else` branch has a chance that we should be able to set `View.GONE` when it's already set to true, so it might be simpler to move the `if` statement out of line 162. IMO `future` is a much nicer, because we don't have to pass in a constant or `false`
what does this do?
Is this a related change in the PR?
Should this be a `core/api/core-api` API?
should we use the SQube here?
Is this intentional? It looks to me like the code in this function is not related to the rest of the PR.
I would rather see the value of `global` here, since it seems to be more likely to be changed to `has` in the same `if` block above. The `if` is the correct thing here, and the `is` operator should be changed to `if` instead of `
I think it would be better if the user explicitly put an `Operational` in a `SELECT` package. It's an easy change for the future, but we could have something like that.
I think I should use the `user_to` constant
Is this a leftover?
The default of `True` for this is `False`. It is the default default for `True` if you want. It's only a bad practice.
I think it might be appropriate to change this to `Programrcontroller-y`
remove empty line
These should have been `public` to match other threads, so I would prefer the `IEnumerable<T>`.
This shouldn't be needed. The `GraphMolTransforms.h` is only needed to be moved inside the `if` block.
This method has no difference on the `DataContext` object, because that is what we usually usually do, so we can't use it.
why did you change the implementation to always have an enum value?
Should the latter check be added to the `partial` section above?
What is the reason for changing this to the existing `LoadSockops` function? It is not used for the existing code.
Should this be called `__init__` instead of `type` for consistency?
Why not use the new method in this file?
Is there a chance this won't happen on all commands that need to be checked?
I'd prefer to have this be `if eventName=="gainFocus" and not doPreGainFocus` instead. This way it can be checked in both places.
This import is duplicated below.
This is a public constant and is a good idea
Should we have a different name for this package? We may want to rename `config.SQLITE3` to something more generic
We're not really testing something like the settings, so let's not include the entire component if we ever want to log the whole stack.
Hmm. Why do we use these constants?
Can you explain why these are added as the first one before? It's not related to the changes but it seems the same as the second one was before.
this should be log.warn
Metrics/LineLength: Line is too long. [90/80]
I think we should just set it to false, since this will only happen in the case where we have `item.getType().isRepeated()` true
The `nni` is pretty confusing, because the original code will change the value of the `Basic` variable and the code that has `b64encode`
Why the space between `#if` and `}`?
"... to get the actual date and time based upon UTC and not the client machine."
This is wrong, as in the case of a function the role has a name which allows a few DNS names to have access to the role itself. The job should be the same as the second param.
You can just use `for (subscription;` to check the result of `0` here, which is the default behavior for the current behavior as it is more likely to happen for a `Set` method
we can't use the `config` in any of the `match` namespace, right?
I would put this in its own PR, e.g. `libbeat/dubbo.common`
why this change? we are adding new methods to the interface, no?
I thought you'd want to add this as a property of the scrollbarWidth. I'd like to avoid having a single scroll icon if the scrollIfNecessary is set.
This seems to make it impossible since the `play` prefix is not the same.
why is this change necessary?
I'm guessing you added some extra new functionality here?
This is not correct. The reason we have `discovery_v3` is now being `nil` in the test. Can't we just always skip it instead?
The `isFunction` check is not necessary anymore.
I believe this can be `*`
@tvalentyn - I'm not really familiar with this, but I don't think that's a good example. It looks like a bad idea.
this line is too long. [84/80]
I am not sure why this is needed
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
It doesn't make sense to use `getTransactionLocation` to get the same transaction as `TransactionLocation` and return something different than `getTransactionLocation()`.
If this is no longer relevant, it's ok to have it as an optional check to ensure that it can't be reused.
I think I can keep these as they were before (it's not related to this PR, but this is the change to this PR, I'm assuming it's the only change that makes sense to change it at some point).
`.name` is the right thing to do because of the `#reportable_id` attribute. It can only be the last one if we have two attributes. I'm not sure what the best thing to do though, though.
I'm not a big fan of this `std::string QuestManager::gettaskname()` calls.
I'd probably use some `@proposal.cart`s here.
Is `__eq__` used?
This is the main change.
nit: I don't think this is correct
I wonder if this field can be removed if it's not used, and if not, this should be removed.
can we use `module.exports = siteStories` here instead?
I'd be in a separate patch, but I'm not sure we need the `RETURNVALUE_DESTINATIONOUTOFREACH` call here.
@jmhooper so I added this. There's no need to call `.map` on this field, since it's not always a field or a field. It's not a field.
Can you please add a space here on the previous line?
Shouldn't we make this a `@command('')`?
I would not add the `ActivityLong` to `connection.cpp` for this.
I'm not sure it's the right approach. The `Variable<T, const Mode` should be `const std::string &` to avoid a few more spaces.
I wonder, if `iFromPeers` is a `DbDb` instance, we need to pass in `ingressRule.AddressGroups` instead of `AddressGroups` in `iFromPeers` so that we can pass a `BailParams`.
This is an API break, I think it should be moved inside `Update`
Please add a space after the comma.
Should we add a null check here as well?
Why not use the route_show table here?
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I am confused. Why not just `//` ?
This will now always be set to true even if the video is not enabled.
why is this necessary?
In general, @jihoonson-karas, do you know why we even need this change?
Why was this removed?
This is the fix. The `CreateSha` function has a `context.Context` which is not the `type` value in the `nifi-`
Is this being added for debugging?
This test case needs to be updated to use mock.Fatalf as a result of an incorrect `if` statement.
shouldn't this be `and`?
I am not sure I follow this change, but is `orderPath` used elsewhere in this file or is `order` used elsewhere in this file?
This looks like something the logic should be removed.
I think `using` is redundant.
Please revert all these unnecessary formatting changes as they will cause flake8 to fail.
I would prefer to see `new` used anywhere else, to keep them consistent with other similar methods (with the default).
I think we can remove this from the previous PR, as it's not used by the change.
`getAccessLogPatternParser` is a slightly confusing name and this is the same as `getAccessLogPatternParser`.
what if we moved `std::floor` out of the `Buffer`?
This class is unused and can be removed
Why the rename to `ConnectOptions`?
I would suggest to add these to `NewDebug` and `NewDebug` since they're the same?
maybe we should make this a class constant?
Should this have more context in this PR?
This test was added because there was no actual bug with the new BQ and `Z_to_PRESS` on the BQ (the BQ needs to be the one passing `Z_to_Sub_PRESS` to the Felix one).
I think you need to use `setOrNil`, otherwise we would not need to have to do the conversion for the Boolean types.
Why is this needed?
I would have put the compiler in `self.legend_opts` instead of ` len(self.legend_opts).update(...)` since it isn't used for all the `.update(...)` components (which is a bit odd)
This will need to be `errors.AWSMachinePool.Status.LaunchTemplateID`, too.
Can you use `List<Container>?>` instead?
I wonder if we need to do something like this: `live::Base|Banned?` `live::Base|Banned?` We can just call `Method?` instead of `Cache?`
Why do we need a function for this?
I'm pretty sure the logic was correct here, but since we don't allow it to be set here, it would not be appropriate to call the `if (boinc_file_exists(CA_BUNDLE_FILENAME)` on the return value of the function. That way, it would be more clear what you meant when you're doing something like this: > This also looks like something we have to do, right?
@bflad I think the code here can be removed.
I think it's better to use a path for this to work. That way, we can avoid having the path for each file in the main process.
This should probably return `String.empty()` and then we don't want to check if `type` is null or empty (and also if `type != null`), otherwise it will never be empty if `type` is null.
This can be simplified to `var isListRole || suppliedparentRole || conditions` (or something similar but the above check is used for both instances).
Why is this line removed?
Why not just pass ` Aggregation.Drop` here?
Can we get rid of this import?
Why are we not using Type.None?
Why not keep the static_cast?
The `flipud` function above should have the `np.array()` function.
The `toStringShort` should only be used when there are no locations, so I think it would be a good idea to use the constant here.
I think the `.hpp` shouldn't be included here.
Would it be simpler to have an option on RequestFactory (or similarly) instead of RequestFactory func?
Why is the TODO here?
Should `MetricsProcessors` not be an `string`?
Why is this change required?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think this is true anymore
Please change the condition to be `if (inputs is nullptr) {` and make the same as the one above.
This should be `Integ.BuildspecPath`
Is it really necessary to change it to a `length`?
Why are we passing null and empty string when no one uses it?
Can we also do the same for `nanosec`?
If there is more than one dispatcher, is it possible to have the dispatcher as a unique argument? This will cause issues because the dispatcher is not running. Also, I'm curious if this is the case for the actual code that is just making a new method to call it?
I think this needs to be `-v1` rather than `r`, right?
The config path is not really required in this file because it's not used in the build folder but not used in other places in this file
This is an optimization.
If this exception is raised then the second exception will be thrown.
This isn't really the right solution, because the type of `sub_type` is set to `0x00`
Why is this removed? If so this should be removed as well.
This is the fix for @bparees, we might just remove the `if` and change the below condition.
Should these be `use` or `use the `esc_html` part? Also, is there any way to avoid using `f` over `__`?
do we want to log the response response?
Line is too long. [86/80]
This seems incorrect. The point is to have this `lambda_cwd_on_host` in `config.js`. That would allow for a more generic `query_cwd` object to be set. In fact, that's not the only place that works in the `query_cwd_on_host` function, so the `store_Trainer` method can be used for this specific use case.
@nmittler - Is it possible to throw in an exception when the `toPath()` is not `null`?
You probably want to use `None` in the `obj` package instead of `nupic`, because you don't have to write it directly by using `obj` with the `nupic`.
I don't know how I missed this. It's a bit confusing to me, but this seems like it would be more appropriate to move these to a helper function.
I think it will be easier if the collections were set to "y" instead of an empty string.
Should be return false then (p->data.bo.size != p1->data.status == p1->data.status == p1->data.status == p1->data.status);
Shouldn't this be a constant?
wrong import order
Should have this be an API break as it is not being used and the interface doesn't need to be passed in.
Is this still needed?
can we remove this?
Is there an easy way to write a `ICommonTracer` here rather than having all of these in the `internal` statements?
Is this the purpose of this change?
I think it would be helpful to name the property something more descriptive of a generic name. I would also name it "has_CREDENTIAL_NAME" for consistency/desizes.
This looks like it could be a separate commit, right? Maybe something like `if (!promiseLibrary.reject(err));`?
I'm not familiar with this code but would it be better to do something like `#if defined(__linux__) && LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 27) || LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 27)` instead of the hardcoded value?
I believe we don't need to keep the old behavior here. I believe this should be `final` if all the `DatabaseTransferConsumer.class` calls `final`.
I know it's an existing code but the old code doesn't look super clear to me. What about `shutdown!`?
Why don't we check that the value of the `hbasescan_tdb->setAsyncOperations(TRUE)` returns `false`?
I'd probably want to make an explanation here to rename the `stderr` field, or even just `patch command successful`. It would make more sense for the `stderr` argument to `stderr`.
Is setting this to `lib/path/` necessary? Can you please remove it?
Line is too long. [100/80]
I am not a big fan of this annotation here. I would prefer if it's needed, then in the wrong package or even in case you're not using it yet, it's not a blocker if you have one.
This check was only needed for the `c->proxy.host` case.
I think it should be possible to move this up into a separate function, like `self.config_state_before_fullscreen: ...`
@JeremyKuhne is this still needed?
Is this a debug message, or should it be something like "EXP:%-n" instead?
"CONTAINER" is the default for everywhere, so maybe just "debug" would be less clearer.
This is where the change is not related to this PR but we should fix it in a followup. I don't have a strong opinion for this change, though, just want to make sure we're happy with that.
I think we need to be careful here. The `testify` function is already being used for both this and the function.
This is an API break, and should be moved to the `undo`
This will need to be done when the console file is not a fatal error.
This should be removed.
no copyright here too
This exception message needs updating to reflect the fact that there's no issue with the user being able to run on a non-default response.
Can't you just do `Date.getInstance();`?
Can we do `$attributes['class'] !== '';` instead?
I wonder if we should be more specific here. I'm also not clear on why this is the case, and what about the `return` statement?
Is this intentional?
This needs a test case for this, too.
This should be done on every call to flushIPSet() (or in `ipset.reusable`).
This is not the right place for this. The problem is that the `values` argument will be passed in in the constructor, but I don't think we should be passing in the `requireNonNull` instance. We need to be sure that `values` is passed in in the `Map<T>` instead.
Why not just have `location.href`?
I believe this was a bug that was not added in the PR.
what is this field coming from? why is it changed from `package.build` to `init`?
This function isn't used.
Why did the `multiple` change?
Can you explain why is this required? I'm surprised it works.
Thanks for the PR @wachterjohannes this was a bug as it was originally added because the `isUseOpMsg` check now is still now being initialized and the `primary` is not empty.
So, you didn't add `should` to the list below, but you don't care about `colHeaders`?
Are the changes in this file related to this PR?
This should be `host.mv cur_path` and not `cur_path`. If you need to do this we should also update the error message so the user can decide if you want to change it.
why are we using a aria-label here ?
nit: can we rename this to `legacySQLVOS`?
`add_undo` could be `False`
Can you move this to the next commit?
@jeherve - I'm not sure how this is used, if we are going to add a check for `tv` and `currentVisibleMenu` we should do `isRather than a second look and always return a non-null value.
What about `newProps.checked`?
This is only used in one place and is not in our code, it is only used for testing purposes.
I think this is a better name. But I don't think `download`, `claim`, and `claim`.
Why do we need a single wording here?
Why is this changed? Is it only for `timeout` or `undefined`?
The `toString()` function does the same thing. I believe, the `transaction()` function is the same as `str()` on PyQt5.
I think this can just be `ZP_PULUMI_DEBUG_error` since we don't want to have to.
I think this is wrong, but I think the `coco_instance` can also include the `coco_instance`.
We already have a LOG.info() in the `BitList` method
Can we use `alert.Run` instead?
This is only used in the `@Nullable` branch, I think it should have been left out from `@Nullable` so that it can be used in a future PR.
Will this break existing metadata objects for `extra_STRING `?
Why the ignore ? What's the relation between `segment-data` and `generic_data_reader` ?
I'm not sure if we should do this. I don't think we should be using a full full version of the server. The idea is that we have to create `KindEcsApp` to get the `vcr` version, and only do it if we want it to be enabled.
This is a no-op, right?
This could have been removed in the wrong order.
this doesn't seem to be used by the `const`?
this import is no longer used, and should be removed from this import
I think a static method is missing here
Is this function used somewhere?
This needs to be a `subClose` to be consistent with the above code - this method can return a `subClose`.
Can we also add this to the input size? That's a very good way to have a different name. In this case, `AMP_input_img` is not a big model type of "tf-input" by default.
Why the change in this file?
`mergeRecursiveWithOverrule` seems to be the same as `mergeRecursiveWithOverrule` in a few other places. So you don't need the `$this` at all?
Do we need the types that are types of the FlowDef?
Can you remove the newline here?
Please do not change this, we are using a specific `core`.
This is not the correct way to add this file.
This is not a part of this PR, but I think we should be moving it to the top of this file.
Do not use spaces inside parentheses.
This is a little scary. We already have a helper for `fullPathDir`.
You can add a license header to the license header, as this file is not yet deprecated.
Why is this check needed now?
This file was removed because it is not being removed in this PR.
Hmm, is this going to fail when `genesisText[:user].genesisText` is empty?
The reason for adding `reset` here is because it's a new field, and it's not a valid integer type. This is because the code was actually being handled by `set_reference`. So, I'm not sure if that's correct. I'm not sure how the best thing to do here is to have all of the `auto reference = compute_reference(scale, shift, x_data, y_data, result_values);` below but I don't see where it's used.
I would rather have a global var for this. I don't have a strong feelings about it though
I think you can just use `f.Vectorized`.
should we also change the flash to be a string rather than an optional one?
This is not used. You can remove it.
Use `||` instead of `==`.
This is the change in `ui.json` file, so you don't need a copy of the `var pipeWriter` variable here.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is the `HumanReadableName` used anywhere?
is this an improvement?
Could you please add a `TODO` here? We may want to have some other tests that run the tests locally (like `-` in the godoc).
why the closing clause is removed?
I don't know if this is necessary. In theory, there is a need for the "TryGetCachedLayout" case, but I think you want to check if that is a valid "TryGet" case, so that the "RenderAppendBuilder" case is also not a good way to do the right thing if it is to do something like `_layout.IsThreadAgnostic`
why not use a logger?
I'm not 100% sure if this is the correct way to handle the case where the scope was
I would prefer to keep error here. If the log is not yet logged (which is not the case of an error, and the message is not tested), that could break when the log is logged.
I know it's already here, but it's probably a bad idea to just check that the output of `STDOUT` is an array of strings and not a list of strings.
I am not a huge fan of using procCodeA to store behavior for procCodeB. Is this the best solution?
This is fine, but I'm not sure if we need to do anything about a null check on an optional optional param
I'm pretty sure it would be possible not to check for a function to get some more context on the `EnsurePoliciesAttached`. It's just the `if` condition that's already on the `EnsurePoliciesAttached` so that we can do the same thing in the `EnsurePoliciesAttached`.
I'd prefer not to have the corresponding stuff in the core. This can be improved in our code, since we are not adding new ones to the core.
This is not right. It would be better to have a test that checks if the feature is not set.
We should not need this check here as we are not doing anything with it, because the class already has a `getBound` method to do.
I think the `_runtimeDescription` and `_runtimeDescription` should be renamed, since these are the same.
Why is this change needed? It's only used for tests and I don't see any reason for these.
I think the `else if` can be removed here?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I would prefer using the standard imports. It's not clear what the imports are.
@jcotela are you sure this is correct?
why are these long?
I think the URL should be in the new module, and not in the new module.
Can we use the constants for all these packages and make them private?
I don't think this is the right way to do this, as you are setting this variable to `true` in the `strcasecmp` function. You should also add it to the `if (strcasecmp(value, "true") == 0) {` block below.
@lilleyica @rhtyd @jridgewell can you get these in and then why the import fails ?
We have to avoid any confusion about the changes in this file, but as the test is still running on master, this is a separate issue in the future.
This is a bug, I don't think we want to be handling it here. This is because it's in the wrong place, and it's not the case where it's a `sigFound` error.
I don't understand this change. I don't see any usage of this function. Is it something we use? If so, we can change this to `bool(b.matchers, fmt.Sprintf)`
The same applies for the other methods in this file.
`setstate` is a property of `_get_dict()` (the method above returns a bool). Can you add that as a TODO? Also this is not necessary because this is a method named "get_dict(d), ...)
Why not rename it to `TimeWithActivitySource`?
This is now done by the one in the `form.factory` where we need it
This seems to be used by the caller, should it be moved to a different location?
Can we make `System.IO` a const and reuse it in both places?
why do these have the option to do this
Just curious, how does this fix the issue with `resolve()`?
Is this needed?
Is there any chance that the Bez files would be in here?
Is this file related to the PR?
`get(index)` is called in a few places and I don't think this method is needed
I'm not very familiar with the code, but what does "not" mean here? I know, we're not doing it, but it's just a thought I'd say I had something with it.
What is the reason for this change?
you can just do this in this PR
I don't think this is used anywhere now so can remove it.
This is only used once and also, if we have a `ShardID` field, we should probably add `ShardID` field here to ensure that it can be used here.
I think it would be cleaner if we explicitly put it above the conditional on line 168
I'd rather not do a context here and instead do a `*ec2MetadataClient.OutpostARN()`. It is also more of a context of `ec2MetadataClient.OutpostARN()` so we don't have to pass the context for every request.
Just curious. Why do we need to use the new Python\* vs. "Install" at the end of the file?
Why not keep this as `OSRM(OSRM_TEST_DATA_DIR "/ch/monaco.osrm)` ?
We should add these to the interface
Please use `r.base`
We have a lot of these `cleanup`s so they are not needed here
Can you also make these strings as constants in the file?
Shouldn't this return a boolean instead?
Can you please add a description to the new test? Thanks to this
Why not call the `` ``self._get_selenium_options``?
I was wondering what this should be - the other side is breaking the response format.
This can never be empty, since it's an instance of `.raises`
Why did this go here? I don't think we need it for all platforms.
Can we just use `const` and then have a `const` at the top?
I think we should change this name to `secpRoot` and `messageReceipts` (or something like that).
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I don't like that we can just put the default in the `runUpdateManagerAfterBackendLogin` method.
Nit: I'd prefer this using the `[{code}` suffix below.
Nitpick: It is a bit weird to have a constructor which returns `TestRegion`, which returns `TestRegion`, so that it's not a function.
I'd prefer not to use `os.Mkdir(dir, 0777)` here.
I assume we could be using controller.Status here?
This is also wrong - we should return this error in case of errors in case of errors.
@bryevdv, I am not really a native solution, but would it make sense to use the "exec" version as an output of the output, rather than an actual actual element?
Can you use the function `isinstance(filter_ref, Helix, non-filter-ref)`, so you could have two functions in the same function?
Is this just the one that you removed?
This is a little weird. We need to move the assignment to where we're using it.
Are you sure this won't be `inspect`?
Should be `NULL`
Is there a reason this method isn't private?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is a todo for this?
I think this would be clearer with a different JIRA ticket.
Please remove this.
Why isn't this needed? This is a very small small thing that is not enough to have to know about the "leap year" year.
The docstring for `directory_configs` is a bit confusing, it's not clear that this is a global argument, but I guess it's used in all other places, so this is really just an explanation of why?
i dont think this is right
This function is only used in one place, and the function is not needed.
this change is redundant now
Can we use a more meaningful message? `string oldValue` ?
In the current implementation, this client received a few lines above and the `return` can be removed
@matt-gardner Is there a reason to set network_params? I'm not sure whether this is the best way to do this for a long time ago, and I'm not sure if that's something you're going to change here.
Is this an unrelated change or just re-assigning this file to the PR?
Would it make sense to set `close` in `setUp`?
Should we do the same check for roleText in the constructor?
I think it is better to have this at the top of the file, and then use that throughout the code, so that it's not clear what's going on here.
nit: unrelated change
I think we want to keep this for backwards compatibility, as we want to ensure that we never hit the "ACME" key anymore.
Would it be better to check the result here so that the existing `event.name` method is only called when the first one is null?
Why are you using the same string `Y` for the `if`?
This is incorrect. This was the first one which was incorrect.
remove empty line.
I don't think this is needed any more
I'm not sure this is relevant. The test was failing to check if the comma is set and a string doesn't exist.
<msg> <msg> <msg>  above it looks like this function is no longer being called from UI
why remove this?
This file was moved to `core/storage/logger` (see `dvc/storage/logger`)
Style/RedundantSelf: Redundant self detected.
this will be handled by the `argSpec.getOption()` check above
The text is always 1100.
This is a breaking change.
Use the new hash syntax `@page_title = t('blacklight.search.show.title', :document_title, :document_html_html_title).html_safe` Also, I don't think `html_safe` is required
@smarterclayton do we still need `showSubjectInMessageHeader` here? Is it necessary to set this?
Why not `defaultSamplingProbability` here?
nit: I know I'm going to be picky for adding `mergeACL` to `CachingStrategicPatch` but I don't think that's what we're doing here.
We should not use `debug` here as it's a `debug` method.
Should this have a constant?
Are we removing the `@Override`.
What happens if this is an instance of a `component`? If so, I think this is more of a breaking change, and we want a different exception.
I think this should be public?
Why don't we just pass the whole `videoConstraints` object and have the facing mode on the videoConstraints itself?
May as well remove this?
What's the purpose of these checks? Why is the other options needed to disable them?
This test case isn't really testing what `Start()` is for, but the multierr can probably be returned to that `Append` call?
I wonder if these should be `span.SetAttributes(entries, "linux")`?
Nitpick: It's really confusing to have a function that returns a bool (it is a bool). I would also recommend using a simple function.
@chirimoya What about a different solution? Just to be able to find the name of the module.
This should just be `constexprexprexpr = ...`.
Can you move this one line out of the loop so that the query will be removed from the loop?
Why is this interface not `BlockHeight`?
This is only needed if `a.first < b.first` is not a `callable` (it's always `callable`) so can be replaced with `callable`.
I think this might break compatibility with the `Ident` part of the function signature.
I would prefer a `return o`, to avoid an empty string.
Shouldn't the text be also "canBeSet" instead of "isWritable"?
I think this is not needed, since it's already set in `fetchRefreshSelectedEventsData` above.
This will need to be indented.
I don't really understand what is going on here. This is the only change needed for the tests.
I think this is the only one that uses this function.
why is this change?
Why does this need to be public?
I think this can be removed
This is a no-op change.
Is this change necessary?
This is the only change we're not using this API. This should also be done in the `MNE_hi` namespace.
Could this have been replaced by `super` now?
Why is this in `impl.go`?
if it's no longer optional we should have a test to fix
why do you need to update the conanfile ?
This is a bit odd, we're trying to move away from the callback that we do not have to worry about.
I don't think that this is a problem as I was trying to get the browser if the browser contains a non-XHR browser
why is this needed?
@bryevdv, I'm pretty sure we'd want to move this import back here. The only place this one is used in one place.
Please do not use parentheses for method calls with no arguments.
I don't think we should be changing this name.
Can we move this `IsMyRepos` to `GetUserRepositories`?
It might be better to make sure that this is also true for a model, rather than just the main model.
Why do we need this change? The other change is just the default array, and the other change is just for the change in #2727.
We need to make sure this is a part of the public API, to make it easier to understand what the filename is and how we are trying to load it.
Should we add an explicit `else` here, to fix the behavior that we want?
This change should be reverted.
Putting the `tag` class in the `Search` method for this.
You can use `String.Empty` here and below.
Is it possible to get rid of the "if" check for the case?
You need to keep the confid as well. You can remove all of these.
I would keep this as `bool` since it is not used in `Info`.
`r` is an actual parameter (and `r`) because it's a string, not a string, which is a list of paths.
This is a bug fix. I would rename it to `getattrByHealth`, and rename `getattrByByHealth` to `getattrByHealth`.
how about `.NewFactory`?
Nit: this is a bit confusing. Maybe we should just make this a `const int int(t)` instead. Or is there a reason to use it as the default?
Can you update the test as well?
I'd prefer if this should have a constant.
(style) line over 80 characters
Why can't we just make this `volatile` as default?
Why did you choose to remove this variable ?
I think it's safe to just call this `setupDataDiskStepName`, `scratchDiskName`, `scratchDiskhive` or `scratchDiskhive`
This is an interesting thing, but the problem is that it is not possible to use only two lists. What do you think?
I would use `values["Baz"] = "Bar",` as the input value, and maybe even just `values["Baz"] = "Qux",` to match the function name.
This method is a bit redundant - we were already doing this, and we are already trying to reduce coupling.
Can we have both `ChannelImplementation` and `store` for consistency?
`this.getClass().getName()` is not correct here. it can be simplified to `StringUtils.isNotEmptyFiles(StringInterface, metadataLocation)` (or something similar)
I think this should be a `WPSEError` for all values that are defined.
I would prefer to keep this in sync with existing `NIPOD_POD_NOT_ATTACHED` methods, to keep the same logic in `NIPOD_POD_NOT_ATTACHED`, since it can not be used by the new API and the new API is more consistent (but not for this PR), and the new API is more explicit and easier to read
Would not it be better to use `const RDKit::AtomKekulizeException(kekulize)` here? Then you can just use `kekulize::AtomKekulizeException` here, and you could simply use `kekulize` here as it is the same as `std::getattr(kekulize, cleanup);`
Why `sqlalchemy_object` needs `violations` to work. It's not a big deal here but it's a bit hard to see what it does, but it's not just a limit
Can we move the `||` check under `<amp-ad>`?
can we call this one `after_initialize`?
This will break on the task's task's task. I'm wondering if it's worth to revisit the logic for that and just set it to `m.metaTaskExec.setObjectName(resource, request);` (the task will also be preserved when it's called in a task's task).
Why this change? I think we should just remove the `err` field from `New` and `New` to `resourceAws` if the screen doesn't exist.
(style) line over 80 characters
I'm not sure what the best thing to do here is...
This will be a breaking change.
Why not just make this a `c.nr`? There's no reason why it is a solicited leafnode and is not necessary.
why was this added?
I don't think you need these `prerequisite` - they're all in one place but not in this class. I'm curious if it is possible to have a `<a href="">Hey, before you start this...` part in the name of the class (in `topic.id`).
Why is `Path.TempFile` here?
I believe this is the only error that is needed in this function.
I think it is worth checking the error in case the `base` returns an error, but we don't want to use it.
Why removing the parent ?
I wonder if it's OK to do this for a specific `@team_plans` thing, but maybe it could be a better idea?
You can use `issubclass(subject:SUPPORTED).to_to` in both places.
Why does the test have to fix the bug?
Let's move this import to `import {...}`
`GenericDataFile` already has its own `GenericData` instance, so this can be simplified to `private GenericDataFile` for consistency with other files.
Why not leave this file unchanged
this needs to be `<=`
I think we can simplify this to return the promise and use the the user to get the user from the `AppApp`.
Should we be removing the fix here? Or is it not that we are running tests in 3.5 now?
@mraible is this going to cause the flake8 tests to fail?
Should we make this message more specific, like "Starting to refresh continuous aggregates:"?
This was the only place where we were talking about the `script` here
I think these changes need to be reverted.
This is an example of why it's not just returning an `_` prefix.
This seems wrong...
I would use something like `JSON.go`.
Can we call `Newf` here?
This change is not necessary.
you need to disable the relation with category as it has the right value
Should these be actually marked `@Internal(&:viewport)` ?
Please add a blank line between the arguments.
I'd prefer to use `*` here to get the value from the config value.
Can you add a space after the comma please
This is just a suggestion, but why is this needed?
Nice! I'd suggest renaming this to `ON_FPGAINFO_ERR_GOTO` to keep the name consistent.
What if this is `undefined`? Should we just return an error instead of returning this?
This should be renamed as well (or `apply_by_common`) and should be renamed to reflect what this is.
I think you could remove this line since it is no longer used.
I don't think I agree. What is the purpose of this `errTaskNotFound`?
I'm surprised this change isn't related to the PR.
This is the one I was expecting to change in this PR, so I'm not 100% sure whether the service account should be in an installer or not authenticated user or not authenticated user. If you don't want this, wouldn't it be better to just add a service account?
This should be `__init__`, right?
I think it would be better to have this as a separate API and then pass in an extra object.
This should be a `strdup(tmp)`.
What's the reason for this change?
is it possible for the space names to be the same as before?
This should be removed as part of this PR.
This should not be removed because `DFSack/main` and `reportRevisions` are already part of the interface and `reportRevisions` is not used anywhere else.
This class is now unused now
what happens if we don't have `buffer[:0]`?
Should we make this change in the `else` clause?
This is the only real change in this file.
Wouldn't this also be fixed in the middle of the other uses?
I think this is a bit of a good approach. The code in `this.flowFinished` is only forcing the message to include the message. The `logger.info("Kill has been called on execution " + this.execId + " is already finished.");`
I don't think this is a good name. It's a good thing to do. It might be better to use an `InitialInterval` field in some places.
this is the same as in the .mdash;</td file. can you use a different JIRA?
Why not use the `@internal` variable here and remove the `$dateRange` parameter.
Let's not add this to all attributes, but it wouldn't hurt to do it in the future if possible.
Why is this code needed? `!node.ownerSVGElement` is already a attribute anyway.
Is the test failing? (In a separate PR)
Can we use `isFocus` instead of `True` here?
Do you know what this does exactly? Is this supposed to do? Because if this is the case we're using, we should use the `freeze` variable here.
`error` is the right choice here.
This should be changed to `/useruseruser`
This would break on the `return` statement.
I assume this is only used once. The reason why the reason is not to remove this.
This is a great way to fix that, but I think it would be great if we could just pass the `data_scols` object directly into `data_destroy` instead of passing a `long` object in to `.to_pandas()`. That way we could also just pass `copy` in as a field in the list. Then you can just pass `data.function` as an integer.
use only `administerable_by?(current_user)` as it's a helper method.
this doesn't look like anything is being handled by the new location - will it be handled differently?
Why is this change needed?
I am not convinced, if you wouldn't want a different check for stock address, you wouldn't need to check stock address.
@sjenning is this change ok with you ?
Not sure if it's safe to do this, but I would have done this for a reason as well.
Is this a copy-paste error or some kind of copy-paste error?
nit: the `Assert.Throws` below is just a `Throws`. So it is more readable to call it `[Test]` and then call it once for each one.
I think the intent here is to change `config->http_proxy` to a set. `config->config->get_PROXY` to "has_http_PROXY" is also a valid option.
I think this may not be necessary to change the signature of this function.
I think this should also be changed to `HTTPSchemeHTTP`
I would just do `splitSize = Long.parseLong("split size", 'split')`.
Why not just have `PREFIX` and `Divide` as the other one?
Could this be set in both `compute_service_account` and `compute_service_account_name` ?
Is it possible to set the default setting to `true`?
@xuehui1991 Please consider replacing this with the new exception message.
"positional" sounds too generic to me, e.g., something like "DefaultDefault = true, meaning use first positional parameter", and "DefaultDefault = true, meaning use first positional parameter",
Is `ReplicaSetWithPrimary` still used in this file?
I think it's better to put this in an `else` block.
Is this the case where we want `default == ''`? I assume it's going to be true because the user has changed this.
Why do we need both `sp2` and `x1`?
This function is only used once and only on a single line.
Why change the argument to options? It makes it more readable when you use something like "keep_alive" instead of "keep_update" - but it's not a blocker.
No longer needed here?
this is needed, the tests pass because I was getting it back
Wouldn't this be a problem if 32 * 1 <<* 20 ?
Have you considered setting this include in the `constants.h` module? It might be a good idea to just remove it, and the changes in this file are just related to the PR.
`rec->ExceptionInformation[1]=EXCEPTION_EXECUTE_FAULT /* execution tried */` can be changed into `rec->ExceptionCode_t` and it will be a bit confusing to me. But, this is more of a case of an `Read` block where we can call an `else` here.
Why not remove the import statement entirely?
Hmmm, this is not correct. I'd have thought `FileScanTask` could be `List<FileScanTask>`. Would be nice to have a test for that.
This is just for testing purposes, and is what is the use case here
If `Owner` is `false`, we don't need to change `isFirstAdmin`, right?
Why the comma?
This method name doesn't really make sense in this PR.
`Map<T>` is a bit ambiguous. How about `Map<T>`? (Or even `Map<T>`?.)
this is not needed because there is a method for this that has already been passed into this function. You can use that here.
Please use `if (!$filters) ?` instead.
If this function is not used, I think we can drop it and use the new function.
This is not needed since template is already in pyramid
why the change?
remove empty line
What's the point of having this flag in the constructor? I think it would be more efficient to name the variable `store untilPeer` and `removePeer` than `removePeer`, since its not a new one.
nit: it's better to make this `final`.
We can use `update_column` instead, so we can remove this check entirely in `clean_in_scipy`
why was this changed?
Can you move the line to the top? It should be `options.options.options.site_options`
I'm not sure we should do this, but can we make this a single image? What if there is an image and an image is set?
Is it needed to keep the `null` value?
> 2 [](start = 11, length = 17) Is it possible to use complex values of the same labels as we do in 7.0? I would have expected it to be the same as we have in 2.1
What is the logic of `manager.prototype.instr_isb`? Why not use both here and above?
Is there a reason for this change?
Do we also need `assert_eq`?
Honestly this would be `tls.TlsHandshakeHook` as opposed to `zpool`... but the `Tls` is not used. Is this intentional?
This should probably be a static constant.
You should consider moving this call to line 162
Please add a space after the colon.
I think it's safe to remove this `if err != nil`.
This should be `_allLayouts` since the `StackTraceUsage` can be an empty string
this test was not needed at all
Line is too long. [81/80]
please revert this, it is unrelated to this PR
@mfojtik this is the line break.
Trailing whitespace detected.
Should be reverted.
The change is not needed, since its now only a setting setting is to be used in this file.
I think this was for debugging IMO
Is there a reason for this inlined/Task engine as a resource?
This was removed because it is no longer used
I wonder if it makes sense, to have this in a separate PR. And it would be better to make the same change in the other PR.
Can you add a `@Nullable` annotation on this new line, please?
shouldn't `$this->connection->createQueryBuilder()` take the `self::STATUS_TABLE` argument here and the `has_execute()` call?
Why do we need this?
nit: I'd prefer `return fs.fsErrorToJsError_(error, path);`.
Can we rename this to `plz.config`? This way, we can also rename the "docker" part (or something else) to make it clearer
This file doesn't need a `@classmethod` file.
Should we use an explicit url here?
Why remove the transaction?
Use the new Ruby 1.9 hash syntax.
Not a big change. There is a reason why you can't use a list of browser state here and for the other methods.
I think we should remove this as it's only for testing purposes, right?
This is not correct, you can do a `visitLeaf` call in the `AbstractGroup()` method.
Probably just wanted to point out that the `+ 1` variable was the correct location here, and the `+ 1` for the `+` parameter was the `.price` part that works too, but then the `.price` was still the correct size at the same time. `.price` was already the last one, so the `.price` was still there and the last one `.price` was not there.
`kubernetes.io/os` should be a list of of values.
Why change this to `Object.name`?
`InitContext` seems like it should be fine.
Let's call this `W3c_WINDOW_HANDLES`.
This is an API break. The previous code uses `DataContainer` for the parameter `DataContainer` for the parameter.
This line does not belong here
This should be `subnets.stderr`.
Is there a reason we are not using `TextError` directly in code like this?
This is a no-op, right? We don't need to support multiple instances of the same node, right?
This change will cause the old encoding to be logged in as an unrelated release, which is probably okay.
Why do we need this change? It seems like it should be the same as the globalize.translate below.
I think `Keccak.count` is no longer used in these new tests.
Should probably be `Resources[...]` or something (and the rest in the file file)?
This should probably be on a single line.
Is the XKeysym used somewhere?
`if (substr($localPath, -1) !== '/')` would be better
Is this correct?
Wouldn't it be better to just call the `/dev/sda1` variable?
@bartonjs, any reason why you didn't just use `default` instead of `default`?
This is not a valid function. What is the meaning of `value_size`?
`StopTimeout` needs to go throughout. Can you please use the `StopTimeout` field name? `locationName: struct, struct, struct, struct`
I don't think this is needed, since `CHAR` is used below.
Can you please remove this line? It was added automatically in the group that were added.
This needs to be added to the `url` section for the last one.
We have a lot of these three lines in the code base. Is there any reason to make them separate?
Why is the fix to check now?
I think `num_of_searches` is the same as `return`. So if you have a `&` and a `*` instead you should have the `return` at the end of the line.
What's the motivation behind this change?
This is just a question of the feeling, but can we make this a little more explicit: ```ruby if not allowed..." // // 120 chars = require_low_quality(bool) In the second stage, but not allowed...`
Should be `api.Context` here.
does this work on icon paths? just wondering how much of the icon paths is in the middle of the icon.
why is this using `0.2` ?
This is a bit of a hack. What if there is a `null` value in the `Number` method? Can we just pass the user to `Number` to the user? Or is it not a primitive value?
Do we need this import?
Is "element" the only type that you want here?
What is the error code for?
This is a duplicate of the one below, no?
This change doesn't seem related to your change. Can you remove it completely?
The rest of these are in the `GetHostEntry` and the second `GetHostName` type? The `System.Net.Tests` methods are not necessary, since the test method doesn't need to be updated.
Can you explain why this change was here before?
I'm wondering if this might be better named something like `getFoo`?
@kargakis this line was a bug in C99
rm empty line
We don't need this line. If you do a line break after `if ctypes.windll.kernel32.FreeConsole() != 0`. Otherwise, it's not an issue but the console process is not a console. If you don't need to remove the `if ctypes.windll.kernel32.FreeConsole(0)`, we should be able to remove the `isNotEmpty` line.
Can you please add a note in the docblock to this commit?
I don't think we should get here. The `.Timestamp` function seems to be only used to set the remaining object to zero.
Why are you passing `Config new_config` here?
We should be able to use the shorthand since there's a trailing semicolon at the end of the sentence.
Can you please also update the doc accordingly.
I'd suggest using `sleep(1)` in the tests, as you have in the other PR
nit: I would prefer `return nullptr` to make it more explicit, just like `returnreturnreturn emptyptr`
Is it possible to get rid of this entirely?
I think it's better to use a verb here.
Remove empty line?
I have been using it for now, but I think it would be cleaner to change this to `name: 'Analytics'`.
Please revert these.
Should we use the `host.Host` variable here, so we can have an explicit name for the new API?
This looks like it should be a warning since it's only used once, but also an error in the user-specified config file.
This import was used to avoid a function call on windows.
@deads2k shouldn't you use v1.ContainerPort{{HostPort as a default value, and use v2.ContainerPortindind, for example, the new value is "127.0.0.1".
What's up on the `Chroot`? Does it need to be in the doc?
Use the new Ruby 1.9 hash syntax.
Could you please add a license header here?
Is this used anywhere?
This function is no longer used, right?
I don't think that it's necessary to specify a single list. The `pe_ver` is always the same, you can use `pe_dir: view_name` instead.
I believe it should be the last item of the menu object, not the product. Also the menu object can be removed (we can simply use `summaryProductFragment`).
Does this change make any sense in the past? I don't know if I should change it.
Should we use `dump_puppet_log` here, since the user has no teardown type?
Should we do the same for daal_parameter, or have that take a `size_t` as a parameter, and just assign it here, or is it a value?
remove the empty line
I think it should be "No human-readable" but I don't see it being changed.
is this intended to be a constant?
Is it possible to get rid of this cast? If it's only ever used in the `ArrayType` constructor, we can use a `ArrayType.isArrayType()` instead of `ArrayType`.
If you use this, you might want to use the constant in the `InstallCRD` (in other words, in my opinion).
I am wondering if this should be called `hive-openshift.io` instead of `hive-openshift.io` (in `openshift.io`).
Extra empty line detected at body beginning.
This was only here for testing purposes, and so it was removed for this PR.
What are you doing here? I don't see any use-case for this?
What exactly happens when the first two conditions is created in this DB?
This will cause the local cache if the local cache contains the `toolbox_` key. Isn't it already the case for the local cache? Or will the `toolbox_` value of the `toolbox_` be an `string/empty` or would this be a problem in a non-empty string?
I think you need to get rid of all these lines.
Please consider moving all the `STATUS_MAP` to some common package
This seems like it should be a warning since some of the time this function is called, and if it's called we have a user provided value.
Is this still needed?
Can you use the `Reader.JsonG` from this file instead?
Shouldn't we keep the old name?
If we're going to remove this, I would just put this on the previous line, and put it on the next line (which we do).
I wonder if `get_subscript_const_value` would return a `bool` and this would be a breaking change? And I'd prefer to do that in a separate PR for now, to be sure I haven't changed this.
I would not make this change, as it's only for the `a` value. But I think it's safe to do, but I'm not sure.
You don't need the variable here
This is just for consistency with the rest of the code. I'm pretty sure it is possible that the `_WIN32` is only used for testing purposes.
Is it necessary to call `loopBody == getDst` here?
Why is this check necessary?
I would use `pytest.utils.markdown` to see the correct value in `pytest.utils.markdown`.
Can you move this into a separate method in `historyEngineImpl` and do it in `historyEngineImpl`?
This can be removed.
is this on purpose? I don't think it should be possible to do this. I would also like to add it to `FIPS region` in order to make it work, but this is a bit more explicit.
Do we need this?
May be better to just do ``model = dict(num_classes=variants)`` instead of introducing a dict dict here.
Seems a bit of a mess, but I am wondering if `limit` is better as an `object`, so I would just return `List.currLimit()` here?
Line is too long. [98/80]
This should be `busbus` to match the other types above
I wonder if we could make this package package private, or do we want to implement it in the future?
@stephentoub I think it's not possible to get a message to the metric name that was not `MetricInstrumentIgnored`.
Why are you using `this.driver_.getExecutor().get3c` instead of adding it to the base class?
I think the new `_model` is redundant here.
nit: `mobile`
We don't seem to be doing the same here. We're going to be using `List`, so we should just change the name of the function to `List` and `List`.
I don't think this is right. You should use the `backendNum` in all places, and pass them in.
This was only needed to support a `v3/` file and not the other imports.
Is this needed?
Do we need to call `ticker.NewTicker()` ?
why this one?
Shouldn't be in a try/catch block (and in other places too)?
Not sure we need to change this. `import org.openqa.selenium.remote.http.*` to `import org.openqa.selenium.remote.http.*`
`methodConfigProto` is not defined in the if statement and will be removed before you remove it from the if block
Should this be moved to `gen_typeutil_environment_test.go`?
Why remove this?
I don't understand why this should be here? I think we don't support voucher, right?
(style) space required before the open parenthesis '('
isnt this an interface in `ApiTermsOfUse` ?
Is this necessary for the future?
`STMTHEAP` is more readable here.
We should probably make it easier to find the environment variables if it are not used.
`#` is now in here because `#` is an undesired dependency.
@matt-gardner I don't know how the `EnableLogging` variable is used to generate logs when their rules are matched. Is it ok to call this `EnableLogging indicates`?
Is this needed if you have a single thread? If yes, then you probably don't need to add it, just do this in the next PR.
This is a test for backwards compatibility...
Is this the right default?
Shouldn't this have a `SetDiskBlockCacheFractionSetter`?
Is this going to cause all the changes to the struct?
I think the indentation here is unnecessary here and the next line should be on the same line
why did you have to add PacketList here? how did you find a difference in my opinion? I am not convinced this is the case but the list should be always non-empty and that it should not be `List`
@smarterclayton do we want to add the annotation to this message, or just a `type` suffix? (It might be better to make the message more clear and clear what the result is)
Remove empty line.
This should be in a separate PR.
this should be `if (!browser)`
Why did you remove the cast? I would have added it.
`configProto` can be null, this is the default.
Why don't we need a doc here?
This form of space is not correct.
This is not correct, the condition will not happen here.
This is a little confusing, I would suggest `IsDockerEngineRunning()` and `IsDockerEngineRunning()`. It also makes it clear that the docker-encrypted extension is not supported in this package.
This will likely be a breaking change, right? What's the difference between `HTTP_url()` and `HTTP_url()`?
This can be a bit more generic. We can add the check in the `if` statement and use `if` for it.
Forgot about the last value of ` repair_size=None`, it is not used.
Why not use `th.system_options` to avoid this string?
This will be needed if you include include_id in the PR description
should this be done in a constant, like `if (name_type != 'className' && ...` ?
nit of this condition, we should probably return the "rowIndexMapper"
This is an unrelated change that made it unrelated and was just a separate change.
I'd prefer not to use a full name here. What is the `Account::Access` ? I feel like this can be confusing and we have `/accounts` in the future but I think that's not the expected behavior.
Not sure what this means, what is the intention of this change?
Why does this need to be here?
We should keep the other `Internal` and `Ok` as the last two, to match the other `Util` in the test code
Is ` Deprecation\n` enough here? I'd rather just make the string a constant. What would be the difference between this and the `_` prefix and the `_`.
Why are these both necessary?
how about `# + AWS SDK to JavaScript (v3).` ?
`config.EgressConfig` will be removed.
I am not sure how I feel about having the same check in here and below. What is the problem with that?
I think this might be more descriptive of the two lines.
We should be able to just skip it.
if I'm reading the condition, should we have a "wireguard" in the README?
This is the only thing that's a link. What is the reason to remove it from the JS?
Why is `--files` ignored?
I'd probably have changed the shell shell, but I think that's what we want: > Thus we're not passing a timeout: 750, so it's a timeout. Also, the timeout is already the default, so it's more likely to be compatible with the timeout name and timeout name.
I think `lastUpdatedMillis()` is already deprecated in a base class, should we move them to the base class and move the logic of the caller?
Please don't make use of `.detach()` in here, just use `.Batch`
I don't see any need to use it in the core, since we do not use it in the core, but it would be nice to have it into a common place in the core.
This is not really needed, we should have the `create_no_window` argument set to the default. AFAIK this argument also has already been released.
What is the meaning of `sections.to_a`? Why not just `to_i` like in the `sections.to_a`?
I don't think there is a need for this, it was just a form.
We should be able to use this as an optional argument instead of `causalConsistency` to make it more explicit and consistent with other methods like `causalConsistency `
the import is not allowed here
I know it's a little weird, but why can't we have `setting.HTTP.AccessControlAllowOrigin` be `OPTIONS.UnicodeOK`?
This should be a `bool` if you want to return `nil`.
I think we can remove `!array)$this->config` because we want this to always be true.
Why not use a stub? We don't allow anyone to have an stub in the past
nit: this field is unused
I think this import is unused.
Why `_` instead of `_`?
This seems like a very odd change. I would also be happy with the check for `loadbalanced` (not sure whether there was any issue with it).
This can be simplified as well
This is a change in behavior, right? What would happen if we don't have to wait for the user to have a request?
Should it be logged at `plot` level?
Are these changes required?
Should we add a `cumulative` property that uses a single class name? `cumulative` -> `cumulative_backed`?
This is the only change that will need to be reverted. We should keep it in mind for now.
Metrics/LineLength: Line is too long. [93/80]
Note, I don't think there's an advantage of using "support will be removed", so I'm going to change it
This needs to be added to the `is_admin` method.
This should be `ok != nil && ops != nil && ops != nil && ops != nil`.
Why this is needed? It will be more readable if we set it to 0.
Would this still be useful for transport?
@smarterclayton do we need a test to set this?
I think this could be renamed: - through through through and passed through to the source - (same below)
@MichalStrehovsky - I was thinking of the way we could do some checks in-memory `Encoding`s to match the behavior of the code. In the `Encoding`.
The spaces after all - and after the open brace looks like they're all all here.
You should call `metric.LastValue.ToString();` in this case.
Can this just be `t.fd`?
I am not sure I follow why you'd have to change the logic of this `if` here.
It seems like the `showAndWait()` could throw a `TaskError` in the case of a non-null exception.
Is the `git checkout` import still required? If yes, we can remove this.
I'm not sure that this should be here.
I'm not sure if we want to keep this, but if it is, it should be just a single time, because it's the same as `== 0` in `random.seed`.
Is it correct to remove this? Is it only available at `autiful.border_color_marked` and also `@beautiful.border_color_marked` ?
can we add the files to the files as well?
I think the `/` is the right fix for this.
this change is unrelated.
@cra0zy - What do you think about this? It's too late to me, I think, but I'd prefer `metric` being passed as an argument to `Language`.
I am not sure about this - we must use the `auth_based` variable here. What is the difference between that and the two?
This is the only change in the file where the `if` and ` else` aren't necessary.
What does `update_attributes` do in this code? I don't get it, just thinking. It feels like a function that returns an object. What's the motivation for removing that?
Could you use the `time.Time` helper here for the code base.
@SamSaffron, can you check this is ok ok ? Is it the correct fix for this change ?
You should also have `TABLES_DIR` which is now used by the `Elementmangs` project, and should be removed.
this was a no-op now
What is your idea why this is needed?
Forgot to add the `if (entity_list.GetNPCTypeID(ZONE_CONTROLLER_NPC_ID)` condition above, this is going to make a bit easier to understand as long as the `!== 0` check here.
Style/RescueModifier: Avoid using rescue in its modifier form.
@lilleyse Should this be in `x.yml` rather than in `tuples`?
can we call this `processChunkMsg` ?
this needs to be set to false by default, not only for hexa
This should really be configurable.
@cra0zy - I am not sure we really need a `methodModel` here, as I already implemented it in the `getInputField` method. Why is this necessary?
@robertwb do you know what is this supposed to do?
this should be `$CODEObjectManager()->getEntityManager()`
These two lines should be removed, as you have changed the other changes to use `Czure.getAmpDoc()`
I think we should keep the old constructor as close to the old one. Otherwise, I don't think we can assume that the new one was a valid property.
This is the main change. We should not have to pass in the test. If the test passes, we should pass the test to the test.
Why not put theProtoForTableStatus on the node level, since we don't create a new node anymore?
This isn't an actual bug that we expect to be sure.
Can you add a helper function that sets `listens`? Or just use it for the `fetch_listens`?
Nit: `this.headerStateLock(false)`, this.mergeStateWith(..) => { collapsible: false }` looks odd.
You are missing a `.toName()`, which is why I had to change the name. We're adding a new attribute to the name as well. We need to make some changes to the docs.
This is a breaking change - will need to be changed in master as well for now.
Should this be `ITaskItem[]`?
We probably don't need this.
Should this be moved into `CreateRepo` function?
I'm not sure if this is better, `AppAppRole` should be named `AuthPath`
This is a bit weird, why do we need to do a different exception and just use `visiRanges.IsVisibleRanges()`?
We need to add this to other modules, like we do for `fetch_until_page` or `fetch_page_fetch_threshold`.
This change seems to be dead code now, it is just a copy.
We can leave this table alone. It's used by other tests and it is used in many other places.
why not log in the log level?
forgot this should be here
This will need to move to `Log.Error`, but the `_statsd?.Send()` is called after `log.Duration` above.
What do you think about making it an enum values of 1 format? I think the code can be more explicit. We could have two different values for the `addfile` and `certmanager` methods. Then the `openapi-gen` would be `const` as it can be shared in the other places.
This constant is not used in RpcApi.java. Can we use RpcApi QUORUM to avoid the duplication?
We should be using `checkCoinbase` instead of hardcoding `checkCoinbase`.
Could this be removed as well?
Is this still needed?
You can use `string.empty?` instead
you have a newline after this one.
Please add docstrings to make it easier to track what they are, e.g.: `Flavor: ...`
So what does this do when using a different `final` and the expectation for the array array?
Should we use `Kernel` here too? (not necessarily in this PR, but it's not really related to this PR, but it is a leftover)
Should the interface be `BlockHeight()`?
This is a good change. We're not reusing the API, we already have `get_lifecycle` method.
It looks like the `CustomPicturesExpression` is not initialized.
We could have some kind of `Filter` in here to ensure that it is not a big wait.
Probably a more appropriate name for this property.
Another one that was missing
This change is not related to this PR, but is the line missing a whitespace change here?
I would use this to pass `True` as the default value.
This is a good thing to default to true, but I'm not sure it's better than the default for the feature.
This was previously added to the `fine` section. I'm wondering why it was removed and not here.
Is there a case where axe would be axe.commons.dom that can be null, or should we just skip the attribute?
Please revert this change.
@smarterclayton this is the way it is
Should not be here, it should be `130`, and you should be able to use `130` if possible instead.
This should probably go into `CreateCreate`.
Nit: `panic` -> `panID`
This is going to be a duplicate of the `CloudHubControllerModuleName` flag in some cases. The `EdgeControllerModuleName` is not the same as the `CloudHubControllerModuleName` and we're not really testing the exact same values as the actual values, we should just not include it here
do we need this? why is it necessary to make it not been there for this purpose?
(style) line over 80 characters
Can you just make it a property of the alias, and not a `instrumentation`?
this could be just `it.skip('should resume piping')`.
I think this may break things.
why not just put the default if user doesn't specify `wxLang`?
why do we need a copy here?
why is this here? why is this here?
I'm not sure it's safe to do here? The `Rails.configuration.branding.dig` should be `&:to_sym`.
Why is this defaulted in as 'backend_service' instead of having the default value of 'backend_service'?
This message is really confusing - maybe we need to re-enable the usage of ManifestReader if they can't read it for all reasons...
Is this the right fix and why it's not?
`create_and_add_another` should also be added to the list list
This is not related to the API, but we should have a separate JIRA issue, but if we have any other public API that we should add in the implementation.
I'm not familiar with the `tmpStream` variable name. Isn't it better to just return something like `cancel tmpStream && delete tmpStream->bad()`
This isn't a change in behaviour, but if this is a change in behaviour then it is better to return a different value from `def` here.
Nit: Can we revert this change and the one below?
The same issue as other places below
This is a breaking change. The type system is `service.name` for the type, not `service.name` - it was removed.
This is a change in behavior in `app/services/server/register_package_test.py`. We need to keep the same concept as `APP_CREDENTIALS_FILE` is not part of the public API.
Please use the `1.x` syntax for `0.x` (or any other type)
I'm not sure if `this_l` is correct here. If you want to use `this_l` then it's fine with me
I think it would be good to use the `.matproj` file.
Block has too many lines. [2037/25]
I don't think we should return the stack here. If you do the changes to this function, I think you need to remove these `nil`s
Can you use `api_type` instead of `time`?
We should probably use the `instanceID` as well.
Since the `.. versionadded::` is not defined in the `.. versionadded::` tag, this will break existing `NO_DOWNLOAD`s.
Why are we using the default `HOST`?
This is a bug, right? We should have a helper method that allows us to override, so it can be a separate issue. But it is a bit scary.
I think we need to do some changes to `onProcessor` and `onProcessor#onProcessor`. I think we can make a `BlockProcessor` class `onProcessor` and `onProcessor` (in general) methods for the `onProcessor` class to get a `@Deprecated`.
We already had a standard imports of imports in this file. I'd like to see a test to make sure the import fails.
I'd rather see a `@round_count` defined here.
Is this needed? Seems like the same as above.
This is not related to the PR. Please revert.
Shouldn't the `&` tag be checked?
This needs a more generalized name
This will need to be fixed.
This looks pretty suspicious to me.
Can you explain this change?
Shouldn't we have a `u.Path` set to `0` here?
Unnecessary spacing detected.
Is the `ExceptionListener` still needed?
Why this is necessary? (and above)
this was not needed for the build. but we do need a check here for the image.
Why are these changes required?
should the name of this have a unique name?
Why not just use an `else` ?
For my education - what's the difference between "Boolean_msid" and "UI_msid" vs "UI_msid" ?
This is a very odd operation. The `char` could be a `strstrpy` instead of `char + 1`.
The `<%_` tag needs to be removed here.
this is the only place where it's used. The logic in this file doesn't seem to be related to your change, so I just removed it.
why move that into the package?
It feels like there is one space in there here. Can you check?
I am not sure if this error should happen in an error returned by the HTTP client - this is where it comes from.
You can use `size_t` here.
We should make sure the same applies in the the tests
in this test case it looks like it can be an error. Maybe `with_nms, 'PAA only supports "with_nms=True, 'with_nms=True, 'what'`
what's the purpose of this line?
Is it possible to get the href from the service that has already been started with the correct `RequestContext-drilldown`?
This is not the only real change in this file, right?
I think we want `EnableAdminAPI` to be in the next line, `admin-apis` is already in `admin-v1`. What do you think of adding a new `admin-apis` to the `api/admin-apis`?
I think this should be fine to leave the `return CompilerType()` call as is, and only if the type is an integer, that is what you want.
I guess these will need to be moved into `findConfigMapManifests`?
this needs a `@throws`.
I believe `StartCommand` and `StartCommand` are unused.
This can just be `lib/users/clear`.
What's the thinking behind this change, I would suggest using `base.Create(filename)` to reduce the information about the conflict-space behavior.
I think the `@context` can be combined with `@Nullable`, because it can be combined with `@task` on the line above.
I don't get it, but we should be adding new entries here. This is the `isFocus(page)` call I removed.
I think this test could use more specific name, such as `_DeleteOnCloseFile`. I suggest `assert dst.closed(assert src.read())`, and `assert src.read() == 'data'`.
Is it really needed if we just return true even if it is true?
Isn't this a bug in `getOutfitByLookType`?
why is this changed?
I'm not really happy with this change, but it seems like this can be simplified to just `return len(self.best)` in the same function.
Why is this a `system.maxWorkflowTaskTimeout`?
I think I'd like to get rid of this test and just delete the new test, it will be the same as the old version of the test.
this is the only new column in the PR
Line is too long. [90/80]
I don't think you need this anymore, but it's also fine
should we also change the "dots-vert" to "more_horiz" to "dots_vert" to say "dots-horiz", in order to make sure that the user is aware of what they have to do.
Can you use num_groups here?
I think that we should just use `Marshal.uint32` instead of `0` here.
I believe that this should actually be an `__iter__` suffix to be consistent with the other ones.
why is this removed?
Can we add a TODO to change this to a `# pragma: no cover` and use that here?
this is the only change I was expecting to make the API more explicit. I'm assuming the `pulumi-resource` check is correct, but I think it will be easier to find a way to do this. It seems like the only change is required to set this at least to avoid potential unrelated behavior.
why this change? we should not be doing this anymore
I'm not sure this is a good thing to do. I'm not sure that it should be used for other languages, like what other classes have?
This function can be removed now since this is now only called in Dynamo 3.3, and in Dynamo 3.1
This doesn't look correct.
We are now changing the return value of - len(p) - len(s.dataForWriting) so this might return 0 here, but the return value should not be set.
Should this really be in a separate test?
Why are you passing the string into the variable and not adding the parameter everywhere?
Why are we dropping `ctx` here?
Did you confirm this also exists? I assume you have to do so for the time?
Why not just check the `keypress` in the list?
I believe the wlr_gles2_texture can be removed now.
You can also use the `cls.decode()` helper here, which could potentially break things in the future.
Should we only do this if the `_clear_types` variable is true?
This is wrong because it always returns a value if a constant is `null`, so this code will throw an error.
This can now be simplified as `auto* processor = AddVerticesProcessor::instance(kv.get(), nullptr, nullptr);`
(style) line over 80 characters
This would not be correct. You just have an `elseif` with an `elseif`.
This should be `return EvmAccount getOrCreateSenderAccount(address);`.
We are not using windows here. I don't think we want to do this, but if we have tests that use this file to load, this file would need to be changed accordingly?
Is this safe to check?
Why was it changed? It's used in the other PR
Why is this needed?
I think this is the only change in this file that's where we are setting the flag on the local var instead of the same flag.
I feel it is not a big deal, but if you have an open source of the two, it seems like you should use one to determine it's an object.
I am confused as to why this is changed from `current_user_group` to `current_user_group`? I think this function should have more than just the name, right?
Don't we have a log.info?
No need for the `ipsets` import :+1:
Could not do that, as I'm not sure about it...
Hm, so it seems unfortunate that these files should be updated to reflect that it should work. :-)
`use captcha?` should probably be renamed.
It seems like this is a bug. I don't think we should be calling `List.WaitInvariant(uint64)` on the `uint64` instead of `uint64` because `uint32` is a `uint64`, and we don't need a new `uint64` in the `col` case.
These are still not being used, and we can remove them
I'm not sure why you'd remove the extra new argument. I see no reason to keep the original method and just use the new argument.
Is this used?
I think we don't need this index anymore; we can just do `update(<<-SQL)` instead. The same for the `products` below.
Why did you change the type to `index_map` here, and in the other tests where you set `index_index_index`?
This is probably too much for an unrelated cleanup but I'd prefer we just doing this in a separate PR. Thanks
The code below does not seem to have a `JoinJoin`.
@jridgewell This is a bug, because the tests were failing because of a different catch block. I think we should just try to keep the catch block and throw an exception here. If the URLEncoder.encode(StringUtils.deleteWhitespace(serviceName), "UTF-8") then the URLEncoder should not be available. But I'd prefer if you want to do this as part of the try/catch and do it with an empty logger.
The option name `PATH` is confusing to have this import. It's more of a name, it's something you could do with: `from astroid import brain_dataclasses`
I think you can do `_corruptedRequest = FrameRequestHeaders;`
I think the `resourceGroup` field is now unused and can be removed entirely, since this change is no longer used.
This seems a little off since this class is used to make sure the abstract class is always used, since this class is only used for the public API.
This seems to break the loop that the plan has been provided for each block. I think it would be better to add a spec for each block to avoid duplicating the loop.
If the limit is disabled, it should not be IPv6.
Line 151 needs to be added.
Why is this necessary? (it wasn't before before)
This should be reverted, as it will not be a custom enum.
I would put `options: { }` on the line above the `namedecorator` (and a more explicit name)
Is this needed for the test run? I don't think so...
We need to add a `cmd-system` flag to `BlockHeight` and we need to do this.
Since this is a user id and we use a different state of the two (e.g. a user id)?
This change doesn't seem to be related but it seems to me that the `@Override` class is missing the `@Override` method that does it.
Nit: `Metadata` and `Metadata` aren't consistent with the code base.
Is this the right place to make this more general? If so, I think it is a good idea to just have the test name as the first argument.
this seems like a bug. Just checking if `WaitUntilClosed` exists before it's passed?
Can we just remove the `dependsOnWebSpan` method and just do this in both methods and the `getAllWebSpan` call?
@Scottmitch why was this removed?
Use `Admin(...)` for these.
Hm, this is not a big deal, I'm pretty sure the log can fail. If a container is not a network network, then this should be removed.
Lint/AmbiguousRegexpLiteral: Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the / if it should be a division.
You can use `io_record_item_record_id ` instead.
Does it make sense to put this in a debug statement?
This is just a note, but I think we should try to fix the issue here, and let the user do it, then use this value here, otherwise we'll have to check whether this is the most reasonable default
This seems like a change in behavior, but why isn't this a public method?
This is not true. The `Boolean` is the default `false` value. This is the only one that's used to have a `true` value.
Please remove the extra spaces between parentheses.
Why not use `ctxUser.DisplayName()`?
I think we should add the `TODO` in the message too
Should this be a new field?
I think the timeout should probably be a constant in this case
Should also have a `ConcurrentMap`.
This should also be done in the _objectStart_ as well.
I'd prefer using logger.logger.
Should this be refactored into a class or something?
so glad we have this be `expect(expect(analytics?).to be_true)`
This will break the tests with `<key>`s.
why not make it optional, and avoid skipping for future changes in forkRunID?
Looks like you can remove this `up` declaration here
Is this the correct behavior? It doesn't seem to be the right fix.
`pyp` should be in these `Decode` and `DecodeACE`
Is there a reason this was added in the first place? Or it's only used by the block right?
I assume you didn't do this now?
Can't we just use `UIViewController` for `MatrixMatrix` instead?
Is this change related? `Shutdown` doesn't seem to be a good idea?
Why do we need this change?
This looks unrelated to this PR.
Can this be removed?
I think this should be `ValidateFunc: true`
Please use tabs instead of spaces for indentation.
I'm not sure this is a good way to check. What is the expected behavior? What if we have some sort of `<` type?
Please use a different function
@jridgewell Can you explain why this change is needed ?
Can you rename this to `server.conf`?
You should add a `.toProto()` here to avoid recomputing the current block. If that are the case, we may not want to do that.
Should these be `plz-out/auto-parameters`? I'd like the idea of making it explicit here and in future: - this file (the `surefir_dir` field) - we need to keep the old name for this file (the `TestResultsFile` field). - we just don't have to create a new module for this file (the `handleFile` is the same as we do for the new `TestResultsFile` property) - it's not a big deal. -
This is a bit of a hack. We need to do a check in the `MetricsClient` as well.
@franckc for me this is not true anymore? Can we make this change in the `if isinstance` branch?
@xetys @erwinmombay Can we move these magic strings to a `<%=True` and use that here instead?
I think we could use `ctx.Background()` instead of creating a global constant here.
This error isn't caught here. `callback` was used to ensure that it can't be `0`, but now, the result is not `0`.
Is there a chance you want to include the condition?
`var` doesn't need to be a `[]`.
Use && instead of and.
Please remove the argument
This change looks unrelated.
I guess this should be reverted too, right?
nit: I think this should be `byte[] bytes = new byte[lenght];`
A few questions: 1. This is another place where I could see an ESM, not an ESM, is a little awkward
Do we need the `std::` at all? (just for safety)
this line is the same as line 135.
Does this need to be part of the public API?
Can you add a `x` here to make sure the section are not expected?
@anuragaw can you check if `$this->prepareDismaxQueryString($string) != null`?
Is this file meant to be part of this PR?
I am not sure about this. The idea is that this is not the only place the file exists. If this is in the first place, I'd expect this to be in the first place - which means we don't need `cliquet.cache_backend` to be used (which was the original issue), and then we wouldn't need that. In the context of this, I'm not sure what the best solution here is to be a little more about.
Can you explain why this change is needed? I am not a fan of a new constructor and I am not really convinced.
This should be renamed to AdditionalDependencies (or something similar but it's not in Parallelame.
I'm surprised there is no way to use `not-localhost` without making it configurable?
This is only needed for tests, right?
should we also add the option on `Run`?
This should probably be `if (!ok && TEST(VM_DELAY_READONLY, area->vm_flags)) {`
This code seems to have no sense if we use it as an argument to the message.
Is this intentional? Why do we have to change it here? (And below.)
Don't remove the extra parens around the expression.
This file does not appear in the file yet, I think it is still useful.
I would have added this line.
`anyMatch` was already being called once for a `let` block
This function is now just for testing purposes, right?
I think we don't need to do any validation for this now right?
Wouldn't be better to use `!empty()` to avoid duplication as the `createQueryBuilder()` calls `getManager()` calls it in other classes
Is it a bug fix that `sep == 0` does not exist?
I would prefer if we'd rather only return this if the function is not a `const`
This is a little bit odd...
I'm not sure if this belongs in `RSpec.configuration`...
This is not related to your changes, but I think you should probably add a `spec['node_modules']` line after `node_modules` or `node_modules` to fix the bug
I'm curious if this change makes sense?
Why not just return `nil` here?
The license header here should be removed.
Why are these static if they are not needed?
I guess you could put a `\System\System\System\System\System\SystemUtils` in there so this is fine
@jridgewell This should be `@currentVersion`
This should use the same version as in the `lib/python-go` directory as well. It is used here for a `install-root` package
I think this is where the node is used. Is this change intentional?
Can you add this to the docstring of `if routeUpd.Dst == nil` ?
@becker33 I think this is a leftover from #1833, but should we update the name of the list?
I'm not sure this is the right way to go - the `spec_helper` spec wasn't actually being used
Shouldn't this be `ConsumerCnt`?
Should we also include a separate function for the new parameter name? `CloudAuditLogsSourceServiceName` is more of a name.
Should this be done for all the others? I'm not sure it's necessary to check the compiler and then doing it in the next iteration, so just checking whether it does not work well on the project.
So, the `fn => fn.clear()` will be `undefined` and `_memoizedFns` will be `undefined`. So, `_memoizedFns` is `None`, which is only used for `_get_rethrow_clear`.
This is not the right way to test the child. You'll need something similar, and you can test it with that
I think this might need updating. We might as well just change `Cause` so we can ignore it and let the user pass it.
This is not really needed since the class is already loaded in the class.
Is this change required?
I think this check and others are not needed, the check is not done in another PR.
Hmm, maybe a better approach here would be to move to the `noPreconditionError` where it will be used?
This should probably be `PORT_S3` since it only applies to `URL` mode.
shouldn't this be set directly, as the default is already set?
The return type is probably redundant here.
Is this needed?
Should we also include a "os" package?
This is the only change that affects all these functions that contain the error level. I think we should just return an error.
I think the new version of the `base` will fail because of the updated version, and the new version in order to run the new version, and we don't care if anybody wants to write anything from the dashboard.
Why is this removed?
I'm not sure I like having a better solution here. It would be good to do something like: ```python exception { logger} catch (Exception e) { logger} catch (Exception e) { throw new RuntimeException(String.format("Failed to parse failures XML: %s", sourceReport) } }
Please use the constant `package.go` (this file is a bit too generic.
@liggitt does this look good to me? I'm curious how the problem is that the new `ctx` API is being used for `UpdateService` and `UpdateUpdateService` calls.
This test is testing the same thing as the one for the "X" of the class name.
I think that if we use an "os" we should not be able to use "operation".
Why is this check necessary ? The window isn't being invoked anywhere in this PR?
This seems to be unrelated.
I'm assuming these imports need to be moved into multiple lines.
Is this a good thing to do? It looks like a `string.MakePullSubscription` is always called.
I think the right part of this condition should be `if (path === '_id' && ...)`
Is it worth adding a method for that?
We need to test that the `body` transport is not a valid value.
@franckc do you have a look at this again?
Doesn't this have to be a `DebugSimulateCalcGraphHangAfter`?
nit: rename the method from `UpdateNameMapping` to `final`?
this change is not correct. I don't think this change is related to your change.
We should just use `c.getLLVMType(runtimePkg.Type())` here instead
This is not necessary. You can just remove it.
I think this should be `(filter).transform()`
Shouldn't we be removing the `if` block as well?
Can you add `from 'Sudson.util.Dategersgers.E501` here instead?
This is a leftover from a previous PR, we should have separate PR
This is used in several places where the user is trying to set this and is used, is there a test for it?
I'm assuming this is a bug fix. It's only for testing purposes that we have to keep `QueueSize` as it's now `long` as it doesn't.
Can we make this a separate method to avoid code duplication
`toggleMenu` shouldn't be necessary. `default` returns `false` if the `true` is `true`
This is a test, should be `LO`
This should actually be tested.
Should we make this `@bridge.print_page(options)` instead?
I think this is not correct as it's a "Class" function. The only thing this happens is that the value should be a "ValueObject *optional" rather than a "ValueObject *optional". We could use a name here to make sure that the value is a "Class" name.
Can you please create a new config, just like you do with `meta['config_dict'] = dict(cfg)`? I think it's not suitable, but I don't feel strongly either way.
@jhipster/developers why we need to enable this?
Shouldn't we use `go.opencensus.io` here?
This should be moved out of the base class and it should be changed to just `v :=`. It's not really the best place for this PR.
This class is only used in test code, so let's not make it `internal` for now.
I think the convention is to use `^VuFind (\d+\.?)+$/` here.
Why not `collection` directly?
Can we just have this be null rather than checking for null? It seems like we should be checking for null here, rather than checking for null.
I don't think this test belongs in this PR.
maybe `value == 'disable'` as well?
Is `t.Skip` not a boolean?
I wonder if we can also add `previousDataLoaded` to `currentDataLoaded` below, since it's only used in the `previousData` scope.
This is a bug fix? Is it just me?
No need to change this, I would say that this is the only thing the user would expect, not a user.
remove empty line
What about a different PR, for clarity, we should rename this to `UnusedVariable` to make it clearer that the previous change happened
Can you use `== true ===` instead of `== true ===` ?
This will be an issue in the future, but I think we should also add a `oldDom.parentNode != (current Lifecycle.getDom())`, and then check `oldDom` once for the above block.
Same here. The exception is a bit confusing.
I think we should keep `flag` here.
Please remove the plugin from our internal container.
I'm not sure I like the use of `TestAccAWSHeader` in the `createRequest` folder - is the reason for this change?
Seems that you didn't have to add the new `runInventory` variable to each call.
Can't we just use the new block here?
This is a bit of a hack, but I'd expect that you can check that the `_set()` call would return a `set` instead of a dict - it will do the same thing with that, so there is not much harm in calling `set` inside a function. I'm not sure this is the right thing to do to check, but it might just be worthwhile to do the same here.
I guess it's not needed? We are returning `null` when it is null.
What does this do?
This was not being used and the only places where we need to use `apply`, since it was an API breaking change that should be reverted.
I think that it could be a lot easier to read if the node role was created with the key.
We shouldn't be doing it for these types.
Does it make sense to put the imports in a separate file? It might make it easier to just add the imports in a separate file (or in a separate PR).
I would not add a dependency on `NVDAObjects.contains` here.
This will need to be in the `VVops` class, right?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
@deads2k i don't think we actually need to do this. I would just add it to line 20, and then we only add it to L1848 and add the same in L1848
This was changed to use the new one for the class
Why do we need to catch a specific exception here, instead of catching it here, as in the case that we're not missing the working one? Why not just do an `cast` here?
why would `All` be 0?
Is there any particular reason for the `_` file to be passed? If so maybe we can remove the file?
Why are these removed?
"line place" is also not clear enough.
These two properties should be in the same PR as above. The same here as the other classes in this PR.
this should be `v1` but not `v1` in the `apiextensions`.
I think we should also add this back in the `protobuf` and `protobuf<0.13.0`
This will break on older system, if the class is not a separate class, and it will have no code. You will need to check it here.
Can we use some property here (not just the one in `electionContexts`) that would be useful.
Do we have a case where tenantID or clientSecret is empty or is that ok?
What does this fix ?
This is a test failure. This seems like it should be the default. It's not just a user.
I think this is going to be a breaking change - if we ever want to test it then I would say the default behavior is `build-system/common/etc`
The type system should be `Tracer.Instance`, since it's a `tracerInstance` property.
Shouldn't the model be set to `null` here? (I mean, I'm not sure we need to call `get_callbacks()` here.) I'm assuming that the above code does not need to be called in a similar case, as the above check is already triggered by the user, but that is why the problem is the problem.
Why did you need these `type`s here?
It seems that the repository ID has been removed before this line, is that OK?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
@steveharter Why did this need `int ParallelLevels => -1;`?
Should we add an example that is not returning a new map of TreeMap and a new map of TreeMap?
why are you using a different default timeout?
I think you need `Compile` here.
Should we add "is this repo" at our bottom of this file? Or is it just for testing purposes?
We usually do not change the import of android.view.View, it is already used by other threads
@jordajuine-ho is the version intentional?
why did you change the variable?
@matt-gardner Is this a deliberate change?
Nit: please use an explicit `if` block with a period.
This was the only thing we were doing before, we should not be doing it for the `/` directory as it has been introduced in the tests and it seems to not be used by the `/` directory, but we should probably do it in the same PR too.
It seems like these names are only used in `appName`, and the type should be used in the `ClassManager` package.
We should also be setting the `export` here.
This file doesn't seem to be used anywhere
shouldn't this be `requireNonNull` ?
How about moving this block to before line 163?
Thanks for the PR @bharatviswa504 :) I was trying to move the default orgs and include it at the end
This is a public constant.
We don't want to include the hostname on temporal cluster as well - this is a very large conversion for SCM, as it's a hard time to read on its server.
Please remove `show tables` as well, and remove the `assertThat("show tables")` in favor of `Assert.assertThat("show tables", "show tables")`
Why do we need `c == '.'` here?
Can we have a test to verify that this is the case?
The name of the application is a bit generic. I think a better name would be `Name of the service`
there was some indentation issues here
why do we need to change it?
Here it's just me, but the order was wrong. This was a bug, because the `v` and ` plan_vars` was being parsed with `v` but the `v` was being invoked to be in the first place and now it was a `v`. I think this is fine.
This is a change for the time ago, and we will not need to make this change in the future
Why not have a blank line between the messages?
Shouldn't we use the same logic in `app/services` method?
I think this will work for all of the cases below (without any of the others) and the attributes are always `dict`
Do we still need `\d+/.test( webDataStreamID )`?
Is there a reason for this change?
What if the states is selected in states and obj.selectionContainer.getSelectedItemsCount(2)==1: is not None and empty? Should it be same as if not length?
Should we be able to remove this?
What's the rational behind the new `ports }}`?
@deads2k i think we should move it to `s.state`
Should probably be NodeMetadata to be local to avoid a new NodeMetadata, it is just a small number of metadata.
Why did you change the order of the arguments? Is it the same for other threads?
Just a minor nitpick: We shouldn't have it in a single place in `lock`.
Why are you calling this function? Isn't that the same as the one above?
This will fail on Linux. You'll see this method in the global scope of this file in a bunch of other places where you've changed it
This is a change from the fix. It is not correct, but the test is passing right away.
Is there anything in which cases `s.Value()` could be called `Public`? If not, wouldn't it be better to have the string return an empty string? And I'm guessing `cmd` should be a `cmd` here as well?
We are not using `NewInternal` anywhere in the code that is already here. Can this just be removed?
We need to fix the test case here to ensure that the product is in the product.
`ClusterIdentity` is not a very good name. It might make more sense to have it an enum instead, so that we can have it live in there. I think it'd make more sense to have it clear the other is the one for `common.go`.
I'm not entirely sure if we need to fix the issue or if we can get an issue for the `LinkedP_bufact` function that returns the only thing we have, which is more correct.
Is there a reason for removing the default config from the default config?
This might have been a little confusing to me. What about "0"?
Can we make this configurable? It is not used anymore and should be removed.
This is the main change. This PR doesn't include the new APIs.
I can't tell why this is necessary? Is a part of my change (or the change above). If I am not mistaken, it should be the same as the others, it should be the case.
Is it possible that the validator complained about this now?
This is a private constant.
this is wrong because the api apiConfig does not support a api api url. You should add it to the api api url to make sure you don't need the api api url
I'm not sure we should have this here. It seems that when the system is not passed, we could use a different name.
nit: I'd prefer to have it in a separate PR, since the `constructor` method is not used for this type.
Should this also check `isCpuSet` in `*configs.Cgroup` ?
Can you move this to the top of the function?
is there a case where no one will be using `print` in an event?
Can you change it back to "ipify"?
This should be set in the settings file too
I wonder if this was a bug. Can't you just do `@locale` instead?
This name is unfortunate, but we should make the name more descriptive.
Why is LIMIT in the end?
I think we can remove the `TimeNowPtrUtcAddSeconds` above now.
This is an extra change, but is not needed.
Why not just always use the `reflect.info=false`?
Why this logger, why not use the logger logger, and just use a logger.transformer?
I'm not sure why this line was removed.
It is not possible to check the txgroup field. I think it's better to return a nil error.
Nit: You can use X509Certificate2 ClientCertificate
This is a little confusing as the `__init__.py` will only have a `Max` and it doesn't require any `gendoc`.
Why do the `Ready()` call here instead of the `p2p` setting?
Please add a space after `constexpr int32_t partitions = 6;`
Ahh, this test case can also include the `A\nB` field on line 152
I think it was good to have here a similar change in debug.cs
I think it should be `AWS IAM` instead of `IAM`
Can you add a new constructor to avoid calling this `NullPointerException`, I don't think this is true.
I think this logic should be moved inside `constants.xml`?
I'd make this a transport protocol
This is not the right place to put this. It just seems that the tests are failing.
nit: I think the `@author` annotation is already part of the API, since it is a bit confusing to have it in the API
Why are you doing this? It's weird to use the unique `\r` prefix here as they are for the actual text.
@frodro I'm a bit confused why it's needed. I think `gcode.alias` is the correct error, since the rest of this function is the same.
I think `Map` should be added here as well.
This is an overly quick fix, I think you should just make a new method to make sure you have to.
The `setUp = true` block is still needed after the `resumeGroupPlayback` block.
This could be done in a follow up PR, to make sure that the metric name isn't invalid, so you don't need to pass `MeterProviderBuilderSdk`
@cramforce is this going to change the behavior from the assembly to the correct location? I am wondering if the current assembly should be changed to use the correct location here - this is the case that `LoadLoadLoadAssemblyName` will do something more accurate - we should also check for the exact exact `AssemblyLoadContext.Default`
Wouldn't it be better to keep the original `SYSLOG_INTERNAL_WARNING_ONCE` call before calling `get_evex_user_active`?
Can we use `directconnection.replace(uri, options)` here to make sure we don't accidentally remove this?
What about this change? It is hard to read
Please add the same for both fields.
Is it safe to remove this?
Should we make sure `traceLogs` is a public API for it ? If not, we may need to make sure we don't have any errors with it.
I'm not sure if this is the best place for this. This is called for every call to `ConditionDeadlineToChildren` to make it more clear.
I think we should be able to remove `--DEBUG` now, since they're all the root permissions in the same way we are doing that.
Is this change intentional ? It will cause `0.38:17` to always be `0` if `byte[0]?` is `0` but `0` is `0.38:17`
I don't see any value in doing this. This is used in the code, and if the `is` value is not the default, we should change the `g` to `is_union`
I think the above `getQueryFactory()` is a bit of a tad shorter, and it should be a simple one, e.g. `getQueryFactory()`, not a string (`getQueryFactory()`, but I guess that's more likely that we would need to be using the same name as the other one in `getQueryFactory()`).
if mask.dtype != np.bool:
We should rename this import.
This is the wrong place for this message. The port number is the default log level and the log level will be the same as the other port number.
Can we remove this field?
This is the main change for the fix.
I would have made this change in a previous commit
I don't understand why it's necessary to use ProcessableBlockHeader here.
I'd remove this, but it's not used anywhere else
This is the main change that fixes the issue that we're testing for an update_existing_accounts flag.
Why is this change required?
I think a more correct approach would be to do this. The current `grpExpr->generateCacheKey()` is to avoid the `_n` and call `grpExpr.addCacheKey` to the `isRollup` function (which is also an issue), but we can also add a check for `grpExpr.addCacheKey` to the `grpExpr.addCacheKey` check.
This should be `@AutoAutoElement`. Otherwise, the import fails when we get a different `ParamDocView` from an object.
Why did you need this?
Is there an advantage of using `isinstance` over `isinstance` here?
why not make this a function?
This should not be needed, we can just remove it entirely.
We should add the `GroupCloudBackupID` to the interface.
Why is the normal `OPFCCSPCF` in the list list?
If the index is no longer being used in the `try-except` function, this would cause a problem, right?
What's the reason for this change?
can this be done on one line?
I think this should be `sample.types.BlockHeight`, right?
Can you move this logic out of the loop?
I don't think it's necessary to include a `StatusFilter` here, because it's a `Type`. I think that's what we want to do in these cases.
Can you rename this method since it is public and the other API is not modified?
This should be `list(getCore().getCoreContainer().getSolrClientCache())`.
Should be `Version_64`?
Is this change intended?
nit: I'd prefer an assertion for `DocIdSetIterator` here
this should be called in a finally clause in case a function is not used.
We should make this change to allow for the tests to pass. Also this is a bug fix.
I am not entirely sure if this is the right default. I would say that instead, this should be `0`, not `1`, and `0b`. Also, it should be `0`, to make it `0b`, and then we should have `0b`. You should take care of that.
What does "help" mean? Do we expect that it is empty or less than?
@jridgewell I have been adding another timeout to `maxHeight` as I don't know if we can just get rid of it. The only way we are using `maxHeight` is to allow for the timeout to be set for the timeout instead of just the max time.
If I'm not mistaken, this file is only used to parse output dir and not deleted? It is not used and will be removed.
Line is too long. [83/80]
I think this is the line that you added in the test, it's not a bug fix.
Can this be refactored to something more generic, like `User`? Or is it a separate method?
I'm not sure I like having this file at all, but we should also mention it in license header file
I guess we could move this code to `Configuration` and just pass in a `Configuration`?
I'm not sure this can be `close()`?
`supportedPolicies` is a list of values, so I would suggest we use a list of values like `bool(string)`, `supportedPolicies` instead`
I'm a little worried about this. Why not have a helper function?
This is the only real change in this file. The other files are just about the file name which is the name.
Should we use keyword args for root %1$b here (and the one above)?
Why does this change?
This should probably be moved into `CLEANUPS` so that it's easier to understand what the table is doing?
Why is this needed?
I think you need to do something here, the result of `null` will never be true.
Please remove the str() spaces between the `{!empty(...)` and the `{`.
Why do we want to add the new function?
Is there a way to avoid calling `import_mpi4py()` twice?
Why we need to handle the error error here but we're trying to reduce the number of error cases here?
I don't think we need to include `TransportFeature` here.
Why do you need this change? The `.isArray(false)` method already exists on line 675
Should not it be "NABoolean isFirstBatch" instead?
shouldn't this be `&spaceId` since the key is the value that is passed to the method itself and in which case it is the same as the value passed in the method?
is this used anywhere?
Why is the `defer udpConn.Close()` removed from here?
Please add an enum to the client, and the server should be renamed. Otherwise it is not used in client, as the server will not have it yet as the client has access to the server.
Why is it necessary to remove the reference to `persistdir` here?
Why are we removing the entry-free and not just removing the entry-free?
Should add a timeout so that this is only used for testing purposes?
Please, use `WRITEStyle` instead.
This is really unfortunate, because it is in the "remote" file, which is not in the `Config` file but it's not a path-specific header, so this can be `Config` instead of `Config` since it is the same as the `./pants/` file
You could have added a `.` at the end.
This is no longer an `IEnumerable`. It should be moved to `1L`.
Shouldn't this be replaced by int_version?
Since we are not going to use 200 in any way, can we use a more meaningful name? `to make it clear that 200 is a valid state.
don't you need the check for both the `transport` and `transport` ?
Is there a reason for not using a `DEFAULT_WriteOROR_VERSION` in here and in the same places we use the same method on these cases?
Nit: Can we make the getter for `IsEip0` and have it `true` in the name?
it seems like a good candidate to leave this here but for now `sn.Username` could be a bit more general purpose to have a `return` statement like `returnreturn docblock` in the code.
you should be able to remove this entirely
You could do this with `@if (role && (parent.tagName.toLowerCase())`.
Why do we need this if check?
Do you need a different name? I think it should be a separate type?
These are only for ackDelay so I would not change the name of this code.
Do we really need to make this public?
I don't think you need this method here since you only need the index_index?
I'm not sure this needs to be `const char *` instead of `
Why was this changed?
This test can be removed now.
again change here. It's not used anymore
I think this change is not needed anymore?
I'm wondering how much of the wlr_pointer_init is used at all. The `libinput_dev` and `libinput_device_config_tap` functions have to be initialized with `wlr_pointer_init`, `libinput_device_config_tap` is only used on the `cpp` function and `wlr_z` functions. So, I think this should only be used in the `cpp` function (with the actual error message), right?
this variable name should be changed to match the constructor below
Unrelated to the PR but it would be nice to use `CLIENT_malloc(opnd_size_in_bytes(OPSZ_CACHE_LINE, 64, "opnd_sys)` here.
why the change in master? I'm curious why this is needed?
We don't even need this column, just add it to the `add_foreign_key` below.
I think this should happen before the `go` and in the other methods (in the meantime, `go.slack` and `go/slack`).
So, we have `_` but not `__DIR__` which is a `__DIR__` method. So it's a `f` of this object. I don't see much point in doing this.
Why are you doing this? We don't need to do a similar test in this PR, but I think it's better to just set things like the `properties` in that case and set it to `true` (which would still be useful if there were a `this.setAll(properties)`)
Is this columns the same than the previous migration? I'm not seeing any migration changes in the schema.
Should these be global properties? Or is this from the actual location of a change in the build?
Why is the error returned by the user?
@michalpristor this change as you did for `set_metadata_log_params` to work?
This is a bit of a hack. Can I ask me what is going on here.
I think the way we set the Pass, is that the user provided Pass and the Pass is in the middle of the manager?
Can we make this use the number of bytes in the same class?
I'd remove the `rake secret` altogether.
Please remove this. The new using statement is already in the using statement, so we can remove this.
Should we just leave this in the CA if it's not used?
I think we need to do this for the future. Can we just keep track of this?
Trailing whitespace detected.
Huh, is this going to change the default? The `PRIORITY` property is the default.
This should be `regex` too, right? You have a bunch of other places in this file.
I think the `config` should be in a `Task.EndpointSliceHandler`?
The `NAV_DRAWER_TAGS` was not used anymore.
I think this is probably worth a debug print
nit: I'd remove "any" and "all" here too.
Is this safe to remove? We could move `PassCharmTargetRestriction` out of this function.
Is this still needed?
I think `RubyException` is a little too vague here
Shouldn't the volume go to the volume? Is there a way to make it clear this is being used?
This could be a one liner with the extra `if` statement
I think you need to update this to `md.data.cachedChanges = *changes.Info` so that you can get the same results without passing `cachedChanges`
Should we rename this to `execute_task` since they only return one of those situations when running tests?
Is it possible to make a constant of the switch, and not just pass the switch through to the switch?
I don't think this is a good idea. The `wal_->lastLogId()` in `lib/wal_` and the `wal_` in `lib/wal_` are a bad practice.
why did you remove the `getFormType()` here?
We should not be using this feature anymore, we should not use any new API.
I think we might want to name it "pageLoad" since the default can only be used by "Property" and "Property" for a name.
Please don't do this import, it is already imported by this import.
Shouldn't we have a test for this?
This could be just `diskName`.
Please do not add trailing `,` on next line.
@mfojtik why is this ok?
I'm not sure if we really need to change the `ref` tag for the `hd_metadata.original` API to work, and I'm wondering if we should change `hd_metadata.unit` to something like this.
Why do we need `JToken` here?
I don't think this should be a warning, is it?
I think it would be better to have an array of arrays in front of strings here, e.g. `[{{.Volume.runNamespace}}]` instead so it would be easier to understand what it was before.
This property should be marked just as nullable and not be used.
can you please move the `data_idx` to `LGBM_SE_INT`?
This is the wrong place to put this function.
why not use a minimum version of docker-compose?
I think `x` and `x` might need a more explicit name, maybe just `x`?
I would use `self.assertEqual(size, 1)`, as that's where the user doesn't know what the headers were for
Is there a reason we should not use a message in this case? Seems like that would be a good change to me, but I won't have any suggestions for how.
This can be removed.
Is there a reason for removing `feature_password` instead of removing `feature_password`? It looks like the spec only changes to the `libbeat/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/fixtures/
Shouldn't the `uint` be changed to use `PayloadLength = MinAllowedMaxFrameSize - HeaderLength;`?
Why change this test?
this should be optional I think
not sure why it is called this. the tests are failing
Just want to double check: If `kinesis` is enabled then this is fine.
I'd prefer to have a method on these `Fill`, `100` and `100100` here.
I'm curious how is this ever used for a config? I guess it should be a config option to keep this to have the same config.
I'd rather remove the `v2` part from the command line (and maybe not that it has a special case).
We have already a list of items so the user can pass their list to the package.
Why not `corev1` ?
can you add a check if this is a valid table?
I think we should use `.._type=('build', 'test').....` instead
I removed this line, because it's no longer needed after `if`
Would it make sense to make BN a default of 5 seconds and make BN a default of 5 seconds?
No star imports
is it possible that this is a string that we want to use?
This change will be breaking when I see a `info`.
I assume these should be using the same name for all the new `.`
Do we have to mention that this is an unbounded file?
Please don't expose this as a separate module. There's also an error in the `progressindicator` class.
This import should go into `pkg/api/core`.
Let's not use a variable named "operatorType", since it will keep easier to read and add a new variable for it.
I am a bit confused, the original link of the `to a` is a `bool`, not a `bool`.
NIT: we generally prefer a single variable `_` in this file.
The other two in this file can be removed.
This should be an `CharType *`.
Can we add this new method to `checkNotNull` instead? It should be used in other places as well.
Can you add a doc here that it's not used anywhere?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
`async` is not needed anymore since we have already done it elsewhere.
Not really sure if this is a good change. What is the code on `no-return`? Does it get removed from the repo?
What is this? It seems like a very useful value for a constant to have.
It would be good to keep this as a function. As it is done in the other places, it's better to check what is being done in the function.
Should we have a name for this?
should this be a `use` statement?
This should probably have a unit test for this.
Shouldn't we just remove the `even if we have a GRUB >2.02`?
Is it a typo to pass the `Client` instead of the empty string?
i'm not sure if these have any effect in the codebase but the local `backbone_js` and `backbone_js_on_rails` API, should we be doing this in `/products`?
@cra0zy we probably shouldn't use `expectedAssignedCDs` here instead
I think this might need some more details.
I'm not sure what this is for?
Line is too long. [92/80]
Is this change related to the bug?
what are the `buffer[:0]` types?
Please use `script().to(_)`.
I don't know if I need to change it here.
`!= 0` ?
The `else` branch can be omitted if you are not doing any characters in the "local file" code, but that is not the case.
I think this is a leftover from the previous commit
remove wlr_surface_state_release() and replace wlr_surface_state_release_buffer() with wlr_surface_state_release()?
I'd recommend renaming this test as it is more readable.
I think it's better to put it in vanished.xml and use it in the vanished file.
@vpodzime how does this happen? I don't see why we're using `l` as a `.IsEvmTransfer()` in the first place.
I see this is only a notification, but is that really what we want?
This is used only once in the code. Do we really need it?
I assume these methods are the same? I'm not familiar with the rest of the code.
I assume the `encryptedRecord.getHostName()` check was not needed anymore?
If you're using it here, then the default `@title` is `nil` because the `@` is `false`
This should be removed, right?
I see that this also works with the `GameData` above. Is there a way to fix it in a way that would be to use `GameData`?
why do we need to assert for the fields of `dict` and `Object.keys`?
Is this the correct way to check the error?
Should this be a `find_package_location` instead of the try/catch?
Should we make it clear that we are supplied with header fields already exists?
I'd be interested in using `super-init` instead of `path_basename`, to keep our code consistent across all files.
Why is this needed here, and not on line 539?
This method is used in many places, can we move this to the `else` block and use it in another place? Also, is it really needed to check `if actionable_step` here and elsewhere?
This change seems unrelated?
How about: "check reportArgs that is used by hasData" ?
Why is this change needed?
Is it worth having a check to make sure the first error is 1 here or is no longer a list?
We should probably add `@checkout` attribute to `mail`. Same applies for the above PR.
This is a boolean method, can you update the function description please?
why not use `@SuppressWarnings` ?
Hmm, why the cast to list here?
Instead of doing this, you could just call it `project/input`. Also, you can use a device type (CPU or CUDA) and make the same matrix more readable.
This should be `o.appName.Value`
This will not require the APP_URL host. It looks like the APP_URL is not a user-facing link to the user.
can this be a pointer?
Why would we ever need to re-enable this?
This should be `func (s[stream) FullClose() error {`.
What is it supposed to be the "Health check failed"?
Should we just delete the AzureAppServices.Metadata.Map (in all other places too)?
Why is this test needed? It seems to be no longer used, right?
This is going to create a "SKIPPED" prefix which means we can't change the signature of it. It is the same as the function above.
why this change?
This is not the right place to put this stuff. The `use`/`endif` can be false (or maybe not, but in the case of an error that was not true).
This was a bad merge with @bvaradar
Let's move this line up so we dont do it now
I don't think this import belongs here
Is it not used?
It's not clear why this is a class of NVDA, but it's not an option for it (see above). If that's the case, why is it needed?
Do you need something like `-1` as opposed to `-2`?
You don't need the `ipip` attribute here.
How do you think this belongs to the current version in this class? I thought the semantics of the interface were `LocalDateTime`, so that we would not want to use the new version as a parameter?
I would put this logic in `error()` to make it easier to read when we can't get the `diagArea_->contains(-2013)` check and the error message.
rm empty line
I wonder if you can use the macro in the right place for this?
This is the main change. The `rmd` is not an `Metric` with the current version of the `testing.T` command.
They are now incorrect, can we just delete the old test?
This function should return an error, otherwise we will have a bug in the future if we get an `virtualNode` property
Is this supposed to be here?
I think it might be easier to just set the user here.
This will not work on any of the tests, is it because this is the first check for `NAME.getVersion()`?
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
This will fail if `err == true`
I'm guessing this is still wrong now
is this still used?
Would the `RLock()` ever be used here?
I would use a `pkg_name` constant here for the versioning package.
Please revert this change. If you are not using your code, you should remove it.
This will break existing records with `v(.+`, but is `v(.+` available in other places?
Isn't the `!is_Create` the `==` check for the version number? Or is this just a style change?
`debug` for more than just `info`, we'll have more context to catch which exceptions are going.
I wonder if we can just use `&& < 0.9.8f` here.
I am sure it won't be a valid name, but I can't remember why it works. Wouldn't that be better to just change `readActive` to something like `readActiveBlockProducersByHeightTests`?
The `getTarget()` returns `null` instead of empty string for the `HashAndFieldName` method, so that it's more likely to be changed.
Why is this needed?
why is it not a public method ?
Does this need to be added to the other changes?
why not just always `e.address`?
this is the only place where we need a separate separate folder, I would recommend keeping it as `go fmt`.
We can make `resource` accept an error.
Should we do an explicit check here that the value is null?
This is now dead code, but I'd rather remove it if it doesn't.
I'm surprised you didn't have this before. I thought the idea was to use the constant that was the case before.
same here, I'd like to return const_cast as it is a const.
`libpath` is a dependency of `curr_path` (the `libpath` for `bokeh.package.get` is not used, right?). It was never used in the original code base, so it is more of a dependency of `curr`
This will be refactored to use the private field for all the new `IF_ARM` methods, but I don't see a potential reason for that.
Isn't it good to add `@Memoized` as a singleton? It's a bit weird.
`selected` is not defined in the function. You are already passing the `selected` argument in the function.
@bryevdv, I think we need to add a import for the class name
Do we also want this to be `.map(PrimeNumbers::factorization)`
This test is already loaded on the server, right?
This was a bug
Why are we not using the package package?
This is a no-op, right?
Can you please also use `log` type hints on these checks. You can also check if `info` is in `info` and you don't use `log.info`
This was the cause of the test failure that was working correctly, so it looks like the only case where we actually had a `=>` with a `=>` instance, but the `./` was a string in the name, so I think it's the only way that we're getting the result.
Is this a typo?
why is this removed?
It looks like this was added to ensure that the values are set correctly.
I'm not entirely sure the need for the `values` here - is that an error?
I'd rather be explicit like ` Training`, ` Training` etc.
nit: I think it would be more consistent to rename this `HEAP_SNAPSHOT`
I'm not sure it's safe for this to be an `Tree` object. It is not possible to have a `Tree_type` object to change this object (and the object will be removed in a different way), so maybe it's better to use a single object instead and use that object here.
I'd prefer we avoid using `get` here, and if it is the same, then it will have to be moved to the common interface
did you mean to delete this?
Shouldn't we check that the return type is in a method?
Why is this being removed?
We should keep it as `ConcurrentHashMap` here and then we don't need any of the classes in `HashMap`
In case you are not going to use Setting.value('titleNaturalSort') you are not going to get set to 0. I would recommend checking if this is true and then if it is false, then check if this is true.
Layout/MultilineMethodCallIndentation: Align .to_not_to_not_to_not_to_not_to_not_to_3 on line 112.
Why did we need a new map here?
The `p2p` suffix here is not needed, we have to remove the ` Explore` prefix.
Same here -- is this working without any changes to these?
This is just to reduce the number of tests.
The type is `Type` but I don't think you'd want it to be `Type.omitempty()` since I think we're missing some `map[string]string`.
This change was necessary, since we are using different projects now
I would not add this to the constructor, so `@since` is not a good name.
Same as above, we can omit this pylint if `inconsistent-return-statements` is not defined.
Why is it changed from `src` to `list` ?
Can we use this class to avoid confusion here?
Why the extra field is not `count`?
This seems unnecessary.
Could just call `applyGRPCOptions(opts)` here, since it returns a no-op if it's not specified.
I assume this means that we can't test if the resource exists at all? I'm not sure we should test it, as we are on windows in the test suite.
@bparees this is an improvement. I think the previous one is correct, we want to do the same for the payment channel in the first place.
This is not needed.
I think there is a better way to do this in `testBucketrog` and use it in `testBucketrog`, and then check `if err.Code == "BucketAlreadyOwnedByYou", error?`.
I think you should be able to use a different naming convention for the new naming...
Was this change intended?
This is also a bit of a hack, but if we're going to make `ROUTER` a default we can't change, I think we'll be removing `ROUTER` as well and use `ROUTER`. The only caller of this is to add to `ROUTER`. The logic is for `ROUTER` so I'm not too sure how it's supposed to change.
This was a no-op before - it wasn't working before?
this means every time the time a new limit is sent?
I believe it's the case that MapLen returns true or decoding a struct. What do you think about: * The fields of the `MapLen` returns `false` * The fields of the callback returns `true`
I think you want to put the right block at the bottom, otherwise the last block will fail (and if the c.chain.BlockHeaderByHeight(height - 1) is "long time".
@davidjumani, any reason you made that change?
@bvaradar We are changing the order for the --rbind to a string. This is why I had to change the test. It's just a small test so that I don't have to change that.
why the change of the fixture here?
I'm not sure about this. It is not enough. If we don't add the `Eth` price to the client, then we should remove the `*` price in the client. I would say it would be good to use an actual node for all other fields.
why is this needed?
This should not be necessary since the input is a string.
This feels like it should be on a separate line.
This is just a minor minor typo: the `sender` prefix is no longer needed
@Pearl1594 is this correct?
I don't think this is a good place to put this. I'd rather just check if the first part of the list is the same, and if that's possible it would be better to have a different string, and then just set it to the second string (i.e. `assertTrue(abs(nrmse.getMetric())`).
This is the change that works with the changes in this PR.
Redundant curly braces around a hash parameter.
Why this change? I don't see why you've removed an `.String()` call here.
Shouldn't there be a test for this?
I'm not seeing any other options used that were using in `app/assets/api/v1/register_url.js` and now it works
This is an old function that takes us to make a long parameter, and this is where the `TeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeamTeam
I think this can be removed.
I don't understand the purpose of this.
@mjkkirschner can you explain this change?
This should be an `LOG.fine("edgedriver will log to " + logFile);`
I'd recommend moving this to its own function, since we have a single `DecodeString` method there, not a single `DecodeError`.
I think a better fix here to use `setUp` instead of the model to use this parameter.
remove empty line
`_dispatchPipes.Count` is a property property that can be used. So I think it is better to change it to `dispatchPipes.Count` and `dispatchPipes.runtime` instead.
@smarterclayton do you remember what is the intent here?
This is a good change to me, as the test is failing on a version where `worker_result_handler` is used. I'm assuming this is something that could be deleted?
Can we put this into its own component?
I think you can remove this if statement since it is not used anywhere.
this can be combined with the group below
remove empty line.
This should use the `index` function to determine if `reg` is enabled.
can we use `coin_enabled` here?
I think it was intentional to set the `Checked` variable instead of passing it to the `txtQValueTo`?
I guess we want to add these if we're going to be careful in the future.
I'm not sure we need to call this before setting the logger.
Why are these config properties removed?
Why is this needed?
I don't think you need a new controller for this, but this is the new controller for this, so can change as is.
We need to make sure to wait until that is the minimal cache for every minimal mode.
I'm not sure this is a good idea. It may cause issues if we don't have accessibility in the code, but I'm not sure this is the best solution to make this `nameof` for now.
Please don't use wildcard imports.
this should be changed also to `html_safe`
Why is the check needed?
Not sure this is the right default here. What's it for?
this should be removed
@benhalpern this is a bit of a hack, but I think that would be much cleaner (I think) to put this in a new line. Maybe we could move the `setTimeout(function reload() {` statement outside of the `try` block as well and put an IntelliJ in the `setTimeout(user_for :javascript))` block?
Should we be removing the `aws/...` package and remove the `aws/amazon-ecs-agent/agent/test` package?
This is the default, so shouldn't be required if the user explicitly sets it.
Would it be worth wrapping these params in a util function so we know it is not possible to have an int in the first place?
@sparrowDom Can you explain why this is needed?
you can just use `vcrChan` here.
I don't think `existing_step_for` should work here, because it's used in a different PR.
I think you can remove this, and remove it altogether
can be removed
can you also update this with the `or_import_state` below?
should we use this in all places?
I don't think you should be making this change but I think that should work properly if it's just a guard clause that's actually a valid alternative. It might be nice if that was just `[Task does not support noop]` and it will fail.
remove empty line?
you should probably have one of these `headers=self.headers` and `MINIMALIST_BUCKET`.
`c._nextState` can be `null` and `undefined`, and the `undefined` is the right one. We're going to do a `isProps` check instead.
I think there should actually be a better way to handle this.
I don't think these need to be defined.
`final` not required
we should add `false` in `default` as well.
This can be simplified to: `poll_schema_version2`
Line is too long. [98/80]
nit: `How about the explicit `GetConfiguration`? It's not necessary to call this method from the `setupBuilder` object.
I believe, this is fine for now. :)
I would use `pathlib.current()`
Can you remove this entire getter since it is not used anymore, and it's the most obvious change.
I'm not sure it makes sense to have a helper method in the `onStopTrackingTouch` method. As in, the `onStopTrackingTouch` method does not have access to the instance (that way `onStartTrackingTouch` is called from a `onStopTrackingTouch`) that would have to be called for all the other methods (e.g. `onStopTrackingTouch`) that would do the right thing. This will cause issues for all other tests, and then we could avoid the code that is done by using `onStartTrackingTouch` as the second argument.
I'm not sure if this is the right fix for this bug - we should be setting `self.reg_class_agnostic` to an empty string - or else this should always be `-1`.
Why the extra blank line?
I think this import should be removed and its own PR
You can use `WhenAll(...)` to get the actual tasks.
in the commit message, should be "in the workspace if we're already setting the stream
Layout/MultilineMethodCallIndentation: Align .where with .and_commits_and_affiliates on line 251.
We should add a `setBrowserLoginEnabled` flag to the caller of this method.
While not directly related to the other changes, I'd prefer to keep all `DDS_` together together.
If `request.GetRequestId()` is set to nil, then we will return a pointer here. Is `Config.config` intentional?
Does this work? I don't have a strong opinion, but I don't think that's an issue in a bunch of other places (in which case `constants.go` is right?)
We can try to avoid using `try` to make sure we don't have to raise an exception in the future.
We should add an entry for this type and the `switch` link is in the base path for this type, and we already have a `switch` in that file.
This should be `list_GROUP_USERS_to_root`
I'd move it to `get_full_path`. That's the only thing you're making for a file, so I wouldn't expect it to take too long.
Should we also have this property?
This is a bit of a hack, but I think that we should just use the `self.cart.factory` file here instead.
I don't know if you have to do this, but why don't you check the expected behaviour?
why is this needed?
I'm not sure what the best way to write is that this is only `-authenticated` and not `--authenticated`? In this way, we can just change the message to `-a` and not include this message in the code.
This is incorrect because the record is always the first record. If `record[cache_column]` is `None`, this will throw an exception when `len(name) == 0` and it will return `None`. It could also be fixed if `record[cache_column]` is `None`, and `!=` is missing.
How does the int64 occur on the test? It looks like this was the only place where `sum` is being used
I'm not sure it is safe to include in this PR, but I'm not sure how the change works.
Is it needed to run os tests? I'm not sure if it matters.
This is going to be overkill as we are not actually testing the API anymore.
Should we check for batchReadsSparkSession.active() here as well?
this is the only one that's used in the base files.
Please don't use `.statusCode` here, you can use `.getStatusCode()` instead of this.
Is it really necessary that this change won't work for both these changes?
@bparees I think we should also have `case` and `caseOnlyAttribute` here.
I'd suggest to add a `generate_cloudformation`.
Please revert this change.
Can you make the return type a string so it is easier to understand why it was necessary?
I don't think you should use the const const for `sizeof(a) / sizeof(a[0]))` here.
Can this be removed?
@Pearl1594 is this a breaking change? i'm not sure if this variable is needed
@chenasjeff is this supposed to be `ByteOrder.LITTLE_ENDIAN.slice()` ?
Is the `APP_RANGE_OFFSET` used somewhere?
We should not use `<=` for this. We're now using it throughout the codebase.
do we still need this?
I'm not sure if `Millisecond` is a good choice since all of it could be anything, but `maxConnectRetries` could be `const`
Why did you remove `zip`?
Safer to add `from .socks_client import SocksClientLayer` to both packages
We have a `get_command_sigsigmasks()` function which does the same thing. I don't think we should be creating a new function in all of our functions that do have same result. This is because it's the same thing as the one below, and I think it is more clear to have it there.
Is this something that you've made?
Can you put `encoding` on the next line?
Why the fix?
Is there an option to import this only?
Is this the correct location?
What happens when `len(fields[1])) > 0)` is false?
Should be added in the docs, or is there some specific reason to not use it as the default?
This is the only change needed in this file. You are already passing the connection connection into the `kubernetes` object so you have to do this in a few places.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think these are needed for them; they could be called directly by the `oc` function, but not in the `ococConsoleWindow`, so the `ococConsoleWindow` function can be called.
This should be moved to the `FunctionalVersion` package too?
I would have just done the default value for `write.watermark.field` in the `if`
can we make `archiveWritersMap` the same as `archiveWriters?Map` ?
Can you check if the IP is required here?
If it does not exist, the line should still be there
this is the only place in the scope of the PR: the formatting of the two lines seem to be the same as the one below.
This function is now unused now, please remove it.
Is it the case that `openvpnPort` is the same as `Port` ?
This should be `topology.connect(options, (err, newTopology) =>`
I think we'll need to use `spec_helper` in this test too.
Should not it be `||=` instead of `||=`?
`OnResetEvent(false)` is the correct thing to do, because `OnOutputsEvent` is the default
What is going on here? Is this the correct method to call `getClass().Add`?
This is now being used in the test file (which was added before).
Can we call it `SessionStorageTest` instead? I mean, if a user specifies `SessionStorageTest` from a different table file, we will need to use it in a different file?
I think we should use the new config config here instead of this.
I see the new `asmsecretres` was added in both places, but now it wasn't being used. I think this is still a bug, and we should be able to make sure we can remove this from the `agent/taskresource` file.
`json_decode` and `json_encode` are not supposed to return a `null` value for that.
I think `Transport` should be in the same file as the one in `pkg/api/types.go`
is the second half of the "common" of the "VMSwitch" the network name still valid?
Is there any advantage of this change that will create the interface?
Is this the right approach? This should be `output.FlagError[invalid xrc20 address]`
How about using `DecimalMetrics` here? Then the `Read` and `BlectiveObjects` can be used instead of `DecimalMetrics` below.
Can you please add a TODO in here that the `unsafe` is being executed by the test to make sure the `force` is being used?
Why do you need to fix this?
Can you change `dirname` to `strO`?
Is it really needed for this specific use case?
We should not use this here. I think we should just use the lock.
Same question as above. It should be `Configresp` and `addon` instead.
I don't see how this change is used.
I don't think this is the right place to do this. In fact, if this is a function, this will throw an error in some way, which will never be called.
this is a good change to me - i am not familiar with that code
Do we need to do any validation that all statements are valid, or do we just need to check if a hash exists or not?
I don't think this is required, we should change it here as well.
We should probably make this a `referer-header` (and probably only use the `_finally` suffix if there is a `_n` one)
Should this be a `pathpath` instead of a `s/path`?
I don't think we need a special type for this. We can do it in `TransactionPolicy`, as it's not used anymore.
Should this be a keys parameter? If not, you could use a constant that can be used instead.
I think we should use an enum value for `vertical` instead of `disabled:`.
This is an import statement and should be removed.
Why is this removed?
This seems like a leak in the test that could be extracted outside the `#` namespace.
I think we should log `LOG.finest` here.
This was a temporary change. It's not used, right?
I wonder, why this is a global one, I see.
>std::cout << "test3_5" << std::endl; [](start = 29, length = 6) nit: please use std::is_5 instead of std::is_5
Why is `MarshalIndent` being called twice in this test? It seems to me like the test did not show up here because of the `Marshal` test.
Please update the doc.
This should be removed.
Why is this "Match"?
I don't think we can do this here, it seems that we are using `get()` directly, which is why we don't use `isWorldState`, and if the value was a `MutableWorldState`, this will fail.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
why float_x.pow(2).sum(2, keepdim=True).expand_as(x) * x / norm
Is `import best best best just to import/namespace,` (which is what was the point of imports above it)
Why this change? I think that's what I meant.
Why not just `github.com/docker/api/types`? I'm not really sure I see a difference between `docker` and `types`...
Why are these not needed?
Should we make getTotalProductCount a global parameter in the constructor?
Please remove this TODO
Could you change the name here as well, and have the other docstring below `local`, `local`, etc.?
Is there a reason to keep the `header`?
I'd put this right under the `Sulu_user` block. The function is only used in the cache, and not in the `getenv` function.
Why did you need to get the waitTimeoutMillis from the config object instead of just waitUTimeoutMillis? If you do a lot of things that might be useful but I'm not sure if there was a cleaner way to do it. If we do that, we should probably just change the test.
isn't the component itself still valid?
Why is there no `esm` any longer necessary?
I think you forgot to add this to `os.environ.get('JAVA_OPTS', '').strip()`
this seems wrong.
I believe this should be `hasattr(pkt, "type") and pkt.type == 23` because the check is actually `type=True`
We need to use `*` in all cases. The rest of our `javaparser`'s library imports are identical.
I think we can move the `and-improved` field to the `init` field to keep the same behavior as the `src/past/free` test.
@deads2k I think this is a good change. The `/ecr` broke our tests, but I want to make sure you are going to change this for a while.
Can we keep it simple? I think these are just to be `os.cmd`, but it's not supposed to be.
I think we should just have `[NotNullWhen(true)]`. I'm not sure if we should be returning nullable here
This is a duplicate in the base class, so the default value of the function is always the default.
I would recommend making the constructor a constant for this.
Should this be `panic(fmt.Sprintf(taskManagerImpl encountered MinTaskID: %v vs %v)` or something similar?
I would put the old_size call here and then remove it from the list
We should add the new functionality for this and other methods (instead of making it a `PipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipPipOnVOS_util.LUfs_util(html, String, String, String, String)`) that would be clearer.
This method is unused.
Should this be "Basic"?
This is a little weird - can you explain why it's necessary and why you're just not using `scope`?
Need a space before the `+`
I think this can't be typecasted. We can either pass `item.layout` or `item.layout` to pass `item` (which you can pass it to `item` and then do `fillWidth: optional`).
@cra0zy I don't have the need for this
this will be always false if the package is empty, then this line should be true
Is the "max_pending" part not correct here? The value is used to create a new type of resources in the config, right?
Can we move this to a new interface, or is it just used in the new one?
Why does it need to be configurable?
can you fix this one
@cramforce is this still needed for the `_ancestorComponent`?
Is it really a good idea to make this `null` optional in case of `_jsonRpcProcessor`?
@bartonjs, I wonder if it's a better name for this variable, or just a more descriptive name.
Is it necessary to call this `__str__` on `str`? If not, I'd remove that.
Unused method argument - current_run. If it's necessary, use _ or _path as an argument name to indicate that it won't be used. You can also write as first_run if you want the method to accept any arguments but don't care about them.
I guess this should be `.String("Proposal.value").String()` instead to avoid the string concatenation since it doesn't really make much sense to have it in the first place (in addition to `.String("Proposal")`, and if that is the case, this will be the case that the output should be `nil`).
This is a breaking change.
why is this needed?
I don't like the idea of having a hard limit. If the original code fails then this code would never be triggered.
I think this is a bit hacky for the tests. It's a little hard to see that we have in the future. I'm also not sure if we need to make a new `bridge.print_page` function in the test.
this needs to be added to the group of imports
Why not use the new `guidP` rather than making a new object?
This is a breaking change - maybe it's worth mentioning that it does not work for the case where the `self.marks[parts[0]` is present but doesn't really matter if it's not null or empty?
You can use DevStatus.empty() instead, which is what the use of DevStatus is
Use the lambda method for multiline lambdas.
shouldn't it be `transient`?
I believe the original logic was needed for all new functionality to be removed. The only way it would be to move the enum from the base class to the top of the file.
Can you please add some info about this? What about the other ones that are using this? It is not needed for these tests.
Is it worth it to call this with an underscore, instead of a new instance? It would avoid the need for a specific operation.
We need to make sure that every options has a default state of the `readPreference` is `nil`, not `0`.
I think we can remove the cast to `BlockNumber`, since it's an `Update` on the `Update` call - it will be `unwindTo` on the `Update` level and will be `nil`.
This needs to be refactored to be part of the `if` block.
Line is too long. [82/80]
I think you need a check for `isinstance` instead of `== NULL`
`pushUserdata` is a bit redundant, we could just use only the `getItemIdByName(getString(L, 3, 3));` in the `getItemIdByName`
It seems like we can try a log before the clientCert was not found. If the user has been doing the `clientCert` in the first place, we can just remove any `LOGGER`s. I think we should log at this point and remove the try catch as well, or at least remove that condition and just do the catch and catch as the other `LOGGER`s, to get the same behavior.
Metrics/LineLength: Line is too long. [98/80]
If we have a method for future proofing, then we will need to change some of the `stopEventWalk()` checks.
Can we just put the whole key encryption inside the `Bytes` if it is not specified?
Why not use `using System.Net.WebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWebWeb
This won't work for me, because we are using this function for both versions.
Same here with the other `std::unique_ptr`.
Please don't use RequestBodyTimeout in this file.
You're using the standard way of creating a file with an additional filename. Can you make that change so that we have a more generic name?
This is not a good way to check if its an intentional change...
I wonder if it would make more sense to move `ex36_types` above the one after the `invent_sigdelset` call, to be consistent with other places where we could get rid of a `invent_sigdelset` and just have it return the `invent_sigdelset` and the `invent_sigdelset` call. Then it would also make the `invent_sigdel` call and just call `invent_sigdelset` in one place.
This name is confusing. It looks like the code that's used to be a `private` interface.
This might need updating and its `@Nullable` to match the `@Nullable(idpure)` interface (as well as above).
This is going to be incorrect, as we are not running the `tx.Type == TxType.AccessList` check above.
I think this can be an `escbounds` since we don't have any chance that an `Unary` can return an `undefined` directly.
The default here should be `config.XDPEnabled && dp.xdpState != nil`
Why are we doing this? This will avoid any conflicts if we're going to use it.
Can we add a docstring here?
Why is this necessary?
This is the one that is used to generate a single exit, so the `sys.exit()` is the name we're not "we should use any exit" as a fallback?
Why remove `crt`?
I would move this to the bottom of the file
This is the main change. The `pickle-protocol` option is only applied to both config and config as the config.
I think there's still `v7.6`. I think that this should be `t.5.2` since the message should be more explicit.
`*r2.3` since the IDE has a valid import.
`p.config.Rootless && len(p.cgroupPaths) > 0` is equivalent to `p.config.Rootless` but the `cgroupPaths` function is already initialized on rootless container, I don't think we should.
Is this the correct term?
Could you make this `cudaStream_t` instead of `cudaStream_t s = cuda_get_deep_copy_stream();` ?
Nit: `The name of this method should only be used by `_` (since it's an internal function)
nit: rename to SF_APP_FEATURE_CODE_USER_AUTH
This seems like it would be better to be in the `__str__` section and just use it for the other types of files.
Rails/SkipsModelValidations: Avoid using rescue to skip iteration.
This change can be unrelated to the PR, but it is a minor detail.
Is this needed ?
What if the model is empty?
I wonder why we would need to do this? This could be a single function that is supposed to return the correct value.
Is this the same as `sizeof`?
This will break on macOS
please move it to the top of the file, it is only used in the file
I think this might be a breaking change, as it's not being used outside the loop. The problem with the previous behavior was that the previous behavior was the same with the previous behavior and the previous behavior did not match the behavior. Is this a problem?
Can you please also add some typehint here?
this should be `io.org`
I think we can use `_path` here. If we want to have this in a different file we should use `_path` instead
The `onView` method was only removed in the first place, so nothing else is using it.
nice! this is a test for `deployment.ClusterName` but I am curious why `ClusterName` is empty
@mattpap I was wondering what the problem was here and why. Why is this here? Is it just for a part of a PR that has to be changed? I think it would be better to just have it be an explicit `await` and a `with` block of code.
Why we can drop this? If it's not used, can we just make it part of the code base.
@jridgewell can you make this a little more verbose? I'm worried that a version of docker-compose required is the current minimum version of docker-compose.
This is a very specific case, but I don't see a need for a `new FileOutputStream()` check. The same here.
This should be `isEmpty{}` to avoid the erroneous type check.
please, add a docstring explaining what `score_thr=0.3` means
It seems to me that we're still trying to remove the `site-nav` part from the `header` class as well. That's a little odd.
Please use `\s+/g` and remove `\-\-+/g` in this class.
can you please create a new variable for this one?
I think we should just use `RTL` here, since we don't expect this to have the `!` button.
@deads2k @kacf @akoeplinger are you ok with this commit?
I think we should remove this.
Wow, this is not the same. I don't see why we need a single one.
I think it would be easier to read if you moved this to a new `SnackBar` class. It seems like it would not work in other places as well.
Don't you need to update the copyright in? Otherwise, I'm not sure why this is here :)
I think it's ok for me to keep only this, but I'm surprised you didn't get the `devnull` value if you don't get the right path. Maybe something like: `sh.cmd 'brew update, but we don't need the 800+ lines of the string...`
Is it possible to just call `InitializeLayout` directly?
This could use an env variable.
Seems reasonable to me, as it's in the wrong order.
Can you update the description to reflect the new convention?
this should probably be `skip`
I believe the case of the client-side check is that the client-side check will always be available for the client instead of the cluster. This is just a case that we're going to have the `storagePoolClaim` pool that can be used with. Is that intentional?
This needs to be added for `locked_features`. It can be confusing if the locked is in the `if locked_features.any?` check below.
You can use `--no-qutebrowser` here.
Is this related to this PR?
@Jjagg - It looks like there's another one that has the product product. Why do we have a specific one for this?
Layout/EmptyLineBetweenDefs: Use empty lines between method definitions.
I would put a balance after the balance is actually updated.
I'm not very sure what this is trying to do - can you check if `AccountSignerAddress` is not `0`?
This looks like an unbounded command, and a bunch of other places. Maybe we should just set `!play0001` to the "info" command and set `!play0001` to true? (I don't feel strongly about this.)
Should this be the same as the `error` command, in line with the rest of the `db-conv` command?
This change is not related to this change.
The check for the next line should be fine, it should have been reverted
should we rename it to `getJitImplementedString`?
Why not use the constructor as a member variable?
Is this a public API or something?
Is there a way to avoid this?
Is this still needed? Is the idea behind `SetAdaptedConnection` being used in some places?
Should we just inline the path prefix?
Is this needed?
Wouldn't be better to put this in a try-with-resources function.
Why do you need to check for `std::string::string`?
I thought we already had it in the previous iteration. Could you add a check for `isUsedLocalVarWithoutInitializer` to check this again for `isUsedLocalVarWithoutInitializer(entry, result.usedVariables)`?
Why not just pass the enum to the target split size? The target option would be to pass a context and to that.
Isn't this same as the `tm` above where it is called?
I would have put `delta` first.
I believe this can be `if (key == null) {` but I'm not sure it's the right choice. The check is `if (!requestMeServices)`
This one doesn't need the `@since` tag anymore
Please remove this
Can't we also set this in `setElement`?
I think it is still not necessary to check `if imageAlpha.RolloutOverride != nil && imageAlpha.Deprecated.StateOverride != nil {`
Should we rename `NewUUID()` to be consistent with the other methods that are in the same struct?
It's not a matter of taste here, but it's better to be explicit about what the check does when `Disposing` is null or `false`. It seems like the `Disposing` check is only used for the first time the second, so if we ever need both, `Disposing` can return null and the second return value.
I would say "something must be".
Why not just inline it?
Metrics/CyclomaticComplexity: Cyclomatic complexity for block_hosts is too high. [10/6]
I think we can just use `HTTPSchemeHTTP.String("https")` to get the value of `HTTPSchemeKey`.
Should we just pass the `[ConditionalFact(Stream)]`?
I am not sure if I am missing something or not.
Can we put an Exception here (and the other for `is_admin()` function)?
I'd prefer to use `tables.library` instead of `removeIf` here.
I think this was added to remove, @pgavlin ?
@t3on any thoughts on adding these as part of this pull request or is there a reason you made them different?
This is a slightly cleaner way to do this.
I don't think we should include the link-case here. I wonder if we are missing some more. For example, `SUBPACKAGE_NAME_FORMAT` and `SUBPACKAGE_NAME_FORMAT` would be better than `SUBPACKAGE_NAME_FORMAT`.
`done` is a bit ambiguous to me, because you are already setting `aria-connection` by default right?
@bvaradar does this look fine? Is this related to this PR?
Is this the only thing that is passing `true` to the server or the server?
I don't think `.map(ignored -> Stream.of(\"\".iro.String)` is needed here
This is not the right way to do this, but I don't think that it's worth having a `NONEXISTENT_ENABLED` in my profile. This is what I have forgot to remove.
I wonder if this can be `nil` instead of `res` to not have it here (or at least `len(p1.ipStrings) == 0`).
This is a bit confusing, why the import is here?
This method can be removed (as far I can tell)
This probably breaks the tests.
Since there's a new exception in System.IO, is this necessary?
@deads2k @stephentoub - What is the point of using a `FlagPayments`? Is it a term we can use?
Is this TODO really necessary? I don't see any issues with other tests
We should rename this to `windows`
Shouldn't this be `cmdhistory.py`?
This is only used for testing purposes, I think we could just remove that completely. This property is no longer used any more, it's just used to have access to the state, which is not the case here.
remove empty line
I'm wondering how often does this happen?
I'm not quite sure I follow why we have to change the `desc2o_sysfn` here. If `listen` and `h2o_sysfn` is not provided, and the other is a list of `listen_fd` and the other is used. Is there an option for this `h2o_sysfn`?
Should not be changed as it's a function, since it's used only once in the function, as it's done below in `__init__`.
This could use a more meaningful method than `DataFrame`
What do you think about using a better name? `user.copy().pluck`
Do we have a test for this?
Should we also check if `ncr` is `true` here?
I think we should add a check here that we are only looking for the `formerpet`. This means we are not actually doing anything else on the check.
I'm not sure about the extra space here?
If I understand this correctly, you probably need to use `clearCurrentlyPlayingTemporaryPlaybackSpeed()` instead. Otherwise you have already done this.
I think the `QX11Info::connection()` call here should be removed.
This file is not used
this import is not used anymore
Why not keep the minimum at `logger.Logger`?
Align the elements of an array literal if they span more than one line.
You can just do `--incrementalgorithms`. It's used to create `--incrementalgorithms` with `--incrementalgorithms` if you want.
Why not use `==` instead of `==`?
@tarekgh I wonder if this test was supposed to use the `c05c3ff8` part of the default `0.4` instead of the default `2.6,3.5,5.6`?
Nit: please remove the line
This is a good idea, as the other two instances of this function will only be used in `NewDaisyWorker` and `NewDaisyUser` now that it can't be used in this file.
This is a no-op. I think we should also have `+ "` in `InterpreterConfig` that would work.
`templates` needs to be added to the top of the file so that we can easily go with `pkg/upgrade/templates/templates`.
Nit: `NET Prometheus Client` and `NET Prometheus Client` are unused. Can you revert this change ?
this is a bug fix - this line is not needed
How come we're just supporting supporting supporting @primaryarcingebala ?
This field doesn't seem to be used anymore.
Why change this to `ignore_index=True`?
@saghul this is the fix that should stay as we don't want it now
Should this just be `return`?
this is an unrelated bug fix, can you remove it ?
You can remove this. It's already used by the build before doing this
Is this related to the other change?
Is this necessary?
How about we move the field to `collection_id`?
This should only be done once on the `log_interactive` object (which is now done after the call to `warn`).
This class is only available to your branch, which can be removed.
Why is it required for `C0301`?
Same thing here. Not sure why we need to do that.
Is this needed? I don't like `default: false` but `Construct` doesn't seem to be used anywhere anymore.
Won't this get called even if `infraID` is not on the connection?
This should not be changed.
I'm not sure if it really matters or anything... This is why I added this. It seems to be a problem in the wrong place.
Seems like this file can be removed.
I think this will still override the `/` to test, right?
I think we need to keep the unused imports.
Why is the method return needed now?
We should probably also rename this to `lowercaseFields`.
Is this still needed?
Can you please also check the type of `BOOST_ASSERT` here?
This is a breaking change. We're using the same API as the one with the "success" thing.
I think this should be private so we don't change anything on `context.ValidatorStore`. The `context.ReceiptStorage` is an instance of `_context`, so we need to change it here.
can you add a space between the `<>` and the `selection` above this one?
Shouldn't `None` be a list?
This function doesn't need to be annotated with `typeof opt_port !== 'function'`.
I'm guessing this change is OK, and I couldn't find any changes in this file. @stephentoub do you have any insights on why we were doing this?
`LOG.finest` already has a `LOG.debug` level and it has a `info`. I can see it's an `debug` level of exceptions, but we want to avoid the `info`.
i don't think this is needed
I'm not sure this is the right change.
I'm guessing that this is not related to this PR, but this file should be removed.
Is this function used on all calls to `values`? Or does it just make the call?
Why the change?
@bartonjs, should we just remove this?
This seems to be redundant with the above block (it would be better if the previous `if (b->wakeup)` call above)
The last thing that I can tell is that this is the actual default? Are we just dropping the `reserved` now?
Why not just make the test more specific with `ShouldSkipClientSpan`?
The `@var string[]` is not needed here because we already have a `@var` tag.
This is the main change that I have to make. I am not sure we want to fix this.
I'm not sure I like this name... the site. AzureAppServicesResourceId variable should be part of the public API
I think it's ok to keep this, but I'm not sure if we should make these tests pass.
Should be `XElementManager`
Why not do this as part of this PR?
This one also needs to be changed in this PR, right?
This is the only change I'm wondering. Why is this a bad idea?
I think you can revert this
This can be deleted too if you want.
This file is not used in the docs, IMO, it should be removed from this file as it has nothing to do with it.
this looks like it was just a copy?
It looks like the naming is weird, you could move this block into a single place.
Please add only changes to the `component.getDerivedStateFromProps ` to be honest.
is this a change in behavior?
I know this is already here, but do you think it would be nicer to have `DataContainer`, `DataContainer` and `DataContainer` as `deviceContainer`?
I'm not sure if these need to be changed. I think `[]string` and `[]string` should be clearer.
I'm not sure if this is the correct solution. I think it should be moved into `RuntimeTLP`
As mentioned above I think you should make a `TOKEN_EXP_DEFAULT = 1, 2, 3, 4, 3` here
Does it mean that in general we don't want to enable these? What happens if we remove the `_handle_ssl_support` function?
"can't unmarshal count" sounds like an error.
can we just delete this? I think we are not using cVR here...
I don't think we actually need the `version` part (i.e. `kubernetes.io` is set to true, but it's just the same part)
I'm not sure this change is correct. We should consider making it a separate PR and not a single one
The `+` should be kept here
same here with the `array` constructor
I'd prefer if it's the case that it's the same. And I'd rather have the `servers` field be used to be explicit and a more specific name for it. I would rather see it as a `servers_config` and then `/servers-config/` which we can have, but wouldn't it be used as a `serversServerOptions`, as that's what it is?
I think you can also change the `RTPSDomain` property to be the `RTPSDomain` property
I don't really think this is a fix. The first time it's used is that if it's used for the loop it should be used instead.
I think this should be removed, and be removed.
Can we remove the null check? If it is only used in this class, it seems like we should just throw an error in the case of a null check?
Can we have a test for the `proposal_url` that passes this exception? I'm not sure if we need to do that.
I think this should be a class constant?
I'd just delete this, it's no longer needed.
@stephentoub - I think this change is ok. But if the log output is enabled this may cause some unexpected behavior, but I'm fine with it.
We should add an explicit TODO here.
I believe this should be a check on the other side.
I am not a fan of making the `mixed` variable `LocalRandom` from `registerMetadataSettings`, but I guess it's the case that `LocalRandom` has an `mixed` attribute. I would suggest to change `LocalRandom` to `LocalRandomMetadataSettings` or something.
You could also use `sysPath` here, that way it may be easier to read
Use the new hash syntax `block_a` and `block_front_preference` inside `add_LOGGER`
These 2 are all in `rewriteNot` so they only get called during first call. So `rewrite_with_NOT_cache` needs to be initialized here.
Can we move this out of the interface? That should avoid the change.
I think we're missing an explicit `__flush__` from all backends, which is a bit weird, I think we should remove that.
This could be a single one
So this means that if you change the value from sysHashLen to sysHashLen you won't need that anymore?
I think this can be combined with a `return "Pod Failure"` now that we don't have to change anything.
I wonder if we should just make it configurable. And also make it a `FetchTipSets`
This seems like it could have been removed
@deads2k any idea why this is being removed? I'm guessing that we are using the `Read()` on the node. Is this just to be able to get rid of the user's API?
Please use whatever decision you want to use instead `host.cygwin_installed?`
I'd like to see an explicit assert here, as we do on the `isDebugEnabled` check above.
can we add the same in `check-ordering.xml`?
Whilst we're not using this. It's not very suitable to just make it a simple var.
The change in here is just to prevent errors from making the error a bit more useful. The `sigFound` should be the `err` variable at the beginning of the file, and the `err` was not set.
This is a very small change for the PR. I'm assuming there are other types of things that don't have a `un halfed` and we want to be sure they're in a different PR.
This is going to throw an `Exception` if the token doesn't exist in the build. We have the same in `sign_axe_utils`.
This is probably not necessary, since the node name is only a valid node name and we are not going to modify the label name in the database.
This isn't quite right. It seems to be a problem, but if there are many places we are expecting to return an error. Maybe `handlehandle()` should be enough and have a similar return value?
Why do we need this?
Please use `The header`
Should this go somewhere else? (It looks to be a little bit of a hack, not as part of our discussion?)
I think we should change the assert to expect it to be `anon-user` if the user has to be enabled. In this case, we should use the assert instead of hard-coded to `None`.
Would it be better to just keep this constant in place of hardcoding it, rather than having it in the other classes as well?
Should we make this a class constant or a class constant.
I know I am on the fence about this one but it looks like this should be changed to `ConReader.getRecentlyPublishedEpisodesFiltered(0, * EPISODES_PER_PAGE, EPISODES_PER_PAGE)`
In the future, can we use an enum instead? This way if we have any default behavior, we don't have to.
Should this test be deleted?
Is it intentional for us to use a different field? I'm not sure it is worth the extra pointer, but I'm curious if it makes sense to have a `is configured` struct?
This should probably be `app *config.app`
why only `ful.RemoteAddr` is not set and `ful.RemoteAddr` is already set?
You can use `is` instead of `hasFoundationBonusExtension`. Also, the assignment should be `private`
This is the actual bugfix. `model_type` is used when `direction` is `None`.
Please add the explicit parameter `-32000` as well
Why is this not `\Email`?
@deads2k do you know, why is this not just `0`?
Please remove this.
I'm confused why this change is needed.
Can we remove this class?
I think this is what we want?
We should remove the line if it isn't used anymore.
Hm, so `1000` doesn't need to be passed here.
This is a bit tricky, we could make a new function that returns something like `if (args)`.
this is a bit confusing, why not have `validation_flag` as a default and then `PROVIDED_FEATURES`?
this is a bit weird, why not just have `get_data_index()` and then remove the extra parentheses? and put these new lines under the hood as they're different.
This is a duplicate, and I don't think it should be a part of this PR, as it might not be an issue in the final result.
I think this is wrong. The first one was `ZalcanoTitle`.
These are all similar, but the other `gulp` and `gulp` properties have already been updated as well. It may make it easier to read/write the override of the `gulp` object.
This is the only change of this file.
Why not use the `is segmentationType` function?
Do we need to also check the error here?
The other changes here are to use `java-4.0.0`, `java-5.0.0.1` and `java-5.1.0.0.0.1`
This is just for testing purposes, I think we could move to the `@user.admin` model to avoid unnecessary churning the `@user.slug_matches?` check inside the `if` check since it can already be present in `# TODO:`, but I don't think we want to keep this code in the future. The `@user.admin` model doesn't matter since it doesn't have any effect on the `admin` model.
Why not just put that part of the code, and not the `Settings`?
this might be a breaking change?
Shouldn't this be `if (options == null && options != null)`?
nit: `string[]` -> `False` :)
The name `name` is not really null.
This can be removed as the class is now deprecated
Is it necessary to keep this check for the caller?
Is this change required? The rest of the changes in this file are unrelated.
I think `Jenkins` is preferred over `Jenkins_count`
I think it's better to have a test for "0.28.0.0"
@mattpap A solution like this is to make sure you don't run the tests twice with the new version and the `using` call below.
What if we called this `AssembleString` on the previous line?
What does this mean?
Should not be an `Optional`.
@benhalpern Do you have any idea why we're making the change here?
This error is not very helpful. It will only be needed if `exflow.getFlowDefinitionId()` returns `0`.
I think it makes more sense to use the same property for the `Scheduled` fields. That would mean that the user can see the same results, which wouldn't work, as `getDefault` uses the same thing.
Should not this be done by the `if (file.isRemote)` condition below, in case the `isRemote` function is called multiple times?
Hmmmmm... this is not really about the `alpha` part of the fix - the way a user doesn't specify the `alpha_reverse` is not set (which is not `common`). What about the `alpha_reverse`?
@tnozicka this is the fix for the previous patch. It would be good to check for both cases.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Can you use package_job instead?
there is no need to specify the API here, we have a standard package for that
Should we also check `isinstance(Item $item) && isset(Item $item) && isset['indexed']` ?
Should we raise an error?
how is this in a different patch?
Do we really need this?
This is a bit of a very fragile, but it is better to just do the check in the index config, it's only used in one place.
You don't need a readonly. Can you use something from the private method instead?
Please use the `isApplication` helper instead.
I would just add this to the `Number`.
This method name is not very helpful since the definition of print_plugin_list function returns an absolute path. It's an abstract class, so it's clear that the method returns true and the method returns false (it can be called without a call to print_plugin_list).
In this case, we shouldn't be removing OpenTelemetry, right?
why not `py-True`
should we add a similar note to the description about why we need to change the name of the controller?
How about just `defer f.Close()`?
I think you need to update the `.Int` file as well
This will break things. This is because the only case where the message is in `getRChannel_` but there will not be a problem.
Is it still necessary to include `db` in the UI? (Also in the `class.go` file.)
I think it is good to use this as a separate one that is not expected to be the other ones.
We should be able to use `struct st_h2o_http3client_req_t *req` here.
Can you explain what this is for?
This is already set by the nodeConfig and then you don't need to set ` <msg> <msg> `as` when there is a nil node node.
Why did you change these messages?
`tabbed_browser` was unused and can be removed
why do you need this?
This needs to be moved into the `Azure` namespace.
The default `new csiDriverName(driverName)` is not needed, right?
Please don't add trailing whitespaces.
is it needed?
what is the difference between AbstractJavaAccessNode and AbstractJavaAccessNode?
this is a weird thing, why not just call PlayerHeadIconChanged as the second parameter, and let this one be abstract.
Is this just to make sure the `--9` flag is only used in tests?
Why is this change required?
Should we be checking for `C` too?
The "0123456789" module doesn't seem to be used anywhere.
this is a bit weird, I would recommend renaming it to `with NULL`
Doing this to be the first thing I thought I'd just put this as an option to make the method more generic, and have an opportunity for now.
Is this change related? I would have expected it to fail, just for consistency.
this should not be needed anymore
Could you add a space before `auto &components = NULL`?
Why is this needed?
I think there is no need to do this. This is just something I found in the wrong direction. The logic is a little confusing because we were trying to pass in a `acc` to a `boolean` object and we could pass in the `break` object to `add_object_type` in.
This could be `stream` (and a similar one). The only difference is `!HDF5Reader` is that `ADIOS_HAVE_PHDF5` is the same for `!!HDF5` above. The `else` is an `else if` because it is a single function and doesn't need to be a single function. This is because `HDF5` is the same for `stream` and if `!== true` are the same.
I think you can also change the description of this spec: `expect(group_value_for 'group', Object).to eq("group Object")`
I think you're missing a `b` here
I think these should be private
isn't this a fix for the tests?
This will fail if there's an error (see line 143) then there will still be no such prefix.
Why not `LINUX`?
You don't need the `success_color` here.
I am not familiar with the function name. Is it possible to have an array of strings that are all lowercase?
I would have expected this to be a `Wno-image.json` instead of the `Wno-image.json`
Why not `IsMSIEnvironment`?
this could be `nullptr`
I think you can use `remove_target(current_group, target, desired_group)` instead of checking which is the same as the old function.
I'm not sure if this is the right approach. The `UNASSIGNED-cache-file-error` is correct.
In the same order, the tests are failing because of the `gococ` key.
This can be `static`.
Please use `go.v1` to get the full list of events
Why do we have this log here, but not return the log.Warnf anymore?
I wonder why this should not be `public static`
Please add a `TODO`
I think this should be `static int jx_input = 0;`
Why was this changed? I don't see the null check on argument
Should we be checking for this case? It seems to be unnecessary to have the same behaviour as the old code wouldn't be visible in that case.
This shouldn't be needed if you don't have to remove it.
Should we also check the return type for the given type?
Why did you remove the `@Nullable` interface?
@deads2k any idea why we don't need to make this change?
I think you want to keep the line break here (we have to move this line after `k8s.io/client-go//test-go/`). This is the only place this is used.
I think this is a bit confusing because it seems to me that we have to set a default value in the `XX` class. What's the motivation to do in the `XX` class? It seems like we need to set a default value to the user. Is that what we want?
I'm not sure that this is correct because the `FirstOrDefault` method is not thread-safe, and I think this could be simplified in the future.
This would return `nil` even if `createTag` is `nil` if `createTag` is nil.
notary_password should not be set, if user is not in install or not, then you must use the install version.
It looks like this file has a different file for the test. I think it should be moved to the `test/test/test_resources.py` file that is being removed.
nit: I think the need for `_` in here
This change should not be here. I assume the `DisableKubeProxy` logic is only called from one place, but not from the other.
Please remove the `capIsNew` parameter from this method.
This should be `closeConnection` instead, right?
I think you could just delete this test and `assert.Equal(t, "default", False)`
Can you please make the code more readable with lowering the variable name? The logic seems to be very similar.
Line is too long. [81/80]
I think it would be simpler and easier to understand if these were moved to the other `_codeToHTTPStatusCode` package.
`sel.setBaseAndExtent(sel.extentNode, sel.baseOffset, sel.baseOffset)` is a bit confusing as it will be used only when the call fails.
Minor, but why are these variables not required?
Is there any use case for this?
I'd love this table to be a little more general in terms of users and need to know what particular table we care about here.
Wondering if this might actually return the correct value.
Why do we need this one? Isn't it already the same and `SpriteAR0`?
I think we should be using `host.startswith` instead of `if host == 'localhost'` instead of `if host.startswith('127.'):`. We should check that the value is `True` in `getattr()`. I guess that's the case here, because this is the correct thing to do here, as a user that does not know what the full IP is
Why are these needed?
This is the only place where we call this method. The same goes for `m_liveliness.lease_duration = c_TimeInfinite`
Why is this change necessary?
This is not related to the PR. Can you add the new parameter as well.
I think this should be `res.get('/--logo') || '/-/static/logo.png')` since the linter will not work.
I think we need some more tests to ensure ensure that the system system property is removed.
`Target` should be `TargetDataDroid`
There are two places where we've got `item_top_two` and `n.spark_column` in this file: * `index.select(scol)` * `index.index._sdf.select(item_top_two)` * `index.select(scol)` -> `index.select(def -> "def -> ".spark_column", "
Is it possible for the `\/se\/cdp/` to be used in the same file?
why use `ecb_js` in `build-system/client`?
Is this a bug fix? If so, does it need to be a `synchronized` check?
@kargakis this change I don't see why I thought it was a bug? I think you should do a rebase on why this was needed.
are we assuming that all existing messages have the same delete?
This is a bit pointless because `x` is already handled correctly.
Why are these separate statements?
I'm just curious why this is needed?
We should probably rename this to `writeConcern`.
I'm not sure about this... the name of the test.ID is a very confusing name.
I'd love it if we could get rid of all these 2 values, but that's not too much of a change in this PR.
It seems like this should be a `List<T>` type, not `fileName` type.
Unneeded whitespace change
I don't see how this works. The only reason for removing this is that we have a "[^\\d\\s\\w!"", not just the "[^\\s\\w!"" constant.
I think we need to move this to `BothResponseErrorHeader` to keep consistency.
This is an interesting place that's the default. This is why a `pythonGlobalCommandPath` is being called, and the check for `shell` is only in the `shell` and `cobra.Command` function.
this is no longer a problem, right?
I believe that we are trying to move this out of the function.
This is a bit confusing to people, but I don't want to make the dir really generic in this case. The context of the message is `os.path.Join` as is.
I don't think we need the style for this.
Why is this needed?
nit: should we make this `props.ref`?
This is the only place where the file is created.
I think this should be moved to `seelog.Errorf`
This should be removed.
I am not sure this is needed, since if someone is using a `std::int64_t`, they will be used to set `size_t` on the `dir` branch. I'm not sure this is the right thing to do here, though I'd be fine with making a `std::int64_t` a variable that does not work in `1` but I'm pretty sure that it is a good idea (for example) but it is also a good thing to do here.
Is it a typo or two?
You don't need the `zip_file_content` here as it will always be the first directory of the zip file. If you are already, you can use `zip_file = load_file(tmp_file, mode="rb"),`
I think this would be clearer if you use a "operator" `src\*` in the error message.
I'm a little confused as to why this is not the `using` statement but not the original `using`.
This is the actual fix, and will break on older ones. Is this correct?
I don't think we should change the indentation
Is there a way to avoid the type of type?
@agramfort : this is the fix for line 235, please remove?
How is it worth it to add a `stream(cacheObj => pathObj);`
Please change all of these to use `ProductCreateSource()`.
I don't know why this change was necessary because I was working with the issue before.
Could you please use a different name? It's a `io.prestosql.operator.<size>`
This is a little hard to read - maybe we should not use the `Pair` interface for this.
Should we be using the `db(uname)` option? It's used in all places, which might not be the case, but it's just a thought.
nit: I wonder whether we can remove this.
I think that you meant "unfortunately" here as well.
This will break the old `Query` calls.
Is this change necessary?
Is there some tests to verify the correct error handling? It's probably better to have it at least one level.
I'd prefer if we could use some sort of explicit `uint32` here.
Is `dynamicListenerRegenFilePath `?
Why are we doing this?
We should be using a `null` check in this file. We could also make the plugin return something that is not in the `WFDIR` and the `WFDIR` environment variable.
I think we need to add this to libcalico. Otherwise I believe I switched it to libcalico.
can you use `GetHead()` in the test function too?
I think we can get rid of this check and just do a check in `app.DisableSettingsManagement`. That way we have a check to avoid the error and the caller may be trying to get some more information about what is being returned.
This should be `on_x`, not `result`.
hmm, this is fine. why should we use `-` rather than `-`?
What was the TODO here?
This import is unrelated to the one that makes it sound like an anti-pattern.
Is this really a good idea?
Can `maxTaskID` and `RequiredTaskID` be set to something else? Or is `TaskID` the same here?
@sahbi-ktifa Can you please change this to `ecs-current_v0`?
I think this will need some tests on my machine, since this is a separate change.
This method should be renamed to ` Ideally_with_dsts` to reduce code duplication.
This is a change of the behavior of the API, but why not just pass `errors.IsNullOrEmpty(errors.IsNullOrEmpty(errors.New(...))` to the `Errorf`?
Hmm, this was a bug, and I'm pretty sure you can't do `100.Int`, just to be safe.
I think `IsEffectInSpell(spell_id, SE_Invisibility2)` is not needed, because it is a boolean
This file should be reverted.
nit: we can import the filename of `target` here and remove this import now that we get from `buildTarget`.
(style) line over 80 characters
The `!clrstack` check is redundant, since it is a `common.xml` check and we should always call `GetCorDebugInterface`, not just `CustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustomCustom
Please use `...` instead of `... path` to resolve the path.
Why not `struct jx *select_expr` (or just `static`)?
@jhipster/developers this was incorrect since its the default behavior
this seems to be used in a subsequent PR.
I would keep the old name.
Who will use this `super`? Just want to make sure it's not used.
I think this is not a good name for this feature. The naming of the `list_suffix` doesn't really matter.
It would be great if we could move this up into `src/service/service` block.
why is this test removed?
I think you're missing a space between `VLOG` and the `{`.
this is also needed on the `<%= c.user_full_name %>` tag, right?
This will fail to ensure that the list is always present, right? What if we added a check that `list.add(...)` is empty?
We need to do the same for `getClass().next` and `getClass().next` files, and the others.
I'm not sure what the problem is when we use `w3cMinimizeWindow` and not this code. I am thinking it's the best way to handle these cases.
Is there a reason for moving the `Backports` check outside this block? It will make it easy to read if you don't have to change the default value of this block
I think it would be good to log the listener here as well, and let the user pass it through the `listener.Addr()` function.
I assume this was the only place where we are setting the right right, and not the right, but we don't seem to use it anymore.
I think we don't want `IF_ARM` to be set here?
This is not an issue for the `state_stub` case, as this will only be used for the `list` case. If the user's `groupKey` and is not in our code, then the `state_stub` and `maxResults` will not be sent as `groupKey`
I believe, you already know your testcasecase this is not correct. I'm assuming you don't mind to fix this in the future, I don't have any idea what this is doing.
This change can be removed now.
I don't think we should add this to the `attr_accessor` key. We need to move away from the convention for now.
Can we put this into the view? I'm not sure it's really the best option for it :)
Why did you change the test name? It doesn't look like it's used for any tests
There's no point in having the method that does nothing. I think it should be called 'generatePath'
this should be `log.Debug("%s", err,v:\n %s)` instead.
I guess there is no need for `--keep-namespaces` here, since the flag is already added in #7746
It would be nice if this could also use the `validateBucket()` function in `open bucket`, so that the `open bucket` is always present, as I'm not sure we care about how it's implemented, it's not a hard-coded query.
This is not a good thing to do, and we don't want to include an `else` clause there. I think this would be a better solution since we're getting rid of all of the old `is reset` calls, which is also not the case in a few places.
`log.debugWarning` is more of a debug statement
Should we have `minify` and `minify` as default value?
Can we rename this to `TracerProvider` and `provider`? I think it's better to have a separate pull request for that in the future.
What was the issue with a user who has found and now we have a different name? I'd guess it's not.
Nit: please remove the extra line
I don't think we should add this interface.
Why the change to read?
This was a bug that was working before.
Should it not be needed ?
This should be `*string`
`StringUtils.isNotEmpty` is not necessary?
why the change to the new struct and not the struct? why use the struct ?
Why do we need this here?
@jaeilepp do we actually need to do any changes in this file? It will be hard to maintain in the test.
Can you move this to the top of the file and just change all the `Jsonprint.json()` methods in this file?
`@return A self reference.` sounds like an unused class.
Why is there a sync block here and elsewhere?
I would have expected this to be `None` for some reason and it's not clear what it does.
I wonder if it would be cleaner to move `runc` below the line. That way it's a separate issue.
This is wrong.
Why do you need this? Is it only for the `0` type, right?
I'm not sure if this needs to be here.
I think we could simplify these calls to `List<T>` and `role` if necessary. It's not clear why these are necessary but I'm not entirely sure what you are doing in the original PR.
We have `java.lang.StringUtils` for these so that they can be extracted to a new thread (or something that is more readable for sure )
please update copyright year in header
Shouldn't this be an abstract class?
I'm not sure what this change is about. If I set the default for all the others, I don't think it makes sense.
`this new collection collection`
I'm not sure if we want it to be a good idea, but I think we should make it a little more verbose.
Can you explain why this is necessary if we have to change the API from back-port to `InitCodeTransformer` here.
The key doesn't take zero-value' any more?
This should be `self.__do_ctu_all(on_demand=True)` as it is only needed when the AST import events aren't referenced.
I am curious, why is `el.querySelector('summary');` checked here?
Should we add a TODO about this to remove the `IMvxLog Instance` class?
I guess we should change `PresentError` to `Failed` here too, and make all the tests pass.
This is the only change that's used to default to `1.0`. I think we can just remove the `type` constant from the previous one.
Can you explain how this is happening?
This is used to check whether an `if` is not defined here, right?
not sure if it matters, but is there a case when it's null ?
Can this be changed to TOTAL_HITS_THRESHOLD ?
you can also do `k8s.io/client-go/tools/cache`
This is the only place we need. I think it would be better to make the change as part of this PR and add an example of how to write it.
Why not `fif len(signedTx.Data()) > 0`?
`shortProcessExit` should probably be placed before `shortProcessExit` so it is consistent with the other tests
I assume this is going to stay as non-nullable.
Wondering if this should really be something like a "customize_theme" or something similar...
I think this component could use hooks and thus can't access the component that is attached by an HelpMenu.
Line is too long. [85/80]
I don't think this should be a user?
I would use a `<cpp-field>` arg instead, it's hard to believe.
Is this an unrelated change? I thought the only time that we needed to support this change was the one that had previously been running.
This seems to be unused?
This seems too expensive and has it been deleted.
This is just a one thing. This function is not a single element of a Main actor, since it is a single function.
I don't think we need this as `ZK_READ_PERM` will return the value for `IT_READ_PERM` - we already do that for `READ_PERM` - we should check that `on_read_with_id` is set here.
Why did you need to change this?
Why is this a constant? I'd expect it to be a regular expression, but not a big deal if it's more intuitive to name it that.
I think we can skip this check if `false` or `false` is true.
Should this be `void run_stride_unroll(int, int, int, int);`, or just `int, int, int`?
Seems like you might want to consider putting `x` as a variable and then doing `x=True` as an array. This way if you want you can easily avoid creating a `x` array by using `str(path = 'foo')` and then do `x = 'foo')` in your `str(path)` and `x[0])` to get rid of `x` (which will be a breaking change in the future).
Is it okay to remove? Or was the change to the old assert no longer the case?
I think this needs to be removed.
I'm wondering if the two classes should only be used in `collection.configName`, since we could have both the properties and the properties in `collection.configName` but that would be more correct
Is it expected that you have `.get("/health")`? If so, then please use `.isEqualTo(get("/health")`
This is actually incorrect. We already have `.prefix` on `.Sprintf`
What happens if a name is null? I think `std::string Meta` is wrong.
Why did you remove this?
Can we use a more specific name here? It would be a much easier choice though
I'm not very familiar with the performance impact of a change from an example of what `--set` does. Perhaps `--set` should only be used to create an error if there is already a directory?
You might consider using the `Yolact` class inside `yolreplacementHead` instead of passing a new `yolact_head` array.
This is a change in behavior, because it will be re-used by the `setting.Context` file.
What if the variable passed by reference has a space between the method name and the current block does not exist. Isn't the point of logging if it has been empty?
why do I need this?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I am a bit concerned that we might be better off doing this: `EMAIL_FORMAT = /\x`
I think we could add another `return isEmptyYaml` function that will check for the first value of the map.
Metrics/LineLength: Line is too long. [82/80]
The condition should check `auto_fire = false`
Would it be easier to just call the module `metadata` instead of passing it to `_metadata`?
please, also add the cast to "value" after "value"
`$::vector` would not work, as it is a static object and it is not an instance of `conda.create`
I'm a little confused by the name of the variable. What is `secrets-ssm-environment-variables`? Why is it only used to determine the name of the environment variables? The name seems misleading.
Is it used by the other standard library imports?
Why does this need to be here and not on line 147?
I'd rather you add `ignore-scikit-learn 1`
`DCHECK_EQ` will also return the value that contains the `const std::vector<std::string>& vars` object, which is more efficient than `DCHECK`
This test is only about the testing, so maybe it is better to just have it in the `completion_item_focus` method.
can we also add the global state here as part of `service_HttpResponse_STATE`?
I think it is safe just to use the `warn_to` method in `setup.py`.
Please update the doc and text text with cautious
is there a need for a copy of the files as well that can be removed?
Can you change this key to be travis-1111? I think this may be more standard for other PRs.
Why not `\r`?
Why remove this?
We don't need to handle braces like this; if no entries are passed, they can just use `deliver_now`.
Should we make it so it gets overwritten by users?
Why not just use `!ResourceTypeService || resType == model.ResourceTypeEndpoints`?
This is the main point where we need to make sure the `Game::set` is in an error state.
@zjffdu @danrot what do you think of this?
We need to keep this file in order. A very short term (with `autoColumnSize`) is not used in the file.
Can we make this more specific, e.g. `err.NextWithContext(ctx)`? Then it would be nice to keep this, as is.
this is a bug fix, should probably be renamed to be `GetAddressDetails` instead
We need to pass the entire session in the session to get the docker struct, as it is already checked in the session
can we also check both `Math.Min` and `min(ScanIndex, oldTimeIntensities.NumPoints - 1)`? I don't think we need to do that.
I wonder if this should return an error instead of a debug?
This file is still not used anymore. It was used below.
I'm assuming this is for debugging?
This is probably a leftover.
Can we make this a try catch instead?
Use `expect_to have_content` twice, not `expect_to have_content`.
This is a little weird. Why is this needed?
This is a no-op. The code has no check to see if this check is actually running.
Please remove all of these usings. It's needed for all usings as well
The only thing I missed is in this PR, so I changed this to `module.exports = __webpack_require__(1)` in this file to make it consistent with what we do below.
There is a `_call_is_empty()` function which is used for both cases in the class (it's not related, so it's probably better to check the return value in `_call_is_empty()` instead).
Do we need this field?
`HttpContextTypeName` and `HttpContextIntegration` should be renamed, since these are the only places that need to change.
Why was this removed?
Shouldn't this be an option, like `get_message_definitions(value)`, or something else?
Wouldn't it make sense to include a warning (and not just the one that has been fixed)?
It might make sense to move this function to the `Namespaces.New` package, to avoid having to do some work with the changes.
Can we use the `isHiddenWithCSS` function instead? That way we wouldn't have to check the value of `vNode` for the `isHiddenWithCSS`?
Are you sure that this should also include the package name?
This is not needed because `httpNotFound` returns `nil` if the attribute is not defined.
nit: I think it's better to use `keybaseSync` to check if it's an instance. It's not the case, but also the `kmd KeyMetadata` is not very descriptive.
What do you think about using `.txt` here since it's a github product name (` (`screencast`) and the same is the same as `test.txt`)?
Do we have a test for this, too?
This is a regression. `PANEL_DESCRIPTION_WIDTH` is not a valid value, so the value of `PANEL_DESCRIPTION_WIDTH` is an abstract method.
this import seems to be a duplicate of line 7.
We should probably move this to a separate test, so that we have a helper function that adds this function, and that we don't need to change it here.
I'm not a fan of how this is being used to pass in the original `""` parameter (as `""` will be a problem in the first place).
This should be in C++11 as well.
Please use `ToDictionary<string, string>()`
Nit: I think this could use `Server OSFamily string: %s`
Does this pass the time? Is it possible that the queue_handle_lock() returns a string that is not a non-ascii characters? If so, why is it needed on the queue itself and not have a const QUEUE_STATE?
Is there a case where we can skip the endpoint discovery and skip the request?
Not needed, just use `x`.
It seems that you need to pass the `i *Initializer` instead.
I think the code is correct. It's in-line before `elementText` is invoked.
Is this line needed?
Can we have a method `String.format` for this, or do we need to use a constant somewhere?
If $solrconfigXml is not defined, this means if it is not defined (which means that it is called every time you add a new method in the UI), this would not be the right thing to do (and would also be the case when it's used).
I think we should also add a `getComputedStyle()` method like you mentioned above
Is the name "applicationName" really necessary? It seems it is used elsewhere in this file
`encoding` has a nice function, it's not a big deal but I don't know that I could have caught this in the code, but I think that it's better to be explicit, maybe it's better to be consistent with that.
Why was this removed?
Do we need to handle the same case when the config isn't available?
should this be `self.get_master_status_text(self)`?
This is an unrelated change to the PR.
This is a bit of a feature, but I'd rather have something like: `fonts/*.ico/fonts/*.f`. What does your thoughts about this?
This was a bug in master
Why does this change?
Nit: The indentation is off by 2 more spaces here.
Why is this named as private?
this looks wrong to me, we are not actually using it anywhere else
I don't like the name change, just a little confusing. Maybe the name is something like `getTypeName(...)`?
`padding` is not used at all, can remove it.
Can we just use `gateway`?
Just noticed that the `PALETTE` variable is now initialized with the `DATA` variable. Is it because it is not initialized with `DATA`? It seems like it would not be needed for the `DATA` class, but I guess it can be initialized with `DATA`, since it would be `DATA` and if so, it should work the same in `nni/apitype/PALETTE/DATA` below.
I think it's better to just delete this file?
We should test for this in the specs, right? It is not clear if we can test for the same process.
Why this change here? It seems unnecessary to just pass the `AccountState` and `AccountStateByHash160` to it?
I think we could just have `approval.cart_approvals.approvable.order` return the class name, then using it here as well.
This is a little too specific, can't you just make the default optional and just do a `*` here?
I'd prefer if this was a separate commit.
This is a new `ExcludeLabels` column and will be removed from `Writeal.BuildLabel` branch.
I don't know what this actually means. It's not a valid bug in the API.
Please revert the changes to this file.
I don't see any usages of `setUp` anywhere that can handle things like this. I don't think this will work on Windows
Do we have a default value to "ports"?
Shouldn't we use an explicit explicit naming?
Is the Xunit correct? It seems like the Xunit needs to be removed and the correct exception for some of the tests that don't have any of these?
Please make sure you have a specific reason for these two functions
This is a bug. It looks like there is actually no need for a separate record. If there are more occurrences of this type and the test should be updated to pass a value to this function. It's the only place that we need to pass this value.
You can remove this line, there's already `''` above.
I think this needs to be set to `1.0` rather than `2.0`.
Does this need to be `bin.ZFS`?
This seems like something that could be moved to some common module, since the `@property` method now returns the default value.
Why not `hasOwnProperty` or `hasOwnPropertyNode` here?
should this still be `RouterIntegrationNumber`?
Same here, I'd suggest using the global var for all those 2 functions `README_metadata` and using this `README_metadata`.
We need to keep the original version of the `AllowRenegotiation` line.
this one was only used in the test. I don't see why this would be necessary.
is the expected `=` for this?
nit : can we use `isNullOrEmpty`?
I think this should only be added for the `if` statement. The `if` clause below is not necessary.
Is this needed?
Shouldn't the `else` be removed from the if block?
Since `None` is not a valid name I'd suggest to use the `~8` here instead. We can use the default value that takes in an argument to `make_bug_path_length` (since it would be a good name).
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This will be removed.
this is so weird we call `partition` without the `hudi.select`. I am not really sure why we can't use a `.partition` here since we only need to do that if the client already exists in the client. but the latter seems like the main place for this
I don't think we need this, let's just inline it.
I'd rather have a blank line between these lines.
You can use `f.is_in_array(i)`.
Group with other imports.
Why do we need this `close` here? This seems to be used in all the places. Do we need the return type of `doneChan.close` here?
Why did you make the error message more robust?
I think you missed a `move` here
isn't there a way to do this at this point, or does this already work for other types of types we need to ensure to handle it?
This should be `!isIfBlobExists && await feed.CheckIfBlobExists`
I would have put a check for the variable in the if statement.
Is this still true, or are we just testing for the `mdc-menu-surface` date, or is this a typo?
Why not just `String#includes`?
@becker33 I think this should be `list.Items = append(list.Items, OpenEBSCRDArtifactsFor070().Items...)` and `list.Items = append(list.Items, OpenEBSCRDArtifactsFor070).Items...)`
This is not used, please remove
Why not include the headers in these files?
this import looks good. just remove it?
You can write `if ((ptr) || (bytes == 0) return;` instead of `>=` here
I wonder if `Console.ForegroundColor = ConsoleColor.Yellow;` would be more readable
This will only happen if `mset.mu.Unlock()` == nil. I think it's better to move the check outside of `if` statement and remove this if block, and have this logic in `mset.mu` be moved to `mset.Script` instead of passing the check.
This seems to be dead code
If `acc.hasIssuer` is not `nil`, why not put that `if juc.IssuerAccount != "" && !acc.hasIssuer(juc.Issuer) && !acc.hasIssuer(juc.Issuer) && !acc.hasIssuer(juc.Issuer) && !acc.hasIssuer(juc.Issuer) && !acc.isIssuer(juc.Issuer) && !acc.isIssuer(juc.Issuer) && !acc.hasIssuer(juc.Issuer) && !acc.isIssuer(juc.Issuer) || !acc.is
Can you remove this, and remove the second `&&` in both files as well?
I would have added this line in `args.cloud`, which is used in `options`.
`len(cnb) > 0` is the default, and is `len(cnb[0]))`.
this can be removed now
You should be able to use `AddPeers()`, no?
should be[^\\ &(?)
This is not needed. We have now been doing that in the previous release.
I would use only a single boolean value in this case. I would have done that for some time, but if you really wanted the `isinstance(obj, ...)` check you can add to `in_nonempty()`, which is more clear.
I think we should keep it this way, and also move this check inside the `URLURL` class above.
you don't need this as you do this in other packages
I'm a bit confused. Is `Vector_guard<std::mutex>::(_o::mutex>` always true?
I think this can be removed too as this is the only change that fixes #11968
Nit: This import is no longer needed.
I think you can remove this constant if you make it `ssm-parameter-store`.
I don't see anything in adding these new properties here.
This is a change of behaviour, but I'm not sure I get why it's skipped in the case that the `JX_OP_CALL` case is not considered. This is a case for me, though.
shouldn't this be `include Beaker::InstallUtils::EZBakeUtils`?
Are we sure it's not needed?
I think the `Get` method and two methods may not be necessary here.
What is this interface for?
Is there a reason we don't just use "multi" for all the methods? Just wondering if we are trying to get rid of the `multi` usage.
@bartonjs, I wonder if this should be moved to the location location? We should probably be looking at the logic in a subsequent PR as it could cause some trouble.
Is there a reason you're not using the `SparkStreamingWrite` class anymore, so that the `@Internal` and `@Internal` are deprecated?
Please use the configs for the new parameter.
The name `GET,POST,PUT,HEAD` is misleading because it is a regular type.
nit: `return true` is not needed
Why is that needed?
I think this should probably have a test.
Is this the correct location for removing this type of thing?
Can you put this in a common place? It looks like you have the same logic as the mentor_image method in the mentor class.
What is the purpose of changing the order of the values? (Or is there another PR to make the same changes to the `metricPoint` variable type a little more clear that this is `null`, or should I have a doxygen header)
This test is not needed, since the return type is `nil`
We could just change this back to `ssmfactory`
Should we do the same for both the `apm-server` and the `apm-server-server` cases?
Can you use an explicit False with a different name? The same for the other test classes.
You have to pass the `current` as parameter to this method and remove any other `current()` calls from the base class.
This should be split over multiple lines.
This method isn't necessary. You have an `else`, but you don't have to call `contains()`. IMO this method should be renamed to `contains()`.
I don't think we should be testing the new `proxyBuf` here. The new `proxyBuf` will still be a valid value because it will still be set to an empty string on a non-`string`.
Is `!current.nodes[1]->network.fill_keepalive_self (target))` needed? It will be a `Config::array<nano>`.
This should be "if ((ex.getMessage() + "").toLowerCase().startsWith("tabular data required)"
Should this use the `== null` check?
can you use `i.error()` to make it clear this is an error?
How about `RetrieveCommand`?
You'll also want to check the `index` is always true. Also, you can use `isHardened()` instead.
This should just be `message.getInstanceWith("0x")`. The exception will be thrown after the caller is logged.
Isn't this a bit confusing? We're using `inputs_type` for some reason. Maybe it should be an `if_type == None`?
Why do we need this check?
I am not sure this is the right thing to do... I don't think we have any other version of the task. @dain is the `agentVersion` command defined as `1` and `Sarn\dockerVersion` command? Is there a way we can do this (and do it elsewhere in the future?) that could be the correct version of a version of the task?
You can't use `T` here. It's only the case that `T` is not `None`.
Hmm, is this a bug?
What is this license for?
Shouldn't it be "github.com/google/uuid" here?
I would have made this a global function.
I'd like to see a more "if" statement for this.
This was a bug before. It looks like `get_approvers_to_notify` is always called when `get_path_to_notify` and now it is `None`.
nit: Can you rename this to `jetpack_config`?
Are `c.SIGnp` and `c.SIGKILL` the same as `v.r.SIGHUP`? I thought the other changes here were made to make sense but I was curious about it...?
Is this a new constant? Couldn't it be something else?
In params you need to do a `return param.strip()` here.
Do we not need `self.shard_key_fields = []`? If so, then this looks ok.
Can you add the `using` on this line?
Why do you need it here?
I don't think it's necessary to get an error here.
why not just remove this?
This can be removed
I would put this `after_all_active` in its own component
Why do we have this check here? The cache will still be a valid cache if it's a non-empty cache - you don't need `@Nullable`.
This is the same as `getQueryMol()` above. It should be moved to `List[i]`. I believe this is just an issue.
what is the difference between `terraform import` and `terraform import`?
Rubocop suggested `ouchouch_disabled` was a typo (`client_disabled?`), but it was a plain-haven't checked before.
why removing the field?
Need to also update the docstring
I think a better solution would be to change to `Issuer.getValue` or `Issuer.getValue` to `Issuer.getValue`?
Why not `_spark_col_apply`?
Why not just add the `mocks` to the `testing`?
I think the original version was changed to use something like "NotSetSetSet"?
Should we check if the table is null or empty?
I do not know if this is the right fix. I think `check-limit` is the correct behaviour here. If this is the case, then `check-limit` may also need to be moved above the `if/elseif` block?
You are adding a new field for each service type here, I believe we should just pass it to the `Params` so it's easier to see
This should be named `DistributorTest`, since its not used for the others.
I would also add a `some zVM` tag for the repo.
nit: can we just use `if (this action fails, execution must be failed)`
Why are these `favicon.ico` file added?
>const char * @chrsmith Isn't it correct to use the `!= NULL` ?
What happens if you have a default value for these `List[Tuple[str]]`? If the latter, I think they will just be `None`. It's probably fine because it will be `Optional[List[str], ...` but I'd like to be consistent.
Can we use the "column" name ? We can only support this in the name.
I'd prefer a separate test with a single `ABC`
why move this import here?
Does this also need to check if the input is nil?
@wido you are not fixing it but I am not sure this is correct.
We might consider a more descriptive name for this.
@becker33 This was the only place where I was looking for the test suite, I think it'd be better to not change the test code here as we can check for the specific behavior and just set the correct correct `/v1/data/` and the `/v1/data` file when it's being loaded.
Does it mean we are only doing a single pNetCore in W3C aware if a different feature is enabled? I am not familiar with a single wording. @smarterclayton would you mind moving them to the new feature?
This is a bit dangerous as it does not return the same error, as the method has changed in `State.create`. It is a bit of a problem, because the `State` variable is also being called on the same page. This would also reduce the number of other places we are trying to reduce the logic.
In my opinion, we should not return the exact error message because the user doesn't know that the result was zero?
I think we don't use `files` when the package is created on top of `files`.
Is this function used anywhere? If not, can you name it `_Retry_After` to match the naming convention?
I believe this import is not needed anymore
@smarterclayton should we also add a `sp` here?
nit: can you use `cvr.Name`?
Which limit was found on all the default messages?
We should just remove this line.
Hmm should we keep the space between the list and the square brackets?
Was this a bug or something?
Can you explain why the `clientState` has to be changed?
This is a no-op.
I would have added this.order to the end of all of the other configs
The name "is" is not a very misleading name - I can't think of something like this: > Scapy_Exception = Scapy_request_request
Is this related to the PR?
Was this a bug in master?
Shouldn't we check that the file is enabled and not enabled?
This seems unrelated to the rest of the PR, but would it make sense to add a description here?
Line is too long. [84/80]
I'd call this `something.utils`, `Basic_CHECKING` etc.
This method should also have a return for the next `concat` and not `reverse`.
Should we also set this to 5?
Can we make this `deployment` instead of `EVENT_` so we don't care about the `ClassLoader` property?
I think you have to use the stateDb from the state domain here, not the stateDb.
Why are we logging this at debug level? I don't see why we have it here.
is this one needed?
what is a `Pathname` for?
This is not needed.
@wachterjohannes Can you explain why this change?
Can you use `is_meta` instead of `get` here?
Please remove the extra parens in `SchemaInfer` and add a TODO above
I'd suggest a different set of non-nullable variables for `accountsProperties`s, and `accountsPropertiesProfiles` in the same file.
I don't think this is necessary, since this method returns a string
Can this use `frame.getWorldState().getContract(contract).orElse(Retry.EMPTY)` to get the right results in?
This is a bug, if we want to be able to avoid any confusion.
@liggitt there's a reason for adding this to `pauseResume` already.
Why is this `chunk swarm.Chunk, currentIndex, nextIndex Index`?
Isn't it sufficient to check `tmp != null && tmp.props.children : tmp` as it can also be null in the check `tmp`?
These should be `System.Nil<T>`, `System.getInput<T>`, and `System.getInput<T>>` should not be set.
I think the regex should be renamed to `use ApacheSolrForTypo3\Solr\Facet\Facet`
This is a bit of a hack, can we fix it in a followup? I'd suggest we rename it to something like `kubernetes_utils.go`
I'm not sure if we need to check `str` when `str` is `None`?
This is the main change. The idea is to use the existing `path()` function. I suggest to move it to a local `newPath()` method.
This is an unrelated fix but it seems weird. Can't we just have a separate `getBetween` function?
this line should not be removed.
Why is this needed?
we need a migration to add this back to the controller
A bit of a nit, but can we also have an `if` statement for these?
Do you think this will work with a non-blocking word `fromNamesCamelCase`?
why is this class needed? why not do it in `pmd_util`?
Can we put it in a directory as a directory? Then you can only do this if you are going to do it in one place, which means it's ok with all your changes to have to copy-paste the file and not have a file.
@smarterclayton did you have a problem with this? I think the current code should be used by the memQuota, and it can be used for the test.
I guess the changes to this file can be reverted.
Please use `inclusive` to be consistent with our naming conventions.
Can't we just do that in the `else` branch?
Shouldn't we be using AtomicInteger() here ?
I am confused as to why you wouldn't need a struct for the struct here as well
Why do we need a separate folder for this file?
Is there any chance that the `ac` is not the right one? What is the error? I thought it was the case for this case?
Shouldn't we also have a warning for verbose=True?
@danrot what do you think @mrclayton do you have any idea what this was for? I am not convinced if a user could have an active active parameter?
Do we need this?
Why was this added?
What do you think about `GET` instead of `auth`?
I am a bit concerned about using the generic import. Is it possible to use `larger`?
Why was this changed?
Could you please change all these tests to test the defaults of the parameters?
Is the old message still useful in the code?
I think I'd be happier if you wanted to revert the style changes to be a style change
The path can be replaced by `PathPath`
Did you mean to remove this?
Nit: please make sure that we have `size` and `size address` as `true` for the service.
can be changed to `expect(getSelected()).toEqual([[0, 0, 0, 4, 0]]);`
I would put the DYN price in the DYN view
There should really be a call to `std::unique_lock<std::mutex>` here.
Should this be `hideProgressAfterFinish: false`, too? (It's not clear to me why it's here but I'm not sure if it's safe to remove it, because I don't see any reason to do it, as you're doing so in the `api/` file, and it's the only place where it could be moved out of place).
No need for any separate `ValueError` here
Is this change related to the change?
I'm not sure how this works. But this is a bug fix.
Nit: I'd rather do a `getattr(name)`, to resolve the argument name to `string`.
Is this file still needed?
I'm not 100% sure if it should be marked marked as `[DoesNotReturn]` instead of `[DoesNotReturn]`. I also think we should do it with `[DoesNotReturn]` as well
Please update the doc accordingly.
I am not a fan of this name - it seems like this needs some sort of abstraction - and it's a little strange to have the `null` interface and its body body, not just the body declarations.
I think it would be better if you add a check here that the status has the name in the path. That said the other way around, would be to add some string and name to the list (e.g., `dirname`) to the name, or to add a `Map` parameter.
nit: `The name of this table is a `default` method. It's not a boolean, so we should have only a `return toString()` and the `return toString()`.
why would you want this to work?
I don't think the `addon` is needed here.
Layout/MultilineMethodCallIndentation: Align .must_be_admin with .must_be_admin on line 21.
I would rather see the `[]` in here, as `InstanceIds` is the `StringSlice`, which will be more expensive than the aws.
We have a better home. A better fix seems to be to make sure `SymbolSupport` is always non-null, and then the code that is in `getXSupport` wouldn't be in this case. I can think of anything useful though, though
I think this is not needed, since the `Article` method returns a `String.prototype`
I think this will make sense in the `[32]byte{}` in the case of `v` we are going to have a non-testing-property
Is this class actually used?
I wonder if we could make this a little more descriptive? What do you think about just calling `get(store=role)` and using a `DataContainer`? That way it would be easier to see what the roles is passed as a new instance of the key.
Nice to see that this is a bit confusing to me. I'm just worried it works for some reason, but this should be a separate `if` and `else` branch. But I guess it's ok, and not as simple as it's worth having `toLowerCase()`.
MDCLoggingContext contains null values. Why do we need to set the `clear`? Is this the case?
is this related to this PR?
Can you remove line break at the start of the line?
Can we remove this warning now that the user didn't specify it?
Normally I'd prefer to have a single `. special-gradle` array under `. special-gradle` at the top of the file. But then I'm pretty sure that's not what you wanted.
This should be config.displayName
Can revert this change to the source?
I think these are the only ones that you removed in this function.
I would prefer the two methods to be `UsesAccessPolicyFlag.New`
I'd rather have a `ENABLE_JSON1` flag that gets set in this test, but I'm not 100% certain what it actually does here.
this line should be wrapped with `if (!TextUtils.isEmpty(loginServer)) {`
It's better to have `RestClientException` and `RestTemplate` with only `springmvc.reference`.
We should remove the debug info from the log message, as the log message has no effect.
wrong import order
Maybe we can have some sort of constant here and have a constant for the `AWS_BOUND_SA_SIGNING_KEY` function that returns the error.
Did you mean to leave this in?
Why is that necessary?
I don't think this is the right place to put this flag...
why log the connection here ?
Shouldn't we also have the `ValidateFunc` and `ValidateFunc` as well?
I wonder how the code works with `Task.metadata`? Would it make sense that we are not using this method anywhere else, but still there are other ways of doing it elsewhere?
Hmm, I'm not sure why this is needed. If we need a `isLocalFeed()` method for this case the method should also return `true` and the `isLocalFeed()` method
The `require` tag isn't necessary
These can still be `elif` since it's a struct
This is a test, but I don't think we need to be passing the list.
I think it's worth clarifying that the existing tests are failing because of the wrong "raw" values.
Why not using the q as a variable instead?
you probably don't need a guard here
Should we have a test for that?
why do we need to get the old screen from the new screen?
Why is this a separate function in `ErrParameterAlreadyExists.go`?
Why not just use `URLGroup`?
Is this change required?
Is this an unrelated bug fix? If so, you should use `!hookState._value[0] = nextValue.is`.
Please use `roles.getFunctionArray(options.roles)` instead to avoid the need for this
I think this part is not clear what is happening here.
I don't think `Int` is necessary anymore, since the key value can be the more accurate key value. The `New Load` should only be the same if `keypairsPath` does.
This seems to be a typo
It may be better to use a separate variable for all of these as well.
This should be the default. We need to check if we can set the user.
Is this a separate commit? It's not related to the PR
Why are you removing the type hints here?
Why are these lines changed?
Shouldn't the `ILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILIL
Why the fix?
I'm not sure that this is a good use case for `null` as the default behavior. We should try to keep it as it can. But then, it looks like it was the case for `null`.
why use simple_test instead of using the "async"?
Won't `@attributes` be enough now?
What is the reason for this change? I would assume that if you want to make it `Utc` we can avoid the `Sum` check for the `-`-`-`except` for `-` and we are going to be fine here.
Metrics/LineLength: Line is too long. [82/80]
We could just use this in a `@private` block, and do `if (headersValue != null) {` and `if (headersValue != null) {` instead of `if(headersValue) {` to indicate we're in a list of `isBlank(headersValue)`
What exactly does this mean? Does this test run on all platforms?
Should this be checking if version >= 0.1?
This isn't quite right. The only reason we're adding `aria-hidden` to this is because the `aria` is not being initialized in the `hidden` package. I think the only reason we'd want to keep the `hidden-hidden` option. The logic is to just change the default behavior to `hidden-hidden-hidden`. It's probably better to just have this `hidden-hidden`.
I know it's a bit nitpick but would it be possible to use `allow_to_Allowed_mapping` here instead? We don't know about these three configs, since they're all all the same.
nit: I think this is wrong. `_currentProcessMachineName` is not in-line.
Is the current version ofIFY_SOCKET the same problem?
You can add the option to the `parseseConfig` above
I'd suggest to add this to `has_all_data_is_free` as it can be used by the `ased_can` table as it is used by the user-defined `1.x` and `2.x`
Would it be better to use `is_numeric` here?
Why is a null check needed?
Can you add an explicit `Log` to `Logger` that will be called with `BaseSVIDKey` to `secret` and `BaseSVIDKey` as well? The same applies for all those methods below.
You can use `isort` here.
This is the main change.
Is it possible to have an api api name? The name should also be different
can we add a check in the `repository_id`?
@smarterclayton now I've made some sense that we have a "First" and a "real" in the past, which could have been a better idea to not use "internal" or "this", but it seems more appropriate than "internal" and "internal".
Redundant `self` detected.
Please use `toLowerCase()` instead of `isBlank()`
This test has nothing to do with the old test. I don't see any tests that were testing with `KeyError`, so why not leave it as-is?
We should consider making the nonce a constant somewhere else.
why is this not a pointer, so we don't have to pass it here?
I'd prefer a separate patch for this.
We should add the `getDomains` method here as I see the code in this class has the same meaning.
@lafriks, any reason these changes didn't work?
Please update this to `nscd-socket`
Why should we not have the `addStreamWithStore` function return a `Supplier`? (And also I think the `IsIsStream` method already exists?)
Shouldn't you be able to pass in the `isTest` here?
I'm not sure what this is supposed to handle.
Hmm, why is this needed?
Metrics/CyclomaticComplexity: Cyclomatic complexity for add_ patterns is too high. [8/6]<br>Metrics/PerceivedComplexity: Perceived complexity for add_ patterns is too high. [8/7]
Why is this change needed?
Please use `VisibleToNew` in favor of `VisibleToNew` to avoid any confusion.
`String.valueOf` has already been tested. Can we use `null` here?
This is only used in one place now and will be removed when we are already using the player->blessings.
Why change this file?
Why is `results['gt_semantic_seg']` necessary?
Why not just `queueHandler.queueFunction(queueHandler.eventQueue, lambda: setattr(self, '_isNvdaStartupComplete', True)`?
Should we use `id` here?
The `ApplicationStatusValue` function in `appHeaders` is used only when `response.Header` is set. I don't think there are any problems with this.
I don't think the new String[] are a valid value. I'd rather not add an extra field to the constructor.
Could have used `*r = *`
Why did you remove the `--repoNode` and it's not used anywhere?
I am not sure if it is possible to create a new instance without calling this method?
why are we adding this here? I think we don't want to get the container name anymore.
Since you're removing `Skyline.Util` from `base2.cs`, it seems like we might want to keep this as a hidden parameter for this case (and keep `namespace` in the code).
I think we should remove this if we have it in the `SideToken()` method. We can do it for `SideToken()`
Looks like a duplicate line here.
I would prefer not to use `varReference(Name.from())` here.
`if templates.first.customization_of.present?` would be more convenient
we don't have a `.` in the key, please use `||` here to avoid an extra `if`.
I don't think `capacity` is required in Python 3.0.
Why wouldn't this be true only when the ip is disabled?
Is this change necessary?
why the `--seed` flag is removed? why don't we just change it to `config.order = :random`?
This should probably be a separate change
Should this not be conditional as we are doing `getKey()` before the if clause?
I think it should be safe to use the commandType to be a list, and then we know that the type is not an array, which can be a list of exceptions.
Is there a reason why this import is here instead of just the "errors" part?
I think it should be set to true only if the value was set to true.
I'd like to see this test run on a more detailed machine and not the CI.
I'm wondering if there should be a way to add the same name for the `argc` to the `cache`, and the `cache-1` and `cache-2`. I think you're better off with the `cache-2` and `cache-2` to avoid that. Also, you should probably add an `assert` or `Kokkos::Tools::isIn` to the current example of why.
this should be a warning (since the messages are always set in the end of `cleanupTimer`, `cleanupTimer.C` and `cleanupTimer.update` are already closed).
Did this get removed?
@bartonjs, can you make it a little bit easier to read?
I don't like having this in the controller for the `Sparkloys_LIMIT` method.
The `.then()` call should be kept in the next line.
I wonder if this shouldn't be needed, but maybe it's better to keep this around.
is this used?
Can you add this to the interface?
Should we be doing this everywhere we need to set this to an interface?
We should add a `TODO` here, to prevent users from trying to get to think that it will be more efficiently.
I think `config_id` and `config_id` should be named `get_id` (the same below)
Let's use a logger to make the code more readable.
I think you're missing a "algoh telemetry" here.
@wido why did you remove all these lines?
Can't be changed to `v1alpha1` since this is the `v1alpha1` and not the other package
Can you check the error here instead?
Why was this removed?
Why does this error get raised?
This variable `set_cache_in` seems odd. I don't think it would make sense to move to `set_cache_in` in this case.
I think it is better to use a more specific name
Is this just `CMAKE_SOURCE_DIR`?
what's the reason for removing the `init.Bytes()` call?
why not using a more meaningful var?
I would suggest `New()` and `getConfig()` as well
i'll want to make it a constant
is it a cron or interval?
Why is it ok to return a `Optional[kIsMaster]` instead of just the result?
Extra empty line detected at body beginning.
How about using a default value here ?
Should this be `////` or `//Invert`?
I think it might make sense to use `isNotEmpty` here too, to be clear that `min` doesn't return `0` and `0` for the `us`
Can you add a null check here that it is not required to set a token.
I'd call this something else. The `setIntAttr` function can then return `int32_t`
I'd prefer we keep the old one (and have the `adaptivescar` call as a name) as the API uses the new name. What do you think?
This is incorrect - the function `NamespacedName` is not being called in a `Model.New` function which will be called with an `AtomicInteger` parameter. It's a bit hard to read.
I think we should be removing this line as its the line above it, and add the `/* XXX i#3307: necessary to instr_set_translation_mangling_epilogue? */` to `return_handle_call(dcontext, ilist, next_instr);` in `handle_call`
Would `TableInC` be more readable here?
Why `0`? Is this a `body`?
This is just a minor minor detail and I'm okay with this, but I think it's better to move it inside the `describe` block so that we can easily get rid of the `runUnifiedTest` function.
I'm not sure about this one. I would just call the variable `options`, and add it to the `$options:name`.
Should this be "table(" + hashCode() + ")");` ?
I think the `Multimedia` has more than just than `Multimedia` which would be more consistent with the `./pants run`.
I'm confused. Why is different between the pod and the other pod? I mean should we have the message message in the core?
Can this be deleted?
can you update the doc accordingly?
Why not using `n.getChild()`?
Can you use `GetEnumInig`?
This is really the same problem as before.
This can be deleted. The docutils is not used anymore.
Would it be better to make a difference between the two? I think they can be moved down one line
Let's just put a separate file for this.
NPEP8 and other similar methods should be named `(?!arwinarwin`
This should probably be part of the `before` block
Is there any reason to return `true` instead of `false`? I'm not sure what the correct behavior is.
This should be `import pyramid.decorator`. And then import from `check_ALLOWED_exceptions` below.
can we make Julia a constant?
Can you make a more specific name for this config file?
I'm not quite sure about this one. What is the difference?
this is not needed any more?
this can be `return nil` now, right?
Can we have a migration for this? This is a bit hard to read.
I wonder if we should make these constants constants.
I think `from datashader.layout import LayoutAlgorithm as ds_layout `
@KonajuGames @k167x is it possible that we don't have to run `k8s.io/utils`? It seems like it is still a valid alternative to not have to run `app/k8s/utils` at all
Does this mean that the IP forwarding can be removed?
This can be done by just a `./pants lint-http` (and by the feature above)
Why not just `localConnection.type == Blockly.OUTPUT_VALUE`? And then check if this we have the same code as the one below. This way, we don't have to have the same data for that.
Is this used?
These should probably be `break` with the `namespace` command
I know this can be nullptr, but we can't actually do this. I'll fix it in a follow up PR.
I think this is not correct as `err` is the correct thing to do. The `Wait` is not the only change that is the `StatusStatus` function. I would say, that the `StatusStatus` function should be renamed.
I think you're better off just returning the `err != nil` instead of `err != nil`, since you're changing these to `err != nil`.
Please add gitea copyright header to this file
I am not sure this change is correct but it's the most reasonable place to do it. If the goal is to do the same for the cluster, then it should be `if (!IsPaused(cluster, awsCluster))`.
Nit: This variable needs to be renamed to `pkgManagers` or `pkgManagerTuple` or similar.
You are missing a space here.
`localField` has a more appropriate name, e.g. `localFieldPathType === 'real' ? modelSchema.paths[localField] : localFieldPathType.schema;`
`find_by` is now unused.
remove empty line
why is this here?
You should be able to call `HandleText` here, no need to call `HandleText`.
Why did you remove NET452 from NET461 and not NET462?
Can we call it `chProviderName_IDToken` ?
I think we should keep this around.
Why do you not make `Uri getUriForProvidedFile` public, so you don't have to create them in the interface?
We should only need the `./download/path` import if `_path_suggestion` fails (which should be the one in the next PR)
How is this different from the port port port? Isn't the port port port port port port port to the port port?
`initializer...` seems a bit weird here. What does it mean to only call it once when the app is not?
`isObjC` and `isJJIT` are used in multiple places so this check is not needed.
This was the only place where we check, if we remove the `isRetryableWriteError` check and call it twice. This check is only needed in `pushableWriteError`.
I think this should be a `default` object rather than an `isinstance`.
Is this change in behavior on Windows or just for usie context? It doesn't look like we would expect that this is a change in behavior.
We should not be testing for this TODO.
nit: not a big deal, but why not a `CombinedScanTask`?
Which is this?
why do you still need this?
This was a duplicate of the previous version.
Why not `:user` here as well?
I'd just leave the ApiVersion field here. It is a bit confusing since it is used only in the test suite, and it's only used in the test suite (if not specified) it would still be better.
Please use the variable $manager here and not on line 939.
I think we should remove the attribute `master` from the parameter and do an `UpdateSpan` on the `UpdateSpan`, as I know that's a separate change.
Is this used?
Why did you have to use the `init` method here?
`error` test here is a great place to put this test. I think this is a no-op.
It doesn't look like there's any specific reason for this to happen?
This should be `item.images.thumbnail.url`.
Why the reference to the original request? It seems that the `api_` and `api_` are the actual actual values.
I would have gotten rid of this. The regex was already on the regex so far as I can tell.
@normanmaurer - I'm not sure why we had the name change here, but if the name of the class is `toLowerUnderscore`, then we don't have to use `toLowerUnderscore` directly, so I think it is fine as-is.
Doesn't this need to be a `@config` annotation on the `serviceApiService`?
is the `[0]` on the `off`?
Please add `module.exports = {... }`.
Is it worth moving this to line 388?
I don't understand this new parameter. The package seems to be used as a `Simple_requirements.rst` in my local `SimpleSimple_requirements.rst` but it's not used anywhere and can be removed as well.
this import is unused
Should the import be `k8s.io/apimachinery/pkg/util/wait`
Should be a `html.replace()` here.
I think we should be able to call this a `Unrecoverable` instead of a `isinstance(result, client)` for this and a `error == null)` check.
`model.neck` is not always available in `Model.model.neck` - this is not the correct thing to do. You should probably add `if cfg.model.neck.rfp_backbone.get('rfp_backbone', False):` in these lines to be sure to check `neck`
Why is this needed?
Please remove this.
This should be in an instance variable if not already defined as an error.
is it better to rename `curID` to `curreference`?
You don't need this check anymore.
nit: maybe `//// equivalent to `||`?
why not 0.0.0 ?
This is a breaking change. The first commit that is not related to your fix, but I am assuming it works for me. What about "your "0", for "0"? Or maybe some other "0", for "0"?
this will cause the test failure when it fails
This is probably a nit, but I'm a little confused why the extra fields are `@private`, `@private`, `@private`. I'd like to understand why we do `@private` and `@private` not `@private`.
@danrot I just want to mention that this should return the directory and not have the same effect. I guess that's the reason to remove it when you do a `@param string|null` check. It's a `not found` check, and I would have used a `@param string|null` for the class. The path would have to be applied to the directory and that is the same as the cache folder, but it should not.
This is not needed since we have the same code in the `if not isinstance(self.index, ks.DatetimeIndex) or not isinstance(self.index, ks.DatetimeIndex):`
This line can be removed now.
@bryevdv, why is the extra space here?
Why is this needed?
Shouldn't we use `git_hash` instead of `git_hash`?
I don't think this is a good idea, the `static int makeflow_failed_flag = 0;` is the right name for the `makeflow_failed_flag`
Is this change related to your PR?
We should also make a new function to createVNode(possibleVNode.type, possibleVNode.text, possibleVNode.text, possibleVNode.key)
I'd prefer to have a single step, not the other way around.
nit: you can merge this with the above `using brace is not suitable for the rest of the file
Can it be `_check_state` instead of `_check_state` to ensure these are non-null?
This seems like something that should be defined in the user.
I think this is not correct.
why not just remove the property completely?
I don't understand why this is necessary, but it is a different name.
I don't like that there might be a case for the error to be useful here. I'd be fine with the commit message.
please move these constants to the new files
I think it would be more readable if you didn't add `font` to the parameter of it
Layout/EmptyLinesAroundClassBody: Extra empty line detected at block body beginning.
Please add an example here. We have a constant `null` and a constant `pkiAuthenticationPlugin`
can you please explain the logic of the `getAccountType` logic for it, and move it in `executeSay`?
is this intended or can we remove the last call to `onStart` from now on?
It's probably fine to leave it out. The test failed before we have it.
you should not need any change here
What does "no Standard" mean? Why does "no Standard" also need to be here?
I think this would be more descriptive and less confusing and more generic. But we should be consistent in terms of these API changes.
hmm, I think we can get rid of these if we don't have a way to do this
This is a very specific change. If the location is `True`, we might want to support `int` and `int` as default.
@juanvallejo fyi, I don't quite get why this is here - if we are not setting up the text in `config.Now` I'm afraid of a better way of doing that, we're going to change the text in the `config.service_run` file and do the text in `config.Now`
I think that this was not the root cause of the issue, but I think we can't re-add it for this PR
Don't remove it from this PR.
Should be lowercase
This is used by the `glog.Errorf` function.
I would also update this to `User`
We need a `@Nullable` here.
It looks like this logic is only being moved to `/`?
Is it really needed?
Not necessary, please remove
I think this is a bug where it would be a good idea to test for the `data-member` case.
`--moment-utc` flag is the same as `createdAt`, so I would just `subscriptions: attr('member-subscription')` as it is the default
I think we should be using a `if` block of the file, as this is not a `if ($ ($ ($ ($ ($ ($), or just a `if (!logging.debug(...))` block.
Can you make this explicit with the others?
This change looks fine as it is the only line needed for `_Preference.preference`, but I don't think we want `mode` in the first place.
Rails/FindEach: Use find_each instead of dynamic find_each.
This is a bit of a hack, but I am not sure what's best to do. Is this going to be the best idea to use the global `distinct()` method?
I don't think we can add a new function in here. I think it's possible the node is not in karma.
@matt-gardner Could you clarify why you changed the doc here? (I assume no one-liner?)
Should we be checking for the `_botocore_parser_integration_test` function here?
Please update the description as well.
shouldn't we also have `_getName` here?
This is a good example of why I'd have put the `static` part of the namespace at the top, I think it wouldn't hurt to keep `CTU_FUNC_MAP_CMD` in the name of the function and only do it for the other things, e.g. `DI030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303
Is there an opportunity to test the `startColumn` call?
@mike-tutkowski - is this not needed anymore?
this is a change in behavior, i think we should add 1.0 and 1.0 as the default.
I think a more correct `!empty($htmlAttributes['class'] === $attributes['class'])` should be fine, I think
This is the default.
I'm not sure about these changes. The annotation is a little confusing.
This field is not needed here and can be removed.
`check_acked_status` should only ever be called for the `OrderReceivedByAll` method right?
This is a breaking API change. We need to be sure that all the methods in `class.py` have to be passed.
Nit: It's not obvious if the test is still running as is, so maybe it should be `TestMessage`.
This should be moved to `saleor/fixtures/__init__.py`
I know it's not part of the pull request, but I think this should be called `accountDeltaCount`.
This is not used anywhere.
Is this going to be something we have forgotten about?
For example, should we just have a `gulp.task( 'npm run test:js', 1, 2 ] } );` ? I think the `gulp.task( 'jest' )` will need to be moved down to the other `gulp` package.
@lannka sorry for not catching this, I was going to suggest that we should make this `Errno` instead, but I think that the `cygwin` option is a better way to do it.
This will not work as expected. Also, you'll need to move this to the `TODO` section for all the specs.
This is a duplicate of the above if block. You can use `return ret` as above to check if `!tagContexts_ && onlyVertexProps_`
nit: `result` should be `true` in the next `if` condition.
Isn't this the `_getCheckpointParentDir` that the `getCheckpointParentDir`? We're using that in other tests, I'm just trying to understand why it was here.
It might make sense to just make this `config.conf["UIA"]["consoleUIA")`, and remove the `&&` line.
This is not right. This is used by the `cancel` function and will be removed after a GPU call. You should also have a test that checks if the instances of the `cancel` function are being called.
We should use the `.MatchString` function. It's used only in the code base and should also match the code in `./pants bloat`
I think it is not needed, since `.Readers` is used to set `<byte>`.
This should be a class field.
Why not set this to true by default?
I don't think the `isNil` check is needed anymore, since `fn.FirstBasicBlock().FirstInstruction()` is the "AAllocaInst" of the "IsNil" of the `else` statement.
Shouldn't this be just `log.WithFields(VXLANVNI)`?
Is this the same as `json` in our naming?
It doesn't matter that much, but I think the `&rbuf_ivar_id` is enough.
Why are the changes in this file needed?
This should be `count`
Isn't `getUpdateTime()` the default value here so the `if` can be removed?
Is the `List` part of the intention of this change?
This is the one that fixes a bug that can't be made. We don't need to be passing the length of the array, and we don't need `.coim` to the path of each node.
I'd recommend to rename it to something less generic like `blob already closed`.
this could be a `@logger.debug`
Add a log line above.
UseUse lk (mutex) instead of lk (mutex)
Please add a `config` package for this.
What's the difference between this and the other functions?
Why is this needed?
`absolute value. Only used in OpenImage Dataset.` -> `absolute value. Only used in OpenImage Dataset.`
Can we just get rid of these now?
Can we also remove the `./testutil` here?
This will break if someone tries to get a file inside the `self._inject_early_js` instance, which will cause the `subframes=True` to work.
why not using `time.Until` here?
@sttts @lisasy, this is the code that uses `Bodies                    ` instead of `Senders                   `.
Is this still relevant for this PR?
Should we be setting a property in the state? This should be handled by the state in the handler.
nit: I wonder why `this.uppy.log` was moved to the `uppy` interface.
I think we can remove this and just do the actual test case as there isn't one.
`\_html` is not tested. We don't have a `\_html` key that will be passed to the API, so I'd just put this in the `john Doe` method.
The `Buffer.Snapshot combaination` needs to be added to the `Buffer.Snapshot combaination` file as the name of the struct, and the struct doesn't need a migration.
This should just be `os.IsNotExist(err)` since the first `if` statement can be moved out there.
I don't think this belongs in this package.
you need to use `.has_path(filter)` here.
Do we need to change these?
I think the changes in this file are related, I don't think the changes here are intended?
This will not work if there are multiple `saker` fields, which is what the class is
Why is it necessary to set the header on every request? It will be a lot of noise with the file that is not part of the record.
I think it is better to move this to the check above the `if (url[0] == '/')` so that the check is only needed when the url is not empty.
`DOC_slug_path` is the best name
this debug message might not be accurate
I would move all the other constants to a common location as well.
The `*` is unnecessary.
Line is too long. [98/80]
I'm not sure this error is a good idea, but I'd probably be tempted to just always return true here.
Just for my understanding - the `value` value is needed as well. The `this.ratio_` value is always set in this `Agent`. In fact,, it can be `undefined` if it is not present.
I'm surprised that the CIDR does not exist anymore. If the IP is not in a IP we may not need to pass the IP to the client and do the check on it. That is, it means the IP has always been closed and if the IP isn't present then the IP won't have the same IP before running.
Can you please remove the extra parentheses from the `func`?
We're not doing this yet, right? What happens if the element is missing? (I'd rather see that)
Is this a typo?
This method doesn't look to be used anywhere
This is not needed, you should have already added `self._win_id` above.
Please use `print("{0:s}".format(decode_string(msg))`
I'm not sure we want this. The image is supposed to be destroyed. What if there is an error with some user? (not that I know you're already doing this, but you have the problem.
This is a very weird place to put all the GoQuorumOptions fields in a variable. I can see how you used to pass the "is-a" and the "go-a" fields directly in a variable
This is the default behavior in `deleteManifests` where the currentSnapshot() method returns null and the caller has already added to it.
We have the Array method in `#map` and it should be renamed.
Is this to make it more general?
Can we use some `applySignatureMessage` for this and other tests? (I guess it would be more consistent and more clear)
We should not have the `spack install` import in this file, so if we want to get rid of the package, it should not work as the package itself is.
What do you mean by "services" instead of "force"?
This can be removed.
@smarterclayton do we need it for regular list? Is it not needed for regular list?
How about `ltp`? This seems to be a bit confusing. Can we name it `imperative`, `imperative` or `imperative` or something?
Should we also add that to `params`?
Line is too long. [89/80]
@danrot what's the purpose of this?
Please remove this too.
Hmm, this is not the right way to go. I'm not actually familiar with the `host->host` part of `host/is_unix_path` part. But it is the only one that's not available.
Can you please rename this back?
I'd prefer if we would use the same logic as in `JenkinsRule.xml`. This is because we're just adding more logic in this file.
@liggitt this will need some extra spaces in front of indentation.
This should be removed.
Why is this minSequenceNumber object in the field `Gcs.json`? Why not have it in the constructor, rather than in the base class `Gcs.json`?
why do you need to pass NULLptr here?
This line doesn't have to be moved to the beginning of the test suite (see line 162).
How come this is protected and we can avoid this change since it is not really protected by the existing method.
I'd prefer not to use the new `test_helper` as it's used by `test_six` and `test_helper`, as it will make it easier to use in the future
Shouldn't that be done on an `if` and then on a `foreach`?
This should be an argument to `pipeline_name` (and the name of the key) as well. The docstring should be updated to match with the new `name` parameter.
This is not correct. It should be in the build interface.
This change is not required since we now return `Collection<T>` instead.
I'd prefer to keep this import. I'd rather we have it in a module-level module, e.g. `__init__`, `__BUFFER__`, `__BUFFER__`, `__addon_number__`, `__BUFFER__` `__BUFFER__`, `__BUFFER__`.
nit: you can replace these `SQLALCHEMY_TIMESCALE_URI` above with `get_timescale_connection_if_CONFIGINGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING_CONFIGING
`s/of/target/of/target/` and `s/or/replace/` (or `s/if/else`). The `if` and `s/or/target/` are the same.
can it be a private method and use it directly?
We can't change the type here because I hadn't seen any other changes to this file.
This function can be removed, it can be removed.
The logic is to avoid checking the error and only when the `request != nullptr` is set.
Can this be removed?
is this used anywhere?
We might need a helper method? I think it will only be used during networkpolicy. GA.Incorrect.cs
I'm wondering if this will be a very good example for a single package.
@rhtyd this change was not needed
This is an unrelated change. I would say we should not do it.
I think we should also remove the import to `github.com/iotexproject/iotex-core/db/`.
Why not `return SET_PARAM_CMD_FAIL_RSP;`?
Why are these changed?
Why change the default setting?
these were the same...
This import is duplicated in this file, so it should be removed from the `/config` package.
Can you fix the docstring please
This should be Default, no need for it
Nit: I think we should probably remove this header now.
I'm not sure we can just remove this - if it is just about to say "If Cross-TU analysis is enabled and that the flag will be removed." That will allow you to set this option to true.
I think we should add spaces around the `{`.
Why is this change required, and not the other ones?
I think this should be a different check
This method is used to create multiple records in a single place. It can be used to update the logic for all the other classes in this class.
This change is not correct... it was a bug.
I'm not entirely sure how to go about this - `__( 'Search Console', 'google-site-kit' )` - it makes sure that `search-console` is a string, but it looks like the method is used here.
This should be an `dict[String, any]`. It's not clear to me if it will make the difference between `dict` and `Args`, but it's not actually possible to have a dict here.
Do not use parentheses for method calls with no arguments.
I'm pretty sure this is a good change. I think the changes here are actually not necessary anymore. Can't we just remove the `isExportBatchSize`?
I think we need a more descriptive name about what this is for
Why is this in core? Couldn't we just use the same value everywhere?
We need to add `window.__mochaResult__` to this interface, because it's not a dependency on the window (see other files). We need to update the docs to reflect the change if they break.
I think this should be changed to just "one letter followed by 7 numbers".
Could we just make this part of the default?
Do we need to add this flag to users?
Is this necessary? The `AvailableBalance` is used below, and it seems to happen that `balance` is used to determine the error, so it doesn't actually make much sense. If we want to have the same check for `AvailableBalance`, we may need to ensure that it is not an error.
Would it be helpful for this message to be explicit about what the user could expect and why the message could be marked as deprecated? (it would be good if we could be more explicit and explicit that this message could be made more sense to be a method or something similar)
Why do we need to check the error here?
This was a bug, it is not possible to have it as a separate phase, and then we'll need another one.
This is fine as it was. The only thing I found is the `return` and thus `return` can be moved to a variable.
You can also just call `Dimension('Integer', type=int)` here.
Same here, I think this should be the same as the other `columnMode`s
We could use `Load` here too. But this way, we can get rid of the `There's also a single `__init__` call for `Load` below.
nit: `eslint-config` should be `'eslint-config-prettier'` here.
I don't think the `DynamicType_ptr` function is needed anymore
Should we also include the v1/v1 version too?
Do not use parentheses for method calls with no arguments.
I'd rather see a new method for this change.
@matt-gardner, I don't think this is the right approach. Is there a better place for this? Can we use `HeaderSearch`?
I think this is not a great solution
I would not use this. Instead, I'd rather not use `UseLoggerFactory` directly.
I don't like that we have to remove the `join` import and use `join` if it was for the root cause.
Is this change related to the PR?
This line can be removed now, and it is the same as the `TEST_ARN` above.
Do we really need this check now? Or do we want it to happen somewhere else?
This might not work, because the `rounds` log will be `nil` by default.
If I understand this correctly, this is where the `PropertyResult` is used, it is just a single element, not a `PropertyResult`. The `PropertyResult` is used to set `Object.OK` on the generator and we need `error.OK` on it. In any case, you should just use `org.apache.gov.common.lang3.datElement` and `org.apache.gov.datElement` in the `PropertyResult.OK`
I'm not sure what this means, but I think it's a better idea to put an option here (i.e. the default of this option is a bit more generic and easier to understand).
We should be able to use the `model_options.dict()` helper here.
This name makes no sense.
This is a pretty big change, but shouldn't we have a `include/` in there?
I would keep the !ndef DR_HOST_NOT_TARGET and replace !NET_HOST_X86_ELSE(EM_AARCH64, EM_ARM) with !NET_HOST_X86_ELSE(EM_AARCH64, EM_ARM)
Can we get a test for that?
nit: `error.details += 'assembly.assembly_id}`
Why do you need to change it in `trim`?
Why not just add the error?
You should remove this line.
why not just do it here?
Why is the new `isEmpty` needed?
I would suggest "t @importance_type@@except and (x split_type" should be in a separate PR
I believe there is a reason to use `ByteKey` instead of `keeper` for the `secretKey` type
Wondering if we should use `ksql-FLAG` instead of adding these `process`s.
i think you need to call `iscolumncolumn()` on line 918, then check if it's in line 918
This should be moved to the `if`.
This should be called after all warnings
Is this test still testing against the new `executeController` class?
`CartAnnotationsFromStacks` will throw an error here. We have the right fix in the first place to fix it.
This should be called before `db.V(2)`
This doesn't need to be a bool. I'd just say this in a function which does this automatically.
Is that change required?
I'm not sure we need this here. The `Unknown` field will always be `undefined`, and this is not the default.
I would suggest using `[...]` for the `ExtractorCallbacks` to avoid any confusion. It seems a bit strange if the arguments are not an `-1` or some other `-1` and `-2` are the only one that needs to be changed to `-1` (or `-1`).
Just want to make sure we have a lot of those 3 calls to append, but I don't know what is the point of this change.
@Override and Move your VCH fix for the next PR.
I'd rather just remove the `/////` and add only the definition of the `//` tag.
Shouldn't we check for the `is_same` case?
Is this the correct way for us to remove the class?
nit: this should be `SSDAnchorGenerator`
I guess we are not going to add the `header` package anymore, so it is only used by the tests.
Is this still needed?
We could put a `role="presentation"` on a new line.
I don't really understand this change. If you're only using `Task` on the `pfs/pfs-timeout` event, then there should be a `Task.createStateChangeEvent`, which is probably best to make sure it works.
Please add `import { Component } from 'lodash'` as mentioned above.
Should we remove these from here?
I think it is not needed anymore?
This test was supposed to test the specific tests because of the issue: > * `firstChild.spellcheck=false`
It's probably a good idea to add this option at the top so that the `CreateSettingsFile` function can be used in the future if possible
This file is already imported, right?
I think the naming is not clear. I'd rather not have any other function in these two methods: `state.copy(map[string],string)`.
Shouldn't we be using Number.MIN_SAFE_INTEGER here as well?
Not sure what this means for a timeout to be passed in. I guess it's a good default for some reason?
This change looks ok. How about just `toplevel->server_pending.maximized = maximized;`?
Why is this intra node1?
why the additional backslashes here?
I'm guessing that it is not really necessary?
This could be just an `Rule_name` property
Why did we change this?
This is not a good idea to test whether this is the exact case or not.
I don't understand that. Should we be doing this as a constant?
I guess we could remove this if statement?
could the `append_command` be set in `parse_reprimary()`, so it is clear what it does?
This is already used in `global.googlesitekit.setup`.
This will need some test coverage for that, otherwise the frame would still be correct.
nit: no need for this
I have not tested with #3332, but this should probably be `U General_LDAP_Organization`.
nit: we can make these `private`, since we don't have to pass it as a parameter to `maxRetryTimes`.
Should we just call `repo.actually(repo) cloneLink` and `repo.actually(repo.actually(repo)OrOrOrOrmodels`? The reason we're adding `includeUserName` to the `actually` method below is to only keep it the first time we add the `act` to the `act` method and call `format` on each call. The same is for other instances in `repo.go` and the `act` method.
This is a very common place to use this. Is this something we want for? I don't think there is a way to avoid adding a `_scopeManager` parameter and then use it to get the list of configured if the scope isn't activated.
this should be changed to `char` (or the corresponding one)
is `+` needed here?
You should add this to `ErrUnimplemented`, there's no real need for the `Client` method. It's just the code that is used for the user.
Why are we using the final buffer here and not the original code?
Can we move this TODO to a common place, for example, if it's not actually used?
This is a test that was only testing for a non-goog fields (not in the original implementation). I would think this should be called: `goog:chromeOptions`, since that is used in other places as well - but that's not what it's doing in the `KEY` table
Is there something we should be setting the header in `main`?
Why `value` here?
Why is this needed?
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
I think you should be able to use an 'IS_name' type of "is localized" instead of just calling that 'HeaderText' here. Also this will probably break some code.
This was a bit of an awkward change to `len()` for a while.
You could just use `return (currentcurrent)` here.
I think we can use `ImmutableMap.build()` here
Can we remove this now and replace all the above `setRequiredDV()` calls with an `Optional`. It doesn't make sense to have the check in `addProps`
Why we can't do this? It is a little hard to follow.
I think this should be moved to a new module and use that here.
Is the copyright year still needed?
This looks like a good candidate to be a better name.
Can we change this to `def playWaveFile(fileName, asynchronous=True)`?
I see that it is already in the `EEA_GET_TRANSACTION_COUNT()`
So, the `log_msg` was not written here, and it was only used in the `switch` and the `switch` was removed in the call that was added in the previous line. The reason for the change to the `switch` was that `switch` was removed in a function is to have the same place as before, and that was added in the first place.
@kargakis do we actually need to change the API var? If so, I think it's better to have a name that makes sense as the name of the API.
Please update the data with `_add_item`
`ValueError` is not needed here, it should be moved into a `utils` class in a `utils` class
Why is it called `User-Agent-Agent`? Can we do it in a later PR, and test for that?
Do not use an enum value for every invocation of the value
How does this handle `4` without `@Newtonsoft.Json`?
I'm not sure that this change is needed?
This seems like a change in behavior. Is this what you want?
I think you can remove the `_for_search` helper method altogether (e.g. `_params_for_search(params.merge(:sort => sort_key))) %>`)
I don't think this is the right place for this.
Is this change needed?
I don't think it's a good idea to have an option here that would be a no-op if the connection is not active. The only place this code comes to consensus is in that case, since it could be called from within consensusfsm.InitState() or in that node. The first logic should be in the connection and the second logic should be moved to the connection, in a future PR.
why are we removing this ?
Should not be imported here.
I think this would be better as `if not -f`
Can you please create another one with the sql query instead?
Is this supposed to be here? `new(options)` returns `null`
this is not correct because the code is not in the `std::get_requests()` method
Can we just make a node_id be set to nil?
Final newline missing.
`onPreExecute` seems to be unused now, can remove it.
I'm curious, why do we have to do `not_to permit` here?
We can't change the `focusTimeout` here.
I'd suggest to rename the `DumpFlows` method to `DumpFilter`, so it's not clear what is going on.
nit: could you rename this and `remote-http` to something more general? It makes it easier to understand what's happening in your IDE.
Isn't `getVersion` always an `Extensions`? Or are there others still in this scenario?
Please change the description to `string_trim`.
this should be `_isApplicationObject(self,obj)` since there is only one value in the `if` statement
Shouldn't the storage be in a try block of the loop?
This is an extra query. You could just pass it to `caffe_memcpy` instead.
Can we rename this to make it more clear what the function does now?
Why are we no longer setting the file here?
I would move all the `/config` files in one file and then do the same for all files in the `/config` files.
This isn't needed anymore
Should probably be `BaseTree`?
This isn't going to cause flake8 to fail.
This file also needs to be deleted.
I would also rename retries to something like `is`.
This is a breaking change for the public API. I'll try and figure out which API is being used in their code.
Should the `detached` be in the `distributor` package?
How about "local": false, buildStatic"?
We can remove this var as it's used in the same file.
I think the original code is a bit confusing, it's ok to just put this one in the if and not the if block.
I know it's not related but wouldn't you have more than great to have it as a dependency? (or even PR)
Is this the right place to put this? I'd expect a way to do it, but I can make it easier to track down.
Why do we need this? Do we have a better name?
I was looking for a spec to see that we do not need to use this change. We can test it, if there is a specific reason why a `trimRows` is removed.
Is there a need for to return 0 here?
The new name `ImageDigest` is misleading.
Why the extra blank line? This is really necessary in the future.
`v1` should be added to the group of imports in `Test` too
This is just a question, do we need to check the whole function for the URL in the constructor, and do nothing if we ever change the URL (e.g. not just a whole function)?
I wonder if we need to change the `create` prefix to `createGroup` to match the order of the commands in this PR?
I'm guessing this is not the best name to handle this case.
@tnozicka what are the cases where the namespace is not present?
Is this needed?
This should be done inside the function
Should we add a TODO to remove this?
This is probably a good idea. If the default `exMessage` is `null`, we don't want the user to do so. The default `exMessage = null && exMessage.startsWith("Datafile", ")`
Could you make this a function of `ValidatezZDBUtil` ?
Should we do a similar change in the `PTransform_utils.cpp` file?
Is it possible that 10042 can be accessed from the transport?
@sparrowDom What do you think about this? I think the logic here is to allow more than one chain, then check it again?
This field is not initialized with the feature flag in the memsetDS. Is it?
Why would we want to use a specific string as the first argument?
The `tile.getPhysicalLevel() <= 0` check is already checked in `tile != null`, so I don't think there's any need to change the `tile` here.
I think we should include `#definedefine INCR_BATCH()` in the `__close__`, which is what you really want.
should probably be `getWriter(tagWriter *w)` to keep the name consistent.
This is needed to get the Request policy from the request request.
Wouldn't it be better if we didn't move this to the new API?
@stephenroller Is this the best we're doing before? It seems a bit of a hack.
please update the doc.
Not sure why I thought this was a cstor-volume.js, I think the `getvc` should be moved into `site-process` and it may cause some weird weirdness here, since it's no longer needed.
shouldn't this be "IRQ write < 8 bytes" ?
Can we add a label for the Transformer and Transformer in the `_` directory?
I'm not very familiar with this code and I think this code can be rewritten to be deleted. We should be using a `startActivity` from the config instead - but I'd suggest a different method for this.
@smarterclayton should we also check for the `--range` package?
Why is that necessary?
Same here about assigning the `random_60M` to a method.
I am confused. Why not just `Sha`? The `version` is a tag, which is not the case here.
I know this isn't your function, but what does this locking do? Why is it not only `timeZone`? Why not just `timeZone.DateTimeFormat()`?
We can now drop the `name` parameter altogether (not just `name`), right?
Can you also revert the changes in this file?
If you are changing the text here, you'll need to update `mmcv_maximum_version` to return a list of `types.version`.
why was the function changed?
Why not set `null === $normalizedConfiguration['text']` as the default value for `$normalizedConfiguration['text']`?
I think we should change `.equals(() => node.equals(()))` to `.endsWith(ClassOrInterfaceDeclaration)`. Also, it makes sense to add an `if (`
why is this a getter getter and not a getter?
This might be an overkill but I would like to see a test for this.
Thanks for the fix. I was thinking that there was no way to show an error on these, but I am pretty sure that the old error was correct before.
nit. I don't think this is right, we want to have a `reverseEdge` here.
Are all of these being called multiple times?
this should be an empty list
Is this the same code as we are doing for `Source`? I would prefer if it can be used by the code.
Can we rename this to `imageAccounts` so it's clear what the type of the column can be.
I think it's better to move this into the `formatformat` method
Why did you choose a null check here as well?
I don't think this is going to work. We need a `acc` prefix.
Is this needed for the hot path?
@benjyw this is not a good idea. The `htpasswd` file is only for testing and that will be removed from the file. In order to test this case, I don't know how to test this.
Should there be a period after the last parameter?
You can call `with_pair` twice in this test test
Is there a need for this `location`? Or is this used somewhere?
`UnknownOutput` is not the correct name for this, we have `Unknown` and `_NumCatgoriesNotSpecified`. Also, we should put this as an alias in there so that we don't have to add this for every other PR.
Why do we need `@SuppressWarnings` for this method in this class?
Please rename this to `Comparator<K>`. I know it does not add any other places
Please remove this line.
@kargakis - I don't think it is possible to do this for the parenter and have a `parentDom.childNodes.length` call that is not set here?
Shouldn't this be set in the `keybase` block?
I think I'd prefer the original method signature of the `Manager` and the `addaddPackage` method, to reduce the number of things that can be set.
This is probably what I meant by is a `error` argument here
Can we get a warning if `apigateway` is `None`?
I think it would be cleaner to check `Object` as a key for `Object.is_empty` instead. That way if we have any way we can check if it is not, we'll have a bug in `Object.is_empty`
nit: we can drop `s` as it's only used in the other places.
Another `float` candidate.
This is the one in #6393, so it's not necessary.
Do you need the condition here?
Same question as above, what about when a title is null?
Why are you adding those string values?
What are the changes in this file for?
Hey @rleungxo this test probably is a bit confusing since it's now testing for the task, right?
I think `protobuf` and `tasklist` is unnecessary here.
I think the most important part here should be kept, as it was before.
is this change needed?
please use complex `raise NotImplementedError` level, it's more readable if you just use a single `self.output` variable.
Is this an unrelated change?
We should have a default value that we set to true. This will make it easier to use in the future.
why don't you just set it everywhere else, just keep the old behavior and just change the condition to nil and remove the if condition?
This is the only line that uses `super().().set_record()`
I'm not sure this will be a problem. What does an `DEFAULT_class` represent?
Why this change? This is the same problem as the other PR
This might not be correct, as you have `IsString()` in `pkg/util/server/server.go`
Can we add a more information for this new namespace, and just say "Rewriting manifests(staging location=%s) of %s", stagingLocation, table.name())?
Don't use import with a full list.
I'm not sure this needs to be `s.empty()` since we already know about the `if` on line 639.
Why not use `let(String, StringComparison)`?
I think we can just use the `name: float = x` type. The function `Javs.deepcopy.DeleteNav(stable, x)` should just be `Javs.DeleteNav(stable, x)`, and the new one `Javs.DeleteNav(stable, x)`, and the new one (or the new one)
could you explain more why this change is needed?
This is not right. You only need to check for `truncate` here.
We should probably check the other options here
This is a CommitStateUnknownException, but the implementation is never unknown.
This is wrong: `else if` and then `else` should be tested. I suggest adding an `else if` to the check instead, and to be consistent.
just confirm, what if the user explicitly set this and the `Module` key in the console? do we need to handle this?
How about a constant?
I don't think we can do any validation for the id here. We already have a single folder, and we have it to determine whether the id is a path. So we can move the id to the state/password, so it is a bit weird to have a value in these two functions.
Should this be moved to `user_name`?
Looks like you might have missed the missing comma here
Why was this needed?
nit: can you fix the indentation to the last parenthesis?
I'm not sure it's the right approach here. It should not be an override, so it should have a `SetReader<byte>` that is actually not an `SetHeaders()` method.
Just curious: Why not just have a `private` constant, and have this constant be moved into the `private`?
`...= 0`?
Is this intentional? I am guessing it should be, right?
`Tags.HttpUrl` is a little confusing with `Tags.HttpRequestHeadersHost` for the name. I'd just remove `Tags.HttpUrl` and call `Tags.HttpUrl`.
This should be done with the debug logging - we should also be able to use the debug logging here
Why was this changed?
I think you're missing the import now
Why do we need this change? It looks like it has been added for a reason.
can you use constants for these package names and the other ones?
Should we call this `Parse()` instead of `Parse()`?
why change to PARAMETER_MAX_RESULTS = "max_results" ?
setting this to `true` as a user would not want to show the test as an error.
Why remove this?
I would use the default here - the `CRiOS` field will be set later on in this PR, not sure if we are not using the default value, and I'm not sure if this should be set or not.
I would prefer to not have to have an interface for this object. The constructor will return `null` by default.
Should we use `dump_log_exception` here, instead?
Does the logic of this change belong in this PR?
Why is this changing? The only change is to allow both `epochNum <= a.foundationBonusP2StartEpoch` and `PackPacks`
Please add an explicit `.spec.satisfies`, `.spec.satisfies` and `.spec.satisfies`.
This is a bit odd because we're doing this in many places, as this is what we want. If it's not there, we might want to be able to use `bool` on the same line. The `folder` method is not used in all cases, but we're just doing a `folder` check. But that's probably not necessary.
I'm not a new option to set it to `true`, but I think you can just set `HidepidDisable` in `api/v1/lib/tests/Hidepid.go`, which will then be set to true.
I think this check is actually redundant here. It will be removed.
@smarterclayton do we want to have any test for this? or do we want to have it in the future?
I think it should just be `this.prevFolderId_`.
This is the only change in this file and `go/go/go/clock` in here.
I think it's better to make this a `lbann_comm_ptr` as it seems to be only relevant when a user doesn't have an `AbstractGann` reference.
It seems we should not have an issue in the call to this method, if that's what we want to do (e.g. a test), then we should be able to see the `delete m` case here and the `if` statement above (which would be useful).
Let's keep `<fillHandle>...>` here and just use it here.
this method is used in other places in the codebase as well, maybe `isUpperCamelAndDigits()`?
I think it should be `final` and `sync`
I think the context is still not necessary here.
I think I missed that this line was added by mistake.
Why don't we need a new `ctx.GetStatus()` here as well?
Should we change the message here so that it's clear what the renewal param is and what it actually does?
Why is this change required?
We should be returning an error if this fails to be nil.
`codes.PermissionDenied` is a little bit over-kill. How about `to the pipedID string`?
Can this be a `Path` instead?
I think you should be using the `is_compiler_arg_Lamba()` here.
Is this just a bug fix?
I think this should be the old one instead of the new one
Should these be error instead of error?
What do you think about just calling `uploadStream.abort(null, function (error) ` instead?
I think the `<%=` might be a better idea to remove this `'>` component and use that here.
We could make this a breaking change.
Hmm. I'm pretty sure this is really important, the `status` will raise an error if it is a `Error`, so it's probably fine.
@contributor/runtimePJBl I think you can use `.find_on` here.
TIL this can be fixed without any change.
@liggitt do you know why it needs to be a concern here?
Do we really need this? I fear these can't be the default.
I'm not sure if we need `Builder.length == 0` here. `Builder` can return `null` if `accountType` is `null`.
Is there a chance you could just use `fillObject(n, element)` directly, like in `fill(n, element)`?
Please remove this file, it was not used
I think this should be `logf`.
It would be nice if this would use the other `else` branch, since we can't just use the `theme` variable.
Is this going to fail if there were no block block?
@dmitsh whether I missed something, or I missed something.
Is it necessary to include this version by 1.5.1 ? The version in S3-6x2 version isn't necessary. The new version should be the default for 3.6.
Line is too long. [83/80]
Shouldn't it be `HidepidDisable` ?
Can we make this `Integer.Date`, and add a `Set<JsonAttribute>` type?
Should this be called `sameSite` instead of `secure`?
`user-agent` is used in this file and the `user-Robot.html` file in the file. So I think this file should be removed as well
this could be just set to 0.43921, but you are not able to use it in the code, because it is in a single place
Should be `static` instead.
You should use the reserved wording as above.
Why do we need this method?
Why change this to `batchSize`?
I wonder if we should add an assert about `Column` to this method as well.
I think this should be called Xsignals, since this is a public API. (It should be `i2h`)
`String#Equals(String, StringComparison)`
Where is this function used ?
please use mock to make sure the new behavior is correct, and not quite important.
This should be `github.com/algorand/data/basics`
This is a bit scary and I'm wondering how many places we have `*Disconnect`/`*auth` errors, could we instead return the same error? Maybe even `*Disconnect` or `**Disconnect_*` as we do here?
Why is this `super` needed?
I believe we want to use `func.IsNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNon
Is there a reason this is changed instead of in the if? Wouldn't it be easier to read if we made this a default, and if it's not then we'll likely need to update it
Hmmm. This is a bit of a breaking change. Can we instead get rid of the `./pants lint/t` here?
Line is too long. [81/80]
I think we shouldn't have this set to True, because if we want to make sure that the user's `async_select_unrequired=True`, we'll still end up with no changes in the future.
This test is missing a test that checks for an advention of an existing origin.
Please update the docs in the doc block to reflect the new style.
Would it make sense to also add this on each call to `SpanContext.IsValid` ?
Do you need it on any other places where we check if client is not enabled? Or is it possible to check if any other places have a response set?
This doesn't seem related to this PR, just an opportunity to make it work.
Is this the case that you're getting a warning for?
This should be a private constant since the default `isKube()` can be called in the same file.
Why not do it in the `isDebugMode` and the `enableTwigStrictVariables` instead of having to pass in it from the `isDebugMode`?
This change is not related to your pull request.
Could be added to this PR, but it's still a minor thing in this file, it's not related to this PR.
Is it possible to have a `driverVersion` in the goroutine?
I'd like to avoid trying to write an identical code for this and then pass in that object.
@jackfrancis Is this intended?
nitpick: we could use `request.getRestStatusStatus(...)` here instead of creating a new `if(successful) {` statement.
I'd prefer to not have the logger on the `DynamoViewModel` as it is.
Could have used `interceptors` for clarity.
You should not remove all those lines (see `return Assembly.LoadFrom(path);`). You should also add the `return null` below the above `!(A)`. (A)
Why not just `int()`?
@jridgewell Could you please add a `@CheckForNull` check to see if it's ok, too?
This should be imported, right?
Should this be `new(heap, len2)`, and not ` char[len2] = '\0';`?
I think we should keep the `user_from` and `request` here. The reason being that we can't use `None` (which we would want).
You don't need the cast to `i <= allergens.size() - 1`.
I think this is also unnecessary, as `AppendNil` returns `false` if no `if` statement is found.
@cramforce would it be worth making a `dict()` return value of `argsChanged` for this? The caller of this method already has a `dict` and it's not really the case when `argsChanged` is `null`.
`_leave_parts_on_error` is the proper way to set it.
Why not use `roundtripper`?
The cftime_types code should be moved after cftime_types, otherwise this PR will crash with this PR.
This could be moved directly to `api/` right?
This is the only change that works in #934.
this is the new assertion, right? did it change?
Why is this check necessary? The function returns an object of the function that does the same thing.
I am not convinced whether this is the right way to do it, but I guess the only difference is that if `main` is 0, the caller should be able to set `main` to `false` if the result was changed and the result doesn't exist?
Is this a problem?
We should not have the plugin here. Unfortunately it's just an exact plugin that is already present.
Shouldn't we add here the key as well?
The position of the lower end of each spike is a plot.
`trim()` is the same as the second parameter. I would prefer to keep it as it was.
Why did you remove this?
Please don't actually fix this one: #12026 is merged with master.
I'm not sure why it is needed to change `RequestOptions` here.
We could also use "artifact.name".
nit: `default DocIdSetIterator` -> `default DocIdSetIterator`
Why not use master master as a primary list here?
Shouldn't we also move this to line 188 below?
Is it worth caching the `exec.exec.MessageId` value to a pointer and not an error message?
We could consider making this a function in a constant.
Is this change related to this change?
Is there a reason why you wouldn't use `varHolder` here.
I would prefer if these were called `Raises` and `RaisesX` as they both both exist and in other places.
I would use the `bool(self.message['key'].includes(key, "lt;')` constant here and instead add it in the `if` statement, then do the need to change the condition to make it easier to track down
how about a constant constant somewhere (or at least for 2)
Block has too many lines. [26/25]
This can be a little more descriptive. It can be an array. What is the `KeyKeyKeyTenentMaxLength`?
I think `allowOptionalMappings` can now be `false`
why would we need a new type?
Is it better to move this code outside of the if-clause?
Do we really need to check `sendsend.nonce` is equal here?
I think this should be `x.size(Platform.OS !== 'android' && NativeModules.ShareExtension) ? NativeModules.ShareExtension`
Is this change intentional?
The PublicHeader from the QUIC packet is a bit confusing. Why do we need to call this just `MapMapper`?
I think this is a change to the behavior of `super.indexOf(element, from)`, but since we've not done, can we just revert this back to what we do for now?
Let's not change the method signature. I'd say it's something else, but I would suggest we rename this method to `isInterfaceInterface` for now, to match our existing `isRemoveInterfaceInterface` method.
Should we be checking the value of a `terminate_after`?
I don't think it's a good idea to add such a case for all new ones.
Why are we not using a `go fmt`?
Please update this to `leakedInsecureKey`
Wouldn't this result in a test if the content is empty?
What is goal of this ? I don't think it's better to make the function return the view. The view would be the only way to do this for every other view. The view would be the same, and the view would only need to have it as the view.
This is a little bit confusing to me. I think if it is not possible to use a function in the vector (or at least return a function for the ring and list), then the ring will still be a value. But I think it's a bit more intuitive that I'm happy to just call `GetDatumInActiveForRingNode(node)` here.
this does not look like it is used
This should be a separate PR, right?
Use && instead of and.
This is a breaking change, we should change this to `pregulp` instead of `Handler` here as well.
Why was this line removed?
Would be nice to test the code style in a future PR to not change these in the diff.
This is just a minor thing but is not really necessary. The first line of the command is a bit of an overkill, and it can be removed.
This is not really required because the type is already in the "state" folder, and it's now `@Nullable`.
Worth adding a TODO about that? This makes sense, especially since the `success` field is still being used below.
If i'm not mistaken, what is the difference between addr and addr? Is it possible to have the new addr in a different thread?
I think there is a bug here. The `ino_weight` class is used to pass on `Seeing_weight` to pass `show_loss`.
Same as above, this will be used when we create the network tags and in the other tests.
@liggitt this file does not seem to be broken out of the PII step... it is just a question mark
nit: the `else` can be removed as it is not used outside the scope of this PR.
This is not needed
Wouldn't it be better to pass the path as `null` and then you can just do `try { ... }` on the `@return { ... }` on the exception above?
You can actually do this at the top of the file (line 37).
Can you please remove these two lines? Making them hardcoded as "default" or "default" is more appropriate for the test suite.
Layout/TrailingWhitespace: Trailing whitespace detected.
Should this be `bool`?
I think we'd need to remove the TODO if we had it.
I believe this test should be reverted.
I'm not sure it's the good idea to add this to the Beam. Maybe something like: "Azureinder and any further instructions, and that may be incorrect if purchase is not enabled"
Please use the value from the initializer
The new `LinkToParentDomain` flag seems to be a little confusing. Maybe a more descriptive name for this?
I don't think the test needs to be run for the test. This is an test.
Can we also remove the name of this field?
I think this is still wrong, we usually usually don't add main.
Why is this `makeLazyLoader` different than in `Syntaxs.js` ?
Why don't you use the `@deprecated` annotation here?
Use && instead of and.
Should this return a `show_source_pygment` instead?
Does this need to be done for the next line?
Another reason to remove this else statement.
Redundant inline with a hash parameter.
can this be done by just the `logger.Created` call instead of just the string?
is this file still needed?
@mramato I guess this is the right change
should we remove all the examples? we don't do this
"... if this field has any variable references" -> "...".
This is not necessary, as the previous version will only be read once.
Wouldn't `default` be a more precise name?
I think we should add this to `_format_instance_name` so it doesn't actually need to be included in a single place.
We could probably have a message message to say "error restoring console to functional state: %v\n", err)`
This seems to be not used.
Noting that it is a bit of a thing but it would be nice to also have the switch in `ok` for that.
I think you can just check if the variable is null or null. Also, you can remove it from the `if` statement.
The `Util.h` is used when the module is not enabled - we should still have it here.
Same as above, this can be set to single thread again.
Line is too long. [81/80]
I think that you want the same check for `getShouldRepeatEpisode()` instead (it's also called before the change)
Please add a newline before this.
You should use `user-data-dir` instead of `as_json` here. It's more like a `@capabilities` or a `_options`.
Please use the `SQLITE3` decorator
We should move it to the top of the file, since it's now the default implementation.
`Tensor` should be `Optional[0, 42]`.
@deads2k this was just a mistake and is it still necessary?
I guess the new functionality can be removed?
why we need to set the flag twice?
Is there a specific reason for not passing Stall through to this function?
This field doesn't appear to be used anywhere.
nit: I know this doesn't work, but it's just a cleanup function, so I would prefer to have a single `if` statement that's only a single statement.
`numba.from_no_secret import _to_s``
I think you should use the `systemdsystemgeneratordir` instead of this string.
Why do we still need to call `get distribution`? Is that being called?
Huh, I think I'd prefer to see this in the first place. `init_fit` is a valid value that is `0` in `init`.
I think it would make sense to move the startTs check to the `class.getVersion()` method and add the new one to `startTs`. It can also be made public so we can just change it to `class.getVersion()`.
Is this really required? I'm not sure what the `width` parameter is for, but it's not actually used anymore.
Why not just call the `skip_authorization` variable in `redirect_to`?
Why did you move this up here?
This is a breaking change - it is not used in this PR
we could just make this a string and make the schema match: `state :approve, transitions_to: :approved` It would be better to use the `append_id` here. We would need to also check that `KeyError` doesn't exist in this case but also we don't know about the `approved`
could you please also add a new one like the other tests that fail on this test?
Why was this changed?
Shouldn't we set the sequence-resolver here as well?
I think you forgot to remove the trailing comma here
Why do we need to set the game game game game game game game game game game game game game game game game game game game game game game game game game here?
This is a breaking change. I think the only reason we need to call `linkedSource` here was to avoid the extra `DynamoModel` here because it is `null`. But it is only needed if the cache doesn't have any attribute, so the other way around is to make sure we do that is to get the `null` to avoid the need for it to handle this case. I'm fine with that though.
We should probably make this a setting of stakingV2 as an option to make it easier to understand.
Should this be outside of the module since we are already doing it in an `__DIR__ . '/../vendor` file, instead of doing it in every file?
This doesn't seem to happen. Can we remove it? We do not want to remove it in this PR.
Please revert this and other similar ones too.
Why do we need the `os.environ.get("USER", "localstack")` check here? It would be more efficient to just set `os.environ.get("USER", "localstack", False)`.
Why? This function is only called from `node_parent` and is never the return value.
Ugh, you can use `@group_level` instead of `group_level>0`
We do need to add it in this PR.
Better to use `with_notebook_data(notebook_path, "notebook_path")` to avoid mixing up with other `with open` calls.
I would just inline this as it is the same as the method.
I think you can use `cfg.Genesis.KamchatkaBlockHeight = 10` to avoid the `KamchatkaBlockHeight` call by calling it `getClassFrom` directly.
@deads2k @tnozicka what do you think of this change? I don't think we want to have this.
I think you can use the same constant for the `project.getBuildDir()` function
Shouldn't this be a default instead of false?
You can just use `[DoesNotReturn]` instead of `[DoesNotReturn]` if you don't use it.
These lines are not related to the issue - we shouldn't need to either add a typedef or drop this line (I'm surprised we don't have the changes to this file) or add another one.
What was the reasoning behind this change?
Would you mind removing the `./pants path` from the class? It would make this more readable than `./pants path`
@bflad not sure if it makes sense to put this into a helper
I would prefer `import sqlalchemy as sqlalchemy` since it's a function
this method was added to the base class, so that we can't change it here. `klog.V(2)` is only called in `X+1`. I'm not sure if this is correct - we need to be careful with any new code that we use for the `klog.V` to handle this.
why did you change this?
I'd prefer if you used a test for this, but the test doesn't pass without the new `switch` is the correct behavior for this test (and the test in `update_update`)
You don't need to add the message to the message. It's used in many places and also we have to change it in each test.
this is a bug fix
We need to keep the original value, as `bool` will no longer be set.
Is this related to this PR?
You could remove this change. It's unused and should be removed.
Hmm I'm not too familiar with the code here - I guess it's just that this is the correct place for this. I'm pretty sure I've got a wrong reason to add the two new `Sorbet-api` methods.
I'm not really happy with this. In general, I think it's better to put these methods into one of the tests in `getClientConfigImportModule`.
Is the link required?
This is the only thing I'm concerned about: - Isn't this a breaking change?
Is this a bug? If so, I'm assuming it is needed for this patch? If so we can get rid of the fix
This is not related to this patch, but we should have done a few things like this: 1. You can use the "user" and `not_to_remove_preferred` to generate an url instead of `preferred_citation_txt`. 2. It is just a question of how you can use a single path that has already been passed in.
this needs to be an `::int` instead of `six.Tensor`
This is now unused and will be removed.
Is this intentionally here? I would expect it to be a single call to `result` in that function?
This is unintentional and can be simplified to make sure `HttpParser.IHttp` doesn't get used for `IHttpParser` is only for `IHttpParser`.
this should be a warning. I guess you are doing that right?
Why do you want to return -1 here?
@bartonjs, any opinion on this?
I'm not sure what the right thing to do here is. `for (var i = 0; i < this.inputs.length; i++)`?
Should be: `Invalid_format(string, None)
I think we can simplify this to `is defaultValue`
Isn't `GET` the same as `new` in the output of `copy.empty()`? I think it would be more consistent to have it in `settlements` that is already there
Please rename this variable `0x42000000000000000000000000000000000000000000000F`
This will need a `#Xmlpliantpliant` package too
Why not also change the `name` parameter? It looks like this method can be replaced with `if string.Name() == "" && name != "" {`
This doesn't seem quite right to me. If `auxFile == null`, we can just use `File.getAll` instead of hardcoding the method that takes a `File.null`, and this will break the behavior of the `auxFile == null`, right?
I guess you can get rid of the config below?
This seems like an odd change.
Is there any way to get the "or 'mmcv.runner.DistEvalHook' from the doc block, or does that make sense?
I am not seeing where it is used, I think it is a good use, but it seems to be a little bit of a tad better to have the same code be done for the current `100.io.common.org.acme.java`
This needs to use the `GoogleComponents` constant.
I wonder if it would be better to just add the X86 here, as we already know the X86 functions are not null.
I would use `isort` here, as the input type will never be a function, so the type should also be `isort`
Should we have a `finalize_hooks` field that can be accessed via plot.handles. I think it is better to make it more obvious what the `hooks` argument actually is. We should probably add a `finalize_hooks` method.
Can we use the `is_trueblack` helper here?
Style/SymbolArray: Use %i or %I for an array of symbols.
I'd suggest to log the message here. What do you think?
I'm not sure if the name should be public or not... what about `isInUsed(Name=false)`?
I think you can use `new webdriver.http.XhrClient(url, url);` directly
I'm assuming this is a debugging debugging thing. If it is not a problem, I don't think it's worth it to make the same changes as in `Changing` for all other places.
Why not just `for (const key of Object.keys())`
Please don't use static imports.
This is a small change in behavior as I was seeing my faults to have it in an `if` statement, I think.
I think this should be "this.finally(typeof opt_port !== 'function', port (mocha callback)?"); . Also, if this is a change to test it should be "this.finally(typeof opt_port)`
If the user passes `SpendingKey Address ` for the account, then the account will be checked. We should change it to `handleKey` and have it use it here to make sure they're in different ways. I.e. it will be `handleKey` and not `EffectiveAddr Address` for the key rotation as it can lead to confusion.
Could we use the "selectCast128" format, rather than hardcoding it, as you have in the name. (But this is a bit weird, as the "selectCast128" in the name)
I'm assuming this is a temporary solution and it's probably worth adding a look at the output and we can get rid of the `getenv` function?
We're not using this anywhere, I believe you should remove the `ContainerTestCase` class entirely
Why the other value change, but not in `org.sonar.java.lang.api.transform.opt.opt_TYPE_INFO`? Also, should this be an `private` field? I think you can use the `org.sonar.java.lang.report.opt_TYPE_INFO` to avoid using the same value (and make it a `private`)
I'm thinking you don't want this to be `None`? I think the idea is to change this name to `_filter_signals` or `_filter_signals` for the user to know how to use it.
This looks wrong. Why is this needed?
This is not a good part of my code, but a non-string parameter is going to be used for every call to `nested_flatbuffer`
I don't know how the test case gets executed, but I'm pretty sure this change is correct because we don't do anything to do this.
Isn't this the only place you get here for the field name? Why are you converting to a regular type?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This test is testing the same as the one in the test_argsort above.
Is the `Uri` argument used?
@bartonjs, I think you can remove this and do the `EPS` after the `eps` import.
do we have a problem for doing this?
I think we need a new column in `before_filter`, too.
This is an abstract class that will be removed in this class.
I don't think it's possible to have this check in the context of a feature. It's probably worth mentioning in the current state to make it more obvious that we have it here.
this could be changed to `var implicit = implicitNodes(role).map((roleSelector => implicitSelector + ':not([role])`
Should be `this <schedule>...>`
Is that needed?
What does this test do in terms of testing with a different'" values?
I think this is not needed.
I think the `&` and `||` is unnecessary.
I'm thinking you meant `injecting` rather than `running`. Can you please add `id` to the end of `injecting`? I don't think it's necessary to make the code work as it is used for the other file.
I am not sure how these will work with the `it` folder.
Please add a space after the colon (be careful).
Why is this removed?
Why is `Count > 0` needed?
I think the `resp` could be removed
I don't see why you removed the parameter here?
This is a breaking change.
Should we have here a `.toLowerCase()` check that `searchTerm` has a `default` object?
minor: I think we can use a boolean here to avoid code duplication
I don't understand this change - the previous PR did that. I thought I'd just remove this code as it's no longer the case...
I think this will be a little cleaner, as a user might have more context for this, and I'm not a bad opinion.
Do you want to use spell.getHasParam() from the name?
This test fails for both `rpm` and `rpm` files
I don't know that we want to support this, but I'm not sure how I feel about the `Twelve` in the future. We'll see if we can get rid of the `Twelve years` field as well, so this is a bit confusing.
I'd expect a check for "IsPaused" to be true.
I think we need to be careful about this, but I think we have to say that the only time to cancel is in a non-public type.
Let's not change that since we are in the middle of this test.
nit: newline and after the closing brace.
This was also causing issues with PEP-8 issues.
This will never return a boolean
This should be added for the unit test.
I think this should also be a different type of `Memory` for `resources`?
there is no need of `peek` here
Line is too long. [87/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
This name is not very descriptive (i.e. `initpid` can also be used for some other type)
Can you catch any `null` exception here? I'd like for the error handling as it is, and if that's the case, we can catch only the error (in the `privacySort` method and then throw an exception), instead of just catching the exception.
@erwinmombay @tvalentyn - I think you can probably remove these
This should be a left over and considered considered: * Really the left over in the case where left isn't a validized null (e.g. if left is a `None`) * The left doesn't get removed. The original code wouldn't work for us. In which case, we'd still want to log the error message and not the caller.
Is `cstdlib` still working?
This one has to remain unchanged - the `filter` method doesn't need to be annotated with `OptionalOrElseMethodInvocation`.
I don't think we need to change the `FileData` parameter since the parameter name is the parameter name.
I'm wondering if `sys.version_info` is better here - I think in this case we don't have any `sys.binary_info` - we just do `>= 4` instead of `>3`, because we're already checking `None` in the `sys.binary_info`?
This should be using global variables and not concatenation.
The actual error returned here looks wrong. Why do you need to pass a context and the node which is the same as the node?
Can you explain a bit why this change is needed?
It seems this line needs to be changed to match the other one in the file.
Shouldn't this be the first call to `Dispose`?
Why not use the `sort.Slice` variable instead and then call it once every time we call it?
Is this the default? The default behavior seems to be that it's the default value.
This should be `taskId` since we are not using the `isort` suffix.
this can be `when` if you are using `case` right?
I don't think this should be a tuple. It might actually be a problem, but I'm not sure it is the best option to put this one in a list. In general, we can have a look at it.
I don't think this is the right name, `arguments-out-of-order` is a proper name (in the order).
What does `snackbar` mean here and in similar cases?
Why not the port in the DB and the folly::stringPrintf?
nit: this is not a part of your editor. it should be: `const stubString = (isAccessString())`
What is this file for? I don't think this should be here
Hmm... I'm not sure about this, and I don't think we want to have an implementation detail of this. We do not want to use `metav1` here, and if you're looking for that, I don't think it should be in a way that can be used with `corev1` and `metav1` that I think about.
I don't understand what you are using the "unsafe" part here
why do you need to change this?
(style) line over 80 characters
Please, rename this to `Delete mark denotes.SiteConfig.SiteConfig` for consistency. Also, I think it's not clear to me why these are public but I would recommend to make it `public` for consistency.
This is not related to the PR. Is it possible to log this?
I would prefer the number of functions here, and not the escape.
`Accountable` might also be a good name. I think it should be moved this up to where it's called...
Is it possible to use `str` to store the `unsafe` interface as part of the `str` interface? It might be clearer that we're using this only when we call it from within the `unsafe` interface.
This should be moved to `generate_config` since it is now used above
we should add this `to_all` to `display/absolute/Name`, since it's a bit confusing that it's already present in the column
Should be `s4s2*cos(3x)` instead of `s2*cos(4x)`
I'm not sure if this change is correct. The original code does not do what this function is doing here is a bug. The code in `test_v2_testing.py` which does nothing in our `test_v1_testing.py` which should probably return `None` if the user doesn't specify this error. The `sys_v2` is not a valid option.
why do you need this change?
Why is this needed?
Why did you make this change? It would be nice to have some tests for this.
I think we could also have a default parameter for this. We can add it as a default parameter, which is not a default.
We should change this and not `tenacity>=6.4.0`
Please don't update any of the parameters in these methods.
Please use `@VisibleForTesting` here
We should also set a getProfiles resolver in the getProfiles app. That doesn't work on windows.
The reason for removing the option is that this is not the case anymore.
This test is off, verify the next one :)
Is this going to break metadata?
I think you need to update `delete_settings_unicartMailer` too?
This was a bad merge and is a very minor cleanup
I think we should set this as `undefined` instead of `null` here, but maybe `isinstance` is a more intuitive term?
I assume we have to remove this file.
This should be moved to a feature spec, and it should probably be in a feature PR
>node.store.block_get (node.store.tx_begin_write (), send1->hash () [](start = 111, length = 31) How is that change ok?
We should just keep it `data=` here.
What if the user didn't specify a value on the build?
Why the change to the `repositories video_tutorials` change, and not the `ALL_FEATURES` change?
Can you just do `import pytest` and just do this in a `dvc/python/python.py` file and replace it with `pytest`?
Can you add a description to the docstring?
I don't understand the purpose of `RequestNamespace` - seems more reasonable.
@deads2k I don't understand why this change is needed
This will need to be refactored to `DiscoGapicMethodConfig` as well
This is incorrect.
You're missing a comma here
Should this only be called after the call to `accConnsEventSubjOld`?
Why do this need to be changed?
You're not using this class anymore. You should use it for the `Activequarkus.FrameworkBundle.Component` class.
Why does the mutation have an `is_merge_or_booted` check?
is it worth adding a helper function that checks for the `attr()` call?
It was not possible to use BftTransactions in the constructor, so we can make sure we are not breaking the usage of Bft3Transactions. I assume that we can use Bft3Transactions? The `dpi` here should be enough.
Should we check if the agent is not available? Or is it a separate PR?
This is the only change you made to this file. I don't think there's any need to make a file in the local file here since you have two different files in the same file: - If you want to raise, then it would be fine. - This is just a minor optimization - it can just be a local file in the local file - If the exact exact version is just one in the local file - the file has a different file, and the goal of this PR is to get to a cleanest and then the version should not need to be re-used.
This file is still in a different PR, so I would move this to `tests/models/v1/tests/v1.py` ?
Should this be `twoThirds = validators.Count / 2`? I think we don't need this check, because `is` is just a string that is already a value
Shouldn't we just change it to `com.github.benmanes.caffeine.cache.Cache` and remove all the imports?
I don't think this should be here, the value should already be the default.
I think it would make sense for these to be protected and throw private methods (it would also be clearer that the class name is private)
This is a no-op, because we've already seen something wrong with the older versions of the package.
Line is too long. [91/90]
Should be able to use the `isChildExecutionsInSession` field, instead of the `isChildExecutionsInSession` field.
This will also work for the namespace being being installed.
is this intentional?
why is the config changed ? I don't see it in the commit
I wonder if we should use a more specific `*` package for the package that is available in `lib/tests/test-server.py`?
This is a temporary placeholder, no?
Is this still needed anymore?
Is this change related to the current PR?
This doesn't seem to be related to this issue, but can this be removed?
Can we make the keys not localKey? I'm assuming this is the case, but it feels like a ton of a hard requirement.
Since this is a different bug, I would prefer to keep it as separate commit
Why is this outside the `ifdef`? I don't know, but if we really should use `RSEQ` here this way wouldn't be needed.
Shouldn't it be `goimports`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why was this changed from DatabaseNameKey to DatabaseStatement to DatabaseNames? It seems like there are some whitespace here.
`wait_for_event(dr_app_started, 0)` ? I think this is fine, but I think it's just fine, since we're just trying to move the call of `get_clone_record` before it's set.
We don't have to worry about this, because that's what the `arn` prefix was and what this function is doing, and that's what it's doing.
I'd suggest `disableMetrics` and `disableAddress` here and `disableMetrics` below, but not `index` or even `index`.
shouldn't this be: if resp == nil ? err == nil { err == nil }
Do we need an `mode: client_options[:read]` check here?
I am not sure how the default value should be in the constructor
I think it should be "using LayoutEntry = image_layout_map::ImageSubresourceLayoutMap::LayoutEntry;"
Why did you need this change? The latter is used by other tests.
Is this change related to the PR?
what if we don't pass in `. "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/ "/
I'm not familiar with the code yet, but the tests for the new logic were failing. I'm not sure it's worth it to make sure that the variable name doesn't change.
Shouldn't this have an index on the identity identity, so that it's more explicit about what the user wants, e.g. `ACME`? If the user doesn't specify a string and I would expect an index on a string to specify a struct, and not be familiar with that one so it's more confusing to call it `SelfSignedIssuer`
Is this a typo?
This test was a bit confusing, because the `.docroot` file doesn't actually change the name of the test.
What is the change here ?
Was this moved?
Can't we just use this method in `internal/config.php`? I don't see any usage in this file for this PR, but it seems like this method is used elsewhere.
This should be renamed to `DEFAULT_LongRunningOperationDetailView` as it is not used elsewhere in the class.
Is it really needed?
I'm not sure I care about this one but I wonder if we could use a different approach than an explicit `url`, since we are using the `url` API instead of `nil` for that case and have `nil` as the interface name.
@mattpap this was a leftover from the description.
`$this->allTabs->secondary->icons` is the same as `setTabIcons`?
Why does the `getTranslatedMessage` return `True` if there is a default? I think we want a more specific exception for this case.
I don't see any usages for this class. IMO it should be private?
Is `stackFrame` ever nullable on purpose?
I think `<i>` is not used in the test.
You could do this by using `DISTINCT_step_EAGAIN = 0` in a similar way.
`self._keys()` could be called before `join(...)`.
`+ emulateulateer, e, e)` is unnecessary.
Use the new Ruby 1.9 hash syntax.
This package is not used anywhere. It should be removed.
This is a change in behavior to have a type hints on the UI but I guess it's a good idea to rename these to `NamedTuple`?
Can you add `elif x.spark_column_for(label)` to the code as it is not clear that the code that you're using is a list comprehension.
should this be in `envVar` instead of hard-coding `hostConfig.NetworkMode`?
maybe we need to update the type annotation for the new name?
What does 'line' mean now?
What about `return False`? That way we would only want to run a check for `is_int` and a check for the case when someone is actually doing a check for the `dtype` value and the check for `is_integer` is set.
I think we need to make this more descriptive, like `create_view :licenses`
Please avoid unrelated changes. There are two places where you are using an `master` class.
Is this assert really necessary?
this is now dead code?
You're right, why not make a `ROboard` argument for the second param?
Can you please also update this to the default value?
Is there a reason why we didn't have this check here? We're not testing the data for all the types that work on a network network if the user didn't want to write them in the code. The reason we are not doing so is that if a read-only table, a read-only table should be installed on the network version that doesn't have the actual data, but not the data.
shouldn't the player's `tradePartner` be in this method?
The test in this file is `go get -u github.com/xeipuuv/gojsonschema`
Should be either `add_vendor('NVIDIA ")` or `add_vendor('NVIDIA')` or `add_vendor`
Not your fault but this is a bad merge, and you're changing the order of the arguments. I would not use the global var `get_backend::lang` or `$plugin` variable here, but I think the code should have the same behavior as the last parameter, it is the same as the first parameter.
Can this be changed to use the existing dependency dependency in `api.MustCompile` for this?
We might need to do some feedback about this beforehand so we can move this logic up to before the before_create() check and make sure this method only returns before before making the change.
What happens if the globalRate doesn't have a `Settings.GlobalSamplingRate`? Is it possible to do something similar to this branch?
I think we can use `Program Files && err(x86)` here, not `x86)" ]`.
`menu.append(..)` should be tested
Is there an option to use the metricReaderType here?
Is this needed?
Does something change anything in this file ?
why this is removed?
We should use log4j log4j. You should be able to use it as a log4j instead.
This needs to remain remain unchanged since the value in the `PublicLoadBalancer` has gone away.
I think we should not allow `TestHoodie` here.
Metrics/LineLength: Line is too long. [97/120]
Why does it need to be changed?
Doesn't it need to be `std::unique_lock` ?
`prepareDiscriminatorCriteria(this)` is redundant here, and let's make it final.
Should we also change the DBOpenHelper.DEFAULT_DB_NAME below to DBOpenHelper.DEFAULT_DB_NAME to avoid further conflicts, but the rest of the code looks good. I don't think it's possible you can revert or add another one.
This is just a small optimization.
I wonder if it would make sense for this `+ ";"`, to have only two arguments, i.e. `getLocalPackageName()` and `getformPackageName()` call, but that's a more common pattern of doing it.
Should this be inside the `if self._runNVDA is undefined` block? (Or did it really need to be on top of the file?)
@jridgewell would you like to see if this is the correct place for this to work?
Why are we making this configurable?
Same, missing the space between `,` and `(`.
`--eval` is in the the name, it should be renamed to `--eval_E` (i.e. `--nix-instantiate`)
This might be dead code now, right?
I think we should just delete this and use `warnNodeCreationIPFailure` since it is a bit confusing since we don't have to.
I think we can keep the `stubUsername` annotation, and just have a new `stubUsername` method in the `newingClientRect()`.
The docs don't need to be updated.
Use the new Ruby 1.9 hash syntax.
This is a bad idea, as the only usage of this function is for this method, and the function is only called for each ESP, but is a very specific method, so I would not expect this method to be called here, as the other code is only called for the node and the node is used for each ESP. The above method is used by the node and the node is the only one that can go.
"only" sounds very generic - can we call it something like "only_value"? I think you're missing something, but you probably want to change it for a while (in the future).
@mraible is this going to change the behaviour? I can't find any usage of this method for that, though.
Please remove the `self`
What about `DotNet.Attributes.AspNetCoreBenchmark` ?
This change is not needed as the changes in the file file name already does the check.
Shouldn't this be `for`?
You should be able to catch `Exception` here.
@fowczarek Can you confirm if the last element is the same as theBigBig focus is necessary to prevent the lastsing focus from theBigBig state, or if the oldDom is not the same as the currentBigBig state? Or does the right thing be to do here?
In the `httpProfile.close()` method `obserplib` we are using it for a request instead of creating it as a dependency. We could make it a little cleaner to just check for `httpProfile` if it exists and throw it away (I think)
Do we need that?
Is this value required on all platforms that have been changed?
you don't actually need this loop
Nit: Can you use `const` instead?
Not sure we should remove this, as it's a very minor but it doesn't have a corresponding `true` value. The same for the `if` above.
Can you explain that this is only a legacy thing. Maybe this should be removed. The `OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
Is this used anywhere? Can we add it to all other instances (i.e., `sendCommandForDownloadChromeHeadLess`)? It's a static variable that would cause problems for `sendCommandForDownloadChromeHeadLess` to be used in other places.
`parallel_scheduling_processes`? That's not a boolean, so it is a little bit confusing.
this looks like it is just for clarity
The `none_ok` should not be shown here. The key is still in the first place, and that is why the `v1` option was sent to the current user.
This test is still running.
Why not just use the existing API call?
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
This is a leftover.
shouldn't this be in a controller rather than the `before_action` method?
Why not using `throw new Date(o instanceof Date)` ?
this seems to work for the ternary operator. Can you make sure the code works for both rate and unix?
@matt-gardner Is this a breaking change?
This is now unused, right?
This should be `or modify`.
can you add a `TODO` here?
Metrics/CyclomaticComplexity: Cyclomatic complexity formarker_C++ is too high. [14/6]<br>Metrics/PerceivedComplexity: Perceived complexity formarker_C++ is too high. [14/7]<br>Metrics/PerceivedComplexity: Perceived complexity formarker_C++ is too high. [8/7]
The first condition is actually `destroy`. Is that really what we want?
I think the new `Enable` needs to be re-used. This should be changed to just `Enable or disable starting Nano PoW Server as a child process.\ntype:bool` and then you can just remove the `Enable` part of the `enable`.
why change this?
Why not `metav1`? It is still used by `kube-aggregator`
Should this be moved to a different class, to avoid all the checks?
The `version` is not in `version()`. Also, you should move the `version` above `createConsumer()`.
Why are you calling this with "to PropertyDescriptor"?
We don't actually need this configProto. It is used outside of this scope, so we can move it to a separate place and remove it.
This may be misleading, since you can't use `instanceof `Array.subSequence` for a new String, but `instanceof` is not.
can you please update the `Containerd` config in `config.yml.Address` as well
is this a change from what was there before?
You should use `== null` for `false` here too.
Please use the `getQuantifiedProducts` method
`give-commons` can now be removed
Can you also test with the `shared.subscription.name`?
What does torch.zeros_like do here? Can it break?
I think `LinkerAny` should be removed here.
This was a typo
@stephentoub should we keep this as a separate commit?
Does this change work? I'm pretty sure this is going to run in a test right away, but it might be good to have it here, as it is done elsewhere.
nit: Can we use ` blank` here (and other similar places) to `# noqa`?
this could have been a separate commit
why not using `this.next().length === 1`
Is there a `--verbose` flag, or is that not needed?
I'd rather not create a `ContextContext` instance here (and in other places below).
This is actually required because we don't put the import before we merge
nit: `this.ieService_ = this;`
I would just use `std::unique_ptr`.
I'm pretty sure we should add this import in a lot of places in the repo, and only add it if we use it in the repo. But I also don't like to have it in the repo for the same reason as in the `v1`.
This should be `github.com/spiffe/spire/common/logger`.
This is a little strange. You don't need a new config.
@stephentoub - do you think that if you change the name of this method to reflect the change we'll change all of them at some point? I assume we could just remove the action directly from the component itself?
Please don't remove this, it will cause the problem when you are doing the same thing.
There's no `?:` here
I don't see any reason for removing the `V` part of the `else` case?
Can we keep this around? I'd rather have it be moved to `gotooto` and then `CreateFromXmlString` in line 392.
This is a bug fix.
I think we'll need to remove the `values()` line here
Should we add the new `kubeAPIServerNamedCertsTemplate` to the `pulumi-` package too?
This should be removed as it is not required by the other files
Why not make `config` a private field and use it directly?
Were we not using this API in the public API? I think we should make it a little shorter and add a link to it (e.g. `<custom-elements-es5-adapter.js>`).
I'd be tempted to keep it in a single place since it's the same as the one in the other settings (i.e. use a constant for the `LanczosWindowFunction` class as the name)
@bvanessen This was the only place where we actually use it.
why are those different between `int` and `255.0 * col.b`?
@matt-gardner Is this the right place to do this? I'm wondering if we could use an `int` for this or `dev-count` type?
Avoid comma after the last item of an array.
NIT: can you avoid calling `StringValue><!`?
is this necessary?
This will cause us to see the source address from the source snapshot, not just the link. In case there is a source in `cd.SourceSnapshot` and `cd.Map`?
Why is this line needed?
How about `default` to avoid creating a new array object if the array is empty?
Can we do this only for 1 hour and 1 hour in the same places? (I'm assuming the other places)
why wouldn't `attr_value['string'] is not required as `attr_value['string'] == value` work?
You can use the BaseExportingMetricReader here, instead of creating a new constructor.
Why is this needed? I don't think we already have the `HasExited` in the down gracefully.
Please also add the `IHttpClientFactoryExporterOptions` here and below, to ensure this is not the default.
it is better to keep the text around as this is not only used in the table
This seems like it can be changed to `arg2 = lambda arg2`.
Can `pkey_list_pkey_list_valid` be removed?
you can use `import vanillaWatcher as usual...` as the name of the package
This is the only change that fixes the issue.
Style/IfUnlessModifier: Favor modifier where usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
I'm not sure if this is a good solution. I can live with it.
Is it possible to have it on the other hand (with this) ?
Why the need for this to be `execcmp`?
What are your thoughts on this? Why do we need to change it?
Why is this here? I'm not familiar with the code, but why is this needed to prevent a race condition?
This can be removed now, right?
A few lines above we use in the method `getAllStatuses` method, so that we can avoid the `$status` variable.
It's too much work. It is already a string. I would just rename it to `RECENT_LISTENS_KEY ` and then call it `RECENT_LISTENS_MAX`.
should we do these in a debug message?
The import should be removed.
I'd recommend a more informative name, `Remux` or something like that, and more clearly what `VideoDirect` means.
Noting that `s` was not used. I'd remove this line and add a `... or multiple FILE(s)` before this line.
For some reason, this means `addon_xdevapi` could be empty if `addon_xdevapi` has a default value.
The default value is 5s, so why not make it configurable?
Would it be possible to do this as a method in the future to avoid a "SecurityException" refactoring?
Could you explain what this is for?
Does the type of `signer` need to be removed?
Why not just change the `serializer` check to `!localize? && opts[:localize] != false`?
This import is unused
This is a bug, I don't think you need to escape the function name as it is a string.
Can we also move `when_searching` to `_migrate_bool`?
What happened here? I don't understand why we don't use `encoding` here...
Why are these being added?
@nmittler - Can you change this to `[NotNull]` and make the `StackTraceUsage` return a `#if NETSTANDARD1_0` instead of `#if NETSTANDARD1_5`?
This is really a pattern we need to check for for `MarkHidden` for `a4a-50` as well, but not for the other `validate()`.
Is there a reason to only do this when the node has already been added?
I think we can remove the `Warnf` here.
Line is too long. [85/80]
This would be better to use a `@Nullable`.
I think you should also check for this `_` to be nil.
Can you explain this change?
@chrahunt Does this mean we can remove all tests?
We need to call this `cancelledCh` since we don't have a constant for it. We should probably just call this `env.should_map` to keep the user simple.
I would prefer to get rid of this ` RunOnceTask` and only use `import` in the `lib/__init__.py` file.
Can you also add a space between `using Nethermind.Blockchain;` and the `if`?
@jhipster/developers why not move this to the beginning of the `Date` function as it would simplify the code as it would be a bit easier to grok.
what is this `setup-show` used for?
I'd be inclined to use a `time.Second` variable instead of a `time.count` since it's only used in a single place.
Please use the `case` constant.
We should remove the dependency in the library so we are not breaking existing users.
Why is this reset?
nit: I think using an explicit variable instead of a list
Seems this is a typo, and should be a part of the task instead of a part of the task.
I'd rather you do this as part of this PR, but it makes it easier to read and understand why this is not a separate bug.
We should probably be doing this with `textArea.innerHTML = html` as well.
I'm not sure that we want to expose anything here. If we're already writing out a `force`, it would be good to use something similar as `setUp` and `setUp` instead of `size`, right?
Why not just delete the local variable altogether?
I don't think this is a valid alternative, but it's not necessarily a good idea to have it a unique identifier, so if you want this here would be `where(deactivated_on: nil)` but this would be great to have the logic in a separate `.find_by(rail)` method instead
here I think we need one more more `[str, tag.tag.rstrip]`
Is this new?
why is this changed?
Why did you need to pass the full state as a parameter?
Why can't `GenericTypeArguments` just take a `static`?
I think you forgot to remove this
This is not necessary because `open_for_write` is already defined in `open_unique`.
this doesn't seem strictly correct as `axe.utils.getNodeFromTree(el)` will never be an array and the array doesn't need to be passed through `axe.utils.isHidden`?
Should the `CollectionFactory` be removed from here since it is used for both an enum and a list of overloaded class?
can we add this to the "Eth1L1FeeWalletAddressFlag" and just keep `Eth1L1FeeWalletAddressFlag` to prevent the normal path from being loaded ?
Can we make 5, nil and default to 5?
nit: can you please also update the `LinkedHashMap` to something other than in the `asList` methods?
(minor) I would have preferred to keep all the files in a function that checks for the `drm_interface_atomic` and `drm_interface iface_legacy` for the same name as the other files in the code.
I would just add an explicit check to make sure `maxId` is not set. It's an error, so the value can be correct.
I'd probably use the `# noqa: CMakeLists` here to get the correct key.
I think you are trying to remove these now.
Would it be safer to make this a `TrimSpace`, so that we don't know the user's name?
can you add a try catch?
You need a space after the colon.
This is really specific to the API, can you change the API to be internal?
This is the only change we can fix.
`component` should be `componentend`
Isn't this supposed to be in the DToken name? Can we make it a global property of the DToken name instead?
I'm assuming this is a public API, so I'm wondering if there will be a way for us to have a specific ` configs` implementation to be able to override that in the `DynamoPublish` and `IEnumerable<pdiv>`.
This is the only change needed in this PR as it's in the same file.
Is `artifact_key` guaranteed to be set here? Should this be in a try/catch or in the `pthread_cancel` function?
Shouldn't `Object.getProperty` be updated to match the system property?
This is not correct as `not(textarea)').length` will be `nil` if `textarea is not None`
@rhtyd @rhtyddan @lakap14 Is `5.20` still indeed correct in the past? It seems like it might be worth adding a constant in the future to change the default to `True` and use a constant to avoid having to deal with `None`
This will break all other code paths. The filter has no side effects, so I think we need `goog` here.
Can you add another example of what the expected behavior of this flow is?
This is the same as the other one in `COUNTER`.
I'm curious if we don't have the `span` in this method. Should we be checking the other `span` in it, or does it actually handle the other `span` cases?
why did you remove this?
This should probably be removed.
Why is this needed?
This is the only line that was needed for this PR. I'm guessing it is not needed anymore.
Is it needed?
I'm not sure I like the idea of the effective types, but this file does not seem to be using any kind of types.
@sjenning @tvalentyn - Can you review this change since the changes in this file are intentionally adding `WithTagID` to the `artifact`?
Why are we changing to stages.MapMap here too?
can we make these `Cititbook`s under `Cititbook`? Or add `Citbook` to `Citbook`?
Please remove the whole `T` statement now that the class is created in `PostPostType::util::HTMLHTML`.
I don't really like this approach, so I'm fine with it. But, since this is a very old pattern, I'm not sure if we should be able to change this to use something like `inline.supported(default=True)`.
Why do you need this?
this can also be deleted, right?
I think the previous preference was `T: struct` instead of `T`
nitpick: can you call the other "Long sequenceNumber()" and call the new one `setLong()`
What do you think of just `type`? It seems to be more explicit when you call `int()` instead of `f`?
Can we have an underscore on the Go Go SDK or just the local development?
I think we could also make `serializedDataSize` be the first `isHash` and `uncore` here.
do you need to make any changes in this file?
This file should only be added to the JUnit4 definition, not in the `compileHandler`
Are there any other types of keys that contain `String.Sprintf`?
I'm not sure why we have this here, but it seems like we should be using the `session.rollback()` here - perhaps even better, if it should be a separate function, e.g., `except handles the full CAI temporary store as its an integer and then it would be better to return an error instead?
This seems a little off as it's only used once, right?
This is the change that avoids the change in behavior.
should we remove the `hsh` parameter?
This should only be set to `LocalpresPort` when the number of nodes are enabled.
this argument should be added to the docstring above, it's just about the docstring
This feels like an odd method to do the same thing, e.g. `can_cancel_form_error` that returns null here and then we don't need to check both (but not for the requester) and `can_cancel_form`
@jcotela is this a bug ?
you should use the `apis` constant in `GetCondition`
Is it possible for a new `memory` to be ignored in the future? If it is the only place where this file is created, it will be moved to the `process.element()` file.
Why is this needed?
(Pre-existing) What's the point of this? Is it a common use case for `csv`? If not, can we just have it use `_csv_path`?
I thought you were going to check the null value, not just the first check
It seems there are 2 places for this and one for the `app.SetApptypeSettingsPaths()` and the `incremental` settings file, which will do all the things that might need to be changed in a follow up PR.
this is the same as the one above, does it matter?
Is it correct that we don't have this blows up?
@stephenc Why not just make this `IOException`?
This would be more efficient if we could get these methods from `delete` to `removeShutdownHook`.
Should we use the volume configuration for the struct?
I'm not sure we actually want to do these since we're not going to have to change the type.
Should this include the `sigs.k8s.io/cluster-api-provider-aws/pkg/apis` and the `sigs.k8s.io/cluster-api` package?
I think this test is testing the right thing. We should check if the user doesn't want a custom `test` in the test - but if not that would be the case. We could also check for the new test case here and then check for `my-test-service` above.
shouldnt this be part of `(` ?
Is this needed?
Do we need to check for `Egress` as well?
If `ethash` is the default value then `ethashConfigRoot` will be `null` and `fixeddifficulty` will be `null`
Can we make all the above `Fatalf` functions in this case?
Hmm, this doesn't look like it's being used, right? I think it's used anywhere else, and we'll have an issue to remove it.
Could you add `requireNonNull` to the same as the original method?
@matt-gardner I think this makes sense. What if the "file:/tmp/manfiest.2.avro" already contains the version of the previousSnapshot ?
How about we use an explicit constant for this and a method on channel?
We should probably add these for Google object instead of the field
This should stay as part of the other group of imports.
I assume these tests are testing the right thing?
Is this change only for S3?
This was a race because it's not related to the openvpn side.
I would suggest we don't use a `.isEmpty()` method here.
There is still a typo here
I think `s.Shutdown()` should be fine, since if there is a single-character change it won't be.
What is the goal of the output of the output in the output, here?
I don't like the idea of using `setUp` to avoid this check. The `map[string]s` check should be in the `internal` block.
This seems wrong, I'd recommend using the private private private member variable (in `handleInjectedMouseControl`).
For consistency, please use the same variable name for the variable.
I'd rather this happen, it's more readable than just checking `v`. I can think of a better way to do this in a more general PR.
Why is the `Buffer` necessary?
@benhalpern Do you know why this would be here, since the others use `setJsonParameters`?
I think this test is still needed, not on the next line.
Is there anything other than "failed to update status after refresh" ?
You should not need these tests anymore
this should be a separate pull request.
It seems like this would be better named this `http://testUrl`.
Shouldn't this be `unlock` if `global_lock` is `nil`?
Shouldn't you also use `std::string key` here?
Why add this file?
Since we are removing this from `build-system/common/config.html.erb`, maybe we could also add that to `application/storage/components/before_valid_specs.html.erb`.
If it's already set by the owner, can we rename it as `testCompletionDataSource getDataSource` ?
this method is only called in tests, I believe we need to make sure that all the tests pass, or do the need to wait for a log message. Otherwise you have the `LogWarning` method to be called from there.
Why is the `bv` removed? The `bv` is used below, so I would just change it to `element` (or similarly `test_v`)
Do we still need to reset `mergeOriginalRoleAndMetaRoleAttributes`? Why not just do a `mergeOriginalRoleAndMetaRoleAttributes` directly?
can you add a new rule that this is set to the new one?
This could be set to the time being set before the time left to manager.
Do we still need this?
This import should be removed from the standard library imports.
I think it might be a cleaner idea to move this to a new constant so we don't have to do this when needed.
Did you consider moving this to the other place?
Can `U95S_TO_WINDOW` be set to `null` for this case and then put the value in the `get3c` method, right?
I'm not sure about this - I don't think we want to do anything.
Do we still need this? I assume because it can't just be a `missing-any` but it's really really just a `*`?
This is a test file that's already in use, so I removed it.
Are you sure this is only used by tests? I don't see any tests to run the test suite on Windows.
I'd probably just use the C++ `os.environ`. If it's the only one that gets passed to an array that isn't needed, the C++ code doesn't have to be modified.
I guess this should be `getLocalPlayer().getWorldLocation()` and not `getLocalPlayer().getWorldLocation()`. The null check is not needed, right?
The current implementation of this method is to return an int value from -1. Is that correct?
@smarterclayton do we want to add this here?
I think this is wrong - the first part of the if statement is to be removed and the condition should be after (distributed) { get; } return; }
I'd rather we use `map[string]string` here, and then we have `include.Flush()` on the line below.
I am not familiar with the `copy-groth-params` name -- I feel like it should be a simple simple cache for the second.
Why is this different from the snapshot?
Shouldn't we add a new column for the new column?
Why only for the user who is using the env-var "tidy" check?
I wouldn't do that here, it is a good idea to test that `min_alpha = mix_case ? 1 : 0` isn't an `(string)`, and it is always 0.
`Bytes` was added to get the service's caller as a parameter.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I guess you could just call `options.key?('_description'))` instead of the command `log.info`.
This parameter will return the optional instead of an empty string.
should we just have a default for this?
This will need some extra spaces, right?
what is this for? I don't see it
This is a bit confusing, as the code has been removed when you're doing an exception, but it should be fixed with a different code that uses the current one.
i think these two are already the same as the one above
I think you have to check that all `mono::account representative` and `mono::account representative` have been changed to `wallet->receive_async(block, representative);`
I think `isWP5.0+'` is the right value to put, right?
Isn't this redundant, `listlist(list[0])` is a pointer?
The `(0, 0)` check can be removed here too, because the null check already had the null values and no data would be the case.
nit: `fullResult` or `serializeFunctions`.
Please don't add this to the top of the file. We should add it to this PR
Can we use `fs.create_dist` here so that we don't have to use `path` here?
can `ranged` be `auto_fire`?
Why did this get guarded by ` AllSequenceSequenceSequence`?
`typeof ref=='function` will be null if `value == null` (same for `(typeof ref)`.
Instead of adding an additional conditional here, we should just inline the `if` condition from the string.
this is not right, why not make the group a test? and have it be a test that checks that the example is running
Are there any tests we need to cover that?
I'd like the rest of these to make the code more readable with the rest of the code.
This was a typo. It was my bad
@sjenning this is the only real change in the test file.
This should be `?`, since this is the type of the `@SuppressWarnings("unused")` I'm not sure why?
I'm not sure that's necessary to add this.
is this necessary? this is a test failure
I think we should remove the -1 parameter from the worker here.
missing comma, missing a space between `)` and `{`
Why was it renamed as `0`?
Is this actually needed anymore?
`new Date() + 1` will be more efficient and easier to understand
I know the original implementation is not in the codebase but would it make sense to make this `click_on I18n.t`?
Doesn't this break compatibility with other tests?
I'd prefer `ServiceImpactingChanges` to be the default.
can we make a reference to the old `Source` function and make the new one a little more readable?
I think `GetType` and `Name` can be removed.
Use the new Ruby 1.9 hash syntax.
This is now an error so we can delete it.
Why do we need to load the download object? We only need to do it once when the object doesn't exist.
I don't think there's a better way to avoid this? I think we need to keep it in sync with the rest of the changes in `__init__`
Why not just using the default constructor?
we can also pass in the function directly.
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
I think this is a wrong module
We should be able to use `PortRangeSize` here and use that instead of `utils.Do`
I think the changes in this file are not necessary anymore. Please revert them.
I'm confused because of some of this. It's a bad idea that we should be using `pandas==0.20.0` to avoid confusion.
I'm confused as to why this is a global variable.
can we add a TODO with the `IS_order_id` name?
So now you have already implemented the image and I can't see it being used anywhere in the code?
I believe you can just put `scheduleIpHostResolving` into the constructor.
`Serialize` method does not need to be public - it's only called from once.
Please use `TranslationAdapter` instead.
This change is not necessary. It does not seem to be related to this change.
This should be `List.of(String -> columns)`
should be nullable
this was a bug, we're trying to get all the stuff from the previous one.
is the scope here still needed?
I think you can just remove this completely completely, since they are already in the `else` branch.
This needs to be `from applications.Duration`.
@zcbenz are these changes still needed?
This could go to `go-cmp`, but I don't think we want to use `gogo` in this package.
I don't think we need to hold the buffer atlease here, the buffer might still be useful.
Redundant return detected.
What's the reason to remove this?
You don't need the `.with(0)`, you can just use `.any(0)`.
We can get rid of this.
Import packages with wildcard is not recommended.
Is the `MystVpnSessionId` not the same as the `Where do you call this?
can we name it `BucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucketBucket
Can we just use `data` here? This would avoid the NPE in this case.
I think I'd prefer a more informative test to catch all the time and test for the "returnsils sorted by their topic's name" case.
Please add a docstrings to verify that the username contains the wrong location.
I guess we should move all errors to a new folder so that they are available before the switch? We would also want to be able to move to a separate directory (and we will have the option to be available before we have `require_once __DIR__ . '/Psalm/Internal/exception_handler.php';`).
This is a bug as it is already handled elsewhere, so no need to change this
Remove empty line
I'm not sure why we are using this. It's not necessary for this, but I think it would be a good idea to do this as a user-defined check in the default state.
This needs to be added in the WLR config as well.
I'd rather we pass the whole thing to the `packages` and `packages.Extension` on both methods.
I think this is not needed anymore.
this was the bug in the core, right?
This seems to be the only change that affects the rest of the file.
I have no opinion on the `Dependencies` here because `i.ch.Dependencies` also uses this.
These should be removed, since they are all in a different file.
What do you think about using `cancel` instead of `delay` since it's the default?
Could this cause any issue?
Msmq is already an object, so you can remove this line.
I think this code should be re-used with the `InvalidRequest` above, since the `Client` method below will only return a `req`.
this doesn't seem very helpful to me - it is for testing
Why not just have `CachedUser` and `BatchActionEndedEvent` as the `User` and `BatchAction` here?
The commit message should mention something like "getPackageFactory is used".
Wouldn't these `INFO` be better?
this seems to be dead code
this could go above the group's `log-api` group, and have `log-api` set the `log-api` value in the group, then you don't need to use `log-api`.
I think the logic for this is that if a failure failure is not set, that should be fixed.
Is this necessary?
I think this is only necessary to get the log from the `Info` case
I think it's better to put this in the middle of the `errorPrefix` and `errorPrefix` for consistency with other users.
So we are not testing the file requests?
if code is CodeOK then this will return nil.
@cherrywrightb6 I would suggest removing "up" from the name of the variable, as we are not doing any validation.
This is also used by `timeout()`. Can we use the `timeout()` parameter here?
I guess that's the right approach...
I think it would be more consistent if we called `caddy.LogDestination`, then you don't need to configure `caddy.LogDestination` to be used.
This is a bit of a problem, but is `__ } from src/lodash` not a name of the JS object? I mean, it's `logging.go` and `logging.go`.
Can't this be merged with the above two lines?
@mjkkirschner @mitchellhenke should this have a `PlatformNotSupported<T>::IsValueType>`?
Why don't we have this just an enum value?
Do we need to check that it's an empty string? (I know this is not true, but it's not a real problem, but it seems to me that this is the "VUID-VkDescriptorUpdateUpdateTemplateCreateInfo" part of the type checking checking is a bit of an "VUID-VkDescriptorUpdateTemplateCreateInfo", since it does not make sense to handle it there for a bug in the user's new code?)
I think this one can just be removed?
This is a copy of the `search_path`. You could just use the `libkb.open_aire.api_base_url` variable and use that instead.
could you use the `routing` here, it is the `typed` that will be executed for the SSP package?
I think we should remove this too.
Why are these added here?
This import is unused.
@lolivier should we remove these? I would have expected us to remove these.
I'm not sure if we should import it in `render_hash_start`? Or is it because it will be handled in `spite.storage.render`?
This one also needs to be updated too
Please use the same constant for both these fields and the same for the other pages
This should go before the list of 9
This is a very minor cleanup. It looks like we should be checking if there are no places in the code that we could clean up this line.
could not connect to peer from kademlia %s: %v
This should be just set to 0 (in the case that the date isn't empty) or is the correct timestamp.
This is not really an error but I think it is a better idea to test.
Please add `@ps` to the interface.
Please, add `,` and `,`
Why does this need a debug flag?
I'm pretty sure this is a good change.
why do you need to pass the pointer to the constructor? does this break any existing logic?
Code Climate says this is not tested.
I think there might be a bug here, in case the supplier's `Task#finest` was not handled and `Using delegate supplier` is not handled. Maybe we could remove the `LOGGER` in the `if` and remove the `LOGGER` clause? (I know it's a bit of code and it's easier to reason about.)
This is not needed. `getHost`, `getPort`, and `getPortPort`.
Is it possible to import the file here?
Is there a test here that checks the result? (or perhaps `AccountActorCodeCid` should be enough?)
if you're making sure you don't have to change these (and you're changing them), you can use `* 10000` for the `currentTime` instead.
I'm not sure this is correct. The `@check_disp != os_tls_offset((ushort)TLS_DCONTEXT_SLOT)` check_disp should already have a `ushort` check, so no need for the the `unsafe` check here.
this is a very common place, and I can't see where is the `getInfo()` called?
@dtrrot @kroitor do you know why this is necessary?
Is it possible to have a `render` method for this? If so, we may have to implement it as a separate feature to avoid adding more code, like `render-to-print` and `render-to-vers`
(Optional[Union[float,int]]): The execution duration (in seconds) of the dbt node (model). AFAIK, this renders as is more of an intuitive way to handle things like `execution_time (Union[float,int]).`
What is the purpose of the `DIRECTORY` variable?
should this be the previous method?
should be debug (not debug).
This seems like a change in behavior, is it ok that the `com.yahoo.athenz.zts.cert` is not an `ful.rdl`?
why change this?
This was the wrong method
Should be `TestCase.assertEqual(Object.getPrototypeOf(object))` as well?
This is not right, we can change the function from `schema.h`. The function returns `false` if `const size_t`
Why do you need to change this?
I think the previous name was more readable. I can do something like: `pkg/resource/by_container.go`
Can we just delete the `||` entirely? The logic seems to me the same as the original `||`
I'd use `getattr(gpointer)` from the interface.
Should we use tableMap here?
@kargakis this was the bug that was doing before
What is the idea of having both the whole function and the pylint flag?
This was the one that was fixed before.
Line is too long. [87/80]
This import can be removed.
The same here, we may want to change the `file_client_args` key.
I don't think this should be changed to `"%`
I'm not sure we want to use any of these to be used for other modules, but I think this is the only way we can include them as well. It makes more sense if you include them as all of them are needed.
This was the only caller of this.
Why do you need this?
I think this `stop` method is unnecessary
Why is this needed?
Is this a typo? `Input`
This looks like a regression.
Nitpick: `numImagesToDeletePerCycleEnvVal` might be a better name, since it's more common for the users to know it's not an integer.
I think we could also add an early set here as a new property to the top of each of these.
What do you think about putting this into its own `json:"owner_uid,omitempty"`? It will be more efficient to create a new object object which has already been implemented in the `Rootless` module. Also, if the cgroup manager can be started with the actual request, we can add an `json:"owner_uid,omitempty"` in the `Rootless` function.
@hackaugusto you can replace all your your tests with the new `TryTryDependenciesInstrumentationInjectsHeadersAsync`
This method name is not really really helpful. Can you change it in `testNew`? I think it makes sense to keep it in `testNew` (which is what we use in two places).
I'd rather use the new `Mel` prefix here.
I don't see why we are not using this.
Why did we set this?
why does the current year have a `tm_year` instance variable?
This is also a part of Mushroom so this should be removed.
Should be added to the variable declaration, too.
Why is this necessary?
I'm wondering about the `abort` function here. I am not sure why the `abort` function is being used for this, and that was there already.
Is there a reason this is just a test that doesn't test what we expect ? (Also, if I'm not wrong, then I would expect this to be a test).
I would have made the test pass. But if the test fails the test will fail for this test.
I don't think we need this `Warning.Println`
I'd like to see a test case for `test-log` to make sure that these are different from the other places.
This is going to result in an infinite loop with the variable name `useQueryQueryMatches` but not `useQueryQueryMatches`. I don't think it's correct, but it's really just `true` because it's a boolean.
is this used anywhere?
Let's add `import { __ } from '@wordpress/i18n';` as well, and not have a description of what is the best way to do it.
Why was this removed?
Seems like there should be another commit message that will be updated in this PR
Why is this removed?
you can't do this. You're passing `checkExprDepth` to the `checkExprType` function. You should just check that it does `checkExprExprType(filter)`
this is an unrelated change
I'd recommend moving this over to be package-private since it was just for the future.
I think we should remove `this.props.getPlugin` altogether and use the `showEditFile` directly in the `register-capture` package. I think the `this.props.getPlugin` should be in favor of the `setUp` method.
I'd suggest to keep this method here, as the second argument is not called. I don't think this will work, either: * it's an `AbstractRInfoInfo<string>`. * it's an `AbstractRInfoInfo<string>?>?`
somesome indentation in this line would be nice.
Is this a debugging leftover?
I belive the `)`, so the `.Request()` and `.start()` don't have that.
Please use `OperationGenerator` instead.
why remove this annotation?
Is this intentional or was it intentional?
I think the test is failing on windows because of the previous line?
Why did you change this? It is already in the `if (:` below.
This is going to be a breaking change. I don't think we can add it here because it will be a breaking change in the future.
I'd use a `time_range` as the parameter instead. This parameter refers to the description of the time_range, which means that 15 days will be searched.
I'm not sure we need this here - if we have already defined `SYSLOG_preserve_zmm_caller_saved` and `dynamo_preserve_zmm_caller_saved` to be defined in the `zmm_3.x` file, I wonder if it is worth to just check the user-specified and do this on the `zmm_3.x` file?
"as if the user didn't specify the routes, they can not be used"
Hm... I was wondering what the problem is...
@normanmaurer - Is there a way to make the `ZMSImpl` take precedence over `ZMSImplFactory.getZmsInstance()`, so this method will still return null when you have the `MetricMetric` instance?
I think we should keep this line as `execute.as.user`
This change looks to be in a PR. I'll revert if you can remove it or if you have some kind of issue.
Should we use an `@Nullable` annotation?
I think we should also update these to `if len(errs) > 0`.
Why are these #ifdef?
I don't think this should be moved to `recoverutil`.
This should be changed to "pid_file, "pids/nebula-graphd.pid"
I'd rather avoid this change here, but just thinking out loud: we can probably remove the 64 check altogether now, and make it clear in the next PR.
This is not related to this PR, but it might be good to import it as it is a part of the codebase and then import `import` from the `import`. You can import directly from `Init`.
I would add an assertion to the TLF in here, because if it's public then this will never be false right?
Please add docstrings for this and `git blame` to maintain compatibility.
nit: this is a good idea to avoid duplicating `_model` when it's needed in a bunch of places.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I don't think that you need to do this, it seems like `#endif DEBUG` is not used anymore.
In this case it might be appropriate to change to `props.defaultValue != null`.
The WordPress dependencies dependencies are no longer used?
Please don't include new features in the list for the new ones
I am not sure about this one. Is it something we can do in a separate PR?
Why the change?
Why remove this code?
Should we make `BeforeQuery` public?
I'd probably prefer not to have this on a separate line for now.
Why is `Message` not `final`?
`p.mu.Lock()` can't be called here.
Why addSubscriber? I think we can have more context in the future
@matt-gardner Is this an error or is it a bug?
`cd.Status == corev1.ConditionUnknown` is the default value for the second condition. It's the same as `if cond != nil`. `!is nil` check is redundant.
Is this needed?
`assert str(excinfo.value) == ("Zero_count Argument")` ?
This seems like a mistake to me
Please rename this back to `AddonsExtraParams`
I'm wondering whether we should keep `Expect(defaultProfile.Spec.Egress)` around as we're still going to have to change the default profile to only the new one.
Will `rspec` always be non-null?
The `<` is not needed here.
I assume the test case was failing because there wasn't enough tests passing?
This will fail in an async SDK, since you're in the "failed to ensure it exists" before calling `scope.MachineStatus.InstanceState`
Can we use a `change[1]` instead of the `isfixed`?
I assume these two options are optional, and it will be removed in a different PR.
This is still not correct. We want to make sure that `app/apis/meta/v1` is not a part of the API package.
We already have `func (i *Initializer) prepareHostNetworkFlows()` function. Isn't that the only place this function can return `false`?
This should be `^io\\.usethesource`
@sparrowDom Just a thought. I think we should do something simple like "wireguard.cali" instead of "is"
why is `Failure: false` needed? why change it?
Why was this removed?
You can use `format_address` here instead, to avoid checking for `human.format_address` directly.
I think I need to use `record.format(obj)` here.
Please use `@@additional_pkgs`
We could simplify this to `if (validXIteration(taskIndex_from_TaskIndex(TaskIndex)) && INVALID_PLUGIN_ID != null)`, and use `if (validXXIteration(taskIndex_from_TaskIndex(TaskIndex)) return (validXIteration(taskIndex_from_TaskIndex(TaskIndex))`. It's a bit confusing since the `pluginID_t` and `if(validXIteration(taskIndex))` is the source of the taskPluginID.
Why would you want to check that the query was set before setting the offset?
Why was this moved?
I don't understand why we're not just catching exceptions here.
This is the only change that changes behavior. Was there some reason for this change?
This is the only real change I thought we were doing to remove all `IsNotExist` calls from `IsNotExist`, and there was an opinion that I added them. Is that a safe change?
This function returns a asp object. Why do we need both?
I guess the previous fix was to change "circuitBreaker" to "memoryCircuitBreakerEnabled" to "isCpuCircuitBreakerEnabled".
Is it possible for these to be deprecated?
should it be `t('blacklight.application_name', locale: I18n.default_locale)` ?
What's the rationale for removing the category icon? Why do we need to add a new enum?
can you move this into the `if errors.Cause(err) != context.Canceled`?
Is there a case where this code was running at the point? Shouldn't the previous line be in the same order as well?
This will break if the length is empty (as it is empty) but the return value will be `null`.
I think we could add a link to the `data-network` package as a name, e.g., `data-network-types`. It will be a little more obvious that the user specifies `@:0`, but they are both the same.
Do we need to call close here?
We can remove `AddHeaderTags` here and do `HttpContextHelpers.AddHeaderTagsFromHttpResponse(httpContext, scope);` directly in the `escQueueTags` function and call it here
This still needs to be deleted.
> refit_leaves_time [](start = 16, length = 4) Why do we have it in the config object?
Thanks! It was not clear from me why we are adding to the `strings` command here, but it seems like it would have been a bit more readable before.
This is now an unnecessary change.
I'm not sure if these should be static?
Does this mean that you can't use `sources('r'l')`?
All call sites will be updated to use the global "sdktrace" for the new app, and I think they have the actual "sdk/resource" for the new app
@dmitsh do you know why we are removing this?
I'd move this above the `ifdef UNIX` above, so that it won't be removed.
Hmm, this is an unrelated change I'm not seeing. If I don't see it in the code, I think it's a good idea to make these tests pass.
this is wrong. I don't think we need to change this to an expectation that the message is not the root of the expression.
This is an interesting thing. In my mind I just noticed I had to add a `common.rb` as an `nil` (or `err != nil`) so I added this to the end of the list.
I'm thinking that I should keep the behavior of the `EnableTopAccountsReporting` method as part of this change - that is why we don't support it. We could probably just use the `EnableTopAccountsReporting` method in `BuildManager`. Thoughts?
Can this use `boolean` instead? It doesn't look to be used any more since it is already used by `TaskProcessor`, right?
This is not a good place for the old error message. The new error message will fail if the error output is not present.
I think you can also add this type of implementation in `pkg/package`
maybe we should add a `pipelineIndex` in the `if` block to make it easier to see?
Remove these spaces.
Maybe add a `isinstance` check there? Or do we want to do this more or less?
Why do we need a context here? Seems like if the node has a different network, the node has a different network. I would like if we could remove this method and just call `context.Context` on its own instead of calling `context.Context`.
Why is `Account` a 8? Do we need to implement `Account`?
I think `get` and `p` can be removed
I don't understand why the error is being logged here as we are using it in the error log.
`== NULL` ?
I think we can also change this to the `--tag TAG` or `--tag count`
These will be removed after running a bunch of tests.
Not sure about the change. If this is really necessary, you could remove the `!isset($options['multiple']) && isset($metadata['associationType'] & ClassMetadata::TO_MANY)`
I don't think that these are needed anymore since we are already passing the entire configuration.
Shouldn't this be `allUsers`?
Can we add `verbose` here, or `append` in `pip install`?
I'm just thinking if this is correct for the next page, but the new one seems more correct for the `logging` value (which is used by `log_events`) so you can just do `logging = 'logging' => 'logging'` and then you wouldn't have to pass a `logging` value in.
This check can be removed.
Why do we need a map?
isn't this redundant now that we have it in the UI?
Why are we not passing the `StreamMapping` to this method?
Do we need this method now that it's only used in one place, or are we making it a helper?
Use the new Ruby 1.9 hash syntax.
We can probably just use `# + demonstrates how` here.
This isn't an issue, but the TODO is to use the `FUNC3`.
rename toscheduled_for_cancellation_on
I am pretty sure this is a bad idea. It seems like it is a bit of overkill. Can we just remove the `ClearSuccessors()` call in the `root()` and the `ClearSuccessors()` call? We can just do this at the end of the logic, as that is, if we don't want to change all of the existing code it's not supposed to happen.
This is a change in behavior. The same here. The only reason I'm not expecting this was to work is that we're removing a copy.
We should probably do a `try: to wait for a very large version of 0.12.6 or bokeh_version` so we know we are not doing it yet
Isn't this now going to have a problem with the word `*List`? I'm pretty sure that the `l` and `l/` are never empty, so this is a problem and not really an issue with this.
I think this should be done in a loop so we can remove the code that uses `logrus.Infof` and do the same thing for both.
Here you're removing the `scheduled_end_time` parameter.
I think we should remove this and just do `@setup.profiler` everywhere else now
This was just to make sure that the flag is also removed after the flag is removed.
Should we still have the `TestBase` package?
I think I missed this part, the change here was not correct, you're not actually removing the parameter. Is the original code correct?
Can we use either one or the other for those that do not need to be public?
Is the idea here that `value` is not in the list of the `newMergedCell` object? I think it would be better to add a `try` statement.
This is a change in behavior, but we can't change it to `0`, so it is more correct here.
I'm not sure why this import is needed, this import should be removed.
This is the only change IEnumerable fix. You are doing that for all tests. It is not possible to run into a `IEnumerable` and then just ignore it. Also, I don't see that we are using anything that is not used in the test.
Why are you removing the `navbar-search navbar-light bg-light` page? I can't think of anything missing with this PR.
Doesn't this need an extra check for the connection endpoint and then `isLocalhost` returns a false positive?
I would just make this `== null`, and add a `!= null` check.
What's the reasoning behind noting the `issubset`? That way it is clearer to only have the same `or` and `issubset`.
<msg> This is a change in a test class, which means it can never be used, right?
I would keep the previous version as it was. This change is just for testing purposes, not very.
this is a bit unusual, can you please check for other instances of `std::cerr` that is used to check the string and then use that here and in other places?
I don't think this is the right approach. The only reason you did this is that `http_object()` is not called, so the `return AST_FATAL` is never `null`. I think the `if` is not required here.
nit: move it to the top of the file.
This change seems unrelated. Why is this in `posit/data.xml`? It seems to me it's a bit more likely to be in `posit/data.xml`, which seems to me like we're making this change in the `posit/data.xml` file. Is it intentional?
Is this a typo?
this is a very weird thing to do
The word "super" doesn't seem to be used in this context.
Why does this need to be public? Is it a specific implementation detail?
I would prefer if it can be a part of the `func` statement in `goimports`.
Please rename these to something like `functional` or something. `functional` sounds a little bit strange.
just to be sure, why are these `GetOrWithoutNew`? I think we should probably get rid of this one.
This seems to be more explicit. I would suggest `syncset pause` and `syncsetPauseAnnotation` (which I think makes sense in the code as it makes a different thing).
Can this be `if c.options.Filepath == ""`?
This is a little odd. We only have the scope for the `init_weights` method. Can we instead use `BaseDenseHead` here?
I don't like this change. This is just a suggestion.
What if we changed these to use `LOG.finest` instead of the same function?
I think this should be `skips PDF manual when LaTeX is disabled'`
Add file header
I would recommend not using the test.
I'm not familiar with the code base but I'm wondering if we need a test to ensure the Node IP is not a lot better.
I'm not a big fan of changing this name - it's not used in the code.
Did this test fail before? I'm not sure the test would pass. Is it really necessary to pass the default of 3.000 to the test ?
Can we move this to the core? We should keep it for now. I'm guessing `--no-no-dev` is not used anymore for anyone using it.
Do we need this in the response header?
I don't get how this `*this` can be used, since `auto` is the same in all of our mdb_put code.
I think it's still better to use the start of the blocks.
This is a no-op, but we still want to keep it. We do not have it in our code base, as it's only used by print-function for the whole file, so you don't have to make it in this file.
I don't know if I can do this but if we do want to add it, I'd suggest to add something like `<padding> 0` (or even add it to the end of the method)
I don't think this should be a public API, so it doesn't look like it would be used in any way.
Please remove the TODO (and below).
This was a duplicate of the previous `/exec` in the wrong place...
Please use pydoc.py instead of hardcoding pydoc.py in tests.
We should only include the modules used in these files, right?
We should avoid changing these to use the logger factory. I wouldn't expect that they are only relevant to the logger but not to know.
Is this change needed now?
I'm not sure this is needed since it's only used to have two methods on a `Base` and `Base`.
I think we want to be able to get the wrong error message. I think it is better to use the error message instead, and check the error instead.
`options.headers` is not used, right?
I think this `if` statement should be removed, right? (here and elsewhere)
Why not use the `//` tag here?
I'm a little confused about `shape` here, since it isn't used anywhere, I'd be tempted to just remove it altogether, but just inline it.
please don't import six here
I'd use the `pathExpressions` property here. We already have `path_defined(...)` which does the right thing to do with the default case.
I don't have a strong opinion either.
We could change `Converter` to `Converter()}`.
Nit: this feels a bit like a hack to me, and I would have named it `id BlockID`.
We could add a `.add("is_published", this.releaseOrCreateDate).debugDate()` ?
I think we should keep this here.
I would put this block under the if statement. This way the line above will be removed later.
Can we use a `timeSrc` type here?
I think we can remove this.
This would allow us to change the API from `fileCharacteristics` to `ID0` instead of `internal`...?
On second thought, would it be possible to avoid doing this in a function like other than 1 place?
I think we should be using this check to avoid the cost of user facing message. It seems that the message should be "UnprotectedTransactionsAllowed" instead of "UnprotectedTransactionsAllowed"
The `private` is not needed anymore, since it is the same as the use case.
Same here. You should have a separate constructor which is not needed.
This is an API of type annotation.
I'm assuming this class is used and can be removed
This seems to be more of a debug line.
I wonder if we want to use listiff or listiff to use more meaningful name? Maybe `string.copy()`?
Same here, there are 5 bytes in 20 bytes.
Why did you add the new version when you have to update the #ifdef?
@atm-quentin it's ok that you have to put the `many` check inside the conditional, but it's just `attribution`.
I'd like to see a more specific message here for the `Joining namespace` value. The `Joined` is the same. What I'm missing in theory.
I'm not sure I follow on the `invert` part here.
Is `emojiRegexText` no longer used?
I assume this is just making sure this was intentionally not a copy of the previous behavior.
This is probably an improvement as I was hoping we could change the code to do something like `ApplicationConfig.get("azkaban") + "azkaban", "azkaban" + "azkaban", "expireCond, expireCond, "(ApplicationConfig.get("ApplicationConfig.getConfig.getConfig.getConfig", "azkaban", triggerCond, expireCond, "azkaban" + configuring");`
This needs to be changed to `<%` if the `gowire` contains the wire name and the `gowire` contains the `\n` part.
I would suggest to have two separate test cases: "ProposeDeal, this test is not yet set by default".
Why do we have to make it more explicit here?
I guess this class should be moved into Xunit class.
This import is unused and will fix the test.
Are we sure this will still work in windows? Can we just add `name: ...` here and pass a parameter?
> EIPbeta [](start = 29, length = 6) nit: I would prefer we put the original 'name' in the 'value' method.
Why not set the value of "check-streaming"?
If a function is called `headingLength < paragraphLength / 2`, would it make more sense to call this `headingLength`?
Do we want to make this a separate task? If we're adding an API to all of the code, we probably need to add these configs to the code, as it makes it clear that it's not available to the user.
@Pearl1594 is it possible to use a different variable name (or similar?) to where the caller could use `onStartSendRequest`?
Could you add the same same logic as line 186?
@wido I think this will need to be changed to `Collections.emptyList()` and then we can just use `Collections.emptyList()`. Otherwise, we won't ever see `Collections.emptyList()` anymore.
Can't we use the `k` at the end of the `CreateSamplerYcbcbcbConversion` above?
there might be some issues with this change. I think you should check if there is only one app.SiteStatus() is set.
this is not a valid test, it needs to be fixed.
We should only be removing the import of `stats`. The `dto` is a bit inconsistent. A `krained` will be used as a dependency to get the same value for `stats` and `krained_dto`.
Just to clarify: Why does the `s-worker-0` have any effect here? We're just testing the number of bytes that are not relevant to the number of bytes, and the data is still in the schema.
Is it really worth adding an extra todo that the user can not specify the current user?
Please change this to use `assertThrows`
I am a bit concerned about how this works, but I think it would be cleaner to just use `database.configDB()` instead of using the `config` value for the `config` value. I'm not sure if it makes sense to add the name as a variable in the API, and have `database.config` as a parameter.
This is a no-op, but `g.Entries` is the same as `g.Entries` in the base class.
I think I'd prefer not to include the #ifdef. It can be combined into a single if statement.
this should probably return the whole struct as well (or not just a copy of it).
Is it the same as `test`? Or did it really need it in some other test run?
Nit: This is a change from `this.workspace__.scale` to `this.get_Cctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctct
Please use the constant from normal packages (like package-private)
This should use the `getFormatBundle()` interface for the new type
I'm not sure we need to change this? It is already in the `value` case.
I'd use the `parser` field here too, not to use our own `const` one (the one used by `const`)
How about using `underlayer`?
Why not just `return new $factory($factory) ? new $factory($factory($container, Translator::class)); : new $factory($factory, Translator::class);`
I'd suggest not creating an enum for the migration, like the other migration methods, as it makes me wonder if a more consistent way to do it would be to just call `test_veck_mysql_to_mysql_for_mysql_in_mysql` (or something like `check_mysql_to_mysql_with_visible?`).
I think it would be better to add an enum here to make it clear this is not a big thing but the user might not have a big performance issue (and I don't see any code using it).
shouldn't be removed
Why the change to `instanceof` here?
I'm not sure what this change is about, we shouldn't have an `TaskTask` interface anymore.
(style) code indent should use tabs where possible
In this case we don't need to call `commandBuffer` anymore.
Please also use os.path.join
This can use our same helper function as the one used by `std::than` in this file.
Block body expression is on the same line as the block start.
Huh so why not just inline the whole function?
I think this change and the one below are actually incorrect.
What about the other types? I'm wondering if it would be better to move them to some files and have it be used in this package
Why does this need to be indented to the previous line?
I believe you can just put the struct here.
Why not use the variable in the other strings?
Is there an issue for this?
@smarterclayton should we add a new line in line with this new line?
What if currentTime is null? Shouldn't be `if currentTime != lastTime.Timestamp || currentTime == lastTime.CheckTimestamp`
can we make this version 0? I don't see where it works.
do we need to change the signature of this function? if yes, please revert
You've lost the `Lookup` here. We can use `close` instead.
Is this change needed ?
I think you should add the extra `#` in in the commit message
`CheckForReady(x))` (same below).
Same here, `volume` is not needed.
Why not make make it explicit?
Is this change related to the issue?
I would prefer to keep the name of the module, e.g., `utils.py ` for resource_util`. It's more clear what that is, but what the name is is `Gcp_type` (the location of a resource/util)
I think the description here will be more readable.
Can we just return `PENDING`?
I'm not sure if this is necessary. I'm surprised the `== 0` check was there.
I am not a fan of the name of this variable since it's not very descriptive.
I'd rather see an `TestCase` function that is being called. It is also possible that `probeSvr` can be an `TestCase` but is never used, since it will always be called.
We don't need to wait for `ful dbc` to be called when `ful dbc` is not `nil`.
This could be `response.Message` and the method `ZeroAddress`
I am not sure why this change is needed.
Is there a reason for doing the `marshal`? (I'm not sure the "NABoolean GroupByAggNodeAdded" is more "reliable" I guess?) I would prefer it be the more "just make the initial implementation more clear.
I don't think you should remove this. The `getNamer()` method can be used for the "is" client.
We should also remove the tab in the config (and change the other options in this file as well).
Why do we need to do this on `klog.V` directly?
nit: move to line 8.
why is this made no sense to return `false` here?
Can you remove the `skip` and test if necessary ?
Let's just call this `Meta` for consistency? This is really dangerous to me.
This is not needed anymore
This change is not needed since the `err` variable already has the error.
Maybe name it "config" to match the name, to match "config"?
here is probably a good idea for `and ...` to be on the path of settings file
@lunny, any particular reason to not use an external container here, if the container has been marked as specific?
Why are we changing this? The `get_yaml` key is only used for the `model` key, right?
I think we should add an `try` statement here. The `try` block is already quite expensive to have to check this.
I wonder if `errs()` is the default?
Do you have a test for this?
Why did this change?
Is there a reason we wouldn't just initialize these two lists?
This is the only change that makes sense for this bug. We should at least move it back to the beginning of the file.
I think this should be just `args` since we have an `else` statement on the previous line.
We can also check that `out == nil`
Should we just delete this?
This is not a correct change
Shouldn't we add a `api.go` import for this?
Should we make this a new constant and set it in the other places?
Why do we need to add a new property as well? Can the field be moved inside of the base class?
I am not sure how this could happen.
I'm a little confused, why don't we check for the name of the `36_data.name_id` here instead of making it `36_data.name_id`?
I think I'd prefer to have this in a separate function for `add_task_to_fpga_result`, but that's the only thing that is a bit more generic.
This include should be in the group right under `Profile.hpp`.
You should be able to remove this `need_unmap` option as well.
I'm not sure how I feel about this - it looks like we should just change the `shared` package to be the other way around, and have an option for `Removed` to be the same.
I'd like to make this a separate PR.
Why not `h.Dispenser.Dispenser`?
I think the test is failing on line 153 above, this was causing the problem.
This test class does not appear to be testing the correct class
Please do not use `isNullOrEmpty`.
We're using ` Available` instead of `Total` here and below.
This seems like it should be `type .js.js`
I don't understand why you are changing the default behavior here?
What if there is no `if len(check_commands) > 0`?
I think it is a good idea to have a separate method to test if full_backtrace is a no-op in the future
Please revert this change.
I guess we don't need to import from `spack versions`, it's already imported from `spack install`.
We should also add `!Result.BaseTracer.GetBase` here.
Would it be possible to add `import astroid.const;` to the top of this class?
nit: can we call this `CustomCustomCustomCustomValue`
The whole point of this function is that you can set the whole point of the function `LocalL_row_count`, which is more efficient, I think that you could pass the whole reference as a parameter, like you do below.
Should not use output_add_notify() here.
Let's not add these to the docstrings. They're not really used anymore.
Why is there an `int` change here?
is it not a good idea?
This is a breaking change to the interface. The function has to be renamed to `isIndiscovered` which is the only method I suppose.
Is this "URL of my.mysterium.network API" in the global name?
This can be combined into a single call.
Why do we need to make this internal?
Are we actually using a module-level constant somewhere? If so, should we do this before `from .models import ...`?
`schema.getTable('ColumnPath', TQ, ...')` is more appropriate.
Would it be possible to make this a local variable in `time` as well?
I don't get this code. The `map` method returns a list, and we can only return a string once, so the function name is not necessary.
Is this going to get a "null type" error?
Can you also update the test to include the manifest in a testing check?
This is also needed to check if the `validation` value is None (e.g. `Input is type %s, expected datetime. Value: %s`)
I would not add a field to the `KUBERNETES` field, since it's not really specific and it is a public API for the future.
Not sure why this is here.
Is there a possibility that the `WebHeight` is a `Joined`?
I think these changes are unrelated to the PR. Just a suggestion: do you have any idea what is being done elsewhere?
I think this will change the result of a "not class_agnostic" for consistency, as we already have `copy()`. I also think we need to do something similar for other cases in this file.
Can these be deleted?
Why do we need to pass the enum directly to the enum directly?
I think it would make sense to change the default here to not have any effect for the `@previous_document` tag.
This is the same thing as in `build_paths` right?
Should be `package_REGARG`.
I'm not sure about these changes, they shouldn't be included in your editor, they should also be included in the `title` hash.
Line is too long. [82/80]
We can remove these from the docs, they are already in the same struct.
Please add a line break before the import to avoid import warnings.
We could just remove debug logs and keep the debug logs as it will not be re-enabled if debug logs are enabled.
why do we need a `spi` call here and in the other cases, why not just use a `logrus`?
Is there a chance the data value will be 0?
I think this part should be part of your next pull request, as well as the rest of the file and we don't want to support such changes.
This should be a verb, and not a verb.
Is it possible that the wrapper is not a specific attribute?
Why this method is being added twice?
I am not sure we can do anything here. I don't see any use case for this, and the other code will be removed. Maybe we should use a more specific one instead
remove the empty line
This doesn't look right to me. I would keep it as `buf.WriteTo(w)` and leave the error as is if it's `nil`
This is a breaking change, but I think it is reasonable to have a default method that returns `is_static_remotekey_enabled`, but in which case, we'll have `is_upfront_shutdown_script_enabled` always return a bool.
I don't think this is correct. You are returning `title_changed` from `in_config.py` - but you're getting an error from `load_finished`, which is the case where the `self.title()` is `None` - which is a user who is not "reapply" - you need to return `self.zoom.reapply()` when there's no current status.
why did you change this?
can we add the `--force` here so that we don't know what is expected on the DB?
This (and the other similar ones) was removed because the new `detach` extension was updated to allow the new `detach` extension to be set in the URL and now now it can be deleted after the `blah` is applied.
Is this really needed?
@irejr is this the only change I was trying to see that if the SQ and SQ is not enabled (see #3332) we will have to fix it in the same time as we have the test in the v1.Secret. So please revert this change to the test.
is this used?
I wonder if there's a way to avoid having these in the `#ifdef` block?
not a good idea to add this TODO at the end here and below
This is already written as a `static` check. Should we remove it entirely in this PR?
Can we just return the right object of the primary type and return the value of the primary type? I feel the primary value could be changed to return the right object of the primary type.
Standards: Please add braces to this condition and spaces around the `if` statement.
Why not just use the `href` here since it was previously set on purpose?
I would move this if to line 152: `LOG(INFO) << "Part"`
I know this isn't new, but shouldn't it be `requestSegment<byte>`?
Why was `Proxy.Type` removed?
Missing long conversion
Should we make a different name for these new objects?
You should remove these spaces.
We need to make changes to this file as well to make them explicit.
can you add gitea copyright line to header (and keep gogs one next to it)?
This should be removed.
nit. Should this be in a function that is used in both places?
We can also pass the whole object in here.
@michalpristor @jcotela @chicm-ms @rhtyd :) Thanks for your fix. Can you confirm if this is the right change?
Can we have a better name to describe the code and make it private and use it only when it gets rears?
Shouldn't this be a `for (auto out : outputVars_)`
I'd prefer a different name for the `_get_listen_count_for_user` -- that is how it's related to other code, but this is really a very handy thing and would also be nice to have it as a static variable.
nit: this function doesn't really match the code of `new_tab`. I would just call `set_tab()` and `set_tab_with_html()`
Please don't change this
Let's add the `--server-command` flag, as it is not very descriptive when the option is ignored, and will help keep the same flag in the future.
Why do you do this? The `$is_do` line is already indented by the `return;`
I wonder what this was doing, we usually don't make a build fail if the version was 0
I would have expected this to work (we don't have the unittest2 as unittest2) but I think we can just have this in the file and just remove the file
This should be left as-is.
This would be `nil` as it was before.
The name `extdataplane` is more clear. I think `felix/dataplane/external` is a better name.
is this the default?
The naming of the tests could be confusing. Maybe `open-mmlab://dla60` would be more suitable here.
`rt#Meta` is in `jetpack`, should it be `@classmethod`?
Why is the group not being changed here?
I wonder if it's better to just use the `Save` type instead of `Save` as the `Save` type of the returned value. And also the user can just call `Save` with an extra argument. And to avoid having to pass the same type as the returned value, I think this is good enough.
Should this line be removed?
I think we should keep this as is (not sure if `$$` is the best choice).
I wonder if we want to keep `shared_context` since it's only used in the model, and `spec` is not actually a way to avoid it, and I'm just not sure about the name of this method
what does `CC` stand for?
Nit: we prefer single-quotes variables, as this isn't being used. I think in this file the only place this can happen in the `aws_sdk_s3` file. I would recommend moving this here to a new file.
It looks like you can just call the existing `Http2` interface with a default value. I'd just call it `Http2.Http2` or similar.
I'd like to have an error on it. I'm pretty sure this is an `SetKeepAlivePeriod()`, which is used to be a bit easier for the user. The `SetKeepAlivePeriod()` method in `pkg/server/server/g` package.
You should check for vkkININ (see the other `code/ip` files) instead of `(float-0) < 0.0f`.
I think we can remove transactionLastValidRound here too since it is now just a new one, but it would be cleaner if we didn't pass transactionLastValidRound in.
This was the only place where we used to create new API. We should probably do it for each entity.
This name feels too broad. It's more readable as `DynamoViewModel.`
@smarterclayton do you have any ideas on how many requests this could have? If so, you may need to use `!isEmpty()`
@franckcz I'm not sure this change is necessary
is this used anywhere?
Is there a reason you are changing it to `NewNewSource`?
I think `getFocusableElements` shouldn't be here.
Could you move this to ``TestCase.format``, it's more obvious which one is about?
Can we use `org.apache.parquet.schema.Type.Repetition.REPEATED` to also allow `checkstyle:VisibilityModifier`?
I don't think these includes includes should come from the module module. You have to use C++11 or something in the C++11 but this is fine as well.
This line can be removed.
This should not be the same as `std = "mFolder != null ? mFolder.getName().hashCode() : 0);`
Use the new Ruby 1.9 hash syntax.
it's not necessary to use a different name for the user. maybe `app.config['TEAM_NAME'].lower()`?
Should we add a check for "backup" here?
This seems like it would be a good time for a release...
nit: can you change the name of the variable to `mergedConfigNode.GetOrCreate` so it doesn't get gc'd, just to be sure we don't get gc = on
This should be `start` not `Set`. The `Set` method has to be updated on line 152.
@Pearl1594 can you take some opinion on this as to what is the motivation to not use `DataflowFile` ?
I think this can be deleted since `other == null || getClass() != other.toString()`.
This change was necessary to test the setup test, no?
Why are these `Process`, `Process` and `Process`?
I think the previous `return []string{"label, dimension=true, ...` would be more consistent with the original concern. I would have just used this method here and instead use the `return []string{"label=false", ...` on the previous line.
This line shouldn't be here.
Does this make a copy of the above change? I would rather see the `clone()` call below, which is very likely not what the `is_clone` function does.
Why is it not there?
I think the word "must be" in this file is wrong.
The `<input type="noopener noreferrer"` attribute should be `<input type="text" />', [webelem.Group.inputs, webelem.Group.inputs])`
is this a good idea to include an error message?
I'm not sure about this. If the package is not going to be used to generate the API, then it would be better to use an attribute here.
This looks very weird. Can you explain?
This change is not necessary, but it is already in the _exit file right?
Can you add the trailing period?
This is a little confusing, as it is used by the end of the line, but if it is the default, this will break if it is not there. If it is the right thing to do, you should do `cls.debug_java_port = get_free_tcp_port() return early`
@martint is this right? I would have thought this would be a no-op, and if we want to be sure the path contains a different directory?
Is this method used?
do we not have any tests for this?
If the map exists, then it will never be refined. This will break if there is no data being printed. Is this an issue in the code?
Why is this change necessary? It is not just a test, but it does not work with the same as this change.
Should this be added to the above list too? (It seems to be the case of some sort of optimization that we can't track the user.)
Is this the only place you have forcing a new one ?
I think we should check if the error is not nil, and if the error is not `false`, otherwise, we can set the value for the chain.
Can this be moved to another PR?
Maybe rename it to `cgroups[subs]`?
can you add this package back please?
this was a bug before
can we add a `PORT_RESOURCE_GROUPS` function in `moto.py`?
Can you please also move them to a package?
These `const` statements are not needed.
I would suggest renaming this variable to `HoodieTestHoodieTestHoodie`
Does it have any impact on the test? If so, what does this return if there is no error?
Why is there no such thing?
I'd suggest not to define this in ot_file_mapat_bytes method and make it a little bit simpler: if (88->repo_dir_fd, "summary", TRUE, &fd, error)) {
This could be a method with a single media (which can only mean a single media).
I wonder if it would be better to move the condition inside the if statement above? I think we can keep the condition as is, and just change the condition and just change the condition in both places where the prefix is set to ""
Why not just use this in `libbeat/`?
`canList` is already used in the base class. It's not used in this class, but it seems it makes sense to move it there.
I think this is a bit dangerous to add as an `Optional[isNullOrEmpty(false)`, we don't need another `_lastDomChild` argument.
I think you'll want to remove these lines. This is a breaking change for me.
This should be `CreateCounterCounter`
Can you explain why you need to set thisptr?
This should be set in the `global_history.rebuild_instances()`. That's what I meant.
Why was this added?
Hmm, can you please explain more about this change?
I think we should use the default in a few places
this function is no longer used, you can remove it if you want
@cramforce do we want to add `t.New` here?
This is not needed. `NewVersion` returns an instance of `NewIndex`
Can you also move this into the group below?
I'd like to get rid of the `if err != nil` check, but we can do the same thing in `AzureRules` too :)
This is the fix for the test case.
nit: we usually do `false` in `six.Int`. The `bpfrun bpfProgRunFn` is the default, not this test.
Could you please move this to an `__call__` method, so that it will be used by both methods, so the same for the other two methods like `if`s.
This was a bit odd, because we don't want to keep the old import in the goals for a user. The reason for this, we want to avoid doing `pkg/util/byteutil` to be in a non-const PCollection, as it was previously written to allow a user to set `pkg/util` in the goals as the new goals because it was being used.
Shouldn't we use the rev-specific `create` here?
Why not use `unRunningHasExtensionValidation`?
the `else` block seems to be a very generic way to do it. If we just want to do this, the condition wouldn't be if we already have the same thing in all the places where we're doing this
You can also change this config to `DisableEndpointHostPrefix.include/Disable-current/core/Disable-current/core/Disable-current/core/Disable-api-api.common`. Otherwise you may just need to add `Disable-api-api-api-api-api-api-api-api.common` as well to add the config
this should be removed as we already have this in the main file
This should be "enter password (again)"
Do we still need `import gui.contextHelp` anymore? It looks like `import gui.contextHelp is not used in this file. Can you double check?
Why are these error codes removed?
This is the change I believe.
Isn't this the same thing as `EntityManagerInterface`?
should we just use `char` here?
This is an example of how the `status` key can be used, and `is_status` could be used in the `is_past_due` method, which I'm not sure what we want here.
I think we should not have a single default implementation of `_maxStreamsPerConnection` in the config and use that from the config here. The `header` prefix is not necessary in this PR, but it is a very specific thing. It is a bit confusing for this PR - we could consider it more descriptive of the `_maxStreamsPerConnection` and `_maxStreamsWriteString` - which is more common for the future.
Is it worth adding a TODO here?
I think it was intentional that this was `Stream` to not be called anymore because it was never being initialized.
This should be done after `STOP.Set().length()`, as it is done in the same line.
This is a breaking change. We need to make it into two different methods: - this property is used only in one place. - `newItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemItemerdG.
`public SpanShim(string)`, we could change this to something like "Passed span's context is not valid", nameof(this.Span.Context));`
I'm not sure I like that change -reset_at_*. It seems it should already be here? The "is that any of the time the thread was waiting at this point is to be an option" -reset_at_*, but that would mean that if any, it would get a bit more specific, then the proactively runs the setting, it would not be an option, so it would not be the place to put this check at the top of the thread
Let's add a `api.server.prefix` directive for this as well.
I think this is still dead...
why the fix? I see this above you're using the new condition.
Can you please add a note in the reviewer that this is not working correctly.
This command displays at the beginning of the command file, not the snapshot snapshot.
Hmm, this is not correct. Is it supposed to be a `stpb`? We've got an error in here that is actually not happening. Maybe we should just remove the import from this file?
Could you please change all of the `Secret` to `handle`, it would make it easier to understand what is being passed here?
This TODO looks like a leftover from debugging?
Can we just get rid of this check?
I think this should be more specific, since the `message` property should already be present.
Should we change this to a "now" check?
Should be `private`
I think that we can get rid of this.
what exactly are you doing here?
Do we really want to retrieve the Certificate resource from there?
Why is the `Errno` check removed here? `EPERM` is only used when `ENOTCONN` is not `None`
Is this part of your PR or a change to the public prefix? We're only setting it to `True` in the `with_env` table.
I don't see the point of this, so why are we returning something in the original `List` and not `request`?
This should be `type UVarint represent a 32-bit number number`
This is a change that works for some reason. I think we should add it to the `pygment` parameter to `register`.
This could be reused from the helper.
I think you should also add here the `create_table` column, I think.
"Whether to generalize image using Windows Sysprep." This is a very bad thing. The default value is "reference" and we are not using the image, but not the images. The image using Windows Sysprep should be the default value.
why not use "1" and "buy", and avoid having to check "0" in all places ?
Can you please revert the changes to this file?
@pgavlin Do you agree on the naming while you're here?
I think it is better if we just use the name of the variable in the service. It is not possible to have a constant, it will be a bit easier.
Hey, so it seems that the `padding` number may not be an array by default. Maybe just change it to just `padding: 0`?
I would prefer to see a test for this (I see it was there before).
@mjkkirschner I have to fix the indentation in #5998.
I think `lls` should be fine
Why was this removed?
You can remove this.
I'm not sure we really need to store this. We usually do not include it at the beginning of the file, so I think we want the `-1` suffix.
This is the only place where `lock` is `true`.
I think you need to change the signature of `proto` to `proto`
(style) line over 80 characters
Use spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
I think you meant to add a `System.Diagnostics.SuppressMessage` constant in this class.
This line is incorrect. We need to remove the `if (xwayland->server)` below.
`crypto` can be removed now since it's no longer used.
this is a leftover, please revert
Is this change necessary? If not, we should probably remove it.
why does this need to change?
These changes look good. Can you fix them?
Use `allowOptionalMappings` instead of `allowallowOptionalMappings=true`
out_channels (int,ocop): The number of input channels to in_channels (int,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop,ocop - you have the same for convolution layer (dict, optional):
Is this a bug fix? If so then it's better to be consistent with the other functions (e.g., another one)
I don't think udsServer is needed
@jackfrancis this should be in the `if (isort && $this->articleFacade === 'null') {`
`is` is a better method name for this.
We already have a blank line between the method name and the first argument: `git rev-parse HEAD 2>/dev/null`
This file is already closed
How do you know if it's safe to create a separate `Dispatcher` object with a `Dispatcher` object?
I think this function can be moved to `Environment_constants.go`
@jridgewell I don't think it's a good idea to use `computeLogLikelihood` in `computeSpec`. I'll check for other values that contain `negLL` and then `computeSpec` that are not actually used, so I'm ok with this
Isn't it good to check if the token was set and not null?
nit: we should probably move this to line 103. Otherwise we don't need to be refactored in the future.
Can we change this to `file_exists`?
Can we put `spack info` in this class?
I think this function could be called in a `SetAnnotations` method
I believe this can be done separately, since it has the same scheme as before, but the scheme is not used.
I think this needs to be moved to `switch ($orderby) {` block, since we already have the above block.
This should be in `pkg/configurator` not `pkg/configurator`, I don't think it needs it yet.
I'd suggest using a different name, e.g. `#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{#{
Unfortunately that is the `Preconditions.checkNotNull` file, which is not the best name for this feature.
You should use `state.getProduct(mProduct)` here.
I think the `require` part is unnecessary here
this is not necessary, as the reset reset isn't called in the UI
What do you think about just checking if a boolean is not null?
If the only user specifies this, I think the old behavior should be updated.
`CustomClientAuth Auth` will need to be in the middle of the config.
I think we should be consistent about what `NETPlatformHost` does - we can remove `NETPlatformHost` and use it for both two different values in the source.
What was the purpose of this change? It makes me a little confusing. If you have an equivalent change the 'isOrdinal' argument to `isOrdinal` instead of an 'isOrdinal' argument, what if you made `isOrdinal` a `string`?
This change will break the check for `CLASS == null`, should it?
I think the new code should be in the new line. We have a new function to check if the error happens, so that you don't need to set the right error.
This is the only change that fixes the issue
what about passing in the default value and passing it in in the default setting?
I'm not sure that `Engine` is really needed at this point?
The `Results()` function has a `*Spec` instance, so we're always taking it off for now. We'll need to change it for now since it's a separate `TestLogger` method.
This is a private method, and should be removed.
Why are we setting the ` EngineRpcModule`?
We should also check that the user doesn't want to know about the user being able to know when they need to know about any other user.
Please revert all of these changes.
Why this change?
I don't understand what this is for?
This is probably a good idea. If a new app is running, then it will be better to remove it then.
This should be done in another PR
would it be worth having a test for `self.code_immediate_expire_mock`?
`get => _viewDispatcher ?? (IMvxViewDispatcher)MvxMainThreadDispatcher` is used for every request, not the field.
Remove extra line break.
I think this might be `repo`
I'm not sure this is really necessary, since we use disable-too-many-args, but I am not sure how to make it work.
I don't think this is needed. You can just use `POLICY_LIBRARY_SYNC_ENABLED = '$USER_HOME`.
This is not necessary, we use this for the `import` statement.
Please use a more descriptive name like `DI::zmm_set_num_simd_saved`. That will avoid code duplication
This is not related to this PR, but we probably want to rename it to `api_vfile_section` to be consistent with other plugins
remove the empty line.
I don't understand the "Video" hash to the DOM. Do you know what the "Exercise" hash was supposed to do? Is there a way we can have this constant defined somewhere else already?
this is only needed in the `DeadlineExceeded` case, right?
why not set a value to null?
nit: update copyright year in header
What is this for? Can it be changed to 0?
We should use the `currentVersionIndex > 0`.
Do you think we need a test to make sure the cache is not specified and we return 0 here?
I believe that we only need it if `foundBinary` is true because `null` is not found in the `if` check
@smarterclayton do you want to change this field name, or you should make it a separate variable and then set that value in `--build-id`?
This change was intentional, because we already know the `git blame` value was actually used.
This one isn't really needed, but I'd keep it to make sure it is for the `WITHindex` case
I'm just asking about this test but I wonder if we should have this as a separate method for now and have an explicit check for that in that case? I would expect at least one test with this change for now.
This is a bug fix.
You can remove the `ends_on` part.
just a remind, what about the other configurations that are used for?
Why don't we use `*` on the default config?
should we have a helper for this as well, or is there something similar we can do if `_ = st.Close()`?
This is not needed
`case print_result(node, event[:type] ? 'success' : 'failure'`
We need a new test for this.
Use of `if` and the `{@user %>` syntax for the variable
This file was previously written to avoid the extra extra work in python 3.0
This one is a change in in a vendored package. Can we make it `private` and have `private` in it? This looks more like we are adding another method to a `ClusterSchemaClient` that is used to check whether the system is the first one.
Can we change this to `Run: func(_ *cobra.Command, args []string)`?
Can we just import `github.com/opern/go-sqlite3` and remove `_` here?
I think the idea here is that if the node was not set (no need to call `RunTimeTicks`, then the system was never set). The `if` is the right one, but I doubt it is better than the `if` statement.
is it really really necessary or is it just for debugging?
It seems like this should be left as is if you are not going to make it into the schema (in the case where a node is not a window)
I am not sure this is needed, since the `computeInterface` is already included in this class.
Why are these changes required?
No, this is a breaking change - it's just a big deal either way.
Why not make a `||` here instead of putting the `|| 0` in the debug log?
This should be `undefined` if `key` is `null`, otherwise we will be able to just add `string` to the end.
Style/HashSyntax: Use a guard clause instead of wrapping the code inside a conditional expression.
We should probably make this an abstract class, and instead call it `super`
we are adding this to the debug level, right?
I guess `spanSettings` could be removed as well.
Why do you need to use `DEFAULT_ptr` here?
The `name` and ` retry` are the same. Should we fix those as well?
should we consider making this a constant?
what exactly is the difference between `layers` and `layers`?
I am wondering if this is the problem. Maybe we should add a check for that.
I think you are using `log.Close()` instead of `log.Close()`, so you don't have to remove this line here. (The only reason the code works for `log.Close()` can be inlined.)
This is not the right place to do this. A user could still use the `1` or a `org_letters` instead of `org_letters.each` as part of the code. A user could just use `1`, but that's the only way.
could we also use the same namespace for `ok` and `ok.StatusCode == 500` ?
This will return -1 even if `x` is `None` - but is it not `-1`? If so, we should use `./pants help` here too.
@aosyatnik, I am a bit worried we could change this to a `*0` instead of a `0` for clarity: do we want to support it?
If we can't change the name of the field we must also change the name of the field.
You can remove this and change the import statement below.
Why is this here?
This line is unnecessary.
This should be removed.
why removing these?
This is not used, you should remove it
Would it be possible to write an exact query to the "auto" array in the constructor? I think this change would be easier for us to understand if this PR is merged as "when it's removed", since it'll get a "removeHs" in the future and the `create` method can only return a `shouldAtom()` in this case, but maybe that's not worth the user to see how it is doing it.
I'm afraid that this should be done in wlr_output_destroy() and not wlr_output_event(), right?
should we make this an actionable?
Hmm, I think it is better to use an variable here to do more than 80 chars.
I wonder if we should check for the error rather than just the error code if a client is empty? It should not make sense to me.
Please move this import to the top of the file.
Why not `opts.WithHTTPClient(&client.Client)`?
This is a pretty high level of abstraction. Is it a valid option to have "Chromium-based browser" and not just "Chromium-based browser" ?
Should the default be `0` here? It's not clear to me that `fetch_str_equal` is a valid default value.
This is the only change that works with the `semantic_feat` variable, right? The `if` statement below looks like it's just `if`
This is a mistake, I'm not really sure it's correct. I'm curious, why do you need to make the change?
Why is this line needed?
this seems to be the new API? why not just have this be `long`?
This should be: -hub parameter. Example -hub+":4444/grid/register - -hub parameter. Example - -hub parameter. Example -hub+":4444/grid/register - -hub parameter. Example -hub+":4444/grid
We need to be careful about this, as `tautHandler` is in `getNumTautomerCatalog` now.
Would be better to do a `lines.exists(m.Bucketlist)` in this case.
@stephentoub Is this an existing bug?
This should have been added to `WaitGroup`.
I am confused. Why do you have to change `req.CommRs` to `OnlyRs.Values()`?
Is this used by anything?
This one was a bug in the first commit.
Should we make this `copy()` instead of `copy()` here?
You can remove the whole `openshift` import.
Hmm, is there a way for us to have this on the server instead of doing it on the server?
Is this just a typo? `DataReader.convertConstant`?
The data structure should have a single `GET` instance, so I think it's better to be explicit here (and the other keys below).
this is an improvement. can you rename `ASTAnyTypeDeclaration` to something more descriptive?
Can you move it above the imports?
You can keep this method in the same package.
I don't believe this should be in the `UserApi::` block.
Should we also be adding `ClientMaxSendMsgSize`?
Metrics/LineLength: Line is too long. [123/120]
I'm wondering if this should be an `(line 1) for those fields that it's not the type of the `line 3` field.
Why this change?
Is it possible that the tests are failing because they are actually testing the same? If so, how is this related to the change in the commit message?
This was the wrong way to do this, I was wondering if it would be better to just call the `TextFormat` method in the constructor of `components.Context` instead of `hp TraceContext`.
I am a bit confused, are we doing a write on these?
why not just `model = dict(pretrained='torchvision://resnet101', backbone=dict(depth=101))` ?
The `!=null` can be omitted from this function as well.
This was a typo, and was the reason why it was moved.
I think you need to do the same for the `.PrepareToStop()` in `remaining.sleep()`.
AFAIR we've created `Config::` here. I think we can just remove it, and just remove the `Config::` from `./pants lint` where you have to do it from that `assert`
This could be moved outside the for loop
This is a no-op, right?
This change is not necessary because the `showDeleteAttachment` method already has access to the name and is defined below. In this case, we need to update the `showDeleteAttachment` method in the resolver which already exists.
This would probably be a little better as a `class.getName(..)` check, and then a `NullPointerException`.
who uses this in the database?
this should be removed.
This is probably the only place where we can do a `c.buildActions` check, so we don't need to modify the `.Unlock()` check everywhere.
This import is duplicated.
I would recommend checking it at the end of the line.
@kennknowles will there be any issue when the default value is a `cniNet`?
Is this needed here, or should we use the request here?
I think we should use `backendConfig` instead.
Why this change?
This looks like a wrong thing to do here since the `easyadmin.controller_resolver` is the config file for the system property.
I'm not a fan of this, but is there any way in which the results won't be sent even with a key? I'm assuming a way to avoid having a single key?
You can also delete the return value here and return `true` by returning empty.
why does this have to be public?
Can you please avoid using a lambda? I'm wondering why the field is not needed?
Why is the second param needed?
This seems to be unused
@smarterclayton do you know why we need this change?
I'm curious, why this isn't just the entire namespace? Should we be consistent in both cases?
Do we have a migration to make this configurable?
why remove this? Is it needed for the other tests?
Is this change supposed to be done in a separate PR?
I believe this was a bug, but just realized there's no need to create a new method, but this doesn't work because you've already done `test.run()` before this call.
I think we should remove this, since we don't really need it anymore
I would have put the default `0` and the default behavior for `goto` and `goto` to work, because the "goto" and "GOMAXPROCS" may be defined in the log message
I think it would be better to make it `@RunWith`.
What if we make a user in the map and make a string for all of our models? Or is the `4` case used in this function?
I think it would be better for all the hostname to use the hostname directly, and not the hostname. The hostname hostname should have an `http://` that is a `.`
`context.std::string &player.std::string &player.std::string &player.std::string &player.std::string &player.std::string
I think this is a bug as you're doing the `:okeh` instead of `:okeh`.
The type annotation should be `Optional[field]`.
You should be able to use a more specific `github.com/iotexproject/...` here.
Is this method used anymore?
This check is redundant, as `add_UTE_config` already has the `add_UTE_config` attribute.
You can also remove `current_user` here.
I'd prefer to keep this line here. The original code is only about the "Partition object" (i.e. no longer available with "session" in the node_require).
`bundle` can be `null` (as `null` is false).
This change will need to be updated in #410.
I see, this change is only needed when `session.close()` is `null`. Can you explain why this works?
Please don't use trailing whitespaces.
this is the new change. Can you explain why this is necessary?
Could we use java.lang.StringUtils.isBlank()?
I would also add `custom_imports` to `register_training_hooks`. It's already used by the `setup_rule` function which is used by `setup_rule` in the config file.
You can just write `.present? && question[:text][0]` instead of `.present?`
can we make this `finalfinal` as well
Is this used anywhere?
why is this needed?
Why did this change? I thought the plan was to avoid calling new function in a more general `if` and then just use that instead? It would be better to do it once and avoid an open issue in the future (this would be much cleaner).
@bvanessen I would prefer to keep the `self.location` as `location` and not only use it in one place, but in the future we could avoid having to check for `location`, and if that doesn't, then we don't need it here, it can be done later. It will be hard to see where it is.
I think that in the case where the old code is still a good idea, I think there are still some `ReadWorkloadManifest` that would be a better idea.
Can we use `await this.ForceFlushAsync(cancellationToken).ConfigureAwait(false)` ?
I wonder why this change was there before, `-variable` would now go away, but the `-variable-v2` is still present at the `python-reveal` level?
So the actual problem is the message we are using to create?
I'm not convinced this is the right thing. But it does feel a little weird to have, I don't think we need it in this function.
Can you make sure the JSON-cache are not set in the tests?
Why did we move this?
This should be `github.com/mitchellh/go-homedir`, I think.
@deads2k any reason to keep this as a separate commit?
Is this really necessary?
You don't need the constructor, it's already done by the class.
nit: you can just inline this in the constructor.
This change is not really correct. The problem is with `.format_exception_only`, but I think you can also use ``_exception_only_message`` here.
I think this should be moved into `Number.jit.annotations`
@deads2k how about adding the headManifests in this function to headManifests? I thought that the headManifests passed in should be the correct location here?
you should be able to get rid of this import, and just get rid of the import below.
This is a bit of a hack - it is also possible if the request is not set, but if it's not set then it should not be set.
I think we should just remove the unrelated TODOs
this can't be null because it's already `1`
This should be `H2O_VECTOR(struct listener_ssl_config_t *) ssl;` as we already have the check below.
This can be `Retry` if you want it to be `null`.
Should we have a test that checks if the newly introduced `strings.Split` and `strings.table=True` as well?
Extra empty line detected at block body beginning.
I think it's more efficient to just change `-h` to `-line` here.
nit: it would be nice to use `Map<Objects>`.
I think you meant to use a `@group_*` or `(group_ptr)`, because you can't use a `@group_level = @group_level - 1` here
This was a bug where it was fixed.
Is this type of mistake or is this type of type intentional? I think we need to add the type of `name` to the type in #28287 and I don't think it's an issue.
Why are we making ArraySegment a field here? Seems like it is a little strange to have the copy of ArraySegment. Can we use a field for it and return true instead?
I think you don't need to add this one, it's only used in `__Pickle`.
Please revert these copyright required.
missing spaces between `,` and `,`
I would move this check to where there is a stray check.
Why is this needed?
This is wrong as the first thing I did for the default value.
Why is the `0` removed?
This is a no-op, but the value should be set to something like `lastTf`
Let's not have a method for it. It's a bit of a hurting because we have to know when it gets assigned to an attribute, and we have the same logic for the variable. How about just making it a parameter and pass that value to the caller? I guess it would be safer to just initialize it here, so that we can set it in the global scope if we do.
this is an extra function. I think it should have been moved inside the else branch
I would use `import behavior as bool` rather than `np`.
This is the only change in this pr I see is that a `v(.+` change makes things more clear, so I have to change it to make `v(.+` more clear. I am not sure what the intention is here, but I'm not sure it matters.
I don't think this will work if `Path.IsRootedPath` has `Path.Combine()`
This change is not needed since the default value is "Init"
In theory, you are using the new function instead of adding a new one
It is not possible to call these tests twice?
@mraible is the fix here?
Can we use `v1` instead.
I think you can also use `add_column` here.
Why this change? What makes it sound like we will get a lot of the new back
should this be true or false?
Nit: It would be nice to have a function to explain why this function is needed.
I think that's a good idea, we can import these at the top of the file.
Is there any reason this was changed from `org_type` to `links`? Doesn't seem like it should at least be changed.
I believe these two files are no longer required, right?
Can we put the logging in the log message here?
typo: "in the future" -> "in the future".
Hmm, this is a bit tricky, as it has been implemented as the "upper" model in the test, but I'm not sure about what this test is testing.
This log statement should be indented.
This should probably just be `UserMessage`.
I think we should add this to pyramid too
I don't think this `private` statement is needed, because it is not used in the classes
This is the main code I don't see where it is used.
Is this method only used in tests ?
Can't this be deleted?
I'm assuming this logic should be in the RequestParsingData class. It can be removed. It is also used for some kind of logic that is used for every call to `TryDataStream` in the `ComponentData` method.
`CURRENT` is a bit more of a name for the test. Sounds weird.
Hrm, I think `depends_on` and `depends_on` are misnamed here, do you think we should make it configurable?
I would prefer not to have the test class. This should be a part of the public API.
@rathukugan can you confirm this is the right way to fix it?
I would rename this to `mpl_renderer`.
Can we make this an `cast` instead? It seems like we have some other options that can be different.
I am not sure we can do something about this. I don't think it's a reasonable default. We should just make the configuration in these strings to be in the future (in the future)
@monfresh what do you think about this? This is a test, right? I don't think so but the rest is still valid
Should this be added to the top of the file?
Shouldn't this check be in `_predictedFieldName_model.py`? I think we can get rid of this check and do nothing if we want to do something else on `_input=true`, or even just raise the error.
Why was this changed?
@MichalStrehovsky - I am a bit concerned that this will never get written. I am not sure this is the right fix to do here. Why are we adding the `console` flag?
Use underscores here as well, otherwise you won't be able to use the `pos` variable.
I guess we can remove this.
It doesn't look right to me to have a `merge` with a prefix to match the `C:` namespace?
This line is the one that uses line 48, so we don't need to repeat this line.
"... and it's children" sounds weird. What does "the one that's children..." mean? Is that a a very confusing name? Maybe "to avoid re-render"?
Is this related to your PR?
This test should not be deleted
Why does this work? I don't think the `parseConvert` call is necessary.
This is not needed anymore right?
I think we might just want `@property {string}` to be consistent in the name of the public key. Also, should the name of the public key be different? I'm not sure we want to make this change because it's just for the other work around.
Nit: I would prefer if we used to use the package imports.
you can change the `private $this->relationModel->getKeyName();` to a variable to be the correct object here
Please update `fileTypeGeneral === 'application'` to reflect that change too. Also, change the 'tar' to 'metrics.php'?
This is an important change, I think we should remove the `FakeWebAPI` argument.
Please use `url_helpers_for_display` to generate the link link
This should be a separate change.
Why did you remove this? It was the only change needed to use `app.logger.debug` for `len(cfg_name, cfg_value)`
I am not sure if this is correct. This is the same as the node_l->store.tx_begin_read () where the node_l is not initialized.
Shouldn't we just have this inside the function and let the MMFF class take a copy of it?
You should use the existing `Order_order` function in `config.go` file.
Do not use spaces inside square brackets.
I think it would be nice if we didn't have to do this in one place, and the `scheduleIpHostResolving` could be used for the `getDefaultAutoAuto` method.
I am not really sure what the "password" variable is. I would prefer the code to not use it as the default. It is not very robust to change this part.
Is there any reason why we wouldn't just change the `css` and `full_path` to not include the `full_path` here, or is it just for future cleanups?
I'm not sure if this is correct - it's the real change of this commit.
Align the elements of a hash literal if they span more than one line.
Plz add a blank line between tags and summary for better readability
@smarterclayton do we have a problem that this is only in the cisco_ios_xr actions
I think this is not the right place to add an update to the raft? The others seem to be refactored to use the raft instead.
I'd rather you use relative imports, i.e. `list`
I don't like this name. It's very specific, IMO ` Feature_laurel_#{_rank` and ` Feature_laurel_#{_html_safe` would be better?
Should this have a test case to ensure that the order of the keys are stored in another class?
If you want this, I can see why it is related to the change (the change in the tests).
Shouldn't this be LoadSaver?
I think this should go after the other `line logging` import
Why is targetType needed?
@smarterclayton this is a bug, it is already used by `--verbose`.
this should use `debug` for the `finest` log message
I'm not sure about the name, but this isn't a bit confusing
Should this not be nil? I think the error message is a bit more clear as the error message.
I don't think we should be changing this `isNotified` method, it seems to make a difference in the future, so we should be consistent.
Nit: This can just be an expression with a `LogManager.Flush()` if its not an array, since the previous flush already has an `NLogRuntimeException`.
I'd suggest using `U` here.
I don't really like this. We don't need to store a list in a separate phase, but we could use a different one.
I think you can just call `_ = os.RemoveAll(dir)` here and let the test pass without the `RemoveAll` call at this point.
I don't like it, the castToDouble anded will return null. Is there any case where the cast is not null and we get a null check? If so, we should probably make this change in the same PR as the one below.
I think the naming here could be more specific: 1. if SolrRequestType is a member of SolrRequestType, then the `toString` method is a member of SolrRequestType (and a boolean boolean) 2. if SolrRequestType is empty, then return SolrRequestType.QUERY.toString() which is called from SolrRequestType (for example) `getRequestType()` is called from SolrRequestType.QUERY.toString(), which we should not be setting value to SolrRequestType.getBoolean(). I think this will make it more clear.
@danny0405 I don't think this will work - I thought you were going to have to do it for every single map type (and possibly possibly different threads). But I am wondering if you need an additional map at all, so I'd like to add a note for removing it.
Can we do it in the `new` branch instead?
I'd prefer we don't add new `NOTCH_HEIGHT` and `height` here. I'm surprised that we don't need the same `width` here as the last parameter of `BlockSvg.NOTCH_HEIGHT`.
Can you please write an additional test for this?
This is not a valid option, but a `perf_output` should go into the `perf_*` file.
This is a bit confusing with the `set_resume` function below. What about something different from `set_resume_from_failure`?
I would add this import to the top of `roi_generator` module.
Should we only add a timeout if we're not defaulting to `0`?
Please remove `import pyspark.sql` and `import pyspark.sql.functions`.
I would prefer a different name, e.g. `str RequestFunc`
I thought the plan was to have `vol.destroy` return the same thing?
I would recommend adding a TODO about it, and instead pass the wrong pointer in the call to startHeight to avoid the need for the second call.
I think `RefreshNamespaceCache` could potentially return `null`, right?
`mmcv.ops` doesn't really do this, right?
@becker33 this will break for each release, right?
What happens if there are multiple entities in there? Would this be more informative?
Can we avoid adding another field in the config file for this?
This import seems unneeded.
Why is this `nil` needed?
I would return a boolean. What is the difference to just return an error?
remove extra newline
@gianm this test is still testing the `<dl role="menubar"><dt id="item"="ntifiable" at the very least.
@xuehui1991 I think this needs to be `config.cache_control = 'public'` as we don't want any of the new versions of assets in the database
This is the main fix. The only time we have this method was defined is for the `providerName` parameter.
Layout/EmptyLinesAroundMethodBody: Extra empty line detected at block body end.
This seems to be unnecessary, but it should be `error: error` instead.
I think we can use `_` instead of `string` here. `_memory` is a little confusing to me - maybe `_` is more correct here?
Shouldn't we add the current `Won` field to the `Won`?
This is a bug.
Can we add a note about this?
Metrics/LineLength: Line is too long. [83/80]
I am sure I can make this change. This is only for debugging.
This should be `ctx.Handle(500, "RefreshRepositoryMirror", err)`
It would be more readable if we could use cache cache and return/set the cache cache instead of a specific cache (i.e. for a cache cache).
wouldn't we also need to bump the log line?
This change is not needed any more?
can you use the `Match` here?
What if the user passes `hudson.XDPEnabled` to `hudson.XDPEnabled`?
We should not have to copy anything to the `method`, it should be moved to the `method`.
I think the URL should be in the local variables and not the default (or whatever).
nit: why not change the tests to `.catch(() => expect(client.topology.s.sessionPool.sessions).to.have.length(1))`
I think you want to change the `checkArgument` to `always` or `always-code`
Style/SymbolArray: Use %i or %I for an array of symbols.
This should be an environment variable, not a primitive boolean
Should this be a separate change?
This will not work for the username
This was changed in #5770
Can be fixed in the PR
I think we should remove the type from `pyqtSignal` and use the `ush.py` method to replace `QItemSelection` with `_ush.py`.
I think it's more accurate to call `unlock_shared` here, since it is in the first place.
I am not sure we need to change `jsx` to `js` for this.
This import should be grouped with the other `github.com/iotexproject/iotex-address/address` import above
Shouldn't this be an optional argument to `getVerifyMetrics`?
Shouldn't we use ByteSink for the location at all? The model uses ByteSink and write it as ByteSink for each location.
Is this guaranteed to be a `List`? Is this always true?
I think this should be deleted, right?
I believe this was the only change that was removed in this file.
Hmm, I guess it's not really a problem here, but it's probably a problem for an example of a bug.
@jridgewell would it be better to have a `@public_plan` method that sets the entire struct, and pass that in to the creator/Copyright?
This should be done in `Dial`
This was the one that was fixed.
shouldn't this be public?
I'm not sure it is worth it, but it is better to just change the `CASDefaultCstor pool` to `gorm.Net.SPARSE_POOL` and use it to avoid any confusion with the `a` in the future.
shouldn't this be close()
I'm not sure this is the right way to do this. I'd prefer to keep the same check twice.
Can we use `Collection\Storage\QueryInterface` instead?
import datetime was unused
This needs to be added to the BMP config.
Can `string/else` be used here instead of an explicit `if`?
I don't have a strong feeling about this one, since it will be a single call to `stop` on the `switch` branch - I think there is a bug here, but it would be nice to be consistent with the other changes we need to do. The `await server.stop()` will only be called for each element, and that's what we want. But the test is still testing, so I've removed a few months.
I would prefer to see this as a separate commit
Is this intentional?
I think we don't need this variable at all?
This seems like a big deal. Maybe change the default value from `index` to `index_index`?
Is this necessary to get rid of the logic from the code on line 556?
This is not the same as with #1078, but it's not worth it for now and it's pretty much the most complicated. But I would also change this to `&&&&& strlen($value)`
Can you use `LOG.isNotEmpty` instead?
Should we call `getParent(it)` here?
This is not needed, if the `onStartNestedScroll` is not a list of events (the one the parameters are different).
Should the error message still be logged?
This is not the only change that affects this PR. It's not really correct, but it's a simple fix for some reasons for us to have multiple instances of the same source for the one for the one for the "this" part.
you can get rid of this as the default and the other ones below
I think this will make it so that we have a non-integer between these two.
I'm not sure that the `left` prefix is necessary for this. It seems to be the only thing that is being handled in `this.hot.isRtl()`. What would happen with an `Optional.hasText()` method?
Is this function ever used somewhere?
I see you are not using it in this PR, but why not just use `BaseWorkWorkFactory`?
This was incorrect before.
Why the change?
This method is only called from the current implementation and is used by both `getugguggSession` and `getUri`. I think it should be in the base class, as it's only used by the `getuggSession` class.
These changes are not related to the PR. I don't remember what we are testing, but it was causing a couple other issues with this change. @tgamblin
We should do this check in `app.SetApptypeSettingsPaths()` too if we do not have a settings definition.
I think that we should do this for all the specific dependencies, since the path will always be full of the PackageRegistry and not the local, so the PackageRegistry should not be valid.
Is `beat.imports` and `beat.imports` used anywhere?
I believe the `chained-comparison` part of the output is not really needed, since the user may not fully specify the value of the c".
@wachterjohannes Is it the best way to make sure `2` is used as a value?
We should probably also keep the `LOG.finest` function.
This is incorrect. The server is the "host" part.
Why do we need to pass the network here?
I see no difference of this check.
Is there a reason we should consider moving this to `pytest.configure`? We could also just call a single `dest` function (and only call it if its a single file)
Did you mean to remove this import?
I think it's better to have `@logging` and `@logging` as default, and remove them in the code base.
I think you don't need to call the method in the public constructor, it's just a simple method.
This was not a great idea, but should be `md` here. It's not obvious what `md` is and what's going on.
We should remove this log line.
this means we won't ever get to do this since we have `logger.isLogger()` where we pass `logger.isLogger()` instead of this.
`value` should be a `String.equals()`
This change is not correct. You're calling `update()` before the `resource.filter(id)`, so, if it's not, it means you could call `update()` twice.
I think we should remove this.
I think `includesName` and `includes.child-action` should be renamed as well.
You can use `fmt.Sprintf("rum", bolt.command)` here as well. No point in adding the option to `ssh_nodes` in this file, I think.
use `||` instead of `if @video_page.purchase_collection?`
Hey! I think the reason for moving this here is because we don't have access to the stack in the `return` statement anymore is because it was previously written.
We should be able to use the `samplers.pseudo_sampler` module here instead.
Can you update this import too?
Is this change intended?
The change seems unrelated to the fix, but it seems like it should be a different commit from the PR.
This shouldn't be in debug or it is just a debug output.
Is this file actually not supported yet? If not, is it possible to just get rid of the `dialects` version?
Is there any reason why we are not just using `us.path` instead of `result.equals`?
I don't think we need to add this line - it's already an error
This ``ch`` could be `` also ``typed_mounts`` and ``command``, ``environment`` `` also needs to be `` also `` also `` also ``volume_mounts````
Why is this needed?
I believe this code is wrong. The `isRay` should be `node.getScope()`.
This import should be at the top, not on the file
I'd like to see a test for this, but I don't think this will work for me
Is it possible to use GCC here as well?
@c3doer Is this correct or do you just mean `c->Al::MPICUDABackend`?
This should be `public static const char * build_targ` instead, but I don't quite understand why it is needed.
@deads2k @agramfort is this a regression or was the fix for #22221 to make a test pass?
This was added when I was running the validation.
nit: `groups.add(entry.getKey())` instead of `getKey()`
This is not right. Is this something that could change in the PR?
I wonder if it should be better to have `NamedNativeQuery` in the first place?
Metrics/LineLength: Line is too long. [97/80]
I don't think the second `String` is needed.
Doesn't `span_errors` have to be a url? Or is it because `urlstr` is not a url?
I know this is where the key was previously, but would be nice to have it a lot of stuff in the future.
@mattcaswell, I don't know if this is correct or correct. This is a bug.
why do we need a resync?
Is this an accidental own line?
Just for my understanding, why are you changing the order here?
I think it would be helpful to use `man/man5/zfs.sh` instead.
Why not use a simple `proto` object here?
This is a change of behavior, I think it's worth keeping with a clean api.
@Scottmitch why do we need to do any retain here?
Style/PercentLiteralDelimiters: %w-literals should be delimited by ( and ).
This property is called `OnException`, so we need to make sure the property is not a property.
This will be a debugging change if the body already exists.
This doesn't seem to be correct. The function `is_v2_the_ONLY`, so I added it.
Shouldn't it be " remainder of Solr component." ?
Nit: We don't need to use a private variable here.
Why not use the `a` suffix here instead of `a` as a parameter?
I don't know if there are any other types of keys that have a `new Header[2]` type. Is this a problem?
Doesn't this include the header header header?
Is the 'the' part of the version correct?
can the user check this so they can not be set here?
I would prefer this over `<DateTimeOffset>`. I think we can use the `Action<DateTimeOffset, object> action, object state);` directly.
why does this need to be changed?
Please remove the "is fragile" part.
I think the original design of this test was correct. The class does not require any change.
Is this just for testing?
Do we need the same `#check-blob` ?
can we make these `limit=1`, too?
The formatting here seems unnecessary.
This will cause issues, but we should only change the latest version of the package to 0.1.1.
It doesn't make sense to add the standard standard library-* here since it's only used for the "all" case.
This is the main change that fixes that.
Shouldn't these be something like `DSTStatusChain` instead?
Why was the default default set?
@martonjs, do you know if anyone is using this, or why the previous version was removed? I believe this was intentionally added to the PR for #3333
I think the `String` for this field should be renamed to something like `getDefaultJobTimeToLive`, and the value should be renamed to `setDefaultJobTimeToLive`
this is not the only change needed since we are not using it anywhere else, but I would have thought it would be helpful to add it back in.
This test case is not necessary.
@gibrany Could you please add a `TODO: true` to the return?
This is an API break and should not be changed. The `internal` prefix should be changed to `[DisallowNull]`.
I would keep these as optional and call it `devices`. Thoughts?
This was probably the right place to put it.
The parameter `in UInt256? baseFeePerGas` is nullable
This was a regression I am not sure. You can't change anything from this interface to have a "list".
should be a constant
Is it really necessary to use `Impl` here?
I think you want to print the user here, so that you don't have to print the output. That said, the test is going to fail, because you want to print the list (not a subset of these cases).
Why is this change necessary?
Can't we just delete all the logic of the connection-level flow control window?
(style) line over 80 characters
So I am not sure it's a good idea to put a `for (int i = 0; i < PREFETCH_COUNT;` statement on the previous line, and the next line doesn't do anything.
i don't think this is the right approach. the object could probably just be a nil check and then never passed its own map.
I think this is wrong. The `value` should be removed. The `value = value.replace(/\\/g` must be used in the `else`.
this is a backwards compatibility break
I'm not sure if this is correct. The original logic was a good idea to expose a `git.#{next_git_fold_number` to the default. The reason I'm not seeing the `||` in the original code is that this was an internal setting in `build/pull/install.rb` and not the `||` of a `||` that just has the `||`. I don't feel strongly about it either. If it is the behavioral decision to do so, it seems like we're not doing any additional logic in any of the other things. But if
Could you please update this line as well?
I am not sure if this is the right place for this. It might make a difference from some of our tests (i.e. the existing code was that `extension_condition` and `extension` are not in the right place). I'm pretty sure that it is just the case that we wouldn't want anyone to do anything, but I'm not sure whether it makes sense.
I think this is what it is doing before the seed.
This is the only place I need to do with the `./pants run` branch, it can be `ifdef CLIENT_INTERFACE` (which I'm not sure about).
Would it be better to put this in the constructor?
Nit: please avoid exposing star import. It's not the same as the other imports.
Was this change intended?
This is still a bit of a hack. It seems to work without it, it should be in the `src/go` package and `src/go/`
I think we should also include `signed_in?` here
I would use `File.ErrWantSelf` here.
This will need to be `<autoRowSize>`, since the `autoRowSize` is always `true`
@martint Is this the intended fix here? Does this mean that we don't have tests for these?
the changes in this file should be reverted.
Line is too long. [85/80]
I'd suggest using `getUnrefForFinalResOp(ops,GenerGener, target target)` for consistency rather than hard coding the code.
this is wrong. You should check this in self.size, but the same for that if statement.
This should be `Invalidcall`.
Could use a `info=['GET']`?
I think this should be a `Debugfs.WriteToReadonlyNodeError`, because that's how the `WriteToReadonlyNodeError` works.
Should we also return `res` for `dict`?
For now, it looks like this should be an alias, so `person` and `car` are not needed, as `person` doesn't work.
I think this is probably the only change that's needed in this commit
why do we still need this check? I wouldn't expect it here to have a call to that function that can do this.
This will need updating, too.
Should these be conditional on the wording of the wording?
Why? Is it the same as the `phoenicis.png` file and the `file` file that is already checked?
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
can you make it work without this?
nit: ` OrderedDict` should have `Presto.IO`. It's not needed anymore since it's a flaky test.
Can't you use `is_id` for the `is_in_nodes` method?
Why was this removed?
This change is also not needed any more.
Please undo this change (also in `getAllAllAllAllAllAllAllAllAllP`)
Shouldn't this be `!empty($newConfig['Captcha'][$key]))` ?
I think this needs to be added to the `InternetGatewayID` module as well. `hostname` will be a `default` value and this will break any existing `InternetGatewayID`.
nit: could be nice to have a method for this as its a more generic one
Should be `debug` here or below `finest`
Can you please add the other assertions?
I think this `final` can be removed
Is this needed?
I'm a bit confused by that this test and the test in `analytics-tests.js` are still passing to `analytics-tests.js`, why not just change it to `analytics-tests.js`?
The null check is useless now
`json.stream` is no longer used here?
why is this optional?
I'd prefer this not to be used for the `else` branch instead of the function.
I'm not sure this is really needed. `doc-current-pid` is a `try-finally` in `build-system/etc/err-go#test` (the same is used for `git blame`) and this is a `return`
I'd move this up so that it's only used in `getAssemblyOptions`, if I'm not mistaken, that is not true anymore.
Would this be better as a `MustCompile` constant?
Missing space after #.
I'm not sure this is correct. It was already done by the rest of the changes in this file. The rest of the changes are only needed if the `. ':-` was not `null`. It seems to be the same, but if there are any changes you can get a warning.
Is this change necessary? The `ref` statement looks to be duplicated and I didn't want to remove the `ref` block.
Is this the correct way? If so I think we should just change the `chain.DefaultStore` to `chain.DefaultStore` instead
It might be appropriate to move this to a single place, like we did for the `send` block.
This is a breaking change for some of the existing public members and will be useful for a specific members in the future. We should also be able to remove the `NodeLockTimeoutMinutes` property.
Why has the `MaxValue` been removed here?
I think this needs to be 1.13.0 as well.
why are we dropping the param from the object here?
you should call `this(initializer)`. This is always true, so it might not matter.
Is `Value` used here and elsewhere?
@stephentoub do you mind adding a re-dict here? This makes it easier to debug.
Is this really required?
I'm not sure this line is necessary. It can be changed by itself to not rely on the `atomic.LoadUint64(&s.cacheHits)`.
Please rename this to `Bizarre_INITIALIZED` so it's clear that it's the actual event.
Could `fetch-mock` be removed now?
We could probably move this up to `Http2Stream` so the default constructor can have the same value as its own method.
I think we should keep the `[~]` on the previous line. We should probably remove it if we don't need it, and keep the cast at all.
Would you be able to test that in the context as well?
@tgamblin Do you know why this was moved? I'm guessing this is a breaking change
Please add a blank line after the declarations to make sure the block is added.
This needs to be renamed as well.
Is there a particular reason to do this instead of the cgroup?
nit: can we rename this `const` to something like `buildURIError(`
We can't have an external map function that gets the expected key. I think we should rename it.
Isn't this still a valid log statement now?
Shouldn't this be `final` ? This way, we would be able to be setting `final` in the method and we would not need to use the method in the method. Also, this could be the case for `path.getAssets().list(path)`
`getUploadedFlowFile` should also be a `const` and a `const` (or `const` and a `const` should be on the same line). Also maybe it should be a `modelmodel` and a `must` method on the class (which I wouldn't think is a good idea :) )
Does the value from `MaxTaskqueueIdleTime         dynamicconfig.DurationPropertyFnWithTaskQueueInfoFilters` do the trick here?
I don't understand why we need a return here?
I think it might be easier to just `return false`, since no one uses it, but I don't know why the compiler is using a command in the DB.
The method `make doc` should be renamed to `test_info` to avoid breaking people's compatibility issues.
Why did you remove the `isSameAs` check?
Is it always the same to use the one that is passing in in the constructor (i.e. `Unsafe::CachedThreadPoolExecutor`)?
These two lines can now be removed.
The test now checks out that the order of the order and the order was previously correct.
It is not clear that this is an array of strings that are not modified in this class. The class should be moved to the proper type.
why is this change required?
Why not just return the result?
I wonder if `int` for the right size here is a better idea. I'm not sure if there is a need for a `flushTo`'s implementation, but I don't have the harm either..
I would suggest removing the `from astroid.node_classes import For` import (or, no more separate code)
I don't think this is correct. I think the best approach here is that when the user changes this function, it will return a `None` value which is not guaranteed to be used. So this should be moved to `if (dask is isinstance(v, dask.array.Array, 'type'):` and not here.
Can we use `from t.strip()` instead of hardcoding `os.getenv` ? The naming is not very descriptive.
Please add these to the "disable" prefix.
I'm not sure if the name should be a `defaultOptions` instead, but it's not a big thing that would be `-waitForThumbnailsBeforeUpload`?
We have to be aware of this, let's keep it as is and update the code to reflect what is already handled in `dist-tags/users`.
Can be simplified to `if (results.is_result())`
This will break existing functionality if the `T` is not null, because there is no need to return a List.
`protected` is a bit ambiguous. What do you think about `return $check->getSetTagSetting()` ?
The message must be updated too.
Why `allowlistedModules` and not `AllowlistedModules`?
The fact that I have to make a change to this commit is a little bit confusing... I would suggest: "(list<array, 'list<array, 'input' => ['list<array, 'size', 'size', '3']'] = True], ....
It looks like this import was added to the `getState` package.
`java.lang.StringUtils` (to avoid using double quotes)
This doesn't need to be done if you are looking for the `cgroups2` command, and `cgroups2` command is set to zero. This is fine, but we can use a more specific variable name (in the `subsystem`) that can be moved into the `configure` method in `cgroups2`
Use the new Ruby 1.9 hash syntax.
Would it make sense to also have a default value here?
@martokch This is another solution as this will make it impossible to use `campaignSource` and we need to make sure there are no `err`
@cra0zy - I noticed we use this constant for both versions. Can we use the same constant for both?
Should we have two `/core/utils` and `emfile`?
This is also not needed.
Would it make sense to use `nameof` here, as it's a public method. It's more of a name for a static variable
Can we use `pdf` as the first param here?
We can probably use the `Apparent_at` constant here.
I believe the `if` statements are redundant, they can just be `if len(lit) != nil`.
What happens if both `NONE` and `SetOpenState` have been `NONE` and `SetOpenState` and `SetOpenState` have the same effect?
nit: this should not be `featuresType.fields`
can you move this to its own function so that we can call it `GetEx`?
Why are we returning 1? I'm not sure we can use the same condition for the new `&hdfsAsciiSourceData_[attr->getNullIndOffset]`
Can we just have a helper function here?
I think you can remove the `:dmptemplate_id` part and `:dmptemplate_fluent` here
I am wondering if we should make this take an explicit `default/unsafe` to avoid any security concerns about having two arguments that are identical to `cache.lookuptable`. I'd be fine just fine if we don't make this change since we can't change `cache.lookuptable` at all, but if the latter, it could be a little more general to say "you don't do a change change on a text of the element."
Why was the year added?
`_freopen` is already defined on line 233, so you need to call `_close()`.
I would call it "Grating cheese".
I think this can be removed
Should we also check if the `set` attribute exists for `nil` instead of `int`?
This is the right way for the random resolution to be compatible with the C# Windows host in the past. Maybe we should just do a `operator.platform?` instead?
Hmm - this is a breaking change. I don't see any use of updating ``set_format(...)``. I'd prefer to leave it as is since this is a breaking change, and it's not a breaking change - but just a thought.
We should keep `T` as `IEnumerable<T>` in this class as well.
Isn't this going to make it a bit easier to just `1` for an integer? It's also more like `1`, and it's more clear what this `0` means (or something like `1`, and `2_LEVEL`).
The `?` and `?` are only added in the `dvc/utils/` directory. Why is that necessary?
Please update the docstring to include the other arguments.
Can we remove this field?
The correct fix here is `[0-9]*` and `[0-9]+)` (because there aren't any other changes in this file)
why change the default value?
Why do we need this one?
`FLAGS_data_path` is a very confusing name. Is `rm_FAILURE` a better name? I thought we'd never return `None` in this case because it seems like "returning empty" is a good name, but maybe that's something the plan for me. @robertwb do you remember?
`handle` is a valid name. I'd be just fine with it here, as it can lead to unexpected results in the same method.
I don't think the `m` is necessary if you have `m` in the `Properties.Unmarshal` case.
@jridgewell This change breaks the code for `vendor`, but I think it's a good change to be to change `vendor` and `tpb` as I did before.
What about 2 (not 1) spaces for indenting an expression spanning multiple lines?
do we want to add these to the `conda/develop` interface? If they do, then we'll need to make it configurable.
Is this intentional? It looks like the changes below are the only changes to the website, so it should be reverted, and not here, and it's not needed anymore.
I know it was already my preference, but can we get rid of this check and just change the macro in a single `return` statement?
This might have been a bug, but I'm thinking that we should probably just not return the `nilkeys` variable here if this is a `nilkeys`, because we're doing a `nilkeys` in the map map, and it seems like it will be a no-op, even if the object has a nil pointer, so we should never actually be doing it. We could just return a nil pointer to a nil pointer (which is a nil pointer) and then then we can return the `nilkeys` object. I think that's fine, but we would have a good idea to do this.
Can you make a `contextLock` argument in a `AsyncAsync`?
Why do we need to add these properties here?
I'd rather have a test case for this.
Why is this part of this PR?
nice. I think this test is not really testing what the `/help` test is about
This change seems unrelated?
The method `TiSession getSession()` is called only once, even if the session was created.
Shouldn't this be `Uncaught`? Or should it not be exposed with the other `<` methods? And then `addConfig` would be fine to do so with that?
Can these be removed?
Should this be `ServiceAccount *string`?
Is this a bug fix? If not, we should use a `setUseAlpn` instead
This file is still not in Spack
I think this can be `constexpr;`
This was the main change in my fix. The player object is not used in this PR so I moved these functions to another one.
Why this change?
Do we need a separate flag for this as well?
I would prefer to keep the previous implementation more explicit, e.g. `include_names` or `include_names`
`TestWithErr` is used in a few places in this file, I think we should add a new function to `TestWithErr`.
Could you make this a private field so it's more explicit and consistent with the rest of the test suite?
In the end, we should be able to use `gasLimit` instead of `from` for these.
@stephentoub I think we have some more refactoring here for `SealedEnvelope` type in the `try/finally` block and `Revert` methods.
Can we just use `dict(size, 3)` here? Also, is this a new concept?
This can be just `return this.viewInfo != null;`
This is needed because `attr_writer` always returns `True` if there's no objects in the objects
Why do we have this conditional? It looks like there's one more thing in the middle of the PR.
Can we update the docstring to include "Plural"?
This would probably be better as the `yield...` on `ProfileProfile` if the `receiveError()` does not exist.
Nit: it might be nice to import it only if this is imported before `from google.cloud` (or before `from google.cloud` in the `__iter__` import).
If `cancel` is not defined, it will be `context.Background()`
@franckczarek Can you confirm that this will break anything?
Not needed, it will be removed from `src/server/register_iface`
The same problem with previous change.
There are two different places in the same file: `TInstrumentation` and `TInstrumentation` are not supposed to be used here. Can you explain why the change was changed as well?
Is this still needed?
We should add a `fbo-plugins-files` method to pass in a new `time.Context` to `refresh()`, because the return type would be `fbo` if `time.Key` was `None`.
Can we just return `nil` instead of error?
I think you want `create_table` here?
How does this handle the same user with the old HIVE-group?
You should use a more meaningful name, e.g. `sprintf_info('foo')`, which will return `true`.
@ktrzcinx Is there any reason why this is needed?
nit: why the change of this?
@mrunalinikankariya can you use the KestrelMemoryPool.MinimumSegmentSize instead?
I am not sure we care. This is a good thing...
Line is too long. [84/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why this change? Is it safe?
Is this file still needed?
This is a bit weird that this is the new behavior for a different service, I'm not sure whether it makes sense to put a new one in the class. It would be more efficient to just do an `CustomizeNotificationService` in case there's a `getCacheNotificationService()`
If you're going to be considering considering your validation, you could change your validation and generate yourself by moving it to your new task and let the user know it wants.
shouldn't it be `type=` ?
Why is this not just a new function?
it seems we need to be aware of the `locally-disabled` here since it's no longer necessary.
I don't think we need this. The condition is not the condition.
The initial call to `LOG(INFO)` is unnecessary.
Can `new` be passed here?
I'm not sure if that's the best way to do it.
This is a change in behavior, but I guess it is still useful?
Wouldn't be nice to have a separate function in the `scope()` function. That way the ``is_scope``s are supposed to be used to be able to use the ``default_scope``, and the ``default_scope`` one.
We're going to need this to check the script is in the extension. Can we make it configurable and only set it if the script is in the `config` package?
why is it removed?
I think there is a need for a few of these extra headers: `load_from_save` (and similarly for other similar places) - how does this relate to the other ones? - Why the `load_create` method?
Why remove it?
This is not right to me - it seems like this is a bit of a code smell. We should not have to set it for every call in `go fmt`.
We should probably use the `MinSize` value here, and have a more specific `bufSize` for the `BaseTracerSize` type.
It seems these changes need not be here too.
Can we do a check on `setResizesEnabled` instead?
I'm not sure we need to do this now, but we should be calling `req.WithoutNS` from the code base. We can use `server.server` to get the `user-apf` and use a `processBuilder` in the `appendingTest` and do it in both places.
This should be `zfs` as it could be called from `authRequest`
nit: `reset` is preferred
This is a breaking change. We should probably be able to use `getSolved()` instead of creating an instance variable.
I am not a huge fan of "no-except-raise" for this, but I think we should do better than try-except-raise here.
We should only be setting Realm here to prevent the current user from running a password by default.
Should this be using the data-wide data file instead?
Could we also change the type of revision to SCM and the new type to SCIdentifier from the current revision?
What is the difference between this and the `_`?
I would prefer using the new keyword in `config.Setff`.
This is wrong.
Should this be `!ComIsTrafodionthisSchemaName(schemaQualName_.getSchemaName())`, to make it a bit shorter?
The current code is `<=` since it isn't very descriptive and more importantly, we want to keep track of the `Rest` in the code.
why not put it as a `List` field and avoid the need for `List`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I feel that you have to check for the `source_code` instead of passing it back to `a` instead of passing it in.
Could you please add a type hint that the string[] does not exist here?
Why did you add this call? We have the same in `metrics.ServiceLatencyDuration` below this, but it would be nice to use the same logic here for the other errors.
If we're not going to change this behavior, we should just change the `isodate` keyword from `format` to `format(attr, str)` here and put the `parse_date` above the `if` and `parse_date` above on both `format` and `parse_date` methods.
Why was this changed?
when can this controller be set?
I would make the FIXME operator into one dedicated case
This import is unused?
This should be a `Namespace` to match what's being passed in.
Why are we using the `Field` on the `AccessList` here and not on the `transaction`? It should have been done in a single place.
You should just check if this is the correct error.
nit: should we check for null here?
Why is it needed now?
This should use a different signature of `self` (not only when you have access to it), not just `SGEJobTask`, just for consistency.
You're modifying the DB and the DB table (which is not a migration) but this migration won't work as expected if you have a migration to change.
I'm pretty sure the `check_connection` function returns a boolean but it would be a good idea to change this to just the function return an array.
Is there a need for this? I'm assuming you're not using the constants here?
Did the test fail before?
This is not a "selectCastught". You could just put the "selectCastught" in the "selectCastught" method.
this should use the new Dictionary, right?
This is just a small optimization, we shouldn't have to add this.
what if coupon.valid? is true and what you expect it to?
in the case where the error is not "Message from server" then the error should be "Message from server" ?
Add link to SnapshotUpdate
you can use `Output(result, output)...` here
Instead of "expects data with ",m_num_labels," labels, ",label); then, how about "expects data with ",label.length", which is more of an "if" statement?
I guess we could make this method private?
Is this needed? I don't see any related issues when I merge
Use the new Ruby 1.9 hash syntax.
This is a bit hacky to fix the problem of the fix. It's a different approach. Perhaps we should just be able to use the same constant for the `BUNDLE_GEMFILE` and `BUNDLE_GEM` instead.
I think this should be `pepe.ContainsContainsContainsRune(allowed, r)`.
`WriteBatch` seems a little too broad. I think it would be better if it was a `Commit` instead of an `Write()`?
We probably need to check that `part == null` is set before we get a null check.
Should we update `_x` and `_site-kit` as well? I know this is a new API, but it is not needed anymore, right?
@bflad this is where you're adding the new conditional.
Can use a `GraphSummaryToolbar` instead
I would suggest using localstack.utils.common import conventions.py as the ProxyListener code is duplicated in the future.
This will be `time.Unix()` instead of `time.Now().Unix()` since it is the same for the other changes.
I think it's better to just make this configurable and have it live outside the loop
The same issue here about `spack external external`
Is this used?
This is not used anymore.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
How is this different from where it is used in the `getFlattenedValue`?
this is the only place where you need to be modified by nameof(key, nameof(key) in the code. I'm not sure it is necessary. It seems more like the error message is going to be a bit of an incorrect way.
Please also add the new copyright at the end.
I am curious about the `PACKAGING` in this file. Why is `ProductImageField.FRONT` different from the other one we have in the `ProductImageField`? The reason for not using the `PACKAGING` is, is it just for `UXX` and other `ProductImage`?
I think there are still some tests that fail to ensure that the container is in-process. This test is not working and will fail. If we want to test for each container, we need some test that failed, and we want to be sure that the container is not in-process.
It seems that this import is not used. Why is it not needed anymore ?
Why not also check `k8sSDWithNamespaces` ?
Style/MutableConstant: Freeze mutable objects assigned to constants.
This line can be removed.
Why this change?
I guess this is not correct, since you have no `Bucket` attribute in `CreateBucketRequest` below.
Is this needed?
I think it would be more idiomatic to just use a `getmanageLink` here, and then a `getmanageLink` would use the `getIcon` method on the `contentExtension` object (since we can't just use `getmanageLink`, because it has already been released). I would suggest we use the `getmanageLink` method here instead.
I know this is the main change, so I am not sure how much this can go. I'd like to understand it if you think it could be used for anyone to have it.
You've got a bug here, why did this change?
I think we should change `Topic` to `Topic.top`, but `Topic.all` is a little confusing.
This is a bug fix.
Is there a test that passes this error code? I would expect it to return false in case it is not.
So, this file is only used in one place...?
Is this a correct change? `equals` and `hashCode` look like something that should be called with a different type.
Is there a reason this is not set in the other two places?
NIT: seems like a better name. `Current` is `null`, `null`, `object`, `object IEnumerator.*`.
i'd like to have a separate option for the new indentation and the new indentation in these two lines
@lis2 When I got my own understanding of the code, I found that the code still uses the `err` function, which does not have `nil` value. Couldn't we instead do it elsewhere?
I think `import` is better here - it's the case that `test_renamed_message`, and it makes more sense to rename both to `test_renamed_message_register`, as it makes more sense to keep this consistent - `test_renamed_message` makes more sense - `test_renamed_message`, and `test_renamed_message`, etc - but I'm not sure what the best way to do about the fact that `test_renamed_message` is called from other tests in this module.
Why is this removed?
Why was this needed?
Is this a bug fix? Seems noisy?
Can we make this private and have it public?
Why is the above `else` necessary here, if we have a `if (!maybePrivacyGroup.get().getMembers().contains(enclavePublicKey))` check now? Should we check for other cases where the new `else if` block is added?
Why the change to the `JSONException`?
This will break existing views of the build system, so it would be nice to have this in the same `break` block
Should remove the annotation as well.
this is a change in behavior...
I guess the `isEscape` argument has a default argument and the only `get` is true here right?
you don't need these functions, just do it in the function
It's a little confusing that we were always doing this for everyone. Can we make it public?
I don't think you should create a new one. You should be returning ErrConnectionCancelled here, but I'm thinking we should change the function name and just use the name in the name.
I would not add `tm_cpp` as the name of the parameter. The type could be more generic, but you could use a `BaseTree.cpp` here instead.
Do we really want to make this a `String`?
We should also check this in the if statement below
@johanste @stuhood @kennknowles do we want this in here or do we have an issue?
shouldn't this be 255 and then we have the 255 below the `GetTraces` and `TraceTrace`? If not, can we change the type to be something more meaningful?
this is the actual fix. `subdir` will be set back as `lib/bucket`.
This is a bit of a question, but why are you returning a `List()` ?
I think you forgot to remove the old `Password` from the old `Password` key here
is this the same?
This constant is now unused. The name of a bit of a bit of a special name.
Should be updated to `Zep8` or something?
Missing period after the previous line.
I wonder if this should have a default for this. Maybe `expands_user`?
I would use a `cmdutil.utils` constant for the `isHidden` parameter, so that we can change the `isFocusable` function name to something more clear.
Hmm, seems like this could be an issue for that?
nit: I think we need to make this a private method.
The `next` here is no longer necessary.
I'm not sure it is better to add the `is_log_op` variable as a param to `if is_ops`?
This should be `parse`.
I would not use a different log level of error message here.
I don't think this is a good idea, we should probably check for `ConditionCondition` in the case of `hivev1.ProvisionedProvisionedReason` - it's the case that `s3.Condition` returns an error. It is not the case that `s3.Condition` returns a non-nil value (it has never been returned, and it was in the case of the check. I think we should check here if we still return error and then check for `s3.Condition` and return an error.
This is not right. `tab()` should never be called.
I'm not sure we need to do something here for the formatter and output target. The formatter should be just the formatter with the output target itself.
Should we also update the error message to include the `impl_access_error` information that this PR is made again?
Please remove unused `=` in `m`
is there a reason we are not logging at this level level?
Please update the doc here too (we can use the new Ruby version instead.
This fixes the same problem as in the `mentor_contact_link` table, which will allow the content to be run before the apost ended up being run.
this needs to be done in the cache cache, not in the cache cache.
why this import is unused?
Why are the other tests needed here?
Shouldn't this be a `Project_guard`?
Should we log at least log? (In the case where error == nil)
Line is too long. [87/80]
should be `application/x-shockwave-flash ?`
This was a bug. The code that was removed was the code that was never removed.
I think I saw you removed the last part of this PR, but it looks ok to remove it. The reason why is the "IResource" part of the `IResource` field not required.
I'm not sure about this. The default is an `Cassandra tls verify server hostname` because it looks like we are passing the `keybase-HOST-VERIFICATION` as an option. I think it would be clearer to just keep the default here.
`isIn` belongs in `List` class.
Shouldn't this be `el && broken.stdout.chomp =~ /root/ #don't need to sudo if you are root` here?
How about: `if nottype(body)`
@bartonjs, I have a quick look at this: we're now calling into ` along the 'last_split' function in the context menu.
Why are we returning an `Optional` instead of an `Optional`?
you should use `!empty(...) $media->getContext()`
This should be `Object.GetNamespace(Object.NamespaceId)`
Layout/SpaceAroundOperators: Surrounding space missing for operator /.
Just for clarification, is it worth adding a "dba" property and not its name? It's more descriptive that we have to use here.
@njhive is it possible the test returns a `TableCatalog`?
This is the wrong place for this, I think it should be `return 1`.
I think the `CreateCreateCertificateRequestCA` function is supposed to take care of this.
I don't think it should be `const index = excessDomChildren;` here, and the following `if` is `@Nullable`.
Should we add a docblock for this new argument?
I believe you need to remove this blank line.
This is wrong. The new version should not be run as part of the zip file, not in that directory as any zip files will be run if not defined. We need to run a better version.
This should be moved to the previous `if` condition as well.
can we call this `reader_reader` instead? This way it will be much nicer and easy to understand what the best way is
Please remove the extra lines
I believe it should not be here. We can do `!== null` to save the data and it is not actually needed at all.
Why not `public`? I don't see a use-case for this, so the name can be `public`
I'm not sure I follow the same issue here - the new flag `isRelation != _INTERSECTS` is used to check for the null pointer for _INTERSECTS right? I wouldn't do that.
I would prefer to see a test case for the new function. (The `try` block should do the same thing as the `except Exception:` block.)
Is this include needed in the Spack file?
Is there any chance that the connection is only called when the build is not null, rather than returning a `boolean`? It feels like it would be worth moving it to a new line, and we don't have to check if `CompletedTask` is null.
This is the only place where we need `!cd.Status.InstallerImage != nil`
This could have been a bug.
Was this intentional?
I think this should be `debug.debug("Listing of namespace [{}] resulted in the following tables: [{}]", namespace, tableIdentifiers);`
is this change related to your pull request?
We can make the `time.Duration.Data` configurable and make it a function.
`other 8`? is it intentional to use `Properties` as `SessionName`?
I would prefer if we can't do the duration here, since the `250 * time.Second` is always used
why not just add the log to the stack?
This is an example of how the link can ever be used, it's not a big deal but it was a mistake before and could be removed.
Why use schedule instead of schedule for this line?
nit: you could do `[return_project, project.TryGetTargetFrameworks() switch]`
why do we need this?
should this have been removed?
I'm not sure this makes sense. I don't think `false` would be needed. What if the user already exists in the `config`?
please remove this and use the default `default=false` to avoid unnecessary warning
So this seems to be the same as the default field in `/index/dev_test.py` right?
I think this `parse_user_can_edit_record` check should be removed.
Can you just add the `self._commands['ExecuteCDP'] = ('POST', '/sessionId/chromium/network_conditions')` above to the `commands` base class?
Should we do a similar check in `setTag`?
Is this a bugfix?
Can these lines just be removed?
I would have called this one `election.active` since that way the `if (block_a)` statement will be unnecessary, and the `else` statement will only be used in the `if (current_user != null)`.
This will be changed to `RegistrationManager.INSTANCE.getMicroservice().getProperties().put(DefinitionConst.INSTANCE_PUBKEY_PRO,`
This is just to make it more readable for a lot of public methods
This is a change from `as-is` to `as-is` to match the public API.
This is also not the case. The value of the verifier happy was the result of this function, so we're now just making it a copy?
Why is this one `Stateful`?
What do you think about adding a default implementation for this method?
This is only for testing.
this should probably be removed as well
I think this was the reason why `frame()` was here before `node.frame()` was being invoked for a while. But I'm not sure it is worth it to be able to see how `node.frame()` is used.
Can't this be changed?
Do you think we should make these events and not have them here?
Can we move those constant up so that it's not only called for the session?
Can you add a check that the path will still be set to -1?
should we remove it entirely?
I'm curious how does this work?
This should be done by `this.let cb_`.
Shouldn't we make these `prefMobileUpdateAllowed`?
Why is this change required?
Please add `//` to the end of the string so that we can easily get rid of the `ContextWithHeaders` option.
(style) trailing whitespaces
@kargakis I have added this in `pkg/config.ini` as well, but I don't see why this method can be added outside of this function.
Could we add the new param as a constant, e.g. for a future PR.
Is it a typo?
nit: `edit` is unnecessary.
Don't do this here.
@mjkkirschner Is this the correct behavior for the window's every duration?
This is an unrelated change.
Why have the same range as `minusPlan`?
Why was this removed?
Should it be "8080" as well?
`ANDROID_NDK` is only applied to `ANDROID_NDK_HOME`. So this change should be reverted.
I think the `if (stepSpeed < 0) is sufficient here.
could probably just use `.empty(name)` here?
Why not using the isset function directly?
This is going to cause the `String.isNot()` check to fail (with an empty `boolean`)
I would prefer to add it in the header file instead of here.
This file should be updated to remove the extra space in this file.
Is there any way this line could have renamed? Otherwise, it will crash the wrong way.
Why is the default default now?
should the column be the "idx"?
We can't change the behaviour of "KafkaPIPI" here, but it's not really related to the rest of the PR.
I think it's better to make the metadata take the name of the variable. In this case we don't need to add anything else in the code.
I think we should do better than making use of `*`
You can't actually do any conversion here. The call to `at()` does `locator_list.end()`.
I think it should be `include '../../release.inc'`.
why not use `.spec.duration`?
I am not sure if this is the best way for the to generate a AbstractArchive
This seems like it would actually be a good place to just remove it. The only reason I wouldn't use a `parent` property, which has nothing to do with these.
Why does this method need to be overridden?
Why we need to do this, we could just return the result of `http.StatusGatewayTimeout` directly. The result is only used by the caller and `new caddyhttp.Error`, so the result of `http.Timeout()` is always `undefined`.
this should also be changed as well.
I'm not sure I like this change. I think you are trying to figure out how to do this.
I believe we're missing a space here between `spearman` and `spearman`.
I'm wondering how can this work if I have a `const char*` instead of `const char*` and a `const char*` (with `const char*`) that is the actual problem.
this seems like it's not related but we're using the "read" field. we could consider just using the "read" field for the `time.getState()` method.
This should be done via the `IsHttpClient` class, otherwise it will be ignored for every call that uses it.
Why this change? I think the `sqlsql` should be in the same format as the timestamp.
I'm wondering if this should be `return 0;`
Should we be checking both `var SupportedDiskType = map[string]bool` and `var SupportedDiskType = map[string]bool(string)` instead?
This is the main change.
@smarterclayton do you think we can have this as a check on the `ClusterInstallRef`?
here too I think we should not change this. You can simply use a `semantic_ndarray` or `semantic_ndarray` instead if you want.
@citibeth This was the key of my key in the main branch, but I don't see how this key exists. I don't know why it was written as part of the key, but it seems weird to me.
I think the idea behind this is to log an error instead of throwing error.
I think this should be `init_profile`, right?
Can't we just use `hasReceived` instead of `result.resumeAfter`? Then it will be more clear when creating two lines below.
I think we should move the email controller to a separate view
I think the `if` should be removed as well.
Can we make this `final` instead of `@param mergeContext` (or something similar)
This should probably be `>= 1`
Can you make `import *` a `@param` block for consistency with `import *` and avoid a `assert` block
Why not just put this on the line above the `const` and `const` in both the `inline()` calls?
This should be just a warning and should be fine. (I think we can remove the "UI" part.)
Is this really necessary? I'm not seeing where this change would make sense
Is there any reason we're not hard-coding the import here?
I would recommend removing this `use` statement and not `Config` as well here.
This should also be in <see cref="ISpanContext"/> as the span is not inherit the currently active scope as its parent.`
Why was this added?
I would suggest to do a similar change in `pkg/api/gardener/types.go`
I thought we were missing a spec for this and its internal class?
couldn't you use `else` from constants like this? I can't seem to understand why this is a good idea.
Can you also move the `!` above this `if` statement above with the `!` clause above?
Why is this here? It is used everywhere in a module, so you should import it here.
I believe the old `TestOperationExceptionOperationException` is no longer required for this PR.
This should be the right way to do this. I'm just curious about the need of a set anymore.
We might need to do something to make sure this is a public API.
Why are we using the `IntegrationName` as a `public`? Is this the only way to optimize these methods?
This is just used to make recreating on every run. This needs to be fixed in the future.
Should this return true?
The PFS_RESOLVE_LOCAL check is already checked above, is it necessary to add a check to it before calling this? Or did you miss this?
I don't think we should include the host in the port here, it should only be used as a port, no?
I think it's not the right way to test that the new one doesn't get rendered, and we probably need to test that the new one doesn't get rendered.
Should we add an example where cache is used?
Why is `unsorted()` necessary?
I'm a little confused how the path shouldn't be here. It's going to be a file system property which is a file of packages that were passed through from the directory. The `_file` param is used in `./pants lint`. If you do a file system property, please use a directory like `file_exists`, and `file_exists` to determine which path to be passed.
I'm not sure about this. The environment variable is being used as an optional parameter, I guess it's only for the "dev" environment variable. Is this something you want?
Why does this need to be changed?
Do we need to call `clearComputedProps` now?
Shouldn't this return a `Config` as well?
Please revert the change from original PR
This is a very brittle change, can you please add a `TODO` or a `TODO` here to prevent any confusion? (I know you're not really doing it, but we're trying to move the code in it)
Can we use `IsCollector` here rather than `IsCollector` ?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
We use the same pattern for the `./pants help` hook.
@teonbrooks this was a typo.
I don't think we need this property here.
why do we need a new field for this?
why did you remove these empty lines?
I added a force: true only when a table is set to `name`, so if we added a model to the DB we have to update it here, we'll get a lot of problems with the schema that's set to `created_at` (e.g. "user_name". I think we should update it to reflect that.
This is a bit scary, but I'd prefer to have the naming consistent here...
This should be a `private` constant, I think.
nit: this test is not supposed to be tested on Windows so it can be moved to the "stream/stream" test (or whatever it actually is).
Why do we need a new constructor here? I don't think we should.
These 2 lines aren't necessary.
this was a bug, right?
Why did we need to update this?
I think this was a bug, since you're changing the default behavior, but if you are not doing it, please add a `@classmethod` annotation in the docstring.
this was a bug, right?
How about move it to a constant, since it's used by default?
Doing this as a separate commit, I think that we should be careful about that. We need to check that the item does not exist in the UI and this is only for globalize if the container is available. It will be safer to use the globalize to see if the node does not exists.
Why is `false` changed to false?
This is the cause of the issue - we're now dropping the call right?
This is the only thing that is not being used, is that right?
you're changing this to use the `get_config()` function, you don't have to do that.
Did you intend to test this?
We should also check `data-'` in the `isset()`, if the `is_lazy()` method returns true, then we should check that the default values of the same property.
I wonder if we should make this `using`... it doesn't seem to be correct for me.
Can you explain why the second clause is needed? `.sort` should be enough?
I'm not sure why these are all here - can you add these as constants in the code?
This is unrelated to the PR and I'm assuming it's ok for the fix?
I'd like to see some return value of `p->mp_impl != nullptr`. It seems a bit of a weird to me, as this isn't just a string value, and the return value of `assert` doesn't really matter.
why did you change this?
Do we need the consumerIntf flag here?
This seems too broad.
@deads2k @sttts @jihoonson - can you give more information to this API? I don't like it. I don't think I understand why we're using this to use the `index_clip` API.
I am not sure what this is doing. I would say that the `sync` module has the `sync` module, which is not the case here.
why did you remove this?
This line is not needed.
Use `Extension` instead of `/>`
This should be `import vulnerability`. The `string` package already checks for `string.py`
Why is that? Isn't it a valid value, but `.h` isn't a valid file, and we don't have to fix that?
should we make this a boolean
This class is no longer used
Can you use a TODO to remove this?
why remove the infinite loop?
Just for my understanding: why do we not want to add the write message?
This used to be `import Rlect asreflect` for backwards compatibility, I think we should just change the import to `import (executable,reflect,unsafe):`.
this is not right, we need to check if the user doesn't specify the DR_MAX_OPTIONS_LENGTH.
This is no longer a test - so I removed the `.scoped_to` here
This requires_grad=True. You should be able to use `_cfg_te_eval=True` to avoid confusion.
`encoding` has a method of `enumerable`. Should be `encoding: true`?
This looks like something we should probably get a copy of the `for (; begin == end)` check as well.
This is an overkill. Why is the new one not passing the event? I don't think that's the right behavior.
why not using `default` here?
I'd remove this and use the `delete` variable name. It would be more confusing when we actually add a `Theme` field
Why use `string.emptyList()` here?
why the change of this?
This is wrong - I think the `topic` class has the `getClass().getName()` method that takes a new method and returns a new one, which is a map.
I think you are missing the return and you don't need this.
This is a change in behavior. We need to keep the logic here.
The `BasicBlock` is used in `register_module` and `register_module_module.py` files, so the `OrderLayer` imports can be removed now
This method is not covered by the methods, so we can remove it.
I think we can just get rid of these now?
This is an important change that is needed for this branch.
I don't think this is a very good change. The `createElement` function returns a `null` value and not a `index`.
can we make it a global?
This change is not in the description of the PR. It is a bit weird.
This is a change in behavior, but the code doesn't actually test anything, right?
This seems like a regression. Is that intended?
You should be able to use `errors` here as the goals are not using `List`
It might be worthwhile to have the error message as well
This class and method should go to the interface interface, since you're only doing the interface for admins, and you might as well fix this with the other similar methods.
`self.fetch("/options")` is `False`.
This looks like you'll have an opportunity to add to it in a new PR. It doesn't have to be in the long run, but you can't add it to the habit of doing it here.
This file needs revert to master too.
Can we call this `DEFAULT_ester_limit` since it is a public getter?
@mfojtik trying to understand why this is needed? Why do we want to allow the ambient parameter to be the same as the other threads?
I was going to say the text was correct but not part of the form, so it's not required to be included.
How about we use that instead of calling `in_moveQueueItem`?
Is there any reason why you don't want to add this to both this and `libbeat/`?
This looks like the error should be changed to return the `debug` error.
Use `<%_` prefix, not `len(new)`.
Why does this need to be removed?
Shouldn't it be `NULL` instead?
What's the difference between the two?
This is a very common pattern, but the default value of a default value is very long. It is used for the default value to be zero, and not a boolean value.
I don't think we should be doing this. If the feature is indeed being created, we should use the default. The new feature is used in the old looking at the code, and we don't have to worry about it to work well with the old buggy Credential.lowestOutput function.
You can just set `ImmutableMap.of(..)` directly to `ImmutableMap.of` here. No idea how to use the `Schema` method in your code.
I think we should just make `let` the result of the `searches` and remove the `let` inside of the `const` and `const`.
Can you change the order to use `ABCDEFGHIJKLMNOPQRSTUVWXYZ` ?
Is there a reason we are removing this code?
I guess it should be readonly as it is not needed?
Are we sure this is the right change? The call to ITEM_USE_ON_WIDGET is still being called when the option is not initialized? The fix should not be to just check if the option is disabled.
I thought you would like to keep the naming consistent?
this will be a temporary variable.
Should be on the previous line
I don't think you need a check for "app-type" as this is the default.
Is it possible that ePoStInfo is not an array, with a data for the underlying underlying status? If not, we should have a proper `json:"ePoStInfo"` that is the string, or should it have a `try-catch`?
Would be nice to also test for it too (I see no way)
Do we want to expose a default?
This should be moved into `ThreadAgnostic_method ` too, right?
Should we make this a warning for "English"?
Wow, I think we can move this logic outside.
Why was this changed?
Same as above, use the `config.mld_storage_path` constant.
I don't believe the `Stop` function has gotten a little awkward, because the function returns a bool (which will return all the `new.go` and then you could use the function in the `new` method)
Is this change intended?
It's not used?
We can also use `current_user.dev#status` in the message.
this will cause an NPE on Windows, not sure if it will be needed for all of these cases
This was the only change that works with `_create_asset` because we are still creating two configs for the `else`. The reason for it is that if it isn't the case, then we would have a single `save` statement in that case.
How are we making them public?
I would use a shortcount here instead of a shortcount.
This seems unrelated, can you add a separate doc for all these cases?
Could you add a return type here to ensure that the buffer is removed?
Is this method used?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Should we make these configurable?
I think you forgot the double space after the `if` and `else`
why did you choose `max_edge_returned_per_vertex`?
This could be a function to make it clear that the `HermesID` is an `errChan` (or the) `hermesID` is an `hermesID` function and can also return a boolean if the `Warn` is not set.
Is there a better way to do it here? `pull_interval` sounds like a constant for the user to know what they're for.
you can delete this line
I think we should use `getValue().anyMatch()` instead.
What was the reason for this change? I'd prefer to have the same exception, just in case
I'm not sure if `certificate` was the right error.
Shouldn't this be an optional param to the one from the one defined at the class level?
This change is not related to the fix, but it was a small bug, and now it was a bunch of other places in the PR. I think the PR would be to move out of the `if` blocks, but the `if` blocks are not needed.
remove this line
This should be set to `false` by default since we are now only checking against old `primary`s.
I'm not a fan of changing the implementation. Can we have a `Class.null` and a `Class.null` property that can be used in both the `Class` and `MIN(..)`?
I would recommend using a method `isNullOrEmpty` and a method called `getValidatorsForBlock`.
I think it would be more consistent if these were `found_opts` and `opterr` were `0` instead of `0`.
I would move those lines up to the top of the file, since these are only for the `bulk-edit` components.
Is it intentional to use `<div class="googlesitekit-logo googlesitekit<mini">` instead?
I would suggest we put the prefix in an `else` block, as it is the default.
This is the only change I see. The original code is actually testing for `__future__`, so I think that it should be in this file.
Please rename this to `DATASEC_RARELY_PROT`.
Why is this removed? The `recreate` call below is used in `Task.jit.planner.plugins.create` which is why I removed this.
this is not needed if we make the test fail
Why is it removed?
`isTrue` was missing here.
I'd like to see a more proper name for this field. The only way to have an external action would be to use it is in the name, and have it take care of it in `_` or `_`
can you include the other includes in this file, and the includes in libbeat-specific files too?
Can we call this `NewUpgradeTaskJob`, `init` or something, or something more specific?
Is the `glibtop_init` and `glibtop_get_mem` guaranteed to exist on all platforms or just the mem-init-init?
Is there a way to make this more readable in line with the other methods?
I think the sequence number should be `@return this for method chaining`.
Line is too long. [86/80]<br>Use the new Ruby 1.9 hash syntax.
Why not use `use TYPO3\Runtime\erve\` here and remove it?
I think we can get rid of this too.
I guess we should just delete this?
Why are you doing this?
Also `//` is a `contains`, and `f` is a `string`.
@jridgewell This is not needed here. We have a new test where we pass `photoUrl` and `downloadProfilePhoto`. I'd rather not have a method called `downloadProfilePhoto`.
Why did you change this to `?string`
(style) trailing whitespace
Please update the `tabbed_browser` field here to make it more clear what's going on.
Why we need this change?
@jackfrancis , you have to check this as is before I think. It's not worth this.
It's not clear to me why `black`, `black` and `black` are different. It is just for consistency, but it's just the same problem.
you should not delete this line
What about `switch`?
I don't think we have any other way around here. Can you add a `.pants.util` here instead?
Isn't there a `--CACHE-ENABLED` flag?
This test was failing in CI because the test failed with the new behavior for this.
I think this should be the one in the middle of the Zookeeper.
Should we add a `json-default` parameter to `application_default_credentials` in `config.application_default_credentials.json` instead?
Shouldn't this be `<= 0`?
The convention for this and the line below is `require('classtool')`
Should we do this in a `pkg/util` package, since we do not expect `os.Getenv` to be called twice?
You've added this line to the top with `.split()` in `spack.xml` file.
In some cases we are going to use `config.Overrides` as a result of a `config.Token` (which is a valid scope)
Shouldn't this also be on `/o ControlPath` ?
I assume this is for debugging?
I think it makes sense to move this to `System.env.py`
@JeremyKuhne might be nice to have this in a separate PR that makes sense.
This method should be called in a helper function.
This could potentially be a user'sAuthorization method, but that's probably best for a later PR to do with that. I think it makes sense to do more than that as a user that is just a user.
Is this `Function<? super List<T> predicate` necessary?
The Java version is `org.apache.commons.lang3.StringUtils.toVersion`
I think we should use `string $name`
I don't think this is really necessary
This file is for the `conda.common.utils.types` file. I would not add the `.utils.types` file in it.
Why was this changed?
just realized that we have `self.get_sort()` in the `config` constructor.
@tgamblin What is the reason for having a `only_localstack` be used for?
I would just replace this with `$sliderItemData->domainId`
Can this be moved outside the for loop above?
I think there should be more than one query here
nit: let's call this function as well
I think we should keep the `AM.Error` as it's going to be a breaking change and should not be a separate change.
Why the check?
@agramfort I found that the error message still needs updating too.
Is the idea enough to check that the frame is not a valid element so we can use that instead?
I don't understand what this is doing. I think it is better to just change it to just `TestClient` and `TestClient-` to be consistent with the `handleFunc` in both places.
@shwstppr This change was not needed. This was the only way I did it to pass ` 9` instead.
This will only happen in `DeadlineExceeded` because if the context is empty, the context could return an error.
nit: don't need this extra variable
I'm sure you don't want `1` here because the `if` statement is not doing anything else. If you do `if leave leave leave alone in the assignment, you can remove the `if` check
Lint/UselessAssignment: Useless assignment to variable - value.
@cramforce is it possible to create the local variable options directly and set it to `undefined` here? I'd rather have it be a good time to create this variable into its own field. I'm not sure if it's possible to do that in the future because we are not using it elsewhere and I think we should add the `variableOptions` field to `variable` to the variable options.
nit: I prefer _Unless_ the name of the field here, it would be more consistent with what the field type would be.
I don't know what this line does. The original code is correct if the directory is not directory at all, but then the file is not directory at all. IMO, if this line is not needed then it is the same as before. And if it were, why not remove it?
I don't think we need this, since it's not a user-facing package.
Shouldn't this be removed from the api and from the api?
Why is this change necessary? The reader version 2.8 tests are failing because of the cast to `LOG(WARNING)`
This will be a bit hard to follow, but maybe you can move some of the new `query_OROR_TYPE` logic into the new `query_OROR_TYPE` file, so that it can still be a single place?
I think this needs to be added to `BaseReplacePartitions` instead. This should actually be set in a new state.
For this and the other similar ones in this file, this is the only one in this file: `if len(isUnsafe) == 'WebDriver::Remote::OSSBridge)` I would just remove the `switch`
Why the drop_up_user is removed?
How can this ever happen now?
Not sure I follow this, but you'll probably want to make this a class variable
nit: remove the TODO?
Should we also check if LARGE_BYTES is an int?
I think this is not needed any more?
this was only needed to save the new addr in the container, and not the next time the container is started.
Why is this changed?
this is the default for every request?
Is this really necessary? It seems to me that `spawn2.version` is the version that's passed to this object (i.e., `version` is the version set to `-1`)
This is not a valid value, it is used by tests. It seems to me like it would be good to test the timeout value.
You could remove the logging. It doesn't do anything
I think it makes sense to have a test for the exact `SessionStats` attribute in the name to make sure that it is not used by `PythonStats`?
why not `newTopBlock := topBlock.DeepCopy() || topBlock.DeepCopy()`?
Perhaps we should use `org.apache.commons.lang3.BooleanUtils#equals` for this new parameter?
I thought the controlModifier was a field and it seems we should be defaulting to false here and in order to remove the lock from the config?
I'd rather we have an `if video.topics` here, as we might not be using it yet, but we don't need to have `t` it in the view
add a note for this (and probably in the other PR too)
Are we sure this is the correct spelling mistake?
Should we make it a pointer?
I would suggest moving these properties to `updateFlush` so that all usages can be private.
Is this the right term that you want? The autouse is not the default, so I would suggest using something like `fake_save_manager.unregister('a-22: device not open')`
Style/MutableConstant: Freeze mutable objects assigned to constants.
Why this one has to be a local `\n` and not just a string.
maybe `defaultdefault` should be a little bit more descriptive?
I am not sure if it's worth mentioning that the name of the container is correct. It is only used once in the test suite (i.e. in the future), and if there are any tests we should change this so that the container is not available in the same package and only on every call. Or do we want to call it just once when we're in a separate package?
Does it make sense to have a separate method `SetupKeyStore` that does the actual `ReviewBlockTree`?
Why `Code` is not needed anymore?
Is there any way to avoid the query directly?
Is this a BC break?
Do we need to check `!DirExists(opts.project_root.c_str())` or can we just remove the `if` condition?
Why do we need this new argument?
This should be done to avoid `return 0;`
It's not necessary to add the new `errors` here as well.
I see we were not checking for null here... I would have thought about that, if you don't mind to make it explicit, it's ok.
can you please rebase and add a proper commit message?
What does this mean?
Why are we not just sending the impl impl directly on the `net` interface?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
why this one is removed?
There are a number of places in our code that might be changed to name/cms::theme.active now
Why wouldn't there be a `role` here?
Should we log something here so that `Key` can be called by multiple threads?
Should we also add a TODO about how we have more context about this?
Why do we want to add the `.Rune` here?
I don't think it's possible to use a hardcoded path here - if it's not there - is there any way to do it at a minimum?
We're changing the package name of the command, so you should just change it to something like `install` or `install` or `install` for consistency.
This should probably use `.copy()` here.
This should use Math.max()
please change the copyright header to be including the file name.
This is the only place I'm going to use this.
I guess we could use `info['reason']` instead of `raise Exception(", ".join(["fail to run task {0} reason: {1}".format(failure['arn'], failure['reason'])`
I think it would be cleaner to have a method for `len(self) == 0` and `len(typeof(typeof(target, callback, action='foo')` in the constructor of this function, rather than passing an argument to `Request` so you can just pass a `target` argument as an argument to this method.
I don't see where there's used in this function. If there's some reason it is, I'd prefer to leave this in.
It was added here to ensure we don't use it anymore in the future since they are the last time the navigator object is asked for the QueryLifecycle object.
I think this may not work, you may have `CloudMigrateDriver` in the test
Can we put this on one line?
I belive that the number of arguments to ``. Can you explain in the way this is correct. The `ErrErr` is now an `Error` and the type was only being used in `ErrErr` and it was not the number of elements in the past.
This seems to be the only place where we're catching the `_` in the `else` branch. Should we do something like this: `gallery > ['cpu' &&torch.long, device=torch.current_device() > ['cpu']`
I don't think `Rlang_sec` and `Rlang_sec_incdir` can be removed.
This should be a `DataFile slimCopy`.
I don't think you want to have a null check here, since there will only ever be a value when `keyValue[0]`
Hm, I don't think `item.file_type` is used anywhere else here. If `item.recording_start` is present, we should not have `item.recording_start` twice.
@chirimoya What do you think?
This should have been removed.
remove empty line
Why is the dict not a dict? I think this is not an error message right?
Shouldn't this be a separate patch if it's not a function?
Please use `@exampleBy`
Is it possible to put `aqua_teen_hunger_force.quote` in the same file?
Not sure if we should change this to `if (metricsConfiguration.isPushEnabled()) {` and `if (metricsConfiguration.isPushEnabled()) {` as we do on line 468 instead of the first line of this file.
I think this should use `self.num_ins > len(inputs) or end_level`
This seems to be the only place you'd use this. Also, I think it would be better to just pass the entire `long` object.
@ruflin @lisyan please remove this line.
We already have the new transport's RetainPeer class, right?
(i'd prefer to keep it as it was)
Why not using the version 0.9 instead of 1.0?
I think you mean `nonblock` here?
nit: I'd prefer to avoid use of the wildcard for code blocks.
Please change the sentence "end" to "end"
We don't need to do this anymore, right?
@tgamblin Is there a reason to keep this method?
Can you make the commit message more specific?
nit: can we make the name more descriptive? `config.add_api_capability_config`
This should be `package.Value.empty?` instead (or `None`)
This method doesn't need to be inside `GetSecretFromASM`, as the secret doesn't use the `secret` type anymore.
Again, no need for these #endif anymore.
Shouldn't this be `fs.unlinkSync('network-audit-results.json')`?
why not just make this a constant?
Please add the `*` on all the classes to this import and use that in the `NamedSparkTable` interface to keep the diff consistent with the other changes as the diff is not obvious from it
If there is a different value, this value should not be added to the user.
can we make this an `IOException` instead? I don't think we can make the method private.
We don't use email_violations for a system property. It will still be a good idea. It can only be changed if you use it to get other code from other SDF. It was not added for this PR but we should have a fix for it
Probably should crash if bad format string
Should we also use attach_case here, since we are also testing the new API for the next pull request.
This might break some day. I think we'd want `set closed` for the same reason as `set closed` for the same reason.
Is this needed?
Should we keep it as package1 now?
isn't this the same as the one on line 167? if so can we rename this to `raw` or `cmd` as well? I guess `X` is a little weird.
This change is not related to the issue, but if we are doing this, we should use an `_find_violations` field instead.
can we just set the page size here?
I think we can remove the first `if` statement now, since the `current_user` logic is in `User`
This might be a breaking API change, but if it's not possible to do this in a different PR.
should we have a test for the error case?
Can you change this to just the file, and the other files?
Shouldn't we be setting a `TestCaseHandler` to true?
I'm not sure why this is needed.
This looks like a leftover from debugging?
Can you please add a space after the closing paren here?
This would be a good place to put the extra `Exact Match` part in the `fmt.Printf` method.
Please rename to `FileSizeChecker`.
I think we should just remove the `axe.commons.dom` and `split.parentNode` test altogether.
This change is not needed, we are already in there
This will not work if `p` was null
Is it worth it for now?
you should also remove the `createAutocompleteQueryBuilder` method from the parent class (which should be a `DataContainer` object)
This fixes another bug that was fixed when we were already writing up a view to it, and now it's not in this commit. But this was not correct and it's a bug, so I wanted to ask @agramfort
Why do the `htmlFor` section get removed? It looks like it's only used to store the attributes in the form? If so, how about `<Column>`?
I guess this should be inside `desktop->xcursor_theme = wlr_output_layout_create()`
I'm not sure that this needs to be implemented as the compiler. It seems to be the only place that will be used in the application. I think it would be better to make these properties `uint64` and `uint64`, for example, for the `uint64` and the `uint64` and `uint64`.
Perhaps we should move the condition to be before `self.initialize_plot()` in here?
I would put this check in `winUser.getDesktopWindowHelper` and put the `if hwnd == winUser.getDesktopWindow()` check in `winUser.getDesktopWindowHelper`
I think it's not an issue for this, but it's still true that the task task task task can not be limited and the status would be limited to the caller of it.
I wonder if we could make these `tierIndex` vars into something like `MAX_VALUE` and `MAX_VALUE`?
I'm not a big fan of doing this, but if we're going to make a new function for it, then this can be called outside of the `Index` module.
I'm not sure how to do this, since we are using `AWSMachineProviderStatus` in the `goimports`.
Can we remove the `@Deprecated` here?
I think the `no_field` function could use a more meaningful name for this.
I assume this was just for testing purposes?
Good catch. If this was a bug then should be moved to `reset_reporter`?
I think `header.getBaseFee()` is the more efficient name for the `StringList`.
I'd move these two into the `System.iom` and `System.Generic.IDID`
I'm not sure this is the correct thing to do. If the "ec" part of the operation (and the "sErr" operation) is not set in the log message. If you don't want to keep the operation as a warning, you'll get a lot of data.
I'd rather not change this part of the PR.
Is it possible that this code will be executed once a non-`time` block is executed?
I'm not sure we need this one, but we have it for the other attributes.
I would prefer to see that `result` is always `True` here. It is hard to follow what is happening with `result` but that's a bit more of a convention.
The `if` is unnecessary here.
this is not right. Isn't this going to create a new method?
I'd use the `parseDev` helper for the `manifests` part.
Why did you remove the second comma?
This line seems to be duplicated to the other commit (not just a cleanup access).
`sql-server.query` was previously used for the test, right?
Does this change need to be a new commit? I guess the tests are failing because of this?
Why is it here? The sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample sample5555555555.
Line is too long. [87/80]
is it expected?
Is this used anywhere?
Remove the `!=` here. If not, it's fine.
I think that it would be more appropriate to just use the `-u` prefix here as well.
Is it possible to use the constant from `string.stream` and remove it, or is this necessary?
I am not sure this is true anymore ?
This seems like a good use-case to make it clear that the package was actually `org.glassfish.gmbal.ManagedObject`, `org.sun.org.glassfish.gmbal.ManagedObject`.
Put one space between the method name and the first argument.
This is the `MinVersion` and the `version` command should not be part of the `version` command. It should be `config.file` and `config.filefile`, not `config.file`.
We can simplify the code here to `import static`.
We should probably also pass NULL as an argument for this case.
can you change this to `type Handler`?
would you please explain the reason why the extra `smtime_r` change was removed?
This would be better as a `HasSuffix` method that returns a `opts`.
Can we use an enum for the string?
Are you sure you want to add these columns? If they match, the migration won't be applied.
This should just be `if os.path.expanduser(filename)`
I think this should be `Skip` for clarity (i.e. `now: 80 characters`)
don't think this should be used
Can we just call it `Region`, if it's not?
Please use `@develop`.
This is not the case for the user's default implementation. We need to make sure that the user doesn't specify the implementation yet, right?
This will break all existing functionality if the new functionality is not set.
Is this the same as `str(self.get('version', self.JMETER_VER) < ('3', '2')`?
I think we should change this to just `DimsDims zeros(..., zeros)`
I don't think we should be doing anything here.
Nit: `error` is redundant here, and `error` below are unnecessary.
The `use` clauses are not used anymore.
I would call it `setFeatureTokenOrActivities(App2)`
This is needed for the `currentPodName` to be used in the main `destinationNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonVNonNonVNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNon
I'm not sure this is a correct change. It is a minor change in this file.
Shouldn't we keep the original exception if the return value is `null`?
Can I add a proper class name for this, I think?
I don't think we should be adding these to the `go list` log. We could just remove the `... input` in the `lib/go` file since we have the root dir in the `os.Stderr`.
Should we add `Run()` here to keep the same behavior as `InternalContext.TraceContext?.RootSpan` ?
Please don't remove new line. I think you can just delete all the changes here.
do we need a separate test case for the new behavior?
Since it's only used in a single place now, it's better to make the default setting more generic.
Not for this PR, but we might consider moving this logic out of the `prohibited_` section and just using `prohibited_Console` to the top of the file and then doing it in the `_prohibited_` section.
this seems unrelated to the fix and should be merged in master, it seems to be a bit more refactoring
Is the `g.Color` part part of the name or could it be renamed to `g.Color`?
The `if` should be sufficient to keep the else-block it, as it's a variable.
I'm a bit confused. Is `.copy()` used?
How about we change the way `testAllStoreRunner` is a `HttpMapMap` method to handle all 3.0s with `testAllStoreRunner`?
So, the old watchdogSendMessage already contains this feature in the call to `location.top` (and the new one)...
What if there is an error for that `fs.Config`?
Should we have a separate commit for that?
I'm not 100% sure this method is actually used?
Shouldn't be changed to `github.com/docopt /docoptgo` or is this part of the import of the file?
What is the change to remove this?
Nit: this line is unnecessary.
You can do `_method(name = constructor || !ord_method(name))` here
this is not correct. It will be changed to `./gradlew/py3/fixes`
Why the name change?
This test is not the only test. It is the default value of `false`.
I think you forgot to change the `if` here, it's just me, but you are missing a `if` in the else here.
why do we need to check `attrs == nil`? Shouldn't the `createNodeAttributes` already be set by `0`?
@jridgewell I don't think this is a good idea, as I'm not sure this should be an object, but we should use a property to specify a list of items in the future, I'll let it be.
Should we make this a constant?
How do you feel about having a `_state` function that is used here? I thought the original behavior was to use only one function (i.e. `_state`, i.e., `_state`) and then all of them are actually used.
I don't think it's worth mentioning whether or not this would be true.
The allowedPostRequest implementation doesn't need to check the `PostRequest` implementation, so I think it's safe to do the check for `if (req.getQueryString() != null && allowedPostRequest(req)) {`
This will make it clear the value is null. Do we need to keep this in the API?
Unrelated whitespace change
Use the new Ruby 1.9 hash syntax.
Is there a possibility that the http name should be renamed as well?
This can be removed from here.
is that a typo?
Why is this change required? Is it related to this change?
I think you can just remove this new line and replace the `if {}` with `padding: 0` by adding a new line.
The default value of 0 should be 0.
I think you meant `ff.Close()` here to check for an empty string
This should be `this.`
Can you add the `bool` check and add the call to `OutInterface` directly on the `Action`?
Should this be ` getProducers`?
Why not set here and not create?
Please rename to `quorumCompatibilityMode`
This should be a `@cancellation.new(subscription: current_user.subscription)`. It's a good thing to call it.
Is this import only used in this pull request?
this will be the only place where we need the magic string. The rest of this file is to have the `tx-sdk-s3` field.
I think it'd be nice to test that it didn't fail before.
Why did you remove the vendored version?
`isSmartContractPermissioningConfiguration` should not be called on each method.
Remove the last parameter. If yes, please add it.
Is this line needed? The new function is set only in the end of it.
nit: new line
Could we use a more descriptive name here?
Why do we need to add the getter and getSolrRecord?
You need this class.
A MainMenuItem of all these update items can stay in all caps.
Could we just change the string to `Defaultolete-private-L1-1`?
Is `IsConnected` and `ReadOnlyPool` for this purpose? It doesn't seem to be used by any type.
Should this change only be needed in `methodBundle` in other places? (It's not clear to me that we're using this API in this PR, but it's only used as a part of `TableIdentifier` as this is not really a big deal)
This seems like a lot more useful place to put it in the first place. We can also make sure that the latter, and then have the right answer to the command line, and let the user know it ever gets caught.
Why do we need the same for the volume manager?
I think this is what we want.
The changes in this file are not really related to the fix. There is already `replace` below. I think you can remove this as it's redundant with the changes in this file.
I would not use the `loaded()`. It is used to set the `letters` variable to the `loaded()`.
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
This is a little weird that we use `\n` to get rid of the `\n` in the `catch/catch`. We could add it here as well
What if the API tries to use an API with a `@server`?
Just checking that we're going to be adding this in the `common.go` file? This looks a bit weird...
This is just to have the default `0` (same for line 298). So we could remove `setUnsubscribed(0)` and remove the default setting of 0 (or the default) for the default.
Extra empty line detected at class body beginning.
this is not needed, we can remove it
Is it necessary here?
Is this necessary? It seems to be only used by `Beljoint.cs`
These two lines need to be removed
Can we rename `sourceQueueAddToFront` to `sourceQueueAddToFront` or something of that sort?
This is a no-op, right?
Why not set it on the constructor?
@roibert This is the only way that the header tags was disabled can be in case of a header, so the header tags can be used as well.
I think you could just use `self.tab_url(idx).scheme()` here and do this in the test that uses the "protocol" class above.
I wouldn't expose it as constants like this is a dependency.
I'm pretty sure we'll need to include it in the `reverseNum` method. Can you use an `reverseNum(digit)` for it and use this instead? It seems like the `reverseNum` for `rr` and `rr` would be to just have `reverseNum` be called before the other `DynamoModel` is called.
I don't think you are intending to use `prefixLength` as a variable.
Do you have any concerns about storing `freeze` as a global parameter?
Is this interface used for other tests? If not, could we just add a `@private` method to this interface?
@strib I'm not 100% sure, but how about we create a variable for `v1 capacity`?
Is this change necessary?
It looks like these changes need to be here, right?
I'd rather not add the header to the end of the libc files.
this change should be reverted
@agramfort I think we should do this check for the array of the `ImageMimeType` object, not the `ArrayModule` object?
Is this really needed? I'm a little bit worried about it being a part of an unrelated bugfix.
I think we should check these values in the same order as we've been trying to prevent any confusion with other types of objects.
nit: I think the space is wrong (I know it was already before this line, but we're not using it in this PR).
For all of these, do you want to set the default_id to true even when there is one?
Is this the same as `1)\n` ?
This is a breaking change - you can also use a `None` argument to `not isinstance` in the function signature.
I'm not sure if the executor is correct for the `err` field?
It would be good to test both here and in the `setupLog.Error` call
This isn't true. You should be able to use `working_dir:` instead of `working_dir`, because the `working_dir` variable can only be used in the same way.
This seems to be the only place where `TriggerEventType.valueOf` is actually used?
This should go into a new line.
I'm pretty sure it's not needed anymore.
Should we set this flag twice? It should be handled automatically.
this is just for testing purposes..?
How come we don't use `import datetime` for this?
Can we add a new logger here?
Why do we need to change this? I don't think the only caller of this method is adding anything related to the old one.
I don't think `cFlags` is guaranteed to be a unique name, since the `cFlags` is an instance of `cFlags` by default.
Does this need a default implementation? Can't we just set it on `CMakePackage` to `CMake`, or `CMake`, to ensure that it is not available to the same thing?
This should be moved to the `mailer` package (e.g. `erb_module_index.js`), and the other for consistency.
I'd probably just go with `service/info` here (and similar in other places) and just pass through `service/info` so that the test is more readable.
Why not just `nil`?
@smarterclayton I think this was intentionally removed? (I've seen it wrong before.)
I guess this will break existing tests for that. Do you want it?
Nit: the `PyPyType` above is not necessary here (and I think it's more readable)
nit: s/!= null/!= null/!= null/!= null/...
This should also be `rp_info.dependencyCount = static_cast<uint32_t>(m_renderPass_dependencies.data())`
`@since TODO: remove this when ...
Isn't it better to check `type = ev.target.checked ? 'on' : 'off'` instead of calling `get|info().value`?
Is the default value set to true when the test fails?
nit: I think you should just pass the `numba.ObserveScripts(self, i)` into the `if` block.
We can't use `tuple` here, because it can be `None`
This is a change of behavior, but this is not a real problem in the tests. We're using `*_REQUEST_last` and `*_REQUEST_lastlast`, so the compiler can be used to call `.walk()` on this one. We should consider adding the `.walk()` function instead.
"second time and restored for every task/context switch"
This looks like something that should be final.
Why are you doing this?
use the threadsafe `is_person` and `is_person`
I had to remove this, but just want to double check, do we want to keep this?
This should be done after upgrade upgrade.
nit: I wonder if we could make this `using System System;`
Can this be changed to use `is_shared` instead of `is_shared`?
The name of this class is a little misleading.
@bryevdv do we want the ESP32 here? I'm assuming it's not used and is only used for tests?
I am curious about this... why don't we have `iFromPeers` and `iFromPeers` (or we have `ingressRule` and `ingressRule` as well) and not have `ingressRule`?
This is an internal API error, and is probably better off making it a private property. There are two different ways for this to be a different approach, which could just be a different PR.
I don't like the idea of just having this check and doing the same thing in the system level. Could you please double check it?
I don't think we should use RelaxedReclaimPurge for every call to this function. What do you say?
This is not related to the PR, but I think we should be able to remove the `io.prestosql.spi.gers.gers.HiveiveWriter.internal. CONFIG_TYPE_Table_attributes` part from this file
I think the `config` argument would be a little more robust.
Why we need to use the same cst for the tests?
Why not just make this a `map[string]string`? The only thing this would be `map[string]string` is to not modify the `BdsJSON` and `BdsJSON`, right?
Is this change related to the current version?
(style) space prohibited before semicolon
why is this change needed?
Why not just remove the default here?
Is this really needed?
I'm not sure why this is necessary. If there's no other way to do this, can we use the same value for the other values?
@QilongTang how come you changed the import of the line below to `ec0.16`?
Rails/OutputSafety: Tagging a string as html safe may or may not be a valid integer.
can be null for all the others. (It's not clear from the code that these conditions are actually not needed for the case that they're being checked for)
Isn't this just the default?
Wondering if we should have something about `is not held` at this time.
This is a breaking change and should not be part of this PR.
Why was the `StateTracker` removed here?
Why is this `public` public?
Why the change to name?
@martint is there any chance we can get rid of this check entirely?
This would have a more descriptive error message, as this is no longer the case.
Let's rename this `zpoolList` to `zpoolListRequestRejectCounter prometheus`.
@cra0zy - I don't think this belongs in the context of the code. If there is any chance that we could add this to the `code.match(/^P4T1ACZ]....$/` below, this will be the correct behaviour.
Not sure if we need to do something on the fundamental but I'm not sure we care about it.
This one also needs to stay
Shouldn't we be using `self.f` for this?
Why do these need to be added? Seems redundant.
Maybe we should be good to use ``--reupload_type``, since we do not expect ``--reupload`` to exist here, too.
Shouldn't this be part of `Make glog`?
This is not related, but I will fix
(style) externs should be avoided in .c files
Not sure if we can get rid of the `*` here, since it's not actually used anywhere
isn't there a space after the first sentence?
I'm guessing this was intentional?
This one isn't used?
I guess we should add this to the base class
I think it's fine to have this check in the if above and only if (opts.generate_hexfloat_in_json && (type.base_type == BASE_TYPE_DOUBLE) == BASE_TYPE_DOUBLE == true)
Is this change intended?
I think we should remove this. It will break our tests.
I don't think this is the right way, but if you do `rescue {}` then it wouldn't work.
Can't we just change the return type in `List<T>?` to `with` ?
Can you please also change the `rename_` prefix to `Object::stat::ObjectObject`? I think you can delete `Object::stat::Object::set` and use that instead of `Object::stat::set`
I think this should be part of `opts.fee`, right?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at method body beginning.
This seems like it should be a pointer, not a pointer. Is it possible to have a `Set` field instead?
What happens if someone sets `VerifyFingerprint` to a string? Shouldn't it be `BitHolder` instead?
I would prefer a `io.Resolver.util.Map` here
This change is not related to this PR, but it might be worth moving this to a helper function
Nit: I'd use `LOG.info("Connecting to %s and %s", publishConnection, subscribeConnection)`
Is it possible to have an explicit check that the current unit doesn't have an issue with the new test? If not, I don't know why it is done, just add another check.
Should these be moved to `ReadAsync`?
I think the `spec.Xattr` should be moved inside the `if` block.
I think I'd rather you use the `!wasSkipped` helper here
This looks strange. The `free()` function returns a `name` (like `name.assign()`)
The intention is to use `Config.get('system')` instead of `Config.get('system')`.
@matt-gardner Is this the only place that needs `findUp`? If the latter, I believe we should be able to get rid of these.
do not rename. it is needed.
@stephentoub - I guess this should be `return authorization.substring(7)`
I would use `isInExperiment`.
Should this not be `next` in the `host` case?
I think we have an equivalent `if (github.com/algorand/go-algorand/protocol)` for this
Can we make this a new line then ?
This line was the main fix.
I don't think this is the right place for this, since the coordinator doesn't actually support this yet
I think these values of constants are better in general for now: - you can use the same name for the `Which Dockerfile` part (and the `fmtAppInitDockerfile` package for example) - `Which` prefix is used for all three places - `llnl.util.Which`
This still needs to be an `com/docs/guide/`
Could also be a `TODO(t, "this is important that the returned list is sorted in ascending order."`
Is it possible to get rid of all this information?
There's no reason for this to be a local variable
This is the only one that needs to be fixed in `LOG.info` IMO.
This import is used to preserve the build specific package for the `emb/disabled` package.
Why did you change this name?
We already have a dependency on UnsupportedOperationException, does this mean that we can drop the `-` part?
Can you explain what you were doing about this? Does it need to be `int32`?
Is this a debugging leftover?
I don't understand this change.
Should we remove the config from here?
Can we call this `on_approver_removal` instead of `100`?
This is the only change in test I was looking for testing of this. The `RwDB` function is only used by the system, so we don't need to change it in a separate PR, as it doesn't make much sense.
I'm confused as to why you didn't remove this code but it seems like we are using this code here, as it will always have the same effect.
just realized, thanks for fixing the test.
Same as above, let's also add the "sig_alg" attribute on the parameter.
I am confused about this - the call to `streamChar` was never called, so it was a "rows" function (in a previous commit). However, I don't know if that's a good place for this, but would it be reasonable to make the call of this function be called from the caller of the function?
This is used by the `id` in the `ramdisk` controller, so I'm curious to know why you changed it here. Wouldn't this break if the user has a `id`/`id` as well?
I think this is wrong and it is needed for `extern const struct batch_queue_module batch_queue_mpi;` and the second into `extern some struct batch_queue_module batch_queue_oodMNE0s` and the same for `git grep batch_queue_oodMNE0s`
(Pre-existing) How does this work?
I don't think the `_aws.amazon` file is needed, it is only for the test and the file is not in this file.
This is now an unrelated change. If a node doesn't exist, you will have to revert this.
I think the word "Approved" is redundant here.
I would rather have this be a `Debug.Assert(null)` if that's the case. If you want to be sure that this check doesn't break anything, you will have to add `null` to the `File<string, select>` below.
I'd suggest adding the second `#` here to be consistent with how the `attr_accessor` works
Please remove the space between the `if` and the opening brace here and the open brace.
"chown" is pretty ambiguous. Can we just use "with" for this renderpass (0..%u)." (0..%u32)" instead?
`strings.Contains(input, string(phClose))` is fine, but `f ReplacementFunc` is never nil, right?
I'm not sure this is right. The `blk` prefix is not used anywhere.
This is not correct. I assume it doesn't actually happen?
Will this default value change to false?
Why do we need this?
Do we want this to be configurable? Can we just use this to define it?
why removing these?
Can you put this under `lib/1`?
The `Null` object should be a public property of the `validation`, not a `Null`.
This should check for null and then only if current.parentId() is null.
These methods have been removed as well. (Or do they make sense to remove the `instr_is_scatter` function from the other PR if you want.)
This is just for testing, we don't need to change this.
This is not necessary, it can be removed.
remove this line.
@deads2k i'm not sure we should be doing this here.
Can you add a return here, so the error handling can be removed?
I'm confused, why does retry retry retry? Why don't we retry for the install build?
@matt-gardner Is this actually correct or did you mean to leave this file in here? I think it's a good idea to remove it.
why did you change this one to 0?
Why do these have to be dropped?
Should this be `ply3.4` and not `4.12`? (I know it's not used in any other places but this is an API, and it should not be part of your API, but I wouldn't be happy)
Why are we adding this here?
I don't think the `!` is the correct check for null
I think this might be a good opportunity to add a `deleteSyncSetResources` call to `r.RemoveSyncSet()` (or just use the function).
I don't think we should change this, we should use `sseq` instead - we should be consistent here - we do not change anything in this function - it's just a nice thing, and we should be able to use the `keybase` here.
This is a bit of a nasty refactor :/
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
The ` d_data_send_FETCH` logic can be removed here since we do the same in both cases.
What do you think about putting it into a function instead of calling it directly from the one you already defined in a module?
I would use `setParameter()` instead of `setParameter()` here, because the type should be `final` (and the one for the array).
We should also change the name of the function (at the moment I'm going to be a little more explicit about what `GetdnsItem` is)
This is only used in the `__iter__` of `is_team` module.
Metrics/CyclomaticComplexity: Cyclomatic complexity forAffected is too high. [10/6]<br>Metrics/PerceivedComplexity: Perceived complexity forAffected is too high. [18/7]
Please move this to line 124.
Would we still want this class to be able to just remove it?
This could be replaced with `@inheritDoc`.
This is a no-op. It is no longer the case for this field.
Line is too long. [81/80]
Can't you use the `resource.Mutex` here instead?
This seems like it might be a breaking change for the changes in this PR. I know the original code is still working, but it seems like we need to check for the `isInMap` parameter here?
I'd be interested to see if it's an index, and it seems a bit like it should be an index.
Why not just call the std::next?
This is a change that makes the test fail for me, but it might still be worth doing in this commit.
Why was this change needed? Seems like we should have some sort of test that would have caught this.
Why is this file added?
do we need this here?
@matt-gardner Is this safe to use? I believe we can't make this change as a dependency in the public API.
Those are different changes.
I don't think this needs to be a pointer
this looks like a function that's used in a function
Minor nit: We can just put the `eslint.eslint.Query` on the `eslint.eslint.eslint.eslint.Image` and avoid the `eslint.tcp`. (This is not a big change, but it's not really an issue for the `scalable` and we can do more on the `eslint.eslint.Image` package)
Is this a bug fix?
:+1: I don't know what you meant for the existing `date00` in the ` MODULES_ANALYTICS` key - can you change it to something like: `_u.date00': startDate, '_u.get01': endDate, '_u.date01': endDate, 'date01').
I don't think that `execution summary` should be a field, it might be reasonable to name it `default_summary_data`.
`TrimPrefix` could have a named constant somewhere so we can reuse that
Why is this needed?
why the change here?
I think this is still a good approach. The code that's being used is in a few places in the codebase.
This class does not contain any parameter map and map map fields, there are some different fields that can return a map. It doesn't seem a good idea to change this. The problem with the map map is the problem that we're using the map from the map, which is not the case here because we can't change the map map, so I suggest that we use the map instead to remove the map from the map map map instead.
`if (Slots.TryGetValue(name, out var var)`
I'd like a better name here to something more descriptive. I can do it as a bit more on this.
This will need to check `IsStackable` as well.
Should we add a check here that this is used in all other places. What if this is added to the docs, and when this will be used in the future?
Won't this happen if the `vol` is `nil`?
Is this the actual bug you were trying to get in?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
The problem seems that you're not doing this right now, because you don't need this line at all, just do it in a single file, but if you're using a specific import from there, just import the module to be consistent.
Is this error returned by `utils.SignHTTPRequest`?
We should probably check for the successful successful successful, so that the successful successful will be the default.
We should be able to do some checks for `values.where(x.id: shared='ster'` in order here.
Why does this get called from here?
Maybe also add a `engine.BlockOps` to the `CancelPrefetch(fbo.config.BlockOps().Prefetcher().CancelPrefetch(ptr.ID)` as well?
Why do we need a separate function here? If this is to be shared across all of our other types, it might be nice to make it a configurable configurable function, though it would be nice to have one function for the second arg.
Why is this needed?
If it doesn't need to be an API, should it be `ReadReadItem`?
`auto_run` is a list of files and not a list of files. Can you use a verb?
Could we have a `jetpack_` constant here for this new class?
Should we change the default here to use v1?
I'm not 100% sure if this is correct. You can use the existing `&mc->simd[0]);` variable instead of using the new one.
This method should be renamed to `<domain>`.
This should be split across multiple lines.
Can you rename this to `std::vector`?
Why is this needed?
@liggitt is this a leftover?
this will be `change` by default
This should be changed to `2019`, not `>0`, right?
I guess this is not needed anymore.
I don't think it will be a good idea to have a method for that. I'm not sure how to do it. I think this could just be something like `NodeModel.getInstance() != InitMinimal(fb)` and then just have a method on a map.
I don't think we should add this.
This seems to be a breaking change... what about the new style?
Would you open a new issue to move this up so it is not required and we will be able to fix it later?
why are these configs being changed as well?
Would `return nil, c.ArgErr()` be more appropriate?
Ahh I was wondering whether this will be necessary for a user to get the status status in the email address. Is that OK?
I don't think we should remove the `if repo.IsPrivate` check here - is that what we intend?
I don't believe this is needed. `noqa` is already locked in the global namespace.
Why did you add this? The image_Arrays/FileMode is a public API in the `ImageIOFactory` package.
I know it's not in scope of this PR, but it is a little strange that this is a `Cluster` callback, but not an `Tags`. Can we have a `Clusteringexit` field that would need to be added? If we do it we can do `Tags`.
This could potentially be quite big, I think.
This should probably be removed as `const` is not used.
Should we only do these things if `get_to_group` fails, and not `get_to_group`? Otherwise I would like to see that `get_to_group` is the same than `Happypy3` for both. @jridgewell
Shouldn't this be public ?
Can you please add a log after this `if` block to prevent other fields from being used?
Please remove `glog.Fatalln("EVM Network ID is not set, call config.New() first", body)`.
The name should be `i-amphtml-only`. Also, you can use `GetType().Name` as the method name.
I believe `//` should be on the `SELECT 1` and the `v29.0` should be on the `SELECT 1`.
Do we really need this default? I would say it's only used in one place and it would be nice to be able to implement it in one test for the new release. It might be better to make a property for the default behavior, and have them be configurable in the default behavior.
This is a good change. I can't really tell when I merge.
I don't think `layout` is ever `false` right? We should always be setting `verify` when it is not `true` and `false`. If it's not `isinstance` we probably should just move this check out of the `focusElement_`.
This is a no-op.
I believe this was wrong with the BPE. It's a bit strange that the BPE is only used for BPE.
Can we use `path.QueryEscape` here to reduce code duplication?
The `push-notification` class already has a blank `push-notification-messages-sent` parameter. I don't think we want to keep the `push-notification` and `push-notification-melib-messages-sent` here.
If this policy is always the certificate provider, should it be part of this PR?
I think this will be useful for all uses of the `kdata` package, as the variable names are not used anymore. It's a bit of a mess though.
is that on purpose?
This is a bit confusing as it does not add anything to the package (eg. `-`)
I don't think we need a variable for this.
just wanted to check my understanding: is this something that you want to do with the other changes?
I think this is the only change you need in this file.
Is it worth having an additional check that the `go` tag is not present in this package?
This change looks unrelated to the PR?
remove empty line
This should be a different name
How about we make this a `new_record()` call instead of `new_record`?
This could probably use the `is_onnx_export()` method. It's easier to understand if the input shape is a list or a list.
Is it possible to log at least the id and error? I don't understand why we need a new id, but the new id seems to be the same as the id
does this need to be a `userInputState`? Otherwise a `userState` will have the same value as the last param in the url will be ignored.
Style/EmptyMethod: Put empty method definitions on a single line.
what if I pass the Logger through back an object?
Can this be a pointer?
shouldn't be public
I'd prefer the equivalent to --ponynoscale (and similarly for all the other similar messages).
Shouldn't it be called `HandleUpdate`, `HandleHandleUpdate`?
Can we also test that the `innerHTML` has a different name?
You are setting `m_renderPassBeginInfo` to zero in some cases.
Why do we need this? I think we should not use the `LocalStoreStoreStorage` method for it.
It should check if the model was moved to the interface.
I think we shouldn't have to add this in this PR.
`srcPort` is always lowercase, so you can use a different type than `*` here.
Would be nice to also make this an "if RequestBody" and "if RequestBody is null" part
I would move it to a separate `settings` class and move the `favicon.png` attribute above the `blogIcon` class, in the `Busscikit-learn` class.
I don't think that should be here.
There's no guarantee that the capacity is zero, but the name of the test is different than this one.
Use `%(button)` instead of `%(button)` here.
Please change these to `unset($options, '/')`
I'm not sure if we need to do this, since the config value is `_` but this value is not set on the first request. If we don't want to have a `File` value, then you wouldn't need to use the `fileBytes` value, because the `ReadFile` function is not defined, and it doesn't make sense to call `get` on each request. We should just do the `if` check here.
We need a `;` here for now.
I think this could be more of a debug statement?
Does it make sense to use the List<Span> here as well?
Please add back the whitespace after the `:` after `// + logging framework`
Nit: I believe this should be `copyOf`.
This is also the `Vectorized` of `Block` that is used here.
This is a no-op, so there are no more `past.abort()` calls in `std::cerr` that will do the same.
I think it's fine to remove the test. It will break the tests.
I think we should also keep the old description, as it is not used elsewhere.
Is it possible to have a local spans in the skew or can it be null ?
is there a way to get more specific information about this?
I think we can just call `context.Context(..., string, error)` here
What is this? It looks like a copy/paste error.
Does this mean that the icon is always a button? Why not just call the method `favorite_url`?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Can you explain why this change is needed?
Shouldn't this be `MetadataRevision`?
I'm not a big fan of this, but is there any way to avoid the `attempt_drm_backend` call at this point and just use it in every `backend` package?
This is a breaking change. We need it to be a specific test.
This test was not working as expected before.
I'm confused. Is there a way to handle handle and handle size of 0 being zero and not NULL?
This method name seems very misleading. I don't know why `////////Invariant`, and I think it should be a private method.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Could you please add a TODO explaining why this is needed? I think the `RestConst.REST_INVOCATION_CONTEXT` part of the `cancel` interface already has the `cancel` instance.
Should not this be `!projectJson.Equals`?
Should we check if the struct exists before calling the ifdef? Or is that because if someone has a password without the second time we need to do this: ``` if (system(buf)) {} else ...
I think this check should be done in wlr_input_device_destroy() check inside wlr_input_device_destroy().
Can we put this into a common util class? That way we don't have to make the interface more specific
What about just `props.selected = true`?
@liggitt I noticed these changes are unrelated to your pull request, but they are unrelated to this PR
This variable is used only in `SpinScriptEnvResolver`. The same as other instances.
We can't change anything in this function since it is a "last" file in the file system?
It's a bit strange to make this `constexpr` because its only used for the `constexpr` case. Maybe this should be something like `this.queue.TryAdd(activity, maxSpinCount: 50000)`? It's also just to be clearer than to make it a bit easier to understand.
I'm not sure we should have such case in the other places.
Use %w or %W for an array of words.
@liggitt is this a breaking change?
The `CACertificate` needs to be passed to the `smsertificate` struct instead.
Can you revert this change? I don't think anyone would have anything to do with this change.
This line is still a good idea, can you change this to `require.NoError(err)`?
I think this should be `internal`) instead of `force`
Is there any reason you're not passing an `Engine` at the end of `_blazer`?
This is a breaking change to the API change. The `(AlwaysOffActivitySampler)` property should be renamed to something more generic as `IOffActivitySampler`
Can we have a named function here instead of a function? This is the same but I won't be convinced by me.
I think we should keep this as a `@Deprecated` for now. The reason for using the `PMDException` is to be the default (e.g. it's `@Restricted(NoExternalUse)`, and that's what we want in the `PMDException`, as a `isort`.
Would it be better to rename it to `tabwidget.TabWidget` and add it to `SpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpecSpec
I am not a fan of "WIP" CUDA_Pulumi wasn't a requirement. Is this what you meant by `writer_->getGuid()` or `writer_->getGuid()` is used for?
Please keep this as `*` since we already know the block size is 1- standard library.
Can we call this `public` to match other types?
"ind" is a normal normal term term, so maybe "Watcher can use/construct"? Or "you must use/construct"?
Should this be changed to `WValuesConsumer` instead?
I think you also need to check that `encode!` is always `binary`.
I'm not clear on what is the intention of that change?
I guess it's ok to add these?
Can you use the version number of places instead of hardcoding them to have an int?
Why do we need both `int` and `min_bound >= $i` ?
remove empty line.
This seems like it could be a separate PR but I guess we could be more specific :)
This is a bit weird that the errors in the error messages were added twice. Is this intended?
Use the new Ruby 1.9 hash syntax.
@ktrzcinx Why don't we have a default value that would be 1 only?
Missing space after `,`
The setter should be placed above the `delete` method.
Hmm I wonder. Why is this expectation changing? It seems to me that we should be doing a similar test here.
This is unnecessary - we can remove `raise NotImplementedError` from the docstring and make it private.
This should be removed.
This is the main fix. We could add a log line here.
can the old code be refactored to use a more specific `+` rather than a `+`?
Why do you want to use `LOG(WARNING)` here?
You can do the `self.version.join('quote.deep_thoughts')` instead of creating a new quote in the `flow` module.
This will be called after a per-Environment map is stopped, right?
I think this is still useful, but I think it'll make sense to have separate files for the service and the controller to determine the user (e.g. `@(monkey, controller, controller)`). I'll have a follow-up PR to move this to the migration and then do a similar feature in the service, so that there's only one place for this.
Is `byteFlow` and `byteName` available on the flow names? Is there something special in these places that might not be used anywhere?
Why do we use an `Twcreate` function?
You shouldn't need a new `WelchWindowFunction` here.
this was already added by accident
Won't these import just work with `import rdkit.Chem import rdqueries`?
Is this necessary ?
I guess this is just a minor cleanup. Can we change the config to a more generic name? It seems to me like `Level *logging.Level` is only used in the config?
this line is also part of the fix, but we should be able to remove the `beforeEach` entirely
Why is an error generated when it's empty?
why do we need this? can't the `resolutionOp` just be `GCOp`?
I'm not sure it's necessary to add the `getSubVisitor` method in the API, but the existing implementation is a bit odd.
The `long` should be in `src/java/util` and the next `if` blocks.
You can use the `str` type here.
I think this can be `||` rather than `||` since you can also remove this condition (although you'll never get the right value of the `update_local_peers` check).
It might be a good idea to add this to the copyright.
Why not keep it as it was before?
Hey @rhtyd : this is the only usage of the `if` condition that is used by the `ProcessLabel` function.
I would just return the `Library::` rather than a `Library::`
This can be `str(source[0])[:-3] + "html"`
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [83/80]
can we get rid of this line?
I think this should be `if len(oldSyncStatus.ResourcesToDelete) > 0`.
we can use the new logger to avoid ambiguity
nit: we could use `err != nil` for the sake of consistency
This should be `bool`
Should we keep `apierrors` as it was before?
Why is the data required?
why is this needed?
The `with` conversion would make sense here.
This could use a dedicated `copyOf()` and the `copyKey()` implementation.
is it really the case that this will be `t -> t.accept`?
this import does not seem to be related to the PR.
Why did this change? The domain should be adjusted.
Is this still used?
I think it should be `typeMap.IsDefined`
I'm not convinced that `KBFS_DEBUG` is the correct default. It seems to be a conscious decision to use here `if journalEnv == ""`.
Should we just change the "Data" to "Data" ? (It's not important, it's just "Data" here)
Isn't this already covered by tests?
Why is this not removed?
I don't really understand the point of having a url, but it's just a question to me, since it's a user-facing model?
Why is this no longer needed?
This can be factored out into a single `MaterializationOrObservation`.
This is not needed. You already asserted with `sorted(...)`.
Not sure about this. If this is only used in test code, then we need to remove it.
The `#include <fastdds/rtps/builtin/BuiltinProtocols.h>` is still in a context. Does that actually work?
The `expressionMetaModel` constructor uses the same `expression`, so we don't use this parameter in the variable name. The same is used in the other `expression`, `Integer` and `string` fields, etc.
Why is it needed ?
This is the only change in this file.
Why this change? It's a little strange that the state gets updated to `StateStatus` but I think that's the only usage of that that's used by this function. I can see how you are using it here and below.
The "is" value is not defined here, and the "is" value is not defined. Also, this method can be removed.
I think the `self` is needed for the test, since the `diff_res` is an `AttributeError`.
I'd prefer `common_properties.getAtomMapNum` to match `index.setAtom()` and `index.getAtom(common_properties)` and avoid adding the same `index.getAtom().get(atom)`. But we can also remove this if block altogether.
Mypy could not find any way to test this?
Why is this not needed, if we just always return a boolean?
I am a bit sad about this (and it looks like it is used as a function and has some useful logging message). I'd suggest to remove this and just keep the `Debug` call.
Why not make `31557600` a local variable instead?
I think this can be moved into `busAware`?
Should we use this for the one in line 266 instead.
Why do we have to make these Guids specific?
Please use `org.jboss.commons.lang3.client.isNotEmpty` and `org.jboss.2181.client.isNotEmpty` instead.
Please revert these two lines.
The `o Control helper` for `members` will cause some other unexpected file. I think the `TODO` will be better.
We should also make this return an error if the caller has been trying to do some `.build_defs` check.
Why is this not a new attribute?
Should this really include the subnets field in the config file?
Can we call this `to_region` or something. It's not clear why we use this as a simple simple field.
Can we remove these asserts?
I guess this is a copy-paste error.
Would it make sense to add this option here too?
This looks like a duplicate of `IOException`.
`repo.className` is an alias for `repo.init` and `repo.initArgs` is the right default.
This is just an optimization that will be useful to the user. I don't think it's possible we have the proper idea for this.
This check doesn't appear to be there.
Can you also remove the `assert` on line 817?
This is the main change. I think this can be simplified by adding `.` in the error message.
This is not a correct change for neg_prob but I'd rather have the `flated_prob_in_binary` method that would be used for the `flated_prob` tag.
Why not use AsyncRequestQueue for the record?
Is this a bug fix? Can you please revert it?
It doesn't look like we've got the `with blank line` param and a `==` operator.
Is it expected/user behavior? I'm not sure if the test will have a bunch of these.
The import order is duplicated. I don't see why it is necessary to change
@kroitor since we are using the http module, should we also have it as the name of the class?
This should never be called, right?
Can this be changed to `String.value`?
This seems to be breaking for the test and the changes below.
How about we move the old committee in here? I'm not a huge fan of adding this to the committee.
Please add `query_ID` to the name as well.
Why the change?
`_precise=True` seems to be the default. Is that what we want to do for?
This should be a span.start property
I think this might need a migration.
@kennknowles do we know that it was just the `OUT` in the past?
We should probably just make this `else if`
nit: I think we can remove this import
Is this necessary? `s/image/image/`
Just wondering if we should just use the `: arn` option, instead of passing `DoNotAuthorized` and use `New` instead of `New` for these `DoNotAuthorized`s and do a `stop()` on `stop()` and `stop()` to prevent any confusion if we want.
This test should not be here.
The variable is unused in this file.
Can you check whether this is the correct behavior for link?
I am not sure this is correct... it should be `New upstream ?, upstream.Start() : err`.
Is it necessary to add a `STATUS` property on the `EngineEngine.class`?
I'm not entirely sure that this is correct, since we are in this test cases that the method is the same as the one we expect. This test seems to not fail. I don't think that's what it is doing, so I think the test is failing in this test. We need to fix this in the test itself, but I'm not too sure.
Should we add this to `write.object-storage.enabled`? It's a bit hard to follow, though.
Please use `String.String()` instead of `String()`
This is not needed anymore.
is this a BC break?
is this change needed?
@jcotela It's not the right place for this, since it is a long file, so it is always true.
This is now used in the main code, no need to explicitly render the context.
This should also be renamed to reflect the new `clones`, as it is for a specific reason.
This is a bit of an important detail, but I'm curious why the existing package uses `ProcessEngineLogger` and `ProcessEngine.XMLConstants` (or even `XMLConstants`) is the default and we don't want to use any of the existing `if` blocks to be called for a more generic "XML" object.
The Cache is not used here
This is an anti-pattern. It would be nice to move all this logic into a separate method.
Do we need to make a copy here? If so, should we add a TODO about that?
If this is a test case then the only change will need to be updated?
Layout/SpaceAroundOperators: Surrounding space missing for operator /.<br>Layout/SpaceInsideParens: Space inside parentheses detected.
I think the other ones should be removed as well
Do we need this? It's a very minor thing.
This is the only change required for this PR.
This should be `const char * sys_t filename_size` and also `num_t` (the same below)
Why this change? It's not used in the code
This seems to be a bit unrelated to the rest of the PR...
Not sure about this one: 1. why not have this in `application_uris`? 2. The model should have it in a separate model 2. The model should always return `true` for example if `rename_uris` is not passed and we want to be consistent with the model.
Can you please also make these private? It's not clear what the benefit of having the tests run.
@TommyClausner, is this a change to me that you'd need to make changes to `get` and `getMap` in this class?
Why do we want to return error here?
This should probably be in the config file
What is this for?
Does this need a IStringValueRenderer? Why did this need to be public?
@ustcweizhou should this not be `ip6`?
I think the name of a function is misleading, it's the same as a function, it's not really the one you're using, so if you want you can remove it as well.
This is a little weird. How does it behave on all platforms?
Is this change related to the issue?
nit: this seems a little weird to me. I'm not sure why the change is needed here, but it's just a question of how it's implemented in a function.
~~Why did you remove the `!=` here instead of removing the `while`?~~ Never mind, I see you're still using `!=` and it looks like you are doing the same thing in the old code but I didn't check the old code. Can you explain why you are not doing any checks for the new ones?~~
**Question:** What about using `price :published_on nil` instead of `trait` here?
I'm not sure about having a flag for the inner members as we already have. Can you please check for the inner classes in the field?
We need to ensure that the value isn't set here and the `conda/constants/constants.go` file is not in the `conda/constants/_constants.go` file and `conda/constants.go` files. We need to do that by adding a new file as the default.
Shouldn't you check if null is NULL?
I don't think you need to use `binary == true` here.
Should we make it a `clusterRegionGetter`?
Why does this need to be an abstract class?
Why this is needed? It seems to only support RFC6455 with WebSocket version 13? I assume that the default config value can always be true, and the default check is `None` if `websocket > True`?
what is the difference between '-' and '-'?
remove empty line.
This is not used.
nit: we should call this `serial_rule_name` (and make it a bit clearer). Or `serial_rule_name`?
You don't need `log` here as you already have already defined in the `nethttp` above and can just use the `log` variable here.
Is the idea behind this?
Shouldn't we also remove the corresponding `std::string` in this file?
We need to test this specific test, but I think it's better than the test.
@cramforce should we have a test for this?
remove the empty line
The name of a method seems not very descriptive. I'd rather be a method called "name".
` lines` are missing in the `if` statement.
I'm not sure this is a good idea, since the new `isSelection` flag is not really a function, but the `Start` method has a function that does some sort of function. What do you think? I don't really like this though, as I don't think that's a huge deal. I'm not saying we should just make this `isSelection` a function that does something like `_get_isSelection` but that also works for now.
This import looks wrong.
Should it be added in this PR?
This is the wrong thing. The `coreConcurrencyStages` should never be called for a specific `ConcurrentNamesQueue`. We should be able to remove the `ConcurrentConcurrentConcurrentNames` and just pass the `name` in.
Can you revert this file as you're not using the system property
We already have a package-like package for this, should we just move this to `github.com/ingov`?
I don't think this is used?
We could also just leave the `@author` tag here (and change it to `@since 5.0`).
Why are you adding these 2 lines?
I don't think it's possible to just remove this test from the previous `if` block
I don't think this file is necessary, it needs to be added to the `ased.rst` file.
I think you want this flag to be configurable and we can avoid adding support if the dispatcher is enabled
Why is this needed?
Why would you add a new field? I mean, why not just have the option `manage[searchScope]` as well?
This looks like an error, and I'd prefer we move it down there.
This should be an upper case.
`SerializableByteBufferMap` can be removed
This field is not exposed.
This is a wrong package (not the one for the test case)
Should we be doing `--build-agent` here?
This will fail. I would expect the number of tests to fail.
why not use `IndexTask.DefaultNull(Current)` for all of them?
I'd rather have an `thrift_protocol_write_message_begin` that has the same arguments as g_value_dup_object (1). So we should be consistent and use the same name here
Should probably move this out of the file.
This seems to be unused, should it be deleted?
Can we change `ComponentResourceManager` to `ComponentManager resources` to be consistent with the other resources in this `var/map`? It looks like this method only works on System.Windows.Forms.Button
Please use `isinstance(X=false)`.
I believe this was intentionally not to use `self._filename` everywhere. It is a bug, and it makes the code a little strange.
I think you need to move this import to the new location, then you can remove it.
Just for my own knowledge: why is `UPDATE principal` being set?
This is not correct, but this should be handled by the background specific `getSenderNonce` method as they are not used anywhere.
I think you can remove this as it does not seem necessary
should this return `boolean` ?
I don't see why we're using this. Can't it be 1.1.0 and 2.1.0?
This is not a right place for this method.
This could be more specific
Can you change this to `Map<Tlog::getInstance()->error()` and the new error handling?
I think we can make this "isDocker" (and also put it in the interface).
This is the only change I'm wondering what is this?
You may want to add the bit more details here and let the user know if they are given and they should be able to run `te`.
Why do the catalog have the `*PluginConfig`?
I think this is not used anywhere.
Why is the name needed? I thought it could be an `Task` and an `Action` and `Task`
no need to change the order as well.
This isn't required.
This is not really needed anymore. You are already doing the same in `ReadVectorSize()`, so I'd remove it.
This is not the right change.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think the template template and version details patch would be better named as `versionDetailsPatch_files` for this as well
This assertion is not correct, the tests are failing because of the `Scorer` now.
nit: you can check `os.makedirs(folder)==True`
Can we add this to `buildCallback`, so that we know the revision is not complete?
Is there a reason why `fontawesome5_icon_mixin` can't be used here?
This needs to be a `before_action`?
Should we add a `&&` here to get the value of the page and not the link?
Should we do a similar `puppet_tmpdir(name)` in `chown`?
This import does not belong here, if I was reading code it was introduced in this patch...
why do you need to remove this annotation?
this is just a small bug (the data source code is now not yet running) so the fixup_indirect_trace_exit() will never return an error when the user is already doing it.
I don't understand why this happens. Why is the case of `0` not true? I don't see any other types of `0` in the code that we use above.
I am not sure that this should be an explicit check (not an object) or a type. The new `AuthFree` field is only used to set to true in the controller, so IMO this should just be a constant in the file.
Is this a good idea? Is it because of the inputWriter, and not the stream?
You could add the docstring of `info` in the name.
Use 2 (not 1) spaces for indentation.
Shouldn't this also be done in the `info.go` file?
I think it's better to check that `<>` is an array and if it is not defined it would be better to check it it.
Same as above, why change `where` to `where`?
Why do you need to remove wsAppManager from the wsManager interface? Is it because you use wsManager in the wsManager interface, and you will need to remove all wsProjectManager in the wsManager interface ?
I think the original is used for the dev request.
I think the old way was to avoid using the `ValueFormatter` parameter. I'd like forgot to remove the `get` and change it to a `handler` and use it in the `ValueFormatter`. This is also a good change.
Please, revert the change for default value
I think this might be a breaking change for this PR, but we could move this down to the other `api` package, so that we're passing in a package and not the `osconfig` package.
Could use log message instead of debug?
Shouldn't we take the span and span.Context.Origin before setting the null here?
Is it the correct version?
I think this is not necessary as we will be doing something like this in the future.
I would just call this one "user"
I would just throw exception here, no big deal.
I would prefer not to return nil and always return false.
this is a little hard to read, but I guess it was just for the fix, right?
Why did you remove this?
doesn't need to be after given given that there is a requirement to not use any of these that are not available in the DAG
Why does `$currencyDataFactory` not have `$this->currency_TYPE_INTEGER`?
The TODO: should be removed.
That's not a test, we should be modifying lock.
I wouldn't do this here: if `tab` is not None, then `tab._data.input_mode = mode` is a list of something that should be set, otherwise this should still be set.
@jackfrancis this is the bug fix
Isn't there a possibility that the `ApiInfoInfo` is only ever used in this class? It is not used in this class and we want to remove it.
The `<%_` tag should be removed.
You can't change this, just have the `i` variable
Should we just have a `match` function for the `no-docstring-rgx/pattern`?
this needs to be changed as well. but the `user-read-currently-playing` will be `currently-playing` for backwards compatibility
nit: I think we can also delete this line since `describe` doesn't need `next`
Should it be part of the `if` condition above?
Please remove this empty line
Wondering if this log message might be too slow? I'd say that, the warning message is not clear enough.
We can't use the clock for the number. It is not a good place to test the other languages.
This was removed because it was no longer needed after removing the `Pagination` component.
What is the rationale for removing these?
I think this is not correct. `data` should always be equal to `iloc`.
The default value for `caBundle` is not a boolean, so this is a boolean, not a boolean value.
I don't think this is the right approach, since this function is called for every import of `Boolean()` (i.e. `Boolean()` does it).
1. Go to `define` 2. And 2. move `use_shared_date` declaration to `Default` 3. move it to the `Default` model. 2. rename `use_date` to `Default` if you don't want this to be set.
please update the docstring and update the docstring accordingly
This is a good time to get a `idx` from the `Newid` object. I'll fix it in a follow-up PR.
is this just me during the update?
Space inside { missing.
`$$$(` should be a local variable?
Shouldn't this be if !mongoid]:query_cache?
can we also add a `:funder_content` column? `:funder_content`
I'm not sure this line is needed. In this case, we have `cmake.io/core/util_test.js` file.
what does the url do differently than the url?
This doesn't make any sense, you should check for the `travel` case as there isn't any other way around the `playerLogout` property.
This import seems unused?
missing quotes around string interpolation.
Can we just remove the `dels`?
Could you add a note that the payment could be different than the conditions for a new payment?
This test fails because the test is failing with the next test case, but in case there was an issue with a test with no `expect(current_path).to have_content(...)` in that file, the test doesn't fail because you didn't test the result
We can probably get rid of this line. Otherwise we won't see `info` being called before we create the `site_sendText`.
I'd suggest to use `this` directly in `CustomizeToSkip` (as it can be used in other instances).
@deads2k i'm just wondering if we need to add this back.
This one is wrong
I'm curious why this is a valid null check?
We should move it to `aws/internal/task_test.go` since this code path is being used by this function.
I'm not sure what this change is for. Do you need the `[pluginName]` in the plugin constructor?
Please move all the `orElse` calls out of `.show()` in order to be consistent with the rest of the code base
I think that is a good time to do the same. The tequilapi test will not work with the model that is not a `openvpn`. @smarterclayton can you think of a better way to do that?
I would say it would be useful to assert that there's no `exc_info.value` in the context instead of this exception.
This would be `PATCH"` - it's not the same as `case` - but `case` isn't a valid name.
This should only be done when the user is not on `uncheck` mode. If `uncheck` is not `uncheck`, this would break if it does it.
@agramfort are u okay with this change? It looks like the test failed to be using the actual test in the test. I would recommend making this change an issue in the future and to ensure we don't have to do that
Why remove the cast to int?
I don't think RamUsageTester is needed here, if it's been changed.
There is a typo here, you can merge
I think this is wrong. The `column_count` and `add_count` are already defined in the `get_component_count` method. You should probably update `get_eigval` to take any argument.
This is a very old table and could be improved by adding an index to the table, but I guess we'll have to go back and forth on this.
I think this is a leftover.
This is not needed if the directory is created from the package. This package is already in `junit` but the `utilTestBase` is added to the package.
Seems this method is only called in the method, even if you can remove the check.
Please use `removeAll` to avoid any misunderstanding if the user has the correct key.
you should be able to pass the timeout through instead of passing the timeout to it.
It's not a good time to run `CreateUrl` on a clean up, but I'm not sure if we should be more specific here. @smarterclayton do you have a better solution or is it ok?
I'd prefer not to store this as part of an API, but not all of it in this PR.
I'd probably try something like `UABORATORY + RESEARCH_GROUP` or `USEARCH_serviceABORATORY`. It would be better to make the add-on prefix a bit more readable to avoid the need for the LABORATORY case.
Why are we using authenticate here instead of password?
I think we should just delete this function.
The `var` and ` IsInsecure` need to be added to the config struct, since we can't create it with it anymore.
Is this needed?
I think there should be a test where the `not_to` is `None`, so this isn't really necessary.
This is not a numeric columns, right? I think you're just adding it into the `self._metadata` function.
nit: maybe this can just be `final` if `Keccak` is null.
I'm wondering why this interface has changed to nothing in the core?
Could you please explain how this is related?
remove or add empty line above
I would also add a `null: false` here.
This doesn't look like it is used?
This is the only place this was called.
@nateate @harmony-ek - I think this is fine to leave as-is.
I'd prefer `@private` instead of `@static`
Isn't the idea of keeping the `c++11` in the past, since `cpp` are the same?
This looks strange... if the input is empty it should be the same as the input. If the input is empty it should be the first one. Otherwise you have to check with the second one, but you are able to use `@Fluid.plot`
This is not the right place for this - we have a default implementation to use for a `const` statement in the future.
This message doesn't seem to be related to the other changes.
If we add a config for the `setupRepoName` we can add it to that function as well.
I don't really know how this is going to work. I think you want to use a different name for this object.
Can we change this to use the `<HttpContext>` and remove the `internal` attribute?
Is `cvc.Spec..CStorVolumeClaimPhaseBound` used anywhere?
I don't think we should change this. We should keep the old name and keep it as is.
Shouldn't we use type.name() here?
We should use `log.Infof` as we already do it elsewhere in this file.
Is there a reason this is not needed, since we are not checking the return value in the method that returns a failure?
Could you add the `append_or_delete` doc for this new parameter?
Why is this function needed?
This should be separate change to the PR as they are separate from a previous PR
Can you add some more details on the message, what does the matching matching this? This way, you won't have any impact for the next run.
This seems like it could just be an error. The `ERR` and `GetAsciiStringEscaped` calls `Grammar`, but `[ConditionalFact(typeof(typeof(typeof(typeof(typeof(typeof(PlatformDetection), nameof(PlatformDetection.IsEnabled));` on the `makeRequest` as a `protected`, and then it should return it as a `Type` instead.
@nickytonline , I think we need to be careful to see if you need to use a `no.supportsDts` prefix instead of just having the `tizen` prefix.
I think hipErrorInvalidValue should be better here (I think, if hipFrame is true and hipFrame are false, then it is a string, not an error) and we are not testing that it should be handled inside the function.
Is this the only real change in the PR ?
In my opinion, why not just have the size of the buffer size of the buffer size of the buffer size in the buffer as well ?
So it is always set, so we have a `_visible_preferred` property that does all those properties. So we need to add a `_visible_preferred` property that returns the list, not the other way around.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I'd prefer a separate method for clarity. Also use `org.infinispan.commons.lang3.StringUtils`
Layout/TrailingWhitespace: Trailing whitespace detected.
I don't think I would have caught this, it will have to be a setuptools by default.
Why do we need a fake manager?
This is already in the `abspath`, so we can remove the prefix `self.base_class_path` altogether (see above).
This doesn't seem like it matters, but it seems to work.
why do we have to pass the `ctx.flowOperations`?
Should it be `a4adc8f5f550ca5b73dd14df791c0e`?
This file is not part of the PR. It's not really necessary but I would prefer to have it as separate commit.
nice, this is a good idea, but it's not really necessary. We're adding an assert here that `resp = self.app.get('/')` returns a list of items, so I suggest to just do `self.app.get('/')`.
Can you please update this to `status == execcmd.Restarted`? The message will be clearer to me that it will be clearer in the future when to find the message.
Is this really necessary?
This change is unrelated... but I was going to make a PR in general
Should this be a new constant?
I would make this a bool instead of a new one.
Please also update `full-based` and `full-CONFIG`.
I'd suggest renaming the `SealedSecretEncryption` to `else` as it is a nice nice EIPer check to be sure.
I think we should make this package private
remove this one?
I think we should add a `Class<String, String>`.
This seems like it is not necessary to put this in a helper function.
is there a reason we can't just change the config config config from `/config/proxyType`?
I know we are removing this for now, but could you update the view of the view with a more specific database?
The only usage of the Lorena Bahari is that you're not actually doing this.
Isn't this the same as the original `Ani|Tra)/.test(key)`?
Should this be `return data` instead of `return data`?
I believe the import belongs in this class, and the others in this file should be in the wrong order
@stephentoub is it possible to just call this `HistoricDetailQuery occurredAfter` instead? The call to `include()` does not look correct to me, but I'm fine with it, just thinking that I would have just made the call to `include()` because the `HistoricDetailQuery occurredAfter`. I think if the `final` method is used for other commands, it would be nice to add `final` method to get the `final` and the `HistoricDetailQuery` method, so I think it's fine.
I'm not convinced that the `Task` and `TaskToken` need to be updated too.
I'd rather avoid this annotation
What is the rationale for removing it?
Rails/InverseOf: Specify an :inverse_of option.
Should this be `Assert.assertFalse()` ?
Should we just remove this instead of the `some`?
Can we make this a `static const`.
Why not just use `poStProof.isEmpty()` as a member variable instead of adding a new parameter?
Is it possible for users to use `get_multi_list`? Would be more suitable to have a default value.
I'm not sure we need to include the unit tests here. I think it would be good to just make the tests pass.
Please remove `GONE` and `Closeable` here.
We can't just do that for a non-invoke method, because it's only called from a single method.
I think it would also make sense to move this to the `--no-js-exports` package too, and move this to where it can actually be used.
This is a no-op, I think we should remove it.
It looks like there are no changes here. Is this correct?
If you are going this to work with the previous behavior of an array, you could just use `const` instead of `(` and reuse the new `dispatch` function.
Is there an issue with this?
Is this test not really required on mobile? I can see that the class is already on mobile and the unit test should be removed.
I think this should be a public field. I think it would be better to do something with it.
Can we avoid this file by passing a reference to the `custom-slug.js` to make sure this works for now?
I'm not sure that you have to make this a dictionary. Can you change these to be `json.Set(json.clockIds)` (or similar) instead of `json.Set(json.Set(json.Raw_name)`? Also, you don't need the `ctx.TypeType` call in this PR.
Should we also check for the `uniformBufferStandardLayout` in the above block?
This won't work - you'll need to use `#if defined(__APPLE__)` as an argument to the `.jit` list, not just the `.jit` list.
If this was added, the code was not written as part of this PR, and we need to keep it as much as possible
We should just make this attribute `Uri` to match the API's name.
(style) line over 80 characters
We don't use an individual directory here.
I think we need to keep the `Trail` as a parameter to this controller. Otherwise, the `Trail` is the most appropriate.
This should be `Sabre\Event`.
Should we use something about `http.Stop()` here and `apachethrift.Stop(true)`?
The previous code didnt need to have the same `controlCallback` as in the `MeS.js` namespace
If `en/latest` is not used any more can we use that instead?
I think you need to also check `if (translateSource->getCharSet() == CharInfo::UnknownCharSet ) {` as well as `HIVE_DEFAULT_CHARSET != CharInfo::UTF8` and the other code, if you want to use `HIVE_DEFAULT_CHARSET`. Also, you should check if `translateSource->getCharSet()` is set to `HIVE_DEFAULT_CHARSET` instead of `HIVE_DEFAULT_CHARSET`
We may want to keep this private field in `HttpWebRequest`
This is a little confusing since the `.find_by` model comes from one of the `if` statements.
hope this is a fix to the bug I'm pretty sure this is a change in behaviour
This is an example of why I changed the path to `?` in the PR description but I can't think of a better way.
I don't understand why you are making this a bool. Is this something you meant to change in the past?
can you make this a const?
>cs [](start = 36, length = 7) Is this safe to remove? #Closed
Can't you call this `setArrowGlacierBlockNumber`?
I think this should be removed.
Why not just remove the function as well?
Do you really need this? I think you should move it to the new file?
Is there any way we could remove this from `is-ci` now that it's now just removing that from `ci`?
I think it would be good to move all of these to reload_scripts() so that we don't have to change the code.
we don't use `_body` as we are doing so everywhere
This file should be removed.
Is this needed?
Is there a reason we're not using this?
Why the license?
This is only a change in the test, not a new commit
Can we just make it non-nullable? This will create a new field that contains the same type.
nit: `return FPGA_OK;`
hierarchical_name contains a kwargs. What does it mean here?
I guess this is just the one that we should have.
Is there any way for the future to pass a mock as a string here instead of a new one?
@bparees this was changed to null or it was wrong as it was before, and we need to keep it for the other changes in this file.
I think you forgot to remove the `failed` here
I think this is where it was originally, and we are changing all of these `err` here
this one is missing the `expect` at the end, should make sure that the `not_to` is in the form.
@tnozicka this is the only way I've added it as the first time to start to start. I'm assuming that the time was not in the first print of the "Failed to connect" to a time, and I'm still thinking a lot more of a lot more.
The package system may be defined as `TopicTopicTopic` but I don't think we need it here.
Why not use the default `auto`?
Can you revert those unnecessary changes? They seem to be unrelated to the PR.
I think we don't want to be using it anywhere in the code base, as it's not a part of a PR.
We already have the flow status in e.g. pod failure and set sub node to KILLED
This test has a bug. It's not related to the fix, but the tests are failing because the test passes.
I don't see any new migration used?
This one probably needs updating
This import should not be changed.
@jridgewell Can you review these changes since it's needed for a new PR or PR?
Missing space after #.
We could just use `AccountStateByHash160` here.
I'm wondering what's the difference between "clientconfig" vs "clientconfig", why do you need this?
If it is a batch size, does this need to be here?
Can you add a space after the `if`?
This will break all the log messages. You want to keep the log log in a previous line.
I'm curious why this line was `Specs` and why it is not `type != null && directory != "Specs"` ?
This is just a branch that I think is a little confusing. How about `this.__data = {};`?
It would be nice to add a static import of each class and move it in the other classes to avoid confusion.
Can we make callable and raise an error in `_set_metadata_raw` ?
Should this be public?
why not `time.Duration(cr.Expires) * time.Millisecond)`?
This should just be `nil != nil`. The rest of the changes here are a bit of a logic logic and is not good. But I guess this should only be part of the `Object` function that is already there.
This change should be in a separate commit
Shouldn't we have a check for either a `_INVALID_SOCKET_==0` or a check for this?
I don't think the label label should be here right? Indeed we need to generate the label with the form.actions file.
should be coming from a custom format
We can also use `org.github.javaparser.MessageHandler.bootstrap.unregister.bootstrap.StaticJavaParser` here, since its already in `org.github.javaparser.MessageHandler.bootstrap.StaticJavaParser`
Can you move this import to the top of the file, just like `github.com/kubeedge/pkg/apiserverlite/util` so that the CLI flag is still running
Can you rename this to test_pipeline_compiles_and_executes_with_larlardden`? I don't think you need this
Why is the double underscore in `zvolWorkers`?
Wouldn't it be more appropriate to change `use Lang` to `namespace`? Or would that be more explicit that this `final` statement is redundant?
I think we want to use `go-selinux` instead.
please also add a `org.jboss.weld.environment.x` param
Why do we need to make this public? We don't have it outside of the package
This block block can probably be removed.
This is a little confusing since the `panic` function is the "NOT IMPLEMENTED" of the service, since the `panic` function is not the right thing to do. It's probably better to have a separate `panic` for this and the test `panic` for the service name.
I'm not sure this is correct. It is always `d` but is the first null value.
This will fail on any other service objects, right? Should we be returning something more specific?
I don't think this is a good function, you might want to do something more specific like `return GLOBAL_STAT(num_bbs);`, which could be confusing when you call this function.
I would also put the condition on H2O_COMPRESS_HINT_ENABLE() to H2O_COMPRESS_HINT_DISABLE. It is a bit of an un-yful.
can we add a `cid.Cid` as a member variable to avoid compatibility issues?
We already have `Objects` class in your local package. Please don't update the commit that is required.
Please add a default value here. It can be hardcoded to the default, but the default value is used by the plugin, so that's not the right value. The value for the user should be the default.
Is there a way to get the zone? I would rather not use the zone name here.
Is it possible to add a file-based property here and then just pass in the CSS, so we can reuse it later?
why is this changed?
Can we move this check to be a local variable?
Why is this change required?
I guess the name of this file should be `sys.reference`
You don't need ` duraton=0` here, you can just remove `action_actions` in the `if` condition.
I have been wondering why this is necessary.
`PerPredicate.show(..)` is a bit ambiguous. Maybe it would be better to have something like: `PerPredicate.show(..) => "This {@code Value} is empty, i.e. if the underlying value is present, true otherwise.
why is this needed?
These changes are just some unrelated changes.
I'm not sure why we use the smallbuff version here - I would expect a new function to be called for `_WIN32` - which does not have the `__eq__` file.
Can we add a TODO to rename it to `isResponseStreaming`?
We have a ` IntegrityError` module that we should probably use in this file. I think ` Integrity_list` is clearer.
Why is this change needed?
Does this need the `Solvers` variable?
Is this change required ?
I think you can just use `.format()` here.
How about using the `GetCommitsViaComparison` helper method in `CompareCommits`? It's used in other places and I don't feel strongly about what this method is doing.
I think it's safe to use raw strings here (or in the `ValidateAutoscalingAnnotations()` method).
I would use the `string_for_action` property instead of the argument.
I don't understand why we need to specify 16384. This is because we're in a loop, and we're still in that loop. Do we have other tests that call `signines.log`?
I think we should add a new `endpoint: status.tus_url` method here too
This will break existing `DEFAULT_CSRF_MATCHER`s.
unfortunately this test is not a test, so it might actually be worth it, but it would be nice if we didn't test this with the test in a test that doesn't check anything
The same as above, `slots_t` is used for both a label and a label.
I'd just call d.AppendHistoryNodes() before creating it. It's not a big deal either way.
I would make this a `log.Error()` call to `SPIFFEID` and then use it in line 130.
The `Client.Get` method is used here, as I'm not sure it makes sense for this to be a method on a field.
This is what I meant by @vaidehijoshi @deads2k @liggitt I am curious if this function doesn't return anything... why?
This seems like it should be `.encode()` instead of `.encode()`?
This looks like a good candidate for a companions discipline (i.e., we don't need to add a new API to the client) because this is only for all methods of the code base. Maybe we should move this code to the client?
this is a good idea... I'd just make it a separate function, it's only needed when the user is using the default.
I think we can remove these now that it's not used anymore
This is just a thought, as it is the `req` package I guess?
Can we add an example where `cloud.render` returns true?
Nit: please sort the stdlib imports alphabetically
I think it should be only `Is potentiall`
The indentation is wrong here
this import is used by many other places.
This check and the next line, please make it clear that it's a separate fix
I think I would keep the `_timeout` and make it `None` to get rid of both `_timeout` and `_GLOBAL_DEFAULT_TIMEOUT`.
I think you can remove this if statement and just change the return value of `opts.fee` to `opts.givenFeeSat = 0`
We can't just have a method `rwm` that returns something along the lines of a `else`. What do you think?
I think we need to make this configurable?
Is `Logger` used here? It seems to be used here.
Why are we removing the typedef here?
Why was this changed?
is it possible to have a test for that?
If this is a connection, this is why it's needed.
You need to update this. This should just be a `Groovytools`.
wouldn't better to make this a warning, as the user might not want to know about it?
What is `CUSTOM_TEMPLATES` used for? Is it used anywhere?
@matt-gardner Is this the right place for these? I'm wondering if there's a better way to do it, though it's a bit awkward.
I'd recommend keeping this as `NewWorkingSet()`.
Should we also add log messages? Or am I missing something? :)
is this an accidental commit?
I don't know if there was some concerns with this. I have used that instead of using the %s to be a %q for %z and %z but I'm not clear on why we need the comparison.
I think we have already fixed these lines in master
What do you think about extracting the `A-Za-z_][A-Za-z_>` into a constant instead to avoid breaking the relevant relevant files?
Should we use `Retry limit exceeded and then raise a `StandardError` error?
Wouldn't it be more appropriate to check for `status_code` as well? I'm not sure why `status_code` is used and `is_redirect` is used for every request (and the body of this function is in the `subrequest` block).
Should the test for this be updated with `Task.execute`?
This can be removed, since it does not seem to be used by anything, and it will be used in a different place.
This will break other parts of the table. We need to keep the `meta charset=\"UTF-8\">\n` and add it to the `referencedreferencedreferencedreferencedreferencedhack-cmd` version.
These two lines can be combined into a single numerical count.
I think this will still work if you have multiple files for the same `BoxSet` or `lib/cardImageIcon` that can be removed from this PR.
Should we add an explicit command for this option?
I think I would prefer not to use the `model_name` attribute for the value of the preference for `Value`.
The `horizontalAdvance` and `horizontalAdvance` seem to be a weird thing to use here
How about 'boltdir'?
I guess this is just a minor cleanup, but should we make `DEFAULTS` be part of the specific version of the package-level as the default?
You can use `double` instead of `0`.
This change seems to me like a bug, as this is not the same as the one below.
This should be a `const` at the bottom.
Why not use `ALIGN_FORWARD(pend_unit_size, YMM_ALIGNMENT)`?
Shouldn't the `$private` be `bool`? I would think that this is something we want to be aware of. What do you think?
I doubt we need this at the moment, but I think `////position` should be enough.
I'd suggest to add a space between the `:` and the `(`
Please use the constants for the strings, not the fields that are passed.
Does this work for non-functional events, or should we just get rid of it?
Why does this not work on Windows? Shouldn't the type be `Underlying` since the `Type` itself is the default?
I think it's better to use a different name than MiningCoordinator.
This should be `RemoteRemote.200`
This doesn't look right to me: if there are any changes in this function and all other stuff it's just a separate function, and the rest of the code should be kept (or even PR)
Please add a `@Nullable` annotation
Why did you have to use `properties` here (and above) ?
Why do you want to change the behavior of `opts.java_primitive_has_method = false`?
Would you like to explain why this is necessary? I think this is more of a deal-breaker.
@stephentoub I think this was the intention that the `Examples.Console` is actually the default. Do you think it's worth it to just remove `+` and `+=`? I think it's fine to leave this as is and add another attribute for `Examples.Console` in the `src/main/` file.
This test is now testing the wrong term. I would prefer that this is a test, not an issue.
Aren't you trying to move to a new class?
Nice! I think that we can just make `AbstractAbstractS` a const? We don't want to use it in our code base.
I think this was the reason why I left this as it was.
How about using the `metadata` as the name here instead? It is confusing.
Why not use the file_exists here ?
I think the new logic here would be nice to have it in place of some sort by name.
you need to change `.gem()` in `self._test_model.py`
Is this needed?
This could just be `final` to match the description.
Do you need to include the `-file-cost` in the name?
This is wrong (i.e. the command line is `libunwind`)
I'm not sure we need a test for this?
This is not needed, the data is not needed
This is the real fix, but I wonder if we can just return `null` if there is a null or false.
Shouldn't this be a parameter type (which is never used)?
Any reason not to just delete the `NotFound` part?
`host.update_each do |host|` seems weird. I don't understand the purpose of this method, and it looks like you're not doing anything with it. I'm not too familiar with how you're doing a `llnl.util.concurrent.tasks.as_each do |host|` at the end of the test.
This should be done in `handleResponse()`.
(nit) I'd rather have a method called `HashSetRequest` that is also defined above on the previous line and `HashSetRequest` not on the other methods.
why was this removed?
You should be able to use `err` from `#emit`.
Nit: Can we move the `if` condition up to a separate `const` block? (Or maybe just call the `eventEmitter.js`)
Just want to confirm, this test is failing?
We should make sure the `nil` here is not `nil`. Otherwise the code would fail and will fail as well.
Can you add a DogStatsdPort which can't be null?
How do we know that `available_features` is a scalar, or can we always override the `features`?
Is it used by tests?
This file has been deleted.
Can we do a TODO so that we can do something like `isinstance(appID,StateID)`?
I am not sure we need to make it change anymore - any reason?
I would prefer to see the same changes in the rest of the code
Do we need this at all?
We can do `resp = self._conn.close()` here, too :-)
Why would you want to use a new one?
I don't think it's worth it to keep it as it seems like it could be just a `./pants stack` interface, right?
It's good practice to import junit.Assert and use junit.Test for junit.Assert, as you did for junit.Test for junit.Assert and junit.Test for junit.Test for junit.Test
Should be handled by `_additional_name` as this is not a part of this PR
@Scottmitch why did this need to be made public?
This will need an `if` statement, to make sure you don't have a trailing `)`
I think we have the same pattern as in `List<String>>` and `List<List<String>>` in `isort` and `is` as in this `isort` method which has a nice reason for these to be deprecated.
Is it possible to use the same variable for `Mol`?
Think this was a regression in the first place. I'm assuming this is an issue in the future, and it seems to be the one in the PR, I'll change it to just revert it.
Why does this need to be a `null: false`?
@rhtyd as you have the task task task, why do we need to change it here as well?
these are the same changes as the others so they are not required for the key
This is a very fragile thing, but if we're going to change some of the calls we can get rid of that since it is now a simple field in a field. Can we instead get rid of this field?
I think the name of the test data should be changed too. It's an API break and should not start.
What's the difference between this and `g_autofree` in the `dependency` block?
This file is now unused, and will break existing ones.
This is a bit unrelated. If we are doing the outputs and then the next one, we can remove the outputs as well.
Can you put a new hash at the top of the file?
This parameter is now a "The parameter in precedes them" error.
I don't think this is still valid, it could be imported.
This is not correct but we need to keep the `true` flag and make sure `closeclose` is set to true, which makes it a bit easier to maintain
What does this change represent?
We shouldn't be able to do these. You might just need the `!=` here.
Missing `__iter__` imports.
I'd prefer to not add this file as an implementation detail. It would be clearer to have a name like `fanout-enabled`.
The `while retries < 1` check seems unnecessary.
this could potentially be just `custom_recall` if the input is not a list
I'm not sure what the best way is to check the network here. Maybe it should be "network-host-project-id"?
This seems like a reasonable change as well to me. It is used in another file, but it is used in another file that will be removed in this PR.
This is a public API for us (it should be in a separate PR)
can it be `const` ?
I would not add new version version since you are setting version version in the app.
I'm not sure it will be better if the second returns false, but the second return statement is a bit odd.
There was a reason to change `GET_CANVAS_URL` to `getCanvasUrl` for `uploadFile`, is that intentional?
Shouldn't this be `0 && argc != 4` as well?
Please use one-off-off-off-off-instance mode, otherwise all usages will have the same "game.h" module, as the other functions that work on the CWD, as the "game/format.hpp" module will have the "game.h" package. Also, you can remove this line.
Is it necessary to specify the ` duraton` class?
Is the previous version of the previous version `final long length = from.length();` ?
I think it's better to just use `update` here, not just `integer.new`.
If it's the correct type, it is `bool() - 1` - which is the default value for `bool()`
We need to move the `.ayjs` partial partial partial to this file. It's used in several places.
Is there a reason for this change?
Can we get rid of this and just return `schema.GetDirectoryName(Path.Combine(tracerHomeDirectory));` for consistency?
(b) code indent should use tabs where possible
can we just make this a string, not just a string?
The array array is a string.
Why this change? Is not the scope of this PR.
this is not necessary. it can only be used on a separate PR
I think we should move this check to `encode()` so it's clearer that it's a new type of the type.
Why not use `err.close()` here, since the `err.close()` function returns the value of a `*`?
I don't think this is the right place to put this. It should probably be removed.
I'm not sure that this is what the right thing is here, since we already have the default, why not just pass the default value here?
why is this line removed?
Unrelated to this PR but I think it should be moved to the core `/api/v0/test/v1/testing_auth.go` instead.
I would prefer to not have this as a `notification_important`, and also if there's a `notification_important` we can use in the `is` instead, but this will make the tests fail for more complicated-tested.
This isn't being used.
Can we have an example that would allow us to add a type annotation for this case.
Should this be `Microsoft.Design.in_tools` as well?
Nit: I don't think this is used anymore.
This looks like something that can be moved into the `if` statement, right?
What if the user didn't specify the current URL and no longer exists?
this is an unintended change
I think I would use `defaults.extend({}`.
Why the need to be done in the `char` block?
@andrewkroh Will the story-label mode not have any effect on the system? (And if you have one for each of the tests?)
is this going to cause OOM in the log?
You can also use constant from logger.newHashSet
what happened here? why you removed the params params?
This is not a valid node name, but is a bit confusing to me
Is it not used anywhere? If not can you move it to line 179?
What's the purpose of this test? It doesn't really matter as we have the same behavior in the rest of the code.
Should we add some docstring here too?
why this class was removed?
We have `sql` and `sql("DROP TABLE IF EXISTS %s", tableName);` in a few other places.
this should be `block.Set(cachedBlock, prefix, latest, status, data, ...)`
Why did this change? It seems to me that I don't understand what this class was doing.
Should this be "LowerCaseHeaderMaps"?
@jona-sassenhagen you missed something here...
I think we also need to update the Srm hash in this file.
We should also check if there's any other way to make sure it's in tests.
The `char *` should be removed
This is a change in behavior, but if we do, we could also change it to something like `elif-elseif-else if-else { return false }`?
This is the only place that uses it. We should make sure that each URL is always available. Also, I would think that this should be an array instead.
I'm guessing this was the only place where you used `get_default_config` to set this?
I don't think we should be passing in the `repository` instead of the `e` model. We can use the existing `e` model directly here to keep our logic more readable.
Is the `zone.clock.Now()` call really necessary? It can be removed.
Could you please revert those changes and the ones below?
we need to pass in the lock in in the context
Can we rename this class as `JavaParser` ?
Why are we removing this?
I think you can get rid of this too, but I think it's not necessary to call this method.
I don't know if we can set the `.kafka` to nil if the name of the `azkaban.logging.kafka.enable` is used as a property that is not set in the code of `//i-raises` but if we do, this is fine to add it back in the config.
This will still return null for all conflicts, because the above line is not yet initialized and we will always return false and the above line can't just be removed, since we already added a value.
Is it not possible for a class constant? Can't I get rid of it?
Shouldn't we just do this in `orig.go` to get rid of that check ?
Just curious, why not use `global.flagDACCIO_API_URL` directly?
This should be in `io.prestosql.spi.runtime.runtime.runtime.testing.runtime#build`) and also make sure we don't get the right error message when it is run (so if you do not generate it), then you'll get an actual error message
I don't think these properties are needed for the case of a valid example.
This will need to be renamed as well.
@liggitt this needs to be `losc`
@cramforce do we actually have to update the `gt_masks` part in `results['gt_masks']`? Is there something else that would be a mistake?
The `else` condition should be updated to the `if` condition.
Shouldn't you be setting end to `0` here?
I would have expected this to happen in `Xhttp.MethodHandlerFunc`. We have to fix that in `Xhttp.MethodHandler` as it's now unused.
These are no longer relevant.
I don't think we should remove these lines. The first `approval` is the only thing that uses this function. It should not be needed for this PR.
I'd prefer a single line `if (` (`file_exists($carousel->getUploadDir() . DS`) instead. It can be used in the `if (file_exists($carousel->getUploadDir() . DS . $carousel->getFile()))` check below.
can we make it a const?
Nit: I wonder if this is a correct place to put this
`id` is a `string` type. It is the type in the object that we don't need to be setting it here anymore, since we don't expect it to be setting up to the `id` field.
Should we log this in the next PR?
`__init__` is only defined in the message, right? I'd expect it to be an optional parameter, and use that instead.
This change doesn't seem to be related with this feature, though it was for a while, so I moved it to a different package.
I don't think this belongs in this PR. I'm a bit worried we'll be not doing any additional work as is.
If the user specifies `None`, then they wouldn't be in the last line. You'd need to move that line to the end of `self.config_filename = (kwargs.get('config') or None)`. It should be in both places in the line where you use the last line above.
I think we should add a new constant `padding: 0`.
This doesn't have any impact on the project (in the PR description). We can probably just change it in another PR, though.
Is the name "opened" or "last-focused"? If not, how about "F-picking"?
`for (`Closeable` isn't needed anymore?
I believe this is the only place in `Address.html()`: > `Address.html()`: - I think we should keep this as a private method to prevent any member from being created. For example, if the object is not defined (or is the object in the `Address()`) is the same.
Nit: `replaceResultInFormWithNew` is already used in the interface, so I think it's better to remove this one and just use `FormWithNew`.
I would move these lines down, for the `show_email_with_valid_credit` method, we can just remove the `ProductInput` altogether.
Please don't remove unnecessary newlines
This is not really a good name.
I'm not sure about this... I think the `deadTimer` is still not a valid `defer deadlineTimer` because it's just for the same kind of validation.
Why did we drop the `assembly`?
(style) line over 80 characters
As far as I can tell, this should be called after the point is destroyed on up event
Hmm, is this still a valid fix? What do you think?
Is this function still used?
This should be in `OptionsDeviceFuseMount`.
If this is for backward compatibility it will have to be removed.
I don't believe this is needed, as we already have the lint file in #if81
you can drop the `render` here if you want
This method is only used by `close`s and should also be removed from `scoring/libkb/libkb/`
Can we do `t.Stop(ttl)` instead?
why is this a pointer and not a pointer?
this should be moved to the `get` method so it is called when the `$codebase` is not set
Why does this need to be made public?
why do you need to import here?
The second half of the hash is a bit ambiguous now. Can we change it to `expect(<div key="1" />` and use this to ensure that the hash is not set?
Well, it is possible that it will be removed after you use the `.dev` prefix, right?
I think this might be better suited for `0-9]{1` since it's the most common case but it's probably a nice catch/all we follow the pattern of checking for both 2?
Why is the default value not needed?
This can now be `InboundMiddleware` but I don't think it's safe at all.
Why are we not using this for this?
We shouldn't need a default value here.
I wonder how much of the code is done for the ` optimizeParams` method. If we don't want to keep it, why don't we just pass the function to the `i`?
Can we use an `data` instead of creating a global variable?
Do we need a check that `master` isn't present as an optional or an empty string?
I'm not sure if the `.h` file is needed here
Why don't we use the global "boolean" for all of the parent?
Should this be removed?
This can be removed.
Also, this `convertSourceDataArray()` will return `null` for `null`. So, if I'm not mistaken, then `instance` will return `null`, so the `getSourceData` will throw an exception.
We can remove this line
Hmm, why would this have been introduced?
This file is not yet initialized. We should remove it.
I think the `tensor` should be `None`, and not `(img - mean)`
I think the `void` should not be needed, because `string` is not always `null`.
Hmmm, I don't know why we have `_cancellationToken` already, but I don't understand why the need for the default type. Why is this a default type?
Wouldn't this be better to have the `yoast-code-lock` defined there as well?
Do we need this?
@nmittler - I'd prefer if this is a good time to change. If it doesn't happen often, it would have been nice to use the `canPlayType` helper method.
Remove?
Please keep the order alphabetically sorted.
I'm not sure this change is correct. I thought `index_spark_columns` will never be `false`?
Should be marked with a period, or even better, use a trailing space for all arguments
@bartonjs, can you update the test to ensure you are not doing the right thing on the server?
Why is the type annotation removed?
Is this a bug? Seems unrelated
Does this file need a migration?
You can just use `settings.get_app_settings(self, additional_settings=None):` here
Why are we making this change?
I'd rather you use a `ConfigTypes` constant here, it's not really a name for these.
Please don't do this, it should start from our views, it should go in the UI and move this file in the `setup/utils/config.js` file.
"... to be used for issuing promises" might be better.
Why is this necessary? The controller is already a controller, so it shouldn't be an actual element.
Please use `opts.prefix_size` here.
Should remove this line
Nit: I think you can get rid of this.
This is also not needed since it is already used in the view model.
Is this error supposed to be handled in a different PR?
This is a little confusing, since the Bento components don't need to have the `internal` parameter.
it can be improved but can you change the description to `const promise when no callback supplied to forEachcaled(done) {`
I don't think these are needed for `display: deletes`, since they're all related to the same namespace.
I think we want to use the `FetchAgedQueuedFlows` as well. The `hasUserError fetching active flows` and `FetchAgedQueuedFlows` should be `Error fetching` and not `final`
I'm assuming these are the only ones in the function that are actually actually doing an empty string. Is there any way we can get rid of this? It seems like the only reason why we wouldn't want to check for empty strings.
this is not true as if not added.
this is a change that will break existing code, as it is now done in the other `:scikit-learn`
I think there may be other places that we call this one. Maybe rename this one since it's already called in the render module.
Why not use the `crypto2` as there was some reason we don't use a `*crypto` package? This seems to be a bit of a concern since we are just using a `crypto` package.
We can't tell a user the user that they were using this? (and if they are, maybe we want this to go to the server too?)
(style) space required before the open brace '{'
This is a bug, why not just pass the entire object directly?
Does this break if the `opts.of` is nil?
I'm not sure if this is going to break the behavior of `cancel` in the processor. I think it'd be better to just use a `cancel` interface here and use a `cancel` interface in the processor.
think this should also be `array $bundles`
I would suggest to move this into `history_key.py` so that we can just do this in a few different places (i.e. the existing code would not work, because we do not have a problem).
@danny0405 Can you please move this function to the other modules as well?
I think a cleaner fix here might be to use the constant from the `ox_fplin` constant instead? Or am I missing something?
How can we handle the path case when we don't have a folder?
Why was this removed?
This file is actually used by the PR description, so I'm afraid we'd want to remove it from the PR description as well.
Shouldn't this be `/etc/etc`?
This would probably be better as a protected method
hmmm... I wonder if this should be a `fetchUser` instead of a `fetch`. I am not really sure what this is for
Can we also remove this?
nit: this is unnecessary since if `qs` is `None`, it should be enough to just be `querystring=True`
I think this is not needed because the log is pretty specific
Why is this `""` in the `*testing`?
Can we avoid adding a new filter here? It's possible this will cause problems in other environments.
Why not keep these in alphabetical order?
Is this really what we do before? I'd be in favor of putting all these on one line, and then we could have one line in the future.
This is not needed.
@smarterclayton should we have this in the `header` package?
Why is the cast to an integer?
This should be a nested module, not a `List`, `List`, `List.from read`
Seems like we shouldn't be doing this. I'd just make these two functions `get Writer` and `getied` and have `getied` return a `string`.
I don't think we need to print an error here. The code is in `BuildIndex()`.
This is not correct - it will have a default value which will not be `None`.
Should we just limit the form of the `401` spec? It looks like this spec has always been used for debugging.
this does not change the behaviour - it will not work with the key 'default' option. You should try to make a copy of it to get a copy of the option
This can be left as-is
Please put the original constructor under `Benchmarks`.
@sjenning can you add this flag into the config file so the new ones are removed?
I think you don't need these imports
This file is still not in S3D and is now built with `WinConsole.py`
Style/EmptyMethod: Put empty method definitions on a single line.
This should be `str(str(value)).to_markdown()`
I think this is a breaking change. It means you would get a test with no good reason for it. It should be `using System.servers.size !== 1`.
The condition here is not correct, it should be `len(parameters.scale_factor < 0)`.
Is there a reason why the `is HttpWebRequest` has been removed from the extension?
Why did we need this change?
This doesn't seem to have anything to do with the new endpoint. Can we just remove it?
can you add this to the description of the docstring?
I don't think this is correct, since the only thing that is passing is for the `ProxyFactory` instance.
I'd also recommend adding a type: `get_node_first_ancestor_of_type_and_its_child`
Can we just remove this code?
I don't think the `--kill` flag is necessary
I'm a little worried about that, since this will only happen if there are no elements or not, and the `if` statements are not actually needed.
This is only used to get the underlying elements.
This is no longer a string, so we want to make sure there's only one element at a time.
why is this necessary?
We should check whether `maxDate` is always `null`. We are not checking for object types, so I think `minDateFormat`.
Why not just `bundles_BACKOFF_TYPE_Evaluate`?
this check should be moved to `runtime.element` as well
This could be removed in the changelog
Can you use the same logger for the other keys?
Is this a bug fix? This is the only place where you call boost::make_shared here. I can't see it being used anywhere.
We should rename this to `getDispatchMethod`. It is a bit confusing since it is a public interface.
This should be ` DashboardUrl` instead.
I think we should print the key here.
why do we need this? I don't think it can be a problem, if I want to make a `state` map, then this should be something like `state[string]interface{}` and `state[string]interface{}`
can we move this to line 173?
This is needed when creating the default constructor and the `RpcRpcUrl` from the `Url`, we don't care about the `string` argument
This should be `.to_s` I think
I am not sure how the log level should be. Please let me know if you have any scenario on how to fix the test. The log is not a problem, though.
can we make 1 instead of 1?
We should only be calling function function here if it's already in there
Is this really what we want? I would expect it to be `const` rather than `&Sublist{root: newLevel()}`.
can you make this a `TestAccAWSLiteralFetchDate`?
Could we have a test for that or can we fix that?
Why was the line changed?
Is this an accidental change? If so, we shouldn't have an option here.
I think we can remove `ZFS` from here now because it is no longer needed.
I think it's better to have a static method that returns this class, and use it instead.
I think this should be an example in some kind of spelling that will be handled differently.
I think you should put `block_processor_batch_size` in a constant in the file and use that in a separate function. Otherwise, I wouldn't expect this to break something.
I wonder if we should just import ruamel.yaml at this point. We should also import this from `__future__`
Can you add some utility methods here, and say in all data points that are within the expected range.
I think I can remove these.
nit: I think `b = bytes.Replace(b, []byte(rootDir), []byte(scrubbedRootDir), -1)` would be more consistent.
What's the rational behind the ParameterList here?
This will be a good cleanup, as it's no longer an issue to have a separate JIRA ticket for it, and should be fine to leave it to the future.
Use constructor member initializer for clarity.
Why is this import removed?
I don't think this is the right place for this change. The `log.Println` calls `info.log` on the `if` block.
Can we use `LOGGER.warn` instead of adding it here? The message has been more appropriate to indicate what the problem is about.
Can we rename `logsDir` to `logsDir`?
Why this has to be added?
We could just make sure that this is not u, right?
This should be removed as well.
Can we have this constant as a constant? It is used by other applications. Also, if it is, it seems like we would need a constant for this setting, since this is only used in one place and it seems to me like a name would be better, but a little more consistent with how a user is used it.
I'm not very familiar with this. We should probably have an `assert` in here.
This is not needed. The caller can just do `return cgroups.PathExists(m.paths["devices"]` in line 176: `return cgroups.PathExists(m.paths.devices"]`
Not sure if you need to change this, but I'm not sure if this is the correct change.
Should this be done after the `status` call? The `status.uploads` event has been updated in the last commit, so we can remove this completely completely completely, because the `objects` event has been performed as expected.
Should the logic be applied as a path instead of a path here?
I don't think we can do the same here for both config and config. Do we need something that needs to be passed in as well?
This is a change in behavior for `6_000_000_processor` - it looks like that should have been left in.
This isn't going to work, we only need to use the default one.
This is the reason I'd like you to move this into the `service/aws` package.
Is this needed? `max()` is already called by `unbox_keys`.
Nit: remove empty line
I'm not a fan of using the `google-site-kit` variable. Could you move this to `CACACACACACACACACACACACACACACACACACACACACA_state.py`?
This is a bit dangerous, we already use `error.message` everywhere. We're not doing this.
This is a very generic name, I'd be good to have it in a better way.
I think this is an error.
Instead of "fill", I would use "fillObject" or "fillObjectInvert", which I think is more correct
Why is this a field in the constructor? Seems redundant.
I'd prefer a different assertion than `today.new(starts_on)`.
why do we need this? We already have a check in `unescape` before it is called.
I think you're missing some context here: `catch(() => { }`
I don't know if this is the correct fix. This is what we do for the user to read session, and if so it is the only time that the token is still active. The token should only be cached.
Why are we converting the data into the block?
Here's a test where the `answer` was created. I think it's fine to keep it, but it'd be easier to read if we changed this to something like `assert answer['community_status'] = status_code']`.
I don't think we can just use the copy here, but this is a bit confusing with other logs - is it OK for this to be `cp.filter(r)`?
I'm confused why we need `var`? Why are all of these being changed?
Is there a way to test this?
I think we can remove the `HTTP_examples` from the `HTTP.rb` file and just do this in a similar PR.
Not sure I follow this change, but it seems like we should change the type of `RaulFraile` to `0` for consistency?
this seems wrong... why is it only for 3rd?
Should it be using `char_release()` here?
whats the difference between this and `AccountMaxVersionPrefix`.
@deads2k @mitchellhenke would love to get the `ecamespace` into your change as it was before?
Should the error message go in here? I don't think it's the best approach for this, as this is a different exception.
this was a very bad place for users to be able to know if there is a better way to implement this. I don't think that's necessary in this PR.
Why is this one changed to `ipVersion`?
I assume this removal is still needed, but if the `IDvals` package is no longer valid, the `IDvals` needs to be removed.
This is probably a problematic place to put this check here.
I think it makes sense to add a `_clone_git_repo` in these places to be consistent with the rest for the exception (in this PR, to be sure that all the other tests have changed). Maybe we could just add the `ScannerError` exception to all of these cases and then use the `_clone_git_repo` exception that we do, and instead just add the exception to the `build_from_path` call, or just have the error message be the default
This should be added to `blacklisted-name` in the `.valid` file.
This was a no-op so I'm not sure if it was intentional?
This needs to be added to the PR.
Should this and the similar ones below be removed?
What are you testing? Does the RegexOptions.IgnoreCase have to be the right version of the version?
This is only needed for the `isort(k3)` branch?
This seems like a very odd change. I'm a bit confused by why we did not `top` at all.
I think we could just remove this line.
Can you explain why you needed this? Is it a problem?
Why was this moved?
You might want to add this to the list.
I think these are all `internal`s and `public`s. We can use it elsewhere.
Why do we need to specify the output here?
Isn't it still a path?
Please remove the `@Rule` annotation.
Why is the `/tmp/non-existing-dir-%d/process_test.pid` file now needed?
You could just make the `NPE.log.Views` and then use `NPE.log.Views` here.
why not `verbose_ styles`?
The `log` namespace needs to be removed.
`useHasScrolledEffect` should not be used anymore.
Do we need this line?
I think we can get rid of this too.
`repo.GetBranch` is probably a better name for it.
You need an update here as well.
This will not work in the code, but I think it makes more sense for it to happen at a `createLayout()` and return the attribute instead of the attribute
Should we update the docstring to reflect the change?
This should be `export * from './setupRerender`.
nit: I'd use `ConfigConfigConfig` here instead of `ConfigConfig` for this case.
this is an actual fix
Is it possible to get rid of these options as well?
Isn't this a BC break?
Can you add a `TODO` to explain the reason for this?
Why is it safe to remove the `balance` parameter?
Should this be `nullptr`?
I don't think `valueOf` needs to be here (and the corresponding methods in `getBound`) or `getBound` is the only one that gets passed to `value`.
Same here, there's no way for the pool to be renamed.
If you're using the service service to be, then it would make sense to move this to the `ServiceService` interface. That would be more readable.
@ruflin I am ok with this, but I'm guessing that `awserr.Error` is the default now, and it's the default?
I'd prefer if the `assert` is a `try/catch` block above and not its own `describe` block.
I think you need to remove the old method and use `guid.conflictDetectionFilter(conflictDetectionFilter)` in the commit message
I'm not sure if this should be a separate import.
Can we add a similar note about these new `span`'s generator functions?
Is there a reason not to make the `path` argument public?
I had to change the text here to use the same link as the new `imperial`.
Why do we need to add `ProtoIPIP` here, rather than just `(uint32)`?
The previous `GET` was the last one that was incorrect so I removed it.
This is going to break compatibility with the `second_digit` part of the code, since it is a part of the `file_to_linux`.
why not use `t.Run` instead of `t.Run` in this line?
do we need to have a test for that?
This is not correct. The whole plugin should be sent to a plugin (eg. if the plugin isn't found before the plugin is installed)
`StringProperty` is removed in `ActionEvent`, you can remove it.
Is there a reason to change the default in the property names?
Nit: I'd prefer to use the `state.Graph` here, but that's the only case. It is not a big deal to make the tests pass.
why is this only for Transactions?
I don't think this needs to be added here. The constructor should either be called `super`, or we need a separate constructor.
This was a leftover from debugging.
The `!deletes.contains(schema.findField(name) == null` check seems to be a better place for this. I'd just add `!deletes.contains(schema.findField(...))` and check the `Name` field.
Should we be checking if `ddev` is an object of `_plugin`?
why is this change required?
Please also change the credentials below to `Lade`
@krzysztofwolski Can we just make this `if not config.minimumUmask = -027`?
Why remove this line?
This is an unrelated fix
I guess this is not a good choice but we could remove it
This could potentially potentially result in a deprecation warning when a field is empty
I would suggest changing all our CI CI to match the imports in the imports.
I think we should leave this alone here and not add a new one for each call to `SourceData` to get its own.
Please change the parameter name to `push`
We need to do some refactoring for this. For now, it's just `break` and `breaking` don't match. I'll write it as `#if NET452`
This will be done in `createUser` with `createUser`
I know this is a change in behaviour, but we should make it a little harm in a follow-up PR (in a separate PR)
Why is this line removed?
Nit: We should be consistent with the other places in this file.
can you make the doc and spaces around the iteration?
I think we should change this to a `default` struct.
I'm not sure if this is correct. Maybe `0u` will be more generic?
What exactly is this change for?
This needs a `Shortnapshot` call to `ResponseSnapshot` in the UI.
I am not sure I like that the method name here. I think it should be something like `validateUserGroupMembership`. What do you say?
I think you need to move this to the interface and remove the BlockTree in there
could we rename `timeout` to `TTLDuration` for consistency
What do we think about this as well to avoid a new method?
should be a single line string
@buchgr I think we may want to change the default behavior to 'X-Priority'
Why this change? I would expect this change to work properly properly and then I'd prefer it not to be there as a follow-up to discuss that.
For the record and others it might be nice to have this be a utility method.
Please don't make a proper variable, use `changed` instead.
Why are these needed?
I believe this should be moved to the new interface since that's the only one that needs to be applied to the base `IdentityCheck` module.
This is wrong - `user.up(rrelevant) == 'false'`.
This should be set once per `panic_type`. Otherwise, the only difference is that if you're doing that you don't need to call `NewKeyedStorage()` at all and we don't need a call.
@jsoriano Is this the correct thing we use, or should the token be `type='token'`?
The `cancel` is no longer used in the model, so I would keep that, since we can't do it here.
We should probably have some sort of `abspath` here and in other spots of other `TypeError`.
If we want to have a test that checks for non-max nodes, can we make this test pass? Otherwise we'll be good enough for now?
I guess this should be in the `Gemfile` package as well.
Is there a reason for this change?
I don't think we need this.
I'm not sure about this - we can set the env variable when we set the env variable in a config.
This test is the wrong place for this PR
This should probably be just a warning I suppose, since the tx ctx will be false.
Can you change this to be `url-config`? The `gitBranchFlag` now requires a proper name (e.g. `url-config`)
This is going to make it easier to read since we're using `:UNKNOWN_PLAN` instead of `.issue(:UNKNOWN_PLAN)` directly.
Why not just `import numpy as np` ?
I think there might be no need to check this here, but since the text was added in the `create()` method above, the `create()` method will return `false` if `false` is `true`.
Why remove the TODO?
This is not used in the anywhere
Won't this always be false even if `ctx.User` is empty?
Please use `1` instead.
This should be reverted, right?
Is the `defaults to Internet-facing` correct here?
We should probably also use `circular-json` when we have `<=` in the future.
Nit: I think we can drop the .After parameter here, and just use the .doot file instead (in a separate commit for the next PR).
Just wondering how often would this happen?
no version.6.3?
You'll need to make sure this is not enabled by default.
I would move this boolean method to be shared, as it's not used outside of the method
This should never be null, right?
I'd like to see an example where it makes more sense to make this a private field.
Could you please also use the `ACCOUNT LOCK` constant for this (i.e., `MAX_USER_CONNECTIONS3`) instead of passing in as an argument?
This line is also not necessary, you should be able to remove it entirely.
Why do we need to do something with an import time instead of a `x`?
Why did you move this code from `segment\parse\parse\parse\parse\parse\parse\parse\parse\parse\parse\parse\parse\z` to `segment\parse\parse\z`?
I'm pretty sure this is a string but I'm not sure we should change the name of this string. It's a bit weird.
This is an unrelated bug fix, but wouldn't it be better to do something like `testing.TTBATE` instead of `testing.TBATE`?
Should this return `false` if `FieldMetrics<?>>` fails? Or should this be `false`?
I don't think it would ever be better to make this change to the user and pass the names in.
Wouldn't it make more sense for this constant to be public?
This import can probably be removed.
shouldn't this be called if you are not using a null node?
I think it should be a `map[string]string` rather than a `map[string]string`.
I'd remove the `#` and the other one below.
"The flag could not be read"
is it a typo or should it be an enum?
better to use permissions=0o600 for all new users.
I'm not sure why these are necessary, but it is not used.
This should be `floor_thr == 0`
Should have moved to a separate package.
We should use an existing `react` package for this, as we do in the other files
I think we should have some of this method in `MemoryAndSwap` that would be a more general purpose for these.
this is a bit of a hack - is this a copy/paste error or does it need some kind of constant to store the value in a constant?
Since we are already here, can we change this to `nextEpoch = true` instead of `DefaultEpoch`?
This looks like the wrong thing. If it is, the row is an empty array (the oldRows class) and the oldEntity are empty, and the oldEntity is never empty. So I think it will also work.
Shouldn't this be a constexpr nano::frontier_req_client::size_frontier when it's needed?
This is now the root cause of the problem.
Why is this necessary ? (and why not just `@var` :-)
Why was this added?
I think this is a bug in #23390
I think we can just remove `GasLimit` from here. We already have access to the `0.9` in `before_system_setting_setting` when `0.8` does not support `0.9.0`.
I would not use this, and use `PRIVATE_SUBSCRIPTION_MULTI_TENANCY_ERROR` instead.
This may be a bug, but it's not related to the bug, but this is a fix for a different PR.
can you update the tests with the new functionality as well?
Why remove this?
Are the changes made in this file required?
Why don't u do this message anymore?
This is the wrong place for this.
please, add the new parameter to the top
Is there a reason for this change? Are we not using it anywhere?
can you update `is_style` to use `text_baseline_size` and `text_font_size` here too? We do that in a way that makes it clear that the image is in fact an already-existing state.
You're not using the plugin stream and the plugin stream. You don't want to use it here. You can do `#if HAVE_SECURITY:`
The attribute `id` is no longer necessary since the `!id` is always set.
This is not used, remove it. Also, do we need to update `ConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsole
@daniel-beck is this intentional? `formatTimeAgo` is a very bad name
Is `Hadoop` not needed?
Should the wording be "nan"?
I think we can also get rid of the `1000` arg now that we do not change the default behavior for the `notBefore` interface.
Hmmm, I think we have an issue with using `git blame`. Should we check for `beta` and `git blame` ?
Is this an oversight or just a change in behavior that we should not need to change the behavior of the state from the state here?
Why change it from True,False to False?
Can we make this change to use a constant somewhere in the code so that we don't have to use this value for all the other languages?
This can just be `@var string|bool`, no?
The `new JSONArray(...)` has been removed.
we can remove this as it was now that we don't need the `useV2` function anymore
Can you add a typedef to make it clear what the normal case this won't be?
@smarterclayton do we still need `ctx.db.Begin(ctx)`? If so, we can remove it from the other PR.
@jmhooper so it would be good to remove this too.
Is it possible to use `is_active` instead of `is_active` here?
Why do we need this check? Can't we just get rid of it?
We don't want to log the error here. Just return the error.
I would use a `_` constant here.
Should we make this a `POD_NAME` constant? Or perhaps even better, `POD_NAME`, `POD_NAME` etc.
This is the only real change in this file, it will be fixed as part of a PR but I think we'll be removing it.
Is there any way to keep the same logic and pass it in to the `CreateScope` and `CommitHeadersIntoMessage`?
Is `Rewards` still required?
Should we make this a constant ? (also the other places we do not use it)
Is this really the correct fix ?
We don't need this.
I think I've added this "if not registered" part and the password "username still is already registered" here. We need to keep it in place of this change as it makes it clear what the password is. If the password is already registered, then the "if not registered" is "if !username" is already registered.
Why does this need to be public?
I think this is not related to your change, but I am wondering if it's not needed for `Core`
This is a bug in our current code base and will not be removed.
I am not sure about this, as it does nothing now. Can you remove it ?
I'd also move this to a helper function since it's a private module.
This seems to be a little hard to follow.
@michalk: My understanding is that you'll get the NPE check for the version of a specific configuration, not the configuration. This will make sure the region is not empty string correctly, right?
Please use the same check for the other methods (e.g. `ZP_PKEY_CONFIG`) - also, please check if you have the same code as before.
I think we can remove this check now too, right?
What is the purpose in adding `CredentialExpiration`?
This should be changed to `show_255_255` and not `show_255_255` (the function name)
Do we still need it anymore?
Is this necessary? If not, we should use `EmitEvent` for better debugging.
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
Can we rename user to `InlineForm`?
This is a bug in `self.cancel(False)` so you don't have to check that the file exists and already exists.
@liggitt this change made the tests pass as expected?
Should we do something about these, e.g. `[]string{"/home/weavewait/weavewait"`?
Why is this being changed? Could it cause any issue?
Also not sure why it is here...
`configPath` and `config2` have the same concept with different versions of the different versions of the different versions. This is the reason for having a different value `configPath` is not the right value here (which is the default value)
Maybe `UTF_info.Generating.uninitialized?` is more suitable than something we can remove?
What is the purpose of this `if` block?
Why do we want to move this check inside the if block ?
Why is it not a repo?
this should be removed.
We should not log here since this is the only function that can be called by log in the log level.
Why do you need both `*` and `*`? It's not a big deal, but if we want to use them as a special value we should have.
Why are we returning an empty array?
Why `ServeHTTP` and `rec` are both being ignored?
This is a bit of an API break.
Should be `CheckConfigAndShutdown`
Isn't this function now a "skip" for all overloads? I think we should use a single `ReportUndestroyedObjects` method instead.
I think we need to get rid of the `reGridFSStreamError` here, but I don't see where we've changed it, so I've tried to fix it.
We should be able to use `clientset` in our codebase. It should be `server.argv.client`.
This is a little too vague. Can you please add `ISpan` to all of the methods in `src/server/pkg/tests/test/test_go.go` ?
This line is not necessary
can you make this a `AutotoolsPackage.verbose` as it has already been set on the other side as well?
This is a bit hard to follow: the `bridge.print_page(options)` method is only called if the user tries to run this method without having to create a method.
I am not sure about this. If I understand correctly, you can change the name of the variable to `_checkChainProcessor` and make it public.
I would have just put the `LINKSTUB_DIRECT(l_flags)` at the start. The first one is used for a non--length string.
Seems this test is failing on master. Can you explain how this line works?
This is not used.
I would not add this to the constructor, it is a little strange.
I think the endpoint endpoint endpoint endpoint is a bit weird to use a `list_tables` for the new user and this change can be removed now since it has the problem that the endpoint endpoint is still being added
I'm not sure this is needed since it's a `_format`
Why does it work in this file?
this is not a good change. But then this is the cause of the flake8 tests to fail
This should be in a separate file.
Why did you import sys here?
why not pass the context directly? It's a bit too big, since there's nothing wrong with the actual context.
Why not call the callback.onError before the bodyConverter?
nit: this is not used anymore, right?
we could just pass in `false`?
please wrap print statements as they are not related to the rest of the file
Why not just call `ExceptionExceptionInHandler(ex)`? It's a bit of a hack, so it might actually be possible to get rid of a method that does that.
This can be simplified, if I'm reading it correctly, let's keep the `@Nullable` return the context for the constructor.
Please rename the property to `logger` and remove the `isSaves` property
this should only be called when the label is set. it's probably better to make this the default constructor
This is a bit of a mess. Is it a function that only returns true?
I believe this won't work. I think `options.ThreadCount` is already checked in the `TestAccAWSFunc` package.
@bharatviswa504 Can you check this in the `type` block? I think that it should be `blob => blob.type?.length > 0`
This is an important change and will break existing users that don't have to duplicate it. We can also replace `self.can_change_org?` with `@return [Action(...))`
@kargakis this is the right place for this function to do this.
`job_failed = 2` is probably a good idea here
Is this really necessary?
Please remove this
Why not just make a `info` call here and call `finest` directly?
I would prefer to have a single string, `proposals` that is a bit simpler.
I was a little surprised that if we get a product_id in the regular regular regular{{ ... } return true with no product_id is the same name as the second parameter of the pv.
Is this really necessary?
We need to keep the `isinstance(kser.spark.data_type)` part that checks for a callable type.
Should we have a "tests" for these?
Can you move this to the top?
nit: `for k, v in obj.items()` would be more natural.
I'm not sure we really need this. The test `include_all_instance_status` is supposed to be called.
This will need to be added to the base class `setup_newlines`.
this is already in the same `DomainReplicationConfiguration`
I'd prefer to have an explicit `Broken due to yaml safe load` that we could avoid doing it here too.
I think this should probably be a helper function.
Why do we need this?
@deads2k @smarterclayton do we use `<tree.getChildren()` here or even just `tree.isLeaf()` ? (also below)
Why did this get rid of the test?
The "is it the default" is a little vague. Is it really the best option and we could have something like that?
I think this is a good idea, as we are in the same time we just using the refresh and there's a lot of time we want to start with, right?
Why was this removed?
Why not leave it as part of this PR?
Nit: we should be able to use the header function for this.
This is the only change that will cause a regression if the `import.second` check doesn't exist (in a subsequent PR).
Can this be changed to a set incorrectly? That way it is not used by the default.
@Override over the TODO above.
I believe this should be an `if` statement.
You need to use the `std::unordered_map<std::string, uintptr_t> coGlobals;` in this file. The new one `std::unordered_map` is to be `const std::unordered_map<std::string, uintptr_t> coGlobals;`. It is not a blocker for this PR and will be much nicer.
I think we should keep the old method and just change the `HttpClientInstrumentationOptions` to `HttpWebRequestInstrumentationOptions`, and remove the `HttpWebRequestInstrumentationOptions` parameter.
I think it's better to make this configurable, like `<i>`.
In case of `if `Run` we should add a TODO about why, or should we move this to a constant so this will be clearer as well
I guess this is because the caller now has all of the logic for this logic.
Intentional blank line.
Is this change intended?
Shouldn't this be `Collections.emptyMap()`.
This seems a little weird. Is `GauntletMap` always going to be ignored?
This is not necessary. The `:app/blacklight/page_searches.html.erb` file should have been added to the `:app/blacklight/page` file.
Nit: It's not clear from the name of the convention - the function name is `opt` not `registeredGlobalOptions`.
maybe it was better to add this check to `isProtected` instead of `isProtected`?
`play_raises` should also be added to the `XHTML` module.
I think you can delete the setter in the property now that it has been deprecated.
Use the new Ruby 1.9 hash syntax.
nit: maybe call this testStemming as its a param
I don't think `stream` is needed here.
Please, add a TODO to remove it.
I don't think it matters much, but can we make the value configurable at the top of the test case?
this is a no-op, please add it to the `babel-common` file
Would it make sense for this exception instead of catching `Exception`? It could be a good idea for that to be thrown by a method on this class as well, but I'm not sure what that's the best way to go about it here :)
Can we make the field `final` and just call the parameter `0` in the next line?
`dt.max(f.A.max())` --> `dt.max(f.A.max())`
`name` is the correct name. We don't have to make this change, but this line shouldn't be removed.
I wonder how to handle this case, is this a breaking change?
Is the `fillObject` argument used? I think it would be much better to name it `fillObject`.
This is a change from `Yoast.js` to `Yoast.js`. Why did you remove all these?
Did you mean to leave this in here?
@jackfrancis Is that possible? It doesn't seem like that's the case, and I'm not sure we want to have this in the test, so I'm fine with that.
I think we could avoid this if statement by adding a default value.
Is this the name of the column? What's the name?
This is no longer used
I would move this method to the `_ServiceProvider` package.
If this class is no longer used, it should be removed.
Why not 10?
This is a little confusing because it always always returns a boolean, and is no longer an enum, and we can use `not_to` here
This is the only one that will need to change, but the version is not a string so no need to copy it.
This class is now deprecated and is not actually used anymore.
can you make it a const or a const
Do you think we should make it `BenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args)`
Why do you need to do this? I'd rather have the option to only set the properties if the result is set.
This is an unrelated change, but I don't think it would mean that we'd have to change it. Maybe we can just keep the `no-partition` prefix?
this doesn't need a `goimports`
I think this is a good change. It's not that important, but I think the `&:` is not needed.
Is this a BC break? Or did the test pass before this change?
I am not really sure it is necessary to add here `projected_monthly_revenue` because it looks like it's not used anywhere.
Isn't the `subSequenceRangeCheck` call still needed? I thought no one already got an exception?
This can probably throw a bug.
Should this be part of the API instead of adding another API?
Please move it to the package.go so it can be removed from the package.
I think we want this to be set as a `list<T>` instead.
This should be `has_merge`
We need to keep the controller controller for understanding that this is the only controller we want to know if we should keep it as a string. The only thing I found is we want to go to is that we don't want to go to a different controller to avoid. This change is because a validation is actually checking the controller for the controller.
Why do we need to set the flag on the `EnsureTelemetryConfig` here?
This change does not appear to be in the PR.
This should be split across multiple lines.
Shouldn't we call `hash.EncodeToString(hasBytes)` here?
Why not `-clangsa`?
if we're not going to do this, we should just do this in a different way
I think we should check whether the network network runs in a network network network network network network network network network network network network network network network network network network network network network network network network network network that we don't need the "Issuer" in the either of those, or it just doesn't need to know when the network network network is not being used, otherwise the network network network would still get logged.
I think `w.Encode(&api.ClusterResponse)` would be enough here.
Is it possible that wlr_output_format also needs a check for that format and not a const char?
I assume that's an internal function, and this can be removed?
How about to put a `type='nms'` in a constant, and reuse it in `nms`?
I think this should also be done in dialog.js, right?
If we're using the `Fairbank` API, then we can make it more obvious what the user's API is doing.
`ui.message(_("Focus mode")` is a bit ambiguous. I believe we have a bug in the first place for this, but it seems more reasonable to have this.
Can we do the same for 5.1 instead of 5.0?
Shouldn't this be `requestCode`?
What do you think about making this `public static bool ...`?
Should we use the `echo` method here?
This should be `request.AppendErrorf`.
is it worth logging that it is not a problem here, and not a warning in the code?
Why not `5mins`?
@bparees I don't know if this was really an issue, but it seems that `data/static/static/static/data_static.rb` would have been used in other places. Maybe `data/static/static/` would be more robust? But if the DataFrame are indeed, then the `datafiles` could take precedence over the type of each other, right?
This should probably be a helper function.
Does this change need to be in master? I don't believe this change belongs to `@user.org`.
isn't this the same as we do on line 147?
Space missing inside {.<br>Space missing inside }.
This seems to have an API break on the implementation of this function.
Not sure about this. Is it correct?
Why do you want all the checks in this file?
I think `file_being_parsed_` and `error_` can be defined in the condition. Is that intentional?
Is it possible not to load this field in the `clact` module since this field is only used for `clact` module?
This is a little scary. I'm pretty sure it's going to cause a weird problem, but I'm not sure what the best way to tell whether it could be to handle this.
The `matcher` is probably unnecessary here.
I believe this could be a one-liner
@tnozicka is this an API break ?
This doesn't seem right, why is the `finally` needed?
I've added the new tests here to ensure we are using the new version in their own
The first argument of the function does not seem to be called anywhere else, so I would expect `p_type` to be called after this line (or before the `ast_error_frame`) is called.
You can remove this.
Why are we no longer using this?
this does not look right to me but is there any other reason for that change?
Can you just call this `llnl.util` or `llnl.util.server`?
I'd prefer not to catch it. This is a bit confusing. Can you make that change instead?
This doesn't have to be in this PR?
Should this be `fullPath(fullPath string)` to avoid the path?
Is `.*` needed ?
I don't like the name of the variable, the name is not descriptive.
You added the `proposal_notification.cta` param here too. Can't this just be removed?
this is not used anywhere
you don't have to check whether the token is an admin or admin (like the token), right?
I'm a bit surprised you don't pass sizeof here. Can we use a `org.infinispan.commons.extension.ai.setup.DefaultAwait.refresh` instead.
Should this be `appliedTo` to be consistent with the above?
I don't understand the `.split()` call here -- `.filter_cmdline_parts()` returns undefined. Isn't that going to be called twice?
I think it would be nicer if we could make these 2 variables configurable.
Not for this PR, but we use `errors.DialAddr` in the `createHEAD` file. I think we should change this to `var methodHEAD = "HEAD"` and change the implementation of it to use the same `createHEAD` and remove the `errors.DialAddr` and just use `setHEAD` in the `createHEAD` method and remove all `set` methods.
This one is missing the SessionTest class.
Can you remove debug level altogether?
Is this necessary? (I think the change in this commit.)
Use the new Ruby 1.9 hash syntax.
This looks like the wrong file to me, it should be `Collections.emptyList()`. We should not use this for all platforms
This class has no entries, so it's only used in two places and should be moved into the `[a href` (i.e., reserved)
Is there a chance that the `http` url will fail? I think the `Port` URL could be more precise as `host` can't be an `int` value.
Should be called called `felix::set` instead of `type Index interface`
nit: I'd prefer to move these to a new location, e.g. `handleCaretMove`?
How about "The user could not be authenticated if there is an error".
Would you like to rename this to `StyleguideController` and `Style stopsguideController`?
@becker33 can you fix the indentation here.
This method can be moved to a separate file.
nit: can we add a blank line after this?
@stribhul, does this work with SQ (as well as before?) with a specific exception? Is it the case when I have a container, and I'm not sure what to do about it?
I would not add this to the `jsbeautifier` class.
nit: update copyright year in header
I'm not sure if it makes sense to have any validation in the UI. I would prefer to use `./` instead of `honeybadger` as the parameter, and then `Honeybadger.notify`, which is what is used in all cases. I'm wondering if we can just remove the explicit `./` on the `./` and have the `./` return the same value in `spec/users/new.html.erb`. I'm not sure if the only way we can use it would be, but I think I would have just
Should we use the `user` action here (i.e., `user = create(:user)`)? This way we won't have to create an extra query for each spec.
Can't you just use the `CLIENT_RANDOM` constant?
I don't think this change is needed
Forgot to remove this? We should make sure the default behavior will not be true.
You don't need this getter.
Why this change? I don't think it has to be here. It's a simple thing, as it's a little confusing because of some common pattern.
Is this still needed?
why not just check whether the port is nil?
nit: should we rename this method to something else ? Maybe just `return FileUtil.determineFileType(file, fileName);`
what is this used for?
This is not needed anymore, right?
I'm curious if it is the "a "\*" or "the "\ing" that is what is "a "\ing" in the name of the function
Should this be removed?
I would add a description about this one.
I'm not sure if it is worth the extra `if` here.
Just a little nitpick, but can you change this to `assert_not_called()`? The reason that `assert_not_called` is the `assert_not_called()` method, but `assert_not_async()` does not return the team you mentioned above.
Can you check if this is a bug, instead of a test?
Why is this test asserted?
By default, we are only adding new items, right? Can't we just add the explicit ones?
I think you need to remove this function, it will break existing models.
I don't think you want this. This will make all of our tests pass.
these two methods aren't protected... please remove them
nit: `final` is not a boolean.
I'm still not seeing how this change is about. If you're going to be using this feature, I'd like this to be done for the `org_apache.drm.segment.segment.segment.segment.drm_format_mod_explict` code.
You probably want to use the `MvxViewHolderBinded` interface.
Nit: I think we can just rename this to `clientBuilder`
This is an interesting test for the `return NoError()` call...
How about rename the variable name? `um` to `umMapSource` instead of `umMap`, and the variable name should be renamed to something more descriptive. :)
In the case `entity` is `null`, why not just add the entity into a function?
Should we just use dynamo_exited here instead of using dynamo_exited on everywhere?
You can just pass the properties in directly by the `ContextContext` and pass in the `ContextContext`
Can you use `find_by` instead of `not_factor`?
You can use `user.Current` instead of `user.Username` here.
You probably want to wrap the `attribute` in the docstring, like you did with `@classmethod `.
Please remove the parentheses
These two new constants are only used in the same file as the others. They're only used by the same file for the new files.
Hmmm, so this is not actually needed.
I think this one should be `en`
remove empty line please
I believe this class has no side effects.
It's still necessary here
Can we make this a private method?
I'm pretty sure this line is not removed and the previous if statement above is causing failures on the test suite.
This change is unrelated to your PR?
This one is not very good but if it is only for debugging I would suggest to keep it for debugging.
This is not a good place where you can use a different name.
Please use the `StoreInbox` from `storeInbox`, you need to get the store in a `if (!storeInbox)` check instead. This is a bit confusing though.
I think we should use a more clear name here.
This is the only change that affects this file. You could also just change this to be `vagrant.should_receive(:`
This is just to check that the controller exists in case we want to send any new JSDoc code to the form
Can we change the implementation of close to close?
I would suggest `config_url(proxy_url)` as `ProxyURL.create(block_url)`
you don't need to do this anymore, right?
Why are we keeping this list instead of passing it to the `DateRangeIcon`?
Shouldn't we do a return instead of a return?
I'd like to use `volatile`, and have the default value set `volatile` to something.
Is it needed now that it's in the middle of the input?
Would it be more clear to have a `encoding` argument for it? It's not clear what we need to do when we have a `encoding` argument, but we're just looking into it in its own method, so we need to update it in the future.
I would say in the future, this should be in a separate PR (and it's probably the case for other files).
This is really weird. It's a very common use case to have an API for the processing and people's API for a different API. I'm fine doing this as a quick check for `authorAsync`. Can you add a TODO to improve this?
This is a bit confusing... If the value is the same then the log line can still be removed. Is it OK to call this `Debug` in all other places?
Looks like `private` and `private` should be `private`
Were all these `final`s moved to `count`?
I don't think we should add all the models for these. Do we need them?
Shouldn't the `set_const` be inside the `init()` function?
This is an example of what the parser is doing. I don't think it's necessary since we are using it in other places in the code, but it might actually be a bit cleaner to just remove it.
Why did you remove the `SetApplicationError` call now?
`?` is only for `null`
Maybe `finest()` is better here?
You should just use the value of `_o.Test3.B` here.
The controllers.get is already declared into the controllers object.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Style/RescueModifier: Avoid using rescue in its modifier form.
I'm not super convinced about the naming here. Is there a better idea in having an `Image` class?
You shouldn't need this extra `schedules_in_repo num_sensors` any more.
Why are these lines introduced?
Is this change intended?
I wonder if we need a separate test for that?
I would say this is not needed. The debug file size is required on a debug file, but that may be useful in debug file.
This is a bit weird. If the user doesn't have `x` then the default it does what they want to. If it does, it's probably best to use `x.execute()`.
Can you also check if the header is not disabled here?
Why are we changing this to `app_name`?
@jona-sassenhagen @saghul, thanks for your contribution. Can you review this please, please?
I'd use an explicit ` '__natural_order()` that gives another example.
Revert this file.
Should we set this to true only if the default is false?
The `Screencasts` method returns a string for the next one, so I'd rather not change the `SET` method here. I think this should be `Screencasts::IrreversibleMigration` or `Screencasts::IrreversibleMigration`
@kroitor since this has been copied from the `sig` value, should it just be the `extra_entropy = bfh("%064x` value?
Can you use a more descriptive name? `returnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturnreturn
you don't need to do this, just do it in the loop above.
I'd say I don't think the `resolve '%s'"` should be the correct thing, but we should probably do it now in `mypy.runtime`.
This should be splitSizeOption
I would put the `except` inside the function (e.g. the function) in a try-with-resources method in `mne/spec/FileNotExists/testing`
Should this have a `@PTransform` entry?
@wangdi1 this is what I was thinking you meant to do this. This way you can make the test pass as soon as you did the change.
What is the difference between the two?
Should we have the connection prefix for all versions available in the Public Header?
Would it be better for us to use `accounts` here instead of `accounts === undefined` as we already have the same function for all containers.
Can we move this to line 1276 and remove this method?
Can you remove this line?
Is there another place we could use `validateVarsSubbed()`?
Shouldn't this be `errors`?
Why this change?
The `resp` is a `boolean` value. Do we actually need to handle it for the status is zero here?
"does not change the Go function"
This change is unauthorized so we could also remove remove_for_bad_request and also change the test_id in the future.
Should this not be `jobInfo.cancel`?
Is the CStorPoolPool used for this?
Can you use the new style of $cartItem_"" here?
Why `int` needed here?
This is the same logic as in `getAt()`.
why not use the mock mock as the container is not part of the API?
I think this would be a good example of how the `float` argument works. I think we should change this to `float` as we now use the `except` type on a argument instead.
We have no idea why we can't change the signature of `getOptional`, but that is only about `Util.doOperation(Class.empty()`. In other words, why is the background only needed for `predicate` ?
Shouldn't this be done in the `col` package?
why the normalized normalizedExecutor? what do you think of passing a `transports` into the set of `ctx.prefetch_transports`?
The `else if` block should be moved inside the `if` and then doing a `if err := e.updateNodeStatus();`
Did you mean to delete these? Is there any use case for this?
This is an unrelated change.
why did you delete this?
I think it would be better to also mark the server as GetDefaultVersion since we have a default value in the constructor.
I think it's better to use `ConfigConfig` rather than `ConfigConfig`.
I would make it a `internal` constant (i.e. it can be moved to the class) or even just do this in an internal class or something.
Seems not used?
This can be reverted, since you're not using it outside of the pull request.
Did you forget to remove those now that we have other packages in the future?
Do these need to be fixed for all the other implementations too? If so, could we make them separate and refactor the file so that they are added automatically?
I think the default value is `false` since its the default value by default.
Isn't this just a copy of the `winUser` object?
This looks like it would be more readable if we just use `os.Setenv(noninteractive, os.Getenv(noninteractive))` instead of creating a new `Package` variable that is used in the test.
Why is this required?
It seems like a change of behavior here that we should try `parse(response)` instead? (I don't feel strongly either way, I'd prefer if that was a separate change)
The `currPrefix` is a `BytesRef`. It doesn't look like the `PathManager` and `PathManager` is a `PathManager`, but that's a nitpick, so it's more readable as `PathManager` here.
@tgamblin This test was not related to the issue, and I had to fix it. You could just use `Path.js` and the test will fail.
I don't think `unsupported_read_mode()` will work. The `include_args_impl` function should return false if the type is true.
Is it really needed? It is used by the user and the `notification_service_factory_class` is used.
Why is this needed? `map[string]string` looks weird?
I would use `HandleNewBlocksset` here. We don't need to do it everywhere else.
@Pearl1594 is it intentional that you can get rid of the `ipfs ref` now?
Align the parameters of a method call if they span more than one line.
I think `PyObject * result = (PyObject_CallFunction((PyObjectObject * result, (PyObjectObject * reference, fmt, (PyObjectObjectObject))` would do the trick.
@SamSaffron I'm not sure this is the right option here. It is also an option to start and just start with a similar option.
Do we have any ideas for this?
Is it possible for this to happen in a different way? I think it would be useful if it were to go back in a different way than the `__props__` call.
@sjenning I'm pretty sure you can get this from a non-clickView method.
Should this be `(dictionary.isForbiddenWord(wordChars, wordChars.length, null);` ?
>In the event a condition returns a Promise, the polling loop will wait for the wait condition. Is there any chance this could be resolved?
Missing space after #.
This is a bit weird, why do the handle check here rather than setting the actual data over?
Should the `if (iv_state)` be `null` here?
This change was necessary for a while because it was only for testing purposes and is not related to the PR.
Do we need the same check for the cache, or is that the cache is not loaded here?
this needs to be added to the `Locale` too.
this seems to be the default?
This is the main place where we need to add the `err` argument. I think this is a little confusing since there are only two `error` and `error` could be used for the `ImageForm` interface.
Nit: Can we rename this to use more meaningful name?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is now done by `expect().assertEquals(..)`?
I would prefer a separate PR for this. The code below is already doing that: `const std::getLocalDatabase(unsafePath(unsafePath(unsafePath(unsafePath(unsafePath), otherwise we're now replacing this with the previous behavior
I'm not sure if this line is the right fix for the `showlyGlobal\member` test, but now it will be checked and we have a bug in our docs which will be sent to the `showlyGlobal`.
I'd prefer the name "tls" to be "public" instead of "public"
I'm not sure this is the right place to put this. It seems to me we are only ever using the `SYSTEM_ROLES` option. Is it the best approach we can do to use the system roles? It seems like we're not doing anything useful at all here...
I am confused about why we need the `uid.id` part of the else block.
I don't think you need this, let's just inline this in the controller
I'd like to move this above `if serviceName == common.FrontendServiceName && serviceName == common.MatchingServiceName`, to keep the same logic.
Shouldn't that be `[store.tx_begin]` instead?
I am not convinced this will work for any non-null checks. Is this something you meant to add?
"The default number of space can be created"
Can it be ImportGenerator?
This is a change of behavior, but the feature uses `tag-matchers` as the feature in `config.js` and the feature flag uses `tag-matchers`, so this was added in #1474
Nit: you can just use `currentv1alpha1` here.
This field needs to be set in the `createOrder` method
This is not used in this file.
Is the plan to add a `-public-volume-allowed` flag to the top level package?
Is `conn->push_stream_ids.max_open` correct? Why not just call this `max_open`?
I think we have a bug here: 1. The first 2. the first 2. the first 2. The second 3. the second 3. The second 3. No idea what's going on here.
@normanmaurer @t3on I don't understand why this is needed.
this is used in several places in the code for the `please move it there
I think it's still not worth moving the `IAM` to `AWS IAM`. (Unless there's nothing in the review?)
Isn't `~V` the default for `init`? Should we use that in the error message?
I'd recommend using a `@Nullable`. It would be more consistent with what this method can return.
I'm not sure that we can keep the `attachmentProxyPort` as part of the constant in the name, but it's not really a requirement to change the name of the property.
`ExplicitValues` is no longer needed
Do we also need a test for this?
I think this is wrong. You should use `forced_empty_list` to indicate an empty list as the name.
The `switch` could be reused.
Why did you change this?
Would it be simpler to just check `!rawErrorData.get(CLASS) != null` ?
Is there some way to test this?
We should rename this class, it is not used outside of this class.
I'm not sure this is the right place for this.
This is not really necessary, since we only need the password in the username.
It looks like the interface is used for `List<Rule>`. Is that intended?
I think I don't think this is a valid API. I think you need to check the keys are in the first place.
I think the idea behind how we can't have a module that is not in a module that is not used in this context, as it is not very likely to happen if we just use a module with multiple things (i.e., if the `./pantsd` and `./pantsd` in the same folder), then the `./pantsd` is in `./pantsd` and `./pantsd` are different.
Add a `_destroy_array` helper.
Is this change intentional? I was thinking you might want a `Object` method that checks for `object` and `!` as well.
I am surprised we don't need this, but this method is never used
Better to keep the if-else in line with a else statement.
It looks like the wrong implementation of this function is `shouldntnt be replaced by `shouldshouldshould be used in shared places.
This is what I was talking about. I'd have called this `:username_must_exist` because it's not used anywhere else.
I don't like this, it's the default behavior
i am a bit confused here, why does it need `%s` and not `zfs set io.openebs` as well?
I believe the only case where this isn't a valid value (which I can't think of it is that the `wordcount` argument was not found in the `whoever`). It would be nice to have it in a separate file (e.g., for example).
It would be nice if this could return true (it can't be done for the other changes but it's still useful to have the return value `true`)
`jdl-api` is now dead code, so this would need to be changed to `saleor/sqlite/job/settings.go` as well.
@mmaxim do you know what this change does for the first look? Why do you want to have to change to `uint_t` here?
I don't quite understand this change
Why is the default needed?
nit: can you add log message in `TraceLevel()`
This looks a bit like it was here before, and it's not necessary. The function above returns a non-zero value. It is only set once, so `limitsExceeded` will never be set. We should also remove this check.
Is there a way to avoid this empty line?
@jcotela Can you confirm why we have `leaderprops` and `leadermetrics` ?
Use orcid.identifier_for fromDDS.
`import sys` the next line
We should move this import to line 122 and line 22.
Please use "ContentDescription" as the default value.
I don't know why this line failed - is that intended?
I would prefer `str2ab` over `type` here. But if it's not used anywhere else, then I would use `type=('build', 'run')` as the default.
How does this work with the old name?
This should be a separate `stream` (not an issue) - if I have no `inner_type` key, it should be an `schema`.
`config.factory` should be the same as `deleteRecursive`.
This is a breaking change. I don't think this is required. The class is just a thousand and we'd have to remove all this, just want.
Might as well change to `api_versions.min_by(&:to_f).to_json %>,`
Please remove it from this file.
`replacer` is a very broad and we don't care about it in the context here...
I'm a bit confused about what the error message is. `__DIR__` should be `name`.
Could you use temp folder instead?
I think we should import `import sys` and import `os` here
Can we rename the property name to `singleProperty`
You should not need to pass these. You should also use the `getAccounts` function.
Why do you need to change this?
Should we use a more specific type, like `pop u = "{{FIELD_NAME}}();""`, and make the type equivalent?
This is the actual change, we need to make sure the user is already using the "User" as the "User.last" (which I'm not sure) as we're testing it. We can use our own spec for this, too.
Is this the correct `value` to be used?
Not sure that this is the right thing to do, and we should add some more information here. I'm just wondering about how we're doing things like `Hash.ZERO` and `Hash.ZERO` for PMT.
We don't need this error, `self.config_file` can be `None`, right?
remove this line from the test
Is `ITransactionProcessor` used anywhere else?
I think it would be better to use a `ClientClient` that will do the same in `ClientClientClientService.cs`
Wouldn't it be safer to do all the files reachable, at least here?
This is probably not needed, but the test is failing because of the issue.
Metrics/LineLength: Line is too long. [83/80]
I think this should be `getSourceScore()` and `getSourceReItems()`. That way, you can have a check for the exception and the new one is still running.
@mmaxim can you take this change?
Is there a reason not to make this more clear, like `const (`.
I'd prefer if it can be removed or moved to the base class `aws-sdk-s3`
I don't think I understand this change, any way to write a 15000?
I would prefer a `subDirs`/`subLength` fixture, that's what is done on the other hand.
This was an error. We don't want to do that.
This can just be `null`.
@steveharter what do you think about `running_timeout`? I think it is better to name this something more specific.
This method is not really used.
`this.max` will fail if it's not null
`(u_conn->fd != -1)` might not be an issue, since the check for `fd == -1` is redundant
This table is getting uninitialized; we should also remove the `/admin` table.
This seems like it can be refactored by a package (i.e. in `gogs`)
@agramfort can you make the check for the tag and not have it return `nil`?
I think we can use the `Object.flag` constant to avoid having to create the logger.
We already have the same in place for all the code paths.
I think we should make `IsManaged` take care of this, as it'll never be null, so we can just make it a private method. This way if you change the code in `ClassicELB` then the code will be very slow to the user that they can call.
I don't think we want this to be a breaking change?
I think this should be an enum.
This is the fix for the "or any" bug.
I'm not entirely sure about this one - it's probably better to do a `final` in the `if` block
It doesn't look like we're converting to the resource's struct struct in `DynamicControllerModuleName` instead of the resource itself. I'm not sure how to handle that.
The same goes for the rest of the PR.
Why are the changes in this file removed? (just as a note)
You can use `Set<string>` to make it easier to use an `Concurrent` method to use it
We can probably remove these 2 lines.
Why are all these `final` needed?
Why do we need to add the GCP version?
This is probably a good candidate for a user to pass in to `__init__`?
This file should be removed
Can you revert those changes and get rid of the extra spaces?
I think I had actually added this to the `skip_travis_build_query` instead of the `Runtime kernel` fixture, so I added `uname` to both `copy` and `uname` here.
Use && instead of and.
remove empty line
Can we have more context on the Common name? It doesn't look like we have those but I guess the other options are all used for those.
not necessarily infer ... but just curious.
I think we should also change the default `SetCookie` to `""`. We want this flag to be set to `true` if it is passed as a path.
This change is only used to ensure the old one is in the `FZ` block, and the new one is not in the `TestIntegration` object.
`!image*/`, and `!image*/`, are the semantics that these weren't defined in the `else` branch?
Can you also test if the template is no longer available?
You can do something like if(text, 'decode'):
Same as above - if the argument is empty, the `exe_ctx` is empty.
Should we make the `networkMode` optional?
`<linkplain ASTClassLiteral>...` ? Maybe `<linkplain ASTClassFetch>...` ?
I think we should keep both `spack info` and `update` here - that way this can't be merged with the `update` method anymore - but that's probably fine since it's a change of this PR anyway.
Isn't `transformer` the same as `is`? I can't see it being used anywhere in this file.
why do we need to pass the `peerID`?
This seems like the wrong choice for the variable, not just the directory.
`sac` is a bit ambiguous. I think `sac` and `error` is a bit confusing, maybe `_`?
Remove unnecessary log line.
This will be the default value that will be the same as `aoColumns`, the filter name will only be used for the `bPaginate`. I think that we should also support custom classes as a name, that is why we want to support that. If you want to make sure we do the same thing here, we should remove this.
why was this removed?
I think this is the reason for not checking the service in these tests. It's probably not a problem, but I would prefer to keep the service in one place. (I know this is not related to the current PR, but we're still using it to make it more clear that they are in the future). Or, as the service should be added to the service and not also have the "prometheus" option.
In some cases, this would be a good idea to have a similar one as in `c.trace` but that's where we call the one in this function. This will cause the error to be raised in the future. Maybe we can use the `traceInOp` that is passed as an option to the client (which will be the wrong one).
I think it makes sense to make this change.
Is it expected that the service is already present?
I think I missed this in my opinion: I'm wondering if we should keep this as a separate method. It makes sense to have a new interface with `GetEnvironmentVariable` that does something with this method. The problem is that when we do that we don't have to have multiple keys in a separate `GetEnvironmentVariable`.
I'm not sure what this is for.
Why not `server.Start()` instead of `server.Start()`?
Should probably also rename this method
It seems we can now drop the `@Override` annotation here, and remove the `@Override` annotation.
The problem with this is that you have to use two different ways for the flow control window being set to any of the connection and for the execution flow control window, and the connection can be closed. In other words, if the connection is in the response, we should use the same connection.
These are only used in the tests.
I don't think we need this check here.
This is the most important case. If the goal for this is to write `min_size` or `min_size` as a zero-term number, it would be good to keep this as a zero-term number.
Why not use a `Stream.close(1)` ?
I think the only reason to do this is if the current `info` is in `create-finest`. It would be nice to keep the `finest` call into the `info()` function and keep the `finest` function in the call of `finest`.
You can use `version_check` and `version.2` in order to check that there is at least 1 file in the code.
I am a little concerned about the context.WithTimeout being called on a timeout and we're not doing this. I think we don't want to make a timeout here.
I'd recommend making the `fmt: 'form'`, and the next line be `form.delete_singular`
@franckc, I don't know why `updatedFiles` is needed here (and the returned value).
maybe just "rather use" is better here?
Why was this changed?
Shouldn't this be `LOG.warning('Query limit %d was larger than max query limit %d', limit, max_query_limit, max)`, and so on?
This is only needed in the test, right? I'm not seeing a better idea.
We should also check if `eval_name` is not None.
Style/PercentLiteralDelimiters: %w-literals should be delimited by ( and ).
This should be changed in this pull request.
I think the result should be `self.write.execute(result, "")`
This change is unrelated to your changes, it doesn't seem very efficient. Can we just revert to the fix?
I would have gotten to throw a `Class<?>` here.
Can you explain this change?
The previous code didn't work. I'd suggest to move `utf-8` to `utf-8.encode`.
Trailing whitespace detected.
I think we might need to do something similar for `return string(n)` too, too. Also, `return (n) in n > len(n) == 0 || n[i] == 0 && n[i] == 1` for all of them, but that's not really what the difference is, but the original code is just that it isn't an error.
This is now dead code.
I think we can get rid of this `if` now since it was already in the `if` block above
Can we get rid of these? The error is in the error message.
This is a change in behavior and will break existing code that will break the tests.
Do we want to keep this spec-Disabled? It seems like it could be an improvement in the future.
Why not delete the error as the error code?
@hustodemon this is the problem in the context of this change.
I think the `performance` above should be `Could not save WebCal-calendar`
this is a bug fix. why was this left out?
Is this used?
This function doesn't make sense in the code. We only want to use the header in the tests.
I think it would also affect the `Map<V2,V2>` tag?
The `showLocalSearch` flag is used in many places for a lot of different people were using the `agW` function. Do we know what the answer to this change is? I think that was a mistake, as this change was not related to the issue.
Why is this change needed?
We should remove thesanitize param and put the molecule at the molecule\n field in the coordinator and add a new one to the resypy doc.
I don't understand the difference between this and the `proposal` above. I wouldn't rename it to `has_many`
This test is a good example of the `indexOfSubDirectories` logic.
this isn't necessary, you are adding string representation of the model here
Please don't include the headers here.
It's not clear where this `argumentsString` is used, but if it's not, `arguments-add-cache`. What if the `getCurrentProcessId()` above throws an exception rather than the caller?
I'd rather have a test-case for this as well.
I think you are missing a `// override if needed`
I'm not convinced that we want to be able to do this for the API. The API is already a `*SecretEncryption`, but I don't think we need to implement this as a new column. It looks like this is a very generic field.
@dvoytenko Is this still needed?
Metrics/LineLength: Line is too long. [81/80]
Would it be more idiomatic in separate `var` block to reflect its use in `var VoucherInfo`?
Shouldn't it be a `TestCase-uploadFile` to avoid the `X` file? I know it's not the same, but we may want to add it to all of our `uploadFile`s
Why was `_` deleted?
`measureText` is a boolean in the `createElement` function - it's a boolean, so it should be `measureTextText`
@chraikaramj Should we use the existing `Thanos` class name? I would suggest renaming `Thanos.FromString` to `grpc` or `grpc_lib`
This change seems strange and unnecessary (not sure if we can change it for this PR, but it will work for you anyway in the future).
I don't believe we actually use `top` here. The `Enable` method is called for every invocation of `ftover` (the `top` method will be called for the `ftover` param).
I'm not sure that this is the proper solution for every change here. @tvalentyn
Isn't this going to break the original implementation of the executor service?
A few things like this: 1. Add the check above the check for the backend object 2. Add a check to verify that the backend object is not present in the final function, and the if condition should be added. Otherwise, this check can be added to `free_backend` if `backend != nil && backend->impl->destroy`
@saghul is this change intentional?
This should be a `final`
Is this key required for the batch size? If not, we may want to name it `source.iceberg.reader.fetch-batch-size` or something similar.
this is just to make sure the current solution is to avoid the number of values in the first place.
I'm surprised this isn't needed.
This should be removed.
Can we add an `//` clause about `catch`?
Model is not optional, use _ or _str as an alias to indicate it can be used.
Can you revert the whitespace changes? The last line of this file is no longer needed.
Why is this here?
Please use relative imports as we use them in the file.
We can't have to make this public?
Should not use asking for these.
No point in putting the downloadDuration to the `line` function instead of the downloadDurationToRank function.
can you remove it for now please?
I think this should be removed since we're always setting the value to the promise in the response.
This interface looks like something that should be defined as a `*` interface. The package should always be an `int` and `*` should have a single `int` tag.
@stephentoub I think this field should be removed from the pull request, otherwise `--rpc-allow-unprotected-txs` should work.
Not sure why we needed `type` and `type` here since `type` should already be an attribute of the `type`.
This is wrong. The test failed because it will never be found but it is a warning and it will be reusable.
Please use `set` to make it more explicit about the two arguments.
I would suggest to name it `addressing_type` and `user_id`, for better type information.
Should `replaceAll` not be needed here?
This class is not used anymore
The changes in this file are for a bug fix. This was the bug fix that fixed all the changes in this file.
I'd be tempted to use Math.random() here instead of Math.random(), as you might as well use Math.random().
Is this change relevant with the rest of the PR or just not needed ?
You can use `send_all` here to get the return type from an array.
I think the idea behind removing removing the `auto*` and just `auto*` here is to avoid creating a new `cachedContext` and avoid the `auto*` on the `cachedContext` and `hostManagers` objects
`router-expose` is the name we don't use in the name. The `BaseTag` has already done that. So we should change the name.
nit: you can also change the test name to `health_check_url`. The test doesn't need to check `allow_url`
I think this might break something that's in the future, as this is a change that's just for testing purposes. It might be worth to do something like "ICoreLogger = new object[0] = ILogger ...", but if this is the only thing that should be called before calling `ICoreLogger`
This is an interesting change. We need to make sure that `DockerID` is a `string`?
Use the new Ruby 1.9 hash syntax.
is this a bug fix?
Shouldn't these be `InfiniteNum`. What are the user's `(`?
I'd like to avoid the specific changes in this PR. The only place that we can make sure it is always used when the `Info` object exists is being used in the future.
Why this change? Seems like the new API has changed, which seems to only be used for debugging?
Should this be moved to the "X86" list above?
The message should be renamed to `make generate`
Shouldn't this stay `Passing` instead of `Passing`?
There's no need to change the return value here.
We should use `defaults.SiteStatus()` from `service.config.join`
Why is this file added?
This is a `nil` part I think.
@aosyatnik - I'm not sure what to do with this code in the `resource.exec` file - is there a reason for the `resource.exec` check? Or should the above be moved inside the if block?
What is this? Is it possible to always return a tuple with the same name? I mean, what happens if someone calls a tuple with multiple threads? In that case, I think that's the case, so this should be fine.
I would use one more message, no?
Could you add "save" to the key in "client" so that this is available as a "client"?
`getActiveFlowHelper` and `fetchUnfinishedFlows` can be removed.
Can we keep this and move it to the top of the file? This is because the existing API API calls are being used for the same file as the one that uses the name and the existing API calls are being used for the same name, and I think we should move it to the existing package.
Shouldn't this be `synchronized Set<String> getFieldNames();`?
I guess that you don't need save_screenshot anymore?
I would add a check before `readyState:3000` and then do the check below if `readyState:3000` is not set.
Should this be `Umask`?
(style) line over 80 characters
Should we check for metadataLocation here and not for metadata metadata. I'm not sure we need it here. Also, should we be looking at metadataLocation?
I don't think this is a correct change, it's not a big fan of `<a>` tag.
I believe this should be `github.com/iotex-core/action/protocol/poll`
nit: it would be nice if the order of `slot` is 0
Same here; we need to make a new block service for the `config` parameter.
Is this change required? It doesn't look like it will do anything? Also, what if the only other options are `i < src_len - 1`?
Is this change intentional? It seems to work with the `procRunning` value, even if this error does not exist, it should be `procRunning := fmt.Sprintf("pidof %s 2>&1", proc)`
I think this needs to be moved to `build-system/index.js`
I think this should also be removed - @robertwb do you think this is the right approach.
Nit: `IP` -> `ipAddressesForomitempty`.
Is it not possible to call this `ReportDeploymentCompleted` instead?
this could just be `strings.HasSuffix(t, "/")`
Shouldn't the startMs go in the UI to avoid creating a new one at the startMs? I can't see any more usages of startMs.
This should probably be a list, it should be a list (e.g. `alpn_proto_negotiated`)
You should use the "invert" section of the `raise` section.
I'd like to see this as a constant and then use the creation to determine if the creation contains a default (which we'd have).
We need to keep the same logic for these two functions, since it's the default
Can you explain more about what is the use case here?
I am not sure if we need these any more, I'd rather have them in the `fcfc` class as well.
How would the warning message be more helpful? What happens if both `nbytes` and `nnbytes` are set? Or is it even possible to do `-no-types`?
These assertions should be moved to the new `TaskNetwork` list, right?
Why was this removed?
I'm not sure if we really need this, but it would probably be cleaner to make it a `renewBefore` type and have the other `renewBefore` field, so that you can remove this if statement.
this should be removed from here and in the other places, if so we should also remove all cases (which will make the code harder to read).
I know this class is used for all caps but this class should have the same name as the other attributes. So, please remove these `storeSamples`
Please add a space in between `Gcloud` and `isa`.
I think this is the only change required for the IEnumerable to be in an interface?
What's the purpose of this change?
This is incorrect. We can't pass a nullptr here.
I think this import can be removed.
We don't need to import `convertUpToast` since it is only used in one place, so we can remove this import from `convertUpToast`
Not used?
Could we also make `config` be the default for each var?
I think it would be better to move this validation check to `tix.go`
Could you rename this to `topic_id` or `topic_id`?
This test failed because the test still passes, and the test fails without this.
Isn't that the best we can put in the `QueryRunner` for the `request`?
I think this is an improvement, but I think it's not clear to me why this is needed. I don't think there's any point in making `tzinfo=timezone.utc` an `if` statement.
I think this would cause a regression, to ensure we get pretty confused in a context manager, since we are not doing that at all - but this was a bit of a question.
We should rename this to `name: 'Dog'`
this is a weird abstraction - it doesn't really mean `== 0` in the loop, so I don't really know why.
@marek-safar @Xreki Why don't you use the `try` here, when `reserve` is used?
I wonder if we can get the right error message here instead of `//`?
Should it check the other options and only if the target leader is src, then?
What is the difference between the two?
These usings are not necessary since we only have to be adding them in System.Collections
This is not correct. `!WorkloadIPs ` is set to 0`. I think a more suitable fix for this test.
I think the `iri` fixture is redundant here as well
Missing space between ruler
Does this mean we will always use the `auto_fire` variable here?
we can use assert_TRADE to the message, right?
please, fix the indentation
We could remove this extra line
I think this should be refactored to use the new one instead of hard coding it in two places.
These 2 lines changed, are these lines needed to test that the second argument is `spec().$container.find('.handsontableInputHolder textarea')` is not equal to `.formatEqual('B1');`
I think this is a good place to call `LoadCommit` in the service name.
Why not just use the full name. It doesn't really matter. Also, why not just make the version package package private or create a new one in the folder instead?
"Content-Type" feels a bit weird - it's a constant and not a part of the string, as it is part of the file
Is there a reason this wouldn't be not `void`?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Shouldn't this also check if its passed as a warning?
`close` should be passed as an `Optional[errors]`
This was the bug in #4748 - it will throw NPE if `Response.Status` is `null`.
What if `Lame_duck_duration` is `nil`, and if that doesn't it then it will be `-1` instead of `1`? Well, I think we can just have a `err := ...` block below that's the case.
What do you think of changing `_column` to `""` to `""`? I think we can add a check for `if (this_name != that_name)` before the if statement and then have `if (this_name == that_name)` above.
I think we can make this an `isinstance` instead of `if ( typeof global.googlesitekit) ) {`
Should the condition be in the else?
What's the reason for this change?
This should only be imported if you can remove
this is wrong, I think a check for `false`
I don't think we should use list here.
this looks wrong. The new tests should probably use `context`
I think it would be nice to have an issue for a different name here.
I think this would be better named as `applydmdmCorsResponse`
why the log message in the message?
@chirimoya Is this a breaking change for other packages? Are we sure that the `deprecated_fields` is not `apm-server` and `apm-server` instances of this are both the same?
Shouldn't we have `logger.finest` return the returned value? Or does this actually get raised on the first iteration of the logs?
do we have any concerns around the call to CreateAnnotatedCodeLocations here? I'm not seeing the need for this change.
Is this a bug, or was it intentional?
This is probably not the right place for this. The code below looks like a bad practice.
this line is not needed anymore.
Should we use `this.rank_runnable_index_for` here instead of having a single call to `next_runnable_index_for` (as it is already there)?
Why not set the default?
I think it can still return a `client`, since this is no longer the case.
This seems to be a problem for another PR. The `code_FORMAT_MOD_LINEAR` below is not used at all, and the code was previously fixed.
I think this is what we want? How should we do the same for other keys?
It's better to move these lines into the top, then use `std::QUHolder` to get both type equivalent.
This is a bit of an unrelated change but I think I'll revert the change here.
Why removing this? Isn't this the only place where the user was created?
Wouldn't be nice to have this as a member variable rather than hard-coding it here, and instead just check for the error message, we have it as an error, and return an error. IMO, if you don't mind, we probably could move this code to the place where the v1 code should be used.
We should probably use the state machine-wide state here and check for `<= 0` instead.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this needs to be in the `flow` package instead of `Filters` as it was before.
Should we make this configurable instead?
This is the only change I've made.
Why use a pointer instead of an underscore? The caller can use a pointer to the user.
@saghul is this going to break the API, or will this break someone's existing code?
This was used in the previous commit, which should be removed.
Why did you change the default value of duraton?
I'm not a big fan of the `HasValue` and `HasValue` as an argument for these.
I think `splitext` is more of a name of "split value"
this will be handled in a separate PR, but it is needed for a separate PR
`merge` is unused.
Is it still useful to add `llvm` as a top-level `add_llvm_`? I think it's better to just have the `llvm` import be at the bottom.
I think `**kwargs` is redundant here, and the line below it's not needed
`fields` is not needed, since `query.select` returns a list.
This is the only real change in this file, I think.
I wonder if it would make more sense to have a unique name for these events, like `send_operator_enforced_sample_limit`. What do you think of?
This seems to be a change in behavior for a situation where `DropIPIPPacketsFromWorkloads` is actually used, and if it is, it would be simpler to just always call it.
This method is unused. I don't see any code in `getUninitializedOnService` used anywhere.
I'd rather you move it to `defer nc2.Close()` and avoid making it public.
Layout/AlignParameters: Align the parameters of a method call if they span more than one line.
I'd suggest adding a constant for `size_bytes` instead of adding the name here, as it's used for all extensions that have the same name.
Is this a bug in the `modules/json`?
this is just a static method, I'd rather you add a new method to the constructor and reuse it
This is just a questioning about the rest of the PR.
Would be good to have also an `elding.md` file
@JeremyKuhne might be a good idea to use the `GlobQ` version to be used by a couple of other tests that use this type.
Metrics/CyclomaticComplexity: Cyclomatic complexity for installer_cmd is too high. [6/6]<br>Metrics/PerceivedComplexity: Perceived complexity for installer_cmd is too high. [6/7]
The same as above.
I think this should be a local in the `tryCall` call and use it here to avoid the needing to pass in as a `null` param.
This test is failing on windows because of `rescanDeps` being `false`.
Why not use const?
I think you also need to add a `Deprecation.warn` method that checks the user as a method and returns the result of `search_results` to this query.
Use the new Ruby 1.9 hash syntax, relative to the start of the line where the left curly brace is.
This should not be needed.
If it's not used, then it should be removed.
Why change the default? Isn't the default the test case going to check the number of bytes?
` Hyperledger Besu` or ` Hyperledger Besu` (and `jelly` need to be added as an annotation) or `besu`?
This should also be `selection_specs` but the `select` is not the same as the one that we don't want.
This spec isn't working for backwards compatibility, I think it's better to do something like `it "renders numeric events"`. The reason I have is that the HashDiffDecorator is not the same, since all other tests are just testing.
This is a very minor thing, but I can't find any code in the codebase so I would just remove the upload and add it back to the `print` method
Please put it in alphabetical order so that it doesn't have to be part of this PR
I don't like this new version. We should be adding a new version in `src/main/internal/internal/test.js` which means this `src/main/internal/mypy/application.go` is the same as `src/main/internal/test.js`.
Why not `Long.parseBoolean(typeMap.get("airplaneMode").toString()));`
Is this the best place for this? It's not a real problem for this PR.
Should we make this a global namespace?
You don't need to pass the `key_for_paths` object, you can just call `get_object()` in the first place. You can do that in a follow up PR if you want.
This should not be needed, as `const` is only used once
Can we change the message to be `StringSliceEqual(cfg1.ClientCerts, cfg2.ClientCerts)`, and then just check that the result is empty instead of using it in `client authentication policy mismatch`?
The more I think about it - I think you should check if the ParameterList is an int and the other usages are the same.
Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
Metrics/LineLength: Line is too long. [83/80]
(style) line over 80 characters
better to split this into two lines.
Is this supposed to be here?
Is this an issue or just a mistake?
This change is not correct, as `args.length > 0` is a required argument.
I'd prefer a more descriptive name, like `new ArgumentGroup(() => CommandArgUsage.CommandArgs_GROUP_IMPORT_PEAK_BOUNDARIES, Hence);` so you can have a more descriptive name that describes what you have in the future.
Should we make this string a constant so it can be passed to the class?
I would use `"%s"` as a default argument.
is this going to be done even after the process?
I know you're not just using the term 'Bus' but it's a minor thing, but this is a bit of a brief docstring, and it seems like I'd be fine.
why not just `ptr unsafe.Pointer = ...`
Shouldn't this be `JSON.yml` ?
I don't think this should be part of `component.onResolve()`?
shouldn't you set `indices` in the first position here?
I would prefer to keep code aligned here and make sure the rest of the code works correctly. If it's more complex, I would suggest to move this logic to the `else` clause (and keep it as-is here).
Is the `SET published_at` necessary?
This will break all of the supported supported BetterErrors.editor calls, which is fine for now.
The second `isset` is not needed.
I'd like to see `Azureuner` here, not sure what it is.
I think these are not needed. You'll have to remove the `using System.Linq;` and `using indent` below.
There are a bunch of other places where we use an interface, but the implementation is `final`. We should add the interface to the interface that we use and then use that to determine which version is passed.
> in the same method name does not change the meaning of method name for this method. I think we should leave it to be safe. @maarcingebala
why this is not 0.01?
This is not the right approach. Why is the value not `ecs`?
You probably have to update the tests for this test as well.
I would prefer that we use `pathParam.substring(0, pathParam.indexOf(';'))`. Maybe just do `pathParam.substring(0, pathParam.indexOf(';'));`? Or is this actually `pathParam.substring(0, pathParam.indexOf(';')))`?
Does this need to be `return crypto.ValidateSignature(plaintext, signer, signature)`?
should be the default
Can we not just always return `filterExpressions == null && filterExpression() == Expressions.alwaysTrue()` here instead. We have the `filterExpressions < null` check that the actual value is returned.
This test name looks a bit strange... maybe just `byte{2,0, 0, 8, 0, 254, 255, 0}` to match the "decode group" version? (It's probably better to use that instead of the "byte{2, 8, 0, 254). But if you do want to use the same pattern you get in the other place and you get the value of `decode` in the future, it should be `byte{2, 0, 6, p, 0, 8, 6, and
Why does this need to be del2? I would prefer to keep it the same and use `norm2_name`.
I think this is an improvement
> fine I think, you could just put the entire "FastSync" property on each property.
I don't think this belongs in our `profile` method. We have a good reason why it's done in `var/username/var/or-resource/var/or-resource/admin/web_tests.rb`, because this will be `nil` in its `username` package, so I think I'm missing something here.
This should be moved to the core config file, it's used in the wrong location.
`hash_table_nextkey` already does it, why do you need `hash()`, here and below? I'm not sure how I can tell from this code, but it's also more like `hash(hash_table_nextkey(d->completed_files), (void **) &21);`
nit: we usually prefer `allowValidator` to test its signature
This change should be in a separate PR, and in the future we can make the `verbose.py` change at some point in the codebase
@andrewkroh Is this supposed to be an error? What happens if the 16 isn't the cmsg_data and the cmsg_times doesn't exist?
This is the change that affects the implementation.
`sampleParamConfigMap` is no longer used in this method anymore. Please remove it.
nit, I know you're doing this, but you could do `final"`
This file can be reverted.
Can we have a `*` here?
This is the fix for the fix.
Please update the docstring to include the new parameter `binary` in the docstring.
This can only be used once.
I don't think this should be here, you can remove it
Does it make sense to also update the `maxunsThreads` and `maxunsThreads(10)` to be consistent with the rest?
Not sure why the size is needed.
This is wrong, `T` is an array of `WebElements` and it does not require a `List`. Also, if you do a `new(T extends WebElement)` you will get an array of `with`
Should we add some more details about this, maybe for consistency or the other uses?
Why was this added?
@jona86 @smarterclayton do you have any idea how this was working before, or why you changed it?
So we're using a context context, so the error needs to wait until the peer is run. The peer context needs to handle it here, and then check that `pl.IsRunning()` returns error.
I would have used a log level instead of only logging here, but this is what was there before? (I've been considering we were not doing it because I hadn't noticed that this is a breaking change to this PR)
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
this is not the right thing to do here. You have to check `encode('hex')` here in Python 3.7, and check `encode('hex')` in Python 2.7.
How about we make this List<LpmMSources field a member variable and not use it everywhere. This would make it clearer if it's needed?
`tree -> matcher`?
I don't think this check can be removed.
It would be better to move this method into the `setAlwaysEnabledPluginsEnabled` method that accepts `null` and the plugin can call `setAlwaysEnabledPluginsEnabled` directly in the `BaseSettings` class
Just to confirm: What's the motivation for this field?
why do you need to return the value here, and the call to `get_cache_to_filter` above you can do `allow_cache_to_filter` and `allow_cache_to_filter` instead of `allow_cache_to_filter`.
Metrics/CyclomaticComplexity: Cyclomatic complexity for this is too high. [10/6]<br>Metrics/PerceivedComplexity: Perceived complexity for this is too high. [11/7]
Should this be in the constructor?
This is not needed. This only works if `UpdateSpan` was set (and `ValidateFunc`, which would throw a different exception for `UpdateSpan`)
Why this change? This class is unused.
This is a generic generic type, but it seems not really important.
This could be handled in some other PR, but I think it's better to move this to the top of the file as it would be a breaking change if anyone else is going to have it.
This is another fix.
`<see cref="Span"/> the specified specified specified <see cref="Span"/> the specified specified specified <see cref="Span"/> collection to the agent writer`
I think we can delete this line completely
Why the change to `SetProperty`?
This was changed in #5399
Why is this necessary?
I think this check will be redundant, we can't just remove it
Can you move this down into the group below and make it private and import from `testing` so that the group below is removed as part of the group?
Are these not needed for the `LightGBMCallbackEnv`?
Won't this always be true? We should probably get a test case if there are no attacked, because we have a whole attackedSet.
Is there a way to make this a list? I guess it would have to be a list of things.
I think this is not needed. I would move the `electrum` to the new `electum-and-shared` file
@jridgewell Isn't it better to use the `name` variable of `nameOrHandle` as the default value?
We could probably make this `Task DisposeAsyncAsync` and just do `Task DisAsyncAsync.TaskUtils.TransferFormat transferFormat`.
@executable is nil, this is not needed.
Why do we want to check here? It's an option to avoid calling `sendPing()` on `c.mu().().Unlock()`
This file is not in master anymore
I'd be inclined to change this to: ```python def get_global_operations(self.gce_api_client.get_firewall_rules(expected_exception): return None None
This is a good thing, but is a lot of things we want to make sure it's not in the v1.
It is a little odd that we have the same logic in the response as the "getRegistry" one which does nothing in the user. We need to be able to figure it out.
I think we can move these `rangeToDisplay` calls to `updateGUI` to keep consistent. We need some test coverage for that.
Should we use the new `map` field?
I don't think this is needed, since it's just called in the `getPartitionIdList()` method.
This should be `(new_cmake_ fwd?(file.install_return)` I think it would make sense that you're calling `.get_expand_path(path)` instead of the `.get_expand_path(file.path)` on line 474, and then passing `.get_filefile(path)` on line 231 as the `return` and `.get_file(path)` can be deleted.
I'm pretty sure there was a bug here, but in the next PR.
can you rename this variable to `AssemblyResourcePool`?
you can also make this change in the old one
You're not doing this yet, this should be added in tests, right?
This should be moved to `archive/install/pytest`
Why did the tests not need to change?
I'm wondering if it would be worthwhile to change this to `else`
Do we really need this? Shouldn't we call it everywhere `PublicKey` is an internal struct?
Why `duration` and `TimeZonePath`?
@trobertwb do we want to keep the lowerCamel name ?
Is this change still needed?
@deads2k would you mind adding a TODO here to move this?
This needs to be done on the other side of the PR - they should be changed as well.
@franckc is there a reason for this change?
Do we need this function?
Nitpick: I would move this import under `pkg/config`
This should be the new parameter.
hmmm... this seems like it's not related to the PR. should we just use the same function for axe-utils?
This is no longer needed. It is now just used within the context of `buildConfig()`.
This should use a constant
Nit: I would prefer we have a `type` package for the package instead of the package.
You can do `!== true`
Why not just `#include > 0`?
I think we can add a TODO to move away from this PR
This is not needed.
nit: `!(options && options.beforeHandshake === true);`
I think you can do just `return !r.inSync`.
What will happen if someone passes a `path` variable?
This isn't right. I think we need `composite_root/root/assign` here.
Should be delete/http/Subscription/
Not a big deal, but the original "estimate" is a newline in here and it seems to work well-known case, so I'd rather not change the "estimate" parameter here. Also, I don't quite see a reason for this. The original issue is if someone has two functions: 1. I'd rather have a single message: 1. If a primitive is a model, then the "IntegrationTest" will not be updated. It would have the same "estimate" - but the "estimate" is an object being added, then the "estimate". The `estimate`, it's a model that is
How about `if r.TLS == nil`?
@mfojtik we should do this in the `if ok` check instead of just `== nil`
You don't need this change, it is already in master
Is `circuitBreakerEnabled` a correct name? It should be "is", right?
I think `isBccRecipient` can be a `boolean` here
why was this moved?
Why is this test removed?
Is it needed?
Why are the changes to this file?
Seems a bit inconsistent, `Root` is used here.
why not `stylecard = 'time', 'time', 'time', '1')` ?
I'd rather we have `types > 0`, `getEvent`, or `getEvent`, as I understand, this error might be confusing if the error wasn't found, but the error is actually `nil`.
Do we need a new `group` field in the list?
Why remove the `@Test` annotation?
I think we can use the `<X.X.Common>` instead of the second parameter, we can also just say `<X.Common>` and then we'll have to implement the same pattern for the two different ways.
Should it be `<=` (and the similar line below)?
Would it make sense to make this `Simple crtExecutor`?
Here the original code has a bug in `var_sp->SetLocationIsConstantValueData(is_constant)` which has a value that was not in this function.
I assume this was a mistake and not a test suite or some other kind of issue?
shouldnt this be `xaxis[0]`?
Would you mind to revert this change? It is not used and can be removed
This is an unrelated bug fix. The problem is that we are using `wavelength_optimized_radiation` in the first place.
@bharatviswa504 What is your opinion on adding these? This seems to be an unrelated bugfix?
Can you put it in a new line?
I think the naming of the default is `0` so it can be confusing.
`][][=` or `][=` for consistency.
We'll need to move this line up to the next commit, to keep it easier to debug
This is the only place this can be null.
I'd be happier with @stephentoub thanks for the help here.
Is it possible to have this message inside a `create` callback?
This import is unused
Why should we do this before `return`?
I believe this should be `Error` or `Error2`, not `Error`.
this looks like an unrelated change?
This change looks strange. I would expect a `use` method to have it as a `@SuppressForbidden` and throw it away in the future.
why change these two lines?
Why do we need to check `if not not len(envCfg.WebIdentityTokenFilePath) > 0`?
The `github.com/opentracing/go` import is unused now and we can remove them from this PR
"cast from hashable type" is a confusing name. Maybe "cast from hashable type" or similar so we can just change it to "cast from hashable type"
Should we also update the list of elements to not break the tests?
I think you can get the [$formatName from the filter and have the signature to match the filter name.
Should we also add a new method to `unlockContainer`?
You should use the the `use` statement.
Is there a better name for this? `opop`?
This seems unrelated?
Why not just do the existing `shutdownNow` in `nnictl create/cancel` here and in `nnictl create/cancel`? The logic seems to be the only place this was used.
Don't forget to remove HiveConf from the constructor.
this should be done in a separate PR
Why not just do this in the if above?
Though not a fan of this field, I think the name of the test should work. It was the same, but we want to make sure that this is the same as the other test classes.
What exactly is it supposed to do? Is it always `False` by default?
Why do you need this? I can't seem to think of an error. In other words, I'd like to see a function that checks if the `no_UID` is not a `#if 0` in that case.
Is this change intentional?
Import classes with wildcard is not recommended.
Please use the standard `org.glassfish.gmbal.ManagedObject` from static imports.
I think this should also be changed to `StartTimingWrite` and then we should remove the `BytesWritten` and `StartTimingWrite` call.
I think this should be called `configInfo` instead of `configInfo` to be consistent with the rest of the file
Please, update your IDE settings, and use `org.apache.commons.lang3.StringUtils` to avoid changing the import of the imports.
Please update the log message.
Should this be removed too?
This is the only change that affects this PR. If it needs to be updated we should be able to delete.
This is a public API - should this be a different type?
Would not be needed
Unnecessary spacing detected.
I feel like this is a very handy name for this. Is it something we want or something to be specific about? I'm wondering if there should be a way to make it clearer
Is it expected? Can't we just remove `Member` entirely?
Is this just a `gc`?
Why was the `fields` variable removed?
Please remove this line.
@bparees can you explain more why do we need to change `DiskList` here and not `SetType`? (I don't have any idea why we would need a new type).
Is it possible that `pgHandler` is nil here? Is there some reason we need to use it?
`editor` already has the `apply()`, so you're not need to call `editor.commit` here.
Isn't this a nil check?
Please keep the list in alphabetical order.
why is this needed?
no copyright here too
Is this correct to use `drySink.Start()`?
I think it should always be an `else`
I would make it clear that this is an actual URL, but not sure if it's a good idea.
Should the `libkb_EXECUTION_ID` be marked as `libkb_EXECUTION_ID_INDEX` and `libkb_SET_ID`?
This should probably be `self.version_id`
Does this mean that some of them were being called `err := o.NOT_type(ctx)` would never return nil and that's why they were added in #332?
shouldnt this be the one above?
This is the main code for `set_index` method.
this variable should have a `hiveScanMode` variable
Should we make the same change in `ObjectItem`? And remove the `Context` function?
This import is unnecessary since `some` is already imported inside `author`.
nit: this could be `except webelem.Error as e: :ats_window(objreg.last_focused_window())` I guess?
This line is not related to this PR, but it's unrelated to this commit?
Not sure why you need the `EnablePrometheusMetrics` parameter here, I think it would be simpler.
I think I'd prefer a separate test for this, e.g. `describe "custom_colors" do`
why not use `coin.isArray()`?
The code style is `persist_mode_on_change ` if not config.val.tabs.persist_mode_on_change `
Should we rename this `Platform` to `Headers` or something to make it clear that it's not used?
This is the only place where we call the new helper. I think this part of the code is still useful.
What about making `getLiteral` a private method and using `Date.getLiteral` here?
Why does this have to be changed?
Let's add a `private` field to the docs.
I am not sure we should test for `user` in the test. We should be testing the `conda test` in `BaseElement.py`
Do not use f-strings for this variable. Just add a note to the code.
I'd suggest to use `find all certBundle secrets : %v` instead.
Can we remove this?
I don't know how we can handle this for non-testing tests - it's not very suitable that we have a "new" file at the bottom of the file
This is an improvement, and I'd expect it to return the result of a `matchWithNoTerms`
I have no idea this will do anything other than `checks.checks`. I can see it being used as a local variable in `#ifdef _checks()` in this file, but it is not what I meant, I'm not sure whether it's actually the correct fix.
Is it not defined in this function? I would assume it's not a default value
This change looks like a copy and paste bug.. Can we revert this ?
Is this the right thing to do here, or is the "selector" of the "Object" that was left as-is?
Should be `if (_blockTree.Head?.Header > _blockTree.Genesis) && toBeProcessed.Number > 1`
Is it not needed anymore?
please remove this line
I think `__eq__` for a name is a good name. You don't want to add any private `IEC_104_fields` in that file.
@bflad this was the only thing I'd like to ask for, but I can't think of any reason why we were were trying to move away from this file here.
Should this be `if (name == NULL)`?
I'm not sure if we need the manifest here. Can we just make the manifest `public` please?
`config[Provisioning.PROV] = 'cloud'`
Why do you want to set this here? If the user doesn't want to specify it, the user doesn't need to know the "BasicTimeChecker" (which is not the same as the `BasicTimeChecker_1`).
This is no longer used in the test, so can we move it there. Also, please remove it from the test file as well.
Can we change to be consistent with the other places in the future? I think it would be great if to have it in an `error`, `error`, `getNoDataComponent`
Metrics/CyclomaticComplexity: Cyclomatic complexity for validation is too high. [10.6/6]<br>Metrics/PerceivedComplexity: Perceived complexity for validation is too high. [10.7/7]
This looks like a leftover from the previous commit.
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
Does `getAlgorithm` return a string for `_sfdr`?
Please rename to `filtersorMenu(ContextMenu)` - it makes it a bit more sense to have one
This line can be dropped too.
I don't know how to test the original code...
This looks like it can be deleted.
This is a bug fix.
Please use a specific utility class for the file name.
This file will not match what is needed for the `kuma/` directory in this list.
remove empty line
nit: you can remove this line
This constant should be renamed to `LOCK`, as you're already inside the constructor, so I'll add it to the `DEFAULT_source` field.
Nitpick: I'd prefer to leave this as-is and avoid duplicating code base.
Isn't this already covered by the build system?
I would not add this extra blank line here.
I think this can be extracted to a constant, there's no need to use it here as well?
We need to update the description for this line
this needs to be revisited for cases with multiple cpused key
Is this intended to be in the last review? I'd expect the type to be more accurate.
@garyerjuanvalkala, do we want to make sure that the the local device is the same? Is it always true for the first part of the state instead of the `'Throwable`? It's not important as the test was: - we have a concern on the service that was not working correctly - it was just "split1cheo2y9e2w3", true, but that was a very large release. - we have a test that was the case where we had a specific "split1cheo2y9e3w3" and we didn't
I think we can move this call to be a constant.
Shouldn't we do something like: "Noover"` or something like that?
I'm not sure I get why, but the name is a little hard. What is the purpose of the `--overwrite`? It looks like it will be used here as well, but if we need to change it then we can remove it.
`Exception` should be passed in as a `try`/`finally` block, no need to have it inside this `Task`.
This is now done by 2.7, so we could use the constant at one point. The `_DEV_MODE` will only be used if this was a list of all active warnings.
I guess it's not a good idea to use a new API. There is also an overload of these.
`event.Data` needs to be set to true, otherwise it would still be set.
Is this change required for the bug?
`QSignalMapper::of` looks redundant here.
@tnozicka I just checked the code, that you've already implemented that in the `code/install` branch, which is now `installChroot` in `build.go`. I think we should probably add a `@root` to the top of the file, too.
Why is the `CodedOutputStream` required here?
I think we need one more `script: { reason: reason }` in the end, we can use a verb here as well: `track(..., properties: {})`
Can we call this `respond_to_missing?` or something similar?
const auto data_arr_host = la::matrix<float>::wrap(data_arr_device).to_host();
I'm not sure if we need to add more information to the browser. What if we moved them to the `#` type?
why is this one a flag? it will always be set to "true"
Could this cause the problem if one of our reporting reporting is created as part of our API ?
I think the original code is correct here. `winParentVNode` is always true as an instance of `winParentVNode`, so the `winParentVNode`.
The suffix appended to the generated file names should say something like "in-common, or the generated file names in the name of the schema"
this is not only for testing purposes, right? If we are going to remove it for a long time, it might be good to add a `find_or` method that returns `true`
I'm not sure why we are removing this method. If not I would recommend removing it. (I'm pretty sure it's an improvement.)
This can be declared as gated by the `RootPath                     ` directive. I don't know if this is a good place for a reason, but I guess you can add another entry there to make it easier to read
I think you can just set the `pin` value to False, and then set `0` here.
We need to add some new field to allow for different methods to use this field.
We need a unit test to ensure we have two new code paths.
I think this would be more clear as `master`
Moving these two lines would break the code.
We should remove these blank lines.
Wouldn't it be more readable if the `axe._tree[0] === null` assignment assignment on the assignment assignment?
I'd prefer to have this as a local variable instead of keeping this.
This will be broken in 2 places. We need to move the check for the check check to make sure that we are doing a path with a file path in 2 places.
Is the `otlp..{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{.{
This should not be an `time.NowPlayingItem`
I added this because I was thinking `unsubscribed` needs to be moved out of the `User` class.
Is this not a "Checkpoint" option?
nit: `firstTimeEmptySubject` is not used here.
`this.deleteBlobs(fileIDs)`, and `export ${successful.length()` will be called inside `error`
Would it be possible to write a `boolean` statement and then set `0` to true when the `VerticalScrollBarWidth` is `nil`?
Had to change this.
This TODO can be removed now :)
Please rename these to something more generic, e.g. `redirect_to welcome_to_upcase_path`.
Why is this test needed?
We should use `kubernetes` instead of `slice`.
This test is not related to this PR, but can we revert it for now?
Can you please update the `toString()` method to `getPrototypeOf`?
Is `NULL` the right behavior here?
This needs to be added to the other PR for the fix.
This is a little unfortunate. If we don't have the Server config correctly, we may have to add an `na.limits` field before the `try` block.
@zjffdu Why was this removed?
What's the purpose of this change?
nit: can we use `emplace_back` here rather than doing `global_index = final_index` in the call?
Do we want to set the '0' in the tests?
Why is this needed?
`getackSchema` is already set in the check above. Please check it also in the other PR if possible.
Should this be minor < 11 || minor > 15 and then - 11 is zero?
What about `return err != nil` and a test that checks `is err != nil`?
Should this be called `require.NoError(err, voucher.Channel)`?
The `UPDATE` call below seems to be unnecessary and can change to `0x000034` instead.
I'm wondering whether we should add this to the baseclass for the `Scaler` spec as well
It's not clear if you need to change the type to `internal` and have the `delegate` property be made public.
Isn't this a bug?
I don't get how `beat-URL` would be set to the cluster, so `Info.URL()` is not actually used anywhere?
Why is this necessary?
`s/DataFrame/index/`? This is what `index` means.
Is there any chance this should be called after the user has added the identify?
You could use a more descriptive name.
This is an error that should never happen. I think that the original code should be removed.
We probably want to use a more specific `Tuple[str, List[p]` as in the rest of this file.
This should be done by the "scheduled" command and not "copy.xml" command.
I think you can remove `coco_instance` from this line and put it on the next line.
@mattpap @alalazo Is this really the right place for this? It makes it easier to read than the `<table>'>` as well
I would call this `AspnetRouteTemplateResourceNamesEnabled` because it is not very descriptive what it does...
I think we should remove all the flags in `Task.binary_content_info.php` and `Task.metrics.Get_content_info.php` from this PR.
This seems wrong. You can't call `_scen_DIR` when it is a boolean.
is it possible to use the root `sopf` and `fsater` type of types types to be converted to C strings?
This could probably be `Blockly.WorkspaceSvg.prototype`
The more "Rx" type for a non-zero field seems to be a good idea. What would I have here is `GetValueNodePort`?
nitpick: you can remove this line
@tnozicka this change makes sense.
I'm not sure what the best way to do this is. What is the default here?
why did you choose to use `VALUE`?
Do we actually need a `with` statement?
This should be called in method signature (as well as in the other test methods below).
I don't think we need this as an option, since we have a binary binary that can't be used
Would be good to add a `\\` before the check, as the join has been added once before.
I think you can remove this `if` statement since you are now passing `false` for the next line.
It seems like `ListEvents` should be moved to a separate function.
this is failing because of the new version of the sqlcipher
Should this be `SourceBuildArgument` instead of `SourceBuildArgument` for consistency?
We should add this to `elif`. It's not really important to have it, but the same for the other `else` statements.
I was thinking that a test case would be great.
What about a separate check for the shiftAmount for a long time (not just the shift in the logs)?
don't you need a test that checks if it's not a boolean?
I don't think the name should be changed here, it's not used anywhere
Use 2 (not 4) spaces for indentation, relative to the start of the line where the left curly brace is.
Is this part of the public API change?
Why does this need to be a copy?
Is this include needed?
this should probably be `class`, since it's not a type
remove this one since it is not related to the other changes
We need to make sure this is only available on `Run` so we can get rid of the `Run`.
Should we add a `@since` or something?
Should we be more specific here? (and maybe more specific, maybe "Transform and apply a function"?)
I think the `EXCLUDE_CMS` part has a similar issue as #58391.
Use the new Ruby 1.9 hash syntax.
Does this mean there is no need to be an IProviderContainer?
Remove this change.
This needs the same fix as above, since the options are always `true`.
I'd rather have it set a `timestamp` to `DEFAULT_MODIFIED_FIELD` to do something else?
Is this no longer necessary?
The changes in this file need `if`
This is a breaking change, but we are now not running into the previous version? Is it not possible to have all the existing `SUBGRAPH_ISOMORPHISM_BADARG_TEST` calls in `DynamoModel` that are already being introduced in this PR?
[nit] I think we should be looking for the sake of consistency about this package.
I am not sure if we should put this in a new location, as it is now used by an `paych`. It is the same as `paych`. I think it's the same as the other `paych` and `orderbook` below.
What's the reason for this? The new error message is a bit misleading. Is it possible to just catch all exceptions (if there is any check for something else?
nit: this variable could just be public
Can you add a check that len(prefixAsNibbles)2 == 1 ? Otherwise the test will not be correct
Shouldn't we add in the `if` clause of the `if` condition to save the flow? Also, it seems like it would be a problem if the job is different from the same flow.
I think this could be replaced with "UTF-8" to be consistent with the rest of the changes in this file
Why is this needed?
Are these changes related to `ReadFrom` in here?
@cherrywason I'm not quite sure what the best way to do here is. I am not sure what to do about it. I think we should at least log a warning and log a warning for it.
nit: can we use `const DashboardUI = require('./Dashboard')` to be consistent with other methods like `const DashboardUI = require('./Dashboard')`
if you want to keep the `isHydrating`, you'll want the `isHydrating` flag to have a `true` value.
Does this work in a single test?
You can remove the bucketPool function entirely, it's no longer used.
Isn't this still a bit of a hack? I feel you can remove this function.
It's not necessary to import `com1` from `Class` and `Class2` only for the `Class` package. There's no reason to use the `Test` in this class.
why remove the default value of `EnableProcessBlockStats` for clarity ?
I don't understand why this is needed? it was added by #18395?
I think this should be the `StandardLogger` instead of the `Out`.
Is this a separate feature? I think it's better to leave it out. Maybe a separate PR.
Is there a chance we can't add this to the http URL?
@wachterjohannes Should `_blockTree.BestSuggestedHeader?.Number ?? 0` be nullable?
Why does this need to be public ?
Is this change related to the current description of the PR?
Why not use a `BlockCache` here? I don't think we're testing the right thing here.
This method and the similar methods are not called on the class definition so they are only called on the class definition.
We should probably also add a message here.
1. why are you setting setting the option option? 2. why not use `Config::get_initialized_raw`?
We should try to avoid the exception in case someone wants to do that.
This really should probably stay?
I've been using `import *PSlice`, but that's the reason why this is a function and should be removed as well.
I'd expect this to return `null` for the `TypeUtil` and `null`. This will cause a NPE if the `Optional` is empty or if it should be changed.
Is it possible to make this configurable?
What if theAccount is not null ?
I think you can just remove this, the previous if statement and put a `for (Podcast p : result)` on the next line
Is the `DbProvider` used anywhere?
Should it be `using member var`?
Can't do this here. This is an example of how `getMode().selectAll` returns the same thing, right?
This looks like an unnecessary change
Is it possible for this to happen? If not, I think it is important to do that.
Can't we have this struct, so that we don't need to make this configurable? We could change all the other properties in the struct to use the struct
why the change to `session.BalanceTracker`?
I think it would be easier to add a TODO to remove these `v7` and `v6`.
This is the main use of this PR as it makes it easier to read and read as `MaxUint64-baseIntrinsicGas`
Why is this needed? `modules` is not used anymore.
Why we need to suppress this?
I'd rather have a single `Load()` function to check the number of places where the function returns.
This class is unused, remove it.
I think you can remove this. You are also using it by default
Can you add this parameter in the constructor so that it's only called once and only when the parameter is created?
Shouldn't `go fmt.EncryptedReferenceSize` take `this.go` as an option to avoid the need for the new `encryptedSerialized`?
I'm thinking you should just do `if not have have have have the same feature, as the one for version of a string: `return ifeq ($(llvm_version),7.0.1)`, and the `else ifeq ($(llvm_version),6.0.2)`, and if the value is `if` it is `if`
Why not leave it private?
Should this be `err != nil && fmt.Errorf("Unknown consensus protocol %s", protocol.ConsensusCurrentVersion)`?
I think this is a bug in master and we shouldn't be setting it here.
Shouldn't the assert below be removed from this file?
Why is this needed?
Hmm, this doesn't work with `-88` because `nodata` is a non-`-`-`n`
@deads2k i'm not sure this is correct?
This file is also changed.
We can't just remove "Print to" the attributes in case someone wants to use `URL` as the source code.
I think this is fine as it might make sense to move it to `skipOnService()`, too..
I am not sure what it will be, but I am curious if it is the default for `ldap3` and not `0.7`...
It seems that `Series([10, -2, 7, 20]` is only called on `./conf/repo/test_types.py` (or any similar test in your tests) and `Series([10, -2, 4, 7]` could be removed in this PR
I don't like using the second parameter here, just an idea, why don't the `if` statement inside of the statement? (same below)
Should be made internal?
I would suggest to set `current_backend = 'bokeh'` as the default value of `Store.renderers` and avoid the `idv` if the var is 1?
I think we want a broker to keep track of when a broker is sending as the request. The problem is that we're setting a broker to a broker is sending on a broker when it is not ready, which means we're not using the broker and it's not running on a broker, so we should use a broker for each request, instead of using an broker-like request.
`getResourceType` seems to be a lot of people's type, is the method name correct?
is there no other way around this? I can see some more things where I can't get this from the other PR, so I'd just add a `m` to `~` instead and make that an explicit variable for `m`
What are you trying to figure out why this is needed? (same for LuaEnvironment and LuaEnvironment)
@deads2k i don't know why this is here
These imports should probably be kept in a single file, I suppose they are just re-using that we do not have them there, I think.
this change is not necessary since we are calling the API directly from the interface
This makes it hard to read, but it's not obvious that we're adding new values in here.
We can remove these too.
Is there any particular reason why `serviceAccountTokenCreator` is not used anymore?
We should avoid using `javax.events` for consistency.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should this be "sp UI install"?
I don't think it's necessary to use 100 here
Is there some reason this check was added?
Why was this removed?
I don't think this should be here, since it's only used once in the file.
this is an example of how we want to know the exact same error message. the problem is that if the input is "*", we should have the `error` value that's in the error message.
Space missing inside {.<br>Space missing inside }.
Does this need to be added for the `instr`?
Is it necessary for the `Put` to be passed into the interface interface?
Why did you use `pubkey_hex` here?
is it possible for this method to be called with different types of pages?
I think we should make this a `static const` variable instead of a `!g_events`.
This change is unrelated. Please revert.
Why are you using a new method instead of an import?
Why was this test removed?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Wouldn't be nice to have a helper `optionalAfterAfter(T)` here?
Should we log the warning here? (I know the reasoning for the messages, but this is not the case)
Should this have a global `/debug`?
Please revert. There are many more changes in this file. We can discuss this in a separate PR.
Do we need to check that the count is zero?
Can we have a constant for this?
This was just a copy, not an incorrect commit.
this should go at the beginning, not everywhere else
Is there an option to put the `AttackTimeout` into the `DoFn` function?
Why remove this file?
What is the meaning of `azure.utils.block_count (transaction)` and the other way around?
I think this should be moved to `src/main/java/org/apache/nifi-test-config` to ensure all the other things are in the same file? I think we can remove this `test-file-config.xml` and `test -test-system/test-config.xml`.
Should we have `event -> getControl`?
Good catch! What was the motivation for this change?
Shouldn't there also be a `const char*` at the top of the file, too?
I think we should keep the original state the actual state of the state of the state of the state, e.g. `io.prestosql.sql.security.security.security.security.security.security.security.security.security.security.security.security`
Please don't create any new fields, just like `URLConfig` and `URLConfig` in the list.
should be `protected`
I think we should use `closeBillingWindow` here, as this is a `@Deprecated`
This was moved out of the `if`.
I think this might be a bit too much for a few reasons, I'm thinking about the situation that this may be a local file file, but I would rather check if it's not a local file.
There should be a better way to do this check
Can't you use `const` here?
It is strange to call `NamedValue` directly instead of `c.Doc.RevisionOn` since it's in the `NamedValue` method, but we should probably rename it from `NamedValue` instead of `NamedValue`. The idea is to call `NamedValue` on all of these events.
this file needs to be removed
I'm not sure how this should be `bool *` but it is used to store the function with `bool *`
I'd rather not have a method for that. I don't think the right fix is, but maybe a good reason to keep it, as it would have failed.
If you want to keep this test and just check the `categoryId` in the `createMock` method it is the same, as the `create` method it is used there.
Why is the `Next` needed here?
This is an API break. Please make it configurable.
this will change the test, but it looks like it will not work
@xominhui1991 @smarterclayton do we actually need these any more?
As above, I think that it's better to have this flag take an integer parameter, like `blacklistTypeStr`.
Do we really need this catch block? I don't see it being used outside this conditional.
This is a very small change that means that we need to change the type we're going to have to make sure all these values are set to `1`. The type is `1` so the `config.id` can be used for those type is not set.
Is this necessary, or just a simple example of how you use it?
Will this work on windows? If the latter then I'm a little confused by the `-o` option. I'm not sure we want to do this here - I'm just assuming that the `+` option will be set for every build file to be enabled in the future because the `+` option won't be set at any point.
I would move this to where the `AuditRPCWithTypesStatus()` call is.
Should this be `var BatchKey = stateKey`?
Please remove it.
Why do we need to check for the other cases of a `configuration`? If you do this, you could just use `spec.isUnpartitioned()` to return `null` when the `configuration` is not enabled.
This will need to be updated to not have access to the ``lua_pushstring`` function.
This is not the only one that works. The new default value should be `0.5s`.
I think the name of the previous method should be `async_thread()`, not `async_thread(),`. We should also change `userWriterList` to `has_user` to avoid any confusion.
I think you can remove the `parent` argument from here.
why change this? it doesn't look like it's the same
We have a `@Disabled` annotation which will cause all imports on the test. It can be reused.
This should be in an `memset_list_s` call as the default value will never be non-null.
I wonder if it would be better to use the same pattern as `sys.version_info < (3, 9)` for more specific cases?
The `if/else` statement is not necessary, since the `NumExtraElements` will raise an error.
It seems that the `saved_abs` variable can only be used in the config interface. Is it necessary to move this declaration up into the `mControl.h`?
Why is this change required?
Same here, I think I'd rather avoid this test, it's not really related to the rest of the PR, but I think the test needs more refactoring.
Please don't use wildcard imports.
Could you please also check if the policy is correct?
Should probably be in `main.py` for consistency.
I'm pretty sure you could also just return the file here.
Is this still needed?
Not really related to your change, but this one is not needed.
I think we need to keep these old statistics files. It was previously a separate change in #6149
We can't set it to `true` in the code. The current code is only available to the default (which it can do).
This is not used.
I guess `background_label` should also be added to `box`, i.e., `color_ate` and `color_ate`. The only time I see is `self.background_label`, the `self.background_label` function can be called by `color_ate_` (or at first glance).
@kacf @krwq @bdukes any idea what this should be for?
Hmmm. Should we add a "overwrite" after "Certetimes"?
I am not sure why this is needed here - `UserUser` has a `UserUser` property already defined.
Should we just make this assert_preter_attr_name instead of just passing it as an option? We can make sure we don't need to have any real values on the tests
"not in _a_ doc. That requires a breakig change, so it is is overkill"
This is a breaking change to the API, right?
Can you add a check here that the `hashStr` and `hashhash` are not in the chain?
you can use `backgroundFlusher` directly?
The second argument is unused.
This is the fix. The default value can always be `true`, right?
I think we need to remove this.
This seems unnecessary as its already in the class.
This import should also be deleted
I'm not very familiar with this change. I think this needs a better solution, if you don't want to be sure to add the state in the future
This could be more specific, since we have a `?:` in the if statement below.
Is this something you can do here?
I'm guessing that it's better to check the nullptr rather than removing it?
This should be a warning (as `args_string`), otherwise it would be useful for the user to know whether it's a unique index (e.g. `.add_message()` or `.add_message()`).
This should be done in a single test case.
You should be able to use Outfits here, but not the builder.
I would suggest to use a single map instead of a generic map.
I think this is wrong, you should use the `aria-Roles` type of object instead, right? (this is a simple wrapper to me :) )
I would make it optional
would it not be safer to keep it simple as `LOG.finest`?
Should be `rce.rce.rce.print.copy()` and then `rce.rce.compute(2)` and `rce.rce.print.copy()` to be consistent with `rce.rce.compute(2)`?
I assume you removed this in #6437 ?
Wouldn't this make the `parent` variable be not passed as an `parent`?
This line should be removed.
Line is too long. [81/80]
Do we need to keep it?
This seems like we can just delete the code.
The `/login` and `/schedpolicy` were added in the past :)
This can just be an alias for the class itself
I am not convinced this will break things, but I'm not entirely sure how to get the right `CoCo` in the `JQMIGRATE` file. I think it would be better to do `try { globalVars.appArgs.secure }` to indicate that the `unsafe` option was not added.
This needs to be renamed to reflect the new API.
I guess this can be just `*Stream`.
I'd like to see an explicit return here, like the `return skipLogOnErr` below.
Please add a space after `//` and remove the line above.
is it possible to have a default value here?
The change seems unrelated, but it seems a breaking change, and it makes it more obvious what this is for.
Is this in the first place?
This should be a one-liner
Shouldn't this be `else if (rc == 0) // expr is false`?
This doesn't need to be changed
This could be done by a different PR and the same, but I'm not sure how to handle that. @trosemani
is it ok to use `log_module.main(...)` here? I see it is in `debug` but you are missing a line.
This is probably fine, but we should probably have a separate PR for that.
Is the `devvda` prefix still needed?
>#include <fstream> [](start = 28, length = 6) Can we do this here instead of the block?
Can we use `loadExtension(path)` here as well?
Why not use `RetryN`?
I think the `hashToFullRules` shouldn't be needed here (and in other places below).
Is this change needed? It seems like we already have the final identity interface, but I am assuming the other changes will cause problems?
This is probably ok because the function can be accessed via a node in the same file. So I guess this can't be changed with the `applyRef` method.
Why not use `errors.Newf` here?
I thought `#include` and `fstream` could be moved to the `Caffe`?
This shouldn't be necessary.
I'd prefer the generic `load_plugins` here, rather than making it a global variable.
Any chance we could put this on 1 line?
"bootstrap.js" is the correct name. "noConflict" is fine for me than "bootstrap.js"
I am not sure if this is the right move here, but I didn't notice if we didn't want to make this change.
This is the same as `cachedUserInfo := [], nil`, right?
Can you add these to the `go:build go1.15` namespace too?
Is this needed? It looks like this only happens to be done if not sending the notification
I'd like to see a `.APP_DOMAIN']}"` method to set it to true.
can you change this to `force_private?` so that the path is always `nil`?
This is a good thing to do, we need to start the name of GetActiveApp if we want, but I am not really familiar with it, and this is a very odd one.
Should we also support `TLSProperty`?
Can we not use the `5000` as the default?
Can we have this as a class member of the package rather than the `&&` ?
This was a bug that's not correct, I'm not sure it is. It is not related to the fix, but I don't see it being fixed in the PR.
Can you make sure `show_delay_sample_on_raises` returns a param of this param?
Should it really be a `List<T>`?
Why do you need this change?
>levitate [](start = 16, length = 16) I think these changes were made to the same location. I don't see a use case for these?
I don't think you need to add this.
This field should not be initialized in `onTrigger`.
@TTangyotcap, I would prefer to keep the same behavior in `DynamomentsPlugin` to have `TreatmentsPlugin.getPlugin(addToHistoryTreatment(detailedBolusInfo, true)` here.
Could we make this a `ssize` for readability? Or maybe we can remove it?
should this be the last title?
I think you can just make a method `getSimpleName` and use `getSimpleName(string)`
Again, shouldn't it be `&& target.options['login-shell']` instead?
@wido Can you please fix these 2 spaces?
I don't think it should be here
Is this a special case? I assume it is for testing?
This is an `base58` that will never be true.
This was the only place where I thought about `toPath()` was called. This is the only change we had in the other code, where it was used. The reasoning behind this was that the `type` field was the first parameter to be set while it was empty is in the first place. The `type` and `type` was empty was not being set. However, I think we should probably not change the 'type' parameter to `toString()` in the `type` and `not` as it is.
Why are these two lines changed? They should not be used anymore.
I think this is a change to the API, but I'm not sure what the right answer is. `select` doesn't seem like a `unselectAll` that's being used, so the `AbstractList` and `getAll` are only used on this method, so maybe we should just use `AbstractList` here?
I would prefer this be a separate PR to do so in favor of a separate PR
Another one out-of-order after this.
Why not just take `2.4` as a variable of the controller?
This line could be moved outside the if block, since it's already a block.
This is not a boolean argument, but it's already checked by the `realiator` - it was already in the CLI
How about using a pointer.StringPtr directly?
this could be done with a `KeepTraces` method
is it better to use the `ca` as the default?
Hmm, this was a bug in #5292.
I don't think you need the `!r}` here.
nit: this is not needed. We are only trying to get the first argument from the list if it's not enabled.
I'd like to see a `process(messageFrameStack.peekFirst(), OperationTracer.NO_TRACING);` below to avoid the duplication
this is a change in behaviour, right? should it be an exact same value as the one in the node_config.c?
I would use `!proposal.is_Category` here, as it's a string.
if dask_array_module is a name that is part of the change, this may cause confusion
nit, this isn't an array, you can remove it
Would it be safer to just set the default to `0` in this file?
This file is a typo
Why do you need `@var` here?
Can we get rid of the `checkFor` call here too?
Please add the `!else` clause.
I assume this change is just to make sure it's not on purpose?
Does this change need to be in here?
This function needs changing to create_no_window, so we can get rid of the ``log_path = this.get('build_no_window')`` in the ``for_root_path`` method, right?
Can you move this to the `WorkloadSet`? I think the `Workload` is the same as `user` in the constructor.
This could be moved to `return`
Why not make a `@Restricted(NoExternalUse.class)` instead?
I don't like this name, `custom` is an attribute name...
This should probably be called `auto metaClient` because it is not a file name, but not the `env` field.
You can remove `bridge.getConfig().getString("server.url") == null` condition.
I think you meant `set(GIoULoss)`, and `DIoULoss`, or `DIoULoss`
This is a good example of what we want, but can we just change the signature of `assertSolrConfig(dcore, solrConfig, trusted)` and make it an optional parameter?
Please don't remove those spaces.
I'm not sure this is the right way to do this. I think the `err` should be the first one.
Why is this `ec2client` for all SDF?
Why did you add the `version=None` here?
I'd prefer to see this method used by both methods instead of using the same class.
this was causing build failures, but i think we need to keep it. The reason we are now not using it here is to avoid having to build `package.go` when it was available to the build.
Ideally this would be `nil` and the `:current_user.can_org_admin?` would be enough to check that the user is not set when they want to have a full error.
Can we move this block to the top of the file so that it's only used for testing purposes?
why is this here?
I think this is fine, but we don't need to change it here.
This will break compatibility with `@develop`, but I would not do it in `dvc/util` either.
I don't know if we need the `replace` method on the client side anymore, but if it was, we should be able to remove it.
It might be cleaner to just use 0-9 hash syntax here
This type was put from `pylint` to `pylint`.
I think this could have been added by accident, but we can remove it.
Can you also move the `local` prefix to the base class for this file?
This should be done in a separate pull request, not in a separate pull request.
this is weird, you're calling a bool in the constructor
Can you put these in alphabetical order?
This should be reverted.
I would add a TODO here, in order to have the error handling in the `.d.Client.Get` method.
We should probably just do this as a local variable, since `_checkStatus` doesn't have any side effects.
I'm not sure about this. I think you want to be careful, in which case there is another setting of "cpu" (and "Linear tree learner only works with CPU. With tree learner").
I think we need a more accurate name: `SCAPY_ROOT_DIR`
Is this the correct fix to do with this PR?
This should never be used.
I don't think the error handling should be here. The error is still valid and I'm thinking if we can't remove that case, since we're still returning an error that is still the case.
I think the `ARM` constant should be removed too.
`<%= tag :meta, :name => "startIndex", :name => "itemsPerPage", :content => our service id> Maybe we should remove the `.update(page_info.current_page == 1 ? 1 : @response.start )` and use the `.limit_value` `name => @response.start`
What is the point of this change?
`... is OK here, but I think this will make it more obvious that the `<a>` tag was being set (which may not be the case for `/b`/`<b>`, since it does not support `/b` in the `/`).
you don't need the utils anymore
I see this is a `.Sigh.NamespaceMatchSelf`
I think we can get these numbers by using a more generic name like `MIN_AMOUNT > FY16` since they are all used in the same file.
This is the same as in the other PR.
Why are these changes needed?
It seems you are missing a `Objects.HandleError` here.
Doesn't `return apisv1alpha1.PoolConfig.DefaultRaidGroupType == apisv1alpha1.PoolStriped` return true if it doesn't exist?
This can be moved to the new `if` statement above.
Can you add a TODO about adding this to the `Supplier`? I think the original logic was fine.
This is a pretty strange place to use a new one. You could also use the path_MAX_hash, and use the new one, you just need to replace the function with `chirp_wrap_hash`.
Is it possible to make this change at one point?
Was this a bug or something?
Should we pass null for this case?
this is a bit unrelated, can you add back the docstring?
You probably want to use `\w` in this format. The reasoning behind that is, it's a bit hard to remember to follow the code, but I think a better solution would be to use the same thing here, e.g. what do you think?
Why was this removed?
I think this will cause the exception to be logged, but if the server is not in there, then the connectionString will never be null and the message will never be thrown.
This should be removed.
Is this change to use span id?
We don't want the value of "is" here, because we do not know that it's broken or not but it's just the case.
I think it should be a `Set<T>` instead of a `Set<T>`
I'd like to avoid a string concatenation here, but not for this PR
Is this file still necessary?
Can you make it optional instead of protected?
Can the test be run with `Model.stderr` here as well? I think it may be better to keep it as a special case.
Can this be an Exception with a non-null message instead?
What does `build_langserver` do in this PR?
Wouldn't this result in an NPE if the target->getZone() is not ZONE_PVP?
Do you need to check that the block is still set?
I thought this was a bit confusing to me: - `find_by_slug` can return a `id`, right? - this is the `id` we need and we could add `@articles` to the `Pants` controller but the `id` controller has the same problem.
This can be moved out of the `get_descriptor` function, so it doesn't need to be moved inside the `is_same_v` block.
Hmm, this is not related to the PR.
Why is this change necessary?
Why do we need to pass a value from `ClientServer` here?
Why do we need to cast to string here?
This should be the default value.
I think you should remove this line, and just remove the `Invalid indices` variable
This seems to be the right place for this.
You could add a comma at the end of this line and remove the spaces after the last parameter.
I don't think this is correct - I don't see any use of this, so I have seen that "is not connect through parents back to the desktop" is not correct. It's not a big deal either way.
This is the wrong call, but there is nothing inefficient to remove it if we don't.
this could be moved to a list
Could you explain how this change is correct? This is the only change needed?
I think this will break if `getAmpSpan` is false, otherwise it will be not a boolean.
What is this `$source` for?
just curious - what does notifier_configs do that in the code mean?
Wong import ?
This needs to be `}.items()`
no `consts` on the screens
Is this a change from ` accuracySpec` to ` accuracySpec`?
I would suggest to add some typing here. I would also prefer to avoid passing a new param to the context.
This should also take an `AtomicInteger`.
Why don't we need to import the `httpexceptions` and `HTTPNotFound`?
Why are we doing this when `waitwait` is 1?
I would just remove this, the commit is no longer available.
Shouldn't it be `id == 100`?
This is a no-op, it's only in the `build_system` and is not actually a valid name, so we should remove this.
Is this a public API? I think it's a good candidate for a simple method to do with a `Function` that can change in the future as we have it in the `TestTableScan`.
There should be a trailing space in between `if` and `)` and `{`.
I think you should remove the `HistoryShard` interface and just call `getInputFromShards(rows *ShardsRow)` directly.
this is a change for the new functionality, can you please also update the other `constexpr` to `constexpr` and use `constexpr` instead of `constexpr` here?
This is a pretty tricky one, but I don't quite understand how this could happen.
Just curious. Why did you remove this?
What happens if I have an instance of `127.0.0.1` with the `listen_host`?
This is a bit of a nit-picky. I think the `TableOperations ops` and `maxFilterFilter` is unused. Maybe we can change all the other uses of `TableOperations ops` to `alwaysFilterFilter`? Maybe it is just a cleanup of the two?
Should be also remove the `isLogin` call here and the above `if (isMapCache()) {` block.
You can remove the `.partition` here. It's just a matter of taste, no need for another variable.
I think it makes sense to have this warning in the `LOG` method as a `try-finally` block. It's the same in all other places so it's a very minor thing.
This is no longer a part of your change, but it's not a problem. We need to be setting `PYTHONPATH` to a list, or we can remove it. We should also remove all the `.init()` calls.
Shouldn't we have a test for the `o.appName` here? (same for the other similar changes in `ListWorkloads` and `ListWorkloads` below)
This file also looks like a duplicate of v2
Seems like we are using `GSUITE_SERVICE_ACCOUNT_KEY_FILE` to be consistent across multiple places. Can we use a more specific name for this?
This is a very minor detail, but I think we should try to avoid `condaHelper.dll` as well and only use the `appDir` part. It is already quite important in the `abspath` case, but it does not work.
For a future PR, I'm not sure why this is here...
You can omit the `let` block here if you want.
It'd be nice if this was added to avoid an unnecessary observer, since `#send` has a few of them
I wonder if we want to make these try/except instead? If so, it could be just an issue for both, but it seems weird to have the code in the first place.
This looks wrong to me.
What is the purpose of the check? This makes it easier to read and figure out why it's not in the first place :)
this probably doesn't need the `if`
Could you use something like _failed_ to explain the difference between the two?
Why does this return any error now? Shouldn't this error be in a `Read` block of the error?
Because we have this field `tlsTask`, why not have it use it?
We should check that previous != null && previous.equals(fstLoadMode.name()) == false before the caller.
We don't want to make these constants on the ones ones, they're only used in the god process.
We should be able to use a `org.joda.time.Period` instead of a new one
Why do we need these `@example`s?
I think a better method name is `char`. This way you can get the actual value from `c`.
This is not correct, it should have been removed
I don't understand the difference here. Is there a reason why we're using `SingleTeam`?
This is a breaking change for me and it's not very elegant to move.
There was a typo here.
This test (and the one above, my apologies), is it really the right way to test this?
`schema.Handle(String)` should only be called once in `src/java/org/mule/runtime/types-types.go#core`.
nit: this can be simplified to `server.command(cursor.ns, cursor.options, commandOptions);`
@korycins any ideas for this?
We should check if we can't get into this package, or if we need to make sure they're always going to stay the same as the regexp. (I think there are too many cases here, as this is a bit odd)
I think there would be a lot of other places with an API method that has a `T` interface.
Not a huge fan of this, but I think we should have used `rum` for this, because I believe we're already using it in both branches, and the other option is to just remove the copyrights.
should we add a TODO here to make sure that it is only used once?
Does it work for us to have the same check for `role` (and the check for both)?
I wonder if we can move this into a `getLong` method, and move the logic to this method?
This was just dead code.
I would prefer we keep this method as `public boolean isNodeLive(long id, int, ...)`
This should be the first one, with `~`
This will also work on Macs and performance
Would it be possible to do it once and re-use it?
you can't change it in this PR.
should this have been `Common_MAX_CONFIG_VERSION`?
The `integration` suffix has no impact on the fact that we can't do that, just like the `.dvc` suffix.
Please remove this.
Use 2 (not 6) spaces for indenting an expression spanning multiple lines.
Could you change the logic to `Preconditions.checkNotNull`?
Should we just remove it? The `v2.16` file has a name like `Config.16` which I don't think is needed for this change.
I'm not sure what you're doing here.
Can we make the log files a bit more specific and just do: `this.uppy.info(error.message, 'error')` and remove the extra log conditional `this.uppy.info(error.message, 'error')`
I don't understand this change. This change seems unrelated.
is this TODO still being logged or is this TODO still?
Why is this in the `let` block?
this is not right. we need to check the existence of `err == 1`
I'm not sure if this is correct or we might be breaking the data for the next release.
I think the default here is `int` because `Ports` can only ever be used in the `rule` case? I'm thinking a little too late in the past. If we're going to add `int` to the provider and `rule` can get into that config anyway
I'm not sure I like these as an intermediary change? I'm curious because we can't just delete these lines (and the `switch` and `fips` in both places)
I would prefer if you want to have an explicit test that will fail with a good test. This is not true. If you have a problem that `nashornEngineFactory` can be reused, it can still have `totalages`
can you use an `ExternalTags` instead
I'd rather you call this `--rpc-require-chainid-in-txs` instead.
