I don't think this is necessary
Should be done in the `createBackend` method so no code changes are made.
I'm not sure about the naming here. It makes it sound like the segment key is used for the analytics app, but I can see it's actually used for the page, but it's used for a bunch of things so I'd keep `2nexpdgku3` or even `2nexpdgku3v2`. I think the only way to get around this is that we are using a segment key here, and not the actual segment key. So if you change it to `segmentKey` you would need to rename the file to be more descriptive (like `analytics-v2
This line was missing from `.uppy-dashboard` template, because `file.data.size` is not a number.
It looks like these values could be pulled out of the component, and be re-used?
This can be const
nit: group with other external ones?
`_iiii` should be `_siii`, or `_s` should use `_u` instead.
Can we get some sort of message in this log or at least log the actual error? I'm not sure if it's a good idea to log something here if we can't get a layout for another thread.
I'm pretty sure the `defaultService` is not used in this function.
nit: `keys.join('')` is the same as `keys.join('')`
Shouldn't this be `sharedMountValue = volumeConfig.GetSharedMountValue()`? Otherwise, I would expect that if the sharedMountType is "shared" it will be overwritten with the sharedMountValue from the volumeConfig.
This is a change of semantic, right? Is it really necessary to re-render the table?
I think this is better written as `activity.ParentSpanId != null && ....`
Nit: I think it would be good to keep this in the `updates` slice, to reduce the amount of work it might take to build up, and to avoid allocating new objects on every update.
We don't need to use strict anymore, right?
I don't think we should be testing for the wrong value here. The test passes for the current version, because it should have the same effect.
I think this should be changed to DEDUP_RESULT_CHECK. There should be a way to verify that there is an exception raised from the yieldSentence.
We can remove this line, it's redundant with the line above it.
This seems wrong.
This is an interface with all the methods we care about. Why not just call the `Deploy()`?
I think we should add another scanners entry that is in the table `ALL_EXIST_ENABLED` or `ALL_EXIST_ALL` with a list. I think this would allow us to remove these entries and only have a single entry.
Why do we need to special case `BYTE` here?
I think this will break any user code using it, so it needs to be fixed
please change this line to `!==` instead of `!==`
This should be in `ngraph/ngraph_definitions.h`
Why is the `readToken` call moved down to the end of this loop?
Is this used anywhere?
`||=` is a bit shorter, but is shorter and better.
I think you have missed that line. Also, this is wrong.
Missing license header #Resolved
this will be printed to stderr twice. Should we only print it once or add it only in case of error?
We should also clear the block disk cache.
This is the fix.
This is very strange, what is going to happen if the client is on master and we don't send the source/mirror info?
I know this is already merged but should we make a const for this?
This was a bug, and should be reverted.
Why does this need to be wrapped?
Could you rename this to LinkifyUri?
We'll need to make this conditional on the new tag being set in the `OpenTracer` context, otherwise we might end up with a `null` Span.
Why was this removed?
This change should have been reverted.
nit: I think `BiConsumer` and `Consumer` is redundant
`puts ex.backtrace.join` would probably have been more readable
`$cartItems` is used twice
I think we should keep the previous ordering of `VALIDATORS` to be more consistent with the order of the `TRANSACTION_POOL` and `SYNCHRONIZER`
Please import the entire package
It's probably best to make `maxShmemPerBlock` an integer. The name of this variable makes it sound like its value should be used in the future.
I don't think you can remove the feeds with a feedFilter < 0 here
Can this be `solid_subset` if we're going to do a union?
I'm curious why are we changing it to Warning?
Is the chain a bit of an abstraction? If yes, then maybe it is worth to move this to the chain package, as this is not an interface for all of the chain types.
why is this changed?
you could probably remove this check and call the hook onCreatureRemoved
Can we make this a `Retry(20*time.Second)`?
I think this should be `const`
We should probably have a check here that the target is not `core.Inactive` before we call `QueueTarget`. If we ever decide to do so we should add a `IsActive` check for it as well.
This could just be `if (pks.__class__ in ('StreamSocket', ...)`
I don't think we need this check at all, because we already check for `video` and `audio` element type in other place.
Shouldn't this be a null ref?
Is this change necessary for this PR?
Is there any reason why it's not `positive(argName, positiveNumber, null)`?
I think that the plan rules need to take care of the current node and replace it with the next node to match.
I think we can use `MkdirAll` instead. If we fail to mkdir, the directory doesn't exist.
@benhalpern @benhalpern Is this ok to do with federated login?
Maybe we shouldn't have "Balance: " in here as it's not an XRB.
`EnvFile` is unused (from `structcheck`)
This annotation doesn't seem to be used anywhere. If this annotation is needed for the tests that need it, then let's add it to the `pkg/apis/cluster/v1beta1/test/annotation/annotation.go` file.
Why is this necessary?
This method seems superfluous?
Why do we need to add this for this PR? We should not add this unless there is a reason to be done with it.
This will throw an assertion warning when called without `--enable-debugging`.
Use 1 space before `%{` instead of 0 space.
Why are we still setting allowExternalTables?
These could be static.
Extra empty line detected at class body end.
This is an interesting way to pass the ID to the `WebEnginePage` constructor
Do we want to log the exception?
@stgraber do we still want to use `WithField` for these?
Should be removed
This will break the event publishing if the array is empty - which I believe is okay but I don't recall the reasoning behind it.
I think the description should be `Whether or not to replace all the variables like {url}`. The reason being is that when you do the "replace" you should be careful to make sure the variables have exactly the same name.
@jnothman @michalkurka I think we should keep the default as `None`, since we're changing that in other places.
I'm not sure why do we need to pass instance name to this step?
`@Nullable` on the return value.
I wonder if we should just skip `resumeCompositor()` if the Windows is already paused.
why is this needed?
Is there any way we can get the exception message from the `e` object? This way we can keep it as a string.
I'm not 100% sure about this. It feels like we want to highlight the local connection even if it's in the highlighted state.
class Config
I think this line can be removed since we're using the `@aws-sdk/client-s3` package.
I think this is not necessary, the copy would have been sufficient to avoid a copy.
Shouldn't we call opentracing.ResetGlobal() to reset the tracer?
We can do `defer srv.mu.Unlock()`
`element` is used in `Type.type_cast`. We want to be able to handle other types.
why is this change necessary?
This will leak popup's resources, which is not ideal. You need to destroy them in the `destroy()` functions, not at the bottom of the stack and free the resources before they are freed.
I see that the function is called by `_init_pj_ctx()` but this looks like the wrong call to create the context, right?
This isn't the only OS that has `WINDOWS_10` (the platform name), but it should be `WINDOWS_11`
Please remove this method.
I think you need to also keep this check, because `obj==='object'` would always pass.
I think this can be simplified to `return ariaHiddenValue === null;`.
Shouldn't this be removed too?
I wonder if we should make this a default method in the `ImageSource`. That way the user doesn't have to explicitly set the `setImage` method (or even better, we should have a default method).
This looks like a typo.
We can use defer here to release lock.
Layout/EmptyLinesAroundModuleBody: Extra empty line detected at module body beginning.
Why is it called "requestId"?
`uniqueArray` is already a utility function, so please do not use it again here. Also, `axe` is an internal module, it should just be in its own file.
`path_buf` is not freed.
The Java style guide states `import com.google.common.collect.*;`
Please use `Parameter` here instead.
This should not be included as it's a new rule.
We can probably remove the above two lines now
I think this should go into a `plugins/` sub dir, since we'll be moving the socket stuff there.
Why do we need the Linq namespace for this? Isn't it redundant now?
This line should be removed since we don't want anybody from this URL to be honest. It will just make the URL more difficult in our development environments.
I think it should check the value and raise error if it's not specified.
I don't think I follow this part. I would not expect the element size and location to be different.
this line should be moved to line 12
Is this really the time since this was created? I thought the intent was to have all the events recorded?
This is not strictly correct, as `std::distance(first, last, 9)` is always equal to `9`, which could result in the same result as `9` (even though the latter is a bit odd).
Should we also have a label here to specify which operator is the operator?
Should you use the same method to be more generic? `parent.GetTag(Tags.InstrumentationName).Equals(instrumentationName)`?
Why was this added?
Should we also check if `pipeline_def.context_definitions` is `None`?
This variable is not really necessary, just use `MiningContext` directly and `MiningContext.miningContext`. The ` gpuMining` property is only used for the gpu mining process.
Can we make this `(1-100)`?
why is this added?
This looks like something that should live in `util`
Is there any reason this context is a singleton in the reporter? Is there any reason that we're not using the same context for all of our reporters?
I wonder if there's a test for it
Can't we just call the interface `setCodeGenVersion`?
This line has no purpose, `uploadURL` is always defined
this will panic if deadline is 0
nit: this change is unnecessary.
Can you add a doc here?
Should we also add check the `dataverse2Alias` is not empty here?
I wonder if we should change this to `SecurityGroups` instead? The `Tags` field is already `tag`
This can be written as `where(created_at: range[:created_at]...range[:start_time], end_at: range[:end_time])`
This is the only change in code. We only need to make sure that we have a timeout when the connection is closed.
Do we really need this?
coma_separator is not used in this function
I think this one is not necessary because the cache will be recycled by the caller.
Do we need to change the value of the `indicateNewVersion`? I think it's the old version.
this is the key change in the PR description, is it intended?
nit: I think it's better not to set parent provider here, if you want to override it on the base `BaseExporter`.
This will be true if it is not in the road graph, right? If not it should be false.
Why are you changing the name of the key here?
I would not include the module name
Is there a reason you removed the tabs in the file name?
This should be an OR condition, not a single line if.
The `host` is already in the format.
Why does this change? I'm not quite sure that we should change the behavior of this method. I'm assuming that if the manifest is big enough it won't be in the root.
I am not sure if this is the best solution since I want to make sure that the user can only see the report when it is in a progression. We can probably do the following: - check if user want a report and if not, send a notification - if auto download is off - send the report
I think that this check is not necessary
I would add a log here indicating that the key is not found
This log will be printed in many of the tests. Is it necessary?
@lbdreyer I'm not sure this is right. This will make the `data` array `[-1]` not be correct
Why was this changed? It seems like a good thing to me to keep it.
This will need to be updated once we have the new error handling.
This will not work. `msg-template=[{msg_id}]` is a list of dictionaries with a `msg` column, and `msg` is a list of strings.
Should be `require 'bundler/setup'` no?
Why the `?`.
I'd call this just "ReadOnly", since it isn't really the state of the list.
Why not just `Set<DigraphNode<E>>`?
If the condition is reversed, `!frontier_pulls.empty()` would make more sense.
We should not have a new header file.
I think it would be good to mention what this is used for in the description of the parameter and that it is not optional.
I'm not sure this is what you want. I think you want to do `m.ipsetsDataplane.AppendOrReplaceIPSet(m.ipSetMetadata, members)`?
This test is not testing the behavior of the method `search`. It only tests that it's returning two results. So I would just remove the test.
I'm not sure about this, but if you want the agentless to live on the test domain, you could put it in `test_id`.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think we can just remove this catch block. It doesn't do anything. And the code should be more clear if you use `ClassNotFoundException` or `ClassNotFound` instead of `ClassNotFoundException` and `NoClassDefFoundError`
We should remove them from the API as well.
Please use `bzz.GetP2PData()` instead.
@p0psicles I'm not sure how this works.
We can use wildcards only in Java 8
@jurre is there a reason for this change?
Can we make it `uidmapInUserNS(uidmap)`
I'd be inclined to put this in a `let(:approvers)` block, and have the test run for you as the first line, and the second line, and I think that's where the test should go. Otherwise this would just be the same test, and it looks good!
I don't see any usage of this component.
Should this be `volatile`?
Why do we need this change?
This is a lot of logic for a single chunk of logic. I wonder if the `found` check can be extracted into its own function?
This is an example of when `readPreference` would be a `string`.
Can you add the default value?
`--gen` takes a path to a file, not an absolute path, right? If that happens it will generate a directory containing the `authentication` module but not the `viewer` module.
What's the reason of this change?
Why is this removed? It looks like this file is auto-generated.
Can you please explain why this change is needed? Is there some other bug?
I don't think this is used.
Isn't this the same check as above?
@joshdholtz This is a breaking change. I am not sure this is the best solution.
`OrderItemFactory` is not really correct name :smile:
We are not using this function at all, is this intentional?
Can you move this interface and its methods to the `source` package instead of the main? Then we can just have a `jose_source.go` file in the `source` package.
The name of this file and the config file name is different. I think `param-override-configuration.properties` would make sense.
This seems unused.
This change is required?
I think this should be `Path.Combine(Environment.GetEnvironmentVariable("HOME"), "myagent/_work", "_temp")` and not `/home/DDITAdministrator/`
This is an unhelpful change - we can't just use "v2" in the code, because our current API server will have to be changed to "v2/server". We'll need to change the API server to use v2 everywhere so we can't change anyone's logic.
Do the headers need to be sent?
This change does not seem related to the purpose of the commit message.
I'm not sure if this is necessary. We should have already tested that `FastForwardBackoff` times out.
Should this be changed to `DEBUG_ASSERT_NOT_SUPPORTED(ARM_64`?
I wouldn't call this a `derivedSchema` as the rest of the fields have an `undereferencedSchema` property that is not the case in this case.
Please add a `null` check for `$event->getAvatarFilename() !== null` and `''` check for `$event->getAvatarId()` in case the `getAvatarId()` returns `undefined`

This change is just a refactor to remove `CompositeTextMapPropagator`, right? It's not related to the change here?
The same as above, can be moved to line 355.
This will only work in the `master` branch. This will send a warning when the worker is not a master (i.e. there are no workers running).
I think we should also set `Upgrade-Insecure-Redirects` header if it's not set
this should not be necessary
This will leak if we don't have any heap on the heap.. Maybe we can just use nullptr. We can use a heap allocator to get an allocator. It will also save a bit of heap allocation and memory allocation.
I'm not sure what the best way to do this is, but is there some way to avoid the "drop packets originating in pods" warning?
I don't think this is correct. I wouldn't expect any response to be JSON-encoded.
this test will pass even if editor is not shown. It is better to check if it is visible and only if it is the one which should be used. Also, this is not correct.
should be reverted
This change should have been in a separate commit.
Can you please make this a string? I think `out:` should be redundant
why was this change needed?
I don't understand why you're using this.
Please move `proto` package to its own section.
This is pretty much a copy/paste of a service in `app/services/sign_in_as_service.rb`. I think we could move to just one file in the `app/api/helpers/` folder and just call it `SignInHelper.sign_in_as_service`
We can't make it backward compatible. If you want to keep this, you should add an option to specify whether the dimensions are dimensions or dimensions-in-map.
Please remove these spaces from all of these
I would expect this to be `auto` and the compiler will optimize this away, but I am ok with it too.
Is there a reason to remove this restriction?
This is a bad import order
I don't think it is the right place to change the type.
`finish` should be deleted as well
Why is this necessary? You are not using the function above.
Do we want to put the namespace in constants.go and make this `const ( )` ?
I think we can remove this, we only use the `puppet` path.
Is this the right place for this? It should be in the `http` package.
This seems unused.
No changes in this file?
It seems that the code here is repeated a number of times - maybe it makes sense to refactor?
why are you removing the classification losses?

Please don't use star imports
This include should have been removed.
nit: move this down to the next line
Shouldn't this be `ERROR: .... child class ....` ?
Should this be `isNaN(Number(value))`? If it's NaN, it's just a number.
I think the state format should be passed to the constructor instead to avoid the `if (clusterProperties != null) {` block, as that can be done in other cases.
Isn't the comma case covered by `isIgnoredChar`?
Please use an empty method instead of no-op.
Would this make sense to make a separate `copy-speech` config? (I'm not sure what it's used for, and I don't see anything that uses it)
I think this is the wrong way round. If the client doesn't send any signal on the swapped channel then this signal would just not fire.
Can you move these two lines into the `if current_user` block? That way, you don't need to have this conditional on the current user being the same as the note's author?
I'm assuming this is a copy of the `reader` that I added to prevent overwriting the `path_resolver` after a `reader` is created?
I'm a bit concerned about this: It seems like it would be better to check for the existence of the element, since `has` could return `true`, and `false` would not return the value of `contains` if it isn't in the set. I wouldn't consider that a problem for now because if `contains` is overridden, it will return `false` anyway, and the `has` method would return `true`.
It's better to define it as `final int`.
I don't quite understand why you added this
This should not be necessary, ptr is NULL by default
This could be `help_url(url)`
Can you add a `s.mu.Unlock()` before this `if err != nil` to avoid deadlock? (If err != nil, then s.sys will never be nil but its state can become nil in this case)
Can we change this to "chromium:downloadEnabled" to match the other options?
Why remove `@Deprecated` here and in `ProjectValidator`?
We can add some docs here.
Is this used?
This is the main fix.
this is the only one I'd like to understand
Is this needed?
Layout/EmptyLines: Extra blank line detected.
Can we return the int as well here?
I think you want a log here?
I think there's a `model.NotificationEventType_DEPLOYMENT_WAIT_APPROVAL` constant, can we use that instead?
Is it needed?
Shouldn't the `requireNonNull()` method be removed here and in the subclasses?
Style/SymbolProc: Pass &:model as an argument to each instead of a block.
I think it should be chmod(0666) here, otherwise the directory is not writable
Should `_autogenerated` be removed?
Should this go in a different PR or a separate PR?
why not do `int(slider_pos)` and then `int(slider_pos)` below?
Why was this changed?
Class `TestZhLocale` has 26 lines of code (exceeds 25 allowed). Consider refactoring.
I'm curious what's the difference between these `if` blocks vs `else if`s?
Why change this?
This seems to be wrong for `libpsalm`
I'm not sure if it's good to rename this package.
This is no longer valid
nit: maybe this should be private?
Line is too long. [87/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is not a markdown format but a hash with markdown tags.
I don't think we should be using the `t` helper here because it's not translatable. It's a template that is being rendered for a single language.
We need to check that `options` is an array before assigning it as an Array in order to avoid the issue.
This is the only non-trivial change - the other changes in this file look good, but they need to be re-written as well to keep code clarity. The only other changes here are to fix a bug.
Why are we using wildcard imports here?
This change isn't necessary and the linter will complain on my local machine.
nit: we should return an empty implementation here for the sake of consistency.
I wonder if it's worth using something more descriptive than `logicsig`, e.g. `tealLogicsigSigSize` (and similar for App)? It's more obvious, especially when you use a different wording for this, so we don't have an easy opinion, though.
I think this should still fail if the name and id are the same - it's not a common scenario in which we don't have a name and ID in the tag name set. (The error message would be "duplicate tag name" instead of "duplicate tag name" - but that's not the case in this case). We can still return an error here if the name is the same.
I think it's better if this were `if: false`.
Should this be `time.Hour*2` since we have 2 different workflows?
Why do we need this line if we set it above?
Should we move this to a separate class?
missing whitespace after ','<br>SyntaxError: invalid syntax
I don't think you should remove it. The `ProjectName` variable is not needed any longer. We can use `aws-cli` to bind the CLI project name.
This change is incorrect. We need to return "0x" for "0x" if "bytes" is null.
this will return `found` if there is no node, not `found = candidate`. The original code was correct as it will return true if the node was found.
Can we keep the `Write` method around, or is this the only overload that can be removed?
Why this change?
This method is only used in the `StatusMixin` class. Maybe this could be removed.
We can just do `void attach(String name, File file);`
This seems like a weird formatting change. Could you explain it?
@mhvk - why is the bool parameter needed?
`it->second`, no need to use a temporary
"Patch Required" is a bit vague. How about: "Requires a patch in your test environment to be installed" ?
Nit - should this be a `const`?
Why this change is necessary?
Is this change really needed?
this should be lowercase
I'm not convinced that you want to be doing this.
This is not a proper way of handling the chain id. The only thing I am thinking of is whether we should handle the chain id here instead. I have no idea if this would work for the future though.
Why do we need both?
This should be `items[type].maxItems` rather than a `uint16_t`. `items()` should be a `Container` struct, which is immutable, and it should be immutable.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
can you just put these in the tests?
If we're doing this, then the size should be 0. It's not a new type. The opmask size should be checked in that case, so it's not an actual size, and the error message should be updated accordingly.
I don't think that this is needed
Why not make this a constant?
Should this be in the base class?
Can we use `path/filepath` from the `pkg/path` package to avoid this repetition?
This is the important part. We can log healthchecks only if they're enabled. If a user provides a `--health-checks`, they'll get the log output. So I suggest removing this Note.
This was a bad test!
I don't think we can change the existing code like that. This means we will need to be careful about breaking people that use this.
The same question here - why are these being set again?
I think the current name is not clear. It seems to be the case that `miningCoordinator` is not mining in the current cluster state. I think the method is more correct.
offlineMode = plugins.getConfig("api").offline_mode;
I think I'd just inline the Lock, since it's only used in one place and is just a local.
I don't think you need `cst` anymore.
Do we need this route if we use `?utm_source=podcast` in a URL above?
We don't need this
nit: this is not a valid error message.
I'm not too familiar with this code base, but is there any point to having this function, when it's only used once?
It would be great to have a test for the bind point error, to ensure that we can't pass the pipeline with an invalid bind point
Do we want to change `name` to `name` too?
this is not exactly the same as the `recently_published` query.
This is also used for the `SlipperaExchangeRateProvider`
Why is this a special release level? The package is built on beta, so alpha should also be in alpha.
missing whitespace around operator
I don't think we want to expose this to other components. We can just call this config.ConsensusOptions and then get rid of this func. The config package should just have a SetConsensus() and GetConsensus() and the config package should have an Init() that returns the consensus options.
@joshlory was there a reason for this change?
This is unrelated but why is it being deleted?
@alexandrebodin why is this a new mock file?
I think the "I" part is wrong.
Should this be `installer_signing_identifier`?
I think the log message should be something like `Host Port is defined for Container %s in Pod %s, thus extra NPL port is not allocated`, and I think that the container name and the key should be different.
I think this is a breaking change to the existing API. If this is a file that already exists (as opposed to being a directory), then we don't need to return false here.
I'd prefer to have this in `getRegions` so we can check for this in other modules too
I'm pretty sure that this is not needed anymore.
This is a function. You need to return the value.
This is unused.
I think you can remove this line since we don't have the ads catalog anymore
This doesn't need to be exposed as part of the API. Please remove.
@aduth, I don't see any changes here.
We don't use the `NETSTANDARD1_3` directive.
The `if` should be in the `ValidationStateTracker::PreCallRecordDestroySwapchainKHR` method, since it will never be called. Also, this will also check whether it's a valid VkSwapchainKHR, right?
I guess, `this->wallets.queue_work_regeneration(..., block);` should be in the callback.
This is unfortunate, but it was a little annoying. I'm not sure what a better solution is here.
Why not use `ExecuteContractRead` ?
Can be `NewBlockDataVersion()`
I assume the removal of `ThreadSafe` is due to a change in the output, is it still necessary?
I'd change this message to "An exception occured while adding OpenTelemetry Tracing to service collection. OpenTelemetry tracing will not work.". Also, this would be better as "...while fetching..." to be consistent with other events.
I think this is redundant since the function is the same for `start_acm` and `start_ses`, just call `start_moto_server` with the desired port.
I think we want to keep this here as a function, but it's only used in tests and can't be used in other places.
Is this used anywhere?
This test now fails. The arguments should be combined in some way, but it's not really testing what we want.
I think we should still keep `"prefix"` and `"postfix"` and keep `"suffix"` and `""` respectively.
This test is now redundant. It's checking `mounts` for `/rootfs`.
Why do we need this class?
why do we need this?
Shouldn't charset be set in the response?
I don't know why we need this, but the tests are failing.
Can we also update `provider.go` to add these fields?
`go start` has a very similar function. Would it be worth to have a `go start` func instead?
What is the difference between this and the previous one, or is this a change that was made?
nit: I think the standard is to put all the protobuf imports in the same order, so this should probably be moved before "proto".
nit: this is only for testing, can be inline with the `skipOSConfig` declaration in the file and used directly in the unit tests (no need to create the map in each test)
I know you are not using it, but we can't assume the URL can be null if the URL contains no type.
Is the session status returned in json? Should we add something like `HTTPStatusInternalServerError` in the response?
I was wondering why it was necessary to add this check, but it doesn't look like this PR changes anything.
I'm a little confused on how this change affects the test.
`getAttribute` may return null (it can only be `null`)
This is a debug print. It doesn't seem right.
Why not just `return $this->getConfigurationFromYaml()`?
This is still a member of ZSList
I think this can be `alwaysTrue(FileProjection.class).iterator()`
I think you have to remove this line.
We probably want to add some specs here.
This is the change that was made for testing
Why this change? This will break the build.
This is just a minor thing but I don't think this method needs to take a repo *Repository as an argument, because if you have to pass it around in the function call it won't be able to do anything.
Please do not use TODOs. We are working on moving towards doing so in this PR.
This isn't a setting. It is the setting you want to set in a specific example and you can specify `:stress_test => 5` in your example.
Why is this being removed?
Is this correct or am I missing something here?
Is this still useful in the context of `pyspark.streaming`? (If not, we should probably remove it).
Nit: this seems unnecessary since the `Raw` is a raw file now.
If timeout has a lower bound, the value will be used instead of w.DefaultTimeout
Please add a check for the length here.
This seems unnecessary. The import should be in the same place.
I think it would be helpful to add this in the `DeleteManifestsTask` and `RollbackManifest`, so that we have a clearer error message, rather than a completely new one.
Why change this?
The package should be `net.sourceforge.pmd.autofix`
Why was this renamed?
why do we need this?
Nit pick: can we use `goimports`? :) :) I see this is not a standard Go style, but I'm not sure it matters too much.
This seems like a hack - do we want to support the case where it's not set? Also, is there ever a case where an empty secret should delete the stack, and the stack doesn't have one?
We should probably add a check that this is Hadoop >= 2.5.0
This is not used?
Nit: can we use the naming convention `noPartiions` instead? (i.e. `noActivePartiions` instead of `noActivePartiions_`)
Why not `QUrl.url`?
` insecure` is unused (from `varcheck`)
Should be "Not Interacting with repositories via HTTP protocol..."
Please, use assertSame() with a string comparison
Should we just call this `Make` since it's not actually doing anything
@todosmai, this was causing problems on IE, as the old code had a different result.
This is not equivalent. I'm not sure why this was necessary?
@bnoordhuis I'm not sure if you have an opinion on how to avoid this... Is `window` not a valid global?
Should we keep this test? I think this is still valid, and we could just skip that test, but I'm not sure we should be testing the case when someone wants to run with a single VM and not with other hosts.
We can remove this and move it to aws_function.py
this seems like the right place to shut down
This is the interface for `DeleteWorkspace`
This should be `GroupMembers`.
This should not be public. Use `ConfigConstants.DEFAULT_CONFIG_PREFIX` instead.
I think we should just remove this.
This is the only non-standard way to suppress errors on this file, as it is a package that imports everything.
This method can be removed, right?
I'm a bit confused on this logic - if it's not hydrating but the excess dom children are there we don't know why? Doesn't this mean that the node won't be removed from the DOM and it will be replaced?
`array_merge` returns an array, not a boolean
This can be a simple `if`
There was a bug here.
`self.assertFalse` should be better to test the case here
please don't change unrelated code
The new method is added to the public API. I don't think we have a way for users to access S2 in their application.
nit: `initBlockRetrievalQueue` would be a better name.
This is a typo, and should probably be `snippet-source`.
Is this related or just a general question, is it related with the `cloudsql_conn`? Is there a reason for this change?
Why did you change the check?
This can be simplified to just `return getProject().getResolvedArtifacts`. The same goes for the `Project` method.
The "data-lists" key is not used and the value is always "data" for example.
I think we can remove `sniff`, it's not necessary. It will be added to `config_file.py` by default.
This line shouldn't be needed anymore
Why is this changed?
The error message could be improved for better readability.
We should not add this, because the tests will run in parallel to each other
This is a good time to move the `color_type` argument.
The `init` function is not used in this class.
why this change?
The issue with this approach is that this will not work correctly when there is no account key provided. We will be getting an error when the user has both account key and sas token, but it is not an error when they set them.
Can you add xmldoc? #Resolved
I think we could get rid of the fsm dependency in a future PR.
I've seen this pattern elsewhere in this repo, and I can't find it in other modules.
`Infof("Peer disconnected: %v", reason)`
Is this the correct name of the `boosting_type` here?
Perhaps we can also remove the `kDepthStencilAttachmentRasterOrder` const, and the corresponding `kAttachmentRasterOrder` const?
@mhvk-scott, this should be `\u2026` right?
Please import from `flask` only
We should also add a check that this is only a long domain certificate for the test
Is it possible to get the latest release and only do `apt-get install -r` if not present?
Should we make this a global variable, so it doesn't require the user to set it as a global setting?
This isn't necessary if you remove it.
nit: this isn't needed? (same with other places)
What is "No escaping required"? I think it should also mention that those are escaped.
I think `getShardToSecondaryJetty()` could be simplified to `getShardToJetty()`.
`EFLAGS_OF` is no longer needed in case of Arith flags.
I think we should keep the titleRegexp as it was, and only change the title when we update the `Change` object. Otherwise it will be hard to track which PR gets affected by the change (or other changes, in which case the PR will always be in progress).
I wonder if we don't want to just replace Core with Managed
I don't think the single page style is needed when you're using the `wp_head` post style in the template
"When enabled" should be "Enable" or "Disable"
I'm not sure this works. We only support `getFilesAndDirectories`, so it will only return files for the first supported version. I don't think we should be testing the Firefox API and only returning files for the first supported version.
why was this moved ?
this test will always pass now, because we are already checking the error returned by this method, so this is now redundant
This formatting change is unneeded.
This can be removed, right?
Please rename. This is not an instance registry event.
I guess this can be removed, as we only use the registry for this.
We have no way of knowing if `FakeFS.activate!` succeeded or not. It would be better to just use the `.activate!` method.
Shouldn't we check that stats is a Hash?
Why is this one not implemented?
I would name this `HasHttpMethod` for consistency with the other interface and `IHasHttpHeaders`
Why is this not required anymore?
Align the elements of an array literal if they span more than one line.
This file can also be deleted.
If the table is not found, then we can throw a `TableNotFoundException` and not have a table with a non existing location.
NIT: Can we call this `executionproto` since it is not an execution object
Can we add a new kwarg `options=None` to the end of the list, so that users don't end up with `options` without knowing what's the meaning of it?
I don't think `break` is necessary here since `res` will be initialized to `NULL`.

I'm not sure if this should be a percentage as the width is always a multiple of 10.
I assume this is just a placeholder for testing.
I'm curious: why was this change needed?
I think the naming of the methods is a bit unclear. It looks like a test class that only contains a test method.
Is this test now obsolete?
Does this also need to be changed in the other tests that have the `winrm_nodes` flag set?
Why are you reverting?
Can we move this block to `isSampleScan`?
I don't like the idea of this enum. Why not just use a boolean value? If there is a value then the cache will be reset. If it is not clear when the cache is cleared, then it will be cleared.
This is not the right thing to do. The icon will be shown for all the selected tree nodes in the tree, even when the tree node is empty. It may be better to just show the icon for only the expanded, collapsed or expanded nodes.
We don't need this anymore, right?
Why not just quote the whole string in quotes?
Why not use Uri as the type?
We don't want this if statement here? We want to save the entity to the `SynchronizableEntities` table and remove it from it.
I think we can remove the "expected", the error message doesn't really convey what it's supposed to do.
Why not `2019-2021 Van Noord <13665637+DanielNoord@users.noreply.github.com>` ?
Why not use `self._elem.dispatchEvent(event)`?
`ProfilingPort` and `ProfilingFreq` are not in the CLI config, so they won't be required
Is this needed to be done in this PR?
`Proto: proto.ConsensusCurrentVersion.String()` to avoid casting to `protocol.ConsensusCurrentVersion`?
If the flag is set to `true`, will this code still work if the user doesn't supply a password? It looks like it does and it should fail if the password is not provided.
nit: I think the previous order was more readable.
I would use the same pattern that you use in the other modules for `request.env[:clearance]` as well, e.g. `request.env[:clearance].sign_out unless current_user.id == @account.id`
If we're not using the corner header, we should probably make it explicit that it's a single selection layer. The same for column and row.
I wonder if we need a new `siteInfo.AddRow("PHP version:", desc["php_version"])` here. I think the `AddRow` function already adds the row to the app table.
We need to print the GoPath here too.
Can we use `findFirst` here?
I'd like to see more info on why the load balancer is disabled/invalid, and why they can't be configured.
Is there an equivalent check to this one that you could use?
Why are we creating this mock? Isn't `kvstore::NewKVStore` sufficient?
Is it necessary?
@mheon do you know where does this happen?
Do we need to do anything in this case? I guess I'm not familiar with this.
Why do you need a `Gorm` flag if you're not using it?
Should we make this a class method and use the `#display_section?` to be consistent with the other methods?
The `keyconf` import here is not necessary.
I think `identifier` should also be changed to `identifier of the addon`.
This one is also a breaking change, right? We should keep it and add it to CHANGES.md too.
This doesn't seem right... We shouldn't be changing a language in the main frame. This should be done in the wxapp.
why are you changing it?
Shouldn't it be "Cleaning"? It's the "Test Environment" that's stopped, but I don't think it's worth changing this one.
Nit: I'd probably just remove the word "we" -- it isn't really that important to the reader since it's no longer the case. (I don't think this should have a space after the comma)
@sagrare Why did you remove this method? This method was being called for a single plan, right?
nit: I think it's more accurate to say "failed to stop..." or "Failed to stop..."
This file was missing from the PR but I don't see it being used.
This is a wrong import, fmt.Sprintf is not correct.
Why this change?
`flattenIndex` is not used in `test/fixtures/addChildAtIndex.js`.
Can you rename this to `addMaskables`?
We probably should have a test where it downloads the config package and verifies that it exists.
nits: space between imports and #.
Shouldn't the dialect be printed out everytime?
I am not sure what is the motivation for this mutex.
I guess you should return the code here.
I think there will always be a timeout if the payment is mined into a block. So if the block is mined into 1 block, it should wait for 1 second before giving up?
I don't see how this change fixes things.
`params.method` is not used anymore here.
The default thread count is 1 in the locality configuration.
Why do we do this, it seems like this could break existing apps.
Why the error log message?
I guess this change would not be required?
This should be `strnlen_u`, no?
I think we don't need cc.
Is it okay to drop these tests?
This will not work as expected as `get` will return a new pointer (the new one will be used for the old one). I think the problem is that you can modify the existing tag root and then overwrite the tag root with the new one. I think you have to create a `conflict_info` to store the new info (the old one).
@danrot @greg0ire I think the `getExtendedTypes` should be deprecated as well
Is this a breaking change, or do you think we should make the change here?
This is just a change of code style, no?
Why are we returning `d` here?
I wouldn't bother to check for this, it's already checked in the previous if statement.
this looks like a formatting change, please revert
It looks like you are testing the exception message, but it was expected to be `assertFalse(false)` here. Is it intended?
This should have a timeout of zero.
This is not a valid link, so I just left the sentence as is.
I think it's better to do that after the error is handled, and log that it was the only error that could have happened. It's not a big deal if a server crashes, but it seems like it shouldn't happen. If there were some other errors, we can't just log that it's not reachable (i.e. if there were no peers reachable, etc.).
I think this test needs to be split into two tests. One to check the case in `FictionalCharacter`, one to check the case in `SpecialCharacter` and one to check the case in `CaseInsensitiveCharacter`.
why not just `MintNewBlock()`?
I don't see any value in having 2 functions to return a return value, just one.
nit: unused import?
Is the plan to move the metadata.json file into `compiler_info.json`?
This is an error message. It should be the same as the constant in `pkg/apierrors`
What is this new channel size? Is this just an arbitrary size? If so, why are we setting it to 100?
Is this the reason why we're not just returning private plans? I'm wondering if we could just do this in the caller?
Can this be removed?
Why do we need a flag to pass `null` and then have a separate `dnsDiscoveryUrl`? I think it's better to have two separate flags, one for dns discovery, and one for non-DNS discovery.
Why do we need to do this?
I think this can be removed. It's unused now.
`IPv4` seems to have been a duplicate of `IPV6`, so I think you can remove that field.
The `strlen >` check should be moved to the beginning of the function since we're not using anything else.
I think this is the wrong way around. The caller has to explicitly specify the UID. It may be set to "UnknownKeyGen" if no server check is required. The caller should either be able to specify the UID or to set the key gen to "UnknownKeyGen".
nit: import grouping
Should we use this as well? I think we've used this pattern before.
Is this change intentional?
This is a behavior change that is not related to the PR description, but the original issue was about this.
Why are you removing the expectation? The log should still be there, and the output should be printed. Otherwise this is not a good test case to have.
I'm not clear why we need this change?
Is this method still used?
I would remove this method and have the public methods in the same file as `getVisible`, as it is not used anywhere else.
Shouldn't be LOG.info
I'd change to just %s, since the format is already quoted.
I'm curious about this change -- it's only used to make it less ambiguous. Can you elaborate?
This is the same as `gcr.io/gcp` right?
Why not `cls.securitycenter.v1` or `cls.securitycenter.v1beta1` ?
NIT: This is an external library (so I don't think this should matter for the future).
Should we remove the `showUpdateButton` property from the `PatientEditor` instead?
This is the same as the `Process` function on line 14
Why do we need this?
Why do we need to pass the whole `value`?
Is this correct? I think we need to save the task data after we add the task ip to state.
I think this should be the same as below.
I don't like these defaults. It makes the code harder to follow and makes the tests harder to follow. I'd rather use them only when the file is present.
I'd suggest to use just the annotation, it doesn't add much value. It should not introduce any new warnings.
this is not a good change. This is going to be the same SQL statement as the previous one.
I don't think it's a big deal, but I would rather not use logrus in case there could be a bug.
Please remove this and just use @Before method
I don't think that it's a good idea to load the site name if it is already in memory. We could just return the name as-is and if the name is not available, we return the original site name.
I think it'd actually be nice to have an explicit test for this. I'm just noticing that the plan results aren't the same as TargetSpec.
It doesn't seem like this is ever called with retryableErrors?
I think we want `fairBankEpochNum < epochNum` here
I'd prefer this was `contentTypes: ['phrasing', 'phrasing-only', 'flow']` for all browsers so that we can remove this `contentTypes` thing.
Please remove this import
Please use `log.prompt.warn()`
Please add a line between the properties.
This is actually not right. This code was using an old format string. I've changed it to work on a newer format string.
I think this can be removed?
`FNM_PERIOD` seems to be a bit ambiguous to me. I think this should be `FNM_CANONICAL` (or `FNM_CONTAINS`) or something.
I think you need to update the copyright header
This should probably be `if o.jobName != "" {` and return a `configstore.ErrApplicationNotFound` here, but it's a nitpick.
Nit: can you move the line to the same line as the `verifyStatusResolvable` call?
I guess the plan.can? check was added in #1250
You'll also need one of your `set_*` methods (e.g. `set_scope`) that would allow for the possibility to override the instance.
nit: `AlertmanagerConfigDenyList`? I don't think we use it anywhere else in the code.
This is probably a bit dangerous, especially when it's not used for comprehension. We can probably move this into an anonymous namespace.
This is the same file as in `tests/keras/contrib/retinaNet/retinaNet_r50_fpn.py`. Can we move those to that file?
We should also add `omitempty` here as we've already discussed on the slack channel
Why not make this a method in the Image struct itself? I think that's more readable for what is happening.
why do we need this?
Why change this? It's not clear that these parameters are not used, or the script code should be changed to use these parameters to send the appropriate effect to clients?
This change doesn't seem to be related to the purpose of this task.
We still have to pass the `callback` object, because `setupNotification()` is already called by the native code.
I think it might be better to rename this variable to something like "stats_columns" (or "stats_snapshot_id"). That way it doesn't sound like a column that we have to scan
Can we add a warning?
I assume we can't use these in the future. Can you use a `vector` instead?
Please add a check to verify that `minSpeedChange` is not `MAX_SPEED` and `maxSpeedChange` are both `MAX_SPEED`
nit: can we make this `GetSchedPolicy`?
content_tag "a", &block
I think `modeparser.ENDCHARS` is not the right constant here. I'm not sure this is correct.
Do we need this? I see the same in the other mail.rb files.
Why is there a `waitForSelector` before `waitForResponse`?
This will always be a string so you can just do `request.Host.Split(':').First()`
why not just `status/`, this is more consistent with the other endpoints.
Shouldn't we show the icon when the user selects a Feed Filter?
I don't think we should expose this as a configuration option. It's the only one to expose to the admin.
This is a bad change, since it causes a compiler warning on the compiler.
Can we have a test to make sure that this works with all the fields (if it doesn't exist already)
This looks like some leftover debugging?
Can you please update docs here about why we are doing this now?
Can we change this back to uint64(10000)?
I think these should not have capital letters?
This link appears in a few places in this PR -- should we move it to `shared/subscription/index` for consistency?
I think you don't need this here.
This was a bad change, but the `allow_None` parameter seems a bit off.
nit: we usually omit the `+`
Can we not use `-acd` here?
nit: remove these two properties, they are unused
Should this be changed to the full path?
Why this change?
We use 4 spaces instead of two. Please check your code style guide, and check all of the files in this PR.
@bnoordhuis I'm curious if we need to do the same here as well?
This is used by `loadBPF()` and `loadBPFRaw()` and `loadXDPRaw()`. I think they should be replaced by their corresponding methods.
I don't think you need the `__a` function if you do `type(self).__a()`
This is the actual change.
Do we want to check `opts.ContentMD5 == nil` before calling `md5.Sum`?
The name of this method is a bit misleading. How about `doPreGainFocusRedirect`?
I'd prefer to put these under `github.com/GoogleCloudPlatform/compute-image-tools/` (I know it's not part of your changeset)
Does this really need to be public?
I'd like to keep the sqlite3-specific stuff in the core and not in iotex-core. The sqlite3-specific stuff seems like something we should do.
Can we use the logger?
We could have the `DEFAULT_METRICS_TIMERS_ENABLED` as an option instead of using a string
You don't need to disable these for these types. It's better to just remove them from the .csproj and the .csproj file. It should not be included by default.
this file is missing a license header
Align the parameters of a method call if they span more than one line.<br>Align the parameters of a method call if they span more than one line.
I think you need to add a `else` to the if clause that checks if this is something other than the type, otherwise we will get inconsistent results in case of multiple items being added.
Should this be `Basic %s %s"`? (and `base64string` should be a `text` rather than a `bytes`).
I think we can drop the #ifdef here and just use the test data path from the .env file, so we don't need to have the conditional here.
this should be a `DateTime` type.
I think the `granteeList` parameter should be `NULL`.
It's very dangerous, as it's possible that `session.py` will remove a subscription from the `subscriptions` collection.
I think the `via: :delete` was intentional for the routes, as the `sign_up/destroy` route does the opposite
Why are we adding this? If we want to disable it by default, we should have a separate PR to disable it. I'm also wondering if we have to add a `noOp` field? I feel like we have a different field in `defaultServiceDetector`.
Why is this removed?
This is not correct, the logic in `scrollIfNecessary` is the same for all the rows. We need to get a new scroll event object and store it in the column definition.
This import isn't used.
Is it possible to change the key name of the new field?
This is not the right place to do this. The lock conflict error 8558 should only be retried if the AQR is enabled.
nit: rename to `sdsv2` for consistency
I don't think this will work. `beforeChangeResult = null` will result in an `Object.keys(beforeChangeResult)`
nit: `UnaryOutbound`s -> `UnaryFilters`?
I think this should just call `container.Exec`
why `tx == nil`? Isn't it possible that this error is not nil?
I don't think we need to change this, but I think we should be consistent here. If the CN is `None`, it should be set to the empty string, else it should set to `""`.
`find_by` is not required here, `where(..)` works. But you can use `includes` to limit the results instead. I'd also be tempted to use a `select!` instead of `where(..)` since there is nothing in the database to filter by.
Why do we have this here? The `TransactionReceiptHandler` has `get` method that we can call directly, but it's only for the `BlockChain` so there's no need to do this in here, we can just call the `get` method directly here.
I suggest to move this to a Utils and then use StringUtils.isNotEmpty(value, "/") and then call StringUtils.isNotEmpty(value.substring(1)) and remove the while loop
Why did you switch all of these to `int64_t`? It looks like it might have a negative impact on the 32bit architecture.
We need this to include the language link if present, because `:language => diary_entry.language.name` can be `nil`.
You should return a null string
The `approval_response_path` function was used in this PR to get rid of the `cart` field. Is it still needed?
I see no reason to use _dbmField in layers.dot11. Could you remove it and use _dbmField everywhere?
I don't think this is needed. We already include JSON in the module.
Can you explain why do we need this check? Is there any chance `err` will not be `nil` at this point?
Can we call this deletePartitionSet or something more descriptive?
We're not going to expose `__examples__` to users, so we'll need to import this from `examples/pill/__examples__` for those components
Same as before - this is not the player's position, but a player's position.
This looks like it was previously returning `nil` for `title_fields` which was being ignored. Should it be changed to `blank?`?
Should be removed
This can be moved to the bottom of the file since it is only used there.
why are we changing this?
I'm not sure what this function does, and what it does.
Why did you remove the `*`?
I believe this is needed because the controller would expect the state to change after the last reconcile, which would make the controller not update the status. The controller would expect the controller to be updated after the next reconcile.
Please use double quotes here.
We can also change this to `builder.nextPageTokenName(Name.lowerCamel(methodInfo.nextPageTokenName()).toUpperCamel());`
Please add trailing whitespace :)
@sandahkrishna @krausehall can we use `OPTIONS[:global] += %w[format]` ?
"This script can be ..."
This line seems to be unnecessary.
Why did you remove these lines?
`=== ` -> `=== false`
Why is this assert removed?
this function is not used anymore
It will be a good time to add the same message to `noNewAlreadyUploading`. This is a new one.
this looks wrong to me. You need to pin it after you are done with it
Can we rename this to be `isFinishWorkflow`
Is this necessary? Or is there a difference between `ORDER` and `ORDER_PATH`? The naming is not very consistent across the rest of the codebase.
I would revert this line
We don't have any tests in here, can we remove them?
What type of hint is this? Can it be a `ClassInfo` or an object? (same with other types)
The name doesn't make sense to me, maybe `DATE` would be a clearer name?
I think `listViewStyle` was not being used in any of the JS files.
I don't think we want this in the base package
This could also be done with `std::floordot` (or similar).
can be package private
Can we call these `SessionCreationOptions` and `SessionConfig` to be consistent with the other types?
I'm not a fan of this flag. We are already doing this for every command. What about a flag in the cli?
Should probably have this `.recently_published_first` call.
This is fine, but we should probably add something to the message that the `content` is invalid and/or is invalid JSON.
Can we also have an event after this test that the `iptables-save` rule has been cleared? Or just in case someone else was running a unit test and ran it again?
I think it would be better to check the error instead of json marshaling. The same can happen for the other cases.
This header should be kept, and be in the header file in the header file.
This will overwrite `legend_opts` which is fine for now, but we'll want to make it explicit to the user.
Nit: This is kind of like "there is a limit for the number of launch template versions." Can we say something like "We ensure that the number of launch template versions does not exceed the limit by following a simple rule."?
I think we still need to keep `ContainerInformationTab` and `WinePrefixContainerDTO` as classes to avoid the `instanceof`
Should be `email_address.split('@').last`
why do we need this function?
I don't see the reason you moved it to the client. It's still used for the "remote client" to talk to a CA server. So this should not be needed anymore (since there was only one client).
This is an unnecessary change.
Is this needed? I'd think it's always defined and we can just pass it directly in the function.
I would add an if-else statement in case type == "passThrough" but value ==null
I think this is a bit too long for a ternary. Maybe extract it to a separate function and reuse it in the `getListRole` ?
This was already a separate change
Can you please remove this?

I guess `InquireVariableType` should take a `Type` instead of a string to be consistent with `inquire_memory_type`?
I think it would be better to have `FeatureGroupSizesInByte` return `size_t` instead of `size_t`
@jnothman @kapilt, @t3on this change makes the output `[ 0, 4, 8, 1, ..., 4, 8, 3, ..., 6, 11]`. If you're sure you don't need the flip, this would be a numpy scalar, so I think it's not necessary to use `np.flipud()`.
I believe the previous one was correct
The class is not in this PR: It's still in the `publisher` folder. Please move this class to `publisher/`.
I think we can drop the `default` here since the client only needs to specify it.
Can we add a TODO here to remove the TODO?
I don't think we should use the metrics processor here, instead of the resource.
Please add the license header here (and in the other files) to make sure it matches the file's author's year.
I think we should just remove this entire block.
This block is repeated a lot. I would make it into a helper method in a mixin class or something that can be shared by both models.
I know this is in fact just refactored, but I think it's cleaner to use the `!inputs->hasData()` form here to avoid the `!`.
nit: I think it would be better to call the variable `BuildspecPath` instead of just `Buildspec`
This can be a strict comparison now.
Do we still have a test for this?
Why are we changing the message here? What was the rationale on the change?
This seems a bit weird to me. Why do you need an error here?
I think we don't have to add these to `analyzer_cmd` because we are already adding the same options to `_add_ctu.py`, but I don't think we should add it to `checker_cmd`.
This variable is used for the network ID and the secret path, I think it is better to keep them.
I think this can be moved up to `testAlt`.
`NotImplementedError` will now be raised if no window is installed
Shouldn't this use `value.type`?
Why was this removed?
missing whitespace after ','
This is a new component, right? Should this be changed instead?
I think this is more consistent, using an underscore instead of a hyphen in a variable name is not good.
Isn't this just testing that the page does not contain an HTML content? That's fine for now but we should change it in the future.
I don't understand why you have to format it here.
The error message is not clear to me, maybe we can add the path to the error message?
This is a bug. You should just remove this line and use the environment variable.
I would prefer `!=` here, because that's the style we're following.
Can we make `cli.hasOption("cluster")` and `cli.getOption("collections")` constants at the top of the class? This way they can be reused and if you want to make changes in another method, you can use them as a method reference.
This is not correct. The result of strcmp() would not be the same as the return value. This change will cause the comparison to fail.
I would rather see this `confirmed_frontiers` and the default value `true` instead of `false`. The default would also be `true` so that the user has to manually confirmfrontiers. This is a minor point, but I think we should be defensive and explicitly say `true` here.
Please don't re-order imports
I think you don't need the `_` prefix.
this should be restored, we are not using the Kubernetes API
Why not just remove it altogether?
I think `Register` is not a good name, since the `automatic` prefix is confusing with `manual`.
`html.escape(html.escape(self._opt.text))` returns a string.
This property should be moved to `FlowProperties` class.
Shouldn't `checkForAtomicOperators` return an error?
I wonder if it would be better to do this in the kernel instead?
I think you should create a new one for `DBCStatistics` instead. You can get it from `settings.getDbcStatistics()`.
I feel like we should be more explicit here. What happens if we just swallow that exception. What is it for? Is it a potential problem?
Why don't you use the helper function to get default value?
This log line is not correct. It is the stdout of the patch command.
I'm confused about `temp` here. I think `.kbfs_config` might be a file name, but `config` should be the file name of the file.
Line is too long. [84/80]
We can use `List<ScanListener>` here?
We need to log here, otherwise the agent will fail to send an HTTP request.
This is a bit confusing. The config should be set only in the case of a single window state, not in multiple cases of one fullscreen. It is not necessary to set the config on both fullscreen and fullscreen (or both).
We will have a `DataFile` class, so it will have an `x_many` foreign key to the `DataFile`. But the `@OneToOne` does not have the `@JoinColumn(nullable=true, unique=true)` annotation.
Remove this print statement
nit: the default will be "LOG_DRIVER".
I think we should have a helper function for the two new lines.
Why not use `Foo` and the table formatter? It will allow for better unit testing and would allow to remove the `Foo` type.
Should this be false by default?
This message is a bit confusing (it is in the exception message)
I'm a bit confused here: why do we need this change?
We have `enqueueBlocksToDeleteNoWait` for this, can you change it accordingly?
Nit: `this can occur when setting Response.ContentLength64, with the framework claiming that the response has already been submitted` => `this can occur when setting Response.ContentLength32`
I don't think this method is needed.
I think we should just call it isAttributeLazyLoading or something similar, since this is not a lazy image, it is a generic attribute.
I guess this is the only place where we can have null opEnum in the codebase?
I'm not sure I follow why you removed this code, and why you did not add it for the other files. Was there any problem that you didn't remove it? If it is not needed, I'd prefer to keep it but if not, please explain why you are removing it. Also, this change seems unrelated to the rest of this PR.
I don't think we need this line, `print_page` is the `super` method.
should this be a return?
This change is not needed. The method is `private` now and is not intended to be used outside this class.
I think this will break if we're on the "Search" button, which has the suggestion value not in it.
This method can go.
What does this build without `go:build !no_stage`?
Can we rename `MergeTrustDomainConfigSources` to something that's more clear? Maybe `MergeTrustDomainConfigSourcesWith`? The `trustdomain` part isn't very descriptive
This is a bug fix for `checkAllReplaceSequence`, as the `checkAllReplaceSequence` does not return a string.
I'm curious: Isn't the builder a noop?
I don't know how `shouldUseOpMsg` should be used.
This change looks unintentional
I think this can be removed, now that we have a single class `TestPhraseQuery`.
Please use `File#separator` here instead.
I don't think you want to translate strings. I'm pretty sure that this would be the same string as the `label_for` method above.
`{@link` is not required anymore and will be removed
Please use `bool()` here.
This should not be needed since this is a template.
This will break keyboard navigation on tv, it's better to use the tv functionality.
Why do we need to save and save a separate value and checked property here?
I would prefer if this was the first line in this file, and we can add the other lines in the new file.
Should this be `%` instead of `%` for consistency?
nit: I think that it is better to use `RowKey` rather than `RowKey` for table's key. This is because it is used to lookup a particular row by a key in a map and the keys will match.
this was a bug that caused us to log the "error" level even when we didnt set the logger
This doesn't seem to be a very robust way to deal with unicode strings, but it's a minor issue. The version is not guaranteed to always be one of the three digits, so it should be `(1, 5, 0)`.
this is an error.
please revert this change, it is just unrelated
I'm not sure why this was `info`. If the logs are not being collected, this could be an unstable change, so it should be fine.
We should add an interface to the alert interface for this case.
`jobExecutorTests` could be `final` since it is only set in the constructor.
Can you add a newline before this, just to keep the `cmdline` style consistent?
I think we can avoid using `cv` namespace.
I am not sure why you added KindEcsApp in the middle of KindSasApp. Shouldn't it come before KindCloudRunApp?
This is a hack. I will try this out and make the `get_rect` method work.
I think this is not used anymore
@lavalamp this should be renamed to KeyNodeHostname
Is this the same as `commands` ?
Can the name of the method be changed to "MODPRIVATECHATOUT"?
Should `d` be a pointer receiver? (Also a question for myself, I don't have any context, just a thought)
>GetClose [](start = 16, length = 7) Why is this needed in this case?
Do you think we want this info in all cases? Or should we have `input_img_shape` as part of the meta, and just set it in the `forward_train`?
I don't think this method is used anywhere.
You could remove `\TYPO3\CMS\Core\Utility\ArrayUtility::mergeRecursiveWithOverrule`
nit: `FuncDef` -> `FuncDef` (we usually do the plural `FuncDef` vs `FuncDefinition` in this case)
Why do we still need the `getInputFile` method? It seems like we only have two cases where we can just get the `InputFile` and we are able to handle that.
Can we get rid of this file?
Is this file needed?
I think you need a blank line here.
Extra space found before semicolon.
I think we can just move this into the above "case" block. We'll not run the same for regA since we know there will be no error.
This is a bit strange, I think the name is fine.
Why not set the length here?
These imports are not needed as we are using `goimports` to import packages.
nit; should this be using `fmt.Sprintf()`?
nitpick: `abs_error()` takes two arguments, and we can just pass `const table&` to it.
Should this be `if req.Pagination == nil { return nil, nil } else { ... }`
We're doing this in many places, but I'm not sure we should be setting `f` to `f.Vectorized` here.
Style/SymbolProc: Pass &:save as an argument to each instead of a block.
dal::algo, oneapi::dal::algo  cal::algo_jaccard
I'd say the if statement here is not needed. It's a pretty basic function and it should work fine only if `is_cygwin == true` but if you want you should change it.
This was a bug. It was being called here when flushing the writerBuffer
I wonder why we are not supporting the `nil` case here.
Should these be prefixed with a `_`? We don't use these in a bunch of other types.
This is a great opportunity to use the `Plugin` interface, but I can't think of a reason to keep that.
I'm curious why this is correct.
Shouldn't the message be "expected closing mongo cursor to break iteration"?
This code is pretty similar to what you did in Append.cs - is it possible to consolidate?
I think it will be better to have this class in a separate file (and also make the class `private`).
Is it possible to check if `node.network.flood_block(block_a, no_limiter_drop)` was called with the `disable_block_processor_republishing` flag, or just do it in this case instead?
I'm not sure about this change since we're throwing a new error from the console.log
`fnfe` is not used
Should this be in `sensitivity` instead of `base`?
I think we should check that slaOptions != null, and only set it if it was set.
If I'm reading this correctly, this means if you have multiple role groups for the same cluster with different roles, you will overwrite each other with the same role additional policies?
This needs to remain
This is the wrong translation string.
I would make this `public abstract`.
Is the reason to use `FrameworkDescription` instead of `FrameworkInstance` for this to work?
Why is this case case sensitive?
Should we also add the check for `hadoop.` here? (i.e. `hive.`)?
I don't think we need this?
I wonder if it's better to put it in `node/payment`?
should be `$this->xmlType === 'Bibliographic' ? 'Bibliographic' : 'Bibliographic'`
This should go to the `constants.go` file
The default policy should be `kinto.readthedocs.io/en/stable/api/1.x/authentication.html`
Should we add vault to the help list?
I think this should be `config->xwayland = (config->xwayland_lazy || true) == 0`
This seems like an unused import.
Why did this class get renamed? It seems to be used in multiple places.
This will return an error if no signature was found for the `gitignore` file. If there is a valid signature, the user should be able to recover from it
this will need to be changed. The new field of the ofFlowBuilder is "bash_bash". The new field is "nw_tos". I'm not sure why it's needed.
Should be `true`.
`self.param = self.__class__(self.param)` would do the job.
nit: these two fields can be readonly
Why is this change necessary?
I'm not sure I like this naming but it has a lot of meaning. The IP is already in the `Fake` struct. I wonder if `getip` would be better.
Nitpick: unnecessary `using`
Why the rename?
`uploadImages()` is used in `syncMedia()` and `syncMediaWithContent()` so we are not going to be using `ContentUploader` anymore.
I think you meant to include Rau here.
Shouldn't this be `wait *runtime.Duration` ?
Let's remove the line.
Why this is needed ?
Align the elements of a hash literal if they span more than one line.<br>Use %i or %I for an array of symbols.
This seems odd. Can you elaborate?
As there is no test file in this pull request nor any test function or class in the file `databricks/koalas/extraglobs/index.py`, please provide doctest for the function `test_extraglobs`

Should be a pointer type, no need to explicitly pass a shard ID
I don't know if there is a better name for the template. `TrailerComplete` or something?
This is not a warning IMO, we should just return an empty string here.
These are not new. Please update to the new mapping.
This is a duplicate of the test below (see below for why it's removed).
Should be `MvxOverridePresentationAttribute`.
It seems like we should not do that if we remove the `_component`. It's not used anywhere else, and is not related to this PR.
I think `setupSyncsSoupIfNeeded` also clears up cached syncs. Is that intentional? If not, I'd suggest removing the line above.
"a song" => "an album". "an album" => "an album".
@jameswnl, do we not need to check if Puppet is loaded at this stage?
Should this be in `tests/common`? Or is this something we should run in all tests? (just curious)
I don't think this change is related to Firefox
Would it be better to use `strip()` instead of `startswith()`?
`Accounts::AccountWidgetController` would be a better name here
This doesn't seem to be an API? Should this be removed?
Why do you need a separate file for these pins?
this will be replaced with selectorbuilder.Matcher() once #6567 is done
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think you really need to set this here if you're not using it for anything else, it's the default.
Do we want these added `using`s here? We should probably just remove the usings.
nit: I don't think we need to test the return value here anymore.
Is 0777 enough for the test to be OK?
nit: we might want to use this variable everywhere, but it's fine
this doesn't really need to be exported
Is this a problem? `Dps2` is an alias for `DML_TaggedMemory` but `DML_TaggedMemoryL` is a alias.
why is this a lambda? It does not seem to be used anywhere.
Should we add `-v` to the flag to indicate that this is only used in the test?
It is probably worth adding a case for UnboundFunction as well (for Tuple)
I don't see how value.concat(' value') is equivalent to just `value`

This should be private (not part of axe.utils)
This is unused and should be removed.
nit: we can get rid of this variable
I would suggest to make this method package-private, so it's not public
Shouldn't we change the default to false, as it will be the default behaviour for all versions
please change this to `year%4 == 0`
Is the idea here that `global_configs` should be passed in to all child classes, and the `build_rule_book` method should be able to access it directly from `self.global_configs`? If so we might as well make `GlobalConfig` a subclass of `Configuration` (I'm sure there are some cases where `global_configs` should be a list of `Configuration` objects but it doesn't seem to be a common use case for that case).
This looks like a formatting change.
`def build_tracking_url(self, logs_output):`
I'd rather remove this function and add it to Creature.cpp.
Can you also add a new method to `StepInfo` to get the `ReplacementTransform`? I would prefer not to expose this as a static property.
Nit: I'm not sure if this is useful, but I'm guessing it's a debugging leftover.
Is it really necessary to set it to 0 here?
This change is unnecessary.
I think we should just call `removeUnusedShapes` only in `removeUnusedShapes`, since this is not a public API so it doesn't need to be exposed.
why did you change the behavior?
I wonder if it makes sense to put this inside of `if (doing_detach)`? Seems to me it makes it easier to see the code that is supposed to run in detach mode, and we don't have to worry about race conditions with attach. Also, it may be better to add `if (!doing_detach)` around the call to `get_thread_private_dcontext`
Please revert the change
I'd rather this be changed. This is not a validation error for a CA certificate, so it's a bug. The `certificate.go` file is missing a `KeyAlgorithm` field to make it possible for a CA certificate to be created. If it does fail because of an invalid certificate, I guess the `keyAlgorithm` field will not be valid, and will still be used in that case.
Please add a space between if and the "(" and the second one.
Why not `const std::string&`?
This change is unrelated... I'm guessing this was just to fix some of the compile errors in some cases?
This class was not needed because it was in the zipkin-core repo.
This change will require the `eslint/no-undef` package to run. I'm not sure it's safe to change that unless there are some other changes that will be needed, but this is a separate change that I think we should revert
this looks suspicious. Shouldn't this be !comma && strcmp(resource_str, "id:", 3) == 0 ?
Do we need this for `mPrivateWindows`?
nit: this class can now be removed now :-)
Nice to see we can finally get rid of these `from pyramid import testing` changes.
This method seems superfluous, and also a bit redundant?
I don't think this is the way to go here, if the default is not specified for positional params, the `envVarNames` method will always return null
This should not be needed, the client ID is not used for anything.
I'm not sure how much effort would it make sense to split these out so we only have to keep a few bits on our side to support them. We should keep them here to allow for easy maintenance.
This seems to be unrelated, and it should have been included in a PR to avoid unnecessary refactors. It might be good to remove this change and then merge it into yours.
Can you explain why we should display subject in message header? I'm just curious if this should be added to the "MessageView" mode.
I'm not sure if this is a good idea since we don't really know the sampling rate at this point, but this is probably a bug. If the user sets a default, but doesn't set a sample rate, will we still be using the default sampler?
Why not use the empty object as the default value for the `apiprovisioner.Deployment` field directly?

Can we add a check for `offset` and `count` here as well?
I think the image name could be made private.
I would expect `flushAfterPaintEffects` to return `false` if it's an error and not a `boolean`.
Should we keep the old roles here?
Can we just use `const videoConstraints = this.opts.videoConstraints` and then remove the line?
This isn't actually being checked in. This will also prevent users to upload videos without the slug to their video.
This should be handled by the `wasm-abi=` flag, not at the `plugin`, because it's the default behavior.
Is it possible for Start() to error and just continue?
Can we just add the `entries` as the `attrs` to this call?
I think we can add a `resources` field to `topologyv1.SearchTopologyResponse` to keep this function simpler.
@kuzmany I am unsure why you changed from the `position` to `id` here. It seems that we need to update the query builder to use `->addOrderBy()`
I don't have a good feeling that this is the correct value here. It looks like the gas is 100%, not the amount we claim from the rewarding fund
Why? This is not a good solution
Can we add `BlockHeightToState` to this interface too?
can't you use `std::swap_if`?
This is going to be a big change - the old behavior was to ignore `ConsistentRead` from a query that doesn't match, but still allow `ConsistentRead` even if `QueryInput` is specified.
Can this be an assertion instead?
this exception message should be updated
I'd suggest adding the new param to fetchRefreshSelectedEventsData and add that new param to `fetchSegmentMap`.
I don't understand the purpose of the change. It's not clear to me how to change this.
What is this change for?
Can you make the key interface `readonly`?
why this change?
nit: `IsAppInsight` => `IsAppInsights` for consistency
`if (tmp && ctx->log_key) {`
Why is this being deleted?
This test was failing, but now it doesn't.
Is that correct? The value is not set in this function?
Is there a reason why this is not called directly?
We can just remove this if this is done now.
I'm not sure if this line should be removed, but if `from_ts` is not specified, the tests are going to fail.
If this is not needed, remove it
Maybe just `func(addr swarm.Address) (score float32, jumpToNext bool, err error)`?
I think this is more correct if it were "if its not a browser, redirect otherwise".
nit: this include should not be required if you remove the line above (and remove the other one).
This file seems to have been moved to a better place, I don't see where it's used.
Can we use `StringEscapeUtils.escapeHtmlString` here instead?
The pingerPort is a bit confusing here, can we rename to something more explicit like `providePingerPort`
I would prefer to have a separate context for the `user` param, that way we don't pass around all the user data and we don't have to pass in the entire user object.
Is this the correct way to match a path?
These should be removed from here, not added here
Should this be a static method rather than a class member?
Should this also include `X86`?
This should probably be `TRACE_ID_MEDIUM.eq(zipkinAnnotations.TRACE_ID_HIGH)` to make the query simpler.
Should we call it something other than exclude?
This is not a good pattern, we should use a regex to ensure that `=` is not in the url, and the same as `=`
This check will be redundant
I'm curious if you think confidences is more descriptive than confids?
I would prefer not to add a new field.
What's the reason for this change?
We have `determineGateway` above, and it seems that `determineGateway` doesn't exist anymore after this change?
Why not make a factory for the factory? It should work for the test itself.
Is it possible to have `json` in a variable?
I think we should just pass this as a property, and not have it throw if it's not set (it'll just throw if it's not set).
This seems unused. Why not use the same var name?
This could be `std::sqrt` or `std::sqrt(int(itembonuses.DoTShielding+itembonuses.MitigateDotRune[SBIndex::MITIGATION_RUNE_PERCENT])+aabonuses.MitigateDotRune[SBIndex::MITIGATION_RUNE_PERCENT])`
this should be configurable?
We have to use the header of the previous block to be able to update the forkchoice. So I guess that this is the reason why I'm using the header from the current head. So, I'm not sure why that is being done here.
Why is this called scratch instead of disk?
Why do you need to add `index_scols` and `column_scols` here? They seem to be the same.
Should this also be a map[string]interface{}?
Is this line really necessary ? I'm not sure we need to call the base class method, but I'm not sure it's necessary.
This is a good thing, but we should probably update the docs to reflect the change
Nit: This name is very cryptic. I would suggest to call it "addFiles" instead.
Why do we need the null check here?
This constant appears to not be used?
This one is actually a mistake. The original is correct.
Is this still needed?
This is the only thing I would prefer to see to do is to add the field name to the original field schema if this is the only field we need to use the original name. Then, we could remove the need to sanitize `origFieldName` before calling `validAvroName` and do the same for `fieldName`
This seems redundant to me, and probably doesn't belong in the Proposal model, so we can drop it.
@smarterclayton @tnozicka I was thinking that if it is a task object name repetition then the resource name of `resource` should be set correctly. So this `ResourceNames` field should be set by the `TaskExec` and not by the `TaskExec` itself
This is going to need to be a string as well
@felopse @luciano-cmu, is it okay to remove `pmi_fd`?
Is this needed?
E131 continuation line unaligned for hanging indent
This doesn't seem to be used?
This should still be `appendTaskENICapabilities`, as we're replacing an ENI-Trunking capability with an `INTEGRATION_CAPABILITIES` (which I think is correct), and not `ENI-Trunking CAPABILITIES` (which I suspect is the same)
It's a little unclear to me how this is supposed to work...?
I'm not sure why we have to ignore errors here.
This will still print "Warning: the provided docroot at ... does not currently exist."
this is not necessary, you have it already in `<-quit`
why did you get rid of this constructor?
This is not used anymore, right?
I am not sure what this change has to do with this PR, but it does make it so that I can run an example that doesn't run `brew ssh` on my machine. I don't think that this change is correct.
Why not `!chit->isValid()`?
I know this isn't new, but can we use `import { Component } from '@wordpress/element';` for consistency with other imports in the plugin?
Why is `public` changed to a `private`?
Nit: `map` is already imported below
I think you can do `data.to_index()` here
This seems to be a duplicate of `getClassFileResource`. I wonder whether we should have some shared method for this case?
Should this be a constant? Also should we have a test case that verifies all the combinations are accepted?
This test is no longer relevant since it's not the "current" one.
This will be very noisy for most users. It's better to keep them info or remove the log statements.
We have a hook for this in Rocket.Chat.js
I know we had to do that, but I think it is more readable to import from a single line.
Why is this not called?
Why did you change the namespace ?
We shouldn't use "TLS" in our docs. We are doing TLS handshake on a per-peer basis.
Should we use `err` instead of `res.Body.Close()`?
I would prefer if we kept the original, as there is no need to match the number with -.
I would suggest to rename option to "disable_category" since the default value is false and this is not a boolean option.
The ActivitySourceAdapter can be passed by `AspNetCoreInstrumentationOptions` now.
`(GDestroyNotify)g_ptr_array_unref` is not needed (as you're not passing anything)
Should this be the same value as the flag? (I'm not sure whether it makes sense to have two separate flags or not)
we don't use star imports here, so please revert this change.
Why was the type change made?
I don't quite understand what this is doing -- is this fixing an issue?
I think this should be part of `ValidateSignature` as the proposal signature is only checked when the `signer.Protocol() == address.ID`.
I think I'm missing something. The `emrfs` command is actually `EMRFS`, no?
I think the naming needs a better treatment, e.g. `max-request-body`, or `max-request-body_length`
should it be ErrOrderTypeNotFound ?
Shouldn't this be `INFO` since it's a result?
I wonder if it's possible to have a single auth function that would give us a single service account if we had multiple auth functions
Can we just use `super().__init__(my_string, optional_int)` here (no need for extra arguments)?
Should this also default to web?
This will also free the `tmp` buffer.
I don't understand, why is this needed?
Can't we just set it to `-1` here and drop all of the other checks?
I don't think I like the idea of having `jrpc` be in the package-level, I think this makes more sense in the `pkg/node` package
I don't know if we need to add this in the first place
Why do we need to remove all of these?
why is the slice slice necessary?
this needs unit tests.
Can we use `pkg/util/hash.Hash()` here? Also `pkg/util/set.go` uses `strings.TrimSpace()` which is not necessary.
The fix should be in the .csproj so that the .csproj is present in the repo.
Can you explain how this condition will behave when we call `kill()` on a flow in a flow of a single job in a flow of two jobs?
Is there an option for having this in the common package for now? Is it possible to use an interface instead?
Why is there a data-order here?
This seems to be missing an @internal annotation?
This looks like it's not related to this commit.
@bvaughn this is just a small change but it was confusing to me that it's going to call `getAttribute` for SVG nodes and not for attributes.
Is this just a mistake? It's in the `entry`, so it should be `234`.
Is the change to the API related to the focus change?
Would it make sense to freeze this array?
I would prefer to keep it simple and just sort the aps by subject.
We can probably move the `m.Combo("/org/:org/repos", reqToken()).Get(repo.ListMyRepos)` call below to this one so that it is a bit more obvious.
I don't think this check is necessary?
This should be `JSONBoolWithQuotes`
This is a good fix but can you change it so we do not use `._kdf.scol` and `.data_scols.first`?
`administerable` seems more like an "administrator" variable
Can we use `dto.DefaultPaymentPerTime` here so that the `DefaultPaymentInfo` is only used for testing purposes?
I think we can change this to `if (limit < 0)`, because it will throw when no label is provided.
Why did you add this check?
I think we should not alias `klogv2`. This is because the package is named `log.V2` and the import alias `klogv2` is named `klogv2`.
Shouldn't we have an additional SQL query, or are there cases where this would cause the database to be in a bad state? The only cases where there would be a data conflict would be the data in the db, but in the database we wouldn't be able to write this data.
I think the `preact.js` is missing here (which would require it to be an object)
You could use the `[InlineData]` attribute instead of creating a new instance.
I'm not sure this is a safe approach. This might be called multiple times in the same application, in the same system (or in other contexts). I think you might want to check with `strncmp`.
Why did that change from null to 0?
This is a good catch, but I'm not sure I like the "http" prefix. The name makes it sound like there are http schemes and we don't really have the scheme.
I think we should throw an error in the case the user provided both the key and the value of the option, as that's the error we should be able to tell the user whether the user specified the value or not. It's better to fail if not provided.
This is an interface for binary operations. I'm not sure it makes sense to have these constants in binary.
should we also support `compute_service_account: ""` in the `IsInstanceImport` condition?
I don't like the `GET` prefix, I think just `GET` would be enough.
Should this throw an exception? If we support `PLAIN` and we can't decode a page with `null` values, is this a bug?
I don't think we should allow positional parameters
This is a good change in behavior but it makes it much harder to find the changes in the files that are not related to the bug.
Is it possible to use the python `airline_demo.resources` for the local resource?
I would prefer to use `utils.StringMatches` here.
This test case has nothing to do with forced=True; it would probably be more useful to test that a scalar with no force is passed in, and that the default is not changed.
This is the only line that is causing this bug.
This should be added to the docstring of the `options` parameter and `file_detector`.
Why did you change to `Integer`? This is a user-facing class.
Why not `*NewTestCtx()`?
This should be a `const` and we should use `MaxSize` from above for readability and readability.
I'm not sure what is the purpose of this include. It is not necessary for stackdriver. The file is just the stackdriver_conf.h in stackdriver.c.
This code is duplicated in a few places. Is it possible to reuse the code?
I'm not sure it's the right fix here since the `CategoryInterface` interface is no longer used.
nit: remove empty line
compute.hpp  c  c  c e
I think we should change the default value of this variable too. It looks like it's not used anywhere.
I wonder if we should make these public? I think it makes it easier for developers to change their code later on.
Why did you change these?
This struct should be in `identityUnlockerDto`
I wouldn't do the same. We have a flag called "--eval-class-wise" for this purpose. You can do the same for the other option.
This is not really an id since the root category could be a child of another.
`getInputFile(task.file())` -> `inputFile(task.file().toString())`.
Shouldn't this be the first import to get it in place?
This is an internal API change, I believe this should remain true until we add support for isolation filters. @jpechane
I think it is better to use `grpc_reflection` package to access reflection (and expose the reflection function)
Why `addToStaticNodes` instead of `addToStaticNodes`?
This should be an `Attribute` type.
I think I'd call these `deactivated_at` and `activate_at` instead of `deactivated_on`, `deactivated_on` and `activate_at` would be better names.
We could probably make this more generic and use it for all types as well, but for now I don't know what to do with this.
I would prefer to import `RemoteWebElement ` and use that to get a `firefox_webelement.WebElement` to use in both cases.
Can we put this in the config? This doesn't really apply to the pause, as we're not using a service container to start the task.
I think the code in the `finally` is still necessary. In case of an error this will be set to `null`.
This check is redundant since the check above already checks it.
@andrewkroh @balexeyer-ravish I'm assuming this was the bug in the current implementation, right?
This is just to make it work for the list paging page
you can use `assert_eq` with the same argument, so that you don't need two identical `assert_eq` calls

Should be in the else
Should we be using `Urlencode()` here?
This looks like a hack. It will probably have to be revisited if you can rebase and make this work.
Should this be debug or trace ?
This looks like it will be the same as `StackTraceUsage = _allLayouts.DefaultIfEmpty().Max(layout => layout?.StackTraceUsage ?? StackTraceUsage.None);`
Is this test no longer relevant now that the iframe has a title?
unnecessary spacing detected.
These aren't used in this file.
This is not the same, `str` should work fine here

I would change `Double.MAX_VALUE` into a `const` at the top of the file (i.e., `Constants.DEFAULT_MAX_WIDTH`)
This function is not necessary now.
I don't know how to fix this, but should we be importing `aggregate` from `datatable.lib`?
`container` is already defined above, no need to duplicate it. Also the error message can be more descriptive, like `Failed to cleanup resource` and `Resource` to be clear it failed
this is not needed?
Should we remove this if we're not using it anywhere?
This isn't really a filter anymore
Should probably be `->getSingleResult()`
Can you add this to `config/index.php`?
This function should be deprecated in the near future.
Why are all those const const in `common_test.go` ?
This file should be removed, since it's not being used anywhere.
This doesn't seem to be used, so this could be removed.

I don't think this needs to be in the default. It should be added to the provider spec and the provider will be picked up automatically from the config, if you add it here.
This looks to be a copy-paste from the `forEach` block in the original implementation.
This should be configurable, right?
I would prefer to see this query moved into the `IntervalQueryBuilder` since it is used in a couple other places.
Metrics/LineLength: Line is too long. [122/120]
Why does the kubelet use `kubernetes.io/os` instead of `kubernetes.io/os-release` ?
This was needed because it's a pointer type, so we need a selector.
context == nil ?
This should be `execute_command` or similar so that it will return a string.
Can you explain this change?
Can we call this `--module-path` so it's clearer what's happening in the CLI?
I guess we need to update the docs with this new field (also in the ELB.md)
I think this can be an integer?
Can we remove this as well?
This was actually a bug, we're now storing the checksum address directly.
Not sure about this change.
This doesn't look right.
We can remove this if we want. It's no longer optional.
Do we need this line?
Shouldn't this be replaced by `XKeysymToString()` in xlib?
Expected 1 space after IF keyword; 0 found Expected "if (...) {\n"; found "if(...) {\n"
Why do you need this?
Is it correct to use "sd" for sda1 devices? It should match the root devices?

Should this be a `XStrLenField` instead?
@rshriram @rshriram @liggitt @rshriram I have updated the config schema to include the start and stop time, but do we still need these two?
This class does not seem to be necessary anymore, since `windowText` is already available.
Why are the changes to the engine file needed?
Can this also be converted to an `int`.
I think this is actually a warning, since we don't want to ignore this.
Nit: `for (const auto & [...] : parser_.included_files_)`
This is the actual fix.
this was a bug in the old code
Should we mention the default is set to False?
Why this change? This function seems very specific to `cmds.Server`. It would be best to not use it here.
Layout/IndentHash: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
We should be able to remove all the mlflow dependencies here
The description needs updating.
I am not a big fan of this naming convention. I would suggest `execution_plan.intermediates_manager`. I think it will be confusing when reading `intermediates.py`. Maybe `intermediates.py` is more descriptive or something.
Should this be a ValueError?
I'm wondering if we should keep these around until we have a more clear way of doing things.
It might make sense to use the `retry.WithBackoff` method from `retry.go`.
nit: can we make this a constant? I find it a bit confusing to read
I wonder if this test is actually needed, since Dns.GetHostName() is only called internally, but I don't have a strong argument on it.
I think it might be better to change this so that it is more clear to read what it's doing here. It also seems like we are missing a test for this.
Why the whitespace?
`Security.Instance.DdlibWafVersion ?? "(none)"` -> `DdLibWafVersion?.ToString()`
I am curious if we need this?
`# If running from source`?
This is the reason why the link was incorrect
This is not correct. You want the number of minutes remaining in a range, so you should not print the value that it's in the range.
This is the only case where we would need to pass the new parameter in, right?
I'm not familiar with the ruby syntax, so I'm not clear why this is changing
We should check the error here and return an error if it is not nil?
Why do we need this sleep?
Can we log which version of metastore we are downgrading from V2 to V3?
This should be v0 as that's only a migration script so it needs to be updated in 1.7.0
We can remove this now.
nit: imports are not sorted
Why did you choose `Analytics` as the name? The module name doesn't really match `Analytics`.
This is not a typo.
This isn't needed, the host factory will work as a callback on host creation.
I'm not sure what `goForwardInTime` and `goBackInTime` are, but maybe `goForward` would be more consistent with the naming in the codebase?
`setLanguage` is not defined.
this change is required to make the tests pass
I don't think there is an issue for `Update` to be fixed here.
'accepted_when'     => 'Dette feltet må aksepteres når μσληη ιαποηαφλεπεηντντλτεν μσνηηποετεοηηηηηης νρς Çη�
This file should be reverted.
This test was missing for CoreCLR
This function name is a bit too generic for the API. Maybe `instr_is_scatter_instr` and `instr_is_gather_instr` would be better?
This can be replaced with `@options['HOSTS'][name]['pe_ver'] = @options['HOSTS'][name]['pe_ver'] || Beaker::Options::PEVersionScraper.load_pe_version(@options[:pe_dir], @options[:pe_version_file_win])`
Why are we creating the summaryProductFragment in the first place and not here?
I don't think this is necessary since the fields are already present in `Instance`
I think this might be the most important part (the `host.is_pe?` check) that needs to be done before the `#try` is executed since there is no puppet log
Shouldn't this `dal::detail::int64_t` be replaced with a `size_t`?
Is this used?
I think it's a bit weird to pass a `AddTxResult` into the interface when we know the type (I don't know how to handle `Transaction`).
this line should be outside the loop
why this change?
I'm not sure if `Install` is the right name here.
Why do we have both `hiveutil` and `hiveutilCreatedLabel` here?
I don't think you need the `# :nocov:` here.
I would add the snippet description to make it clear in the docs that this file can be used with a `s3.s3_ruby_bucket_cors.rb` file.
I don't think this line is necessary. The `obsoleteIndexes` map is always empty.
I think it might make sense to use `User.find_by!(email: current_user.email_address)` here instead of `current_user.email_address`. It doesn't make much of a difference, but it's a more common convention to use `User.find_by!`.
Is there a test that verifies this?
I wonder if we should change this to `ReSharper disable once ConditionIsAlwaysTrueOrFalse`
This should probably be moved to the very top of the file.
I think we should make the path path part of this path.
You can remove this example since the stub string is always empty.
This should be moved to the `policy_rule.go` file
This should be added to the list of allowed functions.
@wedamija Can you confirm if you need to update `active_execution.is_complete` to `False` in `handle_event` ?
can you also update the doc string?
Is this change related to the PR?
I think we should keep the `map` directive here and make it a separate map directive.
I'm not sure if this one should be removed or not (it was only there originally).
nit: This is a little odd, we can't compare the output of the loop body here if the loop body was not the same as the output of the sample limit. We can't have joinSrc or joinDst, but we don't have any other cases where loopBody is the same as getDst
Nitpicky, but we could use `FLAGS_meta_client_retry_total` here.
This line is too long and causes an error on Python 3.
Can you create a tracking issue to address this?
I would rename `CseRestTemplate` to something else, like `CseWebTemplate` or `CseRestTemplateWithCseServiceName`, just to make it clearer what it does.
Can you add a `strings.HasPrefix` check for the region here?
Can you make sure that these imports are ordered lexicographically.
why not just use the same model as `_base_`?
I think `currLimit` is too broad to expose a method that returns the current value as the limit.
Can you add a note here in the docs to explain what happens if an override of `::RSpec::Core::Pending#skip` is used? Also, I guess `RSPEC_SKIP_IMPLEMENTATION.constantize` would be better to not have to repeat this, but instead do `RSPEC_SKIP_IMPLEMENTATION.instance_method(:skip)` and then use that method. The same applies for `RSpec::Core::Pending` below as well.
I think that we should be more careful with how we handle the different cases in `Spec` and `Spec.Spec.Spec.Instances`. `Spec.Spec.Instances` will contain the list of instances (in the form of a `map[string]int64`), while `Spec.Spec.Spec.Instances` will contain multiple instances, and this is an implementation detail, so we should either add an error message here (to tell the user that `spec.Spec.Instances` will contain only one instance) or we should add an error message here that says "one or more podnetworkchaos instances
`winVersion` is already in `codecs`
I'm wondering if we should log this as a warning in the event that the name cannot be parsed
We should use an `enum` here.
Why is there a no-op here?
Why do we have two forms?
this is not correct. The error has the following message: Failed because: Failed because ${err.message}. I think the problem is that in the past when the error was thrown we wouldn't have noticed all the times
nice that we have some other tests with this logic, but forgot to change it
I think this package should be renamed to something like `spire_backoff`.
I'm not convinced that this is the correct place for this header.
I would rather have this in a separate `if err := ...; err != nil {}` block. The code below is a bit confusing because it is a loop and the `if err != nil` block is not.
Can we make this static ?
I'm confused by this change. It seems unrelated to the patch, but the issue you linked in this PR is a "bug" that you have not found. I'm confused by the fix. Why did this not happen?
We try to avoid wildcard imports. Please use `javax.ws.rs.core.Response` instead.
This seems redundant since there's a `for (MethodConfigProto methodConfigProto : interfaceConfigProto.getMethodsList())` above.
We need to add a `fmt.Fprintln(os.Stderr, "")`.
I think it is a bit strange to change this name. We do not want to change it for some reason.
Should these be `setup_env_variables`?
Shouldn't this be just the first 8-byte?
We need to add a check for the user being logged in?
I don't think that we should have any `onConfigurationChanged` implementation in `AbstractConfigurationChangeListener`

this is going to be hard-coded to 0.12.4, right? we could do something like this. I'd just make it 0.13.4 if that's the only reason.
I'd prefer to avoid the double-quotes here but I think that would make it easier.
I know we don't do it in the v1beta1 API, but would this be a breaking change?
why is this needed? this is the average latency per worker thread, isn't it?
This should be `this.txs[t]._getHash(true)`
I think this is the wrong fix. If `Height == 0`, the genesis block should not be valid.
Can you also add some description about how this interface is used?
Should this be a map? Or just a map?
This should be a separate partial since this one should only happen in one place.
Isn't `list` also an instance of `PacketList`?
I would make it clearer that it is a type of job init and not a type of schedule init.
Please revert, since this function is not used
`setWindowState()` already calls `showNormal`. Why the extra member `setWindowState()`?
Is this really necessary? It looks like the `browser` parameter is always truthy.
I don't understand the need for this cast (since you are not testing the result of a call). The point of the test is to test the result, so if the result is the same, it's not equal to the value you expect in this test. I think you can just use `std::make_pair`?
I don't understand this TODO. Can you explain?
is this change related ? If so please split.
Is this supposed to be a link tag or a link in this case?
I think the logic here should be: if ((result == VK_SUCCESS || result == VK_INCOMPLETE) && pProperties) { This is because if the physical device is not ready, the result would be VK_SUCCESS and we don't want to create an object for it.
I think you should use `dockerEngineStatus`
Should this be `255` and then `255` to be more precise?
This is a very expensive operation on every buffer. I would prefer to see it in a separate function (or a new method).
act_cfg is not used here?
I think `unless` is a bit more readable here, because if `not` evaluates to false it means "not set".
Why include this here?
Why not just compare the attribute name?
Is `rowIndexMapper` a global concept and should not be shared in `_hot`'s constructor? Maybe we can create a new method called `RowIndexMapper` that returns a `RowIndexMapper` (or `IndexMapper`) that has both `isHidden` and `runHooks`?
`shadowSupport` isn't being used in this test.
This could be in a model, since the method is called `account_labels`.
This is a nit, but I'm not sure why `min_x`, `min_y` and `min_distance` are initialized to `0`, so if they're not used here the initializations are useless.
I'd suggest moving this check to the `sendErr` function, because we have the same check for `n == 0` and `maxp > 0`, so this can just be `if o.maxp > 0 && batchSize == o.maxp`.
This is fine to change but I'm curious why you made this change. Was this causing problems?
Extra empty line detected at block body end.
It's not obvious why this was renamed, but this seems a bit weird. I think the original name was correct.
Should we change the example name as well?
can we name this something less ambiguous? e.g. egressConfigForMasquerade
I think the hash should be removed here as well.
I'm pretty sure the error should be displayed as it is the case.
Should we have tests that do not require IPv4 clusters anymore (or are they no longer run?)
this can probably be a switch.
This was the only link, so I removed it, and just added it to the title of the template
I think this will be better as err != nil || errTLFJournalDisabled
Is 750 a magic value? Is there a specific value that is configurable?
nit: I don't think you need `(base != null && base.file() != null)`
I think this can be more descriptive. `collect_mlvl_tensor_all` or similar
This is a really minor point of coverage, I'm not sure how many people would expect in a method to use. I would suggest removing the test and testing that the return value of __a is None, or making the test more robust and that we know that `__a` is `None`
This parameter is unused and should not be in the docstring.
I think we can get rid of `num_answered_questions` altogether.
Is there a reason for this to be in a form and the submit form? Could we move the submit button inside the form to keep things cleaner?
This is a breaking change for people implementing the old API and now we have to keep an eye on it, since the client doesn't have the ability to use the old API.
Don't use static imports. You can use the specific import class in your IDE settings.
Why is this in the handler and not in `/git-cli` itself ?
I don't think we need that here, we can get by kind and name
You should probably cast to `array` here and below instead.
I'm not sure how much work we should do about stacking in runtime, this is a pretty simple stub.
I wonder if it'd be better to have an interface for this as well?
Dont change imports.
should not make this public.
This check is unnecessary

I think this was unused
This should be 0.5. I don't know how I feel about this.
I think I should change the name of this test as well...
I don't get this.
Why is this removed?
We could just set the value to the default if it's blank? I think that's the most common use case.
This is still in the log.
This should probably be a `reject` so it doesn't throw an exception if any of the filter options are not included.
I am a bit worried about this. What if there is a situation where the user tries to access the `favs` map and tries to delete an invalid fav? Will the user have some sort of `opsCantHandleFavorite = nil`, but they're still in favorites?
I think this was int32 in case of `int32_t`. It was not a typo but it was not changed in the commit, right?
Isn't it better to use the same logic as before for 304?
I think we should not have this. The API should return `nil` instead.
I think we should be able to drop this.
This is an API change that is not needed, right?
Should we use the term `bytes` here?
Can you add this as well to the `GaugeMetric` enum instead of relying on `IGaugeMetric` to do it?
I think you should check if fd is open first.
Why would you have to do this?
I'm not sure why this needs to be done in `runLater`...
We can add it to the docs for more details.
those are not thread safe, you need to synchronize them
This is an unrelated change, but I'm a bit worried about the side effects of this PR. I'm wondering if we should move some of the time related logic into a helper function somewhere in `common.py` that is only called once.
Please add a `@since` tag and a `@see` here.
This is not a module, so the module nameMapper should not be necessary.
Should the error be logged instead of ignored?
I know you didn't add this, but we have a few unused imports here.
@kasobol-msft I think we should not do anything with `Metric` here
Is this a standard way of checking for this? I'm guessing it should work.
Please use braces on a single line.
This could be a method with a better name. It doesn't do anything useful except updating the user model, but it's just something to avoid.
This is just a cleanup, it was moved to its own file and is a functional change.
Why not 0? If it's not needed any more, please use a define.
I'd prefer this to be something like `TABLE_PATTERN_TABLE` and we could add more specific fields (i.e. the table name or the filename)
Why was this removed?
I'm thinking this should be moved to the `.Internal.Http` namespace
The name of this method is a bit too generic to be used in this area. Maybe you can rename it to something like "EventControllerLOot"?
This is where it would be helpful. You don't want any other way to pass in accounts, it's going to slow things down.
Should we make the method more descriptive? `allowed_sloc_sets` maybe?
Is it possible to make this `table` package a part of the `flux` API?
Why is the `true` here?
Should the `deleteFile()` method be part of `createDefaultRealmFiles`?
I'm not sure why you moved this block? The other `if`s are also inside the `if`.
I think the name of this property is too generic, as the implementation does not distinguish between a message not accepted or not accepted. It would make more sense for the method to be called "is_message_accepted" or something.
Why is this not using the `EntityManagerInterface`?
I think we need to add these to `AzureSdkDiagnosticListener` as well.
We can remove this line, since it is now handled by `SwaggerUtils.addDefinitions`
nit: this could just be the boolean value, i.e. `c.state.Config.Remote.VerifyOutputs == false || isTest`
Why is this not a pointer and `Status` is a pointer?
I don't think we need this lock
`random` does not have a seed so we can use `self.random_id`
`mapState` doesn't need to be called here because it is the one which is called by mapState.
Why not make this a slice?
Can we move this logic into getDockerAuthdata?
Should we have a default here? I would expect that the default would just be null.
This is a good check. Do you think we should make it more robust to the user that type is `regex`?
Why is this necessary?
I believe we don't need a separate path, we can use the secret's authPath instead.
`self.collapse(True)` needs to be inside the `try` block
I think it's best to keep this separate config.
I don't believe we want to do this here. We want to find the binary in the `~` directory, not the `/` directory.
I think that in general this should only be called on table creation time, not every time. This is an implementation detail. The `LocationProvider` is a member of `Table`. So, the caller should just pass the `table.locationProvider()`.
Is this log message useful for debugging?
This import is not required
Do we want this to throw if this throws? I think it's a potential problem. The only time this throws will be if _tracesEndpoint was not provided.
We can't remove this
I think this should be called `QUORUM_THREADS`. I know it's a list of RPC APIs, but it seems odd to have `QUORUM` be upper case when there is only one endpoint.
`checkCoinbase` -> `checkCoinbase` (I'm not sure what is going on here)
I think the factory.WorkingSet and StateManager are no longer needed
I think you should remove the `KOKKOS_TOOLS_INDEPENDENT_BUILD` code.
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
nit: remove empty line
Should there be a test for this?
Why is this change needed?
I think it would be better to have this as a `Kernel` call, because this is a subclass of the `Kernel.warn` method
Can we move this to its own package, since it's used in both `message_pool.go` & `message_pool.go` too?
I don't think returning a body is appropriate here.
This field is only referenced in the constructor.
This is not used anywhere?
This should really be `de.danoeh.antennapod.core.glide.FastBlurTransformation`, as that's where the "id" comes from (and it's a unique identifier).
This will be removed
This test was failing in my local machine.
This breaks backward compatibility. Can you add it to the end?
Should be || true
Why is it global? Why not just using this?
It is better to avoid the dependency on axe.commons.dom.
Nit: missing a comma here.
Please change the type name to `FullCertChain`.
I would put this below `DATEF` as well, as there are already constants in this module.
why return nil, err here? it's not nil
Why not just panic here?
nit: I would move these to `common` or something similar. They're not related to any of this stuff.
Is this used?
Why do we skip this for simd_skip but not for regs_skip?
I don't think you need to add these imports.
This should be removed, right?
I am confused why these are needed
Why not just `if wxLang and not locale.IsAvailable(wxLang.Language)`? The other case here is `wxLang`.
This feels very hacky and could break if you don't have a default class defined. Can we just skip the send if it's nil and just use `class` and `attr_writer :klass`?
We might want to use a more specific name instead of a `KEY`. `chromeOptions` is very generic and we don't have any other options, so it could be used in other places too.
Should these have a more meaningful name? `load_from_yaml` ? (or just `load_from_yaml`, I don't know what this means)
Is this the right value for backend service? Should it be backend or backend_id?
This should be a `ManifestContentException`.
This looks like it will result in a `NoMethodError` if `contact_us_url` is not set in `contact.rb`.
I'd prefer to keep the `create_and_continue` word for consistency.
This is unused, can we remove it?
Is this a bug fix?
I think it's better to move the impl_ into the header and have it call the parent method. The DataWriter has nothing to do with the metadata.
I think we need to update `getDocFilePath` function as well, and `getDocFilePath` to take the `doc` string.
This seems like a breaking change to me, since there aren't any users of this field yet. Are there users of this field that would want to use this field?
Should be `span.name`, since that's what the service name is and resource name is for each.
Do we really need to set this environment variable? I think it should always be in `GOOGLE_APPLICATION_CREDENTIALS`
This looks wrong to me, I think it should be `dtype=self._random.dtype`
It will fail if receive_buffer.size () < 8
Can you remove these print statements?
Use the new Ruby 1.9 hash syntax.
I'd prefer to not have such change.
File is not `goimports`-ed (from `goimports`)
I am curious about the reasoning, why are these fields being deleted here?
Do we need to make this a boolean? Seems like it'd make sense to always download the file, even if it's the default.
I don't think this is required.
It's a `Dataset`, but not a `Dataverse`
This should be the constructor of the class, not the parameter
I think we should keep this as `insight`
This is the only place `@round_count` is used in this file. Could the method be deleted and replaced by `@round_count.zero?`?
Please fix the docstring too (see Travis report).
Why this change?
The `<=>` here is not right.
This doesn't work as intended. You should use `author=` and `author_email=`, not `maintainer=`.
Why this changes?
Why not compare directly with `ia`?
We don't need to have the `CachingCatalog` as a separate class. Just make a static method in `CachingCatalog` and call it from here.
What is this change doing?
I think this should be reverted, and the aggregator can also be removed from the list
This was an existing issue, but I think we could make it more specific to the `NotLogFakeHttpExceptions` component?
Isn't `ResourceType` the same as `JsonType`? Is it possible to set both?
I'm guessing this is the only place this is used
Is this really needed?
I think the `resource_name` should be a `resource_id` in this case
Shouldn't this be `scale * sx / sy`?
This is a little odd to read. Why do you use an `msid` for recording vs `artist_msid` for artist vs recording?
Why +1? This is wrong and I can not see any problem.
This needs to be in the `pb` directory.
Why is this change needed?
This should go away now
Why not raise a RuntimeError?
We should check the bucket name is not "" and fail gracefully if it's not specified.
Is this going to result in the time being too low if we don't have a good way to know the current time?
I am not sure why the shoots have a fatal message and a dodge message...
The `with_nms` should probably be renamed to something like `nms_only_for_paa`. I think it might make more sense for the user to just make the error message say "PAA does not support test-time augmentation". But I don't think this is a great message here...
I'm not sure this is the right place to put this. If someone is using these plugins in their code (and they already have the plugin in their config), they will be importing this module from `bibdocfile` which is confusing.
Should we also update the `content-pages` service report to include `content-drilldown`?

Should this have defaulted to `true` or should it be `false` by default?
Why do we need to use the pointer here?
Why do we need both of these? The only reason `duplicateManifests` doesn't work is for the `ConfigMaps` to be duplicated, but the `Secret` is already in there. Why wouldn't a `ConfigMaps` also be duplicated? Also, why do we need to duplicate the `ConfigMaps`? Can't we just use the `ConfigMaps`?
Why do you move this docblock?
This should be `final`
nit: remove empty line
We have the same logic in the `filesToIgnore` package, can you refactor that to avoid code duplication?
Should `apply_prep` also be moved out of `@context` to avoid exposing this method publicly?

This is going to be a flaky test. Please use `self.assertRaises` to make sure the behavior is what was intended.
I wonder if we can make this part of the interface, it's really only used in the test code, and this will simplify all these checks.
`for` loops are generally discouraged in C++. You should use `for (Outfit const& outfit : outfits)` instead
can you make this a function and reuse in all the tests?
This looks wrong. `self._size` should be `len(self.best)`
This is also a breaking change. I suggest you keep it in the schema and add an update note.
This seems like a regression to me, so it should be safe to drop.
We don't need this if we are not doing any buckets, right?
Line is too long. [85/80]
This is not right. This can just be `/usr/local/ghc/#{ghc_version}/bin/:$PATH` and then the `.env` should be enough.
@jorgefilipecosta - I don't think we want to change this icon for Android?
We need to change `head(FCOSHead.fit, FCOSHead.model_init_args)` and `head(FCOSHead.fit_params, FCOSHead.model_init_kwargs)` in `fit_raw.py` to be able to set the default values for `center_sampling`. Also, please use double quotes around the `=`, it should be double quotes for Python.
Can we rename this to `GenerateServerX509UsingCAAndSerialNumber`
This is a breaking change, right? Can you provide an explicit description?
I think this test should be refactored.
why disable coverage here?
I think it is better to check for concrete types before calling `setValue`

I'd use `s/^` here and remove the `\`, it's not necessary.
why do we need this header?
Why do we ignore duration?
This is a behavior change, but it was already returned by `ReadFrom`. It's safe to delete this, since we don't expect the `err` to have been modified since the last `ReadFrom` call.
Why is the lock arrays being initialized here? Isn't it better to call init_lock_arrays in the first `desul::Impl::init_lock_arrays()` call?
We could use `$this->isRedispatchImport($command->getId(), $attributesToRedispatch)` to avoid duplicating the code
This test is the opposite of the one above (it's testing CA, and CA certificate as well). It should be testing the issuing controller as well.
I think it should be set to zero as it will default to 30s now
This is a bit of a nitpick, but can we move this block to `else` above, and then just use `js_elem` in the `if tab` block below?
Can we rename this variable?
I think we don't need to have `decode` here, the URL is already bytes
I don't think we should be doing this unless the method is implemented, otherwise it would be a breaking change.
Why are you changing this ?
I would suggest that you add more parameters to this constructor.
This check should go to `xfpga_parse_adapter()` instead.
`$this->prefixWithNamespace('q')` returns `q:q` now
This could potentially return an empty EVMAccount if the account doesn't exist. Maybe a default implementation would be better.
We should just keep this.
We can do without this.
Is the modification date field required? I think the reasoning behind this is that we might want to fetch the whole object even if the modification date is null.
Can you change this to `translate`? It's a single string.
Why is this being changed?
Why not just `approved?`?
I think we should add a new `aws_credential.h` to this directory and make sure the changes in this file are applied.
Is this a typo or a bug?
We need to move this into `set` package to keep it in sync.
`import typing` and also `import typing.Type`?
This should be "Storage location"
I think it would be better to call it 'recaptcha' and remove the 'uc'.
why change this ?
`final` is redundant.


Is there a reason we can't use `select_one` here ?
We should use the existing constant for index names here.
I think this is just an implementation detail that is already implemented in the `User` model
Do you need this here?
I think we should not use the URLEncode API here
Please do not add a dependency to this. It's a core module.
Why is the await in the middle of the while loop unnecessary here?
This should probably be backend.get('resourceGroup', group) to keep backwards compatibility
I think you can delete this class, since you are using the Parser class directly.
I'd remove the 'Purchaseable plan'.
Maybe it's better to move this condition to `count_subnetwork_connections`?
I guess we could use `g_option_context_new` here.
Does this need to be public?
The `type1.getType()` can be a `java.lang.Enum<T>` and thus we need to handle the case when the type is not a `Class<T>` (e. g. `java.lang.Enum<T>`)
This needs to be an `abstractmethod`
This is a bit of a bummer to do this when the component is rendered. It could also cause a regression if it's being rendered twice. We can add a flag to the element to prevent this from happening again.
Why does it matter that we are using 1 block here?
I don't see this being set anywhere in this function?
`append` -> `prepend`, I think it's fine to use the same name for the method.
We might want this be a list of volumes.
I think I would prefer if we don't use UTF-8 for any HTML content. This is mostly just a matter of style and style attributes, but we can still add it to the html header if needed.
This doesn't look right, why not make it consistently?
Should we call `span.SetTag()` here to make sure we don't accidentally change the value for this span?
Do we need the `FrameworkDescription`?
This is a duplicate case. Can you move it down to be under `/vcloud/`?
Why does this get logged as fine? Shouldn't it be INFO?
I think we might need a way to get here from the `observation.user` rather than relying on the fact that `current_user` is the same as `observation.user`, so this wouldn't need to change.
`AND item_view.is_suppressed = false` is not necessary
nit: the error msg should include the service name and response name.
@kapilt Is this the correct way to set an HTTP protocol? Is it something that we could do in the SDK?
This method isn't necessary, we can just use `getStreamingApiMethodName`
Nit: I would prefer `PruneOnPrune`, and rename the bool method to `PruneOnPrune`.
Why not use "PRAGMA ...".
Shouldn't we also check for the `ctxUser` being non-nil? If that's not the case, should we just do `ctxUser.DisplayName() + " " + ctx.Tr("dashboard")`?
Should the file be deleted?
I think that the code will need tests to validate the new code path.
I think this is the default, should this be removed?
`Required, unless dateRange is provided.`
This is wrong. You should only clear the map when you've set a new value (and not when you just clear it).
Why not just remove this line?
Please remove these printlns.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
this is the wrong fix, right?
this test will fail when the ID of a workflow is different than the parent workflow's run id in the workflow request. Is that ok?
@jlsherrill @mhvk - I think this is not the right place, this will show up on the dashboard and not on the dashboard. This route is only needed to show the account, not the current user.
I think this will break the backward compatibility with the old clients.
I don't think this is actually used? It looks like it's just used for the queue size.
I don't quite understand this, it looks like it will always be in the `modulepath`.
This is fine. I will remove this in the next PR.
@JeremyKuhne can you please review this one
I think you can remove this `_ =` as it is not used in the `handleErr` method
`int` cast is necessary for `multi_scores`, as `int` is not defined on the type.
This is the main fix. This is the only place we're changing the behavior of the API to return nil instead of an error.
This was actually never true because `plan.title` would now be empty.
This doesn't need to be changed, we should use the new environment registry URL
Why is target here?
@caitp I've added `actualNode.type === 'text'` here to check, which is a bit of a hack but not a fix in a different PR.
This is not a big endian bug, because it's a binary-endian binary encoding.
I am not sure whether there is a good way to delete index files in this case, but I can't think of another way. So, let's try this with `.AddIndex`
I'd call this `defaultBundleClient`. It makes it very clear that we are doing a "client" in the context of a bundle.
This check should be moved to `addColumns`?
Should probably add the `-f` option to be able to override it.
nit: I know this isn't part of your change, but is it possible to use a different type instead of having the pointer here?
I think we should return a `unicode(obj)` here, otherwise it will be confusing to the user when the object is written in text.
I think it will be good to have `current_user.login.capitalize` as well for future devs
Isn't this timeout longer now? Or am i reading this wrong?
@dannyroberts this should have been a plain `collection`, it was not working before.
Is this supposed to be `quic` or `unix`?
Can't this just be removed?
What's the difference between `pwd` and `/`? I don't know, just curious. I guess `pwd` should be relative to `/` in both cases and not `/` in both cases?
Should we allow `null` for keyFilePath?
nit: `MetricsConfig.forTable(Table table)` is sufficient
I don't think this needs a license header.
`GenerateRandomBytes` is not a common method, but rather a random number generator, so I wouldn't bother with it.
I'd prefer if this line stayed as is. This is the only one with an obvious reason to change the title.
Isn't the `static` modifier needed in this file?
I think `ioa_thr` isn't used in the new code so I removed it from the signature.
Is this only ever true during a normal cluster?
Should be `<%= t 'header.footer' %>`
Can we move this to a protected method, since it's repeated?
This is not needed as we are not using the `JavaSputnikTest` directly.
Is this really needed?
Why not just use `Collections.unmodifiableList(allowedExtensions)` here?
I think we want to remove this from the public API for now.
The `not-localhost` should not have any value
should we make 'brave' a const?
I guess we should not do this in the default case and just use envStore.CreateEnvironment. It will only create a single environment in the default case.
Is it worth adding the flag to `VM_DELAY_READONLY`?
can we log the module here and in the log ?
This is the only test that's failing. We should make these tests for the other tests too.
@hughbe I think you can remove this line too.
Please add your copyright header here
What is this for? I don't see it being used anywhere in this patch.
I think this is incorrect. This method will return false if the Node's max session limit is exceeded, but there is no active slot.
I'm not sure this should be a `string`. The `Type` is an interface, and there are two ways to represent a path type that I would expect to be `string`.
This function is only used once, I think it should be in `notification_for_approver` instead.
This variable is not used
I think this is a behavior change. If `morphSep == 0` we should not write anything (the line is empty). We should return `0` in that case, as the first character in the line will be written. This is to prevent writing a line with no morphs.
Nit: `const Type& type`
Why are we adding this extra parameter to the public method? I don't see any reason to do that.
`RSpec.configuration.deprecation_io` wouldn't be a thing. I'm not sure if there's a good way to do this without having to call `RSpec.configuration.deprecation_io.puts` every time.
This is a pretty big file so I'd prefer this to be in `scripts/phusion-passenger`, since it's specific to the phusion passenger.
What is the reason for adding `label='name'` as a default dimension value?
@deads2k I think we want to do the same here. The CSI driver is not aware of a Pure Volume, as far as I understand it. If the CSI driver is aware of a Pure Volume, then the CSI driver should not be aware of the Pure Volume.
nit: missing copyright
I would suggest a test that passes even if there are no arguments and a trace with a message.
This error message is confusing since as_index has the same type as the input. I suggest to say `as_index must be either True or False; however, got [%s]`
Please add return type
I think this should be a property on the plugin rather than a static variable since it's not a plugin instance
We need to be careful not to trim the login URL. If a URL has a trailing `/` or `?`, the result will be `localhost:8000` but `localhost:8000` does not contain the `/` in the url string.
This log message is not accurate. The route is ignored and no destinations will be created. This log should be at least at the info level. Also, if destination is nil, this log is not useful, and it should be at info level. Otherwise it might be a good time to include a message explaining that the route doesn't contain a destination.
Can you put all of these on `default.d.ts`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Is there a way to get the stats from a cluster? I can't see that we would ever want to show a number for each of the calls.
nit: should the order match the order of the parameters?
Can we just set this to null if it's null?
This is a bit confusing to follow, why not just `axe.on('memoized')`? And then you don't need `forEach` at all...
I think this would be more robust if you tested the `child.nil? ` case too?
can we add the reason here?
We should also check if the file exists. I think this file might be a problem if the files are already empty.
This should be a member, not a local, as this is the only place it is used and it doesn't have to be changed. The rest can be refactored in a way that it's more readable (and also avoids confusion).
`this.blur()` is a little bit generic. Maybe `this.focus()` is more appropriate?
Why is blackhole treated as an opaque interface? If the interface is an opaque one, why does it have to be blackholeable?
I don't understand why `stripped` is not set here.
This method doesn't appear to be used?
Is this change required?
`modify.cpp` includes fmt and format. We shouldn't need to include `fmt/format.h`.
nit: this import block should be grouped with the other third-party imports.
Is there any reason why this isn't a `FolderBranchOps` instead?
I don't think we need this.
Why do you remove these?
Can we add the stacktrace of the `e` as well?
I would like for this test case to test the new behaviour rather than just a success case.
We should update the interface description to mention that the `services` parameter is an array
This test case seems to be unrelated to the PR itself; why was it removed?
Can we also add `os: not implemented` to the `ErrUnsupported` error below?
I think you can get rid of this check since `axeFunction.toString` returns the window object.
Should be `bitcore.unit`
Is this the same in all the files?
Why is this change needed?
Shouldn't this be `!_this.getValue(path)`?
I think we can move these lines to line 332. Then we can remove the `isFocusable` var and `tabIndex = ...` above.
I'm not a big fan of adding this, but I don't have a good solution right now.
The default value of this method is `null` for a test, so this change should be reverted.
Please also change the default to false
I think it's fine to call this `updateSchemaNameMapping` instead as this is an internal method for a particular table.
This should be waitOnOne()
@liggitt is this a reasonable thing to do in runtime package?
This is the main change that fixes the issue. `Array.Reverse` is used to ensure an array is always sorted, but I think it is not the case if a user wants to sort an array and use a different order to use the array for the reverse case?
I'm not sure about this, I think this is a behavior regression, right?
@mjkkirschner I removed `else` here.
I am wondering how we can get to `lru-cache` this list. I don't see anything in `lru_cache` that uses this class
I don't think the callerTypeAPI is needed here.
I think this method and the one below could be moved to the `test_helper` module?
I think this should be larger than the number of concurrent transactions to avoid any memory corruption
I don't think it's necessary to add this method here as it is only used by the `TableUtils` and not for `CatalogUtil` or `HiveMetastore`.
I'm a bit confused how this works?
`Logic` isn't a HashID, it's an interface, not an interface
We need a more explicit name for the class. `BaseTestCase` is not very descriptive.
I don't think the `&=` is necessary...
This is an actual bug, as `dynamic_value` will be set to `eNoDynamicValues` in the case we have `Some`
can we remove this line?

I wonder if this is worth the effort.
We need this to be an index, and we need to have a value of `-1` if we can't find `-1`.
This isn't used.
I think there is no need to change this line. If we change the generator, the old version will still pass.
This can be moved to the `try` block above.
Can snapshot be null if it's a table created without snapshot ID? If not, we need a test for this.
This class does not have any additional tests in it.
What happens when the hash contains `disable`s? Does it not work for them?
why not just make the test work?
`handleDataError` has been removed, is that intended?
I think you can drop the `&lbann::finalize` here.
Space missing after comma.
This is the first part of the change.
Is this related to this fix or just a cleanup?
This change makes sense to me. What's the reason for this change?
Is there a test for this? Can we make it a separate function?
String message = localFolder.getMessage(uid);
We should be using `github.com/iotexproject/iotex-core/pkg/iota` to keep all the code that is used in one place
`unset` isn't allowed here. I think we need a new line at the end of the file.
I would rename this file to `commands/nodeinfo.go`
why this is changed ?
Shouldn't this be `cborStore`?
Isn't there a `file_is_tempfile` function for this?
I guess it's fine to return null?
nit: `config_.monotone_constraints[i] == 0 || config_.monotone_constraints[i] == 1)`.
I think `_downsample` should be renamed `downsample`.
This is only used to generate the `ClusterTagKey` and `ClusterTagValue` so we don't need to define this here and there.
E501 line too long (117 > 115 characters)
This import is not needed. Please remove it.
Should this be a separate commit?
Missing a `<br/>` here?
Should we check `manifest['version']` before getting the app name?
I don't think you need to include `:go` here, you can use `attr_accessor` to access it.
Should we also change this?
This needs a `logger.exception` to catch the error.
Why `~0` here? Is there value in keeping with the existing `All = 0x8000` case? If so, please move that value to the top of the struct to make sure that it's consistent with the `.Netcorecore` one.
Is there a way to make this more specific about `bbe` vs `bebin`?
Why is this changed from the `{ ... }` syntax?
Should default to false
I wonder if we can get rid of this property. We should have an implementation in the `LinuxTraceSession` class that has this property
why this alias?
Please don't add this.
Can this method be made private and reused across the class?
Can you please use a synchronized lambda here?
The error is only relevant for managed ID. So I think this is not needed. If you add another option, the error can be added to the field.
this should happen after line 1366 otherwise it could panic
Can we have a test that makes sure that this is the case?
Shouldn't we add some more here?
I wonder what happens if we don't have a tracer instance at this stage?
Shouldn't the callback here be an array of the ones you have in the `trainer`? If there is a callback to be passed in the constructor, it would be a list.
Maybe it's worth to add the new method to `ledger_store`? The only thing I can think of here is the type of the block we are looking for (if it exists in ledger).
I don't think this is the right way to go, because if there are no new packs in a data repository, we're deleting a whole bunch of them all. I'm not sure we need to do anything with the files in that repository to delete them, but we should keep the `DeleteFiles()` call out of the `DeleteFiles` as a separate method.
It's not a good idea to translate values. This is for the `email` field, which is not translated at all. Please fix it.
This looks like it should be part of the `TrieVisitor` interface rather than here.
This was an API change. It was correct to use TreeMap, not HashMap.
Why change the default timeout here?
I would put the lines of `_create_data` before `X_1, y_1, w_1, dX_1, dy_1, dw_1` to keep it consistent with the rest of the file. Also, I would put those variables in the same line.
Can you remove the `div` from the template? I think it will not be needed if you add `style`.
I think the `View` import can be removed.
This is already defined in the base package?
I think it is fine to call these stats in the event. It is not a state change, it is a stat.

Is this an expected change?
Can we make this more specific? `Unexpected error while calculating: %#v`
I think we should rename this to "packageName" (to be more consistent with the naming conventions used elsewhere)
These files don't seem to belong here.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Is there a reason why `methodName` is not nullable?
I would prefer to use the same function name as the error message, since there is no reason for an error to be logged in the caller.
This isn't the right place to add the "default" organization, since there's a group `organizations` on the server. Also, the `default` organization doesn't exist on the server, but on the server.
Should this be deleted?
Why is it enabled? I think it is disabled.
Why do you need this ?
I am not sure if we want this to be a separate function. Maybe we don't need to change the function signature at all.
Is this a change that requires a new test? Or is the existing test sufficient?
should we rename the file to be more specific like `config.go`, so we don't break the API and make the code less verbose?
@ndelangen can you please review this change? It is not clear to me why you have added it here and what it does.
@zhouyx I was trying to get rid of this. I think it's ok.
@madhavajay Can you take a look and see if there is any issue with making plan vars sorted?
We are changing the rate limiting behavior, is the reason why it was changed?
I think we need to add this logic to the `reprocess` methods in `kubelet.Controller`, not in `NetworkPolicyController.Add`, as there's also a `NetworkPolicyController` which is responsible for handling add/remove events.
It would also be nice to have a test.
This is not a safe approach. I believe the code would have the same effect but it's possible that `attributes` is `nil`, which is not the intent. We'd better handle this in a more elegant way.
I'm wondering if we should be more specific here (or at least in the `api-validator.js` file)? I guess this would be more specific to the UI, since the data stream id would be an opaque hex-encoded string. I'm thinking it's just an ID.
It looks like there's a `c.flags.set()` here, which can be removed. If it's set, the connection will be closed, but if it's set, the connection won't be closed and the flag is already set (as a result of the `--debug` flag), so the connection will not be closed.
This is a little confusing, but this is a bit confusing. I think the `reason` would be something more descriptive, such as: `speak_to_focus_change`?
@rileykumar @jim-minter @haircommander I am not sure why `3` is needed here?
I think you can drop the `- "80:80"` line and just put `{{ $port }}:{{ $port }}` directly in the string
I'm a bit confused. I don't see anything here that makes this nil if s.shardInfo is nil. But why are we setting s.state to stopping here when s.shardInfo is nil, and not before? Also, is this the right place to do this?
I don't really understand what `LastWriter` means. Does it mean what a node has, and why? What is this for and why is it necessary?
I am curious how this change will affect the state changes?
This isn't actually needed
Nit: `keys.begin(), keys.end(), [part](const auto& key) { return NebulaKeyUtils::kvKey(part, key); });`.
I would like to get this from the v1 API. This should probably only happen if the user has set the Node Name label?
I would prefer this be done in the `setTimeout`, but it doesn't really matter here.
Should this return a `[]byte` instead of string?
I'm not sure this should become unavoidable. We can't do that because of a race condition when we are waiting on the history.
Line is too long. [101/80]
Should the return type be a time.Time?
This line is too long. It should go outside the `fmt::format()` call.
I don't think this should be set here as we are not really changing the name of a proto file.
This can now probably be removed.
Can we have a single `COMMIT_STATUS_CHECK_MIN_WAIT_MS` with `MIN_TIME_MS` and `MAX_TIME_MS`?
Can we add an error here?
`User.any? { |u| u.invited_by?.name(false) }` should work
Can we get rid of this?
Let's make this `int` and remove the `max` suffix? We want this to be `int?` to match up on the other `int` values,
Is there a specific reason for this?
This name is confusing and hard to read... how about `GetPluginNameFromContext()` ?
I think this is no longer needed
I'm wondering why the `CpuWeight != 0` check is being skipped here.
Why not `set_clipboard(s)`?
Is this `print` supposed to be here? It seems strange to have two prints here.
I think we should keep the old testnet2.mysterium.network/api/v1/location here, so we can remove the old testnet2-location.mysterium.network/api/v1/location url in the future
I think we can leave these as small as possible since they don't have a very low value, but if they can't be used in the future I think we should just remove these options.
this seems a bit odd. do we need an i18n key here?
This is wrong. It should return true only on a single resource. You should only display the gathered resources, not just the raw ones.
I'm confused by this change. When is this limit reached?
I think we can use `time.Duration` and `time.Duration` to be consistent with the rest of our codebase.
This is now handled via the request interception layer.
I would add a warning message here if the `options` parameter is not defined.
Why is this not using the same `storer.Logger`? (and the same for all other instances)
This should be removed as well
This doesn't actually check whether the transaction's sender is the compact cert sender. It just checks that it is a valid transaction, so it's not a security issue.
I think this could be made an abstract base implementation instead of a class.
Is this the only change?
Shouldn't this be done at the start of the p2p service?
I'm pretty sure we have some other constant in `NetworkUtils`, can you use it?
I think you meant `innerText` here?
You should check for `nullptr` here instead.
Isn't this a line break?
Please add the copyright header.
Should we also handle `NaN` and `Infinity` here? Maybe it's worth a test for the cases that need the `isNaN` check?
Is there a reason to not expose the transport as an array rather than a slice?
nit: I wonder if `ctx.Cleanup` is needed since `NewTestCtx(t)` doesn't do anything.
this is wrong. The RequestEvent is not fired in any request, and thereis nothing that should be triggered on the RequestPostInitialize event
What are you using this constant for in the future?
This should also unlock
Is that right? We have `Supported_TypeClass` defined but not referenced.
Should be pinned_at INT not NULL
Can we open a bug for this?
@danmosemsft do you think this is the right place to fix this?
I'm not sure this is correct. In the past this was using the `AssemblyLoadContext.Default.LoadFromAssemblyPath(binaryPath)` to load a assembly and not the default one. This change will result in the load being performed twice in the same assembly.
I believe that the message is not correct. It is supposed to include both EVEX and EVEX_PLATFORM.
I guess we have a utility to make sure that `options` object isn't modified during the function invocation?
This is actually a name so it's not an int64.
I am not sure what you mean by "undispatchedFlows". I think you mean to "get flow queue processor threads state"
I think you should keep this directory as `core/`, so that we don't need the extra directory for other tests
Why not `SetTraceLogs`?
Is there no way to check it's the same as the one in `propagateDeadlineToChildren`?
I think this will need `GKE_BUILD_DIR="+path.Join("src", "test", genDir+"-", "GKE")` otherwise the `GCNO_DIR` will be overwritten on each call.
I think we can get rid of this `if (val instanceof byte[])`. `String` is already an `instanceof byte`.
I think it's better to leave the "NONE" as is since it's clear that it is not a special value.
Why do we return the url here instead of in `alertOnFailedExecutorHealthCheck `?
`mask` is a numpy array already (it's a numpy scalar), so there is no need to do the `if` check
Why is this package named address? Is there a better name for this?
I am a bit worried that this would be an API bug.
This should be removed. The default is true
This is not needed, we already have this in the parent class.
I believe the code below has `maybe_handle` as the name
Can we use the full path here?
This can be moved after the `async` keyword.
Can be removed
This should not be in conntrack table.
Could be simplified if you put this in the if (grpExpr) block as well.
Why do we have a separate class for param view model? Is the parameter view model used by both transformers in this PR?
I don't understand why we don't do the ajax request anymore, can you explain?
Please add type hinting for the parameters: `parent_frame: QWebFrame, suggested_file: str`
I don't see the point of this error. It doesn't mean anything to the user, and I think the user should just use the server node name in their cluster to get a good error out.
This is wrong - the column is the name of the first element that is being trimmed
I think we should add a `Set`. `Group` is an overloaded term for an individual group. `CloudBackup` is a more precise term for a group.
I'm not sure what this list is used for, but I'm not sure it is used.
Is this something that can be fixed in another PR?
@jonbradley Can we add a check for variable pattern as well, like `method in ["HEAD", "OPTIONS"].lower()` ?
please, remove this line.
This is probably fine for now but we should consider having an abstraction over `BlockHeight` that takes a `SampleChainRandomness` method as input. Then we can just have `BlockHeight()` take an `interface{}` as input, which will do all of the work to make a sample chain deterministic.
Can this be removed now?
nit: `tagsFilter` to be consistent with the rest of the API?
This is a breaking change, we need to bump the major version to 1.6 for 3.8+
this is a nit, but maybe we can move the logic for zkHost and solrUrl to the searcher itself?
Should be a `ClusterData`
I'm not sure why this was here.
nit: "the collector doesn't filter any documents"
This log should be moved to the `FileScanTask` interface
I wouldn't change this
Can we name this something a bit more explicit, like `max_pods_to_get_retrials`?

if you use a constant for FSM.ProposerInterval, we could just have that as a const in fsm.
We should rename local, personal to something like personal_options_file or something like that.
`adapter: connection_config[:adapter]` will do the merge, isn't it?
Why does this function need to be exported?
This partial should not have any partial (no need to render, the partial already has no partial)
Should this be a `mockgen.sh` or `mockgen.txt`?
`value.Contains(""` ?
I believe this test should have `close` called.
This will panic, no?
This can be done outside the config.MakeDiskBlockCacheIfNotExists.
Please don't change copyright years.
You can drop the `.to_string()` as you're already using `to_string` in the `to_string` call.
why are we removing roleText here? Is it to make sure we only show it for role="link"?
This is not necessary.

This is a new step, right? If so, I don't think we should wait for ajax here, because the method is called when the cart is added. It's not really necessary as we only have to wait until the cart is added
Shouldn't we also do this if there is not `logger` set?
This method does not return a bool, and does not return a track break.
I think it's better to put an if(PyMPIComm_Get) here, rather than just throwing an error. I think you can do a if (import_mpi4py() < 0)
Shouldn't this also close the gzip body?
These are added but not removed, right?
Should this be replaced with `isFunction`?
This variable is used only once, so it shouldn't have an `s`.
nit: `sizeof(SpaceId)` is redundant here.
Should we have more tests for the `RedundantSegments` case?
why do you have to return here?
This enum is unused
We could still do this, if we have multiple ROMs, one for persist dirs and one for the persist_dir and the persist_dir_bundled dirs, but it seems that one would want a different behaviour than the others.
The function signature is changed to include the VulkanQueue flags instead of a single bit in it.
This is just for debugging, right?
`buttonStyle` isn't a `required` prop.
I don't know if this is a good default. I don't think this will work for directories.
Isn't this just the same as `aURL.startsWith("resource:")`?
nit: could have just called maxSequenceNumber and then use it everywhere
I'm guessing the `int_version` column is unsigned now?
Is this constant used for anything? If not let's remove it.
This is wrong, it means if you use Windows, you'll set the transport to local
This could be private.
Is this used?
Why are we changing this?
I believe the message should be something like: `"Invalid public key provided. Please enter a valid public key."`
Why not use `axe.commons.aria.contains()` or `axe.commons.aria.has()` instead?
What happens if we have two connections with the same type but different type for different previews? I think this would result in an infinite recursion, because `localConnection` would be `null` at this point. I am wondering if it is possible to check `isSameConnection`, and if that can be done by doing `if (isSameConnection && localConnection.type == Blockly.OUTPUT_VALUE) {` instead of `if (localConnection && localConnection.type == Blockly.OUTPUT_VALUE) {` and then checking against `localConnection.type === Blockly.OUTPUT_VALUE)`?
Can we have `*[]string` here instead of *[]byte? I don't see much value in having them be pointers
Nit, we usually put `-` sign on the same line as the `-` sign.
@davidsh @pakrym this looks like an accidental change?
Is this used anywhere?
this needs to be `const char*`
`long` instead of `int`?
nit - can we use `errors.Is` here?
this seems strange... the new imports are grouped together.
Why not pass variable.id to the prompt call?
Is it possible to check this in libinput_device_config_tap_init_tap(). If this fails for the case that libinput_device is NULL, then the firmware count would be set to zero, and the caller could just call this function without any checks.
This is also a breaking change.
Why do we need `OPSZ_CACHE_LINE` ?
why this is needed?
Can we add index on this column to ensure we aren't adding any non-zero indexes?
We should use `slack.ReplyText(channel, message)` here. Also I'd suggest using a constant for `false`, e.g. `var reply = "message"`.
I think I would leave the "Returns whether the ..." part.
Do this for `PARQUET` as well, right?
I'm not sure if we want to have this in the database?
@jpechane I don't understand these settings, why are these needed?
Is this the only place where I don't understand why this check is no longer needed?
Can it be an empty list? I think you'll have to set PolicyNames to the empty string in the if statement. It should be the case.
Can this be made a `set` as well?

The default should be 0.0
I think you should be able to put this in the `Application.config` file, or it will be overwritten at runtime.
Do we still need this `ExtensionMethods` namespace?
I'm not a big fan of removing a global var. It makes it easier to see the usage in logs
I'd add the handler in `root.c` to not have a chance to register multiple status handlers if you want.
This should be a separate PR
I think this is not needed, we can just do p := bluemonday.UGCPolicy() at the top.
Is it intentional to add `timing: false` here?
Why are we adding this? It seems to be a leftover.
This was the bug - now that we're passing in the tags to the dialog, the tags should be copied into the dialog as well

This is an old name, and it does not have any semantic effect.
whats the point of these if statements?
I would prefer that we do the same here. In the future we may add more invocations, and this would become a big change.
I'm not sure this belongs here as `Tx` does not provide a receiver. If it was called before we needed it to do a transaction.
This will cause the controller to exit as a result of this command, no?
This should be in the `settings.py` as this is the one place where we need this information. I'm not really sure if it's necessary to generate the docs in `.rst` or `.rst` files?
I think this is a bug
I think we should move the whole block to `execute_task`
Why is the select channel required?
I'm not quite sure that we want to have a lock here, as this is happening in `replicateLogs()`
Who will remove this name property on a form object ? This is a BC break, I think, no ?
I wonder if we can remove this, as we will always be able to use the latest version?
These should be constants and the corresponding code in ConfigConstants.java should call these constants `CONFIG_TIMEOUT`
Why is this import needed?
Should these be global variables?
I would rename this to 'diskType'
import android.app.*;
I don't think it is necessary to create new variables for this one.
This change makes it possible to keep all the videos with the same download type and size, as we don't want the original video files to be uploaded. This is the reason the video files are uploaded as separate directories.
Why this cast needed?
I think you mean "passed the edges, respectively"
this is missing `{{.Volume.runNamespace}}`
This should have some docs about what's the value of the setting and why. Also, we should mention that this is only applied for upgraded connections which are always unlimited.
Is this cast needed, or can `data_idx` be an `int64_t`?
Should we use `$media->getContext()` when we can?
nit: I would prefer "required for ddev".
This is really bad name, because we don't have a generic "match cost" for a calculator, I'd rather not use "IOU" in a generic name. How about "build_cost"?
Shouldn't this be asserted against `self.last_response.status_code`?
This change is not needed, right?
Can we make this `context.Background()` as well?
I've removed this test because we still want to check that the password is actually correct.
Is it better to cast to (long) or (long) in the beginning (so that we don't overflow if we get an overflow)?
Would it be possible to have `blockChangeSize` be `0` if the file is merged, and `blockChangeSize` can be `0` if it is not?
This is not needed anymore with your new approach.
I'm wondering where is `**` coming from and whether it's worth keeping it or having it at all?
We should probably rename this constant to `BATCH_SIZE` to make it clear what it represents.
Shouldn't the default value be 50?
this is a very weird name... can you change it to getConfigSetService
Why are we changing the logger in this PR?
Is this intentionally `unknown` and not `unknown platform` to maintain consistency with the AWS SDK?
nit: revert this change
I'm curious what we want the table type to be. It looks like the same thing as the base class.
Can't we use the same error message and use `[1, 2]` for the 2 cases?
This is not supposed to be here.
`LOCKTIME_THRESHOLD` is defined as constant, so you shouldn't need to initialize it here. The only reason you need it is `new BN(500000000)`.
Please do not use wildcard imports in the code.
Shouldn't this have been `timeoutTypeToReason`?
Is there a reason to keep this?
@martin-e I am not sure why this changed
I'd recommend moving this to the end of the sentence.
I wonder if this should extend from `PluginBase` instead of extending directly `ProgressBar`?
I think this should go below the k8s ones in the k8s/apis
This function doesn't check if the type has a variable and returns error
I wouldn't add this sentence; it's not immediately clear that a function that is not cached is a function that returns itself.
This seems to have gotten ridiculously big in the last commit.
This is probably not needed
This line should be indented.
I don't think we need this function. It is only called once, and there's only a few lines of code.
Why not just remove these?
Shouldn't you use the `Time.current` here?
Is this safe to remove async from the signature?
I'm not familiar with the code in this PR, but I am curious what's a "deindent" in the context of the return statement?
Can't we just use num_stages to get the list, instead of doing a hasattr?
I think this is still true. If we delete the spc, the event handler won't fire.
// Close is used to close the connection
@dantleech please use the `\RuntimeException` here.
I would just do `dict(dcn=dict( ...)`
This should be `AC_DEFINE([WITH_MODERN_GRUB], 1, [Define if we have a GRUB version newer than 2.02])`
Is this going to change anything?
I like it! Just to keep this consistent across our codebase, can you also add `id: "ruby-science"` to these URLs? :grin:
Is this test failing? If so, why are you not using `expectedAssignedClaims` and `expectedUnassignedClaims`?
This is probably the reason we need this change.
Extra empty line detected at class body beginning.

why not Fatalf?
why this change?
This seems like a good candidate for a template or a helper. Also I'm thinking this could be a constant somewhere.
I'm guessing you meant to put `omitempty` here?
This should not be required if the version is in the db, right?
I think this is better as a separate log line.
This is the test case that should be deleted.
We don't need these two lines any more.
I'm not sure if this is the right approach. We should not be skipping any `Publication` fields. Instead, if we don't filter out those fields, then we have an assertion that the field in the receipt is a part of the `Publication`. The `Publication` is not actually used as a result of the `PrivateTransactionReceipt` calculation, and there should be a way to test that we are getting the `Publication`.
Is this a typo? Shouldn't it be "Editable element has been vanished"?
why remove IsSystemLog?
This could be moved outside of the condition.
Why not return an error here?
Please remove unused var
Is it really correct to use a non-null value here? Shouldn't this always return empty string?
I believe this should be translated.
This is a nice change. I guess this is the only thing that makes the `loadSession` call in this class not to call `uploadSession()`.
This is wrong. You don't want to make this change. It should be a part of a different PR.
This test should be in a different PR.
Should this be a `return fmt.Errorf()`? We can't ignore errors like this.
This line should be removed, right?
I don't like this, this should go into a separate file.
Why are you disabling this here?
Can you add this to the `FeatureConstants` class as well?
This will need a better translation string
Is there anything wrong with the BOM here?
We're going to get the report args soon, right?
Why is this gone?
We should close conn before writing to it.
Use double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
should be reverted
Is it necessary?
This should be called from the `overlay_did_update`, no?
This function does not use the default device. You can add a `device = torch.device('cpu')` here, and remove the line below.
I don't think we should call this `configStore` when we have a job name, since that's what it does for jobs
Shouldn't this be `if (Config::get('app.url', null))` ?
Should this be `cnpInformer` instead of `acnpInformer`?
I'm not sure we care but I think this was intentionally incorrect.
This is a great function! I wonder if we should have a `Close` method.
The error message is not quite accurate: The error is about health checking, not about failure.
I'm not sure this is going to be useful. We already have `IsRelevant` on all of these, and we don't have the ability to tell if we're releasing or not. The point is to be able to determine the value of that attribute.
This is going to need to be updated once the new package is in `src/github.com/influxdata/flux`
Why is that?
Do we want to make this `DEBUG` or `DEBUG`?
I don't know what the default is, but I'm guessing that this would cause the linker to build on a non-linux machine. Should we use `ifneq`, too, or should we do so on linux?
I would call this Scale (plural). I think that it reads more like a number. Also, what would the `stepSize` mean, and if it's more than `stepCount`?
why do you remove these?
Can we use `dist.init` here?
This can also be removed since we are using the new `seelog` package
This should be `config.conf["update"]["allowUsageStats"].lower()` to get the translation in the i18n file
Should be `checkout`?
I think we should check that `len(f.server_conn.ip_address) > 0`
This was the problem, we need to use DateTimeOffset.UTC for this to work.
It's probably a good idea, but the error message is too long, I'd say we want to display the full error message to the user, rather than just the full error.
Nit: Remove blank line.
"Crosses" is not appropriate here. This method should not be called "crosses" because the user may expect this logic.
TODO to verify that this is the md version we want here.
This is a breaking change, and should be done as part of the changelog.
This function is not used in the test.
Is this file needed?
Extra empty line detected at block body beginning.
Can you extract a method and put it in the capability class?
Is this needed?
Isn't that already validated above, right?
I would rename this to `TestNormalizeTo*PartialURL` as it's not testing any normalization
`indexGen` is an iterator. No need to use next(). `next()` will return the iterator.
I think this one could use a `RLock` too.
I'm not a big fan of using a global. It might make things cleaner to put these in the `astroid/__all__` folder instead?
This file is only used by the `graphql-client/test` package, so it should be removed
I'm not sure if the change is correct or not, but the logic is a bit confusing here. The `protoPkg` contains the package name `cloud`, while this change is for `cloud.google.com/google`?
Is this the right way to handle it? The Lob_Append_Or_Create flag isn't being used, so it seems like it should always be set. I'm guessing it's just the right thing to do, though.
Can you remove this line? :D
Should this be a warning rather than an error? If not, maybe it should be `#error`?
Can these tests be removed if they're just testing block producers?
I think this is not needed anymore
Why not call `in.skip()` here and avoid the duplication of the logic below?
I think we should have a method for this.
This can be removed.
I think the etcd config name should be prefixed with `etcd.` like the other files. Also, the file should not be renamed, it should be renamed with `etcd-`.
We should probably move this to `pkg/apis/pubsub/v1alpha1` to make it clear what it does.
Why are you logging this at warn?
Should the imageBlurHashes be the same as item[ImageBlurHashes]?
This was unused.
This check is done here so that we can get staked for other things. It was a bad idea before.
The cast should not happen.
I would add this import at the top of the module, after `from sphinx.errors`.
I think this path is tested on ARM. But I'll let it slide.

`hasAttr` is redundant in this case. It's a property of the selector and it doesn't appear to exist.
Should we rename this class to `StorageMigrationMixin`?
nit: I think `reduce` is not necessary if `reduce` already takes care of merging, it can just be `max * factorization`
I'm not sure this file needs to exist.
This is the main change to make the code more readable.
I would move this down above the "k8s.io" imports.
Why is the visibility changed here?
This could be a `warning` but it should not be an error either.
Is this a valid message for this test case? The original test doesn't seem very useful
I know this is already merged, but can you make sure to remove this newline?
I wonder if we can keep this and let people know it was the maximum pending write?
Maybe we can use `boost::program_options::values<bool>()` instead?
Can we move this to the beginning and then check for `len(*addresses) > 0`.
Should we be more specific here? "Crashed", "Crashed executor", etc.
Should we add `GET_HEAP_SNAPSHOT` as GET parameter?
I am not sure if we should be using `Watch or Download Video` here, it's not specific to `watch_video`. I think we should change `Watch or Download Video` to `Download` or just delete the word `Watch` in `Download`?
Do we really need this `put`?
shouldn't this one be `jdk build`?
`@SuppressWarnings("unchecked")` ? Also, I guess it's a good idea to use `Object.class` here, not sure about that.
this change shouldn't be necessary since it is not a pointer
Why is it a `ConcurrentHashMap`?
This line should be indented to be a single tab to match the rest of the file
I am not sure if this is the right way to do this. If the user wants to defer on a particular resource then they can do it in their CLI and then go to this method.
I don't really like these changes. It would be better to split them into separate commits.
I think I'd prefer the name `bitcoind`
`Analytics` doesn't make a lot of sense to me here. Maybe we could call it `Analytics service name` and remove `Service name` altogether?
What are the changes in this file for?
This is a breaking change - please bump the major version to 2020.3.x
I wonder why is this change in the middle of all the tests.
Shouldn't this also use `getOrAdd(name, builder -> builder.setGauge(name))`?
Is there any reason for this change? This looks like a separate PR.
This is a bit confusing. It seems like the feed has to go through its own route. The link is not a valid feed URL, nor is it a valid feed URL. I wouldn't expect feed data to contain a valid feed URL.
missing license header
We don't have the description in `metadata`
We shouldn't introduce a new type, this is just a hack
nit: rename it to `applyGRPCOptions`
nit: we should be consistent in having test name and `TestDefault` as well.
I would suggest to pass the pointer in here and remove the constructor.
This should be a `[]byte`
I wonder whether we should add an error message here. I'm not 100% sure we want to be returning BucketAlreadyOwnedByYou, but if we can do so we could just have the error code as `bucket/already_owned_by_your_bucket`
The constant name is a little confusing. `GROUPID` or `GROUP_ID` is more appropriate.
Is this import used?
nitpick: I think it would be nice if this would just return the `arg` and `arg` directly. That will simplify this code a lot.
@danielsdeleo why are we removing this here?
Why do we want to change this?
I'd prefer a new interface called `DecodeMapWithMatch`, but this is fine, as-is.
This should be `BlockHeaderByHeight`, right?
Is this necessary?
Is there a reason for this change here?
I think this will not work with `pytest` fixture in the past. I'll test this separately.
Can't we put this on `Eth` and have a separate namespace for it?
The new constructor should be called `NewDataresidencyStoreSingleton`, right?
why is it needed to be a pointer ? can we avoid a copy ?
Should we add some metrics here as well ? We can add them in a separate PR if needed.
Is the name of the Job needed?
The `String.format` was intentional as it doesn't create the String.format instance when it is passed as a constructor parameter, but it is a final field.
You can use an `for` loop here to avoid the `range` loop.
Please add the docstring.
This is probably a mistake
Why do this?
Should we use `pInputAssemblyState->topology` instead of `nullptr` here to avoid the null pointer dereference below?
This file should be removed.
Why is it renamed?
I think the test is correct here. I am not sure if it would fail.
What does this do? This is not a chan?
I don't know if anyone will agree with this - but the `[Code Sample]` tag should still be there.
Why is this necessary?
I'm thinking it's better to use `errors.Wrapf(err, "failed to decode data")` here.
I don't understand why you need to update the same group multiple times? I would assume that when creating another group, you can only update one or the other.
This should be reverted (as it was before).
nit: `_dispatchPipes is null` to make it clear that the property is always set

This line is not needed anymore. It's an unrelated change.
`""` is not needed here, and it is in `ProxySettings` constructor.
I think the previous code was more readable?
Is there a reason to have the libcontainer imports in separate sections?
Why did this move down?
The last enum value should be `OPSZ_NZCV_EL0`.
This is not a correct derivation, it's an account ID.
Shouldn't this be `true`? (The text is not changed at all.)
I think you mean `3` now?
How much time do you expect the logger to be in the meantime?
nit: this should be `ChainWeight`
nit: move this into an `require.NoError(t, ncs.GC())` block
We're still in the `website` package so you can remove "domain".
Should we just remove this function altogether? I think there are some places that call this, so we should be fine.
This is fine but why do we need a new type and `readonly` for the headers collection?
Why is the name `LogFilter`? It is a filter that is applied to both the log topic and log topic.
I'm curious, why is this needed?
I'm curious how this fixes the bug?
Should we have this one?

Should this be `<%= javascript_tag %>`?
This import seems to be in the wrong section
this is not anomalyScore - it is the anomaly of a step.
"if we have no messages available", or maybe "if there are no messages and no error", or "if there are no messages and no error"
We can add `TODO` here.
This is an example of how things should happen when you have a very large number of receive requests.
I'm not a big fan of the method name for this but the idea is to keep the same as `existing_approval_for` as that will also be more consistent with `existing_step_for`. This method also has a `approved?` method.
@bobhit211 Please revert.
We don't need these.
You should not need these lines as they are already filled in the constructor.
I don't see where this method is needed in the show controller.
This should be in a new `else`, right?
This shouldn't be here. You can remove the line above.
Why this change?
This seems very confusing, if we are changing an object we're changing an old object which we are not
Can you update the flag name here to match the new flag?
Shouldn't the default be 10351? This is a port that we use by the agent and the Egress feature should be disabled.
This seems not used?
Should these options go under `export` as well?
I think a more explicit name would be `db_schema2_version_migration`
This change is unnecessary, we check this in `Beaker::Options::HostsFileParser#parse_hosts_file`
Can we rename this to `ApplyNLogConfigOnReload` to match the `applyOnReload` option?
Why is the method public?
`stateDB` has a `protocolView` field, so it would be nice to set this field to `nil` and remove the `Dock` field below,
nit: rename `_readInputTask` to `_readInputReadTask`
I think it would be more clear if there are two separate lines here, and in `setupVideoControlsToggler`.
This should be `batch_size` for now
I think the "skip" should go in the previous line.
why not static imports?
I think this is redundant. Just call `await` on each task
Is this really necessary? The `class.getSimpleName()` could have been called before this line. And if it is required, then maybe rename the variable?
This is not necessary, right?
Why do we need to set it now?
Can you check this condition to see if we need to resize `input_buffer_`?
This is the only place where we need to check whether requestId is not empty.
Why not just create a `func() *ecsacs.PerformUpdateMessage` that we could use as a default value?
Is there any reason not to use a `traceback.format_exc()`?
I think we could get rid of this. The `MessageAs` is not a good enough name. I would prefer `MessageWithMessage` or `MessageWithMessage` but I'd like to keep it simple if possible and make the `As` method private.
I'm not sure we need all these extra SQL queries here. I'd rather have the user query and filter the users that belong to `GROUP_ID` (and remove the `WHERE group_email = "{0}"`)
This should be `os.path.join(path, ...)` because this path may contain a `.` character.
I think you can remove this one?
I'm still not sure this is correct. We want to use the same identifier for the bills in the past so you can't get the bill in a month of the month.
Is this necessary?
We could make `thread` `final`
"request is" -> "request" "To allow for anonymous access, ensure ServerHttpSecurity.anonymous() is configured." -> "To allow for anonymous access, ensure ServerHttpSecurity.anonymous() is configured."
I don't think we need this unless, just set to 0. The `if record` block is always true. So there is a no need for the unless statement here.
We should use `metrics.Sum` as well to keep consistent? `sum` can be used for both.
this is actually wrong... you should probably rename interpreters to interpreters-2
I'd suggest using `os.fsync()` to avoid the race condition with `os.stdin`'s `read`.
We should fix this before merge, otherwise this function could return an invalid result. (The function can now return `-ENODEV` if the kernel doesn't support GPU)
We can use the existing `parquet.vectorization.enabled` constant. It will be a much simpler API.
# TODO: Remove when no longer needed.
I think the "minor" here should be "high" as well.
Why the type change?
Can you add a TODO to remove this when the functionality is fixed?
Can you use the new function here?
We need to add this to `spec.go` file.
Is this a bug in the code? I don't think this is supposed to be here.
I guess we don't have a convention to define macros inside our test files?
Is this change intentional?
This property is used to mark a user role as missing admin role. Is that a problem?
This is a big code smell for the reader. You need to wrap `_bb` in a ByteBuffer and copy the data, then use `new ByteBuffer(_bb)`.
Let's not add a dependency to the UI package. If we do want to expose this to the admin, let's move it to `../../util/date-range`
This should be `UA-999-9`, correct?
nit: should this be named `KeyStore` to be consistent with what we use in the other types?
nit: could this be a const in `redis_inbound.go`?
I don't think it's right. The extension should be `zip` instead of zip.
Should be `from .client import ClientLayer` or `from .client import SocksClient`
I am not sure this name is right. What about simply calling this function `is_pre_extended_sigmask_valid()`?
"of a file" -> "a file". Also, we should mention that the returned list is in ascending order.
Can we please keep the old style?
please also check for errno here.
The name is a bit misleading. It doesn't mean what the action actually is, it just checks that the account ID exists.
I believe this should be a function on the block instead of a function.
I think this would be a good place to check that the host is in the `host:port` format.
I'd call this `NoHeader` (to match `noHeader`)
Why don't we want to return `nil` here, or the error returned from `Start()`?
This should probably be `unit`.
`// Hides the console window and activates another window`
We should also have `Event.Context`.
This can be a `Long` too.
Is this going to be too big for a public method?
Is there a better way to do this?
Should `ClientSni` also be encoded in the same way?
@tinaafitz Is there a reason you chose to keep the `warn` message? We should be using `warn`. I'm fine with that.
I would say, "remove the ambiguity in the class name"
I think this can probably be a single interface, since there is only one implementation. Then we could just implement the openvpn port in the implementation instead of a service port.
Shouldn't we use `err` here?
Is there a particular reason why the stub is needed?
Why are we not supporting the other drivers?
This should be done after the Verify call.
Is this TODO for a separate PR now?
I don't really like that we use this name as a constant in this file (it's already called `LOCK`). Can we use something like `RSpec::RspecSupport.reentrant_mutex`? This is a little more consistent with how we do it in `core/spec/support`
@spouliot I don't really get this change, does this work on the main window?
Should these also be removed from the proto/api.go?
Please rename as `smbSecretRes`, since there is no `smb` in the name
I wonder about the performance of this. It's not a problem but the idea is that this function would be used for caching the values in memory. I'm wondering if the performance of this function is not a big deal since we already have a performance penalty in the loop below.
Can we have a tracking issue and an issue to track it?
This should not be necessary, as `hostname` is a string.
`fmt.Sprintf` is unnecessary here. `log.Printf` will print the error and `return false` will print it.
I think this should be a constant at the top of the file.
The name could be a little misleading, it seems this is only for metrics, but it is still used in the metrics collection. Maybe rename to `VirtualMachineMetrics`?
`require.NoError(m.SignVote(vote))` will be better.
Shouldn't this be `slice(1, 2)`?
This will fail for paths like "file://" (see the line below).
why not just return the number of sessions? Is it possible to return an optional number to limit this?
nit: `pingDeadline` can be `const`
This should just be `ROMOL_const`
This should be changed to `PLUGINS`
I think this might be better as `vNode.parent === node`?
This should return `true` for `isReportSpamEnabled` and `false` for `isAccountReportSpamEnabled` instead of `false`.
This will return nil if the gecko id is not available, is that correct?
This looks like it will result in two different `Include` items in the `ItemSpec`. Is there some better way to do this?
This could be more helpful in a doc-string like `The `referer-header` setting to specify the domain in which the referrer header will be sent in the headers.`.
Hi @tjprescott. The `material-icons` class is now present in both the md- icons & the icons in the md-icon. I'm wondering if this may have any side effects. Is it possible?
I think I'd prefer we have `WorkflowType` as a top-level type.
I think this might fail in IE, because the keys can be an array or string. We should check for both, and if so, throw an exception if neither of them are strings.
We should add a deprecation warning about the `direction` property
@barklund I've removed this dependency, but we can't use it as a dependency as it's not needed anymore.
Should we still keep this file? It's used in `go/build`?
This should not be necessary, as the test is already passing without this change.
This one is not a big deal - the log message should be at debug level
This should not be necessary, `eval` will do the job for you
Why are we using OverwriteIfNewer?
Please, remove this debug output.
This is changing the output from `MarshalIndent` to `Marshal` - was that intended?
This could have a default value of `nil`
this should not be `public`
It would be great if these errors could be more descriptive, like `The size of the datum_vector must be equal to the transformed_blob->num()` etc.
The method `get` should also be removed.
Layout/TrailingBlankLines: Final newline missing.
I think this should be `expand_as(float_x)`
This is a good idea as it doesn't require any changes, but it's a great pattern and makes the code more readable
I wonder if `err` is the right variable name here.
I'd suggest removing these aliases from the imports as we don't want to add more of them to docker.
We should probably add a new line between declarations of this function and the one after the `mutex_lock`.
I think this should be called "getTotalProductsCount".
nit: this type could be made smaller by using a core.Number to represent four of these fields, e.g.,
Maybe we can move this to `cmd/mayactl.go`? We already have `snap revert`, can we reuse it?
We should keep a "block" command
Should this be `os.getenv('QUILT_USE_TQDM', 'false').lower() != 'true'`?
Why was this change needed?
`skip = !opts.FORCE_RENDER && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === false;`
I'm guessing you meant read?
This seems a bit too specific, can we add some other options to it? Maybe `JAVA_CLASS` or just `JAVA_OPTS` ?
Why is this being added?
I'd prefer the old code if you used an `isinstance` check.
Not sure why this line was added?
Is it possible to get a test with different formats as we did for RDA?
why the renaming
This is a pretty expensive test - is there another way to test this?
This should return null. We want the traceParent to be the first element.
Should we make this a class constant? We could also add a deprecation_reason here.
this is wrong because it doesn't work on both. The `__proto__` property does what is needed to set the prototype properties to the Realm.Object prototype
This panic is not needed.
This should be `old_size - old_index`, not `old_size`.
I think we should disable it only when the tool package is not included in the list (since we don't want to use the ToolCollection in the list)
This is not true in Java, it is false in Java 8
This looks like it could be a helper method
I think the previous code did it, but I'm curious if there's any reason to use it here? It doesn't seem like the `desc` will make any sense.
@dclarizio I think we need to add the `raise` here as well so it's not handled by the next line.
I'd rather have a default `fillWidth` and `fillHeight` for the `primary` item.
We should have a helper function to get the mode from the config and use it for both cases.
Why does this need to be checked for each one, instead of just checking against a list of supported auth methods?
Why do we need to check here if max_pending is not greater than max_payload?
this was the only change required here, but we'll need to make sure we get a test for it too
This should not be in here.
please rebase master to avoid mixing chaos-mesh with v1alpha1.
This should be `ancestorRef` rather than `ancestorComponent._ancestorRef`.
Can it be empty?
I think this was intentionally not `maxGquicVersion` to match what's in our `quicversion.go` file
Should this also be `repr`?
Should this just default to a string?
Is there any way we can make the proposal tag the first one, rather than just checking for the one that is a proposal payload tag? I feel like this might be a bit too long to print, but I'm not sure how useful it would be to be able to see which proposal is being sent and which are not.
I'm pretty sure that the `param_name` should be `param_value`, but we can add that to your PR if you'd like.
This should be `<version>{version}</version>`, no?
I don't know if we need to add this. If the session type is `gone`, and the session is already `gone` and `DRM_MAJOR` is `1` (which is a bit odd), we should probably just return early in this case?
Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
This should come from an actual library, rather than an arbitrary dependency.
This can be `const`
I would just remove this method and always raise an error. The only thing that is needed is the URL.
This should be `UINT16` to match the actual enum value.
I'm wondering if this should just be named "CloudTag" instead of "CloudTagList", since that's a generalized list of tags, and it's not really about cloud tags, it's about the tags that are available on the cloud.
It would be more clear to make `isInitialized` an `AtomicBoolean`.
I'm not sure this is really necessary. It seems like it should be possible to unregister multiple events from an event manager (e.g. when you create a new instance of your instance in the event manager).
I'm not sure if this is a good idea
I don't think we really need this method, since you only create one file in the `repo` dir. The only place where we call this method is in `repo.go`
Is the intent that the read preference object here is copied over to the command? If not, should we use a new object, like we do for other options?
This is actually the actual fix to the problem. The new behaviour is to unclean the rewinding to the next block number, and unwind to the next block number.
We have a race detector that can detect this test case. We can skip it by running locally with rabbit hole.
Line is too long. [92/80]
Can we please also do this check in GPU_Suspend_reason? It looks like we'd be able to do this check in GPU_SUSPEND.
This could cause problems when someone tries to access an item with no item id (for example, a new user could add an item with no item id)
please use `LOGGER.warn("clientCert for item doesn't exist. Will set it to false. Item: {}", item.toString()); `
Do we need to add this `-k` for development too?
Why is this line changed?
Is the `encryptor` part of the key? If so, how about `encryptor`?
@mfojnik I think this description should be "set only" instead of just "set".
I think it should be `return true` if `num_scan` was not set.
Why do we set `getAvailablePort` here, but not other test?
Is this class really necessary?
This function is not very useful - please remove it and test that functionality is available in `integration/testutils/data.go`
This could be one line.
This doesn't seem to do what we want. The only thing it does is to delete the SIGSEGV and SIGBUS.
Should probably be `public`.
should it be `Long` ?
I assume this was moved from the validator?

I'm curious: why this is needed?
Why not do this in the caller instead of defining this in every place where it is used?
It's a bit strange to use `reverse` here. Is there any reason to introduce a new layer type?
nit: remove this empty line
Maybe `consider-using-sys-exit`? This is a bit too long and I would use `exit` in the context of other people.
Why is this changed?
Please move this fixture to `test_utils.py`, or move all the `from qutebrowser.utils import *` imports to `test.utils` (and move the `objreg` import).
This is a new property for the `SparkConf`. Shouldn't this be a property instead?
I'm not sure I like having a test that checks what the process of options is doing, as it makes the code harder to read than the one you have done, and it makes it easier to understand why. I also think this is a weird test. Can you make sure we test the error and also verify that we get the expected number?
Please do not use `import*`.
This is a bug in the old code: we cannot join cgroups if we're in rootless container.
This is an existing issue: it should be "aggregates changed to operate on a single column." - this is not a problem for most users, but for the users that are working on a single column, it should be something more like "aggregates changed to operate on an aggregate that is a column of an integer column" or something like that
This should be using `s`, not `cudastream_t`.
nit - could you put the token after the attributes, so we are consistent in the signature here?
Can we call this "UA-Auth" for consistency with the other constant name?
I'm a bit confused about what this number is here. It seems like it's just a number of re-keys per worker. If it's just a random number, why not do it once and cache the result?
Use 2 (not -5) spaces for indentation.
I don't think this is needed.
This file shouldn't have been changed. This file is for `mongo-client` and the constructor should be removed.
This seems a little overkill, can we just use model[i]?
I think `prune.Mode{}` should be the default mode.
Is this still needed?
Is there a possibility that `q` is null? If not, should you check that? I think I'd like this to be more robust to a `if (q == null && fcontext.base.size() == 0)`. If the size is 0 and the base is empty, we'd still have to do a count query.
Revert this file.
`stderr.String()` is a noop in Go, and will panic if `stderr.Size() == 0`.
nit: could rename to something like "HasX509CertificateExpired" or "HasCertificateExpired"
File is not `goimports`-ed (from `goimports`)
The default should probably also be a float, and probably should be a float, as this value is in the docs.
I think we need to add another one that also calls `withText()`.
I know it's not a new problem but this is a little confusing... why not just use the `name` in deployment.json directly?
Why did this stop need to move into this assertion?
I think you want `input.type === Blockly.INPUT_VALUE || input.type === Blockly.INPUT_GROUP` instead of `input.type === Blockly.INPUT_VALUE`.
I think `DockerVersionConstraint` should be removed since it's already there.
The changes from this file are unrelated to this commit and should not be included.
why do we need to return nil here?
should be `self.score_thr` (and the other places)
This needs to stay role="navigation" as well.
We should use $scope.publicSharingURL.get(), it will also get a default value
This change is a good change, but it makes sense to me that it should have been in a separate PR. We should try to avoid such changes in the future.
I don't think this line is needed.
Can we add this to `Commands.js` too?
I wonder if we should keep the old filter and just keep it for this component, but just make the new one `googlesitekit.Settings`. We can add another filter that's deprecated in the next release.
Why do we need 2.0, why not just use 2? It is a little strange to be mixing version and node type.
@JamesNK should this be `do nothing`?
Why is this added?
I think you need `<` before `:`
>if (!WithHeader) [](start = 16, length = 13) this change was unnecessary. `Header` can be set in the else of this switch statement. #Resolved
This is not needed. If overlayText is enabled and showTitle is true, then there can be only one item with this item name.
I would prefer to have a method with a parameterless ctor that can throw if hidden is not enabled
Should be `optionNameClefSignerAddress`
I'm going to add some `skip` statements to this file, as they don't work in Python 2.7.
I'm assuming we don't support the existing `storagePoolClaim`?
This seems very weird to do this on every single page. Why not just make the feature view a partial and have the features view a helper method?
`prefix=` here, so that we always use the same prefix for the browser?
We can use the current working directory instead of the path
I don't know this syntax. It is a `(ScreenPosition)` cast, so it is just the correct type to use.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
Please add a description of what is this used for - "pending" or "receivable"?
This can fail if the signer does not have a public key. This is a potential problem in some cases, as we may end up not using this information to know if a worker is the same as the one we're signing. I think it could happen in the normal case but we could at least log a warning and exit, so it should be easy to detect.
Is there a better way to do this? @jonathanpeppers?
Should this be "error executing SQL", to stay consistent with the other error messages ?
This one doesn't work, since the instance url is the same as the user URL.
The `if` statement looks strange. I think it should be just `if (variableBase->m_Name)`. The `variableBase->m_Name = name;` should do the trick and we shouldn't have to handle it in the code.
Please remove these, since the class isn't implementing them.
This is not used.
`UnmodifiableSet` is already implemented.
I would have put this check before the `response_headers is not None` check, so that if the user sets the `response_headers` to None, they will have the same values.
I don't see any usages of this.
This will be imported as `peerstore` and it is no longer used.
I don't think this header is required.
I would suggest to create a constant for SOUP_NAME_COL.
We should probably add a log message here.
This check is not needed. If the variable is not used, then `isUsedLocalVarWithoutInitializer` will be false in that case. It will never be executed.
Can it be final?
Should we add a trailing \n? If that's possible I'd prefer not to add the \n to the end of the message.
Is there a reason for this change to happen?
You should use `RememberMeServicesUtil` to get the key, instead of the `AbstractRememberMeServices`.
This class can now be removed.
I don't think it's worth doing logging in the constructor. It's better to do it inside the `crawler.CrawlerConfig` class. If the logger is set, it's a `pygcp` logger, otherwise it's an empty log file.

I think the error should be more informative.
Why are these being changed?
Why are we checking `GraphSummary.Disposing`
This will require a bit more changes as the default behavior for `reg_decoded_bbox` changed.
can you just delete these lines?
Why is this change necessary?
This is a little odd as this is only ever used by tests, and I don't think it makes sense to have these in `pkg/trace` or `pkg/trace/config`. I think it's fine to keep this here for now but we should think of a way of not reusing these constants if possible.
Do we really need to add these? It feels like the interface is just used by the HttpWriter interface.
Should be in base
You can use a loop to do this in one go to get the test to pass.
We need to remove it from the view table. Otherwise, it could be a dead column in TiDB.
Can you explain a bit about this change? It's unrelated, but is a bit weird that we have `dashboardDetailsApp` in here.
Why the change to version history?
I think it makes more sense to call this `text` (and the `missing` property)
The format is a bit weird, but I'm not sure why that wouldn't work.
The title should be localized, not translated here.
The error checking above should check `pglob.gl_pathc`
I would prefer this default value to be false so people know why this changed
I know it's not part of this PR, but why did this need to be fixed?
I think I'd prefer not to have this here. I think I prefer that you only add the ones we want to add in the scanner.
nit: you can use fmt.Sprintf(res + fmt.Sprintf("IPv4: %s, ", strings.Join(p.ipv4.String(), ", "))) here
Is it a bug fix or was this just a bug?
This is a public interface change. I think this is OK, but just want to make a note about this change.
This test case is not necessary as it is covered by `testGetSnapshots` below.
Is this needed?
This is a very bad name, how about `--skip-price-validation`?
I think there was an issue, but not sure that is the best fix.

I'm not sure I like this line, because it's already there.
Why are these properties removed from this task? I would assume that they should be removed from the `PushItemsAsync` task.
These changes are unrelated, and should probably be removed from the main PR
Can you add an error to tell the user that a filter can only be used for logs?
Why this change?
This will not be correct for `kBinaryCannotBeSignalled`. If you want to signal an internal semaphore, it should be checked by `internal_semaphores`.
Should this be `Optional[List[Dict]]` ?
I think this method will only return a list of work orders that are not building? So I'd call it `filter_building_options`
Why is blackhole not a target type as a protocol? Should this be blackholeProto?
This should go to `ncr_dispatcher`
Should we add the visibility rules here?
Why is that needed?
I think you should call here the reset method instead of calling the reset method
Is it necessary to have it here? Is there no way for this not to be called?
Do you want to make this an abstract class instead of an anonymous type?
This package should be aliased to `action.protocol` now, and renamed to `action_protocol.go`.
Why not just make this part of the struct itself?
I'm not sure we need this line, since you're not using the `user_hash` below.
I think you can remove this example since it isn't used at all.
I'm pretty sure you need to change this one in the fixtureSetup function too, otherwise the fix will be lost.
This change is needed because of some tests that rely on the old sig
Should we move this to `pkg/controllerutils`?
Is there a way we can avoid doing this in the worker itself? It seems like we'd need this to run once, and it should only run once. The idea here would be to make a special case of a worker that runs once on a different instance. I'm not really sure if it would work, so maybe we should leave it in for now.
I think it would be better to avoid reformatting this, and rather just indent the code block that it was originally written with.
@dclarizio @cjwagner this seems to be the right place for this package
Why are we adding this?
I think we need to check if the Kinesalerite config is enabled here. Otherwise, we are going to send a request for a request to Kinesalerite but not to the API.
I believe this line should have been changed.
Can we change this type name to `StackSummary` to match the other types?
I would change this back.
Is this a change for backwards compatibility with existing deployments? We can't assume it is, I'm guessing?
Why is the mark removed here?
@saydeny I'm not convinced this is the right place for this logic. The problem is, if `extraRuntimes` is not defined, the default will be set to `[]string{` rather than `[]string{}`. I think the better option would be to make this part of `selinuxStatus()` instead of `selinuxStatus()` since it seems to be a bit more complicated to read than `findNvidiaContainerRuntimes()` which doesn't seem to need a nil check. What do you think?
Why did you change dot to doT here? I think this change is not needed. It's a different PR though.
Should this be called somewhere to indicate that it was interrupted?
This seems like a reasonable default value. If we ever want to change it, we can make it configurable.
@mabashian, why is this needed?
This should be in a separate method, otherwise it will not print in the interactive mode
This exception is a generic one, it should not be exposed by other packages.
Is this message-id a typo?
I think feedbackable is enough
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
This test seems to be failing. I think you can remove this.
Can you move this to the second group of imports, please. :)
Do not include nupic-default.xml as this is an external dependency.
@pascalgrimaud I think we don't need this, `i18n` is already available in the `model`
I don't think the test will need this, the test should run in the container with a filter of `1` and then test `net.ipv4.conf.eth0.rp_filter` is sufficient.
This class should probably be renamed as well. This is a `RemoteClient` class that does not expose any HTTP methods.
Why do we need this change?
I'm not sure we should have `encode` have `lowercase` in the name, but the only place we use `encode` is when you call encodeDoc on the driver.
Is this a new API?
Why does this case not apply now?
Why change this? The name is inconsistent with the json property.
I assume this is just for debugging and shouldn't be here? If so, can you add a TODO and reference the issue number for this?
I think you need to call `onAfterLocalTransformStart` in the constructor
I don't really like the name. It's really just the filename, right? I would expect an archive to clear all files.
nit: `typeof` checks are unnecessary. You can just do `typeof opt_port === "function"`
Why not use a `Dictionary<string, object>`?

This is a temporary workaround, but I think it's better than having a `map[string]bool` and an `isAllowedDeny` function, because there could be a case that we need to deny a specific priority type (i.e. if someone tries to do `specPriorityPriority = [alias]` and the priority is not allowed, we can't deny the spec priority).
If we want to create a Transport, we should probably add it to the list of transport attributes, not create it.
Should we have a test for this?
Can we move the initialization of `labels` and `valuesIndices` to the beginning of the file? That way there will be less chance of panic when the registry for some reason changes?
I think we'll remove the entire line
@jeromelaban I'm not sure we want to put `ViewModels` in `MvvmCross.iOS.Views` namespace. I think we want this namespace. @jtkech @jtkech any thoughts @vishh?
Isn't this missing to call `asio_close(b->wakeup)` after `pool_destroy()`?
I'm not sure we have a lot of types with these new ones? I'm wondering how the rest of the PR is supposed to handle these types
nit: can remove `ShouldSkipClientSpan` check as it is already checked at line 139
I don't think `?array` can be nullable, as it will never be null.
This seems to be a behavior change? I assume this PR was just reverted?
This should use a constant
I'd suggest to change these assertions to an assert in the function that asserts the imageview is valid, and remove the assert in the assert
This seems like a better choice for a constant, since it's repeated multiple times.
Why was this removed from blockly?
Should the output have a different name for this test?
This can just be `log.Error("Failed to ping proposal", err)` as it is already logged by the server.
@bouncycastle I don't quite understand why this import is no longer needed and why it should be.
why not just `v.name.decode('UTF-8')"`?
I'd suggest removing these blank lines.
I think we want to use the `src` folder for unit tests
Why do we need `ariaDayPrefix`?
We can't use `options` here. The reason is that `component.componentWillReceiveProps` has already `component.componentWillMount`, so there is no need to check it here.
I would suggest to add a new line between the query string and the constant.
I think we should be using this in other places in the code as well
This seems like a breaking change.
Do we need to keep this here? We already have a `ConfigTLP` property.
This should be `code_exp_default`
We shouldn't be enabling pylint here.
We should change this to `can't unmarshal auto scaling config into task count`
I'd suggest to have `emptyPhase := cVR.Status.Phase == apis.CVRStatusRecreate` instead of `isEmptyStatus` for readability
Is there a reason why you chose a different name than the previous one?
Isn't this already in the wallet module ? If not why is it in this module ?
These seem like they're not really necessary? The `Iterator` doesn't seem to need the `final`.
This cast is not required, you can directly use `array_key_exists`
shouldn't server options be the last one?
I don't think the new part is necessary
This was wrong before. The loop iterates the whole string twice.
What's the reason for this change?
Should we suppress this as well?

This seems to have been done by accident?
Should this be `process.env.npm_config_user_agent` instead?
Should this be a warn? Or even info?
This should probably be Info or Warn, right?
this should have a docstring.
`contentType !== 'movies' && contentType !== 'mixed'` is already covered by `contentType !== 'movies'`.
this is the wrong file, it's a copy/paste error
This is not a good idea, it should not be used by the `push_front_preference`. We should not add new options to the processor.
Can we add a new constructor with `caseSensitive`?
This is the same as in the `CSharpCodegen` class, so this class should be identical.
This should be an `if` statement, otherwise, this will be enabled even if it's False (or `flush_endpoint_enabled = False`)
I think we should use the name `tasks_current` for consistency with the other metrics.
Why we change the hash to sysHashLen? Is not the same for both gatewayHashLen and sysHashLen?

I'm not sure we need an interface for this, it's only used once and only used in the `graph-sync/fetchers/node` package which is already imported from `graphsync`. I'd say it's enough to move it into `node` since it's not really related to the network.
This link seems wrong: it's referencing a CEL function, not an Operator (as in CEL)
Do we have a test for this?
I think you need to use `&& host.is_cygwin?`. If the host is not Cygwin, then the check below will fail.
Should the writer be a no-op for appending?
I think `-rewritten-task-set-id` is more accurate.
Should the name of this field be `debug_named_tools`?
nit; should the error be checked here?
Why is this a string?
this line and others should be removed
I think this is not needed. You don't have a label on the input element if it's not being set.
This doesn't seem right. I would have expected an app to be a project.
Shouldn't this be a public const?
Should we change that name to avoid confusion with `AppSecCustomUserAgentHeader`?
I'm curious why do we need a special class for this?
This is not needed as we are already doing that in `testApp.login`.
Why not "MINIS" instead of "MILLIS"?
This needs to be in the Users Settings tab.
This should also be changed to `getRecentlyPublishedEpisodesFiltered()`
What is the benefit of using the `keyconf.KeyConfigParser` here instead of `key_config = keyconf.KeyConfigParser(None, None)`?
I think it is possible to use maven's `MavenVersion` for the version of jackson and jackson-jaxrs?
Is this an int64 or a signed int?
This is not being used anywhere.
Is this needed? We are using the remote host as the host in the HTTP request
I think this is missing some tests
I'm guessing `direction` isn't a keyword argument, right?
I think you need to change all of them to allowlist and also remove the "to review the current state of the whitelists"
this can go on one line (we don't want it too long to show up in the diff)
This will panic if dir is nil.
Should we also clear m_hpx_initialized when kokkos_hpx_initialized is true?
This is not necessary now, right? If the address is empty, we should not panic.
Should this also have an `OAuth2RedirectAuthenticationWebFilter`, or was that done to avoid having to import the `server` package?
if the flag is false, will the startWithListenerFds() function continue?
We can move this into the sortFiles method.
Should not be hardcoded.
this change should not be here?
This constant was used in several places. Can we make it `PUPPET_AGENT_FEATURES`?
this should be `if other.data is None:` to ensure that both `Dataset`s are initialized.

I think you can undo this change
is there a reason to not check previous.Id here too?
Should `clear()` be in the header file?
This is not the place where the quote value should be done. This should have been moved into the converter.
I think I'm missing the point of having a `RemoteAddress` method if we only have a `Client` field. I can imagine that when `Client` is passed in as an argument to `NewClient` we may want to expose the address.
This is the actual change in the PR
Is this the right place to restrict user? Would it work for admins?
I am not sure if it is the way to do this.
Do we really need to have a pointer here? The only usage of it is at the bottom of the `pkg/cert-management` package
Should be able to pass directly `options.credentials` here
I'm not sure how `[options]` works, but it's not a valid option. I think you'll need to update the description to say the option.
I think that's not the way to get these rules right. This is to ensure that the names are not mangled for non-MSVC style names.
this can be removed
I would move this after the iteration.
Why is the error getting ignored?
This should be `text/plain`. The content-type is always `application/json` now that you're using JSON, so the content-type is now always plain.
These have to be updated to the new values
I think we should add this to the main `else` condition
Can we use `fmt.Sprintf` here instead of fmt.Sprintf?
This should be `attrs.pop("IAccessible2::attribute_current")`. If `attrs.get("IAccessible2::attribute_current")` is `None`, then it'll be `attrs['current']=None`.
We should be able to get rid of this, because this is only a warning about it.
We should use the same logic as we do in HttpMessageHandler. We should use the same logic as we did in HttpMessageHandler.
I think we should not throw this exception if it doesn't exist. If there is a flow with id 0 and we don't have a max concurrent runs, we will just skip and return as the first time we get here.
Is this really the interface for the `DateTimeInterface` type? I would think it's just `DateTimeInterface` for now and `DateTime::createFrom()` could be removed.
We're not actually using this in a `files.js` file, so we're no longer doing any mime type detection.
`, 'manual'` should not be added.
Please replace `assert` with `java.util.Objects.requireNonNull`
Why this change?
I like the idea of using it in a test too :)
This import should be the first line in that block, right?
I think `indexed` should be a boolean.
I think we can remove this check now since `_element_if_visible` handles `str`, `dict`
I think the same here...
I think we need a better name here - `clearSearchIndex` suggests that this is to clear the index on all sites or only on the last site of the record type.
Why do you need to call `dumpConfig()`?
`_vectorSpan` is a little confusing, can we call this `_bufferSpan`?
I'm wondering if we can avoid this import? It seems we could just import the sqlalchemy module directly.
I guess it's better to add a blank line before the last param.
This is just so you can print the plugins hash? It looks like it's going to be the same as the above...
This namespace is now in the namespace of the `OpenTelemetry.Metrics` namespace. I don't think we want this change in this PR, so we should make it a separate PR.
Should be 2006-2018?
I don't think this should be translated.
this seems like the wrong fix?
Why the change to big.Int?
This is an unfortunate race condition in the event bus with the node. I would have used the event bus for this purpose, but I think the event bus has a race condition and the node can be added to the event bus before the channel pool gets updated.
Shouldn't we also check the options.db and options.source?
I think you can remove this
I see this is called from the client, but I don't see it called by the client. Is it intentional?
This needs to be the same as the one in `crypto/sha256`
Should the name be renamed as well?
Why not remove the `and 'string' in attr_value` part?
This is not quite the right way to do it. I think it should be moved to `tabbed_browser.py`.
I wouldn't call it `InvitationMailer` and call it `Invitation`. We have a lot of different concerns related to the emails.
@mikedanese Please add `<spec-name="swaggerbat-subscription-id">` to the end of the URL so we know it is correct.
This is not needed, as it is already set to nil on line 288
should this be `float|int` ?
I would suggest to keep it as final. Otherwise it is used later in the coprocessIterator.
I don't like the fact that the ASTNode is not an AbstractJavaAccessNode, but we can add it as a separate PR as I think it can be added back later.
Add the player object to the name of the class
Why do we need this?
I don't think this change is correct? It was throwing and it was a no-op.
Is this related to your task, or does it just happen to be part of the work? (I'm thinking we'd want to make it possible)
I believe this should be imported as `scapy.compat` in `__init__.py`
Is this a good default?
@tinaafitz Should it raise an Exception instead of returning stdout?
I believe this was a bug. `api-version={apiVersion}` was not being passed to the PUT request for validation tests.
I don't understand why this import is needed?
It's not obvious to me from the diff why this is not an iterator.
This will not work, as the state from an object is mutated by the object. I don't think we can guarantee `null`s are always guaranteed, because of this line.
This is the change to allow for the client to be removed.
This is not necessary, the `type` parameter is a `String` so it should be fine.
This should be `expect { group_value_for 'group', Object, 'group' }.to_not change { group_value_for 'group', '' }.to ...`
#define MAX_MASTERSTATS_DESC 2
This doesn't seem to work in the current master. There's a few more references to this property.
This looks like it would be more efficient and cleaner. I'm not sure if it is worth it, but we should probably consider making it into a `switch`.
naming nit: this import is not necessary.
I would say the realloc is not necessary here.
I would suggest to call this `default_color` so it's clear that this is the default behavior for users.
Why would we ever want to retrieve `undefined` for a `siteInfo` property? This is an expensive operation in my opinion.
This needs to change to `-Wno-deprecated-declarations`.
nit: This should have `IsMSIEnvironment` as an alias to `IsMSICredential`.
Shouldn't this be initialized to `1`?
Is this line used somewhere?
I wonder why we are changing VUID-NONE to UNASSIGNED-cache-file-error here? The message says that it may not exist yet but I would assume that this would be a case of the error that it is a valid shader read. I know there's no way for us to detect a corrupted shader read, but maybe that's a good idea?
Are these needed?
This isn't used in any tests. Can we make it public?
This should mention that it's deprecated in favour of `peerlist/v2/impl.List`
Do we want to change this to Info ?
I think that we should add `.so` to the end of these. (Also in other places.)
The "old" flag should be set as a constant. And I'm a bit confused why you do this.
I don't have a better suggestion, but I would prefer to have a name like `json_cache_mode` which is the same as `cache_mode`, which implies "it is the cache mode"
I think we need a more descriptive name for the parameter here as well. e.g. "region" or "serviceProvider"
I feel like `allAffectedNodeIDs` could be more explicit, but that is a different issue. The current implementation looks like a bug.
This can probably be reverted.
This feels a bit weird, what does this return?
This was just moved to the bottom of the class since no one else is using it.
I am not sure if `PolicyName` is necessary. It should be enough to just use the `Name` of the parent Policy (and `Namespace` to match `Name`).
Is this change intentional?
@nishantmonkey1 I think it would be cleaner to have an additional config parameter, like `telemetryEnabledFromEngineStart` that would be called here and for the next `startEngine()` method. WDYT?
This looks like it will crash if the method is called on multiple timespan instances with the same primary type but different parameters.
Should we check that it is `< 1` or just empty?
We need to check if `build_config.notary` is defined and set as well
Why remove this? Isn't it still needed?
Should this be in `config`?
nit: you can combine both `if`
Should this be moved to `ember/_test/lib/js-barcode.js`
Do we want to log this error?
This is a duplicate of TestTrimComputeServiceAccount, can be refactored into one function.
Please remove the lines
Use empty lines between method definitions.
I'd rename this file `StatusCodeToHTTPStatusCode.go` (I'm not sure why we have both?)
@ccordoba12 I think this is a leftover from the old version, can you fix it?
I think the rename is unnecessary here.
I think we should add a note here that it makes sense for this to be an internal error.
`resources` should be `text` too
Why don't we need to check this error?
Should this be `FRAGALIGNRATIO` as well?
This should probably be `return True`
This test case is not needed because the form login is already tested in the test.
This should be Duration_t(1, 0)
We can simplify it to `dupe.get(dupe.array());`
This should be renamed to `BaggageReference`
This is not correct, it is the static logo file.
I think we could just remove `enableAddons: tc.inputApp == "addons"` from line 121 above
This should be `msg.Date.gte` instead of `msg.Date.min`.
Is this necessary? We already have this `scol`
this will be executed on every request right?
Is this a problem or is this the only reason why we use `require('./assets/js/googlesitekit/datastore/site')`
`block header: timestamp {} is only {} seconds newer than parent timestamp {}. Minimum {} seconds` is not really clear for me
This is the actual bug that we were having. The `solr_facet_params` method is not needed anymore
This string isn't really accurate. This is a list of items which cannot be edited. It's not the list of all item IDs that can be edited in a single request. IMO you should just say "You cannot delete anything. If you're using a list that cannot be edited you should use the list of item IDs to create the new item."
I wonder whether this should be a separate msg type, or if it can be a generic message that we can then use as an interface.
Why the change? We can make this one public?
This line was causing the test to fail.
This is a new thing, we're missing the readConcern
Why is this ID being passed in here but not on line 461?
Why do we need the ID?
We should add a link permission check to avoid adding a public link to an unsupported file.
this should have been k_1
Is there a reason that these aren't using `Regex` objects? I'd prefer to use that as the `Regex` class. Or am I missing something?
I would suggest to make this a const in the service package as this will be used everywhere in the code base and it would prevent some changes to it.
I don't understand why this change is needed. The only difference is if you want to add the global shell to a service. Isn't that why you need to change this?
This is the only change in this PR, but I'm a little bit concerned about the impact of waiting for the EGRESS endpoint on the controller.
@jimabramson, is it possible for this function to raise `RuntimeError` and be retried if the file doesn't exist? Is it possible that we might not be able to get a markdown file for `path`?
Should this error check?
Why do we use this style?
Why did this need to change?
Is this removal intentional?
What's the reason of this change?
I would like to see a log message here explaining why the timeout was hit, since in the case where the ctx is canceled, it's not clear where the context should be canceled.

Why is `i` a `std::int64_t`?
The import order here is wrong
This can be done by simply writing the zip into the temp file. That way there is no need to do any extra processing for the zip file. We can also do it in a separate PR to fix the bug if this gets merged
I'd prefer to use `icmpPkt` here.
Why is this check removed?
I think we should remove the extraHeight, since we don't want to change the width.
This is not correct. The storage is not the primary storage. The primary storage is the repository where we store records.
This is a really minor point, but this is a bit of a mouthful. What do you think about naming it `_load_class_from_name`? It is also more of a name that gives me a bit of clue about what this function is doing. It could be a better name.
} else if (value.type === "File" || value.type === "Object" || value.type === "Array" || value.type == "File" || value.type == "Dictionary" || value.type === "Map")
nit: this could be an `||` since it's always the same as the first `Where` clause
We should also add the type to the schema for the `resources` property.
Why we use the default value of `-1`?
This should be `instanceof Long`
This method doesn't appear to be used. I'm wondering if it's better to move it outside the function?
I'm not sure we need the `sudo` bit, as we don't want to be able to use `msgpack`.
Nit: The name is a bit misleading. I think `test_lifecycle.go` makes more sense.
Is this skipping test intentional?
Should probably use a pointer to `signature` as this is a pointer to an interface.
This will make the code a lot cleaner when we have a new struct
This is not really a test. It could be a unit test.
nit: This check will never be true, since we only call `RxnSmartsToChemicalReaction` once, right? You might want to remove it.
This doesn't look good. What's the reason behind it?
I don't think this is going to work for non-P2P instances? We should just create a separate state for each Peer.

I assume this was already there, right?
This can be nil as well
This will only happen when a user has set the `DisableSettingsManagement` config to true, right?
This is already tested in `test_beaker_provision`.
I don't think we should change this. It's unrelated to this PR, but this was just a bug fix in the old version (it was not related to `PublicSubnets()`).
I can't find anything in the code here.
You should also add an explicit `import voice` here, as the rest of these files don't do it.
Why change the constant name?
Can we remove BatchSize in the GetTasks method now that it's no longer used?
Can you rename this to `ecs-gpu`?
Why did this change?
This looks like the same code as `opmask_with_dsts(void)` except it checks for ARM. Why not just add this function to `disassembler.c`? It seems like it's just used here anyway.
Why do we have `0077` here? I think it should only be `0007`.
this change is wrong, `s.AddStreamFrame` expects byte count.
this is not enough, all invis spells that are invulsed are invis vis ones, so i would say that it should return `true` if not in vis (and not `false` if not in vis vs animals)

Why do you need these imports?
Should we just use the `new_tid` as the value?
Shouldn't we also add this message in the other cases?
I think we can just return a new instance of `DagsterInvariantViolationError` here and then you don't need the `else`.
Isn't it better to initialize this as jx_new_select_expr(j) ?
I think that `values` is actually not needed here. `values` should be called on the iterator in the same way as the `map`.
Can we have a more specific assertion for response body?
I think this should be `private-key` instead of `keystore/`
I guess these need the `name = None, description=None`
This doesn't need to be in `unsupported_property`. It doesn't do anything useful with these.
We should probably check err here and return the error
This test can also be removed.
This should be `vlog(4)` I think? It will be helpful to know which vertex is being used, if the user does not specify version for the partition.
We probably want an `if c.user.admin?` check here so the caller can get the user's full name without needing to check.
nit: this could use `list.isEmpty()`
We can't assume we have a yarn file here, because this script won't work for some versions of node.
I'd prefer we name it like `W3C_MINIMIZE_WINDOW` since this is not an action that we are doing.
Can we avoid this?
I believe it is possible to do the check outside `s.mu` but I don't see how that can occur?
I think we should pass nil as param here, and then do the nil check for st.Consensus().TipSet(), which is not the case. We should pass in nil for the default processor as well.
Why did you need to do this?
We can also change the default to `None` and we don't need the `maxResults` param any more
Can we remove that file now?
This should be imported as `import linode`.
Do we need this line?
`update chromium` should be sufficient here.
You need to set these variables in the tests, as they're not used.
This method was only called in the MediaBundle. The `getReferenceImage()` method does not exist and will return `null` in any other way
I would prefer if we didn't do this, instead, log.Error("error: %v", err)
I think "full namespace paths" is not necessary, since we already have the namespace in the Rust repo.
I'd suggest we just make the error message more descriptive here, e.g. `"open bucket %q: invalid query parameter %q"`
I'm not sure about this, but I think you should mention that you can use `:py:meth:`~py::module:`~py::function` to reset the namespace of a registered method, which is a bad practice.
This is the only place where you use `items`, `self.itemType`. The `items` variable is not referenced anywhere. You can remove it, or you can add a local variable `items = items`
I'm not sure why we have this here but I think we should add it to the list of middleware.

Can this be a bit more specific, like `forseti-server-allow-grpc-internal-only`
Should this be `gofmt -a`?
I don't think we need this interface, since it's only used as a feature for a single connection, we should just move this to the ConnectionLifetimeNotificationFeature.
We might want to keep the name of the `DNS-01` type in the `ACMEChallengeType` struct and have it default to http-01. We can add an option for `type` to the ACME type if that makes sense.
Why does this need to be merged with the default options?
Should we throw an exception in this case or just ignore the key file and not pass on to the next `rpc-http-*` commands ?
Is this used anywhere ?
Should this `to` be `to.getStartInDocument()` too?
`podLabels` seems to be unused
@colemanw do the images in cicd/pipeline manifest need to be set on the pipeline?
Which path does current module do? I think we should test both.
Shouldn't we pass the settingsService here as well? Or can we use the same object for both cases?
This should say that a `command` is only supported for Alt and Ctrl (but not CTRL).
We should also make sure we have tests to validate this interface
Should these also be `None` if `entry['release_name'] != ''`?
Do you want to add the new entrypoint to the `cmd/runc.go` too?
I'm confused why are we logging a warning in these cases? I don't see that you are logging it in the other cases.
Whats the point of the change?
I know it's not directly related to this PR, but can you please move this import statement to the top of the file?
I think the `else if` statement can be replaced with `return elements instanceof Vector ? (List<T>) elements : Nil.instance();` (it will also be more correct, and will be easier to maintain)
Please use an explicit `catch (OutOfMemoryError | RuntimeException ex) {`, since that's the pattern we use in our other code base.
Why is this a valid copyright year? Is this a standard?
Why do we need both bits of the mask?
Is this change intentional?
Is it worth mentioning that these indices will be ignored in the case there are no `changes`?
I would add a link to the page where the headers are specified (and mention the issue).
The initCodeTransformer is never used. Can be removed.
I think this was correct.
Why do you change these tests?
We should be sure to add the `!` to all the `return` statement here
nit: extra space before `:`
I'd prefer to see these in a different namespace. We are trying to avoid using a global variable to name constants. The same goes for other constants. `Error` is the same as `CleanUpError`
I think this is a good change to make sure we get more confidence than we want.
Why does this need to be a struct?
Let's make these variable names shorter, e.g. `lastPageInPaginatedResponse`
`null == deleteManifests || deleteManifests.isEmpty()` ?
this could be final
nit: I don't think this is a good idea to depend on the agent package here
This is incorrect. This method should be only used on <see cref="Activity"/> instances that were created via older means that predate <see cref="ActivitySource"/>
This check is not needed, if value is not set and len(signedTx.Data()) > 0 it means that there is a value field, and the value field will be set to the value of signedTx.
I think this should be `OnTestProcessExit()`.
We can't do this. This is not the correct way to do it
Should this also be added to the `themes/config.php` file?
I'm a bit confused. Why do we need `HelpMenu` here? Shouldn't the `HelpMenu` just be part of the `Header`?
Why do you need to add this conditional?
We shouldn't need these files.
I think that `--cpp-field-case STYLE` and `--cpp-field-case` are not needed anymore, right?
How come we no longer need to remove the origin key?
can this be moved to the other block header functions?
Should this be `Exit()` now?
This should be `A Main actor` right?
Why this new property to be added?
@hhenning Can we add a check in `TypeParser.parse_type_list`?
@houk-ms this looks like it should be removed now.
Why do not use `$this->checkStockNotEmpty();`?
`#include <numeric>` can be removed.
I'd expect that this would need to be `x = min(x, 0)`, right? It's an edge case.
Is there a case where we have a field named Long but a field is named long_r2, but the type is Long?
I'd call it `branchdb.Database`
Is the "collection" part correct ? What is it for ?
This could be a bit shorter with the JSON string.
I think `%q` is a little bit cleaner, as %v should not be necessary here.
this method should be moved to MetaUtils.cpp, no need for a copy.
This change should not be part of this patch
What do you think about calling this class RuleViolationFixor ? RuleViolationFixer seems to be an implementation detail of RuleViolation, and the rule is a rule violation.
The `if` condition here is redundant since you already have the check in the `if ... else if` above.
Remove 'YolactHead' and 'YolactSegmHead' from here.
Why does the driver need to be crypter-specific?
You are missing a space here after the ampersand and the start.
I think we could also return an empty string here if the image doesn't match. This will allow folks to change this behavior in the future, and also avoid an NPE, as it would result in an NPE if they are relying on this behavior.
Why do we need to add system exclusion patterns?
Layout/SpaceInsideBlockBraces: Space missing inside }.
nit: can this be called `isYamlEmpty`? it is not empty
Use safe navigation (&.) instead of checking if an object exists before calling the method.
This should use the new `SendSendToTarget` instead
We should move `_metadata` out of `google.cloud.forseti` and into the common package.
Is this the only way to fix the bug?
Nit: This could be a method on `FunctionCallExpression`.
This should be named `secrets-ssm-environment-variables`.
I don't believe we need this dependency, it's only used in tests.
This is not required because the dialog is instantiated in the same way as the parent, right?
I don't know how `scikit-learn` will support python2.
I think we want to do this to make sure that the input data was actually collected properly.
I've moved the tests to this file since the other ones are no longer relevant.
We have the `global._googlesitekitUserData?.` here already
`capacity` is an int, you should pass a default argument.
"must be used..." - is that true for all?
Can't this be done in the tests itself? (e.g: `test.tsx.js`)
Shouldn't this be a list of accounts instead of a single key?
>CRLF [](start = 12, length = 7) What about Windows and Unix? I don't like using newlines in the case of `\r`. #Resolved
This was only used by the `AuRa` and I don't see a reason to keep them around. I would prefer to keep these methods as they were, but add `VerifyUncles(chain consensus.ChainReader, header *types.Header, uncles []*types.Header) error` and call it from within `AuRa` as needed.
This is the fix for another issue
I don't think this message is appropriate anymore as it doesn't mention usernames that are blacklisted and are not allowed.
is it a breaking change?
Isn't it `500 Internal Server Error`?
This is no longer needed since it isn't used in the view.
What's the reason for this?
This is the fix. The rest is just refactoring from the code.
I think this will cause problems for the future when we decide to send a request in parallel with the other explorer APIs.
I'm not entirely sure that passing a `session.Options` to `NewSessionWithOptions` is the best option.
> oldTimeIntensities.NumPoints > 0 [](start = 24, length = 23) oldTimeIntensities can be null, so we should check for this
What is the point of using the sameClaim var if we already know that this was true?
We should probably rename this package to `helpers`
I'm not sure what the best way to handle this is... I'd rather have some more detailed logic, like the if(condition). The check for whether `must_learn` and `has_learnt` should be in the `dbTradeskillRecipe_Struct` struct, as it would be more clear to read.
@huang-wang this looks wrong, `copy=True` means we need to copy the dataframe to memory. It is a bit confusing because we don't need to copy the array.
Should we also log the error in the handler?
I'm pretty sure that `create` should be a singular, so that the test is clearer
You can use `static_cast<void>(change->num_sent_submessages + num_locators)` instead of the ifdef.
This seems like the wrong way around? If we want to abort the stream, why not just let the user do it?
Why are we adding Linq here? It seems unnecessary?
This line can be removed.
`callable` is a builtin method. I don't think this is correct.
should we call it `Referral` ?
Should we add something here to mention that this should be used in the UI?
The assertion seems redundant with the previous assertion.
Why do we need to disable the message here instead of in the constructor?
I don't think this is necessary
I don't think this is needed.
`void 0` is the default and you don't need to set it.
This is a bit strange. Is there a reason we don't just use the driver package?
I'm not sure this will work. If there is a reason other or more of these, the DB will be corrupted and will not be saved to disk.
Nice, I like that this was a little more verbose, thanks for catching this!
Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.
How does this work with the new default?
This should probably go at the settings.py file.
Should we add this to all of the numpy imports below?
Why change this ?
why change this ?
Should this also be stubbed on v2 for v3?
Can you create a ConcurrentDictionary instead of creating a new one?
Can this log be removed?
Can't you just pass the `device_data` and `queue_state` here? That will avoid the need to pass `device_data` twice.
This would skip the endpoint discovery if the endpoint was specified but was missing (the request has already been parsed).
Is this just a lint issue? It's the `jsx twice` case.
Shouldn't we also return if we're running on a Linux system?
It seems that this could be `final`, as the `elementText` is not changed between tests.
Is it a PCI address or a IP address of one or more VFs?
Why not just `pattern.append("(\\.exe)?");`?
Please move this part of the code to a separate function.
We have an utility for this in `utils/node`. Could we reuse it?
This should be removed as well.
I would rather not do it here: this is just a debug statement to tell users why the config couldn't be saved.
Do we know if the connection actually received an event? I think this might be an issue in the client's pubsub implementation, but it might be useful here in case of unexpected failure.
I'm a little unclear on what this is, it's not clear that it's only about the build file name and not actually the build string that's used in it.
I'm not sure if I would want to stop the master if it's not already stopped. Maybe we could also add a warning that the master was stopped after 100 progress?
This is not a good way to return null. There is no guarantee that there will be a sort order for the same file. The file should only be opened if the sorting order is different from the one in the file.
Can you please remove this from the PR? We don't do that for other files, and I don't really see this in the repo
I'm not sure if this is the correct fix. If the dequeAll returns nil, and the deque is empty, then the dequeAll is empty.
We should make the `FlinkTypeVisitor` `public` as well.
This is not the same.
Is it really needed to have both a `CompositeBlockTracerFactory` and a `BlockTracerFactory`? Can we just make this an interface instead?
Why is this removed?
Shouldn't this method name be `getStaticLangStreamingReturnTypeName`?
This was the bug - this should be `padding: '20px'` and `padding: '20px'`, right?
Why is this necessary? I think `getCurrentMethodName` is a method.
Should we use a different name for this?
This is now duplicated, can it be removed?
This is the actual test, I'm testing the `eligible_observers` field instead of the `proposal`. The tests are checking if `proposal` has been set to the `ncr` work_order, and if it was set to `en` it would return an empty array. I'm not sure which would make more sense.
This will break the `.String()` conversion of the string to a string, it's better to use `.String()` instead.
Is this used anywhere?
>JSON RPC tracers. [](start = 24, length = 17) Typo: JSONRPC -> JSON RPC
Should this be a URL or a String of a URL?
This command does not return a list of targets, it just shows a list of targets to be filtered. It returns a list of BuildLabels.
This is the fix I'm talking about. Previously, this would return a tensor, now it's a cuda tensor. Does this change the return type of the function?
Do you know why there's no `*` here?
I guess this is not a typo, since the `addBack` function is `async`
Why is this needed?
Nit: can you change this to `TwoHundredFiftySixMiBSectorSize`?
Is this really correct?
this should be a boolean
Why did you change that line?
I would have used a `string` here, as it's a little bit more readable
Can we please move these strings to AzkabanUtils as well to keep the constants simple?
I don't think this is the right thing to do, the zfs command is going to return a different output if you're not using the BASH binary, I think it should be fine if you do the same for BASH - just return the string. You could then use `strings.TrimSpace` which is probably simpler (but I think it should be faster than doing this everywhere).
I don't think this is the right place for this - should be in luigi.util rather than here.
Nit: I think we want to call this `isValidDimensionFilters` to follow the same pattern as the other one. (We could also call it something like `isValidDimensionFilter` or `isValidFilter` or something, but that seems more natural.)
This is not a very clean way to implement this
Can you remove these lines? We want to avoid action creations in the middle of hooks.
Why do we need to make this change?
What does this change have to do with the new test?
Please don't change code.
nit: maybe `buildEqDeletePredicate` is more descriptive
Is it necessary to set them twice?
This should be in `src/plugin/operator/memory_plugin_test.go`
The logic in this class should be more robust, especially if you use a different `ProductFragment` in the future.
Should we add `choices=('4:10', '4:10', '4', '4:10')` instead of adding two arguments? Also, should be `type=int`. I know, `parse_long` will parse the type, but I'm not sure how we'd handle that, so that may be a bit overkill for this PR.
Should we add a deprecation warning in the case `Symbol` is given as a parameter as well?
Why are these removed ?
@jlsherrill do you think it would be more efficient here to do `partition(&:in_progress?).flatten` to make this method simpler? Or would that also be too complicated?
Why is this removed?
I'm not a fan of "local cookbook template" as a word. I would be more in favor of "ansible-galaxy init" or even a new sentence like "This is similar to an ``ansible-galaxy init`` skeleton. Please refer to the ``init scenario`` command in order to customise..."
This seems like a bug in the current implementation -- we can't assume that `encode` will be specified if `pathlib` and `write_text` are specified.
Please move this import to the second group of imports.
Why is a channel not interface{}?
I think "error creating gas price contract binding" is more accurate
This needs to be `action="append"`
I'd prefer to use `isDarkTheme` to be consistent with the `Theme_Material_Light` class, so that it's more clear.
This should be in the if-check
The indentation is off here
Can we use the `toSelect` selector here (I believe it's the only element in the selector)?
Is there a reason to keep this `getAttribute`? It seems like it could return `undefined`, which is a bit confusing to me.
@krzyzacy can you add a new line after here?
I think this should be a `machine.Interrupt` so you don't need to add a file just for the interrupt pin.
why is enum.h being included here?
This should be `logf`
I'd prefer to have an early return in the case of no bytes. Otherwise, a new user could pass in an empty `ptr` or `bytes` to a function that isn't actually prefetched.
The warning is a good idea, but we shouldn't use it as a message.
Can we have a test for this?
I'm confused about the difference between `state->opaque` and `next->opaque` here, but I understand that's just an improvement. I can't think of a case where I would expect one of these two to be different, but just to be clear: `state->opaque` is a copy of the current opaque region. If we have a new opaque region, we're going to have two opaque regions, and so should be using the same memory. Is it possible to make the copy only work once and only clear when we get an error out of the buffer?
Can you change this to something like: "If the issuer account is set, it's guaranteed to be set in the user JWT." ?
@sjpadgett I have updated this to update the content for this controller.
nit: I would put this before the DEFAULT_LOG_FMT to reduce the dependency order.
If there's an overflow, we need to relocate the primary buffer, too.
Why is this interface necessary? I thought we only had interface for queue load.
I'd suggest to put the new call to manage() into a new function, so it's easier to see where it is called and the code is reusable.
I'm assuming this is just to make the regex less greedy?
We should move this to the `blacklight/document/cache_key` namespace.
The default value is `None`, so I think you don't need to check `isinstance(obj, string_types)`. Also, I think you don't need that if statement anymore because you have the check in the `is_string_type_param` function.
I'd like it if we had a test where the user agent was set as well. We'd need to make sure this doesn't break the test
I'm a bit unsure why we need this?
I'm wondering why we should lock for every iteration. Why not do the lock only once?
I think you can remove the `chain_addEdges` API now.
I would like to keep this package in pkg/rules for now, but maybe we can make a separate package for rule formats?
I think this is the default value for `SecretBackend`, so the default should be used here.
Can we remove these lines if not used?
Shouldn't we keep the default case and have the one above return "???"?
This will fail if `lib` is not present in `install_modules`.
I think you can remove this, it's only called from the `submit` callback.
I think you should do something about this: ``` Ruby self.approving_official ? self.approving_official.email_address : self.system_approver_emails.first unless self.pending? # TODO: check if pending? # # If we don't have an approver_official, do something if we don't have one.
We should also add a TODO note.
I think `mixed` is more correct, `mixed_arrays`
This will also be removed by the next change.
Can remove `public` from here.
This is not correct. The manaleechchance is not the lifeleechance of the manauraw
We don't need this anymore
I think this could have been moved down a few lines
We shouldn't hardcode the values to `1.0` and `1.0` because we will never change that. It's just a tiny nit, but it would be good to be consistent here and in the other places where we're doing `longKey:1,` in our test data and `doubleKey:1,`.
This is a bit of a misnomer. It should be returning the base64 no metadata, not the base64.
Why are the defaults set at all ?
This is just a helper method and it's not used anywhere except in the app?
`metricPoint` can be null here
This should be a `describe` with an `it` instead of an `it` with an `end`
This should be "factory"
We can probably drop the `&&` here if `TMP_DIR` is already an absolute path.
I'd use `pytest.mark.parametrize` here, because it is the standard python way to parametrize the test.
Why not pass in the original `TableOperations`.
This is not quite right: if we have a file called `::1.php.php` and there are two `::1.php`s we would still want to treat it as a class reference, which would break the current behaviour for files created from that directory.
`Objects.equals` should be used here too
I think it'd be better to have a `close(ch)` function and do this in a `defer func() { _ = conn.Close() }`
I don't see the value in this test. It tests the network API of the node. If the node is the only network, then there are no tests to test fill_keepalive.
Isn't it better to put them on the same line?
Is this assert no longer valid?
This is only called from Start, and the only place you're using this is from the main.go - is there another place where you can put the `Start()` method into the networkImpl?
Do we need to check if `RetrieveCommand` exists in `Config.Cache`?
You can use step.charAt(0) here.
What about `if (message.StartsWith(InvalidHexHexPrefix))` ? I'm not convinced that we need this. The exception could be that the message is a hex string, but that can be a string that starts with `0x`
nit: add period at the end of this
This is fine to keep, but we shouldn't do it in this commit
this is the main change.
We might have had issues with the old version of ParseEnum with a struct with a nullable enum, I'm not sure if that would be an issue.
I don't think you need to add this because it's not used in the rest of the file
I think there is a missing copyright header here
This is the wrong place for this dependency. It should probably be in the `init_startup.go`
This line should use `conn.SetTimeout`.
We should not be marking the page as read-only here. It's a very dangerous thing to have.
This is a bit odd... can you do `self.proposal.approvals.non_pending.map(&:user)` here instead?
I wonder if this could be moved to the `task_processing.py` instead. It would reduce duplicate code and it's not really clear what `task_processing.py` is about.
I think this change is not needed. We have the signal handler registered with the signal manager for KILL
Should we also include the `if (platform !== 'android')` check here? Or maybe even add a check in the `if (platform === 'ios')` conditional, so the other one isn't needed in mobile case? Not that important, just a suggestion.
This should be an APIMethod
I think we should just leave the `[]` array empty. I think we can just change the initializer to `self.shard_key_fields = Array.new` to avoid the double empty set check.

this is a breaking change. We should not make changes to a public facing API
This is not the correct command for this. We should check if the command matches the pattern we use on the host, then use that to query.
Why is this test being removed?
I am not sure how we want to test the feature.
This will need some css, but we may be able to use `style: { width: auto }}`.
If I understood correctly, this method can get rid of the `metaCache.getTable(..)` code path.
This doesn't seem to be used anywhere. Please remove.
This function is pretty generic, it seems like it could benefit from some unit tests
Extra empty line detected at module body beginning.
This is not really needed
This should not be here -- if the user passes 0, the error is just a no-op and the user is going to get an error message saying "Zero_count is not a valid number".
This method is now only checking if a.name is not empty.
Can you remove this function? This is just one of the existing `DataFrame.groupby` functions, and the behavior is the same for all `Column`s, which is not necessary here
We can remove the import from `internal`.
Why remove the error?
nit: I would call it `fileName`
This error is now triggered twice if `limit` and `perDocumentLimit` are both specified.
why the change of return types?

I don't think it's useful to have this image on the homepage. I think it should go into the `app.js` or `app_assets`.
Should the status be changed to failed?
This change looks good, but should we add the `favicon.ico` in a new line?
The `e` here could be useful for debugging, too, if it can help with debugging. I don't want to swallow it.
I think it's good to move the column names to an `__init__` method, but I can make another PR for that.
This should be a config key not prefix, otherwise it would be confusing to use two different configs with the same default value, or maybe they are all different?
This is a bug. If you have 2-1 columns, you get a list of `1` values, not a list of `3`
I'm not a fan of this import order.
nit: we could probably use a `tls.Config` type here and avoid `nil` checks.
why is this test dropped?
Should we add a warning if the input isn't a tuple and allowed_border == 0?
Why do we do the `response.respond` here? I don't think that's what's intended. It's supposed to return a JSON string.
I think these need to be in the same file as the SDK.
We should use the defer defer in the else condition, so we do not get a race condition.
This could use an extra parameter to make it clearer that this needs to be done with the vector.
File is not `goimports`-ed (from `goimports`)
Why don't we just make this an int? Isn't that always the same duration?
Why do we need this?
I'm assuming this will always be non-nil if `IsRecordingEvents()`
I think this needs to be a bit more verbose.
I think we should still be using the same rate for the debug log, otherwise this will be confusing. Also, I feel like we can't do this if we're in debug mode.
Is this a typo?
Please remove 'name suche' as it is not a word.
Why did you delete these asserts?
Can you add a TODO here, to remove this when we can remove `structsEqual(a, b)`.
This is a really bad idea. This method is not going to be very useful, as it requires a `CallContext` to pass the relevant options. This will make the code more readable (and easier to understand). Instead, you can call `getCallOptions` directly on the `marketContract.GetBenchmarksQuantity` call.
I think the `order` is already set on `email_specs`, so this can be removed too.
This is the only real change in this file.
This is just a reminder that the old `no-member` is no longer required and can be removed. But I think the new `pylint` tag is still needed because of `no-member` in the new line.
Is this required for this PR, or just for another time?
Isn't it possible for a user to set this feature without providing it? I think it should only be set if it is not enabled.
This is not needed because of the `assert` statement below.
I'm not sure that the `roles` folder is the right location. It seems to be a directory with the roles. But I don't know what to do with this one, it seems to have been a long time.
Why import this?
This is not correct as `child` is an array. `push` will copy the array, not push the whole array, which is not correct for `reverse`. So the previous code would have worked
Can we rename this to `LookupFactoryAddress`?
I believe you need to do `v.Event != ""` here, and for `v.slack`, since we do not want to allow a blank string.
This should be `provider.AccountExists(_address1).Should().Be(true);`
I think that this is fine since the log level is always `fine`.
Why change these?
`interpreters[executable.extname]` would do the same thing.
I know this is not really part of your PR, but maybe the assert should be changed to a `g_assert_always (self != NULL);`, otherwise it's going to get a segfault later.
`getResponse` should work on an object.
I guess this is just to help the `PackageEntry`, no?
I think that the `startTs` is always the same.
Should we check for `account_id` being undefined?
Why `#remove_target` instead of `#add_target`?
I wonder if there's some way we can use the `Code` constructor here. That way if we ever change the code, that will break. I wonder if we want to do this for all the messages that have a `Code`?
This change is necessary to make `get_target_values_to_unpack` work.
This seems like it could potentially be a `const` (I'm not certain that the linter will complain about this).
It seems like the return values are unused?
I'm not sure this is what we want here. It looks like there are two children, one that is always an array, one that is not.
I'm not sure about this change, it's not clear to me why List is being used in List0 and List0.Cons. Maybe this should be List(List) and List(List) should return List.empty(), and List(List) shouldn't return List.Nil().
You forgot to include the license header.
Can you add the copyright header to this file? (and also the line 23)
This is a bit strange. The original is a bit confusing.
Why are there two slashes here and in the other two places?
I'm not sure if it would make the code cleaner. I think this would be a good idea as a follow-up.
@Trott Can we do this without a fallback? This makes it easier to override in the frontend.
Why this change?
I am not sure if `clientdata` is really needed here. We can use the `clientdata_flow`.
This should not be public. The tests should be private.
Why did this not work before?
Why is this needed?
Do we need `.catch` here?
Can we just use `memQuotaRatio` here instead?
Is it a mistake, or is it not needed anymore?
Can we have an `enum` for this? I know that it's just a bit confusing to have a value that could be between 0 and 19.
Do we really need a whole new struct?
I think we can remove this, since the same code is used in the other two methods above
I am not sure what platform is, what it is?
@kalpawiec I'm thinking about moving this to a common file, it would make the code easier to maintain.
Is this not a bug fix?
Should this be `sock.sr1()`?
This is a bit hard to read. Can you break this up into a separate method? (e.g. `isMethodCall()`)
Why is it not just `from six import iteritems` here?
Nit: `Sets`. Also, can you update the `JsonSerializerSettings` property to say `JsonDeserializerSettings`, so the name matches the property name?
Is `bzz` a typo here?
this is actually a bad pattern as it creates a new instance every frame.
I think you forgot a `{` on this one
Can we have more tests for the error case?
This doesn't seem right, it's the same as the previous commit.
Should we use the `DataSerializable` or `DataSerializable` that is used elsewhere? (or `@AutoValue`)
I would have thought that we should always add the entry modifier event, even if it is a higher level entry modifier.
We could probably get rid of this trait and add a dedicated `__call` method. This will allow us to remove this class entirely.
I'd rather not have the code be dependent on the address format. Can it happen that a service has a different format?
I think that you can remove this test now since we have `start` of the range of `[0, 5, 0, 10]` and `end` of the range of `[0, 7, 8, 9]`. You will also need to remove the test case for `start` of the range of `[0, 3, 3, 5]`, too.
How do we decide which gas price we use in the transaction process?
You can replace all this lock with just using `!blocks.empty()`, since the return value will never change after the function returns.
I don't think we want to show this here. I would just add it to the `defaultParams`
You might be better off just putting the subscription name on the topic name (e.g. `"subscription_name": "myname"`)
I don't think this change will fix anything
This should be `to`.
Why is this change necessary?
I think you need to also revert the changes to this file. (I'm not even sure why they were there, but they were here for the first time.)
I think `Tag` is a confusing name, maybe `LastTag`, since it's not the last tag on the prefetch? `lastMarkedTag`? `LastTag`?
I think this will create duplicate marker tables?
I think it would be better to have `ASTTypeBody` here instead of the `ASTAnyTypeBodyDeclaration`, since `ASTAnyTypeBodyDeclaration` could be a generic type body.
These should probably be named `TIMEOUT_TIMEOUT_MS` to be clear. (Same with `IMPLICIT_TIMEOUT`.)
Should there be a default implementation for this method? Seems we have some other methods in Table that do this.
I don't understand why you removed the `is not None`. Why are you removing it?
This is not alphabetized.
Use 2 (not 3) spaces for indentation.
Same as below, I am thinking it might be good to use a `aws.StringSet` as well.
Is there a test for this?
Is it really worth a `return`?
I guess we need a better name for this field?
Not your code, but this should not be public.
this might be better as a `then(model => ...);`
You are checking `getAttribute('role')` for `form`, which means it will return `null` if the attribute is not present for this node. Please use `aria-get-role` instead.
This method is only called by the `packageUpdated(List<PackageLoader.Package> pkgs)` method. It seems this is the only change that can be done in the `packagesUpdated` method.
I think we can drop this. I think it's important for `__dir__` because it's used to get the target class.
We should keep this here as the options object.
I am not sure if this message is correct. I don't think we want to use a valid token for this. The message should be a string that says something like: "compact JWS format should not have two parts: token contains an invalid number of segments."
@Fryguy is this ok? I can't find the reference in the spec file for `build.gradle` in GradleW. Is that what you had in mind?
I think that it would be better if user set the default value of this option in the config file.
Is this a BOM?
I think the original was better
I'm a bit confused about this one. Why does the `admit` command need the `admit.json` file?
We should also include `ENABLE_JSON2` here.
This is a little tricky, as we are re-creating a new array in the first place (in the catch block). We should be able to do the null check directly.
You don't need this class anymore, right?
We need to make sure that we get rid of the `LOG.info` as we are not interested in these messages.
this import should be grouped with the third-party imports.
I know this is only used for AWS clusters but is there a reason that these are in `install/constants.go`? I feel like they are more specific to the install and not for other clusters.
std::vector  std::vector e
Is this the default value?
Why is this `false`?
If the refresh token is revoked, this will log an error and continue to process. If you have to do the login and then log a warning, it may make sense to log it and retry
We should test that `GetConnection` is returning a connection if the connection is found.
I think you can remove the `pending?` here as well as the `begin` and `end` blocks.
I would rather see this moved into the `addItem` function since the `fileDownloaded` state should never be true for local feeds.
@kuzmany why was this block removed?
I like it, I think we're using the same docstore version everywhere. I don't like the idea of adding the same docmap to every single type (which I think is more common than the old one), especially since the docmap is used for the other types (e.g. int64). I think we can do a `DocstoreType` struct and pass that struct in (or just pass the string as-is, or whatever the value of the field is).
Why not use `self.engine.get_bza_report_info(...)`?
nit: Can we call this `startTime` for consistency with the others
`<account_out>` seems a bit odd, what does it stand for?
This will return `nil` if there is no show.
Can you remove these logs as well?
I'm not quite sure if this should be kept, and the `config.TB()` should be deleted.
I would suggest to rename this package to `sm_errors`. It is a more general name, especially since it can contain many other errors.
shouldn't this be `expectedFilteredErr1`?
This will break if we have no http3.
What if value has more than one property? Will this throw an error?
I would just make `options.roles` a string.
I don't think this should be exposed in the config, it's only being used in `withCollection()`, and not in the `colocate()` method. I'd prefer to move it to `ClusterProperties`.
I think this should be a map[string]*big.Int
I am not sure what this class means, is it the code snippets from the error message?
You can do `nuc.IssuerAccount = optIssuerAccount`
It's a bit strange to me that we pass in an error to the callback here, but then we check on the error callback. What is the motivation for that? I would rather pass in an error to the callback than the callback in the callback to handle the error.
'mongoErrorContextSymbol' is assigned a value but never used no-unused-vars
`entry_path` can be null. It should be in the doc block.
The first part of the string should be `{0}{1}`.
Nit: `server` => `server status`
This is not a good idea. If we are going to skip the last entry from the last index then the `read_from_tail` property will not be true.
Why not pass in null?
Please add docstring to this method.
This will not change the behavior of the method and will break things for subclasses. We need to use `apply_default_attributes` in the base class.
`this` is a `DoubleSumData` and `DateTimeKind.Utc` is not needed here
This is probably a typo but the translation doesn't appear to match the string above. Should this be `beta.replies.flashes.success`?
Can we use `if (headersValue != null) { ... }` instead?
Why this change?
I don't know how to make it compatible with the Windows API so I think this is a bad idea. The `dr_os_version_info_t` has the version number, so it should be set in the first place.
Is this variable used?
Layout/TrailingWhitespace: Trailing whitespace detected.
Is this ever reset?
nit: `ready` is not a very descriptive name for a variable. How about `ready`?
please add this to the dictionary of item.h
Shouldn't this be a boolean column? If you want to make this feature optional, you should make `complete_time` a date and `status` a string with the corresponding values instead of an enum.
Shouldn't we handle this before calculating the path?
Why don't just use a static final instance of SSLSocketFactory?
This seems to do the same thing as the `config.SVIDPath`. Should it be unified?
This should be defined as `constexpr` or `static constexpr`, otherwise they are not re-define everywhere.
This should not be implemented - this is just for the project api.
This method is used only by integration test, so I think it should not be in the integration test.
Line is too long. [101/100]
Is `.ToArray()` really necessary here?
I'm not sure if `env` is a good idea, maybe `shell_path` instead?
Can we change this to `contentType.toLowerCase().equals(MediaType.APPLICATION_JSON)`?
`patched_logger_critical` isn't used anywhere, so I removed it.
I don't really like this. Why not just use the cached nonce from the blockchain bridge? This is the only use case in the chain where you want to use the nonce for the deposits, but this will cause us to get all of them.
Do we care for the tertiary colour?
Is this necessary ?
Can we use `.de` here?
why was this removed?
We could probably remove these and just have the code call `createVolume()` instead.
We should not rely on the streamName but instead rely on the streamName and allow no subject. So, we should not rely on the streamName.
This is a little strange for this function to know about the `skipCacheLookup` parameter. Can't we have this logic in the callers directly, rather than having the caller pass in this boolean?
Please, remove the empty line
@liggitt do you have opinions on this? I am not a big fan of a `-b` flag that we can't set in `create()`
I think it's worth adding a `load_bolt_config` method that will do this as a default parameter in the initializer (or similar) of all other Bolt classes that have a `load_bolt_config` method. Then we can use that method to set the value of `load_bolt_config` as a default, and have `bolt_config` return the value.
We still need to check if the window is too large
I think this should be `Info` instead of `Warning`.
This seems unnecessary, but it is not related to the issue.
This is a double cast. The value is already an unsigned int and the type is uint32_t.
I don't think this is correct, the license needs to be updated.
Why `key` instead of `key_`?
Can we do `if not self.isNvdaStarted` instead, as we are checking the attribute in this function, but we don't use it?
Space missing to the left of {.<br>Space between { and | missing.
I'd like to avoid adding a new feature, if not needed yet. This is not an option that is used by the transport framework and there is no need for the code to be changed.
Is there a reason for the change from String[0] -> String[] {"library.yaml"}?
We can also remove the `WithContext` function entirely and use the same one everywhere instead.
Should this say `RemoveDir` instead?
I think you'll need to also update the `TestClient` and `TestService` tests. They should run against the same region.
This was breaking `/rpc`
This file was added to fix the analyzer.
Is this still needed?
I know this is only a single route, but it would be better to have a `match '/pages' => ...` here. It seems the pattern is not a big deal.
Is there a reason that this is not using `LocalVariableName` instead? Is it because the variable binding is not local?
Should this be a `.find` to ensure there's a single template?
I think this could also be `if/elsif` since it only matches `xxxxx` now.
This is a little odd to me. I understand why this needs to change, but I would have thought this would be better in `_set_data`.
I think `get_if_not_exists` and `create` are the same thing?
This will trigger a re-key event even if `rmd` is not `rekey`
Why is this gone? It is not clear why the specs need to be run in random order in the first place.
I think this can be `elHeight` instead of `style.getPropertyValue('height')` since it's not an absolute height
I don't understand the need to check if `rememberMeServices` is actually `AbstractRememberMeServices`. I would expect it to be just `rememberMeServices`.
Why is it necessary to do this check here? I would expect a user will want to do something about the command type and not just let them disable the AdoNet type. If that is the case, we shouldn't need to add this check. We should check `AdoNetExcludedTypes` and throw an error that tells them that this command cannot be created.
Please add gofmt.
Why is this change necessary?
Missing license header.
This file can be removed
I'm not sure we want to remove this. We want to clean up on each shard. This means that if a shard has been re-created and it doesn't need to be removed, it will always be deleted. In other words, it won't be used, and we want to do it only when the shard has been deleted and the cleanup is successful, and we don't want to clean up any replication tasks.
This is the only change. The rest is just cleanup
I don't like to have an extra function to get the bounds. It's not very straightforward, but I'm not sure why this is needed.
This is the only place where this would be an actual alter query. I think the best we can do is to have a table in the db.
why not simply `.as(self)` ?
Is this the only reason for this to be on the base class and not the base class?
Is this a breaking change? I'm surprised the tests didn't catch this.
Why are there two implementations of this interface? Is it only necessary to provide an interface for IConnectionHandler ?
Is there a way to remove these from the generated code? I'm not sure I like that.
Maybe add that this will delete data files in the future?
Should this be `stub_request(:get, "http://api.hostip.info/country.php?ip=0.0.0.1")`?
I'd rather see this in `util/Promise` than in `util/Promise.js`.
Is the filename always going to be "algoh"?
This is also not right, the block size is different from the current block (the block is in blocks of size 1 byte).
This alias is unnecessary and will be removed once you remove the alias
`unpack` is not a well defined attribute.
Why was this removed?
should we close the `stdin`?
This can't be moved as an optional dependency.
Why not delete this method?
Please use explicit names for variables.
Isn't the contract already the same as this one?
Can we make this a constant on the `Image` type instead? We don't have to worry about the naming of these two.
I'm not sure if we should have this file for Linux, but it's not a good idea to put the file in the libpod package, we can keep it in the libcontainer package.
This defaults to 60, which seems pretty large.
I think we should validate the error at the webhook level.
This is not necessary for master connections
I'd move all this code to a `config` block.
Why don't we have the enum here? It should be the same as the default type.
We should be able to use this in test code
This is not a style issue but this can be simplified to `if (len)`
I think you can add `textNoDataString` here as well, since this is an existing feature, but I'll fix it in your branch
You should probably use getAttribute() here, and not read() at all.
Can this be changed?
I don't think we should be modifying this. It will make the controller controller less error prone if the client doesn't have to deal with certificates.
The `return` instruction is not used in this case and it is not translated in the new way. So I think it's better to remove it and always call `instr_set_translation_mangling_epilogue` for the first call
This import is not necessary because the import is in `tests.namespace_test` and it is used only once in this test file.
Isn't it better to have this in the beforeEach? Or is `xit` used anywhere else?
I think `runUnifiedTest` is more appropriate name
Should we be more consistent and type this as `: string`?
nit: should we use `.hashCode()` for consistency?
`with products` is a bit ambiguous
I'm not sure how this works, but is there a case that the pod would be considered to have been deleted by GC and the node is gone?
I believe there is an indentation issue here
We should have a method to convert the action to the appropriate type
I don't think there is a need to check if n.equals(null) as that is the same as this.
`glob` => `glob pattern`
This should be `const&`
`note` should be in the standard library, not docutils
This should be CloudBuildSourceStatusChanged
I'm not sure if we want to be more verbose here, as we will be adding new fields for all the platforms.
Do you know how much memory this has?
This is not really needed for a controller.
Why is this being added here but not in the other places that check this logic?
This should be `from pyramid.exceptions import JsonPatchException, JsonPointerException`.
This file seems to be missing the `@develop` directive.
This sentence does not follow a code style guide (the sentence is longer, but has different formatting). I wonder if we should just add it back in to keep consistency.
Why do we still need the `sessionManager`?
The `stop` method was removed recently.
Shouldn't the branch ID be the opposite?
I know this is not the point of this PR, but I think it would be better (and probably more consistent) to use the `X-Forwarded-For` header for these two cases.
You can also make this a const.
Why not just import from `datashader` instead of try-except?
nit: remove space
I know this is a bit of a hack, but I was thinking if this could just be a log.Warn() since this is an error that is logged to the log file.
Use the new Ruby 1.9 hash syntax.
I think this might be fine but I'm not sure why it's needed.
This is still in the scope of this PR.
Is there any way to assert on the error message as well?
I think the check should be done in `SetHeader()` instead.
Can you revert the changes you made here? It should be unrelated to the actual fix.
This can't be done directly in the future; the underlying code must be changed to return the appropriate result.
Is `mutate/addlabels` a duplicate of `/mutate/anp`? Is that intentional?
This change is a great change, but I am pretty sure we need the ownerRef for this. @mikedanese @stevenctl is this something we want to do?
Should we also add a `platformPkgManager` type?
This change looks like a behavioral change, isn't it?
What's the value of this? Does this work on arrays?
I guess this needs to be a separate PR, but I'm not sure how this works. If `firstname` is an empty string, we can use `concat_ws` and the `OR email` is an empty string. The only issue is that this will only work for `firstname` and `surname` that are empty.
why change this?
@jonathansissov, this was the one to use for a vanity test, so I just added it to be sure.
This is not necessary as `GetRawDiff` already handles errors.
Can you please revert these changes as part of this PR ? They should be reverted in my PR if it's not necessary to keep them.
Is this used somewhere?
This should be outside the switch since the code is not doing anything with the returned boolean
Is there any specific reason why this file interface is not in the `com.fsck.k9.service` package?
Please remove parenthesis (as per PEP8)
should this not be exposed to the user?
this will cause an error if the app doesn't have any secrets, but the secret key base is the same as the config secret_key_base
I am not sure if this should just be `objc` or not, but in the other words, `bool objc_enum = enum_decl->isObjC()`
I think we could add this label only if we are in the active transaction, but it's probably not a big deal.
This is a bit ugly, but I wonder if we need to do anything about it? I can't figure out what that's doing.
@danwalmsley `request_context.go` looks like a typo here.
Should we fix it for now?
Can `Task` and `Task#files()` be reused?
I think the "ubuntu" string is not needed here, as we already use it elsewhere on lines 236-249
Why is it required?
@sttts I'm not sure about having this return because it is not really an error, but just a return statement.
Should this be a relation? Why don't we have one for the users?
Is this used anywhere?
This is the wrong adapter
Is it necessary not to add the casting?
We should probably add some sort of `drive` prefix, e.g. `files` -> `driveFiles`
I guess I can add this one, but maybe it can be used in other places in the future. It could be used here too...
This is a good candidate for a helper method that can be reused across the test cases. Also I would prefer a test with multiple tests with only one test, so that we don't get regressions on the test case output.
I don't think this is necessary.
@barklund is this the correct way to go? If there's no images, it'll return `null`.
I think it would be better to call this `GetWeightOfState` and make weight a separate type rather than the two separate arguments. IMO, the function `RunStateTransition` should accept either `types.TipSet` or `stRoot cid.Cid`.
@tkaemming Is there a reason why `\s*([a-zA-Z0-9_-]+)\s+OBJECT[^:\{\}]|\{[^:]+\})+::=\s*\{([^\}]+)\}` is removed?
why the removal of @?
The translations are still wrong, it's `name%`
Why remove the bounds checking?

Can you please add a description for why this method is necessary?
I don't see any usage of `manager_env_prefix`, does it have to be changed?
This is the actual fix. Everything else is just formatting.
`utilwait` is imported but not used (from `goimports`)
I think there's a function called "getCompany" that is called here, and the other two should be removed as well
This should also be done in `onTimeout`, but for now I'll leave it alone.
this is missing a test, right?
This will also need to change in the `dashboard_controller` to use the new `FacetPaginator` class as a fallback.
I would expect the CXX flags to be set by the user at compile-time, not at runtime. That is the default for the CFlags field.
Please do not modify formatting here
Can you update the json tags to be consistent with the field names?
Why not just `if params[:read_tou].blank?` ?
Can we change this text to `Scheduled for cancellation` instead? I think the intent of the test is to check that an error is shown when the cancel is cancelled.
Why did you remove the `udp:` here?
I think the check should stay. I think it should be `< 0`
This will fail if two segments are in the same segment. We don't know if this is a problem or not.
This should probably be moved to the `if` statement on line 769. It is used by `config.go` in that function.
Is this really a method that is only used internally?
Shouldn't be using `ks` here?
Why do we need this? We already have a constant to check if we want to use an external scheme in the hadoop options
This could be `functionName(string reason, Exception exception)`.
Please add the issue number. Also, please check this one for the TODO
Should these be prefixed with `git` to match the actual fields?
I would suggest `makeflow.failed` instead of `makeflow.abortd.`. The `.failed.dir` will always be the path to the `makeflow.abortd.dir`, and it will be automatically added if it is missing.
You can replace this with just `listen['track_metadata']['duration']` since you check if it's in dict?
this is the line which fixes the issue.
I'm a bit confused. This is just to make sure we're using `pre` for the opcode, but it is not doing anything for the instruction?
`tabBarIcon` was added to allow for a more flexible `icons` option. This way, the icons will be added when the component is rendered.
I'm not sure why this was removed, but this is still useful, since we want to get the current split counts from the tagger.
Use 2 (not 3) spaces for indentation.
I think this needs to be done somewhere else, so that we can make the socket readable and not just in that case.
I assume this isn't used anywhere?
Should this be `output.table.project_id`?
this is actually a fatal
We should make these configurable via `ParquetConfig`
Should this be `{{ color['completion.category_font'] }};` instead?

I am not quite sure if this is a good idea to do the metrics initialization in the SecurityConfHandler. I would expect it to be done here, not in a plugin (it could also be done in the SecurityConfHandler, but in a different way) - as the plugin should always have the configured metrics (if configured) - it should not need to be initialized at all.
This should check the player's account type as well.
I think this assertion should be removed
This should be `Desugar().Errorf`
This was a bug. Now `droplevel` only drops the levels that exist in `level` (as in line 233), while this PR drops the levels by 1 and sets `level=-1` and ignores them.
We'll need this for the other settings, but this will be a breaking change for users. I don't think we need to worry about this.
@joperezr - do we still need this interface?
`byteslice` returns a new `MemoryStream` instance which should always be freed. `in_buffer` is a plain `string`, so using `buffer.slice(index..-1)`, `buffer.slice(index..-1)[:-1]` is probably a better choice.
Can you make these strings consistent (yank -> text)
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This seems to break a lot of existing caddy configs.
Why did we remove these? Are we expecting these pages to be deleted?
I think we should keep the original import order.


I don't think there is a need to have this change. Can't we just do `List<WebElement>` and then have the other two implementations use `List<T>` and the old one call `findElements(By by, T)`, then you have the same result.
I think this is now handled by the server.js handler
I'm a bit torn on this. This is the interface that we use for other methods, not just the ones we expose to the user. I think it makes sense to keep this as io.ReadCloser.
I think we should be fine to use the `officehours.url` here as it's already in a `static` section.
This should be the default, not 'NM' since that's what we're doing with the color.
This should be a string too :)
I am a little confused why we need to log this.
I'm assuming it was intentionally changed?
I'm not sure about this change. If we're passing in a value that isn't in the `Preference` object, then `readPreference.mode` will be undefined. This means that you'll end up with `undefined` as the mode, but it will still return a valid value in that case. If I'm not mistaken, `ReadPreference` doesn't have a `mode` property, so you can't return a value other than `Preference.DEFAULT_MODE`, and I don't think this change is safe.
I wonder if there's a way to remove `read` and just do `opts = { read: criteria.options[:read] }` directly?
This is the change. The `ReadManifest()` method only calls `toDF("file_path")` and `ReadManifest.distinct()` is not called in any parallel fashion.
This should be `Errorf`
This will break the public API for users. It would probably be better to leave this as is, since it is a public API.
This should be a `test_cloudtrail_with_botocore` function instead of the current `test_parse_cloudtrail`
I would use 'delete_medication' here as it is more clear it is the verb
This should also be done on `auth` since we don't actually have an id, only the provider and id. This way, we can remove the id from the `auth` method and make the code simpler. We'll only need this if the id is actually set.
The convention is to use snake_case for variable names (e.g. `CMD`).
I think that `(void 0 + 1)` should be `(0x1000)` to test the width returned from the function.
Should we move it to `KokkosCUDAGuard` instead of in here?
Should we have a static constexpr for these magic numbers?
`array_key_exists('lazy', $attributes)` can be removed here
I don't see why this should be configurable.
This should just be injected
I don't know why we need `fieldId` here but we should probably rename the field in the migration guide to avoid confusion between "partition_id" and "field_id"
I think we need a `check_acked_status()` at the end of this `if`?
Why do you need to change this to `URI`?
This should be using `stashEnv`.
This seems like a lot of work to be done for this PR. Can we not make this simpler?
`ndeltas` -> `deltasCount` I don't see what this struct is used for.
This is a bit unfortunate...
I'm assuming the reason to close this on the init function for the first time is because it is not needed when we start and then call Start. This makes me wonder if we should instead call Stop at the beginning of Init, and then call Start again, so we don't need to close here.
I think we should probably move the task to a separate file, so we don't have a mix of different tasks.
Can you add `#include <ccygwin.h>`, since this is a core class method?
This should probably be `@example` as that is what the other methods do.
I'd prefer if there were a way to get the tag data without using the helper function and just call it here. This function can then return the result directly.
This line is a bit awkward since it will throw an exception for an EOF.
This is not a test function so we should not import it from this file.
Is this line really necessary?
I would prefer `if !cfg.External.Enable {` here.
This seems like something that should go in the `api.go`? The `default` package is already pretty big for a public interface for something.
This file is not being used. Is this intended?
This can be moved inside if-else, since if the configuration value is not set to a value, the function will do what's needed.
this needs to stay?
This is actually the bug. Previously, if we had `lowerFuncFast`. It will still skip calling `LowerFuncCoro`. That's because this code was in a loop that was not run on the first basic block. Now, there is a loop that calls to `LowerFuncCoro` that doesn't run on any basic blocks.
nit, maybe `VXLAN_UDP` for consistency ?
Nit: I think this should be something like `SuccessImportOperations` for consistency.
Why is `@rbuf` global variable needed? I don't see this being used anywhere.
Why did you change these to `finest` instead of `info` ?
The version number is now 8.
Can remove this TODO now :)
`Age` is the time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. This message may not be guaranteed to be set in happens-before order between separate operations. Clients may not set this value. Clients may not set this value. Clients may not set this value. Clients may not set this value in happens-before order across separate operations. Clients may not set this value. You can use `CreationTimestamp` to make it more consistent in the future
I'm pretty sure this is not needed since you're passing the right `pred_map[..., 2:4]` directly to `torch.cat`
Is this a change of behavior or was this just a cleanup?
Can you move this into a helper? It doesn't really belong in the `Result` instance anymore.
This looks like a good idea to me.
This is not the same with the other change in this file.
Please import all config related commands in this file
Why not `return !TEST(0U << 31, enc)` ?
We should still test for the database in the first test run, so we can keep the `cleanupAfterSuite` function around.
I think it would be better (in a followup) to remove this argument from all Dataset classes and just rely on it being True by default. In a later change you can simply remove this parameter.
I don't think you want the change in this test since the original was correct?
I know this isn't your changes, but can you remove this space please?
@tde-banana-odoo this is the only script that will do this, I'm not sure if this is the correct way to handle this.
This is the timeout for the timeout. I am not sure if it is the correct behavior here, since timeout will be triggered after sending another message.
This should be `From`
Why is the indenting change necessary?
`manager.setStatus(statusNotConnected)` is called after the connection is closed, is that intentional?
We could make these messages more clear, `The <script> tag in the <body> tag has been initializing Uppy, or that the plugin you are targeting has been installed.`
Why not use `ReadAsync` directly?
Why do you use a tap here? I think it's better to use a `find_by` method.
Can we make this `CstorClaimVolumeSource` instead?
We should not do this here. This will cause problems. We should not allow a user to specify an `x` directory to create the directory.
This will not catch the `ImportError`, we need to catch it in the code that tries to use snakebite
This line can be removed.
We should probably keep these in alphabetical order for consistency
This should not be added.
Should we add a new deprecated method to the existing `LaunchVehicle`?
I'd say it's a bit more clear if we do `File.Exists` and `DeleteOldDateArchive` here, instead of using the `File` class to determine which file to delete. `DeleteOldDateArchive` is not a great name either because it's a function that's not the same thing as it is doing here. `DeleteOldDateArchive` is just an internal helper method in the `IArchiveHandler`.
This should be `new webdriver.http.CorsClient(url)`
@karalabe can you please confirm that these API paths are still valid.
I would log that the port can't be used for the socket and that it could be occupied and not be used.
Is this the right way to do this? I think we should do a `count(*) FROM ...` to be able to specify an arbitrary `FROM ...` clause.
nit, this should probably be a pointer
This will always be the case, but this is a change of behavior in the current implementation.
This should be changed to: "Failed to read Port error Object"
Why not use Math.ceil() here?
Isnt this already checked in `getMaskedIp()`?
This change is not necessary.
This seems like a bit of a hack to me. It seems like we should instead do this in the `WebEngineElement` constructor instead? I can imagine someone accidentally using it with a `js_elem` of `None`.
Why is this changing? Is it because it requires all the tchannel dependencies to be set in the package?
Is it worth adding a method to FileSizeChecker and using it in the other cases like this?
This line is too long (100 > 79 characters).
I think `_log_callback` is unnecessary because its a general function that only logs and not logs from the native library. We can just rename the file to `_log.py` or something
`if (!create_info->image) {` would be better. Or if it's not possible.
Nit - I don't think we need to use the variable name here as it is not clear to the reader what it represents.
If the `BaseSnapshot` already has a snapshot, you can do this instead
Isn't `groups` guaranteed to be an `Array` before we do this?
This is an integer. How do we know this will be a valid value?
The `sys` and `t` above are now unused and can be removed?
I thought that you could use `opsv1alpha1 "github.com/vmware-tanzu/antrea/pkg/apis/crd/v1alpha1"` instead of this alias?
Why not use a constant here?
Why not just return -1 and then `get()` can return `null` for that method?
Is there a particular reason to use `len(args) == 1` here rather than `args[0] == "for-push"` (as in a separate PR)?
This is the first contrib that comes with BP. I don't think we want this here since it should be handled by `is_cryptography_advanced()`
Why did you change all of these?
Space inside { missing.<br>Space inside } missing.
The file format needs to be updated to the standard format, so this should be `deleteRuleViolationFix()`. Same for other files in this PR.
I think `_` is not needed here
this is now wrong - the old version would be faster, no?
nit; remove the extra newline
This is a bit unrelated but why is `known_distribution` passed here and `git_commit` is passed down as parametrized?
This looks incorrect. It should be `int|string`.
should we throw an exception here?
These should be `0` by default.
Why don't you remove this one too?
`listenerShutdownStarted` and `listenerShutdownWaiter` are not used anymore.
why change to protected?
Extra empty line detected at class body beginning.
`findAll` returns a promise, this could be rewritten to: `$links = $page->find('css', '.searchtools a');`
I am not sure it matters, but this is not the right place to do a rename
>Sources [](start = 24, length = 5) Is this something we want to have in the public API? I don't have a great opinion, but it's a lot like this. #Resolved
Do we need to remove these from `SparkConfig.java` as well?
@krfricke @kraksha007 We need to add new definitions to `dagster` module, because it's a bit of an internal API.
Why not `return` in this case?
I'm not sure about the `<div>` markup. The `<div>` tag seems more natural and I think the markup in the `<button>` element is more correct.
Do we need to have a separate setting for this? Can we just have a separate flag for this? I would expect the user to not want to load a specific JS file in an app when the scripting environment is set to use this value.
Is this still needed?
Can this be removed, or will we be removing all these functions now?
I don't get it why you removed this `continue` but now it's not needed any more
Why is it removed?
I'm confused as to why this is needed. What does it mean if `includes_exercises?` is false?
I think this should not be necessary, since it's already initialized by the controller.
I'd be happier with this if the path is just `/api/v1`
Can you add this to the `fixUpHost` below?
I'm assuming this is not supposed to be a solr error.
File is not `goimports`-ed (from `goimports`)
Is it ok not to return NULL here?
It seems to be not correct name.
The test is a bit weird: if the port is already `80` and the `ln2` is the address, we would expect the test to succeed? I think you should either have two ports `80` and `0.0.0.0`, or the `addr` field will be `127.0.0.1` and `tcp://127.0.0.1` and then the test should be passing.
This file should be removed.
nit: we usually put go-algorand together with other go-algorand stuff.
Maybe we should mention in this docstring what they mean to be?
Isn't that the default for all versions?
I guess this can be removed?
This flag will be deprecated. Use `--disable-ctu-analysis` instead
This is the bug fix.
I'm not sure if we want to update the year
Can you explain the reason behind the change for 2?
I'm confused, why is this needed.
@dannyroberts @saintentropy, @anurse I have a PR to make this work against the beta version, which is now beta.5.
We'll need to translate this string, otherwise the translators will pick this up and won't work.
"Result dict from" should say data and dataset.
I think you can use `User.find` here.
Why do we need this `make`?
This method is called in `AbstractFormat` and `AbstractFormatBuilder`. So it is called in `AbstractFormatBuilder` as well. I think it is a good idea to have `setGalleryItems(Collection|iterable $galleryItems): void`
I think that the test should still be using `server/ca` to test the plugin's ca certs.
We should probably add a check here to ensure that the `window.__mochaResults__` is not called if the `driver` is not a Mocha session.
We could move this validation to the `RBA` validations module
nit: I would use empty string as distribution mode
I think this should just say "Generate for every user"
Do we need to do a `totalSent.Add` here?
This error should be thrown as part of `build.js` since that file is in the root root directory.
We have a `if` statement in the `if` condition above. I wonder if it's a good place for it?
This seems odd to me, it doesn't seem to have any effect, or does it just indicate there is a file not being written to the storage? It would be nice if we could make it more clear what kind of information it has.
Is this really what we want? We should return the error if it is not nil, so that the user sees the right error message. This should be a separate commit.
Is the `type` keyword needed here? I think it would be fine to just make this just a `float`.
Is there any chance this colName is null? If not, then there could be a NPE on line 737
This line needs an update.
This shouldn't be here
This is already a constructor so it can't be set to DynamicType_ptr.
nit: remove empty line
I'm not sure how I feel about this test - we're testing the `reactivate` method, but that seems more like the correct thing to test here. If we are doing something like this and it is not set, we should test the behavior in the `ReactivateSubscription` spec.
this can probably be final now
Why are we changing this test?
nit: the "with PyTest and the AWS Device Farm browser testing feature" is redundant.
why is this needed?
I'm not 100% sure why this is needed, but if it's a good idea to remove it, then we should keep this TODO.
I'm surprised this change is needed
nit: I think `TEST_ROLE` might better fit in here to be clear that you are testing `Lambda` role, not `LambdaAPI` role, right?
Do we want to create secrets in both cases?
We don't need this log message since we are already logging it in the `fakeClient_GetEnvironment` method.
Missing new line here.
This flag name is a bit confusing to me. I don't know what this means. I'd think it should be `--privacy-unrestricted`
Is this necessary?
I don't like that you have the extra parameter `key`. I think it's fine to keep it as `projects` but I would suggest to change it to `project_key`. (We can do it in a follow-up PR, though.)
This should return an error if `err != nil`, so the `loadDir` method does something meaningful.
Why are we adding this check here?
I'm not super familiar with this code, but I wonder if this change is a good idea? It seems like it could break stuff. If not, we should just leave it as-is.
This is not a good way to add details to an error (as it is done in the `catch` block). We could just add `details` in the body and remove the `message` and `details` properties. It would be easier to understand what's happening, and easier to see the message in the error message.
I would use a ternary here: `$this->pageAccessRootline !== "" ? ...`
This can be `nil` if the user specifies Rust.
Is there any advantage of using `Append`/`AppendAll` in this case? It seems to be consistent with how we call these `append`/`prepend`, but it seems like the former makes the code a bit easier to read than having to do two functions.
This is a very bad design, it will return a value of 0 if it's the same as the value 0 in BeamSyncFastSyncLag, and then it will be 0 if it's the same as NotBeamSyncFastSyncLag, which I think is wrong.
I don't think we should change the `type` here, since this will be a public API. Can you please revert this?
I don't think you need this line anymore.
I don't think we should have this in harness
This one is the only change in this class.
this block is duplicated with the block below?
`options` is unused now?
You could just define these on `rdkit.rdBase` directly (I'd say, but I'm not sure what that does)
should you also disable authorization here?
The `List<string>` of all the locations for which we capture code flows should be part of the stack and not as part of the related locations. In the case of the `sarifError` we would also have the error text for the rule, so we don't need to call `CreateAnnotationsFromStacks` here.
We should remove this, as we don't need to log the error if it fails to update.
We need to have this in the `config.json` file.
This should be a different log message from previous one.
Is there a reason why we want to add this? It doesn't match the `KnownTypes` enum.
`extMemory(NULL);` should work as well
I'm guessing this will be backward-incompatible for older versions of the CLI?
We have `org.apache.commons.lang3.time.DateUtils#compareTo` that does this same thing, I think it would be a good idea to reuse this
I am not sure that the `Option` is the best place to put this function. Maybe in the future we can use this to provide some more flexibility to configure a task, such as having a `Run` method.
I don't think this works, we can't have a `_hydrating` field.
Please rename the repository. This will be removed in 3.5.
I think this is not needed if we set the default value to None
@alexanderbez I think we should use the main-light network here, as I think it should be available to all networks.
Nit: Please remove this empty line.
This can be removed, we already have a role attribute. Same applies to this one too.
This is not needed because we already have the task handler and the task will not send an event whose Task is nil. The task handler will send an error to inform the task handler which state was changed.
I wonder why we need lodash? Is it not enough to import `map` from `lodash` and then import it from `@wordpress/element`?
Can you remove the `@`? We're already at the version number and not really sure why we added it :pray:
This needs to pass `auth` instead of `ash.DB` and `ash.DNS`. Same for `Prefix`.
We still need this test?
You need to handle the error here
Why was this removed?
We can probably move this to line 113 (after we check if there is a tag already for it.
Should we just drop this file? I don't think it's used anywhere.
I think this was a bug, and the `hComPort` property was never set
I see that it is used only in `xlr_xdg_surface_schedule_configure()`, but I see it is not called here.
I was thinking that maybe we can remove this test and replace it with 6 cases. This is a test case.
I'm not sure what was happening here
The queue is already being imported in L18.
`resource_id` is still used in this table, is that intentional?
Why are the chan's capacity increased?
Is it worth adding an assert here to make sure the register ranges are valid?
this should have been fixed before merging
Can be combined in one return statement
What's the reason for doing this here rather than in the `prepend_command` method?
Why did you change this?
This is not a good fix, but should be done by a test.
I'd recommend to check for the response code and message separately.
This copyright date doesn't appear to be in the list of files we edit.
Can this be private?
`signedUserName` is unused (from `structcheck`)
Do we need this at the root of the project? I'm not sure this should be a config setting at the root level.
Can we leave it as it was?
Shouldn't you remove the line from all these files? They were added on the first run, not sure what the purpose of it was.
Why do we need this interface? Is it to implement `cache.TTLCache`?
I think this should be `copy`, not `copyStream`.
Is this really necessary?
Should we also include `chromeOptions.KEY = "goog:chromeOptions"` in the changelog as well ?
I am not sure if this is the correct place to do the logic for building a CircuitBreakerManager instance. It looks like it is already in the plugin.
Should this be `Type`?
Shouldn't we just make one more type for `ctx`?
Layout/IndentHash: Indent the right brace the same as the first position after the preceding left parenthesis.
I think you need to update `DataGrid.Columns[i].HeaderText` too right?
This seems wrong to me, as there is no validation on the actions in the blockchain, and the logic here isn't correct. The action will just say `BLS(0, 0)` and the genesis block won't even be `BLS(0, 0)`
This is a bit weird, we are still using a `mock` for a `With` function which calls `WithPeers()`
nit: I'd just inline this method. I don't know why it's necessary since this is a test only method. I'd just call it `createApiConfig` and have the other two methods inline.
why delete this?
Should this error message be a little more descriptive? Something like: > Certificate Request Request has not a Approved condition. Status: %+v Approved: %#v
Why set this to `False`?

nit: rename to `addLightRule(final AttachedBlockHeaderValidationRule<C> rule)`.
Why did you change this?
Why are we deleting this function?
This should be kept. We need to know which binding was freed and what memory bound it is.
Not sure if this is related to the changes.
This is the only method in `MultiIndexModel` that updates dimension values. That's not correct.
I don't think this change will work because `cStringIO` is a built-in package.
Why are we adding User-Agent here?
Please remove `FEasible` as it is redundant with `NAHEAP`.
Why do we need these properties on the type?
I think there should be a space after `is` instead.
I think this is the wrong place
@tinaafitz Should we use the new `params_for_search` here?
I would set power state on the Clusters, not the PVC. I think it will work because they are not part of the deployment. The reason why we set power state here is to be able to detect if a cluster is in the `Running` state when a cluster is assigned, which is not the case here.
This is not needed here
Why not call this `Deactivate`?
@jakelandis this is why the formatter didn't pick this up?
I'm wondering if this package name change is actually needed? We could just use `util` directly in the codebase and get rid of `ioctlUtil` entirely.
Why is this necessary?
This should have a test, I think :)
This could be done in a single line with `options = { endpoint: @endpoint, user: @user, password: @password, timeout: @timeout`
I don't think this should be changed.
Is this change necessary ? I wouldn't think you should revert this part.
Can we remove this class and just do `fetch('famous_last_words.phrase')` ?
You need to add spaces after `=`
I am not sure this is a valid spec. It should raise an exception and not just return.
Remove this, if it isn't being used.
nit: this seems like a strange type to me. Is there a way we could use something more descriptive than `interface{}` to make it more specific, such as `conntrack.Config`? It's not really clear what a `ConnTrackInterfacer` actually means here.
I think this import is unused (I know it was there before, but it was there)
Shouldn't this be `<=` ?
I think this should be `cannot reference a row function function from within a row function`
I'm assuming this method was not added in 0.12.4 or later in 0.11?
I don't think it is necessary to free these memory. The memory manager will clean those before their destructor is called.
Is there any reason why this is not done inside CaffeMallocHost?
@kushthedude this is the change to get the appointment title computed.
This is not necessary now, we are just using the `Done` channel.
@dzhenxm FYI this is going into a separate change to the PR description
This should be called `CreateSnapshot` to match the other functions.
I think you should keep the same logic as in the kernel. The exception is not supposed to be thrown. I would prefer a different logic than throwing host exceptions.
I like this better. But I don't think it's a great idea. What about a flag to specify if it can be used to commit more?
This should have a header and a link to its own doc file.
This needs to be `number=`.
This change is a breaking change. We would have to add a new constructor that would throw in that case.
What is the purpose of this flag?
I don't think we need to change the function signature
Why are we removing these code?
Why is `vkGetPhysicalDeviceSurfaceCapabilitiesKHRState` being changed to `UNCALLED`?
I think the change here is unnecessary since it's in `Windows.WithTests.proj`
Is this needed?
Can you please add the copyright statement here?
this should also change, right?
`return "default" + node->data.scalar;`
Why do we need this? Can't we use the `ImageID` and `ImageDigest` to determine the `Image`?
should be in the 4.1.
@jingxu97 we might want to change the mock mock here to make sure it's actually doing something and not just `gcpclient.Get`
I think this will be a problem when using a custom sidebar in a new tab. It'll not be possible to set `currentTab` to `null` and `currentTab = undefined`.
Is this the same as "v1", just not sure why we need both.
The test would have failed if you use an if/else, but that seems like it should be fine.
Can we do the same for this one?
Why not deprecate it?
I'd prefer not to hardcode this here.
This can be removed now.
The message should be translatable, otherwise it's going to be hard to translate it
Is this change related?
This looks wrong. The server is not in `server_list`.
I guess it should be set by default.
Should we be more specific about which error we're swallowing here, rather than just "empty"?
can this be final?
This is not a proper struct, it's the spec used to set the federatesWith, and the ID spec does not set the ones from the parent.
I'm not sure if it's correct, but this should be `tile.getPhysicalLevel() <= planeTiles[z][x][y]`. It doesn't seem that it should check for the plane tile.
Should these be `#define INITIAL_BATCH 10` and `#define DECR_BATCH 10`?
This doesn't seem to be used anywhere. Is it used anywhere?

Is this just for testing?
nit: we're checking for non-nil here but not in the test above?
I think we're not going to use `aws` in snippets?
why delete the task?
This is a good change. However, there is still a bug in the code, the `sizeof(struct fme_irq_entry)` is 1, and we should fix this.
Why was this added to the list?
I think we want to start a new activity in the same process as the previous one.
The command should also have an argument to specify which command to run to be run.
This is wrong, it will modify the row in the case where it is sorted, but not if it is.
This seems wrong. You should use `LPI2C_SW_60M`, instead of `LPI2C select OSC`.
I'm not sure why this needs to be a pointer, can we instead return a empty string if empty?
This should probably be moved to `intl`.
We can pass the name of the pvc and name of the provisioner to `sendEventOrIgnore` function as well
Can you please add spaces around the semicolon? ;
This should be `mmcv_version < digit_version(mmcv_minimum_version)` since `mmcv_minimum_version` can be `0` and `mmcv_maximum_version` can be `0`
This function can return `(stopped bool, err error)` now.
this is incorrect. you should only add a type if you have a virtual field.
This change seems unnecessary.
Should we add defaults for these in the .ctor?
I am guessing you want to add the key as well ?
:ok: This change will be queued for retranslation. We'll use the existing translations in the meantime.
I'm not sure how the functions are registered but they don't seem to be registered.
Isn't there an issue on the `createCitationRIS` method? I think it's still used.
Can you also add this change to the release notes?
Please avoid initializing with an empty struct.
What if there's an existing `ServiceAccount` that matches this selector? Should we also allow the user to pass `ServiceAccounts` as an optional field? Or is that handled elsewhere?
Should return `True` if it's not meant to be used
This should be a constant
Is this for internal use only? Or it's for internal usage only?
Is it possible to make the path configurable?
this looks wrong... why is that?
I'm not really sure what "cancel method" means here. It would be helpful to give the promise an optional "cancel call", but maybe it isn't clear what this means.
I am not sure I am happy with the name but I guess you can't think of anything better.
I don't like how these methods are used. They're not in the public API. They aren't called anywhere.
This seems like a very general exception to be thrown in a generic way. What's the benefit of catching this exception?
I believe you can remove this annotation as well
This is a breaking change as this will cause a deprecation warning if the `comparator()` method is used.
Why do you need io.h here?
I'm not sure we should be making a change to the existing code but it seems unrelated to the PR
This is the same change, is this intended?
Can we move the `pivotFacetResponsesFromShard` to `PivotFacet.java` ?
@kbrock I don't think this is the right approach, we should just detach after the fork is done. If the fork succeeds, we want to destroy the current process and the associated slots.
I think it's probably better to move this import to top, and just import it on top.
I wonder if a better error message is: `First metric only and fevalue `, but not both `first_metric_only` and `feval`
I don't think we should expose the handler, this is the only method that actually needs a handle.
I wonder how does this work? I don't know how `wl_fixed_to_double` is implemented.
It looks like `vp->nl->GetItem` should never return the NULL item.
`way_name` is not set anywhere, so `if (!step.ref.empty())` should never be used, it is only used on the following lines
Should be `The event ends before it starts.`
Can we have the list in quotes?
This will also need to change to `listens_matched_pct`, otherwise the results are ininformed as a percentage.
You're not actually using anything here, so it shouldn't need to be in the test.
nit: remove this empty line
This looks like an expensive way to copy an array to another array?
What happens if there are no more events? Is there a reason to continue reading if not done yet?
Why not just `self.add_extra_convs == 'on_input'`?
Should we show the warning instead of nothing?
I am wondering if this should be more specific for the status. Maybe a `ZpoolPoolStatusDegraded` status?
Should we check for `if v6IPNet != nil && v4IPNet != nil || ipNet.To4() != nil`?
Can we use a better name than "record"?
I would use `JadeParser(void)` to replace `JadeParser`
This setting doesn't exist any longer, it is in the K9 class
You can use `makeVersion` to build the version string. It's already included in the Makefile.
This is the main part of this change - the other parts of the change do not need the staging location info
Wrong import ordering.
Is this check needed? `delete()` should return an error if `s.sys` is nil, which is valid.
Can you change `continueProcess` to `continueProcessId` to reduce the number of lines?
Please add a `ERROR_CODE` constant for these errors. Also, it might be helpful to add a `ERROR_CODE` constant for `PRIVACY_MULTI_TENANCY_NO_TOKEN`, so that users can see how to do that. (The code would then be more readable.)
This will not allow to specify the path in boltdir, which is not correct. If you want to use a different path in this file than in `/etc/bolt` the path is used. The puppetdb path should be the root path where puppetdb is located.
this will be an error if there is more than one row.
I don't think this is necessary. If the gRPCMethod is not present, then we should just remove the line.
nit: `if the commit state is unknown` --> `if the commit state is unknown`
I am not sure about the "Error", can you elaborate?
This will fail if there are more than 255 characters long.
This will still cause problems for the old app, so that we get a list of services for that app and the new one for each of the existing services.
`|| ''` should be at the top of the file, to avoid unnecessary calls to `getNPMConfig`
I think this can be combined into a `if`.
I think I would just remove the `Variable` here. We can do it in another PR. I will merge this in as-is.
nit: can you add a new line before this line?
Why is the `for` loop necessary? If we use `for ... of` we can just go with this loop.
Do we really need to add these two methods to `TRequestHandler`? Isn't it enough for the caller to just call `GetNextBuffer()` directly?
Hive_ICEBERG_METADATA_REFRESH_MAX_RETRIES_DEFAULT = 2; ?
This should be `len(p.DNSMadeEasy.SecretKeySecretRef)`
Please don't delete these todos, they are temporary until we can fix them.
Nit: please add new lines.
Why not just print the kzip encoding?
I don't think this should change.
Can we just print traceback.print_exc() here?
`context` is unused
Should this have been added to lib/sets/set?
Should be `loadTable` as well
should this be max_results?
Extra empty line detected at block body beginning.

This should probably be a separate PR, so we don't miss some tests.
I don't see why the method name is "StartBatch" and the method name is "CommitBatch". It doesn't really start/commit. How about just `StartCommitting` and `Committing`? It will be less confusing if the method name doesn't really say what it does.
I'm not sure what the best way to handle this, as it might be that you're trying to dump logs to stderr, and it could result in the logs being dumped to stderr on the next line, but I think it's fine to just dump logs to stdout and then log to stdout in this case.
I think you need to add a check for `isSingleSelection` here
Should we also add the bonus if `epochNum >= a.foundationBonusP2StartEpoch && epochNum <= a.foundationBonusP2EndEpoch`.
this looks like a good candidate for the migration script
Is there a test case that would cover this?
We should not be logging this. I don't think we should be logging this as info.
This can be simplified to `if (isGoQuorumCompatibilityMode && !jsonRpcConfiguration.isAuthenticationEnabled()) {`. Also, we can remove the `String.format("%s %s", "Pruning", errorSuffix);`, since this check already happens in the `isPruningEnabled()` method.
I think the reason we need this is so that this is actually the same as what was built for arm64.
This is the most important part that was added, and it was just a hack to avoid re-initialising the folder when app state changes.
This seems unnecessary and unnecessary as the tests can just use `time.Unix(0, 0).Unix()`
Why did you change the type of the `comm` parameter to `lbann_comm_ptr`? The `lbann_comm` is created by `initialize` but this one is never destroyed.
I'm not sure why the m is deleted, if you delete it in the test?
Isn't it `autoInsertHandle: true`?
I'd prefer to not call this method "camelCase" but instead call the parameter "parameter"
This is not necessary, since the field is set in the constructor anyway.
Is there a reason for changing this file from using `.go`?
I think I'd rather have the SP stripping happen in the compute method instead of this method. We could add a "getIterationLearnNum()" and the compute method to the SFR. That would let us remove the call to compute. But it's a bit too big and I don't like the idea of doing this in compute.
What is the meaning of this field?
This is the actual fix for #623
Can remove this #ifndef if there is nothing to say about ext query.
I think that this check needs to stay. If there is no deployment notification, the `ds.GenericDeploymentConfig` should never be nil.
This is just to check if there exists a project in the cache?
Is the name `methodName` accurate? Is it the same as the method name?
Copyright (C) 2014-2017 NV Free Software Foundation, see AUTHORS file
I know this was already there, but I think we should change this to "Don't start the client". "Don't run the client" is a bit misleading.
"path" is a confusing term here. I suggest something more explicit: "Include additional server-side path during comparison (only applies when --compare-dest is set to true)."
I would suggest to change this to `logger.Warnf`, which will give us the most important message and not the most helpful message.
This test should be changed as well, right?
The h4 needs to be inside a class since it gets used in a few places in the partial. This can cause the problem, but I'm not sure if it would have any side effects, so I'd be interested.
We should be returning i18n translation macro
Why not return the job_id in the error message?
This doesn't work, because this line will fail for me on a 32-bit machine, where the `id` can be a 32-bit integer.
This should probably be called `completed?`, but I'm fine with it.
Why is this needed? I think we can just delete this
Can we use the eventList instead of batchMap?
I'm pretty sure this is the wrong fix. It should never happen in practice.
Should we have a static `fillObject` method in `io.vavr.collection` to avoid duplicating this?
Should it be "MySqlDataClient" to match the class name?
Nit: `logf` should probably be `log`?
This should just be `theme`.
I am not sure this will work, if we have `block.BlockMessageLimit = 5`. If we have 2 messages to block, and we have 10 messages to block, then we will get 10 message instead of 20.
I think it's better to just put this into the `#else` block of the ifdef instead of repeating the same code.
@alexmt I am not sure this is ok
Line is too long. [101/99]
Why is the json tag needed?
We should probably remove this.
This should just be `opts[:site]` or `:sameSite` instead of having a separate option.

I don't think this is the same, we should probably remove all colors.
This is an anti-pattern: the code doesn't clear the `scheduleRefreshFoldersIID_`, so why not just call the method directly?
I know this is an existing test, but this seems unnecessary. Can you remove? :)
Why is it removed?
Why are we using uint64 instead of dataSize?
Should this check for `<= 0`?
`XField` is the superclass of `Field`; the `LELongField` and `XLongField` are both subclasses. I'm not really sure what to do about those. Could we remove these two classes and replace their `i2repr` and `i2str` calls with `_Field.i2repr`.
I think this should just be the first char of the `data` array. That should also cover the case when the string is empty.
@psalm/developers Can't we just remove this one? I would guess the type can remain.
Is there any way to do this without writing the whole stream into the buffer? I don't think you can do this, I think it is an overkill to write it to stdout and write to stderr (and it will also print a full file to stderr).
File is not `gofmt`-ed with `-s` (from `gofmt`)
Do we need this print statement? I think this should be a log statement.
This doesn't work on any bucket resource. This is not true.
Shouldn't this be a pointer? I thought we would be copying the field.
Shouldn't this be moved to `updateNutritionData` instead? Also, `isFieldsInvalid` could be moved to `NutritionDataFragment` since we're checking that it's `isFieldsInvalid` anyway.
This is the change that makes the tests work. The old version used `"/<user_name>"`, which seems like a breaking change to me, and the new version looks like it's working as expected. I'm not sure if it would work.
Style/SymbolArray: Use %i or %I for an array of symbols.
Why was this necessary ?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This seems unrelated?
Isn't `spanContext.isValid` a boolean? It might be nice to just return early if `spanContext == nil`. It would make things a bit clearer.
@bogdandrutu is this the correct behavior?
Is this needed? I didn't see any references.
this can just be an `if libkbfs.NoSuchNameError(err)`.
Can you explain what happens if someone passes in a different wildcard and also has multiple allowed domain? What happens when they have different hostnames? I think we should only allow the first one.
this is an error condition. If the variable is not set then the strictVariables should be true and the isDebugMode should also be false.
why is this needed?
Should we use a different default for each connection? I feel like we may want to measure RTT on every connection? Also, I am not sure this is really a "default" value, so if it changes it might break some code?
@liggitt, @klauspost I have a fix to add `if driverVersion:`. I don't think that's a problem with this, but if I remove this in the future, we might want to update the `GetDriverVersion` call to take a `DriverVersion` field instead.
This should be `Bundler::CLIError, "The script '#{script}' does not exist"`
Is there an alternative to this?
I think we should also include `detail` and `title` here.
Is this really necessary?
this seems like a change in behaviour. Before it were `i.interceptor = append(i.interceptors, *interceptor)` but now you are doing `append(...)` ?
Should we be logging this message here as well?
why do we need to cast shardID to int?
Why do you need this change?
can you also add a check for the type of `Ellipsis`?
Please use `memset`.
I don't think these are necessary, `request.args.get` will handle `None` values
I think you can just make this `for (int i = allergens.size() - 1; i > 0; i--)`
Why we need to special-case the null case?
Is this needed? If ref is null, then the ref.current will always be undefined.
I think this is a bit misleading, because in some cases we don't want to leave parts on error. It's a bit ambiguous since we don't have `leave_parts`, but maybe it is clear from the docs.
nit: we could add a doc that states that this is used for both http and HTTP2, and this is not used for http and http3
I'm not sure I like this. It should be part of the `dask.array.core` instead of in the `grid` module, but I think we should be able to just use the standard cftime functions. I think `dask.array.core.util` should be used to replace all of the utility functions (or maybe some other mechanism for that?)
This is the only one that's not in this PR?
I think we are going to have to make this change to the CMake side for consistency.
I would expect this to be false instead of true.
This is probably fine here, but why not just do result.IsCancelled = true, and then return?
This was a bad idea before because `io_thread_pool` was used as an argument to `mesh_reader` which was created in the constructor (and passed as const ref to `mesh_reader`) in order to pass in the thread pools. The thread pool itself is passed in here, because we want the thread to run with a shared pointer to all the `mesh_reader` calls, not just the one that is shared by both `mesh_reader` and `MeshReader`.
I wonder why we had this error before. It looks like a duplicate error?
This should probably be renamed to `AuthenticatorInterface`.
Should be "Identity for this node in the cluster"
Should this be a parameter?
This should be `traceId.trim().length()`.
This one is for the `TODO`?
This option is not needed, since it's already handled in `node_modules`, and it's only used here. We don't want to make this option optional when the `es6` package is missing. We only want this option if the `es5-js-export` is missing.
Why is this change needed?
I don't think this is correct. The examples will also include "com.google.orgname.artifact.name"
I'm not sure about this one. The `DocIdSetIterator` is a subset of `Collection<T>`. We can return `Collection<T>`.
Shouldn't this be `primary`?
This seems unnecessary, since you have already included proofs in the actor package?
I believe it is better to do this only in case `err != nil`.
Should we use `webPropertyID` for consistency?
I don't think we need this file anymore. I think @mcsf has mentioned that the compare model should be included in the dashboard as well.
This is not correct - we need to check that all the inputs are not null pointers, otherwise it won't be possible for any input to have a null ptr.
Can we add this to the `config/base.yml` instead and use a different value? That way when we need to modify the default, it can switch to the right one
This is the main change in this PR. It fixes the bug and makes it work on both windows and tvOS, so it is fine.
Should the default for this be 1 instead?
This is the wrong schema version. Should be `20150416145819`.
I think we should add `TraceStateKeyLength` to these constants since they're used to refer to "tags".
>bool allowOptionalMappings [](start = 28, length = 25) nit: `CreateDictionaryEntriesWhenTheInputHasNoMapping`
We could probably get away with a `func (n Transport) Chooser` method, that does the same thing.
Is it OK to call this twice, once for the connector state (the connector and the backend), and once for the backend?
This could cause a panic.
Can we use `Platform` directly?
Should be tls_insecure
nit: can we remove this line, and add a period at the end of the sentence?
`Character` is not an `Object`, I think that it is better to use `Character` here and in all other places.
Should be `isAbstract()`.
This is not necessary, but I guess we can just do it in a one line if
The name of this error seems to have been changed.
Should we call this NewMutableStateStatus?
This is only used on the `worker_keystore` path, so can this be moved to the worker's `options` struct?
This is not the only place where we are using it, so we can remove it and just rely on a specific error.
`view_set_fullscreen` already sets its fullscreen state
I think this will be more efficient if we make `p []peer.Peer` a `[]peer.Peer` instead of having to do all this sort of thing for every node?
Please provide return type hint for the function
This looks wrong. We can get the previous term if you change it, but then again it's the same as the new one. If we change it, the previous one will get the same term, so you'll get an empty log message.
Extra empty line detected at block body beginning.
Why is this needed?
This is a new test file, should be deleted
@sirbrill is there any reason why `pageTitle` is being set to an empty string here and not just undefined?
I think this might read nicely if you add the shard to the list of shards in the doc string. That way, we can link this to the shard that's being processed.
I think you forgot to import these.
Is there a particular reason for adding spaces in the enum, and not in the enum itself?
this is the same, just add the local port to the set of properties.
This looks like it should be `pos_weight=weight`. I don't see any test failures with this. @LysandreJik
I would suggest to use the `Run` method to construct the map for this test suite, and remove the `map[*junitxml.TestCase]func(context.Context, *junitxml.TestCase, *log.Logger, *testconfig.Project, e2e.CLITestType)` line below (which is also used in some tests below).

This is a very nice utility method, I like this.
This change is not necessary, right?
This is the actual change in this pr - the rest are just reverts of the cleanup of the temp directories.
I don't think target_link needs to be in this struct. We are not using it anywhere in the socket_import() function.
This should actually be `expectedToBecomeIndex=2`.
Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
I'm pretty sure the plan was to allow setting it to true and not disable it. I don't understand why we would do anything to the config.

Should we add a timeout in the tests?
The reminder email was never used so it's just removed from the text
@jackyspawel I am pretty sure you added this to the wrong instruction, so this should be 0xf3800010 and 0xf380006, same for the other one.
Should this be `omitempty`? Or is that optional?
I think we want to assert that there are no duplicate sessions, not that we've stored a new one in memory and the same session id is stored in the memory
I'm not sure if we really need this. I guess we should use an enum instead of string here.
I think the linter will complain if you have a new empty line after the `import` statement.
We are importing a function here, so `collLoader` is not needed, we can just use that.
This is probably better as a contextmanager (and probably even a docstring) since it's a little confusing.
Why are you using both `render partial`s? I don't see why it would be necessary to change the existing partials, but I think the original one would work and the new one would just work.
Please fix the indentation here and below.
Should we just set c.msubs to 0 if it's not explicitly set?
I think we have to add this `}` back in
This was a bad idea in the past but I couldn't figure out how to make it work. @mad-hay @kbrock thoughts?
We don't want to retry if we can't start, so I think this check is redundant. It's not a big deal if we do this, but we should double check the error is not caused by this.
I guess we can use `2.18.0-dev` for consistency. We're going to need to update the releases at some point.
@jonathanpeppers I don't have an alternative solution to this change - just want to make sure I understand correctly.
I am not sure if this is the correct fix. The `report` method should not report when it's empty or not. We should report when we're not running any specs (or if specs should fail if no examples).
Does this still need to be overridden?
I'm not sure why we need that change here. The RDMAC is set by the controller and not the L3.
Maybe a little more verbose like: list of qualified class names to exclude when counting public methods (see R0903), with a comma separated list of qualified classnames to exclude.
This method name looks misleading. I believe the function will always return `None`, even if it does not call `populate_instance_names`. It's just updating `self.config['vagrant']['instances']` with the `vms` section of the config.
This can be combined with the next line.
I don't think this change is necessary. The compiler will automatically convert `byte` to `int`, so the change is unnecessary, and also the compiler will just convert the whole class to `byte`.
Can we use the constant `volumetypes.VolumeCapacityLabel` instead of string and string?
I'm not sure that this is a safe assumption.
This seems not needed.
This looks like an odd way to do it. Why not make the method a method of the manager and call that directly?
This scope can probably be removed.
I think we should just check the value of `shouldRepeat` and not have to call `removeQueueItem` if the user has no preferences.
File is not `goimports`-ed (from `goimports`)
This should be `chrome_options.args = options['args'].map { |arg| "--user-data-dir=#{arg}" }`.
Why is this file different?
Should we have a `Switch.Microsoft.AspNetCore.Server.Kestrel.Core.Http2.Enabled` property, that would allow for this?
I believe this is the only one I'm unsure about. It looks like pandas does not support setting values of the first column. But this doesn't look like anything. @jreback?
`merrors` is unused (from `deadcode`)
Why not just use the standard library here?
This is an example of how to use a map to store flags.
Is there an issue with this? If it is not we don't want this to be set to nil.
This doesn't seem to be used anywhere?
You could use the same pattern here, `VUID-VkImageSubresourceRange-aspectMask-01670`.
Is it worth having some test coverage for these methods?
I think we should be using `AC_SUBST_VAR` here.
I think we can move this to `else:` block
@wenleix This change was necessary as the only case where the methodInitCode is set is if it were generated by codegen. Now the only case where it wasn't is when calling `generateSamples`, when it were only generated by codegen.

I don't think it's necessary to parse these.
I don't think the message here needs to be translated. It should be a translatable string that's used in both messages.
This is the biggest issue I'm aware of with the changes in this PR. The rest of the changes are just renaming the variables, to be consistent with the naming convention.
why the computed?
Use 2 (not 0) spaces for indentation.
This is not necessary, `contours()` handles NaN properly.
why the formatting changes.
I'd like to see this added to the `please_go` section instead, but I'm not sure if we want to add this to the `please_python`. I guess the goal is just to get rid of this file, and add it for all the other tools that were added later.
Shouldn't this be changed to 'localhost,'?
This isn't the correct way to check if the transaction is valid. The refunds are also not valid.
`delaySource` and `linkedSource` can be created in parallel with `source`. This is because they can be created in parallel.
why do we need this change?
This should be moved to a helper
Do you need to do anything special if err != nil?
This is a breaking change. It has been discussed and will be merged into a release. @stephaniehobson do you think we should change this in a future release?
@crookedneighbor I'm not sure about this.
this is not needed
I'd rather do `return @group_level if @group_level` than `if @group_level>` and then `return @group_level`. That would also eliminate this unnecessary `if` clause entirely.
This can just be `* @Ignore`.
I think the name of this function is a bit misleading. `get_data` doesn't convey the concept of a `notebook` but it reads as a `notebook`, right? Perhaps `read_notebook_data_from_file` or `get_notebook_metadata`?
This will not work with a class that has a class method. I think we can use a `self.search_builder_class` instead.
Can't this happen outside of the config.Default.go file?
Is this the correct version to use?
This change is not needed. `.editorconfig` already contains the build directory.
We shouldn't need that here, we can do this in the `resolveSession` function.
This is a very long file - please keep it in one line.
There is also an error thrown on line 239.
I think it is good to have a separate function for this. The same question for `RowReader`.
Why not just `\SystemMediaLibrary::class` ?
I'm not sure why we need to store `EnableAdminApi` as a config, and if you're using the `config` package to access the prometheus config, you could make it a `bool` instead
This will only import the `click` app, which is why we don't use `run_simple('python test.py test')` in the first place.
Why does setting this in the if block below change the behavior? I thought we only want to update stats if we're going to export.
This is a little bit odd. Is there not a non-ASCII character in the string that is being quoted?
I think there's a bug on the tiles in tests. It says that the tile is 3x3 but the result is 12. I think we should fix the test too?
Is this supposed to be here?
This doesn't look right. It changes the selected values to 0, and it seems to be a bug in that it was wrong before. What's the problem?
nit: maybe use a named parameter here?
(style) line over 80 characters
Can we avoid using this class?
Why this change? If this isn't needed, please revert it for now.
Why do we need the service parameter?
I think I would prefer the functional package, so that it works for both the new and old tests.
The order doesn't matter, but the `Select()` method is not necessary, as we're using `Last()` anyway.
This should probably be `o.lss.resume` not `o.lss.resume+1`
I don't think we need to add the html safe tag for the HTML. We do need to add it when it has a value.
Why do you need a torch.Tensor if you just return a list for a single element?
This can be `where.not(status: 'actionable')`.
Is this necessary?
I like the name of this interface better than the one in Kestrel.
This is not necessary, we already have a `CATALOG_HOST` environment variable.
This needs a CALI_LOG() call, not an error.
This could be a `String.format`
This should use the constant from Input for the default sequence.
I would prefer not to add this method if we have a new `data_format_allowed` property.
nit: space after 'if'
Why do we need a separate endpoint for this?
var l2GasPriceOracleAddress = common.HexToAddress("0x42000000000000000000000000000000000000000000000F0")
We don't need `__version__`, we can just use `sys.version_info`.
This is the only functional change in this PR. The rest are just cleanups.

Should this be conditional on the wireguard provider?
I would prefer that we have more debug options here, and only enable the debug simulator if we have data race. It's also more consistent to use an interface in debug simulators (i.e. the interface is the only one that uses dataplane).
This will break the backward compatibility, as there would be no `EvalHook` or `DistEvalHook` defined.
This change is not needed.
Do we want this to also be under `assets`?

Can you add a space before the `!==`.
Can we add `@deprecated` to the top of this file, just before we remove these? This is what the docs say.
We can just use the `if-else-if` here, the theme should be always `Theme_AntennaPod_TrueBlack`
Should the table name be `users` to make it consistent with the existing table name `users`?
Isn't this a duplicate of the check on line 168?
nit: can we call this `isSymbolUsedInMap`?
Nit: you could move this line outside the `if`, to make sure the line doesn't fall outside the `if`
Why is this needed?
This will break for `typeof` `val1.keys`
Please remove this blank line.
We should use the f-strings here, not tuples.
We should use `assert.strictEqual` for this
I think this should be `SpendingAddr` to be more consistent with the other fields. Same for `EffectiveAddr`.
We should probably move these into the `api/` folder as they are used in both Media Router and Mobile
Why is `df` being imported here?
Why do we need a testcase for the service container?
Maybe we could use the same name as the one in the `FlinkTableStateBackend` as for `ICEBERG_TABLE_ID_DESCRIPTOR` (as we have it already)?
Why not check this on `debug.py`?
This can be simplified to a `return new Promise((resolve, reject) => {` and drop the `return` statement.
Why this change?
Why is the `if` needed?
This is a bit confusing, since we're calling the word `keyword` and `built-in` in the API response.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
can you also test the result of a .sort_index()?
Can you please add a line between the properties of the location and its components? It is hard to read the diff.
Should we rename it to `EPS`?
This seems a bit fragile. How about just multiplying with `expFeeFactor`? Also, how is the fee factor different if the `numPendingWholeBlocks` is 1?
You don't need to do this. It's already done in the model
I would rename this as `YamlProjectSpecLoader`, since Yaml is also a loader.
This should be a string, not a translation. It will be translated in many places.
This looks like it's a breaking change and should be considered as a breaking change. Can you try using a new array to make sure that the selector doesn't get added to a list and the logic is correct?
I don't see how this is used.
Should we expose this for unit testing?
Why is this here?
Why not check the returned error and do the reset in the beginning?
Can we get a type for this that would have been better?
I guess that the `desired` phase is a string? Maybe `desiredPhase`?
I know it's unrelated to this change, but it might be worth keeping the `.` at the end of the sentence.
I believe this is missing the `mlat => "#{trace.latitude}", :mlon => "#{trace.longitude}"`
Is this class even used anywhere?
This could be done in a single line (and we don't need the last if check) since it is the only condition
Why is `id` and `resource_name` being added here?
Shouldn't this be `Arithmetic[`?
Is there any reason that the width has to be multiplied by 2? Wouldn't it be better to keep the existing width, but just use that to set the maxWidth?
why do we use `toLowerCase`?
I think you meant to change this to `forceQR`
Shouldn't this be a warning?
The filter text could be translated here, so I would put it outside the translation call
Should probably be added to `setType` or similar
Could you use the `assert_frame_equal` helper?
this one is still correct, we're not going to have an empty line here
nit: can you please change the log statement to include "pausing" instead of just "pausing"?
Who calls this? If I recall correctly, you can remove it and call it `NextIsAlreadyDefined`
Is this expected?

`Attach to the process with the given pid. Pass 0 for pid to launch and inject into a new process. The default is the current process id.`
We may have missed one more sentinel.
Nit: I would just call this "exception" since it is just an identifier that is being logged and the string "CustomException" is a special type.
I think this is unnecessary, since we are passing the list.
Should be `finest`.
Layout/MultilineMethodCallIndentation: Align where with .where on line 346.
This is not used?
Should we be more explicit in the error message? Like: `Problem with privacy-public-key-file: The file is not valid: expected a file or path, but received: <file path>`.
I'm not sure this is a great fix. Can you elaborate?
This is the magic number 12. It should have the same name as above.
Why not `import "fix_deposit.h"`, since it's not required in `fix_deposit.h`?
Do we need both?
Can we remove the old `IList<FileData>` method?
Isn't this supposed to be `>=`, not `<`.
Is this needed?
Should we have the `MakeMdID` in `NewMD` instead of the `NewMD` methods? It seems like we might need more than just one method.
Can we move those two imports to the top? `@wordpress/i18n` and `@wordpress/element` should already be there.
This file is not covered by the GNU General Public License. You should remove it
Can you add an issue to track disposing of handles?
I am not sure if there's a good reason. But I can't think of a use case where the user is not able to register App-1 as an unregistered app. I think if the user register an app in a repo that's already a different one we might want to report it as an unregistered one.
`mayactl`, and `mayactl` -> `mayactl` (same with `mayactl create --options` above)
nit: Can we rename this to just `taskName`?
I think it's more accurate to use `be_nil` instead, as `to_a` returns an array.
What about this one? Does this fix also need a corresponding change to `task.save()`?
I'm not sure that we are going to be showing these errors in the help text?
This should be done in `SnackbarHandler.show()`.
I wonder if we should be using std::vector instead of std::string since we're already dealing with vector of HostAddr? Or is this just to make it work for a single HostAddr?
`always` is the default.
We should probably be checking this for a `packagePath` value instead of just `""`.
I am assuming this is a temporary workaround to make validator work in future versions?
This should be removed, it's already handled by `generic_data_store::get_minibatch_index_vector()`.
@tenderlove Do we really need both the `send` and `fail` here?
I guess we should probably use the FLB_*_* prefixes for the macros.
Should we also add a migration script for this column? (e.g. in `migrations/migrate-db.sql`)
`append` doesn't make sense here, you're adding a dependency on the build action.
This is not needed now
This is a very weird place for this.
Can we use `unsafe.Pointer` here?
Why was this removed?
This should be "Check this box"
This change is not necessary as the original version was incorrect.
Is this the right approach? What if there's a database that is already exists and you try to update it, then it's already there?
Is this still relevant?
This is not a good change. It is a static factory method and the constructor returns a new one. You should keep this method.
`new TreeSet<>(RedBlackTree.ofAll(comparator, values))`. This is not a good practice, it will cause issues, but I think we can keep the original code.
I would rather not have add_thousands_sep be True for all the formats, it would be easier to read and understand.
We should update the `tenacity-py-py` to be 6.3.0, right?
Why not add types to this method?
Can be final as well?
I don't think we'll ever need the empty profile ID in the UI, but maybe we should set a default profile in order to ensure it gets inserted in the future? I think we'll also want to check if `Property_SELECT_PROFILES` is defined and if it's truthy use that (if not then use the default profile ID).
Why were these removed?
This should be removed now, because the test is off.
This is a nit, but I think it should be `metadata = new(core.BuildMetadata)`
I don't think that we need to add this to the API. I don't think we use that anywhere else.
Please don't import everything from a single class if not needed.
Can we use an object instead?
This can also be a constant defined in the `BaseFile` class (as well as as the definition of the constant in `BaseFileManager`).
This doesn't need to throw - you can just remove the exception, and make the code in the if-else block use the exception instead.
I think it is better to use `const auto &block` here. It is a reference to an object which is not a reference. (same for the next test)
I would prefer to have a `params [][]byte` type in the `actor` package so that we can have an `abi.Marshaler` and `params` in the `actor` package. Then `abi.Marshaler` could be used for `Actor` to get its `Params`
This is a new constant.
This is not a great pattern, it could lead to a bunch of features having a mixture of "repositories" and "favorites". It would be better to just include "repositories" and "video_tutorials", and only include the "flexible" features. I would say that "repositories" should always include "favorites" but it would be more clear that they are the only feature of the "social" tab.
F401 'unittest.pytest' imported but unused
I think you should remove the whitespace around the ':' and '_' characters.
Shouldn't this be a cluster scoped config instead?
@danmosemsft this is the one
It seems that we only need to pass the `defaultResourceNameTreatment` here if `methodConfigProto.getResourceName()` returns null.
The `toEdgeType` function is used in `SelectQuery` and `UpdateQuery`. The `toEdgeType` function is used here. If I remember correctly it would be used in both places. If so it might also be better to create a helper function for it.
Is `libsqreen.1.1.2.2` really the right place?
This is now done on both addresses, which is the only case where one is subscribed for the address and the other is never subscribed to. I think we should be able to remove the second `fmt.Sprintf()` call from here. If we don't then we should be able to remove the first `accConnsEventSubjOld` call.
It looks like this change to `fpga_handle fme_handle` is not needed.
This is a BC break
this is wrong. `is_merge_or_booted` should always be `false`. If it's merged, we should add it. Otherwise it will add it to the `new_deployments` list
this can be an arrow function
Why not rename ibftTwo? The name is also not descriptive anymore, right?
I'm still thinking this is a bit of a nitpick but I'm wondering if you could extract the method that calls this one and have it call the other? Then you wouldn't need the `|| skip_session_tracking?`
I think this is not needed.
I don't think `.py` needs to be included
The other changes in this file are from the AuRa PR. I don't like that we have to add an extension method to AuRaValidatorsCollection to support two things. I don't know why, though.
This import can be removed
Is this a fix or a fix for a bug that caused this bug to show up in the generated client libraries?
this could be `protected`
should the optimizer get its own dict?
I am not a huge fan of having this here, but I don't see a better way.
I'd prefer if the map was a set instead of a map.
We have the same problem in the `store.go` as well.
Why is this necessary?
Why not just have this as an address? We have an address type defined in the blockchain
I think we need to be more consistent on the requirements of the library.
I am not clear on how `tm_py` is related to `cpp`. The `cpp` in this file doesn't have this `temporalImp`. I am not sure what this means in the original issue?
We have the `RequestTimeout` and `EventArrivalTime` constants. Can we use the same here?
This is fine, but I think you need to change the name from the service account to the service account name.
nit: I think we can just use `empty()` and `emptyWithNull()`
Nit, but `noop` is a little ambiguous, since it is not actually being used. Maybe something more descriptive like `getAwsKMSProviders`?
This should be a `Boolean` to maintain backward compatibility.
I don't think this is needed anymore.
this file should be updated
I don't think this needs to change. The `dashboard_url` should stay as is. This is for the dashboard middleware which is used by most users, which is not necessarily something that should be in the designer, but this is a controller that is used by most of our users.
I would like to have `db.type` and `db.instance` as public and `db.statement_type` as public and `db.name`
this seems unrelated
Why is this needed?
Is there no way to get the version from the configuration?
this looks like it is not needed because the err returned from the next line is also nil
This needs to be updated with `client_options.merge!(read: :mode, *client_options[:read])`
I think we should make this an empty value instead. This makes it harder to test that the default value isn't actually used.
I don't see why the two variables need to be declared here. Could they be removed?
why was this changed?
Do we need a `execute.as.user` property here?
I'm wondering about this. Should we make it work if we add more actions? What happens if we add more actions but have more in-flight? I am worried about a lot of things like this.
why do we need this?
I would call this `IssuerSelfSigned` to be more consistent with the other types.
Why use `ContainerInterface` if there's no other use statement?
The `docroot` path is a directory now. We are testing that `docroot` can't be anything other than `/` or `\` but just that `/` has to be stripped.
Should this be moved to `Constants` instead of `SP`?
I think this can be removed
I think it's better to rename this method to `nextPrefixBytes` or `nextPrefixBytes`
Should we use `operationResponseType()`, too?
This file should probably be renamed to `log.json`.
What's the reason for deleting?
Should we make that a flag? `--custom-labels`?
Can you add a doc block explaining why this method exists?
Is it possible to use the translated message in the message handler, as we do in the `languageHandler.translate()` method?
Is this the only thing that needs to be added?
Can this method be null?
Is this intentional? I thought `volume_up` was a boolean value.
I'd suggest that we set step_ = HANDLE_ERROR_AND_DONE as well (or maybe even better - we should not have an exception) for the case where it fails to open the range, since that would make the logic here a bit hard to follow.
I guess it will print the whole keys even when there's no keys?
This doesn't seem right: the only option that works for all platforms is when there are `datetime.min` and `datetime.sec`.
I'm wondering if we should make it a `String.new` or a `Boolean.new` method instead.
Nit: maybe just `debug` instead of `debug`
Can you undo the changes on this file? We're trying to keep our code tidy and we don't enforce it.
Is this correct? This seems like it should be the first item in `column_labels`.
Is it worth moving this to the docker package?
I think `f` is unnecessary here
Should this be `SparkOrcWriter::new`?
This should be in `utils` instead of a function
I would rename this to `CreateLicensesIndexView` to match the name of the column. The `change` method doesn't change the index.
I think you can remove this.
I think you want `expectThrows(IllegalArgumentException.class, () -> w.addDocument);` here instead? (And the one below too.)
Why is there an extra formatter for bisect?
Why is this `clipboard` not `input_text`?
I wouldn't add the flags to the service itself, but instead make it configurable by the users.
This check seems to still be required, if there is a real table, and the user has set the role to ROLE_TABLECOLUMN, then it should return self.presType_layout right ?
This change seems unrelated...
I would like to get rid of this line as we don't need it for the integration tests.
Can you rename this to `strip_vendor_model_name()`?
The same for the `$missingPlugins = []`
why not remove this line?
I think we should move this into a new method like `ensure_valid_account!`
This doesn't look like it belongs in the sampler. Why would we register an `GlobalSamplingRule` for each configuration?
I'd suggest to just leave this alone for now and use the same logic as we do in the puppetbindir
This doesn't need to be async, as it's not await
Why is it necessary to pass the exporter options to the function? It looks like it is not used anywhere else, so this shouldn't be needed. I would have expected it to be passed to the function.
We need to add some docs to this property.
Why is this change needed?
I think this method should return `Optional<GapicMethodConfig>` to make this method immutable.
Can you please log the exception message?
I don't think this is correct - the default is true.
We should add this to `gofmt` as well.
I think it'd make sense to add this helper to the base class instead of defining a helper here.
We should log a warning here.
this should not be needed?
I am not sure if this line is necessary. If you do `this.prepareDiscriminatorCriteria(this)`, it will set the `_prepareError` property on the model which is already set in the `finally` block.
I guess this one is not needed. I think that's the default, and if no db name was given, it should be taken from bundle.getString
I would prefer to use the `fire_event` method instead of adding new event handlers that you added. I don't think we want to expose the existing events, and the other events could potentially be added as new events.
I am not quite sure what this `saveNicknameFor` is for.
This is a temporary solution to get it working on a Windows instance. There was a bug in Python 2.7 which was fixed with NVDA 1.6 (which was a bug in the NVDA version).
This seems to be a leftover from the original PR.
I don't think these changes are necessary.
This seems wrong. Shouldn't it be model = WrapModel(model_func.model.cuda().data)
This looks like it'll break with the current `nix-env --eval` behavior. I think there needs to be a `-E` option to make sure it's not an empty string. I'm not sure about how this works with bash, but we should be able to run scripts in shell mode without the `-E` as it seems to be an error.
I guess this was intentionally left in?
Error during node creation (not sure why it failed at all...)
Can we avoid this change?
I think it would be better to name it "replication".
I don't think we want to change this, but I don't see how this could work.
Why do you need to make this change?
this is a breaking change - we need to mark the method as deprecated. I think `NumericOnly` is a better default behavior than `numeric_only=None`.
I don't think this needs a change since it's already handled by the above.
Why is this change necessary ?
We have an assembly called AspNetCoreBenchmark, can't we have just one of these?

Can we do `a.sum += math.Int64.Sum(vs)` and remove all the `else` blocks?
`NullPointerException` is not required any more in your changes, please revert it.
I don't think the `!==` is needed here. I don't think this is right. We don't want to add any child to the current element. It should never be `null`.
Why not use `if`? (Same below)
I would prefer to make `Encryption` an optional `*SecretEncryption` and have it default to `nil`. We can also remove the `omitempty` from `SecretEncryption` if we want.
Why did this test change?
I think it might be worthwhile to use `auto bi = mol->getBondBetweenAtoms(aid, ai)->getIdx();` here, so that we have the same result for both.
I am not a fan of using Task in infer_kernel_gpu. I would say we can remove this part of code.
It is possible to add another case where a `return` statement is missing here. It will be better if we don't have to add it in this PR
This description should be updated.
This doesn't need to be a constant.
This doesn't seem to be being used?
Nit - I don't think there is any need for the name change.
"Keychains that shouldn't be shown in the keyhint dialog" (with a period)?
why is this needed?
I removed `ignoreAddingMapKeys` to keep the `DiffList` interface consistent across providers.
I feel like it's more like `current_step` than `step`... I'd prefer if we didn't have to repeat this for every step.
Can you also change the error message here and in the one for the other status function?
This is not a good practice as the context will not be set when a controller loads this. We should instead add a check that the organization is in a context (like the `find` action), and raise a validation error if that doesn't work.
I'm wondering if this should return `o` rather than `o instanceof Date`.
I don't think this is the correct fix?
I don't think this default should actually be `NotNull`. The default value is `True` for some of the time when `true` in the config was not present yet.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think this will do anything
I'm not really sure why you need this?
Do we still need these relationships? It would be more efficient to just destroy everything.
I'm not sure why we need this, but it is the case of the case where the tunnel is not closed in the past, and if the tunnel is destroyed in the next block, it is also destroyed in the next block of code
I think we can use \ntype:string,string for this one.
This change is not needed as this function does the right thing. It is also unnecessary since len(bps.blockStates) is always 1.
I know this is already merged, but is it really needed?
why do you need to create a new instance? Why can't ds_instance be nullptr?
Can you move this to a separate file? `release` should be more consistent with `publish`
This isn't an improvement, but the `StringProperty` constructor does nothing.
The google example version seems to be a bit weird. Can we just specify the `targetLanguage` as part of `TargetLanguage`?
I think this would make more sense if we used `word.substring(0, breakPos)`
Why not using "unix://" + nodeConfig.Containerd.Address directly?
@dvoytenko I am just changing it to 0.5 because we are changing the card width.
`getNumericalType` is a bit confusing name, since it returns a bool
I think we can remove the `Indexed` from the method name.
This change is no longer needed.
Metrics/AbcSize: Assignment Branch Condition size for variation is too high. [15.45/20]
This is the only change that is needed, right? (the rest is just cosmology.)
What's the reason for this change?
@mzazrivec @danielmarbach I'm not sure about this one, but it is used for the `SpringSession`, so I don't think it is worth to remove it.
Why the switch from `metav1` to `metav1beta1`? It's a little less obvious what's going on.
Is it true that it doesn't start with `RCLONE_ENCRYPT`? I think we should change that to something like `This file will start with RCLONE_ENCRYPT`
I don't like how this is duplicated. It would be nice to add a `name=""` attribute to the input element that is passed in here.
Why the change in this PR?
I don't think we need this event handler.
@jakexks I think the code reviewer should be enabled or disabled based on a flag
This is an example of how to use `signatureAlgorithmFactory`. Is there a better pattern? Also this is not a very common use case, but it feels like it should be a private method on the `BesuInfo`
Why do we need this `if TYPE_CHECKING` statement?
Is there a reason this doesn't just take `this` and `this.ieService_`?
Why do you need a temporary here? It's not used anywhere and is used only once.
This import seems unnecessary?
Why this rename?
Nit: I don't think we want this blank line
Can't we add `SetEnvelopeContext(SealedEnvelope)` to the interface and remove the `actionPayload` field?
I assume this needs to stay.
This is the change that was needed
I think "will read all files" is better. I would also say that if we're using JSON, we can simply omit the file and only use the `read` command for that
Is this change intended?
It might have been useful that these two lines are replaced with `value.replace(/[\\\"]/g, '\\\\');`.
Can we have a test for a list of NameDeclarations that does not match a name?
@brianjgeiger I think we should add an additional `op` for `kubernetes.io/openshift/pkg/api/v1/types.Certificate` instead.
Please use `#include "holder.h"`
This class is used to handle `Rooms`.
@johnp-noel @jquense I'm wondering if we should add a file on the CDN for this instead. We don't want to use the file we're looking at everywhere, but we should just add the file in the CDN instead.
This list is not used anywhere? (in the diff)
I think that the linter is going to complain here.
I see that you changed a lot of stuff in this function...
I am curious: why do these need to be generic?
This should be `for`
We should add `CDATA=` to all these strings. Otherwise we're adding them twice to the template string.
Should we set it to true here?
I think you should use the same code for the other CreateDisks step.
@ndelangen Why do we delete this line?
I guess we need to add a default.
I would suggest to remove this else clause.
This seems like a good change. What if someone sets a proxy to be an integer and sets a string in the dict? This change seems like it will break the behavior in that case...
Is `BaseExportingMetricReader` still needed?
This seems like a reasonable default value. Are there any possible reasons that we could set this higher?
Shouldn't it be `IHttpClientFactoryExporterOptions`?
Please also add a space after `د`.
This is a little unfortunate, but it's fine.
I am not sure if this is the right way to do it, but I think it is probably not the right thing to do.
Please import the full path to the file here instead.
This is not used anymore. Is that intentional?
`attribute_changed?` can be used here, to simplify this logic. Also, `changed_attributes[name].present?` is probably more readable.
This is not really the right thing to do here. It is the responsibility of the view to create the view and return it. It does not make sense to create a view here. The fact that I added GetItemLayoutId is already on the implementation of the binding context so I am adding it here to make the code more consistent
Should this be `return "%s:%s:%s" % (self.project_id, self.dataset.dataset_id, self.table_id)` ?
This will drop packets from pod that originate from VXLAN, and the pod will be able to run on Pilot with this flag turned on. Do you think its better to drop packets instead of dropping them from all pods?
Why this? Why not have this as a method?
This is only necessary for the `wlr_vulkan_shm_image` extension, right?
Is this the correct message? `The deploy.on \\` should be a hash (dictionary)."`
`$status` may be a key name (like `$codes`), so you might need to cast it as `int`.
Why did we change this?
I would put this in a `const` at the top of the file as it is used by multiple files in this diff.
I'm not sure if we need this, I would prefer to not have it.
This is the only place where we have an explicit if statement. This will throw an exception if there are no transcode methods. I think there should be a fallback for VideoDirect, AudioDirect, or any of the other methods in TranscodeInfo, and throw error for all other methods
I wonder if we need to include a note somewhere that we can specify multiple FILE(s) in the options
It would be nice to allow empty string.
This doesn't look right.
This method is never called with `true`.
Please remove the r.
I would keep alias for consistency (and change the others)
Shouldn't the check for whether this is a serializer be moved in a spec?

Shouldn't the target be `target->ns`?
I think we have the same issue as in #13556 - `_migrate_bool` is already called in `_configure()` so you should probably remove this one
This is not correct for `realpath` (as it can be unicode), but for `os.path.realpath` we should use `'utf-8'`
Can we make this public and make it a `public partial` with a `static` ctor and an `internal` ctor with a `static` ctor?
This should be `LogFactoryFactory` and not `LogFactory`. `LogFactoryFactory` should only be used in `LoggerFactory` when the `TargetWithFilterChain` doesn't have a stack trace. We don't want the logging to happen during `LogFactory.Write`.
I think we can remove this from here. We have sm2 in flags already.
The code that was here before was a bug. If a certificate chain could not be found, the exception would still be caught and logged in, and we would get a NPE.
This should probably remain as `Warnf`.
Is this URL stable enough or is this something that we need to address everywhere?
Why remove the check here?
We can probably just make this a pointer and let the caller of AddAction handle it
I would use the Add method here too
Should the helper be called after the call to Next?
nit: I wonder if the `1` wouldn't be a bit too much for a named variable here. I think it would make the code slightly easier to read and easier to read (e.g. if the channel had a size of 1)
This is the wrong test to be importing.
Why was this needed? It doesn't seem to be used
I'm guessing that this one was intended to be `val`?
`setup-show` needs to be set to True for this testcase, otherwise it will be printed as `None`
Nit: I don't think we should be using an int64 here. Can we just use int64?
Please move to a separate commit with the explanation of changes
I'd keep `>=5` here, so it doesn't fail if the requirement is set to `4.5`.
Why not `isset($raw['lccn'])` ?
I don't think this should be in the Handler
This is the only one where we need to expose this. The only thing we need is the number of services we're interested in.
why is this removed ?
This doesn't look like it is used anywhere?
Why did you add `go()`?
nit: revert this change
Why not `where(status: 1)` instead?
You should use `map` instead of `map` - that way you'll get an empty array when there aren't tags in the list.
I'm confused why we're adding this. Why wouldn't we just return a `boolean`?
We'll be getting rid of this when we drop support for `corr`.
Is this right? Looks like we are passing a tipset's key to the state store but not the root's key. Is there some special reason to use the tipset root when looking up the state root? I'm not sure what's the right thing to do here.
Is it worth it to create a separate class, or should there be an overload that takes IComparable, and compares the elements of both?
This was unused.
I am not sure about this name. It implies the caller needs to write their own transaction, which I would suggest to call it a transaction. How about `open_transaction`?
We use `const` to declare variable and then `let` to declare it
static and final
Please also add Eth1L1FeeWalletEnableFlag
This is the main change, it's the default.
This file was auto generated, I don't think its necessary to change it now.
This is probably not the best place for a global, and the interface is really not a backend specific thing. I think `wlr_drm_check_features()` should just be called from within the `struct drm_backend`.
why not make gid an int?
Please add a trailing comma here, so that it doesn't cause any conflicts with the other files.
Why did we change this?
This function is a little odd, and I can't really understand the purpose of it. Why do we trim whitespaces when we don't check them later?
Should this be a ValueErrorException?
@karlnapf I don't see how this could work with a negative inputpattern. Can you please explain?
What is the purpose of this? Is this a container to a node? I would like to see this information on the ast node itself and not be on a tree builder and just a node that does some manipulation like checking if a node is a part of a tree node. It's not clear to me whether this interface is needed or not.
this change is wrong
Why do we need to pass in metricNamespace here?
Is there any reason why we use the same token for request and response pages?

This should be a new assertion.
It seems strange that `fd` is a `const` parameter here.
why is this necessary?
Why not `return node.querySelector('input[type="submit"]:not([disabled])').length`
this is not correct anymore, as it should not have been 5.11
This should actually be `typeof xyRatio.x !== 'undefined'`, because `isNumber` doesn't return true if `xyRatio` is null.

I'd rename this to `GAUGE` since it's not a type but a counter.
I think this will render to the user, right?
I would prefer to have a flag for `blscheck.Disabled`, because otherwise the validator will not be able to check bls anyway, and we should not block anybody from blocking on it if it's not disabled.
This file doesn't seem to belong in the PR
Is this file used anywhere?
I think this header can be removed, now that BufferFlusher has been removed.
Can we return error for this case, just in case it is not set in flags.
We need to remove TableIDType from `types.go` as well
I think this will cause `swarm.NewChunk` returns an `err` if there is a problem processing the data (for example, because of the `Stamp` in the `dataItem.Data` and hence the stamp is lost). Is it OK not to use `dataItem` for the chunk here?
this was wrong
This should be the same symbol. I don't think private use should be a special marker.
I think this is the most accurate fix, we need to update `array_count()` to `TPositiveInt` and add the same for `bool` and `int`
@jmchilton This seems fine? But just curious, how do you feel about putting this in the docs? It seems like they're all related to the Jupyter extension.
This should be a constant.
File is not `goimports`-ed (from `goimports`)
void Write<T>(Action<WritableBuffer, T> write) where T : struct;
Is this needed here? Seems like it is only used by the table, and it's a bit more of a "property".
This can fail on a model that doesn't have a `CLASSES` attribute but doesn't have `num_classes`.
@sjpadgett This should be 2.9, right? (I'm not sure this is the right thing to do, just asking)
I don't think this is correct. We need a size estimate for all hashes. It's a hash of the whole thing, not just the section.
Can `ContentLength` or `ContentLength` also be used?
I think this will need to go before merging.
This change doesn't look right?
this should go inside the except, because otherwise the exception will get swallowed.
this is an unrelated change?
Nice. We can also drop the `err` return value from this method.
Do not use compact because you can't guarantee that the result is actually a hash. Use a guard clause instead.
I think that this can be `0.0.0.0`, it doesn't need to be specified.
We have a `create_no_window` method in `service.py` and it should be agnostic of what it does, but I don't think you want to do this here?
I'm not sure why the `check` method is here, but I guess it was only needed because of some of the code duplication and the code being refactored, so this is okay.
This check is already performed for the `get_fee_amount()` method.
nit: this is redundant with GetCondition, and is only used in GetCondition.
I don't see where this is used?
`SELECT count(*) FROM %s`, `SELECT count(*) FROM`, `SELECT 1, 0` (the number of rows in the result set)
should be `_INPUT_MIN = -1.0`
`exists?` can be slow.
Nit: `if app.OmitSettingsPhp && *app.SettingsDir != "" {`
I'm not a huge fan of the name, `reset` feels better than `reset`. Also the word reset is confusing. What does it do?
@alloob this was failing lint.
Could you please use `toPath()` in case it has a trailing slash?
Should this be in an `finally` block?
I'm thinking of this: 1) If a user explicitly sets `volume-policy-name=foo`, it should return `{}` 2) If they set `volume-policy-name=bar`, it should return `nil`. This will also allow users to use `--volume-policy-name=foo`, which is why I think we're allowing an empty string for `policyName`
This should be an `os.Exit(0)` and the other methods should return an `error`.
nit: this import should be grouped with the other `clusterapis` imports.
Can this be replaced with just `assert.NoPanics(t, NewDispatcher(Config{ ... }))`?
Can we just make a type switch here, since we'll be doing this for all types?
This seems like overkill. We're already injecting say links for the packet. Why don't you just do the check in this `if`?
Why are we only handling this for external ip?
I'm not sure if it's a good idea to store the `epochlengthactivation` block as a JSON map. Couldn't you just do a map with `fixeddifficulty` and `epochlengthactivation` and `epochlengthactivation` in one place?
Do you think it's possible to do this without adding the subrepo and having this be `pleasings`? Or would that not be a problem in the future?
Why did you change this?
We should probably move the `mapper` into `toList` too.
Can you undo this whitespace change as well?
Can you explain why this can't be changed on every request to parse?
This change seems to be unrelated to the rest of the patch. Can you please explain?
This import looks wrong, it's a duplicate.
We should keep this test as it's about the releasespec, but it does not really verify what is returned by the API.
Should we have a `log.Println` here?
This is no longer required
I would prefer to have tests that do not care what the line breaks are
This was causing compilation errors in the tests with `mips` with the wrong set.
Is this still needed?
You can use `Debug.Assert` here
I am a bit confused about the error message and how the field is used
The label for a checkbox in the mouse settings panel.
Can we add `Log.Error(EventLevel.Error, EventKeywords.All, rawCollectorUri.ToString())`?
This is the only valid call site in this code, we should throw exception if the value is invalid, instead of silently ignoring it.
Is this going to break anything if we add this to the default chart type?
`bits` -> `bitMask`.
Unexpected var, use let or const instead.<br>Extra semicolon.
Is there an issue tracking this?
What's the use case for this? Why not just do `random.uniform(0, 1) > self.prob` instead of this special case?
Should be `if isinstance(v, (list, tuple, set)):`
Can this be exported?
I think it would be clearer to have `PreCallValidateGetPhysicalDeviceImageFormatProperties2` use the lock and then the unlock call.
I think `TagID::from_string()` is a better fit here, so it's easier to follow.
I think we are missing some new lines.
Why are we not using `coupon_id` anymore?
Why is this change necessary?
This should be `LogWarning` as the error message is a bit misleading, it just logs as warning.
I don't think the value changed here.
What happens if this is not merged?
I'd suggest we move the exec-agent-log.xml into `/etc`, since it's used in multiple places and it's easier for users to find these logs by their name.
This code is repeated 3 times. Should it be refactored to be a function?
This should be a method on `Error`
nit. This should be below all the k8s imports
I believe this would be more consistent with what we do for `ONLINE_OFFLINE_CHARLIST` and `ALLOW_MONSTERTYPE_LOAD` - if they want to force load the monsters, and we set the flag in the preferences, we'd need to have it set to true. Otherwise, the default behaviour would be to force them to do so and then you'd want them to be able to load them in the preferences
This class should be removed as it is not used any more. Please remove it as well.
We could use `command.Parameter(paramName, nameOrHandle, true)`. The param name will be set by `command.Parameters`.
Why remove this?
I think the first argument should be `param1` and not `param`
I know you just moved the file but I think you should remove the binaries folder from the main and make this `testbincover.go` as we're not going to build this for this file.
This is actually unused.
This should be done in the standard library instead. I think it should be a header file.
This looks wrong to me. If `client.getLocalPlayer()` returns `null` and there is a bug with `client.getLocalPlayer().getWorldLocation()`, it will always be null. I think `client.getLocalPlayer()` can return `NullPlayer` or `null` if there are no local players attached.
I'm not sure we have a test case that tests this change?
This seems to be missing the `r.URL.Path` header
This line is not necessary since `break` will do the same
Why does this have to happen in the first place? Can't it be part of the `SetTag(req, tag)`, and this would be the same as doing it in `SetTag(req, tag, false)` ?
This line was unnecessary.
This should be a single line.
This should be `bool` to match the rest of the struct
I think that you can do report.check_name.lower() here, and remove the `startswith`.
I think the logic here could be simplified to `min_length > 1 ? min_length - 1 : 0`
Is this a performance optimization?
The `-f` in `dpl_install_command` is only needed for `dpl-*.gem` on travis-ci
This should be `info` rather than `notice`
This should be `queryParams`
Should this be `journalPausedFromConflict`?
I am curious why this was changed.
This needs to have been `True` before. The issue is that this attribute is not used.
This is not the right way to do this. You should check if it's available in the manager itself
@haircommander, can you review this? It is better than me to have this constant in the `chain-failsafe_in` package
Shouldn't this be `node.wallets.tx_begin_read()` ?
Can we just delete this test entirely?
Why? It's not clear that the value of op_data[1] is null.
This should be done as a while loop.
`nodejs` and `Bson` have a `Buffer` type, not `Buffer`
We should be consistent. `TLS Security `
Can you move this to package.json, and export in both `building-config-gen.js` and `building-config-ninja.js`?
This is a hack, it should be moved inside AutoFireEnabled()
# Copyright (c) 2020
This isn't needed. You can directly use `ref.current = value`
I think it'd make sense to put this into number_to_currency
This description should probably have a note explaining what it does.
Use nested module/class definitions instead of compact style.
Could `DescribeTasks` use this exception?
This should be `java.util.Objects.requireNonNull`.
This is not needed anymore?
This will break existing apps that are using the legacy DOM API, because `equals` is deprecated in v1.5.0.
This is a change in behavior, but the other changes are not. The labels were not the same as the annotations.
Can we have this be done on a per-process basis rather than every invocation?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This can be an enum.
Is there something missing here?
Should this be a `pylint.option.OptionParser` instead, since we can't use it?
this needs a comma before the dash
This is going to be a bit too long for me. Maybe we can extract the key to a method.
I don't think this line is needed
>service impacting changes [](start = 52, length = 24) what about RPC violations?
We could also remove this method and just have the call site call `MarkDependencyNotConfigured`
I'm thinking the `MvxValueConverter` could be inlined here. Then we wouldn't need the if check. I think it can be inlined in the method itself.
this file is not a good example file.
This one I'm worried about. Is it possible that the user has already run a test on a different machine?
This is not needed.
I would use `self.execute(command, None)` instead here so the command is executed only if `w3c=True`.
nit: I prefer `HttpConfigurationAction` over `Action` as the name is too generic.
This function is only used once now, so we can remove it?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why are you including this here?
nit: `multiple addresses (upstream must map to only one address)` -> `multiple addresses (address must contain one address)`
This line is not necessary.
I think `pandas==0.20.0 ` is no longer needed here.
The thread should be declared at the top of the file.
Isn't the field name `sort_order_id`? I thought the field was `sort_id`?
nitpick: I think this change is not needed. I'll remove it.
I don't think you need to add this, this should be done by the `by` class itself.
This doesn't really need to be a separate benchmark category. Just add a property that will be serialized using the `JsonSerializer` and use it instead.
This is a BC break
@driesvints Is there a reason for adding the `nullable()` here? I'd assume this will be required for all databases that support it, but I suppose we don't have a good reason to add it here.
We should probably add a `setColumns(String... columns)` method to keep the API consistent with the other methods.
Can we name this `synonymBoostingByPayload `? I am not sure what the meaning of payload is.
The `ENV_STRING` method should also be removed.
I think these should be `int32` and `string` to keep the `string`-typed.
I think we should rename `slaveOk` to `secondaryOk` in master as well
nit: `// to and from are request attributes to fill if non-nil`
Can you give an example of how this interacts with `--windows`? (and what is the behavior of `repeat` if we don't pass `--count`?)
Please run `gofmt` on all files in this repo. It will make goimports happy.
This is not correct. It may lead to a buffer holding more than one row. The buffer is used when a record was split. We need to allocate buffer with atlease one row to ensure it is not over the threshold of buffer.
I think it might be worth it to extract this into a variable to prevent the `or suggestions.index()` branch from working.
This file is not used
Is this test sufficient? I don't think `expect(reporter).to have_received(:report)`.
nit: this is not used anywhere, should be removed
Can this import be deleted?
I think `extractError` might be a better fit here
Should we have a method to get the IAM role credentials for the task ARN?
The function `PublicKey.getValidationError()` is not used any longer. Is this intentional?
Can you explain the intent of this spec? I am not sure that it's testing what is expected, as it's not testing that the returned trails are ordered.
Should we also change the function name here?
Should we have the full path here?
Why do we need this?
nit: unnecessary whitespace
Maybe we could have this as a static final variable?
The ifdefs are not needed here, as it is already defined in the top scope.
Should we use a more generic exception?
This should be initialized to `false` in `init()`, to prevent an issue with the API.
We should not update the version of opae SDK as it will be out of date. Also, it's better to remove the `,?dist` and just do `./scripts/update-opae.sh` (without the version)
This seems to be a local variable.
This will break the ability to pass dependencies, which would be a bit annoying when we add more handlers to the future for services that might use dependencies. Maybe we should add a "setDependencies" method?
This can be simplified as `restic.TagList{Tags: restic.TagList{Value: v}}`
This seems reasonable as long as we get a good test.
Should we have a `Dial` that has a `UseTLS` flag to avoid making connections for all the TLS versions of gRPC? The current implementation would be a bit weird, since it only uses the TLS version for gRPC, but we don't want it to make the connection for gRPC versions that we don't support.
I think that it would be cleaner to have `Msmq` at the top.
This doesn't look correct. I'd expect the message to be the same as the condition above that it's checking if the request is ready.
Why not use port 14014?
Can you please move to `BatchActionTransport` ?
Why do we have these classes in the vertx package ? Shouldn't we have a separate package for this ?
This is a breaking change for the logging module. I think that the import should be moved to a top-level import.
I believe we can remove this
This import alias should not appear
Can we just use `org.apache.thrift.transport.TTransportException.getClass().getName()` instead of string?
This doesn't make sense to have for a `hostname` url, we can't have it set.
I wonder if this will result in too many errors. I think we want to log the error and continue.
Nit: could we make this more readable by using `\x0D` in front of the words? `Warning!` is not necessary to be used to identify a warning.
I'd prefer `Filter` for consistency and to be consistent with `Interceptor`, but not blocking on this.
I would expect `Wrap` to return nil on a CodeOK error, not just a wrapped Error instance.
This needs to default to null so that we don't get a warning when trying to override a value of a null value on an unknown member.
nit: can we use `nil` instead of `nil` for the args?
This is an invalid message. It should be `IllegalStateException`. We can also change the method in `AbstractMetadataStore`.
This is a little awkward. I think the `caddy.LogDestination` should be the same as what we have here, and if it changes to "filename" (which might not have to be specified in the config), this should probably be done in `pkg/controller/config` (or `pkg/controller/process.go`).
I believe this is not required.
Do we need these ifdefs for non-net452?
Should we use StringComparison.Ordinal here as well?
This is the default breakpoints from the `defaultBreakpoints` in `prop-types`
I'd prefer to add an error message with the actual template type and the name of this binding. I don't see this error message used elsewhere in the code.
Is this still needed?
Line is too long. [102/99]
This should just be `routing` and the logging below should be `routing-logging`.
@peterjc123 @tchaton @tchaton @b-c Would it be possible to use a more standard model? I am guessing that for a 2D batch, the model might be very close to 1D.
What about `SKIPPED`? Is this status actually used to detect if the flow is already stopped or not?

I think we should use the same format as above.
'STORE' imported but unused
Is this change needed?
Should these be `<path d="M8.7.293 0.6.7 6.7.354 0.646 5 8.707 12.354 1.354 11.646 0.647" />`?
I think you should add the `nfc_` to these constants since they are in a different package (the other `nfc_` constants are not used anywhere else).
I'm not sure about this - I believe that if `scope` can be a `vString`, `vStringTruncate()` should be used instead?
should we change these to Info as well? I think it is a good idea to keep them consistent.
this will fail if `timestamp` is negative, please move this check up so that it's only done when timestamp can't be zero
We can use `assert.NoError` here.
Should we add this to phpstan-cs-fixer instead of removing it here?
Why is it here? It's an internal detail of a project.
This could be a local var in lbann.cpp
I don't understand this, but I guess it is what this is about
This should be `const`.
This is not what we want
I am not sure if we want these messages to be `FINE` level or not but I think the former will make sense.
Why is this needed?
Can we use a different variable name for the validators?
Is this actually needed?
This should still update with a new number.
@mchaarawi Do you recall why there was a change in offset here?
why did you remove this config ?
I'm not sure if this should be a separate service or not. If you have a separate service for display date, it's probably not needed here.
I don't have much context on this PR, but why the `$mount` here? It doesn't do anything, it just mounts a component.
Should this say `int` for consistency?
I think it's fine to call `makeDir` with a path that is not a directory, just that path is an empty string.
Shouldn't we catch the exception here instead?
We should probably log both the proxy host and the proxy port, as the proxy can be a different IP.
The `Timestamp` is unused now?
Why do we increase this wait?
Black would make changes.
I'm not sure I like this approach. This is really a very fragile approach, and there are really no other ways to do this. I'm going to make it better.
I think this is not required, since `arg_logical_size` should also be used if profiling is enabled.
Why is there still a puppetlabs path here?
Why do we have this here?
I feel like there may be some implicit layers that can cause this call to return 0 or 1, so we should be more clear about what the behavior should be.
Why is this being called by a callback?
The same as before.
This is not a right place for this function. It should belong to the control runtime.
This is a bad practice: if the function has too many arguments, the pylint error has no way to tell which is the max number of arguments. I think you should try to disable the rule.
this was incorrect and could have been a bug?
I think this is an example of a `it` that is only used when an error is raised. We should probably add a check to check if the error is raised when the `base` error is raised.

Why do we need a new client?
I think we should keep a similar test for `span.getAnnotations().contains(annotationKey) == false`. The new one looks correct. Also this test is not testing what it should be.
Please add a license header. We should have one at the top of the file, with one at the bottom.
You changed the setting name in all the instances here
This is a breaking change. The old default value is not a valid AZ.
This is the actual change
`shuffle` is not implemented in ruby 1.9.7, so we need the new API in `0.10.x`
Does this change actually affect the test? I'm not familiar with the code and doesn't seem to follow.
You can delete this method
Is this really needed? It seems to me the only difference in that this will be ignored, and not used, right?
Why are these settable? They're only used by the Baseline module right? If they're just to avoid the need for them, then I don't think these should be part of the `ModuleConfig` class.
Can we add this to the `Resources` struct? Then we don't have to duplicate it for every resource type.
I don't think you need the `using`
`toySchema.pre('save', 'findOneAndUpdate', function(next) {`
I think we need to add an empty `span.setStatus(Status.NOT_FOUND);` to ensure that the span is not marked as `NO_PARENT`.
We don't want to send a FIN if the connection is shutting down
Nit (style): spaces around `:`
Why do you use localtime instead of the local time library? The former is a bit more robust. But it doesn't really matter, right?
Is this a leftover?
We should add indexes on host_cpid and domain_name
I would prefer to keep the parameter name here (or maybe the old one)
Why is this needed?
@nicolo-ribaudo Can you please rephrase this to be a more descriptive description of the problem?
Not sure what's going on here, but this change is incorrect.
I'd rather just use an `Error`. If there are no other errors in the codebase, it would be better to use a `log.Fatal()`
Why this change?
`recursionPossible` is never set to `true`. I think you can just drop them, and only set them to `false`.
I think we should limit this value to a reasonable size. I think that we can make this configurable, and if not, then the default would be 1kB.
`Lazy` shouldn't be here, because we're not using any lazy in the app. `Fragment` is for the default `<div>`.
This is not used anymore?
This is wrong, the config is not used by anything.
Why this change?
Which branch does this fix? It seems to me we don't need to check depth in `filter()` anymore.
@karimirc @doktoric I've reformatted this file, because it's the only thing that I am not sure if there was a rule we could apply to this file. Please correct me if I'm wrong.
Why not have the constructor call `setPartitionFields(final List<PartitionField> fields)` instead of making this public?
I feel like the button should always be shown, so it could just be a button with a click class instead.
Shouldn't we check `mapper` here too?
Why this? The same for `_print_valid_providers`.
`node.ConfigSet(ctx, "wallet.defaultAddress", wallet[0].String())` would be simpler here I think.
This is not needed. `stopInfo` is already passed to `Events.trigger`.
Why do we have "Body" in the method name? Can't we use "Body" as the name?
Why is this being removed? I can't find it anywhere in this PR.
Why do we not use the latest epoch?
Is a space here intended?
I think you need a `$countryCodeAlpha2 = array_search($countryName, $countriesAlpha2, true);`, right?
Can you update the docstring? It's not clear what '3.8' is.
This should be in a separate `.py` file
Why not just check dynamo_preserve_zmm_caller_saved here and set to true when Dynamo's ZMM library is compiled?
This should probably say "for implicit routes"? And maybe even "For implicit routes"?
I think we don't need the `self.assertRaisesRegex`, we can remove this line
I think we don't need to expose the implementation, we can just bind the impl itself.
Why does it need special permission in the test case? What is this for?
I think the commit message is not clear, could you explain it more?
We should probably use this one for `Schema` as well
We should add a TODO here to change the behavior of this env var to enable it in the future. It can be a followup change once this PR is merged
I'd prefer to call it XCB_ERROR_* since XCB can be used for other kinds of errors.
I think these should be in separate imports like `recoverutil` and `util`. I'm not a fan of using this package as it makes it hard to find where it's being used, and it's very likely that the code is used in some other packages but not the one in the codebase (I know I did it in another PR).
@pabloem I am not sure we should allow any file path to be passed here, but it seems it would be better if this had a default value.
Why is this increased?
I don't think that it's required here. The log module will log it as "app", and the logging module will do nothing.
Can we get rid of this now too? I thought `HasKeyForUser(keygen KeyGen, user keybase1.UID)` is enough to check keys for at least one device for an invalid key generator?
This needs to go into the `dist` section.
Is it possible to use `cursor` option here?
Style/MutableConstant: Freeze mutable objects assigned to constants.
Why not have the Debug.Assert here?
Why are we removing this?
I don't believe we need this file.
I don't think we need a label selector for this. I'd just use the `app=openebs-provisioner` label for everything.
I think `sns-ruby-example-send-message.rb` is a better name.
Why is this needed?
If `pCreateInfo->flags` contains `VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE`, then `host_only_pool_set` will always be false.
`asFunc` should be `asFunc<-func(interface{}) bool`
Isn't this a bit redundant?
Should we be checking this? Is it valid to be outputting a message to a file that has been read previously?
This is a bit weird because we're locking the whole provider, but we're not protecting `p.spanProcessors`
Why not just `New`? This will prevent the goroutine from starting.
Is this change intentional, or is it just for debugging?
I think you can remove this line
Why is this necessary?
Please use `pytest.raises` as the first argument.
@h-kataria, I just noticed this while writing your tests; I'm not sure why this is being removed.
Can we make this optional so we can make it optional and not allow to use it in other places as well?
@marefr I removed this block, as the tests were failing because it was trying to run as a child of the felix profile, not the default profile.
I think this was a bug that it was just wrong. The first argument is what was being deprecated.
The `kindBinary` can be removed now, since we don't use it.
Can you add a FIXME in the future to remove this once we get rid of the binary.
If we have `reconcileLBAttachment` and `reconcileInstanceDescription`, can we just use that to populate the machine status?
You can do `changes[1] = [change[1]]`
Nit: missing space before "builtin attributes"
This is the only one which should have been in the `core` package.
Shouldn't these all be implemented in `libnetwork` instead?
I don't think `io` is needed here, as this is not an io module.
I'm not really convinced we need this, I think we can do a better job by just using the endpoint for the wireguard
Can you explain why this change?
Can we not use this variable at all?
This is a change in behavior, as we were using two separate addresses instead of one of these.
@john-bodley this test was failing.
I'm not sure I follow what this `@@` stands for. It seems to be not being used in this PR?
Please rename to `getTaskDevicePluginId` (or `getTaskPluginID` if you want to reuse the former).
This is the place to fix a bug, where if the user doesn't specify the "search_limit" on the request, we'd default to the "default" for the "partial_field" and "search_offset" settings to the * value, which seems incorrect.
@stuhood @mikedanese I have updated this template to include the `db` service.
this is the core fix that fixes the issue
We should not be using these classes directly. They may be used by other modules and will become unstable for anyone who is already using it.
I think we should continue here, even if `err` is a `os.IsNotExist` error, right?
You can use `GetParser()`, which will create the parser if none are found.
This seems like it should be configurable via the configuration as per the docs.
`rewriteDeletes(Set<DeleteFile> deletesToDelete, Set<DeleteFile> deletesToAdd)`
@h-kataria - This seems like a pretty significant difference from the previous approach. I'm sure there's no other way of doing the same, so just wanted to double check if you had an opinion.
I'm not sure about that one here, but I think we need some sort of "default icon" for the icon that the category is associated with. If there is no icon in the category we should have a "default" icon for the category, which is the same category as the category itself.
This doesn't feel very intuitive - why would the caller expect it to be canceled?
We can move this check to a method in HttpHeaders
`n >= 0`?
this should also be listed in whitelist: `whitelist: xpn:xpn-master, xpn-network`
It seems like `newAttachENIHandler` and `newPayloadRequestHandler` both do the same thing. Can we combine them?
nit: move it before `if`?
I'm confused. Why is `now` being passed by reference as a built-in option, while `flux.RegisterBuiltInOption` is being used as a built-in option to get the current time?
This is a bit too small to hold up, but I can imagine a situation that there's an issue with the number of iterations.
nit: please remove the extra newline here.
This change is not needed. You can remove it from here.
Is there a reason to move this up? Is there a reason that `partPrefix` is a member function?
I would suggest we do this with our other commands as we're going to get rid of the `qute` prefix everywhere. I don't know if we can use a more descriptive name for it, but I'd just call the command `past` here.
I don't understand why the alias to `sdktrace` is necessary.
Why do you change this?
This can be removed. The other `ifdef`s are handled in `common/dr_client_thread.c`.
Should this be an argument for `singleImageImportLoggable`? That should allow to make use of the `sourceSizeGb` field, and `targetSizeGb` field.
I think this is a typo, should say "if provided, ignoring other data". And I think that this needs to change to `\n`
this change is unnecessary now
This is the only place that I think this is needed. It's the default implementation. We don't have the default here, and it's just going to be ignored. Is this intentional?
Can this be `readonly`?
Is there a particular reason we can't use this approach to build the anonymized errors? It looks like this is a pretty heavy operation for a large number of reasons.
Should the license match the `LICENSE`? I wouldn't expect this package to depend on any other packages.
nit: I don't know if we want to skip this, but this error would be confusing if we didn't check this condition. Perhaps just a debug print to help with debugging?
We don't use boxes here, but instead add styles to `AREA_DASHBOARD_ALL_TRAFFIC` below. (And similarly below.)
Can we do the same for the `volumes` field?
Is this used somewhere?
Why do we need two consts for first contract and account?
Why remove this?
why this change?
I'd rather have these as separate fields. The fact they are protected is an antipattern.
Maybe something like `"Run examples whose nested names match regexp" (may be used more than once) and then run examples that use the regex"`. It's also not clear which regex is used at all, which regex is used at all, or what is more.
I guess it's not important but it would be good to have some test coverage for this scenario. I think it's a bit odd because if the body is big enough we would be able to get into the situation where we want to have a lot of events.
I think `isset()` is sufficient here, because the default should be `false` if the association type is unset
This is unrelated?
Why do we need this?
We need this for tests as well
This should be `Log settings` not `Logging`.
This should be `||` not `||`
Is there a better place to put this logic? Is it possible to have some sort of enum implementation that is shared between different implementations?
I would have expected to see that this variable in `config.example.yml` was set to `"/var/openebs/local"`. I'm not seeing why we're not just adding the default in all these places, but I guess we'll have to keep the same behavior everywhere for now.
Should this be `TODO`?
These should not be here - this is a mock implementation.
Shouldn't this be `current_language`?
I am not sure what the purpose of this file was. It seems to be part of a public function.

Why is this necessary?
Shouldn't we remove predecessors from `root`?
Please revert, this file is not required
I think we can use `_get_screenshot_as_png(plot.state, None, format='PNG')` here instead of adding the `None` parameter.
I think we should keep `capacity` as part of the `Config` as we don't have any other values.
`runs+1` means that all the `awsVols` will have been returned. So I'd suggest removing those 3 `runs+1` variables from the loop and instead adding them into the loop as: `for elapsed, runs := elapsed+interval, 0; elapsed < timeout && elapsed != desired && elapsed < timeout && elapsed < runs+interval; elapsed += interval, runs++ {`
This query doesn't use `schedule_end_time`, but rather `scheduled_end_time`
This seems unnecessary since `setup_profiler` already does `@setup`? Also, do we need an `@profiler_set` ? I'm think it would be more useful to have the `@setup` check in `setup_profiler` instead, but I'm not super clear on the difference.
@brianjgeiger @tamirms any idea how we can make this option hidden? Or do we need to keep it?
this whole package seems to be removed as it's not using it in the patchbpf patch
This is wrong. There isn't `name` that's a LDR name but should be `name + 1`
Can this be renamed to `FormatStrings`?
I'd suggest not using `IS_OVERLAPPING_WARNING`. The message is pretty cryptic in this context.
Why change it to `attemptsCount` here?
Is this change intentional?
I'd prefer the interface being on the base class for this class to be explicit (and the other parser implementations could be on a different interface).
Can this be changed to `role="navigation"`?
I'm wondering if we shouldn't do a global flag check like we do for `DisableLocalhostConnectionRateLimit` and `IsLocalhost`. I'm also wondering if we should just check it in the `isLocalhost` function and then have both flags check if they are set, rather than having two separate checks.
Can we remove this check now? Or is that not needed?
This should be changed to `if package_stats is not None and package_stats not in {'total_files', 'total_bytes'}:`
I think we should remove the whole file. We already have the feature flag that can be set to True on the 2D case, and it is not necessary to set it back to False after the 1D case, and the 2D case will never have the feature flag.
Why do these need to be added?
You probably want to print the exception message, otherwise it'll show a stack trace.
Why do you have this check?
Why did you change this?
This looks like a duplicate of the one above it.
This seems like a pretty heavy use of the function. Can you extract the body as a parameter to the test method?
this is a temporary hack, so we will have a better solution, but we need this in the future :)
I'd say "current-style" here as well.
What do you think about having this be a `public` property on the base interface?
Can you also log the error that is returned from this function?
Please use the same naming as the one used by the service-fabric. This will be consistent with other services.
Why is this in controller but not certRenewBeforeExpiryDuration?
This test seems a little too specific. Can you also test that `PauseSync` gets correctly propagated?
nit: we can remove this, since we check it earlier.
Why not use `super.init_weights()` instead?
I'm not sure how I feel about this change, as I would expect the exception to be displayed in the context of a message that was passed. Isn't the original message sufficient?
I'd use the logger factory instead. That would let us have a consistent logging format for these kinds of things.
I believe you can use the `should_not` helpers here.
Please use explicit imports
I would prefer if we can use `client.RequestTimeout = Timeout.Infinite`
Can you explain this change?
this one should be fixed
Why not use the same value everywhere?
I wonder why this got removed?
Is this the right key? I'm a bit confused by what's happening here. I'd expect that it will be a service name that is accepted and sent in response? Shouldn't we be echoing something?
I'm not sure why these changes were made. They should be reverted.
I'd rather call it `mining successive blocks` to make clear that we're mining successive blocks.
This import is redundant.
Shouldn't this be a `<div>`?
I think we can remove the default value.
this is not correct as we're not checking if the existing edge exists, right? this could also lead to races, because it's locking on a read holder and we don't want any locks on other readholders
I think you can remove these imports now
I don't think we need safe_unicode here. We should do it when the file is imported from a non-ascii file (i.e. import from a non-ascii file). The only thing you should do to avoid it is to use `safe_unicode` for `str(obj)` and then `safe_unicode` to do the right thing.
Should not be needed here.
Can this be `app` instead?
I think this should be a required argument to the constructor. Otherwise, this will crash with a ValueError when the user is passing `results.translator`.
Why is this needed?
This is not going to help much, we can just ignore errors from Mailchimp. It's only going to raise a 500 error. If we do need to do anything about this, let's add a spec for this.
I'm a bit confused here. What's the behavior when the headers don't exist?
I think a better way would be to have an environment variable like `WL_XWAYLAND=foo` that defaults to `foo` if not set or if it is set to `xwayland`, so if we ever have to set it, it won't be hard to change the behaviour in some cases.
We should have a test for this.
@mattwire this is the only change. This is the only part of the PR that I'm not quite sure is correct. The previous version would have raised the deprecation error (I think) but the new one didn't.
Why is this necessary now?
I don't understand why `get('localOnly')` would be set to `False`. Is it possible to use `options.get('localOnly')`?
Is this the only case where the error message is incorrect?
Can you just move the `conversion.Converter()` creation into `NewProfileDecoder`? It would be more idiomatic.
nit: `doesn't exist` is a bit more common in error messages than `block does not exist`.
@sancar, I'm not sure if we should use the `DateUtil` here. I think there is a more efficient way of doing this, but I think we could also use `DateUtil.formatDateInMs`
this is a bad idea - the manager will always return a connection to the appliance if there is nothing pending to be done and the manager will never return that one, right? If not we should keep that.
I believe this is going to make a query per page, not per page, and that may be a problem. I think we should only do it for a single page, if there is a permalink, we don't want to include that.
Is there anything in this struct that can be used to represent time ranges? It seems that this field should be called 'SourceInterval' to match the field name.
This can stay as Id I think
We might also want to keep fileLength and fileCharacteristics, as they are public APIs and can be changed to a struct
I think we can get rid of this line now.
Why is this condition needed? It seems to be only checking `TRANSACTION_FEE_CAP` which is the only condition in the `addUnprotectedTransaction` method.
I wonder if we can add an index and make `persist=true` and then use `inversedBy`? I'm also not sure if it's really needed here...
Is this the right way to define the error codes?
Why do we need this?
Please don't change unrelated things like these.
I would prefer `IMPORT_JAVA_LANG` as the name of this constant to reflect that it is not the Java lang import.
This will break compatibility with older Python 3. I suggest to add a warning message here.
Is it possible that there are no changes from the previous version in the PR?
Should this really be removed ?
I don't like that we have a "many?" and a "has one?", I think we should be consistent here.
Can't we use something a bit more generic like "Starting apply to %d manifests for namespace %q", len(manifests), e.config.Input.Namespace)?
I would call it just fixed. If it is the same thing and it's not a bug, then it should probably not be called autoFix.
I don't think we want to expose this in the config
This was never used.
Why are you using a builder instead of just `new Trigger("azkaban_sla", "azkaban", triggerCond, expireCond, actions);` ?
This will break the generated binary. I'm not sure if we need to change it.
I know these were here before, I just had some concerns about this. I don't remember what the reason for the false was, though.
The second parameter is not a parameter for `ArgumentOutOfRangeException`.
Is this necessary ?
This should be a singleton, not a static field.
Can we make this `ServiceAccountAccountName`?
I don't think `-A` is necessary here, it's a valid argument.
I am pretty sure we are using `uploadxs` for upload.
Can't use `isHeaderStyle` from `lib/styles.js` as there is no need to trim.
I'm curious about what does this "NOTE:" mean
I wonder if we should not call the `onStartSendRequest` here instead of in the `onFilter()`. This way we can remove the `onFilter` method and just call this method in all cases
I think we can remove `act` here
I'm not sure we can remove this. It seems to be an API break.
This is the first thing we do with the error monitor. I think this is what should happen in this test. It would mean a regression in the test itself. This is the reason for the failure we are seeing by the test.
This will be a breaking change. We should use the platform API to check that.
I think it'd be better to do the delete in the `tearDown` method, to make sure that the `sns_backend = SNSBackend.get()` and `sns_backend.sms_messages` are not set in the tests.
Nit: import grouping here
this is the test that was failing. the number of replicas in a machine set must be the same as the number of nodes in that machine set.
This should use the `Status` and `Usage` APIs as suggested in the PR description, not the `API` version.
This is the change that causes the puppet server to bind to the agent's bin dir instead of /opt/puppetlabs/.bin. This is the actual bug fix that we had previously, but it looks like we need to fix the agent.conf dir and the conf for the puppet binary (if one doesn't already exist) in the agent config.
@barklund this was just a typo. `pouch` here is the service that's used for database.
I think this could be a method on `GossipData` now
This should be `OSRM_EXTERNAL_MEMORY && !defined(__FreeBSD__)`
I think this should just be a `debug` log, since it's not an error to the client. I'd recommend leaving a note of why it's necessary (or if it's just a debug code) to a separate PR (to make it easier to review)
I think we need a test which is not case sensitive.
I wonder if the font size should be the value specified in the workspace's scale or if it should be multiplied by the workspace's scale. It could also be multiplied by the workspace.
Nit: I think the name `listenIP` would be clearer (and maybe also the `l` suffix would be clearer for the new flag) than to use `listenIP` for the IP address in the config?
this is a breaking change, I think it's ok to keep it
this is just a naming change, no?
I wonder if we should just use a `Set` here rather than a Set of keys. I don't think we want users of this to have to know about a set of keys. What do you think?
I don't think we should use getattr here. The caller should know whether a data packet was sent or not. I don't think we should do this.
This is not a very good pattern. We should have a `TranslatorFactory` that returns a translator instance instead of using the container directly.
Use the return of the conditional for variable assignment and comparison.
I think there are a couple issues with this - we are adding this to the `outbound_http_proxy_config` which is also used by `kafka-clients`. - `OUTBOUND_HTTP_PROXY` is not used by `kafka-clients` in the past - we are not setting `PARTITION_ADJUSTMENT` to the default, so we are setting it to true in both cases, so we need to keep this here
Why did you remove the concurrent map from this class?
I believe that this is an example of the `runtimeconfigurator` interface and should be renamed.
Shouldn't we make it async?
Is `h` the right value here? The stride is a tuple of (w, h).
Why don't you use commandBuffer instead of inserted.first->second here? That would make it clear that inserted has the same buffer name as inserted.first->second
"time"
You can use `std::unordered_map` to get the device by id and avoid creating a copy.
I don't see why you need this
Why was this changed from an asset to a file?
Should this be `itemmethod.parent.__class__.__name__` or is there some other reason to use frame()?
Why are we disabling assembly resolution here and not in the `Build` task?
This is not the correct change, because it only changes the test for the first 20 pods (or the 10-1 pod)
Should probably call this OptionsDNS instead of DNS
this is not true. The server does not know anything about pingpong, this package does not expose that protocol protocol.
I'm not sure if this is the best way to handle this. For example, if the request body is seekable, the retry is always false. I believe there's another way we can do that. In theory, this should only be done if it's seekable, and we should never get to this point with it.
I don't think we need this
This change is not necessary
You can do this in 1 line
This line is a typo
This is the only one I am not sure if it is necessary. I would say that the interface is not serializable. The only reason is to avoid this issue in `AbstractRow` and `StructField` classes.
I am not fond of this change because it will cause the code to be broken when we use Swift as a base class. It should have been done for dynamic types, not just for dynamic classes. But if we are going to make dynamic types more dynamic then that's a problem.
This is wrong. The copyright was correct before.
We already have a check to see if the MD is an ImmutableRootMetadata, so we should avoid this check.
Why remove the `fld` parameter? It should not be used in the constructor.
Why is pointer needed here?
Can we leave out the `all` version check in the plugin? I can see that there are multiple places where we use this, but not all.
nit: I would prefer `from google.cloud.security.common.gcp_type import resource_util` to avoid a package name conflict.
@pradeepgang I am not really sure what is the default behavior here. It would be good to keep the existing behavior here, but add a note that this change will break the ability to use an external network.
This is a bit hard to read (or even less obvious to read, but we could use the word `Task` here instead of `TaskID`). WDYT?
I'd prefer if this was a member variable. If it's used multiple times then it's a constant.
Shouldn't this be `[]PluginConfig`?
`Start` can return an error, so this change seems redundant.
I think that's fine as it's not the right way to go.
this is a good fix to the swarm bug I mentioned above, but this should return the swarm.ZeroAddress
This is a change from a null check to a length check. I think this will break things, but it is a bug fix, we should leave it.
nit: maybe rename to `addOneRowAggregatesForce` for consistency
The changes in this file are the changes related to the bug fix, not related to the bugfix.
This seems a bit confusing. It looks like the id is the provider ID of the provider. It doesn't mean it should be the node ID, which seems like a better name for the parameter. What do you think @jackfrancis ?
Why not use `if newGroup.Selector != nil {`?
This is the most important change to the agent config package
I would expect this function to return `TxResult` rather than `bool` - is this correct?
Why are there skipped tests?
Why is this necessary?
This should be `python3`
Why is this check needed? We already return the error below.
nit: I think we should have this as the max time for the retry in the future. I think that's probably fine for now, but we can keep it for next iteration
What is the reason to do this change?
`normalizeIdentifier` returns a `string` so we can't simply use the string here?
I think it should be `isSafeMode` for consistency with other places in the codebase.
Why is this a class method? It seems like this is not used anywhere. Is there a way to get the window object in the main code path?
Should this be removed instead?
This will now cause a segfault on a non-trivial error (e.g. `s` may not be a string) - we should probably add the assert before calling it, just to help ensure we abort if we get a non-trivial error.
Can you explain why these are removed?
nit: "By default, KafkaAvroEventReporter is provided", the class name is not clear to me.
This line is too long.
Why not `User.new(email: send(email))`?
How is this different from the return in line 141?
Should we use the `DefaultTLSConfig`?
`feature_name()` returns a f-string (which will result in it converting to a unicode string) while the original was `.format()`. I am not sure how this is related to the PR but it seems like this test would fail when there was no `.format()` call at the end.
please fix the import order.
This should be a `bool`
Why this change?
why remove this?
The same name check was there to make sure we don't miss something.
I think we can safely assume that event_handle != NULL.
This line can be removed
This should be `unmap=True` to maintain backward compatibility
this alias should remain. It is used in another file in this package as well
I am not sure that we want the lock
I think this should be done on `Helper` itself instead of being a method.
I think you can use the same cast below to avoid the problem with unicode. (and maybe also in the other places as well)
Shouldn't we remove these as well?
shouldn't this be done in the base visitor instead?
I guess this is fine as-is, but I don't think we should have a `Available` field.
Nit: could this be done in a way that doesn't need the extra check for math_number?
We should remove the `[AWS SDK for Java v2]` part here as it is no longer necessary.
Why change these?
Should this check if a line contains a backtrace? I'm not sure this is the best approach, as we can have `backtrace_to_backtrace(line)`.
Why does this need to be changed?
The `netlib` import should have been removed
Is it worth making this immutable? I'd think it's only ever set when adding a new span.

`GetInt64Values` can return an empty slice or nil, so we should guard against that case here.
You may be able to avoid this by using `dal::detail::homogen_table_builder` in `tvm/runtime/cpu/dal/computation_util.cpp` as the default constructor. That would also remove the need to specify `std::array`, which is a more convenient way to construct the `homogen_table_builder` in a header file (I can see that it's used on `dal/detail/homogen.h`).
What about `assert(desktop->outputs)`?
This polyfill doesn't seem to be required, is it?
I'd rather have the original test case as it's not the root cause.
I'd suggest `Used when comparing objects with the same object instance as itself.`
I think we should make these virtual and expose it as an override.
Why does this address need to be specified for a single network? What if I want to set it to a different address and have it work with a network that does not support multiple networks?
@saumyasrivastava08 Rename this program to `Is_value_zero.cpp`.
This is a very strange API to have in this case. Why not a `ISet<AnnotatedCodeLocation>` as we have in other places?
I would have preferred to use the `BAN_PUBLIC_USERS` constant here, since it's only used in one place.
This should be `AutoCloseable` since we're closing the reader.
What's the advantage of using `maybeSetAccount` here instead of `setAccount` ? I'm not sure if there will be more options than just setting the account, but I feel like we should be consistent with how we're doing it. @jasmussen what do you think?
Should we use the `localList` object here?
missing space after `if`.
Is it possible to get the size value from the `listManifestFiles` method?
Why not `six.text_type(input)` here and below?
Why is this in a different package for the flow runner. I would suggest putting them in the same package as `FlowRunner` for the `kaban.core` package.
Is there any reason to use the `Error` field here instead of `Error: appErr.Error()`?
Why is this needed? We're not testing the block height right?
why did you change to empty list?
`class_agnostic` -> `class_agnostic_`.
I would suggest to have it named `row` rather than `row` - it is a bit confusing to me because row is a bit confusing.
why public ?
this looks like it will result in the same results in both search sessions
This line is too long
Can you add the `_DR_` prefix to the macro name?
Is the content type set correctly?
`array_key` is now no longer a valid option.
I think we should make this `Optional`, since it's the same as true. It's optional.
I'm not sure whether we should use StringUtils, or simply import static com.google.common.base.Preconditions.checkArgument.checkArgument, String.format
Should be `LOG.debug`
I don't think we need to include the logger. This package is only for tests, not for plugins.
What happens if you set `value_env` to `1` and then remove this line?
Should it mention Receive-Delete only in Peek-Lock mode?
I think there's no need for the file. Just use the standard library.
Can you also check the error messages in the code? I don't think it will do that much for a bad Pony.
What's the reason to make this an error? Shouldn't it return an error?
I think we should not use `T`, since there is no `By` param to this method.
File is not `goimports`-ed (from `goimports`)
This is not the only case where the error should be checked and the return value of WriteTo should be checked. This is what the code did before.

Shouldn't `ok` be `False` if the page is loaded?

Is this needed, or did this not happen before?
We can probably remove the `chromeOptions` test altogether now.
I feel like `urix` might be misunderstood since this is a URI, not an unrewritten URI... How about `URLRewriteCtxKey is a context key used to store the unrewritten URI in context.WithValue`?
This test is failing because we are using `CombinedPEMKey` and `AdditionalOutputFormatPEMKey`.
Is this not needed anymore?
Should this be in a `setUp`? Or does the gesture get set before we get here?
This is the only thing I'd like to keep in mind to do later.
This is the only place we set the version_, and I don't think it is used anywhere
Why do we need this here?
I'm not sure what this change is for, since this code will still work with strings that cannot be zero length.
This doesn't work in the browser because it doesn't have the correct url. I believe it will break if the `appRouter` is undefined.
Why do we need to remove it here? It is not in any particular scenario.
Why is the `Content-Type` header removed, and why is it not added in the request?
I don't like this naming pattern as it breaks any API that does not have a `SOCKS` type.
@JosephineKwa @Ladas is there a way to use `https` rather than `http`?
Should this be `obj.name=obj.name.lower()`?
This change is useless as it's not used anywhere, so I can revert it
Is this required for a specific platform/plugin? I thought we were not supporting it for that.
This should be "net/http"
I think you want the `get_options()` call instead, so you can get any options.
`if (!ret)`? `ret` is never truthy
Should we use our new style class?
The archive name isn't used in the command, is that intended?
nit: `tagKeyCombinations` => `keyValuePairsToTagKeyCombinations` ?
Is there any reason why we can't do it in the following manner: for (auto &out : outputVars_) {symTbl->updateWrittenBy(out->name, out->name, this); }
This looks like it might need some tests.
Please update the docstring here.
Please revert all these extra lines that were added by your editor.
this is a new feature, so we can remove it and have a test for it (it's covered by the `--test` flag)
I wonder why `loop_scope` isn't nullable
I don't think it's a good idea to use a global variable for this. I would just inline `util.GetLatestVersion()` in the code.
I assume we need it?
This is probably better if it's a variable. We can use `snprintf()` without a fixed buffer.
I think it's better to remove these debug logs.
Can you please rename those to reflect that they're actually related to a specific type of dataplane?
Do we need these changes? We can just pass those directly in from the restore.
I guess this was copied from the `model` file, so I'm not sure what it does. Could you please check?
Can I get a bit more background on this one, but I think it's more of the responsibility of the user to determine if it's in the focus order and not just if tabindex was unset? If you think it's worth the trouble, I'm happy to take a look
I think you missed a `.`
Can we add an example for sensitive? It's not clear when to use it or not.
I would use `sys.version.split('.')[0]` instead of `.encode('ascii')` here.
This was a change in behaviour before. Now it will only trim whitespace if the ESH formatting is enabled. I'm wondering why this is done this way instead of just moving the `if` to line 410?
This should be in the `before(:all)` block
This change is incorrect. Please check the file headers. I am not sure if it is correct.
This line is not needed, because the `require 'aws-sdk-s3'` will require it.
I'd just call these Http2ExperimentSwitch for consistency with `IHttp2Configuration`.
This can also use the `if runtime.GOOS == "darwin" { ... }`
I'd prefer a better error message here, as this is only going to be shown in the Vulkan UI as the message will be printed if the user wants something else.
We can use `transactionLastValidRound` directly here and not need to pass it as a separate variable.
Why is it called BlockIdentifier and not Block?
Why do we need this namespace? This is a public class and we don't have any public members, so it shouldn't be needed.
Can you explain this block? The only place it is set to `ImmutableRootMetadata{}` should be in `fbo.Push`
Why returning empty string? It should return null
nit: this could move to the first block
I think you'll need a `ctx` here, otherwise this won't work.
This function seems to be identical to DOM.js, maybe we could factor it out as a shared utils. It might be easier for users to extend if needed. Maybe `getFocusableNodes`?
`html.escape` will do the escaping in the same way as `str` and so should not be necessary. Also, I don't think we should be stripming newlines here (and below).
`visitor` is not used, so we can remove this.
This is an unnecessary change.
We shouldn't need this global anymore.
I'm not sure this is needed anymore. We only want to do this when the folder is known to be valid.
Use the new Ruby 1.9 hash syntax.
This is just a personal preference, not a blocker. But I think we should probably make these two sentences a bit better, since it is more clear what the team actually means.
Why this change in this PR?
I think this should be an option for the block service instead of a boolean flag. This could be the case with a custom fallback. We could add a config option that can be used for a list of fallbacks.
What was the panic here?
Can we call this in `rlpxAgent.start()` too?
Isn't the length of this file the length of the input file? If so, should we make it the actual file length or the actual data size?
I don't think this will work, because other would not be null. I think the code before was wrong.
I think we should remove this.
I wonder if we could make this a little more specific: "Only show files with only certain files that are starred." ?
The default here is `true`, right?
Can we rename this to `-r`? I think that will be more consistent with the current behaviour in other commands (as in, `ls` vs. `ls-tree`).
Should be `xdensity=element.xdensity`, as `clone()` doesn't support kwargs.
This is not the way to check whether or not the list of sources was null.

This looks a bit strange to me. Why are we adding `webelem.Group.inputs` to the list of `<input>` elements here but not in the other lines in this file?
@saghul can you explain this?
Should this be in the test pkg?
Why do we use `1004` here? I think we can just say `data1[0:1000]`, no?
This is the only real bug I'm seeing where `_sorted` is used. I assume it's because you need to change `sort`, but I'd prefer to avoid the extra `sort` function in this case.
This line doesn't need to be removed.
Should we add a warning if the user specified something that doesn't include a `_debug_port_`?
I think this should be `if os.path.isabs(sourcefile):`
These should be stubbed.
`authenticated` is a bit confusing, how about `has_authenticated_user` or `has_authenticated_password` (or `has_user_password`)?
This is a little unfortunate to see a `tx.Atomic` in the loop here that doesn't make a copy of the `flushcount` map when we have already processed all the changes. I think a cleaner approach would be to just set flushcount to make a copy of the map on line 769.
Why do we change this? The method is used only for the `fetchInstallableApplications()` method.
I'm assuming this is just for testing, or is the time to live in the past in ms? Or does this change the meaning?
Why do we delete this?
This should be a `warn` since we don't want the client to continue running. I suggest `log.Infof("%s, Failed to add mapping for port %d: %s", logPrefix, extPort, err)`
This change is wrong - it's the index of the first entry in `location_map`
This change is needed as the `cgroups` is not always an empty map.
This package should now not include the core-related tests (we need a separate package for core testing, which I think we should avoid). Also, the tests should be in the root of the repo, not in the root package.
Should we also add a `@property` for `compute.max_rows`?
This can be a private function.
Nit: group these imports below
why is this needed? I think we can use `eslint-disable-next-line` here?

nit: can you use `err != nil && !strings.HasSuffix(err.Error(), expectedErr)`?
I don't think there is much value in having the matrix in the response.
How about just `return fd != -1`?
This should be the other way around: `if (media instanceof FeedMedia && ((FeedMedia) media).fileExists())`. Also, I wonder if there's any way to avoid using an instance of for this kind of check (it will also be more efficient).
Why do we need this ?
Please remove empty line.
I don't like this, we are using this kind of method to check if a chaos is allowed. We should use the specific method for listing all chaos.
This looks like a bug. The _lastDomChildSibling is only used in the first call to dom.nextSibling which doesn't return a `node`.
We should leave this one out for now. We will need to change the implementation to return (x for x in x) when we make `in` support.
This is breaking change. We can't do this until we have the latest release
This should be `luaLuaBoolToThing`.
this is a bug, we should call rebuild_instances before the delete below.
I don't think this should be added to a new status field.
I think this is not necessary. We can just do `title = node.getAttribute('title') || ''` in `axe.commons.text.sanitize()` instead of `!!axe.commons.text.sanitize(title));`
It's not a big deal, but why this import?
Why is this change necessary? I think the previous formatting was more readable
This is the only test I could use that was a bit confusing. Can we just move the tests to the `integration/filecoin/` package so the tests will only run on integration tests? Or maybe we can remove this test entirely?
Can you make this function return a pointer so it's not needed?
I think this should be `testing.TB` (not `testing.TB`)
Is it possible that the `err` is `nil` or an error from `Register`? If so, should we return an error that we want to report? Or do we want to return an error with a proper stack trace?
Is there any way to make `HealthReport` a field on the `HealthReport` type? We are already having a `HealthReport` type.
The `false` here isn't right? Shouldn't you be testing `icmp_port_unreachable.c` with `true`?
I don't believe we actually need this regex, as the first part of the regex matches only alphanumeric characters.
nit: why the reorder?
shouldn't this be `log.Fatal` ?
Nit: I'd put these in a separate file
I think we should add a check to make sure we aren't changing a serial number.
I'm not sure if `EnableEndpointDiscovery` or `EnableEndpointHostPrefix` is the best name for this parameter, maybe something like `EnableEndpointHostnamePrefix`?
Can you explain this a bit? What is it for?
why did this change?
Is it OK to just remove this import?
If the error happens, should we just return the error instead of returning it?
dal::detail is for one api
Please don't change this class. It's a BC
I'd rather see this called out, "GetPosDefault", because it's not the default
Should we use a translated string here ? I think there is an `format_date` helper
Is the max allowed header size 16 MB or 16MB of the payload? If so, then we should use a separate value for both.
The signature check should be done in a separate PR.
@martint I am not sure why this is needed. This looks a bit like a hack to me.
This was a mistake in the earlier version.
Why did we change the default?
`this.Span` can't be null, we should make the ctor accept a `TelemetrySpan` if we want to make it required. Also, we need to validate if `this.Span` is null.
`if (dcontext->go_native || wherewasi == DR_WHERE_DISPATCH || dcontext->whereami != DR_WHERE_DISPATCH)`
The `[panel]` is redundant here
Why remove this?
Shouldn't we check for ContentLength before calling `d.CloudMigrateStatus`?
This is probably fine but I wonder if it'd be better if the tagName returned by `getTagName()` were passed in as well? This would avoid the need for another function and would reduce the code duplication.
Maybe add an example?
I think we should rename spb to stpb
This is the fix. I believe the rest was just wrong
@hmhealey @robfig This is the change I'm talking about, this will be a big one to merge this PR.
What about `ctx.Repo.Repository.EnablePulls == 0`?
Can't this be done in a single line? The line is too long.
Line is too long. [83/80]
this docblock should be removed
Is it intentional that php5.6 will always be skipped on arm?
The query relation can be either the `INTERSECTS` or a `HIDDEN` query relation.
Why this rename?
Is `Cygwin` necessary? I'd just use `nil` as the default value for errors. Also, why the list?
This file should contain the unit.
This function name should probably be more specific, maybe `ListPowerSelectorEntries`.
Why do we need these types in this PR?
This is very weird... I'd like to understand the use case here and how it's done for other commands. It is a very simple command. I'm not a big fan of this change, as there is no functional difference. What do you think about a new command instead? `python -m view_source`?
I wonder if we can just use id attribute here, or is the idea that we will always use the same id for all of sections?
@matthewKennedy I'm a bit confused by this line, it's just adding the field and not adding anything to it :)
We should probably add a warning message here to inform users the flag will be ignored when this is true?
This can be `const ( zero = "-0")`
This is a BC break, I would leave this as it was.
I'd prefer we just use `task` for now to keep it explicit.
I'm a bit confused. Why does `s.AuthAddr` have to be empty here?
Is this still needed since we don't have the `padding: 0` in the tests?
Why not throwing an `FileNotFoundException` in this case?
I don't see a point in changing this variable.
I don't like these `-16`, because I don't think they are supported by the compiler (or at least not supported by the toolchain)
I think this should be moved to `journal.json`
As per our guidelines, no newline at the end of file.
Should this be `Trace | Kill`?
Why did you need this lock, and not just use the lock on the next line?
I am not sure if we should use this in other places.
Please fix the formatting here.
I think this is the only thing that changed.
Why did you move this to the top of the file?
The xwayland->server field was never used in the function, so this is safe to remove.
Why the change?
This was actually used by the `github.com/mgutz` logxi package so I removed it completely.
I think it should be `unf` instead of `UNF`.
why change this
@kbrock I think you should be able to get rid of this one :) I think that this will break some other tests that use it as well.
This will need a better description, since this only works for custom keys and not for keys in general
I'm not sure about this line.
I'm not sure that these are actually exported, since they are public.
I don't think we need this. It should be handled in the new registration functions below.
I'm not sure if this should be `findById`
I don't think the new version has this issue.
I think this needs to be `git diff --short HEAD` and `git log --pretty`
This doesn't seem to be used anywhere in this PR?
This should not be necessary, the `dlg.contains()` check will cover it
Why do we need this?
I think this should be named `negLogLikelihood` since the metric is a log-likelihood.
We are not parsing function definitions.
This will be overwritten by the next call to ReadAsync if the read completes.
`const WCHAR *fn`?
nit: should we move these consts to line 7?
I'm not a fan of using this as a decorator but I'm not sure if we have other ways to do this.
This is the only line I'm not sure about. If a user has a `User` in their username, the scheme name will be `User`.
I think this is not needed, because there is no need to set `created` if the value is `created_on`
Is there a particular reason we have two endpoints of the same path? Could we just use one of them with a single slash?
Style/RegexpLiteral: Use %r around regular expression.
Can this be moved down below the `*`?
@ravening is this the correct way to set an extra field in an intent?
Is the double quotes necessary in case the path ends in `.rb` ? If so, I think that would simplify the code a bit, since the double quotes are unnecessary.
I guess you forgot to change the class name here ?
Can this be just `!path`?
This field is never set, but only used when creating the `Input` struct.
These two fields are all mutually exclusive so the JSON names should match, so it would be better if they were defined in the `client/auth` structs.
What happens if there is no platform host? Do these platform views show up or not?
I think the `||` was a mistake, because it is now `&&`
This is wrong. The error will have a non-null key if `rawErrorData.get(CLASS) == null` but not a null key when `rawErrorData.get(STACK_TRACE) == null`. This is not the right behaviour in most cases. I would expect `rawErrorData` to have a non-null key in that case
This should also be `NewIDAddress(1)`
Why was this change necessary, but not for all others?
`set_zoom_factor` already sets it to `self._zoom.fuzzyval = int(fact * 100)`. Is it needed again here?
I would add a default value to this.
I think we still need the Ready method. It is not used anywhere else and I don't believe that it is still useful.
Why are we removing this method?
Can we just keep this as Consensus? This is just a refactor, but I can do a separate PR after this is fixed.
Can we add a `awserr.NewRequestFailure("SerializationError", "failed decoding EC2 Query response", err)` here so that we can log the error in the `awserr` package as well?
This change looks unrelated. I don't think it is required.
Why was the license updated?
@rjeczalik why do we need to trim?
Isn't this method used to indicate whether the application is currently running on a tablet, and is now only available for tablets?
This is not related to this PR, but I noticed that `log.log(Level.FINEST);` is called before `log.info(version());`, so this should probably be in the same level.
This seems a bit strange to me. Why are we starting a mock at start?
`(IMvxViewDispatcher)MvxMainThreadDispatcher.Instance` is already a resolved instance in line 165, and I don't see this value being set anywhere.
Should we make the name more generic so we don't have to specify all the arguments?

I don't think this needs to be here, right? If this is for error handling, it should be removed. If it's only for logging, then there's no problem, and this is just for code coverage
I think this would be better as `POLICY_LIBRARY_SYNC_ENABLED = 'true'`

(style) line over 80 characters
I think we need to use an env var for this. I don't think we can use a VM file with a hardcoded value that's already set in this env var.
I think this was meant to be in the `spiffeid` pkg? @jingxu97
@sebastian-palma do we have to freeze these strings?
Should we check for this error and return a default error, like Errf(ErrInvalidStep, "%s")
Why not use Mpool on line 410?
Please don't use wildcard imports. We use it in most other classes and we don't want to import the whole package.
Why did you change this?
We should add this to the `package.json` file in a follow up PR.
Should not this be `file.lastModified()` or `System.currentTimeMillis()`?
Is this change necessary?
Should we add validation here that this flag is not empty? Also, should we also mention this is only applicable for Cloud Build and we only allow one of those? (in the description we say `compute-service-account` should be a valid one.
This is a new route, not an update. This is not an update.
This is a very specific change and not a part of the PR.
Why do we want to use a random number here?
This can be deleted as well.
Is it worth having these in a helper or can this be in the base?

Why not just create a new queue here? Seems the caller can just pass nil for the cache if they want
Do you want a nil check here?
remove these logs?
I am not a big fan of this. The fact that this was there before, it was only being used internally was so we could just use a constant for the status.
Should there be an enum to have these be all caps ?
I am not entirely sure how this works, but it appears to be using the `@user` value in a different way than using the variable on line 357 (`@user`). Is that intended?
Why not use the same header?
what if curSchemaSumary is null?
`cmd` is unused (from `structcheck`)
This is needed to run our tests against SQLite 3.
`1000000 / 1000000` is too small. What does this value represent, exactly?
I think `used in a comparison without parenthesis` sounds like it might be meant to say `used inside a comparison with a callable`
Shouldn't this be on the next line? Otherwise, the `}` can be on the next line.
Is this still needed given `readPreference` above?
@scalablecory, any reason that these are being changed? I thought the previous formatting was correct.
I think we should keep the same behavior for `PathMatcher` since there is no `PathLike` implementation. If we keep the new API, we may not need `Matcher` for `PathMatcher`.
I don't know if we want to do that for all other hosts (e.g. `master-start-curl-retries`).
I don't think we can just say "undefined" here as we do elsewhere.
This is a little confusing, I'd expect it to be `unless` and not `unless`. Maybe: `unless value.empty? || Array.wrap(value).any?`? And `unless` is a little misleading because I'm not sure that the value is empty if we are going to be checking whether the value is nil or not...
I would add the copyright date to the header.
nit: `return nil` is unnecessary here
I'm not sure I understand why these lines need to change. `setSettings` seems to be using `store( STORE_NAME ).setSettings` for setting the settings.
Is that really possible with the `m->getNumAtoms() == 14`? I think it's better to just call `addHs(m)` and check that the result is what we expect?
I think that the `attempt` is a more appropriate log level than a string, to avoid the double "retry" in this log message.
Shouldn't this be the `F` instead of `F`?
I'm pretty certain the docs are wrong.
Should this be an error?
This will not be necessary, since L378 closes the file descriptor
I don't think this is necessary to fix.
Would it make sense to print the entire resp here instead of just the status? (e.g. "500 Not Found")
I would rather see this function return 0 instead of -1.
I think this should be {1} instead of `{0}`
This is a BC break
Can you remove this import?
This is an unexpected case - the method is called with a nil FolderBranch - this should return nil.
Do we need atomic.LoadInt32s for these two?
Is this change intended?
Can you also delete this one?
I am not a huge fan of importing a specific package just to have `internal` and `external`, but I can live with this.
Why is it necessary to delete the query atom? This seems to be a memory leak.
We should not need any of the extra structures, only a single event.
I wonder if this should be the opposite: 1- `discounted_annual_payment - annualized_savings` 2- `discounted_annual_payment + annualized_discounted_savings` This seems more natural to me
I think we could use `Bitset.ofInt()` here as well, which will do the conversion automatically.
If the client is closed, shouldn't this error message be updated to say "Error parsing from client: "?
This import was added to make the tests pass on master, which is why it's failing.
This function is used to create a GCS Bucket, while NewBucket is used to create a GCS Bucket. Can you rename the func to reflect that?
`Chromium-based browser` -> `Chromium browser`
I'm curious why this is necessary. If a delta_from_revision is specified, and the target revision is the same as the ref, then the current commit will be used for the new delta, so this should never happen, right?
I would not do this. I would prefer to see the number of feasibility in this case.
This was just an unused import.
This should be in a separate commit.
I think this is a breaking change?
Please, remove this space after if
Why remove `ROMOL_SPTR`?
This should be printed at the end of the output
This will fail if atom->getAtomicNum() > 1 and atom->getFormalCharge() < 1. Can we add a check here that atom->getAtomicNum() == atomMapNum, and if that is equal to 1, don't remove Hydrides? Also, can this be made to be a switch, so that you can add the condition for hybridrides, for example?
I think that the `panic` is better than a "panic".
This should only use the sorted value, not the list of ones.
It would be better to use the `id` here, because `dismissed.id` is the cache key for all notifications.
Is this change intended?
I would prefer to see the `.__name__` value in the `getattr` instead of `cls.__name__`.
Is it possible to use `self.run` here?
Please add a `TODO(rryan)` or something similar.
This looks like the same logic as in `readFromSource(InputFile)`. Why not extract this into a shared method?
Is there a reason why the command does not use the `_windowHandle` variable for the window handle?
This is an unused import.
nit: remove empty line
I don't think we want this in the public API.
We should probably close `keymap_fd` before `continue`
This should be `yarpcconfig.Backoff`.
Style/BlockDelimiters: Avoid using do in its modifier form.
The header lines look as though: > The file has 3 header lines that contain, for each field, the name (line 1), type (line 2), and a special indicator (line 3) For each field, the name (line 1), type (line 2), a special indicator (line 3) for those fields that serve
This change is unnecessary because it is a public function
I don't think trim should be used in this test. I would recommend to use assertTrue/assertFalse for this.
I'm not sure this should be an `import` block, but given it's only used in one place, I'm fine with that.
Why 16? Is it possible to have more than 16 workflows?
Can we make this a constant in this module?
The `null` check is needed here, to be safe
Is this still used? I see some code changes that are unrelated
This was the fix, right?
@kbrock what if the `stdout` is `""`? Do we need to handle `result.stdout.strip`?
This seems to be the wrong way to do this.
We should also update the tests that set this value to 0
I think you want the `singular` here as opposed to `singular`
I'd suggest to add some error messages to those. This is going to be a lot of people who use it to get the runtime and will not be able to debug them.
Can you add a note that the `docker_labels` will be added to a bunch of other places as well, as they're not relevant for other things?
We could also do this with a `getTotalElementCount()`
Shouldn't `d.commandDigest()` be `d.cmd`?
The new code will be generated using the old code style of the project (with a copyright header).
Can we use `empty()`?
Please add these flags in the main function.
I'm not sure if we should allow concurrent query in the future, so maybe add an assertion here?
I'm not sure if I should use this getter. I think you should just use the getter in the `DoctrineFormType`
I wonder if it's worth having a `static` constant somewhere that contains all the invalid characters (eg: `VALID_APP_ID_CHARS`), so we don't have to recompile this every time?
Why is this change needed?
I'm not sure what `PIPELINES.register_module` means here?
Can you add a message in the return of `registerEvent` that indicates that the operation could not be performed?
Do we actually want to have multiple `addPeer` methods?
Why is the import here necessary?
This is no longer an iptables instance so it's better to be more specific.
`PrivacyApiMethod` can be removed
Should probably add a TODO that it's not used yet.
"A Partition represents a single slice of the entire set of possible work"?
Is there an easy way to get the spec with a single field? I think the api package should provide the spec in a single place, so if we want to add more fields we should have one struct and it should be easier to manage the snapshot.
This is not needed.
Please do the check first.
I'm surprised this didn't break before.
We shouldn't be running gn in ninja, we have a bug in the ninja package that we can revisit when ninja is removed. This should be done at the end of the test suite, not in the test suite. This is a workaround for a bug in ninja where tests get executed with Ninja without the `--ninja-args` flag.
This seems like a bad idea... Why are we adding GOMAXPROCS (0)? Why not do `runtime.GOMAXPROCS() > 0`?
This should be renamed to `SyncManagerTest`.
I think you need to check the error here.
We can just do `--storybook-host=${ hostname, port }` without the `=`
We should not use `std::string*`, because `std::string` is an implementation detail. Instead, we should use a `const char*`
this looks like it was not working before.
We could add this to `common/utils.py` instead of adding it here
This should be a separate project import from all the others below
I think that there's a bug that `Locked` is being passed by `ActivityLauncher` instead of `LockActivity`
I guess we should add `_property_msg("solids", "_solid_config")` here as well, since we have the same logic for resources?
Do we use these `flash` helpers anywhere?
I think we should rename this file, it's not about test files.
I wouldn't bother doing this check.
This seems a little strange. Why do we do so when we are using `cfg` and then just use `cfg` instead?
should we move the session.endSession call into the cleanup function?
Please remove extra new line
Is this necessary?
Can it be `StringBuilder`?
you can pass the custom importer config here and not use the `import`
Can we put it in a separate line?
can you make the default `preload` `false`, and add a new method like `openInput(String, IOContext, boolean)`?
Why do you need `name`? It's not used at all.
Shouldn't `Random.h` be removed as well, since it is no longer needed?
@nmittgeron This will fix the issue for a BAT chain where implicit value is not calculated.
We don't need window anymore
This change is because we don't need to use `ErrFileNotExists` for the file name, but rather `ErrWorkspaceNotFound`.
Shouldn't we have a `this.FlushPendingMessagesAsync(...)` call in case `this.CurrentQueueSize > 0` and `!cancellationToken.IsCancellationRequested`?
this is wrong, it should be `argvar`, not `augvar`
I don't see where `sessionDto` is used.
You can use `fmt.Sprintf("meter=%d,pktps,band=type=drop,rate=%d", meterId, rate)`
Why was the cache not required in the build script?
Should this be called "exit" or "main"?
I'm curious: did this pass goimports or did this change just require this to be a package alias?
This will cause panic if the nodeConfig.OVSBridge is nil.
Why is this one not caught?
missing return type
I don't get why you have to make this static.
Why not add this as the first arg of format_exception_only?
Can we remove `||` here and below?
nit: could we make this a one line func?
why do we need this?
This is the only change, it can be reverted.
I'm not sure what to do here. It's a very big deal because we have a couple of files (or many) that are not used by this plugin and they have to be in core, and the whole file is not really shared across core. It's not a blocker of course but it could be an issue for some other plugin.
This seems unnecessary, the `wait` method should be called with the same args and return true if successful.
why is this a separate struct? It doesn't really add anything but it's a pointer.
This should be marked as deprecated, and we should probably remove this method.
I don't think this is needed.
Line is too long. [87/80]
Please undo this formatting change.
You can use `registrationId.split("&")` instead of creating the array.
Line is too long. [91/80]
I think we should do it for `m_value_type` as well
This type should be `Record<string, any>` I think, because `Meta` should be a `Record<string, any>`
Nit: can we rename this to "_send100Continue"? Or even "_hasContinue", or something?
this is not used anymore, can it be removed?
Why did you change to 2020? We don't do that.
Can you please explain why these changes were necessary?
I don't think we should add checks here because the method can return `null` as well. We can just remove it. And it is not used anywhere else.
shouldn't we throw an `InvalidEntityDefinitionException` here?
Isn't the default for this config already set by Google Analytics on every page?
I know this was a bit trivial - but maybe it's worth having the full exception in the string?
Why is lastTf removed?
This looks like a leftover of a previous change that could have come in handy for debugging.
Can we make it `null` if not set? We should avoid having to do a `array_key_exists`
Is there no more `np` import we could import?
I think these changes are not needed, `\/` will replace `v` and `apiv` too
I guess it's fine for the time being, but should we consider having this be a `Directory.GetParent()`, to be more specific?
I guess this is because of this change? @liggitt
This seems unrelated to your changes?
can we add an error message?
I think that `MemoryPool.CreateSlabMemoryPool()` was already disposed in line 135. We may be able to remove that.
Is the plan to move to an interface later?
I think it would be more efficient to do `index: true` on `grant_id` and then just use `grant_id` as the index.
If we're just using the winimage as part of the notification object, should we just make this the default value of `notification.winImageSVG`?
Why not just use `ECS_HOST_DATA_DIR` here?
I think there's a `mapstructure.Merge` func that might help here
I like this much more. I like the idea that we'd still want to use `pkgpkg.Registry` (and we'll have to import that from `pkgpkg`)
Why was this removed?
Why this is necessary?
Do we have a reason you added this?
I think we should not remove this parameter. It is useful for debugging and is not recommended.
Why not `3.13`?
This log is a bit misleading, because it isn't actually about the cache.
Why not `SparseMatrix` here?
These are imported as `Action`, so they should be imported after the `from` line to avoid imports like the others.
I don't understand how you plan to use it in `MetricGroup`
I know this is not new to this PR, but should this function be renamed to something like `lint_role` since that's the more common thing it does (it's just linting an object), and this is actually a "run" command?
This should be `//`
Shouldn't this be the proposalID of the manager and not the proposalID of the proposal?
I don't understand why `Baseline` is being used.
Should we test the error response here and in `clientConfigTest.js`?
The default is to use pip.yaml
Is this the right behavior for this test or is it a temporary fix?
@flo-dmitry is this going to work in all cases?
This doesn't seem related to the rest?
I think this is redundant now since this code isn't called in the else clause.
I think you can just put `true` here instead of `false`.
I feel like `windows` is a confusing name for this. How about `appveyor_windows`?
The command names should be lower case, i.e. W3C_MINIMIZE_WINDOW (and below)
You can use `.format(self._predictedFieldName)` (and remove the brackets)
Why did we add the parameter here? Can we get away with using the default value?
What would happen if you set a custom verbose log level in `bolt.yml`?
Why do you use `to_string()` instead of just `to_string()`?
Why was this needed?
Can we make this a constant instead of a method?
I'm not sure if this change is correct. I think `loadLoginPage()` is called in `shouldUseCertBasedAuth()`, but this code seems to be calling `webviewHelper.loadLoginPage`, but the method `shouldUseCertBasedAuth()` checks the configuration.
This seems like it would be better expressed as a regular "do not recursively render..." flag.
This is a good example of how we want to use `window.location` instead of using `dashboard.html`.
Should this be Assert.NotEmpty?
Why is the hint 8?
Why is this an error?
Can you clarify the behavior of this property on `MapTo`? It seems to me it will always be `undefined`, but `null` or `undefined` will be used?
I'm curious why sqlite3 isn't included here?
this is not correct because `$this->relationModel->table` should be `table`, the table name may not be unique and can cause conflicts between different tables.
We should remove 'x-gtar' from this list because it is already included in the architectures for tar.tar.gz
Should we return an empty list here instead of an error?
Please revert this change, we are trying to stay away from `link_to`. This change is only a suggestion for a refactor.
should use `mca_errno` instead
Shouldn't the logging be kept here? (The `log_value` function above does that.)
Why is this being changed, the transaction is no longer part of the transaction.
The function in this file is called `scale_Vdw_params`. The function itself should be renamed accordingly.
This is pretty hacky but I wonder if it could be done differently... @jreback do you know?
We're planning on using `prime-maintain` here, so I think it's better not to use it here.
What is the purpose of static?
Should these be `optionName` and `optionNameGatewayMode`?
Which is the reason for this change? The only reason it seems to work is if the user has set both css and scss for each module. I think it would be good if we could avoid to restrict it to scss by default.
We could just check the setting here. We don't want to expose this setting to external systems.
Should this be `AnnualBillingMailer.notify(current_user).deliver`?
The class is `HierarchyPackage` but it's a class name. Maybe `HierarchyOptionsPackage` (I'm not sure, but still) would be clearer.
This regex needs to be changed as well, or you will get an error when trying to run the test on other platforms (or if the regex does not capture that one) :/
I think we have to stop this, right?
Should be `tuple` instead of `Sequence`
These 2 methods seem identical to the one above, but with the same name?
Why this change?
I think we still need to escape the `\` as well.
`Save` can return an error if something goes wrong with the given `[]byte`. I would rather not return anything and just return nil, to be explicit.
why do we need to initialize it to empty dictionary?
Why is this necessary, it seems to be the same behavior as before, except for the new line `if (child.getClass() == targetType.getClass()) {`?
This is a breaking change in the contract, but I can't think of a better way to handle that.
I know this is not part of this PR, but this one can be replaced by `LOG.infof("Pulling %s:%s", name, tag);`
This is very hacky, I think it should be a function in the `utils` module, since the actual binary string representation is not necessarily guaranteed to end up in the correct format.
Can you also add the new field in the `TaskInfoInfo` struct?
I think you should also check if the `nextObject` callback is still invoked with `null`.
Why are we calling flush twice here?
This is not correct. I thought complex64 had been handled separately
I'd rather keep this `if` statement. We should always be returning a list of values, so we're not checking it at all.
Should there still be a directory to remove after a test?
Why did you change the exception message? It is now a generic "only" error message
Why not just use SolrRequestType.QUERY here and elsewhere?
Should we add a `toMap(Function<? super T, ? extends Map.Entry<? extends K, ? extends V>> f)`?
I would prefer if we don't have any side effects here, but that's a minor thing.
Should this be `notchHeight`?
I think this is the reason this was failing earlier. The previous test was passing because `curRound - 5` was the last block.
@blows I'm pretty sure this is not what we were talking about, as we don't run `sed` on the `/etc/cron.d/sysstat` to enable it, so we need to enable it on the host and not use the `sleep` call in `collect_perf_data`
I would have called it `resume_from_failure` but I do not see a good name for it.
This seems unnecessary
I think that the default should be `IdleTimeout`
Who will use F in this file?
I don't think this is used?
@tinaafitz Should this be done before detach_volume?
why not just set to the last confirmed height?
Is this a leftover?
This is a breaking change
I think that you need `webmAudioCodecs.includes('opus') ? 'opus' : 'vorbis'`, otherwise it's always present.
this change is to make it consistent with the code below in StatsValuesAPI.java
Is there any way we can do this without adding the conditional?
nit: remove empty line
why pass nil as the option?
Nit: I think it might be nice to have a `isTopologyDescriptionPresent` function that returns `true` if the description exists and `false` otherwise, just to make sure that we don't accidentally forget to update it.
I think `import sys` is the right thing to do here.
I think this test will pass if the checkSetup call fails, because the dom node is `<div></div>`
We should probably have some sort of configuration for this, since we can easily have a config file that does not have any static assets, and it doesn't have anything to do with the CDN cache.
This change is not required.
`delegate { }` ?
The error message does not match `expected error`
Isn't it better to use named parameters?
Is this supposed to be `"[CLY]_action"`?
I think we don't have to make this `FrameworkDescription`. We can just use `FrameworkDescription.Instance`, we are in a static constructor.
Why is this needed here?
Style/ConditionalAssignment: Use the return of the conditional for variable assignment and comparison.
This seems odd, I think it can be removed?
This will return the wrong `RepoMirror` for `isNameChanged == true` but we should probably check for that and return an error if it's present instead of just silently skipping.
Can we use `use ResponseTrait` instead?
Is it fine to keep `LOG.info(...)` for `finest()`? It doesn't look too verbose for this.
I don't think this is needed
This is a little hard to follow. Why do we need to copy all the fields?
Why the change from BPFEnabled to XDPEnabled here?
Should the ASTAnyTypeDeclaration inherit from the ASTAnnotationTypeDeclaration?
nit: could we move this to a `http2` package to make this package less confusing?
Is it really the `catch`?
This needs a unit test, I don't think that is possible.
This is just a controller change, not a route change
Should we do some checks in here to make sure `TRAVIS_OS_NAME` is set or not?
this change is just to make sure we don't regress the existing code?
why is there toLowerCase() here?
Why change the ordering of imports?
I think this could be replaced by a static `Map<String, BenchmarkResult>` and the `TimeTracker` could become static `ConcurrentHashMap`
I know you didn't write this, but I find it a bit weird that the `str` here isn't a QString, but the rest of this PR is not.
Why are we unlocking here but not in the other branch?
I don't think we want to use this here.
File is not `goimports`-ed (from `goimports`)
nit: I think it'd be better to keep the formatting the same. I think it would be easier to read.
This file can be moved to `src/storage/bucket/bytesink`
Why do these need to be pointer?
I'm not familiar with the specs, but is there a reason you changed the name of the test? This test name is not a bit clear to me. Is it `Installing modules from Puppetfile without resolving`?
Is this test no longer relevant?
`cb` should be `NULL` if `instr_is_label` is false, otherwise we would silently fail to set `instr->label_cb` and hence fail. I'd also check the `instr->label_cb != NULL` case too.
I'm not sure how it would work in the case of multiple public plans.
this was the only change in this file. I've just added the `nolint:gosec` tag on the line above it to fix it, which is fine, but we'll have to fix this in another PR.
why did you change this line?
These are used in S3ConnectService
Can we name this `CASDefaultCstorSPARSEPoolEnvKey` to make it clear that this is only relevant to parsing the yaml config?
Do we really need to close the client in this case? We should be able to use `withRetries` to set the retry count to 0.
This is the main change for the PR.
This is not needed since a query can not be printed directly
I think I missed this one, but should this be `import datetime as dt`?
It seems a bit odd that we are using "Too Large" here but "Too Large" for the launch timeout. I wouldn't expect this to cause trouble for anyone, but maybe we should use "Launch Timeout" instead?
I wonder if we should move the default value for `returnNumber` to the function body (since it's a bit hard to follow how it's used)? I wouldn't bother with the default value and always return the number.
Why remove this?
Why not keep the methods in the workingset?
Why is this needed?
Maybe it's worth making this configurable?
This line is unnecessary, the `rjust` will just cut the trailing `2`
This is wrong. If the `k` is not in the `signedHeaderVals`, the `k` in the `http.Request.Header` is going to be `k` without a canonical header set. This should return the string value.
`256` is only a bit long, but the current check does not check `0`. I guess that is fine for now.
nit: can we add log message here?
I'm not sure if this is actually the best function, but I'm not sure. What I'm asking is if you should be using `Player` or if you are getting a `Player` in the hierarchy and the container will contain only one item type.
Why is the method being changed in this PR?
should this not be `h2o_error()` ?
This doesn't make much sense. The date would be a date in UTC, and we'd want to send out the time in the `utc` format. The only difference I see is that we want to send out the `in_time_zone` format in `Time.now.in_time_zone`, which is a timezone independent of the locale being used for email.
Is there a way to pass this in with the others (like the `ellipse` option) instead of passing in the `cycle()`? This seems odd, I think...
Why are you removing empty entries here?
Why do we need this method? It's not used in this class.
Shouldn't we return err here?
This should probably be in `org.fsck.k9.view` since it is just a container for a widget?
Please, remove the code.
@karmacoma is `$('<div ...>')` correct in javascript? If so we may need to escape the quotes before appending to the body.
What happens if this is set to 0?
This looks like something that should have been reverted.
Nit: should this be a `errors.New`?
@sheelio do you know a better solution?
This is no longer needed, since we have an `import axe from 'axe'` below.
Can you please add a trailing comma here?
Why did you use `2` instead of `0`?
This is probably not needed since we are using `finest`
How about `hf.request.headers.pop(":authority", "http://localhost:3000")`?
I wonder if this is the right place to log an error message. This is for all error messages. The task response should contain error information so that we can log it.
This should be `return ret;`, and `ret` should be the `lua_error`.
I don't think you mean "markexpr is not poppler" since this is for tests only.
Why is this added?
Please remove code if not needed any more
We could add `fetch_iam_policy(self, project_number, dataset_id)` or similar, but this would require a big-informative API change.
Why do we return an error here?
This could be a `LOG.infof`.
This will be the default logger
I would rename to `isEmptyValue`
The problem with this is that we are passing in a generator expression as a generator expression, not a list of tuples. I think we should be using `tuple` here instead.
The file doesn't exist, it should.
Should this be `aspnet-mvc.request.request-child` instead, as we have a `RequestParentOperation`? (I know it doesn't really matter much since this is an internal implementation detail)
`select_hosts` returns all hosts as strings, so why not `select_hosts_by_type: :ssh_nodes`?
This can be `@purchaseable` right?
I'm not sure we want to remove this, we want to print a lot of data to the console in a way that doesn't make it harder to see the logs.
We don't need `from ..utils import multi_apply`, we can just import `PseudoSampler`.
I think we should not import this package from the protocol package.
missing spaces around operator
I would suggest to move email_violations below inventory_summary import.
I think this was accidentally left in.
This will need to be updated after the new `postgres/dialects/postgres` upgrade
I don't believe this is correct. It should be `BCryptPasswordEncoder.BCRYPT_VERSION_2B`.
I think `lock_a` is not used here.
I believe this change should be reverted.
The `leader == null` check looks unnecessary. You can use `zkShardTerms.getTerm(leader.getName())` directly.
We don't want to set the class name if there's an `AbstractAnyTypeDeclaration` but we should not. If there's `AbstractAnyTypeDeclaration` we don't want the class name to be set.
This file needs a docstring.
This is the same as above for the `case err2 != nil`
Should this be swapped, to ensure we don't have `_TtCs23_ContiguousArrayStorage` twice?
Do we need to check for >=16 ?
Should this be 0x1FFFFF ?
The fact that `envCfg.Creds.HasKeys()` returns false is a bit unusual. I think it might be better to use an `IsInvalidProfileKeyError` function that checks the validity of the key. It would be easier to reason about this if we could add more logic in the future and it would also reduce the number of if statements that need to be added to the `Load` method.
Should we consider moving the NotEnoughBalanceFilter to the TransactionFilter pipeline?
Is it possible to have a map with the same key and different values for the same permission?
Why not use `if runtime_type.name`
why this class needs to have this?
why did you change this one to 11?
The same here. `getAppId()` could be a local variable.
I think that `url` is a better choice than `urlstr`. We already have `url` as the `url` property.
Should you pass a context instead?
Why not just `resource.MustParse()`?
I don't see anything to the log message that this will queue a resync if we're not in a sync, right?
Why do we need an extra index ?
This is the new header. Please remove the file.
Is this really correct? I don't see it in the diff
`Object.setPrototypeOf === typeof Object.setPrototypeOf`
I think you want this for `d`
I would prefer to have `SearcherTestCase` that tests all the functionality of this class, instead of just testing the `CountingQueryTimeout` in the test. This will make it easier to test if there's any test that uses it as well.
`inventoryfile` is not a good abbreviation, I would change it to `inventory-file` instead.
Should probably add a `<remarks>` tag, since this is an event, but I don't think there's any way the engine can handle this without needing to expose it.
This is a breaking change, so we should revert this change.
Why is there a `Callable` here?
Is it really SECURITY? We're using this in the core package. What's it for?
why is the number 41?
Why are you changing this ?
I don't think this needs the `toString()` call
I'm a bit worried about the impact of the size of all the includes. Can't we just move this include to `<KokkosCore.hpp>` and remove this file and all the others?
Why are we changing this to be a qid and not a metric?
this is a bugfix?
This interface needs an extension
Is this change intended?
This seems like a pretty big assumption, but I'm guessing we can do it later, if we need to.
I think we should remove `FSTOrd50` from here, as that's what's causing the tests to fail when we update the code coverage.
I think it would be nice if this was an overloaded method. The fact that it doesn't need the timestamp in the calculation is a bit too early to implement as it doesn't need to be in this method, so it's better to put this in the method instead and only make a difference to it once. The same applies for the other methods.
nit: the URL
Isn't there a function we could call here instead of fetching all the listens from the db?
This one doesn't need to be changed, and is causing the build to fail.
Why not just update this? This is a new feature, right?
The copyright header should be changed here as well
Should we change it?
Is it worth making a note here about how `PreferredChain` is set?
Why is the default changed?

why 8? why 8
This should be capitalized.

Why wouldn't you create a ClusterSync when there are not syncsets?
I assume this change is not needed since it is the only place we are using it.
What's the reasoning for the extra space here?
This seems like a bug fix.
Should this be `TryGetMinimumGasPrice` as it doesn't return null for a non-zero base fee?
This is the change that's causing the issue for maps with a custom function implementation.
We need to reduce the number of partition per split.
Why are we not using System.Reflection.Linq?
I think this is going to be a bit too complicated to write, and probably should not be part of debugger. Instead, it could be a helper function to generate these ranges.
This is not used.
nit: can the function name be more specific? `AllowConnectionWindowIncrease` seems to imply that it is an increase of the connection window. Maybe `MaximumMemoryIncrease` or something like that?
I'm not sure this is the right way to show this link. Maybe `new_ncr_proposal_path`?
It is very hard to know the impact of this code change. Is it possible to use `prefetch_.empty()` instead?
this should probably be an error
Shouldn't the quotes here also also get escaped? The original code seems to strip out the quotes in the first place.
Should we use this ID for the new member event?
Line is too long. [85/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
nit: this name is a bit ambiguous. `RenewalTime` seems a little confusing to me.
Is there no way this can be done without a lambda? It's used just once and then used to construct a lambda?
I think you need also remove the `order` arg from the `seed` option.
`mod->is_client = true;`
I am not sure if adding a separate line is a good idea. This is only a single line. I would say that it is better to have a separate file for reading.
Avoid import * for non-test class. We try to avoid using * for imports and in general avoid them.
`server()` is not exported anywhere so I removed it.
nit: move this to the block above to group with other internal packages
Please, add a space before the =
Why is this interface necessary? The same question applies below.
I think this needs to be `@link`ed in `docs/`.
Is this just a style question, or is the pylint error here still true with `no-member`?
I think this one can be removed too
We can just set this to 50.00, right?
I'm not sure if this is the best way to deal with the situation when a block pointer isn't gc'd at that point, or if it needs to be.
`if self._w3c else ...`?
This should have to raise an exception.
I'm assuming you're going to change these endpoints in another PR?
This is probably the right approach. I think the best way for this would be to just do a `fs.config.KBFSOps().SetReadonlyNode(ctx, n, p)`.
Shouldn't we be passing a different response here?
I don't think we need this line, since it is already included in data
Is this necessary?
I would add the stacktrace of the cause (and possibly the exception) to the log statement.
I think this needs to be updated for py2.6
`openFileCost` can be zero if it's not a plan.
Please use a constant instead of the hardcoded value.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is a nice change, but I'm going to change this to `smsg.Signature.Len` to match what we do in the RPC.
`OrderedDict` is unused.
I don't think we can remove this. A lot of code is using parent_nodes.
These should be moved under the `java.io.IOException` import
Why is this changing?
I would have expected to see some test case for this, but that's the reason why we removed the code
I think you can just check if key exists: `isset('recaptcha_' . $key)`
Why are we using pointers here? Is it a pointer type? If it's a pointer type, why do we allow null?
This method could also be made package-private and used by `SigningUtils` as a helper method in this case
Isn't this log message too verbose? I think you should use the log level of the log system, which is INFO for all the log messages.
You don't need the toArray() here
I don't think this needs to be a separate field - it can be a local variable in the constructor.
We should add this to storage/gcsblob.go also
We should also rename the file to `validationErrors`
This is just a formatting change, please revert.
nit: `new InternalRecordWrapper(`
@bradymiller, I'm not sure I have the right way to add this. I think it might be more appropriate to add an attribute to the session that is currently on the HW.
I guess this is not needed anymore as the `else` clause is not executed when the `editMode` is also true.
Whoops, these were not working on linux.
`getAssemblyOptions === undefined` is a more accurate check.
nit: maybe make this an `import_` const so it's not repeated in every import call?
I feel like this will not work when the block is nil, because it's a string (not a block). We have to check if it is nil before trying to parse it, or otherwise just set it in the block, but we could check if it has any values.
Is this intentional?
I'm not quite convinced we should be adding marionette: true in the default.
why not pass a `ChainStore` directly as the param?
This should have an error if device name is not set.
Why are you not using `DefaultTimeoutMinutes`?
this is the default
Whoa, so this is now `>=1.15.0`
I would prefer if we didn't remove this from here, as I can't think of a scenario where it would cause it to render.
Why not have a constructor overload for this and then have the ctor call `this(null, null)` directly?
I'm not sure I like this package. I'd rather go with `value` or `vector` or `valueValue`, but I'm not sure if that's the right place to put it? I know I've added `Value` to all the places in the code.
We don't have the `remove` package in the `server` folder, so let's remove here as well

Do we need a `Load`?
Why this change?
Should this be `@wordpress/fetch-mock`?
Is this change necessary?
This should work without the dot, right?
Why do you use `co` instead of just `db.query`?
Is this going to be too noisy? If we don't want it at all, then I would rather use V(2).
This is a little bit odd for me to see a layout for the visualization website_optimizer. I'm thinking about a layout for the visualization frontend. The frontend would then also contain the "visual" web-learning. This is the only thing that is used in the frontend and the rendering for all of the visualization frontend.
I'd rather not have this constant here as it's not really an actual name of the feature (since it doesn't really do much but it does make it clear why it's not used)
What's the purpose of this? It seems weird that we are trying to do this for paused. Is the goal to have the process exit without a cgroup thaw? Should this be done in an else if? I'm a bit confused here.
I know this is a nit but I'd like to see `const MongoURIError = require('../../src/error');` at the top.
This is a bit awkward. How are we going to handle the edge scenario here?
This is the only line that actually fixes the panic. If it's not a critical error then it's fine.
This is not needed as we have the `currentContent` variable already in the if and else block
This method does not seem to be used anywhere?
Is this a bug fix?
This function will be implemented in the new Vulkan mode, not just the BrowseMode. I would say, not this PR. I think it's good if it does nothing in BrowseMode.
`apt-get` is a Linux only binary so this is fine.
This was not mentioned in the docstring and should be removed.
I'm wondering about this test. I guess we don't know why we can't just test the equality of PriorityQueue's values with the `SerializableComparator`. I don't think it's worth changing the code here though
This is not thread safe, because it is not a blocking call
Isn't it the default?
I think we should keep it 1. I would have expected norm2 to have stride=1 and padding=0, dilation=0 (which is what I was doing before)
This change seems wrong, it was meant to be the same as the previous code?
I don't understand how this is related to the fix?
Why change this return?
Why is there a `_` before the `&&`?
I'm curious about this one.
This function is now unused, so I decided not to remove it.
This will only find extensions that are allowed with `.md`, which we don't want to cover right now, right?
This could be removed, since this is the default value for the property
I think it would be better to have a single error message for this, so we can see which options have been added in the error message. The user may also want to set it, though.
nit: we could use `dist-tags` for this one too
This is the actual fix. We don't need to bother w/ queue anymore if we keep it.
This is wrong and should be List.ofAll
This method is already on the `User` class, right?
This is a breaking change, we need a note in the CHANGELOG.md.
@brendandburns I'm not sure that this should be kept around until we have the deprecation.
The `<array>` here is not correct, because this function returns the input array, and not the result.
This doesn't look correct.
I'm not a fan of this. I think it's better to put the `\\` at the end of the pattern. The only thing that makes a difference is the regex expression, so it can be replaced with a `\\.`
I wonder if this is the correct logic. The cgroups2 path is the mountpoint from the mount point that's being parsed from the mountpoint. The reason being that we would have to parse `/etc/passwd` when it's set to something like `/etc/passwd`. I think this should be more explicit in the function name to make it clear that the subsystem is the cgroup2 path, not a path we want to get from the `/etc/passwd` file, which is the path we want from the cgroups2 config file.
You've changed this to a deep merge. Is that intended?
Is there a way to make this a more precise type than a boolean?
Should this be `campaignSourceID`?
nit: I'd name this as `ASSERTJ_ERROR_PRONE_JAVAC_VERSION` to be less confusing with the JAVAC version we are checking, and `ERROR_PRONE_JAVAC_VERSION` to be consistent with the JVMs
I think these options can be removed
Can we just delete this code?
We are disposing the object. Do we need to suppress it?
Is this needed ? I think you should use `sep=sep` for all tests.
This is a very low value (0), I'd use a smaller value. `ENV["NO_WELCOME_EMAIL"] = true`
Should we check if `pos == token.Pos(len(lit))`?
I'm not sure this is necessary. The "NONE" string is always equal to an empty string.
This override will be unnecessary.
Why is this needed? Isn't this function supposed to be used only in the tests to load the creatable?
Can we use a constant for this?
This is a little awkward to read - `@user.id != @record.user_id` would make more sense I believe, but the condition is not really clear.
Is this the correct way to do the order? It should be in the same order as in the `where`
This is probably not safe, because we want to guarantee that we're not holding the lock while this loop is being run, and that we have a lock held for the other loop. It probably is, but if it does not, we might want to protect against it.
Do we need the copyright change anymore?
I think there's a small chance that the stderr will not be released, so it would need to be checked.
I guess I don't get the point here.
Why the space?
Is this needed?
This is a great start. But I was wondering if you should just use `require 'openssl'` here and get rid of this if block.
`set_format` -> `set_package_format`
I think the type here is an element and not an element.
This should be `-3`.

Should this be `Store._custom_options.get(backend)` for consistency.
I'm not sure we need these APIs. I would prefer not to have them. If you need to, we can just implement these in `deploymentchain.go`.
Why did you change this?
We should not change this. If the test takes too long, it's probably time for the learner to stall the learner.
This struct should be called `PeerTracker`
Should this be a LOG()?
This is a breaking change for the framework. We'll keep this function signature consistent, but it's a breaking change that's not really needed.
Why do we need a default? Can't we just return nil if the `typeVal` is `ScheduledJobType`?
this seems unrelated?
Can you add a `TODO` here with the issue number?
Should `Address` be lowercase? `Address` is not a `checksum` type.
We should add a condition here that specifies whether there are requirements or not, to allow it to be triggered by the user.
Style/Proc: Use proc instead of Proc.new.
This can't happen, because there's no `Write` or `Get`, or `Put` for an empty list.
Why the `CancellationToken`?
Shouldn't this be set to true by default?
I think you can remove this line.
Nit: I think this should be a separate PR.
Can you add a check for the status of the response body?
why did we need to change here? I think `this.approximation` is not needed
`TiSession` is not used outside this package and can be removed.
nit: I think this sentence should be `Subclasses` not `Subclasses`
Is this change required?
I thought we wanted to have an empty string for both of these?
Is it necessary to set it to true everywhere? I think we can remove it for now
Please revert to original original version
I don't think this mutex is necessary. The `OnStop` method is not thread-safe (I think it's a bit odd to do that in a stop call)
You can't do this on the client. This will result in an invalid packet. You need to create an event for this.
Is this intentional?
This line isn't necessary. `npm config set spin false` will default to `true`.
You can use `Header.from_string` here.
Can we put this in the log level as the block is added to the log?
This should be 1.05, not 1.05.
This looks like an unrelated bugfix, right?
Do we need this method at all? Can't we simply call `PersistBlockInfo` directly?
This is just to test the `init_cfg`.
Why don't we check for `null` here ?
I wonder if we should move this to RuboCop as well?
I'd say this is a lot of conditionals, and we could probably do it in a single check in the `canRate` function.
I think this can be removed. It doesn't make sense to add workshops to the list of categories.
`error` is not being used in the other block in the function. I think you can remove this.
this doesn't seem to be used?
nit: why change this to a channel?
I think it could be better to use `ContainsPrefix` here too.
nit: `openstack` is a bit more consistent with other config name. I think `openstack` would be fine, though
This looks like a regression to me. It looks like a regression, but I think it's better to leave as it is since there's a significant impact on the performance of this method.
I don't think we want this to be an API break.
This test is still valid
Does this need to be exported?
This should be `Node: %s`
We don't use `amount` anywhere, so this table name doesn't match the name used in the migration. The migration should have a `description` column.
@tillrohrmann any reason we are removing these? Isn't the default value in `HiveClientPoolSize` the same as `HiveURI`?
This is not a proper deprecation but rather an `error`
Can we move this to `internal/spec/constants`?
Why this change?
This should use the `MinSegmentSize` value from the `KestrelMemoryPool`
Shouldn't the `toInstant` function return `Instant.ofEpochMilli(1)` as well?
This is probably a bit too general and should be removed if it is not specific to Forge. Can we change it to include all non `-` characters?
Who calls `compare` now?
Can we add the build tag?
Wouldn't it be easier to pass the entire `AWSEmailProvider` here, rather than having to pass every new instance?
this is where the other `ManualVerification` objects should be created

Why not do this in `deleteFromTextTable` directly?
I don't understand what this pylint disables, is there a more specific reason for this one?
I'm surprised the linter doesn't complain about the `else` clause? I'd prefer if you left the else out and the one below be indented by 4 spaces
Can you make this LOG(TRACE) so the caller can see this message and what the actual problem is. Also, if we are returning an error in the get index then it's okay.
Why not use `tags.AsSpan().Slice()`?
How about: > This refresh will be bounded by the number of {@code IsolationLevel} of that transaction. In the case of {@code SERIALIZABLE}, if this table has not mutated within this transaction, calling refresh will have no impact as the isolation level constrains all observations to within the transactional snapshot.
I don't think these are the only keys.
I would have added `default_order` to this model.
You should probably add a `// eslint-disable-next-line no-unused-vars` here.
@tiborvass Should I do some cleanup to make sure we continue the runLoop when there's an error from the next iteration, or is there some other other way we can detect that this is the case?
I would prefer to have one more example here to load weights from the latest checkpoint.
It is not required to be an attribute here (it's not used in the class).
nit: remove empty line
I think this should be set to the default, rather than the one set by the user. That way it is always the default.
I wonder if we should make it clear that the flags are part of the header struct (i.e., not just the header flags themselves). I'm ok if it is, but it seems like it might be a good idea to have a struct with flags to indicate that there are flags that are part of the header.
This seems like something that should only be done if a resize is actually being performed. I'm not sure how the resize system handles resize events.
Isn't this already the default?
I am not sure what I am saying is the best place to put those constants, as it is hard to see what they are. Can you move those consts to `integration_test.go`?
I guess you need to do `return false;` here.
I think `StringUtils.hasSuffix()` is better than `indexOf()`
Why do we need this?
What is the benefit of this method? It seems to be more than just copying all the files.
I'd prefer if this was done with a new `data` prop instead of adding `undefined`.
I don't like this. What about the `CurrentRevIdentifier()` and `DescribeIdentifier()` methods?
We're still holding on to the instance of `NLog` in a field and we are holding on to it, so we can remove the property.
I think we should just not set it, we should be able to set it to false.
This was just to fix a bug. It was getting picked up by `make lint`, which didn't have this line.
Why are we checking the schema name here? Is it the name?
Is the value of `0` the default? I don't see it being used?
nit: rename `sStruct` to `sType` in the `message` parameter as well?
Line is too long. [86/80]
Layout/EmptyLinesAroundModuleBody: Extra empty line detected at module body beginning.
Why does it return null when it can't be created ?
Do we want to do this for `user_start` as well?
I think it might be worthwhile to make the date parser handle `int` too (for example by using `int(attr) + int(attr.microsecond / 1000.0)`).
@khronos, what does `structuralModificationType` do? It looks like it only has one occurrence. Does it need to be an enum?
I think these two should be combined with the `before_update` method. If someone is trying to remove tokens from the org, they should get a token.
I think this needs to be fixed now.
This seems to be unused now
I am wondering if the kind should be a parameter of the DescribeTaskQueue request.
Why do we need null check here?
This doesn't appear to be used.
Isn't it possible that it is not in queuedFlows?
Isn't this the same as the `yield from`?
this is the only place where this is needed - we do not have any dependencies on it
I think you need `null: false, null: true` to avoid the index creation issue.
This looks like a duplicate of line 221.
why is group id a type?
Maybe mention that we'll always use 1.0 for this setting.
Please rename this to `CAST_SINK_ID`. This is a string for the id.
This change doesn't look right to me. `null` is the default value. I would expect you would want this to return an empty dictionary instead.
I'm not sure we want to have both. The only one that's in the name is `MvvmCross.Platforms.android.Views`. The others are all in `Mvvm.Platforms.Android.Views`.
Extra empty line detected at class body beginning.
This seems a bit too high, maybe `[error] %.*s`? Or even just `[error] %.*s`, since the message itself will be encoded with `%.*s`?
This interface should not be in this pr.
Why was this changed to `Output`? We should be consistent on the way we write output.
You need to add the missing comma here. (Although you do a lot of this, it's probably good to get the CI working.)
Shouldn't it throw an exception if it doesn't match?
I'm not sure that `trail_map` is needed, as there is no `trail_html` column.
Why not `User::$permissions[$permission->superuser]`?
This looks weird. Is it the Gemfile to run the rake on the dashboard?
@dgageot I've made this a bit more concise and it's probably best to use `strings.Replace(r, '.', '.')` instead.
This will fail with the `Commit` error if you run on an old db that didn't support `WriteBatch`. I think it's okay to leave this as it is now.
We should throw an exception. Or at least log it in `warn` mode, if we don't care about it.
Do we need to translate this one now or can we remove it?
This is the only one I'm not sure about, so I'm okay with that.
This will cause build warnings on my Mac (and other platforms) since this file is autogenerated.
This should be removed.
Is this timestamp the current time? How does the API behave if it's used by the API?
This seems odd. Why not make it configurable?
@lisasy is there a way we can use `curl -fLo` instead of `wget`?
`localConstant` -> `constant`
I don't understand why we're importing six in this file.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
why did you change the type of return value to an array

Can't we move this to a different cpp file for now?
I think we should also add this to the UI.
This test doesn't really verify that the exec agent has been running, but that the container has been stopped. I think the message should be: `Expected executor's state change event has no managed agents; expected managedAgent container state change event did not match actual event`
Please avoid wildcard imports as it's not a good practice.
I'm curious to know what happens if I don't pass this in. I think it'll be ignored in the default case.
We don't need to include these in setup because they are in the base class
This is the only usage of `addr_.c_str()`, and I can't find it in the source code, is it safe to remove it?
Why we don't need to check for Braille?
Whoa, I forgot that one
Should probably call it just `Version` as it's already `pkg/apis` (no need to change in this PR, just a thought) but I'm not sure.
I don't think that's a good idea to add this here. It will be available in the `link` attribute, but we can use it for the edit link too.
NIT: import order, should go with the other AWS SDK's, please.
We can remove the entire function and replace the findOneBy by the find method, this is just a refactor
Should this be plural?
Isn't `six.binary_type` enough?
Should we log the error code?
Should we have `bucket=None` here instead of `default`?

We should be able to remove this
Why does the property not need to have `!`?
This should be the other way around, so that the template doesn't need to be displayed in the menu. Also, this should probably have a `link_to` method on a template object (and it should probably be added to the template itself as well).
We have the pkg/apis/core/v1/helper/resource_helper.go, so this should go in that package
I'm wondering if we should just make the exception type match the type of string we expect. That way we're not just testing the exact error message.
I think we can keep this as it is
I don't have a strong opinion on this, but this is very confusing. It doesn't seem like it should be `setConfigs` as well. Why not just pass the ConfigModel?
Should we change to reflect that we are only adding the execution if gas is lower than the gas limit?
This class should be in an `internal` package. We can't import `org.jkiss.dbeaver.ext.oceanbase.data` directly from here.
This check should be done inside the `isPrivateTransactionEnabled` method, and the group should be included as well.
Is the exception really needed or just for debugging?
"your" -> "your"
This class should be marked @deprecated
I'm not sure what's going on here
I don't like this boolean flag. It's a very specific purpose. Maybe we should make a different boolean and add an option "escapeXml" ?
`Commitment` seems like a strange name here.
Should we rename this method as `setSchema`?
I'm a bit worried about the naming here, maybe `handleError` would be better.
Shouldn't this be 'tm_cpp' for consistency with the other classes?
I think this should be called `UnpausedPredicates`
Can we do this check on the VkCode enum so all the code can check the key codes? This will prevent the user from having to update the code when a change is made. We can just do `if self.vkCode not in self.TOGGLE_KEYS`
I believe this should be `config/manager/service-manager.yaml`?
This is an old name.
Why this change? It makes the test useless.
I wonder if it's better to put `deleteTerms.forEach((term, docIDUpto) ->` in a separate method to avoid duplication here.
@diosmosis is the password length still valid after the migration ? Or is the password length validated by the database and should we add the `between` part of it?
`keys` is an array, why is it a string ?
Is this a typo? It doesn't seem to be used anywhere?
Nice! I like this idea, though the name could be `UnaryHandler` or something like that.
Can we use more specific exception here? `raise e.class, e.message`
Why not just set this as False?
It's better to name `vNode` and add a private property `isHidden`.
This should be renamed to something less ambigous.
nit: these can use `File`s
Why don't we want to suppress this error?
This logic should be in the `if f is logistic` branch, not the `if is_log_op`
Is there any reason to catch `e`? If the URL isn't valid, it shouldn't be caught.
This will never happen. You could add a logIdSent_ and check that last sent is less than logIdToSend_.
This is for a single cluster right? If yes can this be a single message that can have the context of what the cluster was provisioned?
Does it mean we need to disable this in some cases?
This is a very bad expectation. I would have expected this test to fail, but I would have expected this test to fail.
Why not just remove the whole function and keep everything in this one?
This is not used anywhere.
I don't think there is any reason to add the error here. It is a silent warning that should have a message.
Why is this changed?
The logic for checking whether the user actually has a subscriptions with a mentor is duplicated in the `customization_helper` file.
I know that you did this in another commit already, but this could be made more explicit, maybe called this `updateRequeue`?
`json` is used in this file, so I moved it to a separate import line.
This needs a `require 'sanitizers/sanitize'` so we can skip this file from the production environment. You could add `ENV["SANDBOX_ERROR_ENABLED"] = 'true'` at the beginning of this file, and then you can remove the `disable_sanitizers/sanitize` file, and then `spec/support/spec.rb:49` in the test folder.

nit: this function can be called `getEthBackend` since that's the type of function it returns and it does not require a backend
I don't think this is necessary.
Is this correct ? Shouldn't it be ?
I'm not 100% sure about the word "the contract" here, as it doesn't tell me much. I'd just use "in the implementation". The difference is the type we expect, not a contract. The difference is the implementation name, and the contract name. The difference might be confusing when reading the code and when the type is sealed the contract name is not the implementation. The message should say "in the contract" and the type name is not the contract or impl name. I don't feel too strongly about this, but it might be a little confusing.
This was changed to match the naming convention in core.
This can probably be removed as the default is now enabled by default
I think I would prefer we didn't add this class, because we already use it elsewhere. I guess it makes sense to use it in other places too.
Whoami doesn't return a string, it can't return anything. The code should be in the else branch.
This might be too strict, we only want to decode if it's not a string.
This is a very weird thing. I'd be inclined to add a docstring to explain that this is only the first dot.
is this really a `Context` or `ContextT` ? seems more natural
Isn't this change backward incompatible? We should keep this method for 3.x as it was.
can you add a TODO here to move this to the handler's namespaceCache. This should be a separate change.
This is not required anymore and is breaking the `transport_data_get`. `inventory.config` was added as a dependency. Now the data will get loaded when the catalog is applied
I'm not sure about the removal of "ddev-ssh-agent".
nit: `Hive metastore` instead of `metastore`
Why not use `float` here too?
This is going to need to be added into the config for the v0.9.0 cluster (it is not in v0.9.0 yet).
Nit: space after the `!=`
Why not use $scope.off?
I'm not entirely convinced I like this one. The whole point of the PR is to make things more complicated, so I wouldn't be surprised if it's necessary to make things more complicated in a separate commit.
The string doesn't fit in in one line
I'm guessing `SourceSnapshot` is not needed here, right?
you could use `db.createModel()`

I think that it's not the responsibility of the theme to delete custom data, as it may delete any data in the theme.
This is a public class for internal use, but I think it should be package protected instead.
This is the second case where I'd like to see the logic in the rectangle2D class. We are going to have to make the difference between the two ways, and it seems we can just have two methods that take both sides of the query, which will return a new instance of `Rectangle2D` and `Rectangle2D.relateRangeBBox` that takes both sides and returns a new instance of `Rectangle2D`.
Shouldn't this raise an Exception?

Is this change still needed?
Why is this change necessary?
We may want to consider making `tableMetadata` public so we can add a method `TableMetadata.newTableMetadata(String schema, Spec spec, int sortOrder, Location location, Map<String, String> properties)` that returns a `TableMetadata` that can be used as an argument for the constructor. Then `newTableMetadata` can be called to create a new `TableMetadata` and a new `BaseTable` that returns a `BaseTable`.
why remove these tests?
We should use log4j2 with slf4j logging module.
why remove this file?
This is a bit unfortunate that we have to use the type `plain` here. Wouldn't it be better to have an actual mime type, like `multipart/form-data`?
This message should probably be changed to be more informative. Maybe something like, `Session ID can not be null. The call to quit() requires WebDriver to be called before calling quit()`?
Is the timeout here intentional? If not, we should remove this.
This should be done before the `if` statement. Otherwise `flux_respond` won't work in that case.
Can we call `trackEvent` from `sendAnalyticsTrackingEvent` directly here? The `analyticsTracker` is a `Tracking` instance and the `track` function is called `analyticsAnalyticsAnalytics`
`helper.ControllerWg.Add(1);` is not needed since `go` will wait for the `controllerWg.Done()`
This line fixes a bug, as it doesn't seem related.
Please add `#include <unordered_set>`, which is for unordered sets.
This is a good addition, but please use `name_string_with_word`. It will make it easier to read.
Why is this needed?
The `[speechView]` tag is not added to this file. Is there a reason?
Should we make this a map, rather than a string? It seems like the most of the time we're going to be doing this in the cgroup is by comparing the name to the `CPUUsage` field.
I don't think you need that `if`. The condition will always evaluate to true, since `format` is always defined as a string.

I am not sure if we should change that to SpanKinds.Client or SpanKinds.Service, since Server spans are always treated differently now.
@jonas-buchman @bodrutu I was thinking this is more correct and correct. It's not clear when the colon is in the first place.
Is the spec not working? `config.start_time = 42`
Should be `election.election->try_generate_votes (block_a->hash ());`, as this function is called from `try_generate_votes`
Same as above, why did you change this?
I think `DEFINITION` should also be here, no?
This should be a constant, not a string.
I guess the problem you are trying to fix is that you are setting fwd.reason but then setting it to CALI_REASON_NO_REJECT to not have the same outcome.
Do we need the exporter in this example?
Shouldn't these methods be internal?
This is a pretty big change, and I'm not sure if it matters much. I'd like to be able to make it a little easier to reason about this, especially with the `ssl` argument (which I'd like to remove).
I think we want to use the same format for the debug message.
This change is not correct. We don't check for future statements in the future of the statement.
Is it possible/better to change the number of simd_used to 0, and then the number of simd_used to MCTX_NUM_SIMD_SLOTS?
This file is not changed
Should this be `authenticationAlgorithmFile` and not `null`?
This is the same as in line 617.
You can't do this.
Why are we using `epoch_0` here?
We're adding `cb_` to every API request, should we just move it into the API request?
I think "prefMobileUpdateAllowed" is redundant here. It should be "prefMobileUpdate" and the new "prefMobileUpdateAllowed" should be enough.
This should probably be a list of the default set of buckets that we can set in the metrics.
Can we also mention in the docs that they can be used like `thriftrw --plugin yarpc --sanitize-tchannel myservice.thrift`?
`LGBM_BoosterGetNumFeatures()` is used in several places, can we have it in a single place instead?
why not just call it dbRound? Also the error messages are not very descriptive :-)
Can we also add a check for `hivev1.HiveClusterRegionLabel` in `cd.Labels`?
This is a wrong import?
Could you make this public?
@krishnasrinivas , could you explain how this fixes the issue you were seeing?
This is unused
I don't think we need these, they are only used in one place.
We are not doing any modifications to `inputPlan.Roots`, but I think the `copy` is not necessary here.
Why do we need this change?
Should default to 8080?
Nit: can't we use `||` here?
is it correct?
If `application` is a Hash, then it will be `['gecko']['id']`, right? Is that correct?
Please remove spaces around `===` and `==`. This applies to all the code as well.
I don't like this. Why would this return "true" if one of the block hashes is valid? I would just make it return "false" in that case.

Layout/SpaceInsideParens: Space inside parentheses detected.
I would move this line after the existing `TestRuleIgnoreTestSuites` rule, and make the one below the new one be `VerifyTestClassNamingConvention` instead of having a separate rule. This helps us keep the existing code a bit cleaner.
why was this reduced?
Should be `int(cell / self.cellsPerColumn)`
Should this be `Host`? Or should we use the `Host` name everywhere?
Can you explain why this is necessary?
We do not need to have wildcard imports.
nit: can this be `const Locators&`?


This interface is not needed
I don't think this should be a public property.
Is this not implemented anymore?
Is this a retryable error? If so we should log it to Sentry.

This change is not related to your change, but I noticed that we were creating the tempfile in both the `if` and the `else`, and now we are creating it only once. Is it intentional? Or is there a reason we are creating the temporary file in both?
I'm not sure about this. The doctest should show the values for these parameters, but I guess it should be able to show a description.
Why is this a member variable? It's a field anyway.
why do you need to pass the entire block identifier? just read the block height? it seems redundant
I don't think we should do this. If we did we'd have to change `RequestContent` on every call to `SendHttpClientRequestAsync`
These methods do not return spans. Please remove them.
I don't understand why this would be 0
Isn't there a `types.IsSparseDiskType` function that we could use instead?
why did you need to add the default value to the duration?
Should this log message be changed as well?
I'd say `if len(bbox_feats) > 0 and 'bbox' in self.semantic_fusion` to save some memory.
`ManifestFile.getLocation()` is called from `manifestEntries.toString()`, should we use a `LocationInfo` here?
Is it possible for the log to be called in an earlier state machine log that contains `set` but not `set_`?
I'm wondering why we don't need it?
Why did you move this block up? Is it required when `this.resumeToken`?
I wonder if this should be configurable instead of hardcoded.
please add a space between 'if' and '('
nit: should this be named "commitMerges"?
This change should have been in #8776, but not in #9748.
This line was too long.
I think this could be `const auto`
I think you should use `self.prefixed_userid`
Can you please rename the file to be `MockDirtyBlockCache` to match the new naming convention ?
This seems to be unused.
Is this the `StreamedResponse` or a `StreamableResponse`?
This is a breaking API change. If you want this field to be used in the future for anything that doesn't have `SpanCreationSettings.Parent`, you need a null check and make sure it's not null. This is an internal field so it will be passed in by the SDK (and should be a non-null value) and not a static field.
Do we still need this file? If so, can we avoid adding this to .Net461.cs instead of .Net452?
I don't see why we have a default here, since we only need to change once.
Should we log something here?
I'm not sure if `pm` is a good name, I'd prefer `AM`
Is this a fix for a known issue that was not introduced by this PR?
We need to be sure we use `CachedAccessor` in tests. I think it should be in `test_pandas_accessor` and not `test_pandas_accessor`?
Should we use "attach" instead of "save"? It's not a save action right?
This line can be removed. It's not needed.
The `snapshot` param is now optional.
Should we make the `IConnection` a class of this base class, so you can use the ctor with only the name as it will be used in `clr_connection`
Should be nullable here
What is the purpose of this method?
I am not a very familiar with this part of the code, but why the if?
I feel like we can make this port configurable.
This is actually a behavior change, right?

Why not just use this.sortOrderId?
`return bool(os.path.isdir(HTML_FILES_PATH))` is a tiny bit more readable.
This seems like something that should actually be a `fmt.Errorf` error since this will just output `unknown config name` when it shouldn't

I think you're missing an end() here.
This doesn't seem to be used
Should this be `static` too?
why not just use ROLE_PREFIX constant?
Nit: I'd prefer a simple getter, rather than the getter.
This change is unnecessary because you are already modifying the hash on line 7?
This is a class to be applied to the input notification. This class will be applied to all user input notifications. I think this should be `googlesitekit-user-input__notification-input`.
Can you change "data packages" to "Data packages for quilt data management".
Do we need to have this property at all? I'm wondering if this could have a default, and then have an overload with the default value, to avoid the null check.
Why are we putting these as pointers? It looks like it's used for the `error` and `appName` fields in the other structs in this file, so why have those pointers?
Should this be `Fragment` or `FragmentWithRef`?
This is just a question, but do you have any plan for the performance impacts of the performance improvement of this PR?
I wonder if this should be configurable by the user.
We need to define `capabilityTaskCPUMemLimit` in `pkg/apis/ec2/service/ecs.go` to be consistent with the name of `capabilityTaskIAMRole` above.
I would add a new test case here which ensures that when the stop is called (i.e. it stops), the connection has been stopped.
Is this a blocking call for the informerFactory to be started?
Why do we need these two fields for a single column?
I think we need to update the JSDoc too
Please revert all changes to this file
This doesn't look good, and seems like you're not testing for the `_GLOBAL_DEFAULT_TIMEOUT`?
Why ignore this error?
This seems a little unfortunate. It doesn't look like this function will ever get called with `paths.empty()` in that case, but if we can avoid this change let me know and I can merge it as-is.
Can we get rid of this check? I'm not sure it's a good idea to have a null item.
This is an API change? Can you add a changelog entry here?
This will be called on each project update to create the plugin. This might be a good way to do it with a callback, so it doesn't have to happen on every project update.
I am not convinced we should free here. If we can't allocate the kds, then we would have leak and this would just crash.
Why does this have a `config` attribute but the other methods don't have a `config` attribute?
I'm not sure why the acceptable variance here is changed. The upper and lower limits are already multiplied by 1.0.
I'd prefer to have `$dataAttributePrefix = 'data-lazy';` here as we use a `data-` prefix for other attributes.
Do we need this using?
Is `.sort` necessary here? Is the array guaranteed already?
"Keyboard layout:" should be capitalized, not capitalized.
This is the fix.
This isn't really an assert, it's an error case. It should be an `error`.
Would we have to change the patch names to `mmdet.datasets.CocoDataset.load_annotations` and `mmdet.datasets.XMLDataset.load_annotations`, then? Or did you intend to make a separate patch for CocoDataset?
The code here should be simplified. The new consumerIntf is only needed when we call findOperationMeta, and the pojoConsumerOperationMeta will not be null, otherwise the user will get NPE if this is called on a method without a consumerIntf.
Could we have this test case more specific to the `summary_notification`?
should this be `optimizer_config`?
this is a pretty simple method that we can't reuse.
I'm not sure if this is actually correct. The tests fail when `qtbot.config.py` is used and the `view` is not initialized.
Can you please remove all these empty use statements?
`<returns>` is redundant, as the type has `<returns>` tag.
Please move `enum` to the beginning of the `from typing` imports.
This is not needed anymore because it's not used anywhere else in the file and can be removed
Why the need? Can't we just return the boolean in the builder itself?
I don't think we can have a log handler without formatter. The PmdLogFormatter is deprecated, the formatter is used directly.
This is a NLog 5 thing. The `LogFactory.Configuration` can be null when the original file path is empty, because it's always set when loading the logging configuration for this class.
The test suite is still failing, since the `cleanup` flag was not set.
why change this?
Should we be removing the unsafe package here, given that it's unused?
This seems like a change in behaviour, since it now uses `_dr_nlen()`. I'm not sure if it would be ok to do a `min(...)` here.
Should we have a test that verifies the uniqueness?
why do we need to set all of these?
This seems to be the fix for #3327.
This is the same as in `mol_sptr_vector.cpp`
It is not necessary to release an `Event_ptr`, as `registerLuaEvent()` has a `release` method.
We should just use `cfg.Get(key).([]string)`
This is missing `\n`
nit: this should be `data` or `test`
This is the fix
I would rather use a verb for the verb. Maybe `showTopicsWithRetries`. And `listTopicsWithRetries` would have been better.
I don't think this method belongs here. It's not related to the current change and the method name suggests that it returns a {@link ScriptDTO}
if there will be no enabled types, it will return `this.allTypes` and not null
This can be removed.
We should probably add the exception to the `toString()` of the `TypeNotFoundException`. If we don't support it, then we can add `UnsupportedOperationException` to the `toString()`
nit: maybe use boolean?
I'm not sure why we are removing this null check. It is possible that we are missing some claim.
`axe.commons` is a list of `audit.common`. So I think `axe.audit.commons` should not be used. I'm not sure what this does, but it would be nice if we can use `axe.checks.check`, `axe.audit.rules` and `axe.commons.audit.rules`, since we already have a list of `audit.audit` and `audit.commons`
Nit: import order
This could be just `msgid`.
This looks weird - the offset should be the offset of the byte array, not the size of the content.
Can you change this to `ctxpropagation` to make it consistent with the above test?
This file was changed to use `goimports` to avoid circular imports.
We're not waiting anymore, we need to ensure that the connection establishment timeout is set on the ctx.
I wonder if this should return something else. Like `classFileNameBase("", "class")`.
You could probably use `assert_json_success` here.
`0` means that the file was never actually formatted?
This shouldn't be there
It's more of a `QLabel` than a `QLabel`.
nit: `serviceAccountFile` should be plural
Shouldn't we add this back in as well?
I assume this is just a cleanup. Is it not needed here?
Is this really needed? If so, why not use `log.ForceEnableDebug()` ?
This is not the right place for this check. If we fail to get the quota usage, then `Get()` should have returned `nil` before, and we should be returning the error back back.
Is this needed?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should this be initialized with a default value of 0?
nit: we don't need the `constexpr` here
I suggest adding a private static readonly object here. It will be a little cleaner.
This is a new configuration field, right? If so, why? Is it needed for the old one?
nit: remove empty line?
I think this is not required as we only added searches that do not match the action. This will prevent adding the same search twice, but it should be handled by the search controller itself (as a whole), not through the search controller
This should use a random string, I think.
Shouldn't this be done before we cancel the context?
Nice, but we don't need this. It's not being used at all, just the constructor
I would remove this extra newline
line too long (80 > 79 characters)
I think `SelfCheck` should be called after `CheckTransfer` because it's called before `checkTransfer`.
I think that if the first of the ring bonds is not 0 the stereo setting is not applied to the ring bond, and the first is a stereo one it is set to Steep one.
@jwilder is this right? I thought svc was appType.
Why do we want to remove those? I think we should keep these.
Is this really necessary? I think `pubSub` is enough, no?
We have `QueryConfiguration#getString()` and it is already available. Can we use that instead of repeating it?
I would name this just `ThreadAgnostic` so that the enum is clear. Or, just `ThreadAgnostic | ThreadSafe`
`for i in xrange(0, len(inputPattern)-1)` ? (just to keep the code more readable, if you like)
Why do you need this?
We should probably have another test that verifies we don't throw if it can't flush
Should probably leave this one in as well.
We could also check err here and fail if not nil
nit: I would call `buildOrderBy` with the `Schema` parameter. This way we would have a single method for the same purpose, not a big deal but it'd have a better readability
This one is unused.
I would not mention this here - it could be confusing for users. How about `The AWS SNS and SQS compose to work with a message delivery semantic.`
The `allowtransparency` class is already applied to the `iframe` element.
I'm not sure why this change.
Why does it need to be done on the state db adapter?
Please use parentheses instead of `/`. Also, please add a space before and after `len(chars)`.
This can only be executed as a script if we know it has been built (which is good).
I think I'd prefer this be moved to its own commit
can we assert that `value.size() - toTrim` is greater than 0 ?
We probably want to do this before the `configure_group` as otherwise it would break if we have `ExampleGroups: [ExampleGroup]` for a group in `example_metadata_example_specs.yml`.
Can we call it a bit differently? How about something like "updateInProgress" instead of "updateNotInProgress"?
I think this is wrong, as `currentTime` is always a number
"returned" -> "returned in"
`err != nil` should be handled in a `warn` function, not here.
This should be `PullInterval`.
This should move up a line, as it's not a blocker.
This is a bit hacky but it does not seem to be an issue.
We don't need to change this.
I think we can delete this line as we are printing the certificate name
This is not needed anymore.
I don't think this is correct.
This is not needed, we're using os.Exit, no?
What is the purpose of setting primary back to primary? I mean, what is the meaning of the readPreference?
Should be `unknown`?
I'd prefer not adding the cache here, instead we should use the current ValidatorProvider.
Is it really necessary to have `longopts` and `int`? It feels a bit redundant to have a `longopts` array of `int`s.
Is this going to be used by other modules in a future release?
I know you didnt write this but I think we should use a `<div>` instead of the `<span>` here
I think the name for this should be just `accounting-expire-duration` since it's not clear that it only checks the expiry of a transferred accounted.
You can use `from jinja2 import Environment, PackageLoader`
Why are we calling `options_detach()` here? What's the purpose of `options_detach()`?
Why not just leave this line and the `break`?
Nit: can we move this up to be after `clientTimeout`?
This was a workaround that was needed for the test. I don't think this is needed.
I don't think this is a good change, but I think it's better to just remove it
"Note attachments"? The rest of the text seems to be a bit generic, but it would be nice to be clearer that way
These should only have the `#include`s
nit: this should be `NewUpgradeCStorVolumeTaskJob`
You should use `#include <glib.h>` to include headers. It is a very small issue if the library depends on the headers of a file.
This should be `{(Realm, Schema|string)}`
I am wondering if we should add this as a public API?
I think this could use `allow_blank: true` as well. I don't think there is any need for this to be `allow_blank`. You can use `validates :url_name, presence: true, length: 1..60, allow_nil: false, uniqueness: false`.
Please remove this file from all the code files as they were unused.
@template is the new phase object.
I don't think we need to add these here (the properties already have an array)
`setTimeout` should be used for all timeouts
`record` -> `instance`?
Is this really necessary? The method seems to be the same thing as the one in `Account`.
This should be `string|array`.
Why not just remove this function completely?
I think this should check if the tab exists, rather than only if the current tab isn't the current tab.
this should probably be done in the `for ..., i := 0; i < num; i++`.
What is this doing now? Is there any way to check if the `navigator` object has the `navigator.getGamepads` method?
Shouldn't this be called signer ?
this should be removed, if we're not going to do that, the log messages should be consistently logged in the same way they were in the original code so that they're consistent and have the same severity level
This is not needed, since `parse` already handles this.
I'm curious to know why this was added?
I'm not sure this is the correct way. If `CACHE_ENABLED` is `1`, then there is a problem.
Nit: `dependencyName` is not a good abbreviation for these...
Why add the dot when the description already has one?
I think we should move the default credentials file in the `~/.config/google-cloud/application_default_credentials.json` to here.
Why is this change necessary?
nit: remove the extra newline
I think you can use `t.Skip()` to skip this
I guess `posix` is the right thing for Windows.
nit: I think we can avoid creating a new override lookup object when no overrides are specified
why is this change needed?
I was going to ask that this was a bug. I was not sure what the significance of "shifted_bearing" is. Maybe I'm misunderstanding something here, but it seems to be an error case.
this should be in a separate PR
I am wondering if we could move that to the `desc`? It is used in a couple of places. And I think it's not necessary to keep a field for each iterator, so it is better to store its position in a field.
I know the name of the method is a bit misleading here but I'm not really sure what the correct thing is. I guess the `OrFail` should only be called if the build or scheduler are not deleted.
I don't think this should be public.
We shouldn't add new methods in the interface.
This seems like a breaking change...
Should be removed
I would prefer to name this `nat_lvl1_drop_in_dest`

I believe this is the only test that was failing. The other ones fail if `writeConcern` was an empty string
Is this necessary? I'd think you could just set `frozen_sort=false` and `columns=[]`
I think this was meant to be a `pytest.skip()`?
Why is this needed?
We don't want a space after the message in the log.
nit: I'm not sure that we use an `RWMol` pointer to represent themol-specific results; maybe we can rename it?
I don't see this used anywhere?
Why are we not passing the `Gen.CreatorPrivKey` into the MintNewBlock?
This seems a bit weird. The REST client has already been set. Why are we loading reactApp again?
I'm not sure if we should keep the old warning in this case. We can keep this for another release.
`should switch to a frame and back in an iframe`
This is the same as `NewTestClient` above, can we unify them?
Is it a problem that we are making an assumption that it is not a hybrid?
I think this can actually return an error?
This is wrong. If there is a single arg, it should have a valid value, not silently ignore.
Please add `\` after `char`.
Line is too long. [81/80]
I believe `variableOptions` should be `variableOptions || {}`.
This is a bit misleading, as we are not really PruneColumns, but PruneColumns, which also is used for pruning columns.
Should be `String.format`, I think?
Why the test is changed? This would cause an incorrect value in `tmImplementation`, right?
I think the button should be removed here as well, since that was already the case in the old dashboard.
This should be ERROR, but I'll fix it when I merge.
This is the only place in this code where we use UIAHandler - should be in the main `if` statement.
Why do we need a new setting for "replace-partitions"?
I'd just remove all the `@see`, it will get removed in the next PR anyway.
This could probably be in `send_welcome_email(user)` as well.
Should we have a TODO here saying we're going to have this logic in the future? It would be great to have the kubelet add a TODO, if you agree that's a good idea, and it's good to go.
Why not move this to the class level `@staticmethod`?
I'm not sure this needs to be fixed in this PR, but it seems like this is a good place to test this scenario, and that if `null` is passed in for it it should just ignore that prop, so the test won't pass.
I would keep this value larger (or larger), just to verify the behavior.
This is just an optimization, but it would be good to make sure there is a test that covers this condition.
I would call this "account", because we don't have a seed, but I don't know if "advanceRound" will be more accurate?
I think we should use `mock_consumer->wait_for_at_least_entries` here
this should be configurable.
This is the only thing I would like to see here if it's possible to make the query more generic and avoid this kind of change.
Is this test case still valid after this change?
I would remove this line.
Is the extra space between the `,` and `(.*)` required?
I guess this change will be reverted?
Shouldn't these two lines be in `TypeSolverTest`? It is called `typeSolver`.
`controlModifier` is a little confusing. `shiftModifier` is clear enough.
You might want to use the video's length_in_minutes helper here, as its being used multiple times
Line is too long. [81/80]
This should probably still be a test case, right?
Why are we not storing GCP creds here ?
I'd prefer a different name for this, something like 'OnlyFlushIfConditionMatched'.
What does that do? It would be nice if the tests could be run on the fake file.
Is there a reason we need to hard code the `~` here? I don't see a case where `.bolt.yaml` is not present on windows, so I think it would be sufficient to just use `/etc/puppetlabs/bolt/bolt.yaml` as the default. If not, the `expand_path` should just be `.puppetlabs/etc/bolt/bolt.yaml`, which would be more clear.
`with self.patch('sentry.log.write', return_value=expected_output):`
What does the default value look like if the user sets the duration of the query to -1?
Why we need this?
This should be done in a seperate step
Is this method needed?
Should we have an `enterns` param at the start of the function and set that value in the `env` vars for `TcApply`?
I think this is an error?
This seems like an incorrect error message to me. It is also not the same as the case below it.
Should this be tpfp_func=None?
The return value is not initialized here. I'm not sure this is correct.
I'd suggest moving this into the `libkbfs` directory since it's not only used there?
The title should always be null.
I think this should be done in the `apply` as well.
This is not a default, I would suggest to change it to just the widget name
this interface can be replaced by `http.HandlerFunc`
I don't think you meant _compare here
The code is in the wrong spot. Should be `shouldCreateGenOfFixedValues`
Shouldn't this still be const ?
Shouldn't `erase` be called if there are no more items in the map? Also, what is `end` here?
nit: I know we've been using `key` elsewhere, but I prefer it if we are consistent with the terminology.
Can we have a test for that case as well?
nit: can we call this `RuneToString` ?
This method should be moved inside the `QWidget` class. It has the same behaviour as QWidget's `on_current_changed`, because `set_last_focused` and `on_current_changed` are also called in widget classes. I think this function should go inside that class instead.
Can we name this `install-certificate` to avoid confusion with `certmanager install` or something like that?
`show_img` will be overwritten if normalization fails. I think it's better to do this as part of normalization and not duplicate the output
This is a bit of a hack. The number of seconds to go between -30s and 30s might not be very sane. I think it's more reasonable to set a value that's less than 30, and then just subtract 30, and then subtract it. This will also allow the user to set the slider's current offset to be negative.
Why did you change these? Is it really needed?
This is the main fix, right? The rest is just the refactoring of this PR.
I wouldn't do this, it would be a huge breaking change.
This is a very specific method, so it's probably better to just make it a `Node#with_events` method, that way you don't need the `action` argument at all
I don't understand this. I don't see any code that uses this.
`isCaret` isn't used. Is that intentional?
I think we should remove these lines.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
We don't need to use `ex` here since we can just log it.
What if it's not a tensor? Shouldn't this be `cuda_device` instead?
The error message here will be confusing, as it indicates that the `flux-security` is not installed.
I don't think we really need to add the ` slimCopy` method, since it's not specific for any file type.
This is a change in behaviour. Previously, I think the annotation was split on the '=' and the value would be split on the '=' in a different fashion from the value in the annotation query. I am not sure why it was split here and not on the `keyValue` since the value is now in the same way.
The only problem with the `CC` type is that it has to be a string with a leading `__`
This one should be kept.
nit: unused import ?
Why did you rename this? The name is a bit ambiguous.
`assertDictEqual` will raise a TypeError if the key does not exist, and `assertIsInstance` will raise a TypeError if it does.
I guess you want `ret_free(ret)` here?
Is this class needed? Can it be made non-abstract instead?
This should be `1.8.5, 1`
Is the protocol configurable, and should it be configurable through a CLI option?
This is actually wrong. It should be `assert end_level >= 0`
`Path.Length + arrayOverhead`?
You can use `t.Run()` here
This is a very minor point, but I'd probably just use: `// The peer chooser must share the same transport, in this case the HTTP transport.`
Please don't change unrelated code
Why does the momentum of the normalizer differ from that of the other losses?
why not just set the `O_NONBLOCK` on windows ?
I don't think we use wildcards for imports (I know we do not, but I just want to make sure this doesn't break your build)
Maybe you can rephrase this to avoid a ton of words, but it's not very clear how to interpret this
If this is a no-op then the if-statement can be removed.
This method is called `getCopyFromList`, which returns a new copy and does nothing, is not a good change

I guess this is not relevant to the current version? If yes, then you may want to move this to the `v1.0.0` tag on this PR.
Should we just check for `string.IsNullOrWhiteSpace(dependencyVersion)` here instead, or is that too complicated?
The AWS SDK doesn't support secrets with IDs, so the `secretID` must be `secret.ID`.
I think it might be a little better to keep `PLATFORM_IS_FREEBSD` and only include `pthread_np.h` if `PLATFORM_IS_BSD` is true. That is, `platform_is_freebsd()` returns true on `#if defined(PLATFORM_IS_FREEBSD)` if `PLATFORM_IS_BSD` is not true. That way if we do `#include <pthread_np.h>`, we will get the warning for `platform_is_freebsd()` in `platform_is_linux
Is there a reason we don't clean up the log file if the test failed?
I'm not sure if this is still needed.
Whats the benefit of the map? This will create a new map each time it is used, even though it's not used.
continuation line over-indented for visual indent
We need to throw `UnsupportedOperationException` here. This should be a `ResourceNotAvailableException`.
Why is the pylint disabling needed? It's not really a disable, right?
The html_safe was here for the HTML safe part of the message.
I think it's better to remove these functions from the API and move them inside `main/`
I guess we can't change this, just wanted to make sure it wasn't accidentally added
This should be done after `RemoveUnusedShapes`.
nope. It was already imported.
Is it okay to remove the `cmd` line here? It seems like you should be able to use the `raw` syntax. It doesn't seem right either.
What is the purpose of this change? I'm not quite sure it's related to this PR.
I believe the problem is that this would create a bond that is marked as unspecified.
Why not use the Rails.env.development? check?
This is the default value, not `-1`.
Can't the `sl` variable just be declared as `gacc.sl`?
Shouldn't the license on this file be 2018, since it is not a new file?
Hmm, I don't like having a test in here. Can we get away without the server? I'd rather have one.
`The name of the parameter...`
Why is this interface needed ? Why can't we have a DaemonInterface and use it in the daemon interface?
I would remove the word "explicitly"
I am not sure if this change will make any difference.
static import in same file.
Please check that the element has an id to avoid this problem. It's a hack and doesn't really hurt to add a new one.
@wu-sheng I am wondering whether there is anything special here that we can't use for this, and if we have to keep the existing `toMillis` call in the future, we could remove the old method, wdyt?
`p` is `int` here.
Do we want to remove this as well? I'm not a big fan of this being a separate div.
Why not using `AutocompleteQueryBuilderInterface` ?
I don't know how I feel about this, but if current_tab is empty, it should be able to see 'Own Templates'?
This is the text we need to translate.
What does the "default" here mean? Shouldn't it be `roots_theme_name` instead?
I'd like to use this class as a base to make it easier for anybody to override.
This change seems unrelated. Is it possible, in which case, we should not be doing this?
This is not needed, you can use `getWindowWindow` directly and avoid the `if` below
Should we add a description? I don't understand this part of the code. It would be a bit weird to have one value and the other not.
Can you make the `DefaultTierIndex` constant `defaultTierIndex = "tier"`?
Nice, this is a good spot where we can avoid the live-loop issue.
Why do we need to expose these fields in the API?
Can we move this class to an internal package, as it's only used internally?
you don't need `# type: ignore` here
I'm wondering if we shouldn't also add a link to the "Latest" section for the latest version of the template.
I don't understand why this change?
Why not `UInt256Scalar`?
Is this needed?
I don't think we need this log message.
I think it's better to call it `compaction-enable-starting-sequence-number` because we may not want to enable starting sequence numbers in the future
This doesn't look right, there should probably be a way to do it inline in a way that doesn't have to be a block per file. (I know this is just a test, so this is fine, but I'm just curious about why there is an extra `for` loop.)
This should be `georss_link_to` I think.
Please remove this newline
This is still in a `then` callback, right?
This can just be `filter(partialFunction::isDefinedAt)`, and the `collect` method can be removed.
s/ma/ma/ ? (also below)
this is the resource 1, not the resource 2
I don't understand this.
Why remove the `SqlServerIntegration` part?
Why is this skip needed?
I think you can remove this line.
@kbrock can you please explain why this line is removed?
I'm not sure if we need this change or if it would be a bit simpler to implement in `PartitionedTable`. It seems that the only way that we would have to use `partition` is to call `partition` in order to compute the output. I think the `PartitionedTable` is a more generic class that should be included in the implementation of `Table` and the `PartitionedTable` would have to be modified and implemented to do the filtering (i.e. not rely on the `Tuple#filter` call to make sure the output contains everything it needs).
Can we move this into a new `SnapshotManager`?
@hackaugusto This is a bug fix. `alg` is a reference to observer_ptr, not a reference.
I don't know why, but I think we should have some tests for these.
I don't understand why this was previously true. This code would return false if `field.equals("Memory")` and now it returns true.
You could remove this whole section.
Why is this import necessary?
I think we can get rid of this factory as it has the default scope.
Can you change this to be `VersionTLS14`? I don't see it being used anywhere.
I think we should also have this check in the previous if statement
Why change from NULL to NULL?
Why is this being deleted, if the interface isn't used anywhere else?
I'm not sure if gmtime_r returns a pointer to a time_t but the type is `time_t_t *`, so this is the correct conversion.
This doesn't seem related, but I'm not really opposed to this change, just thinking about it
This is probably not needed, but I'm curious how much of an impact it will have since the `rootCmd` is a sub-command of `ddev`
This should be `report_id`
I think we can also drop the `return` here.
I am a little confused by this. If you don't use this, then why don't the kubelet skip device permissions checks if the container has a parent cgroup?
This could be a private function
Nitpick: this test doesn't really test anything useful, as it's actually testing the actual error being returned.
This should probably be `QObject` instead.
Please add new arguments to docstring.
We should also add non streaming methods here. I guess they would be useful for user to understand which ones are page streaming, but I think the only method we need for page streaming is non-page streaming, so we should not show them all.
Is this the correct version for the JMX? I don't see where this gets set.
I'm wondering if we could get rid of this.
This should have a `count&.to_i.zero?`
What happens if I pass the wrong `errorObj`?
Please sort by length (2)
I don't think there's any need for this, as you're already calling it inside Realm.
I think it is worth making this a `set` for consistency?
Nit: This is an alias of `retry` so it can just be `retry()` instead of `wait_fixed()`
nit: should be removed
This will be added to the `completed_proposals.html.erb` file and not the `proposals_completed.html.erb`, so the ID won't be generated
Should we also set a flag to force this?
Do we want to consider `InternalContext` instead of `Context` in this PR?
Can you add some assertions in case these were actually used?
`logentry` is unused (from `deadcode`)
Can we rename this to ecsMaxEcsRuntimeIDLength?
This is missing the `:other` part.
I think `npl` would be better than a alias.
I think we should have these as strings as well. Also, if you change this, you'll need to change in the `pkg/logging/log.go` files as well.
nit: should we use `*` ?
I'm surprised we have an API endpoint that does this, but I couldn't find one :)
Can you also test the map with a `Map<Integer, Set<Integer>>`?
Why not just use `self.obj.x` and `self.obj.y`?
Is this correct? If MaxTransfer == 0, then you're making it into 0 by adding a `||`
@jackysp @kadel This is the first scope I've used to support refresh_tokens for OpenID. I think we should add this in `docs/_config/oauth2-config.md`
Should we also assert that the approvals for the proposal are not actually deleted?
Can this be reverted?
I think you can remove these two fields too.
I assume this was intended to have been left in, or will this be done automatically?
why does this use `instance_exec`
I don't think this dep is needed
Can this be removed?
Can we check for the `@expectedExceptionMessage` too?
Why do we use the same strategy as the host output callback?
This change doesn't seem to be related to this PR. Can you explain?
private double currentSpeed = 0.0;
This route is used by PSI and PSS, so I don't think we need a handler here, just use a normal endpoint
This is a very weird name.
Please do not change unrelated things if it would have to be modified or made in the future.
I'm not sure this will work. In case of post requests, the first parameter will be empty and the rest will be "0" (which will result in null as the querystring).
We need to check both for `grpcTransportImportName()` and `isRestOnlyTransport()` in this class.
I know you didn't write this, but should we change the `:seconds` to the `:s`?
Line is too long. [82/80]
Do we really need two separate flags for the application name?
The default batch size is 100. Shouldn't we have the same default value for the actor?
Why would the miner want gas to be 0?
This should be `payload.byteLength > 20`

Isn't this just an extra variable that gets reset at the end ? I see it is used here only for logging. Also, the name of the variable should be changed to `listen_time`.
This feels like the wrong place to be writing the git-daemon-export-ok file. If this is a git-daemon, why not have that file exist and then we just have the caller call that?
I'm not sure I like this name... `ieService` sounds like it's going to be used to handle the geckodriver child process. It's only the browser that creates the IE session. How about `createChromeSession` or `createChromeSession`
This is the fix. We don't want to apply workload rules to traffic coming from the IPVS connections if they do not match the prefix.
This change is not needed
I wonder if this should be an address or an address, since it could be an address like a network link or a relay.
Why do we need this?
This should be `cancellation_params[:reason]`, not `cancellation_params[:reason]`.
File is not `gofmt`-ed with `-s` (from `gofmt`)
I don't think this is a good example, it's about encrypting an object into an Amazon S3 bucket
I would also like to see some more tests for the nested case.
I'm not sure how to deal with it, but I'm not sure that it's a valid change.
Typo? `Flexible` instead of `Flexible`
Please leave these untouched.


We don't need this anymore right?
Can you add some phpdocs here, explaining when the callback should be used and why it should be set to `getSolrRecord`?
Is there a reason to use this here, as it's part of the API?
Why the changed type here?
Is this just an accident? The rest L1-2 is for "private".
Why not `ToArray()`? I don't see any reason to use `ToList()` here
This is the actual fix.
We don't need this if block since we're just copying.
I think this method is useless as it is only called when volume has not been deleted. I would just remove it.
isn't this `if` block redundant?
Is it possible to use `replace=True` to preserve the original warning?
Should we use a range?
I think we should have an `expect(ApiToken).to receive(:create!).twice` here
Maybe this is not an issue, but this seems weird.
This property is useless, as `detailConfig` is only used internally.
@marefr this is what the code was trying to make here
Is this necessary ? Isn't it automatically reset by the save() ? Same below.
This should be a symbol.
Should be able to remove this now
`VkQueueFlags` is `enum`, so `enum` is unnecessary.
This enum should be added to `PreviewType.java`
I'm curious as to when you changed this to use string-literals. I'm thinking we should not have to go back and change this. I would like to understand a better way of making these string literals in this file.
I'm not sure about this one. Shouldn't it be called "prefCurrentlyPlaybackQueue"?
This seems like a pretty big change to me. I'd like to see a follow-up change and the change in `blacklight-index.rb` to use the counter as a parameter.
Why do you get to do this? It is the same as in the `executorManager`, right?
@jtkech I think this is the only option that should be enabled in the app. If you want to enable it, then I'd suggest that users do something like `TraceConfig.Enabled = TraceConfig.HeaderTagsNormalizationFixEnabled` and use the `EnableTraceConfig` attribute.
This should probably be `current_url` to match the URL.
Please add the import to the top of the file
No need to print the value of `digit`, it will be printed automatically.
This will be much shorter with the `\u0009`.
Can you remove this from this PR.
Why does this interface exist? Can the `KindKind` be an `InterfaceKind` instead?
I think we should be able to get rid of this one, as it is not used anywhere.
I believe the prefix in `Configuration` can be a `job.flow.link`, right?
Should the namespace here be `BenchmarkDotNet.Tracing` instead?
This should be inside the `!(defined(_WIN32) && (MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_4))` guard.
I'd prefer if the original was the only change.
Can we rename this function? Since it is not a general one, maybe `getSupportedImageMimeType`?
Can we use `FloatType` instead?
This is the only method that is used in realm-impl.js.
This test should probably change.
This will break the current behaviour for a solving with non-Brew or Brew solver. We need to check the model model here, and do a check for whether the model is Brew or Brew.
I would remove `multi`
What was the problem here?
This check is not needed anymore. The same check is already done in NewRegistrationAction
nit: `setupLog.Error(err, "failed to parse record", "record", record.Id)`? (same with the next line)
This will break any applications that have a custom working_dir and don't have the right permissions. It's not a problem for them to have a working_dir with the `--dockerfile` flag. This can be set via the `$DDEV_DBIMAGE` or `-DDEV_SITENAME-built` argument, but I don't think that's going to be a problem.
Can we remove the upper case here, or is it better than the current default?
File is not `gofmt`-ed with `-s` (from `gofmt`)
`run` is a little ambiguous here, it is used for a delete, IMO. Maybe `run` and `delete` is better? Or `run` and `delete`?
I think we can remove the above two lines and just use `MetricsConfig.forTable(table.properties())`
Can you please move this into the `_get_source_run_id_from_logs` function?
Should be in the same block as the other stdlib imports (see other files in this PR).
We should move this to line 113
This will break backward compatibility of existing programs that have not set db root as grantor.
@mfojtik this will work if you run the `cgo` command from `go install` instead of `go install` and `go update`. I think it's better to have it consistent and have `go install` run with `cgo` as `cgo`. We could use a different name, but I think the env variable should be used here.
Why the rename?
Line is too long. [83/80]
I believe you can test more than one ancestor
I would suggest to move this to `pkg/network` (or even even `pkg/errors.go`) and make it a method of `errors`
This should be moved to the bottom of package `github.com/openebs/maya`
Is there any test we can assert that these are both false positive?
Why do we need to handle this case?
This doesn't make any sense as the option is not used anywhere, right? The docs are also wrong.
nit: I think `m_renderPassDependencies.empty()` may be more readable than the if-else block.
This can be removed
Why are you doing this?
This test has been removed since the latest release
Should this be in a `finally` block?
Why is this necessary?
This test was not checking for equal value.
I'm not sure if we should add a warning for this as the default behavior is very bogus and will cause people from having trouble finding the default behavior when trying to fix it.
I think we could just use the existing `strutils.bytes_to_escaped_str` function here.
Is this change required?
I believe this should be in the controller spec, not in the helper file
We should not be using the alias
This seems like an error condition to me - if the original `aws_cluster.yaml` doesn't have a valid tags, then the `AWSCluster` wouldn't have the `AdditionalTags` field set?
I'm surprised this file isn't in the src directory
why does this need to be added here?
Final newline missing.
Why is it necessary to include the header here?
nit: I would prefer to avoid `*` in the `iFromPeers` variable.
This should be `"user"`
This is a behavior change that should be mentioned in the changelog.
"Triggers" seems to have some misunderstood meaning. How about "Triggers"?
Why not London,December?
The default here was true in the old implementation, and we were not doing any cleanup for it. Is this intentional?
Is this needed?
why are you changing the permission here?
The Chromium and Brave files should be changed as well
I don't understand why this change is needed. If this is for avx and the caller's saved state is AVX, then shouldn't we just remove this loop from the loop?
This seems like the wrong place to define a computed property, the page title should go into the index route instead.
This was a bug.
why are we removing the check here?
I'd prefer this to become hidden if it's not really needed. It's a pretty trivial thing, though.
I think this will break our existing tests.
Why do we have to create this variable at all? Can't we use the same thing as the files variable?
Why do not we check if disposable?
Is this a new type?
Is the error that this is supposed to be returned as a result? Does it mean that the MD was not committed at the time the call was made? I'm guessing the only scenario I can think of with this error is if the request to write a lockID that was not held at the time it is committed at that time.
Why are these needed? Can't we use the same error as SparkPandasIndexingError?
I think we should add the new field to the end of the parameter list.
Why do we need to expose this to public? I don't think we need to make this class public.
this is not needed as it is already in config
I am assuming this is the only place where the metrics are used?
This looks like it will only find the last element of the list, which is not the case. If the user has added an Agent, will it only show the visible devices list?
Why is this a metric instead of a counter?
Use safe navigation (&.) instead of checking if an object exists before calling the method.
This is an API request, so it's going to be a DB query instead of a SQL query.
I'm not sure this should be public
`self.f = focus`
I think you need to remove the `:csfluent`, since it's not a test-only file.
We should keep `--reupload` option in place for now, since I think the other option should only be used when the server already has fragments.
Why do we need `PartialResponseStrategy`? It's used for both alerting and recording rules and the `PartialResponseStrategy` only applies to a set of alerts and not for records.
We should probably add a `// TODO` here.
I'm assuming this limit is to make it smaller and easier to maintain?
`bool` -> `bool`
Maybe add a blank line before the description of the PR?
This is probably not right. It's not related to the `semantic_errors`, it's related to the semantic errors of the form. So I think this should be reverted.
This should stay as `Twig_Environment`. This should also allow using other environments.
I don't like how the package name is different than the file name
Why don't you simply check for float?
this method can be removed, since `AppName` returns `AppName`
Is this still necessary?
This doesn't work on Windows. I think you need to use `path.join(__dirname, '..')`
Why not use `Collection<WebElement>` here?
I don't think we need the `+1` here, as `count` returns 0 if all of the requests were generated, but if we want the `+1`, then we need to check the `count` of `requests_cached_late_votes`.
This was previously checking for `!opts.fee`, and then it always returned `undefined`. Is that correct?
Is there an option to disable the check?
We need this new field, because it's not a field on the struct. Also, if you want to add a field later you can use `metav1.Time` directly instead. That way, you don't have to create another field.
Why not `VerifyFingerprint`?
Can you please avoid using wildcard import? It's a bit confusing that the import path is different from our own (I'm guessing it's because of the way JBAS works), and it's not easy to make a change that will affect other packages.
We should be able to remove this from the code, because there is no point in having 2 copies of the same data, right?
This could potentially be a lot more information than it really helps with users. Isn't the idea of a log message to tell the user how to reconnect? If so, then maybe the log message could be a little more informative.
This will be overwritten in line 2188, which is not what you want.
Why do we need this if the implementation is the same as the one on the stream?
this logic will always be true, if `req.GetXattr() >= 0`, this is always true.
I know this isn't new in this PR but why are we using `UserPreferences.repeatEpisode()` here? Can it be made private? It would be better to keep `repeatEpisode()` in one place.
Why not return here?
I think we don't need this file, as it's not used. I will fix this when I merge.
I believe `actualNode` is the node in the tree that is being searched.
This looks like a regression.
I'm not super familiar with OAuth 2, but what's this magic number 7?
This class is used for the `new Array(new Object[delegate.length])` in `wrap`, but this class's name has `delegate` in it. Should it be renamed?
I'm not sure how much this makes sense to me, but it seems like we're missing the `next` statement here?
Why is the protocol import moved?
Why do we need both `BenchmarkDotNet.Disassemblers` and `BenchmarkDotNet.Exporters`?
We can't just hardcode this, since it'll break anyone that has been deployed without this. I would rather we add these variables to the `Config.yml` file
I think this should be template.
Can we change this to "What are you using to" instead? It's not clear to me what the current term is and if the users need to use a Dockerfile, they should also know what it is.
Why do we need to remove `http` links?
"Note that the returned list is sorted in ascending order. This list is sorted in ascending order."
I am not seeing a reference to `Reader` anywhere else in this file. Are there any other places in this PR that can reference `FilterDeleter`?
If we're adding this, can we also remove the other usage of `GLOBAL_STAT(num_threads)`?
Isn't this the wrong way round of authored? The message is the same as it was before and is not the same as before.
We can probably remove this file now, but the imports aren't alphabetized anymore.
This line should be reverted
Maybe add `@Nullable` to `type`?
Why is this a pointer?
Why not use `get_current_user` here instead of adding the header?
Why does this need to be split into 3 lines now?
Remove unused import
Missing space after comma.
nit: rename this test as CreateMockSentry or something, to be explicit what it does
This is the bug fix for #8392
Unnecessary spacing detected.
I would keep it 0x0401 and rename the method
This change will not work if there are negative numbers as an input parameter.
Is there any reason the `loopdev` flag needs to be in here?
I am sure that it should be moved to the batch queue, since it does not really belong here.
exception.hpp  domain_error
I think this can be removed.
Can we add spaces between the elements of the string?
This is not a good name for this value. The reason it is in `status.certificate` is for an `issued` request, not to be sent over the API. I would suggest to use `reason` instead and use a different name for this value.
Should we use a `PureComponent` instead of `null`? It seems like it's only used in one place and we'll always pass one value to `ProgressBar`.
I would have gone with the old style and made `inventory` a class method of `Bolt::Target`. But I think it's fine.
We can remove the `-1` here.
Why the change from `uint32_t` to `PRIu32`?
I don't think we need to do this for this PR, but we should probably do something like: if input == "Open" && !string(phClose) && !strings.Contains(input, string(phClose)) { // we need to return an empty input }
I'm not sure if I should add the ability to show the base of the coins. Maybe add it to the explorer?
This method should probably be removed entirely, and all code from `winbuild` could simply be removed, and all code from `python_setup.py` moved to `python` and `python_setup.cfg`, since it only checks for python version that is supported on Windows 10.
I think we want it to be false by default.
It should be `@offering = current_user.offerings.find(params[:id]) || @product`
This is unused?
W293 blank line contains whitespace
Should we use a constant for this flag instead of `FlagConnectionEnableAlias` (same for the flag below)?
I'm pretty sure that the `javax.validation` package can be used instead of importing it directly.
We should make this private since it has no callers.
this function should not return `false`, and instead, it should have a `return false;`
This can be moved down below
This can just be `m.Name` (without the prefix `m.Name`)?
this is just to fix some import order issues, please move it up to 3rd party.
This is an unrelated change, but I noticed in the code we use `resp.status_code` and `resp.msg` as the status code. I'm not sure we need `statuscode` or `statusmessage` for this case, I'll try to understand the reason for it.
why do we remove the `onFinished()` callback here?
Why not use the `GOPRIVATE` env var ?
This seems like an odd change to me.
Why is this not used anymore? Isn't this still needed?
I think this should be `Wellformed`, not `Wellformed`
I think this should be `ply>=3.4,<2.3.0`, as we have no longer support Python 2.7.
Why do we need this warning?
this is not correct. If one of the two is a double, it should return false.
this should be done on all errors, not just for those which are not nil
I feel we shouldn't panic on an error here. It's probably ok for a state update in a race - just want to make sure we don't leave the cluster in the wrong state.
Should this be an `assert`?
Use 2 (not -6) spaces for indentation.
I think `bool` is sufficient.
I would add `'ar'` => [Lang::get('system::lang.locale.ar'), 'flag-ar'],
I would keep the previous line, as it is shorter.
should the attributePrefix here be changed to a common one for both flavisd and fluentbit ? or does it have to be the same for both flavisd and fluentbit?
I think this should be a list
This seems like we might as well remove this job now, right?
Why not just `PMIX_DESTRUCT(&nm->nslist)` to remove all the items?
This will need to be updated for the new rule set, right? (same applies to other instances)
We need to add a docblock here, so we know when an action needs to be called from a controller that's in the CMS?
I think this import is still used?
Can you use a hash with two keys: `pe` (`true`), `foss` (`yes`), etc.?
nit: could you rename this to `muxMutex`?
I know it's not a part of this change, but I think `!variableInMap` is a little clearer. How about `hasVariable`?
I don't see why we need to do this. It doesn't look like the index can be used for non-finalized indexes.
You could use std::find
Should this class be deleted as well?
This is probably fine for a unit test as long as you're happy with your change, and the test is green. If you're happy with it, it's probably better to keep the existing pattern and just do it in the tests that use it.
Nit: we have a static class in the core library. Should we use that one or not?
Can we make this an envvar?
>EventId [](start = 29, length = 9) EventId or EventLogEventID?
`emby-collapse/emby-collapse` doesn't seem to exist anymore?
Can this be removed? It's no longer used and not used anywhere.
This is an example where it's worth considering using an early-exit with an error instead of just returning the empty string.
import static org.apache.solr.common.params.QueryElevationParams.ONLY_ELEVATED_REPRESENTATIVE;
Shouldn't this be `change.Attachments.Attachment`?
We can use `getContentPublisher overviewUrl` here too :)
this should default to false?
This looks like it would cause a regression in a non-ref build.
This is the only real change.
I think we still need to use the ncr id to keep the id.
This is a change in behavior - previously we didn't log the `code` and now we log the whole error. I think it makes sense to just do nothing here.
I think this might be more readable as CaseInsensitiveMap.newCaseInsensitiveMap().
nit: missing space here and below
Which exceptions are expected? This seems a bit weird as it will be caught later.
I think it should check `charges < 0` instead of `sold`
This is the path used for checking health of a service.
We have to do this before we do any validation of the header value. Otherwise, we'll need to ensure the annotation is only applied on the request.
Should we just have this as a `[]string`? I think we do this because it is more efficient than using the same string in two places
why not find?
F401 'iris.cube.cube_list' imported but unused
Same here, we should return the error.
This is probably the most important test, but I'm not sure what the best way to solve it is by making the permission tests case sensitive.
Assignment Branch Condition size for shared is too high. [15.43/15]
Is `the CA` a typo?
It doesn't seem like we are canceling each prefetching here. What about if we only cancelled the prefetching for the block op and only the ones which are not referenced?
nit: typo in the stuct
We don't need to change the path here.
Should this just pass `FileShare.ReadWrite` as the access?
This import seems not needed.
We should be consistent in using `neve-tansparent-header-rtl` here.
Why the alias?
I think `get_zmm_caller_saved` should be used only for `YMM_ENABLED()` and `ZMM_ENABLED()`
`@see` is missing. Is there an issue tracking this?
I don't see any reason to use this method.
Why this is a vector if it's used as a pointer?
Nope. This was never called anywhere.
I'm confused, how do we get default TaskGroupName from the environment when we set that to "copilot-task" by default?
This is a bit weird, because the `prevValue` property has to be set only for `input` events, not for other event types. Maybe we can just make it part of the listener?
Why this change?
I am not sure how to handle this. The code will be more readable if you return H2O_COMPRESS_HINT_AUTO when it is not ON or OFF.
this is the fix
This is a good addition - I don't know if `issubtype(...)` is a good idea, and that it is very clear what this is doing. It could be useful to have a docstring explaining what `issubtype(C, B)` means.
Why do you want these to be suppressed now?
This needs to use the same value as kovos.
Is there any reason we want to use torchvision as opposed to modelzoo?
`log` directive is deprecated.
Why is this change necessary ?
I'm not sure if this will actually work in this case, but it doesn't look like we do anything with that file
Isn't it better to export `api` in `client/` folder? This way it will be available only if a user changes the API.
Isn't this `ReadMode` for the pixel type only? Or should it stay as ReadMode?
Who is responsible in having `Placement`? Is it just that we need to support a list of tags for each stream?
Is there a reason we can't just do c.Environment = secrets here?
This should be a getter
We need the file to go to, not the repo root.
I'm not sure if `SettingsManager` is good name for this class. It's a setting manager and it can contain many settings like `org.springframework.integration.wine.Engines`.
nit: could use range-based `for`.
Is this required?
timeoutMilliseconds = System.Net.Security.Timeout.FromMilliseconds(this.timeoutMilliseconds);
It seems that the `ApiVersionStrings` class is just a copy of the same class. We should refactor them.
What happens when the version rule changes? Is this a valid value?
I think this should be `if (config.getOauthRedirectURI() != null)`.
`checkLayout` seems like a misnomer? What exactly is this?
Please add the header
I think this should be `2019-2019` (I'm a bit worried that the copyright is wrong for this project, since it is a new file)
This doesn't seem right to me. I think we have a `{request_id}` case in `pkg/api.Route` but I don't see it in the code, so this seems fine.
I think you can remove the `name` from `message-labels` and `action-labels` from `i18n.js` too?
Should this be `ACMESelfCheckFailurePolicyRetry`?
I think we can just do `error->message` instead of `error->message`
We need to ensure that the keyfile exists
Is this really needed?
should we make this a method on the protocol?
I don't think this change has any effect.
This will be `async` (which is not supported in Node) and it's a no-op. We don't need `async` here.
This isn't going to work for windows. It's probably safe to hard code `go_buildid_replacer`
why is blockchain needed here?
Please do not use io.
`cnext->resource` is leaked in this function. Please, remove the declaration of the `cb` here.
Do we not need this? Seems like an unnecessary change?
this will cause an import cycle, please move it to the beginning of the function. Also, can you use `torch.onnx.is_in_onnx_export()` ?
Why not using `klog.ErrorS(...)` here?
We should remove this field if we're not doing anything with it
Is there an opportunity to add a `before_action :find_project`?
ineffectual assignment to `sf` (from `ineffassign`)
I don't get why this is implemented in this package.
Why did you remove nullability here?
This should also work with --min-threads=1
I know it's not your code but can we move this to the address package? The name is a bit misleading
@crookedneighbor do you think we should use a different element instead of a form element?
Shouldn't we just use one buffer here?
Should we have an `ElasticsearchHttpSpanConsumer.clear()` that is only for tests? I think it would simplify things a bit, and also avoid the cast, but I don't have a strong opinion either way.
why do we have this test ?
I'd rather see an `insert` action here
I think this function needs to be removed. It is not used.
This is the only usage of the property.
I wonder if `navMenuIcon` needs to depend on `settings.icon` as well
nit: I would expect that the bootstrap container should have an `Init()` method, rather than a method that takes the bootstrap container as an argument.
This will not show the value of the DB capacity as the value of the warmer. The `db.capacity` value will be set to the value of the DB capacity in the `db.init` and then the `db` value will be set to `db.capacity*swarm.ChunkSize`, so this will print the value of the warmer's `db.capacity*swarm.ChunkSize` in the message. I think it's better to print the database capacity here, and in the log call.

Shouldn't the options argument be `protected $taxEngineOptions`?
Can you also check for the error here.
I'm not sure this is the best place to call this method (the library is already loaded when the app is loaded) since it's used in the application to load the library. It also loads the libraries when app is loaded and when apps are loaded. I think we should have a separate method for loading the libraries, but I think it is fine to just do that as part of this PR
This should probably be a separate PR.
Is this a fix?
Should we just remove this call?
What do you think about changing these error codes to something like: 1. The user should not see this error 2. The user should only see it once in the RPC context.
This is the only place the Vectorized function is actually used.
why this one?
We should have a test that verifies that we can add an IAM permission on a Lambda function.
I think "bottommost compression" is confusing. I'd say "top level" instead. And then we should be able to say "Specify the low level compression algorithm".
nit: space missing after //
I wouldn't have expected this test file to change
Why not just return `string{}, "", nil` ?
Why does this change?
I'm not sure how to use `setState`, but the `button` is not a React Element. I'll take a try and see if anyone can find a more specific way to do it.
Do this in a `let` block. It's only used once so it's probably better to just do it inline.
This line is not necessary.
I'm not sure about this part. I'm not sure how I feel about the `unflushedPaths` map, because the `unflushedReady` channel is also closed when `ChainJournal`.
Why is this necessary?
I'd like this to be part of the tab data so that it is available in the browser tab.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Isn't this redundant now?
This should be `Pop`, not `Delete`.
Style/UnneededInterpolation: Prefer to_s over string interpolation.
Why is the `beforeCreate` set in the `setAfterCreateInvocationHandler`?
Do we need to check for the existing directory here? I think we could use `Directory.Exists(path1)` and `Directory.Create(path2)` and avoid doing the `File.ReadAllText(path2)` operation.
I am sure this should be `!system(buf)` ?
The `wlr_libinput_tablet_tool_destroy` call can be moved to `wlr_input_device_destroy`.
I don't think this should be supported.
We should also delete `value` from child components (in `handleSelect`), and then we should also delete `multiple` from `props`.
Is this necessary?
I wonder if `SpinScriptEnvResolver` should be an abstract class. What does it provide us with that in this PR? It should just work if we change the name of an environment variable (e.g. `DISABLE_SPIN_SCRIPT`).
I guess you could put that in a separate example file
Can we have a constant for this magic number?
I believe this can just throw an `IllegalArgumentException`
It's possible this would be more flexible if we had a list of columns in the model, e.g. `proposal_attributes + %w(id status created_at updated_at client_data_type public_id visit_id).to_a`
This is a bit odd since this method is used by `sendKeys` and `keyDown` in the same way, where the command modifier is released. I would expect `Keys#COMMAND` to be used instead, since it's not obvious to me when it's released.
This doesn't have to be omitemptuy.
This change makes sense. Why did that change?
this test was passing before and was now failing.
I'd say that it would be better to error out if `credential secretref` is specified, and `credentialsAssumeRole` is set.
I guess this would cause problems, right?
I'd suggest making the sample name more descriptive, e.g. "AlwaysOffActivitySampler" or something. This is a little confusing because it's the only activity sampler that uses the sample name.
I am not sure this is correct. If we have a rule with no replacement, we would overwrite it. This seems wrong? If the rule is present and there is a replacement, we should overwrite.
Can this class be removed altogether? It seems to only be used in `PMDHandler`.
Why do we need this?
If you don't need it, then please remove it.
I think this file can also go away.
Nit: I prefer the old `[]string`.
nit: remove this change
I think we could just have an interface for this one instead of the two abstract classes. This way we can also remove the `T` and make the interface static.
I don't think you need this method?
Why is this change required?
I'd prefer to keep the private tag here since `@public` methods are meant to be called by the `formatter_loader`.
This should be a pointer, and not nil.
Isn't this going to break for arrays of arrays?
The copyright header should be updated.
nit: remove {}
@bgrant0607 Is this what you had in mind?

Why did we change this?
Can we use here `/(?:never|onpass)/`?
This can be a constant, as it is used in many places.
why is this changing?
I think we should make this an abstract method in `ElementBase` (e.g. `has_content_editable_property`) and add a `@property` decorator to that method so we don't need this `if` check.
@juanvallejo, @sttts was this change intentional? This was a mistake I think
I think we should use the same logic here, but without the command arg.
Is there a reason not to do this with the current time zone?
This should be LOG(WARNING)
This should probably be `fetch`.
I don't think I'd ever put this on `Env` since there is nothing in the environment that's a part of it
Layout/TrailingEmptyLines: Final newline missing.
We need to add an assertion that exFlowKey does not already exist.
This is a backwards-incompatible change, I think. @liggitt will have a better look tomorrow.
This is the list of functions that we have to add the vnl_ fortran_copy to work.
Shouldn't this be "Files were already added"?
This should only be added if the package is not `__init__.py`
Why is this needed?
I don't see the point of using a pointer for a default value, and this is just to make sure that the config defaults to `info`.
Let's rename this to `sort` since there's no `By` in the naming.
Nit: `let refs = [];` is shorter than the `let` declaration.
Can we use `op.op` directly here rather than `newOp`? I think it'd be clearer to understand the difference between them.
this is the only place where we need to call query.visit, not sure if its needed.
`e` is `int` in the `long` format?
Is it possible for the value to not be a number? For example, in the case of a product id that is like `1.23` it would result in `0.234`.
What happens if this condition gets false?
This should be 2021, since the file was changed.
The imports of `html` can be removed too.
We should probably do it after the lock.
It looks like the `OverflowPolicy` constant is not defined in this file, so please remove it from the PR.
why is this changed?
You should have a space here instead of a tab in the string, to be consistent with other strings (I think)
This change is not really required. The handler is a no-op if the user isn't logged in.
Should we check here whether we have resources set to delete before we apply any resources?
I guess you want to set this to false to be able to test if crypto sm2 is enabled, right?
This check should be moved to `validate` function.
This is only used by the ActivityContextProvider, so we don't need `IsInjected` in the other place.
I don't think this should be a new package.
I guess you should use `==` instead of `===`?
This looks like a code smell to me. The `$class` variable should be declared in the first `if` statement.
Can we change this to a List of fields and make this an immutable set?
Should the returned key be the prefix_rid +1, like the `value` parameter?
You don't need this `ifPresent` as the type can already be set.
Nit: I wouldn't put this line here.
Is there a reason to rename `operation`?
This will break a lot of things. I'll update
Why are we doing this here instead of in the `DecodeValue` function?
Why is the default for this?
Why does this warning message not show up anymore in the `restarting the services` case?
I think this test should be in a `describe "#numeric?"` block
What about adding `//go:build unit` before the `// +build`?
I think this should be done before creating the QURL, since that way we can make changes in a few places if we need to
why remove these?
We can add `Observation` to this event, as it is a `Materialization` event.
Is this change necessary?

I would like to keep this one. The reason for using it is that it's not needed.
Is this change necessary?
Please use a proper `std::chrono` and `std::atomic_set`. I think this will cause problems for large systems, and may also help us to keep it in sync.
This will always be a `CosmosElement` right? Why not just use an attribute to store the type?
I don't think we need to export this.
I know this is only a minor point, but can you add a `const` here to make this clear what this is returning?
Shouldn't these be `self.assertDictContainsSubset`?
Why is the molecule not a wildcard?
I'm not a fan of these tests. I think they're more readable if you put them back in.
nit: I think we can use `boolean` in other places as well (like `CommandLine.parse` and `CommandLine.parseArg`)
Should be `Info` here as we do not know the user's SVID is recovered
this needs to be `float(31557600)`
This should be a `POST` as per the other handlers above.
This method is never used?
Is this string generated anywhere?
How about `h.clientPort != null ? h.clientPort : "2181"` ?
Do we even need this? I would assume it is only used for the message pack version. We can remove this and use `#if MESSAGEPACK_2_1`
I don't think we need these two lines.
nit: can we just do `strings.HasSuffix(base, ".build_defs"`?
This should probably just be removed entirely?
I think I would call it `Subnets`.
I think this is going to be a breaking change for anyone who wants to pass in a region to route53 for the whole cluster. We'll need the default value for this in the future.
Nit: you can use `[OuterLoop]` to skip this.
Please move these to a separate file to reduce duplication, as they are identical in both files.
Do we need this?
Is this used anywhere?
We don't need `className` anymore now that we are using class loader.
This could be `final`.
@pieh @bradymiller Can we use the `ERR_HOST_NOT_FOUND` constant here?
Is this the same as line 390?
I don't think this needs to default to rclone. If we don't provide one we need to change anything.
Is there no way to avoid this by using `torch.clamp`? If so, that would probably be a good option (it would allow to use `.float()` in `clamp`).
Should we make this configurable?
Why was this changed to make `parent_pending_link` not a `const`?
These were broken, but I don't think they should be changed.
`uid` seems more idiomatic in this case. `uid` is a `keybase1.UID`. `uid.AsUserOrTeam()` returns a team ID but `uid` has two teams, but one of the different teams is private.
This doesn't need to be a tuple since the package type has its own struct.
@davidfowl Is this change correct ?
This is the same error message as above, it's the same one. Let's rename this one to `throw new Error(message)`?
Shouldn't we remove the existing methods here to make it simpler? I think it's better to add a new method to the existing class.
why is this needed?
This should be a pointer to the proto.
Nitpick: Can we call it `QueryId` instead of `queryID`?
This is an unrelated change.

I don't know if we should be doing it in this way (in this particular case). It makes it hard to reason about what's happening in the code.
This should be configurable, right?
This is going to create an unnecessary React component and will likely result in a double render since the `this.props.value` is not being used and the props will no longer be used and the `value` prop won't be used. You'll need to pass a value into `onChange` instead or add the prop to `props` instead.
I think this is not needed here. It's already handled by the `addProperty` call
I don't think we need to add the trailing spaces here
This is a bit ugly to me. I think we need to merge them.
nit: this is a bit of a misnomer, as `AWS-encoded` doesn't really add any info. How about `encodedAuthorization`?
I don't think we should remove the unit tests here
Maybe `includePrivate && includeComputed` so we don't need to explicitly specify `true` in the function call?
Can you use `tagName` method here?
this error should be logged as `klog.Errorf("Failed to start upstream controller with error: %v", err)` and this should be a warning
This endpoint is only available to chromium so I think we can remove the `GET_HEAP_SNAPSHOT` endpoint entirely
Use 2 (not 2) spaces for indentation.
The name doesn't really make sense anymore? The default is already a location provider impl, right?
Can you change the message as well?
nit: we can move this out of the if-block.
I know we don't have this before, but this is probably a typo?
nit: could you put the second condition first?
I think `getuid()` is not necessary, `pid` is the PID of the user.
This seems like it's going to be used quite a lot in the future. Can we make it a struct instead?
This is a bit weird to have this property here.
We don't need XMLConstants, right?
I don't think `Cache` is a good name for this interface.
This is the main issue. There will be multiple optik options added at the same time in the future. If a user has a conflicting option for one provider, then it is not allowed to add a new option. If a user has an option for one provider that already has options for other providers, they will see that the new option has a different level, but the current option should be skipped. If a user doesn't have the option with a specific provider, then it is allowed to add the option at another provider to that provider. The problem with adding an option with different level may be that the old option exists but
Can you add a TODO here to remove the `Exists()` call for systemd cgroup?
This should be `identifier.name() + "-" + identifier.version()`
Use 2 spaces for indentation in a heredoc by using <<~ instead of <<-.
@mistercrunch can we change this to `Series`?
This needs docs.
We don't use this anywhere.
Should this be `filename_size - 1`?
We have a `Version` type in `specs/consensus.go` which is used by the specs. I think that it would be better to have `ConsensusVersion` and `Version` type in `specs/consensus_v1_test.go`.
This line is the only one to fix
@juliancheal, @jameskoster, I don't think this method is needed here as you're just calling `is_environment?` in one place.
This class isn't being used. Can it be deleted?
I don't think this should be an `catch` - if the file doesn't exist it will be false. The `File` class should be able to deal with this.
I think we don't need to set the deadline here if the client is already sending the message
I don't see a reference to this anywhere else, but can we remove it?
I think we should keep this as `private` and have `RetryPolicy` extend `AutoCloseable`?
This one is now marked as `ISerializable`.
missing space after comma
Maybe rename to `returnPartially` to indicate it should return only partly results?
Why not just `output`?
why do we need this change?
Should we also remove the `io.MultiWriter`?
end
This will need an update to the fixtures/models
I think it would be more clear if you put all of the "or" in one line. This way it is easier to read and understand the conditionals that are all in one place.
Can you please move these consts in a separate file?
What happens on the next line when there are no parameters ?
Is this needed?
I think it is better to define this as a member variable of controller. I would suggest to move the code to cluster_region_controller.go and call it ClusterRegionController, as it is used in the controller and it is not clear why it is not part of controller.
I would move this in a static constructor.
I think we should not do this here, it's the wrong place. We should instead check the connection type in `self.channel`, where if the client doesn't support `websocket` then we'll be overwriting the connection type.
@tgross do we have a good reason you changed this?
Why use alias here?
Is this change needed? This is not used anywhere else, and I can see it being used to retrieve metrics. If so, we probably don't need to change it. #Resolved
I wonder if we can get away with this being a list of all violations?

Wouldn't this fail in production?
I wonder if we want to add the "v" at the beginning as it was in the original implementation.
`it "sends a welcome email to the new user"`
I think `TimeoutSec` makes more sense
Is this import needed?
What does the `...` mean?
This one is also missing the type in the argument list of the definition.
Please rename this to something more descriptive like `_isSelectionAnchored()`
I think you can remove this
Can we remove both `privacyMode` and `keyguardPrivacy` here?
is it possible that the thread ID will be different?
This should be removed
this is unused now
Should this be `read.parquet.predicate.limit-in-bytes`?
I think you mean to add `@author Mark Heckler` to this line.
I would suggest to move the calculation of `number_of_node_based_nodes` to `WriteEdgeBasedGraph` and avoid using `auto`'s.
This seems to have been moved somewhere else in the code. Is it still relevant?
This snippet can probably be deleted. The example can still be created by just using `s3_ruby_example_upload_multiple_items`, which will create an object of the exact same name (which would be the same name as the snippet for the file).
I don't think this is really needed, the only reason it can be set is so we don't need this. Also I am not sure that it's the right way to make this configurable. This is something that users should be forced to change manually if they want to make it configurable. Also, I think we should not do that. Instead we could make this a separate configuration that is passed in through the constructor.
I would prefer not adding new header files. This will introduce merge conflicts. You can find out with @jackjose which way you should solve this.
The new options should also be added to the default widget.
This needs to be moved into the block server, and the MD server should just check if `bServer != nil` (it is also a bit of a misnomer, as there is no blockserver here, and we don't really care).
this is the actual fix. we should probably do `strings.SplitN` on an empty array to make sure we always have at least 2 items.
Why change this? The only reason this is `public` was to make it clear what is being constructed by the user.
I think it would be better to use an English phrase here. E.g.: Hierdie gebied is reeds aangeheg. The gebied is not an English phrase but an object with an array (a few lines below).
import org.shredzone.flattr4j.utils.Logger;
I would say "Build individual Hydrated packages with Hydrated RPMs".
This test is not really necessary as the rule will always have a resource rule. So just `assertTrue(1 <= len(rules_engine.rule_book.resource_rules_map))` is fine.
Why did you remove this?
Is this safe, or does it have an impact on the performance if the object is shared by multiple threads?
Should this also be an empty status?
this should be `bytes.Buffer` as the type
Do we need a new resource manager here? Can't we just use the constructor?
Why not just `bool`? This is a boolean, right?
I think this should also be updated to use `_filename`
Can we move this to the config file?
We need to update these to be `IS NOT NULL` as well.
I would suggest changing the method signature to accept a List<String> instead of Address, privacyGroupId.
I think this was just an oversight in the original code - the intent was to clear tasks for the Android Android app. If you want to hide it in the Android app, you can remove the flag altogether and set the flag in the `AndroidActivity.onActivityClosing(boolean)` method.
this should be renamed
Why is this needed?
This method is very specific to `FlatteningConfig` and we could have another method in that class, `hasAnyResourceNameParameter` or something similar.
Shouldn't we also check `supports1559FeeMarket`, since the type isn't supported yet?
Can you add an empty line before the throw to remove the log?
This should be renamed to "isDockerBuild()"
It's a problem here. It doesn't set `isClosed` to `TRUE`. It just sets `isClosed = false `
Can't we use a pointer to an object? If you want to do this then use a pointer receiver, otherwise use a pointer receiver.
I'm not sure what the best way to handle this is. I think it may be better to add this function as an optional parameter of the `Plugin` type, so that it is always called with `nil` as return value, and then we could just remove the `ConfigFor` method in all places, which might make it a bit simpler.
I'm not sure this is needed, I'm sure this is a mistake.
Shouldn't these interfaces be under `MVVM.Base`?
I think this should not be part of the interface and the `consensus/consensus` should be aware of it
I think this using is not needed
Why not using `size_t` type?
why are we loading genesis here? I see this is in `accounts/genesis/factory.go`. Why can't we just pass the initial state to account creation?
I know this is just a temporary solution, but the path here should be `/communities/:communities_locale/site#communities` and not `/site#communities/site#communities`
this doesn't have to be in `metadata`, it's only used in `VersionDetailsPatch`
This test should not fail if there's only a 1 doc id set in the query. We should assert that the score is zero for all docs in the query.
If it exists, it should be created and the `os.makedirs` call below is unnecessary.
Should we also have `Revision` enum?

This is a very weird name...
`$locale` is deprecated, please use `string[]` instead.
This method name is not good. Maybe `puppet_user_tmpdir`?
I think you don't need this
I am not familiar with this dialog, and I'm not sure what the reason of this change is. It seems to me that a `SpeechViewerFrame` should be in its own file, and a dialog for the NVIDIA Speech Viewer.
I don't like this. It makes it impossible to use it, and it is very easy to miss that there is nothing to fix.
What is the significance of "millisecond"?
This is a good candidate for a test
We could use an `event.Error` here, so we get a nicer error message.
why was this removed?
Why do we need this change?
this log message will be printed every time the init function is run. Please remove it.
@dvesh3 I guess we should use the `getParam` here
I think you don't need this setter anymore?
Nit: We might want to consider renaming this interface as well.
why do we no longer need to keep these?
Why does this need to be a property?
why are you changing this?
I would recommend renaming the folder to something more generic, such as `image-manager-metadata.go` to indicate the package should already hold the metadata in the metadata package.
@dgageot What is the reason that you changed these to debug?
We shouldn't need this if we are already adding a parent span.
The imports should go below the imports
I'm wondering if it's actually needed to be public?
This is not correct. If the user deletes a directory they can not just use `fse`, right?
I think the log should contain the exact reason for failed and/or the reason for not reparsing.
Is this check necessary?
This doesn't seem to do anything?
I think it should be: if (c.state === s) c._nextState = assign({}, s);
I'm confused, why did it change?
We need to use `currencyDataFactory` instead of `CurrencyDataFactory`.
Shouldn't we add freeBytes? We should be able to subtract from the freeBytes of the blockBytes, as we would otherwise have to keep the same number of blocks.
The return statement here is wrong
I think this is going to be a very large list. I would recommend making it a `set` instead.
Why are we increasing the clusters count?
Should we add an exception message here?
Should be `dom_id(plan.id)`
I guess this is correct, but the code here is a bit hard to read and it's hard to understand. I wouldn't expect this to be an issue.
Is the `re.match` check needed?
We might as well rename the scope variable to be a bit more clear
Is this change necessary? I don't see the value
Why do we do this? It will make the checkpoint directory fail?
Is there a reason this field is not `array`?
I know it's already the case that we want this but I'm wondering if we can just drop this and log as info? That'd be a good idea.
You should restore when you exit the test.
I wonder if we should move this component to the `components` directory instead. We might also move the `footerText` logic into the `pages/idea-hub/footer` folder.
I would prefer if we did not change public API but have a dedicated class to hold all the changes. That way we can remove the need to change this in the end.
This is a bug in the code, we can't change this. It makes it so that it works on datasets without a `dataset`.
I believe this should default to `[]byte{0}` for the sake of consistency (and I think that's the convention).
This will require changing the default value of the parameter in the docstring.
nit: `use_shared_date` is a little misleading. Maybe `share_date` would be better?
Can we use the new parameter in the docstring?
I'm not really sure how this works with master indexes. I believe that the index was only used to create the `blob` and not the `blobs`
Can we verify the state before and after this? We can also verify that we are not already in the state machine.
Style/SymbolProc: Pass &:name as an argument to sort_by instead of a block.
You don't need that count, errors are initialized to 0 in the next line.
Do we need `||=` here or just do the default thing?
This will be added by a migration in 3.2
This line needs to be moved down after the `require()` call to avoid a circular dependency.
Should we do a `len(sn.Paths)` check here?
This check is not needed, pzLocked is set to false in the constructor
This looks like an unused import.

Can we add `TODO` to remove these after it is no longer required?
Why is this a pointer?
Extra empty line detected at block body end.
Why was this changed?
Do we want to use the `\` character or `\\\\` as the separator here?
I think this is no more needed
This can be removed.
Is this necessary?
I'm a little uncertain about why we are removing this. I'm thinking we should be doing this on the `Create` side of the `Create` method instead?
Can remove this
I would recommend using the `StringUtils.isNotEmpty` function instead, it would make this more readable.
This is an openvpn provider, so we can't have a test on a provider without the provider ID, right?
This message is pretty confusing, because it refers to both pipeline "first" and "first"
This is not necessary, since the route already has a `DELETE` method for it.
nit: I think this is more clear if `node` was a `Dict[str, Any]` instead of a `dict` (which is also true for `Node`s)
This was actually a bug. It is not `tester`.
Why was this moved? I don't see it used anywhere else.
Why did you remove the wordHashes check?
What happens if we want to attach to an already attached ResponseWriter?
this should be an array of 0s
I would prefer to use the word "resource" and "text" in other tables to make it consistent with others.
this should probably test `/var/lib/ssh` as well, to be able to set it through an environment variable.
Is this used in the test?
I think it is fine to pass `null` for `schema`. If we have to do a null check, then we have to add a `null` case to all the `rows` methods.
This is not correct. ClearTombstonesForNewStorage does not reset tombstones. Instead, you need to reset the tombstones for the new storage to the original storage and the new storage will be the one which can be changed after restarting the storage.
If the timeout is `None`, it is not used. Should we pass it in or use `DEFAULT_TIMEOUT`?
should not log workflow name
I think this needs to be `REDIS_NAMESPACE = "influxdb"`.
Why don't we add RESEARCH_PROJECTS to the DataverseType enum?
This method is a bit confusing since it is not a callback. I would rename it to `authenticate!` since the method should return a boolean, and the caller should handle it correctly.
This is just a refactor - we should not be mutating the object passed into it as a separate argument - instead make a function that copies the object from the original to the new.
This can be simplified by just setting `IsInsecure = false` when it's declared.
Is this a build problem? I'm not seeing it.
I think this is more appropriate to test if the elements doesn't exist (i.e. not in the DOM).
I think the default should be None.
What are these changes for?
Why did you remove `final` for this?
I think this can be `strtype == "[]byte"` as it's an array, which is a bit more complicated for me. What is the reason to make a type alias for uint8, and a string type for "binary", which is a bit more complicated?
nit: remove empty line
I don't think this should be nullable. If it's not set it will be automatically set to null when it's nil. If it's not set, you need to set it manually as null. If the migration isn't run it will be `true`.
This is a bit weird. We set the node addr in the explorer, but then never use RDS. Can we make this a global configuration?
This could be replaced with a `dataFile.getFileMetadata().get(dataset.getDataFilePath())` to get the FileMetadata.
The `usingLocalPrefs` variable isn't necessary.
`if (isPinMongos(testSuite))`
Why is this necessary?
Isn't it a `str` ?
I believe you could just do `const { jsdom } = require("jsdom");`?
I think this should only run if the `chainId` is in the `mainnetNetworkIds`
This is not necessary because I don't want people to have to specify it explicitly in the YAML.
I'm assuming this is a copy/paste error that should be fixed?
`Function` is redundant.
@kargakis this is where I am setting the policy.
This is a typo, not a typo fix, it should be `platform.`
Can we have a method that takes the name of the catalog?
Do we need this log?
Why not just use `ssl_.hasPendingData()`?
@mjkkirschner Can you revert these changes?
This can be a `var`
Is this file supposed to be committed?
You need to add brackets here for a single condition `if`. Also it should be more than 15 mins ago :)
This should only be caught if it's not a valid line, not if it's an invalid request.
Why did you remove this line of condition?
This can be removed if `hipMemcpy` is removed as an implementation detail for hip.
`$indexingConfigurationsToReIndex` -> `$indexingConfigurationsToClearSearch`
This will break some users using `pmix --verbose`
I think you want to do that only when a listener is enabled. Otherwise you can run the `kinto:statsd` command and not `kinto`
I think this method should be private?
Is it possible to have an example in the test that shows how to do this?
I'm guessing it should call `snapshot_name` here
I am not sure if we need this dependency?
Why did this need to change?
Shouldn't we also add `abspath` to `scenarios.py`?
We can also make these unexported as well.
We need to add an additional `Add()` here, so that we can get the existing `Add()` and `Add()` functions.
I'm pretty sure there is still some old references to this.
I'm not entirely sure why this is needed; it looks like the underscore is not used anywhere, and I'd rather we removed it.
Why are these lines needed?
Can this logic be moved into the RestartAgentIfStopped function?
Is this used?
is it still useful if we pass the `jobId` from the base class as an argument to the constructor?
The default values for these settings aren't actually `Account.DEFAULT_*` but `Account.DEFAULT_RESIZE_*`. I'm not sure if they are actually needed.
@mjkkirschner this will be a new field on the `TraceActivityEvent` class. Can you update the PR title and description to explain this change?

This is just a naming change, right?
Is this needed?
I believe you can use the `DateUtils` instead.
Do you mind changing this to just `IOException`
Can you add a link to this PR for a reference?
The logic here is the same. If we have a pac url, it will override the one provided by the proxyConfig. So, if the user passes the `pac` param to configure a pac url, it will override the proxyConfig.proxyAutoconfigUrl. Is that intended?
I'm not sure this should be indented at all. It would be nice if it was indented just one level. Thanks for the PR @hjuan
I believe this should remain `or.ba402`
@pieh do you mind taking a look at the code? This is kinda gross and does the same as the one I suggested. It will help you to keep the logic in one place for the future, as we'll also need to support custom components in the future.
I think this will not be correct, the address is a function, not a class.
Nit: this can go in the import block
Do we need this method? Is it just for testing?
Is there another overload that takes cancellationToken, which accepts a cancellation token?
We need to remove imports if not needed anymore.
Why do we need this?
`includes_mentor?` should come at the end of the list
I wouldn't use ^ for this. It's not necessary.
I would recommend using `if (isSomeFileRemote === true)` to make it more readable and more readable :)
I think we don't need to log any exceptions here
Why do we need this? The actor shouldn't ever be in this state at all - the actor should be able to be removed from the miner. (I think this is done by the actor itself, so we shouldn't do the same for the bootstrap miner actor.)
This will be changed to `ReflectionParameter::getReturnType`.
Should be a RuntimeException?
@wjrsimpson Can you please add curly braces around this if-else if? It's a little bit hard to follow.
I think you should keep them in the AST.
This is a bit misleading. We're adding `C++` to `CppCheck`.
Why are you removing these lines?
This looks like an old code from another commit. Can you explain what this is doing?
I am a bit confused here, do we need this action?
It looks like this should be removed as well?
This class doesn't seem to be used.
Should be `baseFee`.
This is not the name of the test store, I'm afraid.
Can we have this as a list of clockIds, and add a check that the clocks in the list are valid? We have the same logic in `lib/cmd/program.go`.
It looks like you have inverted the logic here, but not the same condition in the `vk_ext_scalar_block_layout`.
Do we really need this?
I think this should be `False`?
I wonder if this is the best place to put this. I'd say it would be better to be more conservative in terms of the API (like how we currently do for the other APIs)
This should be `c`
Should we check that it exists as well ?
Should this still be there?

We should not start thrift and tch if the services themselves are not ready.
Should we also move the check for `undefined` to the `parseAccountID` function so that the code is consistent across the entire codebase?
I think you can use `docs.docs.readthedocs.io` here, no?
I think this will fail on some platforms that have no default charset set?
Is this the same as the `Dictionary<HttpWebRequest, asyncContinuation>`? If yes, then I'd prefer that to be a local variable instead of a private one.
I don't think this is needed since the user already have the user ID as part of the query
This change is because all the other `run()` calls are being converted to strings, not just to numbers...
I think the CDN is still there, and should still be in place.
This was obsolete in the past. It is no longer used.
Can you add the following condition to the `if` block to make sure `atom->setAtomMapNum(0)` doesn't get reset in the case of wildcards?
I think we should not delete this code because the code below should not throw if the archiveFile is empty.
We should probably add this as a default method. If we add this later, we'll want to change the contract name of the eth-1559 block and the fork name.
We are not using `util` in this file.
why did you remove this?
I'd probably go with `CSIRawBlock` to make it more descriptive, and also to make it a bit more descriptive: `CSIRawBlockBlock` -> `CSIFadirectRawBlock` (the same for the other ones)
Why was this removed?
This is a weird method that is only called if there was an error. I'd suggest renaming this to `reload_scripts` and `_reload_scripts`
I would like to see the subject and the body. It's useful for debugging. We don't have it as a string to be displayed in logs, but I don't think it's useful for debugging.
Remove this file?
This is the only import from this one that needs to be changed
I don't think this will work. `[Unhashable()]` does not define a `__hash__` attribute.
Is this file necessary?
This can be a simple if block now.
This could use some unit testing
Is there a way you can set it to NULL at the end of the function?
I don't see the need for such a property to have the `hierarchical_name`. We already have the property on the `FirewallRule` class and can just call the property `hierarchical_name` directly in the tests.
I would add that in this PR: - The object with name of the ingress class - The name of the ingress resource
I think this should be `mock.DEFAULT_ISMASTER_36`, no?
Why the null?
I'm wondering if we need this change now
This change seems unnecessary?
@mzazrivec I'm not sure what this was trying to accomplish. What's the difference?
Should probably use `time.Until` here too - but I don't think the loop will exit if the `Start` is `nil`
This projector is still used by other projects (e.g. `ElasticSearch`)
This was just moved to be a function
@jrafanie Is it possible to run these tests without removing `gradlew`? I think they will work fine without.
nit: remove empty line.
It would be nice to add a check here that EXECUTION_STOPPED is not null as well.
nit: can we just call this "childProcessId"? The word "parent" is confusing
I don't really like the idea of this being in the backup package. This should be done as part of the backup package.
`assert(0)` is redundant and is redundant
We should probably have another pull request for this change.
The `collect()` above could just be removed now.
Is `skip_after_action :discard_flash_if_xhr` necessary?
Should this be `txhash160` instead?
Shouldn't you put this in `MainGapicProvider` instead?
I am not sure if the default should be something like 1. It will be confusing for users if there are multiple threads, but I'm not sure this is a good default. I'm not sure the default is the recommended value for `batch_size` for a `session`.
missing return type hint
Is this a good thing to log? Is it really a debug log?
I think we have to check here that we have the correct type for the file (or the type name in other places)

This is a good example of a flaky case.
Can you add a docstring here for `feval`?
Why do we need to make this public? If there's a way we can have the EVM use a specific implementation, it seems like it can be done with the public API?
@saydenh I think we need this to actually work as a `time.Time` and convert back to a `time.Duration` before returning
I see you added this in the file. I would rather move it there. I think the goal of this is to move all the information about the metadata from one folder to another. It would also help with the code duplication and also avoid this extra call to `cdsObjectToUpnpavObject` below.
What does this mean when we have a custom custom replace that has a `""` value?
This is a good fix, but I'm a bit concerned about the performance of `closeSocket()`. I wonder whether `closeSocket()` should return `false` if `listenSocket_` is invalid. What's the reasoning behind this change? The `closeSocket()` call on the thread that is being called could have caused a deadlock.
I'm curious - why are we putting this into a separate template?
I think this change is not necessary.
Is this change necessary?
Please remove this.
You can probably also test the output of the run function, so I would also check the output from `execute_pipeline`.
What does it means "zvol workers"? Should this be called `zvolWorkersLimit`? Also, do we need to make it configurable in the cluster config?
Please revert this change.
I'm not sure I get this. Why do we need to export `go-selinux` to `pkg/config`? I think it's a better choice, as it is more likely to be used by other packages.
I would prefer `LIFECYCLE_STATE_ACTIVE` for the default
We have a similar pattern in Azkaban. Can we reuse this?
I'd love to see some unit tests for this.
What is the point of this? Why is this a panic? Can it panic in all cases?
I don't think you mean to return null here. `addDependency` will return null and then the following `addDependency` won't be executed as part of the previous loop.
This is probably the wrong place to put this code, it doesn't do anything useful. If you have to specify a port, it should be passed into the `bounce_service` below, so that the puppet service is restarted and the port is used.
nit: extra newline
I think you should move `h2o_strtosize` outside of `switch` since you are checking token here (and I guess this would be ok if you have `switch (token)`)
We should probably make this public as well, since it's only used by our tests.
Is this the right way of doing this?
Why do we need to change this?
If the error here is not nil, we should return it, no?
We can remove this as well, right? We don't need to preserve legacy configuration here.
Why is this needed?
`commandSetting` needs to be initialized to something here.
I think this should be `%q`?
I would remove this warning. I don't see it being used at all
This method should be removed
Please check the error message too.
Should be `* @return Whether this {@code Value} is empty, i.e.`
Why did you remove this constructor? The one that uses this constructor is the same as the one that uses it.
This change seems unrelated.
Why would we allocate this?
I think it may be better to set these in the constructor.
F401 'IntegrityError' imported but unused
Is it okay not to use the recursive mutex here?
@deads2k is it ok to remove `f.Config.Addons.ACMEServer.URL` in `util.NewCertManagerACMEIssuer(issuerName, f.Config.Addons.ACMEServer.URL, testingACMEEmail, testingACMEPrivateKey)` ?
This import is unnecessary.
should we also write an assertion about the version that is being produced?
I would expect the error to be logged here, because it should be logged for all possible reasons.
Why don't we check the `spec` here? We should check all the fields and do it if they are valid.
I don't understand why these are changing?
why did you change this size?
What does "more debug" mean here? Does it make sense to say something like "for better debug" or something like this?
We should add these to `SessionContext.getSessionProperty` as well
I think the test should be renamed to reflect that the output is being logged. The expected outcome may not be obvious from the assertion.
`i` should be renamed to `slot` or something like that.
Should we add this to the persistence layer? We don't need to add this to every persistence layer right?
This can be just `log = log.WithFields(logrus.Fields{})` right?
Is there a reason why this can't be done in the constructor?
this is going to run the tests in parallel?
Is `.encode()` needed here or does `connect=None` work as expected here?
I think you meant 'SayString' here
Shouldn't we set completed.LastTransitionTime = completed.LastTransitionTime in the case of an error?
We need to regenerate this file manually, otherwise `.gitignore` will be picked up.
I don't see any reason why not just use the proposal.ID and use it everywhere?
It looks like this file only has `react-native` dependencies. What's the reasoning here @swissspidy?
We can remove this line? (no reason to add them)
`if (noteIds) {` and the same on line 134 and 135, is this what you meant?
This should be `context-` right?
I think this should be "util"
I think it's better to do this check after the `mset.jsa.limits.MaxConsumers >= mset.config.MaxConsumers`, otherwise, the check is done in the `handleAccountLimits` function.
This should be `return cls._timeout or socket._GLOBAL_DEFAULT_TIMEOUT`.
`if (opts.fee == 0 || opts.feeSat == 0) this.givenFeeSat = 0;`
Why not use `pstring.Format()` ?
This might not be necessary if we have no time limit.
I think this is going to break the `AddonsTemplateURL` and `ServiceDiscoveryEndpoint`
We can remove this type as this is just an interface.
Why is this necessary?
I think `False` is redundant here. I would have expected you to use `isinstance(plot, _Plot)` or some such.
I guess this could return `error` if `closed` returns `true`.
Should this be updated to use `SessionIdProvider` instead?
I would prefer using the fineest level logging here. If this is not a critical error, I'd use info
Why is the `whsc` template needed here?
Is there a reason to change this file? If I understand this correctly, these fields are now used for the ECS container, which means they would have to be renamed to "ManagedAgent"?
I would have preferred passing `false` as a default.
This should be at debug level
This seems like it should be in the new package instead of the default value.
This is wrong. I think this should be "current_mode_min_count", and that's how the other mode fields are named.
This is a very minor style change (I don't think it's strictly needed).
Shouldn't the `\\` be `\\[([A-Za-z_][A-Za-z_.0-9]*)]`?
I think we can add `message` to the exception here
I think it would be better for `reapply_cors` to return an error if it is a `403`.
Nit: I'd prefer using a constant, like 5 seconds (or something like that, if you're not doing that) instead of a magic number.
We don't need the `!= NULL` here.
I think I missed this one. We should probably also update the header.
This needs to be moved to `spec/config/config.yml`
I'm not sure we need to include `queue_music`. It's already on the `Book`, no?
This seems wrong to me, since `session` is only set once during `createIndex` and never reset on `create`?
Should be `.HasValue`
This doesn't look correct. I assume the issue was that the width wasn't the correct one? The `horizontalAdvance` call here looks different from the `setFixedWidth` call.

I'm not quite sure how we want to do this. The `ruby-` regex looks like a valid identifier and not a regex.
Should `d_oy_val` be rounded up?
I'm a bit concerned this may take a long time to get an empty list of listens. What's the rationale behind this change?
This is fine for now because I wanted to move it to `src` so that we wouldn't need this file.
I think it would be better to move it out of the `#ifdef X86` to make it explicit. The same question applies to `ALIGN_FORWARD`.
Should be `tempArgs` or `commandArgs` or just use `taskArgs`?
Why is this needed?
Can you add a reference to the corresponding param here? (I think there is one already). I don't feel strongly on this though.
I guess you have a typo in this file?
nit: `awsCredentialPath := filepath.Join(os.TempDir(), "aws_credentials_file")`?
Is there any reason we don't check `expr.High.Underlying` here? I guess we could be missing some types, but this might cause a panic
I think it is not a block creation coordinator, is it?
What do you think about putting this in a separate module? I feel we should have a separate folder for these things.
Can we use a list comprehension instead of a ternary, to improve readability?
Why this change? I think I'm missing something.
nit. I would rename this variable since now it's not a config.
Nit: can we add the `--java-primitive` flag to `gen_option` as well?
Let's rename it to `aws/cloudformation`, it's more specific.
Should this be in examples.common? It looks to me like it's only used in the tests.
Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline array.
nit: `Objects.equals` is not necessary
`return rangeRoles.includes(...)` is sufficient?
This is not needed if you are using `$this->setOption('file', ...)`
nit: we can remove the ServiceName field, it has not been used.
I'd use the file_exists() check instead. We could use realpath() to check for file existence in some cases.
Hm, I'm a bit surprised that the `PrefetchAfterBlockRetrieved` doesn't use `blockPtr BlockPointer` to cache if the block's lifetime matches the provided lifetime. If the user calls `PrefetchAfterBlockRetrieved`, this would return `nil` if the block's lifetime does not match. I think we want to cache if it has been cached, but if it doesn't, then we want to be able to use a block's lifetime.
This change looks like it is not tested.
This doesn't need to be changed, right? I believe that `InternalHttp` will work as well as `Http` in the `Server` namespace.
What about a `*_root*` field? That's kind of like an ID and is what is meant to be a root field in the UI?
Maybe we can make this part of the table properties. The weight of the splits are computed based on the value of the `read.split.open-file-cost`.
This is not an error in the `if defined(HAVE_LIBUNWIND)`, but rather an error in the `PKG_CHECK_MODULES` call
Should we consider making `DeclaredProperties` non-static and using reflection instead of `GetTypeInfo.DeclaredProperties`? This would be more efficient as we don't need to do reflection and then iterate over all the properties
This will be the default value for `address`
I think this will break the syncing in the future. You should use `await` instead of `exit(0)`, so the main process is restarted. This would also be an option.
This should be `new[] { }`, right?
nit: this doesn't need a line break?
This is the wrong way to test. `host['platform']` will be undefined if the OSX host is a macos.
I think we can remove this file.
I think it would be nice to add to the doc that this is also an instance of the `HttpEntity`
We should make this a `ConcurrentDictionary` instead, so that we don't have to do this for every call.
Shouldn't we only emit errors when the pool is draining?
Shouldn't we check that `changeStream.promiseLibrary` isn't `undefined`?
Should these be `v0.3.1` instead of `v0.2.2`?
nit: can we use a different name like `allow-all-egress` and add a `TODO` with an example?
This should not be required, because the default ServiceNames is used to populate ServiceNames, so it doesn't need to be in the constructor.
This line should go in the above if, since we don't check that `impl` is truthy.
I would suggest to move this to `kubeedge_test.go` and rename the `ConfigPath` to `kubeedgeCfg` and `ConfigPath` to `testData`
Is there an issue with `porcelain` or the same package being removed?
What if there's already a node with the same appID? Shouldn't that be an error?
I would keep the line `configName = message.getProperties().remove(CollectionAdminParams.COLL_CONF);`
This is wrong, if the condition is not met, it will set the variable as "null"
Is the intention here that the state name should have a suffix to indicate what state it is in? I.e. `StateName` or something similar?
You should use `self._close()`
We don't need the `loadClassCache` anymore?
This is a bit awkward as `KEYDOWN` can also accept any `Keys`. I would suggest to remove the `either` part, and use `theKey` to refer to the `COMMAND` key instead.
Please revert the import changes.
This should use `get_index`
This seems odd. Shouldn't it be `dispatchEvent` instead? Also, this method seems like it should be called `submit` (not `submit`).
This is not necessary
Can you please explain this change?
I'd suggest adding a test for `Mol` as well, as that might be useful for some of the other test cases.
Use 2 (not 3) spaces for indentation.
This column will be created for every `Subscription` in the future for each `Subscription` in this table. It should only contain the subscription_id and plan_type.
I wonder if this message needs a note? It's not clear from the function name what this means.
I'm not sure I agree with this, but I think it's a mistake. We shouldn't have the 'other' in the translation, it's an indication that we must be accepting the :other.
I'm confused. Why do we need this?
Why allocate on every build?
I don't see the point here. This is just to be sure the file will be created and used in a subsequent test. But I think it should be `/tmp/tmpostree-deltaobj-XXXXXX`.
I would suggest keeping this. It doesn't seem like a good idea to use the "last_commit_seq" when the frame was created, so this is not the case.
Why is a unique_ptr needed here? This would only work if the result was a reference type (and therefore the resultColNames_ is not a unique_ptr).
I don't see how the new config validators will get uploaded to GCS as it's a part of the scanner. We need to add some logic to make sure the old config validator doesn't get uploaded to GCS. If so, can we add a TODO somewhere to clean this up, maybe in the scanner?
Nit: this should be `in the`
@tvalentyn this is where the actual warning is generated
@niteskumar This is a breaking change, we need a new configuration value. I will do a pass over it.
>ForceTraceWriteLine [](start = 25, length = 20) Should be `Trace.WriteLine`
I think the `set_cache_line_size_using_ctr_el0` should be removed.
I believe the name of this sensor context class is incorrect
Should this also have `scala`?
I'm not sure how long these steps take if we're going to retry, but it might be worth adding the retry to `refresh_access_token` as well?
I'm not quite sure this is a great place for this, but this would make it much easier to see if you could just call the function on the estimator directly and remove the duplication.
I think it should be more specific, `--vm-name`, `--vm-instance-id` and `--vm-instance-name`?
This seems like something to do.
What would be a violation category here? I think this is just a violation id.
Shouldn't we return errors here?
This should go in `init()` and then you don't need to check version here.
This is probably fine, but why not make `isDbusClosed()` return `error` instead of `bool`? This method returns a boolean, so it's more intuitive that we can just call `isDbusClosed()` without the `if err != nil` check.
I wonder if this should be `getCanvasUrl` since it's the same as `getCanvasPath`?
this will fail. `/run/ostree-mount-deployment-var` should be `/usr/local/bin/ostree`
This header is not really needed now and can be removed.
This should be an argument
nit: could you remove " of " from here.
I think there's a nicer way to do this, but it does seem like a better way.
I think I would prefer this to be `d.s.Type().LowerCaseField`, since that's what we're currently doing (and what we're trying to do with `.Lower` here).
@jwilander @john-a-joshi I am wondering whether we should have another column here for the online workshop as well (in case there is another one in the UI?), and maybe a column for the other one?
Should we add the IPv6 address and the hostname in the error msg.
Is the `?? string.Empty` necessary anymore ?
Should we allow for empty path? What if the path contains `/` but there's not one?
Can we also add a check for the number of times to ensure we have a limit?
This looks like a breaking change, right?
This doesn't look like the right place for the boolean parameter to be put. I would move the check to the constructor and have only one place where the boolean parameter is set.
this should be in the config
I think it should be `else` clause here. If the header already has a value, the user will be able to overwrite it.
ineffectual assignment to `ctx`
why was this needed?
The commit status is a little more specific than "verify", maybe "verify" would sound better?
I think we can remove the err check and just return the error in `Get`
We already have routes for this: `/auth/:provider/callback/failure`, `/auth/:provider/callback/success`. Is there a reason to duplicate this route?
@sjpadgett , @kirrg001: I think we should use icon from ui.constants, instead of hardcoding this string.
I think we don't need this anymore :)
Can this just be `Integer.MAX_VALUE`?
Do you still need to suppress this suppression?
I don't think this one will have any effect. You're testing it on a non-compiled source.
If the address is not passed in in a session, it will be the same as the one used for testing. This seems wrong.
Can we use `atomic.AddInt64()` instead?
I'm pretty sure that's why the linter complains
Why not use angular.defaultValues ?
I don't think the code below this is correct. If this function returns an error, the directory should be created and the user should be updated accordingly.
@jasnell @sjpadgett , can you take a look at this?
I am wondering whether this is actually a good idea to do this, since this check should only happen in the OVM case. What happens when we don't use OVM and have this as a default? I would assume that we'd need to do `tx.Cost() < 0` to make sure that a fee is used, even if we do not use OVM.
nit: add a comma after "location"?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Shouldn't we be checking if the instance url is valid before encrypting it?
This is not a good name for this method. It is just creating the new functions and creating a new one. I would rename it to `forBlockHeader` or even `forCmsBlock`.
We should not be removing tags from tests. This would be a breaking change.
This would break the functionality of `BaseElement`. If that's true for all `get_extents` calls, this should be removed.
Isn't this a little confusing? `Zipkin` is already using `java`...
nit: `sourceTable` or `tableName` would be better
I think this is still going to be problematic for other backends. For example `Store` doesn't have access to `BlockCache` and `Prefetcher` doesn't. The `Prefetcher` has access to the `BlockCache` and it can access the `ptr` and `kmd` fields. If there is a reason to do the `Prefetcher` in `Store` we need to use that to get the block to store it.
`get_class()` may be slow, we could try to avoid calling this method every time, and maybe use `ReflectionClass` to get the class name.
Should we set `default` to `true` here as well?
Why was the test change necessary?
Is this change necessary?
why this and the `TestPoStSlasher` ? They do not implement any of those
Can you add a TODO here, as it's a breaking change?
I am not sure why this PR was merged before the PR with vertica or vertigo? It looks like the PR is just for the new columns.
I would add an assert that the mailto url has a leading slash.
`_` is a reserved reserved word, should it be a capital letter?
This should be translatable.
This is not necessary, the lock will be acquired on line 853
we use `*` everywhere else, can't we use it?

Why not use `java.util.Arrays` directly as well?
Shouldn't these be removed? Or was this for debugging purpose?
I think `MetricReader` is no longer needed here?
Can we add a default value to the property?
This doesn't look right, what if we just called SupportsMutex on iOS as well as Android? It's not possible for that to be true if a Mutex is not supported on iOS.
I'm guessing this is because of the `+<space>` in Apache Commons? Or is there a better way?
Why not return an error directly? Then we don't have to deal with encoding it here
this was added, but no longer used.
Should be `--help` (as in the other help message).
I'm not sure I like the convention in the name. Is it used anywhere else?
`return getters.getAliasProp(*alias_, prop_);` ?
I think we should rename this field to `losc` now that we are not using `losc` anywhere.
I'm curious if this change is necessary.
Should we check that it's not nil?
I think this should be an error, so it will never happen in the first place, right?
this is not good, we should use the api instead of json
I don't think this should be part of the label substitution, just the subtraction of C13
E501 line too long (129 > 115 characters)
Please use `Filesystem::exists()` instead

Is this still being used in the code? I'm not sure we want to change it here
`id` here is a pointer type. `string(id)` should be `id.Id`
This should be `s.Logger.WithField("address", address).Debug("info api: topologyDriver.AddPeer %s: %v", addr, err)`
This error message is not clear to me.
why are we removing this?
We should probably remove `timeFields` completely. I think we can just use `partitionFields`.
Is it possible to have this as a required argument? It seems a little over-engineered.
We should probably be using `padding` to make it clear to the users that it should be set to `100%` for a given number of tabs.
The core is an external library, so this change is not needed.
This is an unrelated note but it appears that you are using a setting in two places. This should have been `last-opened`.
This should be removed and replaced with something meaningful.
I think this would be a more readable name for `address_offset` than `addressOffset` for the array.
I guess we should add this option to the `updateResult()` function too?
I think you missed a comma here
I'm not a big fan of changing things like this, but it doesn't seem necessary to fix this PR
Is there a testcase where you need to specify that `project_number` is not provided?
This is a bug fix, we should not stop the timer here
I think `contentType` can be `null`.
Shouldn't be the same as for DRM_MODE_ATOMIC_NONBLOCK ?
Is it OK that you do `point->surface = NULL` twice?
Missing space before #.
Not your fault, but this should probably be `static`, as `ip_address_length()` is called inside a `struct sockaddr_storage` structure.
Can you make it `DEV_FUSE_MOUNT_NAME`?
Nit: You can just put those in the `[StructLayout(LayoutKind.Sequential)]`, there's nothing that is different.
Should this be moved to `scripts/package.json`?
Use `find` and `find!` instead of `find`.
I think you can remove this line.
This should not happen.
This is a bit misleading, it seems to be sending messages to the wallet.
Can be removed.
Why is `AttributeTargets.Class` needed? I would expect `ActiveIssueAttribute.Method` to work?
Can you remove these lines?
Why are we not testing with `undefined` anymore?
Should we add the example for `openkeeper` instead?
Can you please use the assert matcher instead?
Shouldn't we make sure that UTF8Encoding is not disposed at the end of this operation (i.e. after the method ends)?
This is a bit confusing. What about `InboundFilterMiddleware` and `OutboundFilterMiddleware`?
Should be `final`.

why this lock?
Why do we need to add `ON DUPLICATE KEY UPDATE data=VALUES(data)`?
Can you explain why this is a good idea? It looks like it'll always be the master.
This is not necessary any more.
nit: s/is/is/
Is this not required for the new build system?
This is used by Core Core only, not CBN. It should be a generic logger provider.
The code above seems correct to me.
I'm not sure whether this one is correct (the one above is incorrect).
I think we can also remove `RetryTaskV2Failure`.
Is this change intended?
You can use `mean` and `std` in `img.norm()`, because the norm is done by `torch.mean` and `torch.std`
Should be `string|bool|null`
This isn't used? I think we can remove it?
This feels a little like a strange approach to me. Can't the lock stay there in `forseti_cron_runner.lock ` (and it would make `forseti_cron_runner.sh` take a lock and then try to acquire it again)? Or is there another way to do this that does not need a lock and wouldn't need to be hardcoded there? (I haven't checked the implementation of flock)
This was the main change - we only ever push stack items when the opcodes are loaded and the size of the stack is known. This is a pretty common operation.
I don't know how to get a test with video with no codecs. Can you please explain how to set the maxH264Level to 52?
nit: group with other `google` imports below
This will be in the yaml file in `/etc/k8s_rules.yaml`
this was causing a bug when the data set didn't have column labels, which was never being handled correctly.
Why not leave `index` ignored if it is not used, since this is just about pandas/spark DataFrame?
This code is duplicated in 3 places. Maybe we can refactor it into a method?
@HyukjinKwon, I'm not sure whether we want to remove this since I have no idea what this deploy mode means.
I would just log the error and return
Do we really need two types here? It seems just one should be enough.
This will break if you change the name of the settings.
Why this change?
This is a bit confusing since the names are identical but the values aren't

We have the same flag for payment/promo (currency/amount) - do we need to create a new one?
This is an example of how we could do the same in other places where we create the controller, and then call `start()` here. This will be more consistent with how it is done in other places.
This should use the new builder pattern.
Can we use `move_tab` to make the tabbar method more generic?
This should be `@return {this}`, so that the return value can be `undefined`.
Why is this change necessary?
We have this code twice. Is it possible to refactor it in a common function in the message package?
Is this ever going to be null? Isn't a simple dictionary sufficient?
This should be `it.skip('should return a Promise when no callback supplied to forEach method', () => {`
`null` checks are unnecessary
This should probably be in an `ExecutorService`. It doesn't need to be part of `ExecutorOperator.
This is the fix.
This is wrong, it will not produce a 2D matrix of 1-dimensional values, if we want to be more careful.

This could probably be removed.
Nitpick: import sorting.
@jessesuen can you confirm that this was a bug and that's the right answer (i.e. we didn't send a 403 response) and that we still send a 503 back to the client?
I don't think this change is necessary, the rank has already been sent as a string, so the size of it is not guaranteed to be 64.
Isn't agent.dockerClient a singleton?
I wonder if it is better to return some default value for `unary` and `oneway` if they are non-nil, then the caller can determine which one is the expected
Can we just use the `context`?
We can remove that.
I think we need to check if `world` is a tuple and just use that as `world.world.id` (and maybe the world id in the error message is more clear), because if you pass a tuple then the world is already an int and it should be in the range.
We don't really need these flags. We could just call them `tags` instead. `awsTagsFlag` should have its own type.
This is incorrect, it should be `_pair(self.dilation),`.
Is there a reason to set this for the container, but not for the kernel?
This seems like an odd place to set this variable.
@jimczi @jm-sassenka @janezd What if we just add a new file under `aws` and remove the `machine.py`?
Is this change correct?
I know that we are not using it anywhere, but we should probably have a more descriptive name that describes what this method does.
I'd prefer if this could be moved into the else, so that you can raise if `:adapter` is missing.
This is also missing a corresponding change in the config
This looks like it will log the entire `querystring` string even if the `querystring` has more than one element.
This is a blocking operation, we will need to move the loop to a blocking function. I am not sure if this is safe because we may want to use `time.After()` to prevent the race condition, if there is not, we might want an exponential backoff.
`ctor(t, configmap.NewStaticWatcher(&corev1.ConfigMap{}), configmap.NewStaticWatcher(&logging.ConfigMapName()))`
Why `# Segfault`? Isn't this a case of the `ScatterlineFilterFunction`?
I think this can be `#0.####`. The value is not an integer value.
I don't think these should be in the API.
please use a better variable names than secrets, it may be confusing to see secrets as secret in the cloud, and secrets are in the cloud secrets package
This should be a ConsensusVersion struct
We can use `block.Block` here since we are using `p2p/p2p`
F401 'typing.Dict' imported but unused
This should be `Storage.ObjectHandle` to be clear.
this should be in an else
I am pretty sure this is not correct. `len(a)` is not length of a list. `[1, 10]` is `[3, 3, 3]` I think. Maybe it would be better to add the `LengthList` in `__init__`? Or maybe just add `__getitem__` to `__init__` to get the length of an iterable?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
shouldn't the `if err := container.Signal(syscall.Signal(0), false); err != nil` be in the `for` loop?
Isn't this supposed to be a new macro, not an inline function?
Can we please use ColorEquals.Compare instead of ColorEquals?
Why do we need to add a port range here? This seems to be already being added to the `KubeNodePortRanges` list on 298.
I'm wondering if it would be possible to use `from ..util import *` here and avoid using `isfinite` and `process_ellipses` below
Please revert this change.
I know it is a bit confusing, but I'm not quite sure that `warn` will be emitted in `info`, if it will not.
nit: this is a `5` in python, right?
Why this check? Isn't `servers.size()` guaranteed to be always greater than 1?
I don't like that we have to change the behaviour here. I'd say that it should be `if (!parameters.is_zero_point)`.
I think the `?? "UNKNOWN"` could be a little confusing, maybe use `nameof(...)`?
I don't see how this should work, and I'd rather not change all the flag descriptions.
Shouldn't this also be added to AzHttpClientConfiguration?
I'd rather have a single regex matching `regex_filter`. I'm not a huge fan of having a separate list of strings for this, and it makes the code a bit more clear what's being tested here...
Why the removal?
I'm surprised to see a new function here. Why not just `_get_node_first_ancestor_of_type`?
This is the only place we should use `t.Errorf` and we shouldn't need to call `t.Error` in the test. The `t.Errorf` is the one we're trying to avoid.
`self.live = False` is the default.
Should this be `!field.shared`?
If it is no longer needed please delete it.
I'm not sure this should go back to notice. It's not an option to set log level for the console. I would expect this to be a separate plugin.
nit: rename to "oomWaitingJobMeter"
I wonder if the `locale || moment.locale()` should be part of the options?
Should we also be using CONTINUE_AS_NEW_INITIATOR_WORKFLOW_UNSPECIFIED?
`tizen` is available in all browsers (except Chrome). Please check for `!browser.tizen`
Should we also encode the password here? Maybe it's already in the config file, but it's not a big deal.
`TelemetryDataDto getData();` -> `getData();`
The `solver_` object is created at this point, no need for a separate shared pointer.
Should this method be in ExecutableFlowActionManager? I'm wondering if it makes sense to have it in this class.
Should we also add a type in this case?
This should be a different snippet, not just a snippet.
This can be `nil` as the default.
nit. This should be called on error.
This should be nullable, and not nullable.
Style/MutableConstant: Freeze mutable objects assigned to constants.
why not `debug` or just `info`?
The `then` should probably be indented.
Why not use the shorthand?
We should probably delete this line.
This isn't the right test for this. It's testing the `nextFetchDate` function, not the `Fetch`, which should be used by the `streamer_test`.
Shouldn't this be a separate constant? Or am I missing something?
Please remove this extra newline
@mikedanese This will make the block number 0, not 1
@bianpengyuan why do we have this in the builder?
Do you need this class?
I would call it 'Email' since that's how we call it in other places.
Please add a new entry for this new setting, as it seems that all of the other settings don't have them.
We shouldn't need that import anymore, right?
This method should return an error instead of returning false as that's not what we want to return.
This seems a bit odd to me - are you sure these are the only place where they are used? They are used in the code.
Can you change the function signature to use this pattern? `scrub` and `scrub` seem like the best place to use `strings.TrimSuffix`
We should probably move the entire class to the fastdds-core directory. The only reason why we have a separate file for the policy is because it is very similar to a regular policy.
Can this be removed? The name doesn't seem to be used.
This is just an optimization. I would suggest you to iterate over _fileInfos in ScanProvider.
This file should not be changed, it's a test.
I don't think there is any need to log this, the log is only used if the file does not exist.
This can still cause a compatibility problem. I think we should add that we can't use the old schema.
should this be called `target.FileName`?
I think we should rename this method.
Can we use a constant?
This is the actual test file that needs to be updated
nit: rename to ATTR_SELF_SERVE_ENABLED
The test is not checking that `metadata` is empty and that it is not a valid patch
This can be `m.paths[device]Exists()`
We can probably remove 'gaAMPContainerID', 'ownerID' here.
This should still be in the status, no?
This was an error when loading `.gardenlet/cgroup/config/cgroup.controller.yaml`, but this was a bug since `.gardenlet/cgroup/config/cgroup.controller.yaml` was being read from `.gardenlet/cgroup/config/cgroup.yaml` instead of `.gardenlet/cgroup/config.yaml`.
This should be a string rather than a uint64.
Is there a reason why we use the `4_600_000L` here but not `4_600_000L`?
I don't see where `myst` is used.
This could be `cloudformationResourceType`
This is going to create a new object on each render, which means that `previousContext` will get mutated. Can this cause problems?
Nitpick: I believe this should be in separate block
We might want to use `request.url( '/notifications' )` instead to ensure we can use `request.url` without having to worry about the `/v1/` prefix. We're already using `request.url()` in other parts of the codebase, so I don't think it's worth doing it twice.
This could be a `String.format` call, as well as just the `message` field.
I think it would be better to not pass the retry mapping here, but pass in the grpc gateway mapping in constructor.
The `aws_sts_endpoint` is set by the client when creating the client, which is not the case here, right? The service provider needs this information, but it's not a valid endpoint.
I'm not sure if we are supposed to do this, but I would think we should make this more generic and use `io.vavr.collection.fill`, so that we can avoid the `fillObject` below
This field should be a primitive type `Integer`
This is the new spec I've added.
I'm curious - is there an equivalent way to check if the argument is a `float`, rather than just a `Number`?
What is the expected response here?
I think we can just do a `owner = {}` here and remove the `else` case above.
this can just be `rescue => error`
@kapilt this test is the only one I can find where it worked without the extra `response.json`
We're changing the behavior here. Previously, it would copy into `r.dir` (if `dest` is empty), and now it will copy over to `r.dir`. Should we be changing that behavior? Or are we just removing the argument entirely?
I wonder, if we need to have this `ProgressStatus` instance in all cases. Can we just pass the `ProgressMonitor` into it as an argument?
It looks like this is used in multiple places. If so, it might be better moved down to where it is used.
We should not add `:errors` here, I think it is a new concept which should not be exposed.
We don't need these anymore?
This code doesn't look right.
This doesn't look right to me. What do you think about adding an `errorNumStr` variable to the `errorDesc` structure? This way it will always be `sqlcode` and not `pbuffer->sqlcode`.
This is used for the state cache as well.
I would prefer to leave this, but change `go.temporal.io` to `common` for consistency.
This exception does not have a `message` field. It would be nicer to just call it `ReadonlyError()`
I don't think this is needed, as the function is already empty
I'm wondering if we should just make this a pointer and initialize it as true when it gets set
We should remove all the code below this one since it is not needed anymore
This is an odd place to put this fallback. Why not just always use the string `"[PROCESS_WITH_PID={}]".format(pid)`? That way this will always return something different and the user doesn't have to do something special.
Why are you adding the path here? The error message already has the path in it (line 317).
This test was failing in Travis.
I think this is correct - I'm unsure if this is actually correct.

`// Services is an array of services` should be `// Services is an array of Service`
This will match `^api[a-zA-Z0-9-]_` and `^api[a-zA-Z0-9-]*_[a-zA-Z0-9_]$`. I think we should use `^` instead of `^`
@jonaschloski I have to change this to reflect the usage of Ruby (which would have been v1 for example)
Why do we have this check in the test cases?
Is this used for something?
Why were these removed?
This is no longer needed, since `Driver.prototype.VENDOR_COMMAND_PREFIX` is defined in `Driver`.
Can we just use `kwargs.get('composite_root_resources', []` and drop the else clause and just use `tmpcrr.split`?
Why is longVal in this context? Can we reuse it?
I think we could also get rid of the `PrintCommand` method and use `output` directly here
why did you get rid of the underscore?
Should it be in `ImageMgmtConstants` package?
Why not `const_cast<std::string>`?
Can be simplified if we add more interfaces to the interface definition
We don't have to have ansible-galaxy installed by default, we can do ansible-install as usual (in the `state` module of the system).
Please use the FQCN instead of the FQCN here. (Same for the changes below.)
We need to do this in `useSelect`.
Should this be in an `else`?
I would just use this constant here, rather than having two different values for the different values.
I think you can use a group and group with a single route: m.Get("/:id/:branch", repo.GetBranch)
Is it okay to change the class from `VolatileValue` to `RandNum`?
This should probably be `FirstOrDefault()`
Why is `*` replaced with `/` here? It seems that this change is not necessary?
This file seems unused
We should make sure that the default sources are not set when the `TracerSettings` is created. Otherwise, it might create a bunch of tragic configuration sources.
`SUBMIT` events are not fired when you change the button. Is that intentional?
`cache.set` should not be called if `!isVisible(axe._tree[0])`
this seems like a good change. it would break the existing behavior where a nil slice would be returned. is that a safe change? if so, should we do that for all of our callers to verify it is safe and make sure it doesn't panic?
Shouldn't it be the same as `cluster-api-provider-aws`?
I think a better way to do this would have been to add another `s.metrics.TotalSent` gauge, and set the metrics accordingly.
I guess it will be better in a separate PR for `json_schemas` as well, since we have a separate PR for them.
This is not really a text, it's a string.
We should check for error.
`desired to be`
Nit: I think `t.Error` would be more appropriate here
You can use `assert.deepStrictEqual`.
We should check `conflicts.size() == 0` here.
I assume this was just moved?
We should do some kind of check for null here to avoid potential NREs in `Span.SetTag()` when `span == null`
This is not required as we have a base class.
I would not delete that, as we still have the link.
I think this might be too much.
Can we have both `POST` and `POST`?
I believe the `\1.` should not be here.
Should these have `t.Run` statements? If not, we can remove them from the test suite
This is not how it works. We need to add the `Access-Control-Allow-Headers` to the response before the original handler is called.
Maybe we should just print out `mPluginLoader` instead? Or maybe just change `fileName()` to `id()`?
Why is this line being removed? I guess it is related to the fix
I think we should leave this one, since it should not encode empty strings.
It's not clear to me why you create a BuildState here, rather than using the one passed to the method as a param here?
Is it possible to add a new block type to `TransactionProcessor`? I'm not sure if we should introduce a new interface for the block type here.
I would prefer that we do not have to throw Exception.
Please add `# -*- coding: utf-8 -*-` at the beginning of the file
Can we add an additional parameter to the precondition?
I think we can drop this line now?
This could be a `DevnetConfig`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Should it be the same as the default Umask?
Can you explain why this is gone?
The old code was better (in the case the mutex was held)...
Can you add a "TODO" here, as we discussed.
I think that we can use `field in named_arguments or field == ""`.
Why is all this added?
Is this still required?
I'm not sure why this was changed.
This is not the same behavior with a single shutdown. We need to return Task.CompletedTask here.
This is not needed. If bulk write fails, then `err = { caught: true }` will be set.
Why is the condition removed?
Why not add it to a `@group legacy` as well?
If error, should we return nil instead of err to the caller?
this is an unrelated change
Why not put this config into the `account.json` file?
nit: init with 0
Why does this change?
typo in casSnapshot (should be renamed to casSnapshot)
I think this function can be removed.
This is no longer needed?
`cacheTTLDuration` should be the duration of the TTL in seconds, otherwise it's going to take the entire duration, which isn't ideal.
should be kept as master
I think this check is still wrong, since it would fail in the case where `md5` does not match the value provided by the customer.
Can we move this up to the other `Priority` objects? I think they can be private and static. I am fine with the `priority_high/` suffix but I wouldn't be surprised if the other one is named `high_priority`.
I think this could be a warning, since it's not really an error, but rather an error that indicates that the password is wrong. We may want to check for the presence of leading+trailing spaces here too, since the message could be misleading.
This is not the right call to show a MessageBox. This is the main purpose for the application
Why do we need to initialize this?
Why do we need this field? It is only used in tests right?
nit: extra white space at the end of this line
I'm not sure how we should change this, but in a separate PR this will need to be updated.
This should be `blockchain.MarketAddr().String()`
Can we move these to the `webhdfs_cli.py` file? Then all the CLI CLI code can use them.
We don't need to rescue here since we can use `Pundit::NotAuthorizedError` in `before_filter`?
I don't think this file should be in the checker directory?
Can we make the test case a bit simpler and not rely on `--p2p-port="9"` being passed?
Please add the new copyright above this one.

Can this be removed?
This should be set via environment variable in `config.go` and be done in main, and not on main.
Should these also be in `test/flux/errors.go`?
Why not check `txReceipts[i] != null` ?
Why did you remove the `githubURLFlag`?
I know this is a temporary fix (and it is not part of this PR). But why we are relocating it here?
this import is not needed
This doesn't seem right. You should only execute the UNSELECT action if there is an action available.
How is this related to the TODO?
This is an unused alias.
Should this be `act.RepoUserName != ctx.User.LowerName`?
I'm not sure this should be a constant. The only place this is used is `containerStarted`.
Can we just do `os.path.join(cfg_dir, 'Default.sqlite')`?
@smarterclayton - Is this a valid value? Should we allow a value of `Internet-facing` or is this always the default?
'circular-json' is not defined no-undef
Do we need this line?
This should be `fmt.Errorf("dir: %s, file: %s", dir, f)`
This can be deleted
@mad-eel I guess it should be `services`
Shouldn't we have a check for `!slot.getSession().isPresent()`?
I'd add this new one after the BUCKET_VIOLATION
I'm a bit concerned that this will create duplicates of the same scheme in the list of httpListenerPrefixes, since each of them has the same scheme. I'd suggest either adding a new field or having this be a collection and having a single method that returns a list with one item per URL that is either the url or the prefix.
Please add the following: "ACCOUNT LOCK, MAX_QUERIES_PER_HOUR 1, MAX_UPDATES_PER_HOUR 2, MAX_CONNECTIONS_PER_HOUR 3, MAX_USER_CONNECTIONS 4;", as we're doing in `GQSQLParserParserTest` :)
I don't think the initialization of `needs_reshape_` is correct - `reshape_` has a default value.
Why not just `list.sort_by { |x| (x.respond_to?(:order) ? Kernel.rand(list.size) : 1)` and then `order`?
Can we use `Backend\Info\ApacheSolrDocument` here instead of `Backend`? I think it's more standard to use `Backend\Info\ApacheSolrDocument`
This field can be removed now
You could add here a check that it's less than 40. And also add an assertion for the result of SubBalance. You can also check for ErrNotEnoughBalance if the balance isn't enough and it's a negative number.
This is a breaking API change. You can just override this.writer.writers() instead.
Please use a different message.
We should probably be consistent in having static imports as wildcards, even in the `com.codahale.metrics.Metrics`.
Why do we need this?
Why does this need to be done in the destructor, instead of in constructor?
Should be `CreateCmd`
This should also be updated?
Shouldn't this be 0x1? Also, why do we use a constant here but a string?
Is the request body variable the only one that has a type name?
@hmhealey I don't think you need this. If you don't have the permission, create the file on the fly.
@danxuliu I changed this to include the "details" tag. I don't know why the appRouter.showItem was doing that, but I'm not sure.
Why is it not a `np.isfinite(...) == False`?
nit (just a suggestion, but I don't really like the import reordering)
This should be a separate `use`
@jessesuen I think you want to keep the logic here, as well as set the resource to MemoryUnlimited, and only do the check for the cgroup path if it exists.
This will not work because `maxNumberOfFiles` is undefined.
Nit: can you make this one `constexpr` please?
Is this change related? Or a separate one?
I don't see how the `size_` prefix is required for these classes, but that's just a detail, I don't have anything to say about it.
why the change here?
You can remove the `@var`
I think we should also deprecate nextCheckTime and numErrors in ExecutionReference class, right?
`name libkb.NormalizedUsername` can be removed.
This is a change that we can't do as it will break existing behavior. Instead you should update `ExecutionContext` as well.
This error message is incorrect
Should this still check for empty ?
please add a space after the comma.
Why is this being removed?
@sjpadgett Isn't this a breaking change?
I think we should just return here, so that the user knows the error and can correct the output.
E501 line too long (116 > 115 characters)
@danmar can you please confirm this change is correct?
This should be a static final constant (I know you didn't write it)
Is there any way to make it clear that this will be set if the key is present?
Do we need these default initializers? If they are always initialized, then they won't be needed.
@cpojer, @sokra I think we should not change the variable id in this case since it's not necessary to pass it through the DOM
Can we use `CallRequestHeader`.
I think we should rename `formatTimeAgo` to `formatTimeAgoText` in `core/util`
It might be better to use a bool here, as it is the default value.
`nan, inf or function name, signed`
I think this is a bug?
Should there be an `if` here?
Is this an API bug?
I don't think that this is a useful change for a function that is public API
I'm not entirely sure why this change was needed. If the topic has been dynamically generated then we don't know what we are looking up.
The property is protected, so you cannot set the property directly.
I guess this is the actual bug fix? (I assume the problem is with the `employeeId`).
I think we need this as well.
It's a bit awkward that this uses `NOEXCEPT` in the header, but `noexcept` in the compiler in a non-test build.
Do we have a bug for this?
Remove empty lines
Is this really safe? Doesn't `fpga_perf_counter` have to be cleared here?
I think this is fine but I am wondering if there would be a case where it will not be None?
This should probably log something about the request.
We need to use `_` instead of `_()` (here and in other forms)
This doesn't seem right. This would allow us to run antrea-agent as an antrea-controller without having to look up a pod name. The logic here should be `inPod = found || (strings.HasPrefix(podName, "antrea-agent") || strings.HasPrefix(podName, "antrea-controller"))`. I suggest to change the check to: `inPod && (strings.HasPrefix(podName, "antrea-agent") || strings.HasPrefix(podName, "antrea-controller"))`
Why are you removing this?
`scope?.Span.Context != null` is not necessary as `scope` has already been set above
Why did we remove the reward tracing?
We should add a `READ_PARQUET_VECTORIZATION_ENABLED` config to control the functionality here as well.
Is there a reason for this change?
This seems unrelated?
`USERNAME_PASSWORD_REQUIRED` is a bit generic, IMO. Maybe `USERNAME_REQUIRED_PASSWORD`?
This should be blockIndex
This should have default value to `null`.
this will be a future PR
Can you also change the `/deploy` directory to `src` and then remove the `NugetVersionReplace` property?
This should probably be a property (like `_storage_class_header`) since a provider should only know its own storage class, not necessarily a header. Also, should we check that the response has a `storagedataclass`?
Do we need these timeout configs? They are the same for the `PageLoadTimeout`, `ScriptTimeout`, and `implicit` timeouts (which have the same names)
Should we mention that the region hint is optional and not the ConfigProvider's region config?
This should be the same logic as the one in Player.
this is not a good function to put it in
This seems like a very expensive operation to me, as we don't actually do anything with it, right? I wonder if we can just make CredentialExpiration part of the StorageAccountCredential (i.e. remove the MSI part in the options).
Please test for the presence of the button (and the text).
This should be `MarshalIndent`
this is the main change. we need to be careful about adding event processing to the main process. the main one is already triggered by `start()`
I'm a little concerned with using a user_id in a destroy, as a user could have deleted their plan and archived, which could cause problems. I think we'd prefer to be able to archive the plan. If the plan is deleted and we don't have an archive, we could just remove that user from the role, which would be nice.
I don't really understand why we need a `Get` here, why is it needed? The API should not allow to upload/delete an Avatar
I am not sure we should use `message.error()` in this case. It would be a lot better to do it on the caller.
This change makes me sad. I didn't have time to do it yet
This seems a bit odd. Why can't we use the same path as we don't care what's inside the weave directory?
why was this deleted?
I don't think you can have an interface for ` SolrSingleThreaded` as well, since it's not used anywhere, but only the `SolrSingleThreaded` impl.
@hackaugusto @alexanderbez I don't believe we can make `actioninjector` a v2-only dependency of `k8s` (as it has a very large impact on other k8s components).
Should this be in an `if ok` statement?
Is this test not working? The old tests did not have these two tests.
This should only be removed when it is `false`, right?
`Clone` is still defined on this struct and never used.
We have to escape all of this in this method as `comment` might contains `$` or other special characters such as `#`, `#@`, `@` and `@{`, etc.
I guess this needs to be reverted, right?
why change this to 64 bit ?
Should be `isStatusFailed(Status)`?
I'd prefer to check this error, and the one below if `code != http.StatusOK`.
I would prefer `require.NoError(t, err)`, because you don't really care what was the error, and it's not immediately obvious that something went wrong when we expected it.
This is a pretty good change. Can we instead change the `SetupWith` function to take a context, and pass it down to `CheckConfigAndShutdown`? That way the `setup` call doesn't need to have the context.
These two methods are duplicated from here and in `VulkanObjectLifetimes::ReportUndestroyedObjects` so they can be extracted into a shared function.
This test is now wrong because we are not testing the client anymore. It's better to use the old `client.abort()` instead and assert that we got something useful.
nit: remove the blank line
nit: I'm wondering if we need this at all. It seems to be a pretty generic interface and I don't see a strong reason why we should expose this
This should be removed from the `build.py`
I think you need a space after 'verbose'. Please check.
Use 2 (not 0) spaces for indentation.
Can we make this ctor public?
I guess the fix is good. But I'm wondering if this is a bug that needs to be fixed upstream.
Why does this need to be nullable?
Can we remove this and just use `String dataLocation()`?
I don't see any reason for this to be an abstract method. Is it just to make this abstract if the `MetricProcessor` class is not supposed to be doing anything other than call the underlying `BaseProcessor`?
We could also use the port in `wait_for_port_open` to ensure that the port is open at least once and not for all ports.
Is the cast here correct? The other changes are to cast in the if/else block
Why are we skipping this?
I would put the `max(0)` in a separate line, and add a `LOG.info()` below
I think it's better to use `const char` here, since it's used in `dmstor_ctx`. Also, I think we might want to consider making this an array of `char`s and adding `pj_get_default_ctx()` to the set of possible `const char`s in here.
Why is this needed?
I think it would be good to have this as a unit test that verifies the EthCtx passed as argument
Why not propagate the throwable?
I think all these should be final as well?
Can you please add a note here why this is being used with false?
I think we have a lot going on with the trailing spaces. Can we please remove those?
I believe it was just a debug message, not the full stack trace.
Can we use generics instead of lambdas?
Nit: this can be `private readonly`
The line length limit is too long. Please break it at 79 characters.
This method is only used once, I'd inline the code into the `Send()` function.
Why is that here?
Can we just have `find` return a `Blob` object and then do `blob.type?.length > 0` instead? Then we can avoid the `find`
This is going to be super helpful for debugging.
The check is already done in the physical device extension.
I would suggest to use `CCTOOLS_LOOP_DEV_FULL` for `0`. This environment variable will be used for testing only.
Shouldn't there also be a `i !== undefined` check?
Please remove this include.
Can we use LOG.debug here? That should make it more obvious that the code is only being executed once and it can be debug.
Is this still necessary?
@pululuk I've removed this, because it doesn't work in MySQL, because we have a `LIMIT 0` in a prepared statement, which means the query will be executed for all products. It's not very clear to me what's the intent here, so I just went ahead and updated the sql to work.
dal::preview::spmd
Can we have a unit test for this? I think it would be worth it.
I'm not 100% sure about this. What do people think about this?
Why this change?
This function needs unit tests. Also, the docstring needs to be updated.
This test should be in the `test_instance_api.py` class.
I think it's better to keep this on by default. I don't think it's useful to have it set to true in our production config.
This is the actual change?
This is now broken because of yaml safe loading. We have a test that does not fail, and this is not a breaking change
Do you think this is a good time to log a message in the event that we get an exception here? Otherwise we'll lose all the context and will end up with an empty message.
Use safe navigation (&.) instead of checking if an object exists before calling the method.
This is just some clean up and makes me a bit nervous. Is `Node.toLispString()` going to create a new String every time a value is displayed? It looks like it's being called on every single tree. It seems like this is a case where `nodeValue` would be more efficient than calling `tree.getValue().toString()` for each node.
This should be errorErrorCode (we don't use them elsewhere). And the test should assert that error is an error, not just that the error code is a code. Same on line 456.
should we add the header rewrite logic in `h2o_build_request`?
nit: `updateInterval` to be consistent with the rest of the code
This file needs to be reverted.
Why not use `colName.startsWith(TRAF_DIVISION_COLNAME_PREFIX)`?
This example doesn't make much sense. It should not overwrite any existing headers.
Should probably use `return import.second->hasLinkLibrary();` instead?

I think this is not correct. The request will not be sent if the response is not successful. So the client should be notified when the response is not successful.
Why not `info`?
I think it is ok to add global global in HCC code. The code should be able to support multiple module.
This change is incorrect, since HttpWebRequest and HttpClient instrumentations are the same.
I am not sure what is the purpose of this. I think it is a good idea to make a change to this PR, because that means people are not able to build a release.
I don't think it's necessary to check for nil here as the check below is done on line 148.
This could be removed.
Nice, I had already had this in my `lodash` plugin.
I'm curious about why we need to add this. It seems to be a new API?
You'll need to change this back to an empty string, and then we can remove the `if (isNullOrEmpty(widgetPlacement)) {` check.
This is not needed
This is a very simple template. We shouldn't add any new translations to the template, it's a bit annoying. If you want, you can write a helper in the view that takes the `application_name`, and passes it to the `t` call. I think the way you have it now, you should be able to use the `page_title`, too.
What if the global option is a string that is not a valid Caddyfile? Would be useful to check that the option is a valid Caddyfile.
This change makes `isProtected` return false only if `focusObject` was a protected control, and `isProtected` return true if that's true. This change is to avoid the possibility that a focus is protected but the `isProtected` property doesn't exist.
You could remove this test, it doesn't seem to do anything other than verify that the button works when the user presses `disabled-button`.
Why did you remove the interface?
I assume this is a bugfix, or just to make the tests pass.
Why remove this test?
What do you think about just using the default clock?
The fix is correct and the rest of the PR is good. However the PR is not related but should go to the other commit.
Is this related to the `user` or `visitor` or are we keeping this?
What happens if this is not in the current system? I'd say we want to be silent and not crash, right?
I wonder if a more specific `FlushAsyncInternal` name would be useful.
We probably should not make this configurable.
`assert str(dt.max(f[:]) > dt.max(f[:)))`
It's better to call `name = name.substr(0, name.size() - 3)` for this case.
`log-file` is ambiguous. It would be nice if we can be more consistent with this (which is not the case with `instance`).
I would rather not add methods that are not part of the public API.
This is a breaking change, is it OK?
I'd prefer `auto holder_ = std::make_unique<folly::RWSpinLock::ReadHolder>(wal_->rollbackLock_);`
nit: this should be a method in the model.
This method could be made simpler, and I think we should have the method return if length == 0, or a boolean to make it more readable.
Should be "pingpong"
This is just to make sure we receive the correct CA response back from the client.
This import should not be necessary.
Isn't this just `java.lang.AnnotationType`?
I don't think there's a need to create an index on the AllergenName here since we are dropping the table and creating a table with the same name already in the table.
I think that this should be `have_content`?
nit: could you make it an enum instead of a magic value?
Can this be `Closeable`?
This is not the kernel extent, but the dilation extent.
Do we need `Run`? I feel like the `Run` can be inlined with the call to `BenchmarkSwitcher`, but I don't see why it would be better.
I'm confused why this change is needed.
I don't think we should do this. The problem is that it will be hard to distinguish between a time span type and a duration value. I think we can do that by using `type.Name`.
nit: move to the end of the import block
We need to update the startup script too since we will be using git.
This can be removed as a new flag added to the default config.
This key is unused.
Should we use `checkArgument` to check `beginIndex < length()`, `endIndex < length()` ?
Why do you need to check if the registry is null?
Can we have a `const` for this? It's used in two places (in this file and in some other files).
Is this hash going to be unique?
This should be `FILEIDENTIFIER_LENGTH_BYTES` for readability.
Please remove this line
This route was added on the LMS, so I renamed the `make_spammer` function.
I think this is a good thing, but it seems like there's nothing wrong with the current behavior in that we will now be reading the config from the config dir when we're done with the command. If there's no way to get the config from the command, then the user needs to manually create a config dir with a `--log-dir` argument.
The docstring should be a bit more descriptive, maybe something like "Escape the string parameter used in SQL LIKE expressions, such as '%' and '_'".
This is incorrect because we need a timestamp to be able to create a row with a timestamp.
Why was this necessary?
I am wondering if it is the right place to put these checks, and if it is possible to put them in the `__init__`.
why is this a magic number?
What was wrong with the previous code?
We should probably use a constant for the "Access denied", like the other error messages in the file.
Shouldn't we set `output->description` too if `format` changed? (I don't mind either way, but the current code seems to be the same as before)
This is a bugfix, it's in `databricks.typedef.col`
Is this necessary?
This `then()` call is not needed, as the result of `dialog.show` will be `ok`.
I would prefer `hu.IsFairBalance` instead.
It is a flat representation of text that can be navigated with the cursor keys like in a text document.
@dsgouda @dsgouda I am not sure that this is the correct way to handle it. This is the main issue. The child view cannot be shown if the more menu item is visible (it's not a child view, but a child view in which the user can't select). The way the more menu item is used is when a view of the menu item is selected, but the user has already selected the item.
The new passcode is handled in the `SPDispatcher` now.
Should this be configurable?
I'm a bit worried about this, as I've seen other places where we use `send` and `send`. Should we use `_path` instead?
nit: should this be `%w` instead of `%v`
I don't think we need a message in this dropdown, just a dropdown button for the new message.
Is this needed? It's not actually used.
I am not sure if `KeyError` is the best exception here (and in the other cases below) - `KeyError` could be raised when there are no objects.
struct field DisableHttpGit should be DisableHTTPGit
Is there a reason for this change?
I think you can just do: `$('link[title=dark]').prop('disabled', err.code !== 'MODULE_NOT_FOUND');`
Is there a reason we are changing this from `host['ip'].to_s` to `host['docker_container'].json["NetworkSettings"]["IPAddress"]`?
This seems a little strange to me. It's not clear to me if this is what we want here, or if the logic to set `isDoingReset || isNavigatingToPostResetURL` should be in the hook, and `setInProgress` should be used instead for determining if a user wants reset state.
This is not correct as we are creating instance in the delete phase and deleting the cstor zpool.
Is this a backward-compatibility break?
The `error_` variable is now not being initialized here, so `error_ = file_being_parsed_.length() ? file_being_parsed_ : "";` is not needed.
This will also not work if you pass any HTML to it, I guess?
Is this correct? Shouldn't we just skip caching when we're already archived, rather than returning?
Why not add a `ValidationException` in the map?
Do we need this as a public method? Could we just make it a method?
I don't think you need this `addtransaction` parameter, as a function parameter, just return transaction.
I am not sure what this is for?
This is not the same as the original.
I think this should say something like "parameter argument type is %s, but type is %s".
This is a public class, we should not expose it. Please remove
Should we change the traceLog to include the class name instead?
We should probably create a new method instead of extending the existing one :) Or maybe even create one with `$config = $sm->get('VuFind\Config')->get('config');` and then `return new ....` ? The same goes for other methods.
I guess it'd be better to have these as `const`s, but I'm ok with either way.
Can you explain why there is an incomplete classpath?
Shouldn't the constant be `supportedVersion + 1`?
I would move this func to `pkg/path/path` since it is only used there.
I don't think the star import is really necessary here.
The config is not used at all in the dispatcher.
This should be `view_response_cta`.
Why is this deleted?
We're not using the `stripe_token` variable anywhere, so you should remove it.
Can you use "inet_pton() + port" instead?
I wonder if we should have a "spec" here for a source or destination. We could just use a list of names, and then we can just do the `spec.Source.Groups.Union(groupName)`. That would be simpler for the future, but I think it would be good to have consistent behavior between source and destination.
Why not put this logic in `_get_completion_model()`, since it's only used there?
This is a bit weird... what does 3 mean?
I think it's better to define it as a global variable.
This seems to be unused
this should not be debug IMO. It is a user-facing thing.
This is not needed.
Use the new Ruby 1.9 hash syntax.
Is this really required ?
Maybe we could rename this to "getCurrentNumDocs" to match the return type?
Why are we using grep and retry_on here, instead of using a standard method which we could use to get some data?
why is this needed?
The `handleCaretMove` handler is the one which handles both the caret move and the selection change.
I think the default value of `True` is to keep the behavior consistent with the other actions, right? In that case we should use `False` here.
Missing license header.
this can be deleted, and the checkpoint can be removed.
Is the message correct here? The `getLocalizedMessage` is a locale-sensitive message.
why do you need the publisher? Isn't this a no-op and should be removed?
Do we want to be even even in the log if we get an exception?
We don't support any of these version releases so this needs to be pinned.
This seems out of place. We should move this to the `wp-components` package instead.
@jameswnl is this the way to notify? I don't think we want to use Honeybadger.notify since it will be in the hot path if we're not going to notify for the current user.
I'm not sure that we need a test for the update, if the user has no email already, I think this will fail. If we don't need a test, maybe we can just remove that.
@john-bodley I had to rename this test because the test was failing. I'll update it
`db` is unused (from `deadcode`)
I'd prefer if the default is true and false, so that when the user opens the popup and then opens the viewer the user's preferences will still get used for the dialog.
`$dateTime` isn't being used?
`--export-fixes` is a bit misleading, since it's not exporting fixture files
@krousey This was a typo, right?
Should we keep this as @port and remove the `if port` below?
I assume we can remove `FileUtil` class completely in this PR as it's only used in `FileUtil.determineFileType`.
I'm not really opposed to this method, but this seems to be the only place `Bundler.cache` is called.
I wonder if we should just call `IsAllocated` here instead of `SupportsAllocation`? Or maybe just call it `SupportsAllocated` ?
Should `"\*"` be removed too?
I would test `realm.schema` rather than `realm.schemaVersion`
Can we set this to a default value?
This is an interesting way to fix the issue. The problem is that Content length is set by the backend if the rule is enabled, but it's not a valid value. The length can be set in a different way if the rule is enabled.
I think you can drop this line since this is testing the same test?
I think this should be `short` since it is a `float`
nit: I think it would be better to use the named parameter here to make it obvious that this is true by default or false by default.
Is this an intended usage of the region?
Shouldn't this be a function in `lib/node`?
This change is not necessary.
Should be `DateInterval`.
nit: this can just be `return slots.stream().anyMatch(...)` right?
It's a bug, but why did you change this?
this name is a bit confusing, maybe `IAdapterAdapterBindable`
I wonder if this should be a method on the builder itself. That way the builder can decide on how to add a disk list and how to create a pool. If it isn't needed, it could just be done in the builder itself.
I think we should add a note that this is an error case to the spec.
Please import `AuthenticationDetailsSource`
`hash-key` property is not supported on all browsers
Is there any chance we could have a situation where the dynamo is exited but it is still being synced?
This function name is no longer accurate. This function only sets the TLS certificate, and does not set the private keys. It's better to call this one "SetTlsCertificate"
@n3nash : do you think we could use the new `DateTimeProvider`? It would make the test more robust.
I think it's better to log it as error.
Is this the same as `AnalyzerBinaryChecker`?
This method does not work when it is not set, because it can be used for both `boolean.true` and `boolean.true`
Why not just replace the `*spi*/` with a `/`?
I don't think we need to expose this. We can always use the scope from context.
I guess it was supposed to be `#searchTerms-keyword-0,`
Can you remove this empty line?
Is this used anywhere?
The original indent of this is incorrect, it should be 4 spaces.
What are the advantages to adding these methods?
This looks unrelated to this change.
Nit: This should go below the `java.util.stream.Collectors` imports.
I am confused. Why are we using the non-depthwise version here?
The code is in privload_locate_and_load, but this function has already been loaded. Why would we load it twice?
this can be `const`
`API.prototype.importAllFromMnemonic = function( words, opts, cb) {`
This line is no longer needed.
@rhymes This is the new `proposal-submodel-container`.
Should we call this `closeQuietly` to be consistent?
We have a `ProxyUrl` constant in `pkg/apis/prober`, could we use this one instead?
I'm not sure that this is a good idea, as it will be dead code. If we don't call Stop in here, the `fx.Supply` will return the error and the app won't stop at all. This will cause issues with existing applications.
We can drop the border-radius and button-icon since we are using the `font-weight`
(style) trailing whitespace
I suggest to add a `LOG.warn` log statement here that the retry will fail, so that user doesn't need to fix the issue.
can we rename this to `storage` ? or `fakeSessionStore` ?
Why are we adding encoding_type to the list?
Why did these need to change?
I'm not a fan of the name, it makes it sound like this can be called for something, but I guess the name would be better as "ForceFlush".
I think the message should be something like: `log.Debug("re-executing ExecuteAndWaitProgress for %v, %v, status %d", target.Label, progress.Status, target.Status, result.Status)
This could be `readonly`.
Should we use a static import of the old `newSearcher` method?
missing space between commas.
Do you need to keep these `client_` member variables?
Is there any way we can avoid this blocking operation by having the `limiter` channel return a flag and then release it when it goes out of scope?
I think you need to do `err != nil` as well.
This is a BC break, so this function should also take the optional argument.
Why change the level?
These two lines are redundant.
@alexandrebodin this is the change that is being handled here - we don't want to be serving a token here, we should just be serving a token in the context of a request.
@jeremykirschner this is not the correct place for these redirect_to calls. We want to keep the original URL here because we don't have any way to know it's an archive or complete form.
You shouldn't need the `@node` variable. It is only used in one place.
The `mode` arg is no longer a valid arg.
I don't think we should change these names
Should we have a more descriptive name, like `STOP_CASTING`? `STOP_CASTING_IN_TAB`?
this is fine but i think we should also use fmt.Errorf for this one
I would prefer to keep this in one line and use `int` instead.
I'm not sure why we need this.
Why are you using a dictionary? Can't this be just `{'value': ...}`?
Shouldn't this be done inside the H2O_PROBE?
I think this change should not be part of this pr?
I guess this is a bug that we should have reported?
This variable seems to only be used by test code, could we move it to `tests/util/test_hack_fix.py`?
I'm assuming the module name here should also be changed.
Why do we need this change?
Should we have a `where_clause` clause in the migration to make sure we are not altering the product?
This should use the new version `get_r_and_s_from_sig()` instead of duplicating the logic.
nit: `condition is a payment condition and has the right values`
This is going to blow up if the recordings are in the wrong order.
`repr` is not needed here because `%` will escape quotes.
nit: this name is pretty confusing to me. It's not split size but read options.
Is there any reason for this exception handling instead of keeping the original one to be a no-op in 2.x?
Please add type annotations for the arguments :+1:
Yes. I would think we need to add a session property here.
Is this going to work correctly as an absolute path?
Nit: The word "truncation" should be capitalized.
I don't like this logic of returning the value when the account is not resolved. Maybe we could instead add a `getAccounts` method to `AccountStore` where we can check the account for resolved.
I think that this can be a constant?
@stgraber I am not sure this is correct. `biggestSize` is used to track the total total size of a range. But `biggest == chunk`, which is not the same as the total size of `chunk` (in this function). So it looks like this should be `size >= biggestSize`
This looks good. Can we also have a test case to cover it?
I think this can all stay in one group now.
I think this was also a bug.
`resp.StatusCode = http.StatusAccepted`
Nit: "on any server" (or "on every server") is better, as that's the only thing that's needed
This test was removed in master. It was just testing that `GET index` did not return `unauthorized` for `api key invalid`.
We need to make sure that jobInfo will have the correct value before throwing an exception, otherwise if the user cancels a job it will be lost.

Please do not use the ternary operator.
I think we should make it an int and then pass it as a string as well.
Could we call this `clone()` instead?
Should this be in the `managedTask` struct or in the `task` struct?
What's the reason we don't support this?
This method does not need to be deprecated - the interface is deprecated, and it's not really used
nit, the `col` package should also be renamed.
I think this would be better named `:transports` or `:transports_for`.
I think that the previous logic was fine. It would be better to keep the existing logic.

nitpick: I'd call this `slot` instead of `pair`.
Can you add some logging here and in line 232?
We can remove `MinDockerAPIWindows` as this method is only used on Windows
Is it not clear how `ServiceBus Connection String` will be passed? The original link seems to point to the same.
The link here should be `Azure/Autorest/tree/master/docs/*`
this is not necessary
This is a wrong one, this should be `array`
why this change?
You can remove this namespace if it doesn't exist anymore
Why is this needed? I don't see it used anywhere.
`None` here is the default (no value) argument for `getmessage`, so I added a `None` to `getmessage` here.
@dakrone I added a new test for this. The environment variable used by drupal is "DRUD_NONINTERACTIVE"
Do we really need these constants? It is only used in tests anyway and I would like to remove them as we do not use them anymore.
@jwilder-shobhit is this right? I thought you were saying `s != HttpStatus.OK` but it's not a success status.
nit: I guess we could use `termPrefix.equals` here
Is there a reason why we don't use `s.catalog.GetByNameWithFilter()`?
I think we have a `throw invalid_argument` in v1, why are we adding an argument for it?
Remove the underscore, and also use a constant for the service factory class.
This is a public class, it should not be public.
I'm not sure if the `.String()` is really needed here - the `msg` parameter can be `nil` or `types.CidSet{}`.
Why did you change this?
Is the `.yml` file still required?
`fmt` can be `const` I think (it's a static c-string)
Can we just use `target`? I think we can get rid of `channel` argument.
If we want that, we can remove this line.
We have the same problem here. There is no check for a "standard", and I think this should be handled by the caller instead, or else we will end up with a `""` in the string.
Is there a reason why this is being called twice?
Why is this method being removed ?
nit: I think the last sentence should probably be "The resolution time for a promise is factored into whether the condition has been satisfied."
This should be `purchases/:id`
Which of these changes are?
Is it necessary to check for `image_view_` again?
I'm curious why do we even have this?
You can use MvxUtils.TryResolve
This is the only one that should be changed, but this is also a problem since the method is public and the memoization doesn't happen.

I'd rather have error return string than panic, as we should be sure that it can be recovered from in case of a panic. Also, I think the convention is that we use `fmt.Error` for errors.
I'm not sure if we want to remove this function. Maybe we need to do an upgrade check on the `cstorRunTask` to get the yamls in `cstorVolumeYamlsFor070`?
Why do we need `--tty` here?
I'm thinking maybe we just want the default value here?
Shouldn't this have been a `catch`?
I wonder if we can get some CSS here and use it everywhere. I think we do this in a few places.
I don't think it's necessary to use System.getProperty here.
This is just an idea, but I'm a bit worried about the performance of this code because it'll get called on each run. If I understand correctly, the idea with the new code was to ensure that the system role exists, but that might have been a bit overkill to begin with. This means that we'll only be checking if the table exists and then checking the table name, which is not the ideal way. I'd love to know what the consequences of the new code are in terms of performance and speed.
Can we have a test to make sure this works when we have a server without the scheme?
The `show` variable should be used to find the current episode, so `show.latest_videos.first.episode`
nit: this could be simplified to ` if serviceName == common.FrontendServiceName || serviceName == common.MatchingServiceName { ... }`
Is this a new lock requirement? The other PRs already lock this.
This is not needed, but we can fix it in this patch.
Can the description of this parameter be updated with the units?
Why do you need to extend ImportGenerator?

Is this going to be a problem for our other components as well?
We don't need this here, right? We should use `getReference(AdministratorDataFixture::ADMINISTRATOR_CZK)` instead.
This seems like a lot of work, is there a more robust way to do this?
Shouldn't we also set it to the flag when not enabled?
I don't know why it was this way, but shouldn't we reset to `max_open` here too?
this looks like a typo, should be `exit_with`?
This method name could be more appropriate.
This is not needed, as we are in the parquet config
this should have been removed
why did you remove the HIP_UNSUPPORTED here? It is still useful to have.
I think it is better to return a List<ExecutableFlow> here instead of null. I'm not sure this is the proper return type to return.
This is already defined in `Constants.java`.
Is there ever a case where the `nodeGroup.Children.First()` will be empty? If not, it should throw an exception
This should be done before the clone, otherwise it will be overwritten if the frame is changed by another instance.
Wouldn't this be `False` for `ids` and `[]` for `['UNKNOWN']` for both `ShareableResource` and `ShareableGroupResource`?
`c` is not used in this function. Can you remove that argument?
I think we should leave this one here since we don't want to use it.
The `rawErrorData.get(STACK_TRACE)` is an `Optional` so you should check for `null` first.
This seems unnecessary since we're just checking if the collection is a da.Array
you should remove this `use`
This seems like a hack. Why is this needed?
Is the password always available? If not, you could remove the param, since the user could be missing it.
nit: I'd prefer to see `public IList<LoggingRule> LoggingRules { get; private set; }`
This should be done in `KDF` instead, because it's not part of `KDF` API.
@tinaafitz I'd like to make sure I didn't miss anything. This is going to raise the `Puppet::Error::ConfigurationError` for anyone who has already specified 'transports' in their config file, but it's going to raise an `ValidationError` because the 'transports' option isn't present. The reason we need this check is that if you use `puppet create ... create ... create` to create a configuration file, it'll raise a `Puppet.Error::ConfigurationError` which we don't need here. I think we should keep this validation as it was
Should we make this the default policy and have the user specify it? Or are the default policies not allowed?
I'm not sure how I feel about this type of import.
Why is it necessary to override? It doesn't look related.
why not range?
nit: `DivideFloat64` should be called `Fractional` since it doesn't return a division.
This validation is not needed as it will be called in the model as well.
I'm going to remove the `TODO`
I guess that we can just use `fmt.Sprintf` here
Why do we need this file? It's not necessary. I would move it to `summary` as well.
this change is wrong, because you return `false`
I guess sqlite was not needed to load the sqlite plugin.
I think this should be `proc_num_simd_saved()` instead of `NUM_SIMD_SLOTS`.
Why this change ?
The default configuration is never used
this is a bit confusing, since dropNotFound already logs this. Also you are not logging the target object here, just the error itself. I would drop the target object here and just the error.
why do we need this lock?
can we just make this a local variable instead of assigning to `newUserInfo` here? It's used in multiple places.
Why are these changes needed here?
This is not necessary.
This file doesn't seem to be used in this PR.
I am wondering if you could get the reference from a reference here.
I think `getContainerDescription` would be clearer.
I am not sure about this - we are using Neo2 in other places (I know it's not your change, and it is probably something to do with the controller, but I am not sure if that is the best place to put this config).
We need to use Buffer.from here.
I think this can be a `map/set` to make it simpler, but I think it should be safe to just store an array and not have a slice.
I'm not quite following. What's the scenario where we don't have an inner type?
This is an internal method, so I don't think we should put this inside of a class (or a service)
Can be removed.
This will need to be updated to include the new `min` method.
@jorgefilipecosta do you think it's worth having a `configureAdapter()` method or similar?
We don't need the context here, just use "c"
I'm a bit confused. The `waitForElement()` method is called in a background thread, and the `browser` thread can be blocked, and `quit()` is called here?
I don't know if it matters for this PR, but I'm wondering why we use `-` instead of `-`. This is not really an integer. Maybe `-`, `+`, `-`, or `-`.
Why is this necessary?
We should probably make this `required`, since `required` is a bit more specific to the list property and `defaultValue` is a bit less specific to the `List`.
The order should be the same as above.
`self.source_conn = ServerConnection(source_address)`
This looks like it should be an else if.
Should the name be `Jetsonian` here?
I'm wondering whether we should be adding new methods to PythonDocGenerator that just call `generateCode` instead of creating a new method. It seems like it would make the implementation simpler.
Why is it not needed anymore?
You can just say `config_file doesn't exist!`, because if it's not a directory, it doesn't make sense to create a config file.
This will need to be changed to a `sync.Once`.
I wonder about the naming of these factory methods. How about simply `getRewardCalculatorFactory`?
Is there a particular reason why the Client is not a runtimevarManager client? The name suggests that it is a client, but the type is a runtime variable.
I'd call it `removeReachableFiles()`
We need to be very careful here with the changes to codegen, because it is not possible to use a precompiled SIL for the `expr` module because we cannot have the SIL for the `repl` module. For example, I believe the `op` function is not called in the `op_function` function. I believe that in this case the `op_function` should be called on the SIL.
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
I'd prefer to just do a single score call and then do a smooth score. This will make it a one-shot thing to add the smoothing score in the `score()` method.
I believe this is a leftover for a previous PR.
This change is not needed.
I'm wondering if we want to keep a list of the snippets here.
Should this be `5000`?
This is a hack - it would be much better if there had been an explicit `getSubDirsFromPath` function that was used in the `BaseAddonHandler`
Can you add a check to verify the returned volumes are valid?
Why are we doing this? The default value is already 0 and the logic for this is `rowGroupsStartRowPos == null ? 0 : rowGroupsStartRowPos[nextRowGroup]`, no?
I know the code is a bit more complicated, but would you mind adding an option for this to `zfs set livenesstimestap='$(date)' cstor-$OPENEBS_IO_CSTOR_ID`
We should catch `ClassCastException` here instead
I would prefer if we could do `countCols - sourceCols()` and `countSourceCols()`
This check doesn't seem right, the call to `flush()` is done in `shutdown(int fd, int mode)` and `prepare_destroy_conn` isn't called here. Shouldn't it be `if (u_conn->fd == -1 && mode == EINTR)`.
Is there a reason we need to create this table?
This should be `libravatar.go`
We can just log and return.
nit: extra space before `(`
This was the fix for #9027
This can be `b.Name != nil && !b.Tags(b.Tags).HasOwned(clusterName)`
`api_sig` is not a valid value here. You'll want to add `api_sig` to the regex.
This feels odd to me, and I think I like this more than it was before
I don't think this needs to be changed, since the user will only be able to delete the profile once. But if it's not a safe change, we can leave it as it was.
Why not keep original method to detect sensitivity with lock?
We need to handle this in the server instead of in the server.go file
These need to be final?
What was the reason for setting context in invocation instead of the invocation itself?
Why is this a StringBuilder, but `Trace.TraceError()` uses StringBuilder.ToString()?
Can we remove this check?
Shouldn't `defaultReturn` always default to false here?
is it really necessary to have these in separate strings?
If you're not setting timer here, you might as well remove the method and just make the code a bit simpler.
I'd rather we had this in the first place.
I am not sure if the license header needs to be removed or not.
This needs to be `uname -a`
What is the reason for this addition? It looks to me that if no file is given then it's a directory check, but if one file is not specified we raise a ValueError.
Is this used in this class?
I think that the `omitempty` should be added.
Nit: space after ,
@heyitsanthony I'm not convinced we want to do this. We can just set the refresh token to the request body, and if it changes we'll be redirected back to the same browser, which would prevent the client from being able to login again. Also in the case of a login request, it should still redirect the request to a different browser, right?
Why is this change necessary?
If we are going to pass the update/image flags, why not just always use them?
I think there should be a `it` for the `NAVIGATOR` part here.
`getattr(text, 'decode')` should be enough I assume
I wonder if we should add a `GetValueAtIndex(1)` or `GetValueAtIndex(0)` function to be able to use this to get the pointer to the pointer from the argument_values.
I would prefer to do this with the `networkMode.unsafe` fields
Please change this to `ClassLiteral Identifier`.
I think this needs to be the backend backend, not the client.
Why not have a method `finish()` to call the transformer directly? Then we don't need the extra checks on the transformer.
why are these changed?
Should this be a constant?
Shouldn't we raise an exception in order to raise a more appropriate error?
Should probably add the ability to enable this on the fly, or just drop it altogether in the docs.
why do you drop this ?
This seems like it could cause crashes.
I'm wondering if we should just use a constant for the key. It'll be used in other places where we do `assertThat(scrape())`.
Do we want to include the reply too, or just a prefix?
This check is probably wrong, you're skipping the prepare if you are on a s2.
This is an interesting way to create a status struct. Is it really necessary to use a separate version variable?

We should rename that to `FailedImportPeakBoundaries_` (no `__`).
We should add a `Server` type to the `Server` interface and return that instead of `error`.
why do we use physical here, can't we just use primitive primitive type?
This should be a string concatenation of two strings, and not two `+`.
Should we be more aggressive here? Like the message that we were waiting to receive the first 10 kB, but we didn't expect the next 10kB, right?
This looks like a good opportunity to rename `controller.address` -> `controller.Addr`.
We should probably use this error message in `validate.go`.
this is an API break. I'm not sure what's the best way to go, and I'm not sure it's a good idea.
nit: Maybe use this value instead of `1_000_000`?
What is the reason for this change?
@marqh Is there a reason we are using `qtutils` here (instead of `qthelpers.utils.qt_utils`) and `qtutils.version_check` above?
It looks like this is not being used.
I think the singular form is better here
I wonder if this check should be moved into `_removeUpload`, since we can now tell whether it was allowed or not.
What about `encoding.downcase.to_s`. It looks like the string should always come from UTF-8 in the DB, but it can not be changed at all if it changes.
I don't think we need indexdb for the main DB
I think the `max` here should probably still be `%d` to prevent a user mistakenly setting it.

I would remove ``None`` as it is not used as a default in params
This is not correct - Sports inherits from Base. This should be the default implementation. Also, this is probably why the trains fail.
this should probably remain as `platformType` now that we're using the ddev package now
Why is this necessary?
This should be in org.apache.commons.lang3.StringUtils
Wouldn't it be better to use the enum of the correct class instead of the type itself?
I wonder if we should use a constant in this package.
What is the reason to do a encode here?
Trailing whitespace detected.
Why do we need this one? The index can only be used to determine if the input is NULL, or a slice of NULL bytes.
I'm pretty sure this is a bug in the original implementation, but it should be ok to be in place here.
Why was this removed?
Is there a reason for moving this up here?
Is there a reason to remove the `reqBuf`?
This is a bit of a nit, but I wouldn't put the text in the translation string since it will be translated on the next test case.
You should add the GCS owner to the message.
Please remove this line.
I think we should change the string to `Could not save WebCal-calendar`
Why is the command no longer used?
nit: I don't think this is used?
Why the extra bytes? Also `EntrySize` is not necessary
Why is this removed?
I think we should keep `selectAll` in here
This is going to print the encryption level twice. It should probably be a `utils.Debugf` instead and then we can avoid the `utils.DEBUG()` call.
I would suggest to have a function like `IsMol` with sanitize = False, instead of defaulting to true. That way we won't need to change this API every single place.
It might be cleaner to have `has_many :delegates, through: :user` here?
I think the test project uses the dependency version, not just the version used, right?
I think `project_name` should be a parameter, not an environment variable, and should have a value to encode it as an URL parameter to prevent a potential problem.
This needs a `res/` prefix
I think we can get the process id from the parent instance and use it instead of hardcoding the id.
I would rather use the full name of the module to identify the package. I'd also suggest to check if the name contains '.'.
Why the override?
Why did we introduce this? It's not clear to me why we need this, I'm just curious.
I'm assuming that's because we're adding support for `name` as well?
Is there a reason this changed?
This can be removed
I think I'd prefer the name to be more descriptive, like "getCanvasURL" (or something along those lines) instead of "getCanvasUrl".
ineffectual assignment to `proposer` (from `ineffassign`)
Why add a space here? Would it work?
Can we move this code to `pkg/apis/Thanos/pkg/apis/service/v1alpha1_grpc.go` and have it only return `svc` for grpc? I don't like having a function that returns the service object.
Why the `future` argument is `False` here?
Should this just be a list and then use `click.argument()` to pass it in as a list?
This is not correct. The loop has already been called.
I think this should be `executeDeleteWith`. Also, should this still be `execute`?
It would be better to check for NULL before dereferencing the underlying backend, then just free it here.
We can pass in an empty manifest here, and let the `Manifest` function handle all of the special casing.
Please rename it to `fromBuilder`.
I suggest moving the constant to `SourceOperatorOptions` and adding a new public constant `ConfigOption<Integer>`.
Why not keep `max_ts`?
Nit: this is a bit weird to have a string named `grpcStubTypeName` and an enum for the type. I would just make that an enum and use that for all types, and make `grpcStubTypeName` a `String`, and then make `mockGrpcStubTypeName` a `String` and `grpcStubFunctionName` a `Callable`.
I would rename it to `MaxTraceIdFromId` because this is an identifier and I think this is a trace id that has been used in other places
Can you elaborate on why this is here?
This is a breaking change and can't happen.
We don't need this anymore, right?
@jyotoo this is the actual change. This is just a refactor for the `patient-model-helper`
I think the import should be `_NODE`
`a predicate that determines whether the issuer should be trusted or not`
The `begin()` is useless here. `offsets[index]` is the first offset that is in `data`.

I'm wondering if we can just pass the path here.
this looks like it is just a change of behaviour. If the error isn't returned from this loop, num won't be incremented.
Is the name correct? Cstor is the storage pool?
Can you change this to `unprotectedTransactionsRequired = false`?
Why is this a `using` instead of an `#ifdef`?
This should probably not be changed. It is a check.
The default value should be empty, otherwise users might end up with a blank file and no password file.
I'm a bit concerned about this change. If I understand correctly, the `security_group_ids` is a collection of security group IDs in the DB, but not a string?
@jonathanjgeiger Is there any concern about removing `File.separator` from `relativePath`?
@shopsys-framework/developers this exception is now not thrown when an app has not installed yet
This should be `providerAuthProviderName` I think?
I don't think we want to do it this way. I don't think it's necessary. We should get the random number from the user.
I don't understand why we need this check
This is not a very nice solution, since the matcher only checks for all conditions. We could consider making that a bit more generic and using `match?` on all of them to return true if they match. That way we could also just check for `!matches?('$all')`, and not bother to add this new function.
This doesn't seem to create and return the correct HostManager?
I don't see it in the spec change.
Why do we need this change?
I'm not sure if this is needed - this is a public interface so it's not a breaking change. This will also be a breaking change for people using the Logger. I suggest we revert this change and let the user of this interface implement `ICoreLogger`.
I'd be inclined to keep this json tag - we have json in the metadata and there is no reason to have that.
Why do we need this?
This is the actual fix. The first line of the change changes the behavior. I believe you meant to keep the `-`s
Is this needed to prevent the `unsafe.Pointer` from being returned when marshalled?
Can this be `final`?
We should remove the sessionId here as well (in the same file)
I'm assuming this is a typo?
I think we should not be using `storageFaultSlasher` here
why do we need it in the genesis block?
I think this should be the opposite. Otherwise, if someone set the queue to keep_sorted and then switch from locked (in which case, it's the opposite.
This is an unrelated change.
Why are you doing this? It doesn't seem right.
Why is this needed? The struct is only used once, why not just use a RWMutex?
This doesn't look right to me. If sles is not installed, sntp will return an error. So the `else` is redundant.
I don't think this line is needed, exch == None is a valid case, since there is no amount provided, so there shouldn't be any exchanges.
If you have already merged the value in the config, the warning will be issued again?
why not use `[]string{"server", "agent", "etcd-snapshot", "save", "delete", "prune"}` ?
This seems to change the meaning. Isn't it `getActiveFlowsHelper`?
Nit: This is a very common pattern in other classes, I don't think that's what's going on :(
I think this is a bit redundant
This docstring is not accurate, `get_screenshot` should be updated to explain what the function does.
I think it would be nicer to have this as a separate util file, so we can call it from both `network-error.js` and `network-exception.js`
I am not sure if we should use uint64 for the flag here. If so, I would use string, and if we do, we'd use a pointer.
I think this could still use a `static` initializer, but I guess that's OK since it will be refactored soon :).
Can you add the `@FunctionalInterface` annotation to this class and the `removeFiles` method?
This link should be removed.
nit; I'd like to keep a separate import section for these 2 deps
`slots` could be empty
`MakeBlockService` is the same as `MakeNode`
Should be: `src[i] == '%%'`
why change it to `2&1`?
I'd prefer `../src/index`, since `index` isn't necessarily a directory.
Can this be removed?
I'm not sure this is necessary. The `OrderStatus` struct is just for the IP addresses, so we can remove the `omitempty`.
I think the convention is that all methods start with `Report` - I think I'd call these `ReportDeployment`, `ReportApplicationLatestDeployment` to follow the convention.
this is not necessary because `query` is always set to `""`. If it has the last query part then we wouldn't want to do anything
I guess you could use `System.nanoTime()`.
Is there a reason why we can't just use `flow.get_proto_negotiated()`?
This should be `LegacyHolds`, no?
Do we want a warning for the delete case here as well, since the reason is just not null.
I'm not familiar with the tag name, but I think this should be wf-workflow-task-timeout-seconds
`sortAttributes()` was not used anywhere else.
Should be 4Gi?
nit: "manually" reads weird for me, perhaps just "by explicitly setting itemsize to a scalar"?
Is this a bug that we are not testing anything in this test?
This feels like a bit of an odd way of handling `createRef` from another component. What do you think of just `createRef = Object` here?
I think we can use the new field validation function here? We don't need a new validation function for `RenewAfter` and `RenewBefore`.
Should we keep this and add a TODO to remove targetport as part of this PR?
Why do we need to set these to false? What happens when you don't have a service to store the samples/transcriptions?
These changes are for testing the beta and beta GA version right?
I think this is also wrong, since the interface is named ITagContext but the interface is named IRemoteContext
I would rather change it to be "ar".
Why not just `if (FormatIsColor(format) || isExternalFormatConversion)`?
Is this really needed?
This is not used, so I think we can remove it.
Can we have a constant for `32`?
Isn't that the most reasonable number of free bytes?
Can we just check `globalconfig.DdevGlobalConfig.InstrumentationOptIn == false`?
Do we need two indexes here?
Shouldn't this be a separate test case?
Can't we just do this with our default header in the SDK?
Why are you changing the default value here? This should not be necessary since `get_timestamp_for_last_user_stats_update` will return something else. It should be `datetime.min.replace(tzinfo=timezone.utc)`, and the same for `get_timestamp_for_last_user_stats_update`.
Do you know why gRPC has to be stopped before being stopped? I think it was added to ensure that we don't need to keep it open.
Whoops, this didn't need to change, I'll revert it back.
Why do you want to do `limit(1)` here but not in the other PR?
Why do you need to allocate? Why not do a `reserve` in the loop instead?
I think this should be in the `Client.removeClient` method, since it can be called from the `deleteClient` func.
I think you should use `src_` here instead of `kRandomPeer`.
Please, remove the extra line
I'm guessing this doesn't need to be in an extension file? Or was this not working for some other reason?
Should we still keep this check?
This is going to be too slow for large number of cells. If we are going to have an option for a large number of segments, we should consider making `maxSegmentsPerCell` an argument, or even `maxSegments` as a parameter.
Is the $user variable here used? I think it may not be, but I guess we don't need it here because we are echoing the value of $user.
you are checking the target here, but if the target is different then you can't do anything.
I'd rather see this message changed to `MESSAGE_TRADE_AT_END` as it is more accurate to use it for the case where you want to trade with you, or if you want to trade with you, use the event ID instead of the message ID.
I would suggest to rename this to `CreateDetectionsGraphController`
`getSetupIncompleteComponent` is a public API, this is a breaking change
I don't think you should have to touch this file...
This test should be updated as well to include the cell that is not on top-left corner
This is a really cool name :+1: We should try avoid "migration" in the codebase, but I think we should keep it simple as is.
Is this used?
I don't think we should use X-Form-urlencoded here. This is a temporary workaround, but I would like to be able to get rid of the code in the future. We're already using it in the client and it'll be a lot more secure. The problem is that in a future, we will need to add a new header for this, and we will be able to get away with it in a new one.
This should be nullable as well
This method is now not called anywhere, so removed it.
Should be using `BuilderForObject`.
You can import `atexit` at the top of the module to avoid this import and `atexit.register` below.
Should we catch `InterruptedException` here?
I don't think this is the correct error message. I would use `minimum is < 30 minutes`, which is not what the error message is.
Is there an equivalent in Python?
What do you think of adding an `export default Widgets` here?
Can we just check kv_ != nullptr here?
Isn't `.replace( /\s/g, '' )` enough to just replace the whitespace?
This file is missing, so this will fail
If you don't want to make the message text translatable it should use `logger.warn` and `logger.error`. This is the only way to get the message text localized.
this can now be replaced with just `list(self._readflows(paths))`
Is there a reason you're not using the testify library here?
This could also be a property, so that users don't need to override it manually.
This seems odd; shouldn't this return after `wrapper.originalHandler.ServeHTTP`
should this be a warning or error?
This is wrong, you are not actually using the channel here
Should this be changed to debug? Or was this just a debug line?
This name change was needed because the annotations were created with the annotations in `CreateAnnotationsFromStacks` instead of `CreateAnnotatedCodeLocationsFromCodeFlows`, which wouldn't have worked. I'm not sure if this is a bug in the current implementation, but it may have not worked in the end.
this could be a nice improvement - if the hash is too short, the function will return a string that will not be truncated.
should we have `import` or `importFrom` instead of the full path?
Why are we using an exit code of 0 here ?
We could just do `superclass.method(:next_runnable_index_for)` in the initializer
Why are these booleans and not constants?
This is wrong and should go into the next commit
We can remove this loop since it's handled above.
Is it intended to keep these printlns?
You should use `child` instead of `&child`.
I wonder if we shouldn't be checking the `nvda.pyw` here (or just the `.dll`)?
why remove these? I think we should print them, and not remove them.
Should we have some tests that verify we can use the new id scheme?
nit: could you make these 2 functions on a single line?
I don't think this needs to be in a test. It's not testing anything important that the test will pass if the version of the environment doesn't match what the user provides. I'd suggest to just remove the test.
We don't have any tests in here for the yarpc client.
I think `string` is already a bytestring.
@klauspost can we keep this logging?
Is this used anywhere?
can you add some log?
W1618 import missing `from __future__ import absolute_import`
I guess I can revert this.
This code is duplicated. You can reuse it and add `|| explicitCompensationVoltage.HasValue` to the `Equals` call
This could be made simpler to just do: key_parts = [key] + base.split("/") + ext.split("/")
Can we use a switch statement here?
this one is probably fine but should we be using `assertThat(testEnv.getClass()).isInstanceOf(SeleniumTestEnvironment.class);` as well?
We use this package in several places now. I am wondering if we can move it to a new package?
this change seems unrelated.
This is a bit unfortunate. What if the user is specifying fields without a path, and the user is adding a field with some other value? We could probably do a quick `isPathInFields` check in the first place instead of adding a new field.
We have `Statement` type in parser.go.
nit. `prometheus_operator_enforced_sample_limit` sounds too vague to me. Maybe `prometheus_scrape_target_enforced_sample_limit` would be better?
Is this only for testing?
I'm a bit confused by this flag, what's it for?
Can we do it in a loop instead. If we do, that way we don't need this sleep.
should we add a `context.Init()` method to the `RunResult` instead of having this field?
I am wondering if this could be more generic? Like "azkaban-project-dir-size-in-bytes" instead of "_azkaban_project_dir_size_in_bytes_". It will make the code less readable.
This will cause issues on Python 2.x because it's not possible to pass a list of dicts as an input to `json.dumps`.
This seems like a lot of stuff to be in the init method, can you please remove it from the method parameters and just call init here?
I'm not sure we need to use this executor, I think we should keep the old one in order to be able to shut down the collector. We have the same executor for core container work.
I believe that the first sentence is not necessary.
This should be called `LINQ` and not `LINQ`.
I believe we can remove this `version` variable, since `options` has the same values as `options[:installer]`.
This should be `layer->current.keyboard_interactive`.
I guess the `loadExtension` method will only be executed if `query.selectAll` is called.
can't this be removed?
I wonder if we should check whether the size is the same as `sizeof(OstreeDiffDirsOptions)` or if there's another way to compare the sizes. This is just a nitpick, but it would be nice to be consistent when comparing the values. I don't have any strong opinion here.
I think you should be able to add the `solr_search_parms_logic` here, right?
It doesn't look like this code is ever run. Is there a way we can test this in the unit test suite rather than in the DSL itself?
I don't think we need this anymore. It should only be called if the sample is done.
This was a mistake as `$setting` was being set to `config_sync_directory` in `settings_bootstrap.php` and not in `config_directories`.
Why is this change required?
Should be `Licensed under`
This is a breaking change, because previously the `select` function was not always returning a list.
This test needs rewriting, so we can check `<code>456.00</code> was changed from 456.00 to 123.00</code>`
Why print? This is not used.
I think this is no longer needed, since you're only using it in one place, right?
We should just fix this file to use the .NET Framework version and avoid using these ifdefs.
I think it would be better (and more efficient) to use LongUtils.parseInt
Style/Lambda: Replace `order` with `reorder`.
w.tabBar().width = width
This is not correct. The bucket needs to be the actual path from the file store. We should do `os.getenv('SPARK_LOCAL_UPLOADS_BUCKET')`.
I'm not sure if it's the best idea to do this, but if we're trying to do this, we need to have an option to use `RSVP.all`. Otherwise the code will run before the `Promise.all` resolves
This is a bug in the existing code, we are not checking if they have the same client cert set but different CA set.
Is it possible to include a `#define` for the header file instead of duplicating all the header code?
Style/SymbolArray: Use %i or %I for an array of symbols.
This file should be located in the `application` folder instead, right?
Is it worth checking the return value of fpgaDmaOpen and then setting the error if it is NULL instead of returning FPGA_EXCEPTION?
Should these be added to the `setup:` call above?
I believe this should be `child_process`
This looks like a change in behaviour, if you have a body closed and an error is returned, the defer will not be called. Is that intentional?
This can be simplified to just `return env.executeSql(query).get(0)`.
Is this a typo? PeakBoundaries?
Can't we use `context.getString(res, R.string.download_report_content, successDownloads, failedDownloads)`
I'd call this `hasCapabilities` to match the method name.
I think we could just put this time in `app/models/ncr/approvals_manager.rb`, and remove `ApprovalManager.initialize`?
Bus Pin
I think it may have been worthwhile to implement `(*unsafe.Pointer)` instead so we could use `unsafe.Pointer` in `loadAndStore`. It would be easier to maintain, since it has a similar implementation and the pointer is not actually used.
I wonder if we should just use the vote_generator_delay.count() here instead of the count (100)
I think that's a bit dangerous to call _onResolve in the destructuring case because the destructuring will throw in the default case. Can we instead just call `component._unmount();`?
I think it's better to keep `TiTableInfo` object simple.
I'm not sure if this is the correct thing to do, but I guess this would also work for the `data_columns` case (i.e. `not_updated` is a list of lists and the `not in updated_data`)
We don't need a timestamp here. This is an integer column and it should be a datetime.
Why `if defined?` here?
This should be moved to `if (isset()` above, as that should be the place we check if a bundle is defined.
I think I prefer the `*OpenTelemetrySdkBenchmarksActivity*` form
We can use a more specific enum for these categories in future, since we need to support more than one validation category
Why is this change needed?
This will cause the text for any method group that has only one parameter
This has a very low impact in the case of the new Qos, so the announcement period is going to be very low. This seems fine. But we should not be doing it until we know we are ready to announce.
I'd probably just use the `serviceName`. I don't know if we're going to have other names in future, though. I think it might be better to use `ecs.Name` and `ecs.Region.Name` to be consistent.
Is this change part of the bugfix or is this just a cleanup?
This can be simplified if you do `pathParam = pathParam.split(';')[0]` and remove the if statement
I think the previous function was better. It's clearer to me.
why did you remove the `@inheritDoc` ?
I think this is a bit hacky, since `SparkSchemaUtil` is not part of `SchemaUtil`
This test case should be `decode fail`.
Why are you not using `delattr`?
I'm pretty sure that we can't get away with having this inlined. We should add it back in, and then the caller can get rid of the `offset` variable (also in the other place where we do offset+len).
Can this not be an enum instead?
I'm wondering why we have to pass the password as well as the username in the `setAuthentication` method? If we have it we could just use whatever the `setAuthentication` method does with the `password` param, but I'm not sure.
This can be removed.
Can you explain the difference between these two `if`s?
`validatedObject` is a frozen object here, I think this change is not needed.
Do we have a test for this?
`__kernel_timespec` should be `timespec`.
This constructor can be removed as it is redundant.
why are we removing this?
The `sql` can be moved outside the `try`
Should be `../components/notifications/error-notification`, not `legacy-notifications`
nit: can we use the same format string here? "Failed to download block %d due to %v %#v"
This exception handling was removed in the past because it was redundant with the exception handling of BytesValues.asBase64String in the `getPrivacyGroupId` method. It is no longer needed and the `getPrivacyGroup` method can be removed entirely and the `if` block can be removed.
Why not keep these?
This is a little unusual - how about using `EncryptionProtocol.*`? I'm not sure that's what we want, but if it's more consistent with other types we could add another enum value that includes "none", "pgp", "s", and "mime".
nit: Remove this empty line
Why is this necessary? I would have thought that we'd want the number to be less than the number of workers? I am asking because I am a little confused.
Please add one more empty line
Can we keep the old interface for now?
Why not just make the map be an immutable map?
This is a little awkward, we can't have this in the `duckv1`. Can we get rid of this entirely?
Why did you make this change?
`choose` is not a good name for this method, as it returns peer which is not started, so I think `ChooseNext` might make sense here?
This change isn't required. If I understand correctly, the message is sent to the client and is not the peerInfo (which is why we are using RLPException), so the log level is not TRACE.
This is now not needed.
`xrange()` is unnecessary, I think this will work fine with the previous version.
I think `FallbackSources` should be kept. It's still needed, because it's an empty list.
I think this is a bad formatting change. The method should not have indentation in it's argument list
Is this intentionally removed?
Why not just do this in `loadSettings()` and not in `setAlwaysEnabledPluginsEnabled()` and the other `loadSettings()` methods as well.
This should be a Long instead of a string.
@jeremykirschner I think that `.select(:any?)` is a bit more efficient than `.map(&:any?)` which might be more efficient (not sure if it's a real performance issue). Can you please check this?
This is probably a good opportunity to clean up the duplication between the two places, but I think this is fine as well.
Why was this added?
Do we have a scenario which triggers these exceptions in order to prevent them being caught?
This change was made because of the fact that I didn't add a constructor because I was missing a `@Inject` annotation and it seems that this change is needed only for some tests.
Shouldn't we call this `ApplicationProcessorScheduler` to make it consistent with the rest of the code?
Is there a case where we wouldn't want to shrink the locator lists? I thought the only way of getting locator lists is to do a full shrink of them. In fact, this is the only thing that we could do without a new API.
Why not keep the old link?
This is not the best approach to do. I wonder if we should consider something more generic, like FlushAsyncOnExit or FlushAsyncAsync? Then we can do the force flush and it will have the ability to be called in the same fashion as the process killed.
Why remove this?
This was an issue in the past as we are now setting the "NativeOffset" property twice.
Is the removal of `@access protected` intentional ?
Why is this needed? If we have a `routineTerminate` channel we should still proceed.
We are checking the MDC in the serializer but the value in the message is in the buffer. Is there any specific reason?
Can you also delete `keybasefs_test.go`?
This is not a callback environment. You need something more specific like `LightGBMBackendEnv`.
this should return a boolean
Is this line necessary or is it enough to disable this rule?
I think this should be `wallet2privkey2electrum`
I don't see any tests for this, is this a mistake?
Should this go in Microsoft.AspNetCore.Connections.Http rather than Microsoft.AspNetCore.Connections.Http?
Can't we just do `attr_writer` or `attr_reader`?
I wonder how we could get away without locking here. Is it possible to get away without locking?
We should import `@wordpress/element` and use `wp.element.createElement` instead of `wp.element`. I've done this in #9795 and we can remove the lodash dependency for now.
Please add a docstring for all of these new tests.
I think this should be `/:releaseId`
This is a bit ugly. It feels like this should be in `actions`?
This seems like a reasonable fix for the problem, but I don't know what other people think. It might be fine.
I would just do `SetHead(context.Context, types.TipSet)` here instead.
Can you add a check for a few cases: - all partition ids have same rank as the pattern (which will be the same with the `pattern` argument) - all of these partitions have partition id 0
Should we be using `File.expand1` here? I noticed the `File.exist?` is used in a few places and I'm not sure if we can do it for consistency and that would be good as well.
@pragnagopa Should this be `x-ms-parameterized-host` ?
This doesn't have to be a pointer, the pool should just be a plain pointer of a message pool.
I'm a little confused by the difference between completed and not completed?
This tests what it says :smile:
I don't see any reason to remove this line, I'm not sure.
Why do we need it?
Please don't change the indentation.
I'd prefer this not have a default, as it's the first time I have seen a string that is used. The other places you used it use the value of this field (e.g. `GetTx`) use the value of the `PublicKey` field instead. We could just do `return &PublicKey` here. I'm not sure how much the value is used for anything beyond a boolean.
I'm not sure we are supporting duration for the actions, is that right?
Why is this change necessary? Is that change necessary?
I wonder if we should just replace this function with `IsCompatibleTo` or even `CombineEdge` (or whatever it does), since that's what `IsCompatibleTo` does (and is more consistent).
Can't we keep this one for now, and only create a new one in the `artifacts` package with the correct key?
Do we need to change this namespace?
why UUID? It's already in a `type` field.
Shouldn't this be a class attribute?
Why is this needed in the client?
I think this should be False by default since it is used in the scheduler for a while.
I think you meant to do `querySelectorAll(node.actualNode)`, right?
I think you can remove these two lines because there is only 1 usage of `addConfigs`
We probably have to benchmark this timeout
Can we remove these imports? They seem to be unused.
What about `Method.IsXNullableReturnType = !isNonNullableReturnType`

I don't understand this change
I would rename this method to `hasHighPriorityFlow(final String id)`
I believe it was `!==`
Why is this in a function? It doesn't change anything.
It's weird how this was previously printed, but I guess this change is fine.
What is a root in this context? Is it the name of the composite root?
this is not correct, it should be a pointer to the `SubscriptionID`
This should say `Zero is not considered negative`.
Should it default to http if tls is not nil?
I don't think this will work. The rules are applied to all packages and not just the first one.
Can this class be removed?
I'd rename this to `circuitBreakerThresholdPct` since we're already using the word "Pct" for memory.
Can you use `!` instead of `!`? This should be equivalent to `!singleBccRecipientFromAccount`.
Should we keep using bool to keep the code cleaner? It's not clear why we need to do any dropping when the config is already 0.
I think you can remove this line
This should go with the next line :)
We should fix imports at the top of the file, otherwise it will complain on the build process for some reason.
This can return a []ProcedureKind. I'm wondering if the interface should be removed and replaced with a `ProcedureKind` instead?
I don't think we should remove the definition, the service name can be used in case of a custom cdn
I think the error should be `expected 0 parameters`? Same below.
We need this line to be added to the docs/docs/index.md.
I see that you deleted this, but I still see some changes. Why?
>after [](start = 58, length = 5) after #Closed
Shouldn't we be taking from the lowest inserted header?
Why are you creating a new server?
nit. This formatting is inconsistent with the other parameters.
Is there a reason why you removed the `DisplayedTarget` variable here? It is used on line 315 and `TestFormatSpecifier` which is also unused.
Why does this need to be changed back to camelCase?
@kasper-piskorski @danthonyx What is the reason to add the line break to the import?
I'm not sure this is a good idea. Why not just check `isinstance(wavelength, (int, str))` instead?
I'm curious, is there a reason we're using this timeout rather than just `5m`?
Can we just use the google.golang.org/api/googleapi package instead here?
How will the user decide which chainID to set for the action?
This doesn't seem right.
The function `ossl_vex2half_half_x` was removed in this PR, right?
This will not be needed if `label` is a static variable.
I would prefer to have the variable in `constants`
This is fine. But I would also add `from . import current_app`.
Is this used?
why not `typeof window !== 'undefined'`?
I'm not sure the "disk cache" word is needed here, because there's no other concept of a disk cache being closed, we can't really say the cache was closed or is closing a TLF.
I think this should be called in an `finally` block.
Why does the upgrade command still need to be public?
can you please explain what the changes here make?
Is there another issue open to add this in the future?
Is this a good idea, or can it be replaced with the new `opentracing.Tracer`?
Can you use `.names == "0"` instead of `.name == "0"` ?
nit: Can we update the names of these methods as well?
why don't we need to set quality/height anymore?
Do we need to lock here or could we unlock after the PollImmediate ?
I know you have added it in the past, but we could use an exception here too
Should we just have the config default to the value of `maxMessageQueueDuration` if this is zero? We wouldn't need to duplicate it if it were just a global value.
I think we'll want to have this in the `MarshalOptions` too (and probably also in `DecodeOptions`) for backwards compatible
This is a bug - it should have been `shutdownNow()`
Can we make the constructor of `HiveMetastoreTest` take a `FileSystem` instead of a `HiveConf`? Then it's more clear.
Why do we need this field here?
It seems that this will remove the entry from the cache even when it was not in the cache.
`immediately fail unless x is zero` sounds better
I know this is a minor style thing, but can you fix the whitespace here to match the surrounding lines?
Should be `#ifdef _DEBUG`
This is a bit of a pain, but this will not work when the page is built with the new `java.lang.annotation` version (which I think will work as well), because the `getElements` call can return null. I'd rather have the exception handling happen on the page, rather than having the exception be a checked exception and then having the test infrastructure do the conversion.
please avoid use .*
I think it is better to keep import ordering consistent.
We should probably call this method `StartTimingRead` to align the naming with our current convention (and make it clear that we're not using the same method for each response). It's probably not a big concern though.
Shouldn't this be `Object.assign`?
Please don't use star imports.
I wonder if it would be good to add a check to make sure the `surface` pointer doesn't get `NULL` before accessing it.
@michalkurka why was this code removed?
This was a bug in the docs, as it's not the root of the repository, we are not referencing the git repository
This is just a side effect, right? I think it makes more sense to make it return `List<NamedItem<?>>`.
I don't know if it's better to use Model\Base\... in the class definition.
Why is this flag "eth" now?
This method should be private.
This should remain as it is.
Should we do `runtime.Version.String()` here?
I think the `&& fields` will always be true if `fields` is null
nit: why not using the `time.Now` ?
Why the change here from string to diskgroup?
This can be a method of the `Mux`.
I don't like the name "apply". It makes the code really hard to read. What about `commitToken()`?
I think you should use `string.IsNil()` instead
Please avoid whitespace changes in unrelated files (these are unrelated to the PR, IMO).
I think we need to change this to "assertThat(doc, is(sameInstance(fl,fl+":*")));"
Why not `np.argmin(np.array(levels)-clmin)`?
This change is not needed because NewWorkingSet() is called by NewWorkingSet(nil).
Please use `isset()` instead to be more consistent with the other keys.
Is there any reason to have this be a separate line vs just `quiet_o = quiet` on line 12?
We should have a more generic name, such as VERSION_SET_ID_INDEX.
Is this necessary?
Is this change related to the other PR?
I don't have a strong opinion, but why don't we have `#error`?
Do we have tests for this?
How do we know the hiveScanMode should only be used for scan specific mode in the same way as for openType?
can we make this `shardContext` or something?
You need to fix this lint rule
`objreg.last_focused_window` returns the window that was focused (the current one). I'm curious to know if this is expected. Also, why is `objreg.last_focused_window` called twice?
This was not needed. This test was not passing. The slot was not restored yet, so xax was dead, so it was never released.
Should this be false by default?
Layout/SpaceAfterComma: Space missing after comma.
Is a `toLegacyAddress` still needed?
I'd rather have the config option not be the default value, but we can leave it as an option for now for the time being.
I think it should be called Header for all Stream methods.
Why this return null? Is it to be handled by the return of this method? I don't like this.
We could change the return type too.
This change is a little weird. The name suggests the response is a X509 SVID, but the method actually sends an X509 SVID.
I think I should leave a blank line after this. I think it should have been removed in `v1/api.go`?
I think it's a good candidate for `@unittest.skipIf` decorator. This will be useful for testing other things if we want to change the name of this class, like "ReadonlyDefaultBucket".
What is the reason you need this property?
I think it's worth adding a `.Warn()` method to the `Error` and passing `err` as the message
I think this should be in the base class.
This should be a setting
@jimczi I assume this is the fix.
This should be done in the `result.checks` property instead of here.
This is a breaking API change for a non-released module. Is there a way to have a default value for this? I think this will break existing applications.
Why do we need to pass both UIWindow and IMvxIosViewPresenter?
`Consumer` doesn't take a `selector` as its argument.
What if head is genesis?
nit: undo changes in this file

I would rather not use the `import` statement here.
This can be removed
I'd suggest to use `g_null_string` (or `g_str_equal`) here.
private static final String DEST_MICROSERVICE_NAME = "x-cse-dest-microservice";
Why did you remove this test?
`s.getCronExpression()` is not null. You can use `s.getFirstSchedTime()` here.
Should we log here the error, so the user can figure out what went wrong in the log? (I guess we want the same output in the `create_database` as well)
This is not related to this PR, so I guess that's a good change. But why is `errorObj` passed to `getNoDataComponent` and not `getDataErrorComponent`? It feels odd to me that a single `analytics` component is used for both, but it seems like it's not used anywhere else.
Please revert to the old formatting of parameters (in this case the last line of the description is also changed).
This change is wrong. It should return the interface itself.
Why are we removing this test?
I think it'd be nice to have a better docstring.
I'm not sure if it is a good idea to have an interface.
Should we throw an error if we pass in strictPopulate == undefined and the option is null?
Why is this a `Builders.` prefix?
This can be moved into the method above
@liggitt, @jennybuckley is there a better way for doing this?
I would rename `ManifestReader` to `ManifestReader` for clarity.
Why did you change these?

I am confused by this. I think you want to call it `canDecodeInput`, since it does not close the stream.
I think this name isn't right. It should be 'task_execution_source'.
Why this space here? Is it a leftover from the previous version?
I'd rather use `getVersionIndexFileImportName` instead of the `versionNamespace` name as we are not really using it anymore in this class. I know that we can't do that anymore though, so it may be best for consistency.
This is causing a lint error
I think you can do `.where(exercise_id: new_exercise_ids).update_all(position: index + 1)` instead.
This seems a bit fragile. What if I have a machine in a non-daemon state but then restart a machine which does not have the events hooks? Then the old hooks would never get cleaned up? I think that might be a problem for an application which runs `kubectl stop` and then it would be in an unhealthy state, but I can't think of a scenario where it would happen because the event hooks were never cleaned up.
Why don't you need this for the cases where multiple cpus are required here?
I'm assuming that the "behavior" is intentional here.
Can you fix line length? There are many more of these.
This seems like a very simple change to the executor server. Should we have a separate issue?
What is the difference between this `get` and the subsequent `.get` here?
I'm not quite sure why we need this flag, if the only option it has is the value (in which case we can simply omit it).
I'm not sure that we can guarantee that `StartAsync()` is only called once. It's not really guaranteed that the task will not be completed.
Should there be some more specific message here? Like `numpy.dtype size changed in Python 3.7`?
Should this be an `IllegalArgumentException`?
Do we really want to encode the message? I would prefer to not.
Can you also remove the else clause from L725?
The name of the method `mapped` is not very intuitive. I would suggest something like `m_mapped`, or simply `mapped`
Can you move this above the ReportAction, so we only call this if we're stopping the GPU agent?
I'm curious why this file needs to exist and why not just keep it as `io.protostuff.runtime.model.ModelProtobuf`?
Can we pass in an empty hash here?
What about the `include_all` flag? Do we need it? I would prefer if we can do so for all `respond_to` methods. I would prefer we only do it if it's necessary.
I am not sure about the removal of this, but it seems like it was an optimization?
This is an example setting, not a flag (see below).
Do you think we should make it as a rule? Maybe something like `LogMessageConstantThreshold`
Why is this a debug level log?
I know these were added in #3779 but it seems like it should be fine. If the compressed code is not needed, it is probably a mistake that we can't make.
"Default is '_generated'." is redundant.
why do we need this check, isn't `install_package name.gsub("rhel", "")` already doing this check?
Can we remove this class now?
Why do we need these constants and the corresponding constants in this file?
I think this will cause the QT app to crash on the first usage - I think it's fine to make pin false until we have a way to disable it.
nit: maybe `sendCommandsForDownloadChromeHeadLess` ?
why does `runCommand` need to be exported?
We use the shorthand here for `$categoryData->parent`
@rullzer I've added these changes in another branch

I think we want to get rid of all instances of `axe._tree[0]` in this PR because we don't need to do it for the other places where we call `getNodeFromTree(axe._tree[0])`.
This change is just to make sure I understand - this isn't a race condition and should be avoided if we are not sure how much time we are doing this?
What's happening here? What happens if it's a symlink?
Why was this change needed?
I'm not sure if it's the correct way to handle seekTo event. It should be handled by `execute(playbackManager.handleSeekTo())`
Align `,` with `(`.
Should this be `DefaultDataDir`?
The state key name should probably be changed as well, and state key should be changed to `message.firstTimeEmptySubject`, and the state should not be `null`.
We can just call `deleteBlobs` here
This is the only thing i'm not sure about: what's the reason for the 2-th magic number here?
You should be able to use: `if err := v.attach(&n.Network); err != nil {`, no?
This can be removed
This seems like a rather odd way of redirecting to a URL. Would it be better to have a different action, like `show`?
I'd like to get rid of the hard-coded `4` here - we'll need to find some way to create a test case for this. Also, why is it 0?
naming is hard to follow - how about `k8sLabelSelector` ? :)
Remove the space here.
This is not necessary for the collection.
`(void *)` is preferred over `NULL` because it allows for explicit `nullptr` checks in the code base. But that's not really a change in this PR.
Do we need this? I don't see any other place where this is being used.
Shouldn't this come after `a.jsLimits`?
What is this change for?
I think we have to remove the `ar`, `as`, and `be` options here as well.
I am not sure if the `final_index != global_index` check is still relevant.
E225 missing whitespace around operator
I guess you can remove this
Can we also log the result here?
This is an improvement over the original, but should we be checking for the actual go version, instead (and returning an error if it is not?)?
Why do you need this? The only way I could see the expectedStatus is the status code.
This test case is now failing, because the voucher should not be nil.
Do we have any other permissions for this? I thought we discussed about the admin to allow users to do that.
can this be moved to the before block, and be moved to the after block instead?
nit: this file is the same with `Dependency`
This will return true for a non-async function so the else clause does not have to be here
This is a bit confusing - we're scanning all connections and trying to free up the conntrack table asap. Is there any way that we can avoid having a liveness scanner for each connection? Maybe something like a `NewLivenessScannerWithTimeouts` ? Or `NewScannerWithTimeoutsWithConntrackTables` or `NewScannerWithConnections` ?
This looks like the only place that uses `constants.publicSharingToken`, could we use `constants.publicSharingToken.split(".").map` instead?
I think it is better to return a copy here.
This check seems like it can be removed.
Why not just use the containerConfigurator directly?
I wouldn't log anything if it's not a bool. It's not a fatal, and we don't care about the actual error, so I would remove this line.
Can you also log that the linktype is incorrect (and that they are not in the same l2_types)?
Nit: The order seems wrong, as in `Scheduled` and `Scheduled` should be the same
I'm not sure how these classes are generated, but I guess that's okay since I've just copied all of the files from the base directory.
Is this test still relevant if this change is included?
Should this be a property?
Should the default be true?
This is the big fix. The rest is just cleanup.
I think we should keep the list in sync with the others - I don't know if it matters to make it different, since the list is only used by sql parsing and it doesn't matter that much. We can change `SQL` to `SQLStrings`.
This is not correct. The workspace will have the wrong position if a mouse moved from the block to the block view.
Shouldn't this be named as `port-range`? `local` is confusing because the `port` has `;;`
This is not necessary because `auto` is not a pointer type.
It's probably better to have a separate `ififf_to_network` function that returns either a network or the one that was selected. The latter can also be renamed to something that more clearly describes what it refers to
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.

I don't think there's anything we can cache here, but just in case it comes back. I think I'd rather have that in place of the JUnit5 cache.
This was a bug. The `DeleteAllNoDeadLockTest` class didn't have a `setMergePolicy()` method.
I think we can drop this flag now (we don't have `SupportAssetsPrecision` in the protocol-level settings).
Should be `if (!in_array($sortFieldParts[0], $aliases, true)) {`
This is now handled in `telemetry_common._RegisterIdentities` by registering the identities
I don't really see the point of having this as an api method on the API. Why not just have the api return an error if it's not implemented?
Please change this to `@ParameterizedTest` and use parameterized tests instead.
Can you please also change the other `WithArguments` calls?
Can we add a docstring here explaining the arguments?
I think we should have some kind of exponential backoff (e.g., 0.5s), and a timeout in the same place it is used to wait for the network to become stuck or to make the network timeout less than 0.5s. What do you think?
I think this should be `!shiftAmount.toInt().isNegative()`
Why did you remove this part?
Is this change necessary?
Should we also check that the string is valid? Or should it be an integer?
I don't think that this option is useful - if there are no periods or numbers, they're all going to be ignored. I would rather remove the `_periodFormat` parameter.
nit: remove this line to avoid extra noise in logs.
Is this header needed?
`class` is a class name.
Please remove this.
This should probably be `async` instead of `async`.
This is not right. The `getDerivedStateFromProps` is called only from the constructor. I would suggest to remove that check and just call `component.constructor.getDerivedStateFromProps()` here
This link should be updated
I'm not entirely sure about this TODO - it doesn't seem to explain the intent of the class.
I would prefer a test with a different id to make sure that it's not the case of the switch
I don't think this is right...
This is a good candidate for a new webpack config file
This should be `options.iframes = true`
Should this be `_create_record_timestamp`?

Should we use `utils.getValue` for this as well?
Why did you drop this?
Nit: I believe we have a convention to have the imports at the top of the package group, so that in this block we don't have to change all of the `goimports` stuff.
This is missing the `paymentChannel` part (the `paych` part is for the `swarm` command).
Shouldn't this be `inputValue.startsWith("0x")` instead of a hardcoded string?
This is a bug fix, right?
I feel we should put this to a constant, or at least put it in a `const`
I believe you should not wrap a line with a newline.
This can be simplified to "UTF8".
I think this should be an interface
This should be 'o', I think.
I don't think this will help much. It doesn't make sense to print this log even if we are in a finer state.
`dashboardUI` -> `dashboard` `toArray` -> `toArray`?
This can just be `if (!replaceNode) {`
Hmm, we should probably make this optional?
Can we remove this? It's not being used.
I wonder if a revision key should be added to a map or a field named after it. We could also have a field named "revision.on" or "revision.on_all" which would allow us to set "RevisionOn: true" in the future. WDYT?
Why is this change required?
I'm not sure we should be renaming this to `EnableProcessBlockStats`. I don't know if we'll want to add a new config property to make this a breaking change
The `reporter` property is set by the `PyLinter` constructor, which is called by the `test` module. I think the intent was to remove `pylint.config.Reporter` from the constructor. Is there a reason for this change?
I think the best practice to initialize a logger is to use a function to get the logger.
Can we just export the `axios` namespace here? This is not really an external dependency and is a global.
I think it's fine to call this `UnsynchronizedMessageDigestRule` since it's only used internally.
I think there is a bug in the algorithm that `Keccak.Zero` is a valid hash value.
It is not clear that this is true. This test will fail if you have an invalid histogram bounds.
`/// Color is the bitflag with value (1u << 1`
Is it OK to remove this check?
Would it be better to keep `methods.tap do |mets|` and `method_methods.tap(&:to_sym)` to save the extra nesting?
This annotation is not required as `PrintWriter` extends `AutoCloseable`.
I would rather not modify this code. It makes no difference to use Rails SSL.
This is a breaking change - we're using a `newInstance()`, which will fail to resolve `Verb`
Why is this still here?
This file was not used
Should we check if the `requiredFieldIds` are empty and fail if it is?
@cclauss I added `productCodes` here but I don't see a reason for it
why do you check here if the account exists?
This is also wrong. If you add the elements you have to iterate over the collection.
This should be done in a different way
This looks very fragile. Can you make `makeChainForOp` take the op, and then make `makeChain` return `op` and check if it's `gcOp` or `nil`?
`WHERE child_id IN (SELECT child_id from parent_of)` is the equivalent of `WHERE id IN (SELECT child_id FROM parent_of)`
This was just a copy paste error. We should keep this one.
Should this be moved to `linuxutils`?
I'm assuming we're going to be using 16 here because the compiler is still the lowest version?
receiver is unused
nit; `The URL's Host is used as the bucket name.`
We could make a function in the `utils` package that returns the `uint64` from this function.
'USER_TOKEN_EXP_DEFAULT' imported but unused
Maybe rename this method to `readBatchOfDictionaryEncodedLongsTypeWidth` for more clear name?
Why did you bump up the dirty flag to `3`?
This is wrong, because the module doesn't have a base module.
Please do not use event manager in package of the main codebase. Instead use `RegistryUtils.getRegistryEventManager();`.
Isn't this `typeWidth` always going to be `2`?
We can't change this, because the entry is a pointer.
This is the fix for the bug that was fixed in ubuntu-bionic-7.0
This was unused.
We can use config.GetConsensus() in the future, which does the same checks.
Why do we need to add the `args`?
I don't understand why we would throw FileNotFoundException here. Can you explain?
Why not call it `KeyStore`?
This seems to be an unrelated change?
I don't think we have a way to specify `organization` without a `cert-manager` in order to avoid the `organization: defaultOrganization` error. Maybe a `defaultOrganization` could be used in a followup PR to make `cert-manager` work.
`# copied from ...`
Shouldn't this be called `preInvocationAuthorizationReactiveAdvice`?
Shouldn't we also change this to say `level can be 'debug' or 'info'`?
This will also need to be pinned to a specific version.
This test is redundant now. `kser.item()` is covered by the other unit tests.
Is there a reason why this is needed? It's not related to `SelectElement`.
why don't we use `equals` for the two types?
I'd rather not set this here.

this method is only called by the static type parser, so we don't need to change the argument name.
Why change this?
This will be wrong in case of a game-side script, it would have to check `if (g_luaEnvironment.getScriptCombat()->getFlags() & ScriptCombat::FLAGS_ScriptCombatLoad)`
I'm pretty glad this was gone :P
why did you delete this line?
Should we mark it `internal` to avoid exposing it?
This is not necessary anymore
I would move it to `FormType` to keep the logic simpler
This list should be alphabetized
This import is not necessary
Unnecessary spacing detected.
nit: this import is now missing.
I'm not sure about this change. I think it might be better to just round it.
Why do we do not want to use the default stream for launch?
Is this import really unused?
I'm not sure this should be here
Why do you need a separate `GenericErrorPage`?
Line is too long. [82/80]<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
The same problem as for the other cases.
This should be an interface that can be used as an implementation of `interface{}`.
Can we use the `from pubkey import hex_to_pubkey` method here?
I think we should just raise an error here, not throw the exception.
please remove this line, and add a space between the comma and the opening parenthesis.
This is a bug fix. The display name is used here.
I'm not sure about naming. It's a public interface, so it would be good if it's called something more descriptive.
I don't think this is a good idea. It's not clear that we should modify the DOM structure. I'd rather have a separate `_getRefs`. I think we should also use a `null` ref for this case.
I would just use `class << self` here. No need for the `include?`
This needs to be done inside `IsActualHostValid()`.
I think the log should also be logged when `num_of_messages < 1`.
I would rename the file name to `pprof.go` as its not only the pprof handler, just the pprof.go
Why not put it into `AstObserver` itself?
Please remove this
This block should go under `c.enableProxy && gatewayConfig.IPv6 != nil`
Shouldn't this stay as `no`?
This one was already in here but I don't think we need it in the list. I think we're missing an import.
nit: "If this value is negative, the mitigation behavior will be disabled."?
Please remove the copyright
This change will cause `block_count` to be 0 if `bootstrap_weight_max_blocks` is 0, but we want to confirm frontiers when that assumption is fulfilled. I'm not sure that this is the expected behaviour, but if we are going to confirm frontiers, I think we should do `confirm_frontiers` only when `bootstrap_weight_max_blocks` is 0. I think that this will be better than leaving the frontiers disabled. If we have a negative bootstrap weight, then we should also not allow to confirm it. This will allow us to drop the block when
This is unused now?
This is going to be the wrong way to fix this issue: it is possible to use the `allCategoryButton` in a context manager in the first place (the button is visible and the button is not). You'll see the problem when switching from all to default.
This seems like a reasonable change to do, but I don't know why it's needed. It's fine to keep it like that.
This is a bit strange because you have to `folly::to` it, but that's just how I was thinking. This code is not a lot of work, so I just wanted to double check.
Can we make this configurable?
Why are these not pointers?
I'd say that this is unnecessary now. If `maxParallelism` is set to 0 we'll just set it to 1 anyway, and then we wouldn't need the `return this;`.
I'd prefer that you add `closeModal` to `ModalComponent` and not `Billing` directly
What's the rational for this change? I'd prefer to have some unit test for it.
I'm not familiar with the code. How do we know that `path` cannot be None if it doesn't contain characters?
I know you didn't write this, but this change is not necessary.
Nice. I like how this is handled in other places as well.
Shouldn't this happen in the first place?
why remove this?
Why does this function need `bool` and not `int`?
Is this really needed?
Is there any way to test this without a mock?
Shouldn't `UpdateMetadata()` be the last method for `Delete`?
Should this change be reverted?
Why this change?
The problem with this change is that the code below would have always returned `x`. I wonder if `vStringPut (Signature, c)` should return an error if the string contains whitespace? (Or if this is not a problem, the code above is also incorrect, since you've changed the code below).
`blacklistTypeStr` is unused
I would prefer that we only remove the executor if it exists.
I don't really like the name, but I couldn't come up with a better one. I'd prefer `stateOffICMPCodeSize` or `stateOffICMPVersion` or similar
I would call it NASFCOV or NADS
Why is `"--target="+config.Target.Triple` not enough for `--target`?
Do you think we could use some more explicit log message here to help people know the audit log occurred and how they can fix the problem?
This is an odd package. Should these be in `pkg/state`?
Is the TODO still relevant, or should we file an issue?
`UnpartitionedWriter` can take `format` as first param, no?
`Player::getIP()` already returned a `std::string`.
@stgraber should we also assert that there are no rules to clear?
Should we move that to a function?
Can we use an enum here?
Why is this necessary? Isn't it enough to add the Interceptor function and have all the inbound interceptors be the same?
Can we use the constant from org.apache.solr.common.params here? We already have constants that can be used to create xpath expressions in Solr
Not related to the rest, but I guess the warning here should mention the fact that `c->config->num_null_gbs` is set to zero (even though it doesn't actually do anything, since it's just the default value) and the message should say something about the current value, instead of something about the previous value.
`from importlib.resources import *`, so the `as` can be removed.
It's a bit unfortunate that you're creating a list of extra elements but then using the size as the number. I'd recommend just not having this as an extra variable.
This should be initialized in the __init__.c file.
Should we use the `stable` version? @mattip ? @sjenning , @kumaru ?
We could have a more descriptive name for this parameter (say, `s3_subject`)
Can we remove the extra line here, please
@wing328 this is how we handle the UIA NVDAObjects in UIA.
Should we call this result_handler_plist_to_sql_server?
`if: Proc.new { |template| template.published? && template.version.present? && template.version > 0 }` is a bit shorter :)
What happens when a user updates their CRD with these changes?
Why change this?
I think the string should be changed to be `Automatically Send usage statistics and crash reports to brave`
I don't know if we should use "account" or "account" for these flags. It may make more sense to use "account" or "accountName" or similar (i.e. "accountName" is a commonly used term).
I think the `-l` option should only be available on local mnt, if `b.localMnt` is true, it should be added to `nsenter` command as part of #3866.
this is redundant now, right?
This isn't going to be a good idea, we might want to make this a property for easier testing.
@alex-hobson, you can remove the print statement.
This one should stay the same
nit: I think the previous test (the one above) was better than the new one (the one for the "only" condition)
This needs to be updated to 4.5.
shouldn't this be done in the init function?
I think it'd be better to move this function to the address module, and then call a function here for the address, and handle the error case appropriately.
Why is this needed?
This looks like it doesn't compile, so I'm surprised.
I think we need a `newBoundingBoxQuery` for both cases as that should work with the same queryRelation
What's the reason for adding the default?
Is there any reason why this value is in milliseconds instead of milliseconds?
Nit: Remove empty line.
The example code needs an example to show how to enable/disable S3-based encryption.
@morozov please, check if there are any other changes needed in this PR
Can we create a tracking issue for this, so we can track this TODO in this PR
This is probably an error condition, but I'm not sure what the best way to handle this is, is to use `logger.warn` or `logger.severe`.
I think this message could be a bit more descriptive: `Unnecessary dict index lookup. This assignment should occur immediately.`,
nit: can you please remove the blank line at the beginning of this file?
this will crash for non sex player
I don't like it as this is an object, but I think it's better to have it as a Map of templates, not an Integer.
Is `getStandards` a typo? It's not a typo in this module (the one in `utils`)
can you add a docstring here explaining what's irregular
I don't think this should be changed at all.
Why is this a `(2)` when it's only a CSS `1` element?
This file is used for the LuaUtil script.
missing space between operator and operand
I would use `from ..utils.rootlogger import get_root_logger`
This change will break existing pages (see #2886). We may want to change the default search string to something more meaningful.
This was only used once in a benchmark. This is just an oversight that `Benchmark` was being used to calculate the number of iterations.
Can we move this into `isAllHealthy()`? I would rather not have this parameter on every API call
We could add this to API level `DELETE`
This is just to be able to sort by the item in an ordered list.
I think `secure` flag is not needed here.
We may not need this method. We can always call the metadata API.
Can we use a more generic interface?
why would the err be nil if it would skip log?
I'm confused by all the types being added in the `caddytls` package. What's the motivation for adding them, and why do we need them?
This should be OC.getCurrentUser().lang
The name of the method does a little bit odd...
This could be `return {"created": self.created, ..."}` I think
Is `g_free` a good choice for this? I'm worried about someone using the compiler with an uninitialized memory, and this might bite us in the future.
Why not use `PREPARE_PRE` here?
Nit: I'd prefer we don't do this. The reason is that I think it's a good idea to avoid a change in the enum value. The idea is for people to use OtlpSpan to refer to different enum values (e.g. SpanKind) in the future. In a separate PR I would prefer to just change this to a separate PR.
This code is duplicated in other places (e.g. `getTaskVolumes`). Should this function be extracted and shared?
Should we add this line back?
`_platformNotSupportedExceptionMessage` is redundant, can be removed.
What are these two changes about?
Why are these needed?
This is not needed, `loadExtension` is not called from anywhere.
This test seems a bit odd. Why don't we just have a `ocspManualConfig()` that takes the configuration?
We should also add the `chainToDataplane` fields to `hashToFullRules` to make sure it's not accidentally accidental.
Why the rename here?
This is a behavior change: when `UNMOUNTED_NODE`, we call `removeNode` on the VNode but then `applyRef` on a VNode that has no ref. This fixes that.
I think this is fine as-is. It will be more useful to know the error if this fails. I also think it is more useful to add a case to validate that an error was not returned.
I think this should be included before boost, or else we will get errors on some compilers that build on Windows. We should not add any `#ifdef NOLINT` here.
We don't really need `export default function() {};`. We should just use one function.
I guess it would be better to make `load_plugins` public, as I'm not sure if it can be used outside of this module.
this should probably be plural as well
@krisselden this is not true anymore.
I think this class is not needed anymore
This is a bit hacky. If you want to be certain that `pollForKID == keybase1.KID("")` (the default) you'd want to check `cachedUserInfo.VerifyingKeys[0].KID().Equal(pollForKID)`

We should make sure this method is only called from `send` or `receive` and not from `process` or `processUnreadMessages`
this should use the new `config.action_mailer.default_url_options` instead of the host
I think it will be simpler and easier to follow if you use `source_host.nil?`. Also I wonder if we should use `.blank?` instead of `.exclude?`
I'm not 100% sure why this is a `Failed`. The app can't be stopped because the `StartEnvironment()` function is called after `platform.Start()` is called.
I don't think this warning is relevant to production (I can't tell what the meaning is).
Shouldn't the default be `4000`?
We should have a test for this case
@jasonLaster @jasnell Is it a safe fix? Do we need this to be fixed before merge?
I believe this should be a single line.
This can be `final`.
Is it ok to change this?
`Scripted` is not necessary anymore, it was set to false in the `ScriptedSpell::loadFunction` method.
nit: we should remove this
Is this needed?
I think this would be better placed after line 750 where we set `result.success = detailedBolusInfo.carbs > 0;`? Otherwise this would be executed if `detailedBolusInfo.carbs > 0`, and the result would not be visible.
why not just make these tests to use transport.NoDeps?
This should be extracted and used in the views.
I wonder if the `getXPathNodeName` method should return `null` when not found?
This is the only place where the user needs to explicitly specify a `shell` argument and should be passed through the options hash. The default is to use `Bolt::Shell::Powershell.new(target, self)`, which is what happens in the next line.
should we update this too?
I don't think the `# type: ignore` is necessary here.
Is this change required for this PR?
you don't use this?
I think it would be good to add a space before "of"
This change is just to make sure the linter is happy. I think we can do something like: `['ExtraAugmentation'].append(['...'])`
Why do we have to do this again?
I don't see a `CopiedAnnotations` being used here. Is that a leftover from debugging or can this be removed?
The change from jansson_dirent to treeobj seems not to be related to the changes in this PR.
This is an important change. The other changes are to ensure that the `cfn` channel is not blocked until the request is completed.
@jasnell can you please fix the whitespace? I think it will work.
I'm assuming it's safe to remove the snapshot command here and the `-t` in `etcd.yaml`?
Should we be testing here? Or is this just a debugging leftover?
I don't see where this is set. What is the use case for this?
I don't see the value in having all these variables. I would remove them.
I don't understand, why did this need to change ?
this is not a python3 compatible code, we can remove these changes.
Is it worth adding that a note saying that this is only for x64?
Why this change?
This is not needed, it's already a zero value.
I think I would just use 'view_proposal_url' here, rather than 'proposal_url'.
This is just to fix a bug in the code that was not caught by the tests, right?
I think this might be a good opportunity to return the `Collections.emptyMap()` as well. We don't use `HashMap` for `Collections.emptySet()`
We can use uint64.
I'd leave the year out entirely, and change the copyright to 2017, 2020, 2017.
Shouldn't we use `null` for the default?
I think we need to increase this test to 5s.
I think this will always be true because of line 355 (see below).
Line is too long. [82/80]
Can't we have a single writer in `AsyncWriterThread` that is unregistered?
We usually don't add parameters to the constructor
I don't think we should do any of this here, I think this will be very confusing to people as I think it's going to cause problems. We could also apply this to the `WorkloadIfacePrefixes` above when the host is compromised. I'm not sure we should make this a breaking change. @stgraber thoughts?
I guess this isn't used anywhere.
nit: this could be a constant
I would prefer if we didn't introduce a dependency to the "custom" framework, but this is a minor nit, so this is OK.
I don't think we want to load cluster id here, as it can be confused with the metadata of the node.
This check will be executed for a `null` `bridge.getServerUrl()` because the host is null. We can use `getServerUrl()` instead as well.
Is this true when I/O and GIoULoss and DIoULoss?
This seems very wrong. If `createIndexSchema` returns a schema, I think you need to change the signature of `createIndexSchema` to take a boolean.
This change seems to have no effect.
Is this really needed? It's not clear to me from reading the code.
Is the `OnPrem` config only set for AWS clusters that are currently running in a pre-mature environment? I would imagine this could be the case for a user that is running in a pre-mature environment? If so, how do they feel about just making `OnPrem` an option of `aws.ClusterConfig` that we use for other things that are run in the pre-mature environments?
This can be a property instead of a property
This class is also used in `StreamTable` so we can use protected here
What's going on here? I see it's just a stub file, but I see it's not used anywhere.
I think we can just remove this line.
I would not use this URL, but add a reference to the issue so that we don't forget.
`// Create the inventory collections`
The description is not accurate anymore. Please revert the change to the file.

I would add a `continue` at the end here to skip all the `map` keys that are not present.
Why do you need this change?
`Optional` is not used here and is never used.
"github.com/stretchr/testify/assert"
This could be a const
Please remove this variable if it is not used anywhere anymore.
@wedamija I am guessing there's no reason to limit the content to a single chunk? If so, then we would need to add a limit to the chunk content. I would also like to avoid limiting for large parts of the content. If the bucket is large then we would need to limit the size to the chunk as well. WDYT? @scefali @bryevdv
nit: rename to `FIELDS`
What is `NET452` for?
Why do we have to call `NewFailToFindContainer`, can't we just return the error in the above if block?
This was the only place this was called
I think it makes sense for now, because if you are using CPU and you are running on CPU, you should not change this line, otherwise you could still run on GPU. But we need to do it in one of the other places too.
This is not needed, right?
If the config was not supplied and there isn't any apis, wouldn't an empty list just be better? I'm worried that the API is not a valid API.
Can we use the default value here?
It is not clear why the retry is being skipped here. The retry logic is already being performed by `NewRetry()`.
I know the `ServiceDefinitionDocumentType` property is abstract but I think it would be best to avoid this abstract property. I believe that we have a `ServiceDefinitionDocumentType` property in the rules, which is a bit much. I would also suggest to have the property be a `ValidationRuleMergeState` that is a property of the base class, and then we do not have this abstract property, and the properties can be made abstract. #Resolved
Can this be changed? I'm not sure we want to change it
Why remove this?
I'm a bit unclear how it would work on the first render. I would've thought it was to avoid the `Fragment` type, so maybe it's worth adding a link to the issue.
This is not a proper approach, as the `hooks` will have to be cloned every time. It's not the responsibility of the `s` object here. It should be encapsulated in a `hooks` member variable, or something like that.
Why are we removing matchSelf here?
Do we need to worry about future changes in the work order, or should we add another config item for this so that we can change it easily in the future when needed?
@bvbharatk I think we can remove that. If we don't need it, it should be the other way around.
This was the actual fix. I removed it to prevent test failures.
I believe the label should be `OpenEBSUpgrade` instead of "reason upgrade" here and everywhere else
I think we don't need this function. If we don't have `RaidGroups` it should be treated as stripe pool.
nit: `title` should not be in here. `title` is not used in this test.
Can you use `new SampleTransformer(SampleType.IN_CODE)` instead of `SampleTransformer.create(SampleType.IN_CODE)`? It is consistent with the rest of the code base, and is easier to test when the test fails.
`return xxstrdup( (char *) digest );` ?
Do we need this? Can't we just call them 'addEvent()'?

Please use the constructor from DomainParticipantFactory
Please provide the type information for the param.
`\S` is a special token, so I think we should not match with anything in the beginning and end of it.
Can the following line be removed?
Can you please add a check here for an empty string as well? It seems to me that `connectionString` should be undefined, but if `mongodbClient.s.options.autoEncryption.cryptdConnectionString` is null, we will get an error in the `mongoClient.connect(...)` statement.
I'm a little concerned about this one. If the DynamorIO_Clone() function is used for the client_thread, it may be necessary to create new thread in both case of DynamorIO_Clone() and DynamorIO_ClonePost(). I'm not sure that this is a good idea.
Shouldn't we pass it in here?
It's a bit confusing for the user: why are we saying that a semaphore is signaled after waiting on the queue? Isn't it just that a semaphore is signaled and not waiting on the semaphore?
maybe we should return something else than `context cancled` here?
I would move all of these into the `TraceConstants.cs`
Is this package still needed?
Please change this to be something more explicit. For example, "optional custom resolv.conf file to use for solving ACME DNS01 challenges" -> "optional resolv.conf file for resolving ACME DNS01 challenges"
This doesn't seem right - it's not part of `debug.go`
I think these need to be `public` as well.
I would just call it `lps`
why not just `if (target && target->getZone() != ZONE_PVP) return;` ?
This should be moved into the if condition below.
This is an `ArticleController` not an `ArticlesController`
This function seems to be used in `method_utils.hpp`, is there a reason it's not used in this file?
This seems like a bit of a smell - I don't think there is any way around it? I'd be ok with removing, but we should be good with a more specific name. Maybe `cleanupExecution` or something that makes it clear that it is actually doing something.
I am not sure if there is a better way than this. The flow exporter config is the thing that the user passes in.
I'm surprised it works here. It looks like we're only using the `rwTimeout` for a client and not server.
Why this change?
Is this change correct? We don't increment lifeTime in queue anymore?
Can you use this error code to show that an invalid value has been set?
These can be removed.
Please, don't use PHP 5.3 compatibility.
`if not obj or (obj.windowHandle and obj.windowHandle.isWindowHandle()):`
This is the only place where `SetDefault` is called, so I think we need a `// TODO: remove when the keystore is removed` line.
Is this check really correct? It seems like it is checking that the total weight is less than the minimum, but then we can do something to make sure we are only broadcasting requests that were not already sent by the node.
This looks like an error. Isn't there a better way to do this?
I know I asked this before, but why do we need this? Can we just have the `GetPublicKey` return an address? I think we need `GetPublicKey` on the `Node` so we don't need this parameter.
This can be done as a first check
Why are we passing `api_quota_configs` in the `get` call here?
nit: revert this change, please
This was a bug
Please remove this line
nit: `Objects#equal(..)` is more common (and easier to read)
This was moved from base?
Should there be `ExporterOptions` here as well?
This import should be placed in the same line with the ones in the other file?
Would you mind making this a `static readonly` field with the other metric counters? Also, is this metric set somewhere else or can it be `1`?
Why was this changed?
This check is no longer needed since items are not modified until the node is added.
I am pretty sure that we should use `Array<String>`.
We can move these to line 20.
`self.global_set_option('disable', True)`
I don't see how this is related.
You probably want to divide by the sum of the maxHealth to get the floor
Should the warning message be updated to mention that this is the only way to construct a DynamicMap?
Why this change?
I think we should just check that `listen_host` is actually an IPv4 address and raise exception if not.
This is the only place where the `table` method could be used. In my opinion we should just keep the table ops method here as well as `TableProperties`.
should be isMapLoaded
Is there any reason for this change?
Is this change related to the rest of the PR? If so, should it be in another PR.
I wonder why `PYTHONPATH` was added at all.
Should also rename the method name

This is a breaking change to me. We're trying to make the key file more configurable but we don't want to expose this as part of our public API for now. @kapilt do you know if we are OK with this?
The `abspath` was causing the problem
Should be moved to `file` package to be consistent with `prom.FileConfig`?
Is `nil` necessary?
This is not used anywhere
@mistercrunch @beezz I'm not sure this is the right fix. The error message is not in the dictionary. I think we should raise here instead.
nit: you are using a different folder. can you rename to Microsoft.VisualStudio.TestPlatform.CommunicationUtilities?
I know this is old code, but wouldn't it be better to use a different method name, so that the view doesn't have to know about "update"? `update_profile_form` or `create_profile`?
I'm not sure I follow why the instance was never deleted?
Could this be a constant?
I'm not sure what we can do here - we should just copy the data, not the slice.
I wonder if we could just get rid of this whole file and inline it in the test?
Why are you throwing exception here? This seems to be the right place to do this.
Should it be 1190000?
This should probably be `org.joda.time.Period`, since that's what we are using.
I'm not sure this is the right name - it should be the same as the property name for the plugin, `preventWheel`. I would name it simply `overlayPreventsWheel` or something like that, because the default value is `false`.
Is there a better way to do this, or would CppGenerator have the function that takes the char rather than char. This should be a bit less hacky.
Why do we need the header file here?
should this be case h.TypeForKeying() == tlf.SingleTeam && tlfID.Type() != h.Type():?
Can you update the doc for RunWorkflowExecution as well?
Should this be `params[:q].present? || params[:f].present?`?
Style/BracesAroundHashParameters: Redundant curly braces around a hash parameter.<br>Style/SymbolProc: Pass &:id as an argument to expect instead of a block.

Can we remove the default `cursor.cursorState` here? I think it's not used anywhere else in the code
I think it's worthwhile doing the same thing for the matcher, and also for the request_matcher.
I don't think we need the regex in these cases?
I don't see why we have this change.
Why are you removing the copyright ? I see this file has been edited in a previous release.
We could change the order of these numbers, but that's not required for the issue at all.
I think it would be good to have the role check as a part of the `allowed` array instead of here. That way you'd get a list of roles for each type of node, rather than just checking whether the node contains role or not.
We could add a static factory method `Boolean.parseBoolean(String) `
Why not keep this, but leave the old test as they are?
nit: I think this would be nicer named "shouldHaveNodesLive" ?
This seems like a bad change. The other test fixtures are now in `certs` (not `certs2`), which seems like it should still be `certs`. Is this correct?
Can `reader` be null here?
I'm not sure that we should use a query builder here. I don't think it's a good idea to have a query builder in the query builder, especially when we use a query object like this.
I think the point here would be to add a `Type() semantic.MonoType` in the future, so that we don't have to import TableObject in the interpreter package, but instead have a `TableObject()` function and the type alias. I'd be fine with the approach we have for now, but it would be nice if the interface was just `Value` and we could add a `Typer` interface to that and make the type alias easier.
Is this header needed? Isn't just the interface version `12002` available in the header?
We don't need this anymore, right?
This is leftover debug info, please remove.
I think we don't need to check for a string here. `val.to_s` returns the string itself
Should this be in a try with resources to avoid sql issues?
@marefr this is the fix for the server config
`setTargets` and `getTargets` should be part of the constructor
`executedDropErrorOnce` is a confusing name because it indicates whether the user has been executed the error, not whether the call was made or not. Maybe call it `logDroppedErr` or something like that?
I thought we were going to have the same pattern for both? We've been trying to get rid of our instrumentation in the past because we have to move to a single class.
We should probably remove this code, and just let the container decide what to do.
What's this used for?
`2` was not the right value. Should be `1`, no?
This is the actual fix.
Can we make it clear that it only applies to NAT? And maybe it should be called `NAT` or `Ban`?
I guess we could remove the "Example:" part now
I think the `;` here can be removed. And it's not clear why it is in the first place.
Is there a reason why the seed is here?
`rpc-require-chainid-in-txs` is an internal flag that can be set on the command-line with `--rpc-require-chainid-in-txs`. The name of this flag can be changed to `rpc-require-unprotected-transactions` to reflect its semantics better.
