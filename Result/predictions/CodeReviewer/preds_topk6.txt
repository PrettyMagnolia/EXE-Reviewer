I don't think this is necessary
Should be done in the `createBackend` method.
I'm not sure about the naming here. It is not an analytics module.
This is not necessary. `isNaN` will return `true` if the input value is NaN.
This is a bit odd, since `getNavigateURL` is a helper function that returns the URL for the NAV URL. I wonder what the best way to do it would be to make the `getNavigateURL` function to return the URL. Maybe something like `getNavigateUrl( { location: { ... } } )`?
This is an API change. The new parameter name `im` doesn't really make sense. I'd just rename the old one `im` to `im`
nit: this is not used anywhere, can we remove this import statement?
why is this needed?
Should this be an error? It seems like it could happen, if the user has already requested a layout.
This is the actual fix for #8323.
I don't know if it matters, but I'm curious why we need a `then(keys => ...)` here?
I wonder why this is not just `shared := volumeConfig.GetSharedMountValue()`?
This is a good example of how we'd use this, but we can add a `@see` tag to the `freeze()`.
Why not check parent span id?
nit: `provider.Name()` is already in the context, so we could use that here instead of the string.
Should this be moved up?
I'm not sure this should be in a loop.
This change looks unrelated to the issue. Is there a different reason why the test name is different?
I'd prefer to see this as a part of Status object and use it in the query. The query could be a bit more generic, e.g. `STATUS.STOPPED.getNumVal() + " IN (" + Arrays.toString(Status.values()) + ")"`, so it's clear that the status is only relevant if the value is valid.
Why is this change needed?
I would suggest to have the DeleteTask return error, so that callers can handle the error properly.
I would prefer if you didn't use the word "enabled" in the key. I would use "not exists" or "is_existent"
Why not use the switch case here?
Is this change related to this PR?
This is wrong. The session is not used in the template and the request is not a valid one. The code is not right here.
I think we could just add a new flag to the command class, which will disable history saving
I'm not sure about this change.
This should be in `options`
I'm not sure about the `responds` variable, can it ever be undefined?
Why is the workingDir needed here?
Is this needed?
Why not just use a single `info`?
I think the function can go away, as it's always called.
Should this be a `Collection<Alerter> alters`, so that it's not possible to change the alters in the future?
Why is it ok to send the sources and mirror info here? Is there a reason for not just sending them to the server?
Is there no way to limit the name length to something like 50?
This test doesn't need the `[]byte` since it's a `string`.
We have a function for this, can we use that here as well?
Should this method return a boolean? I would have expected it to return true or false.
I would prefer if we could avoid adding a new tag to the span if we can't. This is not a problem with the current behavior, and it's more of an edge case, so feel free to ignore it if it's too much of a deal breakage to the application.
This docstring should be updated to reflect the change to `qutebrowser`
This file should be deleted
nit: unused import
I would prefer to keep the stacktrace in the log as well.
Why not simply `return;`?
We should add this to `DEFAULT_METRIC_CATEGORIES` as well.
We don't use wildcard imports. Can you revert the changes you made?
I'd like to see this be part of the configuration.
Can we use a switch statement here to avoid the code duplication?
This looks good to me! However, the code is not quite right, if solid_subset is `None`, then build_sub_pipeline will return `None` (which is not correct). I'm not sure why this function is called `get_subset_pipeline`. Maybe it should be called `build_sub_pipeline(pipeline) if None else build_sub_pipeline(pipeline, solid_subset)`.
I'm not sure this is a good thing to change. The previous exception was more informative, and the new one is more informative. I would suggest that we change these to Error or Warn, but not both.
I think these should be on the `Chain` interface, rather than the chain package.
why is it necessary?
I don't see how this can happen?
Can we make this a `log.Info`?
I think this should be `const`
We should probably have a `target.AddMaybeQueuedDependency` helper, but I don't have a great suggestion either.
This is a pretty expensive check. We should make sure there's no problem here.
I don't think we need this check anymore.
Shouldn't this be removed?
This is an example of where we'd want to use `Collections.emptyMap()`
nit: `positive(String argName, double number, String message)`
I don't think we should add a new rule here. We should not modify the existing rules.
Why not just `os.Mkdir(dir, 0755)`? That would handle all of the above for us and would avoid creating the directory every time we try to access the file.
Should we also rename the method to `federated_login?` to make sure the old code still works?
I would add `Wallet pending` as well.
Is this used?
I think we can remove `aws.cluster.sigs.k8s.io` from the annotation name since it's already in the annotation name.
This is a bug in master, it should be zprd
Why is the method name different?
This is not needed.
Why not just `assert(sibling->parent == subsurface->parent)`?
I'm a little confused by the order here? Why not just order by date?
I think we can remove this `allowExternalTables` flag now?
Why not just use `int intr_event_fds[MAX_USR_INTRS] = {0};` here?
I think we don't need this test, since we already test that the method name starts with first/last name.
I'm not sure what the `win_id` parameter is used for here, but I can't think of anything. If it's a required parameter, it can probably be omitted.
I would rather not catch `Exception` here
@stgraber This should have been changed to be `Warn`
I think we need to add a new relation for 'ExportCategoryI18n' as well
Should be `if (!json_array_empty (batch->state_trans))`
This should have a default value.
The docstring should be updated, too
Why not just use `w.ID()` instead of `w.Vars["instance_name"].Value` ?
Is `pos() != null` a good idea, as it is more explicit that it may not be set.
This should be logged even when the Windows is paused
Why is it necessary to change these imports?
>e.Message [](start = 58, length = 10) e.ToString() #Resolved
This should be inverted, since we don't want to disconnect highlighting connections if they have the same localConnection name.

We should not expose these. We can use `Object.create(null)` and `Object.delete(null)` in `getObject` and `getObject`
This was a bug, it's not a copy of `ch.Data()`
Is this needed?
This can be moved outside the lock
Is there a reason you don't want to set `@type`? It's not the same as `@element`.
This should be `options.cstorSPC.spcName == ""`.
Should this be `wlr_xdg_toplevel_send_close(surface, true)`?
It looks like this is unused?
Can you use `WIN_AND_WIN10` here?
I think we need some methods in here to fetch the active flow by exec id.
Why is it safe to remove this code?
I think this is not needed.
I'm not sure this is needed anymore.
This should not be necessary. It should only be called once when `jtAccept` has been called.

Why is the Lock needed here?
Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.
This change looks unrelated, is it necessary?
I think you can use `Array.prototype.concat` instead.
The buffer needs to be freed with `BUFFER_RELEASE`
This is an un-necessary import.
Why do we need it? It is not a filter data.
I guess this is the only thing that changed?
I think we want to keep it as an option in order to avoid breaking existing users. I think the default should be `""`.
@stgraber I've moved this file to lib/plugins since it's used only in `docker/volumes`, and I don't see any benefit to having it here.
nit: sort usings
This is a breaking change. The old version was better.
missing space between `=` & `=`
This is going to break for any element that has `w3c=True` (e.g. an image).
Nit. We usually use "github.com/aws/amazon-ecs-cli-v2/internal/pkg/cloud" as a standard library.
Why is this in the test case?
`std::distance` returns an `std::uint64_t`, so the comparison should be `<=` or `>=`.
Is the part of `prometheus-operator` a pod? If not, I don't see this label being used anywhere.
Is `InstrumentationName` guaranteed not null?
Can we rename this package `xrc`?
This should be `camelcase` not `camelcase` (or even a new function, but I guess that will be in a separate PR)
I think this should be `volatile`.
I'm confused by why we are ignoring the default here, and not in the other files, and also the default is 100. I think this needs to be updated to match the default value.
This needs to be removed as it's a breaking change.
We can probably remove this, since `toLowerCase` will return the first letter of the object.
Can we make this an exported field?
Why is this not needed anymore?
I don't think this is used anywhere.
why do you want to change the response to uploadResp, but not file
This is the fix.
nit: remove space before `%s`
nit: `Without` doesn't really add anything, just `String()` is enough.
I think we can use `UtilIT.checkDatasetIsSameDataverse()` here to check that a dataset cannot be linked to the same dataverse again.
Shouldn't this be `SecurityGroups []string`?
Use the lambda method for multiline lambdas.
I don't think we need this.
I would prefer to see a separate `StringifiedSymbol` model, that is the one used for all strings.
i wouldn't pass a pointer to the struct. i don't like passing pointers to a function, but it does not really matter. I think we should just pass NULL to h2o_next_token
This is the only change.
Shouldn't we be checking for `PaymentVersionV2` here? Or is `ConsumerInfo` always set?
Do we want this in the v1beta1 API?
Why does this need to be public?
Can we move `IsLinkClass()` into a method in the `util::NodeBasedDynamicGraph`? I think it would simplify the code.
I think this should be master_certname
I think you forgot to import `HRNet`
Why this change? The original code is OK.
This will fail on the Mac OS X. It is not a supported option, I would say
Please remove the space after the commas in the parameters.
I think we still need this logic here. We need to set the nodeType in the manifest if the node type is an edge and we have more than 1 fork, otherwise the node type won't be set and we'll get the node type from the manifest.
I think we can remove the `!= true`, it's not used anymore.
Is this used? I can't find it in any code
This is a stub. Not really used in this PR.
Can we make this fatal log?
This line is the same as `data[:-1] + np.diff(data)/2. = data[:-1]`
I'm not sure this is correct. The `Suspender2.render` should be called once and not once.
Layout/TrailingBlankLines: Final newline missing.
E501 line too long (118 > 115 characters)
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Should it be the responsibility of the pool to return it? I mean, why do we need to use the pool for this?
Why not use `Ia2Web`?
Why did we change to Set? Is there a reason we are not using Set? It seems that the type of the data should be a `DigraphNode`.
Why do you need this?
I don't think this is necessary.
I'm thinking this should be a pointer to avoid any potential panics.
Is this a bugfix?
We should also test the case where `cyrillic "l" is not mistake` here
I would just call this `agentID`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I'd like to see this log entry be in the finally block. Otherwise, the message won't be printed when the catch block is reached.
I'm not sure about removing these settings. We don't use them in the code anymore and there's no reason for them to be there.
I'm not sure this is necessary.
Why did you add this one?
No star imports please.
@Fryguy this is the only change to the file. I think it's fine to leave the ip here.
I don't think this file should be removed.
I think this is the only line in this test that I'm not sure about.
Remove unused import
Is it necessary to keep this flag? Can't we just do `sStoreStipendNeeded != Gas.ZERO`
I think you can remove the lambda here
Is there no other way to find a manifest with this id?
Is it possible to have a string here? If it is, we should be able to use `ReadPreference(readPreference ?? 'default')` to get this behavior.
nit: this can be removed
Why did you remove `auth_thrift.py`?
I think this should be `if (`
Can we make this `private`?
I'm curious why these are needed?
We should move this to the `before_action :authenticate_user` block
Is it worth checking for `content-length` in the expected headers?
This file is now a custom task, and the task is now a separate file.
I would use `OrderItemFactoryTrait`
Shouldn't `ReadFrom` return an error?
Why is this needed? I think you could just return a *jose.JSONWebKeySet directly. I don't see any reason why we would need to pass in the modified time if the returned keyset would have been modified. Also, the `bool` should be named `modifiedTime`.
I think we can remove this file. The `param_override.properties` file is already used by the `EventReporterConstants`.
I think I'd prefer we use a `type RunFunc func(c *exec.Cmd) ([][]byte, error)` instead of defining this as a type.

I'm not sure why you changed the behavior here, but the original code used `/tmp` instead. I'd rather we keep the same behavior here, but use `Path.Combine()` instead of `Directory.Exists()`
I think we should move this import into the new `api/server/v2` folder.
This is a bit hackish. I think I'd rather just set this header in `start_headers` and `end_headers` instead, and let the client decide which header to set and what not. This way we wouldn't need this extra header. I don't have the opinion about this, but we should think about it a bit further.
This is a good change. It is just a style fix that we should not be making.
Should this also test that the backoff is triggered when the node is not in the cache?
I think this should be a macro instead of a #ifdef.
I'm curious, is there a reason why you moved the declaration of originalSchema into the constructor, and not the constructor?
@dunglas Is it ok to remove this field from events? If the avatar_filename is not set, it will be used as a placeholder.
We should be checking for the same error in the client, and returning a generic one if the client is not supported.
Is `DefaultTextMapPropagator` a valid default value? If not, I think we need to make sure it does not throw an exception when the value is null.
Why remove this?
I would prefer to keep the `Access-Control-Allow-Origin: *`.
This will need to be added to the `HTTPSHandler` class in `sentry.urls`
@jimbyo @saradbowman I think you need to add `textbox` to the requiredOwned array, too.
Why this is static? Can't it be just a member function?
I think we want `IPinIP` and `VXLAN` here, and the `VXLANVNI` below.
Should we have a `putJSONObject()`?
I think the previous test was better
Why not use `empty` instead of null?
nit: maybe just "error when unmarshaling broadcast message"
This was the main issue with GString. I'm not sure if it should be removed, or if it should be changed.
I am confused. The previous version was correct, but why do you need to make it `nonzero`?
I would suggest to move the import to the very top of the file. Also, I think we should be using the same import everywhere, instead of re-implementing the same code.
I'm not sure what this is for?
Extra empty line detected at body end.
This should probably be `Dimensioned`, since it's in the same package as `OrderedDict`
Please revert all these unnecessary reformattings
This looks like a mistake, it doesn't seem like `std::size_t` is ever used.
`proposals` can be a list
Why the newline?
I would rename it to `initialCapabilities()`.
Why did you remove these?
Is there a reason why you are using the `pd` library here and not just importing this from the module?
nit: `brokerSystemNamespace` is a bit confusing since `retry` isn't the default namespace and `retry.brokerSystemNamespace` doesn't seem to be used
Is this the only way we can make it work with the `puppet` binary?
I think this is a good time to make this a global variable so that we can change it in other places
I would prefer to leave this as a pointer and use a `string` pointer to get the actual name.
Please remove unused imports
Please remove this
Why was this removed?
This is not correct. The `img` element has a `alt` attribute which we want to use to display the `<img>` tag.
Please revert changes to imports.

I would rename the package name to just `factory`.
I think it's better to have this as a function that throws an exception
I think the `Number` conversion should be done in a helper method, so it can be reused here
This change seems unrelated to the PR description.
I don't know why you removed it. It's just for consistency with existing code.
why is a mock empty?
We should probably add this to the copy package in the same PR.
`c` is a boolean, but it's a `char*`.
Can we use `current_user.is_a?(User)` here instead?
I wonder if we should just have `reader` and `path_resolver` be the same thing?
I don't really like this change. I would prefer to keep the original code, but I don't see a better alternative
I am not sure if it is good default concurrency.
This should be `return if conn.table_exists? "test_client_requests"`
I think it's best to use `if(ptr == NULL || ptr == 0) {`
This will not work as expected. You'll need to use `<%= t("mailer.welcome_mailer.welcome_notification.text") %>` instead and add it to the end.
This is a pretty big race condition. We're going to get a `Unlock` on the `AddSystemAccount` function, and we can't hold the lock until the first `AddSystemAccount` is called. I think we need a `Lock` here, and a `Unlock` on the `AddSystemAccount` function that will hold the lock.
This is a little misleading. This should be called `chromium:enableDownloading`. It is not a boolean but a boolean that is not true. Also, `chromium:enableDownloading` does not make it clear what it is.
This is the one place where the validator should be deprecated.
I don't really think we want to add a new constant for this, but I think it's fine.
I'm not sure if it's the right place for this file. For instance, if we have the `google_cloud_storage_bucket_name_pattern` rule, and then have `google_cloud_storage_region` in it, the rules file won't be listed in `FORSETI_V1_RULE_FILES`
Can the `singleFilePath` ever be empty?
this was actually a bug, `fi.IsDir()` was returning `false`
I don't think we need this conditional here. This should just be `current_page?(me_path)` (or maybe `page_exists?`).
Use `%w` or `%W` for an array of words.
Why is this needed?
This was useful for debugging and is probably not needed. We could also log the event.Status in the message.
nit: I think it's more efficient and clearer to use the string `v.Event` instead of the raw string
Why do we need this?
Why remove this validation?
I don't think we need this here as the model spec helper will include the spec helper itself, which is not the way to go, and it will also include the environment spec helper
I'm not sure what's happening here, but I think that the `Chmod` should be after `os.Removeall`
I'd like to see the caching done via uplink's config.
Why did you change this?
`num_blocks` should be int
Why is this needed?
Metrics/ClassLength: Class has too many lines. [211/100]
We should log this error as well
I'm not sure why this is necessary. The `<3.8` is required for Python 3.5. I'm not sure why `python_requires` is used here.
I'd suggest using `\Phar\Phar::getPath()` instead of realpath, it's more readable.

This test is now failing, as `HistogramInstrumentKind` is now `sdkapi.CounterInstrumentKind`.
I think we should not add this method. The BlockEvaluator should be responsible for resetting totalTxBytes.
Line is too long. [82/80]
This should be `format_resources`.
I'd move this notice to the language confirmation flash, as this would be the only flash notice to be displayed.
Is there a reason why we need to change this?

We don't use wildcards for import.
This is a weird place to use an alias.
nit: can probably remove
`logicsig` is the logicsig that you want to use, right? `logicsig` is for a logicsig. Maybe `logicsig` is better?
Why was this removed from the code?
Should we add this condition to the existing validations above?
Can you please add a todo to add the other time values? We might want to start using a config file for the export pipeline, or even use a different one if it's a different one.
This should be a `fmt.Errorf("expanding email address \"%s\": %v", iss.Email, err`)
why the change?
missing whitespace after ','
This seems like it should be `viper.GetString(projectFlag) == ""` to preserve the original behavior.
Should it be `bytes == null && withZeroX ? "0x" : ""`?
Is there a specific reason why you moved `return` out of the `forEach`?
I think this is no longer used.
This is not required.
This should be called `approver_aware_email_address`

I think the indention is off
I think the original was more readable, as it's the only argument to the function and not really needed.
`auto &player` instead?
I think this is a typo.
Should it return a bool instead of an error?
This should be changed to package private instead, otherwise anybody can create an anonymous class that is not a subclass of Analyzer?
Why not default 1 as well ?
why is it removed here?
Should we log an error?
This is the only place where we use `registry.Chains()` in the code. I wonder if we should move it to a `chain.go` file.
I think this would be cleaner if `ContextWithRemoteSpanContext` just took the `SpanContext` as an argument instead
You don't need to specify a default value here, it's the default value of the constructor
This will need to be changed once the feature is released, so this should be `<%= SecureRandom.hex(64) %>`
This tests that we don't raise a ValueError if `axis=1` is given.
Shouldn't we also check that the size of the mcontext is 0 and not larger than the size of the opmask storage (which is the same as the mcontext structure)?
Can you add this directory to `/etc/docker/config` instead?
I think you can remove these two lines. We only use them for ESP, and the default is already 38.
I don't see where `T` is actually used. Is it just for the tags?
This is not needed.
I would prefer if we can avoid the note. A configured requestlogger will not log
Why did you remove this?
This is the same as the first one, isn't it?
What is the reason for setting the error msg twice?
I think the name is confusing. I think this method should return the `CoordinatorState` object instead of boolean.
nit: this is not necessary anymore
This seems wrong?
I'm not sure why this change is needed?
I'm not sure this is correct.
We need a `from io import BytesIO` at the top, so that this is a no-op.
This is an internal method, so we should panic instead of panicing on unsupported.
I think you need to check `if '_fpInfo' in mol.__dict__` here.
This is a copy of `ValidatePipelineBindPoint`, which already checks if `skip` is set.
@damianlegawiec I've renamed these parameters to `title` because the URL is a URL.
@sebastian-palma can I check why this is changing it?
We can't remove this method as it's only used by `BaseExchange` now.
This is the default release level for client libraries, so I think we should leave the method.
missing space around >
nit; typo `directroy`
We should not remove this.
this is not a python 2 thing, but it's better to leave the old way in
I think we can remove this line, it is not needed.
I would prefer to not use "retry" in such flags.
The option name is not accurate. It can also be used to sign an installer.
I'm not sure this is the right place to do this. If I set the node port as 0 as the pod has no port set, it will be assigned to the default node port (which will never be 0), which would be wrong. We probably want to set the node port to 0 if the pod has no port set.
this should be dokan.ExistingDir
Can we use a unique_ptr here instead of a std::vector ?
Why was this removed?
Should we add an `elseif` here?
Please add `\Concrete\Core\Coupon\Type\FreeProduct;`
This one is the only change to the URL
This should be added to `Properties`.
I think the `%1$s` is not needed anymore, since we're already in the `sprintf`
Is there no other way to do this than just making it the default?
I would suggest to check for nullptr first.
e,  `std::chrono::steady_clock::now (), block`  e  `std::chrono::steady_clock::now ()`  e eee.
This should be wrapped in double quotes.
Shouldn't this be `ExecuteExecution`? The method should not be called in this case.
I'd rename it to `DefaultNewBlockDataVersionForNewBlocks`
I don't think you should remove those attributes if we are just going to make them non-thread-safe.
Nit: I think we should say `failed to get OpenTelemetry Tracer from Service Provider.`
The new parameter is optional, so it should probably default to the `config.PORT_SES`
I think we can remove this TODO
I'd use a better variable name here, like `is_use_tqdm`.
I don't know what the purpose of this test was... I'm not sure what this is doing.
The indenting looks off here
This test is still relevant.
Missing license header.
Please sort use statements alphabetically
I think we should use a different charset here.
why not use the existing informer? I think it's better to use the new one instead
Shouldn't we use a pointer here?
this will close `handler` if `err` is non-nil, right?
Why did you remove `implicit`?
These changes look unrelated to the PR
nit: can remove extra line
I'm not sure what this is for - what does it mean?
We should return an error if we have no history
This looks like a bug fix. Should this be in a separate commit?
I'm not sure if it's the best idea to have this here, but I'm not sure. I think the easiest approach to doing it was the other way around.
We should also escape the id
Should we use a debug_print() for this instead?
I don't see this method used anywhere.
This file was missing the headers
nit: rename `fileProjection` to `projection`?
I wonder if we should do the conversion here instead of in `to_s`? That way we can do this in the `to_s` method without needing to duplicate the conversion? Or we could do it in the `to_s` method?
This is a new gem that we're adding. We should add a spec to the new gem
I don't like this change, I'm pretty sure we'll be running a lot of things at the same time (and it's very rare to run more than 20 times). We should just make `WithMaxTargetIterationCount` default to 1.
This is the actual fix
This seems to be a bit weird, why is this not part of the migration logic?
Can we remove this?
I'm curious about why this needs to be added here?
I'm a bit confused by this. The `TopicPayloadPoolRegistry` is used for `TopicData`, `TopicMetadata`, `TopicPayloadPool`, and `TopicDataManager` to represent data structures. So the `TopicDataManager` should be a child of `TopicDataManager`, not a parent. Is it correct that this `TopicDataManager` should be a child of `TopicDataManager`?
I think we should rename this field as well, as this isn't an accompanying block
This method is never used. I don't think you need it.
I'm not 100% sure if it's possible to have both annotations and raw. I would assume that the annotation is not used at all, but the raw mode is only used for annotation and not for raw.
This should probably be a pointer receiver instead of a pointer receiver.
This should be a number, not a string
This will break if you import the `consts` module.
We need to rollback the primary as well.
Should this be 0x000000000000?
I would suggest to use `RuleViolation` rather than `RuleViolationFix` here.
`listfn` is a better name
I think this can be removed?
Nit: I'd rather this be `aws-sdk-go/aws/api`.
Shouldn't we return an error?
Is the `Append` option only available in Hadoop 2.3 and up?
We don't need the empty line.
Should be `-1`
Please use `from qutebrowser import qutescheme` here and in the other modules. It's more readable and consistent with the rest of the codebase.
Can you please make this a local variable and initialize it in `init()`?
I think this is not a good message, it could be something like `"HTTP repository name is not allowed by HTTP protocol"`
I don't think you need this test.
Can we use `reflect.Func` here?
`nameLower in doc.js` ?
I think we could just do: `members = append(members, m.externalNodeCIDRs...)`, no need for the `[]`
I think the check is not needed here
This is a duplicate of the line above.
Nitpick. It would be good to add some doc string for this method, since this is only used in `check_batch_size_range`.
Is this necessary? If we are going to close `remoteConn`, then we can just call `np.consumerProxy(consumerPort, remoteConn, stop)` directly.
I wouldn't change this method signature.
I think you can use `GroupMembers` here too.
What if we want to add a new prefix, like `.config.` ?
I think we don't need this change anymore
this line is now obsolete
I'd like to see this in its own PR with a test that makes sure this method actually creates a volume, not just a group
I think you could just do `excessDomChildren.length > 0` here? If it's `null` it will throw an NPE in the `removeNode` below.
Why not `array_merge`? I think it's faster and also allows to set a single filter, no?
Why do we need this check?
I guess the word "weitere" is still there in case someone has a better suggestion, but just to clarify, I guess "weitere" is the one you intended to say "weiten".
This test should have a different name since it's actually testing the delete.
This looks like it is just a whitespace change. Is it really necessary to make this change?
This is an API, I would rather not have it in the prototype.
I don't think the tests in this file need to use `initBlockRetrievalQueueTest`
This is a whitespace change that needs to be kept.
This is not the right resource name. This is a resource that has an associated resource.
This is an interesting change. Why did we have to change the `hasAttribute` check?
I would use flatMap instead, since we don't care about the order of the project's items.
this needs to be added to the docs

I think this will cause a circular import
Why do you have removed the `len` parameter?
"one or more credential types"? or "only one of the following types"?
Why the double `../` here?
Please add the new parameter to the docstring.
Why did you change to `kinto`?
I think it's a little clearer to use `str` instead of `%` and then just use `print()`
I am not sure if we really need to add this condition here?
I don't see this being used.
File is not `goimports`-ed (from `goimports`)
We'll need to add this preset to the `.eslintrc.json` file in this PR.
I think the reason is still useful here.
why this is changed?
This is the only change I see.
Why is this change needed? Is it a drive-by change?
I think you can use flask.current_app instead
I'd prefer not to pass a long domain feature set here
This should be apt.get install
I think this should be `avx512_code_in_use` to match the `dynamo_init()` name.
I think the `jpgc-*` versions are not needed anymore.
Shouldn't the property be named `EndpointUri `?
I would be in favor of adding a note in the changelog explaining the usecase for these values and why we need to support them.
This change is not necessary.
Isn't this the same as `newval &= ~EFLAGS_ARITH`?
I think this is not used?
We should also update the `NugetVersionReplace` function to `FullVersionReplace`.
@JasonTheAdams this should probably be `setup_single_page_styles()`
This is the main change in this file.
This function name is too generic and could be misleading. How about `getCopiedFiles`?
This was the only reference to this field, but is now no longer needed since the copy operation is now done in `Volume` constructor.
We can use `require.NoError(t, ...)` instead of `require.EqualError(t, ...)`.
I think we can remove the parenthesis here.
Is this really needed? It seems that all fields of this class will be read by the `getDynamicFields()` method.
I don't understand how the `InstanceRegistryFailedEvent` is used...

Should we remove these tests?
This will break the API when `GC.stats` changes. Instead, we should check for the existence of Puma's `Stats` table, and if so, return a hash with a key that maps to the JSON representation of the stats.
I guess this is the only place that would use this switch. Is there any other way we can do this?
This should be a method on IHasHttpMethod.
this is a breaking change - the previous version of `runtask` is not in the `RECONCILED` state.
Layout/SpaceAroundOperators: Surrounding space missing for operator +.
Nit: please revert the changes to this file since we're not going to touch it.
Can we have this in TableMetadata instead?
Why do we need this import?
We don't have to do this. We can just pass the options in as an empty dictionary.
Why is this not supported by the libfabric?
I don't see why we need this. It's only used once.
This setting doesn't appear to be used at all, so this is unnecessary.
I think this is not the correct place for this. The Telemetry should happen after the BeginMethod handler is invoked, not after BeginMethodHandler.
Why is this being renamed, but not the other way around?
Should this be `@AutoValue` to match the interface in the class?
Why remove this?
I think it should be `nodes=windowsrm_nodes`
I think this is a bad change. The original author of the file should be the first thing who made the change.
I think we should not return NULL if the table has no lob column.
Should we add `private readonly object cache = new object();`?
This is a bit hacky, but I can see why it works and not a good idea. I'd say we should use a more generic icon.
This is the actual fix - we have to use the id field for collection collection requests, which means the collection is being created and not yet created.
Why did you remove those lines?
nit: can you move to just before `internal`
This is an expensive operation, I don't think this is a good idea. We should just check if the prefix exists in a single place. The `Store.Exists` method should be used only when there is no such key, and it is not a problem with the existing code.
Should we be checking for a file and not a directory as well? Or is there some reason for the directory to be not found?
This needs to be `Daniel van Noord`
This is probably not needed. The element itself is already a vanished.
Why do we need a separate flag? We could have just enabled it in config.go and then enable it in RunCLI.
@joshcooper is this correct?
nit: `voteFilterRequestEvent{RawVote: inputVotes[Num-1].(voteAcceptedEvent).Vote.R, Proto: protocol.ConsensusCurrentVersion}`
I don't think we should be changing the behavior here. We want to allow the URL access even in the case where the services share IP address with each other, and that the service's location address is the same as the service's IP address, and we can't keep the connection.
nit; remove this line
@mstruve I think you should use `@account.user_id == current_user.id` here, because this will prevent the user to see any disabled accounts.
The collection of the selection layer levels where the whole row was selected using the row header.
This will be a very useful info for the admin and the admin.
why remove the print?
I'm not sure why we are doing a full scan here instead of just a single row?
nit: I think we can remove this else and simply return err
This should probably be `subprocess.check_call(["docker", "network", "disconnect", network, container], ignore=run_error=True)` to avoid a failure if `run_error==False`.
Is there a reason to mock schema man here instead of just passing nullptr?
I think the convention is to use `// +build !windows`.
I don't think this is correct. The scope is not the same with the current scope and is returned in the next line.
I wonder if we should just make this `true/false`, since the service is already in the `Labels` field.
Shouldn't this be `default: true`?
I wonder, is there a reason this is not in the `plan.html.erb`, and the `download_plan_page_title` is only there for the "plan" page?
I wouldn't bother with this change. I would prefer if we keep the `keyparser` package simple and not have `keyconf` in its own `__init__.py` file.

Why is this being removed?
This code is repeated many times. I suggest to make a helper function.
I would prefer if it was more explicit and clear that you are comparing a result code.
This should be a separate commit.
This should be `--goquorum-compatibility-enabled`.
Line is too long. [82/80]<br>Unnecessary spacing detected.
I think we should add `app.ContainerName()` and `err` to these messages, so that the error will be shown to the user
Please remove this extra blank line
nit: this should be grouped with the other "github.com/xxx" imports.
this change seems unrelated?
Why do we need this?
I wonder if we can use `Object.keys` instead of `forEach`
I think this should be called `MakePublicS3SessionForDownload`
This should be moved into the base class.
Is it ok for the dialect to be logged in this case? I thought we'd have a `DEBUG` log for this
Is it worth having this as a struct field? I don't see the value in keeping it in the workflow struct. I'm not sure we really need it as a struct field.
Why not just return the `gcerrors.Code(err)`?
this is still necessary, as the timeout is now handled by the smart contract manager's `CreatePayment` func
This should be `with open(statePath, "rb") as f:`
`qstring.method` is not used in any of the other functions, so I removed it from `validateRead`
Is there a reason for having a default here?
I don't think we need this here. We are already in a `previouslyDeployedConfig` variable
The same as above. The assert should be removed.
I don't like this change... I think it's better to have it in a separate commit.
I don't think we should be changing this. The original code is correct.
I think the subject should include the `cc` as well.
This test is no longer testing what was being called.
I guess you could use the `.get` method here?
I'm not sure if this is the right approach. I think we need to make this method static and call the other one from the `EasyAdminExtension` class in `EasyAdminBundle\Security\SecurityExtension`
This is a nice addition, but I'm not sure if we really need to do any of this check, since we are just calling `this.start()` in a `mocha.callback` handler anyway. It's a bit more explicit that it's not called from a mocha handler.
The 'name' var was unnecessary.
This is a very similar test in `pkg/apis/core/v1/helper/deployment.go`, maybe we can reuse it?
Should we also check for `-`?
This is a little hard to read, please extract this into a method.
Why not use `assertThatThrownBy()`?
`IsRegistered checks whether the given identity is registered or not.`?
`@memberOf ` needs to be updated too, since the `@func` tag is not marked as `@private`
Should we add the `pingTime` metric to this line, to keep it consistent with other metrics?
I think we need some more tests to cover this new functionality.
Can we also verify that `MintNewBlockWithActionIterator(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any())` is actually called with `blkToMint == nil`, or does this test need to be modified?
This is a bit awkward, but I think it's fine.
Nit: Unneeded new line?
Is this file still in use?
Should this be a constant?
I don't think this should be a separate configuration since it is not a block or action.
I would prefer `plans.reject(&:private)` to keep the `reject` in line with the rest of the code.
Why not use `NRF_UART_PIN` here?
Why can't this be a String?
Why is this needed?
I don't know if `key` can ever be `None`, but I think it might have some unintended side effects, e.g. the `__getattribute__` method would be used instead.

I'm not sure if this change is correct. I'm not seeing anything about the `PLAYER_NAME_LENGHT` constant being used anywhere in this function.
I think the idea here is that we can always force server check. The server will never check if we're using a cached cache. We should always be doing server check regardless.
This file is not in the `agent` directory.
I'd suggest to call this `EncodingError`, and then the method should return `errors.UnrecognizedEncodingError` (I'm not sure how the `Error`s are used elsewhere in the code, but maybe it makes sense to keep it consistent with the `ErrUnrecognizedEncodingError` naming?
Why is this change needed here ?
I think we need to do `evt.CommandLine.Trim(trim: true)`.
Should this test be changed?
I think you can just use Math.ceil
This function was not used anywhere.
This is a BC break, we can't add methods to the parent class. This breaks BC.
Why is this changing ?
I think it would be better to change the string to something like "failed to upload part number %s for vault %s, attempt: (%s / %s), filename: %s"
>currnent [](start = 38, length = 4) currnent
I don't think this package needs to be added, but I'm fine to keep it.
Why do we need to change this?
This is not a boolean variable, it is a function, so it should be named `hasSpecialCasedSyswow64`. Also please add `is` before the first `is`.
Why this change?
"return the result of the transformation"
this will always be `False`, no?
I think this should be a `Map<String, Object>` and the value should be a `List<Object>`
I wonder if we should just do this inside `AddTaskIPAddress`, instead of doing it in two places.
I wouldn't add this.
I think this will need to be `_updateVCSVersion()`
This change is not required.
Why this? I would prefer the original formatting if possible, but that's just my taste :)
We should probably return `fs.ErrWrap` in this case. The user could be confused with the password.
nit: space before the //
This seems like a good candidate for a separate PR, but I'm not sure if we want to do any validation on the metadata here.
Isn't this a breaking change to the interface?
This is just to make the code cleaner and more robust to bugs. The original code is more explicit and it's not obvious what's going on. The new code is more clear to me and more explicit to read.
this will break the bonus for fairbank block with no block height.
I'm not sure what the best way to do this. I think it should work without it.
I think it's better to import `struct` and not add `struct` to the imports.
This is not a debug message. Please use `log.warning()`.
I think this should be 0.
>when='${ndc:topframes=1}' == '':inner=:else=${ndc}| [](start = 16, length = 73) why is this changed to `ndc`?
`findAttributeIdsByProductId` and `findAttributeIdsWithBoundAttributeByAttributeId` are same.
This should probably be `FNMT_PERIOD`.
Why did you change this?
Should we check if job matches `o.jobName`? If so, we should probably return a `Not Found` error here.
This function is not needed now?
This seems like something that should probably be a method that returns `plan.has_active_subscription?`
You can remove the pylint pragma.
This was causing a panic when running tests.
Please remove the extra spaces here.
Why do we need this?
@mikedanese is this ok for the JSON output?
I don't think this is used?

I think we can just drop the usage for `effect1` here. We can't use it with `Slot` and `Ground` since they can be different values.
This interface is only used for the state roots, so it shouldn't be in this interface.
This is the main fix, it should stay here, as there is no way to tell the application the notification was setup without any error.
This list is used to store stats. It seems to me that the stats columns should be renamed to stats columns.
I don't think it's possible to have this method without deprecating it.
I think you should use stdlib headers for includes, not for stdlib.h (and also stdlib.h for stdlib)
I would prefer to use the same name for the variable as well.
This is just a shortcut to `GetSchedulablePolicy(c clusterClient, name, timeout time.Duration) (*sched.SchedulablePolicy, error)` which is not a common usecase. I would suggest that we return `sched.SchedulablePolicy{}` instead.
I think `url` should be changed here too
Please move this line to the beginning of the function.
Should we be using `email_recipients` instead of hardcoding the domain?
This is just a small change. The `pageWait` call will block until the page is ready and we wait until it's ready to be clicked. We can't wait until the page is ready, but we can wait on it to be ready before we click on it.
This is a new header and should probably be added to the `Microsoft.AspNetCore.Http.Features.HttpWeb` namespace as well
Why this change?
I don't understand why this is not in the `UserPreferences` class.
This should be a `Float`
We should probably remove this file from the `project.cpp` and `project_signals` project as well
Can we rename this to `FederatedClusterRefName` or something? I don't like this.
I'm wondering if `AddRPCAuditFields` should be called after `mintJWTSVID`, since the `req.Id` will be in `req.Params`?
Why do we need this condition?
Shouldn't it be `depositToRewardingFundGasBase` for consistency?
I'm not sure if this is an intended change.
I would add an `aside` class to make it more obvious that these things are about plans
You can use `sklearn.utils.estimator_checks.check_estimators` to do this.
Why did you change the default to None?
Why not just `system:k3s-controller`?
I think we should leave the original name here
Should this be in `Reports`?
I don't think this is needed
I am curious why it should return optional. I would return empty instead of null
This file is now unchanged
I'm not sure this was intentional, but I don't see it in the diff.
Why are we removing `loadXDPRaw`?
Can we test a case when we have an instance and a class?
I think this is not right. We want to show the record count, not the user count
We should probably just pass `realOpts` into `NewWriter` instead of the `*WriterOptions`
I think this is wrong - if `obj` has a `focusRedirect` property, we should redirect focus events to that object. Otherwise, we will have to make this check twice (and also the `obj.focusRedirect` line in this file).
I'm not sure why these imports are here, can't we just import `gcp_clients` from `osconfig_tests/config`?
This should probably be package-private.
Is this used somewhere?
Is this really needed?
I'm not sure if we should make this configurable, but for a moment I'm not sure if we should do that in the future. Maybe we can just make this configurable in the BESU config?
@mikedanese, @jtkech can you please review this file? Thanks!
I think this file is not needed
Align the elements of a hash literal if they span more than one line.
Can you please add a log message here?
This should be `base64.b64encode('%s:%s' % (parsed_url.username, parsed_url.password)`
I'm a bit concerned about this ifdef. The test data path is only available in the BAZEL_TEST_DATA_PATH environment variable. I would expect the tests to use this path, and the `.com_github_google_flatbuffers/tests/` directory. I'd suggest to move this logic into a test helper function and use it in other places, too.
this is the actual fix - the docs are now the same as the ones that are being indexed, so we need to make sure they are the same and the client date and time are correct.
This function doesn't seem to be used.
`decrease_subscription_count` should be called only if `ws_listener.decrease_subscription_count` is true (or is the loop needed)?
Line is too long. [81/80]
I'd prefer a name that doesn't imply that this is a no-op. It doesn't make sense to me that the name is "no-op".
Why is this removed?
I think we could do this in the `getScrollX` method, since it would be more performant.
I'd suggest to remove the `InstallerFilter` class from this PR as it is not related to the UI.
This should be workflow_id. We should not be changing the name. It is used in a few other places.
This is the only part that needs to be changed.
Why is this being changed here?
This seems like a good opportunity to make this more readable by having `beforeChangeResult !== null && beforeChangeResult.length > 0`
I don't understand this description
Is this change related?
I think the `getTransactionFromActionInfo` function could return an error if there is no transaction. If tx is nil it should return `transactionObject{}, nil`, right?
Can this be written as `if isinstance(commonname, basestring)`
`where("#{term.downcase}%", nice_name).limit(10)`? I think that's what the SQL query is for.
I'm not sure if this method should be exposed to the public API, as it is not public. I'd prefer to keep the public API as is.
This method is not used.
Should this be `int64_t`?
Is there a reason why you use `and` instead of `or` ?
Why not just return taskmanager->GetTaskName(taskid);
I'm not sure if we want to keep using cart for this. We have the same problem in `approval_proposal_url` and `approval_response_path`. It's better to use it for consistency.
Why is this needed? I think the import should be sufficient.
this needs to be done on every `include` otherwise it will be required every time
This is the big change in the PR description.
I think the name of this variable is misleading, since it only contains partitions that have been deleted.
I don't think we need this one.
You should check for null pointer here too
I'm a bit unfamiliar with the flow of this code, but is there some reason we're using a string here rather than just returning nil?
This is a temporary solution. The `component` constructor is not a functional component, and it's not used by the `component.create()` method on it.
Why does it have a default?
We should probably rename these.
Is this needed?
Can we move the logic of creating From Peers inside `toAntreaPeerForCRD`?

`isset($options['allowfullscreen']) ? true : false`
I think this is missing the `pageTokenName(Name.lowerCamel(fieldInfo.name()).toUpperCamel()); `
I think we should change the `home#me` route to `profile#show` as it's a new page that's created by the admin, but I don't see any issue with it either.
This should probably be a separate PR.
I don't understand the logic of this script. It does not generate anything. It generates the dataframes for the candidate set.
The `with_properties` method takes a hash, not an array.
Isn't that a breaking change?
I don't understand why we need to check for the attribute here.
I think this is not needed anymore since the static initialization of `DEFAULT` will happen in the constructor
Why did you change the logic?
I think "Cannot add" should be "cannot add to the"
I think you could do a `var foo string` and then do `foo += "bar"`
I think the old way was better, but I don't see why it is better.
I'm not sure this is a proper name. I would like some suggestions for better naming. `ORDER_PATH` is not very descriptive, but it is a very specific name that can be used by other parts of the API. Maybe `ORDER_PATH_KEY` ?
This change is unnecessary
Is this needed?
I think it makes more sense to have this as a default method, and have it be an optional parameter, which will allow for default values.
Why not make it a `DataType`?
This change is not necessary as the CSS files are in the correct package (the ones you are using in this file)
Can you explain why this is a new class?
This is the only change that I don't know why we need to make this change.
I think this should be final.
This is a bit odd that `ConnectOptions` is an interface, but I don't think we need to do this for this PR.
this should be the same as the flag
You don't need this. You are already querying the `published` table.
Why not just throw the error and let the caller handle it?
Can you add a TODO that we can remove this once we move to the iptables config? (It would make the code more complex, though.)
Is this case needed? Is this for the default behavior?
You need to add the `#include "../Util/Lua.h"` line back here
Is this really necessary? It seems like the caller can just pass in the kwargs to `.legend()` directly
I think this should be a warning. It's not an error.
I would use an interface here.
Should this be case insensitive?
nit: I think we should have some unit tests for this function and the ones below
@mjmhooper, @jmhooper, I think the `curl_easy_setopt` call is redundant. I'm also wondering if we can get rid of it, and use the new function. What do you think?
Why do we need this?
Should we remove `unix_socket` from `self`?
Shouldn't the parameter be named `toolType`?
Can we move this to a helper function?
This should be moved to `pkg/stack`.
nit: `new MetricStreamConfiguration() { Aggregation = Aggregation.Drop }) ` -> `new MetricStreamConfiguration() { Aggregation = Aggregation.Drop })`
why not `range`?
This is a behavior change, right? Previously the type was unknown if it was a template. Now it is Type::None if it is a template or not. This is not a behavior change, but I think it is an issue.
I wonder, is the idea that if we're going to use this for dense feature groups, wouldn't we want to copy the data of all the features in `num_data_` as well? Or do we want to copy the dense features into the GPU?
I don't think this is correct. This will change the `flipud` behavior, so the result will be unchanged in the case of `flat=False` (it's a `flipud` call), but the test should still be correct.
I think this is the right fix.
Why do we need a `DataWriterListener` here but not in `DataReader` and `DataReader`?
This seems a strange name for this?
I'd like to avoid this if possible. I don't see a good reason to cache it.
This seems like a bug, it shouldn't have to be passed through here.
Shouldn't this be `2016-2017`?
This seems like it should be a `path = URI.parse(...)` call, or at least `File.join(...)`.
Why are you adding this conditional here? This is not used by anything.
It seems that this is a bug in the current code (and the one at line 536). If `inputExpr_` is not an input expression, `inputExpr_` will be `nullptr`, and it should be `nullptr`.
This should probably be an `AppTemplatePath`, since the path to the buildspec will also be passed into this function to create the application.
I am not sure why this was removed, but the previous version seems to be more readable and the old version was more readable.
why do we need `context.Background()`?
This should be `period.nanosec`.
I'm not sure about this error name. I would rather have this in `yarpc/discovery/transport/errors`
Why not add this flag to the `-analyzer-config` list as well?
I'm a bit concerned that we're changing the defaults for this flag. We could make a change that would allow us to have different default overrides, but I don't want to block on this.
We have `isImageElement` function, maybe it's time to move this to that file as well?
I think it's better to just catch `UserScriptError`. It's not really a `CommandError`, but rather a `CommandError`
This will fail if the value is of type "number"
Why this change? The code is correct.
SyntaxError: EOL while scanning string literal
This description should be changed. The `permaLink` is not displayed when loading the home page.
This is not the same, I think.
Use the new Ruby 1.9 hash syntax.
This is the only place where we use `Util.format_windows_path()` - we should probably just inline it here.
I'm not sure if the original message is clear enough.
I think we should remove this `if` statement.
The change from the existing condition to the new one is good. I don't think this will affect the code in this case, but it might be a bug in the original patch.
Why is `cli.hasOption("cluster") && cli.hasOption("collections")` not sufficient?
Is this really necessary? I don't think we can just check the size of the two pointers, it seems.
Please, use `get_bool` here instead.
I'm not sure what this change has to do with filecoin-project - it is not clear how this should work
I don't understand why this is necessary, it looks like it's only used in the `QWidget` base class.
I think the import is not used anywhere, is it?
Should be `LocaleContext.cpp`.
I'm not sure I see the point for these methods. They are only used by the `IAutomaticTracer` interface.
I guess the change is because this line is causing an error?
I think it would be better to have a `custom` prefix for all the properties that we want to use in the Azka Core. We could also rename the `flow` properties.
We need a more specific exception type for this error. It's not an error in this case. It's a promise library error. I would recommend `TypeError` for now.
This is not necessary, we are only using it for libuv, right?
This should be `final`. Otherwise the `DBCStatistics` is used by multiple threads.
This is an example where I'd be surprised if it's worth logging a message.
@wangdi0607 can you confirm it will be possible to use async ops in hbase-base-access? If so then I think it will be better to use the same approach here as for the other two.
Is this the only way to output to the terminal? I'd rather see a debug message in the `cmd.go` file, just to make debugging easier.
This should be named `kbfsConfigDirTemp`
Line is too long. [84/80]<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
We can avoid adding new imports in Flink. I would recommend to add `@SuppressWarnings("deprecation")`
Shouldn't the error return here be something like FLB_RETRY_INTERNAL_ERROR?
Why are you checking if the config has been set?
I'm a bit concerned about this. The reason I ask is, the foreign keys are not unique. We could use the `@ManyToOne` annotation to ensure that the `DataFile` is unique.
I guess these should be removed.
Should be `LOG_DRIVER_CONTAINER`
Shouldn't the line be `line + matches[2].start + matches[2].length`?
I think we can remove this.
Should this be true or false?
This is wrong. You cannot use the Request class directly here. The class should not depend on the request.
This should be the struct definition, not the fully qualified name.
`blocksToDeleteWaitGroup` is unused (from `structcheck`)
I would suggest to log a warning, and then we will see if it introduces downstream issues.
I think this method can be static
This is going to be a BC break for anyone extending image templates that have `class` attributes.
Can you please change this to an error?
Why is this removed ? It looks like it's still being called.
`Array(options[:page_ranges])` can be `options[:page_ranges] = []`
This is the actual change. The rest is just cleanup.
I think `Comparable.naturalComparer` is better here. `Comparators.naturalComparator()` has the same effect, but `Serializable` doesn't. Also, I think the `Serializable` should be replaced with `Comparable.naturalOrder()` in the `RedBlackTree` constructor
This was a bug in the old code and it was not working correctly for me. I have a fix in my branch and it is working correctly for the search suggestions.
Why did you remove this?
This is a bit weird, I guess I should just add a `go:build` to all these files instead of disabling stage builds.
I'm a bit concerned about this. This may be used in other places. We have a `trustdomain.ConfigSource` that can be used to configure the trustdomain and the trustdomain config sources, which could make this harder to read. We could also make the `TrustDomainConfigMap` return the trustdomain config sources, and then the caller can just pass it into the `DataStoreTrustDomainConfigSource` function. I think this is a better approach. But I'm not sure if we care about the config sources.
I think this is an actual bug in the rule, not an error. The error message should be changed.
This class is not thread safe, so we should not make changes to this class, but rather create a new instance of the MetricsConfig in a static block, then create a new instance of the config in a static block.
This is the main fix, the rest is just whitespace.
I think this change is incorrect?
I think this class should be renamed `TestSearchRamUsageEstimator` now?
This should be done for every module, not only in powershell.
I think this can be simplified to `class="modal role="dialog"`
`SamplesGenerator` is now using `Google.Cloud.SamplesGenerator`.
This is wrong: if we add a tab to the list of tabs then we need to do something to remove the tab and then re-open it.
Why not `marshalers := request.HandlerList{...}` instead ?
I think that this should be handled in the `onKeyDown()` callback.
I think this will not work. `checked` is not an attribute of `input` but a `textarea`.
I think this should be in a separate package since the glue-code is already present in all node packages.
This should be an option instead of a string
Why not call it `key()`?
Why not log the error here as well?
I don't think you need to split `__version__`. `split()` already returns `[int(part) for part in __version__.split('.')`.
This is the only one of these errors I could find, not sure why it was added. The only place it was added was the line number. The other ones are the other lines.
Should we rename this file?
nit: this should be `LOG.debug` as well
Why is this needed?
I am wondering if this is the right place to put the job executor tests
check
I guess you can do `m_thread_cv_buffer.resize(1);` here. And also `m_thread_cv_buffer[tid] = cvMat;` is enough. But if you need to clone the buffer, please add `std::move(cvMat)` here.
I think we can just use `CloudRunApp` for the same thing as `KindCloudRunApp`
I'm not sure this is a good idea, but I don't see how it's possible to get `RECT.SIZE` and `RECT.LOCATION` from `w3c`. Is it because of a bug?

I think this should be renamed to `Hostname`
Is there any reason you're removing the node config?
Is there anything special about MODPRIVATECHAT in the code base?
Isn't this a copy of `outbounds`?
I would prefer to keep the original implementation as well, since this interface is used only for tests. We could add a public method in `IMvxViewModel` to return a `TaskCompletionSource<TResult>` that would allow us to use it to close the model, without the need for a property setter.
I think we should just use `img.shape[-2:]` here and not have a `tuple`.
why not just use the `KECCAK_256` instance?
I don't think this will work. The `array_merge_recursive_overrule` is not available on PHP 7.4
Why are we changing this? It doesn't seem like it's relevant.
This method should be removed.
Shouldn't these be moved to the `molecule` subpackage?
Missing header file.
File is not `gofmt`-ed with `-s` (from `gofmt`)
Extra empty line detected at module body beginning.
I would move this into the `if err := os.MkdirAll(fullPathDir, 0755); err != nil`
Nit: this is redundant with the package name above (it's already in `pkg/util/assert.go`).
Should this check be `||` instead of `&&`?
This is the new import I removed from this file
Why do we need this?
Why is the tolerance changed here?
Is it worth checking for >0 here as well? If it's >0 then the `else` block will never get executed.
I think you need the `if f.Vectorized != nil` check here, otherwise you are modifying the `FunctionExpression`.
Why is this `render :new`?
Use `oneapi::dal::io` namespace
I'd prefer to use an `elsif` here, since it's not too hard to follow the `or` syntax for this kind of thing
Should we be calling Complete here?
This change is unnecessary as `options[:recursive]` will always be nil in this case.
What do these do?
I think it makes the code more readable if we just do `const message = this.plugin.uppy.i18n...`?
Why is this change needed?
I would rather not use `MongoError` here, but rather `Exception`.
I think you can use `_layout` here and get rid of `cachedResult`
I would prefer a `private final` field here. I know the class is immutable, but we are trying to move away from it.
This seems like a pretty big change. Is it really needed in this PR?
This is not a good idea, you need to check that `process.argv[2]` exists before trying to delete it.
This will catch a `FileNotFoundError` which is not caught anywhere.
This is a little strange, why is the `numeric` parameter necessary?
This should be `if (slaOptions != null && slaOptions.size() > 0)`.
Should `AllowAdditionalRoles` be called after `EnsurePoliciesAttached`?
This is the same as the parent class.
I think the title should be changed to "delimiter" as well.
Can we add some doc here explaining what this does?
I don't understand, why did you change this? The original way of setting `_runtimeDescription` was to use the new `FrameworkDescription` class, but the new way was to set `RuntimeDescription` to the new instance of FrameworkDescription. This is what's causing the problem of the test suite to fail.
This should be `>= 2` not `== 'gz'`
Why do we need to change it?
I would prefer if this was in the `core` folder, not here
Please remove this empty line.
This will break the XML schema. The type is not always the same as the type in the XSD file.
This should be moved to the `Packet` class as well
This should be a setting, not a setting.
@sle-roberts I'm not sure what this means. Are you using a vault secret anywhere?
Why is this line necessary?
this seems to be a duplicate import
It seems like `JavaPluginConvention` is still used. Can it be deleted?
We could probably get rid of the `util.CheckErr` here and just return the error if there is one.
can you add a note about how OVS uses TOS to present DSCP?
I think you should remove this function and replace the `makeText` with `makeCxSmilesText` as well. I'd say we shouldn't be doing this, because it's not needed.
Is it really needed?
These changes are not related to the PR.
Why is there no `name` in the entity?
I don't think we need to add the `outboundIp` field here, as it's always the same as `ip`.
This file should be removed. It's only used in one place
This seems like a weird change...
This function should be moved to the `utils` module.
We should log this error.
I don't think we want to keep this wait.
This is not necessary.
This is not necessary as we are only using the lock to access the store in the constructor of this class.
I think the name of the action should be something more meaningful, such as `show` or `update`
I think that this message is a bit misleading. It should be something like: Este :attribute já está ligado.
As there is no test file in this pull request nor any test function or class in the file `databricks/koalas/frames_extraglobs.py`, please provide doctest for the function `extraglobs`
I'm not a big fan of this error variable but I guess it's a matter of taste, and I don't feel strongly about it.
Is there anything in this file that is used for both the `AddTasksRequest` and `CloseShardRequest` ?
This is a bit weird, why not have the partial return `nil`?
I'd rather this return an error, as we can't know if the metadata is valid or not
These should also be added in `python_docs.rb` as well
Why was this removed?
Should be MvxOverride
I don't think we need this anymore.
I am a little bit confused why you have to do this here and not in the `setupSyncsSoupIfNeeded`, is it necessary?
This is a bit confusing, because it's not as common as songs. How about "Show Artist by default if a song can have multiple album artists, which specific one would this option refer to"?
Shouldn't this check be in `load_data_types`?
I don't think we need this test.
I don't think it's necessary to add the options here if we are going to add `self._get_selenium_profile()`.

This is not used, so I think we can remove it.
Why is this necessary?
I'd use `UART_ADC_PIN` instead.
Can you move it to the selector itself?
This is going to break if someone runs the `config.action_mailer.asset_host` on an http://localhost:5000 url, right? If so, we should make a default in `app/assets/default.rb` and use that in both places, otherwise we'll end up in the middle of the `.ngrok.io` URL, which may break things.
This setting is a bit confusing. It should be called `updateManagerAfterBackendLogin` to make it more explicit that this is a flag
nit: unnecessary using
This is the only place that we actually do this -- the `TelemetrySessionParams` struct has a `DisableMetrics` function. We could make the `DisableDockerHealthCheck` a function on the `TelemetrySessionParams`, and then use that for the other tests.
This seems to be the only change. The other changes seem unrelated.
I'm confused about `provisionFailedTerminal` here; it seems to be set when we transition to `stopped`, and then set again to `false` when we transition to `stopped`. Shouldn't the value of `provisionFailedTerminal` be updated here? Also, why would it ever be updated to `false`?
I'm not sure if the command line argument should be called `appName`.
@joshuahoo @sfc-gh-mmu I think we need to add some additional information here.
I don't like that we have 2 separate functions, one for filter and one for filter_ref.
I don't think we can make this a flag - we can't really test this. It's a simple feature to do with the RPM. We should make this a flag and make `test-rpm-hydrated-test` a flag that is only used in tests.
I'm wondering whether the function and optional are still needed. The function and optional are not part of the contract, and so the function and optional could be removed. I'm not sure how this change affects the semantics of function, struct, tuple.
I would just pass the entire string in here.
We have this in a couple of places already, maybe we can create one in `selector`? (not sure!)
This should probably be in axe-utils instead of utils
I think this is not being used?
I would use `dictLength` here and below.
This change seems not necessary, since this class is only used in the test.
I'm not sure if we should do this, I think it is better than a default.
@saumyasrivastava08 Rename this program to `Check_Leap_Year.cpp`.
`global_configs` is a bit confusing to read. Maybe `self._rules_config_file`?
The indenting of this section was intentional, not sure why the other one wasn't changed? (Although the others were already.)
I'm not sure about the naming here - this is a tracking url, but this is a URL to the logs that we want. How about just `get_tracking_url`?
I think this function should be changed to const Creature*
>v.Replace [](start = 16, length = 9) I'm not sure we should be setting this here. If someone changes the value of an existing step that doesn't have an old value, we'll be updating the step, and we won't see the new value. If someone changes the value of an existing step, we will get the new value, but we don't know if that's a valid replacement. I would prefer if we just set the step's replacement transform and let the updater do its thing. This means you can get rid of this code and the code for the old one (I don
I think it'd better to have some sort of mocking for these methods, since we are not really testing the actual implementation, and it would be nice to have a unit test for this.
Shouldn't this be set to `default_node_port`.
I think this is not needed anymore.
Is this check necessary if we're not removing unused shapes?
I don't see the point of this if, you should just do `if roleText`
I think the problem here is that `dcontext` is not freed if doing_detach is true.
This file is not modified
This should be a validation error as we are not validating the certificate
I'm wondering whether `(www.)?(subscribeonandroid.com/)` should be `www.subscribeonandroid.com`? Also, I'd suggest to use `StringUtils.isNotEmpty()` instead of `.contains()` since we want to remove `subscribeonandroid.com` in other places as well.
I don't understand why this is required?
I'm curious: is this a new feature that should be in a separate PR?

Why was this changed?
The check here is unnecessary, the next check will already do the same check.
Can these two lines be merged?
This is the only place I could find where this class is referenced. The only reason I could find is to make this a private method, which is not visible for testing.
Please remove the trailing whitespace
I think the `active` method can be deleted.
I am not sure if we should skip `null` for positional params.
You should check version
nit: remove empty line here
Why is html_safe needed here?
Is this necessary?
Why not just make it `DefaultSampler`?
I think it should be `appsv1.Deployment{}`

Why do you do this?
I think this should stay as is. The interface is a bit different and the implementation of the methods should be the same.
Why would this fail?
@peterbe, do we have any plan to keep these?
This is the default value that we are passing to `video`
Is this required?
I'd rather not set the `WasmAbi` field in the `Target`. This seems to be a pretty reasonable place to handle this, though it doesn't seem to do a huge change to me.
I think `multierr.Append(err, t.Stop())` will do the trick, but it doesn't hurt either.
This is a change in behavior, right? Previously the span had an extra entry and the trace had a new entry?
I don't think we need to pass in the context here.
This is wrong. I'm not sure if this will affect the result. It looks like you are using the same orderBy as the other orderBy in this file.
This should be moved up to be alphabetized.
this is an extra line
I'd call this `BlockTimer`
I think this should return `Error` instead of OK
I'm not sure what the best way to do this is, but I think it's more efficient. The reason I'm not sure is that if the field exists, it is ignored, but if it is not, then it's a bug in the code, and the error is more appropriate to ignore.
Should be `if (!o.isNull())`
This will throw an `InvalidArgumentException` when a switchable toggle is not set.
@kirrg001 @kushthedude can we get some more tests to cover these methods?
This is not a formatting change
I think this is a bug fix that we should have been fixing in the previous version.
This doesn't seem to belong in this class?
`tbk` is not a good abbreviation for `index` here. It is a bit confusing to use `index`.
This is a bit of a misnomer. I don't know how we would name it, but it's a little ambiguous to have it called something like `IsAppInsight`. Maybe just `IsAppInsights` or something.
I would suggest removing this check. If both `log_key` and `time_key` are present, the message should tell users that they should only use one of them.
This is the only place where `balance` is used, so I think we can remove this line.
I think this is a typo, should be `objects`.
Why do you remove the request parameter ?
This was a bug, but it's a bug in a bunch of other plugins that don't have setup.
This is probably the right place to put this, as the shape resolution should be in the caller.
This line should not be here (or else it will crash).
Why is this needed?
I think this can be a single `func` with only one return value.
Is it worth adding a `IsXHR` check here?
Why do we still need the `cstdlib` headers in this file?
This file should be moved to `src/native` folder.
This seems unnecessary.
The `ingerPort` parameter is never used?
This is a breaking change. We should not be removing this.
Use the new Ruby 1.9 hash syntax.
Why do we need these two fields?
nit: I think it would be good to have this as a separate method.
I don't think we should do that - we are already using `ALIGN_FORWARD` to get `16` aligned, and `ALIGN_FORWARD` to be `align_forwards`.
I think it would be good to have a separate column called `TRACE_ID_HIGH_HIGH` to keep the same behavior.
Please add a trailing comma.
`Uri.EscapeDataString` is already done in `WebUtility.UrlDecode()`
Why are you checking if the player is deadman?
nit: confidences -> confident_names
@liggitt this is the default, why is it not set here?
This is wrong. It's not an invalid file. It's an invalid drive dependent directory.
Should we have a default? Or is this for the new api?
This was not needed before.
This is a breaking change to the binary generator. We should keep the old syntax and just add `[command]` to the list.
Why did this change?
I think we should move this constant to somewhere more general, and make it `private`
I don't think you need this extra variable, it's only used once
This should be a constant, not a field.
Can you add a check that `finalizedHeader` is not `null`?
Why is it called scratch?
This looks like it could be done in one line.
Can we call this "jsonValue"?
Why did you move these here?
This was a breaking change in the `transactor` package and it's a new type so we should leave it as is.
nit: `...by the given metadata location.`
Why can we have `null` in `currentSortOrder` if it's the same?
Should this be `OMNIPOD_POD_ALERTS_SCHED`?
The C++ style guide recommends that the opening brace be on the next line.
Please add type hint for `session`.
nit: space after `if`
This seems to be the same as `Flow`
Why do we need to set the object name again if it is already set?
I guess this was the only change needed by this file, but why was the `syscall.Stdin` cast needed? Isn't `ReadPassword` just doing `os.Stdin`?
Why not just use `pmi_fd`?
This is the main fix
This test fails on master due to `data` being empty. Is `data` a required field?
I'm not sure what the right way to do this is, but I think we should check `c.leaf.hub != nil` here as well.
This is not used anymore?
This should be "Intro to Rails"
Error return value of `dao.Stop` is not checked (from `errcheck`)
This message will be printed every time it is called. Maybe we should add a flag?
this could also be a panic.
Is there any specific reason to remove these constructors?
I don't know enough about the plans controller to know if this is the correct place for this variable to live, but we should probably add a `.featured.team` method so we don't have to worry about it.
This is a little unfortunate that `dev/null` is used in our tests for the Roaming feature. It's not really related to Roaming, but I don't have a strong opinion on it.
I think it's better to check for validity here
I think it's a good idea, but we should be able to remove this dependency now :)
This class was already public and is used by other packages. It's not needed.
We should remove this import as well
Can you move this to the `_InternalFrame` class so you can do `_internal.DataFrame(_InternalFrame(data, index=index, columns=columns, dtype=dtype, copy=copy))`
I am not sure how this method should be used. The code in `ConnectionCosts` is not used, and `CharacterDefinition` is only used by this class to create the InputStream. So, this method is only used for the CharacterDefinition case. I don't think it's needed.
I'm not sure what the right way to do this is.
I think it would be good to keep this one. It was just a placeholder for a few years.
Why not add this to debug?
I'm not a big fan of using jquery and jquery-bootstrap to avoid using the bootstrap-boot-loader. Could you instead use a custom `Blacklight.onLoad` handler and use that?
why did you remove the import from `consts`?
I'd rather not pass the reason here. It's a bit strange that we need to pass this in.
I think it would be better to use the `TestVendor\Goto` namespace here and not use the underscore notation
Should we add a note about TLS here as well?
I think this is fine, because we're not closing the response body anymore.
This is not correct, you need to add `-` to the regex to prevent it from matching
Why not add `category_manager->supports()`?
This is a breaking change. The new parameter should go before the new constructor.
This is not equivalent. You need to free `ret_modified_regfile_content`.
Can you make this test case a bit more explicit about what these values mean?
I don't think we want wildcard imports here? Can you try it with a `.`?
I wouldn't use a double here. The `TrailWithProgress` constructor should take a single value, not the status finder.
This should be `FPGA_IFC_FPGA`
Is there a reason why we don't need the same check for `SignatureType` and `Protocol`?
Is this change intended?
This doesn't need to be added here. It's not used anywhere.
`ask not found` should be `device no longer found`, right?
Who will use this?
`authenticated user` -> `authenticated by the authenticated user`
`DoSomething2` is used only in the tests, so you can remove it.
Should this be added to `defaultCniCertificates` too?
`(void **)tmp` should be checked before using it.
nit: I would move this to a variable since we are doing this twice
I think we can use `spaceId` here instead of `sentence_->space()->id()`?
Can we use the new go-ethereum rpc package?
Please add space after `,`
These are unused imports.
Why is the buffer passed in a slice and not an array?
This is a bit of an awkward construction to me - we could have a function to do this with `NewPowerTableView`, and we could have a helper for this?
Is this a case where we want to update the hash of the pool if it's not already present, or does the pool get recreated and not updated in case it has been recreated? If we do not do the check for the pool, we should return the same status.
Is this a typo?
Can we add some info logging in the case that we're killing?
nit: I think it's fine to leave this struct out as is and just have a function that returns DefaultRetrySettings. The function is only needed when you need to set a custom policy in the workflow.
Shouldn't this also have `data-order`?
this should be internal as well as the typehint for `$rangeFilter`
This change is incorrect, it should be reverted.
@kirrg001 I don't think you need the `!node.ownerSVGElement` check here because `getAttribute` is a bit slow.
This is an unrelated bug fix and should be fixed in the future. I don't know if this is correct or a bug that is not fixed in this PR.
This is the fix for the issue. The new code is to move the review cursor so the following focus will be lost.
We could add a note that this is a freeze to avoid having to call `.freeze` on each error. I don't want to block this PR on this, but it's worth mentioning in case we want to do so.
This sort is unnecessary if you're doing a `sort.Slice(aps, func(i, j int) bool`
I don't think this should be in api.v1.
Should we also check the value is not empty?
You can use the same settings for all of these, instead of copying/adding/removing all.
This is a very weird way to get the scol.
I'd suggest renaming this variable to `administrable`.
I am not sure if it is a good idea to use a different default value than the one we used before. We could have a field that would be more accurate.
Should we use `char.IsWhiteSpace` instead? Also, we should probably check `input.Length < limit` instead.
Why do we need this check?
I think you can use `v1` here.
I don't think we should be changing the `data` field here. It is not really the `last_modified` of the record in the DB.
This seems to be an unnecessary dependency.
nit: I'd put the test name in the message.
Why do we need this check? I think it should be enough to set `config->http_proxy = strdup(FLB_CONFIG_HTTP_PROXY);` in case the proxy is empty.
What is the point of adding these checks?
Is this a typo?
We should not have this logic here.
I don't understand this, why are we adding these?
Is this needed if it is already in the else block of the above?
This was a bug, the GET command is only available for Firefox Firefox, right?
This can be removed, right?
I think it might make sense to make this `None` by default (i.e. `param_name = luigi.Parameter(default=None, description="parameter name used for parameterized values. Defaults to None, meaning use first positional parameter")`), as the latter will make it clear to the reader what the first is.
This is just a cleanup. We don't need the `__dirname` for the tests, since they are now in the same folder as `spec`.
@kasobol-msft do we still need this?
why do we need this ?
The `sse` variable is not necessary anymore.
Please use brackets even for single line if blocks.
We should probably make this a positional argument in the constructor and add it to `options`.
Can we make this an `Optional<Integer>`. It will make the code more readable.
I'm not sure this change was needed. I don't see the need for it.
Why do we need this?

I would suggest to use `EXCEPTION_EXECUTE_FAULT` here as it is not a fault of the page.
@greg0ire this class should be removed as well
This method should not be called anymore.
compute kmeans_init.hpp
this is a good change as it will break existing users who don't have admin privileges
This is an unrelated change.
I assume you've verified this test was run correctly?
I think it's a little confusing that `Id` and `Passphrase` is different, as the field names are not clear.
this needs a `version_added`
I guess this is not the root category id? I would have expected the context id. But that is not really the root category, so I guess it should not be a fatal error.
Why do we need to change this to use the file name as key? Can we keep it as `inputFiles.get(task.file().path())`?
This doesn't make sense, since you're importing it from config.py and it's already imported in the `config` module.
This is not correct. It will not be true for all microservices.
nit: can we remove this newline?
I think we should make sure the default value of `addToStaticNodes` is set to `true` in case `addToStaticNodes` is set to `true`. Otherwise, the function will be called with `true` but `addToStaticNodes` is `false`
I would suggest to add the new parameter to the `handler` signature and make sure the `override` argument is always passed in.
I think you should also set `deactivated_at` to nil, otherwise it'll be reset to the date of the day when the email is active.
Is this a change in behavior?
Is this import necessary? I think this file is already importing the class.
This doesn't have to be a constant. This is a configuration variable. The default values should be in the `.dockerrc` file
Why is this removed?
nit: `CHECK_EQ(outer_num_ * inner_num_, bottom[1]->count(softmax_axis_ + 1));`
Why do we break from here?
This looks like it should be a globalized string.
Can you test with `index` and `dtype` as well.
nitpick: I would put this before StartServerHook.
This should be inside a lock, not inside a `if`.
I think it's better to use `\Magento\Framework\App\ObjectManager::escapeHtmlString` here.
Shouldn't this be done in prepare instead of the constructor of the Editor?
I'd rather return this, as the caller of HandleBlock will handle it.
Should we be doing this for all the layouts instead of just the current one?
I would like to keep this test but just remove it from `test-helpers.js` and leave this test in `tests/integration/iframe_helpers.js`. We have some tests that test the iframe elements as regions but they are not the one that tests.
Unnecessary spacing detected.<br>Operator != should be surrounded by a single space.
Why was these removed? I don't believe this is necessary, but if it is I'm not mistaken.
I don't think this is correct. `tokens.string` is a unicode string.

Is it intentional to remove the preference width?
This is a bit weird. I'd have thought this would return the scheme if TLS is enabled, otherwise, the scheme.
I'm not sure what this was intended to be.
nit: can we have a single function that does this for loops, so that we only need to call this once?
I'm not sure this is a good idea. I think we have to do this in a different way. This should be a `quteproc.wait_until_done` function.
I'm not 100% sure what to put in here, but I think this is the only place where we have to add the association.
This method should be `app.UseKestrelHttps(options)`
I don't think this method is really required, as it only returns `max(index)`
This is not needed.
This can probably be removed now?
Why not just use the container implementation directly? I think we're going to be adding more implementations.
This seems to be a duplicate of `batchstore_test_base.go`
nit: `if url is not None` would be slightly more readable.
This is unused now.
I'm not sure if this is needed? I would expect it to default to an empty array.
Can you add space here?
This is the only place in this file where we use the `scss-noto` module. It's not necessary. We can remove it in a subsequent PR if that's the case.
Is this needed? I think the query visitor is doing it for us anyway.
@discounted_plan.price
Is this a workaround for the issue?
This is an API change. It is not part of the public API.
Why this is not a method of `MsgCtxTypeChannel` ?
Can you add a note about this new API?
This is not the right place for this, as it will be overwritten if an element is removed. I would prefer to move this line above the `if` condition and set `_lastValue` to the value of `dom.value` instead.
We need to add this option to the `--help` section below as well.
We should also mention that this may be specified for multiple load balancers.
I think this should be `SchemaVersion.String()`?
Is there any risk of concurrency loss here?
I think the checksum address is not the best name for this field.
:ok: This change will be queued for retranslation. We'll use the existing translations in the meantime.
This was a bug, the best suggested header would be null if there's no best suggested block
What are these fields? Isn't this a breaking change for all users?
I don't see where this is used
This is the only usage of this function in XKeysymToString().
This should be `if ($asset === '@')`
Why is this necessary?
I'm not sure this is correct. The root device is `/dev/xvd` and the root devices are `/dev/sda1`. If I set the root device to `/dev/sda1` and then I get the error "sda1 is reserved for the root device", I will not see the root device being used.
I think it's safe to delete this line
`(p.len or 0)` is a little clearer
I'd rather not add these fields in the API model. It's better to have them in the API.
Why not `self.get_value() == 'true'` ?
I'm a bit concerned that this is a breaking change, as we are changing the API version of the cast template and not the api itself. Can we instead update the template in the apis/api/v1alpha1/helper.go to use the new `castv1alpha1`?
I wonder if it would make sense to add a `size_t` to `h2_errors.inadequate-mmap` and use that to get a size of `mmap_errors` instead of the type? That would avoid the cast below.
I don't believe this is going to change the severity for all the reasons for the test, but it seems like a good idea to change it to WARN if the test is going to be ignored.
This should be `it->second`. I know it was there before, but the code would have thrown away all the extension parts and we would not be able to handle that case correctly.
Please change this to be `self.num_of_searches -= 1`
Should this still be Remote?
I think you should mention this in the README and explain that this is only applicable for RPN detectors. Also, I think we need to mention here that it is used only for single stage detectors and the RPN detectors do not allow quality matches.
I wonder if there's a way we can avoid this extra dependency?
Use safe navigation (&.) instead of checking if an object exists before calling the method.
Shouldn't be required since we're not using pyspark anymore
I think this could be just `boolean` since `hasFillDataChanged` is not a boolean anymore (or even a boolean), but I don't feel strongly
I'm not sure if this import should be here or in `execution_plan.models`. It might cause some problems. I'm fine with leaving it here for now, just wanted to check.
This should be a `StaleElementReferenceException`.
I would keep this for now, but we should consider a bit of feedback. It is a little bit odd, since we are only doing this for the etcd case, but it is probably ok to keep it for the future as well.
Can we move the retry setting to the connection struct and pass that in instead of the context?
Should this be changed back to `ECS_CLI_ENVIRONMENT_NAME`?
Nit: missing new line at the end of files.
I'm not sure if it's better to use "count" here, or use a constant.
Can you add a build tag for `windows_windows` and add it to `build`? We're not using this on Unix anymore.
Is `?? "(none)"` needed?
These should be grouped with the other stdlib imports
This will be a bit confusing to users because the `FreeConsole` function will only be called once, and the process will exit with `0`. I'm not sure if there's a better way to do this, but it would be good to have a more informative message.
I'm not sure if this is correct, the link should be quoted, not the square brackets. I don't think there's a case where the link is not. The code is still correct.
I think this can be removed.
nit: we could use `param.count("num_class") && !new_config.num_class`
I think the previous pattern is better than this change.
Why do we still need this variable?
Is there any reason not to use `self.clock.sleep()` here?
I think we should return an error here. This is a fatal error.
I am not 100% sure about this. I think we should just leave this alone.
This can be removed, I think
nit: this import should be grouped with other stdlib imports
I wonder if `Analytics` is the best name for this module. Maybe just `Analytics`
I think this is a typo.
This is not used.
I would prefer to have a separate `goForwardInTime` for this purpose.
Why do we need to import this?
This is the actual fix, right?
This is the important bit. I think it is fine to leave this TODO here.
'accepted_if'          => 'Dette feltet må aksepteres når :other er :value.',
Please don't modify existing copyright files.
Is it possible to have the span count be 2 here?
This should probably be `instr_is_scatter`.
`val` isn't being used in this line
This is a bit of a strange line. Can you move it to the line below?
I'm not convinced we need this anymore. We can use the `StartTime` field to get the start time for the instance.
I wonder how often this will happen, and if we're just going to be dumping the whole host log, should we just dump the whole host log?
Why are these casts necessary?
Is this the maximum number of iterations that will be used?
I'm not a big fan of the generic return type, as it makes it easier for the caller to figure out what's wrong. I would rather keep the generic return type as it was. It is not really the case, it can't return anything and the caller can do the work.
Should we add a `replaceAcronyms` here?
Why is this necessary?
I think we need to move this out of the helm. We should also be able to do this by default. I don't think there's much value in having an environment variable, and we should not be adding this flag.
I think this should be `hiveutil-created-once` to match the label above
I'm not sure if the :nocov: is needed here. I'd rather have this be removed.
I think it's better to leave the `# Purpose` here. I think it's more readable.
This will only do it for the case where we remove the same index twice (and the old one is removed)
I would prefer a controller that takes in the params, and returns the HTML.
I would prefer this to be `if (!this.toolbox_)`.
why? why?
Why not use `var` here?
this is not used anywhere?
I would add a `@example` to the example.
Nit: `OF` is redundant here.
I think this one can be removed.
I wonder if we should do this in a loop, so that it doesn't block.
I think that we should add a `Subscript.value` to `astroid.astroid`, since it's an index.
This is the main fix - the reward will be payed by the block.
Why is this being sorted? It's not alphabetically ordered, right?
Whoops, I meant this to be `_POSIX_C_SOURCE` (and the line below)
This is the main fix. The rest is just renaming the input var from joinInput to getDst
I think you could use `std::chrono::milliseconds(FLAGS_meta_client_retry_times)` here, instead
I think you can just use `from tests.helpers` here and remove all the `first` and `count` imports.
can we remove this?
Is the `CseRestTemplate` used somewhere else?
Is there a reason we can't use a `*` here?
These two are imported twice. Can you remove them?
why are these in base_model?
Is it possible for `currLimit` to be `nil`? If so, we may want to return an error if it is.
This should be defined in a module level constant
Why are we not just making this a `map[string]int64`? I think it would be more consistent with the way we do it in `GetStatusForPodNetworkchaos`.
I'm not sure if this is a good solution for all windows versions (not just Python 2). The issue is not really about windows.
I'm not sure we need this `if` - we already checked it in the `IsValidInstrumentName()` call - and we don't have to check it twice.
Nit: I'd just put `name` here
Can we use the new `backbone`? `pretrained` should be a placeholder for now.
I don't know if there's any better name we have here. I think `PAGESPEED_INSIGHT` or `PAGESPEED_INSIGHTS`.
this is the actual fix. the rest is just fixing the error
This looks a little weird, why does the blockNum need to be updated in forward?
We should be moving away from this dependency, it is not really an API package.

`for range ticker.C`
I'm not sure we need to make this configurable, we could just set it to true in the constructor.
It's probably better not to do this. The whole problem should be fixed.
Please don't use star imports. It's recommended to use explicit imports instead.
Can you please move this check to line 438, to avoid duplicate code.
Can we add this in the main file as well?
I'd rather keep the naming convention the same, `InitialPackagePath` is a bit confusing
I don't think it's needed. `with_18f_procurement_env_variables` should do this for you, right?
Why is this change needed? Isn't this the same as before?
Is it worth including `apiTermsOfUse` as a prefix for `getTermsOfUse()`? It is not a term, but a term, right?
Should this be `onConfigurationChanged`?
Why do you need to send all control down?
This should not be a constant, it should be a constant in `build_integration_tests.py`
I'm not a native speaker but this is not a regexp.
I'm not a fan of a new config flag. Isn't this the default?
I don't think the vector is the best way to calculate the average latency. I'm wondering if this should just be an `int`, or a `uint32_t`. The `H2O_VECTOR` macro is already quite big.
I don't understand the reason for this change.
I'm not sure this is a good idea for genesis blocks. I don't think there are a way to make this work for genesis blocks. @jespino, @jespino
I think this needs to be moved to the disk block cache package.
Should this be a Set?
I think we could use `approve_link` here as well, but that can be a separate PR.
I think this should be done with `isinstance(list, (list, PacketList)).items()` to avoid any potential bugs in future. It is also not necessary to check that `isinstance(offline, list)` is `true` if there is a packet in it.
`fmtJobInitTypeHelp` is unused (from `deadcode`)
Why remove this?
I would prefer to use a `switch` here, but I'm not sure it will do that in the end.
I would have thought we could just always set this class to `none` here. I don't feel super strongly
I think you want to use `i` here.
I think the default is `true` so this should default to false.
This is not correct. The server will send a reply if it is a master or an insert request
Can you add an `<%= link_to t('blacklight.search.skip_links'), "#documents" do` before this line?
This seems a little bit weird, it should be `if ((result == VK_SUCCESS || result == VK_INCOMPLETE)) && pProperties)`
nit: maybe just `IsDockerEngineRunning()`?
@jmchilton is there a better way to get this value? Is it possible that someone changes the default value to be `128`?
I'm confused by this function. I think you mean `BufferHasIdentifier`?
why not just remove this?
This is a bit confusing for me - I'd expect `options.merge!(profile=)`, but then `define_method(:options) { @capabilities[:chrome_options] = opts || {} }`
Should this be `folly/ssl/TLS.h`?
Is there a better way to do this?

I think we should move this to the `fixtures` folder and import it from there.
this should use `find_by!`
I'd rather see this initialized, as the default is set to `DBL_MAX` in the header.
Should this be a 429?
Should we make the default value to `internal` here?
I don't think we need the html and json responses. They are already in the view.
nit: `DiskLimiter` -> `diskLimiter`
I'm wondering if we should change this to something else, e.g. `SNS Ruby` or `SNS Ruby`.
why is this a pointer?
I think this can be removed as well as the one below.
I think the `default` here is a typo in the string.
This test is now redundant with the one in `tests/network_policy_test.go`. Can we just delete it?
whats the reason for this?
I think we can drop the `:format => 'html'` param and use the `:html => 'xml'` one.
Is there a reason to return `nil` if it's a `TLFJournalDisabled`?
Why do we have to wait a bit longer for this page to load after a timeout?
This is a bit strange. If the base is the file, we should be adding its last metadata (or the previous one). If not, we should be adding a `null` file.
nit: `for batch_id, mlvl_tensor in enumerate(mlvl_tensors):`
Can you add a docstring to this method, and describe the purpose of this test? Also, the test should also include a docstring explaining why the issue is 5569.
Please add `create_no_window` to the docstring.
This method is not used anywhere.
I'm not sure if I need a `form-group` class here. If not, then it should be `form-group`.
`causalConsistency` -> `causalConsistency`?
We should avoid using star import. I know we have a lot of tests that do this, but we need to be careful about this one.
I don't like this. If the user specifies `AccessControl:AllowOrigin`, we should not allow CORS.
Can we use the client instead of the `client.Get`?
`$this->config` should be typed as array too.
why not return error?
I'd call this `ContentHolder`
Revert these changes.
`Candidates()` should be renamed too
I don't think this should be a validation error here. It's a validation error.

why do we need it?
I don't see this being used, is it?
This was the only change to make sure I got the right error message. I'll revert this back to He2.
I think that the default value should be None.
Is this change needed for a specific case (when there is no config in the cluster)?
Why is this change necessary? I thought the only place it is used is for `valid_http_url?`.
Is this still true? It is not in the upgrade guide, and it's not clear to me why we are removing this line, or whether it should be removed.
This method is not used anywhere, so it can be removed.
This should be handled by the ops package
I'm not sure why this change.
I'm a bit worried about this. We are now going to fall back to the default error handler if there's no response to be written. I think we should do this after the default handler has been applied (i.e. before calling `DefaultErrorFunc`).
Why is this a pointer? If we're going to do a deep copy, we should just do `out.HTTPMatch = in` instead of `out = in.HTTPMatch`.
I don't think we need this here.
nit: "optional, used for introspection and routing, ..."
Nit: I think this should say bytes_written (to be consistent with the other metrics).
This is a breaking change. We should add a TODO here.
this is a bit of an unfortunate change to the interface, and the test is a bit more complicated than it needs to be.
I don't think this should be in here, but it should be in the DataMan class. It should be part of the public API.
@honzasterski this will not work on Windows
Why is this not a subscriber?
I think we can remove `unsigned` here, as `req_done` and `res_done` are not used anywhere else
This variable isn't used
I think this should be named "default" to make it clear that its a fallback color.
We can move `setupTests.ts` to `./setupTests.tsx` and then `setupFilesAfterEnv` is just `setupFilesBeforeEnv`. It's not required for this PR.
This should be `!isEmptyLine(path)`
This import is no longer needed
Why are you concatenating the name twice ?
I'm not sure about this. We can have a login card with a shibboleth authentication method but no shibboleth auth method.
Please add curly braces around this `if` condition
This is not necessary, as `update_attributes` will handle nil values.
Shouldn't this be a constant? Or maybe even in the AWS SDK?
I don't think it's a good idea to have a hard-coded value of 1. What about using a constant value like the others? `0.1`
I think we should use the same convention here, `patterns.cti`.
Why is this being removed?
Is there an actual implementation of this? I'm wondering if it's just to allow for custom methods.
This will cause the LOOT_NOT_ALLOWED message to be queued twice.

This should be private, as it's not really a private method
I don't think we want to make this a public method.
This should be changed to `should.be.equal`
I think we should add `copyRealms` as an option, as this would be a breaking change for existing apps.
I think we should only get the resource size if the `resourcesField` is not a map. Otherwise we will get the page size for the whole method. Also, it seems like this should be done in the transformer, since it's used in several places and there should be some way to avoid the overhead in this method.
This docstring needs to be more clear about what it does.
@jolelievre Is this a BC break?
Should we add these in the default dictionary instead of the dictionary? I don't think we want to be adding these in every single scenario.
Why is this change needed?
I think it's fine for now. The only way this could be used for a test is by having it default to false. But it would be great to get rid of the `isTest` parameter from the call sites.
Isn't this just `newProtoForTableStatus(result.Table.TableStatus)`?
nit: this could just be a method on the ledger struct
I am not sure if `musicbrainz_id` is unique across all users, but it should be in the same db.
This should be done only if the state is actually changed.
I would suggest renaming to `cConn`, to make the interface more consistent.
We should be checking if `err` is not `docker.ErrNoAuthData` before creating an auth config with `docker.AuthConfiguration`.
nit: rename to `BlobNamesAsync` to match the property name
I don't understand how this test works, but I'm not sure this is the best way of doing this, since we don't need to do any of the tests for the `type=regexp` spec.
I would prefer to not use InitFSRepo, since it's not required to be called from a lot of places.
This is not a secret. It is a token.
This line is not necessary since the `_rangeObj` is already initialized.
Why do we need this?
The `unless file.exist?` should be unnecessary here as it's already checked by the `File.expand_path?`
This change is not needed. The location provider should be the only thing that needs it.

This is not needed, it's already in `pipelined.go`
This is going to be called multiple times for the same error, right? I'm not sure what the behavior of this is. It's not obvious to me from the name what this is for.
This is a bit of a misnomer as there is no `apis/certmanager.k8s.io` group. The name "certmanager" is a bit redundant and I don't think we can make it confusing.
I think it should go to the `DEFAULT_JSON_RPC_APIS` list above.
I don't think we need to pass this argument. If we want to check the coinbase, then we should pass the coinbase height as a parameter to the validator. If we want to check if the coinbase is valid then the validator should take care of the coinbase. We could pass a `bool` as argument to the validator and then we'd only need to pass the coinbase height as a parameter when the coinbase is valid.
I wonder if there is a way to get the state manager from the factory directly?
Why is this needed?
I'd use `ex_save && ...` here, to make it explicit that we are checking the existence of an item and not whether it's an existing or new item.
Nit: remove empty line.
We need to update the checksum for protobuf
This is not the same as `expect(core.plugins[1].length).toEqual(0)`
I think it's better if we keep the Kernel.warn call here.
This seems to be unused? Can't we remove the whole file?
I think this should be `requests_status_code(code)`
This could be a boolean instead, and the default value for the preferences could also be a `DisplayPreference`.
nit: maybe return `(condition, batch.KVStoreBatch, error)`? (since the batch may be modified)
This should be a constant. The ID is not a unique one for each instance.
why do we need to keep these headers?
I think this example should be updated. It's still testing that the formatter is working as expected.
This is not the right place to add this parameter. We should not create a new window when the driver is already open.
This is a new feature, not just a change of functionality that's currently not in use.
This is unused.
This change is not necessary.
nit: can you revert this whitespace change?
This should not be part of the PR.
I would rather call this `SERVER_TIME` for readability.
I don't think we need to check if it's a not found error, it's already handled in Create().
This is an odd way of creating fake TLF IDs. Why not return ID{b[:]} here instead?
I think we should move these into the `constants.go` file
Is this needed?
I think you can remove this check, it's not necessary. You can skip save all regs if `cci->skip_simd_flags` is false
Nit: I don't think this belongs here.
This is the actual fix for this test, the rest is tests that need to be re-run.
This is a bug, it should be a bug fix
This should be `wxLang = None`
Is this the right way to do this?
Is there any reason we are adding this as a class attribute? It looks like you only use `self.key` in `__init__`.
This is not a good example, I would just say "Return a value" here. You don't actually have to say "Return a value" in this description, but it might be worthwhile to write it.
This should be a constant, not a string. It will be a string, not a constant.
This should probably be a `checkState`, as the message will not say the manifest was read, but rather the delete manifest
Why not just use `contact_us_url` ?
This was wrong before.
nit: I think this is missing the `;`
this is the fix.
I don't see a need for this function.
Please use the new `utils` package for the `DocumentationUtils` module, instead of importing the entire file here.
We should add a description that these are all the members in the group.
We should rename this to `ServiceName` to make it more clear.
Why are you changing this? Is `GOOGLE_APPLICATION_CREDENTIALS` not a key of the `settings.py` file?
Why did you need to change this?
e e   c   e   e   ce  receive_bulk_pull_blocks_action.c  c c receive_frontier_req_action  receive_bulk_pull_blocks_action.c  c e  e  ee  receive_frontier_req.
I think it's not necessary to add this file, since `MPRester` is already imported.
Use the new Ruby 1.9 hash syntax.
This is an unrelated change, but I just noticed the error log was not properly logged.
I would suggest renaming the function to `getExec` to reflect what it returns.
Shouldn't this also delete the `provider` field as well?
@jmchilton do you think that it would be good to have a `--no-download` flag here?
Should we set this in `setup`?
I think this should be a method on Dataset. It will return an empty collection if the user has not specified any permissions.
I think the constructor can be private
File is not `goimports`-ed (from `goimports`)
`@round_count` can be a local variable here
Why not just `widget.set_perc.set(-1)`?
Shouldn't this be `Symbol.prototype.SKIP_SESSION = 'SKIP_SESSION'` ?
I think it should be fine, just wanted to double check.
This is not required, we have a maintainer for this.
Why this change ?
I'm not sure if it's a good idea to do this. The previous implementation was returning `c2 - c1` and then `c1 - c2` and so the second comparison would be equivalent to `cmp = (c1 - c2);` (the result is the same). I don't see any benefit in using `cmp` here, but just curious.
`CaseInsensitive` is the default. It is not used, so you don't need to set it.
Should this use the `httpserver.NewRedirect()` method?
This change is a no-op?
Shouldn't this be renamed to be consistent?
This will be set by the SDK.
`config.ChainID()` is already available in the context. No need to use it again here.
This is a little strange, why do we need to specify `cluster` and `hosts` at all?
Why are we changing this?
I think this should be `surface->current.scale`. `surface_damage()` should not update the texture size when the surface is damaged.
This is a bit of a hack, but it is not a problem for now.
Is `+ 1` needed here?
I think the generated go files need to be in `go_gen/pb.go`?
Can you remove these lines?
Why did you move this?
Why do we need to check the `det_bboxes` here?
I think this is not needed as we already return `driver.Bucket` from `driver.CreateBucket`.
This is not correct. If `max_blocking_time_point` was 0, this would be `max_blocking_time_point + std::steady_clock::now()`
This looks like a good way to define these constants. But I don't have strong suggestions.
Maybe add the reason of the test-time augmentation?

I guess I'm missing something here. Why are we renaming the service report? I think this should be renamed now.
Is this import used?
I think we should add that the default value is `true`.
I'd prefer to see `getReferenceStorageReferent` replaced with `GetReferenceStorageReferent`
I'm not sure why these names are different?
Please remove `:void` from phpdoc
why do you need to make these changes in this PR?
I don't think you can do this. We have the loss weight in the `LossLayer`
Is this check necessary if `filesToIgnore` is already a map?
Should we use an `if opts['task'].is_a? Symbol` here? Or does the `opts` not always have a `task`?
I think you should wait here for the section to load, so it's not visible until the section is loaded
This test doesn't test the case where `gcs._DeleteOnCloseFile().close()` is called twice.
This should be a pointer receiver.
This is just a copy of `getOutfitByLookType`.
Why is there a `96` here and the `64` in the `dataFee`?
Why not `== 0` instead ?
I don't know why we need this option, it is not used.
I think we can remove this line, now. It's covered below.
I think it would be better to call them `BuildBucket`, since that's what the user would use for building and deploying, which is the same as `Build` (which is `Build`).
Redundant curly braces around a hash parameter.

This is not needed. The icons are in the "core" folder.
Please, use the default values for these two.
Can you use `mathrand.Int63n(int64(serialNumber))` here instead of `int64`?
I'm not sure about this change...
Shouldn't this be `expect(rerender).to.be.a('function');`?
why is this disabled?
Why is this needed ?
This is not a correct change - `blockp` is the block-level API, not the block p.
Why not using `sprintf` ?
Please move this function into `storage/nbr/common/`
Is the error here the same as the one in line 188?
This was just wrong. It's always `nil`.
I'm wondering if we should just call this in init() instead of here. This is called from a single thread.
This is useless as well
This is the test that is failing, right? It doesn't look like it was actually failing.
Is this intended?
I think we should also add a "focus" attribute to the webengineelem.webengineelem.WebEngineElement class.
Is this change intended?
I'm not sure we should decode here - the service is expecting bytes. I don't think we should do it in general.
I think it would be better if we could call `super` here.
You should use `trim()` here as well
nit: I would suggest to use `std::make_shared` here instead (to avoid creating new objects in the middle of each call)
Why not just return the error code?
This is a change in the public API.
I'm not sure if it's the best way to make this method. I wonder if we can have a better name for this? Maybe just `getSenderAccount` (or `getSender` if you have a different idea)?
Why is this needed on Linux?
This is not right. If you are going to do this then we have to do a check for the existence of the source to be a valid source. This means that we are going to be doing a duplicate copy.
The filter for resync needs modification date
:ok: This change will be queued for retranslation. We'll use the existing translations in the meantime.
This is not needed. It was just the append function.
I would prefer this be `approved_approvers`
This seems a bit odd. Isn't the AWS credentials endpoints a standard set of json keys?
This seems to be duplicated.
package ipset
Is there a reason why this needs to be added?
I would prefer to see a link to the storage docs page for this, rather than having it link to the storage code.
Please update the phpdoc.
Why do we need this?
Why remove `final`?
// TODO: remove assert, assert in the same place, assert that the error message is correct
Why do we need this class and the class above?
This should be in `change`
`SPARK_INDEX_NAME_FORMAT(0)` is no longer used.
I think we should use version here.
Should this be in an if/else clause?
Can we log this error at least?
This should be moved up with `astroid`
This should be moved to `while (!_requestProcessingStopping && !TakeMessageHeaders(SocketInput, FrameRequestHeaders))` to avoid the extra loop when `_requestProcessingStopping` is true.
This is a breaking change, we cannot change this, it is a breaking change.
Why is this class abstract?
I don't think this is needed. The test is not enough.
`is_ipv4_or_v4_mapped_address()` ? `nanos::transport::is_mapped_to_v4_or_v6()` ?
Shouldn't we change the description of this function to "Delete cookie"?
Why do we need to make this public?
I'm not sure this should be part of the `if` block, but I think it should be in another PR.
I don't understand what this decorator does. What's the difference between the two?
Should we move this to `@wordpress/element` instead?
I would prefer to have a test case that verifies that the `ExecutionRevertMsg` is correct when `ExecutionRevertMsg` is `1`, and that there are no changes in the `Receipt`.
I don't think we need this lock. We should just set `self->lastLogIdSent_` to `r` and let the next line set it to `self->logIdToSend_`
nit: unnecessary change
Isn't this a map of strings?
We need to add this in `setup.html.ejs` and the other files as well
this is a bit confusing, as this is the test that closes the runloop, not the session itself.
nit - can we add xmldoc here to explain what the params are ?
This method is called from a different context (appdomain)
I'm not sure why this line is here.
Is this the correct way to go? I don't know what the difference is, but it seems like we should keep this log at info.
This is not right. The user who is trying to delete this observation will be the one with the public ID `/proposals/public_id` but the user who is trying to delete this observation would be the one with the public ID `/proposals`
The column should be added in `bib_view` table
We should also check that the service is actually the correct one. The error message is more accurate.
Is this a change in the signature for the `get_client_auth` function?
I don't really like this method name. It's not clear to me what this method does.
Why not `Enabled => false;`.
Why this is not using `execSQL`?
This is just a small nitpick, but I would prefer to have a space before `dashboard`.
I would like to have the code to explain how to copy and copy from one S3 S3 bucket to another, to help with readability and clarity.
Can we just have one json handler that calls the other with the same arguments? It seems like we could avoid this duplication.
Why 30 seconds here?
nit: `startDate` -> `startDateRange` (also, can we change this to `dateRange` as well, too?)
This is redundant. You can just do _sharedStringMap.Clear();
Can we remove this?
This should not be here. I will remove it after merging this.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is not needed.
Can we remove this?
This is probably the best match for this route, I don't have a suggestion for a better one. I'd like to see this route be more generic to all the pages. We could even add the `my-accounts` route to the end of `/watch` (and then the `/my-accounts` route can be removed from the end). Then, the `watch` route will be the same as the `/my-accounts` route.
This looks like it should have been `getTransportUri(transport.getId())`.
These should all be in the `AspNetCoreConstants` namespace.
This should be `yaml::conversion -m yaml::conversion`
I'm not 100% sure, but this should be a `[]dto.SessionStatsDeprecated` as well?
@mjkkirschner this is the only change I made. This is the only change needed.
I'm not sure if this is safe. If we fail to shut down the exporter then it's possible that the handler is still running and the exporter was not started.
I think `int` is more appropriate here
This change seems unrelated?
This is a pretty big change, we can revert it if you want
I'm guessing we don't want the `PublicLoadBalancer: true,` anymore?
This file is used to test that the `target` function is called, so it's not a good idea to add this import. Please remove this import and move `datetime` to the other file as well.
Can we use a test helper instead of `nativeTextboxValue`?
Is it a problem that we are writing the checksum to a file, but not the actual checksum?
nit: `... superseded` is probably a little redundant here, but I think you can fix in a follow up
I think the default bundle endpoint port is already set in `pkg/server/bundle/client.go`.
Why we need to add columns for the common handle?
This should probably be `plz-out/surefire-reports`, since we already have `plz-out/log/test_results.xml`
nit: I'm not a huge fan of having a struct with no fields, but I guess it's just an eyebrowing.
Why did you remove sorted?
I'm not really sure this is a good place for this partial, but I'm not sure what else to put in this area.
I think we should use the new timeout here
Why do we need to do this? `coll.aggregate` is async, so it should work fine.
Should we also check for `/etc/quic` here?
@smitpatel why are you doing this change?
I am not sure why you need the map here.
Why do we need this change?
nit: `forTable` -> `writeFor`
This should probably be removed as the project root has been changed.
Nit: `lenght` -> `seed`
This was a bit of a hack to show the online video tour, but it doesn't look like it is. I'm guessing it was a bug in the previous implementation, so I'm not sure why this is needed.
I am curious: Why is `expectedContextVariableValue` removed here?
Why not just `use_thr` for the group_of argument?
Can we make this an option? I think there may be other places where we have this info.
This is the first time I see this. We should probably use a `<%= t 'my.header', city: section_teacher.section.city %>` to make sure the header gets translated. (And also, we can use the `<%= raw textilize(section_teacher.bio) %>` helper in place of this)
Shouldn't you use `$handler->getDismaxQueryString()` here as well? Also, why do you use the `prepareDismaxQueryString()` if the `dismax` query is set?
Is it possible to use a mock for this? It seems a bit weird to have a test that does nothing in a test.
This is not a valid backend name.
Can `copiedAllowedExtensions` ever be null?
I'm not a fan of having this in `ProjectJson`. I'd rather have it in `PackageJsonUtility`.
This is a regression. I don't think it will cause the test to fail. The test is expecting the value to be in `Http2Frame`
This is a breaking change. Can you add a `TODO(jancborchardt)` here so we remember the bug number and fix it when we upgrade?
This will cause a panic.
I think you can use a local variable instead of creating a bool variable here.
This is not really needed. If a sync is used, you can only do this once, right? So if we do that in a single place, we don't have to add a new function in the sync module and just check that in every place.
this will show up in the UI for me, as this is a test. It's a very important thing to show, but I'm not sure what the best way to show it would be, since the user can't be sure that the crash counts are correct.
Should this also be renamed to `set_type`?
Can you move this file to a new directory? I don't see it being used anywhere
This seems like it should be an #else.
I think we could use `anyMatch(slot -> !slot.getSession().isSupporting(caps))` here.
I don't think you need these functions. The only place we have these is the `tlffs.New` call, and they are just calling `NewFSSubdir` which is a little bit confusing.
I'd move the `template_name` to the `send_proposal_email` method. It doesn't seem to be used anywhere else in the code.
this should be `$em->getRepository('SonataAdminBundle:SliderItem')` (same with the `:selectedDomainId` parameter)
Why not use `if (sep == 0) return 0` here?
nit: `const auto&`
I think the `getRoles(String domainName, Boolean members, String tagKey)` method should be renamed to `getRoles(String domainName, String members, String tagKey, String tagValue)`
I think this can be removed, we already have `warn_deprecation`.
I would like to have this in `next-cli` package.
What is the difference between `key` and `name`?
I think this should be `if spec.IsPureVolume() && s.driver(ctx).Create(locator, source, spec) == nil`
Why is this file being modified?
Can we use `@Test` annotation to make sure we're testing the correct method in the logs?
I think this check can be moved into the if block below as this is not needed
Why do you need this method? I don't think we use this anywhere
Is this used somewhere, or is it just for local testing?
I'm not sure about trimming here.
This check is unnecessary since it was previously added. We should remove it from here and just use `if routeUpd.LinkIndex == 0`.
This file is missing `@babel/plugin-proposal-dynamic-import`
Line is too long. [81/80]
This field is not used.
I wonder if we should just make a new function that takes the Service Account and the `ServiceType` and does the `MakeAuditLogsOrDie` thing?
I think the `_run?.Invocation?.EndTime != new DateTime()` check should be here as well.
I'd move this after all the `axe._memoizedFns` clearing.
I think it would be good to check that the parent is not a BuildingAddress and not just a boolean
this is not right, the error is returned from cb and the value is not returned. It should not be returned from dao
Please add the license header to all new files
Is this change necessary? I'd expect that `descriptor->GetClass()` can never be `InlineUniform`
This is the only place where we use `node.getAttribute`
nit: I prefer to use `brt` instead of `brt` to make this more readable.
Is this needed? Won't this be handled by the `POST` and `PUT` methods?
nit: missing space after `,`
Isn't this a `const char*`?

I'd rather not add this dependency here and instead have it in the apis package
Why are we not returning the error here?
Can this import be removed?
I'm assuming this was removed by accident, or because we don't support service discovery yet?
I think this should be a `RuntimeException`. It should be logged as an error.
This is the test for the new case
Is the reason that this is a []string here instead of []string in the service exists check?
The test should be updated to reflect that the change made.
Is this an unimplemented error?
I think we need to keep this line in case the module doesn't have `toString` and it has no prototype.
This is not needed.
Please revert the changes to this file.
I don't like having an empty value here.
This is not the right way to do this. The value should not be set to `undefined`
Can you please explain why you're doing this?
This will break when the key is used as a key in an ssh target, as it's a hash, not a symbol.
should this be nullable ?
I think we can just remove this config. It doesn't look like we use it in other places. We should remove it from all of the tests
We need to be careful here since this is the only place where `UpdateProperties` is used. The name mapping is not updated by the user and can be overridden by the user.
Why was this changed?
Why not put the types into `getLLVMRuntimeType`?
Should we also reverse the bytes?
@ndelangen @mcsf @brendankenny @jameswnl this line fixes the issue, but I'm not sure we can remove this `|| false`
I don't think we should log these. We should log them in the UI.
I think this should be in `luigi/__init__.py` instead of the `__init__.py`, as it's not used outside `luigi/__init__.py`.
can you add a TODO here to remove this once we have the API in the persistence layer?
I think this is the wrong place to do this. We should be setting up a test plan. The tests should be done before we can call `#administerable_by?` on them (as well, they should have the same permissions, too).
I think we should make this a configuration value. The default is 10s, so it's not a problem to increase the default.
nit: unnecessary new line?
This is just a suggestion, we can use `useCallback( () => toggleMenu( false ), [ ...] );` instead.
I don't see any reason why we have this as a HashID, it's already available in the `Logic` struct.
Let's move this to `tests/integration/test_worker.py` instead of `tests/integration/worker_pool.py`
Should the first line be `options[:page_ranges] &&= Array(....compact)`?
I think this is the only caller, we can delete the function
Is this a good place to store the configs for training?
This should be `VoucherInterval`
Should we add `ctx` to the `error` argument?
This function signature is getting too long, it's hard to parse the signature
Why does it need to be an action?
Why not just `isset($newConfig['Site']['generator'])`?
Is there anything else we need to pass here, or is this to get the config name from the cluster state?
`entries` is never `null`.
Who's responsible for testing this?
I think we need to keep this as a `next unless val.is_a?(Hash)` to make sure `val.is_a?(Hash)` works correctly.

The logic in this `if` is to return a `Promise` so `handleDataError` will not be called. I think the logic should be moved to the next line (after `handleDataSuccess`).
Why not make this a `const` member?
Line is too long. [83/80]
I think this should be in the third group of imports.
I think this should be `"StrictUnusedVariable"`, since it's not the actual name of the variable.
this looks wrong
Is this the case when the parent is `null`?
I don't think we want to add this change, it was there for a reason, but it's not related to the issue we have been discussing.
This should be uint, as well as the other uint variables.
Why not use `$this->pluginRegistry` instead of `$this->plugins` as we're using it in two places?
I think this is not used.
I don't think this change is needed.
Why not just use `node.cborStore` as a global here instead of `node.OnlineStore`?
Is it possible to have a folder called `app_dir_tempfile_dir` that contains only `.tmp`?
I am not sure we want to have this method, I would prefer if we did something similar for all other ResponseTypeProcessors.
nit: I would write this as `CHECK(config_.monotone_constraints.empty() || config_.monotone_constraints[i] == 0)`
This should not be necessary anymore
nit: `NodeRoleTagValue` is a bit generic - maybe `Role` instead?
I think you can remove this line now.
This is already imported at the bottom of the file. No need to disable pylint.
I'm not sure about this line. I think it should be removed, because it's no longer needed.
I think the other titles should be `Workshops`. Also, I think these should be translated
I think this is not necessary. The manifest should always have a `gecko` key
@joshcooper is there a reason you're using `go` here and `s3` in deploy_addons.rb ?
I think we could remove the ifdefs now
Should we add some info about what the problem is, e.g. what region is required for the AWS config?
This should also be a bitmask.
This is not needed.
Why was this removed?
I think this option should be called `samesite` instead of `same_site`. The name `samesite` is a bit confusing.
I'm not sure this is the correct format for the property name?
This alias is not needed anymore, since the package name is `k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1`
This should be pinned to 0.8.1, as it's a requirement to run against version 0.8.0.
I think this is a bad idea. This is not an API.
This could be simplified to `electionContexts = new ConcurrentHashMap<>(electionContexts);`
I would say: `managed identity must be specified`
I'd rather we just use `http.Request` here.
I don't think that it's a good idea to add a `--domain-filter` here - we should only have one of them.
Should this be in the yaml instead?
I think this is an error, we can't just pass the singleton.
I think this should be `trainer`, not `trainer->get_callbacks()`.
Please, add a new method: block_exists()
This will remove all old files, which is a bit unusual. We need to remove all files from the repo and delete them as well.
@hypeJunction This is an unrelated change.
I'm pretty sure this should be `-1` as the default value for this is 0.
This seems like an unrelated change that could have been done in a separate commit.
This change is not required, but the linter will complain
I am not sure that we are using this function for classification.
This should be `<h2><%= t('.added_to_github_repo') %></h2>`
You should be able to remove this import

This change is wrong, we are storing stats in the state change and the task is not a pointer to the task involved in the state change that gives the event handler a hook into storing
This needs to be `2017-2018`
I think this is a breaking change. The old API wouldn't throw if TargetAssemblies was set. This will cause this property to throw when `TargetAssembly` is not specified. The new API will throw if TargetAssembly is provided.
@smarterclayton is this a new state we can set?
Should we add `@Nullable` to these methods?
We're not doing `sort-object-map-by-key` and `convert-array-to-keyed-object-map` anymore, right?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I'd add a method with a default implementation and return `null`, since the user may want this method to be overriden, and it's a breaking API change.
This looks good, but I would suggest using `snprintf` or some other helper function to generate the message, and also check for `\`.
This is the only change that needs to change in the file. I think it's the wrong place to make it.
I don't think we should be deprecating the statics.
nit: `whether` -> `if`
Is it really needed here or is there a test for showTables?
This should be reverted. It's a bug fix that was fixed in lua.
Why are we removing this condition?
This is not a service, it is an application
Can you add a space at the start of this line?
Isn't this `Handle`?
I think this is going to make a difference in the performance, because the `merge` call will be called twice.
I don't think we want to use `DefaultIncomingDynamicRateLimiter` here, it's a default for `NewDefaultIncomingRateLimiter`
I don't think we need the enqueueAppliedToGroup flag here, since it doesn't have any effect.
I think this method should be private since it's not used outside it.
This will be done for all associations. We should only do it if the attributes are hash.
I don't know if this should change or not.
I think it would be nice to include `err` in the message.
This is not a good idea. It makes no sense when you can select only 1 item, but if only one item is selected, you are going to have two different states that are different. I think you should just remove the last state and only add the ones which are the same as in the `states` dictionary.
Why is this changed?
I think you should keep this in the `ports` block, just as we do with `nginx-proxy`
Why is this needed?
I don't think this is useful. It's only used in a test and it's used in a couple of places so you can just inline it in the tests.
The `c->maximized` check is not needed here since the state will be calculated in the next line
This is an array of package names.
This seems a bit odd. Why not `std::back_inserter`?
I don't think this belongs here.
This should be `||` instead of `||`.
Is there a reason why this is not a method on `CidSet`?
Is the error message here correct? I don't see where this is used.
Line is too long. [81/80]
I'm not 100% sure whether `Get` should return a `ClusterIdentity` object or a `*time.Time`. It looks like `ClusterIdentity.Get()` is only ever used internally. Is it possible to use the existing `ClusterIdentity.Get()` method?
`fmt::format` already has a parameter that takes a string, so this call is redundant.
I think we should use `setAssignedProtoFile(overrideConfig.getProtoFile())` here.
Is this used anywhere?
Should be `COMMIT_STATUS_CHECKS_MAX`. Also, I think we can just call this `commit.status-check.retries`.
I don't think you need the `configuration` var here

This will be done later, but it is ok for now. It would have been better to have a separate interface, for instance, `BlockStartBlock` and `BlockStartOptions` that both `ValidatorService` and `BlockProcessor` can use for this purpose.
Why is this -32016?
Can you explain this change? I'm not sure what is the best way to go about this, but the issue is that `.split('?')` is going to return a string containing `?` and not a number.
This should be `PluginName` since it isn't the name of the plugin.
`priv` is a bit weird here
I would prefer if we didn't add this check.
Please remove the `self`
Is `print(event['Stats'])` intentional?
This is not a valid URL. It needs to be changed to `api.ipify.org/v1` or it will be broken.
This should not be needed
@joshdholtz I've added this method to make sure that we don't call it on app init.
I'm not sure if this is really necessary
Why we need to change this method? We should only need to update the database once for all the operations. If we are going to change this function then we should make sure all the operations that use the DB will be affected in the future as well.
Why is this necessary?
We no longer need the `google-site-kit/v1/data` URL.
Why is it necessary that this is done at the beginning of this function, and the other functions are called in the order of execution?
I think you can pass `&transformer` here as well
@czue @jmcarilli this is the actual bug.
Should this be `&&` to avoid the `&&` ?
I don't think the `ClientCertificate` is needed anymore.
Why is this needed?
Should we also check if the NAT manager is nil?
Is it possible to make `6` a `size_t`?
This test is no longer testing anything.
Shouldn't this also set it to `world_repop + 1`?
//snippet-sourcedescription: [AWS Identity and Access Management (AWS IAM) server certificate.]
Is there an issue for this?
`isUndefined( decimal )` will return `false`, so you don't need the `if`.
Is this a change in behavior?
I don't think this is needed since the defer in line 379 already does that.
This is not a listener.
I think we can remove doubleCRLF from the config
We should not unlock here since the error is already logged above
@ceorourke I added `supported_type_class` and `supported_type_names` to this class so that the `Supported_TypeClass` is defined in the base class and can be used in both subclasses.
This is a bit confusing, as we already have a todo in the database. Can we use the same name here?
I think it's not clear what it does. It's not clear how it does what it does.
Shouldn't this log something to the user?
This should be `AssemblyLoadContext.Default`, I think.
This should not be an INTERNAL_WARNING. The function will return `pc` in this case.
We can remove this check now that there are two different ways to connect to the same uri
I think this will break the tests. We can just change the name of this test to "histograms.int64.histogram"
I don't think we need these 2 properties. They only make sense when there's a queue processor in flight, right?
Whoa. The file wasn't renamed, so I just changed it.
I think `SetTraceLogs()` should be sufficient, no?
This is the same condition as above.
Should this be a feature flag?
I think this can be simplified by using Math.min(val.length, prefixLength);
Why was this changed?
Please remove this method. This class is only used to check health of the executor and not just for the executor itself.
I'm not sure about this. If it's a numpy array, then `segms[i]` will be an array with the boolean value `False`.
Nit: this should be grouped with other third party packages (e.g. `"github.com/iotexproject/iotex-core/protogen",`).
I think the `boost::str` here is useless, as `boost::format` does not take a format specifier.
I would have expected that we wouldn't even want this field to be optional.
I think we should use a toast instead, since this will cause some weird issues in the app that are displayed to the user. It will be more informative.
I would prefer if we could keep the `maybe_` and just rename the function to `addModule` or something similar.
This is an interface, not a class.
`for` loop is not needed here
This is a bit confusing, as the variable doesn't actually indicate whether this is an update existing accounts or not. It should maybe be called `set_update_existing_accounts`.
Why not keep IsActive and IsPresent? It seems like they should be both active and present.
Is it correct to have the same key in both rollup and gby?
I'd prefer if this was a method in `ApiMethodParamTransformer` instead of the `ApiMethodParamTransformer` (which is a bit more general than `ApiMethodParamTransformerContext`). The `SurfaceNamer` is not a `MethodTransformer`.
Why is the `newValue` being passed twice?
Why is this needed?
why do we need this?
Is this the proper way to get the kegg from the smiley? I think it would have made sense to add it to the SmallMoleculeTransitionTable as a special case to allow the molecular to be a bit different from the kegg.
Why not `CloudBackupID`?
I think it would be better if this list was created a constant somewhere, and reused in the `raids` field in `DCSCoutLayout` (and the `raids` field in `DCSCoutLayout`) instead of re-creating it everytime we need to whitelist a scout raid. The reason for this is because of the fact that it is not possible to get this info from the `DCSCOUT` object, which is not something that is required for `DCSCoutLayout` to work properly.
@bhaskar - I think the error message here is wrong. The file is not a directory, it's not necessarily a file.
Why is this necessary?
This should be removed.
This method should not be in `types`
Should we also check if the `schedule.Next(startTime)` is not `nil` here?
Why not just call it "Type" and use the enum values instead of strings?
I would rather use `$extended` here. This would mean that we can get a lot of extra data in the future, which is not ideal.
This can be moved to the if-statement below.
Should we add a new field here?
Should this be removed from the config as well?
Maybe `filterIterator` could be a bit more explicit, like `keepOnlyCompetitiveDocs`? I think it's a bit clearer to understand what's going on when reading the code and when reading the code.
This should be a debug message since it doesn't really say anything, just the file
This is a change in behaviour?
`retrials` -> `retrials`
I don't see the point of this help message
why this change ?
@jurre thanks for the PR. I think the personal options should be added in the `env_options` method too. It's the only place where you need them to be added in `env_options`.
Isn't this going to overwrite the adapter in the connection config? If so, is that what we want or should we just default to that?
nodeIP is not used

This is the only mock that's actually used, right?
Is this a good idea? Can we just do `value = value.TrimEnd('"');` instead of `value.TrimStart('"');`?
Why is this necessary?
This was just a typo. This was causing tests to fail.
This should be a warning, not a warning.

Why do you change the formatting?
I think we could just use the `speakStatesFirst` variable here
This is needed because `PATH` is not the Java home directory in the `JAVA_HOME` directory
This can be removed.
Isn't this the same wait as above?
I don't really understand what the difference is between `logger` and `site`. Is it because we don't know what `site` means and how the `logger` is set in the `site` key?
nit: this function is unused
Shouldn't we throw an exception here? Or at least print the error message?
I think we should also close the body here. It is possible that the body could be nil and we would return an error.
Why is there an empty line between each `IConnectionLifetimeFeature`?
Should we also have an overload for `isList`? I think `isObject` and `isString` could be useful
Nit: I would have used a variable named `isFirstBatch`.
I am confused why this needs to be a static method. It seems like a utility to me.
Nit: This is a good candidate for `PerfUtils.CreateString(100)`
I think we should return here, not return.
I'm not sure if we can do anything here. It looks like the only use of this enum is for the shortcut details panel, so I don't think it needs to be in the utils package?
I think this should be removed as it is not used.
These are used in a lot of places and could be moved in a single file.
remove this line

This will fail if `SplitPath` is `[]string{}`.
This should be `private:data:` instead of `data:`.
Shouldn't the `minSequenceNumber` be a primitive `int` ?
This change is unnecessary. `int_version` will have to be unsigned, if the version is a numeric integer, it will have to be converted to an integer first.
I think we should add a TODO to remove this when we are no longer using it
I don't think you need to do this change anymore, as `Bolt::Util.windows?` always returns false on Windows.
Is there a reason to create a new Intent() here instead of calling `getSignKeyId(null)`?
Why is this disabled here?
This should return `sn.Username = usr.Username` to match what we're doing for the `user` struct
`e` should still be captured.
I would use aria-labelledby, which is more consistent with the rest of the codebase.
Is this check necessary? I thought the only time we call updatePreviews is when we get the output value, so I'd expect we'd always want to update previews.
This struct is unused.
I think this should be `sample >= ackDelay`
This should be internal
I'd move this to a separate file.
I think you mean "can't find declaration of **'y'**."
This change looks like it was a bug, as we were using int before.
nit: maybe we could rename the test function?
Why are we changing this? We should not be adding empty lines to imports.
Why did this change?
This function is already called by `tap_get_finger_count`.
This should be reverted
This should be `OPSZ_CACHE_LINE != OPSZ_CACHE_LINE`
This should be moved to in the proto package.
We should add a unique index on the `changeset_id`, otherwise if someone has a subscriber with a different changeset and subscriber id, then this will cause a unique constraint error.
`sendBotReply` - `channel` is unused (from `unparam`)
This is not correct. We don't actually check the object, and it's a "real" object, so this is not the correct return value. I suggest we change it to: "Returns whether the given object (maybe an instance or class) is implementing the interface."
This is not necessary, right?
We should also add `:user_id` as well
I'm not sure about this. We should have a config that enables hive for the whole application.
Why do you need delete events for the deleted object?
This is not correct, it will set the default value of PolicyNames to "" in the else branch
I think this could just be a `set`?
Should be done only if the passcode mode is Check. Otherwise, the mode will be switched back to Check when the user clicks "Set mode" again.
This seems to be a typo.
I'm not sure if this should be in `config.rb`, but it's not a big deal.
We should remove these
We need this for `Provision` too, right?
why is this not just a counter?
I guess there was a typo in this line, so that was fixed in another PR.
This is a good change but I'm wondering if this can be refactored into a function to be more readable.
I'd prefer to see this option be added to the `options` hash, as that's what `set` is doing.
I'm not convinced this is the correct way to deal with this. I think the only other way to do this is to have the `Provider` interface implement the `Interface` interface and have this package implement the `Interface` interface.
This should be `context.getResources().getStringArray(R.array.back_button_go_to_pages_tags);`, no?
I don't see why these files are required, they can be removed.
Why this change?
This is a very bad check. If you are not going to use the target_id of the target, you should check whether the entity is in the list of mobids and if so, send the bar enable event.
@johanstokking I think you'll need to add the column to the migration script.
I'd rather see the receiver set in the tx.Fields and then we could get rid of all the switch statements.
I'm not really sure about this, but it looks like this should be configurable via `flag.StringVar`.
Should this be `pythonapi.rst`? I thought that the generated docs were generated by the sphinx-auto-generator? If not, this is not what I would expect it to be
This should be a method of the data.cachedChanges struct, not an attribute of the data
I think we should keep the existing `run_task` method and just use the new one.
This makes a connection to the switch twice, once to connect, once to a bridge, once to create tables, and once to create tables.
Is this correct? The wal_ may not be available at this point. If we have the same id, then we need to rollback the wal.
This is wrong. It is a `FormType`.
This needs to be a `var installInventoryYumEL6 = `
Should be named `TIMEOUT_MS`, since it is a timeout in ms.
I'm not sure this is necessary
Can we make these consts private?
Why not use the string as the field name here, and then use that as part of the `diskAttachment` struct?

I would prefer to not change the order of operations, but if it's not the case, it is ok as it's an optimization.
I think this could be moved outside the section as well?
The `(JObject)` cast seems unnecessary here.
It seems like it would be a good idea to warn if edges is not a tuple.
Why do we have a separate list here, but not in all the other volumes?
I don't see a reason this can't just be a readonly field.
Is it safe to use this index?
I don't see the point of this change.
This is not the minimum version of docker-compose required for ddev.
I don't think we need registry for this. You can use `registry.Registry`. Also, I think we can remove this file.
Is it really necessary to use `int`? I don't see any `int` conversion to `int`.
This will be a lot more specific than the WebDriver one right?
I think we don't have to call this `exporter` because the variable's name is `pipeline`. The other exporters don't have to use it as well.
I think the CLI tests should be updated now that it is removed
nit: can we cast `_maxFrameSize` to `int`?
Why is this increased?
I'm a little confused by the difference between `now` and here. Is this because it's a time-stamped datetime, and we're just passing it to the `fetch` call?
this was the only change in the file, and it seems to have been unintentional
Can you use constants instead of strings?
Why not just set the priority to 0 and the menu to 100?
Should be `getConfigService()` as the other method is called `getConfigSetsHandler()`
This seems unrelated to this change.
I think the name is misleading. I'd call the annotation just `platform`, since that is what is being returned. I think `aws` should be enough to mean something like `openshift`
This should be moved to the bottom of the import block.
nit: I think you can use `MetadataTableType.ALL_DATA_FILES.type`.
The test is not passing with this fix?
Is this intentional?
Is there any reason we can't use a constant here?
We usually avoid * imports. I know it's just a matter of preference, but please don't import `*`
// TimeoutType is the thrift type of the timer.
This is probably a good change but we should probably add the target to the message as well.
I think it's fine to leave this blank, but I'm curious why there is an `\` at the end of the line.
nit: should this be "can optionally be used to provide an Azure Environment"?
I think we need a `.onInstall()` to ensure that the plugins that need them use `this.onInstall()` and `this.onUninstall()` have called `this.opts.onInstall()`.
nit: can you sort these imports?
I'm not sure about this. We should have a function to get the actual type of the input.
This doesn't look correct. The call will memoize the return value, and not the state of all streams on its inputs. The reason I'm not saying this is correct, but I think the semantics should be the same.
Can we remove the `.get()` here now?
We don't need these using directives
Please use the `QDescGenerator::typeSupported` method.
It is not a good idea to have public functions in the interface. I think you can make them package-private, and make them package-private if they are used in more than one class.
Why are we removing these?
Should this be `Time.now - start`?
This function should also be `async`.
"remove it and de-indent all the code inside it"
I think this is fine, but if you are going to use an attribute, you need to make sure that the `stages` argument is a valid integer in `OHEMSampler` and set the default values to `None`. Otherwise you'll have to use the defaults here and in the `Sampler` constructor (which is what the default value is for the `stages` argument to `__init__`). If you are going to do that, then you need to add a new `num_stages=0` argument.
I'm wondering about the logic here: if we don't reconcile at all, shouldn't we still enqueue the SPC, or is it possible to delete the SPC from the pool?

Please use `NotFoundException` and add a use statement.
I would put this model in the model_backbone_mstrain_2x_coco.py file
I am not sure this is the right way to do this. We are using the same pattern for all the other commands, so we should probably be able to do something like "if test x$with_modern_grub > xyes && (test -m grub)"
@jessesuen I'm pretty certain the linter didn't catch this before. I think this is a good change to keep.
Line is too long. [84/80]
This should be removed
We could use the same format for `doc.stack`. `opts.parentStack` will contain a list of stack traces, and then you can use that to build the string with the `\n\n`s
Extra empty line detected at class body beginning.
Why did you change it?
This is a change in behaviour - the `err` will not be wrapped by this function.
I'm not sure why `[0]` is needed here. If I am wrong `lookupPath` would be a no-op, but if I do not want to do it, the `[0]` would be fine.
I would add the user's message to the anchor, so that we can link the user to the `user_message_author` if needed (I know this isn't part of this PR, but it seems like it would help us keep the code clean).
I'm not really sure this is the best way to do it. This seems like an API break, not something that should be done in the future. I would like to hear other thoughts on the best approach
This is an example of why this is needed. I don't see any code that would use this value for anything other than storage.
Why not `log.url.debug` here?
Why not `<empty>`?
This should have been `wlr_surface_commit_pending()`, but the committing code was moved to the `wlr_surface.c`.
@njhill @mjsax I think this is the problem, it should be `blockHash` and `blockNumber`.
Why do you want to show this in this case? The `OrphanedError` will be shown when you edit it.
Shouldn't we keep the IsSystemLog check?
This should be done in another commit (it's a separate PR) as it should not be part of this PR.
Why did you remove this error type?
Please add an empty line above and add an empty line here, otherwise LGTM. Thanks!
Why not use `StringUtils.isBlank()` here?
This is going to break the user settings page for the first time.
Why is this needed?
Why do we need `_delete_` here?
It would be nice to add this to the `jscs/jscs.js`.
Should this be `--network=network`?
This is a change of behaviour, we want to avoid a command error when installing a package.
Why do we need this struct? Why is it needed?
I'm not sure if it's a good idea to disable pylint on a public method that's public. I'm thinking we should just disable it if not used, so that we don't need to disable it everywhere if it's not used.
Why do we need a new application name? Can't we just reuse the existing "name" in the `WebStorage` object and pass it in to `setApplicationName`.
Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
Please revert these changes, I know you're not doing that, but I would prefer to see them in a separate PR.
This seems unnecessary and potentially dangerous. If a component calls `hasData` multiple times for a given entity then `reportArgs` is not guaranteed to be defined. I would suggest we keep this explicit and use a `let` instead.
I'm not sure if this is a good idea to remove this annotation. It's not used anywhere.
I think it's better to make this channel buffered, so that if there is a problem reading the data from the backend this can just hang forever.
Use the return of the conditional for variable assignment and comparison.
This one should be reverted too. The method signature was already changed to accept `string`
What's the issue with this suppression?
I'd move the update to after the damage, otherwise it will be called twice.
Isn't the `device=None` default here redundant?
I think we can use `o.name` to check whether the job is running or not.
Shouldn't this check also be done for `app.url` ? (same question applies to all other places)
Why is the acnp informer not part of the CNPInformer ?
This is a bug.
Should be `s.FullClose()`?
This is a problem. If the check fails, the notification will not be generated.
This should be an enum.
I'm not sure why these changed? It doesn't look related to the changes to the `test.go` file.
Should this be a LessSpecificReturnStatement or a LessSpecificReturnStatementStatement?
This is a change from the old log level to the new log level.
This line can be removed.
Maybe "Please enter a scale"?
Why did you remove this?
Is this needed?

I think you can remove the `if globalVars.appArgs.secure:` part since we only have the `secure` option.
`checkout`, not `checkout`.
This doesn't work as expected - `f.server_conn.ip_address` is a list
Why is this necessary?
This is a bug fix.
nit: import grouping
This method does not cross, it returns true if the rectangle crosses the provided triangle or false if the rectangle is outside the provided triangle.
TODO: Test MDv2? I think we should test that we get the new metadata when we update metadata version.
Why this change?
Should this be `virtualNode`? I thought that it should be an `Element` and not a `Node`.
This file is not needed, please remove it.
Extra empty line detected at block body beginning.
Can't we use `Capability.isEth66Compatible()` here?
I don't think you want this in the `before` block
Can we move this validation to `ValidateURL()`? I think it's not needed here, as `validateURL()` is already doing it.
Should we rename this to `TestNormalizeToPartialURL` as well?
This was the problematic line. The generator generator is supposedly returning a generator, not a `Iterator`.
I would prefer `l.m.Lock()` instead. This is a lock for the `choosePeer` function.
I think it's better to import only the modules that we need.
This import is unused. Please remove.
This looks like a hack to me. Why is it not needed for cloud package?
This is a good change but I'm not sure it is correct. I would have expected the Lob_Error_Or_Create flag to be applied when the file is already created, but I think it was added to make this change to the file.
Should this be `LOG.finest("Mapping {} to docker image {} {} times", caps, name, image, maxContainerCount);` ?
The #ifdef here is not necessary, since it's defined in the header.
I think we need to rename this struct. `readBlockProducersByHeightTests` is just for testing block producer.
I'm wondering if we should just use the field name from the sync object here instead of passing it as a parameter.
Is this change necessary?
Can we make this private?
This should have an `Interceptor` field, and it should be initialized in the handler.
Why do we need to create this directory? Can we use a more unique prefix?
I think this is the wrong way round.
I'd just use the `Errorf` function here.
This is not a valid value for this property. It needs to be set on the item object.
This is not used anymore?
Should this be a check that can be performed?
This is not a good idea - you are casting the whole object and then calling the method again.
`datetime` is not used
Is this the same as a call to os_reset_stolen_reg()? I think we should just call that directly.
I'd suggest we just use a `Supplier` rather than a memoized method here.
This will break in case the `actualNode` isn't a `div`.
Why not import `HERE` from `kinto.core.utils` instead?
This is an example where it is easier to read if this was `(m0, m1, m2) -> Math.max * pow(m1.key, m2.value)`

Why did you change this?
I think this line needs to be moved down to the 3rdparty libs.
This method is not being used outside.
Why not use the default value `'\0\0'` instead of empty string?
I'm not a fan of `status=success` and `status=failure` as we can easily tell what's wrong with the output.
Why is this change needed?
I'm wondering, do these constants still make sense?
I think the names of the options should be `debug_clear_online_weights`, `debug_dump_online_weights`, to match the other options.
I wonder if we shouldn't have the same problem for the other cases where it was a comma delimited string?
Should it be "Executing stopped, crashed executor/container"
This is not the correct url, it needs a `GET` request.
I think it would make sense to put this in a helper file.
This is not correct. This method is used in `create` method, and `edgeInvoke` method is used here. The `edgeInvoke` should be called when the invocation is created.
I guess this is just a placeholder to be removed in the future?
This is a bit unrelated, but seems that we can't change the method signature of `Tree.contains(T)` as it will break compatibility with the `Tree#contains(T)` method.
I know that's a bit of a bummer, but why do we have this?
This can be a `LinkedHashMap`, and the `mData` field can be `final`.
Can you move this code into the `naturalSortCompare` function?
I think this is a duplicate of line 415.
Is this change needed?
I'd prefer if we had a generic `bitswap` command in a `commands.go` file.
I think we should remove `Google` from the `serviceName` and `Google Analytics` label.
Do we really need this wait?
This is a new field. We can add a new field here and use `omitempty` in the `type ENI` struct.
This is an example where we can't find any references to `/widgets/` and I think we should delete this file entirely.
Why do we need the `@since` tag? We don't have any version number.
This should be `inconsistent-return-statements`
I think we should use the `https` subdomain here
This is useless, you can use `SerializerException` directly
Can we add `omitempty`?
We should not add this here. The duration type should be a string.
nit: I think we should rename this to `toGRPCOptions` or something like that.
This is a bit of a nitpick, but I think it'd be nicer and more concise to use `nil` rather than `nil` in these tests.
This looks like a bug fix to me. Previously, we would return an error for `PaymentChannel{}` if it's not found. With your changes it would always return `ErrDuplicateChannel`
I don't understand why the extra var here is necessary.
Isn't this the same as checking if the error is an `s3.Error`? I think we want to check the error code.
I'm not sure this should be a part of a public API? I wouldn't expect it to be used outside this module.
Is this change needed?
Why is this needed? Is this because we don't want to use the `subject` field in a remote sub? It seems like this would be enough to just call `processGatewaySubjectSub`.
I think we can remove this whole file now, as we don't need it
This is a good fix. We should probably add a note in the release notes about why this is changing
Nit: the name `DecodeMap` is a bit confusing here because it does not decode the fields, but also returns `DecodeMap(map[string]Decoder, bool)`. How about `DecodeField(field string, fieldDecoder, match bool)`?
Why is it a timestamp here? Should be the block commit time, not a timestamp?
I'm not sure about this. I think the deleteCollection() should be called in the catch block.
This should be `datatable.rbind([])` as `datatable.bind` is a method.
I'm not sure if this is the correct way to fix tests for kokalsa.
I think that this can be private, it's used in a lot of places (and the `JsonRPC.Modules.Eth` namespace is private)
I don't know how we ended up in tests like this. It looks like a lot of these were changed to be constructor-based and not a constructor.
@khalldawson this change is not needed
Can we make this a constant?
Can we rename the job to `sender_gcpbroker_broker` to avoid conflict with the `sender_gcpbroker.go` file ?
This was a bug. This was a string format.
Could you also test `nrmse.getMetric()["value"]` here?
Why is this necessary?
I'm not sure about this. I think this is just a style change. If you have a specific reason to change it it should be in a different PR.
this should be `getErrorCode()`
This is the only change. The rest is just cleanup.
This will need to be updated. The `assets.js` is a new file, not the `assets.js.erb`.
nit: maybe change the name of this function?
I'm not sure if this is the best way to test randomness.
This is the only place that we actually use the `HeartbeatCh`, I think it would be best to keep a pointer to the channel, instead of using `make()`.
This change seems unrelated.
This is an example of where we should change the level of logging. I would like to understand how to make it more clear
Why not use `hex.DecodeString` here instead of the conditional?
@mattwire this line is the one you wanted
I'd like to see this moved down one line. I'd like to have the imports grouped together.
Should this be `readonly`?
I think this should be `logical-tautology`
Is it possible to get an `inf` here?
why not use a constant here instead of a hardcoded 0 ?
I think it's better to use `if not hasattr(self, "_close"):` here and in the other `if` block.
I think this needs to be added to the `requirements` section.
Why did you remove the import here?
Should be `return OPSZ_8;`, otherwise LGTM
I think you should just use `str(account_id)` here
I think you could also set this value in the else branch
Is this the right value for the OSDisk? Shouldn't it be `DiskSizeGB: 120`?
This is the same as `structlog.get_logger()` but it's not clear why it's a class method. I don't think you need a class method here.
Should we remove this one too?
I think it would be cleaner to do this in a separate test
This is an actual fix - we need to change this for the new UI
I wonder if it's possible to get this information from `bcache.BlockCache()`?

I'm not really sure how this is supposed to work, but it doesn't feel right for a log to have a bloom filter that doesn't use the bloom filter. If you have a bloom filter, then you're going to use the bloom filter, not the bloom filter.
This change is not needed, it's already in the html_safe view
I'm wondering if we should do this check in mainWindowRef instead of in each window.
Should this be 1.32?
This should be `logger.info('%d listens for %s' % (len(listens), str(user)))`.
Shouldn't we use a different template to render the `meta` element? (or is it the same as a `<p>`?)
This is the only real changes in this file. Please revert.
Why is this a new metric and not the old one?
I think this should just be a nil slice and an error.
I think we need to support this in `SelectQuery::validatePath`. The `SelectPath` should be able to handle multiple paths with this error.
This is a good example of where the change is worth keeping in mind.
I think this can stay as `existing_approval_for(current_user)`
This should not be needed.
Is there an advantage to this? I don't see any of the other examples of these in the code base, especially the `require` statements.
Should these also set the address mode when the normalized coords is false? I think they should be set when the image is normalized.
Should we use the same naming style as the others in the app? Maybe `musical_shows_shows`?
Should this error message be updated to indicate this is a noop task?
This change doesn't seem to be needed.
This is just a nit, but I would prefer to call this `test_nonexistent_bucket` (or something similar) instead.
Can you please use ternary operator for this, and please use `==` instead of `==` for the comparison.

Should the default value be 10370? Or do we not want the user to be using this for gossip?
I would suggest we make the ctor private as well, as we are not using it in the constructor
This setting should be in the config file
We should not add a migration here since we are not going to be able to update the version.
I'm wondering if we should just return here and not allow to set it. It feels like we could just do `if !File.file?(@options[:hosts_file])`
nit: can we rename this to `applyOnReload`?
this is not needed
This could be an option instead.
nit: rename the field
Why is it necessary to set visibility to visible?
Is it worth to add `.repeat(1, 1, 1)` to `bboxes` so that it does nothing if `num_classes == 1`?
This example is used in the google example for google-cloud-storage, I've changed it to the example in the gocloud example for google-cloud-storage
I guess these imports are not necessary.
Why not `async Task.WhenAll(processors)`?
`Class<?>` is not initialized here, it's `final`.
This should be `where(:thirty_day_commit_count => 0)`
Is it really necessary? It doesn't look like it is used. I would remove it.
Why is this necessary ?
This check seems redundant, given the one above?
I'm not sure why this was changed - did it cause issues for the tests? It seems unrelated to this PR.
Isn't this the same as `raise`?
This doesn't look right - why do we have this in a separate interface? Can you please explain?
This is just a refactoring for consistency. The `GROUP_USERS` table was removed. I'm not sure if we should have this column or not.
I don't understand this change
Why is the method here called static?
@d-m-u Are we sure this is correct?
I think this should go under `tests/data/test_examples/`. `data/test_examples/` is not a build file.
Why this change?
This error message is misleading. It's not actually "unauthenticated", it's just that we're not allowed to request anonymous access. I'd rather say that the user should provide a message that says: "You must provide the username of the client to use anonymous access to this operation. You can use a different username to login."
I would rather this be done as `record[cache_column] = (record[cache_column] || 0) - 1 unless record.frozen?`
nit, `count` can be a float64
I don't think there was a reason to add the interpreters option.
Please add a license header, as we discussed.
@john-diesh This looks like a hack to me. I'd rather see an explicit API that would return all the GPUs that are available. I don't think we can assume the device is available on all of these platforms, and if there is a better way to do that then I'm happy with it.
nit: I would use `read.parquet.vectorization.enabled` for consistency with other properties.
I don't think we want to require this here. It's in `RSpec::Support::Rspec`. If you do need to, please add it in a new file `spec/core/lib_spec/spec.rb`, that file can be reused by any spec file that uses RSpec.
Can we have a test where we link a Dataverse dataset, but publish a Dataverse dataset?
This is a breaking change, as it would require all the certificates to be passed to OpenSSL.
I think this is the wrong name for this function. It should be `appendFSSapabilities`.
this is not a Cfn, it's a CloudFormation Cfn

Should we have a test for it?
I think it is better to define ARRAY_SIZE as a static constexpr.
Why is this change necessary?
nitpick: this can be private
`getRootAsMonster` and `getSizePrefix` are not in use by anybody, and the code should probably be deleted
Why do we need to use `DATE_RANGE_OFFSET` here and in `getCurrentDateRangeDayCount`? Can we just use `DATE_RANGE_OFFSET` directly?
Should this be `UA-999-8` ?
I would call it KeystoreManager.
nit: I'd just inline this
This seems like an unrelated change.
This doesn't look right. It's not in the module scope.
This is only ever used by one of the tests, right? Should we move it to `sigfd.c`?
nit: "file" -> "Data File". "of a" -> "of an"
This file should not have any changes in this pull request, it is just a test code. Please revert
This should not be a break, it should be in the if block.
Should these be moved to `util`?
I think we can remove these. I'd rather not do this.
I think this should be `!strings.HasSuffix(DbCfg.Host, "]")`?
This is a breaking change - we need to bump the version number.
I think we can just return `errors.Wrap(err, "failed to unmarshal connection config")`
We should keep this flag, but add a `--unit=` flag to force users to specify the units.
I would suggest to use `syscall.GetConsoleWindow` instead. The main reason for using `GetConsoleWindow` is for the `user32` API.
This is the same as `if event.Context.AsV03() != event.Context.AsV05()`?
Why do we need a default watermark value of -1?
Should we sort this so that there is a consistent ordering between `resolvedReaders` and `resolvedWriters`?
I'm not convinced this works with the current Mongo client. I would rather we use a custom connection string that is set in the `mongoClient.s.options.cryptdConnectionString` property.
Why are we encoding here, but not elsewhere in our codebase?
I'm curious, why is the log level changed here. The warning level has no effect.
I wouldn't change this line, but leave it for consistency.
Can we call it OpenvpnPortForOpenvpn instead of OpenvpnPort. OpenvpnPort is a bit confusing. Also, openvpn should probably be openvpnPort for consistency.
This is not equivalent. It will close the connection and return immediately
I would like a test with a plan with a `current_churn: 10`.
This is not needed as DataBaseDriverName and DataBaseAliasName are not set anywhere.
nit: use named arguments for all the parameters here and in the tests. I know that's just a nitpick, though, since there's a lot of these in this file, I don't think there's a great argument for it.
I wouldn't remove this, it's a bit weird to have a single activity processor for every one.
I don't see how this works...
Is this necessary ? It seems like it should be handled by the base class already
Why is this change necessary?
I don't think we need the aliases
I think this is a bit of an odd thing to do here. I'm not saying it is correct, but I'm just curious why this would be needed?
I think this can be done as a follow-up.
I think the `-ComputerName` is unnecessary? It's already in the `hostname`
I think it would be better to print out error instead, so the user can understand it and what is wrong.
I would prefer not to introduce this error here, because the error is not related to the address. I think it would be better if we could have an `output.Error` type that wraps the error and returns an error. Then the caller should decide whether to return an error or not.
Should we implement `GarbageCollector` instead?
I don't think this test is correct, the signer should have already been removed
This is the only change that can be reverted. The rest is just refactoring to make the code more readable.
`fn` isn't used.
why not use a default implementation?
I wonder if it would be better to have a new function `func (s *Server) maybeResetTimer(now time.Time)` to make the intent clear?
I'm not sure about the name of these tests...
Why do we need the plural `PLUGINS` here?
I think it's better to check that `actualNode` is not the node itself.
This could throw a NPE, but I think we should at least log the exception.
Is it possible this will fail if the application is not in the gecko manifest?
I don't think we need these here, just set the values in the dependency object?
Isn't `Same-domain` the default for `referer` ?
I would like to see these icons in a single place, since the `material-icons` are a list, not a list.
nit: should this be `NewWorkflowDefault`?
I'd prefer to see this done by a single promise instead of the promise chain. That way, it's more clear that the function doesn't return a promise, and we're not doing another thing.
I would prefer to have direction be an object of the "direction" type, so that it's not "hidden" by default.
I think this was the only usage of `deparam` in this module.
why is this removed?
this can be `range(len(gpu_ids))` as `range(cfg.gpus)` is a generator.
Why was this changed to `finest`? It looks like the old log level was more appropriate to me.
This is the line that actually changes the output of the render queue.
This is a breaking change to the code, as it will not overwrite existing directories (because the `CopyDirectoryRecursively` method will overwrite the existing ones and create a new one, but we'll need to update that).
I'm assuming this is for debugging purposes?
I would prefer `json.MarshalIndent` to be used everywhere instead, and `json.Marshal` to be used everywhere
I think this should be `map[SecurityGroupRole]IngressPolicy`
Why not use `TypeDescription` instead of making it public?
The size of datum_vector must be equals to the number of rows in the transformed blob.
I would add a new one with a default value for the blockHash and leave it as a required parameter
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
Why this change? The normalization layer does not convert to FP32.
We should move this file to `scripts` directory.
I'd rather this were a `t.Fatalf`, but this is fine too.
This will cause the import path error
I'd like to see this as a separate commit (i.e., a separate PR). I'm not quite sure what the purpose of the change is, but it seems like the other changes in this commit are just formatting changes to make it easier to review. If that is not the case, we should just remove it. If you're not going to merge this PR, please make sure to merge this one and the rest is good.

I think the previous implementation was more efficient.
"will be post" should be "should be taken" ?
I'm not a fan of the name.
I wouldn't put this into the default, as we don't want the default to be overridden if the value is `false`
Is the change from `Duration` to `Millisecond` intentional?
We should probably move this into a helper function.
I think this needs to be `write`
Can you make this an envvar? I don't think it will ever change.
Nit: Remove empty line?
I'm not sure if this is the correct place to do this. This should be the `if` statement below, where it returns the `Raw` instance if the `TLSApplicationData` is empty.
This seems unrelated to the PR?
Should we add a new `STATISTICAL_FILE_EXTENSION_DTA_LIST` that is set to `"DTA"`?
Why this change?
@joshcooper @danjm is `travis-ci.rstudio.org` the correct URL?
This can be null.
I don't know how this works, but I don't see how this will be shown in the docs.
I think we need to add `__proto__ = Realm.Object.__proto__;` before this line to make sure the prototype is set.
nit: we can move this to `internal/task_manager.go`, and then just call `m.taskStore.GetTasks(request)`, which would be the only place this is called.
The old size should be `new_size + old_sz` here. Otherwise we can end up with a large pool that will get freed.
This is fine to keep as is, but I wonder if we should just make this method `protected`, and remove the `static` modifier. I don't think there are any reason why it wouldn't be.
This is not really a longrunning operation
This should be a constant.
Why is it not a scope?
Why this change? I think it's a good thing to return the random number, but if it's going to change in future then I'm ok with this change.
Can we use the same name for this variable?
This should be moved into the `express.config.js`, and the `plugins` variable is not used outside of `express.config.js`.
I would put a check for the `AuthMethod` first and then the config value.
I don't think it's a good idea to check the validity here. This should be validated in `validateTrustedOperators`
I'm curious if we can just pass in an empty Context here.
I think you want `attachStdin` to be a boolean, not a boolean flag.

This seems to be the only place in this function where this is called (and it's only called in one place), can we just have `c` here directly?
Should this be `new[]`?
I think this should be `gquicVersion0 + 3*0x100 + 0x7`
This should be `self._repr`
This doesn't really need to be a method. Can't this be a class method on the class itself? I think it would work fine without the `user_path` check.
Should this also be checking that the `a.Tag` matches the tag in `Protocol`?
This is a BC break for people extending the `ParameterBag` interface and overriding the `get_class` methods.
This should probably be `str()`
This is a bit of a hack, we should probably have a macro that will handle this case too.
Extra empty line detected at method body beginning.
This is the only thing I am not sure we want. We should not be doing that for all users.
I would move this assignment down to the `if (p == nullptr` block.
I'd just call this `remove` instead of `toggle` since `toggle` sounds like you're removing an element.
I don't think you need the DeviceStatus field, it can be just a boolean.
This can go in a separate module, I don't think we need this one.
I think we don't need this boolean anymore.
Should these be `dr_unregister_*` events?
Should it use the same style?
This should be a `RepoDir` type, not an error.
Is this necessary?
This could be `to-1` as we are not checking that the root was the correct one
I think we should add an issue and link to it here.
Line is too long. [83/80]<br>Use the new Ruby 1.9 hash syntax.
I'm not sure about this. It's not possible for the result to be in a state where the deadline is not reached and the deadline will not be exceeded.
I'd prefer `return lua_error(L, "ItemId is empty");`
Should this be an error or at least warn?
This is a bit of a hack, but it does seem to work well. I think I'd rather just remove the `curl_cmd` and just have the flags directly in place and then have the `curl_cmd` call `app_host_flags += ' -k'` in the `else` block
This is an unrelated change, but the only other changes are this.
This is a bit of a hack to ensure that a root chunk can be encrypted. I'm not sure how much we can do about this, but I think it would be better to make this a separate function that is used by both.
I think we should add this option in the migration guide as well.
This looks suspicious. What is it used for ?
This seems like a very fragile test to me. What if the port is not available, but is in use by a different port? I think that would be a good thing.
I think this is a good idea to make this a `TimeSpan` so we can have a default of `TimeSpan.MinValue` or something.
File is not `goimports`-ed (from `goimports`)
Why the space?
Should this really be done after the call to `sigprocmask_syscall` above?
This is the interface for the download status requester.
Why do we need this field?
I think it should be a warning instead? I'm not sure we should be skipping the whole transaction.
I don't think you need this field, it's already defined in this package.
I'm curious why `config.XDPEnabled` was changed to `dp.xdpState == nil` here instead of `dp.BPFEnabled` in line 313?
I'm not sure if it is a good idea to use a do-while loop here.
I think the default is None, so we can remove this parameter
I'm assuming that this was a driveby, but I don't understand why we need this.
I don't think we should have a new option for this? If it's not used, then the default is fine.
This seems like the wrong fix. The function should be returning the `CommonName` instead of `cert.Subject.CommonName`, which is the common name we expect.
This is a great example of a test where the fixture will be able to run without any test, but I don't see a good way around that.
I would just put this in the constructor.
nitpick: can you add a new line after the `\n`? Otherwise LGTM
please avoid using import *
I don't think this is necessary. We can join the cgroups when the container is running in rootless mode, which wouldn't work in the case of an empty cgroup path.
I don't think the wording of this is very clear. Maybe `aggregates changed to operate on a single column`?
I think this is not needed
Should we pass in the `RegistrationToken` in the `Register` method?
I think this should be named `SF_APP_USER_AUTH` or something like that?
Is this number going to change in the future?
Extra empty line detected at block body end.
I think this is the same as `cancelled` above
This line should not be removed.
I would prefer to use `===` instead of `typeof`.
Why does the prune mode have to do with the unwind? I would think that the prune is a separate operation and we should not call unwind from the main function.
Can this just be `uafu_irq.irq_buf` instead? It's just a buffer for the IRQ.
I think it would be better to just do `if (fcontext.base == null || (q != null && !fcontext.base.isEmpty()) {` here. The reason for this change is that it's more readable and we have less branches in this method.
Why was this changed?
this is not needed if you are using the standard errors
Can you rename this to `X509NotExpired` to match other functions?
why change to org?
I would say that we should make it more explicit that this is the maximum allowed value.
I think this is the main fix here.
Should this be an error?
this was removed because it was not awaiting anywhere
Do you need a check here that the type is `INPUT_GROUP`?
I would call it `DockerComposeMinimumVersion` and add it to the docs.
I don't see the value for this.
// We can just return an error here, we don't need to log it in any case
I don't think that `score_thr` is needed, as it is not used anywhere.
We should probably change the `role` attribute to `site-nav` to keep consistency with other classes that are used in the `nav` element.
Can you explain this? I would expect the displayname to be empty in that case
Why was this changed?
nit: you can just do the ternary expression in one line: ```js var statusButtonX = (this.workspace_.RTL ? (marginX - this.flyoutWidth_ + statusButtonWidth) : marginX - this.flyoutWidth_ - statusButtonWidth) / this.workspace_.scale;
We can add the new command here too
I think this filter can be removed.
Can you rename this to `FLOW_VERSION_2_0`?
Why was this removed?
Nit: remove the empty line.
This is not the correct way to do it: it's only going to work in the most recent install. It will also need to update the install.
Is this change needed?
This is a little weird, because it doesn't work if you have multiple cards, but the code is still broken. I think you should just use `options.lines` and then add the `items` variable to the html.
I don't think this is a good idea. We shouldn't be looking at hidden methods.
This is a breaking change, we need to make a new flag for it
This is probably a leftover from the test rebase
I think the `upgrade-cstor-pool-` prefix can be removed, and the `upgrade-cstor-volume` name should be `upgrade-cstor-storage-pool-`.
This can be simplified to `locked_features || locked_features.any?`
Shouldn't the prefix be `qutebrowser-` here?
I would prefer the original code here, because it is easier to read. But, I would prefer the former to be the simpler solution.
I'm not sure this is a good idea to change the type of a member variable, since it is only used once in this function. But, as far as I can tell, this is a copy paste error?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
I think we need to update the `response_errors ` to include receipt balance.
Should this be an error rather than an `Undef`?
This will break the old feed. The table should be `FEEDS_EPISODE_NOTIFICATION`.
This should be "error executing query statement"
I wonder why these tests are using `test-instance.salesforce.com`. I thought they were for the instance endpoint
`variable` is already of type `const VariableBase *`
I think we should remove the "Surface" from the names.
Why do you need the extra parameter?
This is a public API. It's not intended to be used in a production code, but it would be better to make it a no-op if you are not sure it is the case.
This should be handled by the `BaseApiRequestBuilder`, not here.
I assume we can delete this whole file?
We can remove the `go-libp2p-peerstore` dependency now.
Is this needed?
This change is not needed. The query will be able to fetch the list of soupNames, which is the same as the list of the soupNames table.
The `io_thread_pool` is not a `unique_ptr` here, so I don't think it's necessary to check for null here.
Should this be `continue;`?
I think we can remove this method and use `targetSplitSize` directly.
Can you please add a `.` before `[1:` to make sure the message doesn't have it ending with `[]`?
This will need to change for the `get_exp` to accept a `days` argument.
I would prefer to have this as a separate method `getRememberMeServices(http, String key)` that would return a `RememberMeServices` instance if the user has set the key.
Why this? The `AbstractsQueue` is not used.
nit: `LOGGER = logging.getLogger(__name__)` ?
We should avoid using `script.type` and `script.src` if possible.
Should we check if `imageAlpha` is not `nil`?
I think we need a new test for the new case
I would suggest to add an else branch here that throws an exception. It will make it easier to debug.
I think it would be nice to mention that this will be set to `False` if the input boxes are absolute (i.e. `IoULoss`, `GIoULoss`, or `DIoULoss`).
Why is this disabled?
I'm pretty sure this change will not do what we want. I'm going to remove it for now and merge with master.
I think we should make these configurable, but I don't see any good reason this would be so easy.
I don't think it makes sense to add this. It should be in the HttpContent package, not HttpOverStream.
Can we rename this class to be something like `TestMevBlockProducerTransactionsExecutor` or similar?
I think you need to check if the keys are in order
This should not be needed.
Should this be `root` or `components`?
this is a bug fix?
Is `binary_path` really necessary here?
I don't see the point of this regex. Why not simply `r"([\w-]+/[\w-]+)$"`?
I think we can just pass `{file.meta? file.meta.name : file.name}` to `i18n` and use that in both places
This check should be removed.
I'd prefer not to do this. I don't think this is the best way. If we want to log, we should do it in `TestMQTTRunServer`.
Please don't change unrelated things.
I think you want `False` here.
`String` is only used in tests. Why not just make it an exported method?
I would like to avoid the import if possible. We should be using `pkg/util/reflect`
I think this could use some refactoring.
This is the same test as TestHasTags. It's probably worth moving to a helper, or just inline.
Is this used?
This should probably be hidden.
This is a hack. The `ByteBuffer` constructor is used only in the case of an empty `byte[]`, but we need to set the capacity to the `new_buf_size - old_buf_size` to ensure that `bb` has enough capacity for the buffer.

Please remove these new ones.
@JamesNK this should be removed too, it is no longer used.
We should rename this to `setting.go`.
I think we can add the `GetLogsFilter` function into `iotexapi` instead of having a special handling.
I'd like to see this changed to use the new `h2o_sysfn` functions instead of the legacy ones.
The error is not a valid VUID, so you need to check the error type here.
We should add a `percentiles` docstring here.
Why is this needed here? It looks like it's a common method that's used in many places in the codebase. Also, I think you can just use `User.order(:email_address, :asc)` and `User.order(:email_address).pluck(:email_address)` here
why not use a `[]string{}`?
What about a simple `if cart.proposal.client_data_legacy.client_type == "ncr"`, then we don't need to have the `client_data_legacy` field? I think the `client` is enough.
This should be `RuleA(Pets, LivelikeBreakCharmOnInvis)`
Can we use this in `pluginConfig.PluginConfig` instead? It's not the same for each subrepo, but for different plugin.
This will clear the setting when the media player is playing, but the user is not sure if they should be clearing it.
I don't think it makes sense to do it this way - it is not thread safe. I think you need to add it to the `mWndExited.setChecked` function that does it for you (and the corresponding `xcb_flush` in `QCoreApplicationBase`).
Why is this needed?
This import seems unused.
Why is this not a no-op anymore?
I'd prefer `plan_name_hash: Proc.new { |current_user| current_user.plan_name },` here, because it makes sense to use Proc.new in the future.
Can you move the Anomaly import above the other nupic import?
I wonder if it makes sense to do something like this for the node case below.
Why change the signature?
I think it might be a good idea to put this import below all the `github.com/chaos-mesh/...` imports.
I think the same is true for `RunAndReadSerialValue` below?
nit: could use a more descriptive line name
Why the name change?
I think it would make sense to add a TODO here to remove the dependency on OTel.
I don't know what the policy is for kinesalite, but it looks strange that we have to check the provider in order to make sure it is registered.
I don't think we should rename the prop
Should we be using this type in `aws/cloudformation`?
Why is this needed?
This should be a `// metricsPath is the endpoint of exporter`
This method can be deleted since the interface is now removed from the map
Is `ExtraRuntimes` always `nil`? Is it worth checking for `nil` here? Also, should the `nil` be named `nvidiaContainerRuntimes` to make it easier to understand?
This should be `doTRegex`
Console.ReadKey();
This is a big change. I'm not sure if this should remain as it was before or if there's a reason to change it.
Why is this necessary?
I think that `conf.interactive` should be checked here, otherwise the interactive logging will be disabled by default.
I think we don't need `normalizerException` at all. We can just use `NormalizerException` as a base class for all exceptions.
Why are we adding a new message?
I think the name of this function should be changed
I don't see any reason why we need this column.
nit: I would have expected a failure here
Why is this needed now and not before?
I don't think this needs to be here. I don't see it in `build_packages` function.
@saghul @saghul I'm not sure if we should add a computed property here. It seems like this is the only usage of this in this file.
This test is already failing on travis with the new `iptables` build.
I think you can remove the static import.
nit: can we just have this return `metrics.ID, *metrics.Event`.
This is a bit of a weird API. Why not simply pass the `lowercaseFields bool` into `encodeDoc`?
This can be `private`.
I think this is still a good idea, but I'd like to know what you mean here.
This was a mistake, `Value` was always `false`
I'm wondering if this could be a ctor param?
Is this a good thing? I'm not sure why we wouldn't just have a local hook in the hot selection.
This should be in the archive.
The `mocha` callback should never be passed to the callback. The only thing we can guarantee here is that the callback was called with the correct arguments.
Is the use of KeyValuePair for Attributes here correct?
why did you remove this?
Why not make this a list of strings?
TODO Create Transport
We don't support complex, so I removed this for backwards compatibility.
I don't know if it's better to use the counter name as the name, but I'm not sure if it's better to use a name that has a `_` in it.
This seems to be an accidental change.
I am not sure if this is necessary
I would move these two lines to after `pool_free(b->q)`, since we are closing the queues.
Should we have a test for this?
@jonpryor I don't think we need the extra scope check
`string[]` or `string[]|null`
Why did this change?
Nit - I would name this something more specific like: `Datadog-AzureAppServiceResourceId`
This is the only functional change in this PR, but I think the `assert` is unnecessary. `iv_state` is guaranteed to be non-null.
I wonder if we should make this a bit more generic, e.g. X-Forwarded-Proto or something.
I'm not sure why we don't need this anymore.
This test case doesn't really test anything. It tests the behavior of a method.
Shouldn't this also call `cmd.Stop()`?

I would rather use `u"".encode("UTF-8")` than `decode("UTF-8")`.
You can remove this file if you remove it from the PR.
Why was this removed?
Why not just using ariaDayPrefix?
This should be an error.
Please use a constant instead
I don't think we want a namespace for a service. I'd rather have a namespace field in v1.
Is it safe to change the API here?
Should be `RuntimeTLP`, same as `ConfigTLP`.
F405 'TOKEN_EXP_DEFAULT' may be undefined, or defined from star imports: settings
This is the only thing that actually causes the pylint error. I'm going to fix this in a different PR, since it's already in the scope of this one.
Can you please also add this error to `errUnmarshalConfig`? We have a `errUnmarshalTaskCount` in the `config` package that can be used in both `task` and `autoScaling`
This logic is a bit weird for me. It seems that the phase is set to Pending or Recreate. I think this code will never get called. I would just set to Pending or Recreate, and if the phase is empty, set to Recreate.
I'm not a big fan of the `Gpg` suffix. I know it's more verbose but it's not a big deal :)
This seems unused.
Why is this changed?
This is a BC break, please remove this.
should this be a list?
This class is used in many different places - it is not necessary to create a new file for every usage.
Why is the compiler smart enough to optimise away the assignment?
Is this needed? It's not a public API. If not, why?
This should go to a separate PR
I don't think we need this `cta` here, since we are already rendering `view_request_cta` as a `cta` in the view.
This should be `array_shift($nameArr, true);`
I think we need a `.trim()` here
why not `warn`?
This is too verbose. It will be very confusing for the user.
I'm a bit confused here -- is it a dictionary or a list of tuples?
This is the only place where the `contentType` param is being used.
We should probably add a TODO to add sysPath. We should not use sysPath in the code that depends on sysPath.
Please, use the new function signature: void nano::block_processor::add (nano::unchecked_info const & info_a, bool push_front_preference)
Why is it necessary to have a constructor with `caseSensitive` parameter? Can we just make this constructor private and make the boolean argument a constant?
This file should be moved to the csharp directory, and the `.csharp` files should be changed accordingly.
Should we have an `ignore` here? Or is this just temporary until the migration is done?
Should we add some docs here?
I think it should be 6 here as well
I'm confused why we return "Pod Failure" here? It seems the error message should be the same, but the pod is not being dispatched.
`fetcher` is a weird name, I think it would make sense for this to be more specific. `chainFetcher` perhaps? `graphFetcher`?
Can you make a link to the CEL spec docs?
This is not needed any more. It was a duplicate.
@tinaafitz I would prefer to see this in a `when` block instead of `when host['platform'] =~ /windows/` block, it is more consistent with the other code.
I think this should be a separate commit, and the commit message should indicate that this will be reverted after we have a new manifest writer
This name should be `REWRITTEN_FILE_SCAN_TASK_SET_ID`.
This should probably be called `namedTools`, since it's not necessarily the named sources.
This seems a bit strange. Why is there a `fgrepStringInFile` check?
I'm not sure we should change this.
I think it would be better to add a space before `{2,}` and before `{7}`
Can't this be simplified to `this.data('has-label', label);`?
I think it is better to check that claims is not nil, and return error in this case.
This is a BC break.
nit: typo - take into
I would rather call this `Type`
We should also check that the device and provider ID are the same.
Shouldn't these be "serverExpiredInSeconds"?
@Ladas we should add the `role_none_comment` to all `Roles` fields as well, as they are not used in the UI.
This can be combined with the previous line.
Shouldn't this be `[":/??", ":"]`?
Why did you remove this?
Can we just make it `uint64` and have an interface? Then we can make the struct a `ProofsCfg`
This was not needed
We should check for the error here.
I'm not sure if it's worth the trouble to have the extension check here instead of the other way around, but it would be better to have a separate function that returns a bool, so the extension check can be in one place
I'm not sure this is the correct way. I'd prefer `f'Invalid flipping direction "{direction}". The direction should be "left" to flip.
The error message is not correct.
Why is it not allowed to set Email as default value ? It should be a string, and it is valid in the config.
This can't happen, as the directory should have been created and then passed to journalserver.Start() so that we don't need the check.
Should we use `m_was_initialized` here instead ?
This should be `if info.Enabled && (len(info.RPCName) == 0 || len(info.RPCAddress) == 0) {`
We should use `ServerOAuth2ServerAuthorizationRequestRepository` for the name of the class.
shouldn't this be `true`?
This looks like the right place to do it. I would move the listener in `analysisResults.onAnalysisResultsStarted()`
Why is this needed?
This is the only one where I'm not sure if we should add `if (!args)` to `callFunction` and `callService`.
I'm not super happy about this being an array but it doesn't really add much.
I think this could be `if other.data is not None:`, right?
I am not sure we can do this. This will break the user's code.
You could also do a `@ConfigDescriptionSection`
this is not a correct change, you should not need to compare the Id.
I think the delete is unnecessary here, since the `al_comms` array is only used in `allreduces::Finalize`, right?
I don't know if it matters, but we use "new" in this context. Should it be just "new" ?
This is only used in tests, and I am not sure if this is necessary.
why change this?
This should be `slug_matches? && @user.admin?`
@jtkech @MartenWolf @mjkkirschner is this correct? I would have expected that `btnCustomMoleculeColumns` will be disabled if the user selects a custom column
This is unused.
I'm a little confused by the logic here. Why would you need to pass the credentials to the super method?
Should we add `[options].features` to this line?
Why did this change? I'd rather keep it consistent.
why did you remove this?
Why do you need to set this to true?
Shouldn't we still error out here?
This was changed in the previous version of the code, right?
What's the reason for changing these? I don't see it used in the code.
This should be done in a `defer` block to ensure we don't accidentally leave a datastore config in a bad state.
I think it's better to use a variable to save some bytes. Also, it's better to use a `bytes.Buffer` instead of `bytes.NewBuffer(pdata)` to avoid the extra allocations.
This looks a bit odd. Is it possible to have a `current` attribute on the control field? Is there a reason not to use `attrs['current']` instead?
I think we can remove this error. We don't want to have any error if someone passes in an invalid sender/auth address. It's not really a valid address, but rather a valid multisig hash.
Why not just `spanContext?.TraceId`? It looks like this is not going to work.
Can we move this logic to a private method, and then call it here and in the other cases as well? That way we can remove duplication.
I guess this could be `['DateTimeInterface|string', 'self']`.
@pieh I'm wondering if we should keep this check and throw if not?
why the ` ,`?
This assertion should probably be in the `if` below
@mad-eel I'm not sure this change is correct...
This file is not needed
I think we should move the tags to the `ClusterTagger` package
This function is called when the item is indexed, not when the item is updated. Is that intentional?
This is probably the right place, but I think we should raise a `StaleElementReferenceException` when the locator is not found.
Is this needed?
This property should not be public, as it's only used internally.
I don't think this is a good idea, as the keys will be re-encoded in this case.
Nit: I don't see the point of having this static.
Why is this? Is there a reason for doing this?
I think the description should be `The seed to use for the `Rand` function.`
Whats the reason for removing these?
This change is unnecessary
Is the `Jakub Lukowicz` file still in use?
@joshcooper This link is now only available for the single users page. We should remove it from the settings page and use a single user link in the settings page instead.
I think this should be a `Warnf`
Why not use `types.AttoFIL`?
I'm not sure if this is the correct solution. We have a race in the channel pool, which is not a good idea. The channel pool may be used by multiple goroutines, and we will have a race here if a goroutine is waiting to read the channel buffer. I think we should try to avoid the race in the channel pool.
I don't think this description is accurate. `Database that the user should authenticate against` should be the same as `Database that the user should authenticate against`.
I think you can use the `enum` for this, as you did on other fields
I am not sure about this. If the user wants to destroy the request after the request is started, they will need to call `st_http3_req_send_request` to complete the request. But the `st_http3_req_send_request` should be able to destroy the request and not call it.
Shouldn't this be `MD5Hash string`?
I don't think this should be changed. If we want to support IPv4, we can add IPv6 as well. This is a bug fix as it is in the `gateway/node.go`, but we should be able to use this as a fix in the `gateway/node/ipam.go`.
`attr_value['string'] is not None` is not required as `attr_value['string'] == value`.
This is not used anywhere
Extra empty line detected at class body beginning.
nit: missing new line
I'm not sure if the metrics provider should be part of the volume manager. I would rather not have the metrics provider in the volume manager.
`processSuccessfulRun` should accept integer
I think we need to make sure that we don't need this final anymore.
Shouldn't this be the `ASTAccessor`?
Why not make this a `Map<String, Object>`?
@pajong @joshcooper @johnsaigle I have changed this to allow numbers with only letters in it, but it seems that we don't have a way of detecting the number of digits in the input.
I think you can just remove the whole class.
Why is it buggy?
I'm surprised this is the only way to use `six.string_type`
I think that it is better to change the default to be 1 second
Why do we need to chomp here?
Why do you need to remove the `?api-version` here?
Is there a reason for the name here? I'd prefer if we could just use a list.
I think we should be able to just get rid of this variable altogether.
This is a bug, it was overwriting the old state with new state.
This is a very strange check - I think you need to do `a.clients[c.id] == a`.
Why is this needed?
I am a little confused by why the change from `Object` to `Object` here is needed?
I would prefer this be replaced with a new value
nit: I think it would be good to have all these strings in a constant somewhere. It would make it easy for the future if we need to modify the string later.
I think you can remove these checks now.
File is not `goimports`-ed (from `goimports`)
This is the only test that fails on x86_64, which should probably be removed
We can probably use `default` for all these, and not `true` for the default, as we're already doing for everyone in this app. But I'm not sure that's worth it.
This function is not used anywhere.
I think we need to keep these flags in order to not break old builds (e.g. older ones won't be supported by the `gofmt` script). The `gofmt` script doesn't have a `-fstrict-aliasing` flag and we can remove that.
Is there a reason we need this to be a field in the blob type but not in the blob client? I'd rather avoid adding a bool and having a separate struct for this, but I don't feel strongly about it.
Why not use the empty string here?
I think this will break the `add_target` behavior if the group is in a different group, but it's not possible because the target has been removed from the `current_group.groups` array, which means it will be added to the `current_group` array twice.
Should this be a `LogWarn` instead?
These are the only ones that we need to add to the namespace.
I think it should be called `paramsKey`
Why deprecate here?
I think this should be an error, and we should log it.
Nit: should this be `IsProfilerAttached`?
I don't think you should edit the prefs here, this should be handled by the user
Why not initialize these to 0?
Should the string be `location`?
This isn't a list of all the IDs for all the affected nodes, but a list of the IDs that were actually affected, right?
This function is now unused.
I think the `fully_formatted` method could just be inlined here. I'm not sure how to make the other one public.
This class is no longer needed. It's only used in the `Codegen` test.
Can you move this into a separate file?
This change looks like it was accidentally committed
I would prefer `enabled` as the default value.
I wonder if it would make sense to make this property private, and make it `static`
Shouldn't `s.createTag` check this for `nil` tags?
`config.notarize = notarize || config.notary_user || config.notary_password || config.buildOptions`
Why did this test change? The `SECURE_AUTH_SALT` should be in `.git`, not `.git/site_local_settings/`.
I don't think it should be in go/extractors
Why do we need this if block?
I guess this will break the tests.
Should we also check `err` here? I think `c.registerWithAccount(acc)` may return an error.
Should the test have the value `""`? Or is it just a test for the empty value?
Can this test be removed?
Line is too long. [86/80]
Nit: this should be private
`self._tab.run_js_async()` should return the value of the JS function
This is an API change, but is there a reason why the name change is here?
Please use `errors.Wrap` instead of `fmt`
Should we use string here instead?
This change should not be necessary, as there's no error being returned
Should be FH
Shouldn't this be `or host.endswith(':0')`?
Can you use `mockHttpServletRequest()` here instead of `this.request`?
This is going to be a breaking change to the API (it's theoretically possible for the broker to be down the road, but the API has been deprecated, so we should at least be sure to be consistent about this.
`ByteBuffer.duplicate` returns the `ByteBuffer` object, this is not correct. It should be `dupe.duplicate()`.
This is not an `in` but an `out`
@kravets-levko I'm not a fan of this path. Can you please confirm with someone who is not aware of anyone using `verdaccio`?
I think we can remove these `appDeployVars` now.
Should be `msg.Date.value` or something similar to make it clear it's a date
Why not `self.select(...)` here?
this is just the same as `return` above, can we use that instead?
This is just a note, but we're still importing `assets/js/...` from `@rainbow-me/store`.
I don't understand why this was changed.
Metrics/LineLength: Line is too long. [83/80]
Please use a more descriptive variable name like `error` and add an `e` to `error` key.
can we rename this variable to consensusMsg ?
I wonder why we don't have this anymore and the other two are just the two different interfaces.
Why is this still needed?
I am not sure if this should be renamed.
Why change this?
I am not sure we want to include node group here. If we do not want to include node group, we can remove it.
I think the name is a bit confusing, maybe something like `PublicLinkPermit` would be more appropriate.
I think we should leave "two indexes / with re-indexing" as well.
I would prefer a regex that only matches the first 4 characters and then the rest of the characters, to avoid the `#` being treated as a special character.
Nit: this should be `Rpc-Respond-Service-Headers` (capitalized)
I think it would be more clear if `commandSet` is a pointer to a `string`
Is this change necessary for this patch or was it just to make the test more reliable?
Why is this needed? I would expect this to fail silently.
I'd just call this `GetDirectory` and remove the `.mysterium` suffix
I don't know if there's any other way to make a styling property that doesn't apply to the `<p>` element that is used in this PR? If not, let me know!
This is the fix.
I don't think this hook is used anymore, right?
This is a breaking change. We should keep the old version of the code as is. I would suggest we keep the old one and just make it a property.
I think we can return the error here, so that we don't panic

Why not `std::size_t`?
This is a bit strange, I would not have expected `addPPIType` to be in the same file?
Can we avoid this? If the lambda archive was not modified, we would have to reload it again.
nit: maybe call `icmpPkt` and `icmpPacket_with_type_code`
This is the only place where I was not able to figure out what to dispose of the response. It was not used.
This seems unrelated to this patch, could you explain?
Why is secondaryy not a dependency of the postgresql-hll?
Maybe a more descriptive name than `reporter_class`?
} <e1> }
I would like to understand what is happening here, and why do we need it?
I think this is the wrong way round. It's not actually a "hook"
Why do we change the default value here?
This will throw an NPE if obj is `null`.
I think this is a leftover.
This needs to be `sudo`
I think we need a `Test` folder, as we are testing `goimports`
nit - can we remove this line and the one on line 463?
This should be a method on `Message` instead of `Message` as it's used by both `Query` and `Send` in general.
Why are you using the new cache?
Should we have a test that checks if a variable is created and if the watch fails we exit early?
I think this should be a separate test case. It's not a "bug" that's really related to this PR. It's a "bug" of something, not a "bug".
Should it be deleted in `release` if `err != nil`?
nit: this could be a single `else if`
This seems odd. WFDIR is the workflow directory.
I would say that it is a temporary workaround.
`require.NotNil` is enough here
@jholtz should this be an error?
I wonder if this should just be a regular `assert_match` instead of a `assert_match`?
I think we should use `%q` for `%s` to get the VPC ID.
This is just an improvement.
Please remove this import.
Is this change necessary?
Why not keep the ReadLevel and MaxReadLevel and set them to `maxTaskID` instead of making them pointers?
Why is this necessary?
Shouldn't the `if` and `elseif` below be updated for `perms = &Permissions{}` too?
This function doesn't need to be a member function.
Is the `0077` mode still correct? If so, why change it?
This is a bit confusing, since we're passing `protocol.ByteCount(offset)` to `AddStreamFrame` below. Maybe rename `AddStreamFrame` to take a `protocol.Offset`?
I don't think this is correct. You can't have an invis effect with an invis invisibility.

I'm not sure if `..target` is the right place for this. I think it should be in the `luigi_interface` module.
This looks like a bug. Should be thread_id_t.
This should return a HRESULT.
Why is this change needed? Is the intent to have the path absolute?
Please use the same style as the rest of the file.
I think we should keep `iterator` as it is.
I think this step should only be run in the tests, not in the production code. We should also verify that it's actually printed in prod (and not in the tests).
I would prefer this to return a new private key and a bool that says whether or not the key exists.
These classes should have docstring.
These need to stay here.
`err` is not used, so you can remove it. `return 0, errors.New(`
This test was not really necessary.
I think we can use the `LEAVE_LOG(VLOG(4), "PartitionId:" , partId, "VertexID: ", edge.key.src, "EdgeType:" , edge.key.edge_type, "EdgeRanking: " << edge.key.ranking, "VertexID:" + edge.key.dst, std::move(edge.get_props())); ` here instead of `VLOG(4) << "PartitionID:" << partId << " VertexID: " << edge.key.src << ", EdgeRanking: " << edge.key
I wonder if `user` should be an attribute of `CartComment` or something?
Can this ever be the case?
I'm not sure we want to do this. The user has the `install` command and they can run it with npm. I would suggest to run it from `node_modules/bin/yarn` and check if it works.
Should this be in the `window_minimize`?
I think this will be removed once the RSpec::Core module is removed, which will require the same change for all the Rspecs.
I think this needs to be atomic as well.
this is a bit confusing to use the default processor when you don't have a store, and we don't want the consensus to do that.
This needs to be `ASSERT_NOT_IN_USE()` as well, to make sure this is actually executed on ARM.
Should this be `maxResults=503`?
This is not needed. I'm pretty sure this is a separate file and should have been included in the `netcoreapp`
This should probably be `linode.command.exists()` or something.
I wonder if we should use `Content-Type` for the same purpose as `Accept`?
Can we change the option description to something like `ignore chromium updates`? Also, I'd suggest renaming this option to `--disable-chromium`.
You can just do `testTransferHash, _ = testTransfer.Hash()` and remove the `Hash` and `Proto` methods.
Why is this method removed ? The only difference here is how the `ImageGenerator` will get generated when creating this class.
This is just to help with debugging, right?
Should we use `--keep-prefix` here and `--include-prefix` below?
I would add some context here, as I don't think we want to allow the user to specify a `?q` in the middle.
I'm pretty sure this is not true. `register.py` is the only place that sets this attribute
This should be a `log.exception` call.
We need to keep this in the docs.
Nit: `provider` -> `tracerProvider`.
why is this called `internal` ?
nit: move to the bottom
This doesn't seem like a good name for this interface, since it doesn't really represent a lifetime notification. Maybe `ConnectionCloseCanceled`?
The ACME challenge type should have a different name.
I'm not sure we should use this helper property, we should use `$provider->getTemplate` instead
This is a new option, and it's not used anywhere.
I'm wondering if we should just be adding `Default` and `RenewBefore` to this struct. That way we won't have to add the field.
Why is this necessary?
namespaceLabels is a map from string to string, not labels. I'd prefer labels, not UID.
Is this something we could put in the `.gitignore` file?
I'm not sure what this does...
Why do we need a new object here, instead of just creating one in the `JsonPrinter` constructor?
I think we can just remove the whole method.
Why do we need to define an interface for these?
Shouldn't `release` be an optional parameter?
Why is this removed?
Can this be an error instead?
I think it's better to leave these as `.7em` to keep the screen width of the panel consistent with other settings in the menu.
nit: this import should be on one line.
I think this is a bit too strict. We should be checking for an array of Vector, and then if it is a vector, just use the array.
This is not good. You should add the exception to the list and add the new operation in the end. Also the error message is not very informative. You should explain what is the error here and what the problem is.
This should probably be 2019-2020.
This is an interesting change. I don't see any tests that would fail without this change.
Why is this change necessary?
"indices into the new version of the collection" => "indices to update the collection"?
This is an existing problem. The package is not fully portable, so there is a possibility that the user might use a different SAS.
Why we need to pass in a different transformer here?
Docstore doesn't take zero-value key.
I think we should keep this as a warning.
This is a little hacky, but I don't think there will be any better way.
Is there a reason for this to be public?
Should these also be capitalized? I'm not sure if we want to capitalize them in the error messages.
This was changed since we were using a fixed distance to get the fars away.
We should add some description about this field in the release notes.
I don't think this is needed.
I am not convinced we really need this if.
I think you need `new GlobalHitsThresholdChecker(TOTAL_HITS_THRESHOLD, cappedNumHits)` here, as it's used only once.
We can remove `antrea.io/antrea/pkg/agent` and just `agent/openflow/cookie` here.
>activity [](start = 20, length = 5) Activity is the same, just the activity source.
This check is not correct. `big.Int` can be a `nil` value.
I think we should remove this
We can remove this one.
I think it would be better to call this "customize themes"
Why does this component need to render the HelpMenu?
@tledesma is there a more elegant way to do this?
We don't need any of these in tests
nit: the indent looks off here.
Why not remove this block? It's not needed anymore, and the `GKeyFile` is already in use.
This import seems unused.
I think we can leave this as is.
A Main Actor must have **only** one **create constructor**
Is there a reason why we need both `ZK_READ_PERM` and `ZK_READ_PERM`?
Why not `isinstance(tpe, (list, np.ndarray))`?
This is not a valid example. You should add it as well.
You should use `!` instead of `true ===` to check if the condition is true or not.
I'm not sure that we need to add these here. We already have `Kokkos::initialize()` in `kokkos/kokkos_Core::init.cpp`.
Is this needed for Python 3 support?
I'm not sure what is happening here - the `long` field is not renamed in `nameMapping`?
I think this should be moved to `core/branchdb/factory.go`, because we want to make sure that the factory can be reused between branches.
This is an unrelated change, right? I don't see this used in this PR, so maybe you can revert it?
Why not using the json response here?
I think the `%s` is redundant here
Why did you remove this function?
Why did you switch the test?
Is the idea to make this a `Class<? extends RuleViolationFix>`? It's not clear how to create a fixer class, and how to get the rule violation class.
Is there a way to make this more robust to Windows?
This module should be in the head.py file.
nit: I'm not sure if we want to rename this or not, since this is a driver now?
This is a bit too specific, maybe just "has you checked that the variable passed by reference has a space between"
I think we need to handle all exceptions here.
Why is there a space here?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
This seems pretty similar to the `isYamlEmpty`, can we reuse the code?
Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
This is not correct - the target is the player, not the sender
nit: I would recommend moving this import down to the top of your file, to keep the imports consistent.
I'd suggest to change `value` to `is_dict(value)`.
I think this should be a const string
I don't understand why `secrets-ssm-environment-variables` is required here but I guess it should be enough to make it a `secretsmanager.secretsmanager.`
nit: remove empty line (same for other files).
I think you can use the same constructor as above
why do we need to add this for python 3.7?
Is this check still needed?
Why is this test being removed?
Why do we need this state?
`log.ram_handler.change` should be a `staticmethod`
I would say "with experimental EIPs".
I think we should be testing against `./src/tests/` instead of `./tests`
This message is not very informative. I'd suggest something more like: "Imported key for account '%s': %s"
This is a new feature, so should be a separate PR.
I would prefer to keep this method and call it `VerifyUncles`
This will now be sent once per user. I'm not sure if that's what we want to do or if that will be something we should do in a separate PR
Should we also check that `email` isn't empty or `is_email_address`?
I think we can remove this function as it doesn't do anything anymore.
I'm not sure this is the best way to disable this.
@kuzmany why are we removing this?
I don't see why we need to disable this rule here.
This is a good change, and I think it would be a good idea to check the return value of `Next` instead of using `NextWithContext`
This code is duplicated from line 288 above, could you create a function to do the same?
Nitpicking here, but I think we can use the SDK Config here instead.
Is there a scenario when the new timeIntensities contain no points? I think this would be a problem because oldTimeIntensities is null, but the old time index would not be valid.
I think you could remove this check and just call verifyAccountClaims in this method. The caller is responsible for checking the claimJWT and not the account itself.
This should not be needed
Shouldn't this be `&& (spec.must_learn & 0xf)` ?
This seems like a regression?
Should we log the exception? Also, is it possible to have an unknown message?
Is this the right way to do it now?
I think we should move this function to `CacheChange`.
Why does this need to be in the Http2Aborter? I don't see it being used elsewhere.
nit: remove unused `using`
Why did this change?
`x.__call__` was never called.
`referralInfoDTO` is unused (from `structcheck`)
Why is this a static?
I think this assertion is still useful.
I'm not 100% sure if it's the right way to do it, but we should avoid the decorator here, as the message definition store will be initialized at a different time.
This should also be `album_release_msid`
nit: this can be a single line: `if !(*n)[i].Path.Equals(path)`
Can you move this function into utils?
I think it would be better to call it `provider` instead of `driver`
The `saveFeedItemAutoDownloadFailed` method is called in a different thread, so the exception handling is not necessary.
This doesn't seem like `doSync` is used anywhere. Can it be removed?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
this should be 750, not 8760
I'm not sure if this is the right place to put this. It seems like it should live in the settings.py, not in gui.py.
I'm not sure this is needed. I think we can use `sys.modules`.
I don't think this change is needed.
why is it a pointer?
I would prefer to see this as a separate PR to not have to touch the forge code at all (or even if you don't need it), but it is not a big deal.
Why is this not an empty list, as we do in GlobalTags. Is this a problem with trimming whitespace?
Can you make it a debug level?
Why not pass the pointer to the function rather than using a pointer?
I don't think we want this here.
This is a pretty weak test, I would rather see it stayed.
Should this be `return nil` ?
Is this necessary? The only use of `elementText` in the `ExpectedCondition` seems to be `element.getText()`.
Can we have a test for this? I don't like to have a deviceID in cni-api
I think we should check if the executable name ends with ".exe" before appending the name, and if not append.
This will be the same result as the previous one, no?
This is not used anymore.
Shouldn't we add this to the `FeatureFlags` class as well?
I'd use `message.error` here and in other places too.
Why is this not logged anymore? Is that a bug?
This is the only one I am wondering, why do we need to do this?
@kapilt this is a bit hacky. I'm not sure why this was not working.
This method can be removed now.
This is not necessary, you should be able to remove this.
This check was redundant because of the `len(uq.blocks) == 0` check in `peer.UniQueue_dequeue` and that `len(blks) == 0` above.
why do we need this change?
Why did you add the \n?
This should be a readonly property
We can't use QSTUFF anymore.
Can you please move the method to `StreamClientUtils`, and remove this method from `StreamServiceUtils`?
I don't think the padding prop needs to be here. It doesn't seem to be used anywhere.
We could use `nameof(PrometheusExporterMiddlewareTests.Meter)` here.
@jeromelaban Is this the correct way to write this? I thought we wanted to add `PALETTE` to `checkpointing` and not `meta`.
F401 'SOCKETIO' imported but unused
I'm not really a fan of `.to_a` here. I'd use `to_not include` instead.
Why was this changed?
This is a pretty expensive operation, as it will be called every time the user adds an approval notice. You should cache the result of `order('position ASC')`
Should we also include a default value for the timeout?
This should have the same name as the other one, so `icon` -> `iconUri`.
Can this be a bit more specific, like `IncludeAllTargets` or `IncludeTargets`? I think the wording here might make it clearer that this is a list of targets, not a set of labels to exclude.
Why are you changing this? This is a backward, so it should return tensor of size 1, not `Tensor`.
I don't think we need this. We're already using `https` as the default.
We need to keep this API.
Why does this need to be public?
Why is this a `SectorSize` instead of an `int64`?
Why do we need to add this?
Why not just `isViewerRoleAsDefault` ?
This is a change to make tests fail when I run `python -m test.py test/record_test_data.py test:test=1.7`
I'm not sure if this is correct. It means the value is not self but it is the value of the static class.
I would rather call this flowVersion to be consistent with other flow versions
Is this change needed?
This is the only thing I'm not a fan of. It's a pretty common thing to do, but it's not a very common case for this to be a property (and the other way around). If we're going to have a property, why not just add a boolean to `luigi.util`?
We should add an eslint rule to not use `@since` unless there's a good reason.
nit: why the explicit cast
Please remove this line
Is it necessary to set this? I don't see it ever set.
Is there any reason why you changed the class name? I'd rather keep it as is, because it makes it easier to see what the test is about.
I think we should just remove this line, since we're no longer importing any of these.
I'm not really a fan of this. We're not actually using the delete file predicate. The `applyEqDeletes` method is just to return a list of delete files. We could just do a `return eqDeletes.stream().filter(delete -> isDeleted).findFirst()` and then `return isDeleted;`. I'm not sure what the best way to do this is.
I'm not sure if we want to expose these in config or not - if the latter we might need to do some more of the extra things in the future
I think this is unused now?
The `if (intent != null && intent.getExtras() != null && intent.getExtras().getSerializable("state") != null)` can be removed.
I'm wondering if we should have the user know this is the minimum and maximum length, and we should allow for a user to specify them.
Why the change?
This is unused
This change was necessary to make the `in_progress?` filter work for `ActiveRecord::Base.joins` as well.
I think we still need the other flags here, and we can delete the other ones as well
`--template` should be a required flag.
I'm not a fan of this. If we want to make the path lib-specific, we should just have one `encoding` argument that is the encoding that we're opening in `write_text`. Then we should just have a `write_file` function that accepts the encoding.
Please remove empty line.
I don't think you should be using an interface{} here, this is a simple interface, not a channel
I'd suggest using `Wrapf` here, and `wrapErr`.
This is just to make sure we don't have an extra tab in the blacklight modal.
This is not a descriptive name
Why do we want to log error if the blob doesn't exist?
The indentation is off in this function.
Can we also test the `.mdc-menu-surface--close .mdc-list-item .mdc-select__selected-text` class, and maybe add a new selector for that?
This is a bit hard to read. Can you break this line into 2.
Is this still needed?
This is not used.
This should be opae/access.h.
Nit: I would move the imports down to the first block, since we're moving them from the same package.
This will be a no-op if the pointers are null, but if we're going to prefetch it, it will be a no-op.
Is this change related?
This is a bit weird but I guess we can live with it for now.
This should probably be done on line 421 as well.
This is a pretty important check. I don't think we should be checking for the issuer on a Juc when there isn't one, but if there is one, it's a valid account so it should never be considered an issuer.
You can remove this line
I would prefer to avoid using `__version__` if possible in the code. I'm not sure how this would work on Python 2.
Why is this check needed? If cnb is nil, we should not use it.
I think we need to keep the `Key` as part of the `Operation`
Shouldn't this be a defer?
Why this change?
I'm a bit worried about the name of the file. I think it's better to call this `CacheKeyLoader`
I'd suggest using something like `opt_empty_str_param` instead
I think this is not needed anymore, as we are now setting a custom agent string.
This import should be at the top.
`std::lock_guard<mutex> guard` is redundant.
Is this a bugfix, or is the change here just a refactoring?
I would like to see the rule-fmt in the same block as the rule-types
I think this can be just an `enum` now that we have a `SecretBackend`, right? (same for secrets-manager)
Can be removed
Is this intended?
This should be removed too.
Is the `driver` parameter necessary?
This line is the actual fix
This is an internal class, so it can be removed.
This is not necessary, as the datatype is already set in the interface.
I think we should do this only when we are in error case?
nit: can this be package-private?
please use camelCase
This should be "GET,POST,PUT,DELETE,HEAD," as it is not a valid method name.

Why was it changed?
You're missing a `return` here.
I think we should add `, Project: *project,`
I don't think we use this function in the dashboard anymore. Can you move this helper to this directory?
Why not just `for (int i = metricPoint.Keys.Length; i < metricPoint.Keys.Length)` instead of this conditional?
I think this can be removed
This is a bit of a hack, but I don't see any easy way to avoid it.
Why not use `filepath.Join`?
The parametrization seems to be redundant.
nit: I think we can get rid of this ctor now that we have the spec
Shouldn't we do the same here to make it consistent with the rest of the code base?
`return delegatedRepository != null ? delegatedRepository.equals(that.delegatedRepository) : that.delegatedRepository == null;`
Why do we need this?
Is this a test that the network is fill alive self? If so, why not use the existing `fill_keepalive` function?
I would prefer that you use a constant to make it clear that it is a constant string.
This was just a bug, right? It should be set in `ProcessAsync` and not in `ProcessResult`.
why not just return i?
I wonder why this is in the `cache` package, rather than here, since it seems like a common pattern for all the other cache types, and we don't actually use it.
This is not correct. If the step is not an integer, it will get `NaN`. I think it should return `NaN`.
This should be a `PlatformDetection.IsNotHex` check
Can you use "the same type with inputs" here?
This seems a bit strange to me, since it's the same logic as for `createTable`. I'm not sure what it's for, but it seems like you'd be better off changing `struct_has_create` into a boolean variable and using it here?
@mfojtik this change will cause the `agentVersion` to always be `latest`
Why is Enum a special case?
This is the new line that's causing the CI failure
Why are these empty interfaces?
Why are these changes necessary?
This is not a great idea. The problem I see with it is that we have to set the TTL to a value higher than the ping interval. This will cause the ping interval to take a long time. We can't just use the `ttl` value.
I think this will fail for non-DYNAMO users.
This should be done in a single query, not in the `else` branch.
nit: This could have been a tuple, since we don't use the `tuple` type any more.
This was the last signal that we had before.
output[Setting.THEME_OLED_LIGHT] = _('OLED light');
`split_param_list` might make sense, since this function is only for parsing parameters.
I would have expected a set here
Is this used anywhere?
This is not a new feature, we should create a new feature and have it default to `true`.
This will fail when the value is not a valid enum value for PUPPET_AGENT_STARTUP_MODE
Why is this test being removed?
This should be `TagsTest` (no `Tests` at the beginning)
Shouldn't this be a `checkbox` instead of a `checkbox`?
Why do we reload the cache here?
Isn't this function a leftover?
This function seems to be used only in the tests. Why not just put it in tests/helpers?
Extra empty line detected at method body beginning.
Why this change?
I would add `zero_count` to the docstring of `__init__()`.
this seems a bit strange, why is the name a string but issuer a string?
Is this a bug that you are seeing?
I'd rename this package to `mocks`, as we already have a mock for the archer, so it doesn't need to be exported.
This is not needed.
We should probably make this `private final String name = table.name() + ".all_data_files";`, as this is the default constructor.
I would suggest `throw new Error('Limit and perDocumentLimit must be specified together. Model `' + mod.model.modelName + '`.');`
I think we should keep this interface, because `NATProviderPinger` is only used in `net.TCPConn`.

I am not sure I am loving upcase.
If you are going to be doing this, you need to make a separate method to handle the failure.
This will be a breaking change if a user has an image in their site. Can we keep it as it is?
This should be `result = 1;`
We don't need this here anymore.
I think the convention in java code is `write.metadata.metrics.column.` and `write.metrics.column.`
Is there any reason not to use `np.random.randint` here?
This should be imported by the module that needs it.
I think the clientTLS config can be nil if not using clientTLS.
this test is no longer relevant
Can you update the docstring to reflect that this is a valid range?
We're missing a `,` here.
Should this be `Microsoft.AspNetCore.Hosting.HttpRequestInListener`? It doesn't seem like it will be used in other contexts.
Why not defer this?
Shouldn't this be `flatbuffers.UOffsetT(j*1)`?
File is not `gofmt`-ed with `-s` (from `gofmt`)
`RetryAfter` should be a pointer.
This is not used
This looks a bit weird. Should we check the error here?
This should be `Errorf`.
Why is this change necessary?
I think it would be more readable to use `assert.Error(t, metadata.Error, "Expected error for pull inactivity timeout")`
I don't like the word "suche" in this context. I think "either" is better.
I think we need to assert here, otherwise if the forward or reverse heap is empty, we will crash
This should be `structsEqual`, not `ClientSessionState`
I think this is fine. But I think `getCallOptions` is a bit confusing here. The `getCallOptions` should have a parameter called `marketContract` that is a pointer to the market contract. I'd prefer if we could get the value of this call options and pass it to the `GetBenchmarksQuantity` function instead.
Extra empty line detected at block body beginning.
This is not used anywhere.
This line is not necessary.
This seems like a weird place to be calling `InitWorkloadIdentityStatus`? Is this something we should be doing in the `InitializeConditions` func?
Should this be an `LogWarning` instead?
can this be removed?
This should also be changed in ansible_project.rb
Nit: `import botocore.config` would be enough.
This looks like the wrong place for this code. If you move the `reverse` call here, you will end up pushing the child in reverse order, not the correct stack.
This function name should be a little more specific. Maybe something like `DiscoverChainFactoryAddress`?
Shouldn't this check be moved up to the end of the `if`?
Should we check for the existence of the new account here too?
I don't think this should be at `finest`. The container creation can be expensive.
Is this the correct way to test that the learning_rate is not changed by default?
Can't we just use `executable` here?
This is not correct. It's possible that the load state is already set, but we don't have a booted deployment.
Why did you change that?
Why is this needed, can't we just use `self.user_meta`?
I don't think we need to add this here.
I think the `accountID` might not be the same as `propertyId` since it's used to get the account ID and not the ID of the account itself. We should probably be using the same approach here for both the ID and the ID of the account itself.
Should this be `@unresolved_targets.delete(t_name)`?
Is there a reason this is a new `Code` instance instead of a plain `Code`?
This was the only use of `iter` in this PR - can we just remove the `iter`, `itered`, and `list`?
Can we use a different name here, to be more explicit?
This is an API Change. This is a breaking change, as we are not exposing the current/next index of this chunk
`Array.isArray()` is unnecessary here since it'll always be true.
Why did we remove these two functions?
Is this import used at all?
This is a bit weird. Why do we need this package?
I'm wondering about the performance impact of this change. It would be better to use the `node.get(RESERVED['file']) is None` instead of doing it this way.
Why not use `path::relative()` for this logic?
nit: we can just use `table.snapshot(toSnapshotId)` here.
Why not just `if (isset($functionConfig['helpText']))`?
I think we need to do the same with `@output_stream = out`
Is this necessary? It looks like it would only ever be populated by the UI.
Should we rename this to `_test_get_message_state_scopes()` for readability?
Why not using the `CamelCase` property for the collection rule? It is already defined on line 375 and this property is not necessary.
What is this used for ?
Shouldn't it be `@wordpress/prettier` ?
I don't understand this.
Is this change intentional?
Can these have the same name as the asset? I'd be tempted to call them `Decimals` and `DisplayDigits`
Should we use `dto.ClientPromise`?
Should we use a `Supplier` here to make it more clear?
This is the default platform, so I think you want to make this a pointer.
I think the `external` should be `external` instead of `rules`?
Is there any chance that a.signingKeys will be empty? If not, we may have to remove the if block.
@tqchen Does this make a difference? I'm wondering if it wouldn't be better to send `None` rather than `0.001` and just use a `timeout` parameter.
I think we could use `\ReflectionClass::isSubclassOf()` in `PhpStorm\Util\ClassUtils`. This is a bit more specific.
I'm pretty certain that `ordereddict` is the only place where `OrderedDict` is imported, but I don't have any idea what the best way is. I think it's best to keep this file in place for now.
I think this is a breaking change. Can we just remove this property?
I wonder if we should call these bzzFileDownloadHandler, since we already have file/bytes/file.
Is there any reason to keep these dummy types ? It seems to me the code can be simplified by just having the dummy types in the header.
I'm curious, why the change?
I think it would make more sense to test the `Parse` function instead of this test function.
I am not sure why this is changed.
Should this be a `ClassData`? Or should we use `Serializable` for it?
This is a change in behavior. Previously, this would create a watchkey for every file in the current folder. The new version will create watchkeys for every file. Is this change intended?
Why do you need to use this trait in the category model, shouldn't it be in the ORM?
I think the name of this error should be changed to something more descriptive like: `ErrWrongAddressFormat`.
This is not the right fix.
This is not a good name, it is an implementation detail, it should be called GasPrice
`return exists != blocks.end()` ?
This is a breaking change for existing apps. Can we update the version of the component that has these properties to match the new properties?
I'm not sure if this function is needed. It seems to only be used once, and it doesn't look like it's being used anywhere in the function.
This change doesn't seem to be related to the PR?
I don't like this, we should have a way to get rid of this.
Why not use the same `if(name && typeof name === 'string')` as above?
I don't think this is needed any more.
I'd prefer to use a map here instead of a string - it's not clear to me what the tag is.
I think you can use `CREATE TABLE IF NOT EXISTS {marker_table} (update_id TEXT PRIMARY KEY, target_table TEXT, inserted TIMESTAMP DEFAULT NOW())` instead of the SQL
I think this interface can be removed.
Can you please move this to the `Constants` enum?
Why is this needed?
I'm not sure if this is the right way to handle this. I would prefer to keep the `string` key as it is in the `dict`, but this is probably better than `is not None`. I'm not sure what the best way is, though.
This should be `addon "github.com/aws/amazon-ecs-cli-v2/internal/pkg/addon"`
This controller should be `def must_be_admin!` instead of `def index`, since it is the first one in the method.
I think we should just change this to be aws.StringSlice(instanceID) and not change it to []*string.

Isn't this a bit redundant?
I think it would be better if this is a constant.
This is a new method that we are using in a lot of places. We should probably make this a private method.
@karmacoma do we need to add a permission check here as well as in `roles`? I can't remember what the `roles` property of this object is supposed to be
I think this can be `let role = axe.commons.aria.implicitRole(parent);`
This should be moved to a finally block to make sure it is called when the context is null.
This is just for the tests, right?
Why this change?
nit: can we update the name of this variable as well?
I think this should be `/gradlew build`?
Should this be configurable?
Nit: unnecessary change
This is a good example of the snippet that we need to update. I'll add that in a separate PR.
nit: could you move `di.IdentitySelector.Start()` and `di.IdentitySelector.Stop()` down to just before line 234?
Please also add a test for `ENABLE_JSON2`
Can this be null?
I wouldn't expect a test that uses a custom template. The rest template will be a template, not a template.
I think this was a typo
nit: why this change?
Can you please add a note here saying that it's only applicable to AWS STS clusters.
#include "oneapi/dal/backend/math.hpp"
Is it needed?
Shouldn't ignoreUndefined be the default here?
This seems like a bad idea, we should be doing something like logout, not just logging
Can you add a case for an error?
I wonder whether we should keep this. If the `skip` method is called in a transaction, then we should set the `metadata[:execution_result][:pending_exception]` back to `nil`
We should not be using local feeds as the item visibility should be controlled by the user and not the user.
Why are we removing this?
I think you can remove these two, as the docstore key is already in there.
This can be removed
I think this was a typo, the test name is now wrong.
I don't think the first `<account_out>` should be printed, as the first `<account_out>` should be printed.
I think we can remove the `show =` line here.
This log line needs a `t.Logf`
TB isn't needed anymore?
I would call them `param` and `error`.
@bparees is there any way we can check for this error message? I know that we're not using it in our code, but I'm just curious.
Why this change?
This seems to be a bug.
I am not sure why we need this change
I am not sure what the right word for this is, but it is confusing to me. The term WITH_COLLECTION is for the cluster state of the withCollection flag but the collection on which the `withCollection` was specified. I think we could call this `WITH_CLUSTER_STATE`.
This should be called `Balances` or similar
@peterhuene is there a reason why we need synax highlighting?
Can you make it a method of the `jwt.Claims` type so the code isn't duplicated and we can reuse the code in other tests.
This is a very nice pattern :+1:
'mongoErrorContextSymbol' is defined but never used no-unused-vars
This change is breaking the API. You should not add the type information.
The first string should be a comma, not the last.
I'd recommend using a more descriptive name like the other settings
I'm pretty sure we can just do this in a single call, without having to repeat it in both branches.
This can be removed.
Why not just `async`?
This change seems to be unrelated.
Should this be `DateTimeKind.Utc` for `Sum` and `Timestamp`? I don't know if it will matter, but it seems weird to me that we have `DateTimeKind` as a property for the `DoubleSumData` type.
This should be `replies.flashes.success`.
This looks very similar to `StringUtils#replaceTokens()`. Can we factor it into a common method?
Can you also assert that the `schema` property gets set?
This is the only version we need to update, right?
Can you explain why you added this? I'm not clear why you would need this.
I'd add a new test that the search result has been removed from the catalog, as this is not a valid scenario.
I am not sure if we should keep these as static variables since we are using them in multiple places. We can make them `private`.
I don't like how this would be done, because this is a very common pattern in all our agent. I think it would make sense to move it into a helper function.
I'm not sure about the naming here, I'd prefer `increasedamage` to reflect the fact that we're in the `increasedamage` state and not the `increasedamage`.
We should add this to `enum`
I'm not sure if we should use `??` here. It would be nice to have the default `null`, and we don't have to check that in the code :wink:
Can you make this `public` and add a `@Getter`?
I'd suggest we rename `BaseRegEntries` to `BaseRegistratedRegEntries` and rename the other one `RawRegEntries` as well.
I'd move these defines to `SqlParserGlobals.h` since they're only used there.
These are not implemented in the new API.
This is not a good idea. You should be using this method for the rest API.
Do not use semicolons to terminate expressions.
Why not use `Assert.Single` here?
I would prefer if this was named `PowerShellEnabled` or something like that.
This seems wrong to me. Why would we want to encode JSON?
Why was this test removed?
Why is this necessary?
I think it might be better to pass the colour as a prop instead of the entire colour object.
I don't see why we're holding this lock here?
I wonder why we need the domain here?
I think these deletions should be in a separate commit.
I think the default path for the socket volume is just `/var/run/nscd/socket`.
This is the only place where I would need to add a new property `StreamConfig.AllowNoSubject` to be able to do it without having to change the `AllowNoSubject` logic. I'm not sure if we need to do this here. @smarterclayton any thoughts?
This is a bit awkward. If we need to skip cache lookup, we can just check whether the remote is on.
Missing return type
Why is this necessary? The compression will be enabled on all volumes, which is not a good idea.
I think we should add a `load_config` option.
this is the fix for the issue. the backdrop was set to the empty list, so the page backdrop will remain the empty list
This was a bug. It should be an Error, not a Warning.
Should use `String.valueOf(sourceIDs.size())`.
I don't think this needs to be a `ulong`?
This file should be reverted
Should be `results[key] = gt_seg.to_dict()`
This seems like an unrelated bug fix, or is it just something that needs fixing?
Layout/SpaceAroundOperators: Operator + should be surrounded with a single space.<br>Layout/SpaceAroundOperators: Surrounding space missing for operator +.
I'm a little confused as to why you'd need to add the Accept-Error header if you already have it in the headers.
This is a bug fix
I'd prefer to make the original function take a pointer, so the pointer is preserved.
I think we should add a note here that if this is a repoNode, it should remove the folder from disk.
nit: maybe `EnforceShouldRetry` to be more clear?
This change makes thriftHandler.Name() empty.
I think this can be removed.
Why was this removed?
I'm not sure if this is a good place to put this route, maybe it should be a `/new-pages` route
This is not correct, the variable is a local variable.
I'm not sure if this is a good idea. It might be better to show the first page in the list. It would also be nice to have some tests for this, but I'm pretty sure we have some for the template_history page.
I think this should be `\w+:` since we are not matching the first `:`.
Why not `deque(self._data, maxlen=capacity)`?
This seems like a reasonable thing to do, but I think this should be a `WARN` level log. I'm assuming the error should be propagated to the `onFinished` and the response is `SUCCEEDED`.
I wonder if this should just be `rekeyFSM.RekeyRequest()` ?
This is a breaking change that I've noticed while working on the specs. I'd suggest removing this and instead adding a `config.warn_once` option.
This should not be here. The height should always be 0, and if it was, you shouldn't be checking it.
This is a little bit hacky, can we not have this be a static method in the remembermeServices itself?
I'm not sure we should be doing this check here, as it would prevent any type that is being added to an AdoNet type from being created. If we're going to be doing this check, then we should add the type to the `AdoNetExcludedTypes` list.
This should be grouped with the third party imports
why do we change this value?
Missing license header
I would prefer the word "political bands" here as we can also use the term "Political bands" for the same purpose.
I think the cleanup timer should be reset even if we are not running on a cleanup task.
I think this can be removed.
I'd just call this a 'bounding range'
Why is there a `alter_query` here?
why not `.via(executor_.get())` ?
@mjkkirschner - I added this check because it would have prevented the exception from being thrown. I'm not entirely sure how I could trigger this without the check.
nit: I would name this something like `hasDeltaValues` to be more explicit about what the values mean.
This interface is really not needed, and it's a bit redundant. It's only called by `TransportContext.OnRequest()` which will be called when `OnRequest` is invoked.
This was a duplicate of `chaosctl/chaosctl/controllers/common.go` and can be removed from the interface.
I wonder if we should have a more general name like `forceCleanup()` or something like that.
Should this not be `http://api.hostip.info/country.php?ip=0.0.0.0`?
I'm not sure I like the name. Maybe `hasPromise`? `isPromiseLike()`?
I think we should print a warning message here if the telemetry override is disabled
This is just the test change that was needed to ensure that the block was actually written. I think this is not a regression.

Isn't there an enum for the `type`?
Why did you remove these constants?
should we use defer close here as well
Why are you creating a shared pointer? It should be fine to pass it by-value.
Why is this empty method needed?
This is a test code, it is not a good idea to set CMAKE_SOURCE_DIR to the test file, it will break if it changes. You can just change the test to set it in the source directory, and use `CMAKE_SOURCE_DIR` in the tests
I'm not sure we need a `SetBytes`, I'd rather have a `Init` that returns a pointer.
I'm wondering if this is too high to be set. If there's no image, we'll try to load it every 10 mins. We could make it more aggressive, but I don't think that this is the right thing to do.
I think it's a better idea to use `errors.NotSupportedf` instead of `errors.New` for the error messages, as it will be easier to understand the error message in the logs.
I don't understand why we wouldn't set the default for `connect_timeout`.
I think this TODO is not required anymore.
This is the fix. If `kIsMaster` is `true` then we should set `beforeHandshake` to `true`, otherwise it will always be `false`.
I'd prefer `inventory['data']` over `inventory['data']`.
I'm assuming the bitmask is int? Or is the bitmask a string?
This seems like a great place to have mocking.
This is an error condition in IE, we have a few other `len==0`
please add a blank line above
This is a very specific attribute. It would be better to use the same name as the attribute name.
@jeremyf This is a typo, correct?
I'm not sure if it is correct to change this to the reader here? This is a public interface, so if the type is exported, then the reader needs to be changed.
I guess this is because of #3307?
Can these be imported from `tests.test` instead?
Why is `shadowSupport` needed?
nit: I think this is not necessary since we are already in a `describe` block?
Should the type be `Array<string>`?
Is this necessary? The `toString()` is already concatenating the name with a `hashcode()`.
I don't think we need the `%count% relations with products`
Is this check necessary? I think the kubelet should just delete the pods.
Is this change required? I don't see any other code using the `rollback` call anywhere.
Can you rename `tsf` to `action`?
This is a functional change, not just a semantic change.
nit: `filter` => `filter_names` for consistency
This will be `std::move(logEntry)`, which is not correct. You need to pass `logEntry` to `get<0>` and `get<1>` instead.
This is unused, right?
I think this is a backwards compat break.
@liggitt do we need this?
Why is this needed? I think we can get rid of TraceContextFormat altogether if we want.
This should be removed from the HTML.
I think we should return `Unhealthy` even for `Dynamic` hairs?
We usually import only the modules we need.
I think we should keep this here, since we don't want to make any release script run on Julia, just the default.
I would say this line should not be here, as it doesn't add any value. The reason for that is that this will make it harder to understand the purpose of the `Dial` func.
I suggest to move `sessionStorage` to `session` package, and use `session.NewSessionStorage(session)`
Why is this change necessary?
Is this a bug fix?
I'm wondering why we need to add this here, it seems to me that the standard way to add the headers for a specific request should be to include the content-type, and the content-type should be `application/x-www-form-urlencoded`.
You can make this an `constexpr char*`.
Why is this import necessary?
nit: move this import to the other cluster-api-provider-aws imports
This should be a `log.Error`.
Use the new Ruby 1.9 hash syntax.
I'm not sure how the code works, but I'd like to see a unit test that tests this.
Isn't `force_rebuild` still needed?
I'm not sure what's happening here: `union X{ X, Y } table { } namespace A; union X{`
This is a change in behaviour. Previously SetHeader would not set any header. Now it only set header if the header has been loaded from a binary file.
Is there a reason you chose to change it?
I think we need a better name.
Should be `/mutate/labels/`
I think we should use `cluster.OwnerRef` instead of `ClusterController` here. `cluster` is a pointer to an existing `Cluster`. `ClusterController` is the owner of a cluster that is created by `cluster.CreateCluster` (which is the controller that created the cluster)
nit: I'm not sure if you need to have the platform here
Shouldn't this be `instanceDir.toString()`?
This is a bit hacky, but I don't know how to get the correct schema from the schema.
@moolitayer I've moved the conditional out of this method because it's a little hard to follow how the `concat_ws` function works. I think it is a more logical place to put it, so it could be reused for both SQL Server & sqlite
Nit: I think this is not required anymore.
Should be vanity and not vanity, right?
This is the same as the `GetDiff` above. Please use a shared function to avoid duplication
Is this still necessary?
Can this be moved to `oidc.go`?
this is a bug, we should return true even if no match was found
Is this interface still necessary?
Is it possible to move the `_path_suggestion` to `urlutils`?
I think it's fine if the flags aren't in the caddytls.Conf.
I'm not sure about this, I think this is a bit of a hack. We should probably have a way of doing this in app.rb.
This should be set in the constructor instead of here.
This could be `err.status !== 'retryable'`
We can't do this, since we don't use the `default` property anymore.
This is the snippet to show how to usie
Should we add an issue to track this?
This should be `final`.
Is there a particular reason we are hard coding ubuntu here? Can we define a new constant instead?
Please add this change to a separate PR.
I think it's better to return error here
Should this be `has_many :completers, foreign_key: :completers_id, class_name: 'Completer'` or `has_many :completers, foreign_key: :completers_id`
Should we keep this const? Or remove it?
Why do we need the default datasource for this adapter?
@davidfowl is there a reason this isn't just `as`?
I'm a bit surprised that the `kind` and `id` are not used in the `provider.js` file. I'm not sure that it's a problem in this PR, but I would rather not add a new file for the provider.
I think the `$serverClass` var can be removed.
I'm not sure this is a good way to do this. I'm not sure how to fix it.
I think we should not be using pointer receivers in this case.
This should be the first line of the icon, and the `d` should be aligned with the `<path>` tag.
`stRoot` is a bit confusing here, since this is the new root of the state tree, not the tipset itself, which is the root of the tipset itself. Could we use something more meaningful?
I think the `[^`]+` should be dropped here.
This seems to be used in several classes. Shouldn't it be a constant?
Why changing the key name?
This assert seems incorrect. The condition is: `off + 0x100000 < 0x200000`.

I'm curious why we need to introduce a new API.
Isn't this supposed to be master_manager_env_prefix?
I guess these two imports were not used anywhere, so they can be removed?
This file is only used by `iptables_test.go`, so it should not be exported.
I think we should do this at the top of the file, before we call `countlyCommon.encodeSomeHtml`?
`instanceof` is deprecated, we should use `===`
@mruberry do you know why we need `rfp_backbone` in `neck`?
This is a bit weird. We have the `FacetPresenter` class, which has the methods for displaying the results. I think that `FacetPresenter` would be more appropriate for this.
Why is this needed? I don't see it used anywhere.
The indentation of these braces is weird, but I don't see any reason why it's better to keep them.
This is a breaking change. Please bump the version to `1.10.0`
I'm not sure if this should be changed. It looks to me like this would be setting terms_seen to false if read_tou is set to something else, and then setting this would set terms_seen to true when read_tou is unset. I guess we can just set terms_seen to false, and then the save wouldn't be called if read_tou is unset.
This should be `I18n.t('subscriptions.flashes.cancel')`
This is a breaking change, so I wouldn't change it, but it's better than having the old format as the last one.
I think it is better to change the condition and error message to `rootedAtAtom must be less than the number of atoms`.
Why not use the same message as in the other tests?
Should be: `// If a config file does not have a version, it is assumed to be zero`
Shouldn't it be `sha256($this->hash . ':' . $this->level)`?
You can just remove the `isinstance` check and the `TypeError` below.
This is not correct. It means if the user has specified an empty string as the value, the locality preference will be used. I think we should just make this `this.localityPreferred = localityFallback`.
I'd rather see these in a `catch (Exception ex)`. That will be more consistent with how we handle all of the exceptions and avoid having to duplicate the message
This is not correct. The type must be WaitinQueue and be decremented before calling increment. The invocation type must be set before starting process.
Can we use `git_hash` here?
I'd suggest using `.fails` here instead. It's more explicit.
This doesn't look right.
I think this line is unnecessary now.
This function is called for every op. It might not be necessary to call it for every op.
I'm assuming this is intentional? I'm assuming you meant to add `},` to `TabBar`?
why remove this?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Is it worth checking if `addr.Network()` is `windows` before doing this?
Why is this public?
Isn't this redundant with the output method?
This can just be `panic(err)`, no reason to panic here
I think we can remove these two config options now that we only support the max one.
This is wrong as there are more than 1 font. You need a single font object for it.
Does this need a `set_table_name` ? Or does it need a `set_foreign_key`, or is it not needed?
I think we should add a TODO to clean up this code in a follow up.
This should probably have a `return it->second.getNeedAccess() && !player->getGroup()->access && player->getAccountType() < it->second.getRequiredAccountType()`, otherwise it'll always break, because you'll check if the required account type is equal to the account type, but it will still break if you do a `getAccountType` check for `getRequiredAccountType` and then return `player->getAccountType() <= it->second.getRequiredAccountType()`.
I think this should be a test of the minerNode2
This is the only change required to make the reconciler work. This PR changes the behavior of the test, which is now not working for the test cloud.
Can we just drop the level and then drop the levels?
Is the `LazyThreadSafetyMode.PublicationOnly` needed ?
Is it really worth adding a `ref` to the `SpanContext` here, or could we just use `ref`?
`to_print` should be in the byteslice format.
`yank_text` should be `yank_text`.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
We can just remove this
This is a good example of how we're going to use this route in the future. I wonder if we can get rid of this route altogether and just use the existing routes in the `pages/index` route?
I think you want the full path here
This error seems redundant, since this function will log and return a status of `invalid`
I don't think this belongs_to is necessary since the client request can be approve of any user.
Why do we need `<T extends WebElement>` in this PR?
This code path is no longer necessary. This was the reason it was necessary.
This interface change seems like a breaking change. Can we leave this as it was, and have the caller do the `io.ReadCloser` in a follow-up?
I'm not convinced this is the right solution. If someone has a better idea, I'm open to suggestions.
This was causing a crash when the color was `NM` but not `US`.
I think we should rename it to `memberSubscription` or something. It's confusing to see it's a member of a Subscription, not a Subscription's.
I'm not sure this is the best way to go about this, I think it will be better to have a separate module, or at least a new module which has matplotlib as a dependency. It seems like it should be a bit more specific for the user, but that can be a separate issue.
nit: I would rename the test helper func to `GetReadyCondition` to match the name of this function.
I wonder how this works, but I think it should be the other way around - if `readPreference.mode` is undefined, it means that the user has set `--mode=default` or `--max-staleness-seconds=5`. If we don't have a mode then the user has set a preference, but it's the default. If the user hasn't set any mode, the user wants to have a value of `max-staleness-seconds=5` and we want to override it with a new value.
I wonder if we could have a `read: criteria.options.dig(:read, :read_at)` or something like that? That seems like a much more efficient approach.
This will not work in Spark SQL. We have to do a `distinct` here, not in `ReadManifest`. We need to use `toDF` for `allManifests`
Can we move this to a function and have this function call that function.
Why is this change necessary?
This line can be removed
I think it would be better if we just put "delete medication" into the `message` key
Why did you change this?
I think this is unused.
I don't think the "should calculate the number of columns" part is necessary.

I'd rather see 1.0/1.0, 0.0.0. What is the purpose of 0.0/0.0?
I think we can use `if` statement here instead of `if ($useLazyLoading) {`
Should we use a config option for this as well?
This is already in core
Can we change this to a `long` instead?
I think we can move this call to `check_acked_status()` to the top, to avoid calling it for every writer.
I don't think we can accept a `URI` here. We can just pass a `List<DataFile>` to the `listAvroPartition()` method.
This is the only thing that is needed.
I think you can do `d is not None and d in scope.args.defaults`
This is a little weird as a struct, but I think we need an `init` func that does all of the stuff we need to do to set up the `ndeltas` field.
This is a bit odd, but I guess it is the right way to go.
Is the reason this needs to be done in the command? If I'm right, the `criuCmd.Start()` should be called before the server is started to ensure the server is closed.
Why not `npm run test:js --version`? I'm not seeing where this is coming from.
I think this is not needed.
I don't know if you can use symbols in this case. But we have a `Movie.qirector` method that we could use instead.
This will only work when we have a subset of vertex properties. I'm not sure what to do when we do not have any vertex props.
I'm pretty sure you should just use `result` here. The caller can check whether the stream is empty.
Can we use the helper function from opf.frameworks.opf to make this more clear?
Please add a space before and after "=" and "restart NVDA"
I'm not sure why we need this. It should work fine in external mode. If you want to disable GPU ID handling, you can do this in `init` method.
This constant doesn't appear to be used anywhere, and can be removed.
I'm wondering whether we shouldn't make a separate project for this? I think I'd like to keep this in place.
This is a little confusing to read, since we are checking for the selected columns and only doing the case insensitive select if it exists. I'm wondering if we should make that explicit. I don't think it's a big deal, but it's a bit hard to follow.
This is a little weird. Why not have pool be a pointer?
I think it would be clearer to do this check in lowerFuncCoro. The check for whether we should lower is in the first place (in the else clause).
nit: `protoUDP` and `protoIPIP` are unused, and can be removed.
I don't think we need a new EventReason. We can simply use FailureImportOperations.
This variable is not defined anywhere.
Why not leave it in debug?
Please add a space after `=`
@koppor I think we can remove this TODO. It is not needed anymore.
I am not sure if we need the `creationTimestamp` field in the response? The client should only set this when the object is created, but if the client sets a creation timestamp, we should be able to set `creationTimestamp` and the client would have to set it manually.
Is there any reason why you don't just use the `pred_map`?
This is not a problem, but the `final` field of the `s3Blob` struct is never initialized.
Is it possible for someone to log this message in the UI?
I would just return the error, it's not necessary to do anything more than error handling
I think you can use the iterator here.
I would prefer to see this import in the same order as the rest of the codebase, and not have it as an import.
I think we should remove the check here.
This is already covered by the `beforeEach` block below, so no need to duplicate it here.
This is a public API change. Is this intended?
Nit: Shouldn't this be a test case?
nit: group this with the other third-party imports
This should be moved to `_inject_early_js`.
Why not use time.After() instead of adding a new field to time?
This is the only part I'm wondering if we need a different name for `Senders`. Maybe `Received`?
I think the `Pod` and `ExternalEntity` structs should be moved into a separate package. They're only used in the test.
Shouldn't this be a `SessionClosed` event?
I think this should be in the `<body>` instead of the `<script>`.
I think this is the only place this method is being used.
Use 2 (not -6) spaces for indenting an expression spanning multiple lines.
This field does not need to be omitempty
Why do we want to create a new directory if it doesn't exists?
@mistercrunch I don't know if you have any better idea here.
This method doesn't return any tasks.
Why was this moved? Seems unrelated?
This import is not necessary.
Should probably use a `Gem::Deprecation` here.
Should it be deleted when `this.ArchiveNumbering == ArchiveNumberingMode.File`? I don't see it in the `DeleteOldDateArchive` method
This should not be needed
I think we should add `DELETE /all` in the path.
`warn` is not correct. `debug` level is enough.
I'm thinking this should use the `QuerySpecification` instead and not `QuerySpec`. This is what we use in other places in the code base, and it's a bit confusing because it has a similar concept.
I would suggest `omitempty`, as this is not optional.
Space inside { missing.<br>Space inside } missing.
The result of this function is not checked, so this change is not needed.
This is fine, but I'd like to see a test that makes sure it does not break anything, and that the ratio has to be a number, not a number.
Should we just return `ipNet.IP` here?
This function is not used in this PR.
This will break the `tab` kwarg for the `WebEngineElement` class.
Why does the TChannelDispatcher have the `Create` prefix?
why is this returning a long?
I think it's more pythonic to call the parent method, not the function itself.
I don't think this function is necessary. The `logging_callback` module will automatically print the logs in the console.
This message doesn't match the one in vkCreateImageView()
This is the main change here. The `isGoQuorumCompatibilityMode` check is now in the `if(goQuorumCompatibilityMode && privacyParameters.isPresent())`
nit: `newManifests` can be declared final. Also, I wonder if this should not be done in a `finally` block, since the list might be modified in the `finally` block.
`nil`. Also, this will be a `ValidationError` if the `groups` argument is `nil`.
I don't think the name is clear. It's a timeout in seconds.
We can remove this now
This should be `crdv1alpha1`
I don't think we have any other image name in the Makefile
why is this needed?
I think you want to use `errors.Is` here, as the `args` slice can't be empty (the first argument is a string), so you need to check for the presence of that first argument
This should be added to `contribs`, not `contribs`.
This is an unrelated bugfix that should be reverted.
Space inside { missing.<br>Space inside } missing.
Should be `DeleteRuleFix`, not `RemoveRuleViolationFix`
We need to add `icon` to `fieldsToLabels` in the migration.
Shouldn't this check for `match->host_is_unix_path` as well?
This is not needed
This is a bit weird...
should be reverted.
nit: can be static
These can all be `int`
Which master is this? I think you can set it to nullptr by default?
Why is it called `once` here? It seems it's a sync.Once, so the mutex is never used.
Why is this changed? The class has been changed to protected.
Missing new line at the end of file.
I'd rather not rely on this being a global variable. I think we should move the search to a separate test method.
I don't think you need a target name here - you can just use the name of the camera camera sensor.
Should this be in the Sandbox folder? Or a different folder?
I think we need to add a case for TIME_ZONE here.
This import is now unused
I don't think we need this condition, the connection is initialized when we start the loop
This is not needed anymore
I'm thinking about whether the name of the JavaScript engine should be something like `nameJavaScriptScriptEngine` or not, as it's the same as what we've already done here. The name is pretty much the same. Maybe `scriptEngineName`?
I'm not sure if this is necessary, but I think it's fine to leave it
@sttts I think this is the best place to remove this function.
`!request` is not needed.
The `NodeLists.getAnnotations()` method has been removed.
I don't think that this method is needed.
I think we can get rid of this if we just pass the informers to `NewStatusController` as the controller. I don't think the informer is used anywhere in the controller code.
nit: can you use a more specific name here, e.g. `RunController`? `RunEdgecontroller` is confusing, since you're not using the edgecore, and you've just used `RunController` in the `run` command.
Should we also check for `remoteHost.isEmpty()`?
I think it would be better to throw an exception instead of returning an empty list here.

Should we log a warning here ?
I think this is a bit too specific to me. It is a bit unclear to me what is happening with the name of the kernel. How about `sum_singlegroup`? It is not only a single pass kernel, but a single group kernel.
Why was this removed?
Why not just `using team_member = Kokkos::TeamPolicy<Device>::member_type;`?
I think we should not have a dependency on logging
I think this is more accurate. The box whiskers follow the Tukey boxplot definition, which represent the first, second and third quartiles. The boxes of a BoxWhisker element represent the first, second and third quartiles. The whiskers follow the Tukey boxplot definition, which represent the lowest datum still within 1.5 IQR of the lower quartile, and the highest datum still within 1.5 IQR of the upper quartile. Any point falling outside this range are shown as distinct outlier points. Any point falling outside this range are shown as
Why is this not the default anymore?
This is wrong.
Should this also say "deprecated" in the deprecation message?
I don't think we should be changing the cache key. It's a breaking change, and we should be fine.
Why did you change the year here?
What about the other connection settings?
I'm not a fan of this, I'm afraid this will cause an API error, because this method is not implemented in `GroupSuiteManager` and the implementation should be removed from the `GroupSuiteManager`
I don't really understand why we need to change this. Can't this just be a regular expression?
This should use `_x()` instead
I think this should be a classmethod instead.
This is the only method that uses this, I would move this to a separate file.
This is a very small buffer. Can we make `MaxExportBatchSize` a `const` at the top of file? Then we can use that in the `for` loop instead of a pointer to a slice.
Shouldn't we use `$galleryItems instanceof ArrayCollection`?
Nit: Can you remove this blank line?
I think we can just remove this function and just use `driver.getScript()` below.
We need to add a spec for this validator.
I don't think we should do this. It is an internal detail of the JVM and we should not have any users of this option. I'd prefer we keep it as a separate option, and set it to "append" by default.
nit: `generate_for_users` would be more consistent with the other options in this file.
We should be consistent in the naming of the method and the function name, since it's a `getAvailableBalance` call.
We should probably throw here, and not throw in the else branch, right?
This seems a little strange, why would the conditional branch be evaluated?
I don't think we should mention this at all. It's a bit confusing to say that the file is not flushed to the server, and that there is a block in the store that has been flushed.
Shouldn't the default value here be `""` instead of `""` ?
Why do you need `type=int` and `type=float`?
This looks good. We could also just add a method that takes a `String` and returns the column name if not found.
I think we don't need these new arguments, we should just have a default value of `[]`.
Should we add a comma to this line?
Why is this not just an auto-constructor?
nit: this import is unrelated
I think you can just do `expect(subscription.scheduled_for_deactivation_on).to be_nil`
I'd prefer to keep the old method and make `deleteMapper` package private. It's only used in the tests now, and I don't see any reason for this change to be a part of this PR.
I think this test should still verify that the `Content-Length` header is not present in the response, but it is not actually testing that the `Content-Length` header was present in the response.
This is the example for the device farm integration. It's the example for the pytest integration, not the example for the device farm integration.
This should be `_ => new KestrelTestLoggerFactory(testLogger);`
This file is no longer used.
I don't understand why you removed JSON tags here, is that intentional?
I think it would also work for `LAMBDA_TEST_ROLE`?
Should we also allow setting `AdditionalScrapeConfigs` to empty if they are configured?
I think this will panic when the environment id or name are not set
I would add this in the base constructor, and have the DialogResult property be set as the value when this function is invoked.
nit: "unrestricted" instead of "stores payload onchain"
I'm not sure if this file is really necessary, we can remove it if it's not needed.
Is it worth making this a keyword arg, or would that be too confusing?
I'd like to see a unit test that checks this. I'd like to avoid it if possible.
This is wrong. If it is not host, it must be ARM or X86.
Why did this change?
This will need to be translated
I'm not sure if we need to trim here, it is already checked in the line above.
Is `useRustParser` the only place where it can be set to true?
I think this method is not needed. The `Sequence` interface is enough.
This is a bit confusing, how about just `SyncMode.NotBeam`?
I think we should use the `Type` class here instead of the `Integer` to make sure it matches the Java `Type`.
you could just use `assert ax3.get_title().startswith('t @importance_type@')`
This is not correct, the secret key is just the secret, not the secret.
I think we can use the new `shared.metadata.SharedShardMetadataStore` here instead.
why not just `if blockHeight == 1 {` ?
Is it necessary for this to be a function?
This file should have a newline in it.
I'm wondering if it would make sense to also test `managementService.disableTelemetry();`.
This is the only thing I'm unsure about. I'd expect the stack to be the first in the list, and then the code flow to be the first in the list. Is there a reason to not use the existing stack?
This should be V(3).
Can you make these bools a const string in the struct? It's easier to read and more obvious what's going on.
Who calls `Invoke`?
I'd suggest `Type`.
`externalMemory(NULL)` should be removed.
I'm a little confused by the name `Subject` and what does it mean.
Should the order be in chronological order here?
I'd prefer we have it in a separate file, like `options.go`.
I wonder if it is better if we have a separate function that checks the old and new state of the node and calls this one.
I'm not sure about the name. This is for Gallery has media.
Why is this test not needed?
I think this can be removed?
nit: import sorting
I think this can be `local`
I think this needs to be a pointer. `apitask.Task{}` is `nil` by default and I think we'll never receive that message.
We should probably move `analytics/dashboard.js` to `@wordpress/components` and import it here.
I think this change is not required. The new tests should be in the `test_test_network` file.
I think it's fine to leave this as it was, and just pass `auth` into the `NewAuthority` call.
Why is this test being removed?
Shouldn't you be able to call `app.Start()` in this case too?
Why are you deleting this?
Why is this a map and not a simple array?
Can you explain what's happening here?
I think it is a bad idea to change the `__init__` signature. I'd rather see `super(Serial, self).__init__(serial, onReceive)`
This should be a separate commit, since it's not related to the rest of the commit.
nit: this is kind of weird. Why not call it "intraNodeTraceflow"?
I'm guessing the indentation here is just a tab to separate the fields from the field?
This is the only change in this file, right? It's the only change in the file.
I would have preferred that we keep the model_handle but have a separate index for each of the inventory. I think it's easier if there's only 1 column and we only have one column for the index
What is the purpose of the change here?
I'm not quite sure about this part... I don't think `avx.vvvv` is the union, it's just a union of the xmm/ymm/zmm. I think it might be better to use `DR_REG_VMM_L` and `DR_REG_VMM_L`.
This can be removed.
I'm not sure about this. We should try to reload the aliases, but we should not do that unless we are in a retry mode.
I'd probably use the `escaped_command_string` method from `Puppet::Util::CommandLine` here to make the escaping easier.
This should be `authenticated`. `response.isAuthenticated` is a boolean.
`pingWaitTime` is an optional parameter, so I don't think we need to add `?.` here.
Nit: I'd use `assertIsNone(response)` instead of `assertTrue(True)`. Also, I'd recommend adding a `fail('Test failed without Kine Sites')`.
This file should not have changed
This should be a `long` since it can take a bit longer to execute.
`signedUserName` isn't used? Should this function be removed if we don't need to?
Nit: this is already initialized in the `Initialize()` method.
@stgraber I think that this will break the compatibility with clients that have already configured a `proto_mutual`.
I think this needs to be `../../scripts/**`
I think the name `GetAll()` is confusing. The cache should contain all keys and values.
Isn't this method only used in tests? Why not put it into the test module and make this a test method instead of a utility method?
I would prefer we keep it global. We have tests that need this. It is important to know the identity and it is not shared between different test runs. It is not clear how many tests are affected by this and why we need to keep it global.

I don't see the benefit of the plugin name.
`QVariant.type()` is the same, so I don't see a need for this function.
This is the same as in `Write`. I think we can just remove it from here.
Layout/TrailingBlankLines: 1 trailing blank lines detected.
This should use `+ i + 1`.
Shouldn't it be `block.Actions` instead of `blk.Actions`?
nit: rename to `WithAddPeersError`?
nit: I don't know if the `Dummy` part is useful
This method should not be removed. If we remove it we will need to remove the method below as well.
Should this return an error? If it's not approved then we should just log it, no?
I would suggest to use a more explicit name, like `delete_files_after_test`
This change shouldn't be included
I think this should be `Rule<>(boolean, AttachedBlockHeaderValidationRule<C> rule, boolean includeInLightValidation)`
Why did you change this? It was fine before.
I'd prefer a new name. I'd also prefer a new name like `priv_getTransactionCount` since we don't use legacy anywhere else in EEA and we don't use it for any other stuff.
@khallabadi This line is the only place that was left over
Why are we changing this? This is a python 2 code style.
I am not sure if we want to make this change as part of this PR. If we don't want to add a new API, it should go into another PR.
I think we should keep this file unchanged as it's used by the test suite now.
Should we also add a header to the `NewAzureTestPipeline`?
@jcouv, this is the estimated value that is used to estimate the max memory allocated with NAHEAP.
This doesn't need to be in the ability object?
Is there a reason for removing the first `is`? It seems that it was added by mistake.
I think this is wrong. We need to install the dependencies in a different way.
This is a good fix, we should probably use `params[:sort]` instead of adding a new param. The `url_for` method would be deprecated in favor of `params.merge(params.merge(:sort => sort_key))`
This will not work if the cluster power state is `running` or `failed`
Shouldn't we use the `NET6_0` ifdefs in all cases?
I don't see this used anywhere.
this is a bug

Why is the `no-member` needed here, when the `no_member` is in `pylint`?
Should this use the constant for the `$metadata['fieldType']` ?
@tinaafitz Should we have a test case for this?
I think it should be self.request.
This is a bit weird, but I guess it's ok
I think `fetch` is not necessary.
This should be `private static final` and the constructor should be called from `AsyncTask.super` instead of in `doInBackground`
This should be `Gsa18f::ProcurementPolicy.new` (and `Gsa18f::Procurement.can_create?` below).
Is this intended?
This interface is not needed. The interface is already available in pkg/conntrack, so you can just import it in there.
I believe this is a leftover from when you were working on this PR.
I would move this logic to `setIfNewer` since it does not belong here.
Can we add a link to the issue here?
Is there a reason this is a method in the treeInterceptor, instead of in the treeInterceptorHandler? I think it is more readable to have a single method here (and not have a separate class).
Is there a reason to check `item.dispose` here? If we don't do this check, we would have freed the entries in the previous iteration of the loop.
I don't think we need this.
@mickhansen Is this the correct syntax? I would think it should be `i18n` or maybe even `i18n-i18n`
The reason this was done is so it's not a problem with Go 1.7, as we're using a different channel that is already closed.
The variable should be `$3`.
I'm not sure if we really need this one. The command package should already have all the necessary methods.
(style) throw should be on next line
"The amount of pledge in FIL is used to ensure that the pledge for the miner is not dropped below 0.001FIL"
This is a good example of a missing file.
This is a breaking change, right?
Why is this a list?
This is a bit strange to me, why not `detached: true`?
We should probably add a flag for `--static` to allow for static builds too.
Why are we disabling these?
The error bit here is for debugging. It should be removed.
Is this intentional?

I think you can disable this one too
This spec doesn't seem to test anything. I don't see any test that checks that `modifyRow` does what you want it to do.
This looks like a copy of what the code did before. Why would it ever be the case that the extension is "default"?
Is this used?
`@deprecated` should be removed.
I'm curious if there is some reason you didn't change all of these?
`if (countlyVue.sideBarComponent) {`
this is an interface so it shouldn't be in the interface
This is a very specific case. It is only for the case where the user explicitly specifies the "deepbind" parameter.
This one doesn't seem to be used anymore?
I would rather not add this.
We have to do this, otherwise we have to update all the proofs to be a single file
We should probably have this check in the webhook config as well
This will break the API when the exception message starts with a `Datafile`.
Why not just increase this to 10 and let it run forever?
I don't think this is the right place to call TCP_SetKeepalive. This should be inside the TCP_SetKeepalive call.
Create transport? Why do we need this setting?
Should we add a `TODO` to remove this when the feature is removed?
I don't see how this can be `final` now, is it necessary?
Is this field needed at all? Can it be removed?
This is now the only line that needs to be removed.
I think it's better to define these as `uint32_t`
Why not just call `setCustomTagWriter` here?
Is the `puts` intended? If so, I think we could remove it.
I think this change should go into a separate commit.
nit: I think `containerName` is more descriptive than `targetName`
This is a good example of how it is used in Java
why remove this?
Is it possible that this would write to an eventfd where the length of the data is less than 8 bytes?
I don't think we need this file
This is a new feature. Please remove this change and create a separate PR with the feature enabled.
I think it's more clear to say "Run the check during package build" rather than "Run the check during package build". Also, maybe "Run the check in a single build"?
This is not correct, we need to modify the row when it is sorted.
I would prefer to keep this as PLL_SW_60M
This is a bit confusing. It's not a tag, nor a sha.
Should it be a global?
@mbohler, I am not sure if this is a good change. We have already set the name in line 134, so this would send a duplicate event.
This change is probably fine, but I'm wondering if it's a good idea to make it a `private` field instead?

type Discover func(ma.Multiaddr) (stopped bool, err error)
should be `text` not `text`.
I think `getFullyQualifiedName()` is an expensive operation.
I think this is an overkill, can we use a `readonly struct` and `internal` here, instead of `public batchExportProcessorOptions BatchExportProcessorOptions { get; }`?
I'm not 100% sure about this. If the key is deleted by the user it should be returned, not a success. If the key is already deleted by some other user the request will be ignored.
:ok: This change will be queued for retranslation. We'll use the existing translations in the meantime.
I think these two functions should be merged. The function order will be `nodeToEdges` first. `nodeToReverseEdges` last.
This should be in a new method, as the BibTeX file is only created when the dataset is loaded.
I am not 100% sure about this change, since this is the only dependency of `monitoring`.
I think you meant `sin = {0};`? (I don't think this will change the behavior of the code.)
Should this be optional? I don't see a default set.
@robrap I added this method to allow the user to select a particular object when they click on the cursor. It is now available in the UI, but is not available when it is clicked.
Why is this needed?
Which account scope is this?
Can't you use the `api.Resource()` function instead? It seems to be the same for all APIs, but it would be more readable.
I think this test was testing that the `/verdaccio/conf/htpasswd` file wasn't in the default config.
nit: `it will return a promise that resolves to a response object. The promise\n` -> `it will return a Promise which resolves to the response object`
I don't understand why we need to create a separate pair here, and not just use the `first_quiz` and `second_quiz` fields in `create(:quiz, questions: [first_quiz, second_quiz])` directly?
I'm not sure if I'd like to add the .gz suffix in the case we want to use it in a different way than .gz. I'm not sure if we want to add it for all cases. @jackysp @mitchellh @cwgoes ?
Why not use PyRegions?
This is the only change that can be included in this pr
I'm not 100% sure if this is a good idea to deprecate this method. IMO it is not a good choice. It is not really a key comparator and the key is a key.

This was the bug, the old code was doing `childNodes[0]`
Is this intentional?
This is a bugfix, it's a bugfix for master-facing master, and we need to make the master-facing master-facing master-facing master-facing.
This looks like it will detach the process if it exits. What if it returns a non zero value?
Why does this import need to happen here?
@jeremyjordan is the `hasattr` check correct?
Why not have a `ServerStream` return value?
Why not use the WL_FLOAT macro?
This change is not really related. I'm not sure why it would be better. But if there is an item, the loop is not finished. It will be executed even if the item is null.
This seems like the wrong place to fix this. I think the route step should be created when the step is created and then used here, and not here.
Please add a dot after the dot, to be consistent with other translations. Thanks!
This is not a good error message to return, this error should be returned as the error returned in the `GetApplication` function.
Should this be `listen_matched_p`?
I don't think you need to call decode() here? I think you're trying to test it in a test, so you can simply use `assert "127.0.0.1" in stdout`.
nit: move this down to other stdlib imports
this is not correct. you are creating a new slice, and then creating a copy, you should not copy it. You should just use `result.qsubs` instead
Isn't this line unnecessary?
Can we change the default to `'on_input'`.
I think this is wrong. This is changing the view to not show the author view if there is no title, which means that if there is a title but no author it will show the author view. The title view will not show the author view anymore. I think it's best to just hide the author view if there is a title.
This should be "Offline" not "OFFLINE".
I think this is wrong. The previous version would have returned the address as v4.
This should use the constant defined at the top of this module, e.g. `INVALID_RESOURCE_ID`
I guess we want to support the "mixin" part in the name, as it doesn't really matter, but it could be a different name. I'm not sure it matters much.
Why is this being removed?
I think this needs to move to `Makefile`
nit: `Rewriting manifests of table %s`
This is an unused import.
This is not needed, as you are not setting it on nil, so you can safely remove the nil check in line 538
This should be `continueProcess`
Why do we need this?
I think this should be config.boltdir.directory.
this is not correct, the first column is the key, the rest should be the values
Should this be configurable, or is this a separate PR?
I think this is not true. The state is unknown, so the commit operation may fail.
Shouldn't this be `if (type != "HDF5Reader" || type == "HDF5Reader-Junmin")`?
I think this should be `stack_name_part`.
Shouldn't we be using `i.domain` instead of `i.appDomain`?
This is missing `|| ''`.
I wonder if the `TokenSecretRef` and `AppRole` fields could just be a `Secret` and then we wouldn't need the `Secret` part.
This should be renamed to _check_consumer_action
nit: can you please remove `t.Parallel()`
I don't think `Object.keys()` should be used here.
Nitpick: this can be `in`
I would suggest to use the same constant as in `HIVE_ACQUIRE_LOCK_TIMEOUT_MS_DEFAULT` to be consistent with Hive. It would be nice to have a single place that sets this constant.
We could use `field.Invalid()` instead, but we can fix that in a followup
This is not right. It should be called in `test.py`.
I think you can just use `GetUrl(this ISpan span)`
This should be in a `debug` message. Also, should we print the encoding?
This should not be changed
I'm not convinced that it's a good idea to have `import traceback` here. I think we can just do the import at the top of the `__init__` file.
I don't understand why this is needed

I would add the table name here as well.
I think you want `page_size, max_results`
I don't think we should be adding this here, since it's already in `config.yml`
I don't think this should be removed?
This is not correct, this is a new feature. I think that you should just remove the "CI" and replace it with the proper name
nit: unnecessary whitespace change
This is going to be pretty noisy. If we're going to dump puppet logs, why do we need to dump them? If it is a puppet log, can't the user just see what happens in the logs? And if it is a puppet log and we're dumping the log, what happens when a Puppet log is written to it? I would think that would just be the same thing as what's done with a puppet log, right?
I think this needs to be `newVNode.props.multiple !== null` to avoid setting `multiple={true}` for non-select nodes.
I would move the condition into the previous if block (and move it to line 375).
Is there a reason you're drop'ing and re-creating the table?
I think this will fail if `paths` is `nil` (and `lstat` doesn't return a `nil` error)
I'd suggest to use `logger.Log.Infof("HidepidEnable is %v.", systemConfig.HidepidDisable)`.
nit: can we use the constant from `JsonRpcConstants` instead?
I'm assuming this is the right build.
I think we can just remove these lines since we already have a `prevFolderId_` property.
This is just a wrapper around `clock.Now()` that returns `unix(now)`.
I'd like to keep the `*` in front of all the members. I would also like to have `auto` be a `const` reference.
Is this really necessary?
Why do we need to specify this here?
This is an internal implementation detail. It shouldn't be in this PR.
Is this used anywhere?
I think it would be nice if we could make this function private and have a unit test for the `ReloadContext()` function. That way we could also test the `opts.Cluster.Permissions == curOpts.Cluster.Permissions` case. This will make the unit test easier to read and maintain.
Is it necessary to strip unlearned columns here?
Why do we need this?
nit: the renewal
Why not just have the header include `#include <pdebug.h>`?
I think this is a nil pointer dereference. If the `DeploymentNotification` is set to nil, it's possible that `event` is not a valid event, and this check will panic. If this happens in practice we should return an error, but we can handle the nil pointer case in a more general way.
Should this error be returned as `PermissionDenied` if `pid` is 0?
nit: remove empty line
Why the changes?
Should we use the same language string here?
nit: `Implies --compare-dest but also copies files from path into destination.`?
Should it be `Warnf` or `Infof`?
We should add a new error type here, `MongoDriverError` and then `MongoStreamClosedError`
why did you change this? It doesn't look to me like this class is needed.
I think this will break the existing Appointments index route. We should use the same route for the `pageTitle` and the `i18n` property to be consistent.
Should this be `if status['status'].get('errorResult'):`, since the error result is already a string?
I don't understand this. Why are we using `id` rather than `id` in the query?
Should this be `@succeeded ||= !succeeded?`?
Isn't this the default?
I'm a bit confused by these maps. Are they used anywhere? Can they be removed?
@ravishk-kumar @nitis-girl I think we should remove this check.
This is an interesting idea - I think this method should probably be in `io.vavr.collection.collections`. I wouldn't expect that this would be a useful API, and the implementation of `fill` is not specific to `io.vavr.collections`.
I would prefer to have this be `SqlCommandIntegrationId`. `Nameof(SqlCommandIntegrationId)` is more readable and also avoids the need to have to use `nameof(MySqlCommand)`.

This is incorrect. It will return `Theme_AntennaPod_TrueBlack_NoTitle` for `theme == Theme_AntennaPod_Dark`
this seems like a very fragile way to remove messages that are not from the block, so maybe it's worth to do this filtering in filterPenalizableMessages
I think that the length is already known by `INSTR_SIZE`, so I'm not sure we need to add this here?
I don't think this is correct?
Line is too long. [83/80]
I would call this `HidePIDDisable` to be consistent with the other bool fields
I think this needs to be a property on the `JsonLayout` class
Should this be `sameSite`?
Do we need the `Disallow` header? Is there any other header that is not needed?
This is wrong, we're only setting the color when the view is activated. The color should not be used in this case.
I think this will be called for every frame of the refresh. Is this intended? If so, then maybe we could use a global `clearTimeout` to avoid having this function run for each frame?
I think we should have a test for `tsd` that does not return errors. That would cover this case as well
This is now redundant. We can just remove `onHideCustomView` altogether, no?
I don't think we should add this. This is a bit confusing and will be hard to maintain. I would rather just use `uint64` instead of a pointer. I also think this is more correct, but I am not convinced that's a good idea. We should have a test for the new functionality.
Should we use `%d` instead of `%s` here?
This is not really XLELongField. It is LELongField. You don't need to use XLongField.
I think you should just use `#include <stdlib>` instead of the full string.
I think this is also not needed, as it is a constructor parameter.
This should raise an error.
I don't think we should have a separate library for this - we should be able to use `base64` directly for this, and not worry about it being a problem in practice, and I don't think this file should have anything to do with `basics`, and I think `base64` should be inlined here.
This is probably not necessary, since this method is not called anywhere.
Why not just always force empty? It seems like we could just do this with `core_authorization.RouteFactory`
Why not `WithClusterDeploymentInstalledTimestamp`?
Shouldn't it be `isFieldsInvalid`?
I think this is the wrong place for this change.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
This should be set by the supersocket
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
`subscribed`? Or should we just use the `subscribe()` method in `AbstractSnapshotManager`?
I think it would be better if the `AddLink` method could take a `SpanContext` and return `nil`. If it's `nil`, `SpanContext.IsValid()` would return `nil`, which would be the same as a no-op.
I think we should add some logging in case we are writing to the body, so that we can track that we have a good way to know what happened. Also, we should probably check `!res.IsZero()` instead of checking for `!= -1`.
Should this be a `Struct`?
I think the error should have a more specific name than `NoSuchNameError`.
I think this is a little more clear, but I can't think of a better word for this. Maybe something like "Restrict the API hostnames allowed in requests' Host header to following domains." ?
this is a BC break, you can't change the default
Please remove this import.
This is probably too long. Maybe 10 seconds?
Should we add a log statement here to indicate that it's not empty?
Shouldn't the error message say "The script '#{script}' does not exist"?
This was a bug
I would keep the title here.
Should this be a Warning?
Isn't the interceptor function a function that returns a list of interceptors? It looks like it should be the same.
Is there any reason not to do `AssemblyName == args.Name`?
why this changed?
I think this will throw an exception. If you have multiple elements in the collection, it will not be able to add the same element to multiple sets. I think we need to check for this.
This should not be necessary.
I'm curious if you know the reason why this was done this way. It seems that `op_data[1]` and `op_data[2]` are the same value, so it would be a little more concise to use a single `char` variable.
I'm not sure if it is safe to cast a negative number to an `int` here, since we're using `int()` for checking if a number is a positive integer.
Is this change necessary ? I thought the original was better.
We should also append a nil value in the `default:` case.
This should probably be moved up to after the `if (ref)` block.
`Leave parts of an incomplete multipart upload counts towards space usage on S3`?
Is there a reason this isn't a private function?
This is a bit weird - why not just import the specific types?
Can we add an annotation on the block device claim holding the previous block device name?
I don't think it makes sense to add this line.
Line is too long. [83/80]
I'm curious why this is necessary?
please remove unused code
Why was this removed?
I'm not sure why you added this file?
I think this should be `<String>`
Add `param.Description("Whether to show legend for the plot.")`.
This seems to be a change in behavior. If traceId contains `.` or `@` characters then trimming the value is incorrect. Is it intentional that this change? I'm wondering if it wouldn't make more sense to remove the trimming in a follow-up?
Why disable? Is there a reason for the pylint disable here?
I think this should be called something other than es6, since it's used by the `esbuild` binary.
NIT: Can you add `@param` tags for the optional args?
This is the actual fix.
Is there a reason why this isn't `default void collect(int doc) throws IOException`?
I would prefer to keep the old name. It was confusing before and now it is confusing.
I'm not sure why this is needed.
Shouldn't this be `if msg.MessageId != nil && len(ids) > 0`?
Should we have this on the server side too?
@kushthedude Is this file used anywhere?
This check is not needed. The condition above will check if inputs or varHolder are not nullptr.
This seems to be a pretty specific constant, maybe we need to move it to the `ActiveSupport` module?
The message should have the `&lt;`, right?
This is just a test so it should be removed, right?
Is this an accident?
These should be `const`
>Create dictionary entries when the input has no value mapping. [](start = 20, length = 72) This should be an option. #WontFix
This is an interface, so you shouldn't add this method.
This function is not used, can be removed.
I am not sure this is correct. It seems to mean if the nonce was passed as an argument, all watches are potentially confirmed? If not that would mean that there could be a bug in the implementation of the method.
Can this not be `Platform.OS === 'android' && NativeModules.ShareExtension`
Is it worth adding the ability to configure it for a server that doesn't use SSL?
nit: I think this is redundant with the `PublicHeader` type above.
This method should be changed to take a `Character` instead of an `Object`.
I think this should be `true`, as `isInterface()` is not a method
This should not be removed, since the value is not used anywhere in this method.
I don't see this in the docs - is it an issue with the old implementation?
Why is this change necessary?
Can we rename this file to `worker.go`?
You can remove the `.not.to.throw` from the test. That's the default behavior.
This function is only ever called from here so it's not needed.
This is a very expensive operation in a hot path. I think it's a good thing if the performance is not too critical, but it's better to avoid that for a hot path.
I'm wondering if we should make it public and call it `getByUuid`
This is the same as in `if (currTerm != term_) { break; } `
Align the parameters of a method call if they span more than one line.
Can you make this a pointer so it is not modified?
Let's rename to dns_txt_records_tests.js. It doesn't really belong here.
I'm not 100% convinced that `pageTitle` should ever be a string. It's just a string, and it's not an integer. Maybe it's an int.
I would prefer if we could add a note on how the host will be used and how it will be used.
Is it possible to avoid having the Android dependency if possible?
Why not just add `success_https` as a value instead of a space?
This line should be removed.
I think we need a test for that.
I'm not sure if the test is testing what the user sees as "Import with network tags". Maybe something like "Import with network tags from a file and verify that the network tag exists" would be better?

This is not necessary, `avro` has `Schema` already
`bluebird` is not needed.
why is this needed? It looks like it was already deleted by the finally block
target_link is a pointer to a linklist. This is a pointer.
I think we could remove this line. I'm not sure what the `expectedToBecomeIndex` was.
Line is too long. [83/80]
Why did you make this a pointer?
I don't think these are needed anymore?
Why not just await?
This is a good change! We are removing this line.
I don't think this is correct, the rest seems to be the same
Shouldn't `omitempty` be part of the json tag?
This test doesn't make sense to me - the manager is only created once, so the sessions should only be created once (and not on each iteration), and not on each iteration. The `Create` function is called multiple times. You don't have to do anything with `manager` at all, it's only used in one test.
Please rename to PREF_QUEUE_SORT_ORDER and change the order to the same as the field names.
Why the extra space?
This is a bit weird, but it's fine.
I don't think we need this method at all.
This `if` statement is not necessary.
Please change this line to `show_source(self.get_pygment())`.
I don't think we want to set this if the max subcount of 0 is set.
The `else if {` above should also be dropped
I think we can remove this line, as it's not needed anymore.
We need to set Ready back to true if err is nil, right?
I don't like the idea of changing this version. It is not the best place for it to change. I think it should go into a separate PR.
I think the variable names in this file are a bit confusing, as they are the same. I would suggest changing them to `serviceDescriptionKey` and `serviceDescriptionValueKey` to avoid the confusion.
What's with the extra blank line here?
Should this be renamed to `referencesVariableVariables()`?
This is going to break the L2 pipeline because `marksReg` is an `uint16`. It should use `macRewriteMark` instead.
I'm not sure if this should be a list.
I would add a docstring here explaining the function and its parameters.
This should be a separate commit, as the rest is just cleanup.
This is a breaking change. I think we could leave it as `byte`, and then have another class that uses `byte` for the value.
I'd rather use something like "Capacity|CapacityType|Capacity" or something like that to indicate that it's in the list, but the type is not obvious at all.
`!=` instead of `!==`?
Why is this file added in this commit?
Can't the context be passed as a parameter?
This is going to be a performance issue, we can't use the `where.not()` in a scope.
Should this be a method?
I think we can remove this file
This is a bit awkward but we can't do it in the next release. We'll need a way for users to opt-in to the new API.
I'm curious why the new `SQLite3` config is added? The existing `DB` object doesn't seem to use any database configuration.
Nit: I wouldn't put this in the `AppContext` class. This class should be used only from the `KestrelConnection`.
I think you can just do `csv.at[0, ..., 'Int0'] = 42`
This is a good opportunity to get rid of the "common" imports in the package, and move the errors package to the `pkg/errors`, and the `pkg/errors/apis` imports into the `errors/apis.go`.
This error message seems a bit odd to me. I would expect it to be: "Please enter a github repository URL, for example " "or a valid GitHub repository URL"
Should this use a `String` instead of a string? I don't see the reason for this change
Is it safe to do this in a defer?
I think I would call this `force` instead of `rerun`. `rerun` sounds like it's a boolean, not a flag.
I'd like to understand more about the use case for these bits in the error message.
I think this should go in `app/models/arel` rather than `app/models/table`
This should be inside of a `AS_IF`
I'd prefer if this was a separate function, so we can reuse the code.
This change seems not correct. The only change in this method that's required for this bug.

I'm not 100% certain that this is the proper way to handle this. We should probably have a helper that converts between number and number in the DOM and calls it.
Missing space after #.
I'm not sure if this is a good idea to have the loop in this class. I think we should only have the loop inside populateDataFromTraits if there is a trait. Otherwise, we'll end up with an empty array and the loop will be empty, but we won't be reading the traits.
@jonathanpeppers this is not a computed route but a computed route
Should this have an `event`, or would the events be enough?
This is not necessary for `Contours` (it is a list of tuples). You could just use an empty list instead.
Why do you change these?
This should have been added to `config_base`, right?
Is this a new change?
This is not a blocker but we have a couple of things: 1. Should these be properties instead of property definitions? 2. I would recommend adding `[Obsolete]` to the `<remarks>` section, so it will be easier to find the ones that are not part of the spec if they're not used. 3. Should the `IsEip365Enabled` and `IsEip3238Enabled` properties be moved to the `<remarks>` section?
This is a race condition, as it will never be disposed if `delaySource` or `linkedSource` are not used.
I would move the `(electionCommittee == nil && stakingV2 == nil) || ...` check to the `if` above and just do `if !genesisConfig.EnableGravityChainVoting || genesisConfig.GravityChainStartHeight == 0 && (electionCommittee == nil || stakingV2 == nil)` check. Otherwise we can keep the logic the same.
this file will be deleted in the next major release
I'm not sure if this is an appropriate place for this. I think it would be better to do this on the server side. If you do that, you should probably have the server call `app.CreateSettingsFile(provider)` before we call the function, otherwise the app would have to be rebuilt every time.
Why not just `list`? I'm pretty sure we want to have a single type of list, and that's what the docs say.
This is not a good idea. This will cause the user to have to restart the server and restart the localstack server.
why `is_being_called`? is it for `Call`?
Why is this condition needed?
This will be fixed by #9740
This is not used in this PR, please remove.
I would call this method `solr_search_builder` and add a deprecation notice that it's deprecated.
Why did this change?
This should be `None` by default.
Should we also exclude generated builds?
Why is this necessary?
`from string import ascii_lowercase`.
There should be 2 space indentation here.
nit: unnecessary whitespace.
I would use `MediaInterface`
I'm not sure how we would want to handle this config option. It's not really a feature, and I don't think we want this. We should only have the option if it's enabled. If you want to disable it, please make it a flag. We should only have a single way of disabling the API.
F401 'click' imported but unused
This seems wrong. We are not deleting the record. The record can be deleted from flowrecords.
This should not have `\u2122`.
The name of this test is not very descriptive, how about `test_parse_tile_params`, or just `test_parse_tile_parameters`.
Is there a reason we are not including the header here as well?
Why is this changing to 11?
nit: I don't think the `true` here is necessary
(style) line over 80 characters
Please remove unused import
nit: I would prefer not to modify the lines, but I'm ok with merging them if you prefer this approach.
Is this method used?
this is a bit unrelated and I'm not sure why this changed. It seems like the `test-tools` folder was not being used at all.
I think this should be sorted in the `foreach`
This is the actual bug fix for #3323.
Can we make the text translatable?
I am not sure if this is the correct fix. I think we need to change `labels.cpu()` to `labels.detach().cpu().numpy()` to avoid the copy.
I don't see any reason for this change, but I think you may as well use `.first` here
This can be removed.
Should be called HttpParser. We should also be able to use this as a base class for both parse methods
Why do we need the `assert` here?
This is an internal function, so it's not necessary to have it in BPF code.
This was wrong. The exception message was wrong and was wrong.
This is not the correct logic. If you have inputs that have sequence number equal to DEFAULT_LOCKTIME_SEQNUMBER then you will get a `TypeError` in this case.
I think this should say "if the data format is not supported"
I'd move this check after the for loop, since it is the last check.
Why do we need this route?
I think this should be `L2GasPriceOrbitAddress`. `0x4200000000000000000000000000000000` would be the correct hex address.
Why do we need to add this?
Why did you remove the `&& name != ""` check?
@wjrsimpson Can you file an issue?
Shouldn't this just be `hostnetwork`? Also, I'm a little surprised the `Wireguard` is a thing for AKS. If the wireguard doesn't have any host network traffic, shouldn't the `Wireguard` provider be AKS?
Can we add a note to the config description what happens if it is set false?
I think it's better to have a separate error here instead of warning.
Is this needed if you use the `getDataSource().getSQLDialect()` instead of `getQuotedIdentifier()` ?
This is a good change but it seems like this story file is no longer being used anywhere. I'd like to remove it and the one in `components/` folder
I am a little confused. Is `FUNCTIONS` used by the `#else`?
I think the `typeof` check should be `typeof vnode.type !== 'function'`.
Can we just call this hooks to be more explicit? `Finalizing a column, using the `.plot` object and the displayed object, and other plotting handles can be accessed via plot.handles.`
I would prefer `UserPreferences.isThemeAntennaPodTrueBlack()` instead of the hard coded value.
I'd suggest `:teacher, unique: true` to ensure that it's only for the teacher table.
Can we use `e.getMessage()` to avoid string concatenation ?
This is only called in the test class right? If so, can we just have the test method be `private` and make this package-private instead?
This should be in a finally block, right? If the client was initialized before this block, it wouldn't be available, right?
@kapilt this is where I am noticing that we are skipping the main association.
Can you add a line break?
I guess this should be `org.glassfish.gmbal.ManagedObject` instead.
This is a bit weird
The `mocha callback` is a bit confusing here, since it's the same thing as a mocha callback that's passed in. It's probably worth adding the word "callback" somewhere so it's clear that this is a mocha call and not a mocha callback.
This is now `SpendingAddr` which is a subset of `EffectiveAddr`
I think the naming of these methods is confusing - they're not really related to the media router and are related to the media router.
Why is the import necessary?
I think that this is not needed
nit: I think it'd be better to call it `ICEBERG_FLINK_JOB_ID_DESCRIPTOR`. It makes it a bit clearer what's different.
I think you want this to be a function rather than a partial, as it will return immediately if the filter fails.
I don't think we should be resolving here, since we already have the db object on line 231
Is there a reason this needs to check for flatbuffer fields? Should this be `if (nested && field.nested_flatbuffer != nullptr)`?
I think it's fine to leave this here, as it is.
Why is this change required?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
can you add an assert for `kser.argsort()` here? It's a little weird that we sort on the `argsort` but not `sort_on` (as in the test above)?
I know this is just a refactor, but I think this should be `new PhysicalLocation[]`
This should be 1e-3
Can we do this once at the beginning of the loop instead?
include CommentsHelpers
This class is only used by the test, so we should not be exposing it
Should we use `Email` here? I think the label for the email group is `Email`.
Can we use `.filter` here? It's faster than `reduce` and also faster than `map` and also makes things faster.
This test was not actually passing in master because it wasn't relying on `dangerouslySetInnerHTML` in React.
I think you need to change this to `private` for testing.
I'm not sure why this needs to be in this commit?
Is this a bugfix?
Is this necessary for this PR?
I'm wondering if this should be `Status` instead of `phase`. It feels more consistent for the API to use a status, but that can be done later.
This is a bug fix, the original test was not correct.
This looks like a bug, the `:mlat` and `:mlon` keys should be aligned, so they should be `:latitude` and `:longitude` instead of `:latitude` and `:mlon`
Shouldn't you use the `ProductAssert` class here too?
Shouldn't this be `> 0`? Otherwise, we are not sure what the user will get if they export metrics to their local file, but I don't think we will.
Is there any particular reason you are using `self.assertIn`? I would expect that the `assertEqual` would have failed if the `details` key is not present.
I think we can remove this constructor.
What happens when the client doesn't provide a width and we're setting it below?
Why is this change needed?
This seems to have the same indent issue.
I think we should keep the severity as SUGGESTION. It's a user-facing warning that's too much detail.
This is a little awkward to read as a sentence. I'd suggest something like: "This means that the number of records below may not match the sum of records shown on the usage dashboard. For example if one of your users created a plan in October and then removed that plan in November, it would have been included on the usage dashboard's total for October but would not appear in the list below."
This doesn't belong as a field on a spell. You could have a property on the Spell that has it set, then call it here.
This should be split_into_nhot_view
We need to make sure to use `\n` only for new lines, and `\n` for the string in the end.
I think this should be `pausing` instead of `pausing != ""`
This should go into LoadFrom.
why is this change necessary?
I don't think the build package needs to be in the main.
This line and the line below is not aligned correctly.
Isn't this a leftover?
Why is this test case different?
Why remove the `list` here?
this is a change in behavior that was introduced in the latest commit
This can be a one liner
why not just make it a pointer?
Should this be a `RuntimeException` ?
This was moved to the `testinfra` module.
I'm not a fan of using magic numbers in code that are hard to follow. Can we use a constant for this?
Please don't remove this header.
Why are we removing these?

I'm not sure this is a good idea. It will pop the main class if `mock_main` is `True`.
This is not needed, since we are not using `--verbose`.
Why not just `head.MD`?
I'm not sure this is necessary, I think we can use lodash from `lodash` now.
Please remove this copyright
I'm not sure this is correct. If we get here we are not going to be doing any IO, right? If so, we probably should add a try-finally to handle the disposal. I'd also like to see a test where we're doing the readstop. I think it should be possible to get around a race condition with the handle being disposed.
This is a bug, but I don't know how to fix it.
I don't think we should mention this in the help text. It's a generic command that can be reused for other commands. Instead we can say "Revert snapshot"
nit: `taskId := strs[len(strs)-1]`
This is probably fine, but I wouldn't expect a bunch of different test cases here. I would expect a test that checks that the query doesn't get executed in a loop and that the results are not in the same batch.
Why is this change needed?
This is a bit of an odd message - it seems to me that the attributes of a function call have are being passed in in the different order to the function's definition. Is this a typo?
We should probably move this to a `@After` method, since we want to hide the dialog.
I think you should call `host.second->toHostString()` here and use that to get the host string.
I don't think this will work. You should use a function that returns `""`, and use `always` in your example.
This is the main fix. The whole fix.
I think that the `validation` package should be renamed. `validation` is a bit confusing.
This should be `if (opts->has_bool("use_tarball"))`, as the default is `true`.
Why do you need this `send`? I'm not seeing it being used anywhere, and I can't find it used in the spec. Also, I'd expect `fail ParamRecordNotFound unless @parent` (or `fail ParamRecordNotFound unless @type`) to be enough, no?
The `op->name` and `op->fs_chunks_size` are already printed in the `flb_debug`, so I don't think this will be useful.
This is only used for the index, right? So I think we can just put it in `Index.java` instead and have a single index for the table?
I don't think this should be a method. This can easily be a static function.
I think we don't need to pass escape as a separate parameter.
This should probably be `null`
I think `uint` would be a better type than `int64`. Also, the size should be an integer type.
Shouldn't this check for error and return 0 in this case?
This should be translated, not raw, right?
This is an actual bug, the rest of the code should be changed.
Why is this not a set?
This test was failing for me.
Isn't this the default? I think we need to use `getDefault()`
`Collections.emptySortedSet()` is better?
`is_diff` is not used anywhere in the code.
I'm not sure if this is needed, since `tenacity` is installed in `setup.py`.
this change does not look like it is related to the PR
I'd prefer to not have a default in case it's null, just to be safe.
I think we should clear the profile ID selection when we are creating a new profile. I don't have an alternative suggestion, but we may want to think about this further. I would think we'd want to set the profile ID to something unique.
why is this removed ? I think this would be a breaking change
Is this TODO for later?
Why create a new object here if we already have a default value?
I don't understand this method. Is this for the notification? If so, why is this method needed?
This file should not be updated unless it is a new file.
this test is not correct as you are not using the data reference anywhere. it is only testing the cell value
I think we should leave it in here, it is not needed any longer.
Should be a `static_assert`
Is this a bug fix, or was it a bug before?
We don't have to worry about the encoding order here since it will be a lot faster in most cases.
Shouldn't this have a name that is more specific?
We need to make this configurable via environment settings.
I guess this is a leftover?
This is not the best way to do this. This is not a sanitizer function.
This config is used only in tests and not in the integration code.
Is there any chance that the Task is already awaited and this line would throw?
It's not a good practice to have a single parameter in a method.
I'm not convinced that `ectx()` should be the owner of this `SessionState` object. I think the `Session` should be part of the constructor, and we should be able to get `ectx()->session()` from `ectx()` directly.
Can we use the `Libsqreen` version?
I think this was just an optimization and I'm ok with it. The old approach doesn't look good to me.
I'd prefer to keep this as it is, and have a default value in `init`.
I guess we should rename this variable to `routerByDomain`.
We can't add new deployments if the merged deployment already exists. This should always be true.
This should not depend on the virtual node. This is a bad idea.
I don't see the point of this class, we don't actually test proposals in this class.
@dclarizio I am not sure what you think about the condition here, as I would think it would be true for all cases but the `skip_session_tracking?` condition.
This should be a warning, since it is not possible to run `load_annotations()` without `load_data_infos()`
I think this is not a typo.
I would just inline this, since it's a single expression.
Is this a good idea to import from caffeine or should we use Guava instead ?
Why is this necessary here?
This should go into the `Scorer` interface.
This is a regression. It has no effect for the momentum optimizer.
I'm pretty sure the join table should be `diary_entries_subscribers`, but I'm not sure what.
this is not needed.
Should we use a `id` here?
@smarterclayton @malgorithms do you have a strong preference on using privileged capabilities for docker?
This field is no longer used and can be dropped.
I wouldn't bother including `jsonschema==3.*` if it's not needed. I think that we should remove all of it.
I think we need to keep this line. I am not sure why we have it.
nit: this can be private.
I think it's more common to use the `auth-delegator:service-account` format here instead of `serviceAccountName:vault`.
Should we use `of()` instead?
I'm not sure this is needed.
Why are we removing this?

This package is now just the `common.Subscriber` so we could drop the interface altogether.
I'm a little confused here. Why are we not checking against the dashboard here?
@begoldsm I am not sure this should be `db.statement_type` or `db.statement_type`.
I don't think we need a wait_for_event here. The app is already started, it is not needed to call dynamo_thread_init in that case.
This is a bit of a misnomer - `get_lambda_name` sounds like you want a name from an ARN, not an arn.
This will need a new type for `applicationVersion` to be passed as an option, otherwise we'll end up with a new `NewSender` method for each metric.
I don't think this code should be duplicated in the controller. I think this function is not called anywhere
I think you need to `send` the value to the initializer, and use `@client.read` instead of `send(:client_options)` in order to use the `read` option.
Is this necessary?
This is not used.
This should be appB, not Svc
Should we have some tests to verify that the user is set correctly?
this function is called in multiple places now, can't you move the logic to a method on block?
Can you please move the assert to the top of the function, so that we're sure it's called in all cases?
I don't see a way to do this without using a pointer.
I'd suggest using the full namespace here.
This is a test change, but I am not sure if it is a good idea to do this. The `test/web` command is executed by the `web` package and `docroot` is not used by any other packages. The test would pass if the `web` package was called by `web/index.go`, but the `docroot` folder is removed in the `app.Exec` command. I'm not sure why we are using `web` for this test case?
I don't think we should make these public
Why did you move this here instead of in the `server.go` file?
This can be replaced by `return toRawKey(Arrays.copyOf(value, value.length + 2));`
This is not a valid response type, as it's the response to a call. This method is only used by the API and should be removed.
This file should be removed.
This is going to be deleted
I don't think we need to have the word label in the help text.
`@since` tag for new methods?
Isn't there a more direct way to do this without using `gettext`?
We need to have this as a `IReadOnlyList` to support multiple servers at once.
Isn't this redundant?
@karimJWP This is the only one that is not used anywhere. Can I remove it?
Is there a specific reason to do this, rather than just returning an error code? The caller could check for that. I would suggest to use `ExCheckError()`.
Why is this needed?
This should be `datetime.now().strftime("%a %l %p")` (and the `e` catch block).
I wonder if it might be better to use a `nil` default here and then do a `.to_json` in the `update_node` method. It might make it more explicit that we don't have to explicitly check whether the user passed an argument.
This should be removed. It's not a useful package.
This is an odd place to put this. I think it's fine.
This is not correct, it is the key for this PR
I don't understand this. Isn't it supposed to be a boolean?
I don't think this change is necessary. `module_name` is always a str. `type(module_class)` will work as expected.
I think this line can be removed
This could use a docstring
I think we can remove this file
Remove this line.
nit: can we add a `assertThrows(...)` to make sure that the error message matches what we expect?
@joshdholtz this looks like it was duplicated in the formatters, but I don't see a good reason to keep it in here.
This command should not be changed.
Should this default to the value of the `openvpn.price-gb` flag in the config? I think it should be `7000000` to make it clearer.
This is now handled in `__init__` and `_init_tablerow`, which is already checked in `_init_tablerow`.
The variable name is now misleading, it should be "tradePartnerItem".
I don't think this will work as expected. We need to be able to test the schema for all the go files.
I think this function name is a bit confusing. It's not stripping anything but the vendor name.
I think we have to keep this code in the `lang` file, since we don't want the `plugin_missing` message to show up in the `lang_plugin_missing_error` file (and the `lang` file will not be available in all languages).
Why was this line removed?
I'd like to see some tests for encrypter
This can be moved inside the if, no reason to register a rule if there's nothing to do.
Why are you using `$`? Is there something special about this?
I don't think this works. If the file is already deleted, it will move the notebook.
nit: I think it would be more clear to name this `options`
I would call it `$everykey`, as we already have a `scope` property
I don't see the value of this method, it is not used anywhere.
`fullName` can be removed here, since it's no longer used.
Should we keep the log at info or trace?
This was just not used by the API, right?
This should be removed, right?
Align the elements of a hash literal if they span more than one line.
We can remove this, I think we should just print out the capacity in the log.
I think you need to add the lock to the `for` loop below.
This is called in the try/catch block, so it's probably better to remove this one.
why not `bundle.getString(DB_NAME, null)` ?
@cclauss This is a very specific function to handle the text change.
I think this is not correct. If the package name is the same as the local name, you will save the sameNickname for two different packages.
@jakirkowski I'm curious why we have to change this?
Why do we remove this? Isn't it used somewhere?
I don't think this is correct - this is the IPAM plugin name that will be used for EC2. The plugin name should be `ec2ipam` instead
I'm curious, what's the reason for wrapping the model in an `WrapFunction`?
This is a bit ugly, but it's probably a good idea. I don't like the fact that we're running this in two different places.
Is there a reason for removing this annotation?
This should be `... IP address %v failed. Please specify a valid IPv4 or IPv6 address, or specify a port number.`
Can you move the ';' to the previous line?
I think we should keep the original name here as well.
why the change?
Why not just remove this block?
I think this could be removed.
I'd prefer to have a single method to get a list of addresses and then do this logic at the beginning of the function. It's easier to reason about when the code is written that way, and also allows a more generic way to set a list of addresses.
Is this used?

I think that `required = true` is a bit confusing, because `@RequestAttribute(name = "name", required = false)` is not enough, because the name is required in this method.
We can simplify this if-else to just `a.sum += math.Int64.Sum(vs)`
I think this should be an exception instead of NPE.
I don't like this. I'd much prefer if you used `dom.removeChild()`, which does this indeed.
Why is it necessary to close the connection if the request fails? I don't think it's necessary here.
This seems to be a copy-paste error from the secret validation, so I think it's a good place to define a default value for this field. Also, is there a way to add validation for the encryption field? If so, then maybe a `omitempty" default:"nil"` would be nice
@dellis1972 do I understand correctly that the samples were updated for net5.0 or net6.0?
Can this be `const auto&` instead?
`infer_kernel` and `task::clustering` don't use this namespace.
I'm not sure what this means...
Nit: "with different color layouts"?
Is this a new feature or a leftover from another PR?
I'm wondering if it is better to add an argument here to make this a list of numbers.
Is this a new type?
I think it might be worthwhile to add a note about how to use the `None` option, to make it clear that it defaults to `None` and that there won't be any keyhints to show
this is just a test that was broken before. `getPrototypeOf` should return `Object`
This is a breaking change, we need an option in the future. I think the only way we could get here is if the user has specified `IgnoreAddingMapKeys` and the user didn't specify `IgnoreAddingMapKeys`.
I'm thinking this is a little misleading because it will be a step for every test. How about something like `step_options` and `step_name` and then the options will be passed to the `step` method?
Is the name "Status" intentional?
helper 'rails/feature_flags'
`return (o instanceof Date) ? new Date((Date) o) : o;` ?
Why are we aligning here?
Why not `BooleanDefaultFalse`, like we do for the other settings?
Why not just use `@role.set_access_level(access_level)`?
I would prefer to leave this one as-is, but leave the other one as it was, and leave the copyright statement in the header.
I'm assuming we can run this with `sudo`? I'm wondering if we should just kill this and use the existing docker image instead of a reboot.
I think this needs an `inverse_of`
I think the tunnel is leaked when it was destroyed
This should not be changed (the line ending should be changed too).
Why this change?
I don't think this should be removed?
Why not use std::unique_ptr<MMFFAromCollection> ds_instance(new MMFFAromCollection(nullptr)); here ?
This seems to be a bug, the version is not actually used.
This should be 7.0.3
This is a little hard to read. Could we move this to a constant?
I don't think the new String ctor is necessary
This will not work for docker, since you're using the same port as containerd.
Why do you change the width?
`getFloat` should also be added to the union.
I think this should be renamed to `getQuantifiedProducts()`
This is the only change in this file
Extra empty line detected at body beginning.
This was not necessary because `zeros_like` is a no-op when passed in a Tensor.
I think we can just remove this line now.
This was a mistake.
Why remove this?
Why not just remove the old test?
I'm not sure about the id attribute - it might cause a collision, as we're using it as a class on the `<input>` element.
I'm not sure if the `(true)` is really needed here.
This should be a jquery event, no?
This flag seems unrelated to this PR. Can you please create a new PR to track that?
I would suggest to move this call to `configureNativeLibs()`
This should be imported at the top of the file
nit: `@return {!Builder} a self reference.`
`const std::unique_ptr<ebpf::BPF>& bpf;`
Please move the import down to line 16.
nit: can probably move down to line 20.
I would recommend adding a `<summary>` tag to explain the default value, and then to say that this property should be `null` if the value isn't specified by the DB.
Why do you remove these interfaces?
Why is this removed?

I don't think we should be using P here, it's a user facing feature.
I think this is not required.
Why are we changing the string here?
I think it is better to replace the foreach loop with for loop.
Isn't this going to be a bit too large?
Please don't change the formatting of the code.
Shouldn't this be the `public` member of this class, rather than the `RoomHandler`?
Is it possible to add a `.tsconfig.js` to this file? I don't know what `.es6` does.
I'm not sure about this list. I think we should just add a function for the other functions.
This was the bug.
This is just an example of why we had the `QColor` constructor that used a `const QVariant` to represent the colour of a rectangle. I think the only thing we can do is to have a function to do the conversion to `QVariant` and call this function from the place where the conversion is done.
I think this is an unintentional diff. Please remove.
This seems redundant with the `if` above, since it already does that.
I think we need a test to ensure this is correct.
I'm wondering if we shouldn't set Sniff to true for now.
Can we use cd.SourceSnapshot.String() instead of cd.SourceSnapshot.Get()?
This is the only place that needs to be updated, but it's not the correct fix. This code should probably be updated to work without this.
I'm pretty sure we don't need these.
I'd prefer to use an `else` clause here, so that it does not have the side effects of the else block.
`attr_value['string'] is not None`
Why do we have this?
Should this be `WaitForExit(1)`?
nit: missing copyright
@johnp-matrix Are you OK with this change?
Why not `func3 = lambda *arg2: ...`
@jeremyjordan this line seems to be the fix to the issue.
This is the only change that I am not sure I like to have to import it here.
This should probably be removed.
This is the main fix for the bug.
I'm curious about the purpose of this change?
I wouldn't include the project id if the table id is already part of it.
nit: this can be a single if, no?
I think the original was correct.
This should return `GLuint` instead of boolean.
I don't know if there is a way around this. I'm not sure what the correct way to do this is.
Why is this necessary?
I would prefer to keep this constant as a constant and use it everywhere in the code. I don't know if we need this constant in the code.
I'm not convinced this is the right place to put these env vars. This is a very specific setting, and I don't think we need this for any other environment. If we do need a different approach, we should probably have a separate env.
I think this is not necessary
Shouldn't this be a `switch` statement instead of a nested `if`?
I don't think this is right - if multiple files are specified the output will be a file with a different extension. I'd rather say that the option should be named `--multiple-files` or `--file-glob`, but not sure if the option should accept multiple globs.
Why do you add this? I think it would be best to keep it consistent.
I think the default should be `1s`.
Should this not be `Timber.e` instead of `Timber.e`?
The `"""` at the end is not needed
I would rename it to `signerID` to avoid any confusion.
I'm a little confused, what does the `!opts[:localize]` do here?
I think we need a newline here
`const char *ns,`
I think we can remove the `scrolling.bar` setting.
Shouldn't we use `sys.getfilesystemencoding()` here?
Why do we need this interface? Can't we just have the `OnResponse()` method?
This is a breaking change. We should leave this code and mark as `[Obsolete]`
This should probably be in a new PR.
Isn't this already handled by the `KeyChain`?
this is not a warning, it's a debug statement
@kapilt I've changed the name of the localstack artifacts repo in the PR. This will be the URL for the `stepfunctions-local-patch` tag to point to the localstack artifact.
This should be `if (message.getRemoteId() != null && SalesforceSDKManager.hasInstance()) {`
This is a bugfix?
@QilongTang @jonathanpeppers I think we should do a `if (!result.Add(thatItem.LibraryKey))` here. Otherwise we're adding all keys twice. This is what I was thinking of, because if we have already seen a new key in the list, then we would have added all of them again.
This should be in a new `HelperFunc`
This should probably be `make(chan *model.ReportableCommand, 1)`?
I think we should import this from `lru_cache.py`
Why is this needed?
Why did you change this?
This should not be necessary since the `testinfra` test is not run when you don't use `--v` (the test infra does not have a `v` option)
I don't think you need this. You can use `time.Second * 2`.
I think it's better to rename it `mailPort` since this variable is used for both mail and smtp

You don't have to check this, `is_array` checks for the correctness.

Nit: I would rename this method name to reflect the fact that it returns a server. I think that's not the convention we are using in this codebase. I think it makes more sense to have a more generic name like `GetServers` or something similar.
Why are you removing this?
I think it would be better to add `textarea` to the global namespace
Why is this change necessary?
nit: revert this
This is not ideal. The only way to check if the active subscription is active is in a `recent.each` block and return if not. This way the user can see all the subscriptions.
@jlsherrill I don't see the value of having a separate template for this.
I think this should just be a `boolean` instead. `get isClosed()` is a getter for a Realm, and it is always going to return `false`. I think it makes more sense to return `isClosed() || isInTransaction()` if that's true
Why do we need to remove this?
I think we should use the same name here as well (get tipset and state root from the store).
Why does this need to be a static field? It's used in two tests.
Why is this line removed?
Why not use `std::make_unique<rai::transaction>(environment, nullptr, true);`
This function is called only once and the return value is ignored, so the `isHidden` variable is never used.
Why not using static imports?
This should be moved to line 348 to match the other flags.
I wouldn't set this to a higher number.
Why linked hash maps?
These should probably be defined at the top of the file.
Why do you need to change this? The range is not valid, if it is the range of the group you want to check for, it should not be invalid.
I'm guessing this is an accidental change?
This is not a valid test.
I'm not entirely sure about this - it's a little unusual to trim whitespace, but we can't do that without breaking the public API.
Can you please move the try/catch into a function? It is a lot more complicated than just checking the return value, which is not a good practice.
I don't understand this change.
Maybe a bit more detail here about what the node represents? It's not clear from a user's point of view what this represents.
nitpicking, but this should probably be "recieved"
I think we should add `metricNamespace` in the `InitOption` struct, as well as in `NewInitRes`. Then we can use it here as well
This looks like a bug to me. `requestPageTokenName()` and `responsePageTokenName()` should be called only on the `handlePage` method.
This method signature changed, but I don't think it's necessary. `configs` should be enough.
I'm not sure if we want to add `ASSERT_NOT_NULL` or not. If we need to add this, maybe we can remove the `!`? It seems that the assert should just be removed.
I think this should be `return 1;` instead of `-1`.
I'm not sure if it is better to have `ZMS_PROP_USER_DOMAIN` in the config, since it is only used in `UserDomain#getDomain()`?
This seems to be a very specific test case. I'm not sure it's useful to have here.
I wouldn't change this. It's a breaking change. I think it's fine to just make it a feature.
Can we use `isNumber(xyRatio.x)` here too?
This trait should only be applied for `approvers`, not `proposals`
I'd prefer `GAUGE` and `COUNTER` to be in the same group, to keep them in alphabetical order. (And `COUNTER` comes before `GAUGE`.)
I'd use `numFmt` here, since it's a single component.
This is a bit misleading, since it is not actually checking the signature, it is also checking the signature of the validator, which is the same as the default.
We could use `__` instead of `_` as we are using the `_` for translations.
This isn't used anywhere?
I think this file should be deleted.
This is not a correct approach, as if we are using gas price from the account, we should return an empty gas price. This is not the best place for this.
I don't think we need a new type for this?
@jackfrancis I think we need to update the `NewChunk()` method to take in the `dataItem.Stamp` as well

@danmosemsft I'm assuming this is the only valid identifier, but I think it is fine
This was actually a bug.
@martindurant @djkirkov, I think we should add the `comms` param for the `jupyter_bokeh` extension. I would suggest to add it to the `jupyter/__init__.py` as well, and then use it in the main `jupyter/__init__.py` file.
I think this is not needed, right?
File is not `goimports`-ed (from `goimports`)
I would prefer to have this on a single line. It's easier to read when the type is obviously not a type.
I think this can also be a `long` since it will never be 0 or negative.
I would use f'{type(dataset.CLASSES)!r} instead.
I think we can remove this now.
This doesn't need to be exported
Should we use `ContentType()` here?
This error was never hit because there was no `checkJUnitDependencies()`. The `if (ss.getCompileClasspathConfigurationName() != null) {` block is now unreachable, since there is a `hasDep` check.
This doesn't look right - the key needs to be prefixed with the operation, not the name.
This is a problem, we don't close the session here
Is the nil here intentional?
This change is unrelated but I noticed the previous code is more readable than the original code.
This is going to return `nil` if there's no email.
This change is unrelated. Can you please remove it?
I would suggest to use the new keyword argument `create_window_if_needed`
I'm not quite sure what this is trying to achieve - if the user is not a user of a procurement then the purchase button is disabled and the user is not a user of the procurement. I think this should be `check(:purchaser?, "Sorry, you are neither the requester, approver or delegate")` - if you are not a user of a procurement then the user should not be a procurement.
This should use `getattr(network, 'dynamic_fee_estimates', {}).get` instead of the `config` module
I think you need to check for nil here.
I think we should not expose this in the internal API, it's used only in a single place. We could expose an `Alloc` method on the interface.
This is a bug fix
This should be nyctaxi.csv. We want to have all the data in the same directory
I don't think this check is correct. `_added.length == 0` means that the file is empty if the file is not loaded, which doesn't make sense.
nit, this message doesn't really make sense. The user has to do something like "Skipping setting file manipulation".
Why is this necessary?
I'm not sure about this, but this line seems to be causing the linting failure for me on Windows.
throw new IOException("Could not copy all bytes of " + from.toPath());
I wonder if it would be possible to have a test for this?
This log statement should be removed as it is not needed.
I think this should be a noop, no?
nit: I would put these in separate groups, but this is fine as is.
Is the panic really needed? The test is not really checking that the Outbounds is empty. It should just return an empty list.
This is not correct. You need to set the values of all the fields to the values of the slice. If you have a value that you have to replace then you need to use it.
You can just use the `WriteString` method here, and you won't need to call `c_str()` again, right?
I think it would be good to check the feature gate is enabled before doing this.
Can we add a check here that the value is not negative?
We don't need this check since it's in the `Target` method
I'm not sure what `kbp_record` means.
This can be a simple `List<Pair<U, R>> zipWith(Iterable<? extends U> that, BiFunction<? super T, ? super U, ? extends R> mapper)`
nit: revert whitespace changes? (same below for all of these)
Can we just set `c.mcl` to `MAX_CONTROL_LINE_SIZE - 1` instead of the `if` statement, and then set it back to 0?
why do we remove DECIMAL_LITERAL?
I think this is already imported in the `server/` package.
I don't see this test case change in any way, can we remove?
I'm pretty sure you meant to include `.exe` here.
Why is this being removed?
I think it might be worth testing for the case when there are no doc lines.
This will be fixed once #5322 is merged.
Is this a good idea? The server will now exit after it gets a chance to shut it down, which seems a bit strange. What's the difference here?
Should we log an error if this is negative?
This is a little confusing, how about "machine set must specify platform for compute machine sets"?
This text is a little misleading because it's the label for the mouse setting checkbox.
This is the only change I can see in this PR, and it's not really related to the rest of the changes. I'm wondering if it makes sense to have a separate method that returns a Uri instead, and then use that to call this method on both of these cases. It's not a big deal, but it makes the code a little cleaner.
Should be an `assert`.
This seems like an odd thing to have on a line chart, and I don't really know how to do this in other places.
Can we use `BitUtils.bitLength`?
This seems to be missing the `const`
I'd suggest to update the `dnsZone` status here, so that it's clear that we have changed the hosted zone ID.
This is an unrelated change, right?
`kk` here can be a `str` too.
nit: this could be private?
This should be `instance_data`
I would like to suggest to use the same prefix in all the functions, but for now this seems ok to me.

This looks like it could use some indentation to be consistent with the other forms.
Shouldn't this be `PgreDataSource`?
This is a breaking change - we cannot change the method signature without breaking binary compatibility.
What is the reason for this change?
I think this is a bug that needs fixing in the test, since we don't have any role attributes on the meta roles
I don't think this is a good idea. We need to write the log file in order to get the log files. We should use a file that is named `config` to store the log file.
space after if
Why does Unwrap() exist? I'm not seeing it used anywhere.
nit: can we use a more descriptive logger name?
This should be true by default and false by default.
@greg0ire I guess this was a mistake :thinking:
Should this not have a `w3c_` prefix?
This is not needed, it's only the `await` method.
This should be `missing-any-param-doc`.
I don't think this file needs `.go` in it. I'm pretty sure this is not needed.
why is this being removed?
This should be moved to `wayland_util.h`
This is a bug. If `client.getLocalPlayer()` returns null (because `client` is not null), `getWorldLocation` will return an empty string, which is the case. I think this change should be reverted.
This seems wrong. Shouldn't it be -1 or 0?
This looks a bit fragile. Is there any chance we'll end up having a different value for the locale that is being requested?
This is not the same as the previous code. It will be `true` when the first item in the selectedFiles list is true.
This is the only place in the code where we need to write the header and flushing the flusher.
This is probably not what we want. We need to hydrate the paramcache.
I think the description is incorrect here.
This should be `bool`
This seems like a good candidate for an `is_supported_clang_version` helper method.
I'd rather we just use the same logic that you have in this line.
I think you can use the `bytes.Buffer` method here.
This should be `travis-internal-ruby` now
I would rather not log this at info level. I think it would make sense to just log the `_description` key.
We can remove this.
This should be named something more descriptively, like journalPausedFromConflict
I think we should return error. IsRetryable is enough.
This doesn't make sense.
I would suggest removing this check and let the user choose a default category. The default category will not work as expected when the feature is enabled.
Should this be a `ChainNamePrefix` variable?
I'm not convinced about this, as I don't think the wallet should be aware of the account. I think we should make the representative available when opening an account, and not when opening the account. This is a bit of a pain, though.
We can use `global.googlesitekitBaseData.isWP5.0+'` to test if it's set in the environment.
@jakesmith Is this correct?
nit: space between while and (
This is the first time we have `@param {Object} [options.session] The session to use for the operation` I think we should remove that from the params
I'm not sure what's the difference between `Security` and `TLS`?
`create_dist` is not a valid executable.
Why not make this a call to `this->SetTarget(*this);`? I don't understand what the point of this change.
I think this should be removed. The copyright header was added in a recent change by @lamblin and it seems that the copyright is not used anymore, so this file should not be deleted.
This is the same as the function in `src/utils.js` but with a different signature. Should this be refactored to use the new one?
I don't know if we have any tests for the new `number_to_currency` method.
I would prefer `expect(current_examples).to match_array([example1, example2])` here.
We need to use the new rails `ActiveSupport::Inflector` here.
This is a very low value, but I would have used 5, and I'd be surprised to see the number of retries chosen. I'd also prefer to see it be configurable.
I'm not sure this is the right fix. We should be using the `MoreObjects` from Guava here, which is a more modern java package, not the `common` one.
nit: can we move the `mock` import to the bottom of the package?
Why did you change this?
This seems like a good change - but I wonder if it's a breaking change for anyone using the old code.
Shouldn't we be using `process.argv[0]` here?
Is this related to the issue you were referring to?
I don't think we need the `BACKOFF_CAP` field.
Should this be `OpenBucket`?
This line is unnecessary
Is this needed?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is a bugfix, because it is testing the content window's `axe.configure`.
Why does this rule need to implement `ValidationChangesImpact`?
This should be a change to the controller, as the type of the kresource is changed
Should this use `MvvmDictionaryValueConverter<TKey, TValue>`?
Should be `auth_path_123`, I believe, but I'll fix it after merging.
I would prefer if this was a separate test case, as we are not checking if an error is returned.
These are not needed, as they are already defined in the `Configuration`.
Should this also return the value of the command?
This is an API breaking change - we need to add a new API for this
I wonder if it would make sense to have a `recordRunTime` function that does a `defer recordStepTime` and `s.wrapRunError` to call that one in `wrapRunError`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
We don't need to import json. Just `from .json import *`
nit: can this be a single `if`?
I would add `using-final-in-unsupported-version` as well to make sure we're not disabling it in future
I think we should just bump this to a specific version of pandas
Why do we need this extern?
I think you can just remove this field and use the new `SortOrderId`.
I think this should be `ledgercore.NewStateDelta`, since we are using the same structure as the original state
Why do we need to static init this?
I wouldn't bother with a benchmark category if you're going to run the entire thing twice
This one can be removed
This was causing the test to fail.
This is the only change. It's not related, and the method name is a bit confusing. I think we should either rename this method or make it `select(Select...)`.
Can you rename this to be more descriptive? Maybe `isBoostBySynonym`?
I think this should be `environment_variable_string`
I'm not sure if `SecretPrefix` is necessary here, but if we're not using it for anything we could just leave it unset.
Shouldn't it be slaveOk ?
Should these be pointers? I don't think so.
This is wrong. The command doesn't do that, and we don't want to allow it to do that. You need to add the `--count` to the command runner and have it take `repeat` or `--count=count`.
File is not `goimports`-ed (from `goimports`)
Why are we using `UInt` here rather than `ULONG`?
I don't think that `.first` is necessary here.
I assume these are not needed anymore
this spec is not testing anything, it's testing that it returns `42` and not `0`.
nit: I think this should be maxMessages
Why change this?
Can you test the error case please?
This should return a pointer, so it can be unlocked in the defer function.
Why is this change needed?
This is kind of a weird test. Can this be named something more specific, like `.by_name`?

Please use `use \Magento\Framework\Exception\HandlerInterface::handleException` instead, which is a standard library for all PHP error handlers.
Why do we need this?
This should be in separate import block
Can you explain why this is needed?
This is a bit ugly, but I can't find any better way to do this.
I think we don't need the null check here as the `DiagnosticSource` is not null and this is not an exception
Can be `private static final`
Please revert these changes. The version number in 1.4.0 was correct and we are not updating it.
Is it really needed?
I don't think this needs to be a dependency since it's not used anywhere? (and I don't know if there's another place that needs it)
I would expect the tags to be the same type as the tags list, and the restic package is an interface for this
Can you explain this a little more? What are these delays doing?
I think we should use `true` here, since we're not using the tls connection at all, and we don't need to pass it into the dialer.
I wonder if there's a way we could avoid this dependency?
This is not the right error message. The certificate request may be invalid.
This is for web3
why do we need this? it should only be used for sending the batch action event
We should use a different logger for each of these, not just one.
I don't think we want to change the defaults. This is a change in behavior, and it is not consistent with the rest of the app's logging API.
why the change to this line?
This is wrong, this imports go-ethereum imports the same way as the others.
This will only work for HiveMetastoreClient. I think that we should add this check in HiveMetastoreClient as well.
I think you want to remove the trailing colon here as well.
this is an error, right?
We should add these to `.gitignore`
nit; this should be `Filters` not `Interceptors`
I don't see this being used anywhere?
This is a breaking change, and I think it needs to be addressed in the changelog (if it's still relevant)
This seems a bit odd. Why not use a different writer?
This is an unrelated fix.
I don't like this. The `logDestination` is a global variable which is set at `caddy.Init()` and then never used again, which I think is not what we want.
I don't think we should be adding this to the core.
I guess this can be removed now
Should this be using `StartsWith` instead?
This is the default value for the Breakpoints prop.
This will break the existing behavior of VUID. We should check if we can't find the binding with descriptor type VK_DESCRIPTOR_TYPE_MUTABLE_VALVE in `VkDescriptorUpdateTemplateCreateInfo` and skip if not.
I think it is more consistent to call this `default_tablet_tool`
I think this is the same as `OpenAire.default_funder = "H2020"`, but we need to make sure we set the same default for all these new projects.
I think we need to add routing as well to the `ipfs` package. I'll make a patch to fix this up.
@cpcloud @tchaton I'm assuming this is the only file you need to update?
Shouldn't the order of these be changed to be alphabetical?
I think you can just use `import dockerprovisioner as DockerProvisioner` here and then remove all of that code
This should be just `string` (without a `s` at the end).
This import should be at the top of the file
I think this should stay as {@link #getKind()}
I'd rather we use `<svg width="13px" height="9px" viewBox="0 0 13 9">` than `<polygon points="5 7.293 1.354 3.647 0.646 4.354 5 8.707 12.354 1.354 11.646 0.647">` because we want to make sure the icon is the right size, not the left size.
This should be `const`s.
Why do we need to truncate here?
this is not a warning, it's just info
`unixSecondsToDateTime(int64_t)` is a `Time` method. It should be a `DateTime`.
I think it's better to have this inside the `if` block, as the error is checked in the `if` block below.
This should be removed as well.
I don't think this is used anywhere, is there something else in the codebase that requires adding it?
I think the `get_role()` check should be done at the very end of `init()` and not at the beginning of `run()` (which should only happen in the `generic_data_reader::init()` call) so that if someone calls the `fetch_data()` method, it wouldn't be called again.
This line should be removed. The test is failing.
Why not just use `GENERATE` directly?
Line is too long. [85/80]
I think we should keep this at `INFO` level, it is a bit too verbose
I think this should be `http://localhost` since it can be a local port.
This import looks wrong to me.
We have an `Address` type, so this should be `"AccountActor"`?
I'd like to see us multiply the current runtime ticks here with a number of ticks, so that the player does not get into a huge scale
I think it's fine to just do `!DR_only && check_disp == TLS_DCONTEXT_SLOT` here, but I'm not sure if that's the best way of doing that.
why remove this?
@jolelievre can you explain the reason to change this to display date?
Is this really needed? I don't think it's used.
Should this be `float|int`?
This should be a LOG(FATAL)
Can we log the exception?
This should be removed, I think.
Remove this import as well?
Why is this needed?
Black would make changes.
Should we assert that the prototype of the object is what we're expecting?
Why is this not a string?
I think it is safe to remove this path from here, but it is not used anywhere
I think this is not needed, the logger will print it if it's configured
If the rule is not applied for GPU validation and we are not going to do this check, should we instead check the value of this rule?
This is not needed.
I think `tables.stream().filter(TiTableInfo::isView).collect(toImmutableList());` would be more efficient. Also, `isNotView` is a bit confusing.
this is just for test?
I think this is needed.
This is the only place where we need to encode the txibs, we should use the proto.TxEncoding.
I think this is the same message as before, so it should be in the same file.
I think you want to keep this line
I think you can just do mmcv.FileClient(...) here
Why are you removing the trailing `%%`? It looks like this change would be an improvement over the old behavior.
This file should be in the src folder
I don't understand this change.
This should default to `us-east-1` and not `us-west-2`
Why is `dry_run` required? It looks like the only place we use this is in `reporter.rb`.
I'm not sure if this will actually fix the problem. If you want to shuffle a lot of items you can just do `shuffle list, false`
Is this a safe assumption that it is always there?
Please remove this line.
I think we should just ignore the error.
This should be a `uint`, no?
Should this be an error?
This test was failing in CI with a bunch of different `SpanProcessor` implementations. It was failing in `TestWebRequest.ConfigureAwait(false)` and it was failing on the `TestWebWebRequest.ConfigureAwait(true)` test. It should be fixed in this PR.
Is this needed, given that `toySchema.pre()` is not a function?
This is not the timestamp, it is the time when the span was created.
I'm not sure if we want to remove this.
Why not just `InsecureSkipVerify: true`?
Why do you need this?
Should this really be 5809?
@kuzmany I'm not sure we should have this index. I think the index should be in the `host_cpid`, `host_domain_name` table, but not sure why it is added.
Is there a reason to keep this argument?
I'm wondering, do you really have to change this to fatal?
This is the only one I could find that is why we are not doing this.
Why change this?
This is just a test so I'd just remove it.
This was causing the test failure. The test was not testing this functionality so it was just testing that the message was not logged. I'm not sure if it was intended to test anything in the caplog or not.
I would prefer a `const bool isRecursion` function that takes an array of bools and a list of booleans, and then calls `SubstructMatch` with that boolean. Then we can use a lambda function here. It is a little more efficient and also avoids a lot of the code duplication and it will be easier on the eyes to read and to see the bools.
This should be 10 * 1024 * 1000, not 1000
I don't like this, but I can't think of a more elegant solution.
Can we keep the lock? I don't see a need for a mutex.
File is not `goimports`-ed (from `goimports`)
This code is now useless, since the enter key will not be sent anymore
I think it would be nice to have an assertion here that `filter` is not a `nullptr` or an `optional<T>` and that it has a depth.
This was just a formatting change.
This should be public so users are aware that this is a bug.
I'd rather not have a separate fileCard.js file. I'd rather have a single card for all the files and then render it with `<Card>`.
`Tuple2` is not a `Tuple` but a `Map` of `Tuple`. I would expect it to be a `Stream`.
Remove this line.
why is this config set in the wallet import function but not at the node level?
Why is there a `destroy` method here?
body param name
Why did you remove this annotation?
I think the signature needs to be changed to take in `abi.ChainEpoch`.
Why did this change?
`$countriesAlpha2 = CountryField::FORMAT_ISO_3166_ALPHA2 === $countryCodeFormat ? Countries::getAlpha3Names() : Countries::getNames();`
This is a change in behaviour, but it's a bug in Python 3.
Should this be a parameter instead of just a parameter?
This should be set in AVX_512_SUPPORT_INCOMPLETE, as it is the only case that is supported by AVX_512_SUPPORT_INCOMPLETE.
I wonder if we should have the `--conn_retries` option in `rurls.c` as well (as we already have it in `rurls.c`, maybe `--connect_retries` or similar).
@shoyer, can you please add a check for a `ValueError`?
Why do we need `ZMSImplFactory`? Isn't the `ZMSHandler` just a wrapper over `ZMSImpl`?
I don't think this is a good idea to set this property. I'd rather set it in the job's properties file than in the test case. It's important to set it up in a unit test to set it up in the job.
This class should not depend on the `Number` class. This should be changed to use the `Number` class.
why did we change these names?
I'd rather use `containerMetadataFile`, `containerDataDir`, etc as variables
Is this needed, or could this be just an empty string when `WITH_XCB_ERRORS` isn't defined?
This should be `recoverutil`

Is it necessary to increase these?

`err libkb.InvalidArg` is better
You should be able to remove these from the list, since we have the `setup.py` file
`cursor` option is not supported forDiscriminator
Line is too long. [87/80]
Is this still necessary?
I would have expected that `props.defaultValue === null` to work
We don't use `lodash` for this.
This is the only one I don't understand, why we need a localpv provisioner?
This example is not needed as the Ruby SDK does not support the "javascript" API
What's the point of this change?
The host_only_pool_set check is still valid, since we don't have a push descriptor.
I think this should have a default implementation, and a test that verifies that it does what you'd expect.
Why the extra line here?
> message [](start = 22, length = 9) why not use a bool and have it be an string, so that the user doesn't need to check it?
I think we can remove the lock in `func (p *Provider) UnregisterSpanProcessor(s SpanProcessor) {` and just use a single lock
Which of these are necessary?
why remove the `if scaffold` ?
I'm not sure we want to return false here if cond is nil.
Why is it needed?
This is probably a good time to move it out of the decorator.
I think this should be `signed_in?`.
I don't think it should be a string, since it can be anything. It's an optional field. We can just use `*[]string` here
I think this is the correct way to create a default profile. We need to add a new method `Infrastructure.CreateDefaultProfile(client, defaultProfile.Name)` to `Infrastructure`.
@jurre this seems to have broken the old code and it's not the only way. I think it was a bug and we should just fix it in a separate commit, so it can be reviewed.
I think we should keep this flag for compatibility, since we can easily change it without a major release.
Why do we need this?
Is this still needed if we're doing a machine update?
I think we can remove this line and just use `plugin.done(this.UndoRedo.ChangeAction(changes))`.
Maybe just `--builtin` to be consistent with the other option?
I don't think this is necessary. I think we can just drop the whole file.
Shouldn't these be called on Linux as well?
Should be `"^io\\.usethesource\\.."` ?
why is this needed?
should we also consider the case where we have a max_attempt_attempts > max_attempts?
This change is not needed.
I think it might be better to use `str(sc.address)` instead of `{}` for these.
I think we can keep the variable name here and in the test below.
I think we need an entry in the `puppetlabs.ini` file that this is set to `[]`.
I would prefer to have `taskIndex_t` as return type, and not `pluginID_t`. I don't think we should be using `pluginID_t`. I would prefer to see this function as part of `extraTaskSettings` instead of having it as a function.
Is this change necessary? It seems to me this is the fix for #4562, which is not related to the rest.
Is this still needed?
I think we should add `use` statements instead to make sure we're consistent with the code.
This is not used anywhere, can be removed
I would have thought this would fail for any non-existent file.
Why does the parser need to be initialized at all? It seems like we could just use that one when constructing the parser.
Can we use the new config name here? `circuitBreaker/memoryCircuitBreakerThresholdPct` and `circuitBreaker/cpuCircuitBreakerThresholdPct`?
This can be `public static RewriteFiles rewriteDeletes(Set<DeleteFile> deletesToDelete, Set<DeleteFile> deletesToAdd);` since we don't have to call it from the `rewrite` API
Should we use `ActionView::Helpers::CacheHelper.new.get('blacklight/application_name', locale: I18n.default_locale)` here?
Please use the constant for this icon.
Should this return a `context.Canceled` error or should we check the error type?
This seems like a hack. Why do you need this change?
This should be the same logic as above, right?
nit: `all pubs are in whitelist` -> `all pubs are in whitelist`
I am wondering if it would make sense to make this a separate function that takes the client and the taskengine and a state manager so we can call the same function with both clients.
This should probably be moved to the `HttpContextHelpers.AddHeaderTagsFromHttpResponse` method since it does more than add headers.
I'm not sure we should have this here.
This should be a constexpr, or the constructor will fail with an exception
nit: this line can be removed
Why change this?
nit: can remove this line
Why are you calling pastebin_version if you are already calling it?
This should be grouped with the other `sdktrace`.
@mattab I'm curious what's the motivation of this change?
Should be removed.
Nit: `fileFormat` -> `importFileFormat`
This is a good change, but I wonder if it is better to use a newline at the start, so that the output is not broken if we ever change the line end?
This is wrong. The function must return the error and the caller should handle all of the error cases
nit: can remove this line.
We should probably make this `readonly`
I would suggest not using `f`, since it's the `error` part. I would prefer to keep it as it is, since we don't need to use `fmt.Sprintf()`.
nit: I think we can delete this file.
Shouldn't we log the error if we don't have depthStencilAttachment?
This is not a boxes widget, is it?
I think this could be `for volume, docker_path in mount_volumes.items()`
Can you rename this to `ctx`? The context is not necessarily a background.
I don't understand why we need these 2 constants. Why not just use `AccountIncarnation`?
this change is not needed
I think we can keep the warning level here, as the peer is already disconnected
These two should be final.
This description is a bit confusing, maybe something like `Run examples that have nested names that match the regular expression (may be used more than once).`
nit: can this be `10Mb + 1`
This will break if the value is not set for an associationType
Do we want this to stay?
Why is it called allAuthenticatedUsers?
Should we add a `--verbose=0` flag to `gclient`?
Why is this in this PR?
This seems to be a bit confusing, as the `funder_id` is an integer, not a boolean. What do you think about `funder_id.to_i == org_id.to_i`?
Is it safe to call `.toString()` on a `StringValue`?
Is there a reason this is not just using the default value?
Why are we removing the `throws`?
I'm not sure if we can just add `func (fs fakeStorage) Close() error { return nil }`, as I'm not sure if this is used anywhere else, but I'm not sure.
Line is too long. [86/80]
The purpose seems to be to copy an object from one Amazon Simple Storage Solution to another Amazon S3 bucket.

I don't think we want a new column. We should keep the existing one in place and add a new migration to add a new column.
Why we don't remove the successor?
We don't need any of these imports anymore.
Shouldn't we raise an error in this case?
I would keep this field and add a `Capacity` method. This will allow us to keep the existing `List` implementation in place and make it more consistent.
nit: we can do `for elapsed, _ := range ...` and remove line 154
This is an example of a SQL query that doesn't support a timestamp column. It would be nice to have the timestamp be part of the query.
This should be `@profiler_setup`
I am not sure we can remove this?
I think we should just remove the file.
This seems to be a fix for a different issue.
This is a very bad name for a function that does something that is really generic
nit: I'd prefer `OVERLAPPING_WARNING` to be `OVERLAPPING`
Why change this?
This is not needed anymore, right?
I wonder if we can get away with just using `HttpParser` and `HttpRequestParser`? That feels more consistent with what we have now, and I think it's clearer what's really going on.
Why did you remove the aria aria label? It should work fine without this, right?
nit: maybe rename this to `remoteHostIsLocalRateLimit` to be a bit more descriptive
This seems to be a change in behaviour.
`isinstance` should be enough
This was a mistake that I fixed while merging.
@becker33 @mik-laj I'm not sure this is the best way to fix this. I'm thinking about this. I've been thinking about the fact that we should be using the `rtool` package in `setup.py` and `setup.py` in `rtool_tests`, but I think this should not be changed.
This should be `std::cerr << "Assertion (" << check_expr << ") failed: ".c_str()` (and similarly for line numbers).
Why not just do expr_object(options, ast, true)? It is not an error to pass an object to an expression.
This is an unrelated change, please revert
I think this regex is redundant because we don't use `outExeReplacement` any more.
This function should probably take a `*testing.T` as a parameter to avoid duplication
@nik9000 I think this should be `listUnpublished` instead of `createQuery` because I think we can also use it in other APIs as well, but I think that is out of scope for this PR
I'd say "on python 3 these arguments are the default". That way if someone adds a third argument to this, they don't accidentally break things.
I'd prefer if this was named "DefaultMinDataRate" instead, to avoid confusion with "Default" and "null" (which is not a valid value)
This doesn't seem right. Why do you want to delete it?
This is not used, right?
nit: could we use the same naming convention for the fields? `RenewBeforeExpiryDuration` -> `defaultRenewBeforeExpiry`?
I would have expected this test to be a bit more robust to the changes made to the API server. Is there a way to do the same thing for the API server?
Is `c.Options` always set?
Why do we need this?
This is not the right way to do this.
I think we don't need this log message anymore. We are already using `GlobalDistributedTracer.setInstance`
This test doesn't make much sense, it just checks if latex is disabled.
Please avoid using * in imports.
I don't know if this is the best solution.
nit: `if` block ends with a `return` statement, so drop this `else` and outdent its block (from `golint`)
this should not be changed
Why did this change?
Shouldn't this be 2.8.0-rc.1 or something to make it compatible with older versions of boto?
this seems redundant?
I guess we don't need the casts anymore?
I'm wondering about this. I'd expect this to be a duration, not a time.
I would prefer to keep this import in the `test/unit/python/test_util.py` file, as we're not testing anything else here.
Should we use a `<div>` here instead?
I am not sure what's the difference between the two?
Is this the right thing to lock? I thought the whole point of tag locking was to avoid locking the whole thing?
I guess this is not needed any more, but it was added for consistency with other files.
I would prefer to avoid `safe_unicode` and instead do it directly on the `__future__` imports, which is more consistent with how other `np.*` imports are done in the file.
Is the Web Server header used?
I don't think this should be necessary.
I don't think we need this.
Why does the method not exist in `BaseFieldComparator`?
Shouldn't this be a `Gibbon::MailChimpError`?
This could probably be done with `xhr.responseHeaders`?
This is the only place where we need to do this. We should probably just have an explicit `execvp` call in the caller.
We should move this array to the top of the file and use the `import` syntax for it.
I'm not seeing any deprecation for this property.
This should probably be in `rdkit` instead of in the `VLib` namespace.
Is this really necessary? I think it would be better if we did the `if` check inside the `prefetchRemoteData` function
I think this is not needed anymore
This is a breaking change that will need to be addressed.
I think you could use `fmt.Sprintf("block ID %d does not exist", e.id)` instead
Is this necessary? I thought it was only needed if the date is in a format compatible manner
this error is still used in the openvpn code, it can be replaced by `ErrNoConnection` error
This function is a bit confusing. It doesn't add any classes. What about renaming this to `add_body_class_class`?
This is the only field that's being used in the integration test, but I didn't want to add a new one.
`daddr.FromIP(state.Dst)` is a duplicate of `src.FromIP(state.Src)`
nit: `Gets the file characteristics`
I don't know if this is the best place to do this. The view is not active, so I think we should just remove this.
I'm not sure if it is a good idea for this method to be exposed to the user - it could be called from the `TransactionHandler` as well.
`persist` is not a cascade operation, this should be fixed by adding `cascade={"cascade"}` in the constructor
I don't know if this is a good idea, it should be a `CodeIssue`.
Should this annotation be a new config option in `pkg/apis/certmanager.io/v1alpha2/options.go`?
Is this change necessary?
I would not use `.` in the name of a constant. It's confusing to see the value in the same place.
You can use `six.text_type` for python 2 compat.
Why does the size increase here?
Is this a merge problem?
I think it's better to check for length first, since we already know at least one element.
This is an important change to the log. It's a pretty important information. We can't just print out the namespace in this context, since this will be logged for every single manifest.
I don't think it should be a parameter.

Can we get rid of this?
Isn't this the same as calling build()?
Why not `//+build !wireinject`?
I would prefer to have two different `false` params here.
nit: "must not be below 0 or infinite, but was: {timeoutMilliseconds}" ?

This seems unused.
nit: rename to `GenerateServiceAccount`
"appending" -> "appending"
This is the wrong command name.
Can be simplified to `headingLength > paragraphLength / 2`.
Can you remove this? It's not used
Why do we need this change?
This was a bug, we should have logged this.
This is not a good import order.
This is the same test as `AndroidHardwareBufferPhysDevImageFormatProp` below, so we can just use that instead of duplicating it.
This should be `platform.SiteRunning`
I'd move this to the `setUp` method in the base class. That would be the only way to clean up the previous messages.
This should probably be `stats_dto "github.com/mysteriumnetwork/node/client/stats/dto"`, but it's not a blocker
@mfojtik this test is wrong now. I have to change it to make sure that the new cluster is created with worker 0 in the cluster deployment, and not the existing one.
This should probably be called `AutoFilesystemTrimMountStatus` or something like that. We're not talking about the status.
This seems like it should be `/opt/puppetlabs/agent/bin` and not the path to `opt/puppetlabs/bin`.
This is the only real change in this file - we are not using `pouchdb` anywhere in `ember_data/mixins/pouch-adapter-utils`
Why do we have to do this?
Is there an opengl example of a routing algorithm that is not available on OSX?
Is this a bug in the code?
I don't understand how these tests pass, and I don't see the test that actually tests case sensitive.
I'm surprised that this was changed.
nit: I'd call them `pachOverride` and `listenIP`, `l`, and `seed` for consistency
Is there any reason to change the order?
This change seems unrelated.
I wonder if we should use `Set` here.
Why the getattr?
`$requestedName()` should probably be `new $requestedName($container->get(Translator::class)`, no?
Line is too long. [83/80]
Can we move this to `setup_env`, and have it default to `False`?
Why are you changing this? It will not change the state of the `ExecutionMaster` which will cause the execution to be retried.
Shouldn't it be the same as the example?
Is there a reason this is not `void` anymore?
Can we make this a tuple of ints, to avoid the cast?
This is a change to the API. The commandBuffer is a pointer to the command buffer.

`id` is unsigned, so you can use `std::size_t`
I would expect that you can create multiple orgs and create the same `org2`.
This is a change that is required to ensure that uploads are always stored in the correct location. This change will also break any existing uploads that don't use this API.
Should we also check that the frame is not an empty tuple?
Why do we need this?
Why is it so high?
I think this should be a boolean, and default to false.
Nit: `pingpong` is not very descriptive, maybe `ping-pong` is more meaningful?
I wonder if it would be worth checking if `r.Config.EnforceShouldRetryCheck` is `true` here and setting `r.Retryable` accordingly in case the user has already set this value.
I think it would be good to add some docs about how to zero out indexed properties.
Should this also check if lastTime.CheckTimestamp == 0?
I think we can remove the `short_version` line here since we don't use it anywhere else.
this should not be removed
Why do we need `Serializable`? It is not used in this class.
@mhmelmeier This code was a bit hard to parse before.

Should we also log if we have a non-nil head?
This should be `field` to follow the style
Why not just pass in `json.RawMessage` here?
This should be the same as `cni_version.PluginSupports`
This import is now duplicated
Should it be `NetworkService`? Or just `--enable-features`?
This is the only place I can see that you use this. Is it used?
`Kokkos::Experimental::HIP` is a `constexpr`, so this is unnecessary.
nit: `pluginsConfigs` is a little ambiguous. Can we call it `configs`?
This was a bug, because there was a call to `Stop` after `Start`.
I'm assuming we are going to have to wait for the cache to sync?
this seems wrong. we should not return `ZeroAddress` here.
Is this just an optimization?
Why not return the bool and let caller decide if we want to add a GroupByAggNode?
Is this the correct place to do the same thing? I'm not sure we want to have two different `requestTokenFieldName`s.
I would suggest to change to `Connect <provider-name>` since the id is the provider name, not the identity.
Should this use the `klog.KObj(newGroup)` helper?
This seems to not be being used anywhere?
I'm wondering if we should rename `AddTxResult.GasLimitExceeded` to `GasLimitExceeded` to avoid confusion.
@jasonLaster This test was disabled because the `cursor_stream_node` is not available in the `node.run` call.
nit: should this have the name "Server"?
This will not work on Windows (or even on Unix systems). The `cwd` argument is not necessary. `os.getcwd()` is sufficient here.
I'd rather we returned an error here, and then we could just log it.
Nit: I think this would be better as a constant.
Is the trailing backslash necessary?
What happens if the plugin is not found?
This is not the right place for this. It should be done on the form class itself
This is a pretty big function, can we move the function to utils.py?
Why did you remove this? It is a bit strange to have this log method, since we don't have any log in this class any more.
I would suggest using the error code as the message key, and using `ERROR_CODE_FAILED` to indicate that it is an INTERNAL error
@tamirms this should be removed
Can we remove the `@Override` annotation?
The line is too long.
This should probably be named `user` since the method itself doesn't actually return a hash.
I wouldn't say we should change this, it is an internal implementation detail, IMO. I think it should be `(nullable, %NULL, error: Error)`
This seems like it could be moved to `createClient`? It doesn't seem to be used outside this function.
`gbm1.booster_.feature_name()` should not be a string.
Please remove the empty line.
Please also change the name of the option.
Is this intentional or a mistake?
Why is this check removed?
I would suggest to rename the function to `needsNameAnnounced`, to avoid ambiguity of the function being called twice.
The same as above, if this is an error code we should return an error code here.
Why this new file is needed?
I would just call it "unmapped_labels".
Is this change related to the PR?
why are these methods in this package?
This method is not called from any code. Can you remove it?
This is a bug that is fixed.
I am not sure about removing the `@Ignore` annotation, but it is still useful.
This can be null
This seems to be an odd change. Why are there different types of available/available for this? I think the current behaviour is to show the available device only if the total is less than the total in the message. This is a bug in the old code where the `available` field is not initialized, so if you have a device that is available but not equal to the total then you'll get incorrect results.
Nit: I'm a bit concerned this may cause issues for some SVGs, because I don't think it will be the case if the number is editable. Can you use `this.sourceBlock_.getRtlValue() !== null` and then add a conditional to the `if`.
This should be indented by 2 spaces.
Why this change? Is it related to this PR?
Why not just call this `backtrace_empty?` or so?

I think we don't need this anymore.
This should be public I think?
Is there any reason to import it from here?
`wfutil` package has `getBoolValues`
This should be `llvm::abs_error` instead of `abs_error(reference_table, result_values)`.
This is not necessary. The `output_add_notify` callback can be invoked with `NULL`, and the `output_remove_notify` function can be called without it.
We need the polyfill for IE, right?
The new test is for the `TestXPathRule` class.
This message is not very informative.
This is an internal method, so we can't change it. We can remove this and just use RequestBodyMinimumDataRateNotSatisfied
This flag is only used for tests right? If so then let's remove it and just put it in `test-network.go` and remove `test-mysterium.go`
@saumyasrivastava08 Rename this program to `Get_Avalonia_System_Time.cpp`.
@madhavahammad @stephentoub Is this an OK change to make?
I'd rather have this in `config/` than `config.py` since it's only used here.
I think this should be `close`
Should we make it optional and set the account in the response?
I don't think this works, because the `query` method is not used for anything, and I don't know if this should be changed.
Please use brackets.
whats the reason to change from 12000 to 12850?
This seems a bit odd. I would just use `input` instead of `input.type`
I don't think we want to have the executor here.
Do we know how much this change will impact the performance of our code? It seems like the original code would have been more efficient, and it'd be better to have it in a separate commit (if it does not impact the performance)
This is a bit weird, but I'm not sure what the best way is.
Why are we removing the `""`?
This line is a bit confusing, as `class_agnostic` is always True when the `nms_cfg` dict is constructed.
I don't like the name `row`. I don't think the `row` is a good name for a field.
why not make these public and add setters?
this is the only place where the `@previous_document` and `@next_document` are used, so we can remove them from here
This is not necessary anymore since we are not setting the profile_paths in a `when/end` block anymore.
Why do you need a DR_REGARG?
The `<p>` tag should be `<%= yield %>` (and it should be a `<%-` tag, not a `>` tag).
This should be changed to the new hash syntax `.merge({'k' => {}})`
I am wondering if it would be better to make this an array of `SecurityGroup` type and use the `SecurityGroup.Name` field on each `SecurityGroup` instead
please use the util from com.rometools.utils
I would keep at least the `INFO` level, but just change to `FINE`
I know this is not your code but it would be good to group the imports
I think it would be better to use a variable for the "1" value. It's more readable.
I don't think we need an extra newline here.
This import is not needed anymore
This should probably be in the test itself, not a test file.
Can we just return an error here and let the caller to `ResolveBranch` handle this?
I don't think this is right. `T extends Element` should be the result of this.
nit; import order.
This is an unrelated fix.
This should be in `config.py`
Shouldn't the title be updated only when the page is finished loading?
@bgrant0607 This is the new test case I had to make to change it.
I think this should be `force_187_p371 vers.downcase`
This test doesn't seem to be related to the chromeOptions capability.
I would call this just URICtxKey and have the same name as the constant in the package
validKeys := [5]string{corev1.TLSPrivateKeyKey, corev1.TLSCertKey, cmmeta.TLSSCAKey, cmapi.CertificateOutputFormatDERKey, cmapi.CertificateOutputFormatCombinedPEMKey}
Why was this removed?
I'd prefer to avoid this, and instead pass the Gesture object to `__init__`.
Why are we not using `filter.ByBanned.Value` anymore?
The version ref can still be set in the request (if it is provided, it will be copied).
I'd like to see this as a `utils._isLangEqual`
`if (!empty($url)) {` ?
This seems like it could have some side-effects in the future? I would prefer a more specific `showDirect` here
I think we can just remove it. If we are removing one, then we need to remove it.
This should probably be `application/json`.
I think it would be a bit easier to understand if the user would provide `proxy.socks.username` and then you would have just a simple `ProxyConfig socks(username, password)` method, instead of adding another overload.
this is a good one - but it should probably be `high-sierra.r-project.org`
I think it would be better to keep this line and the `<http://www.nvda-project.org/>` link.
Is it really needed ?
Do you need the `MvxPlugin` attributes?
This import should be grouped with the above `net` imports.
This method should be private, as this method is called by `WPSEO_Components_Manager::get_component_loading_state()`
This check seems unnecessary, since we're not using `bulkExecute` anywhere else.
Extra empty line detected at class body end.
I think `tar-xf` is still required.
nit: can remove `ConcurrentDictionary` and `ConcurrentDictionary<string, string>` as you don't need to create it.
I think it would be better to call it `updateSymbolTable` to be more clear.
I would move this to the top and then just set the `have_exact` variable to `False` if `need_exact` is `False`.
This docstring is not right.
Is this change intentional?
"sftp" is the default. I'd remove that.
`$always_enters_loop` is a boolean.
I'd prefer to use `k8s.io/apimachinery/pkg/util/wait.PollImmediate` here. It is more readable and I'm not sure if this is a blocking operation or not.
Remove this file if no use
This should be a `printf`. The `strlen` should not be necessary. Same for the next two lines.
This should be removed
Why are these renamed?
I think this is not necessary. The `RestoreNetworkSpec` function should already do this.
Why do we have 2 different layers?
I don't understand this. Why is it necessary to check `tabIndex`? If I have tabindex `-1` then the element would still be in the list, and `tabIndex` would be `-1` (which I believe is the default).
Why do we need `node` package in `node_test.go`?
`out` is not the best example. It should be something like `prompt(`
I'm not sure why `.encode()` was added here, and why it was not previously added?
This is the only change needed.
I think it would make sense to put this in a `before :all` block
Please revert this change.
We should probably also include this example in `example/sentry_code_example.rb`.
I'd suggest making these strings constants, as they are used in a few places and can be used in a couple of places too (like the `ExperientialSwitch` class). Also, can you use the `ExperientialExperience` enum for the experiment names instead of strings?
Isn't this just `tc.SetKeepAlive(true)`?
I think that this function should be moved to the header. Also, it would make sense to move the code in `stateless_validate_alloc_memory` to `stateless_validate_allocate_buffers` and `stateless_validate_alloc_buffers_manual` so that they are all in a single file. I think it would make things easier to understand.
Why did you change the order of parameters?
Why not use a `hashutil.Hash` here instead ?
This class should have a better name.
This seems like it should be a `debug` or `warn`, but I guess it's not worth the effort.
What is the purpose of this if condition?
Nit: this import appears unused.
This function is used by the CLI to generate a list of effects.
`return dom.isFocusable(el)`
I think `html.escape` is not necessary, `replace` does nothing
This seems to not be necessary, but it seems like a nice improvement to add the annotation to the method signature of the super method, so we can suppress it when we need it.
Why is this necessary?
I'm assuming the `fetchMock` global is never used in tests?
Why is `mFolder != null` necessary?
We should probably have a default value of "multipart" here so we can use this for other email formats too
I think this will fail for `team` that is `app.config['TEAM_NAME'].lower()`?
This is a bit of a pain, but it makes the tests pass. I don't know if we should restore it or just ignore it.
Can we call this `FallbackBlockServiceEndpoint`? It's more accurate.
This will panic if we encounter an error in GetOrCreate.
Why not do this in `start()`? That way we don't need to call it in every single place
Why not use `writer.getLength()`?
Why not use the `equals` method?
Why is this needed?
I don't see a need for these new options. Can you add them as well to avoid confusion?
Isn't this supposed to be `label=disable`?
I would rather have this option be part of listing options rather than a new command.
I am not sure if this is the correct place to fix the error. It should be `_element_clone_with_density`.
Should this also be `.ToArray()` ?
Is this supposed to be `BaseClkFreq` or `ClockFreq`? If it is `ClockFreq`, then I would suggest using `ClkFreq` as the name.
This is not the same as above. The input is the first element of an array, and not the last one.
Can we remove this code if it is not being used?
Is it necessary to have a mock service?
This is a bug. The data is already sorted by a row. The data should be sorted by `mean`.
This should be done by the caller
Why do we need this change?
Is this the right fix?
This is a bit of a nitpick, but it would be better to use something like `pathlib.PurePath(sourcefile` here instead of doing this conversion twice.
I think we can use the same method in both web api and web service
This should be `self.authenticated_token`.
I'm a little confused why this was necessary and why it's needed now, but it's not in your PR.
Is there any reason for changing this test?
We should also update the test to reflect the new events.
Why not remove this too?
`if` block ends with a `return` statement, so drop this `else` and outdent its block
`for (auto location : location_map)`
This will panic if the group name doesn't exist.
nit: I would prefer a different name to indicate it's a separate test case. Maybe `core_tests` or something along those lines?
This was the only one I had in mind.
Why do we need a separate server? Can't we just call `resource-groups` directly?
This is a bit of an awful mess, but I don't know if any other service/service/ecr/ecriface should be a service package.
This is just for the sake of consistency, and we don't need `/* eslint-enable indent */`
Can we remove this line?
I'm not sure this is a valid error to get into. If we get here, we don't know if it's an error we expected or not so the test doesn't pass.
Is this a new API? Is it something that should be added to the API response?
nit: we should probably use `glnx_open_and_readall` instead of `glnx_openat_rdonly`.
This line seems to have no effect as the `isItemAndHasLink` is true even if the download link is null.
Can `directory` be `""`? It's not always a directory.
`atomic.LoadInt32` is faster than `atomic.LoadInt32`
I'd prefer `if !canList { return }` here, to avoid a possible `context.Canceled` in the case that the client is cancelled and we don't want to return.
This is the fix for the bug. The `_lastDomChild` is never initialized, and we need to keep track of it.
Why is this test being removed?
Shouldn't we keep the existing method and call the new one instead?
`!="nullptr"` is redundant
I think we can just call rebuild_instances() here. The only place it was called is in the code that uses the pubimpl pointer.

Why not `!axe.commons.text.sanitize(node.getAttribute('title'))`?
I don't think this import is used
This was just a formatting change that was unnecessary.
Should be able to use `t.Run()` here.
I think we should call this `CurrentVersionType` and make it an enum.
This should be in `test/integration`
Why not just `if err != nil`?
We have a `retry` variable here
Why this change?
Is there a reason to have the `-` at the end of a letter?
This change is not necessary
Should we return here?
I'd recommend moving this to a separate `[Fact]` and using `[OuterLoop]`. I'm not sure what the expected value would be, but it'd also be good to verify that it's not `1` (the extension doesn't have to be `2`).
I don't think this is necessary.
I'd rather we had a `EnableEndpointDiscovery` flag and have it be the default value.
Why do we have this one here and in `docker/image.go`?
`enter new password: ",`
Is this change intentional?
Why not release c here?
graph  create_graph graph graph_data
Please remove this
Why is this needed?
I think we should also have a test to ensure the label is not displayed when it's past due
Nit: I would put these on separate lines to match the coding style.
I'm not sure how I missed this one, but it seems to me that this code is not called from anywhere? If so, it should be removed.
This is a breaking change, as we no longer support default implementations in the KIP.
This is just a style change right? We should just leave the existing code as is and make the change.
Is that change intentional?
I'm not sure this is the right wording. I thought it was a bit confusing. Maybe something like "The passed span's context is not valid, but is a valid context."
I think the condition `(dcontext->go_native && wherewasi == DR_WHERE_DISPATCH)` is useless now, since this is always the case, but I think we can just remove this condition entirely.
Why did you change the indentation?
Why was this removed?
Can we move this logic to `CloudMigrateStatus` and then call it here?
`getTagName` is not a great name as the name does not indicate that it's the HTML tag name, but it's a string of tag names
I think this should be `mayactl snapshot list`?
I don't see any changes in the generated code. Can you explain why it's changed?
This is a breaking change. The old name was not used anywhere, so it is safe to remove it.
Why is this TODO added?
I think we can remove this check
Should be project instead of projectName
Line is too long. [81/80]
missing empty line after this
I think you can remove the `delete(phpVersions, "5.6")` below.
This should use the new `queryRelation == QueryRelation.BBOX`.
I think this is not needed, because the error will be returned in `updateOrderStatus` if it's not nil.
I would prefer if this was an instance variable instead of a class variable. The reason is that the code is a little more complex, and it is not clear why it should be treated differently.

I would call this "ListPowerSelectorEntries"

Add `pygment` in the docstring
Is there a reason for not having this as a `role="tabpanel"`?
I think this is going to break the migration because it will create a new table, but the table won't be used by the next migration.
I'd suggest to call this just "sysprep" since this is the name of the flag and it's not really a Windows thing.
I wouldn't use this. You can just use the literal strings `zero` and `negtive` directly.
this change is not necessary
Why is this needed here? Is it because of the `deploy.DeployTask` function?
This is an internal error, so I think this error message needs a little more information about what we're doing. Maybe something like "nonempty AuthAddr and rekeying not supported"?
Is this the right value for `padding`? I thought we were going to use it on all pages, not just the ones we're using?
I think we should keep this `randomBoolean` call.
This looks like a change of behaviour, but I'm not sure what the original intent was, I think you should keep the original behavior, but just set current_collection_id to remote_collection_id here.
I don't really understand what the point of these is. Why are they used in the parser?
Why did you remove the `wtimeout`? Isn't that used elsewhere?
Please provide return type hint for the function: `lambda_handler` Please provide type hint for the parameter: `event:`
Why do we need to keep the old values?
Why do we need this lock?
Should we also set the encoding on the client side?
Please don't change unrelated things.
Why not use `@action = 'apply'`?
This is an interesting one. I think I'd prefer it to be a separate file, as this file has no other dependencies and there is no way to tell the compiler to generate this code.
This looks like a bug fix.
Why removeCrypto from here? We shouldn't be using it
We should use the same logger for all the communications.
Why not use the constant UNF_DEFAULT here?
I don't think this change is correct. It should be `/`
Why are these being defined in `TransportConf`? They aren't used anywhere, and I think you should be able to remove them here.
Why is this one not using the other `ParseCustomKeyValues`? If this one is using the `ParseCustomKeyValues` one it seems that the other is just the `Parse` method.
Can you add a type annotation here?
This method can be removed now, because the `InventoryQuantityFormat` is now a `String`
why not put these under the same group?
This change is not correct because `findById` will only return the first record.
This will be a breaking change.
This should be done on the `Travis.env.yml` file.
Why are you exposing this function in the `api` package? This doesn't make sense to me.
I think it's fine to just do the `.blur()` in `onEnter` and then do nothing when the element is not found
Is it necessary to dump the output of all nodes? I would expect only one of them to be printed.
Why do we want to use a special `metricName` for `negLogLikelihood`?
I don't like that we have to parse the function if we don't have a repr.
This line is not needed.
Is this really required?
Why did this get added?
I think we should also add this annotation to the `Status.Request` object as well.
Is this a typo? `identifier.name` vs. `identifier.name`?
This should be a `break` statement
I'm not sure why we're using `esw-cache-fallback` here but I don't see a use case that would make it so it's probably fine to leave it out.
`key =~ /id/` is faster and more concise.
I don't think we should include this exception in our docs, but I think we do. The only reason it can happen is when the browser is not available and there's not much value in continuing to use it. The only reason for this exception is that if you have an exception in the webdriver, you can't use `assertRaises`.
We should add a check if product is null before using it.
I wouldn't expect this to work. I think the `h2o_mruby_assert` will be called when the `require` fails. It should probably be called when the `require` failed.
Layout/EmptyLines: Extra blank line detected.
I think we should add this to `.js-selected-files` as well, as it's not needed here.
Why did you change this from a pointer here?
Is this necessary? I'd assume we don't need it for `Options` to be a pointer type
This is a bit weird. It's just a presenter that can't be used for the platform, and it doesn't need to implement the interface.
This is the only part I'm not sure about - if we ever add a child of `true` to a `null` array we should still be setting `simple` to `false` and the `lastSimple` flag to false. The other changes look fine to me.
Should we also check for `null` values?
Why is it 2 ?
The parameter name changed here.
I don't think this will be called for the default zoom, so we should probably remove this and just call `super()`
This should have been added to the constructor of the annotations object.
I think it'd be better if this returned a `chan map[string]result`, and then we could pass it to the `Query()` method. That way we can avoid creating a channel for every query.
Why is this changed to package-private?
This name should be changed too.
This should use the `http.StatusText` instead of the string.
This is not a change in this file.
This is a minor thing. We should not change the license of the project files. I don't think we should be changing a publicly accessible file.
Is this a problem in windows? It looks like this will break the test.
We can remove this method as well
I think this should remain at `info()` level, unless there's a good reason to log `finest` at `info`.
This line is the only functional change, right? It's the only change in this file.
Should the default be `Mvx.MainThreadDispatcher` instead?
Should the name be `name`?
I think we should change this to a list of strings, so that we can use the `["Need action"]` string as a default. That way we don't need to change it in the future.
violation_data = (
I'm not sure we need to do this. This should always be enabled.
This should be a method on the `Agent` model, not a property
I think it is not necessary to set num_simd_saved if the avx512 code is in use
Is this needed?
nit, this import should be grouped with the other k8s imports.
This is a little awkward but I couldn't think of any better way around it. @lowjoel
Is this really a deadline exceeded?
This is a bit confusing as it is the same for each node and it is not the same to every node in the cluster. I would suggest moving `chainstore` and `fetcher` to `node` and `fetcher`, or just use `nc.Repo.Config().Mpool`.
please don't use wildcard imports
I don't think we should change the default.
I'm not sure if the `error` is the right place to log the error. It might be a good idea to have a different message for this case, but this is probably fine for now.
I think it is better to return 0 here.
Why change this? Is it related to `isAddedColumnWithNonNullDefault`?
I don't think we need an additional flag here. We can just use the existing flag in the importer
@mzazrivec This route is used by product collection and collection element. Should I remove it here as well? (not sure if I'm missing something, but I think I can remove it when I remove the collection element route)
<a tabindex="-1" href="https://uppy.io" rel="noreferrer noopener" target="_blank" class="uppy-Dashboard-poweredBy">Powered by <svg aria-hidden="true" class="uppy-Icon uppy-Dashboard-poweredByIcon" width="11" height="11" viewBox="0 0 11 11" xmlns="http://www.w3.org/2000/svg">
This is a bad test, as the `.astype` is not tested in the other test.
I wonder if we should use the same approach for `Workflow` as well.
Is it possible for `includes` to be `nil`, but `includes :simple` ?

Is this the right place to do this? I don't see where we are using it.
We need to check `st` for nil here.
I don't think we need this log
Should we also print the error status?
Why not use a different namespace for these?
The indentation looks off here.
Please keep the copyright in place
This change should be reverted since it seems to be an unrelated change.
Why do we need to change it in this PR?
This seems like an unfortunate import order. Can we sort the imports?
this is wrong, you need to use the current value of `skipBackLength` and `skipForwardLength`
I think we should add a note that this is not a valid use case for a custom `comparison-with-callable`
I'm not sure we need to do this change. The `mongoose` package is already out of date and I think it's not necessary to include it here
I think this needs a better name. I would like to see the name in the constructor as `CommandOperationV4` and the naming of the options as `readPreference` and `writePreference`
@tg-msft I'm going to remove this file
The matcher should be a keyword argument.
Should we just do `curl_retries = host['master-start-curl-retries'] || 0`?
`undefined` is not a valid return value for a function. It is a valid return value in the case of a dependency load.
Why is this necessary? It seems like `to_semantic_values` would already handle this case.
I think we can drop this one since we're not throwing.
This is a bit of a misnomer, because the `Fake` package doesn't have a `Register` method, it just registers an identity and returns a `nil` error when an error occurs.
I think we could get rid of the `if ( PROPERTY_CREATE === propertyID ) {` part here. The same thing applies to the `setProfileID`.
This is not necessary, you can remove this line, since you already have it.
`this.node.getAttempt()` should be `> 0`
Hmm. This looks like a regression to me. I wonder if we should add a migration for this.
I'd prefer `return self.layers()`
Do you need to check if the `w` type implements `Flusher`?
We could also use a logger for this one.
I think the previous test was correct and should be updated
This is a very generic message, and we're using `http.StatusText(resp.StatusCode)` to identify a server error in a specific situation. We should be using `%v` for these cases, and the `http.StatusText` for the response's body to indicate a server error.
Can you explain what `b` is for? It's not clear to me from the name what `c` is for. Is it `b1`, `b2`, etc.?
@siddharth7, is this a bug fix or was this just a bug fix?
`$contend` is not a string, but an array.
Why is this change needed?
Why not `panic("getOps NoAdd called with an empty FolderBranch")`?
nit: I don't think we need the outer parenthesis.
This is not needed anymore.
Should these be removed?
nit: I think we should just use a `require` package for this. We already import the `fsutils` package.
why not delete m2 here?
This should be called `wlr_output_emit_present`
I'm not sure we need this method since the method is already defined on the model.
Can this type be `long`?
I think we can just return here and we don't need the lock here.
This import seems unnecessary.
We need to make sure the token source is not removed from here.
I don't know if we need the space after the comma. It's probably not a big deal since it's a tuple, but I would also add a period after "try pointing" to the end of the sentence.
I think we need to handle the case of delta_from_revision being null and ref being empty. Otherwise, we'll get a `GError` on the queue.
This seems a lot cleaner.
This is a nice cleanup to make sure we don't need the h wrapper
I'm wondering whether `fmt/format.h` should be included in `update.h`.
We have `BKDWriter.VERSION_LEAF_STORES_BOUNDS` in a few places, can we consolidate them into a single function?
I think that it's a good idea to add the hub name as a configuration parameter in case user specifies `-hub=hub.example.com` in hub config and it is not possible to use hub name in hub config without specifying `port`.
Why not using the `const` qualifier for `res`?
I'd prefer a different message for this case, because we don't have a way to tell which address is being used.
Should we have a flag for this, or just skip to the next line?
I would rather not use sleep. Sleep is too much.
This is a bit confusing, as this is a map of commR -> list of commR.
I don't think the `pageIndex` is used anywhere in this file, is it?
I'm not sure if we want the instance ID here. The instance is the ID of the instance that is going to be deleted.
I think it would be better to use `six.moves.copyobj` here, since you are already modifying `__new__`
Is this actually needed? I think the `install` subcommand should do the same thing?
I don't know what this does, but it seems to me we need to save the session only if we're in HTTPS mode, right?
This is the only place we used it, so I moved this to `PartitionUtil.constantsMap()`
@johnsaigle this will break the window minification for the browser, since we don't have any session cookie.
It seems this is unused.

Please remove this extra line
This is a good catch, but we should add a `break` here so we don't end up in a loop forever if we fail to create the keymap.
This seems like it would be a breaking change to a public API?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is not correct. The header lines are the lines that are used to generate the CSV records. For example, the first line is the file header.
This is a public API and shouldn't be removed. This should just go to the bottom of the function.
Why not just trim? The tests should be as small as possible, so they don't fail in a way that is not expected.
I'm not sure this is necessary. If I want to inject an `Span` with a default `Propagator`, I don't want to get `DefaultPropagator = nil`, but I'm not sure how this should work. If I want to inject an `Span`, I can't inject it. I would expect it to be `propagator.Span`, which is what it is. I think we can do this by using `span` instead. The same applies to the other `inject()` calls in this file.
Can you please explain the limit? It's a little hard to understand what this means.
Is there a reason to have these as separate files instead of just using `pytorch_lightning.core._base._base_`? I think we have the same convention for other models.
Please use brackets for the `if` statement.
I guess the `CITF` package should be removed.
Why this change?
Should we add `if result.stdout.present?` here to avoid the `unless`?
I don't understand why this change. Is this a leftover?
I think this should be MaxIPSetSize
I think we can use `name` in both `deleteAttachment` and `delete_singular` message messages. It's not really the same as `deleteAttachment`.
`NotImplementedException` is not correct English.
I'm curious about the need for the additional config field in this struct?
I think this is a bit overcomplicated, as `elementCount()` should be the sum of the elements in the map.
It looks like this method returns an action, but the `action` field is never used.
This class seems unused.
This should not be a controller method.
Can we call these cniNetAndIpam?
I think you can use `get()` instead of `computeIfAbsent` here.
Should be `getBackend()`
Should be `_`
I'd suggest to inject it in the constructor instead
This is just a wrapper to wrap dicts. It is only necessary if you are going to wrap dictionaries.
Why do we return false here?
`AddPeers is called when a peer or a peer are added to the topology backlog`

Why do we need this change?
I'm not sure why this wasn't needed before, I think we can remove it now.
I don't think we want to expose this to the public API. We should just expose the default impl of the function and let the caller decide which impl to use.
"a single slice" is not gramatically correct here, because it is the slice, not the entire set of work
Isn't this the same as "VolumeSnapshot"?
I don't think we can remove the import statement here.
Why not to check the `blocks`?
I'm not sure what this change is for
This line should be indented 4 spaces to the correct level.
Why are we not doing this in the `buildinfo` pkg?
Should we rename this test file too?
I think this will panic if the request context is not set and `RemoteUserCtxKey` is `nil`.
Is this the default? Shouldn't this be `http://127.0.0.1:9001/`, or does it need to be `127.0.0.1`?
Is it a bug that we can't pass references to `std::string` as `value`?
Should be `Guest.new` instead of `nil`
Is this used anywhere?
This should be grouped with the other github.com imports
This is not needed anymore.
I'm a bit surprised you need to do that - this is the default run_config for the solid. I think you should be able to get rid of the `_solid_def` and `_solid_config` and just use `self.solid_def._asdict()`
I think this could just be `create!` and the `if` can be removed, right?
I think this is redundant
`GetParameterValues` is already doing that.
I don't think we need to create a new `cfg` here
`endSession()` will be called in case of error. I think it will throw exception, so we need to check if it's an error here and if not, return `undefined`.

@peterlabs @btm this is the main fix for the puppet_pal gem
This is not necessary, the `CharSeq` is constructed from `char`
I would suggest not to use this config if we can't import anything. We need to make sure that it is properly set.
I'm curious about how this change fixes the issue, as there is no test case for the fix
can we remove the extra newline?
Why is this name not the job name?
Why is this changed?
why this change? it seems that the implicit valences should be calculated only once.
Why is window.self here?
nit: this is just a test, no need to test the mock.
We should also call `ForceFlushAsync` if `this.currentQueueSize > 0 && !cancellationToken.IsCancellationRequested`
This is not needed. `augvar` is only incremented by one.
I think this should just be `Session stats sent:`
nit, I don't like the idea that this function is a generic one, it should not return an error and not be exposed to the caller. I think we should return the error here instead and handle it in the caller.
Why does this need to be configurable?
I'd like the exit code to be passed into RunCleanupHandlers to be consistent with the other handlers.
Why the extra space here?
Why are we using a different client for different datapath types?
This is a bug fix.
Why do we need this interface?
I wonder if we should have this as an `internal static` field, since it's used in many places?
I would rather have this as an attribute on `Exception` rather than the class itself, as this class will always be used as a subclass in `Exception` and not necessarily the same.
This is a good opportunity to move the `MAX_SAFE_INTEGER` value to `Number` and use it here. That way we can use `Number.MAX_SAFE_INTEGER - 1` for the max safe integer.
I think this is the wrong format for this

This is not needed
@kirrg001 is this something that we can address in a followup?
This change seems unnecessary and unnecessary.
Isn't it more consistent to use `H2O_VECTOR` for the type instead of `int` here?
This method is not called anywhere.
I think the first argument can be removed here since we have a default value for the zone.
I would prefer to have the expectation here, rather than using expect.
I would suggest to leave a space between "to" and "instead of standard output." to match other help messages.
You can use the `Url` class to get the params instead of splitting.
I think this will not work if the group_level is 0 and the user is not a superuser.
Why do we need to call `GetByteStride` again?
`Record` is not a type.
Isn't it better to keep these in the ctor?
I'm not sure why this was necessary, but it seems to have been fixed in a previous version.
This file is now out of date.
Why is this change needed?
I think we can remove this check as we are checking warehouse location for the validate namespace
I think it should be `'false'` here, to match the existing behavior.
Should we add this to the `config.example.example_code` file instead?
We can use string interpolation here, too
This is the new name for `opsv1alpha1.Traceflow`, I don't see a reason it should be removed
I think we don't need this `|| {}` here, we're already using an object, and it's just a plain object.
`array_key_exists` returns true if the key exists in the `fields` array, so this won't work
I would prefer to use `from numpy import ndarray` as the import name
Is it worth having a test case for the new format?
This should be internal and internal.
Why not just leave it as an empty string?
This function is used only once. Please move it to utils.
I'm not sure if it is a good idea to check for this. The cluster should be able to add a region which has the labels set but does not have the labels set.
I don't know if this test is still valid, but I don't know if it's worth the extra complexity, especially because we're allocating a memory pool for a single request, and we're not guaranteed that the stream is actually processing data until the end of the request. I think it makes sense to just have the test call into `InitializeConnectionFields` to make it more readable and clear (or at least make a new one).
I think this can be a `*types.Int32` instead?
I'd add an index on grant_id.
This change doesn't look correct. The fallback to `global._googlesitekitLegacyData.admin.assetsRoot` is still needed. If the image is `''`, `Notification.winImageSVG` will always be `true`.
I think this should be set to `true` and `false` in the test
This could just be `return stackDescription.Outputs, nil`
This is the only place we use this function.
This will break existing databases that had previously used this value for some time in the past. This means that if you have multiple organizations, you'll have to create the default org.
I think this should be `config = config || {};`.
This is not necessary. It is a bit of a hack, as it's only called on the main application, which is not the case for most applications.
"vestigial parameter" -> "vestigial parameter"
Why is upper/lower bound different? Shouldn't we be comparing the values of the two parameters?
I would add a note about what we are doing.
`SparseMatrix` is not in use.
We usually import from pyramid, not cliquet
I think we can make this private and move it to the public API. It is not used anywhere in the class.
Why not `dependency`?
I don't understand why we need this suppression?
Why is `ProposalID` set to `0`? Isn't that already covered by the previous line?
This looks like we have some overlap between the two benchmarks?
This is a good example of the `clientId` and `clientSecret` fields. It's a lot easier to read.
We should also update the changelog entry.
nit : use a named parameter
I'm not sure what's the difference between `config[:configuration]` and `config[:platform]` but I don't have anything to say about this.
I'm pretty sure this is a typo
# If there's only one import, we'll append the name of the module to the list, which is a bug.
I don't think this is the best name for a configuration. It's not clear to me how this value is determined from the config value. Maybe `write.metadata.log-limit` or similar? Also, it seems like this value is not used in the code, so it could be removed.
I'm not sure this is needed, but it seems like we should just be setting `BOLT_WINDOWS` to `true`.
Is this supposed to be here or in `windowHandle.js` ?
I don't think we need this check.
I think 10 is too short for a default
What if `:notice` is not specified?
You should use `boost::beast::http::address::to_string()`
This is an unrelated change, please revert
Is it possible to use PAPERCLIP_STORAGE_OPTIONS here?
I think this should be `loadLoginPage(true)` since it is a new method.
This is a good idea. This makes it easy to find all the places in this PR that need to change in the future.
I don't think this works. The dashboard is already loaded, but I don't think it should be.
This is the only place in this file where the null check was moved to. I think this should have been there for the sake of completeness.
I think the `8` is a bit arbitrary. Maybe we can use the `llvmValueType`?
This is not a response, it is an error.
This is an implementation detail. We need to add a `Realm.Map` to the `Realm.js` and remove the `[map]` property.
We should probably remove this import, I think.
This is a bug fix. The `getKeyName` is used by the `TableObject::getKeyName` method.
Why was this changed?
This seems like it is not used.
Should this be a button?
I think these should be %zu, not %llu.
Why remove this line?
This is a bit ugly. I would have expected this block to be received in the background.
Isn't this a function?
I would say we should do this in `MultiIndex.__init__` instead of here. The code is the same, but I don't think that is necessary.
This should also probably be a `TimeStamped` constant
This static block is not required.
I think this should be `clef-signer-endpoint`, not `clef-signer-endpoint`. `optionName` should refer to the configuration options.
This seems unrelated to the PR description.
I don't think you need the `or` anymore.
Should we be sending a message to the user instead?
We should not remove the hierarchy package. The package is used to search the results for options, and the hierarchy has a different name than the options (the package name is "Hierarchy").
Style/RegexpLiteral: Use %r around regular expression.
Should the `e->removePart(partId)` line above also be removed?
Shouldn't this be `from boto.s3.user import UserList`?
We could use the avatar_size method instead of hard-coding this value, but I think that's fine.
We could use `Collections.singletonMap(Tuple2.of(key, value), value)` here, as we do for the other `Collector`s.
This should be a constant
This interface should be in pkg/content/reference_saver.go
Is this global variable used?
Is this change correct? It doesn't look like we need `cast` here.
Is the name `CreateTChannelDispatcher` correct?
Should the logging level be `info`? If it is `warn`, it seems like a good idea to log at the `info` level.
`bin_safe` is a bit misleading as it doesn't really know what it does, and it does not know what the format string is. I suggest something a little more descriptive, like `safe_bin_from_string` or something. Also, the `s` variable is already a tuple of integers and is used for the format string.

Should the cursor be closed if it's marked notified?
This is just to make sure I understand: - This will cause the async flush logic to be executed even if the log is full - The call to `LogManager.Flush()` is not blocking, so the `Flush()` call can't actually wait until the log flush finishes. This is because I'm not sure why we were waiting for a flush after we started the `Flush()` call, but if there was a race condition, then it could result in the log being full, which would be an issue. Is that the case?
I'm not sure what the reason for this was.
This should be `list(str)` instead of `list(list(vals))`.
This seems to be the only place that's calling `os.RemoveAll`, is that intentional?
Why do we not need to throw an exception anymore?
Can you explain why we need to add this to the public API, and why it is necessary to add it to the `ModifiableSolrParams` interface?
I wouldn't change this method name. It makes it a breaking change.
I wonder if it is worth having the `localProjectAppNames []string` as a part of the `archer.Options` struct. I think it might also reduce the need to add `archer.Options` as a dependency.
This is wrong. Notch height is not connected to it.
Why was this chosen?
I'm assuming this will work if the OS is a Windows system?
I think we should have this in the `Pipeline` instead? It's a bit weird to have it in the `Dagster` class.
nit: I think this should be named something like `_affine_grid_generator`
nit: I think this is a little more readable if you just do `attackTimeout: protocol.DefaultAttackTimeout`
We can't do this in Python 3.
`trailerFunc` isn't a good name. How about `trailerFuncFn`?
@jerryk55 Is this necessary?
I think we can remove `startHeight` and `confirmedHeight` from the struct.
nice, this was a bit annoying to have to do this.
Is this a bug in mmdetection?
This is the main change. It's a little unfortunate that the vpx entry is removed.
I think this should probably be `primaries`, as `primaries` sounds like it might be a different concept, and is more like a "master". Maybe just "primaries" is fine?
I don't think there is a better way to do this. I would have expected us to always allow lazy creates, and then we wouldn't have to do the extra work to get the repo and id. But that is just my opinion.
Nit: Remove blank line here.
why nil? can we remove it from the constructor?
This is a very generic name, it could be more descriptive, like `shouldIncludeDescription`
Why is this imported here?
The test description seems a little off.
I don't think we should be doing this, it's not a security issue and it's not an easy way to make it configurable. I'd rather just have this configurable.
I don't think this is a BC break.
Is this a typo? Shouldn't `?` be `&.`?
I think this test should be changed to use the new approach instead of `t.Fatalf`
`_memory` is a bit weird, maybe `_selectedMemories`? Or `_selectedMemoriesByItem`?
This is the only thing in this change. I'm not entirely sure why it was added to the events map, and why it is removed.
We should probably make this an internal property, but that would require a new PR to get it merged before this one.
I would rather not ignore this file and use an `empty()` function.
Style/NumericPredicate: Use (attr) instead of (attr?).
Why are you changing the flags here?
This will panic when `ctx.Repo != nil && repo.Mirror == nil`
I don't know what `ResponseTrait` is, but I think we need to make `JsonResponseTrait` public.
This will cause the test to fail because the socket is closed and the test will continue to run.
I think we can remove this
I think this will need to be done at a later stage.
Can `dp.xdpState == nil` be removed?
This is not used?
Can you move this to `http2.go`? We should avoid duplicating constants here, but I think it is cleaner to keep them in `http2.go`.
I'm not sure what's going on here, but it seems like you're removing `.catch` here?
I don't understand the logic of this TODO. It looks to me like the zero index should be handled in `createClass`.
@martinpovolny I think this should have the same name as the resource, as `new-language-confirmations` doesn't make much sense. What do you think?
This should be named `IsTravis`
This is a breaking change - anyone using this client would have to update this example file
I think we should keep the original method signature and use `Strings.toLowerCase`
nit: move to line 23 (and other places)
Why not use TimeTracker in the benchmarker?
@ccordoba12 this signal is never used.
Should this return an error?
This is an important change, the other changes are just to make it easier to test the new functionality.
"fmt"
Why is this change needed?
Is `Close` necessary? I'm a bit worried that `ByteSink` might be used in other places in the future.
This is not used
I don't think this test should exist anymore.
This test was redundant now.
Should we also add an assert for that if `cb == NULL`?
@kbrock I'm wondering why the plan is public, but the creator is not?
Why do we need to add these?
why change this?
I think this should be deleted as well since it's no longer used.
I think this is a bit confusing. It seems like a boolean flag is not actually used. Can we just remove it? I don't see it being used anywhere else.
I think we should also close the `s3` client here.
nit: you don't really need the `.to_string()`
Missing return type.
can we do `from pandas import datetime`
I think the error should be `CUDA_ERROR_COOPERATIVE_LAUNCH_ERROR` to make more sense.
Shouldn't this be `daysMatch[ 2 ]` instead?
why remove this?
`GetState` and `CachedState` were unused, so I removed these.
I think this constant can be removed, the constant already exists
Can we add these to the README?
This change is not necessary.
Why this change ?
What if `$value` is a null string?
This log message should say that we are skipping the commit.
You don't need `this`, `getNameDescription` already checks that.
I'm not sure about the naming. It seems the axes is not the only parameter that is used.
assert(inbufs[i].fill_cb); assert(dst != NULL && "no memory or disk space; FIXME bail out gracefully");
I think we need to update the email address to use the UTC zone instead of the Eastern Time (US & Canada) format. The email is also sent in the past.
This should be a `Options` with `line_color=Cycle`, not `line_color='black'`.
>RemoveEmptyEntries [](start = 47, length = 16) This was removed by mistake?
I think this is not correct as `inlineDir` will be applied to `left` and not `right`, right?
nit: `return err.Error()` instead. Also this will panic in case of an error.
Is this class necessary?
Can we remove this code? We don't need it anymore.
I think we should use the single quotes instead of double quotes, to avoid any issues with escaping.
why is this `-10` instead of `1`?
I think this was the bug
This should be `return "", nil`
This should probably be moved to the `util` module since it is used by both packages and the registry.
This should be `import {imports} from "axe"`
`simplify chained comparisons like "a < b and b < c" can be simplified as "a < b < c"` is not very informative. I would suggest a more explicit phrasing, such as "chained comparisons like "a < b and b < c" can be simplified as "a < b < c" and "a < b < c" can be simplified as "a < b < c"".
Is it still necessary?
I think we can remove this line.
Why do we need the `host` key now? I would have expected the value to be the same, and the key should be `:authority`?
Why are we returning here? It looks like the error will be logged anyway.
I think you want to do a return FLB_FILTER_NOTOUCH here instead of return FLB_FILTER_NOTOUCH.
Should we have a test for `markexpr`?
"golang.org/x/sync/errgroup"
I think these are not needed anymore, right?
Why is this an abstractmethod?
This is the same behavior as the original code. If the error occurs here, the returned string is not empty, and the `err` is returned to the caller. So this will cause a lot of unnecessary allocations. I think we should either return an empty string or return an error.
This should stay at info
Is there a reason for using a logger rather than a test logger?
`value` can never be null
W1639 filter built-in referenced when not iterating
This should be `lastfmscraper`
Is it necessary to have this?
This is a little unfortunate. The command will fail if we run this on other platforms, but it's still the case. Maybe we want to use `on` here to make sure it fails if we run it?
I think this will be a little confusing if the `purchaseable` is the same for both video pages and `purchaseable` for the same reason.
I don't think this is the right way to do this. It's a bit too big. If we're not logging anything, the output of `log.toString()` is pretty much useless.
I don't think we need these two lines anymore.

missing spaces after commas
nit: remove the empty lines
I don't think we want to print a hash like this.
Is this necessary?
I'm not sure this is the right way to do this. It's not really checking if a password is actually used, but instead, if the version isn't set to 2.0 or greater, it will just return "password". It doesn't matter whether we have to call `equals` or `isTrue`.
This lock should be moved out into the loop
Why did we need to do this?
This should be `leader.getHighestTerm() >= zkShardTerms.getTerm(leader.getName())`. The leader term may not be equal if it has the highest term of the shard. If the term is the highest value for that shard, then this condition should be `zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(leader.getName())`
`AbstractAnyTypeDeclaration` should never be a `ClassScope`, because it will only ever be an `Class` (and the `getClassName` method will return null if the class is a `Class`). It will be possible for the user to specify `null`.
This file should be removed
Why are we removing the CreateWorkflowMode from this? I believe it is still used.
This is a bit of a hack.
This is the only case I can think of where we want to support MPI CUDA for allreduce. I think you should only enable it for NCCL and not GPU matrices (and not just for GPU matrices). I don't see any reason not to use NCCL for allreduce.
I don't like this, it's too much for this to be in a detail namespace, and we should have it in the mob file.
This should be `&& envCfg.Creds.HasKeys()`.
This filter is also added to the pipeline in `SmartContractsTransactionCoordinator`.
I think we could just return the groups in the map.
`if runtime_type.name and runtime_type.name in self.TYPE_REGISTRY`
please fix the copyright
this test should pass even if it doesn't have a Travis env var
This is not a `String.format`, you can use `e.getClass().getName()`.
Is this a new argument?
`chan struct{}` is a bit weird here, since `Quit()` returns a `chan struct`?
We should probably add `len(args.CPURequest) > 0`
I'd suggest moving this function into `resync.go`
why do you need this?
Why did you change the year?
This is not the right fix, as it does not allow a different data directory with a different genesis file.
This is the only thing that needs to be done, but I don't have a good alternative to this.
This is the fix, but I think we can just delete the file now?
I wonder if we could have a test that uses the expected value, and that the test is still passing if the expected value is 0
This should be `OPTIONS[:inventory].merge(OPTIONS[:global]))` so that `inventory` is not included in `OPTIONS[:global]`, which will result in `inventoryfile boltdir configfile`.
I think we can just make this `public`.
Should we catch throwable or just IOException ?
Is this necessary?
Please add the new `SECURITY` category to the list of allowed categories
I think this should be moved to the address package.
This will create an issue if an extension doesn't define a query. It is better to use an `array()` instead of `a` to make sure it is not an alias.
This looks like it will break for `wparams` and `params` that have both context and type. Is there a way to make this more robust?
Please add this to the header file.
We should probably rename this as well, since it doesn't have to be an MQ.
This is wrong. The rule should only apply to the destination.
Is it worth having a type parameter here, and passing in the action instead of an object?
This is a bit of an odd format, I think it should stay as `=`
I think this assert will never be hit because we check that `preserve_xmm_caller_saved` returns true before the signal is received
I think these tests should also be in `TestCloudJSONFacetTestCase`.
Why do we use a multiplier here rather than simply `1 - parentDifficulty`?
I think the default value for wait is 30s, so I would suggest to add `Defaults to 1s.`
I think this should be `latest_listen_ts = latest_listen[0].ts`
Is this intentional?
This is already in master, you can use the latest.
Why remove the header?
I don't think we need 2013 here
I don't think this should be optional. The server will always output at least one chain.
Why is this a boolean?
Is it safe to remove the dependency on `./objectid`?
This seems like a lot of constants. Maybe it would make sense to have some static variables in order to avoid repeating the constant number here? Also, maybe this is too small, but maybe a little bit bigger? I think it would be better to just have an upper limit on the size of the map and let the user decide what's better.
This should be `Release`.
This is unused.
This test should be moved to a `fail` branch, as the test should fail even if there is no syncsets.
This is a change in behavior and it's a good change, it's just a style question.
Why did you change this to `-`?
Why this? I think the error is not fatal.
`_minGasPrice` was used here to get the minimum gas price that was used for fallback to the default value of `GasLimit`, so the default value of `_minGasPrice` was not used.
Is there a specific reason why you changed Function1 to PartialFunction?
It seems that the `conf.getPartitionPerSplit()` is already a multiple of the `getTableScanConcurrency()`
This is a breaking change. Is it safe to make this change?
This is the only line that needs to change
Shouldn't this go into a separate func? `cmd.WithCommandContext(ctx)` and `cmd.Context = ctx`?
`AllowConnectionWindowIncrease` is unused (from `deadcode`)
I think this is a bit of an unfortunate hack. I would rather we just hide the link on sign up and show it on the NCR.
Please, use `std::vector`.
We should not be using a switch here - the only way I could think of this is if we had a transaction type that was a key registration tx, and the key was a payment tx, and we used a switch on that type to indicate if the type was a key-registration tx or a payment tx.
@nicolo-ribaudo I'm not sure if this is the right place to put a backslash. I'd expect it to be `\\\'`, not `\'`.
I think you can use `endpoints.Id` directly
Line is too long. [86/80]
this should be renewalTime
Why the lambda?
@jlsherrill This looks like a breaking change. The old option was not valid, and I don't know how to deal with it.
I don't think you can set this to `true` if client is not defined.
This will create a list of `KeyValuePair<string, string>` for each accession number. Is that intended ?
Please do not use wildcard imports.
I wonder if this could just be `export server` and then just have the function call `server()`
Can we please revert the changes to this file as well?
This is not needed as we already have the `window` object defined in this file.
`in relation` -> `relation`
I'm not sure this is accurate. I think it should be: > By default, the [`AutoRowSize`] plugin is declared as `undefined`, which makes it disabled (same as if it was declared as `false`). This is because the plugin is declared as `undefined`. The `AutoRowSize` plugin allows to set row heights based on their highest cells.
I think you can remove this line.
I think these should be `gcerrors.MethodError`
I think this should be a setting on the `SharePlan` model?
nit: this could be moved into `for _, noUnref := range doNotUnref {` and it would make the code a bit more readable.
Why do you need this?
This change seems like a breaking change. Is this a public API?
I'm not 100% sure if we want to change this for the first time, but it seems like it might be more correct to change `GET` to `POST`, and then do a `POST` request.
this is the right thing to do, but i'm not sure why we're checking the readonly here? I think you should just be able to check the write access error.
this looks wrong
I don't see the reason for this line.
why not ChainID() uint32?
Should we have more details here? Like the stacktrace and the flow id? What is the flow ID, and what the job key?
Is this needed ?
nit: "splitSize = " + splitSize
I don't think this is correct. If a user provides an invalid icon, they must be using the same file. I think we should not use a new icon if we don't have one.
Line is too long. [83/80]<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Can you add this to the godoc?
Why is this needed?
@tvernum I think this was an error in the original code.
Is this a bug fix?
This is the change in the schema, not the result.
Isn't this part of the same change as `VirtualMethodCall`?
You should use `array_key_exists()` here, and also remove `secretKey`
I don't think we need `*string` in this context since we are not using it at this point?
I think this method can be static.
This should be a `LOG.debug` since it will not be visible.
I think it is not necessary to test toArray
This should not be here. Iceberg type should be the type of the original vector type. The vector type should be the original vector type, and the original iceberg type should be the original iceberg type of the vector.
Is there a reason you're using pointers here? I think we don't want these to have a value
This is not an error
If the user sets the `IS_GLOBAL_STORE` as a bundle, it won't get set as it will be `null`. So we should check that here before accessing `getString`.
I think this is a good candidate for an util class.
We should also add the value for the transcode reason
Please remove this unnecessary else statement (since you have already changed the if statement to return).
This should still be join, because this is the path to group.
I think this should be `||` not `||`
I wonder if these could just be moved to the workflow hook.
This is the only place this block is used?
Can you please revert this change?
This is the only change that I see, right? It's just a refactor of the existing code.
This should still return chain.Store?
Is there any chance that the device name could be "" or not? If not, I think we should log that the device is not specified explicitly, and return the error if not.
Can we have this be a property?
This was a bug, it should have been `long.MaxValue`, not 1.
I'm not 100% sure about these changes, but I think this one should be 1.14.0?
Is this view not needed?
This is a breaking change. Please add a new constructor that accepts a dictionary.
I'm not sure if we want this to be a `Vector` type, since we don't have a `Value` type. I think it's better to use a `Vector` type and have `Value(ElementType)` and `Value(Len)` implement this one.
I'm not sure why we need this. The remove component is already in the `index.js`
`memoryCPULimitsEnabled` - `memoryCPULimitsEnabledLock` is unused (from `varcheck`)
I wonder if we should do the atomic load before assigning. This is an atomic op and it is not atomic. It is not atomic, it is a read and the read. The read should be fine.
Is it a problem that if this method is called after `markGotIP()` it will not be called? Or is the intent to call the method before `markGotIP()`?
This is not a valid usage of the Jest mock, it's just used for unit tests and we can't use it anywhere outside of WordPress.
Nit: This check could be removed.
I am not sure this is correct. `!.` is the prefix for the link.
I think that we could use this in one of the other tests to make sure it's working.
I think we should change it to V(4) as well

Why not using `window.features`
I think you can just return here.
Shouldn't we use `import { MongoURIError } from '../../src/error';` here?
Can we have this in the `kubernetes/api` package? It's not used anywhere else
I'm not a fan of using `Warnf` as it adds unnecessary verbosity.
This method doesn't need to be `public` anymore.
I don't see where this is used. Is it being used?
I think `IdleTaskqueueCheckInterval` can be removed now.
This is only used in a test. It should be moved to a test file.
this is a little weird. I don't think you should be running `apt-key adv` on the keyserver keys.
Why are these removed?
nit: `priorityQueue()` instead of `priorityQueue()`?
Shouldn't this be a thread pool?
I'm not sure if the logic here is right or not, but I think the `if` statement should probably stay in.
I think we want to add a new line after the last `,` here.
I'm not sure about the change in behavior here, but if the value was negative it's a bug in the code. The balance will always be negative, so it should be incremented.
Should these be `kind='pdf'` and `kind='kdf'` to ensure the same kind is returned for both pdfs (as the test is done above)?
Should this be `return`?
This is the only line of code that I can see that is missing
This was a bad copy&paste
This is the only caller of `toarray`, so it is safe to drop.
nit: can we call this something like `_get_extension_overrides_for_testing()` to indicate it's only used in one place? Also maybe `test_get_index_extension_overrides` or something?
I would suggest to use `0x30` for default values. It would be clearer to have a default of 30 minutes, but it's not clear to me that we need to make it configurable.
I wonder if we should make this an error, so that we can easily fix it in the future. We could also say something like "Please ensure at least one of them is set to `true`."
export const USERS_PREFIX = 'users-';
This was never executed, so I removed it :)
This change seems unnecessary.
this method can probably be private
I'm not sure why we have `PodSelector` but we can still use `phaseSelector`
Should we mark as deprecated in `api/v2/`?
I think `[list<array>, list<int>]` is more appropriate, but not sure if that's really worth it.
I think we should be able to remove this and use `javax.net.ssl.SSLSocketFactory` instead.
Why not use `Path.pathSeparator()` for this?
I think we can just return here, right?
I think this can be removed as `target_alias` is set by a user.
I think this is a little bit confusing. The value is set to 0, but the value is not used? Maybe "True if the Int field is set, this helps us distinguish values of 0." ?
Is there an actual campaign source that we need to be tracking? I'm guessing we're just going to use that for all of the campaigns we want to track?
I'm a little surprised this was here. Is this just for debug?
This is a little bit confusing. What is the difference between `CHANGE_STREAM_OPTIONS` and `changeCursorOptions`?
I think this should be disabled.
Is this just an analyzer thing? If not, I'd say this should have been an `[RequiresUnreferencedCode]`
This needs a unit test for the new `DataFrame.to_clipboard` function
I'm not sure if this is the right place to put it, but if the user has not yet logged out, this will send a welcome mail. I think it would be more ideal to put this logic in `sign_in` and have it only send an email when the user is logged out. This way we could send a notification when the user doesn't log in.
This should be `return nil, nil` to match the rest of the code base.
I don't like the way the destination zone name is determined, we should have a method in the zone class that will do this check instead.
why this change?
This should probably return an error, and have the caller handle it.
Is this change correct? I thought it should be > 1.
This is the same as the one in core, so I don't think it makes sense to put it in the model
I'm not really sure why you need `page(1)` here but it's not necessary.
I'm not sure if we need the atomic_write here, since this will only be used in the critical section and the atomic_read below will not do anything if the atomic_write fails, right?
Why the change?
I don't think this is needed. `stderr` is a `FILE*` in this case and the function is already returning `NULL`.
I would prefer if the `timeStamp` was passed as a constructor parameter. Then we would get rid of this `try-with-resources` block.
Please avoid unrelated reformatting changes in unrelated files. It makes your diff harder to review and makes reviewers harder to read. (It makes the diffs smaller and harder to read).
nit: can we have a better field name than `routeSource`, `routeSource` is a bit ambiguous.
I'm assuming this is for debugging, and it's fine to leave in for now since the issue will be closed soon
I would prefer to call this `get_format`
`<T extends WebElement>` -> `<T extends WebElement>`
I think we should use `303` and `403` for these constants.
Hi @peter-dan-anwar , thanks for your contribution. Thankyou very much for your contribution. Thank you
I'm surprised this isn't a `Store.propagate_ids` or `cls.propagate_ids(obj, match_id=match_id)` instead?
This should probably return 404
I don't think this is correct. We should return the error to the caller.
I don't think this is a great idea. It's probably fine to leave this as 1 for now.
This is a public function, so we should not make it public
This seems like a good way to handle this situation. If a user is using a non-empty path for `data_path`, then we will be able to use the default data path.
I think `handle` is not necessary.
Should we check the error type?
Is this a typo?
I don't understand why do we need to change this logic.
I'd keep this type, and just use the `Address` field directly in the `checksumAddress` struct.
Why this change?
This is the only thing that's needed to fix the test to pass. We should keep this code as it was before, as it's easier to understand what's being modified and not having any side effects.
This is not a nil action. It is an action that is nil if it's a Get.
Is there an overload that takes a cancellation token? If not, I'd recommend to remove that parameter and instead use the overload that takes the token.
Why do we need this now? Can't we just remove this?
Should we add a `.` at the end of the line, to avoid collisions with the other files in this PR?
nit: I'd keep it in the same line
Should this be a 301?
why not `getApproximation()` as in `DocIdSetIterator`?
Why remove this method?
I think you need to add a newline above this one to separate the imports from the content of the class.
Is there a reason why this is in the `__init__.py` instead of `__init__.py`?
Is the plan to make this optional?
We should add a check for `transportType` in `EndpointObject` to prevent this case from happening
Please revert these changes
why is the defer necessary?
Why not put the network message in Game::playerExecuteParsePacketEvent instead.
Is this change needed?
Should we just use "npm config set spin" instead of "npm conf set spin" ?
This should probably have `Count=4`.
I wonder if `AddBlock` would be a more consistent name for this method
@mattpap, @mhvk - do you know why we have a different y value for the title in this example? I think I've seen the same code in a few places
Should we just use the `Int` type directly here instead of `Int.Uint64`?
I would have put this interface under a `block` package
Can you add `checkpoint='https://github.com/whai362/PVT/blob/master/README.md'` to these files?
I think we should add a method `isPrimaryKeyColumn()` in `Table` instead of adding this new method
This doesn't need to be a class.
Why not just check if `item.Type` is `Season` here instead of `item.Type.toLowerCase()`?
This is probably a bit of a nitpick but can we use a normal scope instead of `where`?
Should we add an error handler for this one as well?
Is it a google-sdk dependency?
Why change this?
Is it correct to include text/plain?
I am not sure why this is needed. We can't use `OpenstackRegion` directly. The `MetadataAddr` and `MetadataPort` are not needed in the config
@jaymode I am not sure if the `[01]?` pattern works well in some cases.
This is a breaking change, we could potentially have this return `tracerProviderBuilder.AddDiagnosticSourceInstrumentation<TInstrumentation>` instead, but that's not the case for this overload.
I don't like this. It's not a validation error, it's an actual error. It's just a validation failure. We can change this to `.to raise_error(Bolt::Project::ValidationError, ...)`.
Is this the right place to call `getUnmergedMDUpdates`? If so, can you add a `TODO` here about reusing the same function? If not, could you add a TODO here so it's easy to track?
This should probably be a separate error.
We could use a better name than `test_client_requests` here, since the table doesn't really have any requests
These are no longer needed, as they are already defined in the catalog
You can use `trigger_error` here instead.
This should be defined in `spec/types/block.go`
This is an unrelated change that needs to be done in this PR
Is it intentional to make this configurable?
Should this method return `LocalDateTime` instead?
I'm not sure this regex is correct. The first character must be an alphanumeric character (i.e. `0-9` is the first character).
This is a behavior change, but I'm not sure it's the desired behavior, since `struct` can be an `ImmutableList`.
Should probably include `// +build !windows`
This is a bit awkward to have a new constructor here. I think it would be better to create a new `EmailNotificationService` in the `AbstractAWSEmailService` that does not require `AWSEmailProvider` as it is the only place where `AWSEmailProvider` is needed.
I think the login is already in the DB.

Please use `ComText::COM_OBJECT_COMMENT_TEXT` instead of 0
Whats the reason for this disable?
Why not do it in one line?
Should we be logging this as INFO, or is this just for testing or something?
Why does the span need to be mutable?
nits: I think we should remove "This" from the beginning of the sentence, and say "This refresh will be bounded by the visibility that the {@code IsolationLevel} of that transaction exposes"
These are not used in this PR, so I think they are not needed.
Use 2 (not 1) spaces for indentation.
This will fail for the default value of the src attribute, it will set the value to `''` instead of a string. You need to set `src="{}"` on the script element to be a string.
Why was this removed?
This looks like a hack, why are weights loaded in `m_weights` but not in `m`?
@pattisdr Do we need this decorator?
Should we use `constants.DefaultMessageLayer` here?
I'm not sure if this should be a config setting or an env setting. If the default buffer size is set to the same as the one set in config.toml, then it should be configurable.
Why is the flags removed from this function? It is not used.
Is this a behavior change?
Should this be `!req.WithoutNS`?
I'm wondering what these constants are used for?
I think this is a good idea but we should probably use an `uint8_t` instead of an unsigned integer, and use it to represent the number of values.
Why this change?
Is this line supposed to be here?
This doesn't throw an error, but throws an error if it doesn't.
This seems to be an API change to the API of `getDataErrorComponent`. I don't think we can do it without a breaking change.
This is probably better as a method on the `Rev` type? That way you don't have to have to define the function every time the SCM is constructed.
Why did we change this to internal?
This is the default.
I am not sure what this is about. Is this a change in this PR?
Nit: this could be simplified with: if ((! Get_SqlParser_Flags(INTERNAL_QUERY_FROM_EXEUTIL) && (!ComIsTrafodionReservedSchemaName(schemaQualName_.getSchemaName()))) ||
I think we should not alter the table if the old version is < 1070296?
Can `sStruct` and `fStruct` be renamed to `logicalType`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I would prefer to keep this helper method in `lib/dashboards/helper.rb`, and move it there.
Why is this nullable?
Can we put the `RecordTimer` logic into a new func, e.g. `RecordTimer(service, userLatency, val time.Duration)`
`parse_date` should return `datetime.date`
I don't know what this is testing, but it looks like there are some missing quotes here. Is that intentional?
I don't see the `unless` clause here.
This is not the correct way to do this. MySQL does not support `contains` operator. It is not a valid operator for the query, it is a filter that is used by `in` and `not in` operators. I would suggest you to create a separate `Contains` operator which is used to do the comparison and check for the correct `operator`.
Please do not use wildcard imports
Can we make this a const?
`null` check is not needed, `AccessListItemForRpc.FromAccessList` will return null for null list
nit: `Unauthorized request to %s when using token `%s` : %s` is a little bit shorter, but I guess this works
I think this should be in an `else if`, no?
This is a bit confusing, since it is the only one who's using the protected access directive. It would be great if this could be re-used.
I'm not sure why this was added?
I think this should be `:user_name`
Is this needed?
Is GroupIDType the same as GroupIDType?
Should we change this to "Number of core threads" or something?
This should be `startCastTabMirroring`
Is it possible that this is null?
This should have been `MvvmCross`
Extra empty line detected at class body beginning.
@ppekrol is this a good change?
I think this interface should be renamed to `ReplaceDataFiles`
This is a bug in master. The command output was always a bytestring, which we can't use to do this.
I'd suggest using the `std::max` instead of the `>= 0`
I think this method should not be in the `ResourceUtil` class.
I'm not sure about this migration, I think we'll have some weirdness with the `body_html` column, I'd say just rename the column, then remove it from the `trail_map.rb`.
I'm pretty sure these strings are not necessary.
Is this going to make the `bundle exec` run on every host? Or will that cause a lot of trouble if the host runs a bunch of things?
I wonder if it makes sense to add this in a package-level function.
Why is this changed?
I think `sendPart` is called for every `Download` request. I think it should be called only in that case.
Is this intentional?
I think we should just change the field type to Flow instead of a pointer. Flow should be immutable, and it's important to be able to mutate it.
This file was autoformatted. I've fixed this.
This will be removed once the new listener has been added to the localstack service
Is this a timestamp or a timestamp? If it's a timestamp, should it be a timestamp in milliseconds or seconds?
This is the same as in fast_upgrade_test.go. Should we just have a function that takes a fastParams and applies the parameters to it? That way we don't need all of the above.
I'm not sure this line is right. It will fail if the user has the wrong password (or is not the one that will be used)
I think we can also add a check for the other parameters.
Is there a reason we can't just use the standard `six` here?
Line is too long. [83/80]
`$this->getFlattenedValue()` returns an array, so the return type is wrong. `getFlattenedValue()` returns a string.
Is this the right way of asserting that key is not null?
I am not convinced we should be adding this to the CMake file.
Should we add packaging to the list of allowed image fields?
Can you make this a method? This is the only one I see in the tests, but I can't find it anywhere else in `api/api/state/task.go`. Maybe `verifyExecAgentRunningStateChange` is a good name?
Please avoid using wildcard imports
Isn't that going to break existing deployments?
Why is this necessary?
This is a bit confusing. `username_` contains the username in the first place, but `addr_` contains the address in `addr` - is this correct? I think it should just be the username in the first place?
Is it safe to remove this?
nit: can you please put this on one line?
I'd like to call this something different than `Version` since this is used only once and not used elsewhere.
I think it's better to put it in the `ContentExtension` class instead of the `Extension` class
nit: this import should be grouped with the other `github.com/aws/aws-sdk-go/...` imports above
You can use `$this->get('sulu.media.manager.media')->find($id);` here
This is the same as `Topic.top` so I think we can delete it?
I wonder whether it would be cleaner to make the `_write_line` method private and use it in the tests.
Please add `#include <cstdlib>` for these.
These should probably be constants
Is that the correct fix?
Can you add a link to the docs that it's external, and link to the external link to get the link to the external link?
This is not necessary. It will throw an exception in case it is null.
@mikedoror I'm not sure if this is the right name to use for this route. It seems to be the template that is used by the admin.
Can you add an error here as well to check that it doesn't get returned?
I think it is better to keep this line.
why do we need to remove it ?
I don't think we need this. The constructor is for the model.
Why not use `chain.GasLimit` directly?
Missing copyright header
I don't really get what this does? Is this a new check or was this done by some other code path?
We should probably log the exception
Is there a way to make this more clear? "Can't drag an input to an output that isn't connected to an inferior block"?
Why are you removing this?
Why is this needed?
Shouldn't the boolean be passed as `escape`?
This should probably be called `CommitmentSize`
I think we should not change the name of the input argument. We could have a new parameter that is `FileSchema` that has a `getSchema()` method.
Is there a reason to not use a simple if here?
I'd suggest changing the name of this to `tm_cpp` as well
I think we should just rename this to `UnpausedPredicates` now that we have `PausedPredicates`
I'm not sure what this is supposed to be doing, but I think this should check for toggle key, not for the actual toggle key.
this file should not be changed
I am not sure about the name, this will not rerun with all traces on failures, but only the last one will.
This is the change that was not being tested
This looks to me like a lot of duplicated code. Maybe it's a good idea to create a method for it, and then just call that from both methods.
Shouldn't this also be updated to include `password_confirmation`?
I don't think we should do this, it will break the `sendKeysToElements` behavior.
This should be renamed to something more clear
This doesn't seem like a valid syntax. Can we add a comma here?
I don't think this is needed.
I'm not a fan of having these as global state variables. Maybe you could move the `if question.default:` block into `_init_texts()`?
I think you meant `_isFocused` instead of `_isHidden`
This should be renamed to just samples.
Should be `Path`.
I'm not sure if it's better to move this to line 6. I think we can just leave `console.log`.
I would rather see us use `is_log_op = f in log_ops` and then do `f in log_ops`
I think this should just be `if(!parser.parse(url, true))`, as it will throw if the URL is malformed.
Nitpick: You can use atomic operations to do this. You may want to use `std::atomic_int_add` to save memory.
I think we need a log here, since the condition is not changed
This will need a change to `load_tabs` to pass the `background` parameter to the `load_tab` method. The reason it is set to False for this test is because it is not testing `tabopen`.
This description seems to be incomplete. I think the test description should be something like "when there is no duplicate formatter"
Why not remove the function?
This is not used anymore.
This should be an error log, right?
I'm pretty sure we don't need span anymore.
This should be wrapped in an `if current_user.mentor?`.
I think this should just be an `&&` instead of a `||`.
Is this necessary ?
Should we also disable this for `./spec`?
Is this safe now? I think we can get rid of the mutex entirely?
I think `coinbase` is more consistent with the naming of the function
I think we want this as the default, otherwise it will be flaky on CI, and will be flaky on other CI environments.
We should probably make the font-* part of image, as it's not specific to Shockwave.
nit: I think the previous message was better. "Type {0} is sealed in both the contract and the implementation but not both."
Why is this changing from the full namespace name to the package name?
I wonder if we could just have a single flag `--enable-host-verification`? This is a little less confusing.
nit: remove empty line
This line is too long
Why are we not decoding the response body?
This will fail on Windows. Use a `wx.Label` and check if it's an empty string.
is this really necessary to be `ContextT`? I would have thought the type was `RubyContext`
`$media->getContext()` can return null. I'm not sure that we should handle that case.
Why we need namespace entry? Can we just call handler.namespaceCache.GetNamespaceByID in validateContinueAsNewWorkflowExecutionAttributes?
Why was this changed?
Is there an advantage to making this a list? Could the user just pass in one of them?
This is an example of how I would like to have an alternative for spark session catalog.
I don't think we need this if statement, since we're checking for `content_type == "multipart/form-data"`.
Why is this here, but not for certificate?
Why not simply `if (excessDomChildren)`? Also, why not use `if (excessDomChildren.length > 0) {`.
`unbindEvents()` is not a great name. How about `unbindEventListeners()`?
I think the whitespace changes are fine here, but they seem unnecessary.
I'd like to avoid using the word "unzip" here. I don't want that to be confusing with the word "file". Maybe just "open the zip file"?
Can you add a check to see if SourceSnapshot is not empty?
This should be an integration test

`return $this->getCustomData()->delete();` ?
Can this be package protected and `public`?
I'm not sure if it's better than this, but we should also consider `RECTANGLE` queries. We can add a new parameter in the constructor that defaults to INTERSECTS.
I'd like to see a more explicit exception here, something like a `RuntimeError` (e.g. `ValueError` or `TypeError` or `ValueError`)
Why do we need this file?
Shouldn't we change it to a completed task instead of returning empty task?
Should we do this only if the cd is not installed?
We can probably just use `newTableMetadata` here?
this test case can be dropped, it's not really relevant.
We should add a note to the `getAllTables()` api that it is used only for testing, so we can see what is actually returned when this happens.
this import is not used
nitpick: `badContentType` should be `application/octet-stream`
Is this a good change? I'm not sure how to handle this without changing this.
This seems like a long time to wait for. What does the 4s sleep do?
The `if` block should be indented.
Why is this removed?
This is the only place where we use newSchedule. I wonder if the scheduler should be renamed or something similar, to avoid confusion.
This change is needed because the solution project is always present.
This should be removed
This is an old message that was removed. Is it ok or should it be added here?
I think this should not overwrite any metadata. We don't want to overwrite the file in that case, right?
Why the `s`? It is not a typo, it is an abbreviation.
Do we need this?
Please don't do this, we have to do this for all formats.
This is not a POST request but GET request
Shouldn't the server be `Kinds.GraphQL` ?
Why did you remove the ":"?
This spec is a bit too specific and should not be here
This should be `!node.active.is_root()`.
I think this is a bug fix. `publicKey` is already in `RegistrationManager.INSTANCE`
Why is the `ASSIGNMENT` enum removed?
Should this be "Map"?
Is it possible to drop the packet with IP options even if the length of the header was not enough?
I wonder if there's a way to get the exporter from the c.
This was the main issue - I had to make all methods public because of the way they were implemented.
Should this test fail without the change?
I think the original was better.
This was the bug that caused the test to fail when the node was executed in the frame that is the one that is not the one that was the one that is being evaluated.
I think the right fix should be to use MCTX_NUM_SIMD_SLOTS here.
'throttle' => 'لاگ اِن کرنے بہت زیادہ میادہ براہِ مہربانی :seconds سیکرانڈ سیکنڈ باریں د
I don't think the default value should be null. It can be empty.
This is a little bit weird, as `pathStart` is `-1` if the line is empty.
you can't use this class as it's a BC break
This should return `nano::epoch::invalid_epoch` instead.
nit: can we name this `cb`? It's not clear to me what it's supposed to be doing
These should not be made public - it should be private.
Can you please make a new metric for this?
nit: "will cause" -> "will cause"
This function is not used.
This is just to make it obvious what is happening when the db round is not at the earliest entry in the db.
Can you add one with `--cluster-region-label` as well?

This method could use some explanation as to why it's useful.
Isn't there a way to get the new version of the code without adding another migration?
This function seems unused?
Can you just use `FilesWithHolesDataVer`?
This will be a problem if we have two roots with the same inputPlan.
I think we can remove these `putAll` calls now.
This is the default, so the default value should probably be `8080`, right?
This is a little confusing, as it will be used to set an environment variable for `Android_NDK` and `Android_NDK_HOME` when `--with-android-ndk` is used.
I think this was a bug, but it was wrong. The calculation should be 0.5, not 1
This will break the `Gecko` extension. It needs to be added to the manifest.rb file as well. Also, the version is missing from this line.
Please use spaces around the comparison operators.
This is a bit confusing. It is not a block hash but a block that has a blockhash. It should be `isValid`.
Is this include needed?
I think we should have two tests, one for whitelisting and one for blacklisting. I don't think it's necessary to test both cases.
This one should be a separate rule.
Why are you changing the default min length?
This is a breaking change, we should keep the old behavior for backwards compat.
This one should be renamed
I think this should also return the seq. If it's not available, it will just return 0, which isn't what we want.
Don't use *.
This looks wrong to me. The input_begin and l_input_end are not used in the while loop.
I would add a check here if the release.inc is actually used, otherwise we'll have a fatal error on this.
I am not sure if we need this. The action is not the same as a duration, but the duration is a string.
Why is the abstract archive interface needed, why not just make RSAAbstractArchive extend the abstract class
This should be a `HashSet` instead of a dictionary.
I'm not sure if I should put this method here. It is not a method that is not implemented. The implementation should be the same, but it should not return anything.
I think we should just return this error to the caller, and the caller should handle it appropriately
This file should not be deleted.
I am not sure if there is a reason for this change
I'm not sure this is correct, it looks like a regression from some old test, which should be reverted.
This is a very bad pattern. It should be done with a static map, but I guess the compiler is smart enough to optimize this away.
Should we use `in.GetBlockID() ` here?
Whoops, missed that one :)
Should these be added to the end of the existing set of methods? Or are they just to make it easier for users to add new methods?
I would rather use `return 0;` here and then return 1 in line 446.
I'm not sure what the right way to do this is. The map keys are the type of disk. I don't know if the value will change. We could make this a map[string]bool if the type is a string. But this way it would be a little easier to read.
I think we should set this value to 3000.
Should we be doing anything with it here, or should we just skip it in the reconciler?
Is it possible that the number of proposal is not 1?
Can we use `table().name` directly?
I'd prefer a more descriptive name for the variable: `registerCount_`
I think we could remove `private_profile.setter.init_profile` as well.
This should be the other way around. I'd like to see `result[resumeKey] = ...` and then `result[resumeKey] = ...;`
this is the same as in `User#find_or_create_by`
Expected 1 space after IF keyword; 0 found
I think that it is better to return `Optional` here instead of `null` so the callers are more explicit about how they can decide whether to proceed or not.
This change is not needed, since it's already checked in the previous condition.
I think you want to remove the extra parenthesis here, right?
Why do you prefer `DataType(0.5)` to `DataType(0)` ? I'm not familiar with the code, but I don't know the difference between `DataType` and `DataType::one`, and it's a bit confusing.
Is this intentional? I don't remember.
This mock should not have a DBCache.
nit: can we please move this import to be with the other `github.com`?
This change is not necessary as the `BinaryFileResponse` is used by the `ImageController`
Is there a way we can avoid the static initializer? I feel like it would be better to just initialize the fields with null.
Is this change needed?
This should be the number of blocks before a proving period. The block number should not be a block height of 1.
Why is this needed?
We should be able to simplify this by simply removing `PM` from the `m.group(1).equals("12")` part.
Why did you remove the check on `FormatIsMultiplane(image_format) `
nit: can we import directly?
I'm not sure this is correct, I think we should keep it the old way.
Is there a reason to not just show `share_download_url_with_position_item` for this case?
I think the change is not needed anymore?
Should we add a note that the name of the assembly must be the same as the type name?
Shouldn't these be `List<UInt256>` instead?
I'd suggest not adding this method. I would rather see this method be abstract, or at least a protected method, or a public abstract method with a default parameter and call it with the default value if it's missing.
Is that the only case where it is necessary to set pname->service to NULL?
Should we have a `Service` struct with default values?
@mzazrivec @madhava08 I'm not sure about how this test case is passing for me locally - it seems like this should be `^w+\.`?
Isn't this just `Cache is used for the cache used in the local server` ?
Why this change? I think this is not needed, as `toCopy.sortOrderId()` will return a `SortOrder.UNsorted` instance.
I think this could be more readable if it was named `is_html_file_exists()`.
Isn't this a little bit redundant?
Why is this necessary? It looks like it's not needed on the macOS machine.
Why do you remove the `++` here?
Should this be `allowConnectingCards`?
This is a functional change, and it is not necessary.
I don't like this change - it makes it harder to debug. It makes the code harder to read. It's not a big deal, but I think it makes the code harder to read.
I'm a bit confused by this. Why do we need this property? Can we just use `Task`? I don't see the use-case of it being on a different thread.
this is not a functional change
This will cause a double class name change if the user clicks on a button. I think that's okay, but we should make sure this doesn't happen in the future.
I'm not sure we need to bump the version here, since `3.1.0` is already released in the next `setuptools` update.
I think this is an API breaking change, we need to keep it as-is and mark it as obsolete.
I think we should make this `string`
I don't see any reason for using `Fragment` here.
Why not just `cart_item_id`?
I'm not sure about this. I think we should have the default in `defaults.json`.
Should this be a `task-cpu-mem-limit`? I don't think it's a common capability. Also, the name should be something like `task-cpu-mem-limit-per-node` to make it clear that it's a per-node feature.
I'm not sure why we need this.
I don't think this needs to block forever. It's possible the cache syncs happen more frequently and the cache has changed.
I'm not sure if `512` is the right default value here. If `added_rows_count` is not provided, we would not have added any rows but only `existing_rows_count`.
This line is unnecessary and can be reverted.
Shouldn't the indent be fixed?
`return cls._timeout or socket._GLOBAL_DEFAULT_TIMEOUT` ?
We should not ignore this error, as it will result in the same error in the next line.
Why did you change this? It is more readable.
This should probably be localized as well
I think we need to update the `Put` method in `docstore.Server` too (and the `Update` method) as well.
I think this is the wrong place here. It should be done in `Puppet::Util::Plugin#build`.
Is it possible to do this free before the if check ? I don't think so, but it might be a good idea.
I think it is better to move this to the beginning of the function and call `_prefix` from there.
Why are we dividing by 1.15 here?
`isset($options['lazy'])` is enough?
nit: remove this using.
`run_as_options` seems to be unused.
The first two lines should be removed as it's already there.
This should be `/error\:/`, right?
Shouldn't there be a message for this?
E302 expected 2 blank lines, found 1
The `ConsumerOperationMeta` should not be used for the `PojoConsumerIntf` type.
I'm not sure how useful this test is for a new notification. I don't like that the test name is not very descriptive.
I think it is better to use `_base_` for the file name.
Why is this needed?
The tests don't actually need to be updated, since `tab_w` is already a `Tab` object.
You should add the trait to the use statements of the Controller classes
`<remarks/>` is missing.
Please sort this alphabetically. It's an alphabetical ordering of these imports.
I think you can remove ENCFAIL as well, as it's not used any more.
Why do we need this method?
I think it should be `@since 7.0`.
Should we remove the todo and add a task/reference to this?
`cleanup` is the last test. It should be after the `lint`.
why this change ?
This is the only change required for this PR, and is a little bit odd.
Shouldn't the length be the same in this case?
The spec is now broken. This validation should be moved to the validations spec.
This file should be removed. We don't use it.
I don't think we should do this. It will cause a problem in the next version, since `original` is not guaranteed to be the same object, so the property will be undefined in the next version.
Why not `auto &begin`?
Why is the release necessary here?
I think we can use `cfg.GetString` instead here, and we can remove the switch?
Why the `list` here?
Can we also test that the table name does not conflict with the partition name?
This is a change of behavior. Before this code, `viewTop` was equal to `workspace_.scrollY`. With this code, `scrollY` was equal to `workspace_.scrollY`. After this change, the code will always return `-1`. Is this intentional?
can we have a more meaningful name than withRetriesLeft ?
I don't see how we should be returning a ScriptDTO by its ID? I think that's the only place in the API.
I don't like this change. It's not a good idea to have a function for filtering. It will be hard to read.
Please add this import in the correct order.
I'm not sure if this is a good idea. I think it is better to throw UnsupportedOperationException instead.
I think we should just remove this method and let the microbatch scan decide.
Isn't this change going to cause a NullPointerException when a claim is null?
I don't think you can do that, you're only testing the existence of `_audit` in this file and you're testing the presence of it here.
nit: import alias
@stuhood this is a typo.
Why not use `content.position`?
This is not a `ctxpropagation` axes.
This change should not be necessary.
I believe we can just use `ctx`.
This should probably be `@Override`?
I think we can drop the `type` here. It is not a JSON object, and it should not be a list.
I don't think it's a good idea to fail here. If dartfmt fails for some reason, the command will fail, but the user will be surprised to see the problem.
Why did you move this import?
This is not needed.
Can we make this a `*bool` and then we can have a unit test that checks the ambient behavior of `cloudDNS`? I think we can use the `bool` to make the tests more robust.
I'd like to see a link to the sign-in page for this.
Why is this deleted?
I think it would be better if the interface was named `Logger` and it is called something like `MakeLoggerForceEnableDebug`.
This seems like a bug fix that needs to be in the new code.
Can we move `editanchor` to the `Editors` namespace?
Style/MutableConstant: Freeze mutable objects assigned to constants.
Should be `(NULL,256);`.
nit: maybe `constexprexpr int32_t partitions = 5;` to match line 175
This is not a good default, it's not the max queue length for BatchExportProcessor
I think this should be removed, as it is not a breaking change for anyone.
nit: can we add some java docs to the constructor?
this is a nice improvement but I'm not a fan of this. I'd much rather see the action be `SEARCH_UPDATE` with the new search object, and then have a `updateSearches` and a `search` action with the same data, and then have the state update the search object with the new data, which would be more efficient than doing a new array copy.
This should probably be an `abstract` method, since it doesn't do anything other than return `null`
I think this should be moved to `client/server/http.go` as well.
I think we should make the constructor readonly.
Please fix formatting.
Please use the same pattern for all these filenames.
This is a change to check if selfcheck. If yes, then it should be moved to `checkTransferAmount`.
I would prefer to have this check inside the `findSSSR` function
this is a breaking change - can we just remove this?
Is this a leftover?
This is just a channel to send to the handler thread, not a channel to the block listener.
You should also add this to docs/reference/config.md
I think it is better to have `ThreadSafe` at least for now since it is used by `LayoutRenderer` in a lot of places (e.g. `LayoutRendererCore` and `LayoutRendererCoreAsync`). The main reason is that we want to support both of these cases, but the main reason is that the current implementation of `LayoutRenderer` can be optimized.
This should probably be `range` not `rangex` (and not `rangex`) - otherwise the `isSorted` check will only ever fail because `rangex` is a generator.
This will also need updating with the new jest config file.

Why is this deleted?
We don't return an error in this case, is that intended?
This is not needed anymore?
This one is useless, as it was added for `ModuleConfig`.
I would say "or it will be redelivered" here. "or it will be redelivered" sounds like the message was sent.
This URL should be updated to `s3://fast.wistia.com/embed/iframe/39245f55fd?videoWidth=653&videoHeight=367&controlsVisibleOnLoad=true`
Is this still needed?
`NotFixTopicCopyBugOption` should be in a separate PR
Can you explain what this is for?
I don't think this works. The `acl.rb` will be compiled to the path of the `h2o` binary, and `h2o.rb` will be included in the path of the `acl.rb` binary.
Is this not needed?
I don't think we need this anymore
This line is unnecessary
I'm not sure if it's a good idea to use "not in progress". It's not a problem with the existing implementation of the property, but we can do that in a follow-up PR.
This will not work for the case where `timeRemainingTicks` was 0, which is the case when `runtimeTicks` was 0 in the past.
I think we can remove this one now, right?
`err` could be nil here.
Why the separate field?
I think we can drop these lines
This should return ROWS_MIGHT_MATCH.
Should this be `raise Exception("cannot find LightGBM library")`?
I think it's useful to print the name of the certificate here, because the name is unique within the namespace.
Can we use `Map<String, String>` here?
I think we should just check for `removed` and raise an error, if it is not.
I think we need `testing.T()` here.
I think it should be `finalOptions.readPreference = ReadPreference.PRIMARY_AND_READ;` to keep the current behavior. The default should not be changed.
Why does this need to be converted to a transform?
This will overwrite all previous validator addresses. I think it would be better to just return the existing validators here, and not update the cache.
I think the previous `longopts[0]` was a typo, so it is now an array of size `longopts[0]`. It seems like this change will be a problem in the current implementation. The new version is correct, though.
This file should have the `js` suffix since it's not a JS file, but an asset.
Can you use the same css class name as the other `googlesitekit-` css class names? This is the pattern we use elsewhere in this codebase.
nit: remove "older than". The duration is more descriptive than "older than this value".
Is this used? It seems to be unused. Also, I don't think we want to use `Environment` and `PackageLoader` here.
This is the only real change.
This was not used, it was only added for tests.
Should this be configurable?
This was removed because it wasn't needed anymore.
this is an unrelated change, right?
This will not work. You should be able to click on the 'Note attachments...' label and it will not be translated.
This should be `gameevent.h`, it's not needed here.
This should be in `upgrade.go` and be called `upgrade.go`, right?
I don't think it is required. `glib` depends on `mem`.
I think we should keep the "change" and "schema" events, since we're now supporting `schema`, and we don't want them to be supported in a single event.
I think we need to update the docs of this method as well.
@d-m-u I added this validation because the name field is now a `String`.
You can remove the whole file.
Is this a new API or a refactoring?
this should be removed
You can also use `clearTimeout(playPauseClickTimeout, 0);` (the `undefined` value will be handled automatically).
The object name is wrong here? The record should be the key, not the object itself.
Why is this call needed?
The type hint is wrong, as the array is a single item, not a list.
I think it's safe to remove this function and use `return true` instead.
I would rather see this logic moved into `_start_cb()` and `_start_hint()` to avoid duplicate code.
Why is it safe to return `e` here and not before?
This should probably go in `src/app/main`
This function is not called by the tests.
I think this is no longer needed
This is the actual fix. The other changes are just adding a new catch block here.
I think this should be `s3.ruby.s3-ruby-example-upload-item-to-folder`
You could do `$useCache = defined('CACHE_ENABLED') && defined('CACHE_ENABLED') && define('CACHE_ENABLED')`
I don't like this change. I'm pretty sure that we need the "next" status to verify it.
This seems to change the default to `localhost`?
I would suggest to make this configurable via a property.
I think this should be `columnSelected && (this.countRows() > 1 || this.countRows() == selected.length);` since `selected` can be a single item (not an array).
This is not needed since you are using strict mode.
@brendandburns This test was failing in a few years, as it seemed to be testing for the `--dry-run` option.
I'd be tempted to do the same for Windows, but I guess it's not that important.
Should we be using `overrides.New()` here instead of `NewOverrideLookup(config.Overrides)`?
this is the only change in this file
Should be >=?
Is `sys` a python 3 only thing?
Can we use `enum` instead of `long` for these three properties?
This seems like an odd place to put it. I think it would be more appropriate in the `pkg/apis/build/v1alpha1/client` package?
this is probably not going to work, because it's in the model, but I think you can do `.find_by(id: user.id)`
This is a bit of a misnomer. I'd call it `transform` instead.
Is this change related to this PR?
This interface is still in use by the query framework
This should be initialized to 1

We need to add this to the config schema.
Why not make this a class attribute?
We don't need this fixture.
@diosmosis is it ok to use the new field here as we are setting the new field in the parent class?

This is a little bit of a misnomer: it queries MOLs and returns the Mols in a single pass. The other method is also called `generateResultSMARTS`, but this method is called `generateResultSMARTSAndQueryMol`. Maybe `generateResultSMARTSAndQueryMol` is better?
I think this should be a method on `TransactionPool`
Why do we ignore the error here? Shouldn't `err` be `nil`?
This was a bug. `restClient` is not set if the client was different from `RestClient`. This means that the client has already been set.
This is still not correct. It's still being deprecated for 2.3, but we can remove the `DeprecationWarning` in 2.3 as we're using it in the next release.
I think you need to test that `driver.switch_to.parent_frame(iframe)`.
This is not a good name. I would suggest `NewTestHandler` or `NewHandler` instead.
This should not be necessary. You can call `finish()` if it's a hybrid account.
Is it possible to check for `context.Canceled`?
I'm not sure what the purpose of this is. It seems like it could be simplified to just `parsedArgs.put`
I think this change is a good one. I would like to get this PR merged first.
I think you should use `s/` here, to avoid any potential problem when you have a string with the wrong case (or something like that).
I'm pretty sure this will throw an Error if there's no options, but it's probably fine. We don't need this to be a function, but can just call `prompt(newMsg, '', function(text, additionalVars, variableOptions) {`.
We should check `!nameMapping.contains(column.getName())` instead, because we are already doing this check in the `nameMapping.getColumns` method
Is there a reason you changed this?
Please add `tmImplementation=None`.
This should probably be `Dashboard.navigate(getProviderConfigurationUrl(id + "Other"))`
I don't think this should be changed to ERROR level.
This import is unused.
We can add a `setReplacePartitions` method that takes the value. It is called by the `Base` `BaseReplacePartitions` constructor. Also, we need a test for this.
Should we just remove the whole file? It seems like we are not using it anymore.
We don't use `send_welcome_email` anymore, right?
I think you should just use the nodeRole string here, instead of the label string.
I'm not sure why you need the `from_definition` function? It seems like it should just be an instance method.
This test will be removed once #3028 is merged, but this test will fail on my local dev.
I think we need to increase the size of all the files, and increase the amount of memory used to load the external storage.
I don't see the point of the else branch here. If the `name` is `None`, then this will just return, right?
I would rename `balanceRecord` to `accountData`
I would suggest to rename the function to something more descriptive, e.g. `wait_until_consumed`
I think we should set it to 2.
This looks incorrect, since `version` would be an integer, but `-1` would be the default value.
I'm curious why you are changing this timeout.
This change is wrong.
I think the `byteCountCommandTemplate` should be renamed to be `byteCountCommandTemplate`
I think we can remove the codec variable now, no?
This is the only place where this class is referenced, so we don't need a mock.
Why not just use a `boolean`?
This should be translatable
I think `crypto?` should be a required option in `stream_get_data`.
I'd suggest to remove this test case as well, as it doesn't make sense to test that a failure is being reported in the error. I'd also remove the `if (code.length()) {` branch here as it's the same as the `if (code.length()) {` branch below.
This should have been renamed to `ProjectKeySelector`
Should we rename this to `AlwaysFlush` to indicate it's only enabled when it matches condition?
Why is this needed? It is not related to the PR description
Can you use the shell syntax here?
Can you add a check here for the actual output?
I think this needs the same change as the old one, but with the new column.
This should probably have a `.` at the end to be consistent with other annotations.
This will require the `InitializeBlockchain` step to be run before the `ReviewBlockTree` step.
* @method int[] getExcludeCodes()
I would have expected the `exitNS` to always be `true`, so that if it's true, the test doesn't need to be run for this function.
I don't think this needs to be changed, this is just an internal config that is used only by the workflow, and not the workflow itself.
This should use `PosixPath()` as a separator. Also, I think this should be `!DirExists(opts.project_root)`.
I think we should just have `tfp_func` here. We don't use tpfp at all, right?
Is this a bug fix?
I don't think you need to export this function if you don't want to use it in `journal.go` files.
I think the title will be empty if the feed is not found, right?
nit: `else` is not necessary here.
This is a bit confusing. The name of the widget is the default. I don't think this is what we want.
Why do we need an interceptor type?
Line is too long. [101/80]
Can you please test a different value than the previous value?
Why not using an instance variable instead?
nit: `++it` would also be more concise here
I think this needs a doc string explaining that it can be used as the key to create a new collection
This is the only place where the error value is used
Why not use `createRuntimeCall("stringToRunes", []llvm.Value{value}, "")` here?
I think this should be `if not tab.is_hidden():`.
Should be in the next block.
This looks wrong. `show_img` is only used when `show_img` is `True`.
This line will be removed once #1337 is merged.
I don't like that this is changing this test. If you're going to change it for all, it should be done in a separate PR.
`Capacity` should be a pointer type.
I don't think that we should be using Exception here. It's not a user error.
This is a breaking change, we'll need to add it to the changelog
nit: remove this empty line.
Is there any reason for this to not be a property?
Is it a bug fix?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
We should log the exception, not the stack trace
I'm wondering if we should have a `get_current_device` method. It might make the code a little easier to read and more readable
I think we should be able to remove the `FLUX_SECURITY` constant.
nit: `sometimes Manifest readers can reuse data file instances` -> `sometimes Manifest readers can reuse data file instances`?
`if (idx > 0) {`
This should be item.record_start.
Why remove that?
I think these are unused imports
nit: remove the blank line here
Why this change?
I don't see why this is the right way to do. I think we should release the ret after we are done decoding
This is an abstract class that is used to create two Confirm dialogs with two callbacks. The name of the method does not reflect that.
This is a little unfortunate, but it doesn't have to happen in this PR.
Should we have a default value here for the protocol?
This line can be removed
Is it worth having the array size of the `Path`?
This should be `http.MethodGet`.
The peer chooser must use RetainPeer to obtain peer instances and return those peers to the outbound when it calls Choose. The concrete peer type is private and intrinsic to the HTTP transport and returned.
I guess you need to change all the other places too.
Please add this parameter to the docstring.
I'd rather use `ioctlsocket_nolock()` here.
Please do not use * imports.
"the tail probability" -> "the probability"?
Can you open an issue about this?
why is this needed?
I wouldn't delete this one, it will be a breaking change for the future
I am not sure that it should be a separate feature. We should not be able to have two modes of rollback. I think we can just have two modes.
Is it possible to have a dependency version in package.json but not in the package file?
This method can be removed since `GetSecretValue` is not used anywhere.
Shouldn't this be PTHREAD_NUM_TICKS?
I think you need to remove this file in a clean-up, as it was previously. It would be nice if you could avoid the need for the file to exist and then just check if it was deleted in the cleanup function and only remove it if necessary.
I don't understand why we don't use this lease.
I don't think we want to have the comparator here.
This looks weird. What does `background` and `color` mean?
Should we also change the method name?
This import should not be here.
I think that html_safe was there for the sake of security reasons (i think it can be deleted now).
This should be an enum, as it's used in many cases.
This is a little confusing, since we are actually using this as the heartbeat tag here (and the ones that we have below)
Why is this not a part of `addUnusedShapes()`?
I'm assuming you didn't mean to commit this?
I'd rather we keep the `cmd` here.
This should be 1 not 6 right?
I'm not sure that this is needed here. If the bond is not specified, the order is 0.
This should be `||=`
This seems like a pretty long column name, could you change it to `KEY_MINIMAL_DURATION`?
Why are you doing this here, instead of in the `server.go`?
nit: can you remove this empty line?
Is there an issue tracking this?
I think we can just remove this method entirely, and replace it with `getCallbackParameter`.
Why do we need this interface? Isn't it just an interface{}?
I don't think that's true, since the extended types will be the same for all nodes.
I think we need an update to the csv report for this change
static is already imported above
I would suggest to move this test into the other element. I think we should not do anything special with the inline text.
This should be `toMillis`
This is a bit confusing. Why not use `flux_subprocess_aux_get()`?
I think this is the right thing to do. We can get rid of it entirely.
I don't like that we need this method in `AdminController`
Is this change needed?
This is a bit of an awkward way to translate this, I wonder if `<span>` should be used here instead. `<strong>` is the text for a single word.
You can use wlr_xcursor_theme_create_default() instead of "default"
This could be `protected abstract`
Why not just use `len(self) == 1`?
This will be removed before the release, right?
`Cpu is a limit for compute resources`
Why not just "index"? It seems more logical than "index".
Why is this needed? I don't see any usages of it.
I don't think we want to change the interface here, because it's not used in the code. I would just remove this method
This is not a public API.
can this be `from pandas.core.algorithms.generic import GenericMeta`
Should we be using the latest template here? I think it should only happen on the main section
Why this change?
Why change it to UInt256?
This interface does not seem to be used in any of the implementation classes.
I am curious, do you have any idea how to make it more helpful?
Should be false for old data files?
Why not use Blockly.Css.colours_ ?
Can we use the `content_for :head` helper here? I don't see a need for it to have a `content_for :heading` method.
I would use the `prompt` library for this, but I'm not sure how to best handle this.
I'm not sure about this line. It seems that `loadDeleteFolders` is called when a user is disabled, which means it is not loading the user banner. It's possible that we don't want the user banner loaded if the user has disabled. The `UserBanner` is only used by `deleteFolders` and `getFolders` to get the folders that are not in the `Folder` list yet. I'm not sure what the best solution is, but this is the only thing I can think of where the `userBanner` would be loaded when a user is enabled.
I think we need a test for this change, it should have a unit test for it.
nit: `schede ma` -> `schede`
Why was this changed to 2?
Please don't use __u8 here. It is used in the function to determine whether the level has been dropped, and the function returns true when the level has been dropped.
I think we can remove this now that this is a query span?
Why are we skipping this test?
Shouldn't this be `EINVAL`?
This is a duplicate of the method in the base class, so I removed it.
I'm curious why we are using this `prepend` method instead of just `filter()`?
Can you add the word heap snapshot to the name?
This looks like a bug fix.
I think this will break `atomic.go` test.
Why this change?
Why not remove this code?
I think you can remove this
I'd be happy to see the default factory defined in a factory_girl.rb file. I'd prefer it to be explicit.
I don't think that's the right way to do this. The client will not be able to upgrade the TLS version of the client.
I don't think this is right - the method name is not nullable, it's just the header.
Why do we need to cast addr to uint64_t?
Why are we removing those methods, if the interface is not used anywhere else? I would suggest we just delete them.
Why do we need this cast?
Should we check for a `/`, `\`, `\` character here to make sure we're getting `/Dockerfile` from `path.Join(os.Getwd(), "Dockerfile")`?
Why is this not part of `ddev_default`?
Should be nullable
Why do not return an empty string here?
nit: `SkipDevices is a boolean flag that allows to skip configuring device permissions`? It would be good to be consistent.
I'd prefer if you used a single variable to store the result of `get_if` rather than two separate `struct.unpack` calls.
We can remove this line.
This should be a local function in `QApplication` and `self._set_connected` called from `connect()`.
I don't like this change. We should just remove the `create_no_window` option and always create a window.
@tgroh Can't you just add `MethodInterface` to `SurfaceTransformerContext`?
I don't understand this part of the change.
I guess we could use `ShapeUtils` here instead of creating a new `Shape` instance.
This is a breaking change for the users. The default is `true` so users can't specify `--profile` without it. I think this will break them.
I don't know if `errorObj` is used anywhere in this PR, but if it isn't I'd recommend using the `error` prop directly here.
@shopsys, @jolelievre, @shopsys, please use `\LogicException` instead
I would rather see this function defined inside the `User` module, and then be called from there. That way we would only need to do the `if` check once in the `User` class, and then just have one place where this function is defined.
Shouldn't it have destinationClusterIP as well?
Nit: I don't think these are used anymore.
`queue` should be checked in the constructor
Should we add this ID in css?
I think it'd be more readable to have `if !os.IsExist(statErr)` here.
Is this an issue with the existing code?
Please don't use `import` imports unless necessary.
Why do we need the logEntry type?
Shouldn't we use the new constant here?
I'm not sure about "present". The word "present" implies that the value is present, but the word "prohibits" suggests that the value is present. What about "This field must be present"?
I'm not sure about this, but I would expect this package to have its own `npl` package.
I'd rather not have this constant here, since it's only for debugging.
I think this can just be `*virtualDiscDesc.CapacityAllocationUnits`?
I think the assertion is not necessary, since the data is already in the dict.
I'm not sure how this is related to this PR. It looks like the map is a `mkMap` now. Why did you change it?
I think you can replace this with `location.left + watchdog.cancellableSendMessage(self.obj.windowHandle,SCI_POINTXFROMPOSITION,None,offset)`
We could probably make the same check on line 418 as well, and then return an error with the appropriate status.
This is not a scope, is it?
This is not really necessary, but I'm not sure how we want to ensure that the approvals are still processed.
why this file change?
@johnsaigle this is the fix.
This needs to be fixed in the `scapy.py`
This line seems unnecessary
Why this change?
///
I think it should be `\InvalidArgumentException`
I think it is better to keep the logic the same, so the code is simpler and more readable.
I think this can be a `const` instead of `var`.
Shouldn't it be a `double` as well?
This should be removed
I don't think this is a good idea. This should always return true, even when a component updates.
This test case was failing with the original code as it was not checking that the field wasn't present.
This should be `allowedPostRequests`, not `allowedPostRequest`.
This method should be `abstract` too
@sravfeyn is there a reason we have to update this?
This change is a bit odd to me. I thought we were going to move all mail stubs to `Mailer`? I think we should keep this one as it was. I'm not sure what the best way of doing that though.
Should we make this configurable in the `ApplicationConfig`? This would help to keep the capability more explicit about what this is about.
Shouldn't this be defined in `actor.h`? It's only referenced in `pony_actor.cpp`
We should add a query to check if we can actually submit the post. Otherwise this is going to be a no-op. We should add a TODO to add a query to check if we should do something with the gas price and gas limit.
Can you add a message to the constructor of `SIN` that `payload` is of type `ArrayBuffer` or `BufferView`? I would prefer to use the same message for both cases.
I think we can use this prop on the `<div>` instead of the `<p />`.
`t1 = time.time()` ?
I don't think we want to do this in the `if` block, but rather in `else`, so this is fine
Nit: "a builder that references this".
This is the actual fix.
I would keep getProcucers as this is an implementation detail
I don't think we need this anymore, the node is relaying on the network.
Should we also add block number to the log message?
I would put `reason` as a parameter in the `Cancellation::Create` action, so that we can use it in the view, and it wouldn't require a change in the controller.
File is not `goimports`-ed (from `goimports`)
We should add a `# Purpose` section, to make it more clear in the future.
I would have expected a `.strip` here too
Is this change necessary ? I would have expected the version alias to be 1.7.4.
I would rename the test method name as well. It is not flexible anymore.
Nit: Undo whitespace changes in a file.

this file should be removed
This function does not seem to use any locks.
This isn't needed.
This use statement is not needed. The `EventDispatcherInterface` and `EventSubscriberInterface` can be removed.
Shouldn't we add `@since` tag?
Should we add this to the GDI list above?
I think this can be a `public` property now
nit: unnecessary change
This seems a bit hacking... Why not just move the `shallowCopy` call to this function, and let `opts.Accounts` handle the copy of the mappings? That way we don't have to do it for every `shallowCopy` call.
Why not just return the status?
I'm not sure how the regex works, but I don't think this is needed.
I'd rather have a `replace=` flag in the message that says `True`, so it's clear that it's replacing a string.
why do we need a new random string?
I think the expectation should be `>=`, not `<`.
I don't think that this is a good idea. It will be a problem for many users because we are not sure that the user will see it.
This should be a property
We should return true here, no?
This is not needed.
Is `sports` really required here?
I don't think you actually need the `timestamp` field since you're using `self.timestamp = timezone.utcnow()` above.
I would prefer to keep the original list and add more to them as they're not needed.
I'm not sure why this enum is added here and not in the other two preview types. Can you elaborate?
I think it's a bit odd to include `use strict` inside a function call.
Should the value be "prefQueueFront"?
I would rather see a default value of `nil` here. It's a little more clear, especially given that `nil` is not a valid value.
I think we can get rid of this hack.
Nit: This should probably say that we're using the default.
I would prefer not to use `Qt` here, but to use `Qt4` instead. I don't have a strong opinion, so I'm not sure what's better.
This file should probably be deleted.
Don't put your code logic in `main()` function. Use `main()` only for the driver code
This is not the correct way to do this, but we can do it later.
This is a little strange to me. If you have a port in your IP range, it is going to be the port that has not been assigned. What's the error?
The Java 8 version has been deprecated and replaced with the Java 7 version in Java 8. Please add the Apache License header here
I don't understand why we would have to change the verbosity of this log. The capacity is just the total size and the bytes of the database, not the total number of chunks in memory, right?
I am not sure we should have this prefix. It seems we can just call the property 'azkaban.job.link'
I don't think we should change this.
This is a change in behaviour, but not a change from the previous PR
The original description of the snippet can be removed, as this is not a Java SDK.
Shouldn't it be `ResourceModel.isSupportedAudioMimeType(mime || resource.mediaType) || ResourceModel.isSupportedImageMimeType(mime)` ?
I think we should also add a migration to change the value of the column from string to numeric here
I think you can use `typeof type === 'function'` here.
"toukyou" should be "transform"
I don't think that the device_id should be passed to the Caffe::Brew() call. The Brew() call is already doing that, and the device ID is already set by the caller. The device id should be set when the solver is run.
What about the case of a single multi block?
I'm not a big fan of the extra backslash here. Can't we use `"` for multiline if?
why remove it?
nit: `Failed to parse namespaced name`
@johanstoka I am not really happy with this. But I am sure there is a better way to do it.
This looks like a bug, and should be fixed.
I think this can be combined with the next one, as the `db` package is already imported.
I think you can just use `RUN` instead of `RUN_FAILED`
This should use the table's properties
@kaxil @wedaly I think this is fine for now as we'll only load the logs from previous runs.
Please sort this alphabetically, and add a new line between each of the stdlib imports
Is this still necessary if we move this to the `Start` method?
What is the point of this change?
This is a little hacky but it's fine.
I'm a little confused why the `name` is being used here.
This is a bit confusing, but it doesn't matter.
Please also add an empty line before this test.
Shouldn't you be able to do the same in `lib/p2p/node/p2p_node.go`?
This should be kept, but not removed in favor of the new one, which is also a bit weird to me.
Why not `--review-status="confirmed"`?
I'm not sure this is the right approach. This will add a new exception to the list of exceptions we have in the client, even if there's no exception to add here - is that what we want?
Should we just make this an `array`?
I'm a little undecided on how we could do that without allocating a new vector. I don't really like this because it would make the code simpler.
This needs to be removed in this PR. It's still being used in `NewCryptoSetup`. We should probably have a `NewHOLExperiment` or something.
This is a little awkward. Why not simply `value = ev.target.checked`?
Why are these changes removed?
Is there any way to do this before the script is loaded? This would allow us to avoid the overhead of calling the script in the middle of the run
I don't see how it can be None
I would suggest to add `EXPECT_TRUE` and `EXPECT_LE` in this case.
I'm not sure that this is the right thing to do. I think the problem is that `__asm__` is not guaranteed to return an int (which is not the case here).
This is just to remove the `bytes_to_escaped_str` call.
This should still be `==`.
Shouldn't the `in_person` be translated?
I think it's not needed
Is it necessary?
I think this file should be deleted?
This is missing `initI2CClock`
Final newline missing.
I'm not sure what the best thing to do here is. This should be handled by the WebServer plugin. It is also possible to have a WebServer plugin that is not a plugin.
Why is this change needed? This looks unrelated to the PR.
I'm wondering how we can make this a scope, as this is the only place the scope is used?
This should never happen, right?
I'd rather we just put this in the queue and not the api layer. This is not an API layer and we shouldn't be exposing it. I'd prefer to keep it in the interface.
This is an example of where we should be able to use the london ETHs state.
Should this be set to `true` instead of `False`?
why is this added here?
Is this file writable on the fly? If so, should we change this file to be 0655 for compatibility with existing users using a different permissions?
This seems like it should be the other way around. I think this is more of a note that should go into the PR description.
This is not a very clear function name. Maybe "mse_get_ymm_caller_saved"?
I think this should be `i18n`
Why is this necessary?
This is the only place where we check `eventListenerCount`
Please add an empty line before this one, to match the other ones.
Nit: move to previous block
This will fail if `type_files` does not exist.
You could just use `(ev->flags & ASIO_DISPOSABLE) != 0`.
I think we can just set the `MetricReaderType` directly to Periodic and not have to pass the whole `MetricReaderOptions` in every exporter?
Is this error code returned from a client? It is not returned by an MD write operation.
Why not reuse `DataFrameError` in `SparkGroupByError`?
Please don't use underscores.
This is a breaking change. I think we should not make the class `public` and make it `final`.
this is a BC break
I don't think this is necessary, since it is done before the conversion is done.
`g_hip_visible_devices.erase(g_hip_visible_devices.begin(), g_hip_visible_devices.end(), (i - 1)) != g_hip_visible_devices.end()) continue;` (or something else?)
I think we should have a counter here for the `zpoolState*` and `zpoolStateUnknown*`, otherwise we will have a metric that is not present for the other states.
This is not a very useful name. Maybe `tier1_team?`?
This is a good change. But I'm thinking we should use `@token.token` here instead of `ApiToken.find(approval.id)` so that we can get rid of the `.find_by`, as it's the same query.
why this change?
The focus should be set for the frame as well
Why the change?
I think you can just remove this option, and let the `server` handle it?
I'm wondering if it's better to use a enum for the possible values?
I think this should be the other way around.
I'd rather have a default limit for the new memory limit.
I think this should be renamed to 'CreditBucketPool' and 'DebitBucketPool' to avoid confusion.
This change is wrong. I don't think this is correct.
I think you should keep this line
Why did you change this to use the Twig Environment?
This is the only change that is required to get the tests passing.
This will break the `JSON_FORMAT` option for the current format.
why do we have this in the `manifest` package?


Is it possible that the returned `List` will always have a type of `T`?
I don't know that this is right. The `requests_cached_late_votes` count is 3.
this is the fix
@h-kataria, I am not sure if this is a correct test. The test is not run on Windows. The test fails on Windows with the conditional on `include_file` and I don't think it will pass on JRuby on windows (because ruby won't run this conditional).
This field is never set to `nil`?
This change is not necessary, `VerifyFingerprint` is a default implementation that does not have a fingerprint
This import seems to be not used in this file.
Why do we change the proto names?
why is this not `info` anymore?
Isn't it the same situation where we don't allocate the buffer and return error?
I would prefer a single overload with `destination` as an arg instead of a separate overload that does not need a cancellationToken.
Why are we setting the Xattr here?
I am not sure this is the correct place to set the position. It would be better if it was moved after the `if` block
`name` could be `const` here, so you don't need the `.c_str()` call below.
I'm not sure if we need this package, since this package is already included in `nodecontrol/package`.
@mcollina I'm not sure about this line, as we don't want to use the node's `id` to find the label. I think this is fine as is since the node is not an `id` but rather a node.
This is not equivalent to the default, but I think it makes sense.
This should be using a constant, not a magic number.
This can be `final`, right?
Is there any particular reason to skip this?
I think we can drop the `filterTimeout`, since we're already using the `filter` for a long time
Is this still needed?
We don't need this anymore
Isn't this the wrong way round? You have to add the question and answer variables in your template.
nit: I think it would be good to have an "Application" type for this, rather than "best represents your application".
I think these links should be updated to match the actual docs, not just the docs
nit: `it is important that the returned list is sorted in ascending order. The returned list is in ascending order.`
I'm not sure this should be an interface, but the interface is public, so it should be safe for the caller to be aware.
I think it is okay to remove this assertion.
This should be an error, not info, since we have already logged it. The user is supposed to be able to understand what happened and how the problem is not solved.
This is the new import for the `stdlib` packages in this PR.
This is wrong, the class name should be `\Shopsys\ShopBundle\Model\Article\Article`
nit: "is not supported" -> "is not supported"
I'm not a fan of this change - the only thing that matters is that we're now using a file handle for the lifetime of the process, not a file object. I don't think this should be changed unless there's a reason to do so.
I'd rather use the `django.contrib.auth.headers` constant here, instead of defining it here.
nit: this can just be `if customClientAuthentication != nil {`
Remove this empty line
Space missing after comma.<br>Space missing after comma.<br>Space missing inside }.<br>Space missing inside }.
This should be `sentry`, not `sentry.MockSentry`
I assume we're no longer keeping track of how long we're in the idle state?
Unnecessary spacing detected.
Why change the version number here?
Is it possible that `getAtomMapNumber` returns `0`? If so, we should add a null check.
I'm a bit confused by the name of the flag, since this isn't really the disk, but rather the disk itself. Maybe something like `ramdisk_enforced` or similar?
This seems wrong to me, it should be batch_queue_mpi.c, right?
throw domain_error(description)
I think this should be `go run ../../scripts/generate/mockgen/ssm_mocks_test.go`
This looks like a formatting change. Can it be reverted?
This should be "Not Approved"
I don't know if this is the correct way to handle account id. If it's not, then the code will be a bit confusing for the reader. I'm guessing this is the same logic as `showAccount` but I would expect to see `accountID` as the second argument here.
@balloob @joshuhn Do you have a suggestion on how to fix this?
Should we add an `if opts[:version]` here?
`%" PRIu32` -> `" PRIu32"`
Is there a reason why we do not want to replace `phOpen`? It seems to me the intent is to replace `phOpen` with a close if the `phOpen` or `phClose` are both empty and not null?
I'd rather not do this, since this function is called for all actions. I think it should be a function that returns a list of all actions.
@mgaeta I removed this as this is only needed in the Windows driver, which is the case for `python_requires`.
I think we want to set this to false, so we don't run into issues on CI
Is this really necessary? I think it's only used for the `@viewable_subscription`
I don't really see how these hashes are actually used? Is it just to be sure the pre-verified block number is the same as the hash of the mainnet block?
This one was missing a comma before the comma in the function definition
nit: I think this could be a `Bool` instead, since the `bool` type is a pointer.
Isn't `javax.validation.constraints` already annotated with `@NonNull`?
This method is a bit confusing. It doesn't look like `oldestSnapshot(Table)` is used for anything. It looks like the method is only used for testing. Maybe just `findOldestSnapshot`?
This should be a function, not an API
I think this can be `transport.New`
This doesn't look right - I don't think the name will be the same as the name of the application. The name will be different in the case where the application is a different version.
nit: add a line break between these imports
I think you need to use `resp.close()` here, because `self._conn.close()` is called in a `finally`
This line is redundant since `onFinished` is a noop.
Why not just use `retry: true` ?
I think this should be reverted?
Can be removed
I think this can be simplified now.
Please add this to the list above as well.
Why do we need to check for maintenance mode? I'm not sure if it's possible, but if it isn't, I'd say it should be a panic, not a log.
@lhecker - this change was necessary to make the test pass
Why are there two different functions?
I'm not sure this is a good idea. We'll need to do it for every stream ack that we send. The way I'm seeing it now, I think we should just always send the message to the client (which will have the same state).
`engineTools` -> `toolsPanel` and `engineTools` -> `tools`
I think this should be in the `user` model
This line is a bit too short.
Please remove the trailing space. :-)
`andWhere('p.id >= :lastProcessedId')` should be better I think
This is not a name only attribute, but a capability name. I would suggest using `appendNameOnlyAttribute` and `appendFiatfluentdCapabilities`.
We need a docstring here, otherwise the function doesn't really do what it says it says it does.
I think the naming of this method is a bit confusing. It's not removing a collaborator, it also removes a team member. How about `remove_github_repo_member`?
Why is this needed?
I think we should also check that the classes have the right names.
Shouldn't this be a static method? I think it's only being called here in the `BaseController`
I think this import is no longer used.
I think the `||` should be `||` instead of `||` because the `||` will always evaluate.
I don't think this change is necessary.
This is fine for now, but I think we should do this for all workspace types, not just reaons.
"...re-read into a non-finalized index. This filtering is used when rebuilding..."
`++count` is unnecessary
Why are we removing this ?
Should we just panic instead of panicking?
nit: can you put this in `TracerConstants` ?
nit: `UpdateDeviceStatusBuffer` can be a `const`
Is it possible to have this be `Layout<long>` instead? I believe it's better because the user can easily change this.
Is this necessary?
I would prefer to see a mock of the API that does nothing if the request is empty
This should be `return NULL;`.
I don't think this is needed, since the default is already false.
This should be change.Attachment.Status.String()
We can use `date` instead of `date00` here.
I'm a bit confused by why it is required. If it is required for execution summary and the user doesn't specify it, then I wouldn't expect this to be true?
I would just check for `refs/heads/`.
I think we should keep this for now.
I don't know how much of the code is written, but the ID was wrong and we shouldn't use it
This is no longer a counter?
@jpechane, do you recall why we need CaseInsensitiveMap for maps?
I would prefer to see this as a `TryGetValue`
This is the same code, just remove the FIXME.
This should probably have a `const bool` check
I don't think this should be in the yaml file.
This should not be necessary. The volume will only be created if `sc` is set.
Can we make this a pointer and check if the value is valid before passing it to the API?
I don't understand what this changes. The first record of `DeletedLink` should be `deleted`, not `created`
F401 'iris.cube.CubeList' imported but unused
We don't need to do this, if we don't want to return the error, we can just log it.
I think we should test that it works even if you are in a user's group.
I don't think we need to do a `uniq!` here since we already have a `uniq` method.
"In the case where the CA is an intermediate" -> "If it's an intermediate", right?
We should cancel all the prefetches when `op.Unrefs() == nil`.
I think we should be consistent and use `error.Error()` instead of `fmt.Sprintf()`.
We need to add the new endpoint to the README
Isn't this a breaking change? We can't make it change.
This should be `import qutebrowser`
@bradymiller @mikejolley this is a new CSS class to add when the user clicks on a grid header. Is this the right place to add this class?
nit: remove this space.
Should `preserve_xmm_caller_saved` be `if (ZMM_DISABLED()) return;` instead? It looks like the original code was also doing the same thing.
Should this be `@see`?
I think you should be able to remove this null check.
I don't think this is needed
Nit: Remove extra new lines
I'm not sure about the name of this one. The name is very specific to the task group (and I don't really like that it's generic enough). I would rather see it be something like `copilot-task-default`, but not sure if there's any other reason not to.
I'm not sure this is needed. I think it should be done at the beginning of `eventProxyCapture` and not in `eventProxyCapture`.
This should be a new constant.
This should be `strncasecmp(val, "ON", len)`
nit: `// If we're in minimal mode, let the block cache remain nil to ensure that the user doesn't try any data reads or writes. // If we're in minimal mode, let the block cache remain nil to ensure that // the user doesn't try any data reads or writes.`
I think we should add a note here that the second argument should be a tuple.
This is the default patch check we're going to use in Baseline.
@michalkurka @lucaswald @kokkos-nvidia what do you think?
Why did we change the default here?
Can we have a test for this?
Why is this needed now?
This should probably check for the error and only create if it is non-nil.
This file is the main one I'm not sure we want to add to assets? I'm not familiar with the code base, but is it possible to move it to `assets/js/googlesitekit/` or something?
@jreback I think you missed this one. The `ReadType` should be `FileModeType_ReadMode`
What about using a pointer for the placement?
This is not safe, since `c.Environment` will be nil if the lock is held, but we can check if `c.Environment == nil` before setting.
This should be a `Set`
I don't think we need a migration here - the migration will be applied to every database in this folder. If we do, it should be handled by the `migrate` command, and not on each database.
This is a bit odd to have this method as an interface, since it has only one use and doesn't have any other methods.
Can we add `if (it.endBound_.rel_ != RelationType::kEQRel)` condition here?
I would prefer to call `Config().SetchainID(cfg.Chain.ID)` here.
Is this the same as the above `if (timeoutMilliseconds == Timeout.Infinite) ` block? Or is `timeoutMilliseconds` the same as `this.exporter.Shutdown()`?
Shouldn't this be a constant?
I would prefer to call it DEFAULT_VERSION instead of DEFAULT_REVISION since the default is 0.0.0
I think we should not have this logic in the `else` branch. We should have the same logic in the `if` branch.
I'd prefer to have the `checkLayout` function in here, since it's not a generic function that does anything.
I'm not sure if this is needed, can we remove it?
Why change this?
Shouldn't `reqid` be a `*url.URL` and not a `string` (which would be an `int`)?
nit: could we keep the `messagesSentLabel` here?
Can we make this type `CertAuthorityFailurePolicy` and then we can use it in the tests?
nit: missing space before %i
This will need to be `private_key` as it's the SSH key
Can we make this `internal`?
This doesn't look right. The priority is set in the flowbuilder itself, but it isn't actually used anywhere.
I think this is just a formatting change, but it's fine for now.
I'm not sure if this is correct. The `makeDir` will be done in the background, so this will create the directory in the background, which will not be the case for the user. I'd prefer a way for the user to be able to write to the directory and then call `makeDir` directly.
I think we can use the same pattern for `buildid.go`.
This should probably be `btc.testnet`
I would prefer to avoid using io in the cli.
I think this should be `static inline`
Why is this necessary?
This is a bit hacky, but the code will be cleaner if we just add a helper in `torch/utils/onnx`.
This is not an AWS error, right? I think we should return a more specific error here.
I don't think we need a state for this
This should be `params[:page]`
ineffectual assignment to `err` (from `ineffassign`)
I think this should be a no-op, since the cache isn't used.
This can't actually be nullable, as we have an `@internal` property on the class.
I'm not sure this is the correct fix.
I'm not sure why we are not doing this with `net/rpc`? It is a very lightweight thing that the monitor is responsible for managing, and the implementation doesn't seem to be very useful here.
this test is testing for a different behavior. It should be testing the same behaviour as before, but it should still verify the correct behavior
These two lines seem to be repeated. Could we extract them to a helper function?
I think this can be removed if we always clear the cache? (I guess we can remove it later)
I'm not sure if we should have a test here.
I think it's better to put these in an action. It's easier for me to understand what this one does, especially since there's nothing in between.
Why this change?
Should be TimeSpan.FromMinutes
I think this can be just a single `const`
I don't see how this is needed? It is already included by the other components. Also, I'm not sure this will be needed. If the container is not registered, it won't be registered.
I don't really understand this change. It's a small number and the value is always a float, so you're going to get double precision, no?
I think that this line should be removed. If label and text are both blank, the condition won't return true and the code will crash with `Error: invalid-value <span> or <em>undefined</em></em>`
I think you can remove the tax_engine from the options.
I think we should return the error here.
I think we should only load `libraryController` on app load.
I think it would be better to have a separate method for this.
Is this change necessary ?
Should this be `SetDefaultValuesAndUnsubscribeFromEventSubscribers`?
This error was not being used anywhere.
I don't think it is a vectorized expression. This should not be needed here
This should be `abort(0);`
This is a bit hard to read, can you make the `lambda_func-{}-test.py` be named `test_create_lambda_function`?
Should this be a `no` option?
nit: space after //
I'd prefer if this was `mock_entryv3` for clarity
Why do we need this?
This is not a valid docstring. It should be the type of report.
I think this will cause problems if there are more than 1 icon. You could check the length of the element and add `i` to the class instead, or even better, use `querySelectorAll`.
This seems to be the only thing that should be here?
This test doesn't really test the functionality. It is actually testing the functionality of the hot node.
nit: I wouldn't bother using the channel as it is not really needed.
Why not just `multi_backend_monitor_destroy`?
I don't think this will be used, so please remove it
Use the new Ruby 1.9 hash syntax.
Why is this being removed?
I think we should change the name from Delete to Pop, since we don't really need to keep track of it. I think the original name was correct.
I think you can just remove this method altogether and inline `step_status_icon` directly. I'm not sure if there's a better place for it.
This line is the same with line 526.
This will create a directory even if it does not exist?
I don't think this is needed
Is it safe to destroy both tablest_tool and libinput_tablet_tool?
Is this TODO still relevant?
Why not `props.multiple`?
I don't know why we have this, but if this is needed, can we delete it?
I think it is better to have the spin script resolver be part of the configuration rather than a property of the process.
I don't think you need this line.
Is this a constant somewhere somewhere? If so, it would be better to make it configurable.
nit: you can just `return number` since we return it anyway?
Should we be using `.find` here?
I think this should say "or {@link Keys#ALT}, {@link Keys#CONTROL}".
Can you please add a TODO here to remove this field?
I guess you want to use `self.suppress_file_handler.is_suppress_file_present()`, no?
I think we want this test to run on all the addresses, not just the default one. This test is not really about the default payer.
I think that `credentialsSecretRef.Name == ""` is enough. If you want to allow `credentialsAssumeRole` to be set to an empty string, then the check for `aws.CredentialsSecretRef.Name != ""` can be omitted.
This should still exist, since `LetterOpenerWeb::Engine` is not a DevServer-only thing.
>AlwaysOffSampleSampler [](start = 24, length = 23) I'm not sure if we should rename this class. I think it's better to have it be named 'AlwaysOffActivitySampler'.
I think you need to add `|| len(replacement) == 0`

`NotSetError` is not a great name for an exception.
Why not just remove this line?
These should be renamed to match the events names (e.g. `VarEdit` -> `VarRename`).
This is a breaking change, but it is not a blocker for me
Nit: I'm not sure why we have to wrap this. The line break is fine but I'd be happy to remove it if it isn't necessary.
I think this is the wrong class. The writer should not be responsible for writing out the data to the segment.
Should we use `self.invalid_encoding` here?
@njx I changed the type here to `enumerable` because I think the hash is not `string`-able.
Should we add some note that this is a deep-copy?
Is this needed for the case of a run without a scheduled event batch id?
Can this be moved to the base class?
##
nit: can this `if` just be removed and `tail_` initialized to `null`?
nit: this can be renamed to `syncPodEntry`
I think it's a bit strange that `:delete_if` is a method that has a `:empty?` method. I'd rather use `has_key?` and `delete` instead
Why was this changed?
I think it should be `(?:onfail)` to match the case where `onpass` is set.
Can we move this to a new endpoint `/se/grid/newsessionqueuer/sessionQueue` to be consistent with other endpoints?
Why was this changed?
Is this method necessary?
Whoops - I think you need to update the doc for the `ServiceMonitorSelector` as well.
I'd like to see some tests to cover this.
I think it is ok to change the value of `1` here since it is not related to the change
This will be a bit spammy if someone is running in debug mode, as the code below won't be logged.
This is not needed, we can use `fetch` directly.
Should we add a list type to the `map`?
Layout/AlignParameters: Use one level of indentation for parameters following the first line of a class.
This could be done outside the synchronized block.
I think this should be `updateTableCapacity` as it returns the updated capacity in a table.
This seems like a good candidate for a list. I'd rather have a list of functions, but I'm not sure if this is the best way to go.
Shouldn't this be "The folder already exists"?
I'm a little confused why rdmolops is not included here.
Why wait? The file descriptor is still closed.
I don't think we need this change, since we're not setting a default.
Can you use `sortIndex`?
This line should not be needed anymore.
I wonder if this should be `newResolutionOp`.
this is not correct, as the filter clause is not the only one in the query.
Why `int` is changed?
I think you can use the pattern you use in the other PRs: `var str = id.Substring(MsDataFileImpl.PREFIX_PRECURSOR.Length);`
I don't think that's correct. It will insert only for local preconfigured peers.
Why are you removing the copyright?
I think we can remove the re import as well
Why not set `ProcessLabel` when the keyring is created?
I think this is a copy/paste from the other transport descriptor.
I am not sure this works. I would expect to be able to run a script without the outfile
Why the `,` is needed?
This change seems to be unrelated
I think the logic here can be simplified to just `applyMode == hivev1.SyncResourceApplyMode`
This is an internal release so we don't need to add this file to the release list.
We should also check the `conf.RouteConfig` here
Is it possible to add `<inheritdoc />` to the interface?
This import should be removed now.
I'm not sure if this is the correct fix. The problem is that we have to do a `typeof(data) === 'undefined'`, because this function returns `undefined` if the parameter is `undefined` and `typeof(data) === 'random` otherwise.
`if ($class)` is not necessary
This is a change in behavior. Previously if the message object had no field masks, then only empty values will be serialized. Now, if the message object does not have a fieldmask and all the fields in the field mask will be serialized.
`@return a new key current rid+1.`
`ifPresent` can be removed
I think we should move this down to the k8s.io imports.
I would prefer we keep it as a string and use an enum here instead of an enum value. The reason is that it's easier to change the signature of a method, so the code is easier to maintain and more flexible.
I guess this is fine since we have a constant for it.
I would prefer to return an error in this case rather than return an invalid argument.
This can be removed.
Should this be an error or just warning?
I'm wondering if this spec is necessary. What is it testing?

Please remove this line and just use `config.val.url.open_base_url` directly.
I think these were moved to the bottom
I think it's better to use `Graphene` convention here. We have been using `Graphene` in other projects.
This is unrelated change
I think it's better to have this under `src/core`
why was this removed?
This is not correct, the `scope` is not an inner field.
Why do we need `unordered_set` here?
@bricelam - I think this is the correct class name to use as it is. I would suggest using `CosmosModelElement`. `CosmosElementType` would be more appropriate.
Why change the name of the method? This is not the state manager
This method looks like it's only used by the MetaClient. Could you move it to the cpp2-specific file and call it from there?
This is a bug in the old test, since it's comparing the same dict with the same values.
I'm not sure about this, but I don't see why we need to do this for wildcard atom. The idea was to not allow wildcards in mols. If I'm wrong the atom should already be marked as wildcard.
This test doesn't really make sense anymore.
I don't think this method should return a boolean value, it is returning a boolean that is not true for any errors.
Why is this not a warning?
Why this change? The result is stored as nan in the worker pool.
We can probably remove this.
I think we should log something in the executor log. We can add a warning here.
This should be in the `src` folder
Why not set it to `2181`?
This should be removed
this is just a cosmetic change, and is not related to the PR
This seems to be unused.
# TODO: Remove this when `Pandas.Index` is removed.
I think we can remove this. We don't need it anymore.
I'm a little concerned about this. The default for `Region` is `us-east-1`. Is this something we could use for AWS China?
@Tratcher: This seems to have been a mistake that was fixed in #2799.
I think this should be named `footer_text`.
I don't think this is needed, since the `Puppet[:disable_i18n]` is set above, which is set in the `before_each` block.
I think it is better to return an empty list instead of `new ArrayList<>()`, to avoid the unnecessary `ArrayList`.
Why do we need this change?
nit: space between if and (
This will be `/Failed to kill on all hosts/` if there is only one host. We should probably check for that instead. Also, we should check the error code instead of the code.
I think this should be `client.close()`?
I wonder if we should use the new `rclon` here, since we don't have a user agent yet. Maybe we can use `rclon` as a default in the `uplink` package.
nit: I'd say `neg_prob` -> `log_prob`, to keep it consistent with `box_prob`
I wonder if this is the best idea to make this configurable. I don't think the queue will grow indefinitely, but if we have a way to do that, I can add it as a parameter.
I don't think this change is necessary.
please remove extra lines
why this change? it's unrelated to the rest of the changes.
Is this change necessary?
I removed all the calls to `Tracer` from `AspNetHttpModule`, since they're only used in one place, and I think the `Tracer.Instance` is only used by the `AspNetHttpModule` class.

I wonder if we could use `Status` here instead of `String`
Why this change? Isn't the test still incorrect?
I think we should keep this as `stakingProto *staking.Protocol` and have `stakingV2` be a pointer type. Then we can just change the signature to take `*staking.Protocol` instead of `*staking.Protocol`.
nit: can this use "queryID" to avoid confusion with the other shard parameters?
I think these are still strings
This is a good example of a bug in the test suite.
The name of this test is now misleading. It should be testing the merging of annotations and binary annotations.
This should also be configurable, right?
This is just so you can remove the `value` prop
I think it would be clearer to say "sort-order is reserved and cannot be changed. Please use 'CREATE TABLE ... ORDER BY' instead."
I'm not sure why these changes are needed? It seems unrelated to the rest of the PR, please check
`merge` should be `merge!`, not `merge!`.
Nitpick: I think `awsEncodedMessageRE` would be a more descriptive name than `awsNotAuthorized`.
Why is this test deleted ?
I think we should have `includeComputed` be true by default (i.e. `includeComputed = true`) in all the `getProps` methods.
Please remove the docstring
Why not use the new error?
I don't think we need this route as we already get it from `/session/:sessionId/chromium/heap_snapshot`
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
This should probably be called something other than `impl`
I think this is not the same as before.
nit: `size == 0` is redundant.
We don't need this one?
nit: `grpcMethod.getMethodName()` is more readable
I don't understand how you get to this point. If the uid is the same as the file id, you should not be deleting the pidfile? If you want to keep this point, you can use a different pid to remove the file.
Can you use a more descriptive name?
Why not just `Clones`?
I think this class is not needed any more.
Why not `DetectCountry` ?
Should we log here? Maybe `warning`?
Shouldn't we also check `status != Started`, like `IsRunning` does?
We don't need the `identifier.name()` in this method
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why the quote?
Is there a reason why we have this as `False`?
Why remove this import?
`filename_size` is not used in this function, so it's unnecessary.
This is not the correct way to do this. We should probably make ConsensusVersion a const in `types/` instead.
Why is this being removed?
I think we should add an explicit check here that `self.application_uris` exists.
I'd prefer this name be `PerfTimer` (or `PerfTaskTimer`)
I'd suggest using ExceptionSource instead of try-catch.
Why do we need to add the deadline if we already added it in `WriteMessageAsync`?
Should this be "AZKABAN" instead of "azkaban" ?
This is a bit confusing - why is this final ?
Should we add `[Obsolete("This class can be removed since it's not used anymore.", true)]` to the docs?
This is not right. If you have IPv6 in an ip6 list, it will return the first IPv6 address that is in the IP6 list. This will cause an error.
This should probably be a bool. It doesn't really matter, but if we're going to return a vector, then it would be nice if we could return something more descriptive.
I think this can be simplified by simply doing `output == target.Label.PackageName`
I guess that this test will fail if there is a stream of length 1 and the length is greater than 1.
Why do you need a copy?
Does this work?
Shouldn't it be unpublished?
I'm not sure about the `TOP_SCORES_WITH_SCORES`. We can always return a `Scorer`.
This is not used anywhere.
This is the only change I have to make in order to make the tests pass. It was the only thing I found. The other changes are just refactoring and moving the code to `getSourceForMethod` and making this code a bit more readable.
I'd prefer to have a constructor with no arguments that takes no arguments, and set the values as default values.
Why do we have this here?
Should we add a default constructor for this?
This is the only thing I don't think we should be doing here, the rest of the code is checking if it is the websocket handshake and if so, add it.
Is this intentional?
I don't like using `guid` here. We can't have a GUID object that is already an alias.
nit: rename this to `MetricPoints`
@pabloem this is where the `rule_name` field is added, right?
Is this needed?
I think this test can be rewritten a bit as a separate test case, since there's only one test that uses the WAL and the WAL checkpoint should be disabled by default.
Why did you bump this version?
Can we test that this works with multiple deliveries?
I think we should be explicit about this. It's a little unfortunate that we have an extra field here that is not used by anyone.

This is a typo, I think this should be: name: goss
I think the correct name is `dagster_type`.
This docstring is incorrect.
I don't think we should import this package here. The transfer package should be agnostic of the network.
Why was this changed to privacyMode? It should stay keyguardPrivacy
why not just change the `coreConcurrencyStages.add` call to take a core name and use that for `threadId`?
Can you undo these changes?
This is a very weird import. We shouldn't have to alias this import.
I'm not sure how this is used, can you explain?
This is wrong. We're referring to this in our specs. The OpenID Connect spec doesn't have a link.
This will be much more efficient as `nodes_per_second / TIMER_MS(expansion)`.
Why are we removing this? It's a bit weird to see a call to sendEditNotifications for non tests.
I wouldn't add a `example-` prefix here.
Nit: "It is the assumption that if" -> "If"
why did you need the include?
I don't think we want that here, it's better to set the scope in the config, and not the widget itself.
This will make `RefreshAuthToken()` block, which is a no-op if the auth server is nil. I think we can safely remove this check here.
This is an error if there is a colon at the end. Is this intentional?
This is not public API. It is also used by tests.
I think that it is better to change the wording of this field. I think that it should be `Hierdie gebied is reeds aangehegs.`
This is not used.
This flag doesn't really make sense to me. It only sets a bit of information for the test. I think we should make it clearer that it only sets the build.
This is an unrelated bug fix.
why is this needed?
This is a good change, but I think it would be better to do the dup here in the thrift_protocol_init_message.
This should be `in.Status`
can you please sort imports?
Why not use `this.resources` here? I think it is better than having to do `typeof(DetectionToolbarProperties)` in two places.
This is not used?
I'm curious, why did you change this?
Is there a reason we don't use `asyncio.get_event_loop()`? If not, I think we could use a thread pool and have a single thread pool in the code that will hold all the event loop events. This will avoid having this constant in multiple places.
I wonder if we should use a different column name for the system suspended. I know the principal is not really part of the group, but I think it would be a bit cleaner if we just used `principal.system_suspended` to avoid the confusion.
Should it be called determineSenderNonce?
I think we still need to keep it for the Android 2.0 release. I'll do that when I merge
Should we also add this to the `session` API?
)
I think the naming is a little confusing. How about `isAnyResourceNameParameter`?
I'd rather have a method `getEffectiveFeePerGas` and have the caller call this one.
Why is this removed?
I think it would make sense to make this private since the only use is to return `up`.
Is this necessary ? I mean, why change it?
I think we should be using the `task.State` instead of `te.Status` here. The state change should be the same as the event.
This is an API breaking change. It was introduced in a recent release of the catalog and it's a public API change. I don't think it's acceptable to break the interface here, but this change will be a breaking change. I think we need a changelog entry for this.
This is a little bit of an awkward name. What about `AWS_JSON_CONTENT_TYPE_JSON`?
nit: Add a summary to this interface?
why are we removing this method?
I don't think this should be here. We should remove the file.
Why this change?
Why not pass in genesis data instead of loading it from the config?
I'm not sure how this works, since it's only for the `/about` endpoint, and the `/communities` route is for the `/communities` route, and the `/about` routes are specific for the `/communities_locale` route. I think we can just put `/communities` in this route, so it'll work with the other routes.
Is there a reason to have this?
I don't think we should remove this. The test should still pass if no hits were produced.
This should only be done if folder exists, otherwise there is no point in creating it if it doesn't exist.
Why not use the constant?

This should be `walPolicy_`.
I don't see where this is called, is it needed?
I wonder if it would be worth it to make this more clear that it's the name for the temporary directory, rather than the user?
We should import `upload` from `webapps_plus.actions`.
You can remove this now
This looks like a bugfix, it doesn't need to be here?
I would expect to see an error here. The user may have passed `millisecond 0` to the `else` block and this would result in a `ValueError` which will cause the error to be shown as `Invalid millisecond number` instead.
I'd prefer to keep AuthFree on the API and not on the REST API as a separate field. The reason being the API wouldn't allow to set auth-free on the REST API. This would also mean the API is not available in the REST API anymore, but the API is still available. The REST API doesn't require authentication and we would still have to keep it up to date. The REST API will just use the auth-free mechanism, which is not a good choice since the API is more likely to change in the future and we don't want to change the API in the REST API. I would
This is a breaking change. The caller of this method will have to make sure to update the error before calling this method.
@p0psicles I think we need this change. The only way I could find it to be a bit weird is for the user to specify the `Log` object as the first argument and then have the caller call this function to construct the Log.
I don't think we need to merge here. The `params_for_search` takes an `params` object so I think you can pass `:per_page` as a parameter.
This log should be in `init.go`
This is wrong, because you can't have the unique id as a query param, it can be the unique id of a user or the user ID of the current user, and the category id is the id in the category form. This should not be done here, as the request parameters for the current user will not be unique.
Shouldn't we annotate this with `[CanBeNull]`?
This is a public function, so this should remain as `wsProjectManager`. Also, should this just be called `wsAppManager`?
I would like to keep those changes in separate PRs. They are not necessary to make a difference.
Is this a new property? Or a new constructor?
this will break the API, you probably want to make `axis` a keyword argument
Nit: Can you please remove the extra new line here?
Is this a debugging change?
This is not a correct fix. If you are looking for the same trace on multiple subspans, you should only get one origin tag from all the spans
Nice, this was a bug that I had to fix.
I don't think this is used anywhere, can we remove it? (and if we don't need it we can remove it from `DispatchMethod.java`)
This should be `numAttempts <= maxAttempts`.
I'm not sure we should be catching `Exception`.
Why do we need this check?
I think you'll need `htmlSafe` to add the `escapeExpression` to the message
@martinpovolny I don't know how this works, it seems that it's not the same as the original code. Is this a bug or just an oversight?
why change this?
Please add this to `@todo`
Is this an unrelated fix?
You should use `lock_guard` here, because you have already locked the mutex.
`tab.get_focus_widget().data.input_mode = mode` ?
Why was this necessary?
Is it really needed to remove this interface?
Should we use `dom_id(plan.plan_id)` instead?
I think you should use a variable for `i`
This should use `get_option_value(no_docstring_rgx, "docstring-min-length")`.
@brianjgeiger this scope change is not correct
Why did you rename this file?
This will not work for windows.
Is there a reason why we don't use `get_cfg_var`?
I think we should keep this at info, it's not very useful to have a message like that when it's not in debug, but if we do want to keep it at debug it would be fine, but it's better to leave it at info for now.
Why this? It's not necessary, right?
Why is it safe to remove this? I'd expect the page to display the footer when there's no footer.
This should be package private
I'm curious if `iloc` should accept a `dataset` instead.
Can we call this "CA"?
I don't think this is needed
Should the default be false?
@LysandreJik @tchaton I'm not sure how the changes in `utils.py` are related to this PR, is this an expected change?
I'm a bit confused why this was renamed. Is it a bug?
This will be true when `killMockExecCommandAgent` is called.
Style/SymbolProc: Pass &:name as an argument to uniq instead of a block.
Is there a reason why you're adding this variable and using `count` as `errors`? It seems like the count could just be `count`.
I'm wondering if it makes sense to have this be an `instance_variable_defined?` check, and only have the if check in the module itself if it's defined? (or is it not) I'm also wondering if it makes more sense to have it live inside `Mongo::QueryCache` instead of being an `if defined?` check.
Is this going to be a big deal?
This should go into `test.js`. I think `isTsTest` should be a flag and not a global.
Why do we need this change?
This should probably be a member function of the player, not a function.
I think this import should be removed
I think it'd make sense to keep `ModuleSlug` in `ModulesList.propTypes`, and add a deprecation message if `moduleSlugs` is provided, otherwise remove the prop.
I don't understand this change. It seems we don't do any caching in the `dirCacheEntry` anymore?
We should also add a pointer to the `Payment` struct, to prevent nil pointers.
I think the tests for this should be moved into a helper.
Is this a typo?
I'm not sure about this one. We don't need it, right? If it's needed, then why isn't it included in the `.csproj`?
I think we should use `caddy.RegisterModule` here as well, since it's a wrapper.
This is unused.
This is a bit confusing. What is this?
I wonder if this should be moved to a separate PR, to keep this PR focused on the `exitcode` field. The main difference is whether we have to do `container.SetKnownExitCode` here or in `updateContainer` (or similar) as we do in `updateContainer`, so I think we should just keep `setContainer` here as a wrapper around the actual implementation for this.
This should probably go to the console
I'd use `TextUtils.isEmpty` for better readability.
I think this should be "openvpn", right?
Is it possible to use `str()`?
this route does not exist
Can you please add a `# noqa` here? This should have been fixed in a separate PR.
Is this change intentional? We have the "tester" organization as a name, which is the one that's used to sign the certificate and not the "test" one.
Why did this move?
Why not add the `+` operator to the `totalWords` function?
Is this TODO a TODO for this PR?
This is a bit confusing. Why is it necessary to allocate `arr_eigvec` to 1, but don't assign `1 * ...` to `arr_eigval`?

this test will pass on all OSX platforms as well. I'm not sure if we want to test this.
This class should be moved to `azkaban`
I think we should use null instead of "null" to be consistent with the rest of the file.
Why do we need this?
We should probably use `_set_timeout` instead
This is not needed. The log can be logged directly.
I'd probably make the namespace `brainz` or `redis`.
I don't like this, as there might be cases where someone would want to have multiple dataverse types in the same hierarchy. I would recommend just keeping the existing `RESEARCH_GROUP` and adding a new `LABORATORY` type (which would then be a `research_group_type` and a new `RESEARCH_GROUP` type).
Extra empty line detected at class body end.
this is a little bit weird because we are assigning the _original object as `vnode._component` and not `this._component`, is this what we need for the test ?
This is confusing. I would name it `Insecure` instead.
I don't think this will work. The package is `go:build`-ed and `go:build !build`-ed, so it will build with the `go:build` directive.
@joshcooper @damianlegawiec I am not sure if this is correct.
can you update the function docstring with a note explaining the parameter?
Can we remove this, and instead make `AnyTopic` the default?
This seems unused now.
This is a good place to add a test. It will be much easier to test than to hardcode it for every type.
"github.com/iotexproject/iotex-core/pkg/log"
Do we need to change the name to be more specific?
I think it's better to default to `nil` and use the `defaultAddress` in tests.
This is a bit hacky. I'm afraid this will break the API if the DataFile doesn't exist. Can you add a new method to DataFileService that returns the DataFile object?
This is not used anywhere.
Is there a better way to skip this suite?
I'd like to have this disabled by default, so that it is not enabled by default in all the CI build systems.
I think `chb` is unnecessary here.
Why is `JSDOM` required?
This seems to be an unrelated addition. Is there an easy way to remove this and instead have `getChainId` return `Optional<BigInteger>?`.
I would move this logic to its own function, as it is duplicated here and in `NewProvider()`. The only reason I would think about this code is to make a `IsInsecureChartRepository` method that returns true if there is a cert or cert repo.
This should be indented to the right of the line
Nit: "function to filter instrumentation for requests on a per request basis. The functions get the HttpContext, and should return a boolean."
I would like to know if this will work for the case where the volume policy is not a policy. We could also add a check to make sure the volumePolicy is a policy. This is a bit hackish, but I'm not sure if we want to make it more complicated.
I don't think we should change this.
Can we just call it `catalogName` instead of just `catalogName`?
Should this be `infof` since the build will not be in a `debug` log message?
Is `TSSLSocket::hasPendingDataToRead()` used anywhere else? If not, we may be missing some test cases.
Should be 2020
I'm not sure this method should have `Len`.
File is not `goimports`-ed (from `goimports`)
Should this be `<= 15L` ?
I'd rather not add more exceptions to this method, but I'm not a big fan of it as it is very hard to read and follow.
Is this change necessary?
I think it would make sense to return hipErrorInvalidValue in this case, as it is the same behavior that we use to call the memcpy function on a context that is not equal to the one provided.
This should be `false` to clear the index.
I'm not sure why we need this debug output.
This should be `listeners.history.view` right, not `listeners.history`
This is not a good name.
Why not `checkArgument()`?
Should this be called `do_take_snapshot_name` to match the other methods?
This is the only line that causes the CI failure, and the build fails on travis.
Why did you change it to a connection manager ? This seems like an implementation detail.
@kaxil I added an abs path for this, because I think it is better than the one we use to get the absolute path from the classpath.
nit: I would call this `NewEmptyAddress()`
Should be done inside `conjunctiveMatchFlow`.
Isn't this a bugfix?
nit: remove this newline
This test is not testing what the test description says. Maybe the test name could be improved?
Can you add a log here about what we're restarting?
Why not use `tableName` and `tableNameLen` directly?
Why was this removed?
This can be replaced with `new V(55, new EnumSetting<>(...))`
I think it might be better to just call the attribute `RecordAttributes` to make it clear that this is about recording HTTP server attributes
Why is this change needed?
I think we should check if the `SecretEncryption` field is not `nil` before calling this method. The piped is not a secret encryption configuration.
We should not use the API for these API endpoints - this is not an API. The label is a label used for the container status.
Why do we need to change this?
This file was not modified in this commit. It was added because it is the same as a few of the others.
I think the `t.Skip` is unnecessary.
Why this change?
I'd move the conditional to the top of the file, just after the `if excluded_portal_link %>`.
I think we should remove this line since it is not relevant to this pull request.
What is this for? This should also handle `on('Ani|Tra')`
This is not correct: if `data` has an instance of `Address`, we don't want to transform `data`.
Is this used anywhere?
I think this method name is a bit misleading. It doesn't mean that the query will only set the initial historical details. How about something like `hasInitialHistoricDetails`, since it doesn't mean that this query does not mean anything.
Should this be using `cancellationToken`?
This class should be static
why are we disabling these?
This should be a separate change to #3044
I think the previous version would be more concise.
`throw new Error(this` instead of `throw`
This should be in the try...catch block.
We can probably do this check in `applyMessageDirect`, as this function will be called in `onSubmitPoSt`
I think we can just add a new array with `ReflectionType::getReturnType` and use `ReflectionType::getReturnType` instead of `ReflectionMethod::getReturnType` here.
Why not throw `UnsupportedOperationException` instead of adding the method?
This will be a change in behaviour if the user is already showing the banner. We can't make it invisible until we have a chance.
This method is not used.
Can we make this a `bool` with default value of `false`? This way we can keep the CLI command as simple as possible.
I don't see why this is removed?
This is a breaking change. The new version is a little bit less verbose, but I don't see a better solution.
I think we can get rid of `await`s here.
This is now done by `VideoVideoController` and `VideoVideoController.play`.
This is not needed.
This could be `@since`.
I'd move this to `constants.js` since it's being used in both test and test.
I think we need to add this to the json tag
I think we can remove this line.
This is not correct. The `size_t` type is a 32-bit unsigned integer type. The `size_t` type is an integer type, which is a 32-bit signed unsigned value, which is an unsigned 32-bit unsigned integer type. You should use `size_t` instead.
I'm not 100% sure what to name this function, since it doesn't return anything. What about something like `has_nonzero_data`?
NIT: I'd prefer to see these methods on `Uri` instead of `string` as they are a common use case
Shouldn't this be `HTTP data=`, as it is not a data object.
Should we also add a test that checks that the workspace file exists?
I think this should have the `:plural` option as the default. Otherwise, if someone adds `Trailer` and `Trail` to their app, the user will never see it.

Should we just stop all the HTTP and API services here?
I'm pretty sure that we're not going to be using `clientID` anywhere else in this code, so this should be `const`
Shouldn't this be `devel`?
I think it will be better to move this code to a new function.
Why do we need to keep these two fields? Can't we just use a `ConcurrentDictionary`?
`where('id NOT IN (?)', observations)`
Why is `'AmbiguousClass'` no longer in the arguments list?
This should have been `examples/cdn` to match the new examples.
I would suggest leaving the obsolete message here for now and to add a new one when we add support for other types. We can remove it in the future when we add support for other types.
I'd suggest to move this into MolOps::addHs, since it's used in both cases, and it would be better to have it in the beginning of the list of atoms.
Why remove the null check?
Is this a TODO?
I think we should use `Output.Warnf` here
why are we removing clpsK and clpsV?
This is unused now.
Why remove this?
Shouldn't this be a private method?
This will be a lot more expensive, since the body will be a lot larger.

I think it is best to use `logger.error` here, so we can see why it was used.
Can you add the `# [unhashable-dict-key]` to the list here?
I am not sure why this file is empty. Is this for a test file?
This is just a nitpick - could you please move the declaration into the function? It's not necessary.
I think `column.getPrimitiveType()` is not necessary, since `stats` is already a `PrimitiveType`
Shouldn't this be `_sysfs_format = NULL`?
Should we use snake_case here?
Can you add a link to the docs?
Should this be `DEFAULT_ISMASTER_36_36` to match the new default?
Why is this null?
This is a bugfix, but the rest looks good
Why change this?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Should we be logging the error here?
Should we remove this projector?
Why is this line removed? The reflow is triggered on the line above, right?
This should be removed.
This should be grouped with other github.com/iotexproject/iotex-core
I think we should not set this to KILLED if the status is EXECUTION_STOPPED.
This looks good to me! I think you should use `StringAssert.Contains` instead of `StringAssert.Contains` to make sure it is actually there.
`XAttr holds the attributes of a node and its attributes.`
I'm confused by the use of `testing_fails`. It seems that you are counting the number of failures, but you're not using it?
Why remove vote?
I think we should keep this method.
This method is only called by a test, so you can remove it from here.
I think we need a test that exercises this change
.put(MainGapicProviderFactory.CLIENT_CONFIG, "clientconfig")
This should be a warning.
`CurlDownloader` is deprecated, please use `CurlDownloaderInterface` instead and add `acceptedHeaderTypes` to the exception.
This check seems redundant, as there is a `routeUpd.Dst != nil` check in the `if routeUpd.LinkIndex == -1 {` branch below.
This should be a separate PR.
Why this change?
This file seems like it belongs to the `io` package instead, which is already included as part of the `io` package.
This will be done for all data models right? So I guess we need to check that the type is a string
why public? Is this a public class?
This seems like a good change, but is the intent that we don't want to return the current time if it's the same as what the client returned (ie, it just took the expiration time)
Is it ok to assume that `node` will be nil if `cdsObjectToUpnpavObject` fails ?
This is not necessary.
I wonder if we should just ignore the error if the socket is invalid and not close the socket?
I'm not sure we should be rendering the credit card form on this form. I think it might make sense to render it on the `stripe-stripe-customer` page. What do you think?
The `preg_quote` is redundant here.
This should be a separate test, not a separate case.
nit: this is already imported in line 10
We can also assert that it is a successful pipeline with `unreliable_pipeline`
Is there a reason why we have a separate field instead of just having one in the `CStorage` struct that is shared with the `CStorVolumeReplicaPhase`?
Please revert all files to tabs.
This is not the same. It should be `selinux "github.com/opencontainers/selinux/go-selinux"`.
I think it's better to leave the old enum for backwards compatibility
This will be a breaking API change. If you want to make it configurable, you should have a setter for it.
This error message will be printed to the console even if the user is trying to interpolate something that is not defined.
I think it is not implemented
Is this correct? If you have two dependencies with the same file name and different sha1, then the first one will be removed? If yes, then this won't be correct?
Why not just have `port` be an optional argument?
This should be `uint64_t` for consistency with `dr_stats_fetch_built_blocks_count`
This is an X_COMPRESS token which is the same as X_COMPRESS if we don't push the path in the header. This is a bug fix.
This method should also return the state root.
I don't think we need to change this. I think it's a good practice.
This is a breaking change, so we need to keep this as it is, but we need to update the docs accordingly.
This should return an error to the user. Otherwise the user will have to fix their setup.
I don't see why you need this flag here, why can't the legacy config be used for this partition?
this should use dataManifests()
I don't think it should be a `toolName`.
This change seems to be unrelated?
I don't think you can remove the first sentence here.
I think we want duration here too?
I don't think we need this `asarray(False)`
I think this should say something about `true if the underlying value is absent`.
I think this should stay.
I don't understand.
This is not a valid case, it's a bug in Win32.
This can be removed now, right?
W1618 import missing `from __future__ import absolute_import`
Is this lock really necessary?
I'm pretty sure that `NewCertManagerACMEIssuer` does not have a `URL` field, is that okay?
We have a `DistributorStatus` and the `SessionMap`. Can we just use it here?
I think you need to add `producer` to the attribute list
We could add this to the repo client. It's also used for the search endpoint in the `search` package.
Why do you need to check the immutable fields in Update? I would expect the Update method to be enough to check the immutable fields.
This is an internal API and can be removed.
why are we setting this to 16384?
This should be a `false` by default.
Why is there a `cookiePath()` here? I think the cookie name is enough to make sense.
This was the only real change in the code. The rest is whitespace changes.
I would move those lines to a new function and call it in both places. The code would then become easier to read and understand.
nit: I would call this AppendWorkflowNodes
I think it's better to use a map here, rather than the `Fields`.
This is not needed, the check can be done in the constructor of the server
Is this necessary? I'm not sure what happens if `reporter` does not exist
`encode()` is unnecessary here.
this->Save(1); ?
This should also return the condition, right?
Is there a way to get rid of the `-` in the copyright header?
Why are we returning an interface{} here?
Should the import be alphabetized?
I'm not familiar with this package - is it possible to put these imports in an `import` block?
I don't understand this change. It looks like it's fixing a bug that is not in this PR but not in other PR.
Do we need these? Can't we use the ones in the grpc package?
@jackfrancis Can we rename this package? I don't think we want to rename the package.
I don't think this will ever be true because `MaxConsumers == 0`
This line can be removed

Why not just `p := ""` ? It seems cleaner than `var p string`
I'm curious why we increase the timeout to 1 minute.
This is the same as above.
This is the only type in this file. I prefer `nodeIDKey` over using `string` as the type name.
@stgraber I'm curious why we have `!bootstrap` in this file?
I would make this more specific. Maybe something like `(len(plot) == 1 and self.holomap is None or len(plot.keys[0]) == 0)`
Why do we need to return `closed` here if it's never used? Can't we just always return a `chan struct{}`?
I'm not sure about the naming here. I think it would be better for this class to be `Session` rather than `SessionId`.
I think it's not needed to log the image name
This will break the cart for any user that has custom templates, as you can't add custom templates to the current cart object. You should define the list in the presenter.
This should be `ManagedAgents`
Can you please also change the tests for loadOrCreateAccount to take in a workingset as well?
I think we should keep this in the log.
Should we use the `New` suffix for this?
Why not use `value_at_min_count` here? The value is the min of the bucket, not the min of the value.
Why this change?
I wouldn't bother with this change, the `*` part is not needed.
I think we want to add the name to the exception here? Otherwise, it might be a bit confusing for a user to see this in their logs.
This should be a boolean, as the status code may be 200.
I'm not convinced we should be doing that. This test will fail on Windows, and the test will still pass on Unix, so this test will fail on Unix as well. If the timeout is set to 30 seconds, then that wouldn't work, because the test will hang forever.
This check is not needed. The `should_syscall_method_be_sysenter()` is already a no-op if the hook doesn't have succeeded.
Is this necessary? I don't see it in the PR
I'm not sure if we can remove this since the `CountNotification` is now a subset of `StartNotification`?
I think you could have just added a defaultIcon and it would return nothing if not defined.
I don't think this is right. We should be using `session` for unacknowledged writes.
I don't like the idea of the average cycle time being in the ChromInfo. I'd be tempted to add a property `GetAverageCycleTime()` and `GetAverageCycleTime()` to `CHROMInfo` so that all the ChromInfo properties are grouped together.
I think this is wrong, the lineedit should be aligned properly to the left.
Shouldn't this be `boltdir_type: :cd11`?
This seems odd. Why is this necessary? I'm assuming the Ruby interpreter is not part of the build.
Please, use a variable to avoid code duplication.
I'm not sure this is the correct fix, it's just to make sure the listens list is being returned. If I read this correctly, the subscriber will not send a list to the DB until it has a chance to be removed and the subscriber will never get the next time the listens list is fetched. If I read this correctly, the subscriber will be removed from redis, but then the listens list will still be empty. Is this the intended behavior?
Should this use `displayError`?
This is the actual fix. It doesn't change the alignment of our pending unit, it just sets the pending unit's size as the block size of the special allocator.
This will fail when you don't specify a method, as the `remote_path` doesn't have the method. You need to use the `command.parameters` instead.
Please add a blank line after the class definition
This is a breaking change, so I would rather leave it as it is.
This import is unused.
I don't understand why you're returning 1 here. Why not return `nil`? Also, what happens if AWS credentials aren't present? I think the test would be good to verify this.
This is a bug.
I don't think you should add this interface, it will be used only internally by the merge node. I would remove this one and use the `merge` interface.
Can this be in a separate method? I'm not sure what the purpose of this method is.
this should not happen in the first place, because it would cause a segfault.
Why is this necessary? I don't think we use it anywhere, but in the `SpliteratorProxy` constructor.
Why this change?
Is there a reason why this option is not a boolean flag like we have for the `--force-defaults` option?
I'd like some doc on the return value.
Why do we need this?
Is this change intended?
This is the only real change. I think it's OK, but the rest is just refactoring.
I would prefer if we could use `axe.commons.aria.isRange()` instead of duplicating this code
please remove the file option, it will be added to the description of the class
This is the service ID that will be used when generating the endpoint, right?
This should not be required.
I think this should probably just be a `Prefetcher` interface, since we're using this only in this one package.
I think it's better to have 'diagonal' in the list, as it's not really a flip
This class is now in the `PlatformBenchmarks` namespace.
nit: add `.` at the end? (and same below)
This is not accurate as it will always use the open-file cost of the splits, not the cost of the file in the source table (which is the minimum weight).
This seems like a good candidate for a separate `AM_CONDITIONAL(USE_LIBUNWIND, [test x$disable_libunwind != xno])` block.
Can we use `ReflectionInfo.DeclaredProperties` to avoid the `Where` and `IsPublic`?
I think it's not necessary to assign these two address fields here
This looks like a leftover.
This should be `Path = parameter.Path`.
This is the same as ErrCodeNoSuchBucket.
Can this be a generic test? If so, we should make sure we don't break any existing test that is running with this change.
This should use some other library instead of sleeping
This is a breaking change - we should keep the old constructor
This should still be `ConcurrentHashMap`, as it is used by the `HashTreeDataCache`
I don't see how this will get emitted.
`if (callback) return callback(error, null);`
This should be `db.tar.gz`, right?
Can you also test the case where we have no ingress rules?
Shouldn't this be in the `DogStatsdPort` constructor instead, and we should do this in the constructor too?
This is not a change in behavior. `provided_features` is the subset of `target.features` and is the subset of the target. It's a subset of the `target.features`.
I would call this `TestDataDir` for readability, since it is not actually testing anything.
This is an unrelated file and should be reverted
Should we log here?
Why is this removed?
Well, that is a bit awesome... I wouldn't have thought of it, I just don't think we can do this :+1:
why do we have this?
Isn't this a breaking change?
this is the only part that I can find that needs fixing. I don't see any reason to change the behavior of a non trusted proxy.
`theKey` can be `@link Keys#COMMAND`

@kapilt this is the fix. The other changes are just to use the property `inventory_index_id`.
This is already handled by the `ElementDispatcher` so it doesn't need to know about the dispatcher again.
I think this should be wrapped in an if statement to avoid rendering the price heading if active subscription
I think it would be better if we used `List#copyOf` and used the `ImmutableList#copyOf` here to be more flexible and avoid the copy overhead.
I think this test is wrong. This test should not be testing what the code should be doing.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I don't understand this. We have a `plan_type` table but the plan type is a polymorphic model?
I don't think this change is necessary since the method signature changes.
I don't think you need the `:` here
This was wrong before as struct was never used
I'm not sure this is a good way.
I think the `/` should be left here too.
I think we can also get rid of this struct.
Nit: I'd use the same name here, as in `onResult` method.
Should we do this for all clouds or only the cloud sqlproxy?
Nit: `a the` -> `the`
I guess the stacklevel of 3 here is just to avoid the warning?
Should this be renamed? `notificationDuringQuietTimeDisabled` -> `notificationDuringQuietTimeEnabled`
This should be `Trace.WriteLine(string)`
This line is not needed.
I think we should rename the file too, as it's not a definition.
I think we should add a doc string for this.
I think you can just use `if new_token and retries > 0:` to simplify the code a bit.
I would call the function `test_custom_recall`
I would call it `--network-name` to be consistent with the `--network-subnet-name` and `--vpc` naming.
Why do we need this change?
Is this an error category?
nit: this can be removed.
Shouldn't you use the default version here?
This can be a single return.
Can we remove these now?
This looks like a duplicate of the code above?

This is a public API change, and the parameter is not used anymore.
nit: "of" -> "of"?
Is there a reason we're not using the same `additional_pkgs` array as `UNIX_PACKAGES`?
Is this a problem for the case where the field is case-sensitive but the field isn't?
I think this should be `Online Workshop`
@melekes can you verify if this is correct?
Nit: can you add the whitespace to the beginning of the line and end the `??`?
This line is the actual fix.
I don't think we want the `.to_f` here, as `to_f` is a function that returns a float.
This was the only change to allow passing arrays
I don't know what is the difference between SHOULD and MUST here - if there is only one occurrence, it will show SHOULD and SHOULD.
Shouldn't you check `telemetryConfig != nil` here as well?
I'd prefer to do the same here as above, but I think that's a matter of preference
Error return value of `registry.Register` is not checked (from `errcheck`)
I'd prefer to not have this loop inside the if statement, as it makes the code harder to read.
The default should probably be `true` so that the default behavior is the same as the default.
this should be err != nil
I think this should be a resource, not a resource. We can add a `get` for a single resource.
I don't like this, we should have a function to do this, it's too complex for a simple function and it makes it hard to read, especially since this is a constant.
This controller was used on the frontpage only.
Why do we need to add this field?
Is there a reason why you're suppressing the message here and above instead of just using `[SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#", Scope = "member", Target = "Microsoft.Rest.TransientFaultHandling.ShouldRetryHandler.#Invoke(System.Int32,System.Exception,System.TimeSpan&)")]`?
Why this file is not in src/rtps?
I think it's better to have the same check here.
Why do we have to update the total here?
why do you have the cast?
Can you move the `|| {}` to the first line of the declaration and use `angular.extend` here? I believe this way we are able to remove the `|| {}` from this block, and then we will be able to remove `userInjectedExpandableRowHeaderColDef` in line 118
I don't think this works as `err` is undefined in `sprintf()`?
I think this should have an `aria-labelledby` attribute
Why not check the cost in the OVM case?
We should probably make this a `Set<String>`, and add `location` as an additional property to `RESERVED_PROPERTIES`?
Align `.merge` with `processed_parameters`.
I'm not sure that this logic is needed for the `AuthenticatorService` class. It is not a part of the public API of `AccountManager`, and we are only doing it for `AccountManager`.
nit: I think we can inline these 2 methods, and use the same instance in the same class.
We don't need these anymore, right?
I'd add a note here, in the docstring that range_type is only used if it's a combined range
This class is not static and therefore can be removed.
Why is this change needed?
Should we add a new method to the `Prefetcher` interface?
`get_class` will throw an exception if `$domainConfig` is not a class, so I think we can just pass `class_exists`
This is a new option in the API response that we will be using for the API response header maps.
Why did this change?
Hrm, I'm a bit concerned about this one. The file should have been included by default.
I would suggest renaming this to something like `StorageFaultSlasher` to avoid confusion, but I'm OK with that.
This should be a boolean.
Should this have been `sqlmock`?
I don't think this is needed.
Is there any particular reason to have this line?
I don't think this should be `first` since it will always be the first user in the array.
I think we should move `n, _ := zone.getNameSet(defaultRemoteIdent).getName(name, true)` outside the lock, so that we don't lock while talking to the SchedQueue. Otherwise there's a race between calling `getName` and `scheduleName` and calling `scheduleName`, which may cause an unexpected state in `scheduleName`.
This is the only real import. It's all imports in a file.
I don't think we want the `LockID` in the context here, since it's only used in the log message below.
This is a bad import name. It should be `JavaTokenKinds`
Is this intentional or left over from testing?
This line can go.
Whats the purpose of this?
I think we can remove this check now?
This looks like a bug. Shouldn't we be replacing all `?=<` with the correct empty string?
Shouldn't we return an error here, rather than nil?
This seems like a good candidate for a `jest.setMocks(function() {`
`auth instructions url` -> `auth instructions url`?
This should be "DD_DELEGATE_CONVENTION"
This is just an extra check, right?
Can we add a TODO here and reference a bug number so that the issue doesn't get lost?
this is wrong. `to_tensor` is not safe for nested lists, but it can.
I think the nil check is no longer necessary.
This will panic in the case of an error.
I think it would make more sense to add it to peer endpoints
This should be C14. It's an example of a subtraction for the BioMassCalc, but that should be fixed.
E231 missing whitespace after ','
This is not needed, as `File` class already checks it.
Is this a good idea? We have the same code in `connection.js`
This is the only change in this file that I don't think is necessary, but I wanted to point out that we're still using Interop.
why not use id.ID ?
Can you add a TODO here about using `s.Addressbook` in the future?
I think we can just put this on the BaseEndpointResolver as an abstract base, no need to subclass it everywhere.
This method is used by the UI to retrieve the public identifier. This will be a problem if we want to keep the UI in sync with other UI.
nit: rename to partitions? or is it a bit confusing
Shouldn't we default to `None` here as well?
This is probably the best way I can think of to avoid the "padding" option. The only thing that's necessary is the "delay" option.
Why do we need `serverLacksFeature`?
This should probably be a string, not a tuple.
I think we should remove these lines, they're not needed and can be dropped.
nitpick: can you rename the field? `textStarts` is a bit confusing, because it's actually `text` and `bytesHash`
I would prefer not to add this. I'm fine with adding it if you want.
I'd prefer if this were named "cta", since it's not the "CTA" of this feature.
I'd like to see some more changes to the `rdkit` package. I'd like to keep this as simple as possible.
I'm not a big fan of this naming. How about `project_id` or `project_number`?
this is not needed if you call the defer above
Why do we need to change this?
I think this should be `WLR_INFO`, because the test is running, so it's not really a warning.
I'm not sure about this one. The touch point is destroyed on the up event, so the listener should be notified about this event. But the touch point will not be destroyed if the listener is called on a touch up event.
Missing space after #.
This should probably stay static.
Is this option really needed? I would assume it is used only for testing, which is why the test is failing.
I'd like to see a test for the new property.
Can we remove this line?
Can we remove this?
Is the Activity ever used?
This is a little unfortunate that this would block forever.
Should this be `Outbox` instead of `MsgQueue`?
This is a new feature, so we can add it back in later.
Why? I don't think we want to allow multiple attributes for the same test method. It is a bit confusing.
I think we should remove these lines, they are not used
I think this test is not testing that it should not set an attribute. If we do that, it should be fixed and the property is not set. I'm thinking we could have another test with an empty key.
Can you add a blank line between this example and the `PRAGMA` line?
I think this test is not correct. It should return the number of decimal places that are within the range of 1..100.
This is a breaking change. Please revert the changes to this file.
I would suggest we rename these to `InboundMiddleware` and `OutboundMiddleware` to match the `Middleware` interface.
I'd suggest renaming to `isCircuitBreakerEnabled`.
I don't think this is necessary since we have already done it on the server.
I don't think this lock is necessary, because you're modifying the value in the lock.
this is a bit of a misnomer, since it will only add data when data_encoding changes.
Can we use `gitBranch = GitUtility.GetBranch(gitTag)`?
Why did you remove it?
I don't understand why we are changing this.
Why remove the profiling code?
> NullLogProvider [](start = 21, length = 20) Should we rename this to NullLoggerProvider as it is no longer a NullLogProvider. #Closed
Why was `getSourceDataArray` changed back to `getSourceData`?
This should be changed to "The+object-oriented+UDF+interface#Tutorial", since the Tutorial is a link.
why not use the retryTask interface?
Why is this import needed?
Is the mean/std of the mean and the std of the image normalized? I'm wondering if there's a way to avoid it. I'm just not sure if this would be the best way to do it.
`string|null` is also `void`.
Whoops! I missed this in the last review. This is an API breaking change, so I'll just fix up it
I think we need to add the path to the lock file here so it gets deleted by the user if we don't need it.
I don't think we should be removing this.
`canPlayType` returns an empty string when `window.NativeShell`, so `canPlayType` is always false in this case

Please add a new line before the last dict.
this was a bug, as `column_labels` and `data_spark_columns` were being sorted by `spark_column.label` now
This is a bug fix. I don't think we should be fixing this for Pandas DataFrame.
Please remove `printStackTrace()` from the code.
Is this intentional?
I think we need an event in `syncCvr` that triggers `syncFailed` if `err != nil`
Why this rename? This seems more like a "global" setting?
I think this one should be `kinto_core_redis.storage`.
I guess it's fine to change it to `batch.originalIndex` here, but it might be a good idea to add a check for `originalIndexes.length` to make sure that we have the right size before accessing it.
Why is this needed, is it just to make sure we are not using `Array`?

This should be a `StringFlag` type
Is this a duplicate of line 405?
I would expect that the only way to prefix a size of a table is by checking if it is a prefix. But this is probably ok.
This should probably be moved to the try block below, to make it more readable.
This doesn't need to be returned, since it's not used anywhere.
This is a good change, and I'm not sure it's worth the effort.
I don't think we need the cast here as well
Should this be an `IReadOnlyDictionary` to avoid the allocation?
This should be re-enabled in a separate PR
Can we add a constructor that takes `DeleteFile[]`?
This can be simplified by returning `FetchAgedQueuedExecutableFlows.fetchQueuedFlows(minAge).get(0)`
This is wrong: you're not allowed to create a file that does not exist. The error message below says that you need to create a file and that you must specify a startup script to create an instance.
Should this also check for the case when both local width and local height are 1?
This change seems unnecessary.
I'm not sure if it's better to have these named differently than what we had before.
Why did we move these into another package?
Is this still relevant?
`sizeof()` is not necessary. `sizeof ()`, if you want to be sure the size of the buffer is 64-byte, it's a `char` array.
I think it would be nice if the dockerClient was a field on the task resource, so the caller can use it.
Should we add some context here?
How about using an interface with a `ctx`? Then the caller can decide whether or not to cancel the processor.
This is wrong. It should be `@phpstan-param array<string, class-string>`
I think the error message should be more explicit about what it actually means.
I think we want `awsTagsFlag = "tags,aws.amazonaws.com"`
I am curious about the reason for `dilation` being `1/dilation`, and why is it necessary?
This looks like a duplicate, is it possible to combine the two sets?
Is it a good idea to use `NULL` here? It is used in several places, in `GetParamTypeInfo()` and `GetTypeInfo(int typeid)` in the same way.
this import seems to be missing
Should this be `/etc/etc`?
Is this a new method? I'm just wondering if we can remove it?
This should probably also use the `default_adapter` method in `config/config.rb` to avoid the key check.
This is the default config in the `config` file, which means AWS can't be configured, which means we have to remove the default.
I'm not sure we should change this line, but it seems like `querystring` will always be a dictionary?
The ticker will be stopped in case the lock is released again
nit: I would just pass dataresidencySs directly, and not have to create a separate constructor
This should be a constant in this class instead of a hardcoded string.
This is a bit weird. The Mobility value in Kraken is 0.00. Why is that?
I'd be inclined to leave these out of the public API, and add a `@Deprecated` annotation to the new methods that are marked as deprecated (see `@Deprecated` in other files in the codebase).
nit: why not put this in `_internal` package?
We should be able to get rid of the `---->!!!` bit now.
`Output()` is the return value. We don't use it anywhere else
I guess we could just use `requests.Session`, no?
This is the only place that uses `storage.ObjectHandle`. The rest of the changes in this file look good.
Why do we need to sync?
This seems wrong.
Line is too long. [92/80]
I don't think it's safe to do this.
Why not just use DR_MC_NONE here?
I'm not sure if it is worth it to have a new benchmark, since there's no `.Equals` in the other benchmarks that do the same thing (or if there is a reason, I would just remove it).
Is it worth adding the `;;local` to the config name?
I would put `from ..util import (basestring, dimension_range as d_range, isfinite, process_ellipses, unique_iterator, wrap_tuple)` here instead of in the `from ..util` module.
This should not be changed, since you've modified the copyright.
@mzazrivec @jlsherrill I'm not sure if we want to change this behavior. The default is false, but I think we want to set it to `true` here?
I'm not sure we want to add this to metadata.
Whenever there are multiple servers, there is one server, and this.servers[1] is not set. So this will delete all servers.
This should be `<=`.
Why did you add this? The method should never be null.
this flag was renamed to `use-disk-cert-cache-prod`
This is not necessary, since the StasticsServlet is not a servlet
This seems odd to me. What happens if tail is updated with a custom message?
This was actually a bug. It used to be `fake-infra-id`, now it should be `%q`
I would add a docstring that explains what the return value is (e.g. what this function returns), and what the return value is for.
Why did you remove the check on `err` here?
I don't think it makes any sense to set the `live` flag here. I'd rather just keep it true.
I wonder if this logic should live in the shared type. We can't assume that all types will be string, but it might make sense to have a generic helper function that takes an argument for shared and returns a shared string (e.g. `_fbb.CreateString(string_, shared_type);`), and the callers could then call it directly. This would allow us to remove the shared code and just have a helper function like `CreateStringWithShared(shared_string string, const std::shared_ptr<string>&)` that returns a shared string with shared type.
Can't we just remove this line?
Should we add an option to set `log-level` to `notice`?
I'd rather have a separate metrics type for the OOM waiting job (I guess it could be the same for both).
This could be just `return moment(value, { ..., dateFormat, locale, isValid: true }).clone()`
I don't think we should be changing this, we should keep this as a retry backoff.
Why do we need to check if tizen is enabled?
Why not just use `sha256_plain_text` for the hash?
I would call it `getTelemetryData`
I think it would be better to create a new class for the solver, and then use a reference to it here, rather than using the shared pointer. The shared pointer should be a reference to the solving driver.
Why is this necessary?
I'm not sure about this one, but the `[]` type is correct. It's `\Shopsys\FrameworkBundle\Component\Router\FriendlyUrl\FriendlyUrl[]` and it's not a `\Shopsys\FrameworkBundle\Component\Router\FriendlyUrl\FriendlyUrl[]`
I think we should also print an error if the status code is not known.
I would have expected this to be a map of string to state instead of an interface.
I am not sure we really need to have a separate method for the ip forward enabled, since the ip forward will be enabled by a call to `enableRules` anyway.
Shouldn't this be nullable?
I think we can do `client_model.to_s.underscore.tr("/", "_")`
Why is this a finest? Isn't it enough to log it at INFO level?
Can we use `exec` instead of `exec 9` here?
I think the `function` keyword is redundant here.
Is this a leftover? If not, can you clean it up?
Can you add an assertion that `r == 1000`?
I'm a bit confused about how this works, is the prefix different?
this file should also be reverted, right?
I wonder if we should just make the decision about the block number in the `IstanbulBlock` class instead of having it be a hard-coded block number.
@marefr I think this is not needed, as it's already being done by the `zfs.Command` line
Why not making this package private?
Why are we adding a new array?
Please update the doc string

I think we should just call it `EvaluateQuery`
Why are these changed?
What does `rootDir` and `scrubbedRootDir` mean? Could we use more descriptive variable names?
nit: I think the `.hpp` extension is unnecessary.
Should this not just be `test_tools`? Or is it just for consistency with `namedTools`?
Nit: `__either_at_its_original_location_or_in_the_document_or_document_parent_folder_` => `__either_at_{original_location}__`
nit: group the third-party imports.
I guess the idea here is that if the yaml file is found, then it is processed, but it is still being processed?
"This means the schemas in new version are less than the old version. The schemas in new version will be ignored. Please remove the old schemas from your cluster and re-deploy."
this should use the `logs` directory
I don't understand this change - why did we change these to configs here?
This looks like the same as the default `POST` method.
Is this intended? If not please remove.
This attribute is not used and can be removed.
I'm not sure about renaming the struct - this is not used anywhere in the patch test, it's only used in one place.
this is only called when `devices` key is not there - is that the intended behavior ?
Is this a new feature for the AMP-only extension?
We should also update the list of `this.status.downloads` in `async/assembly` to include `file` in the list.
Should we be returning an error if rootless?
This should be an int64
I think the test is not testing the correct block. I would have expected the block to be `0xB8C6299D` and not `0xB8C6299D` but `0xB8C6299D`
I'm wondering if it might be worth having some sort of flag for the OS (and maybe the OS specific flag). I think it's easier to just have a single command that takes `--term-and-conditions`
This is not needed.
Can we use `merge({}, component.prevProps, state)` ?
The new import should be grouped with the ec2 import
I think we should just return the `[{}]` as the `body` property. We can also just do `JSON.stringify( [] )`.
I'm not really happy with the name of this class. It's a little unclear from the name what it represents (or where it's used). What about `NetworkErrorWithMessage`?
nit: I think `retryMappingName` is more accurate?
This should be `ctx->aws_sts_endpoint = (char *)tmp;`
`n times the given {@code element}`.
Why `Integer`? `SortOrderId` is an `int`, right?
This is just a little confusing, I wonder if we could use `expect(today).to be_upcoming`?
This is the same code as before, but with different values for the durations.
This is probably the best place to catch `Error`s, but I can live with that.
This is a bug in the spec. The owner will be passed in as an argument to startSession(). The session will be created and the owner is passed as an argument to startSession(). It is now created as a separate object and then passed in.
I wonder if it makes sense to move this out into the `ensure`, or just move it to the `rescue`, to avoid having to re-assign the variable.
This is now tested via the service layer
Should this be using `copyCommand` instead?
Should this be `progressStatus` instead of `IProgressStatus`?
This should be in `util/standalone`
Can you rename it to `errors`?
Why remove the bundle?
I would put this in a beforeAll, and then you could have just one if/else.
Is there any reason why this buffer was not created in the first place?
whats the reason for using this prefix?
This is a breaking change. The old name is not used anywhere, so it's safe to remove.
Why not use `raise exceptions.ReadonlyError(message=error_msg)` here?
I'm not sure why this is in a `runtime` package? It's used in the runtime package only.
I think you need to set `ifaceConfigurationEnabled = true` here. If the `ifaceConfigurationEnabled` is true, you can get the IP address from the `ipAddr`.
Is there any reason why you removed the `[LoaderOptimization(LoaderOptimization.MultiDomainHost)]` attribute from this file?
I'm not sure this is the best place for it, as it's in the `ps` script
This is a very weird exception. Why would this be possible in `git clone`? I guess it should just be an error, but that's not really a requirement of this function to be called.
This test is failing on master
Why change this?
(style) code indent should use tabs where possible
nit: `a list` -> `a list`
I'm not a fan of having this regex, but I'm not sure what the best way to do it is.
@jerryk55 I've changed to `Ruby` here. The example shows the `sns-ruby-example-show-subscriptions.rb`
This is the actual fix
This is still used in the `cassandra.go` and is only for Cassandra. We should remove that from the `cassandra` pkg and rename this variable to something like `version`.
Why this test was removed?
This was removed because we no longer have the `vendor-command-prefix` in the driver
@pabloem I am not sure why this is needed, but I am not sure why
Should these be `readonly`?
Why remove this?
I am not sure what this one is used for. I think that it is not used anywhere.
This is an implementation detail, it should not exist in the interface.
I don't think this should be necessary. `makePidFile()` does this.
I would suggest to use `TViewModel` here as the generic type instead of `class`.
This should be `import ansible_galaxy_install` to match the style in the other packages.
Please add `use` statement here.
I would call this `useScrollEffect` instead
I don't see this used anywhere
I think this is too small. I think we should make it a configuration value. We could set this in the `Config.Default.UDP.ReceiveBufferSize`
why this route?
I think you should be able to use a `RandomValue` here.
Can we use `TryGetValue` here?
I think this is the only thing that is needed in the `WebServer.java` and not in `jetty-server.xml`?
I don't think this file exists anymore?
nit: missing period at the end of the sentence.
This event listener is used in the `FormBuilder` class.
Is the second parameter here necessary?
This should be `string(append([]byte(nil)), sub.subject...)`
I would call it "AWS KMS Key Prefix".
We should also update the total sent count.
I don't see where this option is added in the flatbuffers code base.
`toLowerCase()` -> `toLowerCase()`?
This is the wrong place to get the pool param. This is the pooling layer.
I think we can just change it to `service` here. It doesn't make sense to me since the function is only called by the service.
Nitpick, this is probably a good idea to use `t.Logf` to be consistent across the codebase, I don't think there's a need to use `t.Log` here. It's just a matter of personal preference, but you should be consistent and stick to one style of logging in this repo.
I would prefer using `hasClass` to check the `class` of the element. I would suggest to use it for the `hasClass`, which I don't think it is a class anymore.
I don't think this check is correct
Is this change required?
This seems to be the only place we're doing this. Is there any other reason we can't just always tag it?
This is not necessary, `super()` is already defined.
I don't think this one is necessary anymore since you're removing the `:ic`.
This should be droppable, since we don't actually do this in `CreateRules`.
This should probably be `POST`
Why did you replace all the `\1.` with `\1.`?
I think this is causing the CI test to fail. I think we can revert this line.
Can be removed now
Is this warning really needed? I think it was useful for the plugin loader. The problem is that it is not a plugin that can be loaded in the main window.
Please don't reorder imports.
I'm not sure if we should remove this test.
Why do we need the order?
This doesn't seem to be used?
I don't think this should be a RuntimeException.
Please don't use the binascii import in the code. This is not needed.
"cannot add column, name already exists and is not being deleted"
Why is this hardcoded here, and not in `pkg/devtools`?
This should also probably be renamed to config?
Use `%w` instead of `%w`.
I think we can remove this, it is unused
This should be removed.
This function is only called from `test_helper_block.cpp`.
I would prefer `If a user wishes to modify the said behaviour, they must override the said method in a custom extension of IndexSearcher`
I'm not sure about this change. I think `if not field:` will be more clear.
nit: import ordering change
This file should be reverted.
Isn't this the same behavior as before?
This is a breaking change. Can you add it as a breaking change?
Why this is a new var? I don't see a use-after-destroy anywhere in this PR.
The logic of this function is a bit hard to read now. Maybe we could just remove this condition altogether and just use 0?
Should this be `@group legacy`? It doesn't look like there is anything legacy in the PR.
This is the actual fix. The rest looks great.
this is not the right fix.
This file is now not needed.
nit. Should we initialize num_refs_ as 0?
This is the only test that's failing in this change.
Can we change the function name to "casSnapshotObject" and change the docs accordingly?
nit: `UserGroup` -> `UserGroup`
Is this needed ?
I think we need to make a call in NewWebAPI that sets TTLDuration to the value from the config
should probably be marked as deprecated, as they are not used anymore and are deprecated.
I'd recommend putting a note on the server side here that this might be useful in a few cases.
Is this a new constant?
I think this is wrong. If the trimmed password contains any leading/trailing whitespace it will return an empty string. The code should be checking for that, and return an error if the trimmed password contains any leading or trailing whitespace.
We can remove this. We are not going to show the dialog anymore.
I'd like to understand why this was necessary. It seems to be the only place we set changed, so it's not a good idea to have it here at all.
nit: we could use `config` here.

Can we do this in a separate partial, so all the logic is together? It's not obvious from the name what it does.
This is a very generic name. Maybe we should have a better name for these. Maybe `marketKey`?
I'm wondering if we should just make this `client_type` to default to `kerberos` or `token`? I'm not sure what happens if `client_type` is not passed?
Layout/SpaceAroundOperators: Surrounding space missing for operator ->.
I think this is missing the type annotation, right?
Can you also test the error output?
This should be in the new file
This is just a lint issue?
Can you please change it to the `opentelemetry` prefix as well?
This should be `APP_NAME`, not `NODE_NAME`
These need to be updated
We should not remove transactions in transactions db.
This is also used for the dev command. It should stay the same.
This is just the `parse_plan_and_raise` syntax, and is not used in the method anymore. Can we remove it?
you need to remove the line below, as it's already in `np`
This should be `GeckoSession.SelectionActionDelegate.ACTION_COPY.equals(action) || GeckoSession.SelectionActionDelegate.ACTION_UNSELECT.equals(action)`.
This line needs to be reverted.
This should be in alphabetical order.
Why would the repository be private for the owner? Is this because we want to check if the user is a super user?
This is the same as `DefaultInitialInterval`.
I'm not sure how I feel about `abspath`ing a file path here.
I don't see where this is defined - does it have to be defined?
This is not needed, we can use the global polyfill
Should we have an issue to track this?
This should be `fmt.Errorf("file bucket %s is not a directory", dir)`
I think this needs an update to the docs as well.
This looks like it's not needed.
I'd just inline this method. It's only used once, but it's not used anywhere else in this class.
I think you need to update the `requirements.txt` for this to be `BLACKLIST_VIOLATION`.
This doesn't seem like it should be a list, can we make this an `IReadOnlyCollection<string>`?
Is this the right time to get this value from SQL?
Is `needs_reshape_` necessary here? It doesn't seem to be used anywhere else.
I'd prefer if you used `list.reject(&:order) || list.empty?`
Is the trailing slash on purpose here?
This is not a config, it's a config map.
Can you check if the result is 0 or the subtotal is 0 as well?
I think we need to return a copy of the writers here.
@wendycwong do you think we should use `ENGINE-03002 Exception while closing command context`?
This is not allowed, as it is only used in tests.
Shouldn't you be using this in a test? (I'm not sure if that's what you want here, but it's not a blocker)
Why do you need a thread here?
I would suggest to use `cmdutil.AddCommand` here and in other modules as well.
This example has a typo and it's now in Ruby.
I'd rather not use the flag, and rather have a separate flag (which would be read by the user, not the user), so that the user can decide whether they want to use a crash or not.
Shouldn't we use this to generate a new variable name for the requestBodyTypeName?
Is there a reason you don't use `0o600`? (I'm not against it, just curious)
Should we use `?serverId=$serverId` for consistency?
Is this really the correct fix? It looks like it should be `max_overlaps == floor_thr`?
@sttts, I am not sure this is a good way to organise imports in the same section.
Shouldn't this be Platform, not Platform?
I think this check is not necessary. We can check if cgroup is enbled in kernel and return an error if that happens. But we should not be doing that.
This doesn't seem right. If the total is not over the limit, it's not going to show the limit button.
I think we should rename this to `nextEpoch`, because `epochNum` is too long.
I don't understand why this is here. If it's the case, then we should be setting the oldEntity to the newly-created entity.
I don't think it is a good idea to have these constants in `nano/socket`. They are only used in `nano/frontier/socket.cpp` and `nano/socket/socket_client.cpp`.
`connectid` was not used in this PR
`array $crossSelling = [];`
I think we need to add this to `ExecutionExecution`.
I would just pass in `name` here.
I think we should add the gasprice here.

This is not a valid implementation, because we can still call `reduceLeft` on a nil element.
@jimfb this file should be renamed to azure-parameter-grouping.json
This should not be removed as we do not implement gas update for VMs.
Please revert this change.
I think it might be better to just catch the Exception and raise a `ApiInitializationError` with the message as the cause, instead of having to catch all Exceptions.
E501 line too long (123 > 115 characters)
@pascalgrimaud I think the space is needed.
Why 10? This is a lot of data.
I'm not sure about this. If we want to set text_align=middle, the user will have to set text_font_size=None. If we want to set text_font_size=None, the user will not have to set text_font_size=%dPt. The default font size should be %d, which means that the text_font size must not be set. If text_font_size is specified then we will default to None.
Should we have a constructor that does not take an explicit security attributes? I'm wondering if we need a constructor with no attributes.
@janmeier @bnosek @martinpovolny Is it safe to use the same id for multiple nodes?
I think these methods are not needed, since they are always the same, and they will always be equal
We should probably rename these to `formatTimeAgo` and `formatTimeAgoText`.
I think we can get rid of the "compare", I guess.
I'm not sure if I like the "signed" term here, because I'm pretty sure it's an internal implementation details (i.e. it's not a function or anything else). But I guess the "signed" is a bit of a misnomer. I wouldn't say that it's "signed" in the context of the expression.
I think this should be `1*60*24` to match the `notBefore` value in the `JWTSignOptions`.
Should this be `network == "beta" || network == "beta-v1" || network == "beta-v2"` to avoid "beta" being removed from the list of valid network names?
Should this be `this.GetType().Assembly`?
This was a typo.
Why do we change the `size` of `topic->name`?
`false for none` => `false for any IP address`
I think you need to use `employeeId` here too.
we have v1 staking command now.
I'd prefer to avoid using this if/else if possible.
I'm not sure if this TODO is correct. The code below will return `nil, err` if there is no database transaction, and it will panic.
return network
I would like to see the same code in the opauda kernel as well. This is a common case, so let's move it there.
Why not use `if hasattr(self, 'notifyObjectDeletion'):` ?
I think you can use `logutil.Logger` and `fmt.Fprintf` here to make it more readable.
@jywarren @jywarrent I've changed this because I'm not sure how to handle the 'example answer' field in this form.
Is this used?
I think the button is not shown anymore, right?
Why change this one?
Why remove the `| ParityTraceTypes.Rewards` here?
Should be false by default
// If the name starts with $ we need to increment it. If it starts with $, it is an error. Otherwise it is an error.
Nit: `package soc` is a good practice. The package name is `soc`, and the package name is `soc.go`, which is used to refer to a package. The package name is not the same as the filename. It's better to name it `soc` or `soc.go`.
This error is only used in the tests, should we move it there instead of here?
Which of the methods in this class do you expect to be invoked with the block number?
I'm not sure if the exception is needed here, since you don't use it. The exception is passed to the `QueueUserWorkItem` below.
@jhowardmsft do you know how to fix this ?
Should the version replace be here too?
I think you can drop the `resp.getheader` call here. `handle_storage_class_header` will do the check for you.
This doesn't seem to be used?
nit: `GetBucketRegion` is a little misleading. The hint is actually the config provider and not a region hint.
This will be a lot of data in memory. Can you do a `StringUtils.isNotEmpty` instead?
nit: can we call this `ToApplicationKind` ?
Should we add a note in the doc that this option is only supported for MSI?
This is a bit too strict.
why do you need the marshal?
Should this be `EmitEvent` instead of `EmitEvent`? The latter is more common for all events, right?
This should be `plan_plan_id`, not `user_id`, right?
This change is necessary because we want to support both `upload` and `avatar` forms.
`self.cancel` is called only in the `else` branch of the conditional. You should put this in the `if` branch of the `if`
Why remove this parameter? The `app_name` is not useful anymore, and `[environment_name]` isn't really useful.
Why is this here?
@jasonsanjose Why is the integration package included?
Why is this necessary?
Why not using a constant?
This should be `if ok && !@outputter.skip_action_step?("Generating type references")`
I guess this is not needed because the default value is 1 now?
Is it safe to return `false` if it failed to remove the shutdown hook?
Can you add more details about what this means and why it's necessary?
I think this is not correct. This should be `\\$` instead of `\$`. The `$` should be inside a `\` in `RDoc` (and `\` should be escaped as well).
why are we changing it to finest?
Shouldn't this have a pointer type?
I would suggest adding `default` case here. This would also allow us to remove the switch and just use `default` for both cases.
I think you need to handle the err here as well, right?
Should this `require.NotNil(t, err)` be here?
nit: we could probably just use a single ctx for this.
The name is a little bit misleading, it's not reporting undestroyed objects.
`MongoGridFsStreamError` is a subclass of `MongoDriverError` so you can remove the `cannot call abort on a stream twice`
This is not needed, right?
Should we consider `ITracer` to be a more specific name, as `TracerDecorator`?
I guess you can remove this line.
I think the help text here could be more informative, maybe "Increase verbosity by the number of messages produced."
Extra empty line detected at class body end.
Can we make it nullable and default it to null?
This is a little bit odd. Why not just set it as the zero value?
Shouldn't we also be checking if we don't have `stop.PayloadNames.Count == 0` here?
I think the `LocationProvider` should be in a separate package, so that we can make this change for the future.
nit: `SetGetMetricFunction` -> `SetMetricFunc`
I think the endpoint URL should be `http://{PORT_DYNAMODB_BACKEND}/api/v1/tables` or `http://{PORT_DYNAMODB_BACKEND}/api/v2/tables`
This should probably just be `(int)num_raw`, no?
Why do we need to remove these tests?
Can you explain why the change from `0` to `null`?
Why is `\xc0` not a valid byte sequence? It's a valid one and is valid on all platforms.
Why is this necessary?
Why was this change made?
This is an unrelated change. Can be reverted.
I think the `final` modifier should stay here
Why is it false?
Can you please also remove the extra spaces?
Why not `throw new Exception("...")`?
I wonder if we could use the concrete type here and make the `snippetSetRunner` field `private`
Is this used anywhere?
I would prefer not to pass the `num_classes` as a parameter, but instead pass a `None` to indicate it's not a class.
Is it worth adding an interface for this? Seem to be a pretty simple way of implementing this. If not, I think we should be more flexible. We don't want to have this implementation in the public API of pubsub (as it seems like it's the case for the pubsub implementation to not be used at all), but if we can do this, I'm fine to just add this method to pubsub as it isn't used at all.
I don't think that we need to change this. The tests should be able to work without libuv.
Can this ever fail?
This looks like debugging code. Can you remove this?
I am wondering if we should not have the same check for the extension as for the YCbCr version. It's a bit weird to have the same check in both cases.
I don't think we want to check CCTOOLS_LOOP_DEV_FULL here. It would be good if the environment variable was set.
Can we use `isVNode` here, instead of `newVNode.type === 'progress' && !i`?
I think it is not required. Please check.
Is the `finest()` statement intentionally left in the log statement?

This query should not be necessary
ps = preview spmd
nit: this can be inlined
I think these are all wrong, should be 0b00010000.
This class is missing the `@psalm-taint-sink` tag (it is used on the class-string as well).
I'm not sure if this will work in py3.6.
I think it's better to test that `all_statuses.next_token` is correct.
Why is this necessary?
Is this a bug fix, or just a bugfix of something?
This test was buggy because `util.read_yaml(TEST_YAML)` doesn't read the contents of the build.yml (it doesn't read anything from disk). The test was broken, because we didn't write `os.read_yaml` in the build.yaml.
Should this be `Log.LogError` or just `Log.LogMessage`?
This should be an `elsif`
I think this is a bit more readable than `String.format`
I'm not sure we need to change these tests? I thought that they are not related to the error message. @jtkech
This looks a little strange. What if a user sets the `H2O_HEADERS_CMD_NULL`? Is that a valid condition?
Why not store both of these as struct?
Should this be removed?
I think this is a better place for this function
I think this can be simplified to `resBody, err := client.GetValue(ctx, reqBody, yarpc.WithHeader("Token", "10"))`?
I'm a little unsure of the purpose of this line.
I'm not a big fan of this assert. The test will pass even if you have `--sharedVolumeMatchFullConfig=false`. Can we just make it an optional field?
We should add this to the release notes.
Should be `logger.trace`
I don't think we should have a `static` member here.
Nit: Can you revert this change?
Can we just add `-z` to the version to avoid the dependency?
This is not needed anymore?
Should this also be set when `pendingConfiguration.port != null`
I don't think you need the global lodash here.
Is there no more W3C?
This is not used anymore.
Please remove the semi-colon.
I think we can use `@page_title` here, since it's used in both the view and the view.
This should probably be a warning instead of an error. If the function is called twice, it should be possible to register multiple options at once.
The `isProtected` property in the `KeyboardKeyboard` class is not used anywhere in the code.
I think this is missing a `click()`
This should probably be `context`.
I don't think this is the way to go here. This is a feature flag and the default is false.
Why is this removed?
Why did you change this?
This should be `target && !params.infiniteDistanceEffect`, right?
I would change the key from `user-loyalty` to `visitor-loyalty`, as I think the key should be different for the visitor and user. Also we need to update the `app.js` for user-loyalty to work.
Is it possible to get this from the MSI environment, and use that instead? That way, the `reg` command can be called without any changes.
Why not use the exception type of the inner exception?
can you make this a constant so that this can be reused across multiple calls?
I think this is not a correct test for the new `Frame`.
`UnqualifiedName` is now a method of the parser object. It's not really a field name but rather a field name.
Should it be `l` for consistency with `sarif.yaml`?
I wonder if we shouldn't just have one of these with `fill` that takes a `String` or `Queue`. I think that we can just use `fill` in `io.vavr.collection.collections` and get rid of the `io.vavr.collection.Collections` import.
This change is to make the exporters work properly. It was previously being used to configure the OpenTelemetry tracer provider and now it's being used to configure the OpenTelemetry tracer. This change is to keep the `AddOpenTelemetryTracerProvider` public so that users can use the `JaegerExporter` without breaking the exporter.
Should we check this before the `lastId` assignment?
This is unused, can be removed
`if (length > 0) {` would be clearer.
This seems like a strange place for this constant. I would expect this to live in the `payment` package.
Why not use `Recv()`?
We can't use static imports in a code that is only used once, so please use a local variable for this
Why not `AbstractJavaAccessTypeNode` ?
I would suggest to create another table for AllergenNames. This is a little confusing.
I think it's good to change this one, but I'm wondering what's happening here. I believe we should have a spec that covers the case where we have a completed trail that has no content.
I'm assuming that `version` is not negative here. Should this be `std::numeric_limits<std::size_t>::max()` ?
Why do you need this class?
nitpick: `dilation_data[i] * dilation_data[i] + 1` is enough.
Can we move this method to `SpanTest` instead of having it as a separate file?
I am not convinced this should change.
I guess the `TODO` is not needed.

@peterflynn do you know what is the right way to do that? This is the script that is running on the local server
Is this change necessary ?
The key should be different to the widget name (same with the key above).
Should we use `beginIndex >= 0` to be consistent with `SubSequenceRange`?
This should not be needed. We should check if `registry` is not null in the constructor
I don't see the point of having two separate settings for `UsageReportingEnabled`.
I would prefer to use a random string, e.g. `uuid.NewRandom().String()`
Is this used?
We should be able to get rid of this
This route should be removed as well since we don't use it.
Isn't there a method that does this, so we could just call it here?
I think this can just be `string.replace(escape_char, escape_char * 2)`
This is a bit strange. I don't think this check is needed.
This is the only real change. `err` is returned in this case, so we should handle it as a panic
I think you can just remove these checks. The stats checker is not enabled by default for clangsa, and it's not a problem to disable it when we run the tests.
why is this a magic value?
This is not necessary, the `opc.Issuer` should be appended if `opc.StrictSigningKeyUsage` is true.
Why do you need this? It should be a 400 error.
I think we should add an assert here, that the format is valid and set, otherwise we might have unexpected results.
Why are you changing this?
Can we add a TODO to remove this in 2.0?
I'm not sure why this was added, and if there was a specific reason why we wouldn't want to keep it.
I think this needs to be `hu.IsPost(config.Fairbank, 0)`
The "Flat representation" sounds a bit weird. Maybe "Flat selection"?
This is an odd place to put code.
We should probably remove the `webviewHelper` import here
This is not used anywhere
I think this is the only place that's using the send syntax
I'm not sure this should be an error log message. If it is an Error, it should probably be an Error.
Why does this need to be a dropdown choice?
I'd rather have this be `StateDependencies`.
I'm not sure if this change is correct. I think you should just remove the `if` statement and `returned_results` assignment. The `try` block is not used and can be dropped.
struct field DisableHttpGit should be DisableHTTPGit
@damianlegawiec Is this change intentional?
I wonder if we should add `.catch(...)` or `.catch(err => { ... })` here
I'm not sure about `json["NetworkSettings"]` here. The JSON is already a hash.
I think it would be better to use a callback here, so we don't trigger another callback in this case.
This should have been `NewTestCStorPool`. I'll push a new PR.
This is not needed anymore. You should remove the method.
I think this line can be deleted now.
I think we want to add `h` as a dependency.
Can you do this check in `GetKey()`?
I would suggest using "ValidationException": gcerr.InvalidArgument, as it is an error type, and not the same as the others.
Can we use IDisposable? I assume this method will never be used outside of the app context?
I would rather see a kwarg `add_transaction` that defaults to `False`. Then the caller could just do a `if add_transaction:` instead of passing in a boolean flag.
Can we add a TODO here to remove this when we remove py2?
`implode()` is faster, and more efficient.
I think this is not right. `a_type` should be `a->type` not `a->type`.
I think we should move this class to `azkaban.trigger` package
Why not using `parent::__construct`?
I think we want to pass `$config->get('config')->get('mailer');` here
Shouldn't it be SDA_PIN = 24?
I would rather we report the missing class.
I wonder if there is a need to change this name. The name is only for the HTTP tracing, but the value is for the HTTP trace.
This should probably return an error if the user doesn't use the working directory (or the full path, depending on which is the current working directory). Otherwise, it might be confusing to users to have a working directory with the relative path (and then have to use the original path).
please don't change imports. It is not a good practice to use wildcard import
Why is the name `outboundservice`?
I'd move the closing tag to the next line and remove the `feedback_url:` argument.
I guess we don't need to remove the batchSize?
I would move this to a new controller and add a method to `Stripe::Customer` that will do this, so that we don't need this controller.
I think the port is already allocated by snprintf and is allocated at this point.
nit: I'd prefer to see SourceGroups be an array of ClusterGroup names, not a set of string.
I don't understand why this is necessary.
I would suggest to add the priority to the error map in `p/errors` as the default priority. This will allow for better error reporting later on, and also allow us to add the `Error` field to the error map when we decide to add the `Error` field to it.
This is not being used

I don't think you need to keep the `console.log()` statements. They will be printed to the console by default.
Is it possible to reuse the same Session instance for all PDClient instances?
Use 2 (not 9) spaces for indenting an expression spanning multiple lines.
I think it would be better to use this endpoint for `get` and `delete` instead of the old one.
Should we add a note on what the reserved docs mean?
I think the `max_retries` is too low for the `curl_with_retries` method. The `retry_on` method takes care of that. You can use `curl_with_retries` for this.
Is this a breaking change or a new version of the selector package?
I don't think this method is needed since it's only called from the `script_changeSelection` method
@scefali is this the correct response? I would assume the tag extraction should be skipped for the case when there are tags. I guess the problem is that this would be returning a 400 but the error should be 400, right?
You don't really need to inject the class, as there are already a few `FrontBaseController`s.
Why do these models have the same `checkpoint`? It seems to me like the checkpoint should be the same for all layers.
This should probably be `onAuthFlowError("jwt_oauth_error", e.getLocalizedMessage(), callback.finish());`
This file needs a copyright header
Is this intentionally not `info`?
We need to update the dependency on `cssutils` too (see `configargparse`).
I'm not sure if it's the right import for this one.
@tinaafitz This is the change I am not sure if we should change the `notify` method. We should not be notifying on an event that's not related to the stripe subscription. We are not going to be notifying on StripeEvents for a subscription that's specific to the current stripe subscription.
This test should be moved to the `user_spec.rb`, since it's the main user spec.
Why is this changing?
`config.Default` should be replaced with `NewDB()`
@peter-brown I don't think this is needed here.
This is a BC break
Can you explain why this is needed here? The result of the tests should already be in the correct location.
I don't think we need to rename this file.
This is a change in the default value of the options array and should not be made here.
@jpechane, I am not familiar enough with the FileUtil class, so maybe this is fine.
this can be simplified to just `super || data.cache?(:bundler)`
Nit: I'd prefer this line be `!SupportsAllocation(contexts) && this.CanBeAllocated(contexts)` (and same for `IsAsleep`)
Why did you add this change?
You should also verify the schema version is 2.
Why is this needed?
Why do you ignore the error?
The test was failing due to a bad team name.
This should probably be `short` instead of `long`. `int` is a bit more common.
This is the same test that is used in the test file. Can you move it to the test file so it is only used there?
Can we use `ENV['S3_REGION']` directly?
Should we check if it's a component instead and bail early if it is not?
This change seems unrelated to the rest of the change?
This change is not needed
I'm wondering if there's any value in using an array here instead of `.filter` and `.count()`
It looks like this is not correct, since the function is now only used to get the list. It should be changed to `image_create_format_modifiers` and this code should be changed accordingly.
I am pretty sure we are using the wrong namespace here. I don't think we are going to be using the right one.
This function doesn't do any disk-specific work. It just calls the builder function to create a disk-based pool. It also creates a disk-based pool.
I don't think this should be here. We don't want to parse the schema if the field is not there.
I guess this should also be added to `SpringAuthenticationDetailsSource`
this should be done with a `.filter()`
I don't understand the reason why we need this check? If the Dynamo thread is exiting and it is still using dcontext (i.e. is it a client thread)? I think this is the reason why the code in os_thread_exit() is not running when it is called from the client.
I think you can just add a `[]string` to all of the options
I think we should add two annotations for the `app`.
I'm not sure what's up with the `getUser` function. It seems like it should be the same as the `getHostname` function in the `workflow` package.
I am not sure if we should be using a different version for this. It seems that it is a new method that should be implemented. The current version of the analyzer should be used.
What is the purpose of this?
#define DFL_SYSFS_SEC_BMC_RESET            DFL_SYSFS_SEC_GLOB "bmc_reset"
I'm not sure I like the idea of using a Scope to represent the current context. I feel like we need this to indicate which scope is being used, and that it is the current context.
The same question here about whitespace
This import can be dropped.
I think this should be named FakeServer.
The `\n`s should be on its own line.
Why not just `return enumerable.ToList()`?
Why not remove this field as well?
I'm curious about why `checkSeverity` is added to `ErrorProneOptions`. Is it just a stylistic question?
I would rather use `depthwise` as default for now, so that we can remove it in the future.
Is it better to check the name here, rather than just the first part of the string?
You don't need to do this, this will be handled by the `if`.
I'm not sure if we can use a callback here since the function itself doesn't do anything.
I think this should be `vagrant.expects`
I'm not sure if we can use the `proposal-submodel-container` class here or not, it's a bit confusing.
I don't think this should be part of the factory. It's not used outside of this client and is just an abstraction.
Is there an equivalent for this field in the `params` section of `m.Spec`?
This is the only part that needs to be changed, but it seems odd that we pass in a stop channel here.
I'm not sure this is a good idea. This icon should be a separate button, not a border icon.
This should be `MCXT_NUM_SIMD_SLOTS` not `MCXT_NUM_SIMD_SLOTS`
Is it a problem to retry the transaction in 3 times? Can we just retry the transaction in one of two?

We should also update the docstring of the method, too.
Please revert this change.
I think we should call this something like "FlushAsync" or "ForceFlush" or something similar, as we're doing in other places.
I would prefer to see this log message in a different place. The `updateProgress` is not really about updating anything, it's about updating the progress of the action, and it's actually about updating it, not actually about the progress of the action. I would prefer to see this log line as it is. The reason I'd prefer to see the `updateProgress` being a flag that indicates if it was a success or not (i.e. whether it succeeded) and whether the update was not successful is because there's some sort of "progress update" that is not necessarily relevant (i.e. if
I think it's ok to make these readonly fields? I think we could make them non-readonly by using a struct, which will allow you to set `readonly` on them.
why was this removed?
missing space after comma
Is this check necessary? It's a bit weird to check for NULL here but then check for nullptr in other places.
Is there a way to make this a race? I'm not sure if it is, but I think it should probably be.
I think we need to call this method from Write.
Please keep the phpdoc for `$root_scope`.
I'd keep it to `info` level, but change it to `fine` to avoid the `new DesiredCapabilities` being created in the first place.
You could also just call `_o.Test3.A.Pack(...)` here.
this route is used in the `get` controller so should be updated to `gentleVerifyToken` as well
I think it'd be good to have a test here to make sure this redirects to the correct page (and if so, show a success message).
I think this is not correct. You should be passing in the result of the query.
`[MODE]` seems like a weird name, maybe `[MODE] --collect-perf-data --no-cache` ?
Can't we just use the `num_pipeline_schedules_in_repo` instead?
I'm wondering if these should be in Network API? I'm not sure how much it is used by other API
`bd.Object` is already a reference.
`long` is not defined on Python 3. So this should be `'<= 3'`
Please remove this line
Is there a reason you didn't want to use `execute_command()` like in your other PR?
Should this be `H2O_PROBE_CONN_WITH_HEADERS`?
Should we also change the short description?
I think this will need a migration.
nit: I think it's better to call it `HIDE_COLUMNS` to be consistent with `SPARK_COLUMN_HIDDEN_FIELDS`
This should be renamed too.
Is it intentional that `disable_snapshot_annotations` is set to true here?
We should be able to just remove this migration.
I would put this in some function.
This doesn't look like it's called anywhere.
Is it necessary to set the recordings to be 1000?
This was a bug
Why do we need this method and can't we directly use `confParser.longConf().option(SparkReadOptions.SPLIT_SIZE)`?
`FileNotADirectoryError` would make more sense here, I guess.
This is not needed, since we don't need the `follow_selected` function in the `WebTab`.
@wjrsimpson Isn't this the only place where we have the user and the session?
I'm not sure about this, I think it's better to use the `objpath` than to construct the object path.
This should be added to the `Protocol` struct, not the `ConnectionID` struct.
This is the actual fix, and the rest is just some more refactoring.
This should probably be configurable, but I'm not sure how to do that.
I think it would be better to just do `chunk = chunk.BiggestPow2AlignedRange()` and remove the line 375
This seems to be repeated in several places. Can we have this in a function that gets called by both places?
This should be `fmt`
This is the main issue. The `src_repo` should be `src_is_bare_or_bare_user` in the `OSTREE_REPO_MODE_BARE_USER` case and we need to check for `src_is_bare_or_user && !OSTREE_OBJECT_TYPE_IS_META(objtype)` in this case.
I think it's safer and more robust to do `if statusParts, ok := statusParts[1].(string); ok {` and then check it in the if-clause.
This seems to be a breaking change to the test.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
@mistercrunch I'm a bit worried about this. I don't think it should be an exception here. If the job was cancelled, then it should return an error that says "Job was cancelled".
nit: the type is `CStorPoolPhase`
I would use strict comparison instead of strict comparison
I'd use `syscall.Stdin.Int()` instead to be sure it is a `int`.
Why does this need to be a method?
nit: I would name this `cgroupControl` to be consistent with how we call it.
I don't think the arrow function is needed here. The function is a simple unary expr, and it is just a simple expression.
This should be `@Deprecated`.
nit: can you move it to the last group?
This is just a mock, right?
why did you remove the else?
Is this needed?
I think we should also update descriptor set layout state for all the bound descriptor sets in the pipe state.
This is not a good error. It should be an invalid argument.
Should we also rename the function to `GetDefaultDockerApiVersion`
I think you should also update this text as well
nit: `Every` -> `Every`
`mock` is usually used for mocks. `mockExplorer` is a better name.
Why did you change this?
I think this is the only change in this file, and I'm not sure if this is intended. If it is needed, it should be done separately
This class is not needed anymore since it's a `RecyclerView.Widget`.
Can this be removed?
Isn't it possible that this is not an assignment?
This seems a bit hacky. Can we make a new file called `noninteractive_test.go` that has these env vars and then set the environment variables to a different value?
This is not used anywhere?
I'm not a big fan of the logic here. I think we should be able to just do the check directly in the `parse` function.
can we just use termPrefix here?
I don't think we need the plugin name here
Why this change?
I think this constant is not used anywhere?
why do we make these public?
This was not needed, because `HandleNewBlocks` is called by `handleNewTipset`.
Why change this test?
This test name is a little misleading, since we're now parsing it from the `notafile.yml` file to get a list of hosts, not just the `notafile` part. Maybe `it 'doesnt raise if hosts file not found in file'`? Also, I would use a different name, like `nota_file.yml` or `not_a_file.yml`.
This should not be needed.
`target channel to start`
This is an existing bug, we should be able to remove the line entirely.
We should add a note here about what this is.
This should be removed.
I wonder if `checkCompounds` should be called `checkWord` instead of `checkSimpleWord` to match the `checkCompounds` method.
"in the event" --> "in the function"
I'm not sure about this. It seems like we're not going to be showing the `purchases` page, but rather the `pages#show` action. I think you want a `get '/purchases/:lookup' => 'products#show'`?
@kennknowles I think this should be `new_trend`?
This is not correct. You can still use `SetImageViewLayout` when image_view isn't set.
I think we can just remove this and make this a no-op.
This should probably be in a `try/finally`
This method was only called once, and the instance variable is not used at all.
I would recommend to use `removeElement()` to remove element from DOM instead of using the native function API.
I don't think we should use `uint8` as a type. This should be `uint16`.
Is this a new task?
@mzazrivec Is there an option to use `--tty`? If so, we may want to make it more explicit.
Is this intentionally different than a fixed default value?
I think `re-index` is better here?
This line should go outside of the condition, since it's checking for existence only.
I'm curious why you changed this? I see that we are using "athenz" as the default for a database, but this is used for other databases. Also, this should be `db-driver-class`.
I think we want this to be `ensure_system_role_exists` since it's not a method, but an instance method.
Shouldn't we throw for `https` and `http` as well?
This needs to be localized
This seems to be missing a check for `svcCfg.RPC.Port`?
I'm not sure we need this lock. The generator should lock the `account` before calling `GenerateBlock`.
I think it's better to move this to the end, because it is the only time the total_blocks has changed.
why 100, and not 100?
Is there a reason why this isn't an abstract class? The class is only used by the tests, so I wouldn't expect that to cause problems.
This was a typo.

This should be `->createdAt`.
Can we do `from . import koalas as ks` instead? I don't think we use `koalas` anywhere else in our codebase
@cwgoes I don't think we need this, we can use this for the storage policy and not disable it.
shouldn't we set `push_stream_ids.max_open = 0` here ?
@tinaafitz Can you add the `@param [Integer] exit_code` to the docstring?
nit: I would prefer a `get` method instead of `remove`, but not a blocker.
I'd prefer to keep it in a separate constant file, and use `ParquetIO.BloomFilter.MAX_BYTES` as the default value. I think the default value would be better if we can change it in the future.
@mjesusz This line is causing a build failure due to the lack of `//snippet-keyword`.
I'm not sure what's going on here, but I think it's still relevant.
`null` is not necessary.
I think you can make it private and use it in `ProxySettings` instead of adding a new key. It's not really used in a view but it's used in a UI and not a UI
I think the condition is a bit too complicated. If the number of children is not equal to 1, then the default value for nodeGroup.ExplicitValues.CollisionEnergy will be null. The `?` operator can be replaced by `nodeGroup.ExplicitValues.CollisionEnergy ?? null`
This is a bit of a hack, but I guess this is fine for now.
Isn't the default value already a string here, so this can just `if not ids`?
We have a client package for these kinds of clients - we should probably be consistent.
this line should not be changed
Should this also be `rawErrorData.get(CLASS)` and `rawErrorData.get(STACK_TRACE)`, since they are not null if they are empty?
I don't think we should add this to the `data_classes` list. It's only used by a few tests and we're just moving things to the `data_classes` list.
Why not `use Propel\Runtime\ServiceContainer\ServiceContainer;`?
Why not just `throw` the exception?
Why do we need this? We're not using any of the other authentication methods.
This lock is not used
I think we should also do this for pandas DataFrame (as we do in `kruskal`)
I don't think we need to have the url in the message. The user should be able to get it from a file.
This should be a property of `_Settings`.
Why not a `VNode`?
This is not used anywhere
why this change ?
This function does not belong here
Use the lambda method for multiline lambdas.<br>Pass &:match as an argument to match instead of a block.
We should update this to the `mdc-tab` class as well
I wouldn't use `+%s` as it's not a date.
I think it would be better to make the function public.
this change is not correct. It should never happen since the function is not called.
This is probably fine but I think the `sqlite` plugin should be in its own package, like `sql/db/sqliteplugin.go` or `sql/sqliteplugin.go`
I'm not sure this is a good idea. The size is known to be the same as the size of the registers. If this is not possible, I'd suggest using `ASSERT_EQ`.
Why this change?
This is not needed
Should this also log the error?
This is a little bit confusing, why do we need this lock here?
I don't see why this change is needed.
This should be leaderprops.getStr(ZkStateReader, ZkStateReader.BASE_URL_PROP)
Should this be `current_user.orcid_identifier`?
This is not used?
This can't be removed. It is a leftover from a previous PR.
I think `Container` should also have `__getContentDescription`.
I think this should be done at init time instead?
This is not used.
nit: I don't think we need to add this to the struct as we only need to add it to the `ChainToContents`
I'm not sure if it's worth changing this, but it seems like a better choice would be to use a `description` attribute, and then just use `.format` on the string to format the name.
I'm not sure if this is the correct place to do this. I would prefer to have this in the `deleteLocalResource` method, but it's fine if the idea is to delete a resource from the filesystem.
Please, use the `org.apache.logging.log4j.LogManager` instead.
@jeremyk-rh Why is this required?
This is the default config for Jest, right?
I'm wondering if this could be done in `NewReplacer` instead of the `server.go` file, since it's used only there?
@daniloerrod , I would suggest we do not allow this for all commands, and instead let it crash the process if the session id is null. We can use the `session.getId()` which would allow for this to be set.
Isn't this a bit of magic? Can't we use `/\b[- \| | /]` instead?
I think it is better to have a single file `tests/utils/config.py`. This is the same code as `tests/utils/config.py`.
The description of the property should be updated to reflect the new property type, i.e. the new behavior
I think we should dispatch `finishResolution` here, because the `account` object should contain the full `account` object.
`source_address_str` would be more appropriate
This should be outside the "else" block.
Why is this necessary? Is there a reason we can't just use the `User` object?
Should this be in PythonDocGenerator?
Can be removed.
Is this a good idea? What happens if I call this with something like `--config <config file>`, does it get a `TypeError`? I think it should raise an `IOError`, and it would be a bit more clear.
Please group the third-party imports into a separate group
I would rather have the factory be an optional parameter. This way it will be optional.
This is a public API, right? We should be explicit about it.
nit: "to remove" -> "from"
This is the fix to #4740
I'd prefer not to have `p` at the end of the function.
I think it would be better to make this `final` and have the other methods return it.
Why do we need the `gh-pages` stuff here? Can't we remove the `update-bower-json` and `gh-pages:bower`?
This is the only line that changed, right? I'd rather not make this change, but I'm not sure what the original author meant.
This example will need to be updated to use the new syntax.
I think we need to increase the timeout in the `mocha.config` file.
Is this necessary?
Why is this no longer a `BadRequest`? Is this because of some API compatibility concerns?
This seems wrong. If `rowGroupsStartRowPos` is null, we should set page source to 0.
I think we should have the `/bin/sh` in here. We should probably be using `exec` for the `zfs livenesstimestap` command, and it will also work with a non-zfs shell command. But I'm not sure what is the best solution here for the zfs driver. What do you think @stgraber ?
Shouldn't this be the same as in the `CommandLine` interface?
This should use the constant.
I would move this check before the `prepare_destroy_conn` line. The `if` statement should be the first check.
I think the index can be removed.
We need a better place for this. It's the same code as `strk.kbt.io/projects/go/github.com/strk.kbt.io/libravatar`
I think it is better to return a 500 here.
Should this be called "on-instance log"?
Isn't the `alphaPicker-fixed-right` class enough? I don't see it in any other place.
This is a bit misleading since it checks for `!HasOwned` and also doesn't return false if the cluster is the owner of the cluster.
This is an API key. It should not be hardcoded here, and the logic should be handled in the API key handler. Also, I think it should be handled in the api sig handler.
nit: I think we should just be consistent and call this `canonicalizedKeyMapping` since this is the map from canonical to original key
I think you meant "This profile will be permanently deleted."?
Why is this not using the new method `getLastAutosensDataSynchronized()`?
I would suggest to use `GetRouteType` here, to avoid confusion with `GetResourceType`.
This should be a single field.

I don't think this needs to be a `StringBuilder`.
this change seems to have no effect
I'm not sure if it matters in this function (I don't think so), but I think it would be good if we can add a new parameter for `defaultReturn` so that we have an example where the caller would need to override the default value.
I would just use `0.kbfs.keybaseapi.com` for now, since the default is `0`, which is the most accurate value in this case.
This should be called when the connection is received from `s.recv()`
Please revert this change.
why are we deleting this?
I think it would be better if this was `#{Shellwords.uname -R}`.
I think we should add a `@path` property to the project object, so that users can use it without having to do this check manually.
Why is this import needed?
Should this be `X509DistinguishedName `?
This should be `AddPeers +`.
Shouldn't this be `http.SetCookie(w, &http.Cookie{ Name: ..., Value: ..., Path: ..., HttpOnly: true })`? The refresh token is already set on the client, and is sent by browser only. If it is not set in the client we are not going to have any refresh token.
@jwhui this is the actual bug. We need to change this test.
Isn't this the same as `true /*update*/, false /*image*/` ?
Space missing after comma.
`hasattr(text, 'decode')` is always False.
I think you can remove this call to GetValueAsData, and just call the GetPointer method in the caller. You can call the GetPointer as a second argument of the GetValueAsData call.
Is it safe to set this twice?
Please fix the grammar.
We could probably just remove the entire block and just always use `id_pattern`
Can we add a space between "if" and "("?
Why did you change this?
I think it's fine to have it as `/var/lib/shadow`. We already have a `/var/lib/docker` directory.
This should not be a block. This is a layer.
@krousey @tnozicka this is the fix. We don't want to continue if BPF is not supported on the platform, so it is not a problem if the user has set `config.BPFEnabled` to false.
Why is this removed?
Why is this being disabled?
I'm wondering if we should make `scrape` a method that returns a boolean instead, so we can check for that? This is a bit of a nitpick but it would also be nice to have tests that actually assert anything about this method.
Is it possible to have more than 1 PUB in the response? If not, maybe we should add some kind of flag to indicate whether the Pub/sub is being received and not only the size
This should use strcmp instead, since we are not checking for a short name anymore.
Can we make the `1` and `2` a named constant, and use it everywhere else.
Why did these changes have been made? I think the style is correct. The changes are all just cosmetic.
nit: `__` prefix for static properties, please.
Should this be `Run(server *Server, _ ...)` ?
nit: we don't need to change `of` to `physical`, it's a little confusing since we are using `physical` everywhere else.
We should probably add this message only if the user is in the embedded site.
I'm not sure if this is correct. We want the connection to be at least as small as the receive window size, so the message should say "Decreasing the receive flow control window"
This should be `controller.address`
This is not the right error message. It should say "sysctl %q is not allowed as it conflicts with the OCI %q field". We need to make a new error message. We need to add this to the existing error messages for this one, too. I'm not sure why the existing error message would be "sysctl %q is not allowed" when it's "sysctl %q is not in a separate kernel namespace".
Is this correct? The min size should always be at least 1 MB, even when we're not doing compression.
nit: I'd just inline this.
Why did you change this? Is this a change in version?
This should be in the QT file instead of QM.
This is the only function that is used by `acme_test.go` which needs a `timeout` parameter.
This is the only translation I've seen that is used to translate the message. I wonder if it's better to just use `i18n.t('messages.delete_singular', { name: 'form' });`.
This seems like it should just be `this.setState({ allowNewUpload: !!updatedFiles })`?
Is the `!` needed?
Can't we pass the path to NewBoltDB instead of passing db.Path and db.IndexDBPath?
Why is `max` removed from here? It should be `max_query_size`.
You can remove this file.
This should be added to the docstring above.
I think this change is not needed
I think the label should be renamed `com.docker.compose.service` to `com.docker.compose.platform`.
This could be a single line.
I think you need to revert this change
This is a little weird to me because it looks like this method is not really specific to the preferences. Can we instead just move it to `PreferenceUtils`?
I think it would be clearer if we just used `v2` for the reference.
I think it's a good idea to use `six.text_type(six.text_type(value))` here instead of `six.text_type(value).encode('ascii')`.
Trailing whitespace detected.
I wonder if we should have this function in `crypto/lru` instead.
This should be removed
This is a bug fix.
why move this up?
I think we need to keep this `reqBuf`. We can remove the `Request` struct entirely, and use the `Response` field in `Request`.
Shouldn't this be `auth_to_access_callout_content`?
Shouldn't this be done after the error is returned?
I would suggest to move this to `Constants` and rename it to `RESTART_ON_EXECUTION_STOPPED`.
This is a bug - it will be shown even if the error was thrown in the next line.
I'm not sure how this is related to the fix. Is this just a cleanup?
Can you use an expected string format?
I would prefer to have this function in a different file.
@bdukes I removed V1 because it is not supported by the framework yet, so we don't need this.
I think this line should be removed too.
This should be a `Warnf` since it is the only thing that can fail.
This should not need sanitization. We should not have a function like this for the API.
I think we should add `:outgoing_delegates` here as well, to avoid having to add it to the `delegates` table.
I think this should be done in `DependencyFileUtility.cs` as well
this method can be private?
These should be alphabetized.
This is going to break the test, because it doesn't actually use the parent process.
This should be a separate method.
Why is this method needed?
I think this can just be a `Notification`
Shouldn't it be `handle_` instead of `nameOrHandle`?
Line is too long. [85/80]
I would suggest to call this `Voucher`. The voucher can be used in multiple places and it will help to understand the intent of the voucher info.
I think we should use the same name here as well.
ineffectual assignment to `err` (from `ineffassign`)
Should this be '600' instead of '600'?
Is it possible to have more than one gRPC port available in a single API request?
This is a bit strange, what happens if we get here and we try to visit `node.body[0]`?
We need to update the description of the `--mb_id` option.
I would suggest we keep the old code, as it is a good practice to keep it.
`execute` instead of `delete`?
I don't think this is a correct solution. It is not clear that destroy() should return null when it is not registered and there's nothing to do with it. I'm not sure what the right solution is, but I think it would be better if the destroy method is called when the backend has been destroyed. That would mean the destroy function will be called in the case that there is no `impl` set. I think it will be better if we have a single `wlr_backend_destroy`, and if the backend is registered then call it with `NULL`.
Can you add a docstring here describing the purpose of this parameter? Also, what's the benefit of passing `configFileName` as an argument?
This should be `private`.
Should we add a note here to explain why this value is needed?
I think we can remove the `max_ts` argument here
Why is this necessary? I don't think the stub name should be used for anything.
We have a few other constants in core, like this. Should we use those instead?
Nit: `pospone` should be `possibly`?
This will cause the doc string to be incorrect, since you are changing the type of the input.
This hook is deprecated and will be removed in the next release. I am ok with the current hook but I am not sure why we have the deprecation warning
@saradbowman I think we need a migration for this.
I'm not sure if these should be global, but it seems to be the only thing using them is a `config`, and it's not clear to me why we need both.
Can you add the `@param` description?
`std::vector<T>::const_reverse` would probably be a better API?
I don't think this should be removed?
This will probably need to be updated to use the actual `puppeteer-test` package.
This should also happen when the upload fails, no?
Why did this change?
I'd probably use `-Xmxmx0` for this option to keep the behavior consistent with the previous flag name, but not sure if it's a good idea to have it here.
This change is not needed. The typedef was fine for the typedefs.
Why is `AC_CHECK_PROGS(YACC, 'bison -y', :)` not needed here ?
Can we change this to "Path to key file to use for network communication (enode)..."?
This is a breaking API change, we should keep this as is.
I think we can remove the `replaceAll` call here.
This exception is not needed, you can use a general one
Should this be `authProviderName`?
This change will cause `totalQueryTime` is not updated after this PR
why not remove the `if (gJobMgr)`?
This is not needed.
Why not `const auto&`?
This needs to be v0.3.0-RC2 now that we have a new v0.3.x tag. The other tag uses the new version, so it doesn't matter if that's the case.
This test is not needed. It is only for testing.
Should this be ICoreLogger?
This is a breaking change for a non-JSON field that we don't yet support. Is this intended?
I think we should be able to do this without doing a `tap`. I think the `tap` block should be unnecessary. I'm thinking about the performance of `RSpec` as part of a test, where the first line is the `RSpec` exception class name. The only thing that could change in a future PR is the `RSpec` exception class name which will be the one that will be wrapped with a colon.
Why did these tests change?
This is a little odd, why did you remove `Uint` from the JSON schema?
Nice to see we have a lot more of these in the code base.
This is an API change
Why is this change needed?
nit: "does nothing but track" is kind of redundant. Just "does nothing but track" is fine.
Why do you need this new type?
Is it possible to change this to `isQueueKeepSorted(order)`?
Should this be platform.SiteRunning?
This should be `APIVersion`
I think the mutex should be moved to `SessionSetup`.
Is this a good idea? What's the use of `include?` here?
Should this line also be `self.amount = Decimal((amount) / exch if currency else Decimal('0.0'))`?
I would suggest `key with an ambiguous item {} already exists, please use the same prefix or will get unexpected merged value.`
Can we make the default values for the flags configurable?
Why do we change this method name? The old name sounds more correct, IMO.
Should we make this a static readonly field in the class itself to avoid the need to have it be a static class variable?
I think it's a bad idea to use copy of a map. We should use an immutable map to hold the values.
This should probably have a short explanation that says what is happening.
`xhr.readyState !== 4`
Can we just use `umask.ModeSet`?
Is this necessary?
nit, maybe `Files` -> `Files`
Can't this link just be called `manage_consent` instead?
This is already imported in the next block
This could use `.noneMatch`
`logging.Base()` is already the default.
This is a functional change, right?
This is not a valid code style change, please revert.
This is an unrelated change, but I noticed that it's a typo. Should be `index`, not `index`.
Please rename this to `publicLinkID` to be more specific
Should we use the `validation.ListOfStringSlice` type?
Can we add this to the `gitClient` interface?
I think this will panic if there is a "?" in t
Why do we need to store the time for this call? The upload time is already known.
Can we do this in a single step?
this is not a legacy route, it's a reserved word
Should we be using Noticef on create?
should we change the name to `wf-workflow-request-timeout` ?
I think this is the only place where you're using `spyAll`.
I think we need to update the `ambassador-config` to support this value.
I would remove the word "web" here.
I think this is not needed
This should be in `src/utils.js`.
Should we also check for `crt.RenewAfter.Duration != 0`?
This is not used anywhere, and I don't understand why it would be needed.
Shouldn't these be restored to the default values, so you won't have to do the `mMozillaSpeechService.storeSample(false);` and `mMozillaSpeechService.storeTranscriptions(false);` twice?
I'm not sure about this. It looks like it is only testing the latest version, but the tests that use the latest version should be updated accordingly.
This is a breaking change to an interface. We need to make a breaking change to make it public
I guess it should be flag-ar here
This is not the right condition. If `pExternalFormatANDROID != nullptr` then `pExternalFormatANDROID` is null, so `isExternalFormatConversion` will never get true.
This is the first time I see static imports. Is this the best place to put them?
This import should be removed
Is this a leftover from testing?
I would suggest using `1` as a fallback value. We don't want to have to worry about a situation where we're going to be using a larger value (i.e. if it's going to be too big to be used for the sync block cache)
This should be a constant.
I'm not sure we should add indexes on topic_id, because the classifications will always contain the topic_id.
nit: this can just be `assert := asrt.New(t)`
Shouldn't it be `application/json`?
E231 missing whitespace after ','
I would have expected this to be `h.grpcListener.Close()`
Why are these not `string`?
This is the only thing that I don't understand, but it looks like this is the only place we need `Mongoid.unit_of_work`.
Shouldn't this be in a separate PR, so that the TODOs are all done together? Otherwise, it'll be easier to find and fix.
I wonder if we should move `s.mu.Lock()` to the beginning of the function and `s.mu.Unlock` after this line. That way if a client has been removed and the `opts.MaxConn` has not been reached the `checkMaxConn` will never run.
I think the target leader should be the same as the source.
Method is a bad name. It is a method that returns an instance of the type.
Is this used for something?
Should we also update the `if c.Wireguard.MTU == 0` part to `if c.Wireguard.EncryptHostTraffic {`?
I'd suggest using `None` as default value, and then we don't have to do `or 255`.
Should be `$user->id`.
You're missing a message string here, and I believe the `TRY_ATTACKING_SOMEONE` will show up as the message in the `Chat::TooFarAway` message.
I think we should keep the message event here, but change the text accordingly, as this will be sent to the player even if the message is not delivered.
I'm not sure if this will be a good way to handle this. We need a separate controller for each type and we need to create the detections for it as well. We could also do this for mass error and the detections controllers.
Is `module` not used anywhere?
Please remove this unrelated change.
This is a test case I am not sure about. The previous test case was correct. It is testing if we have a cell in the bottom left corner of the merged cell and if it is not, then it shouldn't be selected. But I think we still want to test if we have the correct cell and if it is, we should not select the cell.
I think this is the only line that needs to be run in the migrations package, right?
I wonder if we could add a `@Experimental` annotation here and remove this class?
I would rather use `application/x-www-form-urlencoded` as the default header, because I don't know if that is the standard way to encode a request.
Why this change?
Why is `4` no longer the count?
This looks a bit weird, why not pass raw to BuilderForTemplateObject?
This is a very important test. I'd rather have it in another test suite. I'm also worried that this test could break if it were to run on a system without atexit installed.
I think it's better to catch `Exception` in `PidUtil.queryDoi` method and handle it here.
This is not a good error. The user should not be trying to configure this config.
This was a bug.
Why do we need a special case for componenets?
nit: `status_` is set to `Status::REMOVE_PART_ON_SRC` only in the `if`. So we don't need to update it here.
I'd prefer to have a `isSpace` helper function, but I don't know that we have that.
We don't need to disable this for every component. We can disable this for all of the individual ones.
Isn't it better if you put this in the if block above? If it is true, then we should return `false` rather than a boolean.
Can you change this to `self.view_flowlist(flowlist=flows)`, please?
I'm not a huge fan that this is necessary.
I think it should be False by default, and we should default to None
Why do we need to check this here? I would expect this to be called when we are actually preflighting the request.
I'm not sure this is the right way to go. If there's a node that has not yet exited, it should still be registered as keepalive channel.
I'd say this should be 2.5.
Why do we need to use `finest` here?
`stackLocations` is not used in this method.
Should we return a non-empty string here?
Why did you rename this?
This will cause an exception when the node has not been finished. We need to use `Bolt::Node::Error` instead.
@dclarizio @kbrock Is there a reason why you chose to add `.method` to the superclass instead of the `Metadata::ExampleGroupHash`?
Why is it 100?
this is not needed, it's only for tests
The DRM_FORMAT_MOD_LINEAR is used in a lot of places. Maybe a define for it would be useful.
Remove these print statements
`m_child_layers.empty()` will return false when `m_child_layers` is empty.
This is the only change that I could see in the PR description. It's a change that was made by @dalthviz to make it more robust.
I don't think we should delete the stdout and stderr, since they are no longer relevant.
I don't think we need this. The ID will already be in the same format as it is used in TrustDomainAgentIDFromProto().
Should this be called StartContainerExec, and the other one Start?
Can you add `on default` as well? (i.e. the `on default` step)
I don't think this test is testing what the yarpc client does, because it's not actually doing anything. It should be testing the client that the server uses.
I think this is not necessary. `hash.update` returns bytes.
I think you need to remove the `uri` field in the log.
this should be a const?
I think the intent is to set the initiator to CONTINUE_AS_NEW_INITIATOR_WORKFLOW only if the initiator == CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED.

Should we keep this method, and add a `set_duraton`?
Can the `explicitIonMobilityUnits` ever be null? If not, this could crash if that is the case...
I think this is fine, but why not use a list and append the path?
This should be a switch statement.
This change seems to have no effect, right?
This should be lowercase
I don't think you meant to add this.
I'm wondering if we should do the select in the same way as in the previous code, instead of doing the query selection twice. The select could be called with a query and a list of fields and then the select would be done with a single query.
I'm a little worried that we are adding new fields to a parser. I'd like to get rid of this and just use `*statement.Statement`.
I think we should have a different metric name for this metric, as it is not related to a scrape, just a limit
I think this should be false by default.
Nit: `removeSmallerNonces` is unused
This will be a bit too long. Is it enough to wait for `snapshot` to be non-empty?
I think the default should be `false`.
Isn't it `__azkaban_project_directory_size_in_bytes__` ?
What if x is a string or tuple?
nit: can be package private
This is a very expensive executor and we can't guarantee that it gets closed when this executor is destroyed, so it's safe to do it.
This is not a new sentence.
Why is this a constant?
Is this supposed to be `options[ :installer ] || options[:installer ]`?
Shouldn't we set `layer->current.keyboard_interactive = false;` here?
Can we add some doc for this method?
This test should probably be updated to test the new behaviour (rescanDeps should do the same).
I don't like the duplication here, but I don't see any other way around it.
I think we should add an example with `search_results`
This looks like a good idea! I think the only other place we're catching `Exception` is in `TestRunner`.
This seems to be the only place where you're not doing anything with the flags. Why do we have to clear these flags?
This is not the right place to set defaults. This needs to be moved to the `Configure::write('Config', $config)` method.
Why do we change it? Is it because you're just trying to make sure that it doesn't happen?
I guess you mean the other one.
I don't understand how this fixes the issue. This is an API breaking change.
I think this is the wrong format of this string. It should be a number that matches the expected format (e.g. `456.00` instead of `456, 123.00`), so this should be `expected_output`.
This is just to make sure it's not an error.
I don't think this is used.
Which file is this file in?
Should be "bitmask" (without the L)
Use 2 (not 1) spaces for indentation.
w = w(width=1, title='Title')
nit: this can probably be a single line.
I'm not sure this is necessary.
Should this check for `cfg1.ClientCerts != nil` too?
Please don't include the header file here.
Align the parameters of a method call if they span more than one line.
I'm not sure what's going on here, but it doesn't look like this is used anywhere.
This should be `ON_ERR_GOTO(res, out_dma_close, "fpgaDmaOpen")`
Is there a reason we can't use the `@project` directly here? I'm not sure if there is.
this file was missing
I think we can drop this defer
This is a change of behavior. The original method always returned a `null` for args and now it returns a string. This change is a change for `exec(String query, Object... args)` which always returns null.
Should this be called `PATH_TO_PEAK`? #Resolved
I would use a string constant for this, and use the `format` method. The string constant should be available in the resource classes.
I think we can use stream().count() instead.
I think we can just delete this and put it in the config
I think we should add `Bus Pin`, to keep the same pattern as `Bus Pin`
Why is the pointer a pointer here, when it's not used?
This should be `vote_generator_delay`
Can you explain why this is not a valid use case for `options.unmount = () => {}`?
I think it is a good idea to have an empty constructor for `TiTableInfo`, since we are using it for all tables.
Is it safe not to update if `new` is empty? I'm not sure it matters, but it might be better to check that `new_length` is not empty and `len(data[n]) != length[0]`.
Is this really the right way to do that? I think I'd prefer a `datetime` column instead of having to update every time the column is added
I think we need a better way of doing this.
This is wrong. This bundles must be loaded before any other bundles
nice to see these in one example
We need to keep the validation category in sync with the enum. The validation category should only exist in one place (i.e: in the `AutoRest.Core.Validation` class).
This is a breaking change, as we need to add appId to the method signature.
The `CreateOperationDisplayString` method is used in many places, should we remove the whole method, and use only the `Method`?
Is this a typo?
Is this a breaking change? Is the intent here to allow a name of `""`?
This should be a temporary directory
Can the `;` be removed?
This change looks wrong, the signature should not be a valid signature.
I think we should keep this annotation
nit: I think it would be clearer to have an `else` case that returns an `Stats` if it was never called, rather than silently ignore the stats. That way the code doesn't need to change.
I think this test case is a duplicate of test_decode_fail_test_group.go, can we just have one test here that verifies that the error message contains the group and mask?
I'm not sure this should be removed.
This is the only thing that I can find that I am not sure we need to do here. The `Tags` and `Metrics` should only be set once in the constructor. I don't think that's the case, but if we need to add a few fields to the object, we should be able to just use `value.Tags.Count`.
`FastSyncCatchUpHeightDelta` is a bit of an odd description - how about something more like `Minimum delta for the full sync chain will be kept on when the chain will be behind network`
I don't think this method belongs here. The `Alert` class should only ever know about the `Alert.text` property. It can be implemented as a method of the `Alert`, but that is not the case.
(style) line over 80 characters
This should be `&& !dag_file_exists(f) && !hash_table_is_empty()`
This should not be needed since the default is already `false`.
I think we can remove this TODO now
I don't understand how you can handle a 16-byte timestamp. I think you should be able to just return the timestamp directly.
I would keep the old constructor.
This is no longer required since the `initCodeContext` is not part of the constructor.
Why not just use a boolean?
This is not needed. `ErrorNotifications` is only a single item in this directory
I think we want to log the entire error instead of just `err`.
This change looks like it could be unintended.
Why are these removed?
Should these be part of the public interface in `com.fsck.k9.mail`?
This file shouldn't be included in this PR, since it's only used for tests.
Is there a reason you changed this from 5?
This will be better in a separate function, but I'm fine with this for now.
I think this is fine, but we should probably make the return type `Iterable<T>` instead.
`is the` -> `is a`
nit. This brings in CloudEventOverrides and Sink, no?
I would prefer this to remain as a `dict` type.
Should be `if err := ...; err != nil`
why not log at DEBUG level?
This should be a separate commit to keep the history focused on this PR.
I think `xrange()` would be more efficient here, since it doesn't require a list, but is probably faster.
Should this not be removed too?
Please do not change the existing formatting.
This was a bug, as we were not deleting the graph notes.
Shouldn't the plugin description be stored in the settings instead of in the plugin list?

Why do we need an `acc` array?
This change seems like a bug fix for the bug you found. We need some sort of cleanup to fix this, but we can do that separately once this is fixed.
Should we hide this when touching?
Why are we not setting the Span anymore?
Why does this class not exist?
This should be in `Scheduler.cs`, not `src`.
Is this the only place where we have to shrink locator lists?
I'm not sure we really need to do this? I think this was a bug before
nit: I'd prefer this be called `ForceFlushAsync`, but this is fine as-is.
Can't remove these.
This should be a `HashSet`
This change is not necessary
this is not needed
Why not just use `Assert.AreEqual` here ?
Is this intentional?
Why did you remove this?
You could also use std::remove_if here.
We should add a link to the source code that's available to the example in `src/index.js` and link the code there, otherwise this might be a problem.
I'm not sure why it was changed?
This is the only change in this file.
We should add some docs to explain what this interface is used for.
`binary_path` already has a `binary_path` method so you don't need `binary_path` here.
Is there any chance of sending a pings request after a ping is sent? This would mean that we would have to wait until the first timer based ping and then check for a PING.
I'm a fan of using lodash, as we have some code in the dashboard folder that depends on the lodash module.
I think you should use `self.assertEqual(results, [])` instead.
We have the ability to create releases in the repo. This allows users to create a release in the current repo. We should not expose this to the user.
Should we check `response.properties` for null here?
This was a bug, the range was being set to the range 5.
I think we can remove this
nit: space after comma.
I don't see how `File.expand_path` would ever fail, so the test would fail without this. Also, `File.exist?` would always return false, so I don't think this would ever be hit.
nit: this is an ARMServiceDefinition
This is a really bad name. I think this should be something more like `MessagePoolProvider`. I don't see a better suggestion though. Maybe `MessagePoolProvider`?
why this change ?
We should probably also test for `storage_strict_json` in `kinto-testing`.
Is the change of order necessary? It looks like the original order is correct.
Why did you remove these?
The original indentation was better
why do we need a new field?
@bartekn is this a typo?
This should be `lowerCamelApiTypeName`
This is the actual fix. It doesn't seem to make it clearer.
We need to update the corresponding test.
This is an API change that is a no-no. We're still in the `Server.Kestrel.Transport` namespace.
I would not add this to the enum. This is a bit confusing.
This could be moved to some common module.
I think we don't need this.
This should probably default to False.
This line is the actual fix
This is only called from the static method in ConfigUtil, and is only called from the static method that calls it. I think you can just call it `addConfig` and remove the `static` from the method name and the method name.
Is the value 10 minute too high?
Nit: I'd put this in a separate line
@davkean @davkean this is where I'm thinking we should make the method return type nullable by setting `method.IsXNullableReturnType = true;`
This is not required.
This is not necessary. We already know that the object is not deleted, right?
I would like to have `hasPermission(final String id)` instead of adding this method. It will make the code easier to read.
Why not just `!! options.beforeHandshake`?
I think the log message here should be more informative. Something like `Queueing a resync. In Sync mode, all links in the route table will be removed from the dataplane.`
Shouldn't it be the other way around? `g.imports[path] == path` is the former. I'm not sure what this code is trying to solve.
I'm not sure how this is related to the PR, but I think the `full_parent_name` is a bit confusing. It is not the parent of `composite_root/root`. It is the parent of the root resource, and the parent of root is the composite root, not the root of the root resource itself. I think the logic should be similar to what `get_parent_resource_name` does.
I think we need to set it to the empty string here. Otherwise, we're not able to delete a Subscription
Should this be `isZero` instead?
This is a bit confusing for me, why would the TLS check ever happen?
I think we should do this only for `v1`, as we don't want to be modifying the same field in `pkg` (or `v2` if `v1` is nil).
We don't need to change this file.
Why are those booleans needed? They should be either enabled or disabled by default, I think.
Why the `!` ?
I think we should initialize this value to 0 here, since we are using it as a local variable in the function.
I think gradlew testClasses is the correct name here, but I can't think of something better
File is not `goimports`-ed (from `goimports`)
Is the suppress lint needed? I don't see anything that would disable it without it.
I think this should remain `Root()` for the moment.
Shouldn't we use `fallback` instead of `master`? The fallback is not the primary, so this is not really what we want to do.
This is a bit of an unusual error message, I'd rather see it written out in the error messages.
Is there any chance that a group is not in the list?
why are we removing this test?
>ValidationRuleMergeState [](start = 24, length = 20) Should we have an enum that represents when the state is After? #Closed
I'd prefer to have this as an explicit check on `LowestInsertedHeader`.
Why not `new Props()`?
Why is this necessary?
This is not a test, but a real test. This is not really a valid target, as this rule is not run on Windows.
This is a bug fix.
This should not be changed
this can be a single if
This seems like a good change to me, but I'm not quite sure how much it impacts the test? Is there an issue tracking this down?
This import should be grouped with the other gloo imports
Should we add an alias to `chainID` for the same reason?
I think it'd be better to use `node` directly here instead of `this._node`
I would rather have this as an `#if` block, so that the code doesn't need a define for `Weh_x`.
Should be `static`?
I would call this "BuildId"
This seems like an unexpected behavior.
Why was this file added?
This file needs to be refactored into a separate package.
Can you also add this to `errors.go`
`start()` and `close()` already close the stream, no?
This should not be public.
can we rename the test to something more descriptive, like "primaryNodeUnupgradedProtocolWithNewVersion"
I think this should be in the `else if sharedCfg.AssumeRole != nil` condition, as this will always be false.
Is this a TODO?
Can you make this a constant?
I think this can be renamed to `perm_addNodeToNodeAllowlist`
This line is no longer needed.
This is the fix I did in the previous PR.
I would suggest to move it to `Exception` namespace as well
Can this be moved to `server/config/config.go.go` as well?
I think this needs to be false by default
I think we could use the `shutdownNow` API for the `ExecutorService` instead.
I don't know if this is necessary, but we can pass `new HiveConf(HiveMetastoreTest.class)` as constructor argument.
I don't think we should be using `stateReader` here, it's a very general concept.
Why not use a switch case here instead?
This should be removed
I'm not sure if this fixes a bug, but if it is it's better than nothing. This is not really a fix, it just resets the range.
Can you explain this change a bit?
This file seems unused.
I would avoid wildcard imports. Please revert all the changes in this PR.
Is this import still used?
This is the fix.
I think it's fine to use an empty `Object.assign` here, but I'd prefer to avoid the `reduce` if possible.
I don't think we want to use wildcard imports for imports.
`surface` is not freed.
I would have expected to see a test that verifies that `paths2` are the same as `paths1`.
This is the one thing I noticed. The URL is the one that we're using for this and the one in `readthedocs.org`, right?
Shouldn't we just use `NamedList` here?
Why is this import added here?
I think it might be better to add an option `http.api.tg` to be more specific and also make sure that the API will be available to anyone.
This will raise `ActiveRecord::RecordNotFound` if it can't find a path
why are we removing these?
I'm curious about the need for this check.
I don't like this code. It should be in the `query` constructor and not in the constructor.
This change is wrong - it's a no-op.
This is a breaking change, and I don't think this is a breaking change. We should leave it for now, or create a new issue and link it there
Why not pass the http handler directly as an argument to mux.go?
I wouldn't call this apply() because this will be a new action, not just commit/apply
This should be done for all the cases where the error message is not empty.
Please revert this change
This is the only change I can see. I don't know what is the actual reason for this change.
this seems wrong. if the interval is 0, then lidx will be -1, and uidx will always be -1.
This will cause test failure when the user sets `nil`. I think we need to change it to `nil` as well.
Why not use `!empty()` ?
`unless data.ref` should be removed since this is the default behavior.
nit: `FLOW_EXECUTION_ID.getKey()` would be slightly better, as it would allow us to get a value from a single key.
This seems like an unrelated change?
why this change?
This is the default, so you can remove this.
Is the index column used anywhere? If not, we could remove it.
I'm wondering if we should just use `HiveScanSpec::HIVE_SCAN_SPECIAL_MODE` here.
Why do we need to export this?
Why disable here, when it's not needed?
This is going to raise a warning on every text edit, even if there was an error, so this will never be called.

This is a bit weird to have a new field for the config, but it's not a huge issue for the code.
This is not needed.
Is `toLegacyAddress` not used anymore ?
This is a bit ugly, and it's just a bit confusing, because we don't have any mode to persist. It would be nice to have the `persist_mode_on_change` option just return True if it wasn't enabled, and then just do the `leave` in that case.
Why do we need this change?
I think you should throw an exception if `!$cart->isEmpty()`
Why not use a static import for the literal?
nit: I think this test was just broken, and I think the name was wrong.
We don't need the `/` here since we are already handling POST
Can you also assert that the capability is not flushed?
Can you explain why this needs to be `True`?
I think this is a warning, not an error
This is the only one which is actually used
I think we can just use the `bolt_inventory` hash here, since we don't have any `puppet-agent` feature yet.
I think we can get rid of this method and replace with the one from MatchesUtils.
Can we move this to after `translateCheck()`?
This needs to be added to the docstring of the method.
I wonder if we should have `MvxIosWindow` instead
Should we use `selector` here?
Why not make it a property?
this is probably an artifact of a rebase?
Is this line necessary?
Please don't use `# noqa`.
I think the preferred name is not needed anymore.
Can you use `g_strdup` here instead of using the literal string? `""` is more commonly used in the source code, and I wouldn't expect that to be a problem, but it's a matter of taste.
Why not `X_CSE_TARGET`?
Is this a duplicate test? Or is it tested somewhere else?
Can't you add a method to `CronExpressionChecker`?
Please move this code into a separate script.
I think the `error` parameter here is the same as `errorObj` and the `dataErrorComponent` below is redundant.
Please revert this change.
Is this change necessary ?
This test doesn't have any assertions anymore.
This should be private, IMO - `sfdr` is not a good name. Also `getAlgorithm` should probably be `isAlgorithm`
Missing license header
Is the `== false` check needed? It seems like `strictPopulate == false` is enough.
Nitpick: This change isn't required. The `Build.A` namespace is already included in the file. The `Build.A` namespace should not be included in the file.
I'd rather this be a private method in the `manpage_converter` module and not have a separate module in `manpage/converters`
Why is this needed in a test, can't we just use `api.EntityRule{Selector: "default"}`?
Why is this needed?
This is a good example of how this is formatted

I am not sure this is true.
Should be `executionSource`
I think that the `%w` is redundant here.
I think this should be in the constructor?
I think you can remove this disable now
Is `index` the right value here?
This is a very bad solution. It is going to cause problems for people running a new app. The old event hooks will be lost when a new app is started. I think the best solution is to use `defer purgeEventHooks()` here, and then you can remove the `eventHooks = oldEventHooks` line.
I don't understand why the code above is here. It seems like it could be in the first place.
I think this should just be "behavior"?
Why is this change needed?
Is there an issue open for this?
I guess we should still keep the try/except here, because the message will be a dictionary in this branch, so it can't be a string.
I think these flags should have the same names as the `values` and `overwrite` flags
Should this be an `Exception` instead of the `Exception`?
This should be removed, since it's a no-op.
This is a bit of a weird name for the exception class, it seems like we're throwing something from the caller?
@cwgoes I'm a bit confused about why we need this line. Is the `msg.Data` already encoded?
I would prefer if we used `string` here instead of `string`.
I think it's a good idea to keep this as `SIGNAL` to be consistent with other signals.
I'm curious about how the `stopGPGAgent` function is supposed to work. Does the call in `startGPGAgent` make any difference?
Please remove this extra line
I'm not sure this is right. It's not clear from the name what this function does.
Why is a `PromotedCatalog` needed?
This is a change in behavior. Previously, we would pass the data in the `data_arr_device`, but now we're passing the row count and column count.
Can this be a boolean instead of `Boolean`?
This is a bit of a bummer to me that this test is not really necessary.
I think we can add a `return` here and just return a 404, right? The rest of the function is just returning a 500 to the client.
I'd rather not make this change in this pr. We have `oldParentVNode` and `oldParentVNode._children` in `oldChildrenLength` so I'm not sure it's worth it.
Can you also add the same to the help text above?
I don't think it's a good idea to add a debug message here since it will be printed by default anyway
This class is not used anymore.
Shouldn't this be `manifest.json` ?
I would prefer this being a property, but no biggie
nit: I think this should be `CHROME_HEADLESS` instead of `CHROME_HEAD`.
nit: `const` not necessary for this line and the one below.
Why do we need to create the variable here? I don't see it used anywhere
I wouldn't change translations.

Why this change?
This is a bit awkward. I wonder if it's worth adding a `mdFlushListener` method to `mdCache` that does the caching, and then calls it in the flush listeners. Then we can use the event listener in `mdFlush`. This way, we don't have to worry about the listener being called for every single revision.
nit: space after `if`
nit: can we call `config` `config`?
I'm not sure if this should be called `seekpercent` instead of `seekto`
This seems odd. Why not use the existing `unsubscribe_from_emails` parameter?
Should we call this `DataDir` or `DatadirWithHost`?
The new state name looks a bit weird. Can we use the same constant as the other ones?
I'm not sure this is the right way to do it. We should delete all files that have been successfully saved, and then restore them back to the original location.
I'm not sure about this. This will break the current behaviour, as the scrollbar will be positioned on a vertical scroll and not be aligned. It's possible this would cause the scrollbar to be positioned on a horizontal scroll bar, and then it wouldn't be positioned on a vertical scroll bar, but then the scrollbar would be positioned on the left and right.
This seems to be a bug, if the error isn't nil, it will return immediately
I think we can remove this test and just use the default platform.
Should this be translated?
Why not just use 1 as gas limit?
Why is this import added?
Please revert this change
Why are we not using `Map.entries` here? `map` seems to be a bit overkill for the purpose of `Map`.
Should be `(ExLobGlobals*)new ExLobGlobals(NULL);`
Shouldn't this be in the same class as `MvxBasePresentationAttribute`?
I think this line is not needed, as `jsLimits` is not a part of server config account
Why the change?
This is the default locale
This is not needed since `global_index_range` has already been created.
E225 missing whitespace around operator
I don't see where this is being checked, but I'm not sure why it needs to be checked here?
I think this should be `existSchema.isSummaryPresent()`
This seems to be a pretty major change, but I'm not sure what to do about it
nit: can we put `backendErr` as `expectedErr` and use it in the following line?
why is nil here?
These permissions need to exist on the `ImageManager` as well. I'm not 100% sure, but if it does, I'd rather have a dedicated enum, such as `IMAGE_TYPES` (which would be `IMAGE_MANAGEMENT` or `IMAGE_MANAGE_GROUP`).
Can we add a `assert: true, retry: true, timing: true` here, just to make sure it's always true?
Should we add some docs about what the values are? Also maybe it could be a readonly struct?
This should be an `else`.
Can you elaborate on why the connection tracking is necessary?
I'm not sure if it's a good idea to have a token in the constant, because this will break if someone changes the value, so it should be a valid value. Also this is the wrong way to split the token.
Can you explain what this means?
can you also check that the user is a TLF owner here?
Is this really a method? I don't think it is.
I don't think this is a fatal fatal, we should be returning an error here.
This will fail for the first `packet`.
I think you can get rid of this and use the enum from `ExecutionSource` instead?
please remove this line
I think you missed the `hi` here.
Why do we need this?
I think this is unnecessary. The agent should not register the instance when the instance id doc is not available or needed.
Why did you remove this?
nit: `BOOLEAN` is not an SQL type, it's an SQL column. It's a SQL column in the database. So, it is not necessary to include it here.
I think we don't need this function since the parent is always the workspace, and the workspace's canvas can't be different.
nit, can you rename this to `NatPortRangeList`?
I think you need to remove this variable.
This change is a little unusual. The `if` variable is assigned in the line above, but it gets assigned in line 1181. The same goes for the other `if` variables.
I think you need a permissions_for :license_id, :icon here
I think we should use `==` instead of `==` in this case.
This will cause the cache not to work for ETE / integration tests
nit: maybe make this a static method in TestRandomIndexWriter that sets the merge policy?
nit: `// a precision for the assets`
I would move this before the if statement and remove the if statement
This should be in a separate PR as it is a big change.
This is a new function that is not implemented. Please remove it
Should we use `Assert.assertThat`?
I'm not sure how to fix this, but the default is to always use the `benchmarkdotnet.binlog` file, right?
`*` is not needed, it's a keyword.
Can we rename the variable to `unresponsiveTimeout` since it is not a timeout anymore?
I think `>= 0` is enough here?
I'm not sure what's the best practice here, but I'm pretty sure the error message is incorrect (because it's now saying that run-as is not supported when using PowerShell).
We have some linter errors with this change... I'll remove the change. :smile:
I'm assuming this will fail because of the new conversion, right?
I don't think the RegexOptions are needed here since the `Regex` class is already compiled.
This can be removed.
I think this is a duplicate of the `impl/Kokkos_Error.hpp` header?
Why do we need this class?
Please remove this
Shouldn't this be `onCompletedCalled = true;`?
This is an interesting case: If we're going to do `getDerivedStateFromProps` in the constructor then we're going to call `componentWillReceiveProps()` and then we're going to have to pass in a context. I think we should just do that instead of adding an extra check.
I would remove "the function"
I think this is wrong, this is a different class and should not change
I think we can use the helper `find_by_tag_name("iframe")` here instead, and drop this whole `it` block
Should we consider making `IProviderContainer` `internal`, to allow the `InstrumentationContext` to provide the `TracerProvider` to it?
This should be in alphabetical order
I'm pretty sure `axe.options` is always a dictionary, so this will never be set, right?
This method is now only used to store and bump timestamp. This is now only used for updating and restoration, so I think the method name is misleading.
This was a bug - the `Memory` was being passed to `Performance_Activity` when the `Perf_Activity` benchmark was started with `MemoryDiagnoser`.
Is this needed? Can't the `localFieldPath` be defined?
Why is this test being removed?
nits :-) Please sort the imports.
I'm not sure if we really need this
I'd recommend to use `StringUtils.isNotEmpty()` instead of checking for a blank string first, to ensure that the string is not null.
why do we need this?
I think the check for length should be `len(prefixAsNibbles) == common.HashLength*2`
nit: I'd prefer to leave a blank line here, to avoid a long line being added.
Is this change required?
Whats the difference between the event and the event itself ?
`ReadRegister` returns a register, not a value.
Is this intentional or just a placeholder? If it's the latter, then this should be changed to `LOG.finer(String.format("Firefox Session %d assigned to %s.", i, chromeSession.getUri()))`
`dashboard-ui` is a little confusing, maybe we can change the name to something else?
Is this really needed? `replaceNode` can never be `null` at this point.
This should also be moved into `RustSchema::GenNamespaceImports()`
I don't see where this is called.
This is a bit confusing because the `map` and `struct` are both the same. It would be better if we didn't have two separate structs.
I wouldn't use star import in the test. I think we should be consistent in this file.
Is this the same as before or is that done elsewhere too
Why remove this? Is it related to this PR?
Should this go before `logrus`?
I would suggest moving all of these `export`s to a file called `axios.imports` and exporting it directly.
I don't think you need this rule, you can use the formatter rule for that in the `unsynchronizedStaticFormatterRule`.
Why not use `Keccak.Zero;`?
I think this is a bit confusing, it's not a histogram bounds. How about `InvalidHistogramBounds`?
This is a bit confusing. The value is a bit flag.
Why is this being removed?
`inject` was used to inject a new Array.
Shouldn't we suppress this one as well?
We're using `RACK::CanonicalHost` as a default for now.
I'm not sure if we should use the "invoke" method, since there's no guarantee that the class will be an instance of Verb.
I guess these were not needed?
We don't have this in `pkg/bee/swarm/pslice.go` anymore, can we remove it?
`project`, `select`, `selectAndProject` ?
I would add `productCodes` into `__init__`.
this is an unnecessary if statement.
Is it possible for the result to be null here?
We could use `new ReadOnlyTransactionProcessingEnv(DbProvider.Statedb);`.
This is a bit of a smell, but I guess this is what happens when you have a new chain. I guess we need to do a `makeChainForGCOp` here, or we can just use a new one?
Can you add a space after the `WITH`.
This is a good change as we are going to remove the `fora` here.
nit: can you add a docstring for this function and the following functions?
We should add a default value for this flag, as we do for other flags.
receiver is unused (from `structcheck`)
Can we add some more examples for the different URL schemes?
Why not return the error here instead?
line too long (81 > 79 characters)
We should add the param typeWidth as a new argument to `readBatchOfDictionaryEncodedLongs`, otherwise the method signature change will break existing uses
Why do we have to go up to 3? Is there a way to avoid this?
You can remove the imports from the whole file
Please update the copyright year of this file.
We should also pass in the width to the `dictionaryEncodedValuesReader` as well.
I don't think we need to export the reference size.
I think this needs to change to 6.0.2
Why was this removed?
Can we make a helper for this?
Is this a bug fix or a fix that should be done in the next PR?
Is there a test for this? It seems weird to be throwing a FileNotFoundException here, since it's not an error that can't be determined.
I think we could just store the keystore directly in `cliwallet`
I don't think this is the right solution. If the VMultipliers have the same value as the nodata, the value will always be a multiple of 1000, which is not what we want.
I wouldn't expect a change to default organization, as it's not something that we want to change.
I'm not sure about this change, but it's not a valid link. `mappping` is the correct one.
This is not a reactive method.
Is this a breaking change for users?
Please add `ldap3==3.0.0, <3.1.0`

Shouldn't we be checking for the `SelectElement` class rather than just `SelectElement`?
I think this is a bit confusing because this is the same catalog, so maybe we should rename to something like "isSameCatalog" to indicate it is a reference comparison and also make sure the type is comparable.
This is probably a bit overkill but it doesn't really matter much since it will just be a no-op for the case where there are two backends.
// ErrOverflow is the error when a broker ingress is sending too many requests to PubSub
Why not use resourceType?
This change is unrelated to the PR.
I'd like to get rid of this.
I'd prefer if we kept this section. The video tutorial is a pretty simple indicator of how often it will be offered, and the term is not specific to any video tutorial.
I think we should keep the imports here.
Why do we need to make these public?
Can you please add a TODO here to remove this check once the kv-store implementation is fixed?
Why is this needed? It's not related to the current issue.
@brianhw Is this a temporary solution?
This import should be in `android.content.res.Configuration;`
Why did we remove all the `text`?
I think we should just remove this file, as we don't need it
This is a bit unrelated to this PR but I wonder if we can't just use the currency of the subscription's next payment amount here instead. We could even just change the amount to be the same for all the plans, and not even bother with the amount calculation. The amount can be set as a percentage on each plan, and it's just a percentage, so it should be a percentage.
I would rather do the sync here, not in the preLaunchKernel.
This is the actual test that should go away.
This is a bit weird, but I can't think of anything else to suggest
I don't think we should be adding this code here. If we are going to add this code to every block, why do we need it for all of them?
Line is too long. [82/80]
This is a temporary fix.
This is not used anywhere, and can probably be removed
`for pubkey in pubkey_hexes:`?
Shouldn't this be `if predictedFieldInfo is not None`?
This should be moved to the `internalStartTrade` function, as it's called by the client side.
I'm not really sure about this. It's not clear to me why the original code was doing this.
I don't see any usage of this method.
I don't think `refs` needs to be initialized here.
Style/PercentLiteralDelimiters: %i-literals should be delimited by [ and ].
Why is this not in an else clause?
Please use the `exc_info=True` argument instead of the `warn` argument.
This seems unnecessary
I'm not sure about these imports
Is it possible to write something that makes this test a bit more clear, like a test with `\r` as the separator, or something? This way the tests are much easier to read, and it is clearer what you are doing. You can see what you are testing in a test.
this should be `c.serviceGatewayFlow(gatewayConfig.IPv6) || gatewayConfig.IPv4`
Is this change intentional?
We need to add a plugin that uses this as a dependency, so that we can use it to lint.
nit: can we add that AttackTimeout is the minimum duration that the client will accept when it is unable to make a packet.
Why is this being removed?
I think this should be a separate commit
Is there a reason you're using `Lists` here? I think it's better to have a `LinkedHashMap` than to iterate through the list every time.
Should we just set the selection to the empty collection instead?
This seems odd to print the log message if it's going to be printed by the logger.
I'd probably just use `folly::to_string` here. The compiler will optimize the conversion away if it doesn't.
Why is this a long ?
This is the main reason why the `*` was removed. I don't see it in the PR.
This method can also be `final`, so we can remove `public` from `rewrite`
This seems to be missing the closing of the billing window?
I think we should just set it to `true` here. It's not important for `suspended` to be set in non-hydration cases, and it's not important to do it in non-hydration cases (and I think the goal of this PR is to avoid the `_pendingSuspensionCount` check). It would be nice to avoid the need for a flag to track whether or not we were suspended.
I think it would be good not to catch UnicodeError here, as the exception can be raised from the `log.url.debug`.
This is an unrelated change.
I wonder whether we could have this as a constant in the guest role.
This can also be a single if, no?
This field is not used.
I think you can remove this, since you're adding the boolean argument to the function.
I would use `Debug` here, it's a little bit more verbose
This test doesn't actually test the functionality of the new method. This is actually testing that children are added to the same category. It also tests if the children are added to the same category. I would rather keep the mocked version, but just add the new method to the new class that is not mocked.
Why is this not a delete?
> only supports [](start = 51, length = 10) Should this be `only supports`?
This change looks wrong, please revert it.
Is this correct or is `c` not used anywhere?
I don't think this is necessary, as we have the same flag in the master. It's not a blacklist, it's a blacklist.
Can this be moved to the executor manager class?
I'm not sure we need to have 2 separate constants here. I think you can have a `stateOffICMPType` and `stateOffICMPCode` in the `ipsets` package and use them in the `state` package.
Can we add `pretrained` here?
this looks wrong, you should use `if config.Target.Triple != ""` here to avoid the extra-file-system check.
I'm confused why this was added. Doesn't `createFederatedBundle` have an audit log already?
This can probably be a `batchstore.BatchKey` now.
This function seems to only be used in `dataDataTable` so it could be extracted.
`InternalRow.class.getName() + "Writer` -> `InternalRow.class.getName();`
I don't think this is the correct way to do this. This is an internal function. The `getIP` function should be used for the IP address.
nit: `Eventually` will block the test until the timeout is hit, so it's likely that the test will never run.
Is this the same as `wake_up`?
I think this is the only place `getLombokAnnotation` is called. I think you should remove it as an unused variable.
Isn't this a breaking change? If someone has set the `Intercept` to `http.Handler` and it's already set by YARPC, will this be overwritten?
This is a new import, but I don't see where it is used in the code.
`memset` is used in `bitstream_manager.c` and `bitstream_mgr.h`. It looks like this is an error. You need to change the `bitstream_manager`.
`from importlib import resources`

I'm not sure if there is any problem with adding a new `num_simd_saved_abs` variable, it is just used to track the number of saved and abs simd slots, it can just be `num_simd_saved = MCXT_NUM_SIMD_SLOTS;`
I'd rather not have this.
Why do you need a new function for this one?
Please remove this empty line.
I don't understand this part. Why is presentationType a property of UIA and not a property of control element?
I'm guessing this file has been renamed to `analyzers` and not `analyzers.py`, but I guess it's a good time to rename `result_handler_clangsa` to `analyzers.py`? (And I'm guessing the `plist` part should be `plists`?)
I'm wondering if `reconcile_published` should be a `before_validation` method, since it doesn't update the version number of any templates.
Why are you embedding `EntityReference`?
This should not have been changed.
I'm not sure if this should be translated. I know we use `/Brave Reporting: ` in other languages and it's not a great idea what the string is.
I would use "HONOWNED_BY_ACCOUNT" instead of "HOUSE_OWNED_BY_ACCOUNT, " here and on line 227.
I don't think we should be appending `-l` to a command line. This command will be invoked with `nsexecPath` instead of `nsenter`
I'd prefer to have this be `True`.
Should we make these private?
I would prefer to see these as separate lines. This way you won't get any output when the user does something like `az package create`.
This one is not necessary, because you have already set it to `false`.
Is the test name correct?
We can remove "that requires a breaking change", right?
nitpick: can you please rename this var to cspcObj?
This will return an error if `getAddressDetails` can fail, right?
Why set it to 1 ms ?
I guess we can remove this since it is now safe
Can this be made a static method?
This class is not public and thus should not be changed. I think it is better to leave it as is.
Is this a valid value? I'm not sure if it is, but it looks like this value is only used in the `ConfigurationBuilder.java` class.
nit: can we put it in a separate line?
This line is missing the `require` at the top of this file
I'd prefer if we don't commit if the solr configuration is not enabled
Can this be done now?
I think the logger should be at least warn.
I don't think this message is correct. The index is not necessary for a `dict_index_lookup` that has been done already.
I'd rather not print the entire list of selectors. I think it's better to add an `if len(agent.Selectors) > 0` check before the loop, as the only time that `len(agent.Selectors)` is > 0 should be the end of the method
I think it would be better to move this line to before the player check.
Why do we need an intermediate variable for this ? Why not a simple boolean ?
This is the only place we use this, right?
We need a new method for this, `irregular_dims`, right?
Is this an unrelated change? I think this should be removed?
I'm not sure if we want this to be in the css, but the default width seems to be the same as the font-size.
Is this include necessary?
Why do we need to check if `parent` is a parent of `self`? It seems to me that `self.parent` is always a parent of `self`.
I don't see any `root_logger()` usage, is it necessary?
Use the new Ruby 1.9 hash syntax.
I'm not sure we want this, but it's not a big deal and I'd prefer to keep that.
Can be replaced with `Boolean.parseBoolean(req.getParameter("alwaysOk"))`
nit: `schedpolicy` -> `schedulerPolicy`?
I'm not sure this is necessary. We should be able to get the `Kernel.srand` from `RSpec.configuration`, and the seed should be enough to reset it.
I'm not sure about the secure check, it's not really needed in general. It's just a placeholder for the user to click, so it's fine to do it here.
I am not sure if we need the expire API here. We already have the table manager and expire API.
this is not needed.
Why do you need the bool ?
I don't think we need this file.
I'm not sure about this one - it should be the default.
I don't think you need a copy here. You are modifying the ResultCollection in the constructor.
This is a pretty expensive way to convert a User object. This is not an ideal approach, but it's also a good idea.
Why is this needed here? The scope is not defined at the top.
I think we could just call the evalInsExpr() and handle the error in one place.
I don't understand how this works, but is it possible to change the `SpanKind` to be `int`?
I would just use `container.Image` here
@mistercrunch this is the change.
nit: I think we can use `PlatformNotSupportedMessage` here
This is an unrelated change, but this is a behavior change, since the EBS volume is mapped from /dev/sdN --> /dev/xvdN, so the `if` statement should be skipped.
This is not necessary, please remove
This should be moved to a util file in `src/utils/extensions` or something.
You need to use `t.Fatal()` here, otherwise the test will panic.
I'm curious if we can get away with just `map[string]struct{}` here, and then we can remove the `[]string` part.
This function is not used, so it could be removed.
This should be `delete node[ATTR_KEY].ref;`, since the ref function is not deleted.
Shouldn't this be `t.Fatalf`?
Is it possible for `boost::cxx` to be built with `NOLINT`?
Why do we need this?
`load_plugins` is not needed anymore, right?
Why not use `selectLanguage` ?
This is not the only way of loading a jQuery bundle, because it depends on a different bundle than the one you're using in the `jquery.ui` package.
This test should not extend `DatabaseTestCase`, it should extend `CartItemTest` instead
I'd prefer to not skip the cache in this case but rather check the existence of the `pollForKID` in the `VerifyingKeys` map.
//go:build go1.15 && integration
We can probably just check the `notificationEnabled` flag, and not bother doing it here.
We don't need to specify `ENV['APP_DOMAIN']` here, since `ENV.app_domain` is always the same.
This is a bit weird... why do we need to exclude github.com?
Shouldn't this be `Failed to start:`?
"TLS certificate chain and hostname of solicited routes will not be verified, do not use in production!" ?
Why do you bump the lease to 5 seconds, when the client doesn't have it?
Should we use a dictionary instead of a collection?
This is not correct. The parent of initialBase is the initial component, but it is the initial component that was unmounted. The parent is a node that is always a child of base that is unmounted.
I don't really understand how this test is passing. What is it testing?
Is this method necessary?
Is this a bug?
You could use `xml_attribute_get_string()` here to get the string, then you would not need to call `as_string()` again and again.
why this alias?
Can be removed
I would suggest we use the same method for both the new case and the old case as well.

I think this should go into `movie`
Is this method really needed?
I think the `else` here should be `unless` instead of `if`.
this should be 1.0.0
This ignore is probably because the import can't be imported, but I think that's the correct way of doing it.
I don't think this is needed.
I would suggest to use console.log to output the address.
Should we be checking for overflow here? It might be better to throw a checked exception, so we can catch it more easily.
Please avoid unrelated changes in the PR, this is the source of the merge conflicts.
What if there are other elements on the page and we want to unselect all?
I wouldn't add these here. It should be part of the config.
Why this include?
This will increase the wait time, is this expected?
I think this check can be omitted
Should the command use the new `etcdssnapshot` subcommand?
I think it's better to do the base64 encoded data instead of echo it
This is the only thing that worries me. I wouldn't expect the user to see this in their trace log if they want to. The only thing we care about is how we log the matches and how they're blocked. The only thing that's not the user should be doing this is that it will be spammed with the user's traces. If we're going to add a `UserReject` sampling priority in the future, it might be worth making the `KeepTraces` setting more explicit and adding the ability for the user to see this info.
Why not just use the existing `DefaultKubeCoreReadyCheckURL` and not introduce this field?
Is this change necessary?
This is a bit of an odd way to do this. The `arg!r` isn't needed. `arg!r` is only a wrapper for `str`
@pascalgrimaud I think that `!defined(VMX86_SERVER)` was correct here, because we don't have `VM_X86_SERVER` defined at all in `lib/kernel/sigaction.c`
I think we should add `NO_TRACING_FRAME` here as well. It's a bit confusing that we don't use it for anything but a simple message.
Is this change related? I don't see it being used anywhere in this PR.
I'm not sure how this would work in a non english context, it seems like a `<p>` is missing, and not a `<strong>` (or even `<p>`).
this is a bit of a nit, but it's not clear to me if it's correct. It's a function call.
Is this method still needed?
Can we make this a `uint32` instead?
This should be `# Copyright (C) 2006-2020 NV Access Limited, Manish Agrawal, Derek Riemer, Babbage B.V`
I would suggest to use an `int` instead of empty string here, as this will allow to use the `CodeHint::HINT_SHOW_PREVIEW` variable as the `hint`
I think this one was meant to be 4 seconds.
@jeherve @danmosemsft is this correct?
Should we use the `user_role` helpers here to avoid duplicating the logic and avoid having to do the same thing for all? I think it's better to have the `User` class implement the logic, so that we can just use that.
Why not just call this `remove()` ?
Why not just add this to the constructor of `Service`?
nit: `return at the end.`
Why not just call it MaxInt? This will allow for a more precise type. Also, what is this function supposed to do?
nit: I think it would be better to have "AllAPIsForwarding" here. It's a common name in all other packages.
I think the convention we've been using for our code is to name this "Custom", not "custom".
This is a good catch! I'd like to make it a bit clearer if we could use a different path for this. Maybe something like `/storage.cluster-ids.txt`?
Isn't the check for `bridge.getServerUrl() == null` enough?
Can we add an explanation here?
I'm not sure this is correct. It seems that the `IndexSchema` is not used anywhere.
I think we should use `@license` in this case, as this file is shared with other files.
I'd say that this should return an error, but it's a bit odd to panic when we get an error, and then return a nil slice, so that is fine
I think the error should be `aws_region has to be set when running on-premises`
I think we don't need `version` in `db_version_info`.
This seems to be a breaking change. I don't see it being done in this PR.

I think the reason for this is because `current_user.can_org_admin?` will return a boolean, but `plan.id == current_user.id`. So, the `current_user.can_org_admin?` check is redundant.
Can the version be `UNKNOWN`?
Why this change?
I think this should be "Defines the output type for a screenshot"
I think we can remove this line, it is not needed anymore
I think this would be cleaner if you put this in a function.
I think the id should be prefixed by the underscore.
I think the `Union` should be imported at the top.
This is just for the sake of consistency with the other test files.
I think we don't need this anymore
I'm not sure why you need to move this.
This will not work if the body has more than ELASTIC_LIMIT_BYTES entries.
nit: rename to "fields" since this is an output file.
Why did this change? It looks like we only support NET45 and NET46.
We don't return this error, we should.
This is not needed, the test app does that for you.
This is a change from #3779 to #3434.
I think this line is unnecessary.
Why not use the `getInterfaces` method?
I think this should be `false` by default, since HMB is a different sync algorithm
This is an actual fix.
@jtkech I'm not sure why this was made abstract. I think this is an implementation detail that should be exposed.
I don't think you need this anymore as you're using `start` in the view and the controller is responsible for rendering it
Please remove the line
This doesn't work for components that return a Fragment.
This line will cause a problem, because `this` is not cloned, but `this.s` is.
Why is `selfNS bool` needed?
I'm not sure this is right... I think I'd prefer if this was done using `Time.zone.now - 2.hours`
This should probably have a `.js` extension, since it's not a JS file.
Why did this test get deleted? This is a test, right?
I'd say we should also log something in this case. I don't see it getting logged in any of the other controllers, and I would expect this to be an error, so we can just skip the event and continue.
This is not the right function name for this. This is not a method of the pool spec. It's the pool type of the pool, not the pool type of the stripe pool. The function should be called `isStripePool`, which is the correct name.
nit: can you remove this empty line
Can't we use the constructor that takes a sample type?
This can't be called for a hostname that doesn't match the specified host name. It's probably better to use `chirp_reli_get_id` and use it instead.
We should also update the `Span.addEvent` and `Span.removeEvent` methods to not return a `void` value, but just `void` instead of `Span.stop` and `Span.start`.
This method is not used.
I think this should be defaulted to the value of the `qos` parameter passed to `create_participant`
This function is not used in this PR?
This regex is pretty complex. Can we refactor it?
I would just remove these lines.
Can you change this to `mongoClient.s.options.cryptdConnectionString != null`
Should we call os_clone_post here?
Should we be passing `null` as the second argument instead?
The word "any" is confusing here. It sounds like a queue, but the word "any" is not. I would remove it to avoid confusion.
this is an error condition, should be `err := ctx.Err()`
This can also be moved to `TraceConstants`
Why do we use an `lib` instead of just a `lib64`?
Can we add a note that this will change once the default resolv.conf file is used?
Should these be added back?
This should have a default implementation.
I wouldn't rename this. It's not really about lps, it's about langserver.
This check is unnecessary, target already checks it
I don't think we want to signal fatal error here, we should return a new error to caller and then we can report that we failed to unload the taskqueue. This way the user can decide if the taskqueue was killed or not and if we can recover the taskqueue, we can decide to return a nil error.
This is the same as in `TopicController`, but I wonder if we could just use `ArticlesController` instead of the new controller, so we don't need the old `ArticlesController`?
This function is only used for the `is_svd` check. It should be moved into `get_policy`
I'm not sure what the purpose of this change is. It seems unrelated to the rest of the changes? If not, I'd revert that change.
nice! I think it might make sense to move this validation to `run()` instead of `validate()`. That way we don't need to duplicate it in `run()` for every call to `validateFlowExporterConfig()`.
This is a new param. I don't think we need to add this here.
This change should probably be reverted.
Why is this being removed?
This is the only message I would use. `Invalid indices` isn't very informative. How about something like: `Invalid indices: `?
This doesn't appear to be used?
`$a` -> `$a`
Is this check necessary? It seems to me that we could just return here, without checking that the `NVDAObjects.UIA(UIAElement=sender)` has `obj`.
this is already handled at the top of this function
I would prefer that we use `node.config.online_weight_minimum` instead.
I think we can remove this log message.
Should it be `true`?
I don't think this will work. The file size may be different for different image types (e.g. image/png, images/jpg etc) and the file size might be different for different image types (e.g. image/jpeg etc.)
Can this be a constant?
I'd like to know if we have any issues with using a custom precompiled contract.
`items()` is unnecessary here.
This is not needed, I think.
I don't think this is equivalent. The old code was equivalent to `spec == PartitionSpec.unpartitioned()`.
I'm not sure if we should add this here. This should be a part of history engine and not the base. We can add a method like `getWorkflowDeleter(workflowID string) workflow.DeleteManager` which returns the delete manager if it is not nil
Should we add a `Type` field to `Options` struct?
I think we should use an alias here.

why is this needed?
Why not just use `id == 0 && id < 100`?
I don't think this is a valid option. You need to provide more info.
nit: can be merged with previous line.
Should this be `self.set_option(XXX, 'disabled', value)` ?
I think this should be `int64`
You should also remove the max health calculation from the math
I think this can just be `class_name = cls.__name__`
Is this test no longer valid?
Can you make `forbidden_hosts` a `set`?
nit: we can remove `targetSplitSize()`, it is only called from this class.
I think you can delete this function and use map->updateLocation instead
This seems odd. Why are we using `dirname` instead of the path?
This is the same as the previous if statement, but I'm not sure what's going on here - the else block is unreachable - if the layer has an unknown engine then we should not be throwing.
I think this is the main issue. The `locust.log` file is used to write to the `locust` log file, not the `locustio-taurus-wrapper.py` file. So it should be moved to `resources`.
should this change also also get the services?

Why do you need to rename these? They are not used anymore?
@joshcooper @danimtb @karlnapf is this a bug or is the path supposed to be relative to the build directory?
Should be `DisableInMem`
This is the only thing that's going to be changed right? I don't think this line does what it was intended to.
I'm not sure what is this change for?
This is wrong - it should have been `TypeError`, not `KeyError`.
Nit - please remove this empty line
Final newline missing.
This is a very expensive call. We need a way to do a check for `if i.Status == corev1.ConditionFalse` before trying to deregister.
I'm not sure if it's a good idea to do this in a `after_save` callback. It's a bit dangerous, but I think it's not a big deal.
Is there any chance that `rw.headers.Items()` could be nil?
I think you can just change this to use `luigi.util.Derived`.
Can we use `assertFalse()` here?
@aljoscha is this version the version that we want?
I am not sure about this change, as this class is not used anywhere.
I think it's better to name it `preventWheelOverlay`, to make it more clear that this option is only related to the overlays.
Why not using `static_cast<char>::toupper(c)`?
This is the only one I can think of right now. We don't need the example, and the example can be easily re-generated by other tests.
This will be fixed in the `team` branch, but it will be a separate PR.
I think it is better to say "command" here.
`#has_constraints?` is not used.
Extra empty line detected at block body end.
nit: I think it would be cleaner to have an enum here. We might want to do a bit of refactoring to make this easier to use.
This is going to create an object, not a shallow copy.
This change is not needed. If there is a matcher, we should not have the next argument.
This is not the right way to do this. You need to do `s/` to get the bucket.
Why do we need to change the interface here?
This should be updated to 2019, no?
I'm not sure why this is in the `PodState` enum, but I guess we should keep it here.
I think we can do role.trim() !== '' to avoid the extra string toLowerCase
I don't see any usages of this method?
Why this change?
can we make this a static function in `NodeUtils`?
Should the `csr` and `svid` files get removed from the fixture?
`reader` can be null, and then the following if statement can be removed.
This is not needed anymore.
I'm surprised to see that we need to have a separate `ITableObject` interface. Isn't `TableObject` sufficient to know what it is and why?
Is this needed? I think the `TBB_INTERFACE_VERSION` should already have been included
I'd like to avoid regexps in the main code as they are hard to read and understand. Can we have a single regexp or two in the source code?
I think you meant to remove this line.
I think this is a typo, `format` should be `:time`
I'd suggest using `domainTagsLimit - curTagCount - 1` here and below.
This is the only one that I'm not sure about. If you want to change it, we should also change `setFlag` and make it accept an optional file.
Is it possible to set `targets` directly in the constructor?
@mcollina - I think it might be worthwhile to make the `logDropError` function return a promise so that we can avoid the unnecessary function execution. I'm not sure if there's a good reason to do it this way though, it looks like it could be simplified to just `log(error, null, error.message)` if you want.
This is a breaking change that should be discussed. I think we should add this in a separate PR.
I think we need a better message, because if the container is already attached, then it should be attached. The message is not accurate. It should be `Attaching container...`
Can we call this `rootIdCounter` or `rootId`? It feels like we're using a number in two places. It feels weird to have it be an integer, but it doesn't feel like an integer at all.
This is a bug fix, but I'm not sure why we're changing it.
This change is not required.
This should be a pointer type.
I don't think the name should change here.
I think we should have a test for this
I'd prefer to use `time.Now().Round(time.Second)` instead. It will be more clear what we are trying to do.
Can we set this to `true` for now, and then make the default value of it `false` for the next release?
