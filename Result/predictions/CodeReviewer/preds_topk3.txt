I don't think this is correct. We don't need to generate a gRPC client.
Shouldn't we check if the index is configured?
I'm not sure about the segment key.
This is not the correct fix for the issue, the size is not displayed when there's no size. The issue is that the status is not shown if the size is not set.
This is a bit confusing. It seems that the `navigateURL` will be the URL of the page that is being navigated to. I would expect it to be the URL of the page which was previously navigating. I think the name of this variable is confusing.
This is not correct, because `Im2Col` expects a `Mat` as input.
I think we need to import the whole module, not just the one function
I don't know why this is necessary
Is this a case where we could have an exception here? I'm not sure if this is the best approach, or if we could just fall back to the main thread.
This is a bit weird. I think we should be using a different service instance than the one we use for the `options` parameter. I don't think we should have to pass the `options.service` to `createSession`, but I think it's fine to keep it as a separate parameter.
This should be `keys.then(keys => keys.join(','));`
This should be `sharedMountValue`
`render()` is called afterward, so you need to call it afterward.
This will be a bit confusing if we have parent span ID in the activity. Can't we use `activity.SpanId` instead of `activity.ParentId`?
nit: can we add a space before the `-`?
I'm not sure why you removed the strict mode.
This is not the correct test, as it is testing whether the cache-control header is encoded correctly. It should be `('public,%20max-age=500',), ('public, max-age=500')`
This is a bit of a misleading name. I'd prefer `DUP_CHECK` or something.
Should this be "EXECUTION_FAILED"?
This should be `if (dev) {`
Why is this needed?
Can we add some more context to these?
Why do we need this change?
This is a bugfix, right?
I think this is not correct, it should be `$request->getSession()->getLang()`
I think we should just use the `--history` flag instead of adding a new flag.
This should be `return;`
This should probably be `os.path.join(options.CA_DIR, 'config.yml')`?
I don't understand the logic here. If the attribute is not found, it's not an attribute.
This should be `workingDir`
This class should be in the `Uwp` namespace
I think this should be `@logger.info(result.exit_code)`
Why not just call this `clearDir`, since it's only clear for the block disk store?
This can now be removed, as we are not using it anywhere.
I think we should add a `mset.sourcesInfo()` method that returns the mirror information. This would make the `mirrorInfo` method easier to understand.
I think we need to check that the length of topicName is at least 50, since it will be unique.
I don't see how this change is related to the rest of the PR.
Why do we need this?
This interface is not used.
Should this be an error if the `key` isn't set?
This is a breaking change, right?
Please remove the extra line
nit: unused import.
I think we should use `logger.error` for this, otherwise it will be logged as `info`
I don't think this is correct
I think we should have a separate `VALIDATORS` metric category for the validators
Please do not use star imports.
This should be `max_local_mem_size`
I think we should use a `for` loop to remove the items. It's better to have a loop that deletes the items in the collection, then removes the items in the `feeds`.
I think we should keep this as `None` and just make the default `build_sub_pipeline` to be `None`.
I'm not sure if this is correct. I think we need to throw an exception if any of the settings are invalid.
I think we should add these methods to `chain` as well.
Why do we need to change it?
you should probably check for `creature->isDead()`
This is not a fatal, it is not an error
This is the same as the `Promise` object.
I think we should queue the dep even if it's not active (and if it is, we should mark that it's not in use). I think it's ok to queue the dep if it's active.
This is a good change. It is a bit hard to follow. I think we should have a function that does all the checking and then just calls that function here and then we don't need to duplicate code.
This is not correct. It will exclude `video` or `audio` nodes as they are not children of `<head>`
Is this still necessary?
Why do we need a new type here?
This is not needed.
I don't think we should add a new argument here.
This is the actual fix.
This is a change in behavior. The old code used the OpenID login, now it's the federated login. I think we should keep the old code, and change it to use the new one.
I think this should stay as "Wallet balance (XRB): "
I think this should be called `EnvPath`
This seems like an unusual way to define annotations.
@mattip, I think we should also change the velocity of this particle. It is not a massive change.
This is the only real change in this file, the rest is whitespace. Please revert this.
This is the default, so it's unnecessary.
I think we can remove the assert here, as the assert will be done by the call to `wl_list_remove`.
I'm not sure about the naming here. I think `episode_published` would be better?
This seems like a good place to add an option to allow external tables.
Please remove this empty line
Can we also test the `name_with_middle` method?
`win_id` is not used in this method
This is the only change.
This should be an error.
This should be `null, null, 'Exports'`
I think we should add a `json_decref` here too.
I think this should be `False`, since the default value of `no_replace_variables` is `True`.
This is the default for projection.
This should probably be `instanceName`.
I'm not sure if we should be using the term "pos" in our codebase. It seems like a very general term and we're trying to avoid using it in our codebase. I'd rather see this as a `Position` or `Pos` type, or even a `Position` enum.
I don't think you need the `if` check here since the `resumeCompositor` is already doing this.
I don't see why this import was moved?
>e.Message [](start = 58, length = 9) I don't think it's a good idea to use the exception message. It might be better to just pass the exception in as an argument to `ResultWrapper`
I'm not sure this is the right way to do this. If you have a connection that is not highlighted, it will still work. If you have a local connection, it will not work. If you have a connection that isn't highlighted, it will still work. If you have a connection that is highlighted, it will still work, but it will not be highlighted.
I don't think this is necessary.
This is not needed
this is not safe. `ch.Data()` will be empty if there is no data in the store.
Why is the global tracing needed here? I think we can remove this.
This should be in a defer
I think this should be a `Pointer` instead of a `String`
This is a little confusing, I would expect a single `singleCstorSPCUpgrade` call to be executed, and then a `bulkCstorSPCUpgrade` call to be executed.
This is the same as `popup_destroy()`, but I don't see the benefit of using `wlr_xdg_toplevel_send_close()` instead of `wlr_xdg_surface_send_close()` here.
I think we need to return a copy of the passed context here.
I don't think we should add this. The OS X version of Windows is supported by all platforms, so it's not a problem. The platform should be available in all supported platforms.
I would suggest to rename it to `fetchFlowsByExecId`.
This is a bit weird. Why was this removed?
I think this should be `node`
This is not needed anymore.
I think we should add this to the `JaxtParser` interface as well

I don't see any reason to have a GetPorts() function in Container, why not just have a GetPorts() on the Container interface?
Layout/TrailingWhitespace: Trailing whitespace detected.
I don't think we want to change this interface.
`axe.utils.uniqueArray = (arr1, arr2) => {`
`path_buf[MAXIMUM_PATH]` is the path that is appended to `buf`, not `path_buf[MAXIMUM_PATH]`
Is this import necessary?
Why do we use `|null` here?
This is the only change that is necessary.
This was never set in `NewConfig()`, so I just removed it. It was only used here so I removed it.
Why do we want to default to `docker-volumes`?
This should be in the same namespace as the file it is in
This should be `urllib2.build_opener()` (and the `urllib` import)
This is a bit of a hack to get breakpoints from attrs. I would suggest we use `attrs.get("breakpoint", "breakpoint")`
This will break the screenshots on w3c. I'm not sure why we need this.
This should be grouped with the other "internal" imports.
This should probably be `153493828L`
This is not the same. `first` and `last` are the same length. You can use `std::min(first + 9, last)`
I don't think we need the label here
This is the fix.
This is the wrong alias.
I'm not sure this is a good name for this function. I think it should be named `define_pipeline_context_cls`
I think this should be `volatile` and `final`, as it is only set in the constructor.
I'm not sure what "media" means here, but I'm not sure what it means.
Why do we need to add these annotations?
This is not a good way to check for type. We should use `assert.ok` or `assert.ok` for the error messages
This is not necessary, since the `Reporter` is not a `Context`.
Why is this not a problem anymore?
Should this return the `codeGenVersion()` as well?
this is not needed anymore?
This should probably use `UntilNow()` instead
nit: remove space after `,`
Why do we need a `Without`, if we're not going to use the value in the `Upstream`?
I would prefer a test for this.
I think we should keep this as tag, because we can't have tags without security groups.
Use 2 (not 4) spaces for indenting an expression spanning multiple lines.
I'm not sure about the timeout. I think it should be a configurable parameter, but I'm not sure how.
Should this be `:stringified_symbol`?
This is not a coma_separator but a separator. It is a separator in the first token of the array, but the separator in the second token is the separator in the second array.
Why is the `Recycling` needed? It's a little weird that the cache is not used by the `Recycling` class.
This should be `PaymentVersionV4` or the `V3` suffix should be removed. The `V3` part of the name implies the version is v2 or v3.
I think this should be V(3), since we are not using it for any of the other operations.
Why do you need this method?
This is a bit hard to understand. Can we make a function like `IsMotorwayRamp` or `IsRampRamp`?
This is the key change.
I think this should be `HRNet`
I'm not sure why the whitespace change is needed.
This should be a `!=` comparison.
I don't think we should be creating a new snapshot. We should be creating a snapshot in the `vagrant-multiprovider-snap` branch, and then using that.
This is the fix.
This is not needed, as the `showAutoDownloadReport` will always be true.
I think it's better to make this a method on `Call` and then have a `GetFeatures` method on `Call`.
I think we should implement these methods as `status.Error(codes.Unimplemented, "NotImplemented")` instead.
This should be `err.Error()`
This is not the same as the old code, but I think it is the correct way. I would prefer to have a function that returns `np.diff(data)` and then call it here.
This was actually a bug in the old implementation, because it wouldn't call `Suspender2.render` if it was not in the queue. This test was passing even if it didn't call `Suspender1.render` and `Suspender2.render`.
This is the same as `failed_destroy_error` but I think it's worth keeping.
I think this should be `{msg}` instead of `{msg}`
I think we can just remove the require now?
Why do we need to return a pooled block here?
I'm not sure what this means?
This is a breaking change. We should keep the old class and mark it as @Deprecated.
Why not just `if(!pull.head.is_zero())`?

I'm wondering if we should add this field to the `thanos-ruler` command as well, so that users can set it in a different location without having to change the `--alert.query-url` field.
Why this? I think it's safe to do this without the append, because we're appending a new list.
This test is failing because `n` and `n2` are the same, but the test is passing.
I'm not sure if we should be changing this, as I think the agentless ID is used in a lot of tests. I think we should just leave it as it was.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is a change in behaviour, as the previous code would log a message even if no exception was thrown. I think it is ok to keep the log message, but it is better to keep the log message.
I think we should keep these properties, but add a new one for `MaxClients`
I'm wondering if this is the correct place to put the `bzz` package.
This is the new version of mailjet, right?
I don't think we want to use wildcard imports
This is not the right way of doing it. The `host['ip']` will have to be an IP address.
I don't see any benefit in the old code, and I don't see any.
I think this should be `Uniqueness` and `Onlyof`
I would suggest using `useMemo` instead of using `useEffect`
I think it's better to use boolean instead of boolean.
nit: `readSchema` -> `readOrcSchema`
I'm not a huge fan of magic numbers. I'd prefer to see this in a constant, like the others.
This should be `typeof readPreference === 'object' ? ...`
nit: can we use the constant here?
Why not just call `generate_authentication_files`?
Why not just set `isHydrating` to `false` here?
This is a public API change, and we need to keep it.
I think this can be removed.
This is the same as the `skip_before_action :authenticate_user!, only: [:approve]`. I think we could remove it. Also we could add the `only: :approve` line in the `before_action` block.
I think you should check for `content-length` here as well, as the header is not present on the response.
I don't think this should be changed
I'm not sure we should add a new file for this one. I would prefer a new one for this purpose, but I can't think of a better way
Why do we need this change?
This is a very generic interface for a source. It's probably better to move this to `source` package.
This is not used anywhere?
I don't think you need this anymore, right?
This is a temporary fix.
This is a bit of an odd place for a path. I'd rather have the `TempDir` be an environment variable.
This is the only place where we have a `v2` import. I'm not sure if it's worth the effort to keep the v1 import in the same package.
I'm not sure this is a correct way of doing this. I think we need some way to allow the user to set the headers. I don't think this is the best way to do this. I think we need to add a header to the `headers` dict in `__init__`, and then set the headers to `['Authorization', ...]`.
I'm not sure this is a good idea. It will be a problem for a user who is using this code and is not a member of a class. It is not a member of a class, but a member of a class that is used by a member of a class.
I think we need to do this in a defer in case the backoff is not needed.
This should be `#else /* ARM_32 */`
Why not use the `originalSchema`?
I think we should keep the old key name here.
I think we should change these to be "Persistence Max QPS exceeded."
I think this is the only change in the PR.
This is not correct. The sender should be the first address that is used for the transaction, not the sender address that is used for the sender.
I don't think we want to allow origins.
I think we should also set this in `_set_headers`
Why is the `textbox` required?
This should be static.
Should we drop the IP in IPNI here? I think it's OK to drop it in a single rule, but we might want to add a TODO to remove the IP-only traffic when we drop the IP in a separate PR.
This should use the `JSONObject.toString(response)` method instead of `response.fullResponseAsJSONObject()`
I think this is the only place where `parseInt` is used.
Why is the `!` needed here? It's a boolean value, not a string
I think this is the right thing to do, but I'm not sure why we're not returning the error from this function.
I think this should be `(out: string)`, as the description is a string
This is a bug. The previous code was correct. The new version is correct.
I think it would be better to use `os.path.join()` here.
Please remove this line.
I think this should be `/user` instead of `/session`
I don't think this is used anywhere, so it should not be added to the PR.
This should be indented with spaces.
I'm not sure this is a good idea, `util::irange` takes `std::size_t`s.
Why do we need to convert it to numpy?
I think this should be `errors`
I think we should not change the constructor. We should keep the old one.
I don't think we want to remove these methods. They're only used by the `stop` method.

I don't think we should have a namespace here. The event namespace should just be the namespace of the cloud-run-events namespace.
This is the same as `.rb` and the `.py` file, so it's probably not worth it to add it here.
I think we need this to be `map[string]string`
Why is this removed? It's not used.

This import is not used.
I think this is the correct way to do the classification loss
I think we can just use `src={ smallImage }` here, and remove the `typeof` check below
I don't think we want to import everything in this class
This is a very minor change. Please revert.
I think we should move this to the `location` package.
I think it would be better if the error message would say "Engine bass class " + func + " is not implementing this function. Child class " + engineType + " is not implementing this function\n"
I think we should check `Number(value) >= 0` here too.
I don't understand why we need this. Why not load from ZkStateReader?
Why did you remove this?
This is not necessary.
Why do we have a new file for this?
I think you need to `luaA_pushboolean(L, c);` here.
I think this should be `current_user.id != @note.author.id`
I think it's a little confusing to have a `path_resolver` property in `Document`. Maybe `path_resolver`?
This is a breaking change, right?
I think it is better to define the default value as `DEFAULT_KV_CLIENT_CONCURRENCY + DEFAULT_PREWRITE_CONCURRENCY`, because it is the default value of `TiKV`
This is a bit weird. We should be creating the table if the table already exists.
Please use spaces instead of tabs.
I think we should use `help_url` here instead of `help_url('')` as it is the same as the empty string.
I think we need to do this before `s.mu.Lock()` because it may be locked while the `addSystemAccountExports` goroutine is running, and the `s.sys.resetCh` may be blocked.
ENABLE_DOWNLOADING = "chromium.disableDownloading";
This should be removed
Should we use `HttpStatusCode` instead of `HttpStatus`?
I think this is not used anywhere?
I think we can remove the `allowOverwrite` and `cleanup` variables.
This is a change in behaviour. Previously, if the root directory wasn't found, the error would be returned. Now, if it's missing, the error would be returned. I'm not sure if it's a good idea, but I think we should keep the error message as is.
I think this is the only place where `current_page?` is used.
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
I'm not sure this is correct. The value of `granularity.between(EPOCH, timestamp)` is a `long` and not an integer. The code is not returning `year` in this case.
I think this should still be a warning. It's not a normal event, it's an event that's being sent to the task manager
This is a little weird, but I don't have any better suggestions.
This should be `final` as well
This method can now be `@Nullable`
Style/SymbolArray: Use %i or %I for an array of symbols.<br>Metrics/LineLength: Line is too long. [82/80]
I think this is not needed. The test will be run with the same permissions as it was before. The test should be able to run without chmod.
I think we should add `cache: false` to `add_tarball` instead.
This should be `0.0007`
This will fail if slider_pos is an integer.
I don't think we should use doctest in this file.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is not needed.
This is a good catch, but it is a good idea to add `pip_requirements` to the `setup.py`.
Why not use `phar_realpath()`?
Why did you change this?
I think we should keep these tests.
This is a bit confusing to me. It is not clear to me what is happening here. I think it is the same as setting the totalTxBytes to 0 in `NewBlockEvaluator`.
Line is too long. [83/80]<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think this is a typo?
I'm wondering if we could remove this notice altogether and just use a flash notice? I think it's not that useful to have in this case.

This should be initialized to false, right?
Please don't use wildcard imports. We use OpenQL for imports.
I'm not a fan of aliasing a package name. Can you please change the import to `proto` instead?
nit: I think this is not needed?
This is a bit too long. Maybe we should use a shorter word like `logicsig size too large`.
I'm a bit concerned about this. We are adding tags to the `tagNameSet_`, but not using them. I think we can remove this line and `tagIdSet_`. I think it would be better to use `tagNameSet` and `tagIdSet_` instead of `TagNameSet` to keep things consistent.
This should probably be `if: :published?`
I think this should be configurable.
This will be a problem for the user who has no email set. We should be able to use the default email address, which is what is used by the default issuer. I think this is a good idea.
I think it would be more clear to pass the port in as an argument to the constructor.
missing whitespace around operator
I'm not entirely sure if this is the right approach. I think it should be fine to just leave it empty here, and only allow the user to set a project name if they want to.
I think we should use `string.IsNullOrEmpty` here.
This is the only change. Previous code was returning `found`, now it returns `candidate`.
This is a breaking change. We cannot remove this.
I think this should still be an `else` since the `if` statement above is not doing anything
I think this is a bit confusing to have a method called `final_approver_email_address` that is different from `current_approver_email_address`. I would suggest renaming this to `status_aware_final_approver_email_address` or something similar. I think it is more clear what it does.
This should be a `Form` interface
nit: remove extra line
This is a bit confusing, since we are not passing the `RDKit` object to this method.
This is the actual fix.
"Patch" -> "Patch Required"
nit: this could be `dfBuildRequired(svc interface{}) bool`
This is a public API change, and it is not recommended to make it protected.
This should be reverted
I'm guessing this was a bug, but it's still a bit weird.
This is a little weird. Why would we want this to happen?
This should probably return an error instead of returning a 500, but that's a separate PR
I don't think this is the right way to do this. We should just return the context if it's invalid and not return the context with the remote context.
I don't think we need to pass `paginated`. The default is false anyway.
This is the key that will be used to encrypt user_id's, not the user ID. The token will be used to sign in the user ID and the user ID.
I think this is the same as the above test. Can you just check that `kdf.a.groupby(kdf.b)` raises a ValueError?
I think this should be moved to the top of the function, so that the size is not set when the mcontext is created.
I think we need to set this to `/var/lib` for the test to pass, otherwise the `/etc/ecs` will be overwritten.
This should probably be `ipsecESPOverheadMax`.
I think we can remove the `ref` here.
nit: import grouping
nit: I'd just remove this note, it's not really helpful.
This test was flaky. It was stopping the server before the test was run.
This is the same as in the previous code, can't we use a single method?
This should be the same as the one above.
This method is now only used by the test. It should be renamed.
nit: space between `=` and `(`
I think you want to unlock here too.
`cst, _, bs := sharedSetup(t, mockSignerVal)`?
I'm not a huge fan of this URL. Can we use the same one for the other one?
I think we should remove these imports
I think we can remove this. We don't have a release binary in the system yet
I would call this function `_CleanFpInfoAttr`
This is the only error that can happen in the pipeline. I think we should add it in the validation.
I'm wondering if we should change the name of the exercise to `name` instead of `title`.
I think we should keep this check for reviewing as well, as we can see that it is still being called for reviewing.
This method was never used.
I don't understand why we need this change.
pep8 wants spaces around >
I would call the parameter `consensus`
This was unused.
This change is unrelated.
This should be `HELLO` not `DEFAULT_HELLO`.
I'm not sure about this. It seems like it would be a good thing to have a separate error message.
This option should be named `--installer_signing_identifier`.
This should be a warning.
Why is the return value different than the existing dir?
This will be a problem for the user. We need to make sure that the regions are in the correct location.
I think we should remove this method from `Editor` since it's only used in `Edit` and it's not used in other places.
Should we use the new `function roots_get_search_form(&$form)` instead?
This is wrong, as it is not a facade, it's a facade
This is not a good idea. We should be able to remove the update links.
Should we use `azkaban.jvm.ignore.args` instead?
This is the only part that I'm unsure about, but I don't think it's necessary. We already have the `<a class="google-cta-link" href="%1$s">%2$s</a>` element in the string.
I'm not sure about this one, it seems like it's a bit of a hack to me.
Why is this check needed?
`std::chrono::steady_clock::now ()`  clock
I think we can remove the `\'` at the end of this string.
I'm not sure why this was renamed.
I'm not sure this is the right default value for `holes`. I think it's `FilesWithHolesDataVer` if `holes == true`.
Why is this being removed?
This is the only exception that can happen here.
I don't think this is needed, since `config.PORT_SES` is already the default.
This is a bit of a hack, I think we should do it later. I'm not sure how to do it in the first place, but it's not a big deal.
I would suggest to use `bool(os.getenv('QUILT_USE_TQDM'))` instead of `.lower()` here.
Why did this change?
I don't think this should be in this commit.
Why is this test no longer relevant?
This is useless.
I'm not a fan of adding these to this namespace as it's not really a controller. It's a controller that is used for a controller, and not a controller that's a controller. I'd prefer to see this removed. It's not a big deal, but I'm not sure if there is a better place to put these.
Why not just use the default content type?
I'm not sure if it's worth the extra effort to keep this in the test.
I think we should remove this from here, and only use the secret key ref.
This is not needed.
Why remove this?
This is the only change that I don't see. The rest is just whitespace changes.
I think we need a more generic name here. `skipOSConfig` seems like a very generic name.
The method name should be changed to reflect the new behaviour, i.e. `SyndTypeUtils.enclosureTypeValid()` should return `true` if the type is valid, `false` otherwise.
This should probably return a `sessions []*endpoints.SessionDTO` instead of a `SessionsDTO`.
Is it possible to have a context with a `NULL` dcontext, but not a `dcontext->is_exiting`?
I'm not sure if this is correct. I think we should be able to use the default kestrel.
I think we need to check for `id` being `null`.
This is a bit of a nit-pick, but the indentation is off here and on L414, so the second part of the `if` statement should be aligned with `if` statement.
I think it should be `if ($configuration['settings'])`.
I'm not sure this is needed. I think the `dynamic_zone_manager.h` include should be removed.
I think the `Expression partFilter` parameter is no longer needed, as the `PartialManifest.iterator` is only called by `PartialManifest.iterator`
Should we add a `to_s` here?
This is not used anywhere.
I think it's better to use the `ShortRun` here. I'm not sure if we want to change the default.
I think this change is not necessary
I don't think this is the right place to put this function, it should be in `repository/migration.go`.
I think we should remove this
Is this a typo? Should be `stress_test_timeout`
This is not needed, since `release_history` is called by `release_history_` anyway.
This is a bit weird, but it is not a big deal
This should probably be `@property`
nit: can we call this `annotationMode`, `rawMode` to be consistent with the other constants?
I think this will panic if `w.DefaultTimeout` is `time.Duration`.
`limit` is unused (from `structcheck`)
I don't think we should remove this. We should keep it for backwards compatibility
This should be `Rollback` not `RollbackPrimary`, since it's not actually rollbacking the primary.
Why is this needed?
Why is this an interface instead of a method?
This is a good change. But I'm not sure if this is a good change, as we're not using the `clientset.Client` in the test. I think we should keep the old function name and change the function name to something like `fakeGetClientsetWithList`
I think we need a better name for this. I'm not sure what it means.
Nit: I think this should be grouped with the other AWS SDK imports.
This should be `if len(o.PipelineSecret) > 0`
Should this be a separate method? I don't see any other implementations of this method
This is not needed, we already have `k8s.io/client-go/rest`
I think this can just be -1
This should go in `qutebrowser/utils.py`
I don't think we need this anymore.
This is not correct. This should be `DisableHTTPGit`
I would prefer a test with an invalid provider reference
`MakeFunc` is unused (from `deadcode`)
I think this is the cause of the issue. `name` can be `null` or `undefined`
Why is this changed?

This is not needed, as the `targets = "ssh_nodes"` line above will set it.
I think we can just use the `lambda_function_arn` method from `aws/cloudformation/utils/aws.py`
This should be done before we call `remoteConn.Close()`.
I don't think this is correct
Why are we changing the order of the fields?
This is not a good name, as it is not the prefix for a config element. It should be a prefix of the config element.
I'm not sure if we should change the default here. It's a bit confusing.
I don't think this is a typo, it should be `.`.
nit - `uploads volumegroup snapshots`
This looks like a hack to me. Why is this needed?
This should be `array_values($this->getFilters())`, no?
I think this is the right thing to do. If the span is not valid we return the context. We should return the original context.
Shouldn't this be `weitere`?
This should probably use `assert_no_cache_header()`
Why is this changed?
I think this is a duplicate of the next one
This is a good candidate for `require.NoError(t, q.TogglePrefetcher(false, nil))`
Please revert these changes.
I'm not sure this is a good idea. I would expect to see a resource called `cloudsql` and then it would have a name that matches the name used for `projects` and `iam_policies`.
I don't think this is right. `hasAttribute` is supposed to return true if the attribute exists, not false.
This should use the `Project#getAllProjects` method.
Should this have a trailing `-` in front of the list?
I think this should be in `scapy.sendrecv` instead of here
I think you need to import this at the top of the file.
Why is this change necessary?
I think it would be good to include the profile in the error message.
Why do we need this?
This is a breaking change, we need to add a new argument to the end
This is the actual fix
This should be `str(outputs[i].shape)`
I think we should add a `else if` for MSI.
>PreparerNeeded [](start = 28, length = 17) I don't understand why we need this.
nit: remove empty lines
This should be `false`, right?
I think we can use the `Reason` field to pass the reason in, instead of `reason`.
I think you need to change the default value of boosting_type to be 'regression'
This is a bug. The depth stencil is not a raster order.
I don't think we need this change.
F401 'flask.current_app' imported but unused
I think we should have a test that checks for a long domain feature set.
I don't think you need to install gdebi here. The `apt-get` script already installs `gdebi-core`.
I think this is not necessary. The code in the code is in the same place as `dynamo_avx512_in_use`.
Can we make this configurable?
I don't think this is correct. It should start with `http`.
This is the only change in the code base.
This should be "the secondary" instead of just "the slave".
This is not the same as the previous code. `dr_merge_arith_flags` will overwrite `EFLAGS_OF` and `EFLAGS_ARITH`, so this is not necessary to be merged.
This is the only change in this PR, right?
I'm wondering if we should add `.Core` to the path here as well.
I think we should call it `setup_single_page_styles`
I think this is not needed. The startup kernel loader is only enabled if HIP_STARTUP_LOADER is true.
I don't know if we should use `items` instead of `dataTransfer.items`
Why is this removed?
I'm curious why this change?
I think this change is unnecessary.
Why do we need to change this?
Please add license header to all files
I think we can remove this file
Why did you move this test to the `FakeFS` spec?
This is not a valid JSON response, it's JSON. We should probably return an error response here.
Why do we need this case here?
I think we can remove the `IHas` prefix from all of these interfaces and just use `HttpMethods` as the name of the method.
This seems like it should be `RECONCILED`?
Layout/AlignArray: Align the elements of an array literal if they span more than one line.
I think we need to update the copyright header. #Resolved
Can we have a test for this case?
nit: import order
This should be `options=None`.
Should we add `// ENOTSUP - fd is bad file descriptor` to the switch case? I think that would be a more appropriate error code for the case where the user didn't specify the file descriptor, and the user didn't specify it.
This should be in the message package. The zeroTime is not needed.
This should probably be a `typ.Float` instead of an `typ.Int`
I think this should be inside the `if` block, since it's only used for the case when the IntegrationOptions is disabled.
Why is this change necessary?
Is this necessary?
I think this test should still pass, since it's not testing anything useful.
I'm curious why this change is needed.
I don't see the reason for the change.
I think we can remove the sample scan check here.
I don't think we should expose this option. It should be a public API.
This should be in the uiGridTreeBaseService
I think we can remove the `@since` annotation now?
I think we should just replace `\'` with `"` and `\"` here instead, as the latter is the only place where we have a single character string.
nit: `GetRawUrl` -> `GetUrl`
This should be `if err := store.Delete(cfg.SynchronizableEntitiesPrefix); err != nil {`
Should we check that the path is a valid path? I'm not sure how this works.
This is not a valid license header.
I don't think this is the right error to raise. The user can't click the button, but they can click the button again, so the user should be able to click the button again.
Should this be a pointer?
I think we need to add the `forward_ssh_agent` option to the `configure` method.
why not just use the current version as the Proto ?
This is a good change. But we need to make sure that we don't allow any URL access if we're not using the VPN tunnel.
This is the only change in this file.
I don't think we need this.
This is not correct. The corner header should only be used if the row header is selected. The corner header should be the row header or the column header.
I don't think we should add a new row for this. The user will have no idea how to use it.
This is not needed, since we already print the `GoPath` in `Env`
I think we can use `min()` to get the first rampup, instead of `stream().max()`
nit: can we make this a single line?
I don't think this will work. `docker network disconnect` is a command.
I think you can remove this line
This is not a good way to do this. It's not a good idea to have a parser in `release` directory, as it's a library that is only meant for internal use and not for internal use.
This is not needed, right?
I think it would be good to have a test that validates the labels are set correctly.
I think we should use a different name here.
I think this should be called something like `show_plan_page?`, since it's returning a boolean.
Why did you move this?
This should probably be `path: str`.
Why is this being removed?
This is not the right way to set the layout direction. It should be done in wx.py. The main frame should have the layout direction of the language.
Why is the `!=` necessary here?
This should not be `finest`.
nit: remove this extra line?
Layout/ExtraSpacing: Unnecessary spacing detected.<br>Layout/SpaceInsideBlockBraces: Space missing inside }.
Should this be `err.Error()`?
Please remove the log
nit: I would prefer to use `fmt.Println`
This was the source of the issue. The `ss` is the destination of the packet. The `self.src` is the destination of the message. The `self.src` is the destination of the message, which is not the source of the message. So this change is correct.
I'm not sure if this is needed. If we don't need it, we can remove it.
I think we can just freeze these arrays.
Why is this public?
I think we can remove this file.
Why are you changing this?
I would prefer to use atomic.Bool and have the channel as a struct field.
Is this a typo?
I'm not sure this is correct. We are creating 5 payments in the first place and then mining it into another block. I think we should keep the 5 blocks in the first place.
This should probably be `with open(statePath, "r+") as f:` to be consistent with the rest of the code. (I'm not sure if this is an issue, but it seems to me like the `with` should be in the `try` block.)
@kravets-levko is there any reason why this validation is removed? I think we should keep it, because we can't do that in the future.
I would call this `read.locality.task.initialize.threads`
I think we can remove this line now.
Why is this assert no longer needed?
Why do we need to change this?
I don't think we want to use the `strnlen_s` here.
This should be `to: from`
Why do we want to call the cleanup function twice? Isn't it possible that the callback will be called twice?
This is the fix, the rest is just cleanup.
This method is useless. The method is already defined on `LegacyFormHelper`
We should add a `console.assert` for this.
Why is this changing to `for (i = 0, name; name = categoryNames[i]; i++)`?
This should be a constant
I don't think this is correct. The regex will match any character, not just a digit.
This is a bit hard to read, can you break the line? I know it's a bit long but it's a bit hard to read
I would use `assertThrows` to check that the error message is correct. The error message is not clear from the assertion itself, but from the assertion message.
I think this function is only used for testing purposes. Can you move it to the test package?
This is not correct. It's like {@link RA.spreadPath|spreadPath}, but preserves object under property path.
I don't think this is the right metric, we should be tracking the ping time when the peer is reachable
I don't think we need to test the `\w` here since we are not checking that `@tester` is an instance.
I think this should be `MintNewBlockWithActionIterator(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any())`.
I'm not a big fan of the return values. I'd much rather have the return values be named `closeFunc`, `Close`, etc.
This file is not needed anymore.
I don't see this file in the PR.
This should probably be in a different package.
I'm not sure we want these to change, but we can leave it to @jackfrancis
This will fail for the private plans. You should add the `private` plan in the `plans` list instead, so that you can remove the `reject`
Can you add a description of these pins, as you did for the `BUTTON`?
This should probably be final, since it's not a final field.
I think you should just remove this.
I think it is better to add the `key` to `__dict__`.
Why is the port added here?
This is a bit of a hack. The string length is always 20.
I don't think we need to pass in desiredUser and desiredRole here. The caller should be able just pass in desiredKeyGen and desiredUID to the function, and then you don't need the extra parameters.
I don't think we need this import anymore
nit: `UnrecognizedEncodingError returns an error for the given request that matches the given encoding, such that`
I think this is the wrong place to do this, the password data is not a password object.
I don't think we need the Trim here.
This should probably be removed.
This change looks wrong.
This function is not used anywhere.
This method should be private
This should not be changed, it is a user-facing message.
Why not just use the exception message as the msg?
I don't think we should change this. It's not correct.
I think you need `storageTarget` here too.
This was a bug, it was testing the same thing as v1beta1
This is the same as `shlobj.SHGetFolderPath(None, os.getenv("SHLObj_SYSTEM32"))` right?
This was a bad rebase, but I think this should be `null`
This is the interface for the flux transform, right? I don't understand why it's needed to be an interface.
this is the same as `self.pretrained = pretrained or init_cfg['checkpoint']`
Why do we need to add this new parameter?
This will be called on every task, right? Is that what we want?
I'm not sure this is the right color for a strong color, it's the same as the default color for a normal color.
I'm not sure if this is the best way to do this.
Why do you change the import order?
I think you can drop the `)` at the end of the line here.
I think this will panic if there is a password but RCLONE_CONFIG_PASS is not set. We should return an error instead of printing the output.
I would add a `@Before` annotation.
Is this check needed?
This is the main change, the rest is just renaming the method.
I think it would be better to have the error as part of the retryable errors.
I think this is wrong. We should be using the fairbank block height, not the epoch number.
@barklund I'm not sure what this means. I'm not sure what the actual phrasing is.
I think this should be in the `scapy.fields` section, not the whole section.
This is not a method.
I think it would be better to have this as a `private static final` variable, since it is not used anywhere else.
This is not the right fix. The `else` is not needed.
I think we should add some doc for this method, since we are adding new method in this class
I'm not really sure about this one. I'd like to understand why we need this change.
I don't think you need this anymore?
I don't think we need this.
nit: I'd move this check before the linkCanResolve check. It's not necessary to check for the dependencies when the links are not resolving
I don't think you need this line.
This is the only line that is causing pylint to fail. It should be removed.
This should be `AlertmanagerConfigDenyList`
I think you need to use `dag_node_comp_ex` here, otherwise it will not compile.
I don't think we need the `_delete_` flag here. We can just delete all the files and then delete the model in `teardown`.
I think we can omit the `omitempty` here.
nit: missing space after `//`.
I'm not sure if this should be `+deploy`? I don't think we have a `.deploy` file for this.
I think we should keep the parameter names.
This interface is only used in the tests, so I think we can remove this
Why remove this?
I think we can use the same name for the column list.
This should probably have a `// Deprecated: Use ReportStat instead.` note.
I'm not sure if this should be included here.
Why are we setting these to zero?
This is a little bit confusing, I would have expected the name to be `SchedPolicyGet` and the return value to be `*sched.SchedPolicy`.
This is a good change, but we should probably use a different URL to avoid confusion.
Please use the same style as above.
Shouldn't we use `smtp.sendgrid.net` here?
This is the only change in this file. The rest are just cleanup.
Should we be using `HttpUtilities.ParseQueryString()` here?
This should probably be `/status`
This is a bit confusing to read, I'd prefer if you put this in a method called `setFeedFilterEnabled`.
Should this be a number or a config value?
This is unused
I think this should be `LocalObjectReference`, not `*corev1.ObjectReference`.
I think it's better to pass the context as a parameter.
This is the only place where I'm not sure about the impact of this change. I think it would be better to add an `else if` to `AddIncompatibleDifference` to check for the `FamilyOrAssembly` case.
I think it's better to use `int` instead of `uint64`.
This is a good change. I'm not 100% sure what this means.
Can you change this to `<p>`?
I don't think this is necessary anymore, as it's imported from `sklearn.utils`
This is a breaking change. We need to keep the old behavior, as we can't change it.
I think we should use `runtime.Version()` here instead.
This should be reverted.
I'm not sure we should have a generic class for this.
I think you can remove the `.h` file.
This is a change in behavior, but I'm not sure if it makes sense. I think the previous version was correct.
This is the only change that is needed, right?
This change is not needed anymore
This method is not used.
I think we should add a docstring to this class to explain what it is.
I think this is the only place that needs to be changed.
I'm not sure this is a good idea. If the content is not there, it will be overwritten by the next line.
I'm wondering if it makes sense to have a method that does this check, e.g. `is_nvda_object(obj)`
nit: I'd prefer to have the import grouped with the other `github` imports (in the same group)
This is a public API change, so it should not be changed.
I'm not sure if this is the best place for this, but it seems like it would be better to have a separate package for this. I think we should have a single place where we could put the sqlite3-related things in there.
Is it worth logging this as a warning? It's not really an error, but a warning.
I think we should use a `String` here instead of a `String`, as the `protocol` is not really a protocol.
This is a breaking change. You should not add a pragma warning for this class.

Align the elements of a hash literal if they span more than one line.<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think we can remove this check, as it will always return false
This is a bit confusing. Why is the password being added as an authorization header?
I'm wondering if this is actually needed, given that `test_test_data_path` is defined as a global variable.
I think this is a bit confusing, maybe we should say "not client date and time based on UTC" or "not client time and time based on the client machine"
This is not correct, the grantee list should be a list of roles that the user has granted
I don't think this is the right way to do it, because we need the `session` object to be destroyed.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is the only thing we need to add to the interface. We can add the `Noop` field in the interface.
Why was this removed?
I think this is a bit of a nit but I think it's a little confusing that we're subtracting the scrollbar width from the footer height here.
I would prefer if we didn't use the interface, but I don't see any other way to do it.
I'm curious, what is the difference in the order of workflow_id and start_time?
This is a temporary workaround until the lock conflict issue is fixed.
I'm not sure why this was changed, but it looks like it was already in the same directory.
I think this is not the right fix. It's not possible to call `beforeChange()` with `null` as a callback.
This is not the client side.
Why is this change needed?
I think we should return an error if the tx is not found, and the error message should be more informative.
I'm a bit worried that we'll get a `ValueError` here if `commonname` is `None` and `commonname` is not a string.
I don't think we should limit this to 10 here.
I would suggest to add a `getTransactionByHash` method in `TransactionStore`.
Can you add a description of the method?
I think this should be `int32_t`
This is a good idea, but it's a bit of a hack. I'd rather we just use the `new_issue_url` helper in the views. It's only used here.
I think this should be `return std::string();` (or `return ""` if the task name is not found).
I don't think we should be changing the URL for the `approve` action, since we don't want to show the user a confirmation link for the `@approve` action.
I think you can remove the _DBM_ field and use the dot11.py layer directly.
This is the default JSON serializer for the search field.
I'm not sure why we need to check for `nil` error. If we don't, it will just return `nil` and the `for` loop will not run.
Why not just use the existing `PartitionSet`?
This file is missing `eslint-env node`
I don't think this message is needed.
Why not just `""` here instead?
I don't see this being called anywhere.
I don't see a reason to have this as a separate command. It seems to me that this command belongs in the wallet module.
I'm not sure if these are the right names. These are not timeouts, they are task timeout and not decision timeout, right?
Why do we need these?
I think we can move this logic into the `toAntreaPeerForCRD` function, since it does exactly the same thing.
This is not a good way to do this. We have to be careful about the fact that we are setting the `Status.State` on the `Status.Desired` and `Status.State` on the `Status` field. We should be setting it on the `Status` field. We should be setting the `Status.Desired` value in the `Status` field and then setting it on the `Status` field in the `Status`.
This should be `false`
I think we can remove `toUpperCamel()`
I think we should use `profile#index` instead of `profile#show` here. I'm not sure how we want to handle the "profile" view.
I'm a bit concerned with this. I think it's fine for now, but I'm wondering if it wouldn't be more consistent with the rest of the code if it were just `when 'guide'` and the other one was `when 'plan'`? (I'm not sure if it's worth it, but it might be more consistent to use `when` everywhere)
"The top artist and similar artist candidate set dataframes..."
I'm not sure if we should be checking the analytics event, but I don't know how to do that.
This is not needed, right?
I think this should be `=== false`?
This assert is now redundant.
I think this is not right. We should always use the short sha
"Cannot add the duplicate file %{fileName}, it already exists"
why is this necessary here?
This should be `res.isCompleted() && res.isWorkflow` right?
This should be `orderPath` to match the other constants
This change is wrong, it should be `@param {import('../dom').PreactElement} dom A DOM node to mutate into the shape of a VNode`
I think you can remove this file now
This should be an object, not an object.
Why is it necessary?
I don't think we need this change. The listViewStyle component is used in the listView.js file.
Please add a newline here.
The previous version was more readable, but I don't see why it's better.
I think this should be private
Why is this interface needed?
I think we can remove this now.
I think this is the wrong way around. You should be querying the `published` table instead of `published_at` and then querying the `recently_published_first` table with `published_at: latest_published_at`
I think this should be an `error` rather than an `error` since it is a programming error.
I think it would be better to check for empty chain in the loop above, rather than checking for empty chain in each Felix.
Why is this needed?
This should be removed.
I don't think this is necessary, but it's a little cleaner to do `self.legend_opts.update(**legend_spec)`
I'm not sure this is the best way to do this. The number of versions is not the number of versions we create, but the number of versions we create. We can't do this if there are multiple versions for the same AMI, but the number of versions we create is not the number of versions we create. I'd rather have a single function that returns an error, and then we can call that from both places, and then we can just check the error to make sure we're not creating an older version of the AMI.
This should be removed.
I'm not sure if this is the best place to put this. The email address is a user's email address, so I don't think we need a domain blacklist. I'd suggest to put it in the `User` model, where it's used.
I think we can just use `newContextWithCLIHeaders` here.
I think this is a bug, because the `curl_easy_setopt` below is called when the file exists, but it's set in the `curl_easy_setopt_file` call.
This is a bit of a hack, but it's not really a problem for this PR.
I think this should be `self.socket`.
Why is this null check necessary?
I'm not sure if this is the right way to check for `role` attribute. I think we need to add a new attribute for this.
I don't think we need this anymore
nit: remove this line
I'm not sure this is needed.
Why this change?
Why do we need to clamp?
Why did this need to change?
I'm wondering if we could use a `StringBuilder` here.
I don't think this is used.
nit: typo in "imperlemenation"
I don't think we should be returning here. If we don't, we'll get an error.
This is a bit confusing to me. Why not just pass `c.MetricsProcessors` to the `NewAccumulator`?
I don't think this change is correct, the copyright year should stay at 2016
This should be a `#{link}`
Why do this in a conditional?
I think this is the only place that we should check for data, and we should check that the result has data.
I think this should be called `Buildspec`
This line is not needed anymore.
This should be the context passed to BlockServer.Shutdown().
I'm not a fan of the name, but I can't think of a better one.
This is a bit confusing. Maybe something like `NotRunningInboundErrorForService`?
This is a bit confusing, I think it would be better to have `ctu-clang6` and `xtu-clang5`.
This was the default value, not used in the node config.
Can you please move this to the `validSetup` variable?
This will also raise a `CommandError` if the user doesn't exist.
I'm not sure this is a good idea. The `Binary` class is already a `MongooseBuffer`. I think we should just return `new MongooseBuffer(value.value(true) || value, [this.path, doc]);`
Why did you remove this?
continuation line under-indented for visual indent
I'm not a fan of the word "load" in the description. Maybe something more descriptive like `How often you can interact with your content, and how fast your content loads.`?
I don't think you should change this, but I think the `fmt.Sprintf` is better than `fmt.Sprintf`
I think we should check the payment method here as well, since it is not being updated.
I don't think this should be done here. This is a local file system path.
nit: `Files.copy(from, out);` is not necessary.
This is a bit weird, but the test environment is not the same.
Why is this needed?
This is a bit confusing. I would have expected `cli.getOptionValue("clusters")` to always be set, but it's not obvious from the code. Maybe we can change it to `cli.getOptionValue("clusters")`? Or just `getOptionValue("clusters")`?
This is not correct. If the data.bo.size != p1->data.bo.size, it should be false.
I think we need a default value here.
Filecoin is a library that is not a library.
I think we should rename this to `_widget` for consistency.
This file should be kept.
Is it necessary to include this header?
I think this is not used.
This change seems unrelated. Can we revert this?
Can we use a more descriptive name?
This is a bit of a misnomer. The function is called `checkForAtomicOperators`, but the function is called `checkForAtomicOperators`. Maybe `isAtomicOperators`?
This is the only change that should be in this commit.
I think it is not used.
@jeremyjordan I think we should just rescue the exception here, and then just let it bubble up.
Why do we need to set this to TRUE? I think it's a bug. The default value is DF_ON, so we should set it to false. If the user sets this value, they will be forced to set it to FALSE.
This is the main change. The rest is just logging.
This should be `kbfsConfigNameTemp`
Line is too long. [81/80]
nit: remove this empty line?
I think this will cause a memory leak, since `c` is not set.
This should not happen. The window state should always be the one that was set before fullscreen.
I'm not sure what to do with it, but I think it would be better to add `@ManyToOne` to the `DataFile`, and then add the `DataFile` as a `ManyToMany` to `DataFile` and `DataFileFile` in the `DataFileMetadata`.
This should be deleted, right?
This is a bit confusing. I would call it `LogDriver` instead of `LogDriver`.
This is not correct. The line is the first line of the file that matches the line number.
Why do we need this struct here?
I don't think this is needed.
I would add a `.` after `string`, as that is the standard way for string literals.
This change is not needed anymore.
I don't understand why you need a separate channel for this?
This is the only place we can throw this, right?
This method should be in the `HistoryRemovalTimeProvider` instead.
This is a bit of a hack to make the template lazy loading, and it's a little weird.
This is not the right place for this check, because it will fail if there is a typo in the setence name (and the sentence has no paras).
I think we need to keep this.
Why is this needed if it is already handled by the `print_command` method?
I think this will cause a deadlock if there's an error
Why did this change?
I think we can remove the switch case now
I don't think this is needed anymore
This is a bit weird.
I think this will be better done in the `NewManager` instead.
This is not a change of functionality, it's just a refactor.
I would suggest to use a builder here instead.
This is the actual fix.
I don't think we need to change this.
I think this is unused?
This is not a good solution. We should probably do something about the symlinking, not just fix the slashes.
I think we can remove the aria-label here.
I'm curious about the reason for these changes.
Please change this to `add_undo: Whether to add the undo marker to the end of the close. Default: True`.
This should be `marshalers.PushBackNamed(protocol.NewHandler(&protocol.PayloadMarshal{Marshalers: marshalers, }).BuildHandler)`
This is a bug. The key is released when the window is closed, but the key is pressed while the user is trying to play a playable playlist, and the keyboard is still pressed. The keyboard is completely ignored, and the navigation will be handled by the keyboard.
This is not necessary, the DOM will be recreated every time the prop changes. The property should be updated only if the value changed.
I think this file should have a `.` at the end of the line.
I'm wondering whether we should use a default here, or just make the default `None` (and then use the `_get_value_transformer` function).
This should probably be called `rowKey`
Why is this changed?
This line should be `__version__ = "1.5.0"`.
This was the bug.
I'm not sure if it's a good idea to change the name of the file.
I think we can remove the `.peek()` here.
This is not needed.
This is unused.
check		Check metadata objects and their associated blocks for errors
`InputBuf_T` is a `lbiann::cv_image_type`, so you can use `InputBuf_T::T(1)` here instead of `InputBuf_T::T(1)`
Should we rename this to `KindECSApp`?
I don't think we need this if statement.
I think we should keep this import as is, it's not needed
nit: can we change this to `KeyNodeHostname`
I think this should be in a separate block
Which case is this?
I don't think we need this function.
I'm not sure if we want to change the public interface, but this change seems to be a breaking change.
This is a very bad idea. You should be able to use `img_meta.update()` to modify `img_metas`.
Why did you change the access modifiers?
Please use the full path
I'm not sure what this means. I think this is the only valid use case for this. I think it would be more clear to just have the `Returns` field be a list of strings, and then the `IsPrivate ` field be a bool.
This should be a `getInputFile(Path)`
This is a breaking change, right?
This file is missing `#include <string.h>` and `<string.hpp>`
This import should be grouped with the other iotex imports.
I don't see any usage of this method. Is it used anywhere?
I think this should be `os.MkdirAll(fullPathDir, 0755)`
This package doesn't seem to be used.
I'm not sure about this one. I think we should set `passcodeLengthKnown` only when `passcodeChangeRequired` is false. If the passcode length was changed and we were using the old one, we need to update the `passcodeLength` and `passcodeChangeRequired`. Otherwise, we need to set the `passcodeLength` and `passcodeChangeRequired` again when the new one is created.
These imports are not used anymore.
I think we should add the `genesisAddress` here.
Why is this necessary?
I'm not sure we should be returning pagination data for a single page? I think we should just return the whole page.
This is not correct. It should be the function that is passed to this function that it's called with.
I'm not a huge fan of this. I'd rather see a separate controller or something.
using namespace std
I think this will fail if `is_cygwin` is `nil`
Why is this needed? The pipe writer should already have a reference to the writer.
This is a behavior change, right?
I think we can just call this "Name" since the name is a little generic.
This will break the UI, because it's not a plugin.
This was a bug.
Why is the error message changed here?
Why do we need to do this? Can't we just use the cached result?
Please remove this line.
This is the only place where `flood_block` is called, so I think it should be removed from the `else` block.
Why are we changing this from `Error` to `throw err`? I think this is the correct way of doing things.
I think you can remove this `except` clause.
I don't think this will work, because the attribute value of `a` is not `null` or `undefined` (which is the case when the `proccode` attribute is `null`)
This seems like a good idea to me. I think we should also set the `sla_timeout` and `sla_max_age` options for this execution, and the `flow_id` and `flow_type` for this flow.
I think we need to add this to `EnsurePoliciesAttached()`
I think this is still used in the code.
Why do you need this change?
This is not a generic return type.
I don't think this should be static
I think this should be `THEN`?
I'm not sure this is correct. If you have an hadoop table, but have a hive table, it will be loaded by the `HadoopCatalog`.
I don't think we need to add this. We can just use a regular file.

Why is this change needed?
I think this should be configurable, not hardcoded
This should be in the `if 'basicauth' in settings:` block, right?
why remove this? it seems like it was added by accident
This should be `config->xwayland = config->xwayland_lazy = true;`.
I think we need to remove this import.
I think this is the only change that should go into this file.
I'm not a fan of the return value of this function, since it's a bit of a misnomer. It's not really a function that can return error but a function that can return an error. I would rather have this be a function that returns the error and the caller can check if the error is not nil and return the error if it is.
nit: can you make this `nw_tos` a const?
Why do you need to change the default value of `cxSmiles`?
I'm not sure this is the correct fix.
Why are these readonly?
This change is not needed as it is not part of the PR.
This should be GetOutboundIP
This file is not needed anymore.
I don't see why this is a new value, it's not used.
return Promise.resolve();
I think this is a typo, `Raul` should be `IOTX`
This is a breaking change. The `WaitWatcher` method is still used by `NewHarness`. I think we can just remove it from the interface and the test.
Can we remove this line?
I'm wondering if it's worth to make the `Notification.add()` method synchronized?
I'm not sure if this is a good idea. I would rather see this in the controller, but I think it's better for now.
This is not correct. It should not be "ligado". It is a data type.
I think we should also test that `series.frame` is the same as `frame`.
This is not used anymore.
This is a very weird name. It seems like it's a `CloseShardRequest`, but it's not actually a request. Maybe `CloseShardRequest` would be a better name?
I think this is not needed.
I'm wondering if this should be a `Warn` level log?
This is a bit of a nitpick, but it's a bit confusing to have `py_` prefix in these mappings.
Why was this test removed?
This interface seems to be unused.
Why not `r.base._vnode = vnode._component = null;`?

This is the same check as the one in the `AlbumArtistItems` check, so I think it should be `if (options.openArtist !== false && item.AlbumArtistItems && item.AlbumArtistItems.length) {`
Is this just a temporary measure, or is this a leftover?
I'm not sure this is needed.
This should be `body.extend(self._get_selenium_options() + self._get_firefox_profile() + self._get_selenium_webdriver() + [self._get_selenium_webdriver()])`. The other option is to add the profile to the body.
This is the only change that I'm concerned about, the rest is just formatting.
Layout/EmptyLines: Extra blank line detected.
I think this can be removed.
I think it would be better to use the same constant as `UART_ADC_PIN` and add a new one `UART_ADC_PIN` with `0x00` for the `ADC0`, `1`, `2`, `3`, `4`, `5` pins.
I don't think we want to do this. We should only be doing this for the root message.
This should be `||` instead of `||`.
This is not needed.
I don't see any usings for these.
I don't see this test being run anywhere, can you explain?
I think we should be able to use `os.TempDir()` here
This seems like an odd place for this. Can you move it to the `setClusterDeploymentConditions` func?
This is not needed. The `app.Name()` will return the current application name.
I'm not convinced that this should be in a separate commit.
This is the main change of the PR.
nit: "just" is a bit redundant here
This should be moved into a `switch` statement above
This will break the translation. You can use the string `admin.lookup.messages.delete_singular`.

Is this really necessary?
I don't think we need this, as we don't want people to be able to change their image url.
This should be `BugfixDeflater_JDK8252739.createDeflaterInstance(level, true, dictLength)`
This is a public method so I don't think this change is needed
this change is useless
Don't put your code logic in `main()` function. Use `main()` only for the driver code
This is a breaking change, as we are not using this method anymore.
I don't think this is right.
I would suggest using `build_tracking_url(self, logs_output)`
I think it's better to remove this function and just use `canSeeInvisibility()` in the code below.
I would prefer to use a `bool` instead of a `string` for the `Replace`
nit: can we make this more explicit, e.g. `GetLatestEvents`
I think this is not needed anymore.
Why is this removed?
This is a little confusing to me. Why do you have to do this if you don't do this?
This should be a separate PR.
I don't see why we would need to do this. We should just use `dcontext_t *dcontext = get_thread_private_dcontext();`, and we can just use `NULL` in the `doing_detach` case.
This should be reverted
I think we should keep the `KeyAlgorithm` error message here, as the user will be able to set it
Please remove this extra blank line here.
I think you can just do `new SourcePropertyExpression("tag_3002_col_2", "tag_3002")`
I think you need to change this to `\n` to match the style of the rest of the file.
I don't think this is used.
This is a breaking change, we can't change the signature of the component.
I think it would be better to use `!= 0`.
This is a bit weird. Why do we need to reset these windows count?
Why did you remove the `extends` here?
This change is unrelated, but it was a bad rebase.
This is the wrong way around. The `active?` method returns `false` if the `deactivated_on` value is `nil`. The `active?` method returns `true` if the deactivated_on value is `nil`.
I think this should be `return environmentVarNames((OptionSpec) argSpec).map(environment::get).filter(Objects::nonNull);`
This is wrong. You need to use the version of the message you received from the server instead.
I think these should be moved to the `proto/` directory.
This is not the right fix, we need to make sure that the title is not html safe
I don't see how this change can help. The subject should not be shown in message view mode. The message view will not show the subject in message header mode.
This was the main issue.
I'm not sure if this is the best place for this, but it's probably the place where we want the patch to be generated.
I think it would be better to use `finest` instead of `info`
I think this is a bug in the code that was reported by the build. The `DCHECK` is here to check that the limit is not evaluated, but the `DCHECK` should be in the `else`.
I think we should keep the `getImage()` method, but add a new `getDescription()` method to the interface that takes the description.
I'm not sure this is a good approach to catching exceptions here, since we are not doing any validation on the list of effects that are being executed. I think we should just catch all exceptions and throw the appropriate error.
I don't think we should remove these constants.
This should probably be done in the video-only mode, since we're not using it for anything else.
I'm not sure we should add a unique index on slug. I don't think it's a good idea to add a unique index on slug.
This is the actual fix.
I think we can just use `err = multierr.Append(err, t.Stop())` here.
I think we can remove this line.
Why do we need this?
@kuzmany can you confirm that this is correct?
I think we can just remove the `uint64` here and use the same value for `claimFromRewardingFundGasPerByte`.
This is the only real change in this PR. The rest is just formatting changes.
This is a bit of a misnomer. It is a `BlockTimer` that is used to trigger the block height change.
I would rename this to something like `compareAndSwapValue` and add a `const` modifier
I think it would be better to have this in a separate test case.
I think this can be simplified a lot: o = soup == null ? null : soup.opt(...)
This is not the same as the previous code. It is the same thing.
I think we should add a check to ensure the request is a success.
This change looks like it's not needed.
I think this should be `VUID-vkGetQueryPoolResults-flags-02828`.
I'm not sure why this was changed. It's a bit odd to have this in the IDb.
I think we can remove this function now, since it's not needed anymore
I think this should be `IsAppInsightKey` to match the other constant
This is a bit confusing, as it is not a "time key" and "log key" but a "log key format".
I think you can just remove this whole `if` statement
I'm not sure what the convention is for the variable name here but I don't have a better suggestion.
This is a bug, the request is not used.
I don't think this is necessary anymore, right?
I'm not sure this will be the best place to put this. I think this is a good place to put the logic for all kinds of shapes, but I don't think this is the right place.
This looks like a typo?
I think we should remove the code that was added for the old format.
I would name this `EachPeer`, because it is a callback that is called with a peer and its PO.
This is the actual fix for #3022.
I don't think this is needed.
Should we move these to `./selectors.js`?
This seems a little odd. What if we just use the string concatenation?
This change seems unrelated to the PR. Can you please revert this?
I'm not a fan of the name "ListMyRepos". It's not really list user repos.
I don't think we should be using the `*path` prefix here.
This should be removed, the `show_filter` option is already there.
I think we should use the same name for this method, `StopAgentProcesses` or `StopStatsAgentProcesses`
This is a bit of an odd place to put this check. I would prefer if we kept it in the header file, but not a big deal.
I think we can remove this line
Use the new Ruby 1.9 hash syntax.<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Is it possible to have a space between '=' and '=' in a URL?
I think it's better to use `!client.getWorldType().isDeadman()` instead.
I don't think this change is needed
This should be `InterfaceExclude string`
Is this a change in behavior?
Why not just return `obj`?
Why this change?
Why do you use quotes here, but not in the other commands?
I'm not sure if it's safe to assume that `HttpHeaderNames.TraceId` will always be present. I think we can just check if `HttpHeaderNames.TraceId` exists and throw if not. If not, we should add a `[NotNullWhen(true)]`.
This can be removed
This is a bug fix, the total dotshielding should be calculated based on the dotshielding of the item and aabonus.
I think this should go in `Scorer` instead, since it's only used by `ValueSource`.
Why do you pass in the finalized header here?
I think it would be better if the disk name was just `disk-importer`
I think we should use the same logic as in `Column.copy` (and remove `copy` from `Column`).
This is not used.
Why this change?
I don't think this should be in the options. It's not really the transactor options.
I think we should also support removing a file from a snapshot.
I'm not sure if it makes sense to use null here, if we are using the default sort order, it will be used.
These numbers seem to be the same as the ones in the alarm.
I think this was intentional.
I'm not sure about this change. It seems to be a change in behavior.
This is a bit hard to follow. Can we have a helper that takes a field name and returns it if valid?
Should we add `validates :status, presence: true, inclusion: {in: Approval::STATUSES}`?
I don't understand why we need to do this?
Why is this needed?
why did you change the names here? I think it is better to keep them as they are.
I think we can remove this.
I don't think this is necessary.
I think we can use `c.leaf.remote.Hub` here.
Why remove this?
This is not a tutorial
This should be in `dao_test.go`, not in the test file.
This will not work for `/dev/null`.
this is the only thing that's not really a quit channel, it's the main goroutine which will quit the test
Why do we have to set this to null?
I'm not sure if this should be a separate method. It's only used in the controller and it's not a controller action. It should be a controller action, not a model action.
This is a good example of how to use the new sexp_find method.
This change is not needed
This file is not used anymore. I think we can remove this.
This is a public constructor, so we should not change this
This file is not used anymore
I think you can remove this.
This method is not used anywhere
I think we should remove this line, since we are not using it anymore.
This is a duplicate of `default` above.
I think this should be removed.
This is now handled in the `Blacklight` module.
Why is this change necessary?
I think this will break some tests.
Why is this needed?
I'm not sure if this is the best place to add it. I think it should be in the `transport` package, not `transport.go`
I think we should close the response body in the `call` method, since we don't want to leak memory if it is empty.
This is the only change in this file, right?
I don't think we should have the default value here.
I'm not sure if I like the idea of removing the ActivitySourceAdapter. I think that's a better way to do this.
I'm not sure this is correct. It's a reference to a non-NULL GDestroyNotify.
nit: I think this should be in `pkg/dns_test.go` and then we don't need to define these here.
Please don't use wildcard imports
This test was wrong, it should be `build_stubbed(:status_finder)` instead
Should this be an error?
I think it would be good to have a warning log here.
I think we should remove this.
I think you should add this in the list below, as well as the other ones.
why not just use `status.Error` ?
This is the only change in this PR. The rest is just cleanup.
This is not a service account
I think it would make sense to add a type for the `new_int` parameter here, and add a `__str__` method for the `DoSomething` class.
This should be `cmapi.UsageDigitalSignature`
This is not necessary.
This is a bug fix, right?
Why did you change the check from checking for space exist to checking for space not found? It seems like the previous version is more robust and is more correct.
This should be in the same block as `github.com/ethereum/go-ethereum/rpc`
E231 missing whitespace after ','
This is the only real change in this file, the rest is just formatting.
I think we need to change the signature to return `[]V4TrieEntry` instead of `[]V4TrieEntry`.
I'm wondering if we should just pass the `sigValidator` into this function and not create it every time we want to use it?
I think this is a bug, we need to update the hash in the controller, not here.
I think we should just remove the constructor and the property. The constructor should be removed.
Shouldn't we check `flowFinished` before we call `isKilled`?
I think this is a little too specific. I'd rather see it be a struct with all of the retry settings and a struct with the defaults.
I think we should use a `<a>` here instead of a `<td>`
why is this internal?
This file should be reverted.
This is the only place where the SVG element can be used. It's not a problem, but we should be able to remove it.
I don't think this is correct. The `bearing_before` should be `0`. The `bearing_after` should not be `0`.
I think we should not set this flag here, as it will be overwritten by the next line.
I don't think you need to `freeze` this.
I think you need to sort aps here.
I don't think this route should be here. The API should not know about repos.
This change is not related to the rest of the PR.
I think we should set this to false in `I2CPlugin::Init()` instead. It will make the default value for the settings more clear and also makes it clearer that the default is not to set it to true in the plugin.
This should use `self.scol` instead of `data._kdf.data_scols[0]`
I think you can use `current_user.administerable_by?(plan)` here.
I think we should use the `money` library here. We're using it in a lot of places.
I'm not sure about this change. I think it's better to use `posNext` here. The `if` below will return `null` if `posNext` is `-1`.
I would suggest to use strict comparison
This should be lowercase.
This is the only change I can see. I think we can remove this line and the line above.
I don't like this, it's a very common pattern to require hyperx in the file, but we can leave this as-is.
nit: I think this is a bit redundant since the `Throws` callback is only called when the test fails
This is a little bit confusing, I would have expected `config->http_proxy = flb_strdup("http://localhost:9092");` to do the job.
Why do you need this?
I think we should rename this file as well. I think the file is called "http.go" now.
We don't need this.
I'm not sure if this should be in the common library. I'd rather have it as a constant in the common library, and use it here instead of the constants.
I think this is missing the check that the `machine_image_uri` is set.
This should be a POST, not a GET
nit: `Unsupported` -> `Unsupported encoding`
I'm not sure if it's a good idea to add this parameter to the `ParamType`. I think it should be a `luigi.Parameter` object. The `ParamType` is not a `ParamType` object, so it should be fine.
This is not needed anymore
I don't think this works. I would have thought it would just run the `airline_demo` command.
This is a regression test, we need to make sure that we don't break existing users
I think we need a test for `forced=False` as well.
Please add a blank line before and after this block
This is a bit weird, but I can't think of a better way to handle it
I'm not sure if it's safe to change the type of `maxSessionCount`, as it's not a `long`.
I think you can just pass in `testCtx` directly.
I think we should move this to the `log` package.
Why is stackdriver_conf.h included here?
This is not correct, the address of the exception_address is the exception address that is causing this fault. The exception_address should be passed as an arg to this function.
I think we should remove this class from the composer.json.
Why remove the groupId argument? Is it used somewhere else?
#define ONEAPI_DAL_DATA_PARALLEL  compute
This should be `isOwner: false`, not `isFirstAdmin` :)
Why is it `typ` and not just `type`?
This test is now failing.
I don't see a need for this to be a separate struct. Can we just have a `UnlockedDto` struct?
`--ap` -> `--class-wise`
I would use `!== null` instead
I'm not sure about this change. The inputFiles map is only used for data scan, so it's not necessary to call this method.
I think this should be in the `scripts` directory, since it is used for the `cliquet` and the `pserve` scripts.
This change is not related.
nit: move to third-party imports.
This is a breaking change, you should not modify the existing public API. Please create a new overload and add the new param to the existing one.
Should this be `override`?
I think you need to update `deactivated_on` here
>!p.IsReadOnly [](start = 51, length = 14) Is this change necessary?
This file is not used anymore, so I removed it.
I think this needs to be a `~internal~ecs~pause` to match what is in the `docker.io/google_containers/pause` image.
I'm not sure about this one. It seems to me that we can't just remove the `Process` instance. I think it would be better if we could keep the `Process` instance around and just set the flag to `null`.
Nit: I think it's more readable if we use `softmax_axis_ + 1` instead of `this->layer_param_.softmax_param().axis()`
This should be a separate patch.
Hi! I've found a possible matching string that has already been translated **18** times: `translate("ListPaging of %s records", {recordsEnd}),` *ES Score: 8* Help me improve these suggestions: react with :thumbsdown: if the suggestion doesn't make any sense, or with :thumbsup: if it's a particularly good one (even if not implemented).
This is a bit of a misnomer: `inplace=True` is not a valid argument for `fillna`, but `fillna` is a required argument.
I think you can remove this
This is a bit weird. We are flushing here, but not in the sync report. Is that what we want?
I think this is not needed, as the URL is already urlencoded.
Why are these lines needed?
This is the main fix.
I think this can be `StackTraceUsage |= usesStackTrace.StackTraceUsage`
Why was this test removed?
Unnecessary spacing detected.
I don't see any references to these in the test.
This is not the right fix. It will not work with `unicode`, it will be converted to `str`. I suggest using `six.text_type` here.

This is the actual bugfix, the rest is just refactoring to fix it.
I don't think we need this.
I think this is a lint error
I don't think this should be a warning. It's an info level log and not a warning, and I don't think it's a normal failure. I'd rather log a warning than an info.
Why is this removed?

I don't see where we use the options
`->fetchOne(FetchMode::FETCH_ASSOC)` is more idiomatic.
This should probably go into the `auth.js` file, as it's not a JS file
This is the only place we need this.
Why not just `none`?
nit: can you remove the empty line?
I'm not sure if this is the best place for this, but I think it's fine for now.
I don't think we need this anymore, since we have the `L1StandardBridgeAddress`
I don't think we need the host tags key here, since we're already setting the host tags above.
I don't think this is correct, it will return all sessions, not only the first.
I think we should use `css!jellyfin-noto` here instead, as we are not using the `css` module.
Why do we need this?
Line is too long. [83/80]
This is a bit weird, why not just set it to `kubernetes.io/os` ?
This is a breaking change.
I don't think it's a good idea to call `init` in a function that's only used once, it's a bad idea to have a function in a global scope.
I think it would be better if we used `self.execute(command, {"windowHandle": "current"})` here, instead of passing `command` to the command.
I'm not sure if this is the best place to put this. I think it should be in the `if (!isHydrating)` block below, and if it is, it should probably be done before the `if (!isHydrating)` check.
This is a bit confusing. The option name is `--modulepath=foo` and the option is `--modulepath=bar`. I'd suggest renaming the option to `--module-path` or `--module`
I think this should be a pointer to a list of subnets.
I think it would be better to have a single migration object for each codeVersion, instead of having two separate objects for each.
I think it is better to have a config option for this value.
I'm not sure if this is a good idea. The checksum addresses are not always valid.
:ok: This change will be queued for retranslation. We'll use our existing translations in the meantime.
This is a breaking change.
This should be a separate PR.
This is not needed as the classifications are associated with each other.
Why was this changed?
Expected 0 spaces after IF keyword; 1 found
This is the only part that needs to change. I think it's fine to leave it as is, but I'm not sure if it's the correct way of doing it.
Is this a drive-by fix or a fix for something else?
This was a bug
`if p.len is not None and p.value_size is not None`
I'm a little confused about this, why do we need both?
This should be `if`ed.
I'm wondering whether it would be better if the `castv1alpha1` package just imported the `v1` package. That way the code is more clear and the code is easier to understand.
I think this is a bit confusing, as it's not really a map errors.
This is the only change that I'm not sure is necessary. I don't think this should be changed.
This is the fix.
Please add an empty line after this one
I think this was a mistake. `RemoteSpanContextFromContext` was used to generate `ota` spans.
I think it should be `match_low_quality` to match with `match_wrt_candidates`.
I don't think we need to add a new parameter here. We can just call `NewServer(cfg)`, and we will get rid of `config.ControlConfig`
Layout/IndentHash: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
This needs to be updated.
I'm not sure this should be a flag. It seems that the `afterAutofill` hook is called only when the original `fillData` has been changed.
I think this is not used.
I think it's a good idea to add a check for the presence of a locator.
This is a temporary debugging code that needs to be removed.
I'm not sure this is the right approach. I think we should just retry in the background. If the request fails, we will be retrying the entire export, which is a little bit confusing to users.
This should probably be `COPILOT_CLI_ENVIRONMENT_NAME`
I don't see a test where the host name is not a valid one?
This is a bit confusing. I think it should be `0 and dep_status = 3`, and the `OR` should be `OR`.
This should be removed.
I think we should use `Security.Instance.DdlibWafVersion?.ToString()` here.
I think we can remove this line.
I think this is not necessary since the call to `FreeConsole` is already guarded by the same condition.
This is not a link, it's a reference.
This will be `undefined` if `item.RunTimeTicks` isn't set.
nit: `new_config = param`?
This is a good change, but I'm not sure how I feel about this syntax change. I think we should keep it.
This should be `GetHiveNamespace`
I think you need to remove the sleep here.
I think we can remove this `if` block.
Why do we change this?
I'm not sure if we should add a new sitemap middleware.
nit: import formatting.
This is not needed, we have the module name already in the `name` property of the module object.
I think it would be better if these were named as "ITEM_AMULET_OF_FURY_OR", since it is not a material. Also it is a bit weird to have the same name in two places.
This is a bit weird to me. Why not just make the host factory an argument to the constructor?
Can we use `this.format` here and below?
This is not a valid language. Please check if the user has configured it to be a valid language.
Why change this?
This is not true.
Line is too long. [86/80]
I think you can remove this line.
I think we should use the `[Trait]` attribute instead of `Trait("RunOnWindows", "True")` to ensure we have the same behavior.
I don't understand why you have to add these functions.
Is this the correct way to handle this? I'm not sure if this is the right way to handle windows hosts.
Please rename `summaryProductFragment` to something more descriptive like `summaryProductFragmentFragment`.
I think we can remove this from the API struct as well?
I don't think we should do this in the `finally` block. If the host is not pe, we should just log the exception.
I think we need to use `dal::detail::int64_cast` here.
I think we should add a `@Config` annotation to the parameters.
I think we should add a new overload here that accepts `AddTxResult`
I think we should do it in `toUnderscore` as well.
I don't think this is correct. The `ArrayType` constructor is supposed to be able to take a `Type` as its first argument.
I don't think you should be setting this here.
I think we should be consistent and call this `hiveutil-created`
This is the same as the `rescue`. I don't think we need to add this here. We should just remove it.
I think the `snippet-start` is redundant.
I think you need to check the returned error here, if it's non-nil then `err` will be `nil`
This is the same as the controller above, but with the `if` statement you can just do `unless message.blank?`
This should be `this.toolbox_ = this.options.toolbox;` to avoid a crash if the toolbox isn't available.
@jtkech is there a reason why we are not using `ConditionIsAlwaysTrueOrFalse` here?
Why not just `dbConnection()`?
I think we can just use the `image_path` method here.
I think this should be `always('')` instead of `always('')` since it is the default value.
This struct is not needed, you can use `of.PolicyRule` instead
I'm not sure about these two functions, but I'm not sure.
I think it is worth to have a test for this case.
this is the actual fix.
I think we should not change the reward message. The reward is not a "ticket" and it's not the total reward.
I'm not sure if we want to keep these in order. I think they are the right order to be in, but I don't know if there are other places we should be sorting them, or if we should sort the directives by their name.

This seems to be the only change in this file. The rest are just whitespace changes and the rest are just whitespace cleanup
This is a very long time, maybe we can set it as a constant.
why is this needed?
can we add an issue for this TODO
This class should be in the `src/main` directory. We don't want to use `com.netflix` in the code base.
I think this is not needed.
I don't see this used anywhere
I think we can remove these two lines.
Why is this change needed?
I'm not sure if this should be in the `Pending` module.
I don't think we need this field, as the status already contains this information.
Why not use the `win32` version instead? It would make the code cleaner and easier to maintain.
I think this should be a `Warning`.
This will be `handle` for W3C. Is this intended?
@shanghuagao, I am not sure if I should use `pretrained` here, as it is a model in which the model is trained.
Shouldn't these constants be in the `pagespeedWidget` file?
This was a bug.
Should this be `blockNum`?
I'm not a fan of importing the package in the main package, as it is a public package. I'd prefer to see this package in the `pkg/agent` package, but I don't have a strong opinion on that.
This is not needed anymore.
This is a bit hacky, we should probably have a `NewTickerWithC` function that does the same thing
Why is this needed?
I think it's better to leave it as-is, and add a FIXME here.
Please don't change imports
Why do we need to check this again?
`-h` is not a valid command, it's a flag.
This is the path to the initial package.
This is not used.
Is it correct to add XSP_SZ here?
I think this is not needed
I think this should be a noop, since it's the default behavior.
I don' think you need this line.
I think this should be `packaging.version`
I'm not sure if we should remove the `\b` from this regex. It's not necessary to match `\s*`.
@jessesuen @jessesuen I am not sure if we should add another field to the security api object. We can add this field to `secv1alpha1.Policy` and then remove this field.
I would suggest to use a `uint64_t` for `evloop_latency_ms`, as it is more precise.
I'm a bit confused about this change. Why is it necessary?
Why do you need to do this?
Why do we need this interface?
This is not necessary, since `d.receivedPeers` is a map.
I'm not sure if this `<p>` is needed.
This is a bit weird, but it's not a big deal.
This should be `fmtJobInitTypeHelp = fmt.Sprintf(`A %s is a task which can be programmatically run, either on a schedule or via service code in response to events.`)
I think this should remain
I think this should be `window.setWindowState(window._state_before_fullscreen & ~Qt.WindowFullScreen)`
Why is this change necessary?
Why not `flatbuffers::offset_t`?
I think we should just remove this line and let the default behavior be the same.
I think this should be `doc.hello && !doc.hello.isMaster` to match the `doc.hello` case above
This link doesn't exist in the `#documents` view?
I'm wondering if it would be better to have a function for this, e.g. `CreateObjectWithPropertiesKHR`.
This is a bit confusing, maybe rename to `IsDockerEngineRunning`?
Why is this necessary?
This function should be named `GetBuffer`
Why change the name?
Is this method used anywhere?
This should be `<lib/ssl/Init.h>`
I don't think we should be doing this. If we are doing this, it's not going to be correct. We should be doing this for all SVG elements.
I think we can remove this method.
I'm not a fan of this name - it's not a context, it's a context, it's a function that returns a context
This is not necessary, as the `Account::Access` class will handle this automatically.
I'm wondering if we should have an option for this to be less than 0, or maybe even less than 1, since we're not using this value at all?
Should we also add a check for `o.maxp > 0 && o.maxp > 0 && batchSize > o.maxp`?
This is an internal status.
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
This change is unnecessary.
I think we can just remove the entire file, since we're not using it anymore.

Why are these logs being removed?
I think we can remove the `DefaultErrorMessage` string from the `globalize.js`
I don't see this function used anywhere.
I'm not sure if we should add this to `calculateTCAttachPoint` or to `calculateTCAttachPoints`?
I think we should keep the `<link>` tag.
I think this is the only change needed. The `getRangeFromJournal` method is supposed to be used to grab the range from the journal, but it doesn't look like it's doing anything.
I'm not a big fan of this timeout. I'd rather see us set the timeout explicitly in the test.
This is the only change in this file, the rest is whitespace.
This function should be renamed to something like `collect_mlvl_tensor_list`, since it is only used in the `torch.stack` module.
This is a test for the `__a__` attribute, not the `b()` method. I think it would be better to have a separate class for this, and use `self.__a__ = None` to make the test more robust.
I think we can remove this argument.
Why is this change needed?
I think this should be `form-group form-group--secondary`
I think we should add a default value here, like `false`
Please don't use wildcard imports, they are only needed to make the build fail.
I think we should check if the request is `OPTIONS` or `HEAD` instead of checking if `OPTIONS` is the first method.
I'm not sure if we should do this, but I think it's a little weird to have a hostname in a node.
I think we should use `(array) $this->config` here.
I'm not sure what this stub is supposed to do, but I can't find it anywhere.
I don't think we need to add this class, we could just use the `NotificationContent` class in the `NotificationService` and remove the `NotificationHolder` and `NotificationService.notify`
Don't use star imports
`Candidates` is a bit ambiguous, what about `CandidatesByHeight`?
I think it's a bit confusing that we are using `loadbalanced` in the first place.
This is not needed, since it's a runtime dependency
Why remove this?
This is a breaking change for existing users, right?
Why is this change needed?
This is a breaking change for existing users. Can you add a deprecation warning here?
Why are we removing this check?
I don't know how I feel about the blank check.
I think we should just remove this line, and let the deprecation_warning raise an exception. The user can still use `PowerShell 2` and `PowerShell 2` in their application.
This is a breaking change, we should probably make this change in a separate PR
I'm not sure we want this to be an error. If it's an error, we want to log it. If we're going through to Favorites, we should return the error and not log it.
I think we need to change the type of rowCount in this file.
Should we check for `http.StatusNotFound` instead?
Should this be an error? If so, I think we should log it.
This is not necessary, since you already have a user association.
nit: can we add a `// Deprecated` tag here?
nit: I think we should mention that these metrics are only used for the `WriteRange` and `NewRangeWriter` methods, so that users can see what they're doing.
Why do we need this cast?
this is the fix
Why not just `if (p_jmsg["compress_method"] != NULL)`.
I think this should be `executablePath.startsWith(getContainersPath()`
I don't think you need to add this here. You can just use `resource.register`.

I think this is not necessary, as `time.time()` returns a float.
This is a bit confusing, since the client can't have any colors.
I think this is not needed
This is the same as `path.startsWith("/")`
I think this is not used anywhere?
I don't think we need this.
This is not needed, as it's the same as the check for `allowConnectingCards` below.
I'm not sure if this is correct. The `segments` array will never be NULL.
I think this will break the existing user model.
I don't think you need the `var _` here, since you are checking the type of the variable
I would prefer to keep the initial values as 0, as they are used to indicate no timeout
I don't think this is used.
I think this is not used anymore, and we can remove it from the struct as well?
This is not used.
You need to check for null here
This is a good change, but I'm wondering whether this is the right way to do this. It seems like it should just be doing the `.paginate_by_sql` in the controller, rather than in the controller. I'm not sure what other things that might be doing here are, though.
Layout/EmptyLines: Extra blank line detected.
I don't think this needs to be exported.
I'm not sure about this change, but it's not clear why we're passing `true` here.
Should this be in a separate `.js` file, since it's only used in one place?
I think we need to check if `resourcesField` is null or not, and return `pageSizeField` if it is.
This should be `True` by default.
This change should be reverted as it is not related to the issue.
Why are we passing the sampler here?
I don't understand why we need to scan the body field here, as it's already scanned above?
I think we should keep the logic in the `verifyActionResult` method, and only add the config option to the `verifyActionResult` if `c.state.Config.Remote.VerifyOutputs` is true. This way we can avoid having to pass `false` as a third argument.
I think we should add this field to the response as well.
nit: `accts.IsWritingCatchpointFile` -> `accts.HasWritingCatchpointFile`
This test was failing on master, because it's creating a user with a name that doesn't exist. I'm not sure why it's passing locally.
Why not use `mapState`?
I don't think this is needed anymore.
I think we should return an error in this case.
Should we make this an array?
This will break the `type=regex` test. We should use a different regex for the `type=string` spec.
I don't think this should be called here. The repo will already be created.
This should be `Path`
This should be `element = visiRanges.length - 1`
I think we should have this as an enum instead of an int.
This change is not needed. `File.expand_path` already does this.
nit: can we use `this` for the variable names?

nit: remove this empty line?
Should this be `Log.Error`?
Why is this in `pkg/apis/certmanager`?
I'm wondering why we are using QUORUM instead of TRACE.
I would suggest to add a `Validate` method that checks the coinbase and returns an error if it's not valid
I'm not sure this change is needed. It looks like it's not being used in this function
This should probably go into the `#ifndef` section below.
Line is too long. [81/80]
"github.com/google/uuid"
This should be FlavorIEEECRC32OverProto3Binary
I think this should still check that `uninstall` is not called.
This should be `Kernel.warn_with`
I would call this `BlockHeight`
This is a very specific check for if the bucket actually exists. I would suggest we check if the bucket actually exists before returning.
I think this should be `DisplayPreference mDisplayPreference;`.
This is a little confusing, why not just return the `[]byte` and a `Condition` and then do the filtering in the caller?
I'm wondering if we should just have a class called `FastBlurTransformation` that inherits from `BitmapTransformation`.
Is this needed?
I think we should also have a test for the other cases where the output is not a valid example.
Can you add a docstring here explaining what this is for?
I'm pretty sure this will always be set to `false`
I think we can remove this line.
I'm not sure if this is the correct way to do this. The `doc` variable is not being set in any way. It's only used in `axe.commons.dom.getRootNode`.
I don't think you want the `string.Format` call here
nit: `// Return full cert chain including the root cert`
This is a pretty long date, so it's probably better to just use a strftime.
I don't think this is the right place to return an error. If the resource is not found, we should return an error and not proceed. The only place where we return the error is in `Update`, where we should do the same.
Can you add a `FakeID(id ID, public bool)` helper method?
I'm not sure if this should be in the constants. It seems to be used in the other controllers as well.
This should be removed
I'm confused. Why is this needed?
This is a bit odd, but I don't see any other changes in this file that require this.
Why is this skip needed?
I think you should use the `f` from `ftv`, not the fresh one.
I don't understand the logic behind this change?
This is the actual fix, and it fixes it.
This is not used anywhere.
This seems to be missing a `.` at the end.
I'm not a big fan of the name. I think `BACKEND_SERVICE_INSTANCE = 'backend_service_instance'` would make sense.
I think this should also be checked for `manifest instanceof DeleteManifest`
I'm not sure about this change. I think the problem is the `contact_us_url` can be `nil` and we should be using the `contact_us_url` instead. I don't know if we have any tests that cover the case where `contact_us_url` is `nil` and we should not be using `contact_us`. @jlsherrill @d-m-u @jlsherrill @jlsherrill @jlsherrill @tenderlove Do you think it's possible to have a test case that covers the
I'm not sure if this is correct. It should be 'were'
nit. `grpcStreamingDescriptors()` -> `grpcStreamingDescriptors()`
This is a bit strange, why do we need to delete the stream if it is null?
I think this should be a member of `DataWriter`
I'm a bit confused by the import here.
This should be a pointer.
I think we should use the `Datadog.Tags` namespace instead.
I think this should be `GOOGLE_APPLICATION_CREDENTIALS_FILE`?
This is not correct, as the dtype is not known at runtime.
`std::vector<uint8_t> receive_buffer (receive_buffer.begin () + 8, receive_buffer.end ());`
I think we can remove this file
Use the new Ruby 1.9 hash syntax.
Why is this change required?
This file should be moved to a `testing_unix_unix.go`
I think this should be `instanceID.providerID`
This should be set by the user.
I don't see where we use `HOST` anywhere.
@jpechane, @jpechane, @martint, @martint, I'm not sure what the best way to handle this is...
I would move this constructor to the constructor of `MainnetBlockProcessor`
Why not import `insightstore`?
This should be `round_count` instead of `@round_count`
Please remove this line.
Why this change?
This change is not needed. The same is done for the `Supplemental_Punctuation` below.
This is a typo, should be Pierre LALET
This is not correct. `img_meta['filename']` is a path.
This is the fix for #2329
I think it would make sense to have the `CachingCatalog` constructor call the `CaseSensitiveCatalog` constructor, and make the default `caseSensitive` to true.
I think this is a good change. The reason for the change is that the behavior is not consistent. The old code was correct. The new one is correct.
I think this is a good change. I don't think we want this to be a problem. The only way we can do this is to make sure we only run the aggregator and the reporters.
This should be reverted.
This is a breaking change, we should not change this.
I'm not sure if this is a good idea. The chain ID is not the tip.
Shouldn't we keep the `NativeClient` class?
Is it necessary to add this?
I don't think this should be necessary. If we're scaling the texture, then we're just going to be doing it for us.
I'm not a fan of adding new fields to the existing `tags` dictionary. Can you please remove them from the existing `data`.
This is the actual fix for the issue.
This file is not needed
why did this change?
Why do we need to remove the `since` and `until`?
I think it's better to check `isinstance(det_bboxes, list)` here.
I don't think we should be returning an error here. The caller should be responsible for ensuring that the client is set.
Why not `max_blocking_time_point`?
These should probably be moved to `const.h`
This is not a PAAHead. PAAHead is a PAA head.
Please import from `plugins`
This is the fix for #4569.
I'm not sure if this is the best place to import the retry library
Can we make this a bool? I don't think we want to allow this to be false.
nit: `llvm::isa<swift::WeakStorageType>` -> `llvm::isa<swift::WeakStorageType>(swift_typebase)`
nit: can we rename the `configMaps` variable to `canaryConfigMaps`? I think `configMaps` is a better name for this variable.
I think we should keep the exception here
Why do we need to make these final?
I don't think this is correct. You need to clear the loss_weight before setting the parameter type.
Is it possible for the `filesToIgnore` map to be empty? If so we should probably add some error handling here.
This is the only place where we need the context.

I'm not sure what the best way to test this is... I'm not sure how to test it, but this is not a good test, it is a test that should be tested. If you have an alternative implementation, I can make a separate one.
I think this is not needed since we're already checking the expiration at the end of this function.
`for (const Outfit& outfit : outfits)`
I think this should be `RollupBaseTxSize + len(data) * tt.dataPrice`. The data cost should always be `96 + ones`
I think we should return `None` here.
I think this is not needed anymore, right?
Why was this removed?
I'm not a huge fan of this, but I don't have a better suggestion.
Redundant curly braces around a hash parameter.<br>Space inside { missing.<br>Space inside } missing.
cmd 'export PATH=/usr/local/ghc/#{ghc_version}/bin/:$PATH'
@jasonLaster I think this icon is used in the `More` tab.
I would add a docstring explaining what this does.
Can we just pass the serial number to this function instead of passing the `i` variable?
This is a breaking change. Please revert it.
This test was not necessary.
I think it's better to remove this file, and just write a `# pragma: no cover`
I think this is the only place that we need to check if it's an instance of the type.
I'm wondering if we should call this `blockRetriever` instead of `retrievalAPI`?
I think this should be a private constant.
This is a bit confusing. It seems to be the same as the one in storage/storage_nebula_edge.h. I'd suggest to use a single file and move it there.
I don't think we should allow this. We should just be ignoring this field if it is not specified.
This is not correct. We should not be setting `err` here.
I don't understand the reason for this change, is it just to make sure that if you have DESUL_ENABLE_IMPL_DESUL_ATOMICS enabled, then the lock arrays get initialized to the same value?
I think this should be `false`, because the `ImportProductAttributesValueCommand` is only triggered when the attributes are not changed, not when the product is imported.
I don't see a reason why you changed the timeout.
This is the only change that is needed for this test.
I think this should be `self._tab.key_press(Qt.Key_Enter)`
This is not correct. The texture is not used in the renderer.
I'm not sure this is correct. The plural endpoint will return a bytestring. The `encode('utf-8')` will return bytestring.
I'm curious about why we need this?
Why not `$chars[$i + 1] === '\\'`?
I think we can remove this line now
This is not correct. It is not a valid API call. The function should be called with a valid `jsonConfig`.
I would remove the `(also empty string or whitespaces only are handled as empty)`.
Should we add a `get` prefix for this method?
This seems like an unrelated change?
I don't think we should allow this to happen. If the user specifies a source that is empty, it will be copied to the parent. We should not allow that, but instead fail if they don't specify a source. This is not a big deal as we don't want the user to have to explicitly copy a source if the source is empty.
I'm not sure about the name. The filter is not for the modification date field.
:information_source: String reuse speeds up translation and improves consistency. The following string might make a good alternative and has already been translated **17** times: `translate(installation.Name + ' ' + installation.Version).replace(/:/g, ' ')` *ES Score: 7*
This should be `cli.StringSliceFlag`
This should be `actionable_approvers.include?(user)`.
This is a bit confusing. I'd rather see it be called `AWS_CREDENTIAL_RESPONSE`.
Why are we setting this here?

I don't think this is used anymore.
This is a bit of a nitpick but the link is a bit confusing to me. I would prefer something like "gocloud.dev/howto/blob"
This is a BC break, right?
We need `NewFloat64` here as well.
Why remove the `final`?
Please revert this change.
I think this should just be an abstract class.
I think we can use `update_each` here.
nit: `SPARK_INDEX_NAME_FORMAT(0)` -> `SPARK_INDEX_NAME_FORMAT_NAME`?
Redundant self detected.
This is the only change in the code. The rest is just formatting.
Please use `org.apache.commons.lang3.StringUtils`
This is not needed anymore
This is a race condition. The call to InitializeHeaders() below will block until the request has completed.
This will fail if `resourceGroup` is `None`.
Why is this change required?
This is a duplicate of line 175, right?
Why not use `nano::transport::is_ipv6_or_v6_mapped_address`?
I think this is correct. We want to delete a cookie from a remote domain. The cookie is not removed from the remote domain.
This is not needed.
Isn't this redundant?
Why not just `add_handler`?
I don't think we need to use `useEffect` here.
Why are we setting these values to 1?
I think this should be `self->logIdToSend_ = std::move(r);`?
This is a bug fix.
I think this should be a pointer to `Metadata map[string]*backupMetadata` to make sure that we're using it for anything else.
This should probably be a separate PR.
This test should be in `run_test.go`, right?
Should we have some `TraceHelpers` namespace for these?
This is the only change that I can see.
I'm not sure this is correct. The default value is `Beaker::Fusion` which means the default is `Fusion`
Why are you removing this?
I don't think you need this check here. You can just use `redirect_path` below.
This query should be done with `AND item_view.is_suppressed = true`
nit: I think we can remove `return nil, transport.UpdateSpanWithErr(span,` here.
This is not a good way to do this. We have to make the protocol optional. The default is https.
Why is this needed?
Why is this needed? Isn't this a property?
Why this change?
I'm a bit confused about why you added this line. Why do you need it?
I'm wondering if we should just delete the `require 'aws-sdk-s3'` here. It's only required for the `s3.rb` file to work.
I think this is a little too much abstraction for a single handler.
I think we should use the same timeout for keepalive as well.
Should we use `options.dateRange` here too?
I think you should use `ArrayPool<char>`, instead.
This can be removed?
I think these should all be removed.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I don't think you need the pd.Index here.
Why is forkRunID empty here?
This route is not used.
This should use the account.getTransportUri()
These are not the same thing, right?
I think this should be `yaml::convert` instead of `yaml::conversion`.
This is the only place we have a deprecated struct. I'm not sure if we want to keep the old struct or just remove this.
This should be a `readonly struct`
Why is this necessary?
This change is unnecessary.
This is not correct. If the container is thawed, it's not freezed.
I don't think this is necessary anymore, since the test plan is always the first plan.
I think we should keep this test as it is. It was a bug that we didn't test the public load balancer.
I don't think this is needed.
This should be a `return` instead of `return` to avoid a return.
Why do we need reverse bytes here?
I think this is not necessary, since we already delete the index files in `deleteFiles`.
This should be `defaultBundleEndpoint = 443`
Can we extract `TiIndexColumn` to a separate class? Then we can avoid the `isCommonHandle` check and the `getIndexColumns()` method.
I would suggest to rename this to something more generic. Something like `test_results_dir`?
I don't think this is needed, the client is not created by any test. We can just pass nil for it.
This will break pandas. I'm not sure if we should change the repr here
I'm wondering if we should add a `<p>` tag to the `trail` element to avoid the duplication.
This was just to increase the timeout for the test.
This is the only functional change. The rest is just cleanup.
Is this a temporary fix?
This is the only change that I can see. I think it's fine to remove it.
This is not the same as the `--config` option. It is a CLI option, and should be used to load config from a file.
I think we can remove `Optional` here and in the `BesuNodeConfigurationBuilder` as well?
I think it is fine to just use `MetricsConfig.forTable(table)` here, and remove the `forTable()` method.
>Microsoft. [](start = 8, length = 5) Please remove this.
I don't see any usages of this method. Can it be removed?
This was a bug, but it's still a card.
I'm not a big fan of this. I think it's better if we have a separate file for this.
This function is used by the `tpfp_imagenet` function, so I think it should be renamed.
This should be a pointer, not boolean.
I don't think we need to include this in the `li` list, as we already have `section_teacher` and `section_teacher.section`.
This is a bug fix, as the query string is always the same as before.
This is not needed
These are all in the default settings.
This can just return `allowedExtensions`, no need to copy it.
This should be `string[]` not string.
Why do you need to change these?
this should be `brave` not `brave`
This is a very bad idea. The envStore will return an error and we will not be able to proceed to start the environment. You need to call `opts.envStore.CreateEnvironment` before `return err`. Also the `opts.env` should be a pointer to a `Environment`.
I think this variable can be moved to the declaration of the variable. It is not used anywhere else.
This is a good idea. I'm not sure if we should log this. It is not very useful.
I think we should add a new test case for this.
This should be `type()` (not `name()`)
This is the mockgen.go file.
Why is this needed?
Can we just do `slots.stream().anyMatch(slot -> !slot.getSession()).count() < maxSessionCount`?
I don't think this should ever be called with `<unknown TLF type>`
This is a bit confusing. I would call this `notification_for_approver_removed_email`
I think this can be removed now
Why not use `if (sep == 0)`?
I'm not sure we should be using the non-user-facing type for vector elements. I would prefer to use the type of the element in the vector, and then use the user-facing type for the element. I'm not really sure if we should be doing that.
I don't see why we need tagKey and value here, but I don't see it being used anywhere
This is a bit of a nitpick, but I'd rather see this be `warn` since it's not a deprecation message.
Can you add `const blitzPath = path.join(__dirname, 'node_modules', 'blitz', 'dist', 'bin')` here?
I'm not sure about this. I think it should work fine if the dataset has a virtual vdimension.
This is a little bit hacky. I think the right way to do this would be: if err != nil { return "", status.Errorf(codes.Internal, "Failed to create snapshot for Pure FA volume: %v", err) }
I think this file should be deleted
This should be "null".
This is a bug in pandas, we should probably fix it in pandas.
I think this is useless.
I think this is not needed.
This is a good change, however, we should add the same check for the `salesforce.login.server.url` property as well
I'm not sure this log message is correct. If we have no destination, we should not ignore it.
This is a breaking change. I think it's fine to leave it for now.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is not a `uint64` anymore. It's `int64`.
nit: I'd prefer `pubsubServiceAccount string` as the first parameter here.
This should be done in the `OnComplete` method.
I think we should do this before `axe._memoizedFns` is cleared.
I think we need a spec that verifies the `parent_validation_of_child` method works as well
I think we need a better way to check for `ErrAlreadyDeleted` here.
Is it possible to avoid using the helper classes here?
I'm not sure if it is a good idea to have two different versions of the same code. One of them should be updated and one not.
I'm wondering if we can use `node.hasAttribute` instead?
I don't think you need these variables, they're only used in one place.
I think this should be `if stripped and method == 'PUT':`
Can you use `isJava10` and `isJava10Above9` instead?
Why this change?
This is a new include, so it should be in the same directory.
This should be removed
This error is never used, right? If so, we should remove it.
I'm not sure if this is the right way. I think it should be a `Data` object.
Why are we removing the caller and service?
This is a very minor thing, but I would suggest to use a `RuntimeException` instead of `RuntimeException`. It will make it more clear what's going on.
This case is not valid for the project case. It should be `case2`.
Why is it a string?
I think this is a mistake.
I don't see why we need this error.
This is the only place where we use `axeFunction` to get the source, so we can drop it.
I think it's better to use `bitcore.encoding.Unit` here instead of using `Bitcoin.unit`.
I think you forgot to remove the unused imports.
I think the `""` should be the first parameter. Otherwise, it will be hard to understand what it means.
I think you should use `typeof` instead of checking the type
This should be `isFocusable && tabIndex >= 0`
I think we should also check if the target is a SSH host, and if it is then set to true, otherwise set to false.
this is a BC break for anyone extending the interface
Why is it disabled?
This is not needed
This is the fix for the race condition.
Shouldn't this be `_channel` instead of `_string` ?
I'm not sure this works as intended - `ToArray` is a `ICollection<byte>`.
I think this should be `cssRule.style.webkitTransform` instead of `cssRule.style.transform`. We don't want to add a new property to the stylesheet if we have a `webkitTransform`
This should be an `else`
I don't see `namespace` being used anywhere, so I'm not sure if this is necessary?
I think we should pass callerTypeAPI here.
Extra empty line detected at class body end.
I would prefer a smaller limit than 256.
nit: can you remove this empty line?
This is not a valid usage.
Why do we need this one? Isn't it the same as the one in `logic_test.go`
This is a bit confusing. Why do we need to stop the pool here? Is this because the pool will be closed when the `BaseTestCase` class is instantiated?
I think this is the only place where we use `print_page`.
This is the only usage.
why do we need to add this?
Why did you remove this buffer ?
I think we can just do `err == nil`
I don't think this should be in this PR.
I'm not sure we need a separate PrepareRequest. I think the ConnectionFilterContext should be sufficient.
This regex is a bit confusing. I would expect a version number in the config to be the generator, but the default generator is the one we use in `SiteConfig`. Maybe it should be `VuFind\d+\.?\d+`? Also, it would be good to add a check for the version number, so it's clear that the version number is the same.
I think we should not use the `getClusterState()` here since it is not used in this method.
I think this is a bug fix, as the snapshot might not be null if the table is created.
I don't see any tests for the new code.
I think this should be a `Bolt::ValidationError`
Why is this needed?
This was the bug that prevented the `currentError` from being set when there was a `previousError`.
I think this is a bit of a hack. We should not use `new` in this case.
Line is too long. [82/80]
This should be moved to the bottom
We should probably update the link to the new name as well
`null !==` was not needed before, because of the `if` statement.
I don't think we need this. The `getDomSibling()` is called in `getDomNode()` which will return null when the DOM is the same as `oldDom`.
Please don't change unrelated code.
Why is this a uint?
I think this is not the correct place to do this. The plugin should be deleted from the internal container and then the plugin manager should not know anything about it.
This should be `0`
This is the actual fix.
Shouldn't this also have a `cborStore`? I think we can get rid of `node.OnlineStore` entirely.
Is this really the best place for this? I'm not sure if we want to keep the directory in the `.tar` folder, but I'm not sure.
Why do we need a default implementation here?
nit: `feat_is_unconstrained` -> `feature_is_unconstrained`
This should be `_downsample`, right?
I think we should have a constant for this somewhere.
I don't think we need this anymore.
This is not needed.
I think we should remove these from the `packages` dict. I think they should be in the `packages` list instead, since it's a subset of `packages`
<h2>Workshops</h2>
I'm not sure this should be a conditional. If the manifest is not a JSON file, it will just return an empty array.
I don't know if we need to include `:go` here, but I think we can remove it.
Why is this change necessary?
This should be a `logger.warning`
This is a breaking change. We can't do that without a major version change.
nit: `bec binary` is a typo
Why did you remove the namespace reset option?
I'm not sure this is needed, as this is the same cookie that is used for the cookie-based cross-site requests.
I don't think this should change, but if you want to change it, you can make this a readonly struct and set the value on the field.
I think you can drop this line.
This should be `>=0.9.1`
This can be a for loop
I don't see why you need this.
This is not the right error message. The user can't set both clientID and resourceID. The message should be something like: `Managed identity can not be used at the same time as clientID, tenantID or clientSecret`
This is a bit confusing, since the request is passed to `s.Log`. Maybe we should rename the function to `cloneRequest(r *http.Request)`.
This is the only place where we need to add this filter. The rest is for the `--domain` flag.
I'm not sure how this is related to this PR.
I'm not sure if this should live in the context.
`trainer->get_callbacks()` is called twice here.
I think we need to check the block_type.
This is the only place where `DeleteFiles` is used. I'd suggest moving this into `deleteFiles` and just call it directly in `DeleteFiles` instead of having a separate function for this.
This change is not necessary
I don't think this is used anywhere?
This is the most important change - the TreeMap is a TreeMap, not a TreeMap. This was a bug in the JDK.
I think this should be `time.Second * 2`.
I would prefer `w` and `d` to be `None` and `None` to be explicit. The latter is a bit confusing, and it is more consistent with the rest of the code. Also, I would use the `X_1` variable for the first and `y_1` variable for the third.
I'd like to see a `<%= render 'shared/text_box_helper', :github_url => @purchaseable.github_url` here so it's clear what this is for.
Please remove the extra line


This file should be removed.
I don't think this change is necessary.
Why do you set status to `KubernetesResourceState_OTHER`?
This is not a sample application name.
We should export these in `.eslintrc` instead.


I don't see any reason for this macro. It's not used outside this file.
This should probably be "organizations"
Why not just remove the field?
Why not `EnableHostVerification`?
Why is this needed? Isn't this the same as `SHOW TABLES`?
I'm not sure if this is the correct way of checking if the character is a valid identifier.
Why is this change needed?
This should probably be "Name of the service"
I think this should be `exports` instead of `module.exports`.
I'm not sure why this was necessary.
I don't think this is a safe assumption. If the plan vars contain local references to variables that appear earlier in the plan, Puppet will be unable to deserialize the data and raise an error.
I don't think the incoming rate limit is the best idea. I think it is the most reasonable approach to limit requests to the server.
nit: `If enqueueAppliedToGroup is true, then the external NetworkPolicy will be added to the clustergroup reference`
I think it would make more sense for this function to live inside the NCR controller and then be called from both the controller and the NCR controller.
I don't think we need to call `to_h` here, since we're already calling `keys` on the hash
I'm wondering whether we should just allow `a-zA-Z0-9` or `a-zA-Z0-9-`? It's a little bit more complex, and I think it's fine to just use `0` as a valid stream ID, but I'm not really sure what the right answer would be, so I'm not sure what to do about this.
Should we return here?
This should be `controlTypes.REASON_FOCUS in states`. Otherwise, it won't work for `states=None`.
I don't think we need this change.
I think it's better to keep the `.dbaport` and `.dbport` as they are used in `nginx-proxy`
I think you should set it to nil in the constructor, otherwise the shard will be nil in a weird state.
I don't think this is necessary.
I think it would be better to use the same logic as for `maximized_horz` and `maximized_vorz`.
I'm not sure we need to remove these.
I'm not sure this is the best way to do it, because the key should be unique, and it should not be possible to have multiple keys with the same key. The only thing I can think of is that the key should be unique, so we should be able to use the same logic to get the same keys.
I would prefer if this was a method of `Node` rather than the helper.
I think we should use the `setTimeout` helper here. It's a little more readable.
This is the only place where we use this. I think we should just inline the `String` method.
Should this be `NewInvalidArgument`? I think it's a `ServiceUnavailable`
Line is too long. [81/80]
I'm not a big fan of this, but I don't have strong opinion on it.
I don't think this is a correct fix. The original message was correct. The new message is not. The old one is correct.
This is not needed, as we are using the same value in the builder
This seems to be the same as `SERIES_DEFAULT_NAME`.
I'm a bit confused by the units here. Shouldn't this be `commit.status-check.total-wait.ms`?
This is the only change that is needed to make the tests work.
This is the only place where the resource is used.
I don't see how this method is called. I don't think we need to implement getStartBlock here.
Should this be a const somewhere?
This is a good example of how we should test the `mongodb.db` and `mongodb.host`, I think we can just do `let apiMongoDb, frontendMongoDb;`
This function seems unused. Is it used anywhere?
`getParentWindow` is unused.
Should this be `||` instead of `||`?
I think this should be `self._prompt.yank_text` (or `question.yank_text`)
I think you can remove this line.
I think you can remove this line. It's already covered by the `LocationDetectorURL` above.
This should be an uint64, not a duration
@jrafanie @jlsherrill I'm not sure if this is correct. I think this should be called on app init.
You should use the `DisplayResources` class here
Why do we need to change this function signature?
This is the only place where we use the `now` value. We should use the `nowPtr` instead.
I think this should be kept. The `data` folder is not a part of this package.
I think this is a good time to add a `TODO` to make this a proper option.
Why do you create the logger twice?

nit: can we use `t.IsEmpty()` instead?
Why is the ClientCertificate a certificate?
I don't see this file being used anywhere.
Should we do this in a goroutine, or at the end of `Ready()`?
I think it's a good idea to make it a constant.
I think we can just remove the test. It is testing that the component is rendered correctly.
You can use `c->checkArgument(1, ...)` here.
Please revert this change.
This class seems to be unused?
I don't understand why we need to do this. Why not just `if ( ! decimal ) {`?
nit: `Transports` => `TransportList`
This is the only change that is required for this PR.
I don't see any other place in the code where you added these.
This is not needed anymore
I think this is fine, but we could also log the error in `LookupAccount()`
I'm not sure about the name of this. The `supported_types` is not very descriptive and it's not really clear what the difference in the type hierarchy between these two is.
I think it should be `pinned_at` to be consistent with the other fields.
I think it would be better to call the `followGroupPlayback()` method from the queue core, and call the `startPlayback()` method from the queue core.
I'm not sure this is the right error message. It should probably say "Invalid instrument name."
This should be `LoadFromAssemblyPath`
This is the only place where we need to print the message, not just the pc.
This is not a good error message. The problem is that the user can't connect to the server.
This is not the same as the previous benchmark, but I think we can keep the old name.
I would suggest to rename this to `isDispatchedFlow` to make it clear it's a boolean.
We don't need the `/` here.
nit: this is a little confusing, maybe `AppendTraceLogs` or `AppendTraceLogsAndClear`?
I think it would be better to move this logic into a helper func.
This seems like it should be an envvar. I'm assuming it's a debug flag, but if it's a failure it doesn't really matter.
`(String) val` is not needed.
I think we should just use `NONE` here. The `NONE` enum is not used in any code generator and is not used in the code generator.
I don't see the point of having a method that returns a string
I don't think we need this check, `segms` already is a `np.ndarray`
This import is not used, please remove
This is a bit weird. Why not use `logger.info()`?
Why is this optional?
I don't think this check is needed, since the `listAll` call will return an empty list.
This change is not related with this PR, but I think it would be nice if this could be done as a separate commit
I think we can get rid of this class and use the interface directly in the BlockHeader. The BlockHeader interface is already in a different package and the BlockHeader itself is not needed.
I think this is not needed, since the `model` method is already async and we are not awaiting anything.
I think this should be a `bool` instead of a `bool`.
I'm not sure if we want to change the existing behaviour. The new behavior is to not delete the connection if it is in the conntrack table.
This is a bit weird. Why not just add roll: to `cwa`?
This import is unused.
I think you should use `$this->request->attributes->has('property')`
Please, add a type hints.
I think we should check if the server is the leader and if so we should remove this file
I'm pretty sure this will be the only thing that is needed, but we should probably have some tests for it.
This field is unused
This is not needed, it's already in the list
Why not `"%d"`.
This is a bit confusing. I think you should check if the variable is a variable or not and if so, do the upper() call.
Please remove this
I don't think this should be in `types`.
I think this should just be `if closeTime.Before(startTime) {`, since we're checking for `startTime.After(closeTime)`.
Why is this a string? It seems to be a string.
This is not a good idea, it will break the API
This change should be reverted.
I'm not sure if this is the right place for this, but it seems like it belongs in `ClusterMembershipRow`.
I think this is the right fix, we should just add the containernames in the chaos spec, and not set the container names.
I think it would be better to have this as a method on the `Collector` interface rather than the `Collector`, because it would make it easier to test the implementation.
Is this really needed?
This test was not actually testing anything. The `DismaxMunge` is not a valid option, but an option that is not used in this test.
I think this is the same as `kubernetes_retrials_to_get_pods`
I would suggest to change the text to something like `Value in product should be a valid ISO 639-1 number.` and remove the `or less` part
line is 163 characters (from `lll`)
I think it's a little confusing to have a method called `personal_options`, since it is not really the personal options. I would just call it `options` and call it `personal_options`.
This is a breaking change. We should probably have a test that exercises this.
Why do we need both?
This partial is not necessary
I don't think this is the right place for this mock. It should be in the `pkg/cache/cache_mocks/cache_mocks_main.go` file
I'm not sure if we should use a regex here, or just use `@""` as a default value for the string, and then use that in the if-statement below.
This is a bug.
This is a bit of a pain to read, but I think it's better to keep the type as a pointer.
I think we should move this to after the block cache is created, since this will be executed before the disk block cache is created.
This should be `2018, 2018`
This should be `%2$d`.
Why did you change this?
Is this necessary for this PR?

This is not needed.
Should we add an `__sleep()` method to `Logger`?
This is the only function that needs to be implemented in chat. I think we can get rid of this and just call the `Identify` function directly.
Is there a reason why this check isn't done in `PyMPIComm_Load` instead?
This is not needed.
This is the only one I can find.
Which of these changes are necessary?
Nit: `NABoolean isFirstBatch = false;`
This is not used.
I don't understand what this is testing.
I think we should add a log here.
This should be in `LibraryDetailsPanels.java`
I think we should keep it, but add it to `attrs_t`
I think we should remove the `vkQueueFlags` from the function signature and the `VkQueueFlags` from the header as well.
This should be removed
Should this be `|| buttonStyles`?
This is a breaking change. Can we make it a breaking-change instead, and then add the new field?
I think we can remove this `else` statement, as we are not doing anything with `index` anymore, so we can remove this `if`.
I would prefer if this was a `long minSeqNo` instead of `long`. It's more consistent to have a field named `sequenceNumber` or something like that.
This change is not related to the rest of the PR. Please revert.
This constant should be moved to the top of the file.
This is not correct. The condition should be if target.name == 'localhost'
I'm not sure if this is the correct approach. The `SignKeyActivity` is the main entry point for the sign key activity, but the `SignKeyActivity` is the primary entry point for the sign key activity. I think it would be better to have a separate activity for this, and then use the same logic to bind the key to the service.
This is the default value, so it shouldn't be necessary to add it here.
This is a change in behaviour. Before, if `err == nil` then `usr.Username` would be set to the empty string. Now, if `usr == nil` we would return `err`.
This is the main issue.
`landmarks.includes(role)` is a little faster than `!role`
I'm not sure if we should be doing this here, but it's probably better to do it at the end of the function instead of in each if.
nit: `ACNPRuleAppliedToSpec` -> `ACNPRuleAppliedToSpec`
This is a bit of an odd name for a function, I think it should be `adjustSample`?
I'm not sure we should be adding this. It's a breaking change. I think we need to add it back.
I'm not sure if we should have a separate method for this. I don't know if it's necessary, but I think it would make sense to have a separate method for `admin_admin?`
This test is not correct, you should be checking that `y` is not in the scope.
This is not a good change, it is not an int anymore
I think you can just use `assert.NoError(err)` here, since the test is already checking the errors.
nit: remove empty line
I think we should be able to get rid of this function altogether.
I don't think this should be done in wlr_pointer initialization. WLR pointer should not be allocated for every tap if the tap is disabled.
I'm not sure if we should be changing this, but if we are changing this, we should also update the tests to reflect the new property.
I think this is a bit too much.
This file should be moved to the "core/insonmnia" folder.
I think this is not needed, as the table is created by the user and changeset.
Why do we need a new package for this?
This should be reverted.
Why not `.withSpec(spec)` ?
I think we should use `plan_type` instead of plan_id, plan_type is a bit confusing.
Should this be "iceberg.engine.hive.enabled"?
why was this deleted?
This is not necessary.
I'm not sure this is a good name. It's not a username but a username that is a username. Maybe `is_username_in_blacklisted_list()` would be more appropriate.
I'm not sure this is correct. We are not setting newMode here, but in other cases we are setting mode
Why change it? It's a cost in table scan.
I think this should go in the `app/config/secret_key_base_spec.rb`
This is unused.
I think we should remove the `DefaultCAID` field from the `Provision` method as well.
This should be a mutex
I think you should remove this line, it's not necessary.
This is not necessary.
I'm not sure if we want to add a timing option to the command itself?
This is not a good idea. It is not a good idea to have two different interfaces for the same thing.
I'm not sure about this one. I'm not sure what it does. I think the intent is that if the user has set `page`, they will go to back to pages. But if they don't, they'll go back to back to the page. So I think we should just remove this line.
I think this should be `#ifdef __GNUC__`
This class name was changed to `visibility_of_any_elements_located`.
I don't think we need this check. The player can't be able to turn the charges on by the player.
@kapilt this should be `DateTime(auto_now=True)`
I don't see this being used.
This is the API path to get the volume information.
I think it is better to have a single `pythonapi.rst` file, and have the user manually specify the file name.
This is the only real place where we need to set the info. It should be done at the end.
This is the only place where I would expect the `input_method` to be used. It is not used anywhere.
I'm not sure this is the best approach. We need to make sure that the client is ready to receive new connections. I think we should make the `bridge` package a method on `client` that can be called by the tests.
I think this is not correct, if we have a new wal and we have a new one, we should rollback to the old wal.

I think we should add a check for the existence of the `google-osconfig-agent` repo, and if it's not found, fail with an error. This way we can avoid running the command if it doesn't exist.
These should be `timeoutsImplicit`, as the name suggests it's a list of milliseconds. I'd suggest something like `pageLoadImplicit` or `implicitTimeout`.
We should not use sinon in tests. We should import `sinonMock` instead
Why do we need this?
This is a new field, but I don't see where it is used. Is it used?
Please remove this empty line.
I'm not sure if this was a mistake. If `ns.GetPath` returns `""` for a namespace, it will be overwritten.
I think this should be `download-links`
I think this should be `(JObject) projectJsonRoot["frameworks"][framework]["dependencies"];`
"passing the edges" -> "passing a tuple with the edges"
This should be the namespace of the target pod.
Should this be `MinimumRequestBodyDataRateFeature`?
I would use the same name for `len` and `data_idx`.
`$mediaContext` should not be null here
I think we need to bump this to `1.11.0-ce`
I think this should go to the `mne/base.py`
This test doesn't really make sense. It should be testing the `Collection.delete()` method.
This is not correct. The command should be called `quit()`
I'm not sure this is the right place to put this. It should be in the exporter package.
I think this is the only place we're testing the password, so it should be removed.
Why is this cast needed?
This is the only change that I'm not seeing.
This is not a good solution. It will break if someone calls this with `startTime=None` and `endTime=None`.
This is the only change that is needed. The rest are just renaming.
I don't think we need this, as the `kinesis` and `dynamodb` batch sizes are the same
Why are we changing the order of these?
This is not needed, as the config sets are always created in the constructor.
I think this should be `k8s.io/klog` instead of `k8s.io/klog/v2`
This is not a good idea. The AWS provider is not a generic term. It is a general provider. The cloud providers should have a generic name that is more specific.
nit: this should be grouped with the other acme imports
This should be `MetadataTableType.ALL_DATA_FILES`.
This test case is missing a closing parenthesis.
This can be removed
I think it is better to set these to `0` instead of `500000000` and then use the default value.
Please don't import *
This is not the correct fix. We should not have to change the type of a timer.
I don't think this is the right fix here. It will make debugging a lot easier.
This should be a string, not a list.
This is not true.
This file is missing the license header
This file seems to be unused.
This is a bug fix, but it seems like it is a bug fix that we should fix in a follow-up PR.
I think this should be a param.Callable, and it's a little more clear that the function is not memoized.
This is the only change in this file. The rest are just cleanup.
This is a bit weird.
This is a bit of a hack. The `typeSupported()` method will return true for any const type. But it will not be used. I would prefer to keep the code as it was.
I'm wondering if it's better to have this method on `TypeSolver` interface. I think it would be easier to reason about and more consistent with the other solvers in this file.
why are these skipped?
I think we need to use a `Time.zone.now` here, otherwise the `run_and_report_duration` will be a no-op
This function is now async, which means the function can be called asynchronously.
I think it's worth mentioning that this will be replaced by the new code.
nit: `num_stages` is not used in the code, so we can just check if `stages` is not None.
This is the main change.
I don't think we need a Close() here. We can just use `context.Context` as a parameter.
Missing license header.
This is not needed
Can you add an example here?
Why do we need this? The `client` field in `Instance` is `*api.Instance` and the `Instance` struct is `daisyCompute.Client` and the `daisyCompute` client is `daisyCompute.Client`.
I don't think this is the right place for these redirects. The page should be located in `/products/24-ruby-science`
I think you can remove this test, since the `expectedMissingDependenciesMessage ` is now tested on all clusters.
I don't like that this is a separate error class. It's not very useful.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
I think we should use the default here, otherwise we will be changing the value for every writer.
Why this change?
This is a bug, `buffer` is a slice, not a slice.
I think we should use `user_attachment_url` here.
I think it's better to have the `omitempty` annotation on this field.
I don't think this check is necessary. The `dataVersion` will always be empty, and the check below will never pass.
This is the only place we have to check if the URL is local.
This is the test that is failing.
Why did this get deleted?
I think we should remove these fields from this PR
I think we should raise `CommandError`, since we're not doing anything with it.
This change is not correct. We should not count the system logs
Shouldn't we also remove the notification from the map?
Why do you use `NotFoundErr` here?
I think you can remove this, it is not needed.
This is a bug fix. The `null` check was not necessary.
I think we can remove the `@title` and just use `t`
Why is it needed now?
This is the default value for all models, so it can't be changed in a later version.
I don't think you need this.
This will be a breaking change. We should probably return an error here and let the user know that they should be running in the wrong network mode.
I think we should remove the `clear_contents` call from here, since it's no longer needed.
I'm not sure if we should have this in the `params` package, as it is only used by the `MiningState`
I think this should be removed.
Should this be `APPLICATION_NAME_DEFAULT`?
I think we should add a `decorate` method to the `Step` model to get the text of a step.
Please revert this change.
This is not needed. The variable is not used outside this scope.

This will block forever if the connection is closed.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This change is not needed
This suppression can be removed.
Shouldn't this be called after `roots_drag_icon_damage_whole` is called?
nit: I think it's better to use the default value of `device`.
I think we can remove this `if` and just use `if o.name != "" {` below.
I'm not sure if it's worth it to do this for every login.
I think this is the only change that should be needed. The other changes in this file are not related to the acn conversion, but to the CNP controller.
This is a label of all
I'm not sure this is a good idea. We should not close the stream if it's full.
`Health check failed on repository '%s': %v`
This is not needed as we are already setting these in the `Metadata` property.
I think we can delete this file.
I'm not sure about that, I don't think it should be skipped.
This should be a warning, not info.
This should be `ifneq`.
This should say `The number of steps to delay`
I think this should stay, it's a public API.
I think we should move the `get_dist_info` function to `mm_cv.py` and use it here.
This should be in the same group as the other imports
This is not a checkbox. You can just add it to the settingsSizerHelper.
I think it's a bit confusing that the `Before` and `After` are different.
I think you should check for `len(f.server_conn.ip_address) > 0` here
This should be reverted. The `DateTime` type is not a thing.
I'm not sure this is correct, I think it should be: `if ((!diagArea_->contains(-2013)) || !diagArea_->contains(-2012))`. If you want to check the length of the server, you should use `diagArea_->contains(-2013)`.
This should probably be moved to a separate group of imports
I think this should be `intersects` instead of `crosses`.
I think this is the right way to do the tests. We can just make a `makeMDv3` method in `mdv3.go` and use that instead of the `makeInitialRootMetadata` function.
I think we should still check that the output contains the `docroot` path
Nit: `hasImplicitRole` -> `hasImplicitRole`
Please remove this empty line.

This should be `Capability.NAME` not `NAME`.
Is this necessary? I thought the space reset was happening after each test.
I think we should also validate the secret URL here.
I think we should keep this test, as the name is not accurate anymore.
This is the only change in this file.
This is the fix for the problem, right?
Why do we have two versions?
I think this is not needed.
Is it safe to assume that the protobuf package contains "cloud"?
I don't see the point of this change.
This should be a debug level log, not a finest
This should be `< 0.9.8f`, not `< 0.9.8f`.
This is the only change that is necessary. The block producer test is now using active and not block producers.
I don't think this is right. The sync should be updated in the same way as the target.
This should be done in `readAll()` instead of here.
This is not needed. `getParent()` returns a `Node`.
I think this is the right way to go.
Why is this needed? I don't see any other code changes in this PR.
nit: `goimports` would be a better place to put these
I think we should also log the error here, so we can see the error.
I don't know if we want to use the imageBlurHashes property in the item. It's not a good practice to have it as a separate property. I'd suggest we just add it to the chapter card builder as an optional prop.
I'm not sure why this was here.
This should probably be `selfCheck` as well, since it's a method on the action.
This is wrong. You need to return a `const DomainParticipant*` here.
Is this needed?
This is a bit weird, why is this not a problem in ARM?
I think we can remove this.
I think this is the only place where we use `actualNode` and `hasAttr` is `isSelected`.
This should be moved to `storage.py` as it is not related with the migration.
This should be in a separate commit

This is the fix.
nit: import grouping
Why did you make this protected? It seems that the only caller is in this package and it is not used outside the package.
I'm not sure if this is the best approach to handle a `OSError` here.
I think you can use `assert_match(/#{node.hostname}","status":"success"` here
This should be moved down to the other imports.
I'm not sure why this is being removed.
I think we should have a separate command for this.
This will fail if the user provides a `X-Forwarded-For: "*"` header value.
This should be "Killing".
I'm not sure if we need a `GET` request for this.
This is not a good idea, you should use the `watch_video_link` method to build this.
I think this can be removed now that we have `setBeforeCreateInvocationHandler`
I think we should keep this one. We should also test it with a `jdk` build.
This is the only change that I can see. The rest is just cleanup.
I'm not sure if this should return a pointer, since it's only used in the error path.
Why are you using ConcurrentHashMap?
This is not the same as the code in the `title` setting.
Is there any reason to not just check for `kind` here?
Why is this being removed?
This will be a breaking change, please add a new command `go-filecoin bitswap`
Should this use `_x` instead of `__`?
Why is it needed?
Is this a valid value? If so, should this be `omitempty`?
Should this be `widgets`?
I think it is not necessary to add the method here.
I don't think we should disable this pylint error. It's a bit unusual to have a function with no return value in a method.
Shouldn't this be "http://"?
This is a new exception. Please remove it and use `Exception` instead
This is not a field, it's a field.
Should we add a `DurationType` for this?
This is a little confusing, since we have `asGRPCOptions` but `asGRPCOptions` in the `export` package. I would suggest renaming to `toGRPCOptions`.
I'm not sure if this is a useful test, but I'm not sure if we should test the default case, or if we should test the `nil` case.
This should probably be a `PaymentChannelNotFound`.
This file is missing the license header.
I don't think we should do this. If we do, we should return an error and let the caller decide what to do.
Why do these need to be in the config file, if they are not used anywhere else?
I think we need this static import.
I don't think this is correct. We don't need to process sub for the remote sub.
This was a bug. The `exceptions_app` is not set anywhere in the `ApplicationController`
I think this should be 5 minutes.
I don't think this is the right way to do this. It's not a good idea to have a method that is only called when MapLen returns true.
Why not `lastBlock.CommitTime()` ?
Why do we have to delete a collection?
I think you should use `assert` instead of `assert re`.
I think this is not the right way to go. The `autouse` parameter is a bool. If you want to test for the value of `KOALAS_USAGE_LOGGER` it should be a string.
Should be `UInt256`
I think this should be `ctor` rather than `ctor(ctx, configmap.NewStaticWatcher(`
This is not a dummy. It is an actual token.
nit: I think this should be named `certificateRequestGVK`
I'm not sure if this is the right name. I think we can just call it `broker`
This should not be changed.
This is not the correct metric name.
I don't see why you need to do this.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we can remove this function now.
This is not correct. The rasterizer should only be used for rasterizing the input as the vertex shader is not rasterised. It should only be used for drawing.
I think this should be `./assets/`
nit: maybe we can rename this to detectStaleEndpoints?
This test fails on Windows because the SP is not available in C.
This is not needed anymore.
I think we can remove this file
Why change this to `fine`?
I don't think we should do this here. We should just be passing in the payload from the command, and let the caller decide whether to return an error or an output.
I think you can use the same approach as for the demo pricing group
Nit: I would put this in the same block as the other imports.
This should be internal
I don't think we need logical-tautology here, right?
Why is this change necessary?
Why is this not a constructor argument anymore?
I'm not sure if this is a good idea. The connection should be closed before any other operations on it, but if the connection was closed before, then the connection should be closed before closing.
This should be in the same block as the `syscall` line
I don't think this is needed anymore
I don't think this should be here
I think we can remove this, it's not used anywhere else
Why did you change this?
This is the default.
I don't understand why we need this. Why wouldn't the logger be the same?
Why is this a string?
I think this test is not necessary anymore, since we have `require.Len(t, ncs.nodes, 2)`
This is a bug.
I think we should do this in the minimal mode, since it's a no-op for the new block
This is not necessary.
I think this is not used anymore. Can be removed
This should probably be a safe navigation call, not html_safe.
This is a little bit of a hack, but I'm not sure if we can get away with this.
I think we should use `1.31.0` for this.
`current_app.logger.info('imported %d listens for %s' % (len(listens), str(user)))` should be enough.
This should be `<%= javascript_include_tag %>` to match the JS code.
This import is not sorted.
I'm not sure if this is the right way to do this. It seems to me that the metric name is a bit confusing. Maybe `multiStepScore`?
I think we can remove this line. The service will take care of retry logic.
This should be `matchClause->path()->pathSize() == 1`.
This is not a good approach, as it will block until all messages are published, which is not the case.
This should still be `approval_for`
I think we should not use this. We should use `com.sun.glassfish.gmbal.ManagedObject` in the code.
I think this should be in `lib/vavr/`
This is not right, we should not be setting address mode to clamp to borders if the texture is already normalized coords.
I don't think this is necessary.
This is the same as in `Puppet::Util::Noop` - I think it would be good to extract this to some shared method.
nit: remove empty line
This is a bit of a misnomer. I think it should be `sodas` instead of `water`.
I think we should use `Object.assign` here.
This flag doesn't seem to be used anywhere?
Shouldn't this be a flag?
I think we should keep the old constructor and just call it with the mode as a default.
This is not needed.
I think we need a test case for this. It's a very common scenario that we'll have to run the migration on the same node.
This will raise a `ArgumentError` if `@options[:hosts_file]` is not set. I don't know if this is a problem or if it's a bug.
I don't think it makes sense to add this method to the public API.
This is only for testing purposes, so I don't think this needs to be public.
I think we can remove this
nit: I think `_readInputContinuation` is better. `_readInputTask` is more descriptive than `_readInputContinuation`
I think it's better to set the `GONE` visibility in `setupVideoControlsToggler` instead of here.
I don't understand why this is needed?
Can we add a blank line here?
I think this should be in the same file as the DataAccess class
This should probably be `public override Task ForceFlushAsync(CancellationToken cancellationToken = default)` to avoid overriding `ForceFlushAsync`.
I think this should be initializedClasses.
This method is used only in one place, I'd move it into a `let!`
This line is not necessary.
nit: `auto max_threshold = this->config_->max_cat_threshold;`
Should we also check request.GetExecutionID()?
This is not the right place to fix this. The task engine is not going to be able to handle this message. The task engine should be responsible of handling the update and the message should be able to handle the update.
I'm not sure if this is a good idea, but it's a bit weird to have an exception in this method, as it's not used anywhere else. Maybe it would be better to just catch `ValueError` here and let the caller handle the correct error?
nit: `As(m *Message, i interface{})`
I think this is a good time to move this query to a `db/models` directory. It's really hard to reason about the structure of the table.
@mistercrunch I think this is the correct place to do the check. I think we should do it only if `path` is a valid path.
I don't think this should be public.
I think you should use `.to_i` here instead. `fiscal_year.to_s.rjust(2, "0")`
This is not a test, it's a test of `build_package`.
Why do we need this change?
This is a bug. Unauthenticated requests should be rejected by server.
I think this will be a problem for the record where it's frozen, but not persisted.
This is a bit confusing to me, since we have `count` as an `int64` and `sum` as an `int`.
I'm not sure about the naming here. The interpreters are the ones that the client uses. I would expect that the server uses the interpreters, but it is the interpreters that the client uses.
Please use `sys.stdin.readline()`.
I'm not sure this is a good idea to return a GPU that is not a device. It's not possible to use the udev enumeration for the driver, but it would be good if we could find a better solution.
nit: I think it's a bit more readable to use `sparkContext().getConf().getBoolean(...)` here. I think it would be more readable.
I don't think we need this
nit: extra space between "dataverse" and "alias"
I'm not sure this should be `string|resource`
This should be a constant.
Nitpick: this import is not necessary
@sjenning @smarterclayton is this the correct way to do this? I am not sure if this is the best way to do it.
I don't think this is a good example for the new error message, since this is not the case for a `scalar`.
Why not use `sizeof(a[0])`?
Why do you change this?
I think we should rename this property to `missingAdminRoles`
Why is this called "sizePrefixed"?
We should use `DATE_RANGE_OFFSET` here, as it's the offset of the current date range.
I'm not sure if we should have a test that verifies that the `accountID` and `propertyID` are the same, or just verifying that the account ID and property ID are the same.
This should be `NewIdentityManager`
I think we should use the same constant for all of these.
I think we should add `.gz` here too
I'm not sure if it makes any sense to add this layer in the base layer class. I think it's better to have the `socks` layers in the same file as the `http` ones, since we don't need to expose the `socks` layer to the client layer.
I'm not sure if it's a good idea to have a function that is only used in one place, but it's probably fine for now.
"List of offsets for blocks of a file, if applicable, null otherwise."
Please remove this empty line.
This should be `printf()`
I think we can remove this one.
I think this should be `Blockly.scratchBlocksUtils.compareStrings`?
Why do we need this?
I would call this `NoHeaderSupport`
I think this is a bit misleading. The error is not returned by `json.Unmarshal` so we should just return it.
Why change this to unit?
I think this should be `user32.dll`
Should we add a `// TODO` to remove this after we upgrade to v3?
Should we have a default value of -1 here as well?
This is a bit of a misnomer. It's not the map of the `uid -> usernames` map.
Can this be `mongoClient.s.options.cryptdConnectionString !== null` instead?
This is not necessary, since the `sni` field is always `bytes`.
I think we should keep this at warning level, it will be very noisy to have a warning when it is a warning
This is not correct. The function is not a docstring.
I think we should call this OpenvpnPort
I don't think you should do this. If `topology` is `null`, it will be closed automatically.
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
I don't think we need this anymore, right?
I don't think this needs to be here.
This should probably be `BatchingActivityProcessor` instead of `SimpleActivityProcessor`
This should be `RSpec::Rspec.support`
_nibName = nibName;
I think this should be Config instead of API
This is a duplicate of the import below.
I think we should use `wp_json_encode_raw` instead.
Is this TODO still relevant?
I'm not sure this is a good idea. The `networkName` is a hostname, and the `Get-VMSwitch` command is not going to work for anyone who is using the same network name, but it's not a hostname. I think we should just use the hostname from the network name and not worry about changing it.
I think this is not needed. If we allow errors we should print the error message and return false, otherwise we should print a message to the log.
I think we should just return an error, and let the caller decide what to do with it.
I don't think we need this. The interface is `Metric`, so it is not needed.
Why is this removed?
I'm not sure about this change, it's not a regression, but it's a fix.
`path = os.path.join(dirname, path)`?
Why is this needed?
I think we can remove this. It's only used in the `runLoop` below.
I don't understand why this is a pointer.
This change is not needed
this is not needed
Should we log this exception at least?
This will return `nil`, which will be confusing.
@mjkkirschner this should be `Exclude = d.GetValueList(nameof(Include)),`
I don't know what the best default value is, but it's not clear to me why this is necessary.
I'm not sure if this should be changed, but it seems like the change is to make the icon appear in the list items only when the network path is not present.
I would call this `WorkflowType` since it's a bit generic and not specific to the workflow.
This is a little weird. I think we should just use `.then(keys => keys.join(''))` instead.
I'm not sure if it's a good idea to expose this as a computed property.
@rwjblue this was the only usage of deparam
I don't see this being used anywhere.
This is not correct because it will create a new model for every dataset, but it will not work for all datasets. You can create a model for all the datasets in the dataset and then use `model.cuda` in the `model.cuda(gpu_ids[0])` to put the model on all GPUs.
This is the actual change
I think we need to keep this in the render queue, not in the options file.
This is a change in behavior, but it seems like it would be better if this was a separate PR.
Remove this line.
Why is this being removed?
I'm not a fan of this. It's not clear to me what this is for. It's a map from the security group role to an IngressRules that is added to the cluster, and it's not clear to me what the additional rules mean.
This is a public method so it shouldn't be exposed.
This change is not needed.
I would suggest to add a `getBlock()` method which returns the block hash, and call it here.
Layout/TrailingBlankLines: Final newline missing.
Why do we have this? I think we should not be changing `x`.
I'm not sure if we want to have the `.esm` or `.css` here, since the file is already named `swiper.css`.
I'm not sure why this is necessary.
This should be in the same block as the other imports.
This is not correct. If you have multiple threads, you will get a different error message.
Should this be a GET instead?
This is a breaking change. We can't change the type of a value that's not a number.
I don't think we should be exposing the command in this file. We can just add it to the `snapcraft` package.
This is a bug fix.
I'd suggest using the default value here, rather than `''`. That's what we do elsewhere.
I think this was a typo, it should be `waitTimeoutMillis` instead of `waitTimeoutMillis`
This is the only change that I don't understand. Why did you remove the `skip`?
I don't think we need this.
I think we should just default to None and let the environment do whatever we want.
This import should be grouped with other stdlib packages.
This will fail if `pkt` is `None`.
I think this import can be removed
This list seems a bit odd to me. Can we just use a single set?
I think the original file is fine, but it would be nice to keep the file format consistent. The original file is the package name, the mock file is the package name, and the mock file has the same name.
This is a good idea, but I wonder if we could use the `GDEBI` library instead. It's a bit more verbose and it's a little more verbose than `GDEBI-Core` which I think is a bit more verbose.
This should never return null, since we're already returning the first item in the collection.
This should be `blacklight 8.1` to match the actual version
This should not be necessary, `Realm.Object.prototype.__proto__` is the prototype of `PersonObject`
I'm wondering if we could just panic here.
This change is wrong. The new size is the new one.
I don't think we should disable this for the whole assembly. It's a bit odd that we have to disable this for all of our assemblies.
This is a breaking change. Can you please add a `@Deprecated` annotation to this method?
I think you should be able to use `urlparse` here instead of constructing a new object.
I think we need to use the `desc` column here, not the `desc` column, because the default is `DESC`
Why do we need this change?
Why is this change necessary?
I'm wondering if we should add a `offlineMode` option to `express/version.info` to allow users to customize this.
This should be `getAuthMethod() !== 'Shibboleth'`
I'm not sure we need this check. We already have `validateTrustedOperators` that does the same check.
I don't see this used anywhere?
I would prefer if the function was split up into multiple functions. I don't see a reason why we would want to add a new flag.
Please remove this line.
This is a bit of an anti-pattern, but I think it's better than a `c` object.
Why do we need this?
I think it's worthwhile to use a range of the range in the wiki to avoid confusion about the range being too big.
Why is this needed?
Is this used anywhere?
Should we check for `a.CompoundMessage.Proposal != nil`?
Why did you move these?
This should be `datetime.datetime.now().year` and not `datetime.datetime.now().year`
This is not correct. We need to set session->active = false when type is "gone".
I don't think we need this method.
Why not just import this?
Why not use PParam.prefix here?
I don't understand this sentence.
I'm not sure this is the correct way to write this. The value is written in a way that doesn't make sense to me. The value is read in the byte pointed by Index.
I think we need a `.sort_by` here
This is not needed, the metrics are already in a single place.
I think you need to do this in a loop, otherwise you will be calling the unreg callback multiple times.
Why do you need to set `build` to core?
I think this should still return a File, since it's a directory.
Why is this needed?
This will be the number of the block that was unwinded, not the block that was unwinded.
I don't think this is necessary.
Line is too long. [82/80]
This is a bit of a hack, but it is not a big deal either way, so I'm fine with it
You can use `Item::items.isEmpty()` here.
Please log the exception
I'm not sure if we should add a space here, since it's a command line option and we can't have whitespace in it.
This should be in the `else` clause, right?
I'm not sure if we should be using the encryption key here. I think the encryption key is the only thing we need to encrypt.
Can you add this to the docs?
`RDUNUSED_PARAM(n)` is missing.
Why is the port 0 here?
I'm not sure we want to expose the minimum and maximum rate as part of the response body timeout. I think we should keep this as a separate type.
File is not `goimports`-ed (from `goimports`)
I don't think this change is necessary. The `code += "}";` should be in the next line anyway.
Why do we need to block SIGSEGV?
I think we should have an interface for this. I'm thinking about a `FeedFileDownloadStatus` which is a list of downloads and an `Activity`.
I think we should use `long` instead of `Integer`, as we don't want to change the type of `content`
This is the only change. We don't want to allow access lists for the moment, but we want this to be the only case where we want to be able to add a tx with a type of access list.
I think we should have a separate type for these. I don't think we should have 2 separate structs.
This is a bit of an odd place to check if XDP is enabled. It should be in the `if` block above and then the `if err := xdpState.WipeXDP(); err != nil {` block below.
I think this should be a `LOG(WARNING)`, as it's a user facing message, not a user facing error. I think it would be better if this were a `LOG(WARNING)`
Please add a description for this parameter.
This is a bit weird, but it's a nit. I'd prefer if this was done in the `getDefaultService()` method instead of here.
I think it's better to use the `exit()` method.
This change is not necessary.
This is not needed.
Can we make this a class method instead of a method?
nitpick: `expected: 0\ngot: 0` is a bit clearer.
Don't use star imports
This is the only place where the rootless config option is used. It's probably not worth it to just delete it altogether.
I'm not sure this is accurate. I think the intent is to test the case where an aggregation changed to a single column, but it's not the case when the column is an integer.
I think you need to use `cudaMemcpyAsync` here.
This should have a `// +build linux` line
This constant is not used.
This is the number of worker workers. It's not the number of concurrent concurrent rekey workers that are used to send the messages to.
Use 2 (not 0) spaces for indentation.
This should probably be a `<td class="m-status-container-canceled">` instead.
Why remove the empty line ?
I think you need to do `if (typeof model !== 'string') model = model.split(' ');` here, otherwise you're going to end up with a string with a space in it.
This should probably be a flag, and not a flag.
I don't see how this is related to this change.
This is the fix, the other changes are to make `numDocs` behave differently.
Remove unused imports
I think we can use fmt.Errorf here instead of fmt.Errorf.
I'm wondering whether it would be better to have this as a function of certificate, instead of a separate package.
File is not `goimports`-ed (from `goimports`)
I think it's a bit confusing to have this as a parameter, as it's not a parameter of `__init__`, but a parameter of `__call__`.
Why did you change this line from `onView(withText(otherTheme)).perform(click());` to `clickPreference(otherTheme)`?
I think we should set the cluster in the deployment instead of in the protobuf.
Why is this removed?
This should probably be a property on Blockly.BlockSvg, so that it doesn't have to be a global.
I think we should also add this to `Makefile.toml`, so it can be updated.
Why is this change necessary?
I think we should log a warning in this case
Why is this needed?
I think we should remove `role="navigation"` here.
I think this should be done in the controller, not here.
I think you can just use `AnyObject` here.
I think we should do this in the `workspace.scale` case, not in `statusButtonX`.
I think we should also have `POST` for window handle. I'm not sure if there is any way to do this without having to add another command.
This filter is no longer necessary, since we're using the legacy version.
I don't think we should change the flow version. We can use the flow file name and the version as the version string to be consistent with the other flow files.
I think we can remove this line.
This change is not necessary
This is a good change. But I'm not sure what the right way to do this is, as the `/dev/null` is the default.
>if (!WithHeader) [](start = 16, length = 16) why is this removed? #Resolved
Why do we need this check?
I don't think we should be showing hidden lines here, as it will cause a problem for the user.
I don't see any usage of this option.
I'm not sure why these tests are skipped, but they should probably be removed
@smarterclayton is this the correct way to do this, @bparees ?
Should we render this only when there are locked features?

I don't think we need to do this. The directory will be created in the right location if we don't have it.
This change seems unrelated.
This controller doesn't seem to have any tests, so I don't know if it's needed.
I'm not sure if we need this.
nit: this error message should be `worker address does not exist` or something like that
I think we should remove this column.
I'm not sure this is the correct change.
I'm curious why the change to the instanceUrl?
I think you can remove this `if`
I think we should add these to the `SurfaceNamer` interface. I think it is not needed to have these methods here.
This is not used anywhere?
Why not throw an `UnsupportedOperationException`?
This is not a good idea. You can just pass in `response_headers` to `build_base_http_request` as a dict.
I don't think this change is needed.
nit: import order
Why is this file included here?
This is not a good idea. It is a bug fix.
Is it possible to have the same conduit node in multiple threads? If not, I would suggest using a mutex instead of a thread-local counter.
I'm not sure this is correct. If we don't use the prefix increment, then we should skip it.
I think this method is not used.
This is a bug fix.
I'm not sure about this. I would have thought we'd have a `get_exp` function for this.
I think you can remove this.
This class is still in use. It is not used.
I don't think you need this.
I'm not sure if we need to add this.
I don't think we want to check for `nil` here. If `imageAlpha.Deprecated` is not nil, then `len(imageAlpha.Deprecated.StateOverride.DefaultRolloutTime) > 0` will be true and `len(imageAlpha.Deprecated.StateOverride.DefaultRolloutTime)` will always be true.
I think this is the only place that uses NewUUID() - why not use the same?
This is not correct, we should not be disposing the graph summary
I don't understand this sentence.
why are you deleting these?
I think this is a good opportunity to change the `== true` to `if`
I don't think this should be in a separate file.
I think this should be `long Length => destination.Position;`
I don't see where you use this factory
nit: `for (int32_t i = 2; i < 8; i++)`
This is not necessary, `TiViewInfo` is a view table
Should we move the dashboard details app to `root`?
This is the only place that we use the v1 version history, right? So we should just use the new versionhistory.
I think this should probably be an `if`
I think you need to escape `/` in the regex, as `/` is a valid package name.
This should be `Finish` not `Finish` right?
Should this be a `continue;` instead?
I think we should keep this as `noLog`
I think this change is wrong. It should be `.map(ignored -> Stream.<String>empty())`
This is the default value for all scanners. I think you can just remove this.
nit: I think we can just use `fmt.Sprintf("%s", p.String())`
Why is this necessary?
I think we can remove the `@InputFiles` annotation now that it is not used anymore.
I would expect the snapshot to have the same tags as the snapshot itself
Why is this needed?
This is a little confusing. I think it's a flag that's used in the `testnet` package, not a flag that's meant to be used by the `payment` package. I think it should be called `payments.during-session`.
This is the fix. We need the buffer size to be the same as the original size. If we don't have the new buffer size, then the capacity will be the same, but we need the new one. If we have a buffer size that is smaller than the original size we need to copy it. If we have a buffer size that is smaller than the original size we need to copy the original size and then move the new one to the end of the buffer.
Is this a leftover?
This file should be removed from `requirements/qutebrowser/mainwindow/statusbar`.
This is a breaking change. Please revert.
This should probably go in the `modules/setting` folder, since it's a general middleware
This should be `InvalidArgument`
I don't think we should be calling `h2o_sysfn` here, as we are not using `socket` in the code anymore.
The `vk_khr_timeline_semaphore` is not a valid flag for the moment, so it's probably better to check for `!core->device_extensions.vk_khr_timeline_semaphore`.
Can you add a docstring to the `DataFrame` docstring for `percentiles`?
I'm not sure if this is the right place for this. I think we want to be able to do it without the `User.order(:email_address).pluck(:email_address)` but I think that's fine.
nit: no need to create these variables
I don't think we need to change anything here, just to make sure we are not using the old `ncr` client.
I'm not sure this is the best way to do it, but I don't know how to make this work. I think it's better to have a `LivelikeBreakCharmOnInvis` rule that checks if the `formerpet` is indeed the same as the `invisible` rules, so that it can be applied to both pets.
This is the actual fix
I don't think this is the right place to do this. It should be done in the `PlaybackService`
I don't understand why this is necessary, is it just to make sure that the window is still active when we call forceActiveWindow?
Why is this needed?
I think we need a better way to handle this. I'm not sure how to do that.
Why do we want to export this?
I don't see the need for this change, but I think the `Proc.new` is not needed anymore.
Can we add an example for the hotgym algorithm?
I think this is a good idea. We should be able to use a `getNodeFromTree` here, but I'm fine with it.
This is the only change that I'm not 100% sure is needed.
nit: remove empty line
This should happen in the constructor.
This change is not related to this PR.
templates "github.com/openebs/maya/pkg/upgrade/templates"
This is a typo, it should be `.NET Prometheus Client library, and OTel Exporter`
I think this is not necessary, as the `KINESIS_PROVIDER` will be always `kinesalite`
This should not be changed
I'm not sure this is needed.
I think we should not set ignore_index to 255 here, as it will cause the loss to be wrong for negative labels.
I think this is not correct, it should be `// metricsPath is the endpoint of exporters`.
This should be called from `Rule.Apply` and the `Chain.Apply` functions should be called from `Rule.Apply`
Shouldn't this be a `nil` slice, not a `[]string{}`?
I'm not sure if this change is needed. I think we have `doTRegex` for `dot` but not `doT`.
I think this will throw an `InvalidOperationException`, so we should probably check for that instead.
I think this is the right value. I think we want to keep the default value as `cfg.LogHistoryDepth`.
I don't know what this is doing, but is this necessary?
This is not the correct way to do this. The interactive logging is only available in the interactive console. The interactive logging should not be part of the core application.
I think this should be in the `NormalizerException`
This is the wrong id
I don't see any code that checks this spell id.
I'm wondering if this should be an index or something.
This should be false.
This should be moved down with the other `node` imports.
I don't think we should have this. We should be able to use `nupic.support.configuration_base`, and `nupic.__init__` in the `package_data` dict. I don't think we should be adding these files to the package data dict.
I don't think this will be necessary.
I'm wondering if we should do this on a per-network basis.
This is not needed.
nit: `id, metric` is a bit more readable.
I'm wondering if we should have a `encodeLowercaseFields` method in `driver` that takes a bool as parameter. That way we can avoid the bool arg.
I think it would be better to put `enrichContextWithAttemptWrapper` inside `generateFileForCommitLocation`
I don't see any reason for this.
This is a breaking change. We should keep the old name.
I think we should have a `ReadOnlyTransactionProcessorFactory` that is a factory that can be used to create the `IReadOnlyTransactionProcessor`
Should this be added to the hot module instead?
I think this is a little confusing. It seems to clear all files in the archive, but not clear all the contents of the file archive.
This is a bit weird, I think it's better to say `start invoked with a function, not a port (mocha callback)`
This is a breaking change. We need to make it `IReadOnlyDictionary` to be able to serialize/deserialize attributes. This is a breaking change and we can't change the type signature of a public method.
I'm not sure if this should be `finest`. It's not really an `info` level message.
nit: I think we should be consistent in naming these constants `priorityAlias`, `prioritySticky`, `scaleAlias`, etc.
Create transport? Why?
I'm not sure why this is here.
I think you can just use `NewCounter` and `Register` here
Why this change?
I think you need a better name here.
This is a bug, the thread is not unregistered here
I don't know if this should be `HistogramWithMinMax` or `Summary`.
Should we also add the `shouldSkipClientSpan` flag to `HttpClientExcludedUrlSubstrings`?
This is not a BC Break, as the class is marked as deprecated and will be removed in 4.4
I don't think we should change this
Should we use `Datadog-Azure-AppServices-ID` instead?
This is not needed anymore, right?
Should this also be added to `constants/application/x-www-form-urlencoded.js`?
This code is now unreachable since we have a parent connection, so we don't have to do any work.
Please remove this extra line
This will stop the server. I think it is fine. We should stop the pinger. We should stop the server on error.
Why did you remove this?
Why not use `u""` here?
This should be `#A part of NVAccess Limited, Peter Vagner, Davy Kager`.
Why is this test being changed?
This prop is not needed, as it's already defined on the component
I don't think we should warn here, it's not a user error, it's a programming error.
This is not used, so I don't think it's necessary to create it.
Why is this a v1.Service? Is this just for reference purposes?
Why is the slice here? It seems to be the only place that uses it.
This property should be named `VolumeTLP` to be consistent with other properties.

This is not needed, right?
I think it would be more clear to say "auto scaling config can't be unmarshaled into count"
I think we need to check if the cVR is not already pending and if so we should not update the cVR status.
I'm not sure we need to keep this URL. I think the default is the same as the default.
I think it would be nice to have a test for this
This is a good change, but it's a bit odd to me. I would expect the iterator to go in the same row as the `@linkplain javaslang.collection.Iterator`. I would expect it to go in the next row, but not in the first.
Why is this change necessary?
This should be called `servers` to be more specific.
This is not needed
Why is this change necessary?
Is this a left-over from the changes?
I don't think we should do this in this case. We should be able to do this for all the events that are being instrumented.
This should be `proposal_cta` not `view_request_cta`
I'm not a big fan of this. I would prefer to keep the original logic and just use the `$lastname = array_pop($nameArr)` in the else.
This is a breaking change for people using the old `node` package.
This is a bug. It should be a warn.
This is a little confusing, I would say "acs session is closed, but ACS session is closed".
I think we should add a docstring here explaining the usage.
I think we need to check for `mixed` here. If the content type is movies, it's going to show the metadata panel.
We don't need this, it's not used anywhere
`push_front_preference` is never set, it is always `true`.
nit: maybe call the parameter `caseSensitive`?
I think this should remain as is.
I'm not sure this will work, since we're not using the `__flush__` endpoint.
I don't see any metrics for `deals` and `tasks`, so I think we should just remove them
why is this changed?
I think this should be `Pod Failure`, not `Pod Failure`.
I think we should add a `ChainReader` here, and use the `Fetcher` to make the chain aware of the chain data.
"The standard definitions of functions"
This change is not needed.
I don't think this is the correct error message to raise. It's not the same as in `check_and_install_packages_if_needed`, but it's the same error that we should raise.
This is the main change of this PR, the rest is just cleanup of the old behavior.
This name is not very clear. Maybe `REWRITTEN_FILE_SCAN_TASK_SET_ID_FOR_REWRITTEN_TABLES`?
This should be a list of BuildInputs.
This is the only line that actually fixes the bug, but the rest is just formatting.
This enum should be named `TransportType`
`@method tokenList` should be `@memberof axe.commons.utils`
I think we should check for `has-label` attribute here.
I don't think this should be a permission denied.
I think this should be `['attribute']`
I think this is a bit misleading since we are not setting the header. Maybe something like `CustomIPHeader`?
This class seems unused.
This should be a separate test.

Shouldn't the default be `None`?
This should be reverted
This is a good change. I think it would be good to add `None` to the `KeyConfigParser` so that it doesn't try to use the default values.
Why is this removed?
This should be a `uint64`
This is unused
I think we can remove this line.
I'm not sure if this is the right place to do this check. The only place where we call this method is inside the `if a.hasFoundationBonusExtension() {` block.
This is not a `TypeError`
I think the original is correct.
This should be done by the plugin manager, not the plugin itself. The plugin manager should not know about the plugin.
I don't think this should panic, we should just return an error.
I would prefer `bool HPX::m_initialized = false;`
This panic message will be confusing for the user. Maybe something like "Cluster %s: RPC address is empty", ClusterName?
This import is unused.
should we use the new instance instead of the one with restartFds?
Should this be `ctx.getReport().removeListener(configuration.getAnalysisCache());` ?
This is a breaking change, right?
This is the fix.
I'm not sure if this is a good place for it to live. I think we should just move the feature check to a separate method, and call it from the `puppet_agent_agent` validation method.
Is this really necessary?
Why not `comment` here?
This file is auto-formatted by IntelliJ, we try to avoid it.
I'm not sure this is right, since it's not a state change, it's just a state change.
I think this is the only place where the m_al_comms are used.
I think you can just do `return Instance.QuoteValue(type);`
This should return the address of the underlying client connection, or `nil` when no address is available.
Why is this changed?
This is a bit of a misnomer, since it's not a slug.
I think we should still be able to toggle this
nit: can we call this `automationPolicy`?
I don't think this is the correct way to do it. The `options` object is passed as a second argument to `super` and the `credentials` object is passed as a third.
Should we add a note here that this option will be removed once the feature flag is removed?
This is the actual bugfix.
This is the only bundle that needs to be removed
This should be `final`.
I think we should log this error.
I think it's better to keep text/plain for now.
I'm not sure if this should be 0x2, but the original was 0x1.
Is there a reason we are using resource updates where applicable?
I think you need a `failFast` here.
This is a bit confusing to read. Why not `if ariaCurrent:`?
I don't think we need to change this message, it's a user-facing error, not an error. We could just change it to something like "given multisig preimage hashes to neither Sender nor AuthAddr, but got..."
Shouldn't this be `HttpHeaderNames.TraceId`?
I think this should be "Execution not created."
This is not needed.
This is the same code as in the file.js file
Why did you remove the comma?
I think we need to use `assert` instead of `if` here.
This is a bit of a nitpick, but it's probably better to use `.fetch` here.
I think we should also add a `source_hash` here.
nit: I would put this import in the same group as the `aws` imports
I think this is missing the `@return` annotation.
I think this should be an `AttributeError`.
This is not needed, as it's already included in `Kokkos_CudaSpace.hpp`.
This should be private. The reason is that this is only used internally. The only reason for this is because the index is not being used outside this class.
I'm not sure if this is a useful log message.
This is a bit of a misnomer, as it is not a span of a byte. I would suggest to rename it.
I'm not sure if this is needed.
I think this should be `@param [Integer]` and the default value should be `NOT_GIVEN`.
This is the only place where we need to remove the plugin from the plan.
Why did you change the order?
I think you need to remove the `Jakub` line here as well.

I think we can just remove this line. It's not needed anymore.
I think it should be `big.Int`
I think it would be better to use `q.getRChannel` instead of `q.channelPool.LoadOrStore`
I'm not sure what `db` is here, maybe `dbType`?
I would use `recyclingInstructionsToDeleteDiscard_fr` and `recyclingInstructionsToDeleteRecycle_fr` for the field names
Why do we need this one? It is used only once.
Should this be a pointer?
I think we should rename this to `nodeTransportIPv4Addr` to match the new variable name
This change is not related to the PR.
I don't think we should be using `link_hovered` anywhere else. I think it should be `link_hovered_url`?
I think you can use `find_by` here instead of `find`.
Please remove this.

I'm not sure about this one, but it's a float so it should be `int`.
Why remove `final`?
Why do we need to change the name?
This class is not used.
I think we should use a regex here instead of a regexp.
This is a behavior change, but it's the same as the other change, so I'm not sure it's correct.
@jtkech @jtkech I'm not sure about this TODO. It's not clear to me what the issue is. I'm wondering if we can remove the A and B here, but then I think it should be `A, B, B` and then `C` should be `C, A, B`
Why is this necessary?
This is the default TTL. I'm wondering if we need to change this. I think the default TTL for the write lock should be the same as the default one. The default value for the batch write lock is already 3 seconds.
This should be `result = on host, facter(name, opts)` to avoid an extra `chomp`.
Why is this change necessary?
I think this should be in the optimizer.py file, as it is not used in other files.
This looks a bit weird. Why is this needed? Why not use the reference?
This is not the same as `c.setState(newType.getDerivedStateFromProps(newVNode.props, c._nextState));` but I'm not sure if it is a problem or not.
This is the only change that is needed. The rest of the code is just refactoring, so this change should be safe.
I think this is a good candidate for an enum, but it would be nice to see the error message in the `else` case.
I think this is a bug. The `group` argument should be `nil` if it's not a string.
I think it is okay to increase the max size of all the stats.
Nit: `_` prefix is not needed.
Why is this necessary?
This should go back down
This is a very bad idea. We should be able to get rid of this.
I'm not sure if this should go in `config/environments/environments.rb` or in `config/environments/environments/environments_defaults`.
Shouldn't this be `getSiteInfo`?
This is the only place we need this option. We can remove it from the `buildoptions` list.
nit: "this will attempt to be loaded lazily the first time you call SignedURL."
Why not just initialize this in the header?
I think this should be `if target.name == desired_group`
This is the error message that was logged before, but now it's just a "warning" message.
Do we want these to be public?
I think we should use `_` instead of `tt` for consistency.
I think this should be removed now.
I think this should be a warning. We should be returning the error and returning the error to the user.
This file is missing a newline
This is not necessary, the `prefs` variable is always set to `false`

I think this should be "location".
Can we call it just `allAffectedIDs`?
Why remove this?
I'm wondering if we should just make this `@return [Array]` and not have to pass in `colorizer` as an argument.
I'm not sure what the purpose of this class was, it doesn't seem like a good idea to have a class that's only used by the snippetset runner. I think we can keep the snippetset runner and move the code to the generator.
I don't think we want this to be a global variable, since we're going to be creating multiple policies per rule.
Why remove the workqueue?
This is a bit confusing to me, since it is a boolean, but the telemetry is initialized at the engine start time.
I'm wondering if we should add a `TimeSpan` parameter to the `TimeSpan` class instead?
This should be a separate commit
I'm not sure about the naming here. I would prefer `notary` instead, and `notaries` instead.
I think we can remove this line. It's not necessary.
Why is this in go?
I'm not sure this is the best approach to check this. The `startKubelet` function is called in `startKubelet` so it should be fine to just return an error if `DisableKubeProxy` is false.
This is a new line.
This error message should probably include the account name.
nit: I think we can remove this blank line
I think we should remove these lines.
Use `||` instead of `and`.
This file is now unused.
Please remove the `;`
I don't think this is a good idea to change the type of this field. The original file is not the backup file.
Please remove the empty line.
This is not necessary. You can use the `default` value for this column.
I don't think we need to ignore the error here.
I think this is not necessary.
I don't think this will work. The host is not a string, so it will be a list of strings. You should use the `if ':' in host:` above to check if it is an IPv6 address.
Can you please add the issue number?
I think this is not needed anymore.
This is a bug fix.
This should have `spanContext` too, right?
Why is the `verdaccio` prefix removed?
This was a bug. The `enableAddons` was always false.
I'm not sure if this is the best place for this. The user should not be able to specify a date range.
Why this change?
I think this is a good candidate for a helper function
I don't think this change should be in this PR.
I think it would be more readable with the previous code to have a separate variable `timestamp` and `parentTimestamp`.
Metrics/LineLength: Line is too long. [82/80]
I think this should say "You can't delete any item. You should modify the existing item."
I think you can use the `switch` statement instead of `switch cMsg.(type)`
This is a public interface, so it's not really clear what it does.
I'm not sure why we need to delete the hive instance.

This is a bug fix, we should be passing the session ID here
I think this will panic if `s` is nil, since `s.scope.SecurityGroups()` returns nil.
This is a bit weird to have the function name in the error message, but the error message is a bit confusing to me.
I'm not sure if this should be "dropping" index.
I don't think we need this constant, since it's not used in the code below.
nit: can we use the constant defined in `server/http` instead? It seems to me like the same constant exists in `server/http_test.go` and in the test file `server/http_test.go`
I don't think we should do this here. We should be able to use `--global` to add it to the `docker` command.
This is a pretty long wait, so I'm not sure we need a timeout for this.
This will raise a RuntimeError, but the file will not exist.
I think this is not necessary, `os.Path.Join` does the same thing.
I think this should be `style={ { marginBottom: 0 } }`, since the `ExistingTagNotice` has the same style as the `ErrorNotice`.
@jtkech this is the fix
I'm not sure if this is the best way to do it. It looks to me like it's going to break if we ever move to the `forwardRef` hook, and then we have a lot of code that's duplicated between `forwardRef` and `vnodeRef`, and I think we should keep this.
Why remove this?
This is the same as above, right?
I think it's better to use the `check_scrolled` function here, as we're using it for both.
Why is this changed?
I'm not sure why we need the import here. I think it's better to import `*` and use `*` everywhere. I think we can remove the imports entirely. I don't think we need to import `*` in the code.
I think we need to save the file to the cache here, not the lambda.
nit, `icmpPkt_with_type_code` -> `icmpPktWithTypeCode`
Why do we dispose this?
Why did you change this? I'm not sure if it's a bug or a bug fix.
This is not correct, because it will be the same as the master.
This is a bit of an odd name. I'd rather call it `_get_class_from_qname`, since that's the more common term used in the codebase.

This is a bit of an odd place to put this code. I think it should be in the AzureResourceModelManager, not here, since it's not used for anything else.
I think we need to keep the `plugin_hooks` as it was before
Why do we need to change the `-1` here?
I don't think we need to check for `Integer` here. `Long` and `Integer` are both `Long` and `Integer`. The code will be the same if you pass in `Long` and `Integer`

This is not the correct place. The `tmate` command is in the `lib` directory, not the `tmate-io` directory

I think we need to skip this test.
Why not return `*cid.Cid` instead of `[]byte`? It seems more consistent with the other methods
I don't think this is the right place to put this code, as it's not really about the cache itself (it's about the cache itself). It's about the block cache itself, not the dirty cache itself.
I think we can remove this line
I don't think you need this check anymore
I think we should check if the file exists before removing it.
I don't think this is correct, we should be able to get a ChooserStatus with a single PeerStatus.
Can you use a const for this value?
I think we should add this to libcalico-go
I think this should be `HeadTipSetAndState`
I'm not sure if we should be doing this. I think it would be better to have a separate file for the settings file and then just ignore it.
This should be a separate test.
This is not a warning but a warning, right?
Is it worth adding a TODO to make this more obvious?
import (
Why change this?
Why do we need this change ?
I don't think this is right - we are using `nvidia` for ECS. We should be using `ecs-nvidia` for GPU and `ecs-gpu` for GPU.
This change seems unrelated to the PR.
This should be `static bool`
I think this should be a warning, not an error
This is a breaking change, we should not be changing this.
This function should be removed
This file is not necessary.
This import should be in the `luigi-interface` package.
I think we should just remove this line, since the type is already int.
This should probably be a `return Status`
I think this is a good opportunity to use `assert_equals` to ensure that the path is absolute, rather than `isabs`
This is not necessary, you can use jx_get_select_expr() instead.
Why not `return values().stream();` ?
I don't see the point in having this method, since we already have a `printResponse` method.
I think this can be a little confusing. The password is encrypted, and the private key is created if it does not exist. I think we should just say that it is not encrypted and created if it does not.
I don't think this should be a `Package` entity. It's a `Class`. It's not a `class`, it's an `entity`.
This is a breaking change, right?
Is there any reason to not just check `err`?
I'm not sure why this test was deleted?
I think this should be a debug statement.
I think we should add a check here that `requester` is `nil` or `user_full_name` is `nil`
This is the only place we have to do this check. The only place it is called is the `getFormID` method, which is called by `FormHandler` and `FormManager`.
This will be a lot more readable with a `for` loop.
I think it's better to call this windowMinimize.
This will need to be changed to `RSpec::Core::Random` in a future PR.
Should we return `net.Unspecified` here?
this is the only place where consensus.ProcessTipSet is called, it should probably have a default implementation
I think this should be `ASSERT_NOT_TESTED()`
I don't see this being used.
This should be `#if !NETSTANDARD`
I think we should just use `distutils.spawn.find_executable('linode')` here.
This is the only change that needs fixing.
Should this be `--ignore-chromium`? I'm not sure what `chromium` is supposed to mean here.
Why are you setting these here?
This method was unused and can be removed.
I'm not sure why this was changed?
This is a bit misleading. It's not really the full namespace paths of imported types. It's just the paths to the namespace of imported types.
I think this should be `u.Query()`
This should be a link.
I think you should use the `log.exception` method.
I don't see this middleware being used.
nit: can we call this `tracerProvider`?
I think this should be `forseti` instead of `grpc`?
This import is not used.
I think this should be a property of `IConnectionLifetimeNotification` rather than a property of `ConnectionClosing`.
We should be consistent here and say that the type is either http or dns-01. The other two are not.
This is not the same. You should pass the options as second argument.
Should we also add this to the `rpc-http-server.properties` file?
Why not just `RenewAfter`?
I don't think this change is correct. `t == to` is equivalent to `t.equals(to)`.
I'm not sure if this is correct. I think we need a better way of handling this, but it's not clear what the `labels` are. I think we need to have `labels` as part of `labels` and then use `labels.Set`.
I'm not sure we need to add this here as the pipeline is already in the `cicd/pipeline.yml`
I think we need to add this in the `pylint` fixture as well, otherwise the test will fail.
Can we use `JsonPrinter.jsonAsDatasetDto` instead?
I think we should add the command to the description of the method.
I think this is a bit misleading, because the disk block cache is only used for disk caching.
This is the fix for the failing test.
This seems like it should be in the `if` below, right?
This should be a warning.
This is not needed anymore
nit: I would prefer not to modify unrelated files.
I don't think you need the instanceof here.
I don't think this is a good idea, we can undo the entire bitmaps.
This should be 2019-2020
This is the only change in the code, the rest is just formatting.
I think this is not necessary. The state db is already readonly.
I don't think we need to mention that `newModifications` are indices in the collection, since the collection is immutable, so we can't change them.
This is a bit of a misnomer, as it's not actually a signed URL.
I think it is not needed to add a parameter here. The constructor will do the same thing.
I don't think this should be changed.
This test should be renamed as well
This is a bit confusing, as the summary element doesn't have the `summary` class.
I think we should use the `MvxAndroidLog` type directly here instead of using a static field.
I think these should be in a separate file. They are used in a few different places in this PR and I think they should be moved to the ACMEChallenges class
I think this is fine, but it's not a big deal since it's a constant.
This is a bit of an odd name for a struct. I'd rather see a name like `environment_struct`, or even just a name that describes the purpose of the structure.
I think we should have a test that verifies that the paginated results are returned correctly when the page is exhausted
nit: I think this should be `this.deleteManifests = deleteManifests == null ? new ArrayList<>() : deleteManifests`?
This is a bit weird. We are creating a new checker each time we create the collector, so we can't just pass the global threshold checker around.
This should be `antrea.io/antrea/pkg/agent/openflow/config`
This extension method should not be needed.
This is a bit of a misnomer, because the value is a big number and the value is a number. I think the name should be `Gas price must be a multiple of 1,000,000wei`.
This should probably be a `void OnProcessExit();`.
I'm not sure if this is the correct way to handle this. If we want to handle the exception here, then we need to make sure the `print()` call is done in the `except` block.
Should be `customize_theme`
This is not a good idea. It's a component that is not used in this context, so we can't render the help menu here. We can remove this component, and the `HelpMenu` should be rendered inside the `Header` component. This is because the `header` is not used anywhere else.
This should probably use `host.dig(:netmask, :private_network, :ip)`
This should be a `const` as it's not being used.
I think this is a bit confusing to users - I would expect the default value to be 'upper' and 'lower'
I'm not sure about this one. I think it's better not to remove it if the key is already in use by the user, because it will be removed by the user, and we can't do it in that case (as it is now)
I think we can remove this import
This should be "allow"
I don't think we should be changing the error message.
I think we can add this to the list in `CollectionConfigAdmin`
Why this change?
Please add the following example:
I think we should check if `! ConfigQuery::isStockAvailable()` instead.
Why not `T stride[4][4]`?
I think this needs to be `__({}())` instead of `min({}())`
why did you change this test case?
I don't think we need this file.
This should be renamed to `configCollection` to match the other properties.
Can we also check the `status` here?
This is a breaking change. We can't do that without breaking any existing users.
I think this function can be removed too
Why did this change?
This interface is not necessary. It can be inferred by the rule violation.
This is not correct, it should be `inc_dir = opt[2:].strip()`
Please add a trailing comma.
Why is this needed?
This is not the right place to put this. This is the only place where we have to do this. The parser is already doing this for you, so you should just add it to the exception.
Why not just use the new method in `AbstractNode`?
This is the only change that is necessary to make the tests pass, so I'm not sure if this is the best way to go.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think we want to check for `---` and `#`, we can just check if it is a `--`
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
This will be called on every packet, even if the target is the same, which will lead to a crash. You need to check if the target is the same.
nit: I think this is unused
I don't think we should do anything here, this is a bad API.
nitpick: I'd move the `if` statement to be before the loop. That way, if the function call doesn't have `near`, we don't need to split.
This capability doesn't seem to be used anywhere.
This should go into a new block in `goimports`
I'm not sure about this change. The `AddRepositoryDialog` should be responsible for initializing the owner, so the owner should be the one that was passed in. The `initOwner` should be called on the dialog itself, not on the parent.
I think we can remove the line.
This is not necessary, as `ds.colNames` is empty anyway.
This test is now redundant, since it's already covered in the `test_completion_item_focus_no_model` test.
This is the only usage of this reducer.
Please add type hinting for parameters: `capacity:` Please also add type hinting for return value
This is a typo, it should be caution
This is the only change I'm not sure about. I think we can keep this as is, and just add the `transform` in `setupTests.ts`.
I don't see the value of this message. What does it mean to export a key for a non-existent account?
>CRLF [](start = 24, length = 6) I think we can remove it, since it is no longer used. #Resolved
This is a public method and we should probably remove it.
This is the fix. We don't want to deliver the welcome notification if the other org doesn't exist.
This change should be reverted. It is unrelated to the PR.
this is the fix for the bug
I'm not sure this is needed. The error page generation should be disabled by default.
Why was this removed?
I'm not sure why we need to disable this rule.
Should this be `len(values) == 0`?
This will panic if `err != nil`.
This is a breaking change, as it would break existing applications that use this API.
I think you need to check `oldTimeIntensities != null && oldTimeIntensities.NumPoints > 0`
I'm not sure if it's a good idea to return an error here. If the claimJWT is empty, it should not have been validated.
Why is it called helpers? It's not a plugin helper.
You can just check for `!(spec.must_learn & 0xf) && spec.has_learnt` here
I don't think we want to add a copy here.
I don't think this is an error.
This is the actual change. The rest is just refactoring.
This is not needed. The `CacheChange_t` is a pointer to a struct.
Why not just call `Dispose()`?
This is not needed
This change is not needed.
I'm not sure if this is a safe change or if it should be a separate PR.
struct field ReferralCode should be ReferralCode
I think this should be called DefaultHttpContextName, to make it clear that this is the default.
This assertion was removed because it's not true that the `arrayLength` is greater than the `groupSize`.
This should be a separate PR
I think this will break the API.
I'm confused by this change. Why is this needed?
I'm not sure about the naming. Maybe `_isHiddenWithCSS` would be more appropriate?
"the" -> "the"
I think we should also handle `ERROR_CONNECTION_RESET`
I don't think we need the `doSync` flag. The caller can just use `brq.blockCache.GetBlock(ctx, ptr)`
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
Why is this changed?
This is the only value that needs to be set here.
I'm not sure about this, it seems a bit strange that this is a global variable.
I think this is the right change. It should be repo, not owner.
why do you need to change this to a pointer?
This is a bit of a nitpick but I would expect a `stub_hosts_on_api` or `stub_hosts_on_forge_forge_api`. I think the former is more clear and consistent with the rest of the codebase.
Can you add a note about why we are doing that?
I think this should be a warning.
I think it is better to pass `device_data` and `queue_state`.
This should probably be done in `newRequest` instead of here.
I don't think we should change the behavior here - it's a test that should not be run in debug mode.
I don't see this method being used?
I think this is unnecessary.
I don't think we should be adding a new field here. We already have a `DeviceID` in cni.go
This is not a good idea, it should be a regex.
Please add space after `=`
I'm not sure if we need this function. It seems like we can just use `window.getComputedStyle(actualNode, null).display` directly.
I would call this APPLICATION_ID
I think we need a more specific exception here. What is the error that can be thrown?
This is the actual fix, the rest is just cleanup
I'm a little confused by this. Why do we have a BUILD file?
Should we log something here?
I don't think we need this method. It is only used in `mergeData` so we can just return `null`.
This is a bit weird. Why is this needed?
why remove this?
I think this should be package-private.
This is not a new line, but the line break is a new line.
This should be `private readonly`
I think this should be kept. It is not a valid check for a scan node that is not a first-n node. The scan node should not be used to determine the scan type.
I think it would be better to just use `getStreamShelvesClientTypeName()` here, since the name is not the same.
This is a bit confusing, since the `padding` prop is the same as `...widgetComponentProps` in the `WithTestRegistry`, but it is not the same as `...widgetComponentProps` in the `DashboardWidget`.
Why did you remove the `const` here?
I don't think this is needed, as we don't want to change the meta data for the checkpointing.
F401 'socketio' imported but unused
I'm wondering if this should be a test that verifies `proposal.eligible_observers` is not `[]`, since it is an array of objects.
This should be a `AccountStateByHash`
I think this is a bit of an odd name. It's not a notification but a notification. Maybe `has_approval_notice` or `is_approval_notice_approved`.
I would suggest to call this `TracerTimeoutSeconds` to match other config items.
Can you please rename to `iconUri`?
This needs a `required:"true"` too.
Why is this change necessary?
This is not the correct way to do it. The `http://` prefix should be the same as `http://localhost` and `*` should be the same as `http://localhost:8080`
Why was this removed?
This should not be here, but rather be a pointer to a struct with the fields.
I think we should be consistent in naming this `OneKiB` or something like that
This is a breaking change, please revert
I don't think we need this variable anymore.
I don't think this is correct. The value should be an int.
`$this` can be `null`
I think it would be better to use `Azkaban-Flow-Node-Type` instead of `flow`
This is the only change in this file.
I don't understand what this does?
I think this should be `isValidDimensionFilters` since it's a boolean.
Why do we have this? Isn't it the wrong place for it?

This is the only thing that I don't think is correct. We don't allow renegotiation for HTTP/2, and we want to allow the renegotiation to be disabled by default.
Why this change? I think it was correct before.
I don't think we should add this blank line here.
I think it's fine to just return `null` here and return an empty predicate.
This is the only thing that I'm not sure about. I think it should be `if 'ctu_phases' in args:` or something like this.
nits: I think we could just inline `NewEmpty` here
I think you can use `getSerializable` here
This is not a good way of saying that the option is not supported.
Why do we need this?
Why are we removing these tests?
I'm not sure about the `in_progress?` here. I think it should be `incomplete?`, right?
Why was this removed?
I think this should say `--template`
I don't see where this is used, is it needed?
This is not needed
Why this change?
I think we can remove this line now.
This will need to be updated to use `<%= render 'shared/flash_msg' %>`
This should be a constant
Should this be an exception?
I'm a bit confused, why are these if statements being removed?
This should use `toMatch` instead of `new RegExp`. Also, `toRange` could be renamed to `dateRange` or similar.
This is the fix
This should be added to the top of the list.
I don't think this is needed
This should be "opae/enum_int.h"
I'm not sure if this should be in the `pkg/acme/` package or in the acme/client.go
Why do we need this?
Why are we changing the color?
This is the fix.
Is this copy necessary? I don't think we're doing it anywhere else in the function, so we can just do it in the copy.

This should be using `activityCardController.update` (the controller is not the main controller).
I think we should just make this `forseti` and not `forseti-security`.
I think we should check `cap(cnb[0]) >= int64(len(cnb[0]))` instead of `n >= int64(len(cnb[0]))`. If `cnb` has a length of 0 and cap is greater than `n`, we should not replace primary or secondary buffers.
I think this is not needed
Should we add the `Peers()` to the `Peers` type?
This is a good example of why I'd like to see a linter check showing this change.
I'm wondering why we have a separate `CacheKey` for this?
I think this should be `str_param`
This is the same as `UserAgentString(api)` in `pkg/grpc`
We don't need this, we already import boto3 in `dagster/utils/boto3.py`
I think this should be `if (stopped)`?
This is a bit weird. I would expect that we should have a `future_chainAddEdges` and then call it with `future_addEdgesAtomic`. But that's a separate issue.
nit: import order
I think this needs to be a pointer, otherwise the secret manager will not be able to find the instance in the system.
Is this intentional?
This was added in #4740.
This is not needed anymore.
Why do we have this here?
I don't think this is right. The `system_approver_emails` will always be there if the user is pending and we don't have any approvers.
This is not needed.
This is a bit weird. I think the default is False, but if it's False, then it's not a problem.
Why not set it in the constructor?
Why is this class public?
You should also remove these entries from the map.
I think this should be `GET,POST` and `PUT,DELETE,HEAD` instead of `GET,POST,PUT,DELETE`.

I'm not sure why we're changing this.
This should be `BASE64_NO_METADATA`
I don't think this should be changed
Layout/TrailingWhitespace: Trailing whitespace detected.
I think this is a good change. It's not clear to me why this change is needed.
I don't understand why you need a module here.
I think this should be `ssmfactory` (without the `S`).
I'm not sure if it's worth it to have a variable for `export` in this case.
Please use the `assert` decorator. This is more readable than the `pytest.mark.parametrize`. Also, please use `pytest.raises` instead of `assert`.
I think this should be `ops.current().spec().replace(...)`
I think it would be better to use a strict comparison here, since it's a bit more strict.
`that` -> `this` (or even `that`).
This should be `<-ch`
`ASSERT_TRUE(target[2].port () == system.nodes[1]->network.port)`
Can we use the constants defined in Access.java?
Why did this get removed? It's not obvious that it's safe to assume that the Activity has already been restored, but if it did, we'd want to be able to set it again.
This is the only place where we need to start the network, we can just call `i.Start()` directly
I think we can just use the command as the cache name, since we don't have a command to cache.
nit: you can use `isNaN` instead of `isNaN`
Why is this needed?
I don't understand why we need this function? Can we just use the existing `convert_tensor_type` function?
This should be `opts.generate_object_based_api || (opts.generate_object_based_api && num_fields < 127)`
I think we need to keep this as it was
Why not `Enum<T>`?
Can we use the config file to make it clearer that we are using MPI4PY_Comm?
nit: add a new line at EOF.
I think we need to add this to `startupshutdown.go` as well
I think it would be better to pass the timeout into the function and use it to check if the ping is over the timeout.
This is not a good idea. It's not the only place we need to do this.
This will not work if there are multiple approvers, as the `approvers` will be an array of users that are not pending.
I don't think this should live in `tasks` since it is only used in `tasks_runner`.
Why this change?
This should be a `const`
This is not used.
I'm not sure about this change. I think it's better to leave it as an empty array and set it to nil when the class is instantiated.
I'm not a big fan of this namespace. It seems like we should have a more generic name, maybe CrossPlatDiscovery or CrossPlatDiscovery.
I don't think this is the right place for this flag. If the user wants to suggest a block, they can just use `AddSuggestBlock` to add it, and if they want it, we should not add it to the list of suggests.
@joshcooper is it possible to use `findstr` here?
I think you can remove the import of pytestmark.
I think we should add a `[Category(Category.Category.CategoryTest)]`
I think you can use `class: 'col-xs-12'` here instead of `style: 'width: auto'`
I'm not sure whether it's better to do this in `copyTableWithRowId` or `copyTable`?
This is a bit of an anti-pattern. It would be better to have a function that takes a pointer to an ROMol object, and returns a pointer to the pointer.
I'm not sure this is needed

Please revert these changes.
I think this is not the right error to raise. The `zero_count` argument is required.
This is not right. The name is the issuer, not the account name.
This is a bit of a misnomer, because `GroupBy` does not support groupby.
This import should be moved down
I think we should still keep the error message. It's not clear what it's about.
nit: `table.name().concat(".all_data_files")` is a bit shorter
I don't understand this error. Why do we need to check `limit` and `perDocumentLimit` at the same time?
I'm not sure this is the best way to do this - I think we should have some kind of "proxy" interface that is more generic, and then we have a "provider" and "consumer" interfaces that are specific to NAT.
Please remove empty lines.
This is a bit of a nitpick, but I'd suggest to use the `<p>` tags for these paragraphs, so that it's clearer that the text is the same as the `</p>` tags.
If this action fails, the execution must be failed.
This should be `/favicon.ico`
Shouldn't we log something here?
This seems to be a breaking change, as the API is public.
I think it would be better to use `write.metrics.column.` instead of `write.metadata.metrics.column.`
This test is failing on my system, as `pd.DataFrame` has a `columns` attribute. I think it's better to just test that it works.
This import is unused.
I don't think you need to add this here.
This test is not necessary, since we are validating the duration in the spec.
I think we should be more explicit here, saying the valid range is in the range [0, 255).
I think it would be more readable if we just used the `request.url()` method here.
Nit: I think this should be "ActivityCreatedByHttpInListener"
I think we need to move the unlock up to the top of this method.
I think you should return `o != 0` here.
File is not `goimports`-ed (from `goimports`)

This import is not necessary.
This seems to be a bit of a weird way to do this. Can we not just call OnStart in `startSpanInternal` and have it return the `spanProcessors` map?
nit: `Unable to update snapshot list details in cvr %s status: %v`
This is a behavioral change. The old code returned the rate limit of 0 when in debug mode.
I think this test is not necessary, since the error is expected to be `CannotPullContainerError`.
I think it should be "name such as Europe or Overseas".
I guess these assertions are not required anymore.
This panic message is a bit confusing. It's not clear what the error is.
I think it's worth checking the error message here.
I don't think we want this.
I don't think this should change.
This was the bug that was fixed in #491.
Why is this call needed?
Should we also skip this if the feature is disabled?
I'm not sure if we should do this, as we don't want to make the function call a decorator
I think this needs to be `$ephemeral_directory/library/`
This is a bit weird, but it is not the only place that uses it.
I think this is the only place we need to do this. `child` is a string.
Should we add an `else if` here?
This will panic if `ds.GenericDeploymentConfig.DeploymentNotification` is nil
I think we need a more descriptive name than `_address2`
Why are we changing to `finest()` here?
I think this is not the best test, because it will fail if you pass in a lambda function that takes a scalar. I'd suggest to keep the original test, and use a lambda function to make sure it's not called with a scalar.
I'm not sure if this is the best way to do it. The `executable_extname` is the same as the `executable` in this case. The `executable` argument could be a `Pathname` or `File` object.
I think we should remove the `@return` here.
Why did you change this test?
I think this method can be removed now.
I think this is a bug fix.
I think we should use the `accountID` here instead of the `accounts` object.
This should be in the `add_target` method, since the targets are already removed from the resolved targets hash.
This is the fix. The code is not always null.
We could probably remove this check, since we already have a `len(targets) == len(values)` check below.
I think this is not needed.
I think we need to add `Index` as an argument here, otherwise we'll end up with an index of `0` which will result in an error.
I think we should just do `Array.isArray(tmp)`
This is a breaking change, right?
I'm not sure this is the right way to do it. The `Facet` class is a singleton, so I think this is a BC break.
I don't think you need this import.
I think this should be `isinstance(node, str)`
This is a bit confusing, as the path can be a directory, but the path can be something like `/foo/bar/baz/c`.
This method is only used in tests, and I think it's better to move it to `TestSnapshotUtils`, since this method is only used in `TestTable`, which is not related to the test itself. Also, I think we can remove the `Table` parameter and use `snapshotIdsBetween(long fromSnapshotId, long toSnapshotId)` instead.
This should be `updateHelpText`
Why did you remove this? I think it's a good idea to keep this as an option. I'm not sure how this is supposed to work, but I'm not sure.
I'm not sure this belongs_to belongs_to is the right place to add this. I think we should just add it to the `Flow` model.
This is not a good test, because the `_get_message_state_scope` function should be called by `linter` as well, not by the `linter` instance.

This is the same as a `StaticState` class, but with a different name, it's not clear why it's a class.
I'm not a huge fan of this, but I guess it works.
I think it would make sense to have a function that returns the number of streams in the fragment, and call that function in all the places where we call this function, to avoid the extra function.
This was the only usage of `SetDefaults`.
Should we add a check that the value is between 0 and 19? Or is this a bug?
I don't think we need this, we can use the `Client` type from the `dto` package
This should be `Either.left(new Exception("error"));`
I think this should be `omitempty`
I think this is not necessary, since the `external` path is already present on the host.
I think this will be a problem if the user sets a signing key that is not in the old list?
I'm a little confused about the difference between `send` and `sr1`.
I think this is not the correct way to do this, it should be handled by `$this_class_name`.
I think we need to add this to the `requirements.txt` file as well
I'm not sure if we want to rename this property. It's a little confusing because the property name is `JsonSerializerSettings`.
I don't think this should be a POST, it's not an upload, right?
I'm not sure if this is the correct place for these.
This is the only place we use this function. I'm pretty sure this is just a cleanup.
I think this should be `assert.NotEqual`
This change is because of a previous change in the signature.
Why is this needed?
This change is unfortunate. We should not be changing the event modifiers.
I wouldn't add this, this is a new class that is used by many apps.
This should be `ErrIncorrectAddressFormat`
I think this should be `[4, 4, 4, 4]` since the start of the range is 4.
Why do you need this?
`root_a` is not used, please remove.
I think it's better to call it "hideFinishButton"
I think this should be a separate function.
Why is it necessary to change the type of `logging.Level` here?
I think we should use `Array.prototype.forEach.apply()` instead.
Why is this needed?

Is this the tag of the block that was marked?
I think it's better to keep this as is and add a new `IF NOT EXISTS {table}` in `create_marker_table.py`.
This is a bit of a nit, but the name `ASTAnyTypeBodyDeclaration ` is a little confusing. I'd prefer to have a more specific name, e.g. `ASTTypeBodyDeclaration`.
I think we should call this `TIMEOUT_SECONDS`.
This is not a good idea to add a default method. The name method should be implemented in the `TableMetadataProvider` interface.
I'm not sure this is a good idea. I'd like to know if we have any other way to do this.
I think you should rename the file to something like `addons_test.go`
I think this should be in the admin namespace, not the admin.
I'm assuming the slice is a slice of strings?
I think this should be `isIterableToArray` instead of `iterableToArray`.
This is a bug fix.
This is a bit of an odd way to do this, but I don't have a good suggestion for a better way.
Why is this change needed?
I don't understand why we need to load the roles into the cache here, it seems to me that the roles are already cached in the model and we don't need to query the store again.
This will not work. You need to find the first ancestor of the form tag, and then find the first sibling of the form tag.
`if (core != null)` is enough
This is a bug fix for the fact that we didn't inject `__dir__` in the first place.

This is a bit confusing, I think we need to make it more clear that this is a token with a single segment.
I'm not sure if we want to retry this. If we want to do so, we should be able to use `-f pom.xml` instead of `./gradlew` to make it easier for the user to run the test with the `gradle` command.
I would prefer to use a more generic name, like `iceberg.source.reader.split-record-batch-size`.
Nit: unnecessary change
This is a typo, it should be "UpdateServerCertificate" not "UpdateServerCertificate"
I think this should just be a `identity_selector.NewHandler(di.IdentitySelector)`
I would prefer a more descriptive name, e.g., `DISABLE_JSON1_FTS5`, to make clear that this is for FTS5 only.
If the login server was not configured, we should not throw an exception, right?
Please remove the extra lines.
I think it's fine to leave this as `info` as it's not really an error, but it's a good thing to keep it `finer` for the moment.
I'm curious why this changed.
This should be in the `install` package.
better to add kernel_function_rbf_kernel_oneapi, kernel_function_gpu.cpp, kernel_function_gpu.cpp, compute_kernel.cpp
Whoops, I missed this.

I don't think this is the right place to handle this exception. If we do not do anything - the logout go through.
This is a little bit confusing. The mockapi has the connection and the mock is the connection. The mock is connection.
I'm not sure this is the correct way to fix the issue, as it will not be caught in the `ensure` block. I'd rather keep this as is, but add a note that it is a no-op, and the metadata has already been set by the `skip` method.
I think it's better to move this to the `setItemVisibility()` call above
I don't think we should remove this. It's not used in any of the tests.
Why is this needed?
This is the same as in `BlazeMeterReport` - can you extract a method?
This is a good change. I think we can just remove the `now` function. We should just test the timestamp directly.
This is the same as the previous code, but it's better to use `sscanf` instead of `strstr`.
I'm not sure this is necessary.
Is this intentional?
I don't think you need the TB flag any more.
This is a bit confusing, since it is a generic error that can be used to indicate that a parameter already exists. Maybe we can rename it to `ParameterAlreadyExistsError`?
This is the test that is failing.
This should be > 0
Why not just `if (hookState._value[0] !== nextValue) {`?
`roles` is a string, not an array.
I would prefer to have a single flag for this instead of having two different ways. One for `withCollection` and another for `COLOCATED_WITH`.
`// ExpectedBalances records expectd balances of admins and delegates.`
This class is used by the `SnippetExtractor.js` and it's used by the `SnippetExtractor.js` and `SnippetExtractor.ts` files. I think this should be renamed to reflect that.
I think we should add a `IssuerAccount` field to the jwt client. The user claims should be created with the issuer account set in the client.
I think this is a little bit redundant.
This is unused.
Why did you remove these? I think they are not used anywhere?
This is a bug. The last component should be the path.
I think this should be called `ServerErrorStatuses` since this is a server error.
I think this should be `strcasecmp("true") == 0`.
I think we should pass in `options.ProjectId` instead of null
This should be a classmethod
I think this is a good change, as it will be a bit more clear what the behavior is when the attributes are nil, not sure if we want to change it, or not.
Should this be `DateTime.MinValue`?
I think you can just do: `expect(page).to have_content(I18n.t("beta.replies.flashes.success"))`
This should be done after the if (headers != null) block.
Why is this needed? I think it should be enough to just pass the schema to `Realm` constructor.
This is not a correct way to set a version. You need to add a default case.
This is not necessary, since we already return false if there is no node.
This test is failing on my machine because the text "Successfully removed that saved search" is not in the translation.
nit: can be `readonly`
I think you can use `systemd.SdNotify(true, "READY=1\n")`
please add a comma here, so that we can remove this one when the next item is added.
I think we can use a `bool` here.
I'm wondering if we should use `is_numeric` here, since we already have an `int` type.
Why is it static?
This will be a breaking change for users that have configured `BaseSVIDPath`. I think we should keep it as is and add a deprecation message to the `getBaseSVIDPath()` method.
Why do we need this? Is it because we are using the same constants for all of the other constants?
Please create an issue for this.
I think it's better to have the `String.format` call in the constructor. It makes the code more clear.
Line is too long. [92/80]
Why did you remove the `First()` call?
I think we can use `File.exist?` here
This should probably be `toLowerCase(Locale.ENGLISH)`, as the content-type may be case sensitive.
I don't think this test should be removed
I don't think this will work. The nonce is not the same as the block nonce in the deposit. It should be the same for all deposits. You can use `BlockHeader.Nonce` instead.
I'm a bit worried about the fact that this is a public method. I'm not sure if we should change it, but it seems like a bug to me.
Why not just use `defer`?
I think this should be `domains[0]` instead of `.de`?
This is a bit of a smell, but the indexers were created by the service name, span name, etc.
I don't think we should hardcode the path here.
I'm not a big fan of revisiting this, but it's not a blocker.
I think this should be `!isTest && c.state.ForceRebuild`
This is a private method and should have phpdoc for it.
@bparees I am not quite sure if this is the right way to do it. @bparees @smarterclayton what do you think?
I think it's a good idea to add this to the `Bolt::Config` class. I'm not sure if we want to have a new config class for this, but we could have another one for the config.
This is the fix
I think it should be Error
This should be a `String.format`
`blessings` should be `uint64_t`
I think you can remove the trailing spaces here.
This is the same key as in `__call__`, right? If so, it should be `results[key][self.__class__.__name__]`
This should be done in the `_onNvdaSpeech` callback, not here.
Space missing to the left of {.<br>Space between { and | missing.<br>Space missing inside }.
This will break the response for the `Accept-Error` header, right?
This should be `"library.yaml", ""`
I'm not sure this is a safe change.
I don't understand why this needs to be a separate function.
I think this needs an explanation of how the behavior is changed.
Why is this needed?
This change is not needed
This is a breaking change.
@hennevogel @joshdholtz is this route necessary? I think we should remove it
This is the only change that should be needed.
This should be a separate PR.
This should probably be `^(?:[^:]+:)*wikipedia$/i`
I think this should go to `BaseLogger`. The reason is that it is used for all logging.
I think this is the right place to put this code. The caller should be able to check the status code of the response.
I think it would be better to add a method in the `rekeyFSM` that is called when the rmd is applied. That way we could also have `fbo.rekeyFSM.Event` and `fbo.rekeyFSM.Event(NewRekeyRequestEvent())`
This was the only use of the config.
I don't think this will work. If you scroll to the top of the page and scroll to the bottom of the page and the height is 0, it will scroll to the bottom of the page.
I think this is a good place to put the key logic.
Shouldn't we be doing this check in GetDbType?
nit: remove empty line
This seems unrelated to this PR?
This file is not used. Please delete it.
I'm not sure what you're trying to say here, but it looks like you're missing a space after the period. Also, you're missing a period at the end of this line (and the one above)
why remove this check?
I think this is a leftover.
I would just inline the function here. It's only used in one place.
I think this should be `.limit(10)`
I think you need to add `.via(executor_.get())` here too.
This is a very bad pattern. We should have a method that does this check.
This should be a `double` instead of `bool`. The `is` prefix is used in the `long` class, so the `double` is not necessary. The `long` class already has `double` as a suffix.
This is the same implementation as `IConnectionHandler`. Can we just make this a `IConnectionHandler` and remove the `OnConnection` method?
This is not used anymore.
nit: `clean` -> `skipCleaning`
This is a stub. We should be able to stub it with the actual URL, not just the IP.
I think we should use a more specific name for the `isPromiseLike` function. Maybe `isPromiseLike`?
I think we should also print the config file name, since we have it in `telemetry.yaml`.
I think this is the wrong way to fix it.
nit: I'd prefer to have this import at the top with the others.
I think this function is unnecessary.
These were unused, and were causing failures in the test suite
This will close the `epollConsole` even if the error is `io.EOF`, is that intended?
`websocket_server` should be `nullptr` by default.
I think this can be deleted.
This change should not be necessary
This is not correct, the balance will be the same as the initial balance, not the initial balance
This seems like a reasonable place to put this, but we can't do that until we actually have the images to pull. I'm wondering if we could make the timeout configurable.
I think this should be `errors.New("Checkpoint/restore not supported")`
I don't think this is the right default. The default is 10 seconds.
Can you please add the issue number to the TODO so we know it will be fixed?
I'm not sure this is a good fix. I think it's more correct if it's `this[kIsMaster] === true` and not `this[kIsMaster] !== false`. I think the original code was correct, though.
I'm not sure this is a great way of doing this, but I don't have a better suggestion.
I think we should use the enum here instead of `Long`.
Is this used anywhere?
`!==` is not needed here.
I would rename this to `textNoData`
Should be `read<int32_t>`
I think this should stay as `ScalarEncoder`
Why is this changed?
I think this is not necessary.
I think this import is not needed.
I don't think this is needed.
I think we can get rid of `loadSpecTests` now that we have `runUnifiedTest`
I think we can just remove the type annotation here. It's not needed.
I think we should use `hashCode()` instead of the `hashCode` here.
`has a relation with product` -> `has a relation with product`
Why is this needed? Is it because we are deleting the default pod?
I'm not sure if this is correct, as we don't want the session to be closed after the yield
I'm not sure about this. I think it should be `ConvertFromActionPb`.
I think we can use `equals` here
nit: `filter` -> `filters`
I'm wondering if we should just use `std::get` here, instead of using `get` every time we access the value?

This should probably be CloudBuildSourceEvent
Why do you need this?
I think we can remove the `CompositePropagator` and just pass the `ITextFormat` directly?
I think this should be a different controller.
I think this can be simplified to `if !uh.Dynamic && uh.Fails >= u.MaxFails && u.MaxFails != 0`
I'm not sure if this should be `JsonPatchException` or `JsonPointerException` (or even `JsonPatchException`).
I think this is not needed anymore
I think this is a typo. Should be `DialUsingCLIAuth`?
`sessionStorage` is unused
I'm wondering if this is the right place to notifyStop. I'm not sure about this.
This seems like an unrelated change, can we revert?
I don't think this is necessary.
Why is this a pointer?
This will not work for `ds_layout=None`
nit: this import should be grouped with the other cluster-api-provider-aws imports.
I think this should be a warning, not an error.
Use the new Ruby 1.9 hash syntax.
Why not just do this in both cases?
I think you should keep the name as it was, since the function name is now a bit confusing.
I'm not sure about this test case. It seems that the union is not valid.
I think this is not the right place to do this. If we are loading from binary, it should be in the header, otherwise it will be set in the text file. This is because the text file is loaded in the header.
This was a mistake, I fixed it in the next commit
This should be a separate function, not a separate function
I'm a little confused by the name of this endpoint. It seems that it only mutates labels, but it also mutates labels.
I think this should be `util.IsPaused`?
nit: I'd prefer to call this `pkgManagerTuple` to make it more clear that this is a list of tuples.
This is a breaking change. We need to keep it as it was before, but we should keep this change.
I don't think we need to check for `real` path type, as we can just use `modelSchema.paths[localField]`.
This is the actual fix, right?
This is a bit of a weird dependency.
I think we need to move this to a different route, so we can use `vanity_path` for this.
Why not just use `models.GetRawDiff(ctx.Repo.Owner, ctx.Repo.Repository, commitID, diffType)`?
I don't see any reason to change this file
Can we make this a constant in oidc package instead?
Why is this needed?
This should have a more descriptive name.
Please move the imports to the top.
This should be in the `caddytls.conf`
Shouldn't the `if` be `elsif`?
I think this should be `m_is_objc_enum = enum_decl->isObjC();`
I'm not sure about this one. If we are retrying writes, we don't want to add the label.
This is not a great way of expressing this. We need to figure out how to get this working. We can't just use `get-form-data`.
This snippet should still be updated, right?
@swissspidy I don't understand why the ref exists on the backing node?
Can we rename this to `currentTask` to be consistent with `BaseDataReader`?
This is the only thing that I'm not sure about, but I'm wondering why we have to hardcode the image version here?

I think it is better to return the error here.
Shouldn't this have `dependent: :destroy`?
This is a breaking change, please revert it
Why not using `pdo_jdbc` directly here?
Is it possible that `scope.Span` is null? If so, this will crash.
I think this is a good time to add a `type` field.
I don't think this should be done in the constructor.
This should be removed
This is the fix.
@johnetordoff, @johnetordoff, @maze-lundzo, I think this is the best way to do it, I'm wondering if it's worth having a separate function that returns an SVG element, and if the image is null, we just return null.
`stRoot` -> `stateRoot`
This is not correct, the `:` should be at the end of the object name, not the beginning of it
This change is not needed.
Why not `name: %name%`?
I think this is the only place where the `off` value is used.
This is the default, so it should be `[require.resolve('@docusaurus/core/lib/babel/preset')]`
I don't think this is a very good idea. We should be able to cherry pick the same transaction multiple times, and we should be able to cherry pick the same one.
Why not keep the old name?
I think you forgot the import
This import seems unused.
This should be done in the `filterXSS` call below, right?
This is not the correct fix. We should be returning true for `error instanceof MongoParseError` but not `error == null`.
I think we need to add a check for `rfp_backbone.pretrained` to be `True` if it's not `None`
This is the only change that I can see in this PR, but I'm not sure if it makes sense to change this to a `class_for` or a `module_for` instead of `class` since it's not a singleton.
This is a bit confusing. I'd rather have a `CxxCflags` and a `CFlags` struct with the three values.
I think this change should be reverted.
I think we should be consistent in the naming here, but not in this PR.
Use `&&` instead of `or`.<br>Use `&&` instead of `or`.<br>Use `&&` instead of `or`.<br>Use `&&` instead of `or`.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is the test for the `cancel` action.
@smarterclayton @smarterclayton I'm not sure why we have to change this? I think it would make more sense to keep the old ports, but change the config key to `0.0.0.0` to make sure we don't have a problem when we upgrade the code.
I'm not sure this is the right fix. The problem is, the rootedAtAtom is -1, but the number of atoms is 0.
This is a good change, but we should probably use `assertFalse` here.
I'm not sure this is the right place to do this. The default value is set by the `c.Version` field. If the config is updated with a different version than the one in `c.Config`, then this will cause the default value to be overwritten. The default value should be set to the same value as the config file.
I don't think it is a good idea to compute the hash for every config. This should be calculated once per command.
This should be `ks.DatetimeIndex`
I think this should just be a `.orElseGet(Boolean::valueOf)`
This is not a function name, it is a function name.
@wido I think we should increment the call count here as it is the same as the call counter. The call count is incremented by the time the producer calls the call count is incremented by the time the producer calls the call count is incremented.
I think we need to add this to the `Info` struct as well
This should be `makeflow_failed.dir` (or similar)
This is not the correct fix. The duration should be in seconds.
Why is this needed?
I think this should be `PRE(ilist, instr, popf);`, since `PRE` is called after the `mangle_single_step`.
This is a good change but we need to be careful when using the `.editorconfig`, since this file is being modified.
This method is unused, and can be removed
I think you need to specify the class_name here, otherwise this won't be able to be picked up by the model
I'm not sure if this is the best place to do this. If the user has the option to use a unix socket, he should be able to use the socket directly.
This can be `null!` as well.
I'm not sure about this, but I think this is a very confusing name. It seems to be returning the ID of the table, not the table.
This should be fatal, not fatal, otherwise it will crash the entire process
I think it would be more consistent if these were named "parquet.check-min.max.records" and "read.parquet.check-max.records".
Please remove this line

I would suggest to move the `/` to a constant
I don't understand why you need to check for `fromLua` here. If you want to execute a song, it must have access to the group, and if you need access to the group, you need to execute it. If you don't want to execute it, it must be a `say` action.
This test is not needed, since it is already covered by `clique.blockIsCreatedByProposer(minerNode1)`.
@jingxu97 @smarterclayton I think this is the right thing to do here. We should only log the annotation when we're actually writing it, otherwise we will get the log line for every test that's failing.
I'm not sure if it's better to use `stacklevel` or to drop `level` explicitly.
Is there any way we can get this from the `ConfigurationManager`? It's not really a setting but a setting.
This is a breaking change - anyone implementing the interface should be able to use the SpanContext interface.
This change seems unrelated to the rest of the PR.
This is not needed, as the `text_for` will do the same thing.
Extra empty line detected at block body end.
I'm not sure if this change is necessary.
These are not needed anymore, right?
I think this import is not needed
I think this should be a warning, not an error
This is not necessary, since the user is already in the model
This is a breaking change. I'm not sure we want to do this.
I'm not sure this is correct. The `req.get('host')` will be `localhost`, not `localhost:3000` (which is the same as the default `localhost`).
I'm not sure why we need to change this.
This should be `/forum.upcase.com`
I'm not sure if this will work, but I don't think we want to use the default value of 'NM' here.
I think you should add a new property `subscriptions` to the model.
I don't know what's going on here, but I think it's better to just do `from matplotlib import plt, cm`.
I think this is the only place where the test helper can be used, but I'm not sure how to make it work.
This is the only place where we have to check `typeof mode === 'string'`.
I think this is a bug. The command is not a `criteria`.
This change is necessary to avoid `ReadManifest` having duplicate entries in the `allManifests` list when the manifest is not in the `allManifests` list.
This is not needed, the node will be deleted by the cluster manager
I think it's better to use `None`. I don't think we want to change the default value of `var_name` in this case.
Can you add the integration test as well please?
We should use the `name` property instead of `name` here, as we're using the same string in multiple places.
This is a breaking change, but it seems like we should keep the `id` and `provider` properties in sync, since they are not really relevant for this class.
I think we should move it to `src/python/codecheck/checkers/action_specs.py`, since it's used by both `clang-func-mapping` and `clang-checker`.
This is not really a test. It is a test for the function that is called, not a function that returns a number.
I think we can move the declaration to the top.
I think this should be 1.0, 1.0e-6, 0.0
I would prefer to use `array_key_exists('class', $attributes) && isset($attributes['class'])` instead.
I don't think we should change this.
This is a very minor thing. I'd suggest to use a different name, like "AZKABAN_SERVICE_PROVIDER" to make it more clear that it's not a static singleton.
I'm a little confused about this. I think we should have a `sourceId` and `fieldId` that is a `SourceId` and a `FieldId` (and the `name` and `transform`) that is a `String`.
This is not the same as `onWriterChangeReceivedByAll`, but it's not the same as `check_acked_status`
This should be `List<DataFile>`
This is a bit of a hack. We should be able to use the `stashEnv` function directly here.
I think this is not the right place to do this. It should be done in `_check_defaults`
I think this is a bit confusing. It seems like it is counting the total number of changes that have been made per account and the number of outstanding writes that have been written. I think the `ndeltas` field is a bit redundant, since the field is only used in the commitRound function, but I don't see the point in having it. I'd rather see it moved to `commitRound` than have it as a separate struct.
This is not a valid rule, it needs a xpath.
Shouldn't we close the `criuServer` here? I think it will be closed by the `cmd.Start()` call above.
This task is not needed anymore, right?
This seems to be the same as `SocketPoller::NOT_CONNECTED_ERRORS`
Should this be `fetch('movie.director')` instead?
This should be moved into the `if` above.
This should be `! stream.eof()`
I think you should import this function from opf/frameworks/opf/experiment_runner/__init__.py instead of importing it from opf.
This should be a translation string.
This is not the same as the code above. We should not set the GPU IDs for external instances.
Why is this hardcoded? I think we should use the same constant in the service.
I don't think we need to add this namespace.
I think you can use `configuration.getBoolean(ConfigOption<?>, ConfigOption<?>)`
This will be set to true in `cStorPoolDestroy` as well.
This is the actual fix, right?
I think these should be moved to `pkg/util/iptables/util.go`. They are used only there.
Why are we introducing these two new reasons? Can't we use the same message for success and failure cases?
This should be `rb_intern_global_variable`
Why are these being changed to `finest` ? I think this is the only thing we want to change in the log.
I would prefer to use `VERSION_LOW_CARDINALITY_LEAVES` here instead of `VERSION_CURRENT`. The current version is not a major version.
I think it would be better to remove the `handleAjaxUpdateRequest()` method and just use `updateList.add()` to add the flow to the update list.
This should be a `string`
This is not correct. The `y` is the same shape as `pred_map[..., 2:4]`, not `pred_map[..., :4]`.
I'm not sure if this change is correct. The original error was "Blob already closed", not a "Blob already closed".
This should be debug I think
This should be `console.log(err || connectionStringObject);`.
This is a little bit weird. The lock is already held in the while loop, so the mutex is not needed here.
This is a duplicate import. Please remove.
I think this should be `return encode_opnd_int(10, 6, false, 0, 0, 0, enc, enc_out);` to be consistent with the other functions.
I think we should remove this `afterEach`, since it is now done in the `beforeEach()` and `afterEach()` calls. It will also make the `cleanupAfterSuite()` call much simpler and more consistent with how we do it for `beforeEach()`.
I would say "Whether to convert bbox from relative value to absolute value. Only used in OpenImage Dataset."
I think we can get rid of the `TestMultipleGlobalTracerProvider` now.
nit: remove empty line
I don't think you need to pass `world` to `self._inject_early_js`. The main world should be injected by the script itself.
This should be a warning. The caller should not be waiting for a response.
This is not the correct name, it's the `From` which will be recovered from the signatures, not the `From` which will re-write the body.
This is a change that was made in the last version of the protobuf.
This is not a good way to do this. The state should be set in the `SessionInfo` object.
I don't think this should be an error, it should just be a warning.
This test was not awaited. The test was failing.
This is not needed, as the preview will be triggered by the `weekly_update` method, right?
This is not needed anymore.
This should be `MkdirAll`
I don't think we should be doing this here. If we are not importing snakebite then we should just return "cdh4".
This should probably be a `filter!`
Why did you change the order of these?
This import should be removed.
This is not a good way to deprecate a method.
This will only delete archives for date based log records, which is a good thing, but I think we should only do that for the date/time based log record.
I'm a little confused by this change. Why are we creating an XHRClient for each request?
This should be /backup/all
This is not a warning, it is an error.
Why is this a `String`?
I think we should add a note that it is optional.
This should probably be `$stderr.puts(command) if verbose`.
I think we should return `result` here.
This should probably be a `*=` since it's an assignment.
This is a little confusing. The masking is done in `getMaskedIp`. I'd expect it to be the same in the same place, and then the masking logic is done in `CIDRFromIPNet`.
This function is only used in tests, so it can be deleted.
I think you can just use `self._tab.key_press(Qt.Key_Enter)` here.
I think we can get rid of this method and just use `params.RPCFactory.Create()`
I would prefer if we can get the download sizes as a long, instead of having a separate method.
This is not the same as `tabbed_browser = objreg.get('tabbed-browser', scope='window', window=self._win_id)`, but I think you can just do it here and remove the `if focused_tab:`
I don't think this function is used anywhere.
I don't think this is a good idea. The image handle should not be NULL. It should be a pointer to a VK_NULL_HANDLE. The handle should be the same as the pointer to the image.
This is the actual fix.
This seems like it would be more efficient to do this in `writeManifest()` rather than `currentSnapshot().deleteManifests()`.
I'm a bit worried about this, as it might be an API change. I'd rather have a `validate_groups` method that returns a boolean, and then have a validation method that returns a `Group` instance.
This should be `history.expire.retain.min-num-snapshots`.
Why are you removing this?
This file is a bit confusing. It's not the crds api, but the ops api.
I think this should be called `PauseContainerImageName`
This should be a constant
This is a bit of a nitpick, but I'd probably make it a `Debugf` instead of a `CDebugf`
I'm not a big fan of adding a new contributor to this list, but I can't see any better solution either.
This is not the right change, the default value should be `any`.
Space inside { missing.<br>Space inside } missing.
This is a pretty bad name. I would suggest `RemoveRuleViolationFix` or something similar.
I think it would be better to use a label for this.
@jackysp @jackysp @jackysp-msft @jackysp-msft @h2o-lzo @michalkurka I'm not sure if it is a good idea to use `h2o_lcstris` here, since it's used in `h2o_url_compare_hosts`.
This is not correct. The `protoc-gen-go-grpc` is in the `google.golang.org/grpc/cmd` folder.
This is a bit of a nit, but it would be nice if we could have a single test that checks for both `pytest.mark.parametrize(.., [..])` and `pytest.mark.parametrize(.., [..], [.., ..])`
Why not `MediaInterface $media, string $format = 'png'`?
This is a little bit of a hack, but I guess it's fine.
These two should be Integer, not Long.
This should be set to nullptr by default.
Why do we need this?
Why do we need this?
Missing space after #.
This is not needed.
This is a new API. Please update the API doc.
I think this should be an IEnumerable.
I'm wondering if we should remove this case. I don't think we do anything with the `TIMESTAMP` type in Spark.
This is a public class so we can't change the package name.
Why do you need this? I think we can just remove the `if not` and just return.
I would say that the dispense button should be disabled.
Shouldn't this be true?
This is not a valid path.
This function is not used anymore.
I think this is a good idea, but we should check the return value of ReceiveRequest().
This is not used anywhere, so I removed it
This is a bit of a nitpick. Maybe we can call the constant `THE_WEEKLY_ITERATION_SKU` and `THE_WEEKLY_ITERATION_SKU_WITHOUT_EXERCISES` instead?
This is a bit confusing to me. What is the difference between `NewStatusController()` and `NewStatusInformer()`?
I think this should go in the `constants` package, since it is only used by the `deploy` package. Also, it should probably be in the `deploy` package.
Should we check that the host is not empty? I think it is possible for a host to have a null value for the port.
I think we should add this to a `@throws` section.
File is not `goimports`-ed (from `goimports`)
I don't think we should be returning an error code. This is an internal error.
This is a good change, but we should probably rename the function.
I think we can remove this case now.
Why did you remove the typedefs here and in other places?

I think we can drop the first sentence. The whiskers follow the Tukey boxplot definition. The boxes of a BoxWhisker element represent the first, second and third quartiles. The boxes of a BoxWhisker element represent the first, second and third quartiles. The whiskers follow the Tukey boxplot definition. The boxes of a BoxWhisker element represent the first and third quartiles. The whiskers follow the Tukey boxplot definition. The box boxes represent the first, second and third quartiles. The whiskers follow
I think we should use the same version as git itself, as the git version can change between releases, so we don't need to worry about changing the default value.
Why are you removing the header files?
This is a bit of a misnomer. It is only used to disable cross-tu, but it still makes sense to have a flag that is only used to disable cross-tu.
I'm not sure if this is a good idea to store a code here, as it's not really an ID.
This is not a date.
This seems like a reasonable default, but it doesn't look like it's actually used.
This method should be removed.
I don't see any reason to change this?
This change is not necessary. The string is translated by the `__` function.
Please use `:obj:` for docstrings.
I think we need to add this method to the User model as well
nit: I'd just use a single slice here instead of creating a copy of the array.
This is not a BC break, as `Collection` implements `IteratorInterface` and `clear()` does not.
I think this import can be dropped.
I don't think we want to do this, we should just use `window.mochaResults`, no?
This is a new validation that should be added to the new `RabbitoCop` model.
This is a bit confusing, as I don't know what the distribution mode is for, but it's a bit confusing. Maybe we should rename it to `SPARK_WRITE_DISTRIBUTION_NONE`?
nit: "Generate candidate sets for users."
Should this be `s.metrics.TotalReceived.Set(float64(balance.Int64()))`?
This will throw an error if `Sync` is not defined, right?
I think we should log the error here
I don't think this should be here, but in the `BlockStore` constructor we should probably be adding a `BlockStoreFile` field to `BlockStore` to indicate this is a file.
This is the fix
This is a bit of a weird test case to me, since the type is not specified by the user.
I don't think we should be using `schema` here. The `columnMode` should be set on the `NestedField` itself.
I would suggest to use `None` instead of `[]`.
I don't think we want this in `eslint-config-prettier`.
I don't think this constructor is needed anymore
nit: this should go down with the other imports
I don't think this test is needed since we're already testing `subscription.reactivate` in the `before`
This method is not used anywhere, so it should be private.
This is a breaking change, please revert it back
I think we should remove this line. We don't have a test for it.
This is not necessary.
I think we can just delete this file. It's no longer being used.
Why did you remove json tag?
I don't think you need this.
I'm wondering if we should just make `additionalScrapeConfigs` mandatory. I think it would be more clear if the user would not want to create their own scrape config.
I don't think we want to log this here.
I think this should be a property instead.
I don't think it's necessary to specify a default value here.
I'm a little confused about the `pretrained=\` here.
This is a public API and we should be using keyword arguments instead of positional arguments.
I don't think we should do this. The caller should be responsible for loading the dir.
I don't think we should be doing this.
I think the `v1/` part should be removed.
Should this be `assembly.id`? I don't think it should be an issue.
This is not the same as before. The access field is not always set.
I think this should be `if !useLibRustParser()`
I think we should add these to `Sequence` as well
This is a little bit confusing to me. I think it should be called `BeamSyncFastSyncLag` or `NotBeamSyncFastSyncLag`?
I think we can just use the `ConnectionType` class directly here instead of the `BitMask`.
I would rather use `assert ax3.get_title() == 't @importance_type@'`
This should be the same as `NewKeeper(ByteKey("very secret secret"))`
I think you forgot to remove this
This is not needed. We can always run action in block 1.
This is the only place where we have `options.service` set. I'm not sure if we should just remove the `options.service` param altogether.
This should be in `rdkit/base/warnings.py`
Why do you need to disable the authorization?
I think it's better to pass the whole stack locations here, rather than the whole result.
I would suggest removing the V(2) log here. It's not really needed.
I think this should be a bool, not an int, as DNS is a valid configuration.
Should this be an error instead of debug?
Why do we need a separate `Unknown` type? Can't we use the `KnownTypes` directly?
This is the main fix. The rest is cleanup.
Why was this change necessary?
This class is only used in the `InReverseChronologicalOrder` class. I think we can move it there.
I think it is better to have this as an interface, and have the function take a `*Task` instead.
This is a bit weird, but it doesn't hurt either.
Please remove the extra new line.
This should be `pytest.raises(AssertionError, match="min_sizes must be set at the same time")`.
I think we should use the ethereum.network protocol. We don't have a network protocol yet.
This is a bit of a misnomer. The package is `blocksync`.
I think it's a bit weird to put a class in a `<div>` element. I think it should be in the `<div>` element itself.
I don't think this is necessary, since `Task` is nil by default.
We should be able to remove lodash from the imports now that we're using the `@wordpress/element` package.
Why are these changed?
nit: `// TODO: not needed`
I don't think we need to keep these tests.
I don't think we need to do this. If we fail to create the config file, we should not proceed.
This was causing a circular import, which is why I had to remove it.
I think this is the wrong approach, it should be in the `state` package instead, and we should be able to use the `tls.Config` type from the `tls.Config` package.
This should be a boolean, not a string
I think we should keep the `inWaiting` field here, as it was before, and not set on the `Serial`.
I think we should keep the existing `schedule_xdg_surface_configure`. We can add `wlr_xdg_surface_schedule_configure` to the top level.
This test case is not correct, because there is a `pod` that doesn't exist in the pod list.
nit: this is not a serviceDescriber anymore
This import should be moved down to line 15.
I'm not sure if this should stay as `model_handle`. It is a column that is used for the model handle and not a column that has an associated handle.
This change is not necessary, but I'm fine with it.
I'm not sure this is the right fix. It seems like the only thing that would break is that the prefix is `vex.vvvv` (which is not a union).
This seems like a pretty big change to the code. Why not just delete it entirely?
This is a bit of a hack to fix an issue where we have a core with the same name but different aliases manager. I think we should not do this.
I'm not sure if we need to do any escaping here, but it seems to work for me.
I'm not sure about this change. I think it's a good idea to keep the old name.
`parameters` is undefined here
This is a bit of an edge-case but I think it's fine.

Can we make this `private`?
I think we should pass `signedUserName` as a pointer, so that the caller can make sure that it's non-nil before passing it in.
Should this be in a `finally` block?
This is a breaking change. We should keep it as is.
I don't think this is needed, the header should be generated by the script itself
I think it is not necessary to implement these methods.
This is only for testing purposes, so I'd rather keep it in the test.
nit: this is a bit of a nitpick, but it might be worth making it a `Fake` instead of a `Fake` since it's a fake.
This is a very specific option, so we should probably use the same name as the option for consistency.
I don't see how this would work. The plugin name is not the same as the name of the plugin, it is the plugin name that is used. The `CircuitBreakerManager` plugin name is the name of the plugin.
This is a bit confusing. Why is the type different from the meta type of the variant? I don't see a difference between the two
This is the part I'm not sure about. The context is passed into `NewTypedWriter`, which is called after the object is constructed, and the `driver.Writer` is created. The context passed into `NewTypedWriter` must be the same as the `ctx` passed to the `NewTypedWriter`.
I'm not sure if it's a good idea to override the `default_options` here. If you want the `s3_permissions` to be set, you can just use `:public`.
This is not the same as in `ImportTransitionListColumnSelectDlg_DisplayData_Column_`.
I think you can use `action.ClassifyActions` directly here
I think we should keep `addPeerErr` and just rename `AddPeersErr` to `AddPeerErr`.
This is not needed.
Why was this removed?
I don't think we need to check for this here, we already checked in `certificate_test.go`.
I think we should set this in the test_id parameter instead of in the parameters.
Nit: unnecessary change
This class should be in the Validator class
This should be a kwarg.
This is a legacy function.
This is not needed.
This is a bad formatting, please revert.
Why is this necessary?
This should be `cStringIO.StringIO`
I'm not sure this is a good idea to add headers to every test. We should just add the header to all the tests that need it.
I'm not sure this is the best default value.
Why is the `Distance` property added here? It's not being used in the json serializer
This is not the correct way to say that the number of tabs should be the same as the number of downloads.
I think we can remove these lines now that we're not using ppc64le anymore. I'm not 100% sure if this is a problem or not.
@jywarren this is the change I made. The `url_for` function is not used anywhere else, so it's safe to remove it. The `params.merge` is not needed here.
I'm wondering whether it makes sense to set `PowerState` in the `ReconcileClusterClaim` method instead.
I don't think this is needed
This is not correct, the node will finish the current round if it is doing the work and then return the initial state. The goal is to avoid the race, so the node will not be able to finish the current round if it has already been deactivated
This is the only change in this file.
I think this import is unused.
This is a test file, it should be removed.
This is wrong. It should be `=`
I think you need to use the `@timeout` helper here.
This is the only change that is required to fix the issue. The rest is just cleanup.
This should be `nano::account node_id` (and the `!` below)
This should probably be `fetch_path` to match the other models.
This should not be here.
This is a little awkward, but it's not the best way to test this. It's not really testing anything, but it's a bit more specific than it's worth.
I think we can remove this.
I'm not really a fan of this name. Maybe `ConnTrackInterfacer` would be a better name?
I don't see this being used.
I think we should check the version first.
This is not a valid test case.
Please use `elif` here.
This is not needed. The context should not be leaked if there are no disposed entries.
This is the fix.
This should use `t`
I'm not sure if it is a good idea to change the channel structure in a PR that's not related to this change, but it's not related to this change.
I think we should also test the `-z` and `-n` options here.
I think it would make sense to move this to the `cstor/cmd` package. It's not specific to the `cstor` package.
This is the same as `throw bad_alloc(std::string("host_bad_alloc"));`
This is a bit confusing to me. The pledge is the size of the sector, not the size of the miner.
This is the wrong file.
I don't see the value in making this optional. If it's not provided, we should default to `1`. If it's provided, we should default to `1`.
Why is this change required?
This is a bug fix, but it's not related to the rest of the PR.
This should be `buildStatic`
Can this be removed?
This change is not needed, right? The warning is not displayed in the UI.
I think this should be `**/Datadog.AutoInstrumentation.Profiler.Native.Windows.vcxproj/`
This should be `SRC_INSTANCE_ID`?
This test is failing because the `accept-no-param-doc` rule is not applied.
Why did you remove the `modifyRow` hook? It's not used anywhere.
This function is not used.
This is a bit confusing. The digest should be a SHA-256 hash, not a SHA-256.
This class does not exist in 4.4
I think you can just use `google.golang.org/api/compute` here.
This should be `self.updateSelectedMenuItem(currLink);`
I don't think this is used anywhere.
please use `!=` instead of `!test`
Why do we need this?
This class is deprecated, but not used. I think it's ok to remove this test, because we can just remove the test altogether.
I don't think we want to use unsafe here, as it's not a pointer.
Shouldn't the watcher be canceled if both are set?
I don't like this message. It's a bit confusing to me. It would be good to say that the endpoint does not exist. I'd suggest something like "Dataverse endpoint does not exist. Please check your code for typos. Check your API guide at https://guides.dataverse.org."
This is the max retry count. I don't see any reason to change it to 999999.
This is not a very useful function, it's not a good way of doing this, but it is also not a good idea.
TODO: Create transport?
This is a bit confusing, I think we should just swallow it here and return an error if we don't want to allow the user to allow DNS delegation.
This is not needed, right?
This should be `FederatesWith` not `FederatesWith`.
This is not the correct way of handling plane tiles.
I don't think this should be in this PR, but we should make it a bit bigger. I think we need a better idea for the number of batches.
minor: extra new line
This should be removed.
I'm not sure about this change, but it's a bit odd to have the user namespace first.
This is a bit of a hack, but I'm not sure how we can solve this problem without having to add the chaos spec here.
This is the only change.
why remove the task?
This is not a fatal error, it is an error that should be reported.
Should this be in the same file?
I don't see the need to set the action here.
Can we call this `--check`?
I think we should check `this.isSorted()`.
Why do this change?
This is a breaking change for anyone using a custom image. We can't change this. We need to make sure we have a test for it.
Should we check `Intl` here?
I think we should pass `pvc.Name` here instead of `name`. We should also pass the `pvc.Spec.Name`, which will be used in the `sendEventOrIgnore`.
This is a bad idea.
This is a good change, but I'm curious why you made this change.
This is not a good change as the function name is not very descriptive.
This should be done in the `else` branch as well
I don't think this is right. This is not a class name, but a class name. It should be a qualified class name.
I don't think it is a good idea to have a public property for the default options.
This is a key generated by the service. It's not possible to create a key in the key store without the key being generated.
I think this should say "Please note that AdSense will not show ads on your website unless you've already placed your code"
Why are the functions in the `graph_runner_test.go` not in the `gen_node_runner.go`?
This should also be added to the downloadInstance
This is a breaking change, right?
I'm not sure this is the best approach. I'd rather not change this code, but rather add a new function that returns the address in the struct.
I don't see where ServiceAccounts is used?
This docstring should probably be updated.
I would suggest to create a separate controller for this
I don't think this is used anymore
I think this should return an error if the `maxDepth` is not set.
I think we should keep this test, and check the config is correct.
This is the only change that I can see.
I think we should also test the `first_question` and `second_question` associations.
This is not needed.
I think we should have a better name than "UnknownOutput".
Why is this necessary?
I think we can remove this and the other methods in this class.

This is not correct. We need to check if `parentDom` is a child of `oldVNode` and then if so use `parentDom.firstChild`.
Why is this changing from 200 to 5MB?
This method is only used in one place. Can you move it into a separate method?
This is not the right approach to solve the problem. The problem is that we are detaching the process even though the spec was executed in a different thread.
I think it's fine to just start the mock, and then do a return start_moto_server(mock) in the end.
I think it's a bit confusing to have a `first_metric_only` and a `feval` here. I'd prefer to see a `first_metric_only_feval` or `first_metric_fevalue` property, but that can be a separate PR if you want.
This is not used anywhere, so I'm not sure if we need it.
Why did you change this? I think it's a good thing, because the scale is a double.
This looks like it's going to break the loop if `vp->nl` is NULL.
I think we should not add this. We should not add this if the way is not in the route.
I'd suggest "calendar" not "calendar."
You can't approve this deployment because you (%s) are not in the approver list: %v
I think you can use the `stats["listen_count"]` here
I think we should check for the exit code, not just that it's 0.
I think we should use `go.uber.org/zap` instead
I think this is the only place where we need to do this. The only thing I don't see is the `len(qr)` of `copyqr`.
Why is this needed?
This is a bit confusing to me. I'd rather have the default be `'on_input'` and the default `False`
I think we should not show the author if it's empty.
nit: can you please remove the empty lines between these constants?
This should probably be a separate commit
I don't understand why you need to create this variable.
This is not a valid regex.
I think we should keep these settings around. I think it makes sense to have them in the settings class, but I'm not sure if we want to keep them around for a while.
This function isn't used anywhere, can it be removed?
nit: `of table` -> `in table`?
I think you can remove this line.
I think we should just check `s.sys != nil` here, as we don't want to delete the reply if the sys isn't initialized.
I think this can be `let`
Should we add these to `errors_common.txt`?
This should be `config.puppetdb.boltdir`, right?
This is not the right error to raise here. This should be an error if the first column is a Series.
This will be set on the activity source, which is a bit dangerous. We should set this on the activity source.
This is not true. If you try to commit a partition that was lost, the implementation should throw a CommitStateInvalidOperationException.
This should probably say "ERROR: this version didn't compile with HDF5, can't use HDF5"
This is the actual fix.
Why remove this?
I think this is the wrong place to put this config. It should be in the `app/config.js`
I don't think this is the right place to check for this. I think it should be in the secret itself, not the secret itself.
I don't think this should be renamed.
This is not needed.
I think you can do this without the sort, it will be much slower than the `for` loop.
I don't think this is necessary, since `BufferReader` is a `ref` type. You can just call `ParseRequestLine(ref BufferReader<byte> reader)`
I think this should be `iceberg.hive.iceberg.metadata-refresh-max-retries`
This is not a required field. It should be optional.
This is the only test that needs to go.
I don't see this method used anywhere?
Is this leftover from debugging?
This should be changed to `Authentication`
I don't think we should be printing traceback. It's a user-facing error and should not be shown to the user, and the user should not be prompted to do so.
Why did you remove this? It's a bit weird that we have a `HTTPMessage` class and then a `HTTPFlow` class which is a subclass of `HTTPFlow`.
This is a duplicate of the above line.
I would call this `loadTable` to be consistent with the other APIs.
Why do we need to rename the parameter?
Layout/TrailingBlankLines: Final newline missing.
This test doesn't look right to me. The `test "$pmix_hwloc_source" = "cobuild"` is a test that checks that the hw loc is built. The `test "$pmix_hwloc_support" = "yes"` is not a test that checks that the hwloc source is not "cobuild". It seems to me like the test should be "test "$pmix_hwloc_support" != "cobuild" and not just "test".
I think we need a test for this.
This is a breaking change.
This should probably be a separate `ensure` block
Why do we have this condition here?
This will also add the P2 bonus if the last epoch is not the P2 start and P2 end.
I think you can just drop and create the table directly in the `initialize` method
This is not necessary.
This is a bit confusing, I think you want something like: "Hidepid is disabled by default, and the system is configured to not run verity. It will disable the verity process if it is disabled."
We should not allow this to be enabled in the CLI.

Why do we need this here? Can we just do `this.prevFolderId_ = null`?
nit: `TimestampNowFromClock get current time from new clock`
I think we should not be creating a new `lbann_comm_ptr`. The `lbann::finalize` function should not have side effects.
This is a leak, because `m` is a reference.
This should be a `boolean` instead of an object.
This method name is a little confusing to me. It's not really `toUpperCamelCase` but rather `toLowerCamel` or `toLowerCamelAndDigits`.
This variable should be named `firstTimeEmptyObjectPresent`.
I'm curious why this was changed.
This should be `self._sfdr.stripUnlearnedColumns(outputVector)`
I don't think you need the string cast here.
nit: I think this is a little confusing. I would say "This lack of error is by intention to force cache invalidation, as though it has expired" or something like that.
Why is this not just a C++11 extern ?
This is not needed, as `event` is already a string.
This is the only change I can see. The rest is just cleanup.
This method name is not very descriptive. Maybe `getMethodName` or `getMethodNameWithParam`?
This is not correct, the copyright date should be `2019-2019 NVAccess Limited, Mesar Hameed`
This is not a client.
nit: typo: "implies"
I'm not sure this change is correct. The error message will be logged twice if err is nil.
I don't think we need this TODO anymore
I don't know if this is a good idea. It's not clear to me what class the h4 has, and what it's for. It might not be the same as `<%= _('Instructions') %>`, but I think it's better to keep the same style. I think the `class=''>` is fine for the h4.
@kushthedude I think you can use `i18n` directly in `Ember.computed`
This is not a big deal but it's better to use `raise Exception(job_id, status['status']['errorResult'])`
Use id.to_i instead of id.to_i.
I think this should be a `private` method, since it's only called in the class.
I would rather have this be True. I don't think we should have this flag.
nit: `batchMapLock` is not necessary
This change is not needed
`fill` is a bit ambiguous. How about `iterate`?
I think this can be removed now
This is not used anywhere.
I don't see this being used anywhere?
I'm wondering if we should just do the same thing in `filterPenalizableMessages`. It would be more consistent with the other filters and we could just pass in the `candidateMsgs` instead of the `block.BlockMessageLimit` to `filterPenalizableMessages`
This should be `INSTR_CREATE_jump_reg()` instead of `INSTR_CREATE_ldr()`.
This should be "xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpiij4txtdo"
Line is too long. [81/80]
I would name it `HidePIDDisable`


I think we should add a warning here, so that people know what they are doing
This is not correct. You are rendering the quad with the color of the view. The quad is not drawn if the view is not activated.
This should not be needed.
I'm not sure if it's a good idea to use `expect` in this test, as it's a very specific assertion.
Why is this removed?
// Increment is the number of bytes that will be added to a batch
Shouldn't this be a `Preconditions.checkArgument`?
Why do you need this?
This is the same as `code_`.
Why did you delete this?
Why not just use the flush() method?
Please remove this empty line
I think this will print the entire error, not just the error.
Is this necessary?
nit: `WithInstalledTimestamp sets the timestamp to which the cluster was installed`?
Is it correct that we are not checking the fields invalid here?
This change is not necessary.
Line is too long. [81/80]
I think this should be `False`
This is not needed as we are already creating a new property on the `approval.cart` object above.
I don't think this is needed.
This should be `if l != nil`
Is this the right place to do the flush, or should this be moved to a separate function?
This should be called `spec()`
I'm not sure if we want to do this. If we do, we'll get an error saying `Repo does not exist`, and we'll just ignore it.
I'm not sure we need to add this. I think the `.localhost,` is already in the allowed list.
I would prefer to use `!empty()` instead of `null` here.
This should probably be removed, since it's no longer used.
I would prefer a shorter name like `DEFAULT_RTT_REPORT_INTERVAL`. I'm not really sure what it does.
Should we also handle `""` here?
I think we should check if `options.key?(:object)`
I think we need to keep this line.
This should not be changed.
This is the actual change.
This will be a breaking change for users who have already set the `interceptor` field.
I don't think we want this. If we do, we'll get a `Version="` error.
Why do we need to cast it to an `int` here? Isn't `p.shard.GetShardID()` already an `int`?
I'm not a fan of the logic of `contains()`. It seems that we should always return true.
I don't think this is necessary. The type checker will warn if you try to use a class with the same name as the type.
I think this is not a good solution. It will create a new array on the stack and free the memory.
I think this should be `<=`
This change is not correct. The loop starts with the index `-1`. It is not a valid value for the index to be `<`.
I think we should check the `v.Kind() == types.KindNull` before calling `AppendValue`
`ref = null` is not needed, as `createHandle()` will return null if it's not set.
We need to add this to the docs.
nit: `ConfigureTransports` -> `ConfigureTransport`
This seems like it would be better as a function in `cftime.py`
This should be named `PredecessorBlockDeviceCPK`.
I think this is the right thing to do.
Prefer `to be` over `be`.
I don't understand why this is needed, is this a behavior change?
I don't think we need this line.
I think we should keep this error message.
Why did you change this?
This should probably be `<UUID>`.
I think it would be good to add a `doc` string here.
This is a bug. The string will be trimmed before it is used.
This is not a problem, but we should not disable the pylint rule.
I think it should be `es6-js-export`
I don't think this needs to be an argument, since it's always going to be `0` by default.
This is not correct. The `(.+)` part is not required.
I think it would be good to have an interface for this.
Why is this change necessary?
This should probably go into the `actor/builtin/proofs` package.
Why not just append? If `msg.MessageId` isn't set, then it will be nil.
I think it would be better to pass the `id` and `propertyID` directly to the `receiveProfiles` function, rather than having to pass the entire object.
This should be in `user-management` folder
I think we should add some information here. Something like "inputs must not be null" or something.
Should this be `UNSUBSCRIBE_SECRET_BASE`?
Why not use `f"".format( title = title, message = message )`?
This is a bug fix.
I don't think we should change this file. It is not a schema.
This is a bit too long for a string, I would suggest we keep it at least 256 characters
This is a breaking change for users, right? We should add an overload that accepts a `bool` and defaults to false, so that users don't have to change this method signature.
I think this should be `o.chooser.Peer()`
I think this should return an error code.
I think this is wrong. If a transaction is confirmed for a given nonce and a new nonce is created, it will not be confirmed for that transaction, and it will be confirmed for the first watch. This is not correct because the transaction is confirmed for a given nonce and not for all the watches in the slice.
This file should be moved to `packages/react-native/src/index.js`
This should be `TLSInsecure bool`
I think this is a typo?
I think you can just cast the element to `Character` and avoid the cast here.
Shouldn't this be `isInterface()`?
This is not needed anymore.
I think we should keep this one. It's not an analogue.
I think we can remove this field and use the new one. We already have HistoryStatus. We can use that to retrieve history size
nit: I'd prefer `leakedInsecureKeyAddress` to be consistent with `leakedKey`
I think we should check that the error is the expected one.
I don't see any reason why we wouldn't want to call `view_set_fullscreen()` here.
nit: this could be a single line
I would use the full namespace here, `\Shopsys\FrameworkBundle\Api\Product\Flag`
This will not be called if `term_ == currTerm`, right? I think you need a separate `term_ != currTerm` check. If you want the `term` to be updated, you should use `currTerm`.
Use the new Ruby 1.9 hash syntax.
Why not just use the http.Handler?
I think we can drop the test file entirely. It's not being used.
`pageTitle && googlesitekit.pageTitle.length` should be enough.
This is not a proper sentence.
This file has a bunch of unused imports.
I think it would be more readable to have the `success_https` in front of the `success` enum, rather than having the `success` and `success_https` entries in front of each enum entry.
This line is a bit weird. Why do you need to set `self.local_port` here?
This is a bug. The weight should be `pos_weight` when it was passed as `weight`.
I think we should have the same test case for Windows 2012, Network setting (network setting path) and Windows 2010, Network tags.
Please revert this change, it's not needed.
Why is this needed?
This is not needed, it's a new var
I don't understand why you need the finally block.
I think we need to add a new field to `h2o_linklist_t` to indicate that it is a pointer to a linked list.
This test is not testing what it says it says it does. It's not testing what it says it says it does.
Line is too long. [81/80]
This is a bit weird to me, but I don't think it's a big deal.
This is a good example of a test case where you would need to disable this pylint rule. I'm not sure what the correct behavior would be, but if it were to suppress it, I think it would be good to keep the original behavior.
Why not use the await pattern here?
This should still be `<% unless purchase.starts_immediately? -%>`
Why are these changed from `0000` to `10`?
I think this should be `LinkToChildDomain` or `LinkToParentDomain`.
This test is not really necessary, since you already test the `Create` method.
I think it's better to use the same constant name as `prefQueueSortOrder`. `prefQueueSortOrder` is not a good name. It's a sort order.
nit: I think the linter is going to complain about the `*` in the import statement.
I think this should be `const {makeLazyLoader} = require('../utils');`
I'm not 100% sure about the naming here, I'd rather see it called `on_task_failure`, or something like this, since this method is not really specific to the task. Maybe `on_external_task_failure`?
I'm not sure if this is needed. The `refworks` view only renders when `BlacklightMarc` is defined.
This is the wrong place for this. The `show_source` should be called from the widget when the source is shown, not when the source is not. The `show_source` method should be called from `show_source` and the `show_source_pygment` should be called from the `show_source`.
I think we should check that `opts.MaxSubs` is not zero before adding to the client.
Why is this being removed?
I don't think we need this change
I don't think we should retry on the first error here, we should just retry on the next one. The only error that can occur is the `err` being returned.
Should this be 2.18.2?
Should this have a `.` at the end?
I don't think this is the best approach, we need to be able to run specs with no examples. I'd prefer to have a separate `run_specs` that returns a `0` exit code if there are no examples, and then a `1` exit exit code when there are no examples.
I don't think this is correct. It's not a variable, but a field.
This is the only place where the packet is being forwarded to the L3Routing table. The other places in this PR are the L3Routing table.
This should be `exclude-too-few-public-methods`, not `exclude-too-few-public-methods`.
I'm not sure this is a good idea. The VM name will not be the same as the VM name in the config, and it will be overwritten by the `format_instance_name` call. I would rather have this be part of the `format_instance_name` method.
This is not a functional state, it is an error to restore console to functional state.
This class is not thread safe.
This is a change from the previous PR, but I think it would be better to have the capacities as a separate field in the volume object, and have a separate `Capacity` field that is a pointer to the capacity of the volume, and then we can use that in the output instead of the volume spec.
`@param <T extends Metric> metric the metric`

I don't think we should be casting the context here.
I'm not sure this is a good way to sort the traces by trackid and timestamp. I think the most important part is the timestamp, so it should be `order("gpx_id ASC, trackid ASC, timestamp ASC")`
This is the only place where I'm not sure about this. If we don't have a user preference, it should repeat the episode, right?
I think we need to add this to the `caddy/` directory as well.
This is a little confusing. I would expect `chrome_args` or something similar to make the code clearer, but I'm not sure.
This is a bit of a nitpick, but it would be nice to have a space after the `:`.
I don't think this is the right place for the switch. The `Http2` is a generic type that we can't really use.
I think you should also be modifying `package2.dataframes2.csv._data` to `csv.at['Int0'] = 42`
This is a breaking change, we can't do that.
This is not a good error message. The error message should be more like "Invalid GitHub repository: https://github.com/mycompany/myrepo".
This should probably be a `for (String flag : flags)`.
This is not needed.
I think this should be hidden, and defaulted to false.
I think you can remove this line. It is already checked by the `if` statement above
This is a pretty expensive operation. I'm wondering whether we should use a more descriptive name like `sum` or `coalesce_and_sum`
This is a little bit hacky. The systemdsystemgeneratordir should be defined in the `systemd` package. I would rather see this in the `libsystemd/systemd.c` file.

This is a bug fix. We need to set it in the overload of generateSamples, not in the overload of generateSamples.
I think it is better to add `startTs.toString()` here.
Can we use `parseFloat()` here?
Missing space before #.
I think we need to reset the array here. Otherwise it will be a memory leak.
This is the default for the `AuthenticatedRouteMixin` class.
I'm not sure if this is the right way to do this. The workflow should be a simple "complete" state, not just "pending" state.
I don't think this is correct. It's not checking for NaNs. It's checking the image's shape. It's not checking the image's shape.
This change is unrelated to this PR, please remove.
I'm not sure if we need a tool to be able to use the wheel resolver. We should be able to use the pex to install a wheel.
This is a breaking change.
This should be `Q2/2021`
This should be in `finally` block
I think we should also check for `stakingV2` being non-nil here.
Why is this needed?
I think we should return the error here
Why did you change this?
I think this is a bit too much, as it will be checked in the `docker_check_env` function. Maybe we could move the check into the `docker_check` function? I'm not sure what's the correct way to check for this.
I would prefer `is_called_in_call_node` or something. `is_being_called` is a bit confusing, and I think it's more readable.
I think this should be `@group_level -= 1`?
I think it's fine, but we should fix it in another pr.
I would suggest moving this function to `hive.util`
I'm not a fan of this. I think it's better to have the class define the `search_params_logic` method and then have a `search_builder` that calls it. This way we can avoid having to define the method twice in a single place. I'm not sure what the best approach is though.
This should be `cfg.Genesis.KamchatkaBlockHeight = 1`
Can we use the `DEFAULT_VERSION` constant here?
This is not a good idea. We should not be adding any new files to this list.
This is not needed, we already have `this.session`
This import should go at the top of the file.
I don't understand this change.
This change is unnecessary.
Please use double quotes here
I think it's a bit weird to have this as part of the Prometheus config, since it's not really a query parameter. Maybe we could make the `PrometheusConfig` struct itself and pass it in to `Register` and then just have `Register` call the `RegisterAdminApi()` function?
F401 'time.sleep' imported but unused
I don't think we need this flag anymore. The export done flag is already set by `SetExportDone`. We can just delete the flow record from the map.
I'm not sure if this is a good idea. The only thing I would like to see here is a newline, which is not what we want.
Why did you changed this?
nit: I think this is redundant.
This is a bit weird, why is it 11?
I don't understand the `true, true` argument here
This is a bit of an odd place for this, but not a blocker.
This file should be reverted.
nit: this is a bit confusing. Why not just `mgr` ?
This is a breaking change, we need to add a new method to the interface.
I'm not sure if this is a problem, but I think it's a good idea to have the test runner depend on the `chai-subset` module.
I'm wondering why the ordering here was necessary. The `Select` method is ordered by `ProtocolCode` and the `OrderBy` method is not.
Why is this change necessary?
I think this should be a `<p>` instead.
This is not necessary, since bboxes is always a tensor
Redundant self detected.
This is a little bit weird, I would have named it `assert_result`
I think this should have a more descriptive name, like `IHttpParserBuilder`
This should be a `logger.warning`
I think we need a check here to make sure we're not dropping the state map. If we do, we should drop it. If we do, we should drop.
Should we use `S3OutputStream` instead of `S3OutputStream`? I'm thinking about the use cases where we want to create an output stream that we don't want to write.
Why is this needed? I think it should be handled by the `Input` constructor.
I think we should add a warning here that the data format is invalid.
This is not correct. If the string is longer than the current length, then the last character is not copied into the buffer.
I'm not sure we need to expose this API. I think we should keep it in the public interface.
This is not used anywhere.
I think we should remove this file from the codebase.
This is not equivalent. It would have been `if name := obj.Name()...; name != "" {`
I'm not sure about this one. I think we should keep it.
I think this is the only change that needs to be made. We can't change this value in the future.
Why not just have it as an int instead?
This is not a deprecation warning. It is a user error. Please use `warnings.simplefilter('always')` instead.
I think it would be better to use a more meaningful name than "sql" for this method.
This is a bit weird. I would have assumed that the stories are for Google Components, but it's not.
This should be `#ifdef __X86__`, right?
I think this is a good change, but I think it would be more readable if you split it in 2 lines: 1. check if key[0] is o 2. check if key[1] is n 3. check if key[0] is o and key[1] is n
This needs to be `param.List`
This is not correct as it will not be highlighted if you set the theme to `AntennaPod_TrueBlack`.
This should be unique: true
This should be `e.getMessage().contains("Table/View 'HIVE_LOCKS' does not exist, this might happen when using embedded metastore or doesn't create transactional meta table. Please reconfigure and start the metastore.", e)`
I think this method can be removed. It is only used by the `Name`.
I think you should be able to use `this.isAvailable_` instead.
This is a bug fix, right?
This is a bit of a nitpick, but I wouldn't expect `val1.keys !== undefined` here to be necessary since `Object.keys` will return an object.
Is this import needed ?
I think you want to add `,` at the end of the line
I think we should just use `typeof opt_port === 'function'`, and remove the `typeof opt_port === 'function'` check.
I think this should be `Address`
I think we can remove this method as we don't need it anymore
This is not necessary. `F` is imported at the module level.
This test class should implement the ServiceContainerTestCase.
I think we should not add the `iceberg-flink-job-id` to the `StateBackend`, as it may be used by other states (e.g., `stateBackend`, `stateBackend`, `checkpointBackend`, etc.). Instead, we should add the `iceberg-flink-job-id` state to `stateBackend`.
I think this is the right place to add the `log_signal`. It's a bit confusing that we're filtering on the signal name, but we don't actually do anything with it.
This should be `return new Promise(resolve, reject);`.
I'm not sure why we need to check for nullptr here?
This is not correct. It should be `return;`
Why is this change necessary?
Layout/TrailingWhitespace: Trailing whitespace detected.
this is the same test as above, can you just call `.sort_index()` here?
This is a regression.
why is this changed?
This is not correct. If the pool is full, the fee is not enough to hold the fee.
Use nested module/class definitions instead of compact style.
I think we should use the `ProjectSpecLoaderFactory` here. The `ProjectSpec` class is already a `YamlLoader`, so it's not a good idea to have a separate loader class.
Shouldn't this be `E-mail` instead of `Email`?
This is a bit of a nitpick, but can you move the selector to the next line?
Why is it necessary to declare this here? It seems that it's only used in the `it` block.
Why do you need this?
I think we can remove this, it's not necessary.
I think this should just be in the `else` clause below.
I think this is not needed anymore.
I think we should have a `Status` enum for these, since we're using it in the `Status` type.
I'm not sure why this change was necessary.
@martinpovolny, can you please add the translation keys to the translations file and use `:ml` instead of `:mlat` and `:mlon` instead of the strings?
This class should be removed as it does not exist in the current version of the code
This will cause the `export()` to fail, since the `Batch` is empty. We should add a null check here.
I think this is a bit of an overkill to test the resource name. I'd rather see a test that checks if the id is present. Also, I would also check that the id and resource name are present, rather than just checking the details. That's what we're doing elsewhere in this file, and I don't think we're testing that anything else is being returned.
This is not correct, it is a generic parameter
I don't think this will work. The client will always be the same as the client with the same serverId.
I think we can use the `containsIgnoreCase` method here
This is a pretty big command. I'm not sure what the right way is.
This is a change that should be reflected in the release notes, but it's not a big deal.
I'm not sure if we should have a separate paragraph for this. It's a bit confusing to me.
I would suggest to add this field in the `SpellInfo` class, and then use the `setField` function to set the field.
I don't think this test is useful.
This is not a problem, but I'm not 100% sure if we should change this.
Is it possible to make this a constant?
I would suggest to use a `bool` instead of `bool` here.
why this change?
I'm wondering if we should have an event-reconciler plugin that does this. I'm not sure how we would be able to use it, but it's probably not a huge concern.
This change is not related to your PR, but it seems to me that we should not have a space between `pass 0` and `0`.
I think this can be deleted.
This should be a separate test case
This is not a list, it's a generator.
Why not `info` ?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I don't think this is needed
This will throw an `IllegalArgumentException` if the file does not exist. I think we should catch it in a different way.
This is a leftover. It's no longer needed.
I'm pretty sure this is not a good idea. You're going to end up with an infinite loop if the object isn't in the statusbar. I think you need to do `if obj and obj.role == controlTypes.ROLE_STATUSBAR`
I don't think this is needed anymore
I think you can just delete this.
I think we need to keep the interface here as well.
Is this change necessary? It seems unrelated.
This should be removed.
I'm wondering why we need the MakeMdID here, but not for the others.
I think we can remove this file
I don't think we need this file
This will throw if the handle is already disposed. I think it would be better to have this in a separate method, so it can throw if the handle is still in use.
This is a good place to put a TODO for this.
Can we use the `--` prefix to avoid the conflict?
I think we should also check the length of the task ARN.
`101` is a constant that you can define in the before block.
This should be `if param_visibilities is None:`
I think we should use "positional arguments" instead of "positional arguments".
This is not needed, the Snackbar is already showing when the user clicks "Show". The error message should not be displayed when the error message is not displayed.
This is not a good idea. You can't use std::string for a vector. You need to call `string.resize` on it. You can also use `std::stringstream` to do the conversion, but you don't have a good reason to use std::string here, you just need to use std::string::npos.
Shouldn't this be `return { '' }`?
This is a bit weird. I would expect the package name to always be set, even when `RemovePleasings` is true, but it's not a problem.
This is not needed.
This should be `!m_comm->get_num_models()`
I'm not sure if this is the right approach. It seems like we should be able to handle the xml format differently, and we should probably be able to handle both formats. I think the best approach is to have a `handle_xml_format` that takes a `params` hash, and handles the xml format differently (and then the xml format can be handled separately).
I'm wondering if we should just use a `flb_debug_chunk` function here instead of a `#define`
I would use `_deleted` instead of `_deleted`
This should be an exception
I don't think we should add a new API for this.
I'm not sure about this. It's not clear from the code that it's a null accountable, but the implementation of `Accountable.NULL_ACCOUNTABLE` is the one that returns `null`.
I don't think we need these exported functions
Why did you remove this?
I think you should use `raw` here. `raw` is deprecated and will be removed in 5.0.
This change is not correct
I think it would be more clear to check for `e.pgcode in [psycopg2.errorcodes.UNIQUE_VIOLATION]`.
This test was wrong and was not failing
I think this should be `fromConfig`?
I think we should just use `Collections.emptySet()` here instead.
This change is unrelated to this PR, please revert.
This is a good change but I think it would be good to have a `setup.py` that lists all the required versions and adds a dependency to the tenacity package.
I think this is a BC break
I'm wondering if we should throw an exception if `clientSecret` is null.
I think we can just do `setProfileID( undefined );` here.
This is a bug, it should be `assert.Contains`
I think we can remove this test. It's not needed. We can just use the `get :move_topic` method.
I think you can remove the nil check here.
I think this should be named `unconfirmed_email`
Please avoid star imports.
I'm not sure why this test is being run twice, once here and once at line 234, and then again in line 346. Is it just because it was previously passing before?
This is not needed.
This is a bug, it's not a value of nbits.
This is a bug, `block` should be `block->block_work()`
Why do you need this change?
This should probably be a `const`
This is the only change that I'm concerned about, but it looks like it's only used in one place. Can we move this into a module?
F401 'pytest' imported but unused
I don't think this is necessary
I would suggest to call this `CLUSTER_SCOPE` to make it clearer that the cluster scoped mode will be used in conjunction with the cluster scoped mode.
Why did you remove this?
This should be a method config.
This is not the right fix, because the `space` should be the session space. It is not the right thing to do.
This should be a separate artifact, not a package, so it can go to a separate folder in `src` and `test`
This is the only change in this file. The rest are just cleanups and cleanups.
Why is this needed?
I don't think this is a good change.
This is a bug fix, right? It should have been a separate PR.
I would suggest to move `axe.utils.tokenList` to a `utils` module.
I think this should be `ibftTwo` instead of `ibftTwo`.
I think this should go into the `if` block below, since we're checking if the user is crawler and if so we should not be calling `find_or_initialize_search_session_from_params`.
I don't think this should happen. If we have a problem with the data loading the annotation, we should not raise an exception.
This is not the right copyright header.
This is a breaking change, right?
I'm a bit confused by the naming. Why is this cache a cache? Is it for the caching?
I'm not sure this works. The client library generator generates `resource_` as the name for the resource field. The name is the generated name for the field, but the generated name for the resource field is `resource_`.
I think this should be `public`?
I think this is the only one where we should be using `grad_clip`. I think we should keep it.
Use the new Ruby 1.9 hash syntax.<br>Prefer the new style validations `validates :column, presence: false, format: { with: /\A[0-9A-Z]/ }`
I don't think it's a good idea to add a new field to the mutable state. It's a field that is not used by the workflow task. It's not used by the child executions. It's also used by the child executions in the workflow task.
why change this?
Why is privileged capabilitty necessary?
I think we can remove this field from the struct
I don't think you need this.
This change seems to be unrelated to the PR? Can you explain it?
I would suggest to use `1 << 32` for this value. It's more readable.
This is a breaking change. The old code was using the vault service account name as the service account ID. The new code will use the service account ID as the service account name.
This is not a good name, it's not a set. It's a set that is empty with nulls.
Can this be a `const`?
This is a breaking change. I wouldn't remove this option, but add a deprecation warning.
#endif
File is not `goimports`-ed (from `goimports`)
I think we can just remove this test altogether.
This should be `db.statement_type`, right?
I'm not convinced that the dynamo_initialized will always be set before the app is started.
I'm not sure what the best way is to get the name from an ARN. This seems like it could cause problems for other providers.
`applicationVersion` is unused
I think we should return a new error instead of nil here. If we return nil, we should not return an error here. If we return a nil response, we should return an error here.
I don't think this is the right place to do this. The `client_options` is already a hash.
I think we should set it as a default value in the `userOptions` object.
This should probably be `using RangeGenerator = image_layout_map::ImageSubresourceLayoutMap::RangeGenerator;`.
This is the test manifest. It should be `vcB`
I think this should be `execute.as.user`
Why do you need to classify actions?
nit: I think it's more readable to use `len(result) == 1`
I don't think we need this, we can just use `IssuerConfig`
I think we can remove this class.
Why was this changed?
This is a public class. Please make it package-private.
I don't understand why we have to create a new env for this.
I don't think we need `nextPrefix` in `RawKey`.
This is an internal detail view that is not exposed to users. I don't think we should expose it here, and we should just use `longRunning` instead.
I think this should be `from ..utils`
Can we delete this code?
I think this should be a `StringVarP` instead of a `StringVar`.
Please add a description
This is a bit confusing. Why do we need to translate the message? Why not just use the `__str__` method on `Message` object?
This is a little weird. Why do we need to have a separate class for the server addresses feature?
Why not `stackFrame.GetMethod?.DeclaringType`
I think we need to remove the volume_up icon.
This is not a good way to check if the error code is ENOENT or EAGAIN.
I think this should be a separate method, `_keys_repr` or `_get_keys_repr`
I think you should be able to just use `datetime.strftime` here.
Should we add this option to the default `docker.yml`?
I think we should move this package to the internal package.
Why did this need to be changed? It seems to have been a typo.
Can we add an else clause that throws an exception if the length of `prefix` is not match the length of the columns being encoded (`len(column_labels) == len(prefix)`)?
I think we should use a constant here, rather than hardcoding the value.
This is the only change that I don't like.
Why not use the default `createWrite`?
@pmeier I don't think this should be in the utils file. It's a utility function that is only called in the `ProgressIndicator` class, and it should be in the `progress` module.
I'm not sure this should be a separate migration, but I'm not sure if it's necessary to add it to the existing migrations. I think the only thing we need to do is to add a new table to the existing table, so it's not a big deal to have a separate migration.
I don't think you need to import this
This should be "cannot change field \"id\" from index options=DOCS to inconsistent index options=NONE"
This is a breaking change, we should probably leave it.
Why is this needed?
I don't think this is needed, we already have a `FlagOpenVPNPrice` and it's value is the same as the default value.
This is the only place that I can find where `table` was being used, so we can remove it.
I think this should be `playerTradeItem->getType()` instead of `item::getType()` (and the same for the `item_t`).
I don't think this will work on windows. You need to use `go get -U`
I would prefer if this was in the vendor.inc.php instead, and then the function would be called from both places, rather than duplicating the logic.
I think it would be good to add a translation for the missing code.
I'm not sure about this one. It seems that it is used in the `spec` package.
I think it would be better to move this into the model.
I think it's better if we just log the warning, and let the user know that they are using the wrong configuration, rather than the wrong one. This will help the user know they are running in the wrong configuration and they will not know what they are running in.
I think we should keep the `cygpath -F 38` here.
I think this should be `moveNoteToFolder`, since the menu item doesn't have an action
nit: I think we can use named parameters for the lambda
Should this default to false?
I think we can remove this else block now.
This method can be removed as it is not called anywhere.
This one should be removed
I don't think we should delete the field. We should be able to set it to false.
I don't think this is needed, we should remove it in this PR.
Layout/TrailingWhitespace: Trailing whitespace detected.
Is this really necessary? It's a log statement and I don't see any log output in this function.
why do you need to unlock here?

Why do we need to change this?
I'm not sure if it is worth it to add a new event for every single text change event. It would also allow us not to add a `event_textChange` event if we want to.
This will be the same package name as the local package name, but it is different from the package name in the import table.
I think we should keep this version. We don't want to change it in the future.
I think you can just delete this.
I think we should also set `NetworkType` here
This should probably be `model(fn)`, right?
This should probably be `nix-instantiate --eval`
This annotation was added in #9343
I don't think this is the correct error message for this. It's a node creation error. It's a node creation failure that's not an error.
I think the comma was intentional.
This is not needed.
This change is not required, right?
I think this change is unnecessary.
I think it would be better for the user to specify what the numeric_only means, and not to say that it's not used by this implementation.
This should be an error, not a warning.
I think this is not needed
This file should not be included in the PR.
I think it's a little confusing to have the annotation `required = false`. I would have expected that the annotation should be required, but I'm not sure.
Why not `l > 0 && vs.NullN() == 0`?
I think it's better to catch the specific exception here, rather than catching everything.
This seems like a good place to put a test for the `appendind` case.
I don't think we should do this. We can just ignore this error and let the client decide what to do with the response.
Why is this optional?
@jeffkl, this was a bug. I fixed it.
I think this should use `boost::make_iterator_range(mol->getAtomNeighbors(mol->getAtomWithIdx(aid))`
I'm not sure if this will be better. The `infer_kernel_gpu` is only used for the clustering, so it's probably not necessary to add it here.
Why did this change?
"... as two color attachments with different layouts."
I think it would be more consistent with the name of the constant.
I think we should call this `num_processes`
This is the only place that I can see where `id` is used.
This setting is no longer used.
Why is this change needed?
This was a bit of a nit, but I think it'd be better if we had a single `DiffList` function that took a provider and a `List` of manifests. Then the `DiffList` function could be called with a list of manifests. That way we don't need this `IgnoreAddingMapKeys` flag and we could just call it directly in the function.
I think this should just be a `step_name`
This should return a metric, not a pointer.
I think we should add a `before_action` for the organization_context
This is the same as `o instanceof Date ? new Date((Date) o) : o`.
This is the only place we use `buf[4:8]` in the code, so I don't think it's necessary to use it here.
This is a breaking change. The default is `false` and the new default is `BooleanDefaultTrue{Value: NotSet}` so the default is `BooleanDefaultTrue`. I think we should keep it the way it was. I'm also not sure if this is the best way to handle the breaking change.
I'm not sure if we should change this to a setter, since the role is not persisted yet.
This file should be reverted.
This is the same as `Base` except it's not called by `Base`
This is the only change in this PR, but I think we should add a note to remove the `polymorphic: true` here.
I think this is not correct. If tunnel is NULL, then destroy() will not return anything.
This is not a good change, as we are not using the `.` character anymore, it is not needed anymore.
This is a change in behaviour, right?
This is a good place for the import.
I think this can be a const pointer.
@brendankenny @joshlory is this a correct fix?
This property is not used.
I think this will break existing users. Can we add an option for this?
Is this change necessary?
Is this a bugfix or a fix for the issue that we are fixing?
This change seems unrelated to the PR?
Why is it not `Type\Integer`?
@shopsys-givens @shopsys-givens This change is not backward compatible. We need to add a new method to return the indexed products.
I think this should be in a separate commit, since the commit message doesn't mention it.
Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.
I think this is the only place where we can get a zero-like tensor.
I think this is the only place that uses `substr` and it is not used anymore.
Why did this file get removed?
Why is this removed?
Should we also test this in `testdata/enc-v1-base64.conf`?
Why do we need to add an id here?
This is a change in behavior. Previously, if `1` was passed, it would return the triplet. Now, it will return the triplet.
Expected indentation of 2 spaces but found 1 indent
I'm not sure if this is the right place to enable this. The default is true. I think we should just disable this if the API is enabled.
I'm wondering whether we need to call `instantiateSignatureAlgorithmFactory` here.
This should be `if TYPE_CHECKING:`
This should be `setIEService`.
// TODO: add a unique_ptr for bpf
This import should go down with the rest of the stdlib imports.
I think this import can be dropped now
This should be `<see cref="System.Data.IsolationLevel" />` to avoid the null check.
This interface is not used anymore
This line can also be removed.

I think we should just remove the `if !gopts.JSON` check here, as we don't want to run this if we don't have json.
Why was this changed?
I think we can just remove these two lines.
`entry.getKey()` is a bit confusing. I'd suggest to rename it to `key` or `entry`.
I think this should be `[  ]` instead of `[ ]`
I think you can remove this file.
This is a public class so it can't be changed.
I'm wondering if we should make it a `*.min.js` file so we don't have to worry about the fact that it's included in the CDN?
This should be in the `vnl_fortran_copy` section
Why not just `func afterFunc(c clock.Clock, d time.Duration, f func()) stoppable`?
I think this is a good change. The same applies to the other occurrences in this PR.
Why do we need these generic arguments?
I don't think this is a good idea. We should be able to remove this.
I think we should use `CDATA` here.
I don't think we need this here, as we don't have a `sniff` option on the client.
We should log this error as we're trying to get a source snapshot.
Why was this removed? I don't see it in the diff.
This is the only change that I'm not sure about. The rest are just cleanup.
Why is this line needed?
I'm not sure if we want to keep this. I think we should remove this check and just return `None` in that case.
I think we can get rid of this now, right?
I'm not sure this test is really useful - we should just kill the process if we're not exiting
Should this be an `internal` type?
@kuzmany @mattwire is this ok?
I'm a bit confused by this change. I think it's a typo, but I can't see where this was being used.
I don't think this is needed anymore.
This file should be removed.
I'm not sure if this is the correct way to do this. I think it's better to just remove this line entirely and just use wp_enqueue_script.
I'm not sure this is the best approach, as the `attributes` hash will be the same for all attributes. We should probably use `attributes.each_key` here instead.
This should probably be a static method, since this is only called once.
Is it necessary to have this method?
Should we also drop the packets from workloads if we have a dropEncap option?
Why did you rename this method ?
I don't think this is needed, we can just call the function without the if check.
I'm not sure this error message is very clear. What does it mean? Is it a hash with key and value?
Why not use $status['code'] directly ?
I think we should keep the old value and just add a new one.
I don't think you need this. The default is false.
I'm not sure why we need this?
This is not right. The remux stream is a direct stream, not a direct stream, it's a remux stream.
I don't think we need the `(s)` here.
I don't see how this change is necessary.
I don't think we need to mention this in the docs.
I don't think you need this catch block.
This is a python 3 only file so I think this should not be changed.
I think this should be `signerAddress` or `address`.
This should be `opts.fetch(:localize, false)`. Otherwise, if `serializer && serializer.localized?` and `opts[:localize] != false`, the normalized key will be `name` and the user will not be aware of the value.
Why is this import necessary?
This function is not used, so I would suggest removing the parameter and just using `flux_kvs_txn_symlink` in `flux_kvs_txn_symlink_raw`.
This migration is now only needed when the setting is changed.
I think this will fail if `fs_path` is unicode
Is this used?
This is the only place we use `targetsForLevel`, so we can probably remove the parameter.
I don't understand why we hide this flag here?
This is the main change. The rest is just cleanup.
This is the only place where we use `Warnf`.
@scefali @johanste I'm not sure what this change has to do with the PR.
I think we can get rid of the hasInstance check here
I don't think we should remove these. We can just remove them once specs project enforces Send params.
I don't see how this is correct. The first time it was seen is when the first time we saw it, but we don't want to add it to the list.
This should be in a `defer`, otherwise the test will fail if the `m.ctrl.T.Helper()` fails.
Why not just use a buffered channel here instead of a channel that is buffered?
I think you should be importing `runonce.task` instead of `RunOnceTask`, since you're using it for the other test.
This should be in alphabetical order.
I'm not sure this is correct. If the field is a date, the value will be a `Date`, so it will not be displayed. The `val` field is not an `IndexableField`, and the `val` field is a `Date`
I think it should be `setup-show` instead of `v`. `setup-show` is a command line option.
I think this can just be `leafFirstPingInterval = time.Second`.
Why not just have the mailHost be a String and have the mailPort be a Integer?
This change is not needed.
Why not just `$raw = reset($raw)`?
This should be a `map[string]bool` so it's not a map of strings.
I think we need to add this to `./hack/configure-hive/hive-common.sh`
This is a good change, but it is a good change. The command should be "GET /dev/null"
Why do we need the `innerHTML`?
I'm not sure if we want to change `go` to `run` here or not?
This is the actual change
I don't think we need this. We already have `deactivated_on` in the subscription table, and we don't need to filter by deactivated_on.
I think we should be able to remove this whole if block.
I'm not sure this is the best place for this property. I would prefer a more generic name such as "isInSync" or something similar.
This is a breaking change.
I think we can use `GetTipSetAndState` here, no?
Why is this necessary? Isn't `IComparable<int>` the same as `IComparable<int>`?
Why was this deleted?
I think it is better to move this logic into the transaction class.
I don't think this line is required.
Why change this?
I think this is a bit too late for this PR. I think we should remove this flag from the main.go file and just add it to the `common/flags/flags.go` file
This seems to be the wrong default value for this.
Why is this change needed?
These should all use `wlr_drm_interface_*`, not `extern const`.
This should be `<=`
This is a temporary fix for the test failure.
This is a typo.
This is not a valid name, it returns an error.
Shouldn't this be an `exception_ptr`?
I don't understand this change.
I don't see a reason for the interface to be a class.
I think the original was better
nit: `namespace` is not needed.
I think we can remove this method and the one below, since they're only used in the handlePage method.
I think we need to update the method name to reflect that it's not returning configs
I think these are also not needed, since they are always set in the code.
This should be in a separate commit
I think we need to add a check that the prefix is valid.
This is not the same as the previous code, but it would make sense to extract this logic in a helper function.
This is not the correct version. The version should be 5.20, not 5.10.
I don't think `typeof xyRatio.x` is a good idea here, since it's not an object.
I don't think we need a trait for this.
Why is it `GAUGE`, but not `COUNTER`?
I'm not sure about using the `.0` suffix here, but I think that's fine. It's a bit confusing since the component is a component, but I'm not sure how it's used.
I would prefer this to be a flag. It's a little bit confusing.
Why do you need to disable the comma-dangle?
This is not needed.

This will be a problem when we add gas price to a account, right?
Why is it ok to delete this one?
Why do we need stamp?
I don't see any reason for this change. It is just to make sure the block was committed and not committed.
This is not needed
This is the only place where the `TInt` type alias is needed.
This is a very minor nitpick, but it's a bit confusing to me. The default is `ipywidgets`, but the default is `ipywidgets`?
Why not use `packageConfig.shortName()` directly?
I think we should keep the old name.
This is a breaking change. I'm not sure we should add a new method that accepts a struct.
I'm a bit confused by the name of this method. It seems to return a sequence number, not a snapshot, right?
I think we should use `is None` instead of `not isinstance` here, since we're not using the type of the tuple anywhere else.
This should be `psycopg2-binary<2.10`
This should probably be a `const`
Shouldn't this be called `ContentType`?
I don't think we should remove this check. It's possible that the test is failing, and we want to know about it.
Why do we need to do this?
I think this should be in a `finally` block, to ensure that if there is a problem deleting the data, the user is not aware of it.
Why change this to pointer?
I think we can remove this `err` variable altogether and just return the `perr` here.
I think this should just be called 'emails', not 'secondary_emails'
why not use `TestPort`? I think it's more clear
Why is this necessary? It seems like it should be handled by the caller.
This should be `not_cancelled!`. `not_cancelled!` is the default behavior for the `can_cancel_form!` method.
I don't think this is the correct error message.
I don't think we need to expose this. We could just return the condition.
I don't see this used.
I think it would be better to return the number of rows in the query instead of using a `count(*)` query.
I think this should be `nycTaxi_min` and `nycTaxi_max`.
This is a change of behavior. Previously, `in_memory` would have been empty if the `File` is not loaded. Now it will be `_added` and `_unloaded` and `_loaded` both have been loaded.
I think this should return an error, not an empty string.
I don't think we want to do this. We want to make sure that we're only updating the password reset, not the activation resends. We can't do this because the activation resends will be deleted after the password reset.
This is a good change, but it is a good idea to use the new `util` module for this.
I think the original message is better. The problem is that we don't know the size of the file.
This is not needed.
Is it possible that the policy is missing? If so, we should log it
Why is this necessary?
nit: this import should be grouped with the other sigs.k8s.io imports
Can you add a case where there are no outbounds and no outbounds for a service?
This is not a good idea. We should not have any special handling here, as we should only be setting the value when the type is not `*compute.Client`, and the `context.CancelFunc` is a special case. This is a problem with how the client behaves with the `WaitForInstancesSignal` and the `*compute.Client` fields, and I think it is not a good idea to have the `WaitForInstancesStopped` and `*storage.Client` types be the same.
I think this is wrong, the message should be sent to saylinks if it doesn't exist, and not to saylinks.
I think we should remove the endpoint for `/validate/egress` since it is now a no-op for egress and service external IP.
This should probably be a `long` instead of an `OptionalLong`
We should probably remove it after a grace period
Why is this change needed?
I think we should also add a `@Nullable` to the `mapper` parameter.
I think we should keep this as it was.
This is not a good way to do this, we should instead have the max control line size configurable.
This is a breaking change. I would prefer to have a separate PR for this.

Why did you remove the test? It seems to me that it is testing the wrong thing.
This is a leftover from debugging.
This is not needed anymore, right ?
Can you add a check for a line break with `\t\r\r` as well?
Why did you change the condition here? The original condition was correct.
I think we should keep the notice message here. We can't exit the server without a signal.
I think we should return an error if the user is not able to claim the deposit.
I think we should check if `mp.Platform.AWS` is `nil` here, otherwise we will have a panic if it is.
This is the label for a checkbox in the mouse settings panel, not the mouse settings panel.
This is the only place where we need the raw collector uri, right? Can't we just use the `Uri` directly?
This should probably be `throw std::invalid_argument("invalid value for bondsToCut")`
I think it would be better to have a default value here instead of `line`
I'm not sure if this should be changed, it's a breaking change. I think we can keep this as is.
This should be `const` instead of `var`.
This is a little confusing to me. Why do we need to refresh the status here?
This should be a `RandomState`, not an `int`.
I think you can use `for kk, vv in v.iteritems():`
I don't think we need this.
This is not a valid lock for the device.
This should probably be `const auto&`

I think we can remove this line now that the coupon_id field has been removed from the form.
Why this change?
This will result in the warning message logged twice.
Why this change?
Is it necessary to call `mergeOriginalRoleAndMetaRoleAttributes` here?
I think we should use a more descriptive name for the file.
Please use the `manual_wall_time_option` macro here.
This is a little weird, why not just return err.Error() here?
nit: remove empty line
I would suggest to call this "houseOwnedByAccountOnAccount"
I'm not sure if this is the correct place for this change.
Nit: `nameOrHandle` -> `windowName`
This was the only place that used the `Random`. I think this was the cause for the problem.
Why is this changed?
I think this file is missing the license header.
I think this should be done in the `main` function.
I think this should be a separate commit, since this is just a change of functionality.
I'm a big fan of this change, it makes it hard to read.
I don't think this is right. If you have an unknown value in the op_data, then it means it's missing, so the result is not a valid null expression. I think this should just be `ex_expr::EXPR_NULL`
I think it's better to use the locale from the request header instead of hardcoding it. This will also allow us to add a `Accept` header if needed.
`break` is unnecessary
I'm not a huge fan of this. It's not a good idea to have a header for every request, especially when we have to flush. I would prefer if we could just set the header in the `http.Flusher` interface and have a `Flush()` method that calls `Flush()` and returns a `Flusher` and then flushes it. This way the code will be cleaner and we don't have to do any casts and check for the flusher type.
I think this is not needed.
`mayactl snapshot create --volname <vol> --snapname <snap>`
I think this needs to be added to the `config_types.yaml`
I'm not sure if it's a good idea to add this to all the reports, but it seems like it might be useful to have a separate set of checkers.
This is the actual fix.
This is not necessary anymore, right?
This will break the build if you run `rake dpl install` in a different directory than before.
This is a good change. I'm going to change it to `debug`, since it's a bit of a mess to have it logged.
This is a little bit confusing. I think `urlParams` is more descriptive than `urlParams`?
I think this is a little confusing, since it's not actually a pause type, but a state.
I don't think this change is needed.
This is a bit confusing to me. I would have expected this to be `False` if `data` was a list.
@sonata-project/contributors I'm wondering if we should throw a deprecation notice here. I think it would be a good idea if we could remove the dependency from the `classification` module and the `classification` module.
I don't see a reason to change the name of the chain flag. It's not a chain flag and it's not a chain flag.
This is not the same as the code above, right?
This test is a bit confusing, since it's testing a specific setup-tag. It's not testing anything about the API. It should be named `shouldTestSetupTag` or something like that.
@lisasy-kimballi @kim-dan-apple @jackfrancis Can you please explain why the null case is needed?
Can we make this a while loop?
Should we make this `@param {ReadPreference|string} [options.readPreference] The read preference to use`?
Why is this a pointer?
This is a good candidate for the `package.json` file.
This should be `this->GetTarget() == GetTarget() && this->IsAlive() && this->IsAlive()`
This file was added by mistake
This should be a separate function
I don't think we need this. We should be able to use BigDecimal.new instead of this.
I think this should be `example2` instead of `example1`.
I think we should add `.includes(OrgStatBySector.recent)` here
This should be moved to `dags.utils.backoff`
@damithc I don't think this change is necessary. I don't see anything that changed in this file.
nit: remove this extra line
This is a bug fix.
I think this is a bug in the code, it was not testing the annotation
@joshlory is this the correct way to do this?
This is the only thing that's not related to the issue.
I think this should be `FLB_CONF_STR_BACKOFF_MAX`, since the default value is `10`.
I think you need to update the doc string as well.
I think this should go in the `pylint/__init__.py` file.
This should be a `moment.utcNow()` instead.
This is a feature feature that should not be in a feature test. It should be in the `user` feature.
This is the test for #2990, so we can remove it.
> What kind of change implementing this rule can cause. [](start = 12, length = 61) This is not a change, but a change that can cause a service change. This rule should be able to cause any change.
I think we need to update the function name as well.
Is this a breaking change?
I think you need to add a new line after the `}` here, otherwise the `}` is not aligned.
This error message is a bit misleading, since it's not actually testing the actual value of the env variable.
This should be a Boolean
Should we add this to the `W3C_MINIMIZE_WINDOW.sh` file?
Nit: `System.Web.Http.HttpConfigurationAction` -> `System.Web.Http.HttpConfigurationAction` (we use the full name `System.Web.Http`)
I'm not sure this is the correct way to record the time.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.

I'm a bit confused by this error message. It's not really an error. I'd expect it to say "only one address" but it doesn't actually mean that the upstream is a single address.
This should be `@final` instead of `@final`
I don't think we need to bump this, we can just remove this
This is a very bad idea, as it would leak memory
This should be `Sort order ID`.
This is the only place we use `mods`, we should probably just use the `make` function.
I think it is better to have the static method in this class.
This is the same as `JsonSerializer.Serialize(new { Prop = (object)_value });` but I don't see the benefit of having it here.
This is a BC break.
I think this should be `->notNull()`
nit: I think we can use `ImmutableList.copyOf(selectColumns)` here
I think we should rename this field to `boostBySynonym`
I think we need to keep the `command` and `punctuation` variables here. They are used in the `environment_string` method below.
I think we should keep the old name, as the API will not be compatible with older versions of AWS, so this will need an API change to be able to change it.
I think we can remove this one. We can always set the `readPreference` to `42`
I think we should keep these pointers as is and add an accessor function to `Identifier` to return `*Identifier` instead of the pointer to `*Identifier`
This should be `count=None`
File is not `goimports`-ed (from `goimports`)
This is a bit confusing. Why not use the `MAX` macro here?
This is a bug, `suggestion` should be a hash here.
Is this intentional? I think it's not.
I think it would be nice to have a test for the exit code of the reporter, so we can see that it is called with the correct number of times.
I don't think we should be adding this to the driver interface if we don't want to expose the max number of messages to the driver. I think we can remove it and just use the max number of messages.
Please avoid using wildcard imports
This test doesn't seem to test that the base64 message signature is correctly extracted.
I think we can remove this function.
Why do we need this?
I think you should use `map!`.
This is a breaking change. Please bump the major version.
This is a bit weird, but I guess it's fine for now.
Why do you need a private field here?
I think we should keep this line.
This is a little weird. I would expect a `body.getEncoding().toLowerCase()` method instead, which would return the string `"8bit"` if not in the case of 8bit.
This can probably go into the ifdef below.
I'm not sure if we want to log the entire diagnostic source here.
This should be a boolean, not a boolean.
Please revert this change, the version should be 1.4.0
This should be declared at the top of the function.
This is the actual change to the interface.
I'm not sure why we're changing this. I think it's fine, but it's probably better to keep the original type.
This is not needed, as `ctx.Done()` is already called.
nit: `dialWithTLS` is slightly clearer.
I think this should be moved to the top
This is not correct, as we are not checking if the request is valid.
I don't think we need this port.
I think it's better to use `BatchActionRepositoryInterface` instead of `UserRepositoryInterface`.
I wouldn't use the `net` package here. It should be `io.servicecomb.transport.rest.net.NetUtils`, which is the package used by `io.servicecomb.transport.rest.net`.
I think we should keep this file in the `scripts` directory, as it's only used for the scripts.
Why this change?
This should be moved to a separate block.
This should be a separate method.
This will not work if netloc is a full URL.
This is not an error but an info.
I think we should use `+build !windows` for this, since that is the only thing that is needed for Windows
nit: `Filters` -> `Filters`
I don't think this is necessary, since the error is always nil.
This should not be changed.
why are we passing `nil` here?
I would change this to "Unable to get the name.".
I don't think this is needed. The log destination is the same for all the log messages.
I'm not sure we need the extra newline here, but I think it's okay to leave this file unchanged.
I don't think we need this #if. We should remove it.
Why do we use SR. here but not in other places? Is there some reason to keep it in the same place?
I think this is a bit of a pain to maintain. We can't do deepmerge in this PR.
This is a very specific error. It should be a warning.
This should be a `static` field in the `wlr_tablet_v2.h`
Style/MutableConstant: Freeze mutable objects assigned to constants.
I don't think this is used anywhere?
I'm not convinced that this should be a dict. I think we should just use a list and add the models to it.
I'm not sure if this should be a terminal flow status. It's not really related with the executor.
I don't think this import is needed.
I'm not sure this is the best name for this variable. I think `sentryAddrs` would be more appropriate.

Why is this change needed?
I don't think you need the `onclick` attribute.
I would suggest using a `enum` here. It's easier to maintain.
Why is this necessary? The `vStringTruncate` already truncates it, no?
I think we should keep this log message.
I would prefer to use `rmDateTimeStrMs` in the `Value::kEmpty` case, because it is more clear what the difference is
You can use t.Fatalf here.
Why is this needed?
I think we should also have a PR to add this to `config/config.json`.
This is not needed.
This line should be removed
I think we need a `CAPTURE()` here. Otherwise the test fails if you pass `-1` as the second argument.
Line is too long. [82/80]
Why is this change needed?
I'm wondering if we should have a method to do this?
I don't think this is necessary, we can import the validators from the `molecular.validators` module directly.
I don't see the need for this test. It is not testing the account actor.

This is a bit confusing. It seems like it's counting a base load as an mcontext spill/restore, not a base load as a reg spill/restore. I think the correct wording is "We do not want to count an mcontext base load as a reg spill/restore. This is not the case when a mcontext spill is used as a reg spill/restore. We do not want to spill an mcontext base load as a reg spill/restore."
why is it removed ?
I think we need to use `H:i` instead. `Y-m-d H:i` is a date.
This is not a good idea. We can't use Vue here. Instead, we can use `App.vue`.
This should be `int` instead of `float`
This should use `LOG(FATAL)`, not `LOG()`. Also, the `FATAL` message is not really needed.
Shouldn't we log this exception?
I think we should also add this to `flb_http_allow_duplicated_headers`. The same applies to the other two cases below.
Why is this needed?
This should be removed.
Black would make changes.
This test should also check that the prototype of the created object is the same.
This is a bit confusing, because it's not the label of the allocation. Maybe `unlabeled_alloc`?
@bartv2 I think this is where we should move to the new location. @jancborchardt do you think this is a problem?
This should be `iotexAddress` not just `addr`.
I think we should just remove the check for the `pPhysicalDeviceProperties->limits.maxBoundDescriptorSets > 0` part and just do the check for the `maxBoundDescriptorSets > 0` part.
I think you can just do `return (value == NULL);` here.
`isNotView` is a bit ambiguous, maybe `hasView`?
Why is this removed?
I think we should disable this for all of our code.
This is a change to the behavior of the previous code. The `len()` call is not necessary, because the `TxBuffer.Encode()` method is already returning the length.
I think this is a good test, but we should also test for `:restrict_with_error_dependent_destroy` as well

This is not necessary, as it's already the default.
I think this should be a `String.format` call
I think this is a leftover?
I think this should be `ShopShop` as well
This is not the default AZ, but the default for the AKS.
I think it should be `if pending || !RSpec.configuration.dry_run`
Why do we need to change the order of the list?
I don't think this is necessary anymore, as the `bolt_inventory` and `bolt_executor` are always set to nil
I think you need to add the `:getSourceFilePath` prefix to this method as well
I think this is the wrong way to do it. The env var is not a string, but an int.
These should be `Get`/`Set` as the default values are `true/false`
I'm a little confused here. Why would a user need to set this? What if they want to change the ownership?
I think this should be a `using` statement, not a `using` block.
I don't think you meant to remove this line
This should be a constant
This is the same code that is being used in `UvShutdown`, can we remove it?
I'm not sure if this is a good idea. We want to verify the certificate, but we don't want it to be insecure.
Why do we need to do this?
I think we should be consistent in the name and use `MUSHY_PIT` and `SULLIUSCEP_LOCATION`
This should be `update_8_23_2017_9`.
pass
This is the main change.
Why is this skipped?
Why did the test change?
I think we should just use `log.Fatal` here, since it's the only place we use it.
This test was not really testing the fix
Can you please add the `useQueryQueryMatches` parameter to the function signature as well?
I think the default value should be `1 * 1024 * 1024`.
We can remove `lazy as WPlazy` now that we're not using it.
This was unused.
I think you need to remove this import as well.
This is a bug in the old code, the enter key will not be sent anymore.
I think it is better to add `NG_RETURN_IF_ERROR(checkExprDepth(filter));` here
This seems like it should be indented by 2 spaces, not 3.
I think this can be private now.
I think we need to add a check here that `target.id` is a valid file id, otherwise we'll end up with an error when the plugin doesn't find this file.
This is not necessary. The `BiFunction` is a no-op if the input is `null`.
I think this should be `print` instead of `print`
This will be the default wallet address if the node is not connected to a node.
I think this should be `this.item` instead of `elem.src`
method.getName() + "Body" + bodyParamName
Why are these tests being removed?
I think this should be `VerifyPoSt`
nit: extra space
This is a BC break.
Is there any reason to change this?
I don't think you should have this parameter here, since you're using the default in the view. I'd just put it in `webserver/views/api/time_range.py`
I think this should be moved to the `#ifdef ZMM_ENABLED` block.
This should be a bool
I'm not sure what this test is trying to do. I think we should just check the error message.
Why not use the factory pattern here?
I think it's better to set EXECUTE_AS_USER to true here and then set EXECUTE_AS_USER to false when the job is created.
I think this is not needed anymore.
I think this method should be renamed.
I think this should be an env variable, not a env var
This should be `has_xcb_errors = "✘";`
nit: I think we can just use `utils` directly here.
I think this should be `nebula-graphd.pid` instead of `"pids/nebula-graphd.pid"`
I'm not sure if we need to worry about the performance impact of this change.
This is not needed, right?
Can we change the signature to `HasKeyForUser(keygen KeyGen, user keybase1.UID)`?
I don't think we should bump this version, since we don't want to upgrade to the new version of `mock`.
I think we should use `this.options` here instead of `this.options || {}` because we are using the `cursor` option in the pipeline.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Is there a reason why this is DEBUG only?
Why is this removed?
I don't think you need to import lodash from the `@wordpress/i18n` package
I think we can remove `app=cstor-pool` from the label selector since it's already defined in `k8s.yaml`.
I don't think we want to remove this example as it's not a valid example.
I think this change is not correct, because if `expected != result` and `expected == 1` then `expected` is `0`, and if `expected == 1` then `result` is `1`.
Why are we removing these checks?
This is not a good idea. The Query will be executed before the Query's `Before` field is set to the callback function.
This is not needed, since we already have the correlation component.
> Message [](start = 16, length = 7) Should this be a string or a const string?
This should not be necessary. The `provider` lock is only held when the `Provider` is being used.
This should be `h.Manager.Subscribe`
Why is this change needed?
I think we should return early in this case.
This file seems to be not used
I think you need to add `assert excinfo.value == "Argument" + " cannot exist without count!"` here.
This stub is not needed.
This should be a `map[string]string`
This is not the right way to create the default profile. It should be done in the `infrastructure.CreateDefaultProfile` method
This will break the `call_site` for the `RSpec::CallSite` plugin. We should use `caller(2)` instead.
This should be `kind`
I'm not sure this is the right place to make this test. The test is already in the `externalClient` package.
This is the same as line 184
I'm not sure why we need to do this. If we are going to change the value of the selected column, then we should just update the value. I'm not sure if we want to be changing it, but I don't think it's a big deal.
This is a breaking change. We should not add this option to the list.
I think this should be removed.
Why not just return an error?
I think we should be consistent in the naming of these classes.
This should be in the else branch of the above if statement.
I think we need to set this to true in case the workflow fails.
This change seems to be unnecessary.
I think this should be `sc.ip_address[0]`
This was the only test that used to be a simple record.
This seems like it should be a global variable, not a class variable.
I'm not sure about this one, but I don't think it is a good idea to return `INVALID_PLUGIN_ID` if we can't find a valid plugin ID for the given task.
I don't understand why we need this condition here? I thought we were only going to set the `FL` for `*`, but we're not doing any lazy loading here.
Why this change?
This should not be needed, as `ConfigFile` does not throw an exception
This import is not used.
I'm not sure this is correct. If the file exists and is not writable, we should still continue.
I think this is not needed anymore
I would prefer to call it `isCPUCircuitBreakerThreshold`.
I would suggest to add a method `addRewrite` to `RewriteFiles` that adds the `DeleteFile`s to the set.
I think it's better to use `ActionView::Helpers::CacheHelper.default_locale`.
I think we need to add a check that the category icon is not null, otherwise it might throw an exception if the category is empty.
I think we can use `context.Canceled` here.
This will not work if there is already an `if` condition.
This is the only place where I see this check. It seems that it should be `> 0`.
this should be xpn-default
nit: move to a separate function
I think you can remove this line now that you've added the header tags.
I'm a bit confused by this change. Is it because the universe package has no `SystemTime()`, or because it's not in the `stdlib` directory?
I think it would be better to put it in the `config_`
I think this is the only change in this file that I'm unsure about.
I think we should keep the `*error_code` here.
This function seems to be used only once. Why not just inline it?
Please add `paste` to the docstring.
I think we should keep this package in the root of the package.
This change seems unrelated.
This is not a correct solution, it should not be done in this PR.
This is not used anywhere, can we remove?
I don't think we should be changing the behavior of this test; if the user passes in a message, we'll end up printing it twice.
This was a bug, the function never returned.
Why not just remove the whole `if node.config.EnableTopAccountsReporting` block?
I think we should make this readonly
nit, I think it would be better if we could have `fmt.Sprintf` call `fmt.Sprintf` and have the `f` be the `formatPrefix` string.
I'm not sure if we need a separate package for the pushsync protocol.
This is a good check. But it should be `if (pPipeline->graphicsPipelineCI.pDepthStencilState->depthWriteEnable == VK_TRUE)`, otherwise the pipeline will not be created if the depth stencil attachment is read-only.
Should this be `BOXED` instead of `COMPOSITE`?
This will be a `dict` if the `mount_volumes` is an `Iterable`, which is a bit weird.
This is not used.
Why do we need to set this?
I don't think this change is correct.
This is a good change, but it's not a big deal.
I don't see the point of this field.
I think this should say `Run examples whose full nested names match REGEX (may be used more than once)`
This test was failing on master due to the size of the payload.
This should be reverted.
This change seems to be unrelated.
I think this should be `allAuthenticatedUsers`.
I'm not sure we should be adding a flag here. I think it's better to have a separate function that will run the command.
I'm not sure if we want to add a menu item to the menu itself. It's a bit confusing. Maybe `Log settings` instead?
Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
Shouldn't we just use `value.getClass().getName()` instead of `value.toString()` ?
This is a breaking change, please add it back
This is an unrelated change.
I think we should just return an error here.
Should we add a check here to make sure the scope is valid and not empty?
This line needs to be updated

I think we should also rename the column to `scheduled_for_cancellation`.
This is not a correct approach. You should be able to remove the successor from the new root and replace it with the root.
I'm not sure why this is being removed.
This should probably be `<=`
Why remove this?
Why +1? It seems to me that we want to wait a bit more time for the volume to be available, but not wait for the state transition to complete?
Should we use the same `scheduled_end_time` as the `endTime` for consistency?
Why is this called here and not in the `setup` method?
This was removed in a later PR
I don't think this file needs to be removed, since we don't have a seccomp support. I think this is the only place where it's used.
This is the only real change in this file.
nit: can we call this `formatStrings` to be more clear?
I think this is a typo, it should be `conflicts`.
This was causing an infinite loop, which I think is not the correct behavior.
This should be `import odoo`
I don't think this interface is needed.
This is the only change in this file.
I think we need to check the value of EnableLocalhostConnectionRateLimit here.
Why did you remove the `_lastDomChild` check?
I think it is better to use `issubset` here, as `package_stats is None` means `package_stats is not None`.
This is not needed. The default is False.
I don't think this should be changed
This is a very bad function name. It should be something like "release_assert".
Please add `return AST_FATAL;`
This change is unnecessary.
This is a bit confusing, but I can see how it's used in the code. I'd rather not have the `abs_out_*` part.
nit: I'd call this `writeResponseHeaders`
I think this should be `dataset(d)`, not `o`.
This is not a valid Python 3 message.
I think it's worth mentioning that the default is null.
nit, `// DeleteStoragePool deletes StoragePool object.`
Should this be `cse.uploads.fileSizeThreshold` ?
This should be a constant.
This should probably be `testGenericOptions(testgeneric.WithAnnotation(constants.SyncsetPauseAnnotation, "false")).Build()`
Should we log a warning if `c.logFilepaths()` returns an empty string?
I don't think this is needed, the weights are initialized by the base class.
Shouldn't the message be `must be valid`?
I think we can remove the `using tracer: ` line
This is not the right place to put this test. This is not a test for PDF manual. The PDF manual is only available when LaTeX is enabled.
Please don't use wildcard imports.
I think we should set a higher timeout here.
I don't think we need to check if it is nil here, as we are checking for `if nodeConfig.NodeIPv4Addr != nil`

Why is this changed?
This should be 2.8.0-dev
Shouldn't we add the service name as well?
This should be a `static_cast<MDB_val, mdb_store>`. Also, `MDB_store` should be a `const mdb_val *`. (And I think it would make the code a bit cleaner if we didn't have to cast it to `MDB_val`.)
I'm not sure about this. The `block time` option is a duration of time before the node starts, so if it takes more than the propagation delay, it will not be able to start. I think the `block time` option should be a duration, not a duration.
Please don't use print_function, it is deprecated.
Is it possible to have the padding set in the test? I'm wondering if we can just set it to the `0` here.
This should be in `CompactionOptions`, not in the configuration.
This is a bit confusing, since we have a tag lock for the same name. Maybe rename the variable to `edgeLock` and rename the variable to `tagLock`?
This file is not used anymore
`safe_str`? (I don't know if we have a preference for that)
This is a bit weird, but I guess it is fine for now.
This should be `Debug`, right?
Should this default to `None`?
I think we should add a `setSkip` method to FieldComparator that is only for skipping functionality.
I don't think this is needed.
I'm a little confused about this. If `xhr.responseHeaders` is not defined, what will the default value be for `content-type`? Isn't it a `string`?
I'm not sure if we need to log this.
I think we can remove this line.
I'm not sure if this should be removed. I don't see it in the spec.
This file is not used anywhere.
Should this be `if target.find(':') >= 0`?
I don't think this is correct. We should be able to create a new batch and check that the new batch is not already in use by the bulk.
This is the only change that I don't think is correct. The only thing I can think of is that we need a `NewProfileConverter` that takes a `converter` and returns a new one, and then calls `converter.Convert()` with the converter.
nit: `block does not exist`
I think this should be `this.releaseOrCreateDate`
why remove this error ?
This should be `post/page slug`
This is the same as `flux.Duration`, can we just reuse that?
Why do you change the name of the struct? It is used in the same file.
This should probably be renamed.
I'm not sure about this one - if we have the grab attached and the keyboard has focus we should cancel the grabs?
I would prefer to have a `isTransactionUnprotected` method in the Transaction interface.
I'm not sure this is the right fix. The problem was that we had to add `inversedBy` to `Transport` and not to `Payments`
I'm not sure this should be an error. I think it should be an error code that is not a fatal error, not a warning.
I don't think this is used anywhere, can we remove this?
This is a minor thing. I'd prefer to have it on one line.
This is not a constant.
I think you can remove `sniff` and just use `sniff(prn=lambda x: x.summary(),*args,**kargs)` here.
This is not correct, the value of the `NodeBasedEdge` is not the same as its size.
I think we can remove this file from here. It's only for the DataManReader.
This should be changed to `@hash[:attribution].length > 1`
I think this will be a bit confusing. We're going to have multiple manifests for the same namespace, right?
This should be a boolean, not a boolean.
This should be `ariaQuery: require('aria-query'),`
This is the main fix for #3049
I don't think this is the right fix here. We should be able to set this info on the slaTrigger object directly, without having to create it here.
I'm not sure if this change is necessary.
I would have preferred to pass in a `bool` here, rather than a `bool` parameter.
nit: "timeout milliseconds should not be below 0 or infinite"
This file shouldn't need to change.
import org.eclipse.jgit.util.StringUtils.CaseInsensitive;
This should be `GenerateServiceAccountName(kServiceAccount, clusterName)`, right?
I don't think the `-A` is correct here. The `-A` is not a treeobj, but rather a key. The `-A` should be a treeobj, not a key.
`Check uploads with indeterminate file size.` ?
I think this is not necessary, since the `isHeading` method already checks for the `node` and the `nextSibling` attributes.
This seems like a good candidate for a `JivaReplicaTypeHolder` struct.
Why do we need this?
This is the only change that I'm not sure about. The rest is the style.
This class should be renamed to `RulePropertiesDescriptorFactory` to make it clear that it only contains factories and not a generic descriptor
Why not just use the default value?
I think this should be `platform.SiteRunning`
I'm not sure this is the right place for this test. It seems to be checking the length of the sms messages, not the number of SMS contacts.
nit: I'd prefer to have this as `stats_dispatcher`
Why did we remove the worker?
@jingxu97 @jingxu97 I am not sure if this is the correct way to do it. The API is returning a `Status` struct, not a `Usage` object, so I think it is not the right way to do this. I am not sure how to handle it, but I am not sure how to handle the `Usage` object.
@jonathan-brown This change is needed for puppetserver to work correctly.
This was a mistake
This change is not needed, the case-sensitive version is already case-sensitive.
Why not use `#if defined` instead?

I'm not sure why you set it to true here?
I'm a bit confused about the change to the font size here. Is it because the font size of the input is not the same as the size of the workspace?
This is a little confusing. I would have expected `p` to be a phonebook, but I don't see how `listenIP` would be used.
Why is it necessary?
This is not correct. The name should be changed.
I don't think we need `fsync` here.
This should probably be `self.seq`.
This is a breaking change for people using the `Translator` interface directly (e.g. `\VuFind\I18n\Translator`). We can't do that. We need to add a new interface for the translator. I think we can do it in a separate PR. @johnsaigle can you confirm?
I don't think we should be changing the collation for tag names. This is a temporary feature.
This should be `os.environ.get("PARTITION_ADJUSTMENT", "0")`, right?
This is a little confusing, since we return the active flows here and then the execution flows later on. I think we could rename this to `fetchActiveFlows`.
I would expect this test to be in the `test/runtimevar` directory, but it's not really testing anything. I would expect it to be testing the `Watch` method, and not the `OpenVariable` method. I'd expect it to be testing the `Watch` method, but I would expect a `Watch` method that is not tested in the `test/runtimevar` directory, and that's not tested in this test.
I don't think we need this change.
nit: `stride=(w, h)`
This should probably be `inserted.first->second->commandBuffer` (and similarly for the other cases).
nit: remove empty line
I think this check can be moved into `get_device`
I think this should be `org2`
I think it would be better to use the same method here.
This is not correct - the parent frame should always be a function.
I think this is a good idea, but I'm wondering if this should be a task? I'm not sure if it's possible to push the file, or if it's possible to push the file.
why is this changed?
Should we add a note here that the default value of `enable_dns` should be true?
I think it would make more sense to put this package under `pkg/peer/peers/pingpong`
I'm not sure this is the correct approach, as the handler is not always seekable. We should probably just check if the reader is seekable and then set the retryable to false.
This is not true anymore.
This is the fix.
I'm wondering if this is a bit of a hack. I'm wondering if it should be a separate module.

Why not use Serializable?
I think we still want the IsFullyRealized call here.
This should be 2016
I don't think we want to return here. We can just check for `head.mdID != md.mdID`. If we want to return early we should just return an error.
This is not needed anymore.
This is a bit weird, but I don't have better suggestions.
This is the only place where the plugin supports 0.3.0. I think we should remove the version check and the version check.
I'm curious, why do we have to move this here?
I wouldn't add this flag.
This is not used anywhere?
Why is this needed? The `HIPInternal::singleton` is already static.
I'm not sure if it's worth the complexity of this map, since it's just used to hold a single map of plugin configs.
Why remove this?
This seems to be the only change in behavior, and I don't see why it needs to change.
This is the only change that I can see. The rest are just formatting changes.
This should be `!value.IsNullOrWhiteSpace()`
I think this should be a boolean instead of NABoolean, since the function is not returning anything.
This is the only change in this file, right?
I think we can just use `id` here instead of `provider-id`.
I think this should be `if !newGroup.ServiceReference.IsDefault()`
I don't see the need for this new package.
I think we should add an `AcceptTxResult.TooLarge` here
This should be removed, right?
I don't see any usage of this field
Can you add a docstring?
This should be an error, not an empty string.
This is a very long time, can we make it configurable at least?
I think this should be `and` instead of `and`
I don't see why we would want to remove it from the internal container.
I would move it to `FormField` class and then use it in `FormView` and `FormView`
This method doesn't exist.
I don't think we should remove this, since we are not logging anything. I'd prefer we keep it.
This will fail the test.
I think we can remove this file.
This interface is not used anywhere.
I don't think we need this change.
This is a bit of a misnomer. It's not actually a user.
I'm not sure about this one - it's a little weird to have a NULL in the output, but I'm not sure how to do it better.
I think we can remove this. It's a no-op.
This should be f-string.

Please add a description for this options.

This should be checked in the `stxnAsyncVerify` method
This is not a valid condition. It will return `TurnType::Continue` even though the name announced is the same as the name announced.
This is the same check as above, so you could remove the first one and use `!` instead of `!`

Can we make this a kwarg instead of a positional argument?
Why was this removed?
nit: I would rename `startTopologyCache` to `startTopologyCacheLock`
I don't think this is necessary. The helper is only used by the caddyfile parser, and this is the only place that needs to be modified.
This should be `cast(str, conf.session)`
I think we can remove the `@Ignore` annotation from this test class
I think it would be good to have a test case that checks the query is filtered and not just the filter itself.
I think we should return the Available device here.
I'm wondering whether this should be `\u202B' + text + '\u202C'`.
I think we should keep the old formatting.
This is a bug fix, right?
Is this used anywhere?
This file should not be edited.

I don't think we want to expose this. We should be able to add more tags to this.
This is not needed.
I think you can just return `strconv.ParseBool(w.wf.GetSerialConsoleOutputValue(key))` and remove the `if` statement.
This is not the same as `la::abs_error`.
This should be `assert(desktop->views)` to avoid the `list_create()` failure.
I don't think it's worth adding a polyfill to `./index.js` since we don't want to load it.
This is a regression.
The `R0124` is not correct, it should be `logical-tautology`
Why is this virtual now?
I think we can remove this. We already have a `brokerAddressFlag`
Please use dynamic input.
This is a bit weird. I think it should be an `ISet` and not a `List`
This should go in `models/__init__.py`
I think it is better to call this method in `close` and call it in `initialize`
I'm not sure this is the best way to do this. I'm thinking that if we have a `maybeSetAccount` option we can just use that, instead of having to add another `maybeSetAccount` option.
This is a bit hacky but it works.
`bean.getClass().getAnnotation(RpcSchema.class)`  `BeanUtils.getImplClassFromBean`  null
This is not the right value to test. It should be `12850`.
I'm not sure if this is a good way of checking that the input is datetime.datetime.
nit: typo in the package name.
I don't understand why this change is needed.

Why is this empty string here?
I don't think this is necessary. If you want to keep it, you can use `class_agnostic=nms_cfg_.pop('class_agnostic', None)`
I'm not sure if we should have the name "row" here. I would prefer to have a "deleted_rows" field that has a value that is not null and that value can be null. This way, if we ever add a row to a deleted row, we will have to change the name.
Why are we changing these?
I think this is a good change. It's not clear why we need the `@search_context_response` variable.
This is the actual change.
Why do you need this macro?
Should this be `<%= yield %>`?
I think this is not the right format.
I think this is not needed anymore?
this should be removed.
I think it should be `debug`
I'm not sure why these are removed.
Why do we have a value_env variable for resources?
I think this is a typo?
This is not a proper way to write a smileile. You can use a file with the smileile name and a file name with the smileile name as parameter.
This test fails with `type param` constraints of `Any tag`.
I'm not sure if we should be returning an error here, since it's a programming error, not a runtime error.
This is a bit odd. I think it's fine to just use `List` for the return type of `findElements`.
File is not `goimports`-ed (from `goimports`)
This is not the same as `buf.Close()`
I think it's better to use `storage.get('upfront_shutdown_script_enabled')` instead of `self.storage.get`.
This is not needed, since the `title` is always present.
This should probably be `true`
This is the only place where we're using the `vers`, so we could just remove this line. It's just an alias of the `force_187_p371` method that is only called in one place.
This is not necessary anymore.
This is not really an `x` prefix, it's an `x_` prefix.
This function is used in `expect_valid_keys_in_secret_test`, which is not the only place it is called.
I'm not sure about this. It seems that `vendor` is not used anywhere.
I think this is not necessary. The `emuGesture.displayName` will be `func.emuGesture`.
I think this can be a method on the proto.Filter
This should be `info.version_ = *req.version_ref();`
`node.getAttribute('lang') || ''` is not necessary. `getBaseLang` returns `''` if it's not set.
Which code does this change?
Why not just `window.location = '/index.html'`?
Maybe we should add a `LOG(INFO) << "Part " << partId << " has been loaded, skip current one, remove it!"` here?
Why is this removed?
Why is this method added? It seems to me that we are not using it anywhere.
Why not use https?
This should not be changed.
I think we should use `null` instead of `false` here
This is a breaking change, we need to mark this as internal.
Please remove this extra blank line
Should this be `@since` ?
This is a bug, `bulkExecute` should return `undefined`
This test should be in a user feature, not a feature test.
This is the only change in this file. It is the only change in the `archive_url`.
I think we should use the `StringComparer` for this, since we're using it for `tagKeysInteresting`, which is a list of keys, and `tagKeysInterestingCount` which are the counts of the keys.
Why not just `updateSymbolTable()` here instead?
I think this will fail if the user doesn't have any of the users listed.
Please update docstring for the new parameter.
This should be `googleapiclient`
This is the only usage of the option, so it should be a pointer.
I'm not sure this is a good idea. It's not a boolean, it's a boolean.
I don't think this is right. We should be returning an error if the version is not valid, but we should be retrying the entire time
Can you please remove this file?
I don't think we want to use `.128s` for this.
I would suggest to remove this line.
I think you need to change this to `dataplane`
This is the only change in this file.
I think we need to add a check to make sure that the model is indeed the right format
I think you meant `!isNativelyFocusable(el)`?
I don't think we need this anymore
This should be `out::message`
Why is this necessary?
This was a bug that I fixed.
I don't think we need to do this, we already have `before` and `after` in the `shared_context` block.
This should not be changed.
Can we move `require 'aws-sdk-s3'` to the top?
This is a bit weird. We are adding a switch for the http2, but not for http1 and http2. I would suggest renaming this to `Http2ExperienceSwitch`.
This is not correct. If the user sets the keepalive period to 0, the connection will be closed.
This function name is not very descriptive. It's not really preparing for validation.
I think we should add a `// TODO` here to check if the transaction is in the correct format. We can't use `txid` here because it's not a valid transaction.
Please use the `block.HashBlock()` instead of the hex encoding
I don't see a need for this class.
I think we should do something about the error here, since we don't expect it. I think it would be good if this was an error case that we would want to handle.
I would add a return type here
I think we can remove this line.
This was a bug, it's not passing the dependencies.Interface.
I think this should be called `getFocusableElements`
This function is not used anywhere
This should be in a separate commit, otherwise it's a merge conflict
This is a good idea. I think it's a good idea to use `std::vector`, but I'm not 100% sure that's what we want.
I think we can remove `fetchMock` from here, as we don't need it.
Is this a fix for the issue?
I think you should add `:default => 'multipart'` here.
This will be the team name if the app is not running in the same user, but I'm not sure if it's worth the effort.
This should probably be in the `finally` block.
Should this be a pointer type?
I'm wondering if this is the correct fix. It seems like it should be `rootNode, err := ...`.
I'm not sure if we should start the DNS daemon in the agent, as it's not a daemon. We should start it when we start the agent.
I'm wondering whether we should use `getLength` here instead of `toInputFile().getLength` since `toInputFile` may not be a writable file. I'm not sure how much value it would be to have a file that has no data in it.
Why is this changed?
This should be removed
This is not needed.
This should be `label=disable`
I think we can just call this "recurse". We don't need a separate bool for this.
Should we also add `xdensity_scale` here?
Why not throw an ArgumentException?
This should be a `@retval`
Why do we need this?
This is not needed as you already have the checkbox in the input element
nit: can we move this into the `testing` package?
Why is this change required? The test was failing previously
I'm not sure if this will work. I think it's better to use a property to set the `sorted` state.
This was a typo.
This seems to be a bit hacky. I think it would be better to just have `ops.split('address=')[0]`
This is the actual change. The rest is just refactoring.
Why not return an error?
This is a little bit of a nit, but I wouldn't put the user in the constructor here. It's not a huge deal, but I'd prefer if we could keep the constructor as it was, so it's easier to reason about what's happening when the user is passed in.
This is the only place that needs to be changed. It is not a change that is needed.
I would prefer to keep the test with a null repository.
This should be in the `finally` block.
Why is this removed?
I think we should use a `fmt.Errorf` here, otherwise we'll have the message `Failed to add mapping: %s`.
This is the fix. The rest is just cleanup.
I think we should check for the error here. If the user has set `cgroups` to a value that isn't in the `cgroup` array, it should be an error.
I'm wondering if we need to move this to `pkg/api`? I think it's not used in the core package.
I'm not sure this is the right place for this. I think this is where the `max_rows` option is defined.
This function is not used anywhere.
This is not used.
I don't think this line is needed.
"0xf901fc8032830138808080b901ae600013565b6101918061001d6000396000f35b3360008190555056006001600000060e060020a031632600160a060020a031615761018f565b600054600160a060020a03161616020202020202020202020302020204020202020202020204020202020202030302
This change is not needed.
I don't think we need to create an array of samples here.
Should we also check the return code here?
I don't see this in the menu
I'm not sure we need to check if `prefix` or `directory` is not `""`. If it is, then `strings.HasSuffix` is enough. Otherwise, we need to check if it is a directory or prefix.
`IsDone` is unused (from `deadcode`)
I think you need to check if `canList` is false here.
Why is this necessary?
Why did you remove the test case? I don't think it's related with the changes you're making.
I'm not sure if this should be changed, since it's a breaking change for users.
`getThingByUID` can return nullptr if the thing is not found.
Is there a reason why this is done here instead of in the other places where we set the m_history?

I'm not sure if we should sanitize this title here. I would rather do this in the aria-labelVirtual function instead.
I don't think we should use the helper class. It's a bit odd that we have to import it.
This was a mistake. I'll fix this.
This test is not really necessary, since the `IntegrationTest` is already called by `TestStartLogCapture`
I think it's better to use a `switch` here instead of a `switch` to keep the logic in the same order.
This is a duplicate import.
I think we should return the error here, and handle it at the caller. This way we don't risk leaking into the caller
Shouldn't we check the error here?
I think you should also test that the port is unreachable when ipv6 is set
I think you can remove `r'^[a-zA-Z0-9][a-zA-Z0-9_-]*$'` here.
This is not needed

This test doesn't look right. It's not testing the extension.
This is a bit confusing to me. The value is not checked here. It's just set to 0 if the serial was set to 0, so the value is always 0.
This should be `*bool`.
This is not needed. We have the image pull timeout in the config.
Why did you remove this message?
This is a bit odd, but I don't know if we can fix it.
I think it's better to call `stream.CloseSend()` here, and let the `CloseSend()` call the `c.Release()` method, so that the stream is closed.
graph_type graph; graph_data
This is a BC break
I'm not sure this is correct, since the default is the position of the first position.
I think this should be a string, not a label
Nit: I'd prefer if we could make these public, since they are not used outside of this class.
I think this TODO is still valid. The transaction is not public, so it should not be a transaction that is being used for verification.
This is a breaking change. We should not change the interface.
This is not the right way to do it. The default is to use `Sdk.CreateMeterProviderBuilder().Build()`
Why did this change?
I think this will need to be updated to match #2323
I think this is a bug fix.
I think this should be a separate commit.
I'm not sure if we should remove this.
I think it would be cleaner if the response body was always empty, and we could just check for the length here, rather than checking if it's zero.
I think this is a good candidate for a `axe.utils.getTagName.js` file
I think this should be called `mayactl snapshot status`, because the command is not `mayactl`.
Why is this change necessary?
I think the name should be changed too.
This is not a TODO, it's a TODO
Why do we need this check?
I think we should use the `projectName` instead of `project`, since the project name can be used for a project name and not a flow name
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I would remove this empty line
@stevvooe @sarabala1979 @alexmt I think we should just remove this from the valid phpVersions list.
Should we have a `queryRelation != QueryRelation.INTERSECTS` check here?
I think this is the only place where `err` is returned. It's only ever used in this function, so it can be removed.
I think we should just use a constant for this.
I don't think we should add this to the `config.properties` file. We should just have a separate config file for this.
This is the only change needed to support power selector, not list selector entries.
I think we should add `// +build !windows` to these types.
Please add `pygment` as an alias to `edit`
This is not a good ID, because it will be removed in the future. We need to find another way of doing this, but I think it would be best to have an ID attribute that's unique to the sections.
This is the default value, so you can just use `null: false`
This should probably be a flag.Int64, as it's a bit more flexible.
This should be `zero = "0"`
this should be `DateTimeInterface|null`
This is a little confusing to me. How about `task-` instead of `task-`?
I don't think this check is necessary, since the error message will be printed if it is true.

I'm wondering if we can get rid of this `randomState` parameter altogether and just use `throw throwIfFileNotFound` in `LuceneTestCase#slowFileExists`? I think it's not needed anymore.
This is a bugfix.
I think we can just use the `KEYWORD_NONE` here.
This is the default value for the journal. It's not used anywhere else, but the test.
This is the same as `event.get('event')` so you don't need to pass it in here.
Why is this needed?
This lock is not needed.
I think we should use a constant for "proto"
Please remove this line.
Why did this change?
I think we should use 2.
This should be `wlr_xwayland_server_free`
This is the only change in this file. It's just a random number generator, so we don't need to change it.
We should use the new logging package here.
Shouldn't this be `UNF = UNF`?
Why change this?
This is not needed anymore.
This seems to me that we should just make this an overload of the existing `IDictionary` constructor that takes a `bool` as a parameter. That way we don't have to change the existing one.
This is not a list. It is a list. Please change it.
I'm not sure about the name, it seems like the method name is not very intuitive. I would prefer to keep the method name.
Why do we have both?

This is the only change I can see.
This should be in the `Travis.yml` file.
I think this is not necessary, as the `exec` package is already in the same repo.
I don't understand this. Why would we want to blur the active element if the slideshow is nested?
This is the actual fix.
This should be in a `try`/`except`, right?
I don't think this should be done. If the next token is a function, we should not be parsing it. If the next token is a function, we should parse it and then continue.
I'm curious why you moved this up here?
I think we should keep this as `TCHAR`.
This is the same envName used in the test.
nit: I think it'd be more consistent to call this `SetAnnotation` or something.
I don't understand why this change is needed.
This is not needed.
This is the only one that's needed for the cache fallback, so I'm inclined to remove it.
This is the same code as in the other PR, can you extract it?
This should be moved up to line 20.
I think we can use `putExtra()` here instead.
I think this is not needed, as it will be executed in the same script as the one above.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
Why is this change necessary?
Why do we need to keep this?
I'm not sure if this is a good idea. If we need custom auth we can add it in the `Options` struct
I think this is the wrong interface. This should be called `IMvxAttributeViewPresenter`, not `IMvxFormsViewPresenter`.
This is a behavior change. Previously, it was `if (child==true || child==false)`. Now it is `if (child == null || child == true || child === false)`.
This should be `rawErrorData.get(CLASS) == null || rawErrorData.get(STACK_TRACE) == null`
I think this is not needed
I'm not sure about this. I think it's a breaking change. We should probably add a deprecation warning here. @karmacoma @mikemurray
Why do you need to do this?
>addAnnotations [](start = 16, length = 14) why do we need to add annotations?
This is a breaking change, we can't just change the return type.
Why is this method public? I don't see any callers.
Why is this renamed?
This is the only change in this file, but the only change in this file is the error message, so it seems like this is a bug.
Why did these become final?
Is this the only version of Easylogging that can be used?
This is the fix, right? The rest is the tests?
This is not used anymore
Why is it finest now?
I'm not sure why this change is needed. I'm not sure why this is needed. I think it's a good idea to have the test run on a separate thread.
I think this is not correct, the view dispatcher should be used in a thread. I don't think this should be a property. It should be resolved in the ctor and the view dispatcher is only set once.
I'm not sure if it's a good idea to have a constructor that does not take a name and a list of arguments. It seems that the only difference in the constructor is that the arguments are not passed to the constructor and they are not used in this case. If you want to keep this, you can add a new method with a single name and an array of arguments.
This change is not needed, please remove it.
Why is this disabled?
I think this needs to be set to false by default, otherwise the policy library sync will fail.
nit: maybe add a docstring?
I think this should be `LOG(THREAD, ..., "Detected AVX-512 code in use\n");`
I think you can just use `ENV['VAGRANT_VMWARE_CLONE_DIRECTORY'] = '~/.vagrant/vmware_fusion'` here.
nit: `k8serrors` is a better alias than `k8serrors`.
Do not freeze immutable objects.
Shouldn't it return the timeout error here too?
This is not a good idea. We need to pass the config to the syncer and not to the message pool.
We should not use wildcard imports
Why is it 0 now?
I think it's better to use `this.logger()` here.
This seems to be the only place we use this method. Why not just return the time?
This is a change from the old implementation.
I think this should have a more descriptive name, like `compute_account`
@karimJWP This change is breaking existing code. Please update the code to use the new method.
This is a bit of a hack to fix the uppy dashboard. I think we can remove this.
I would prefer to use `assert_equal` here instead. It's more explicit that the test is checking the type of the input image.
I don't think we should pass vars here. We can pass in the vars in the workflow directly.
This is not the same as `starts_on.to_s(:simple) - ends_on.to_s(:simple)`. You could use `starts_on.to_s(:simple)` and `ends_on.to_s(:simple)` to avoid the `nil` check.
I don't like this name, but I guess we can leave it to @mistercrunch
I think we should pass in the BlockCache here instead of config.
I think we should close `st`, too.
Please remove this line.
Why not use the result type here as well?
This is not needed, we already have a `TraceEvent`
This is not needed, as the `@user` will be defined in the `else` case
Please remove this line
Why this change?
I think we can just use `cmd` here.
This should be removed.
This is not the right way. You should use the `userSettings.skipBackLength() * 1000000 / (nowPlayingItem.RunTimeTicks + userSettings.skipForwardLength())`.
I think it's better to have the word "used" in the message.
This should be `})`
Shouldn't this be true by default?
I don't think this file is needed.
The matcher is not used, so this can be removed.
This should default to `1` if `master-start-curl-retries` is not specified.
I think this is a bit misleading, as it doesn't mean that a module is loading.
I think we should just remove this whole block, since it's not needed.
I don't think this is necessary, since the `InvalidElementStateException` is a subclass of `RuntimeException`, and you don't need to override it.
I think we need to add a `log.Warn()` here, otherwise it'll be logged as `INFO`
I'm wondering if we should just store the `profileID` in the store instead of the settings.
This test is a bit too long, can we break it into two test cases?
I think this is a bug. The log message is "Finishing" and we are not going to retry the job.
This should be `f: false`.
I think this should be called `get_all_layers` to be consistent with `get_answers`
This will break if the user is using an older version of docker.
I would prefer `logger.Error` over `logger.Log`
Space inside parentheses detected.
Shouldn't this be a 500?
nit: I would prefer `bytes.IndexByte`. It's not a big deal, but it's also more consistent with the other methods that are named `index*` in Go.
This is the fix for the issue.
This is a breaking change.
nit: import order.
I'm not sure this is the right way to go, but I think we need to make sure that this is not an internal panic. If we do, we'll need to add a new method that panics on invalid input.
This is not the only place where the `c.srv` can be set to a value.
This is the main reason for the change, right?
I think this should also be removed. It's not needed anymore.
This is a new dependency.
This should be in the destructor.
This should probably be an `event_present` instead, since the event is a `present` event.
Should we add a spec for this method?
This should be bitmask.longValue()
I think we should also check `err == ErrClosedConn` here.
This is not needed
This is a public API. I don't think we should change it.
I don't think we should add this to the list of suppressed messages. It's a very common message.
This should be `if (!delta_from_revision && g_str_equal(delta_from_revision, to_revision))`.
This is the only change I see.

This should be `fmt/format.h`
I think we should have a separate method for this case, since we have a similar method for the `BKDWriter.VERSION_LEAF_STORES_BOUNDS` case, but for the `BKDWriter.VERSION_LEAF_STORES_LEAVES`.
Missing space before opening brace.
I think you should use `res.tautomers` instead of `res.tautomers`
This should be a `fmt.Errorf` call
Isn't this redundant?
This is a little weird to me, why do we have to sleep for a long time?
This will not copy all the elements in `req.CommRs` into `flattened`. It is better to use a `map[int][]byte` to get the keys and values.
I'm not sure if we need this, but I'm not sure if it's needed.
We should probably also add a log message for `ec2-instance`
This should be `copy.deepcopy(dict)` instead, otherwise the dict will be modified.
I think this should be called `install_role_dependencies` or `install_role_dependencies_command` to make it clear it's not the command that installs the role dependencies.
I'm not sure if we want to force the autosave, or just save the session.
I think this can be removed now. The `idToConstant` map is only used for `PartitionedDataReader`
This is a breaking change, we need to make sure that we are not using the old command
Why is this import needed?
This is not needed.
This method should not be necessary, as it's only used in the `onShowAdditionalHeaders()`
I'm not a fan of the `keymap_fd` being closed. I think we should be able to just use `keymap_fd` instead of `resource->fd` here, but I can't think of any other way around it.
I think these should be `config:"max-recv-msg-size, max-send-msg-size, default-value: 50000"`
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [82/80]
I think we should add a note here that the first two lines of the line are the header lines that are used to read the record file.
This is a breaking change.
I think the test should be changed to use `assertThat` instead of `assertEquals`. The `trim()` should not be needed.
This is a bit confusing. I would expect this to be the default, but I'm not sure what it means.
Why is this 16?

I think you can just remove the `if` statement here and just call: `setSupportActionBar(toolbar);`
I don't think you need this anymore.
Why was this removed?
I think this would be better if it were a separate `unless`
I don't see how this can be removed.
I think we need to add this to `config` as well.
I'm wondering if we can use a more descriptive variable name here.
I'm not sure this is a safe way to implement these methods. It's not clear to me why this is a good idea.

I think we should just use `this.values().stream().count()` instead of `this.values()`.
nit: I think it's better to return the error here, rather than returning a nil.
This is a new feature, so it should be fine for now, but we'll need to find a way to get the name of the method that we are going to use to transform the param.
This will not work. You should use `$this->getScopeNames()` instead.
nit: can we make these all caps?
I don't think we should do this. If the request is not a shard request, then the request context should already be a singleton. If the request was a shard request, we should be able to get the context without creating a new one.
This method should be removed.
Why are we changing these?
This is not needed.
This should be in `pipelines.py`, right?
Why not just return `false` instead of `return true`?
nit: extra space after `AddPeers`
This is unused.
I think we need to keep the old names for backward compatibility
Why is this class renamed from `PrivacyApiMethod`?
I'm not sure if this is a good name for a method. Maybe something like `GetDefaultMeter`?
"A partition represents a single slice of the entire set of job's possible work"?
I'm not sure this is the correct name. The API spec is for creating an asnapshot of volume, not for creating a snapshot of a volume.
Why not just remove this?
Why is this check needed?
I think we should use a for-of here.
I don't think we need this, we can just pass in the arguments.
This will be 0 if the user has specified a different number of profiles. I think this should be a constant, or an option, and a value of 0 for the default.
I don't think we need to rename the class.
This is a bit hacky, but it's not a blocker for the PR
This is the only change I can see.
Why this change?
I think this is the wrong place to put the guard clause.
This import is unused.
File is not `goimports`-ed (from `goimports`)
This is the only usage of this method. It can just be removed.
I don't see any validation of the `solids` and `resources` here, is that correct?
I think we can just use `resubscription.fulfill!` here.
Why is this needed?
This is the fix.
Why not pass the config directly?
This is a little confusing to me, since the cleanup function is called in the `finally` block, and the session will be null if an error occurs in the `finally`.
This file is missing a copyright header
This is the main thing we're doing. The PAL is already loaded on line 2.
I don't think we should be padming to the beginning of a sequence here. The sequence should be the last sequence. If we do, we will need to pad to the beginning of the sequence, and we will need to pad to the beginning of the last sequence.
I think we should not have this here.
This will not work for empty text. You should instead check for `if question[:text][0].present?`
I think we need a `Preloadable` interface here, and the `preload` parameter should be an optional parameter.
I think we should use the same field name as for the task config.
This file is not in `src` directory.
This should probably be reverted.
This is a bug, we should be calling window.location.pathname instead.
This was the actual bug.
I don't think this is correct. If there are more items, we should force flush.
Why is `vardel` being removed here?
`sessionId` should be `session.SessionID`.
This function should be called only if the meter id is not already present in the list.
I think we should add `cache` to the config as well
I'm not sure this should be a public function. It's not really a user-facing function.
This is not needed.
nit: `ovsctlClient := nodeConfig.OVSBridge.Client`
Why is the first parameter never used?
I think we should add a typehint for `iterationIndex`.
This is a very bad name. I wouldn't expect this to be used outside the iterator.
I don't understand why this change is necessary. I think `cls_name` should be enough.
this is a breaking change, we can't just remove this file
This was a bug
This is not needed.
I would suggest to rename this to AddBlockAction
This is the main change, the rest is just cleaning up hooks. I think this should be done separately.
This is a change in behaviour, but I'm not sure it's a good idea. If the user sets the timeout to 1 second, the thread will never exit and it won't be interrupted.
I think it is better to have this as a separate struct, and then just have a single `reuseport` field.
This is not a factory, but a factory. It's an interface, not an implementation.
This function should not have any dependency on the paramhelper, it can just call `GetRegion(zone)`.

I think this is not correct, it is not the output file.
Can we extract this logic to a method?
@martinpovolny I think this line is not needed, since the line below is already doing that?
I think we need to check `m_process` here.
I'm not sure about this one, but this should be a record.
I'm wondering why we need this change?
I'm pretty sure this import should have an import statement.
This should be 2016-2020, not 2020.
I don't think this is a good idea. We should allow any request to the host.
I'm not sure if we should be using `null` as a default value here.
This is not the right way to go, as it will break the `if` statement. The problem here is that we are not able to support the `*-to-many` association.
This should probably be in `config/google.rb`.
I'm not sure this is the right place to log an error. I think we should just throw the exception.
I think we should keep the graph as a part of the config, so that we can have the same graph for all the plugins
Why is this global? It should be in `client/`
I'm not sure about the logic here. The MARC field is set if it exists in the config, and if it is not in the fields, we should use it.
I think this import should be in the `compat` module.
I think you can remove the `\\/v` here.
I'm not sure this is the best way to do this. It seems like the most common case for the user to have a rooted path and the source path.
This is the only change that I don't see. What is it for?
I think we should remove this file from the PR, as it is no longer used.
nit: remove the dead code
This test is not related to this PR but it seems to be a bug that we're removing.
I think it is better to have this as a `*int32` instead of a `uint32`.
I'm thinking we could have a `granted_at` column and a `start_at` column, so that the `start_date` and `end_date` columns wouldn't be necessary.
I'm not a fan of using a global here. I would rather see us just pass the SVG to the template and use it directly. This would allow the template to be injected in the template itself and would allow us to avoid the need for the `global._googlesitekitLegacyData.admin.assetsRoot`
This should be set in `environmentConfig`
This will panic if there are no outputs
I don't think you need this anymore.
Why was this removed?
Why did you change this?
This is the only thing I'm wondering about: why do we need to disable this logging for the ZipkinServer? Is it because we're using ZipkinServer in a different way?
I don't think it is a good idea to add a parameter to a function that is not used.
Can you also check that the upper bound and lower bound is indeed the right value?
This should be debug, right? It's not a problem if the project doesn't exist in cache.
Is this file still used?
I don't see any changes here, so I'm not sure what's going on here. I think you should just remove this line. I'm also not sure why the tests are not passing.
I'm not sure about this method name, since it doesn't promote any default column. Maybe something like `defaultTruncate`?
This is not a role, it's a dependency.
Why is this necessary?
This should be done in `initSession`
I'm not sure what's going on here, but this looks like a copy of the one in `PlaintextAbsoluteUriBenchmark`
This is the default value for a param, but it's not a default value in this file.
Why not keep the default?
I'm not sure if this is a good idea. I think we should be creating an `ApplicationData` folder.
I'm wondering if it makes sense to add a new option to `xbuild` to allow users to specify a configuration, platform, and solution.
This is a bit of a nitpick, but I'd rather not have a blanket `bokeh_renderer` here.
Is it possible for this to be an import? I don't think it should be possible.
This is not a very good name. I would suggest something like `write.metadata.delete-after-rollback.enabled`.
This should be in the `bundler.rb` file
This is not used anywhere.
This is the same check we use for the other validation errors. I think it should be done here. Also, I think we should check if it is an attribute in the `_predictedFieldName` attribute.
Why is this 10?
I'm not sure if we should be setting the level to `:debug`, since we don't want it to show up on the console.
This should probably be a `boost::string`
I'm not sure if this should stay at `info` level.
I don't think this is necessary since you already merged `PAPERCLIP_STORAGE_OPTIONS` into this hash.
This is the actual fix. The rest is the main changes.
Should we add a description for the new render modes?
I don't think we need this anymore.
I'm curious why this is removed
I think we can use llvm.ConstInt(c.uintptrType) directly.
I think we should keep this as a bool, since the error is not an HTTP response.
I'm not sure about the wording here. It's not clear to me what this means. Maybe something like `Set this if a property should be mapped to another property. If this is set to `null`, then this property will be set as the public key for the property.`?

This is not correct as we are not checking if there are any existing ids for a relation.
I think we should keep `x-diskcopy`. It's not a good name for a type. It's a type of file.
This is not used, can be removed.
This should use the `orcid_16x16_image_path` helper.
This is a bit of a misnomer. It's not actually "PRId64" bytes but "PRId64" bytes.
This is not a useful log message, as the config key is already in the dictionary.
This was a duplicate of the `background` function in #4569.
I think these should be `const`
I don't think this is the right way to fix it. This will break for a multiindex, which is not what you want.
I think this should be `DOWNGRADED_PLAN`, not `DOWNGRADED_PLAN`.
Is there a reason why you moved it to the static block?
This is not needed, since it is not used in the config.
Why is `css` added here but not in the other files?
This is a good change, but it would be good if we could add a `settings.REMOTE_EXCLUDE_LOCAL` setting to `ClusterSettings`.
I don't think you need to do this.
This should also be changed.
I'm not sure about this change. I'm thinking we should keep the existing `PLATFORMS` and only add the `redhat_fips` if `platform_name` is not `redhat`
Why is this removed?
This is the wrong class.
I think you can just use `img_tag` and `img_attr` here
I think we can use `Collectors.toMap()` here.
Why did this change?
I think this interface is unnecessary, since it's not used in the implementation of `Load` and `Save`. I'd suggest removing it and just using `Saver` instead.
Why do we need to store the global variable?
Why is this change needed?
I don't see any reason to add a new method to `RPCFactory` if we're already adding it to the interface.
This is not an `INFO` level log. I think we should keep it as it is.
I'm a bit concerned with this. This seems like it will be called a lot. Is it worth adding an API for this?
nit: can we use `time.Time` instead of `*time.Time`?
I'm a bit concerned about the performance impact here - it will be slower than the previous code.
Why are we doing this? I don't see the point of having it.
I'm not sure about this. I don't think we should be removing these fields.
I'm not sure this change is necessary.
Why do we need this?
Why do we need this change ?
Should this be `QUERY`? Or is this just for consistency with `QUERY`?
Why did we need to change this?
why not just `projectNames`?
This should be moved to a constant somewhere.
This is a bug.
Is this the only time we need to poll the system stat? I'm wondering if this is too much of a hack.
Why do we need this flag? It seems like we could just always resume?
why not just `from .affine_grid_generator import affine_grid`?
This is the same logic as in the `defaultConfig`.
This import is unused.
I don't see this being used?
I think we should wait on the destroy_volume method here, since we don't want to wait until the volume is actually ready.
I don't understand why this is needed, it's a bit confusing.
This is not a good way of checking for the frontend address. The idea was to avoid having the frontend be configured in the test cluster, and have the test cluster have its own configuration to check for it.
@johnpg-saka @becker33 @martin-e This is a change that will break the `open-mmlab` build. Please review the build.
This is the only place where I'm not sure if we want to do this. We should be able to get rid of this entirely.
I think this is the only change in this file. The rest are just whitespace changes.
This is a bit weird. I think we should be able to do `r.h.IsPublic()` instead.
This should go into the other "influxdata/flux" imports.
I would have expected the `BlockChain` to be passed in the constructor instead of passing nil
nit: I think we can just use the top-level function `getUnifiedTopology` here, since it's not used anywhere else.
This should be removed
I don't see a test that covers this.
I think we need to set the default to `false` here.
This is the only change in this PR.
I'm not sure if this is the right way to do it. It's a bit confusing to me that we're passing `scheduled_for_deactivation?` and then passing `scheduled_for_deactivation_on` to delegate.
Why this change?
I think we need to use `HashSet<string>`, not a HashSet.
This is the only one that was added.
This should be `FrameworkDescription` not `FrameworkDescription.Instance`.
I'm not sure about this. It's possible that the theme file is too long, but the file name will not match any of the other files in the directory.
Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
I think this is a bug fix. The flag was not set in the original code. I'll fix it in the new PR.
Why not use `ctx.Repo.Mirror` here?
I think it would be good to add the `Cache-Control` header here.
This should probably be `LOG.finest("XPUB binding to {}, XSUB binding to {}", xpubAddr, xsubAddr);`
This line can be removed, right?
I'm wondering if we should have a `CopyFlow` function that does all this. It would allow us to avoid copying the whole flow.
This TODO should probably be addressed before merging
Why do we need this?
nit: I think we should use a `map[string]struct{}` instead of a slice of strings to keep the order of the headers in sync.
This is a bit confusing to me, but it is not the same as the previous test.
This is a bug fix. The zero index should be the first one in the array.
I'm not sure if this is the right route. It should be `new-language-confirmations`
Should this be in a separate package, or a test util package, or is there a reason we need to keep it here?
I'm not sure about this one. The `Example` prefix seems to be a bit redundant, but it's fine. I'll leave it for the future if you think it's worth it.
Why is this change necessary?
nit: remove empty line
This class should be renamed to `TimeBenchmarker`
This is not a str
I think this should be a separate PR, since it's a bit different from the one in `ListTableProcessor`
This is a good change, but I don't think this is needed. We should just resolve all JS files.
I think this import can be removed
I think the original indentation was correct.
nit: `bytes.Reader` is more accurate
I think we should add a `price` field to this struct. It's used by the `blockchain/ask` package to get the price and size.
I think this test is failing because the `--no-resolve` is now `true`, so this should probably be `true`.
This test is no longer needed, right?
I don't think this is correct. If you set a label callback, it should not be set. The assert should be that the callback is not NULL. If you set a label callback, it must be NULL.
I don't think we should have this in the view. We should just be able to get away without it.
I think you can just use `dialer.Resolver.NetAddrs` here.
Why did you change this file? I don't see it being used anywhere else in the diff.
This is not used anymore
This should be `CASDefaultCstorSPARSEPoolEnvK`
I think we can remove this method, it is not needed
I think this can be simplified to just `!second_intersection_name.empty() && !first_second_same_name`
This is not needed
this is a python 2 only import, not an external lib.
This is the same as the above, but I think it's a little bit confusing to have two different error codes.
This function doesn't return a number, it returns a string.
I think this should be `await driver.stop()` instead of `server.stop()`
Why is this interface not needed anymore?
Why do you need to define this constant?
I don't see where we're using this?
This is a little unfortunate. It's not clear to me how this works.
This is not correct. We are not using this header anywhere.
Why is this not `'' === $value || '' === $value`?
I think it is not necessary to log this.
I think this should be `const` as well.
This is not the correct fix. The original code used to pass `nestedScrollAxes` to the `NestedScrollLayout`.
assert() is not needed, as assert() is a runtime check.
I think this is the only place that we use `strftime` in this file so we should be consistent.
This line needs to be removed.
This is a breaking change, we should keep it.
I think we should add `this.hot.isRtl()` to the `ManualResizePlugin` interface instead of adding this property
This is a little weird to read. Maybe `IsDir(path string)`?
This class should probably be in a `android.widget` package.
Can you remove this code?
This is not a good example. It's a good example to have in the HTML, so it's not possible for someone else to understand what the test does.
I don't think this should be here. It should be in the `SessionManager` interface.
I think the comma is not necessary here?
I think we should return an empty string here instead of nil.
This seems like something we should do in `quilt3`?
This is the only line that needs to be removed.
this should be `chained-comparison-simplify`, not `simplify`
I think this can be reverted
I'm not sure this is a good change - I'd rather see this log message stayed at `INFO`, as it is not really a critical log.
Is there any way to make this work for all requests?
Should this be a warning?
`lua_pcall` returns `int` and not `int`.
This is a bit confusing, I think it should be something like `markexpr=True`.
I'm not sure what's going on here. Is there a linter rule that disallows this?
Can this be removed?
Can we add some docstrings for the parameters and the return values?
This is a good example where the error is not returned. It's also a good example where the error is returned.
This is not really a critical log. I would say it is not worth the trouble to log this in debug mode. It's not a critical log.
This should be a test logger
Can we move this to a utility class?
I don't think this is right, `id_field` will always be an attribute of `models.Model` (and thus the `id(x)` call would not be necessary, since `id(x)` will always be an `id` object)
Is this needed?
I don't think we need to add the `child-action` to the `operation-name`.
I think you need to run the command on the remote host too.
I'm not sure about this one. It looks like the `@video_page.title` is the same as `@video.title`.
Why was this removed?
nit: this import is unused
"github.com/algorand/go-algorand"
Please remove this extra space after the comma
This import seems to be unused.
Remove this debug statement.
Is this necessary? I don't see any other import in this file.
Can you please add an assert that `BCryptPasswordEncoder.BCRYPT_VERSION_3B` and `BCryptPasswordEncoder.BCRYPT_VERSION_2Y` are the same?
I think we need to add a lock here as well.
Should we add `volume` here too?
This should be `zkShardTerms.getHighestTerm() < zkShardTerms.getTerm(leader.getName())`. The term is not necessarily the highest term of the leader.
I think this is not needed. `AbstractAnyTypeDeclaration#getClassName` will always return null if the node is not a `ClassDeclaration`.
from .tools.util import save, remove, remove_version_from_list
I'm not sure if this change is correct. The only case where we can get an error here is the `err2`. I think we should keep the `isExecutionAlreadyStartedErr` check.
I don't think this change is correct. We should be able to remove the `_TtCs23_ContiguousArrayStorage` mangling from the `_TtCs23_ContiguousArrayStorage` string.
This should be `el::mpi::Size(c) >= 8 && local_size <= 32768`. Also, I don't think you need to check `local_size` here.
Why not just make this a uint32 and then use the value in `TemporaryPets`?
I think we can remove this check, since we don't need it for `envCfg.EnableSharedConfig`
This is not a filter, so it is not a big deal.
This method should be renamed as well.
This is the actual fix.
This is not a good idea, it is a problem. The bundleUtil will be used by the DataverseBundle.
This is a little confusing. I think it's more clear to use `.length`.
I think we can use the `{}` syntax here.
This is a little confusing. Why do you pass a URL string here? It's already a `str`, so you can just pass `url` directly.
This is not a good idea. We need to pass a context to the function, and we need to wait for a channel to exit.
I think we should also validate that the limits are not too large.
Shouldn't this be in sync?
I think you can remove this
I'm not a huge fan of this copyright line, as it's a bit confusing.
This is a little weird, but it is not related to the issue.
Is this a typo?
This should be `filepath.Join(dir, backend.Paths.Config)`, otherwise it will create a directory that already exists
I think we should check the timeout is set to `3` as well, to make sure the timeout has been set to `1`.
This should be a separate action option.
Should this be a property instead?
This change is unrelated.
This is the only line that actually changes anything, and I'm not 100% sure what the difference is between the two.
This is a breaking change. Please add a new category after `SECURITY`
This is a constant, it shouldn't be a constant.
Why did you change this?
Is it worth adding a constructor for the Header array that accepts an int length and the String representation of the request type?

I don't think this should be changed.
Why do we need this change?
I don't think you need the state here. You can just use `DateTimeOffset.Now`
I think this is a bug.
This is not true for pending signals. It's only for the xmm allocator, not the special allocator.
I don't see the need for these two annotations.
I think we should add a check here that the parent's timestamp is less than the time we were last observed. This is a case of the fact that a difficulty is greater than the parent's timestamp, which is a bug.
This description is a bit confusing to me. I would say that the url is the URL to be passed to blob.OpenBucket.
This is a bit weird, I think it's better to use a single query instead of a list of lists and then do a `db_conn.fetch_listens` to fetch the listens. I'm not sure if that's a problem, but if it's not, I think it would be better to use a `list` instead of a `set`
This file is not changed
Is this the right place for the cert?
I think you need to remove the copyright
This is not correct, the copyright should be 2012, 2014
This is a breaking change, and I don't see any reason to introduce a new field for this.
This is the only config that can be set, not the whole struct, so it should not have the `*` prefix
@mickhansen is there a reason we are importing this?
I think we should make the default value of this to `0` and make it a `Long.MAX_VALUE` to avoid any future problems.

This is a test file that needs to be updated to use `assertThat`.
This is not a cluster sync, it is a syncset
Why is this change needed?
Why is this a pointer?
Is it possible that the error here is because of the `defer GinkgoRecover()` above?
I think this will fail if the user passes in a value of 0.0.0
This is a breaking change for users of this interface and should be discussed in a separate PR
I think we can use conf.getPartitionPerSplit() as default value here.
Why do we need this?
Why is `Array(options[:page_ranges])` needed here?
Why is this removed?
nit: can we make this a pointer?
I think it's not a good idea to show this link on the dashboard, it should be hidden from the admin.
Why do you need to create a new Batch here?
I think this function should be moved to `txs.go`
Why are these removed?
I think we can keep the old name, it's more readable.
Line is too long. [92/80]
I think this should be `RenewalTime`. The reason for the rename is that the name of the func is a little confusing.
This can probably be a classmethod, since it's used in multiple places.
This is a breaking change, we should keep it as it was
I think this should be moved into `privload_insert` function.
I don't think we want to use the `\t` as a separator.
Please avoid wildcard imports.
I'm not sure why this was changed.
This import should be grouped with other `google.golang.org/grpc` imports. (Also, please run `goimports` on the files that need changing. Thanks.)
I think we should remove the script tag, since we're not using it. I think we can just remove this.
This is not a good idea. The caller should be able to decide which peer to return based on the skipPeers. This is because the caller should not care if a peer is connected to another peer.
I think it would be good to add a link to the docs for the scroll bar, and also mention that it's disabled by default, and that it is disabled automatically when the scroll bar is disabled
I think it's better to use the `pylint: disable` decorator here.
I think we should also test that the method is not in the map.
I think this should be `50_000`?
This is the actual fix.
Is this a bugfix?
This should be removed, as `asa` is not used in this method anymore.
This is a bit confusing. It's a POST and not a GET request, but the URL says it is a POST request.
This should be a read-only error, right?
This is not needed.
I think you can just do `dict(train=train, val=val)`
This should be a pointer type, not an interface.
Should we log the exception here?
This is the only version of ruamel that needs to be updated. I don't see any code in this package that checks for `ruamel.yaml` being installed, and it's not a requirement for the package.
I think we should also add `checkArgument(weightFunc != null, "Weight function must not be null.")`
Why is this needed?
Line is too long. [81/80]
This is a bit weird. We're encoding the message, and then we're not using the message in the message.
I don't think this should be necessary
I don't understand the reason why you changed this to an array. The array is not indexed by id.
I'm not sure if this is a good idea, because it is a collection. It is not a collection of sequences, but an iterator of sequence. I would prefer to have the list be a `List<T>` and the vector be a `Vector<T>` (or `List<T>`)
This change is not needed.
This is a duplicate of the above code.
Why do you need this?
I'm wondering whether we can make it more clear that this is a string. I think it might be better if we just use a string.
This method seems to be unused.
I think this is a good change, as we want to know when the command was executed, and when it was not, and when it was executed, we should know when the command is executed.
This is a breaking change. The `toArray` method is not available on the `Component` object, so it's not possible to test it. I'm not sure if this is an issue or not.
This should be `originalIcebergType`, not `icbergType`.
I think this is not necessary, as the `*` is already implied.
Should we rename the file?
I think this line should not be needed.
I think this is the only change that I can see in the diff. I don't see any other changes that are related to `InternalRecordWrapper`. Can we revert them?
I think we should also add a `label` property to the session object.
This is not the right place to do this. The FAV will be selected even if the user is in FAV mode.
I'm not sure why the join function is being used. I think the join method should be used instead.
I don't think we need this condition. AssemblyOptions.validateParams already does this.
I think we can just make this a `[]string`.
Is this a typo?
this is a bit of an unrelated change
I don't know if we want to add this to the default options, but it seems like it might be better for the default to be `false`
Why this change?
Should we log here that it's not the device name that is being used?
This is an API breaking change, we need to bump the major version of the SDK
I think this should be a long, since it's a long value.
This is the only place where I can see a change in the version string
I think you need to remove this from the views.
>initializer [](start = 44, length = 9) Why do we have an initializer parameter here?
This should probably live in the flux package.
I think this should be `import { remove } from './remove';`
I would suggest to use `CPULimitsEnabled` instead of `memoryCPULimitsEnabled`
This will panic if `s.matches` is 0
This is not correct. The wifiStatus is only updated when the service is fully initialized, not when the service is actually initialized.
We don't use `jest` in the tests.
This is not correct. We are returning the zero length close if the end stream is not consumed.
I'm not sure if this change is correct
I'm not sure if this should be a separate test, but it's a good idea to have a test that checks if an array is passed to the `find` method.
This seems like it should be an error level, not a warning
This should be in a separate PR, right?
This should be `FEATURE_NAME_REPORTING`
Should this be a `panic`?
This file is not used.
nit: I'd prefer to call it `EdgeRole` since it is a bit generic.
Why change this?
This method is not used anywhere.
This method is not needed.
Why this change?
This method is not needed, as it is not called anywhere else.
This will need to be `apt-key adv --recv-keys` as well
Why was the note removed?
I think the test should be renamed to `shouldKeepInstanceOfPriorityQueue`.
I don't think we want to change this, since we want to be using `Concurrent::CachedThreadPool` everywhere.
This should be `elif reduction == 'none':`
This is not correct. The norm is always 1, but it is not a norm.
This is the fix.
I think this should be `kind=` instead of `kind=""`.
This is the only case where we need to log the result, so I think this is not needed.
I don't think you need the std::move here
I don't think this is a good idea. It's better to use a different approach for the same problem.
This is the only place we use this, so I removed it.
nit: `or {}` is easier to read than the `or` operator.
This is a very short time. Can we make this configurable?
I think it would make more sense to set this to `false` by default, since it's a bit more clear what the default is.
I think this is unused
Why was this removed?
Which is this change?
I think we should use `AccountCapabilities` here.
I think we should keep it as PodPhaseSelector, since it's not really a selector.
I think this needs to be removed.
This change is not needed
I don't think we should be using `DynamicPropertyFactory` here, since we are not using it.
I'm not sure this works. The regex is used for escaping `\\` and `\` as separators.
I think it is better to move this to the beginning of the function.
Why not use `Bolt::Util.deep_merge` here?
This should probably be an int64, since that's what we do with other types.
nit: `anonymous` is not needed.
nit: I'd prefer to use `0.3.0` instead of `0.2.1`.
I don't think this is necessary.
I'm not sure if this is still necessary, or if we can just remove it.
Why is this needed?
I'm wondering why this is needed.
Why do you need this?
`got unexpected token` -> `unexpected token`
I'm not sure this is correct. If we are in NONE state, we should set OpenState to true.
I think we should not override this method.
I think it's better to name the parameter `withCreatable`
Why is this change required?

@jlsherrill I think this should be `@template_index`
Is this correct? I don't think we want to do this for all IBLs.
I think we should keep the year as is.
I think we should use `if (freopen(...) == NULL)` instead.
I think we need to make these strings constants somewhere.
This is not a good idea. It will break the code for `rev` if it has no key.
nit: can we call this `nodeCIDRToBlockToBlock` to be consistent with the `workloadIDToCIDRs`?
This is the only change in this file. The rest is just cleanup.
I don't see this method used anywhere.
This is an example of a bug in the original implementation.
Why do we have this constant?
Hi @
This is a breaking change. We need to make sure that we have a test that verifies that the backend is set. We can't just make this change in a major release.
I think these should be implemented in the `webservice` package
This is not a change in behavior, but it is a change that is needed.
Why did you change it?
This is the type that we are going to use for the watcher.
I think we should return a meaningful error message here
I'm not sure what the best way to do this is. I think we should just use the name from the response, rather than the handle from the response.
nit: `yaml.Unmarshal` will unmarshal the YAML to a new object. You don't need to do `yaml.Unmarshal` in the `case`.
This was a bug, it was only excluded for vendor directories.
This should be `trList2.get(0).pumpId == null`.
I don't think this is a good name for a struct. I think `checksum` would be more accurate.
I think this is the right place for this condition. The only place where we need it is the `DNSNotReadyCondition`.
I don't think this is the correct fix, this is the only place where we're using `HOST` in our code, and it doesn't look like we need it here.
I don't think this is correct. The nilkeys should be added to `writes`, not `agets` and `cgets` below. If the write is a get, the key will not be nil and the key will be nil.
I don't think we need to add cancellationToken to the public API. We can just pass the token through to the callback.
I think this should be removed. It is used by `ProviderInfo`
This should be in the `flux/test` package.
nit: this is not a change, right?
This should probably be `GET '/help'` since the URL is `/help`.
Why is the `approximation()` method needed? I think we can just use the getter directly?
This method should be removed.
I think this is the only class that needs to be overridden.
I think we should keep the year at 2020.
Can we make this `ServiceAccountName` instead? It's more consistent with other types.
I think we should not set this option if ALPN is not enabled.
This is not a good idea. It is the copyright of the file, and the author of the file is the one who is familiar with this code.
I think you can use defer here.
I don't think you need this.
This is a breaking change, right? I think we need a new constructor here to pass the default `Aggregation`
I'm not sure this is the best way to go about it. I think the best approach is to make the `npm` command use a `nodejs` binary, and then use the `nodejs` binary to set the spin flag. I think we should be able to just use the `nodejs` binary to disable the spin flag, and then use `npm` to disable the spin flag. What do you think?
I think this is a bit too strict. We should probably have a test for the "no match" case, and a test that the headers are not empty.
This is the main change, the rest are just refactoring.
This is a very minor change, but the `y=1.05` should probably be `1.0`.
I think this should be a `big.Int`
Why do we need to add this method?
I don't think you need this, you can just call the function from here, right?
I think we should remove this method.
I think we can just use `attr_reader` here, and avoid the `class << self` below.
I'm wondering if this check is still necessary, given that we already check for `item.Type` above
I don't think you need this method, you can just call the method below.
I don't understand why we are not using the error from the `fetchGetURLChannels` action here.
This should be `googlecloudprofiler`
why is this change needed?
I'm not sure this is correct. It should be `application/javascript`, not `application/xhtml+xml`.
I'm a bit confused by the name of this config option. It doesn't seem to have anything to do with the Openstack region.
This seems like a bad idea. Why are we not supporting the timecodes with a period of `01`, `2[0-3]`, `3`?
This was a bug, the ActivitySource adapter wasn't being used here.
I think we can just remove this test, it's not testing anything
"between the merge point for the branch and the current head." -> "between the current unmerged and the head"
I think we should return the error if `err != nil` but we can't get the node list.
I think this should be `created_at`, `updated_at`
Why is this removed?
This is not needed, the method is deprecated.
This is a pretty big limit. We should probably limit the number of messages that can be sent to the block in this way.
Why did you change the default value of this?
This is the only place where we have the `/2` in `KestrelMemoryPool`
I think we should use `ZoneOffset.UTC` here too
This is a good change. But I think we need a more specific regex for this.
This was the only usage of the `struct` member variable.
I think we need to add this file in `src/build/` too.
I think this will break the tests.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
I think we should just use the underscore prefix for these.
Please use `ComObjectUID` here
I'm a bit worried about this, because I'm not sure what the best way to do this is. I'd rather see this be in a separate PR.
I think you can just do return maxAudioBitDepth = condition.Value
I'm not sure if this is an error or not, but it seems like this should be a WARNING.
I think this should be `tags.AsSpan().ToArray()`
nit: "that the" should not be removed
This is the same as above.
Align the elements of a hash literal if they span more than one line.<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think this is a bit too much, it's just going to be a string.
Why this change?
This is the actual fix for #4346.
Why was this removed?
This should be a constant. I don't see any reason to make this a global var.
Why not `512 * 1024`?
This is a bit weird. Why is the flag not used anymore?
This seems like a very expensive call. Can you do it outside the try/catch so it doesn't block?
Why not `if req.WithNS`? It would be a bit more readable.
I think these should be in the `pkg/apis/networking` folder.
This is a bit weird, but I don't know how to do better than the original.
I think this is a bug, because we are now calling `getName()` on the `ClassOrInterfaceType`, which means we are now calling `getNameAsString()` on the `ClassOrInterfaceType`
I don't see the need for this, but I think it's better to have the `try-except-raise` in the same line with all the others.
I'm a bit worried about this method being static. I think we should make it private, and make it `static`.
I think it would be better to pass the `data` as an argument here instead of passing it as an argument. This way, if we ever need to pass the data in the future we don't need to worry about backwards compatibility issues, and we don't need to change the signature for the `getDataErrorComponent` function.
I'm not sure this should be a public API.
Why do we want to make it internal?
This is not needed, right?
I'm not sure if we want this change, or if we want to exclude `conftest.py` from the `test` directory.
This check is not needed.
This should be `<=`
nit: `fStruct -> rowType`
Line is too long. [81/80]
Layout/EmptyLinesAroundModuleBody: Extra empty line detected at module body beginning.
This is not nullable
I think we should record this in the `metricsScope` instead of the `timerNoUserLatency`?
I'm not sure what's going on here, but this seems like a good place to do this. I'd rather not do this.
I don't think this is correct, as the `isotopeModificationType` is the same as the `structuralModificationType`
Should this be `unless: :can_change_org?`?
This is the wrong way around. We have a `datastore.OperatorContains` that is not a supported operator.
Please avoid using `*` for imports.
I'm not sure about this. I would prefer to use the same kind for all the requests, and only set it to NORMAL.
This is a breaking change. We cannot change the signature of a transaction that is already signed. This will cause a breaking change.
This is a bit of a misnomer, as the error is not a 401, it is a server error. I'd suggest something like "Unauthorized request to '%s' when using api token '%s' : %s"
I think it is better to add a log here, so that it is easier to find and track.
Why do we need this?
This is a little confusing. The super method doesn't have the same arguments as the base class, but it's not a super class.
This is not needed, as the user is already created in the `create_table`
I'm a bit confused by these functions, do they exist anywhere?

This is a breaking change. I think this should be fine as-is.
I think we can remove this one, as it is not used anywhere.
>new Dictionary<string, object>(); [](start = 12, length = 36) why do we need to create a new instance of it here?
I think this is the only place where we have a mix of `.android` and `.binding` in the code base.
I would prefer if this was a `before_action` instead of a `before_action`
I'm not sure why this is changed. It's not related to the issue but I think we should change it.
This is a breaking change, we should not change the signature.
I think this should be `CombinedOutput()`.
I don't like that this is not an error, it's a warning, not a error.
I think this is a bit of a misnomer. It's not a lower domain, it's a case insensitive string.
We need a migration to rename existing topics to trail_map.
I think we should use `User::permissions` here.
This is going to break if we have a bunch of other files in the same directory.
This will fail if the name is `/`. I think you should just use `strings.TrimSuffix` instead.
I'm not 100% sure if we need to change this, but I think it is fine as it will be a breaking change.
I think we can just return the `toWriteStream` here.
I think this should be `_x` as it's a single-word label.
I'm not sure this is a good idea. We should probably be using the Flow.Table field instead of a pointer.
This is a breaking change.
This is a bit of a nitpick, but I think it would be better to use the same name as the class, `ELBV2ProxyListener`
I think we should add this to `PermanentFailures`.
I'm not sure if this is a good idea to set this env variable. If we want to set it, then I would prefer we set it in the tests. I don't think we want to set it in the fast params for the tests, so I'd rather not set it here.
This is not the right way to go. We need a better way to do this.
I would prefer to use `validateConstant()` instead of `notBlank(stringArg, \"message %s\", compileTimeConstant);`
Is this used?
Line is too long. [81/80]
This should be reverted
This should be an Assert.
I think it's fine to have this in the cpp files. I don't think we should be including this in the core files.
I don't think this needs to be a list. The order of the list is important, as the order in the array is important.
I think this should be `assert.NotEmpty(t, containerEvent.ManagedAgents, "Expected exec-agent event has no managed agents")`
Please don't wildcard imports
This should be `BearerTokenFile`.
Is this necessary?
This is a bit confusing. Why not use `addr_.c_str()`?
I'm wondering whether this is the right thing to do. I think we should check for the `Braille` HID protocol before any other device matching, and then yield the device if it's the Braille HID protocol after any other device matching.
I don't think we need these whitespace changes
I think we should use a version number for all new files, so that we don't need to add a new version.
I think we should add this to the `getEditLink` method as well, so we can remove it.
I'm not sure why we need this import?
I'm not sure about the changes here. The previous code was using the `findOneBy` method.
I think this change is not necessary, as it's not used anywhere in the code.
I think this is not necessary, since the `data` is already binary. The `data.decode` will return the same thing. Also, I don't think we need this `if`.
I don't think we need the `c_str()` here.
These should probably be `self._bucket` and `self._collection`
/* eslint-disable no-var */
Can we rename this prop to be `linkExternal`?
Shouldn't this be `!`? I don't know if it is possible to get null refs.
This should be `admin_mail_edit`
This function is not used, so please remove it.
This is a test that's not needed anymore since we're testing `AddRenamedMessage`
I think we should still register this function on the batchstore.
This should be a method on the model, not a static field. Also the name should be `config`.
I think we should keep blockchain.GasLimit as the default. It is a bit weird.
This class is unused
This is a bit hard to understand - can we extract this into a method and reuse?
This will cause NPE in case of an exception.
I think this should be a warning. It's a user error, so I don't think this will ever happen.
Why is this class deprecated and the others are not?
I don't think this will work as intended, as the `rev_hex` is not returning a valid hex string
I think we can just make `shouldEscape` an `Optional<Boolean>`
Why is this a pointer?
Why this change?
Can we use `cancelable` instead of `cancelable`?
This is not a new key.
This function name was changed to be more accurate.
I think we should report this for `speak typed characters` too, since it's a bit different from the other keys.
@deads2k this is a change in behavior.
This should be `Debug`
I don't think we need the `b` variable here, since it is only used in the following line.
Can you add a method `deleteTermsForDoc(int docId)` to this class and use that method here and in the other places?
This rule should be removed
I think this is a breaking change for the driver. We should either make it a separate PR or add a new one. I'm not 100% sure what the best way to fix this would be.
This state name is a bit too generic. Maybe `STATE_FIRST_TIME_EMPTY_SUBJECTS_EMPTY_FROM_EQUIPY` ?
I don't think this change is necessary.
This is a bit weird, but I guess we can't do that right now, because the error will be logged in the `logger` and we don't want it to show up in the logs.
This should be `False`
`_isHidden` should be set to `false` by default.
This should probably be called `samples_snippets_csproj.snip`.
These should be final.
Why do we need to remove this?
This is not the right place for this logic. It should be in `DataFrame.apply`.
This should be `throw e;`.
I'm not sure about this. If we have a logId > 0, then it's the last logId sent. If we have a logId < 0, then we're not going to send the response, right? If so, we're just going to send it, right?
This should be `UpdateCondition`.
This is a change in behavior, right?
I don't think this spec is needed anymore, right?
I think we should keep this one, it is not used anywhere.
I think this should be `mIsFirstActivation`
I think it is better to use `LOGGER.warn` here
This is a regression, because the span is not needed for the test, and the test will fail on the next line
I think you could remove the `has_subscription_with_mentor?` check, as it will be always true.
nit: I would call this `updateRecieve` to make it clear that this is a boolean.
I'm not sure about this. I think we should keep the imports in alphabetical order.
I don't see the point of this.
I think we need to remove this lock.
I think we should add a warning here.
I think you can use `expect(page).to have_content('required')` here
This is a bit confusing to me, I think the `?` should be on the previous line, not the next line. I wouldn't expect the `?` to be needed.
This is a bit weird, I think we should use the `contract.FullName()` instead of the implementation name.
Why is the namespace changed to `Microsoft.Rest.Azure.IResource`?
I think we should just remove this, as we don't want to disable host verification.
I think this import is not needed
I don't think you need the `else` here.
I don't think this is needed, since the response is already a bytes object.
I think you should use wx.ID_ANY here.
I think we can remove this method and use `ContextT.of(context)` instead
I think we should use the `empty()` method here
Can we move this to line 232?
Use nested module/class definitions instead of compact style.
I'm not sure what the best way to handle this is.
I think we should add a `Precondition` check here. If `type` is set, and `uri` is specified, we should not set an alternative uri.
I think we should keep this as float. It's more readable to have the float cast here.
This is not needed, as `certPEM` is the certificate used to sign the request.
This will cause the DOM to be recreated every time it changes. I think we should use a `Set` instead.
This is not a great solution, because it will break if you try to bind multiple events.

I think this is not the best wording. It's a bit confusing.
This is a little weird, why not just have the `else` case be `if d.SourceImage == "" && d.SourceSnapshot =="" {`? I think that would be more readable, but I'm not sure if there's any better way to do this.
This test should probably have an assertion about `toCreate` being an array of `Object` objects, and the diffIndexes() method returns an array of `Object`.
I think it's better to use `net_ip_t` for `local_ip`
This method should return a boolean.
This class is only used by the `ScorerTest` and the `ScorerTest` is used by `TermScorer`.
I think it's better to use `QueryRelation.INTERSECT_WITHOUT_RECTANGLE` here.
This is a bit of a hack, but I'm fine with this for now.

Why is this not a ValueTask?
I think we can remove this condition. The installer image will be resolved by the CLI if it's not installed.
This is the only place where we call this method. It should be removed.
Why remove these two?
I think this should be a debug log.
I would suggest to move this to a new package `extutil`, `bazel` is not a common package.
I think we should be using the constants defined in `blob/types.go` here.
This should be `Using WebDriver after calling quit()?`
This should be a `SleepFunc`, not a `time.Sleep`.
I'm not a fan of this. It's not a good idea to have an error code that is going to be logged.
Why is this change necessary?
This is not needed. You can just use schedule directly.
I'm not sure this is correct. If `solution.GetProject` returns null, then the `project` will be null, which is not the case. It should be an error condition to me.
I think we should use `boost/assert.hpp` and `unordered_set`

Why is this necessary ?
I think this should be a separate PR.
I don't think this should be a pointer.
This should be `format != 't'`
This is not needed
I'm wondering if we should add a `SetTag` to `TracerConstants` that sets `SpanKinds.Server` and `SpanKinds.Language`?
Is there a reason why we don't use `DateUtils.formatDate()` here?
Should this be `config.start_time = 42`?
I think this can be moved into the `else` clause below
Why is this needed?
This should not be changed, right?
This is a breaking change, right?
Should this be `> 5`, not `> 5`?
Why do we need this?
This is the change that fixes a bug that I found while working on this.
This is a bit confusing, since the `tcp_stream_modify` script is loaded in the `__init__.py` file. Maybe we should rename this to something else, like "test_tcp_proxy"?
Why is the space here removed?
I think we should keep the old check for `node.statement(future=True) not in node.frame().body`. It will make the logic more readable and we don't need to modify it.
I think we need to add a new macro for this.
This one was correct, but the rest is just whitespace changes. Please remove the extra spaces.
This is not used anywhere, can be deleted
I think you can use pathStart == -1 here
This is unused.
This is a bit weird. Why not just return `nano::epoch::zero`?
I don't think we should have `cb` in a global variable
Why are we making this public? I think it should be private.
nit: this is a lot of buckets. Maybe we can have a single histogram for each bucket.
I think this should be `thriftrw --plugin yarpc --sanitize-tchannel`?
I don't think you need the API_BEGIN()/END() here, as you're not using it in any API.
I don't think you need this, you can just use the existing error
nit: can we add an assertion here that the cluster region is the expected value?
This should be "crypto/x509"
Should we make this an enum instead?
This change should not be included in the PR.
This function is unused.
I don't think we need this.
Why do we need to copy the results here?
This is the fix.
I think we can remove this default, it doesn't add much value.
I think we should use `getAndroidSdkPath` here, instead of hard-coding it here.
this should be `calculatedStepSpeed == 1`
This is not the same thing as the old version of the app.
Please use strict comparison. Also use strict comparison.
This method should return false for invalid data, as the block hash is null.
I think we can remove these headers.
Layout/SpaceInsideParens: Space inside parentheses detected.
Why is this needed?
This is the default.
I don't think we need to check `cell.idx` here.
I'm not sure if this is correct. The name is not the same as the name of the class.
I'm not sure this is a good idea. I think it should be `tcp_reassemble = pkt[TCP].seq`
We don't use star imports in the code base. Please remove.
I think this is a typo, right?
This is a bad idea. You are loading release.inc twice.
This is a little confusing, since the `action` column is a `string`, not a `string` (which is why the tests pass).
This should not extend AbstractArchive.
This could be an interface.
This is a bit confusing. I think the name of this method is a little misleading, because it's not actually returning the instance. I think it should be something like `getAlgorithmInstance(self)`.
This is a very specific error, and I think it should return a `500` status code instead.
I think you can revert the changes to this file.
This should probably just be `if dir != "" {`, right?
I think we should keep the doctest here as it is. The doctest should not be modified in the doctests.
Why is this mutex needed?
This is a bug fix. The block is not in the state, so it's the height of the block that was requested. This is not the state height of the block. The block is not in the state.
This is not needed, as the instance is already in the final executable
This is not needed, as it's already defined in the parent class
Why not return `0`?
I think this should be called `StoragePoolDiskTypes` to match the type in the API.
I think this should be `const` instead of `undefined`, as it will always be truthy.
I think this should be `logger.Warn`
I think it would be better to add a `assert` here that `bbox_feats.shape[0]` is a list.
nit: this is a little confusing to me. Can you just use `loadMetadataTable` here and remove the `metadataTableName(MetadataTableType.ENTRIES)`?
nit: use `starts_with`
This should be removed too.
I don't think this is needed anymore
I don't think this is necessary. The user is always created in the DB if the user is missing.
Expected 1 space after IF keyword; 0 found
I think we can remove this method. We don't need it in this PR.
This change is not needed
I think this should be `nupic.generators.pattern_machine`
I think you can use `operator()(DataType x1, const DataType& x2)` here.
This is the only user that has a `bob` role. I think it should still have a `bob` role.
This is mocking the dirty cache. I think this should be mockDirtyCache

This class is used by FrontController and FrontControllerBase, but I'm not sure why this is needed.
I don't think this should be public.
Why is this needed?
Why not use the default?
Why is this necessary now?
I don't understand why we need to change the regex here.
This change is not correct. The image_format should be the same for all modes.
This is unused.


This is not the correct fix.
This should be in the `clr` namespace.
This should be `ISpecProviderProvider`
This is not needed.
I don't think this is right. The service is not NULL if it was requested to resolve to local.
Can you make it a constant?
This is a bug, but it is not a valid change. The `.` is not a valid character in the first occurrence of a period.
This should not be exported.
This will be a breaking change, as we cannot guarantee that the user has set the `sortOrderId` to `null` in `SortOrder`.
`return not os.path.exists(HTML_FILES_PATH)`
I think this should be `errors.Newf("get environment config: couldn't find environment dev in the application my-app")`.
This is the only change in this file.
I'm not sure if this is correct. The `clearComputedProps` is called for every `Atom` and `Bond` in the same way, so this will clear the computed properties.
I'm not sure if this is needed here.
I think this is an accidental change.
I think we should use `roleName` here instead of `ROLE_PREFIX`, since `ROLE_PREFIX` is a constant.
This seems to be unused?
This change seems unrelated to this PR?
Should this be `googlesitekit-user-input__notification__dismissable`?
I'm a bit confused by this change. Why are we changing this?
I don't think we need to remove this.
This is a bit confusing. What does `type` mean? Is it the name of the service type or a type of the service?
This is the actual fix, the rest are just refactoring.
I think we should add a new column `cart_id` here.
This is the default value, right? If so, we could move this into the `defaults.rb` file.
I don't think this should be a label. The task is a label, not a label. The label is a label, not a label. I think the label is the label that is being used for the task.
This is a bit of a misnomer, since the test name is not "Stop". Maybe `Test_StopWithNoLastLine`?
Why is this needed?
I think we should add `// TODO: add new fields` to the end of this list to remove this restriction
I'm curious why this was changed?
I think this is the only change in this file.
I think we need to keep the old behavior.
Why ignore the error here?
I think this is a good change, but I think it's better to use `assign`. I'm not sure if it's a problem, or if it's just a bug.
I think we can just use `item.Name` here, since we don't need to translate anything.
This is a bug fix. We need to make sure we are not using the revision for an update.
I think we should add `resolve_references` to the `plugins` array, and then we could just use `config.module_install` instead of resolving it again.
I don't think this is necessary, the memory allocated here will be freed by the caller anyway.
I think we can remove this.
This is a change in the default interval, but the default interval is 15. Is this intentional?
I would prefer `true === $options['lazy'] ? 'data-' : '';` here.
This is not used.
I'm not sure if this should be sorted.
This is the text for the `quit` button.
This is not a valid syntax, but I'm not sure what the right way to fix this is.
I think we should add a message here, saying that this is a bug in the code.
This change seems unnecessary
I would prefer to use a `Supplier` instead of a `ConsumerIntf`, as it's more clear that it's a getter and the getter is not used outside of this class.
This test is not needed.
why is the learning policy step needed?
I think it's better to use a `sync.Once` instead.
I think this is the only test that needs to be fixed - the rest of the test is for the `tab_w`.
Please sort imports by length
This is not needed.
I don't think this is used anywhere.
This is not needed anymore, as we are not using it in this file.
I would prefer `getTrue` to be a method of `PageStreamingDescriptorClassView` instead of a field
This class should be removed in 7.0.0
This is the main change, the rest of the PR is just refactoring.
I'm not sure if this change is correct, but I think it would make more sense to keep this in a separate PR.
This is a change in behavior, we should not be sending the message.
Why did you add the `reflect` import here?
`_dr_nlen` is not guaranteed to return the same length as `opt`?
I'm not sure how I missed this, I think this test was not necessary, since the `validations_spec.rb` already tests that the `valid_presence_of` is true.
I don't think you should add this file.
I don't think we should set this to `undefined` here.
Why not `auto`?
I'm a little worried that the event will be leaked.
This is not needed.
Should this be `october.fresh`?
nit: use `assertThat(table.name(), equalTo("data"))`
Whoops, this is a bug.
I think this should be `/topics/withRetries`
I think this method is not needed anymore, since it is only used in the `RepositoryServiceImpl`
Why is this necessary?
This is not necessary.
I would add the package of the element to the message, to make it more clear that the element is a PHP file.
This is a spark microbatch scan?
Why is it safe to remove the `mappedClaim`?
nit: I'd prefer to have the `fixture` in a separate line for readability.
I think we should rename `librarygocontroller` to `librarycontroller`
This is a typo
This is the only place that `writeBytes` is called.
This is not the right name.
This import should be moved below with the other facebook go import
I think the only reason to remove this check is because we don't want the stream to fail in case of a timeout.
I don't think this method is necessary. It is just calling `toOriginal()`.
This is not testing the `json` response, but the JSON response of the `options` endpoint.
I think this should just be `sh.cmd 'unformatted'`
I'm not sure why you added this.
This should probably go in `utils.py`.
Can we rename this to just `serviceAccount`?
This link should stay, but we should add it to the `account` section.
I think you can also remove the switch case below
I think this interface should not exist.
This seems like it would cause a lot of trouble if the user is not logged in, but then the error is logged out. Is that what we want?
I think this is the wrong way to do this. You should be using the `<%= render 'layouts/edit_with' %>` helper, and then you should use it here.
Why do we need this change?
I'm not convinced that we should change the default constructor.
Why do you need this change?
Why are these constants public?
Can we remove this now that we are using the new one?
I think this should be `inputSchema.copy()` to make sure the schema is immutable.
I'm wondering if this could cause a problem if we have multiple search objects with the same title.
This is a bit of an odd place to put a function that returns a string. I think we should move this to `SpoonSearch` and just use it here.
I think you can remove the defer too.
Should we dispose this when we're done?
Please add curly brackets.
I think we should use `forseti_findings_` instead of `forsetsi_findings_`.
Why is it necessary to return `SelfCheck` here, but return in `TransferSizeLimit`?
I don't think this check is necessary, since the ring info is initialized in the constructor.
I don't think we should change the name. We can't change the flag name without a breaking change.
Why is this removed?
I think we can use `sync.WaitGroup` here.
Should we add the config option to the docs as well?
I think we should add `ThreadAgnostic = 2` to the enum, as we don't need it in the `LayoutRenderer`
I think this is a bit of a misnomer: `isSparse` is not a boolean. It is a boolean. I think you mean something like `inputPattern is not a dense array`.
This should be `jestConfig` and not `jestConfig`.
Why is it not the same?
This is the only place where we have to write the storage. The only place where we write the storage is in `io::write` and `io::write_raw`
This is a bit weird to have a return value in the middle of a function.
I don't think we need to pass `schema` to `buildSortOrder`. We could just use it in `PartitionSpec` and remove the parameter from `buildSortOrder`.
You can't use HookQuery as it is not a valid query object.
I'm not sure this is the right link. The AWS SQS and SQS combine to support at-least-once semantics; applications must call Message.Ack/Nack after processing a message, or it will be redelivered, but it is not redeliveryable.
I think we should remove this file.
I'm curious why this is necessary?
I think it would make more sense to have this as a method on `StateDBAdapter`
Is this a typo?
I'm not sure this is a good idea. The user should be able to use `acl` without having to load it.
I think we should keep the log message here as well.
I think this should be `value.slice(value.size() - toTrim, value.size() - toTrim + 1)`
I think it's better to move this line to after `config.configure_group(self)`
Can you move this to the ResultSetPropertyTester?
Why is this change necessary?
DEFINE_int32(max_edges_returned_per_vertex, 1000, "The max number of edges returned by a search request");
Shouldn't this be a warning?
This should be `omitempty`
This file is missing the `require` statements.
I think we can remove this check.
This is not correct. If there is no LightGBM library, then the function should not return `None`. If there is no LightGBM library, then the function returns `None`.
I think you can remove the whole block.
Why do we need to serialize it as a Map? It seems like we only need the value.
This change is not needed.
This is not a good import name, it's not a executable, it's a command
I think we can remove this line.
Why is this needed? It doesn't seem like this is a valid expression.
This is the actual fix.
This is not needed anymore, right?
I'm not a big fan of this name. I would suggest something more descriptive. Maybe `googlesitekit-subscribe-with-google-bulkedit` or `googlesitekit-subscribe-with-google-bulk-edit-in-bulk`
I think this should be `height="18" width="19"`.
I would suggest using `accounting-expire` instead of `accounting` for the flag.
I think this is a bit of a misnomer. The `merge_dicts()` function is used by both the `jinja` and the `jinja2` package loaders, but the code is only used by the `jinja2` package loader.
I'm not sure if this is the best way to go about it. I'm not sure if it is possible to do this without a lock.
I think this should still be here.
This is the default for the `maxRetriesOnRecoverableFailures`, right?
This is a breaking change.
Why did this need to change?
This is not correct, it should be `Note attachments`
Why is this needed?
Shouldn't we call it `NewUpgradeTaskJob` to match the other jobs?
This function can be removed, it is only used in `glib_top.c`
This should say `string|Schema`, right?
nit: I think this should be `overrideSequenceNumberForNewDataFiles(int sequenceNumber)`
@d-m-u Is this the right validation for the URL?
I think this is not needed anymore.
I think this should be @guidance = @phase.guidance
This is a BC break.
This should be in `if (playbackManager.isPlayingVideo()) {` block.
I think we should use the `record` here, not `record`.
Shouldn't this be called in the account's updateProfilePhoto method?
I don't know if it's a good idea to change the typehint here
This function should be deleted.
I'm not sure if this is the right place for this check. I'd rather not do this check in `_start_cb` since it is not a blocking call, but rather in a `finally` block.
nit: I think this is a bit more readable. I think it's more readable to return the error and not return it.
I think this is the right thing to do, but I don't think we need this check. If we're not using `navigator.getGamepads` then the event handler will be fired for that.
This function is only used in the test code, can be removed
I don't think this is necessary.
I'm not sure if this is the best way to do this. If we can't get bad numeric values in the request, we should probably just ignore it. If we can't get bad numeric values, then we should just ignore the exception.
This example should not be here. It is a snippet of the S3 code example, which is used in the S3 example.
I don't see the value of this.
nit: I'd prefer to see this as "TestTransitionDependenciesResolvedWithDependencies"
This is a breaking change, so we need to add a `.` before the `ZK_HOST`
This is not a good default, as it is a file that is never read from disk. I'd rather use `GcloudApplicationDefaultCredentials.java`
Why not `!this.countRows() && this.countRows() > 1`?

This test doesn't really need to be in this PR but I'm not sure how I feel about this. I think it would be cleaner if we had this test as a separate file. It would be much easier to understand what is going on and the tests wouldn't have to be duplicated.
This is the main fix.
I think we should be using the `overrideLookup` from the `config` package instead of the `svc` one, as we are not doing any overrides.
I think you can just remove this line
This is a bug, but it's not correct.
I think this will fail on python 3, because it's a string.
I don't think we need a new field for this, since we already use it in the `getNextRow` method.
This is a bit confusing to read. Can you change it to `deleteBuildsOrFail`?
I'm a little confused by this method, it looks like it's only called from `remove_approver`. Why not just do `CommunicartMailer.notification_for_approver_removed(user, approval)`. Also, I don't see the point of this method if you are not using the `user` object in this method.
Why is this necessary?
This is a breaking change. We can't just remove this. We can't do it in 3.1.
`findIdByHash` should be removed too
This is a little confusing. I would have named it `nat_lvl2_drop` or something.

I think we should just remove the `.writeConcern` here and rely on `self.configuration.writeConcernMax()` to do the right thing
I think we should set `frozen_sort` as true by default. Otherwise it will be frozen when `columns` and `columns` are used.
Why is this needed?
@danrot @danrot @diosmosis I think this is not the best way to set the domain id, it's the same as the name. I would suggest we add a new property to the SliderItemData object, and then use the same field in the edit method.
This is not the right message, it is just the message that is being logged, right?
I would prefer to have the function signature as `void (*molExt)(const RWMol &)` and then have a `generateResultMol(const MCS&, RWMol **, const bool)`. That way we don't have to change the signature for every function.
This is not a safe method, since the lock can't be unlocked after the method returns.
Why is this line necessary?
This is a change of behaviour, we don't want the client to be set if we have the same client.
I think we can just remove this warning, we don't need to install the gcc compiler anymore
This should use `driver.switch_to` to make sure the iframe is the same as the current frame, right?
I think this is the wrong way to go about this - the client should be able to do any kind of replacement.
This is a bit weird to me. Why do we need to check for the hybrid config here? Can't we just always finish? I think it should just be the case if the user is the last one and the user is not a hybrid.
I don't think this is correct. We should be returning a context with deadline exceeded, not an error.
Should we log something here?
This is the fix
Why not just `env_array << key` ?
This seems like a bug fix.
I would suggest adding a `checkArgument` for `nameMapping`
I think this should be `file.getParentFile().toURI().toString()`, not `file.getParentFile().getAbsolutePath()`.
I don't think we should be raising a ValueError here, it should be a TypeError.
I'm not sure this is the right fix. This should be `xmltv`, not `other`.
Why not LOG(WARNING, "Unsupported row reader version " + readerVer);
This should be moved to the top of this file
This should be a config setting.
I think we should keep the old name here. We don't want people to have a dependency on the new one.
This function is called in `signup` and `signout`. It should be called in both cases.
Is this a bugfix or is this just for the test? If so, can we add a TODO to make this work for all machines?
I think this should just be a method on `InputDefinition`.
@barklund this test is failing.
This is the biggest value we have in our test.
This should not be necessary.
This is the only place where we use AccountData. It should be removed from the code.
I think we can remove this helper function and just call mock_consumer->wait_for_at_least_entries()
This should be `migration.GetDBRecordVersion()`
I'm not sure if this should be `version < 1`. It seems that the `version` is always 0 if the spawngroup is not spawned, and it's not a version that is a version of the spawngroup. I'm not sure if this is a problem or not.
I think the `aws` field here is unnecessary.
nowarn -> nowarn
I would suggest to use a more specific regexp, like `^>BYTECOUNT:(.*)$/`
Why is this change necessary?
This should be `ClassDeclaration.class`.
This is a breaking change, please add the new property to the `deprecate` list of the deprecated properties in this file.
This is a bit of a nitpick, but I think the video name should be `<%= video.name_with_suffix %>`
@joshdholtz this is a breaking change for existing applications. Can you add the crypto? type in the docs?
Why did you remove this?
Is this TODO still valid?
I don't think it's a good idea to expose this property to the user, as it's a public API.
I don't see why this is needed.
This is not the right place for this, as this is a global setting. It should be in a module that's only defined once.
This test should be in `test_slack_notifier.py`
I think we should have a `AUTO_INCREMENT` column, to make sure that we don't get a negative time.

I don't think this is required
I think this should be changed to getExcludeCode() since it's not returning code, but also the exclude
This is not needed anymore.
This should not be changed.
I don't understand this check - it looks like it's checking whether a directory exists, but it's not checking that the file exists?
This should be added to the docstring of `evaluate`
This is a bug fix.
I don't think this is needed.
I would prefer to use `FeedUtil.getTitle()` here instead of the `feed.getTitle()` because it will be more readable and also avoids the `null` check
I'm not sure about this. It's possible that we will allow a change to a nullable column that has been removed from the schema, but it's not a valid change to a required column. I think we should add an `allowIncompatibleChanges` to `UpdateSchema` instead.
This will need to be changed to the new string.
I think it is better to return `nil` here.
Line is too long. [83/80]
This test should probably go into `GenTest`
why not static?
This is the only change in this file. The rest is just whitespace changes.
I don't think this is the right name. I think `Create` is not a `Create`.
I think this is not necessary, we can just use Unimplemented ErrorCode
This is the only change in this PR.
This should be removed, I think.
I think we should rename this package to `cmd/cert-manager/cmd/ctl/install`
I think you should do `show_img = one_img.copy()`
Why not just do `inputOffset = Math.min(30, Math.max(-30, inputOffset))`, since you're doing it in a single line anyway?
I don't see this change in the PR description.
This will be a `string` now, so you should probably just use `Capacity` instead of `Capacity.String()`.
This is not needed, as `run_task` is already raising an exception.
Should this also include the `action` param, or is that too specific?
This is a bit confusing. It seems like we're using this to create a `controller.Config` and then `config.New()` and then `config.Update()` which is called in the `NewController` and `ConfigUpdate()` functions. Can we just use the `NewConfig` function here?
Please add docstrings for the params and the function.
I'm a bit confused by this one. Why is it cloudMigrateDriver but not cloudBackupDriver?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This will be a lot of noise, but it would be nice to add the exception details in a way that is useful for debugging.
I don't think this is correct. The `device` should be `None` when there is no CUDA, otherwise the `device` is `None` and this will raise an exception if `device` isn't available.
@sjpadgett , I think you need to change this to `--with-flux-security=`
nit: I think `copyWithFileStats` might read better?
Please use the `indexOf` method from `StringUtils`
I think this should use the `file.getRecordingStart()` function instead of hardcoding it.

This is unused
Please remove the blank line
I don't think this is the right way to test this. This should be a `json.loads`
Shouldn't this be h2o_mem_release_shared_ex(ret, NULL, 0);?
I don't see any usages of this class, and I don't think it should be abstract.
This example should be removed.
I think it would be better to have a `--metrics-protocol` option that defaults to `HTTP`, so that we can have both `http` and `https`
I don't understand why this change is needed. The previous version was correct, because the default `end_level == -1` and the current version is `len(inputs)`.
Why is this a property?
I think you want `w.WriteHeader(http.StatusNotFound)` here, right?
This is a bit of a nit but it would be good to add a note that it must be private.
Why not initialize to `0`? (and the same for the others in this file)
This is a little confusing. I think the default is -1 and the value should be 1.0.
I'm not sure about this one. It's a bit weird to have a nonblock socket.
Please don't use wildcard imports
I think the word `further from the mean` is confusing. I'd say "this is the tail probability of the normal distribution."
Can we add a ticket for this TODO?
This is not necessary.
This is a breaking change, we need to keep the old value
I think this should be `revert_all`, right?
Is this a regression or a fix for something else?
I think it would be good to add a `TODO` here so that we can remove this once we have the secrets API
I think we can remove this line
I think we can remove this if statement since we already have a file to clear in the `user_data_dir`
This is the only change in the file, the rest is just cleanup.
This class is used by the codegen to generate the type definitions for the types of the type parameters in the schema. This means that if the type parameters are specified on an importer that is not supported by the codegen, the types will be ignored.
line too long (80 > 79 characters)
I think we can remove this method, and just use `Rollback` in `SnapshotStore`?
I don't think we want to change this file. It's not part of the public API, but it's part of a public interface. We can just change this file to use the public API.
Why remove the html_safe ?
I think this function should return `size` in case of `attach_case=true`. Otherwise, we'll have to update the `size` in the future.
This is a bit confusing to me, since it's not the same protocol as the others.
I think this is the only place that we need to add validation. If a user calls `AddShapeValidations()` and then calls `RemoveUnusedShapes()` then they can remove the shapes from the validation table. If they call `RemoveUnusedShapes()` then they can't add any validations. If they do, we can just remove the validation table and then call the `removeUnusedShapes` function.
This is the only change in this file.
Why is this raw? Isn't it just a plain command?
Why did you increase the test coverage?
Shouldn't this be `_unspecifiedOrder = 0`?
I think this should be `ENV['FORCE_USER_ID']` since it's not a user ID.
This is not necessary, right?
I think we need to do the lookup now.
This is a new file, but it is a new package.
This should be a separate file, not in the main package.
I would suggest to remove this method. The name of the method is not clear from this method name, but rather the name of the parameter used to specify the jsonp callback.
This is not used.
I think this should be a list, not a set.
This change is a bit unrelated, but the output is not consistent with the output of the command, and is a little confusing.
why not static import ?
`should return true when the element is inline`?
I think this is a typo.
`p` is not a `flux_t`
I think we should keep the optin ID and name here.
why not use the `createIndexQueryBuilder` method here?
I think this should be `current_tab.present?`
This is a bit of a nitpick, I'd probably just put the `<label>` in the `render` function.
You could use roots_xcursor_theme_new() here.
I'm not sure if this is a good namespace, but I'm not sure what it's used for, and I'm not seeing any usages.
I don't like this change, it's a bit hard to follow. I'd prefer if you put this logic inside the function itself.
Is there any way to check if the window is in fact the desktop window instead of the user?
I'm not sure if we want to keep the name as it's a limit, it's just a limit.
I'm not sure we need to have this as a global variable. Can't we just use the `TierIndex` in the `ClusterNetworkPolicies` struct?
This is a bit confusing. It's not clear to me what the purpose of `ExportAsync` is.
I don't think we need to add the `*` to all of these.
I don't see why we need this class.
I'm not sure about this one. I think we should use the generic meta in pandas.
I think we can use the latest version here
This should probably be `configuration.reset_reporter`
This is a change in the serialization format.
This interface is not used.
I think we can just remove this line.
This should default to false, as it is a configuration option.
This seems like it would be better as a loop over `Object.keys()` instead of `for` loop.
I'm not a fan of the raw here - it's not a good idea to have the description be raw.
This should be indented by 2 spaces.
This is a bit confusing to me, why is it not needed anymore?
I think we should keep the old implementation and just use flatMap to get the `apply` result. The old version will still return an empty collection.
"schema" -> "ma"?
This should be 2, not 1
This variable name should probably be `nat_lvl2_drop`, as the value is a boolean.
This is a regression, but it is a regression in the current implementation. The `SqlServerIntegration` is a `QuerySpan` which has the `OperationName`, `ServiceName` and `Name` properties.
I'm not sure how to fix this test, so I don't see it being skipped in this PR
This is the only error code that we can handle, so we can just ignore it.
I think we should remove this method, and the one in `bolt-utils.rb` as well.
nit: `List<T> left = Lists.newArrayList(this);` would be more efficient.
I don't see this being used anywhere.
I think you can just pass `&alg` here
Is it worth mentioning the issue number here?
Why is this needed?
Remove this code if it's not used?
This should be `com.sun.glassfish.gmbal.ManagedObject.ManagedObject;`
I think we should keep the association here.
Is this a new thing?
This is the only place where we have `IsXNullableReturnType`
Why is this needed?
This is a breaking change, we can't do this until 2.0.
Why not just `(time_t*)&ctx->_timestamp_cache.tv_at.tv_sec`?
This should probably be a constant
I'm not sure this is a good name for a variable. It is a name that is used to identify the plugin, and not to identify the network.
Should we also add a foreign key for users and reports?
I think this is the wrong place to do this. This function should return None if there's no file to find.
nit: "Used by e.g. kubelet while creating"
I'm not sure this is needed, but I think it's better to use a different name.
This test is not testing the region API anymore, but it was testing the region endpoint.
This should be `self.connected` (or `self.connected_`).
Add `create_no_window` to the docstring.
I'm not sure if this is correct, because it will not work for non-page-streaming methods. It will only work for page streaming methods, but not all non-page-stream methods, which is why we have the same check for page streaming methods.
This should be `self.JMETER_MAJOR` instead of `3`
nit: use `const auto&`
I think this should be `count.to_i.positive?`
This should be `error ? getDataErrorComponent( _x( 'AdSense', 'Service name', 'google-site-kit' ), error, true ) : getNoDataComponent( _x( 'AdSense', 'Service name', 'google-site-kit' ), true )`
I don't think we need to use BadMethodCallException. It's not used anywhere.
This is a bit confusing to read, I would expect `setFeatureToken` to be a function, but it's a function, not a function.
I'm not sure we want to add this here as it is not a destination node.
I'm not sure why you moved the import from the `time` module to `tenacity`. It's not related to this PR.
This is a bug fix, right?
This should probably have a class
Should we log this error too? I don't see it in the logs, and it's not clear what the difference is between the two
I'm not sure this is the right fix. The `Trace` is a nested type and the `InternalContext` is a `Context`. I think this should be `Trace.Internal` and the rest of the changes should be reverted.
Please don't add these.
I'm not sure if this is needed.
This is a bit too big, we can't have more than 255 runtime IDs. We can have a max of 255 runtime ID.
Should be `:prohibits` (capitalize `:`)
I don't think this is used anywhere?
I would suggest to use `QUIC_GO_LOG_LEVEL_*` instead of `QUIC_GO_LOG_LEVEL`
This will be a breaking change, right ?
I don't think this is a good test. It's testing that the bucket doesn't have attributes. I think we should test for the case where the bucket is created with a different fingerprint and the bucket is not.
I think this should be a `Set`
I don't think this works. The point is not the center of the window.
Should we also check for the maxTransferMode == Cautious case here? I'm thinking of a case when the user has a limit on the transfer size and they have a pending transfer.
I think we should add a new scope to the `oidc.ScopeOfflineAccess` scope.
This is not needed, as we are checking that the proposal has been successfully approved.
This is a weird alias.
I'm not sure about this one. It seems like the `dept` field should be the same for both queries?
This is a bit of a hack to make the description more generic. I'm not sure if this is a problem or not.
This is a little bit hacky. We can't use `instance_exec`, because it's a bit more complex than it should be.
I think we can remove this dependency now.
Shouldn't this be CoreTags.Environment?
I think we can add a case with invalid voucher name
I think we should just use the default behavior of this method. If someone sets the `preserve_host_output` option, they should be able to override it.
I'm not sure about the `axe.utils.getNodeAttributes` call. The `getNodeAttributes` call should already be doing this, so it should be fine.
This can be null.
I think we should remove these lines.
This seems to be a bit of a hack. I'm not sure if this is the best way to handle this, but I think we should be able to avoid this.
Please avoid reformattings like this.
Shouldn't we also add `allowedPostRequest(req)` to the `allowedMethods` map?
I think we should add `@Nullable` to the return value of the method.

Style/RedundantSelf: Redundant self detected.
This could also be `applicationNameEnabled`.
I would prefer to see this constant defined in `actor.h` instead.
I'm not sure if we need this TODO. We could add the gas limit to the miner.
I think it's better to do `typeof payload === 'string' && payload.length == 20` here

`listen_count` is not initialized to anything?
This is the only place we create the `git-daemon-export-ok` file. We should just create it in `getRepositoriesByFork` and use that instead.
nit: `this.ieService = service;`
nit: "if it belongs to an IPVS connection"
I think this is a bug
I'm not sure if we want to change this, or if we should just remove the field from the struct and just set it to the relay address.
This should be `config.getThanosBlockNumber() + 1`, right?
I think this is a good idea, but I think we should add a `:reason` param to the `Cancellation` model.
File is not `goimports`-ed (from `goimports`)
I don't think we need to include the snippet tag here. The example is already in the snippet tag.
This test doesn't seem to be testing anything.
I'm not sure if this is a good idea, as the version is now in the release.
Typo in the method name: `createFlexibleConfigWithAccountPermissioningDisabledShouldReturnEmpty` -> `createFlexibleConfigWithAccountPermissioningDisabledShouldReturnEmpty`
NIT: unnecessary change

This is not used.
This is a little bit confusing, since we're adding a new `trust` method to the peer tracker.
This is unused.
I'm not sure about this one. The event is dispatched by the `CartEvent` and it's not the same as the one from the `CartItemEvent`.
This should be `MainMenuItem[]`.
This seems like it could be a separate PR
Why is this public now?
nit: remove extra new line
I think we should do this in a separate PR, but I'm not sure if we want to do it in this PR.
I think this should return `volumeStatusUnknown`
I don't think we need this. We can just use the regex in the client code.
I think you should use the new `replace=True` argument here.
I'm wondering if this should just be `bdghjlmnpqrstvwxyz0123456789abcdefghijklmnopqrstuvwxyz`
Why did you remove this?
This should be a warning.
This property is not needed.
I'm not sure this is correct. The group is a string, so the message is a `user` message.
Shouldn't it be set to null by default?
Layout/TrailingBlankLines: Final newline missing.
This is not needed, as the timestamp is set by the `record_created` method.
Why do we have this?
This should be `FAILED_TO_LOAD`.
@jancborchardt I am not sure why we need to change the `'use strict'` to `"use strict"`
Should this be `PREF_QUEUE_ADD_TO_BACK`?
I think this needs to be `@counter = counter`
I think we should remove this line.
Should this be in `TracerSettings` as well?
This is not necessary.
This is not needed anymore
Add a description of the problem.
I'm not sure if we should use a character separator here, or just use the character `\u2026`.
This is not a problem, but I don't think we should freeze the error array.

I think we can remove the `db capacity` part here.
Can we make this a list of the prefix names?
I don't think this is necessary anymore
This is a change in behaviour. Previously it was including the `stdwx.h` header file. Now it's including `wx/` header file. Is this intended?
This change seems unnecessary.
I don't think we should change the logic here.
I think we should also add `DecimalType` to the import list
I don't think we need to create this method. We can just call it directly.
This is the fix
This will set the device to `0`, but not `1`, is it expected?
Why not just "rawCode(multi(1), line(2), block(33))"?
This should probably be `if precision is not None or isinstance(value, str)`
I think we need a check here to make sure the contractAddress is not empty.
I think you should use `setupLog.Fatalf` here.
This should probably be in a `.yml`
This is not a good idea. The event type is not a string and we should not convert it to the enum.
Please move this to the top with the other github.com/iotexproject/iotex-core imports.
This is not correct. It's a failure of a delete operation. It's not a run operation.
nit: can we call it `metricsConfig`?
I'm wondering if this is the right place to check for the skip. I think it should be done before the loop.
This should go into the standard library
This will be called when the task is added to the state.
Why not `db_name_root`?
I don't think this is the right place to do this. This is the only place we need to pass the CFLAGS env var.
I don't think this is correct. We need to set the name of the window.
This should be `dashboard.header`
`self.assertListEqual` will fail on `None` value.
I think this should be a `const`.
Why was this removed?
Can you add a docstring for this test?
I'm not sure if this is the right place to do it. I think it should be done at the client level.
I think this should be `{number|string|string|undefined}` instead.
Shouldn't this be `static_cast<uint32_t>(m_renderPass_dependencies.size())`?
Can you add a TODO to remove this when dropping support for QUIC 36? I think we'll need to support this in QUIC 36 soon.
I think we can use the `value` property here instead of the event.target.value.
This was a duplicate of `exporterActiveFlowExportTimeout` and `exporterIdleFlowExportTimeout`
This should probably be `scripts.ObserveScripts`. Also, should probably call `scripts.ObserveScripts` before the `err` check.
I'm not sure this is correct. If `name` is `(tuple, type(None)),` then it should not be an `instance of (tuple, type(None))`.
Why do we need to change this?
I don't think this is the right place to do the default. The user should always be able to use the FPU instructions.
I think this should be `bytes_to_str`
I think this was a bug. The hostname command should output `instance`
This is the only line that should be here, right?
This is not a good idea to add new dependencies to a command. We need to find a better way to create the structure.
Is this needed?
nit, but we usually put a blank line before the license.
This is not needed.
Final newline missing.
I'm not sure what's this for?
I'm not sure if we want to change this.
I think this needs to be `oauth2`
I think we should return an error if the claims is nil.
I think this should be called `ReclaimRequeuePurge`
Should be `test.ethereum.state.london.eips`.
I'm not sure if this is a good change. It's not a flag, it is a flag that can be changed by the user.
Why is it necessary?
I'm not sure if this is correct. I think the file permissions are set to be 0600 by default, so this is not correct.
This is not a good idea, it's not the same as the previous one. Brave is the default
I think it is better to have this function be called from `get_ymm_caller_saved` instead of `get_ymm_caller`.
I think we should use `i18n` instead of `t` here.
This was a bug, as `save!` will reload the model and return.
I think we can get rid of this function now
I don't think you need to set it to false here, since the settings menu is always visible.
nit: move the new import to the bottom
This is a bit confusing. What about something like `/usr/local`?
This should be a separate function.
I think we need to add the same options for all exporters.
Is it worth mentioning that this error code is returned by a MD write operation? I think that would help users understand what's going on here.
I don't think this is used anywhere.
Why not use `DeviceData`?
Why is it needed?
This is not needed anymore.
This is the only change that should have been made. The rest is just formatting.
This is a bit of an odd place to put it, but I'm not sure how to do it. If we want to keep this, I would suggest to put this logic in `get_all` instead of `get_all`.
nit: `zpoolListRejectCounter` sounds a bit like a counter, maybe `zpoolListRejectCounter`?
this method is not used, so you can remove it
I'm not sure if we should do a find_by in the view. If the user is not authorized to view the token, then it's probably a bad idea to do a search. I think we should do a search in the view instead.
This method should be private.
This is a bit of an anti-pattern. I would prefer if we had `stack_widget` as a class attribute and then we could pass in a function like `stack_widget.setFocus` to `StackWidget`.
I think we should rename this to `goAzureMapping`.
This should probably be a flag instead of a flag.
I don't think it's a good name. Maybe something like `PartialResponse`?
I'm wondering why this is needed?
Should we add this to the docs/docs/exe.rst?
why do you remove the `bool, bool`?
I think this change is not necessary.
This is a bit weird. Why are you removing it?
This is a BC break.
This should be `specs-go` now.
This is a bit of a nitpick, but I'd rather have this be a switch statement instead of an if/else block.
This is the name of the app that is being used in the manifest.
I'm not sure if this is the right way to add this.
This file should be removed, since it's no longer used.
Why do you need this?
`nano::stat::type::requests` is not a stat.
I don't think this is correct, if `typeof(opts.fee) !== 'undefined'`, `opts.fee` is `undefined`.
I don't think this is the right way to do it, since the conditional will never be true on Windows, and the block is never executed
nit: `firstSyncSetsSuccessfulTime` to be more explicit
Why do we need to change `HasNoFingerprint` to `VerifyFingerprint`?
I think this import is not necessary.
nit: I think this should be called TransferTaskInfoFromBlob
Why is it not `LOG.finest(String.format("Connecting to %s and %s", publishConnection, subscribeConnection));`?
Shouldn't we return the error code here?
I think we can remove this. It's not needed.
Should this be `req.GetXattr() >= 0 || vol.GetXattr() >= 0`?
This should be done in the callback, not in the player.
I think you should be able to use `name.assign()` here instead.
I'm not sure we need this package, it's only used by the `nodecontrol` package.
This should be `findUpVirtual`.
This is the actual bug fix.
This is a bit odd, but it's not a blocker
This is the fix. `Object[]` is not a `Object` but an `Object[]`.
This should be `next`
I think it's better to move this to a new package `data/protocol`.
I think this is unused?
I don't understand the removal of this line. Why is it removed?
The `partial_name` variable is not used anymore. I think we could delete it.
I think we should be consistent in using "best" for the type.
This is a breaking change, but I'm not sure how to make it work.
nit: `a list of offsets for file blocks, if applicable, null otherwise.`
I think we should keep this as Reader.
This should probably be `peak_block_count`, right?
I think we need to make sure that the author's author is not empty, otherwise it might get lost. I think we should use `getAuthor().getEmail()` instead, as it's the author's email.
I think we need to move these to `stdlib/runtime/` instead.
I think we can remove this line
`UnsupportedOperationException` is not a subclass of `RuntimeException` so it should be fine.
Why is this change required?
This is a very bad idea. We need to make a new django-auth header.
I think this line is too long.
Remove this empty line
This should use a `CommunicartMailer` object instead.
nit: can remove these
This change seems unnecessary?
Unnecessary spacing detected.
I think we can revert the change in `sig_alg`
I don't think we want to write negative numbers here, because the user can have a number of negative values. I think we want to write `0`, and `-128`, instead of `128`.
I don't think this should be here, as it is the default.
Why is it necessary to have an extern function for this?
DAL_CHECK_DOMAIN_CON DAL_CHECK_DOMAIN_ERROR  domain_error
This file is not needed.
This is a change of functionality.
I don't think we need this, the `CertificateRequest` will be signed if the `Status` field on the `CertificateRequest` is populated.
This should be `return null;`
I'm not sure this is the right way to do this. I'm not sure how this would work.
I think this should be a separate PR.
This is a `VUID-VkGraphicsPipelineCreateInfo` error message and should be changed to `VUID-VkGraphicsPipelineCreateInfo-subpass-00757`.
I think we should also check if the closing ph is empty.
I'm wondering if this should be a method on the action, since it's only used in one place?
This is the only change in this file, right?
This is not needed. It's already true by default by default.
This is not used anywhere.
Please rename the file to `header_download_preverify.go`
This change is unnecessary.
I think we can remove `Flag` from the flags name. It will be used in the CLI as well.
This is not needed.
I think we can remove the `oldestSnapshot` method and just use `table.snapshot(table.currentSnapshot())`
This function is not used. Please remove it.
nit: `i` can be removed.
I don't think this is used anywhere, can it be removed?
This is not used.
Why is this needed?

Should we be doing the same for `script`?
This is a change that is unrelated to the PR
I'm not sure about this. I think we can't change this without a major release.
I don't think we can remove this, it's not a valid transaction, and it's a bug that we should be checking for.
I'm not sure about this, it seems that we don't support Python 3.5.
I think this should be a warning.
I think it's better to use `>=`, since we are checking the value of the BS1/BS2.
This will not delete secrets, right?
I think we should return false here, and log a warning if we fail to get the state
Should we add a check to make sure the user has the right style? (I think we do it for other panels too.)
I think this should be `user.errors[:first_name] = "Your profile is updated!"`
This is a bug fix?
Please use camelCase instead of snake_case.
I'm not sure if we need to do this. The `lastProcessedId` is not a part of the `p`, so the query is not correct. The problem is that we have the same `lastProcessedId` for each product, and we have to find all the ones for which we have the `lastProcessedId`
I'm not sure this is correct. The only thing that's needed is that the `attributePrefix+` is the same as `capabiliasedFirelands` (the `capacities` slice is the `capabiliased` slice).
`package` should be a dict, not a string.
I think we can remove the `repo` parameter here, and just use `github_client.remove_collaborator(repo, username)`.
This is not needed.
This class is not used anywhere, is it necessary?
This is the same as the parent callAction method.
This import is not needed.
This is a bit hard to read. I would just do a switch statement here, and then do `found_env_vars[:type] = found_env_vars[:is_pe]`
I think we should just rename this test to `TestBlockLister` since the test name is now `TestBlockLister`
I think you want `!variableInMap || this.getVariable(name)` here, right?
nit: `re-read into a non-finalized index` -> `re-read into the finalized index`
this is not correct. you should use `std::find_if`
I'm not sure if this is the correct fix.
I think this is a good idea, but I'm not sure if we want to panic here. If the test fails, we'll end up in a situation where the test is not running.
I don't see this used anywhere.
nit: `psb` -> `updateDeviceStatusBufferBytes`
This is a breaking change, please add `[Obsolete]` attribute
I think we can drop the `./` here.
This is not needed, we can use the fake client for this.
I think we should return `NULL` here.

Why do we need the change of type `AttachmentStateChange`? Is `change.Attachment` always going to have a `AttachmentARN`?
This is a little confusing, since the report URL is different for each of the reports. Maybe `analyticsOverviewUrl`?
This is a little bit of a nit, but I think it would be better to have a `description` on this parameter.
I think we need to check for `/` here as well.
This is the only change in this file.
This should not be necessary.
This is now handled by the `case yarpcerrors.CodeInternal` case.
This should be `CaseInsensitiveMap.of(fields.get("id")).asMap()`
This is a bit of a misnomer. The slot should be registered if the value is not registered, and if the slot is expected to be registered.
`std::cerr` is probably better than `std::cout` here.
This is not the same as the old code.
Shouldn't this be a pointer type?
I'm not sure if we should do it this way, I'm thinking we might want to add a `scName: ""` annotation to the `volume.Spec` to indicate that it's a storage class, and then we can set that in the `Volume` struct. This would allow for the `storageClass` field to be set on the volume spec and then the `StorageClass` field would be set on the volume spec. This would allow the user to override the storage class if they want to.
Why not use `*net.IPNet` here?
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
F401 'iris.experimental.equalise_cubes.equalise_attributes' imported but unused
We can just return here.
This test is a little tricky, but it is not very robust. The group authorization should be tested in a more robust way.
This is a little weird. Why not just `.where(plan: self, access: Role.access_values_for(:creator))`?
This is the main change.
This should be done in the `batchChanges` call below, otherwise it's not called for all ops.
This is a pretty big error. I'd suggest using a `errors.Wrap` method.
I would suggest to use the same endpoint as the delete endpoint, since the delete operation will not be idempotent.
I don't think this should be a parameter.
Why are we importing this?
This class should be translatable.
This is not a corev1, it is just a label. I would use `corev1beta1` instead
I'm not sure this will work. The `get_zmm_caller_saved()` function is only called if `ZMM_ENABLED()` is false, so this is not guaranteed to be called.
Shouldn't the link be updated here as well?
`if (version != null)` is enough.
I think this is not needed.
nit: remove this empty line
I think this should be `copilot-task` instead of the default.
I'm wondering if this is the right place for this logic. It seems like we are handling the same logic for both input/change events.
I think we should keep the current year, so that we can update it when the release is released, and we don't need to worry about the new year.
I would suggest to add a static function to `util.h` that returns a boolean value.
This should be a method on the config.
Please add a blank line above this.
I think we can remove this. We don't need it in the Baseline.
I think we should not do this. The number of teams will be set by default on all architectures, so we should not have this.
I think it should still be modelzoo, right?
This is the same as above. I don't think we should be doing this.
I don't think this is necessary
I think we should be checking for `os.IsNotExist(err)`. If `err` is non-nil then `f` won't be closed.
I don't see any reason for this change, is it just a stylistic change?
Why is this necessary?
I think this is not necessary. We can just use `map[string]struct{}`
This is the wrong lock.
I think this should be a `Set` instead of a `Set`?
This should be moved to `kinto.core.storage` package.
Why is this needed?
nit: `if (it.endBound_.rel_ != RelationType::kEQRel)` is enough.
I think we should set the ChainID in the genesis config instead of here.
This is a bit confusing, it's not the number of dropped items.
We should probably change this to `29.1`.
I think this is unused
I'm not sure if this is the right place to set the `url` and `jwt` properties. I think we should be setting them in the constructor instead.
This seems like a weird place to put this. Can we move it to the note-viewer-page module?
nit: import ordering
Should be 2012-2018
I don't think you need to check the error here, as you can get a nil value.
I don't think we need to change these labels.
I don't see a good reason to use a string here. It's only used in one place and is used in a few other places. I think it would be cleaner to just use an enum instead.
nit: I'd suggest using the term "import" instead of "Import data from fd %i" to make it more clear.
I'm a little confused here - why do we need to default to the directory name if we are already in the `vagrant` root?
I think this should be in `Trace` namespace, not `Datadog`
nit: can you rename to matchPriority?
I think the original is better, but it's not clear what this change is about.
I'm not a fan of using `promisify` in a module. Can we just make it a regular function and call it from `createFile`?
This should be `//tools/go_buildid_replacer` (and similar for other tool names).
I think it's better to use `networks.btc.testnet` here.
I'm not sure if we need to use ioutil here. If we don't, we should remove the import.
This is a little confusing. The function is not actually sending a frame, but rather sending a callback to the resource.
This should be set to `_target = _target.dup` so we don't need to set `new_record` to `false` in the callback.
Why is it necessary to import `torch` here and below?
Why not just use the `*string`?
This will be a breaking change. I think we can leave it as is.
I think we should raise a `NoMethodError` here, as it's a `403 Not Found`
I think we should use the same pattern as in the other blockchain.
I think this should be `cache.ErrNotImplemented`?
This should be nullable
I'm not sure this is correct, I think the --ponynoscale should be the equivalent of --minthreads. The other changes are just a refactor. The --minthreads is the equivalent of the --ponyscale.
I'm not sure if this is the best place to put this, but it's probably better to have this in `pkg/address`
I don't think this is necessary, since the `duplicate-id` test is already doing the same thing.
This should be `VkCommandBufferObj::VK_COMMAND_BUFFER_TYPE_COMMAND_BUFFER_BEGIN_INFO`
I think this is the right place to do this, but I think it's fine for now.
I would prefer if you could use the `assertIsInstance` helper.
I think this is the only one that needs to be added. I don't think there's a need for this, but I think we should be able to remove this.
This should probably be `icmpPkt_with_code`
This is not a timeout, it is a grace period.
Why not use `favicon`?
I don't think this should be registered here. This should be in the `ArchivalMetadataProvider` instead.
Why do we need to multiply by `swarm.ChunkSize`?
`axe.commons.text.sanitize` is a utility function that can be used in other places.
This is a bug fix, as it's not a part of the API.
Should we check if it's a valid yaml?
This should be in the `setOnLibraryLoaded` callback.
This will be true only if the object is not published, right?
This should be `ByteBufUtil.getBytes(encodedBuf.nioBuffer())`
I think this is the right place to do it. I think we should just remove the `if (IsTracerInitialized)` block.
This is a new error code, right? Shouldn't this be `OFFCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST`?
This is not a vectorized expression.
This is an unrelated change?
I think you need to delete the function before you create the function.
I would suggest using the `rocksdb_compression_per_level` option to specify a per level compression algorithm.
I think we should only do this if `skewFromParent != null`?
This should be renamed to `mock_entry`
I'm not sure if this is a good idea, as it would mean that we would have a `nil` error for providers that don't support the query, but we wouldn't have a provider that supports the query.
I think this is not correct. It should be `codechecker_common.Report.type`.
I think this is a good change. It will be better to have `i` as a class.
Why are we waiting for 10 seconds?
Can we remove this line?
nit: I think it'd be nice to have a `map[string]struct{}` type that can hold both paths and paths in a single map. Then you could just use `map[MetadataRevision]struct{}` instead of `nil->non-nil` and `false->nil` to simplify this code a bit.
Is this necessary? The monitor is created when the backend is destroyed.
This is not needed.
Use the new Ruby 1.9 hash syntax.
I think we should set the value of `wlr_xwayland->display_name` to something like `NULL` to indicate it's not a valid name.

Style/ConditionalAssignment: Use the return of the conditional for variable assignment and comparison.
I think we can remove this line.
This should be `File.Exists(projectJsonPath)` to be more efficient.
I don't see why we should be doing this, but it is a bit confusing. If `system()` returns false, then `system()` returns true.
This is a little hacky. We have a separate `wlr_input_device_destroy()` function that does this for us, but I don't think we need it. I'd rather move the `wlr_input_device_tablet_tool_destroy()` to `wlr_input_device_destroy()`, since we don't need to call it here.
I'm guessing it is not.
This should be `type === 'select'`
This is the only change in this PR. The rest are just cleanups.
This is not necessary, as it's already done in the base class
This example should have a `_` at the end of the name.
I think this is the wrong way to do this - it's not the same as the `MaxExportBatchSize` which is the default value. It should be the same as the `MaxSpinCount`, and it should default to 50000.
This should be `positive(argName, number, "must be greater than 0")`
I don't think we need this, we already have the user in the proposal table.
I think we can just say that this is the shortcut for `Keys#COMMAND`.
I'm not sure if we want to add this field to bastion. I think it should be a separate object that is shared across all nodes.
This should probably be a return value
This test should be renamed to reflect that it works with a different payer than `default`.
Should this be a pointer? If not, I would expect `aws.CredentialsSecretRef.Name` to be non-empty.
Why this change?
Why this change?
This is not necessary. The rule value should be set only if it exists.
This is the wrong class. The exception is not deprecated.
I think we can remove the `NotSetError` from this class and the other `Exception`s.
I don't think we need to set the guid here. The guid should be the same as the one from the writer_.
Why do these need to exist? They don't seem to be used.
I think we should keep the empty slice here.
This is the only change.
I think this should be `final`?
I think this is the wrong place to put this code. The `String` class already has a `valid_encoding?` and `encoding` method that does exactly the same thing.
I think this should be `writeable` as it's not really used. I don't know if we want to change the default in the future.
I don't think we should be doing this here. We're already in a `#dup` method so we should not have to worry about this being a public method.
I don't think this is correct. The version is the version of the execution.
I think we can use `!==` for this
I don't know why we need to change this.
I think this is the only place we need this check.
I don't think this is correct. We should not sync the pod entry if the object is already in use. The pod should be created and deleted when it is deleted.
I'm not sure what `delete_if` is here, but it's not clear from the method signature.
I think we should keep the default to `1 * time.Minute` to avoid the potential flakiness.

I think this should be `/se/grid/newsessionqueuer/queue`, not `/se/grid/newsessionqueue`, as the endpoint is `/se/grid/newsessionqueue`. The `/se/grid/newsessionqueue` is the path to the new session queue.
Why did you change the order?
This should be `is_editable_object`
I think this is a good change. I think the deprecation warning needs to be removed. The deprecation warning is a good change.
I'm not sure about this, but I think we should use `flux_cmd_arg (flux_subprocess_get_cmd (p), 1);` here.
Why is this 10 minutes?
I think we need to change the error message to "failed to put data"
I think we should use the `@faker` version here.
This seems like it should be a pointer to an empty array.
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
Why do you need to intern here?
I think it would be better to return the table status instead of a status.
I think this should be `VnlWindowFunction`.
I think it's more clear to say "The folder was already added"
I don't think we need to include the `rdmolops` here.
I think this should be `pxz.wait()`
I'm a bit confused about the reason for this change. Why is it necessary now?
I think we can remove the `this.sort` method and use `this.sort` in the `describe`
Why is this necessary? It seems like it wouldn't be used anywhere.
This is a bug fix for #3040, but I think this should be a separate commit
This is a bit weird. I think it would be more clear if we didn't call this method before `rewrite(reader)`
Why is this cast needed?
I think this should be `if (str.StartsWith(@"Q1=", StringComparison.OrdinalIgnoreCase))`
I think we should add this condition only when `node_l->peers.not_a_peer` returns true. If `preconfigured_peer_a` is false, it means the peer has not been preconfigured yet, but it is a local peer.
I think this should be 2010
Please remove this extra line.
Should this be done before the lock is unlocked?
This should not be here.
This should probably be `str(source[0][:-3] + ".html")` to make sure the `.html` gets appended to the end.
I think we need to use `\"\"\"` here, as it is a single character.
Why do we need this?
Why do we need to check if `applyMode` is not empty?
Is there a way to set this on the command line instead?
I don't think this is needed, we can just check if `HTTPConfig` is nil.
I'm not sure if this is the right name, but I think `IsInjected` is a little misleading. It's not a method of `SpanContext`.
This should be `apierrors`, right?
I think this is a good change, but I think it would be better if we could use `if (!data && typeof(data) === 'undefined')`
`$class` could be null here
I don't think this is the right way to do it. It's not a set, but a list.
`nextPrefix` -> `nextPrefixBytes` ?
I think you can remove the if statement here.
This import should be in alphabetical order.
This change is unrelated, but the rest of the PR is just cleaning up the struct fields
I think we can remove `None` from the API and keep it as is.
Should this error be more descriptive? Maybe `cannot be set in SearchAttributes: %s attribute` or something?
Why not use BoolForString?
This is not the right message. It's about the data being deleted, not about deleting the space. The message is not accurate.
This test is a duplicate of `test_spec_helper.rb`.
Is there a reason we need this change?
This is a bit hacky, but it's not a blocker for now
This is not needed.
This is a new type, but I'm not sure it is correct. It is not a materialization.
This is a bit weird, but it's not a big issue

Why is this needed?
Why do you change the default value here?
Why is this include needed?
nit: missing copyright header.
This should be `state.Account`
nit: `partsOnHost_` -> `partsOnHost`

Isotope should be set to zero when it's empty.
Why is it off?
nit: maybe we should add a `@since` here?
I think this should still be a warning. It's not really an error, but a warning.
Why is this changed?
Can we add a `GET` for the `bzz-tag` endpoint too?
This function should return `model.StageStatus_STAGE_FAILURE`
I would suggest using the same naming convention for the file.
This seems like an unrelated change, could you please restore it to its original state?
This is a bit confusing, since it's the same class as the other `MessagePack` namespace, but the same class name. I think we should rename the class to be `MessagePack.Extensions` or something like that.
This is the only change.
This is a little weird. I would have expected the `.BuildDef` to be in the base path and not in the base path. I'd expect `IsABuildFile` to return true if the base path is not a file.
Why remove this?
This should probably be a pointer, and the `omitempty` should be `// +optional`
I'm not sure if it's a good idea to add a field for the region. I think we should add a `region` field to the resource. We could add the `additionalTags` field and then add a `region` field to the `resource` field.
This test is flaky. We need to fix it. We can fix the issue in a separate PR.
I don't think we need the `proposal_link_text` translation.
I think this is a good time to move to the `before` block, but I don't think this is the best way to do this.
This should be an interface.
I'm wondering why this is not `repo.getClassName()`.
This is a little weird to me. I'd rather see a `isMetricAttributeDisabled()` method that takes in a set of metric attributes. Then we could just call `disabledMetricAttributes.contains(...)` and it would be a bit more explicit.
This should be in a `const`
This was a bug.
I think we can use `uplink.UserAgent("rclone")` here instead.
This is not the same as `prob = torch.clamp(prob, min=1e-12, max=1e-12)`
This is a breaking change for anyone who is using this class and is using this constructor.
This should be `parent_pending_link.next`, right?
This should be reverted.
Why did we change this?
I think this is the only real change in this file.
I'm not sure this is the correct way to register the module.
This file should be named `errors.js` to match the file name.
I think we need to add `addEvent(String name);`
Why did we change the type of the service here ?
`stakingV2` was renamed to `stakingProto`, which is now a pointer.
I think we should use a different name for the query ID, like "shardQueryId" or something like that
I think this is a typo
This is a bit confusing. It seems like it should be `True` or `False`.
I think this test is not correct. The `binaryAnnotations` method should return the same set of endpoints, but the `getAllServiceNames` method should return the same set of endpoints as `getAllServiceNames`
Why is this 7? Is it because we have a lot of completed exercises? If not, I think it would be good to have some unit tests.
I think this is not needed anymore
I think it's better to use the `set.property()`, not the hard coded string.
I'm not sure why this was changed.
I'm not sure if we need to do this here. The `merge` will be a no-op.
Nitpick: `\S+( ,)` is redundant.
I think you should keep this test and add `# pragma: no cover`
I don't think we should includeComputed in the doc string.
This should be `self.get('target')`, not `self.parent().removeAttribute('target')`.
I think we should just log the error and continue.
This is not a chromium url, it's a log url
This should not be in this PR.
I think we should make this a `String` and use `Optional` to indicate that it's not set by default.
This is a bit confusing. Why do we need to change this?
This is a bit hacky, but it's fine for now.
This is the only change I'm not sure about - it's a bit confusing that the class name has changed in the middle of the class definition, but the class name is not. Is there any other reason to change it?
This is the actual fix for this. We don't want the `PRIV_DISTRIBUTE_RAW_TRANSACTION` RPC method to be decorated if the `privacyParameters` is not present. The `disable` method is only for the `disable` case. The `disabled` method should be removed.
I think you should add the `getuid()` here.
I'm not sure we should use the same name for these templates, as they're used in multiple locations. I think it's fine for now, but we should consider making it a bit more explicit.
I think this is not used anywhere?
I don't understand this class
I think this interface should be in `location.go`
I'm a bit confused by this. I thought that we are trying to avoid adding the option if there is already an option in the container?
I'm not sure if this should be a warning.
This should use the table identifier.
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.<br>Space inside { missing.<br>Space inside } missing.
Why is this necessary?
Is there a reason to have a global variable here instead of using the `notebook_context` attribute directly in the `plot` function?
Why is this removed?
This function is not used anywhere.
This is not correct. ConsensusV17 is used for the next consensus protocol.
This was a bug.
@jlsherrill I think this should be `self.vcap_data['application_uris'].length.min_by { |a| a.length > 0 }`
This should be named PerfTimerPerf
I think it's better to use `File.Exists` instead of try/catch here
Shouldn't the timeout be configurable?
Can we use the same name as the flow file?
I think this should be final
This is a breaking change. I'm not sure we want to change this API in the future.
This should be `ip6 = ip6.next()`
This should be `bool` not `bool`, right?
I think this is going to be the same output as in `build-system/bin/generate-rules.sh`. I think you should just use `output` directly instead of `target.Label.PackageName`
Why did you remove this assertion?
This was causing the panic in the test suite.
I'm not sure if this is the right way to fix this, but I'm not sure how to fix it. I think it would be best if we just changed the `sw_vers` to `-productVersion 2>/dev/null` and `-productVersion 2>/dev/null` to `-productVersion 2>/dev/null`. I think the `-productVersion 2>/dev/null` is the right way to fix it.
I don't think we need to add a trait here, we can just add a trait in the factory.
I think it is better to use `ScoreMode.TOP_DOCS_ONLY_SCORES` instead of `ScoreMode.TOP_SCORES`
This is not used anywhere.
I think this should be `!$params && !$source`.
I think it is better to initialize the member variables in the constructor.
Why is this needed?
This is a breaking change, please revert this change.
I'm not sure this is the best place to do this. We should not be modifying the `request` object.
This is a bug fix. The string is being printed twice in a row, once in the output and once in `output`
why not just `guid: 'model'` ?
Should we rename the method to GetMetricPointsAccessor?
Shouldn't this be `violation.get('rule_name', '')`?
I think you forgot to remove this line.
This should probably be `wal_checkpoint` (or `wal_checkpoint_full` if it's not too long)
I think it's better to change the name of this variable to `kLightGBMModelVersion` to match the name in the file.
This is not needed since `deliveries.first` is already a `deliveries` hash.
I don't think we need this, as we are already using the dockerclient.LoggingDriver.

This is not the correct name, it should be `goss`
This is the only place that I can see where I can see this.
This should be `@property` instead of `@return`
I don't think we need this import.
This is not a breaking change. I would prefer the name of the setting to reflect its new value.
This change is not related to the issue.
I don't see any reason for this to not be `[AllowPartiallyTrustedCallers]`
nit: I'd put these imports in the block above

I don't think this line is needed.
nit: maybe we should use `size_t` instead of `std::uint64_t` here?
Why is this removed?
This is the snippet start, not the snippet end.
nit: `DisableAutoObservabilityMiddleware disables the observability middleware automatically`
I don't see where this is used?
This is not the right way to do this. This is the way to set the search scope.
This seems to be the only change in behavior here. Previously we would run the `mdServer.RefreshAuthToken` on the background, now it will run on all the servers, which is not ideal.
This is not correct. The user name can contain `:`
This is not public, right?
I think it should be 'gebied' instead of 'gebied is reeds'
I don't think you need this import.
nit: `Build individual packages with hydrated RPs.`
This is a bit of a nitpick, but I think the previous version would be clearer if it said `1 < max_retention`, since the second part of the comparison is a lesser comparison than the first.
I think this is not needed, as the property is set to the default value
This change is unrelated, but it seems to me that we should have a separate commit for it.
Should we add a `Status: string(in.Status.ChaosStatus.Experiment.Status)`?
nit: import order
This is the wrong place to put it. It should be in the ctor.
I think we can remove this.
`arg.replace('{}', self._filename)` is equivalent to `arg`
I think this should be configurable.
I think we can use `UPDATE principal SET system_suspended=1 WHERE principal_id=?` instead of `UPDATE principal SET system_suspended=? WHERE principal_id=?` to avoid having to update all the rows.
This method name is misleading. It is not checking the sender nonce, but the nonce is the sender nonce.
This is the only change that should be reverted.
I would prefer to have this as a getter, but not sure if there are other usages
@jonsequitur I don't think this is the correct way to upgrade from a release to a release.
I would rename this method to something like `isAnyResourceNameParameter` to make it clear that this is checking for any resource name.
I'm not sure if it is the right place for this. I think we should be able to get the highest priority fee per gas, and then get the price from there.
This is a good change, but we should log this as a debug message
I think it would be better to have this as a property of the container, and then we can just use the container to check if it is Docker.
Why is it necessary to change the value of isClosed to FALSE?
I don't understand this change.
I think this should just be `Find()`
I think we could move this to `localstack.services.common` since it's used only in this file
I think we need to have a better name here, like IMvxMainThreadAsyncDispatcher.
Why not just pass in the whole `roundCtx`?
This is not used.
This should be a vector size.
I don't think we need to set the CreatorPubKey here, since it is already set by the LoadOrCreateAccountState call below.
Should we also add `:as => [:communities, :site]` here?
I think you can just use `{{.}}`.
I think this test is no longer relevant? I don't think it's testing anything.
`not os.path.exists(folder)` is more pythonic
I don't think we should hardcode a revision here. The revision should be a KIE config property.
I'm not sure this should be included here
Why remove weight_?
I don't think this is needed.
This should use `chown` as well
We need to update the default addons in the migration guide.
This file should be deleted.
I'm not sure if this is correct. If the size is not fixed up, the trace is still in a stub.
This is not correct, it should be `dt.microsec += kv.second.getInt() / 1000;`
nit: `auth` is misspelled
I think we need to check the error here and set the error accordingly, otherwise we'll get a nil pointer error.
This is not needed, as it was already in the parent class
I think this is the only place where the `params_for_search` is called. Maybe it should be removed?
This log is a bit confusing, I would say: "preparing ovs bridge"
I think this should be done in `getCategoryId` method.
This should be nullable
This should probably just be renamed to `manager`.
These fields are no longer used
Shouldn't this be `IValueFormatter.Default`?
axis: int = 1
I'm not sure why we are using `_internal/gapi-cloud-osconfig-go/cloud/google/osconfig/v1alpha1` as a name here. It's just the `osconfigpb`.
I think this one is useful, since the task will be deleted when the task is killed.
I don't think you need this if statement, as you already have the null check for span.Context.Origin in the if statement above.
nit: move to the first import block
This should be in `DispatchMethod.java`
I think we should use the same timeout for the `rimraf` call, as we are trying to avoid timeouts.
This should be a debug level message
This is not correct. If s is nil, it means that the events system is not running. It should return true if it is running.
I'm not sure this is correct. `join` already escapes it, so it should not be needed.
Why this change?
I think we can remove the freq here
I think we should add a method `setCurrencyData()` that sets the default value for the min fraction and rounding type, and then we can reuse it here
I think this should be `freeBytes - tracker.usedResources()`, since `usedResources` is a function.
I think we can use a `std::lock_guard` here to protect the entire thing.
Please remove this blank line.
This is a change in the behaviour. The test should be able to run in parallel with the previous test.
Why do we need to remove this interface?
I don't think this is necessary.
This is a bug fix, but the original code was not correct
I think this will break if the user has `no_docstring_rgx` as an empty string, right?
This should be `user-read-recently-played-user-read-currently-playing`
This test is now a duplicate of the one in `lib/utils/test-mongo-driver.test.js`.
Should this also be `ERR_IO_ERROR`?
Why not `link_format`?
I think it's better to keep this log line.
Why not using a mock here?
I think we should remove this component as well.
Why is this public?
This should be `dataset.data`.
Can we add a note that this is ignored if the Server URL is using HTTPS protocol?
I think this should be a boolean param, not a doc string.
I think it would be good to mention that the date will be shared when uploading/downloading files.
Why not use the default value?
I'm not sure this is correct, we should be using the master index here.
nit: can you add a check for the new state?
Align `uniq` with `joins` on line 5.
This is a counter that can be used to track the number of errors in case of an error. It should be incremented by the number of errors in this loop.
I don't think this is the right way to do it, it will cause the `Thread#current` method to be called twice.

I don't think we should be using `global` here.
This is the fix. We should show only the first item, and not the last one
This should be moved into playerLogout.
I don't think you need the extra import.
I don't think we want this change
I don't think this is correct. If we remove a key from the cache it will not be added to the copy, right? I think this is a bug in the code.
This is a little confusing, as it is not a condition that is applied to the payment channel.
I'm not really sure how to test this, as the request is not saved.
This should be removed.
This should be `private`
This is the main change.
I think this is not necessary anymore
Should we check if the `pendingConfiguration.remoteHost` is a valid host name? If so, then I'd prefer to use the same logic as `pendingRequest.configuration.fixUpHost()`, since it's a bit confusing.
This was a bug.
I'm curious why we are changing this.
I don't think this is the right place to show the toast, it's just a dialog that shows the error.
Can you please add the provider name as a const?
I don't think you need to use a variable here, you can use `exc_info.value`
I think the route name should be `/stamps/topup/{id}/{amount}/stewardship`.
I think this is the wrong place for this function. This function is only used once, and it is only called once.
I don't know if this is a typo, but it's a typo that should be fixed in a separate pr.
I'm wondering whether it's better to move this assignment to the beginning of this function. It's a bit confusing that we are assigning two values to `term_`, and then assigning `proposedTerm_` to `lastLogTerm_`.
I'm a little worried this will be too big for the benchmark, since it's a lot of memory usage, but it's not a big deal
This is not true, it should only be attached to the Handle interface.
This is not correct. The array should be a copy of the array.
@jlsherrill I'm wondering if it would make sense to add a new column `default: 'Workshops'` to the workshops schema. That way, if we ever add more resources, we can remove this column.
This should be `when /linux/`
This class is not necessary
I think we can just pass `null` here instead of `null`
I think this will cause a deadlock if the new storage is not reorged, because we are not resetting the tombstone. We need to clear it before we update the value.
I don't think we should be using `timeout` here.
I think this is not necessary.
This should be `REDIS_NAMESPACE_PREFIX`
This is a breaking change. We cannot add new dataverse types to the end of a public API
This method should not be necessary, as it's already handled by the `Alert` class.
I'm curious, why do we need to keep this?
I would call it `IsInsecureTLS` or something like that, because this is the only thing that makes me think we should use TLS in our codebase
This should be in the `go:build` block
I'm not a fan of the `not` in this test. It's not clear what's going on here.
add a `:param` section
Why is this needed?
This is the logger that should be used for the collection strategy.
I don't think we need the `<` here.
nit: remove empty line
Should we have a unique index on `project_uuid`?
This is the default value for the `NodeAddr` field in the `Explorer` struct.
Please remove this empty line.
Why is it a bool? It seems like it should be an enum.
@jasonLaster This is a fix for the problem with the `pin-mongos` suite.
I think this should be `-std=c++11` instead of `-std=c++11` (which is the default).
I'm not sure this is the best way to do it. I think it should be `randn(self.chars, size)`.
This should be `const { JSDOM } = require('jsdom');`.
I think we should add `mainnet` as the parameter name.
nit: this is a little hard to follow, can you extract it into a function?
This example is not used. Please remove.
This is a breaking change. Please add an overload to this property.
I think we should also update `CstorVolumeRef`, `CstorVolumeSpec` and `CstorVolumeSpec`
This should be `.gcp.project`
This is a bit of a nit, but I'd probably just inline the full table name.
This should probably be `Build information (%s)...`
I think this should be `return !checkHandshake();`.
This is a wrong change.
I think we should use the `encoding/binary` package instead of `bytes`
File is not `goimports`-ed (from `goimports`)
This is a bit too complicated to understand, maybe we can just use a constant for this?
I'm not sure we want to log this. I think we can remove this.
Why remove the `browser.web0s || options.supportsDts` condition?
I don't see this check being performed.
I don't think we need a new property for this. The index is cleared when the user changes the site and records type, so it's only needed when the site is selected.
why not just remove this line?
I don't think you need to define the key here.
This is the same as the method above, can we extract it?
I think this check should be moved to the beginning of this method. The input is not read from this method.
I don't think we want to expose these methods. They are just a wrapper around the hypervisor.
I'm not sure if we need a `setuptools>=12` here, since it's a requirement of `pbr`.
I think we can just rename `fakeConnectionManager` to `connectionManager` now
I'm not sure about this one. It looks like it's not necessary.
nit: `return m.IsZero()`
This is the only place where we call `Add` on the client. We could move it to `Add` and have the client call it directly.
I think the patch url was wrong.
nit: can you remove the extra line?
I think this is the only place where we need to test the capability, and the other two. I think we can just remove them.
I'm not sure we should emit a container event here if we're restarting, as we may have already recorded it in the state change events. I think we should emit an event if we're not restarting or failed to restart, since we're not actually emitting the event.
Why not use `HiveTableName` directly?
I think we should remove the job id from the `Props` as we don't need it here.
I don't think we should have these in the default settings. I think it's fine to leave them in here.
I think we can remove the "or not" part.
I'm a bit confused about this. If `config.sync.fullSynchronized` is false, we're going to throw an error? I think we should be able to just remove the check entirely and just do `if (config.sync.fullSynchronized === undefined && config.schema === undefined) {`.
This is a bug fix, it should have been in a different pr.
I'm not sure this is needed
This import is unused.
Please remove this. It's unused and the build is failing.
This should probably be a SkippableTest
this is the fix.
This is not needed anymore. The link is not excluded.
This is a good idea. We should keep this in sync with `orbahari` and add `or.ba402` to the copyright
I don't think this will work, because the `props` object is not an object with `toLowerCase()` method.
I think it's better to return the address directly here, instead of returning it.
I think we can remove this
I think this is not necessary. The only time this method is invoked is when we are in the process of starting.
This is not needed anymore, right?
Is this used anywhere? If not, can we delete it?
Why disable this?
This is a bit confusing to me - I would have expected `:fulfilled_with_github?` to be true, but it's also true in the other places. I would have expected `includes_mentor?` to always be false.
Why is this changed?
`uploadBundle` doesn't throw an error if `bundle: true` is set, but `upload` is called with an `isSomeFileRemote = false`. I think this should be a separate `upload` function, so that the error will be thrown if bundle is false.
This is a very bad idea. If the exporter throws, the exception won't be propagated to the user.
I think we need a better error message here
This is a breaking change for existing applications. Please bump up the major version of the app and ensure that the major version number is up to date.
I don't think this is necessary, as this method is only called from the `FileSystems` class.
Why not just remove this line?
This method is not used anywhere, so it can be removed
This is a breaking change for people who are using this option. I think it's best to add it to a separate PR.
Why is this gone?
`len(pay)` should be `len(pay)` here.
Why do we need to set settings and isAdBlockerActive here?
Why was this removed? I think it's still necessary.
Missing copyright header.
Please, add `@since` tag
This should be `const TEST_USER_STORE_NAME = 'test-user/' + MODULE_SLUG;` to be more explicit about what it is used for.
This is a breaking change for the service. We should not add a new field in api. We need to make it optional in the API.
I think we need to keep the `&&` here.
This is a bit hacky, but it's not the best way to go about it.
I'm not sure this is a great name. What do you think of `is_zero` or `is_nonzero` or `is_nonzero`?
nit: `GetUriTagValueFromRequestUri` => `GetUriValueFromRequestUri`
Is it worthwhile to print the status code and body?
Should this be a directory?
Why is this removed?
I'm curious about this change. Is there a reason we need to change it?
This is not a very clean way to stop the services that are started up. We need to find a way to stop the services that are not started.
Why is this change needed?
This is the only change that needs to be done in this PR.
I think this should also be `err4106arg = SQLCHARSETSTRING_GB2312;`

I don't think you need to do this. The user_id is already part of the query, so it will be automatically added to the query.
I think you can use `self.assertEqual(luigi.run(['SomeTask', '--n', '1000'])`
I think this is a mistake, the CDN is not the bundle.
This is an internal class, so I think we should keep the `Obsolete` attribute.
I think it would be better for this function to return a `const RCore *` and then you can remove the `if` check. That way you don't have to do the `clearProp` and the `setProp` and `clear` twice.
I think this is the only usage of the GetArchiveFileName method. Can it be removed?
I think this is the wrong name. It should be something like getBaseGasLimit()
I don't think we should warn here, this is a command line flag.
why is this removed ?
This should be a pointer to a string
This file is only used in tests, so I don't think we can remove it.
I think we should do a `self.scripts.clear()` before calling this method.
This should be `_body.getAsString()`. Also, the `toString()` method can be removed.
This file is not used
This should be a separate file, `kinto/server/health.py`
I don't think you need the `[` here.
Please don't add new files to the PR. It is not necessary to add a new file.
This is a bit confusing. The function name is a little misleading.
I'm not sure if it's a problem to pass the column's primitive type here.
This should be in a separate patch.
This should be `hierarchical_name` to be consistent with `name`
nits: "A reference by name to an IngressClass object."
This is not a test, right?
>null [](start = 51, length = 1) nit: can we use named parameters for all these new ctor? #Closed
This is the only change that I'm not sure we should make in this PR. I think it's fine to leave this as it was, but I'd prefer if we could make it more clear.
This should be `Errorf`
Line is too long. [81/80]
I don't think you want to do this, if you are not going to retry, you can just do a fatal.
I think we should add `implements SerializerInterface` to the interface.
This is not a good solution. The height should be reset to 0 when the element is expanded. The height should also be reset to auto when it is collapsed.
This should probably stay as is.
nit: import order
I would prefer to set the node to KILLING if the flow is EXECUTION_STOPPED, otherwise set it to KILLED. This will be more clear.
nit: extra space between `string.Format()`
I don't think we should be adding this. We should just have the `xattr` type be part of `Node` and the `xattr` type be part of `Node`. We should be able to use `Node` directly without having to add `Xattr`.
I would prefer to use `strcmp` instead of `strcmp` as that is more common in C and C++.
I don't think this is needed anymore
I don't think this is needed
I think we need a `skip_before_action` here. Otherwise, we will be ignoring the action and not discarding the flash message.
I think this is the only place we use this function, we can just use `accountutil.AccountState` directly.
This is not needed.
I'm not entirely sure what this does. I think we need to set this to 1 in the admin feature flag.
`null !== $acceptedContentTypes` is enough.
Shouldn't this be a panic instead?
I don't think this is the correct place to check for specs. It should only be done when the directory is a test directory.
I think we can just use `this.data = {};`
I think this is not needed anymore
This is a bit of a hack, but I think it is better to have it as a list of functions.
Why is this necessary? I wouldn't expect this to be used outside of this package.
This is the fix. The rest is just cleanup.
This should probably be moved into `cdsObjectToUpnpavObject`
I don't think this should be exported.
This change is not needed, as the check is done at the beginning of the `if` block, and it's already covered by the `listenSocket_ >= 0` check.
I think we should add a button here to change the billing information.
I don't think this change is needed.
This test class is not used anywhere.
I'm not sure this should be a separate package.
I think it would be better to test that the pipeline is not executed, and that the execution of the pipeline is not executed.
I'm not sure this is a good idea. We should be using the same approach as the other components, and the number of workers should be configurable.
Why did you add the newline?
"github.com/opencontainers/selinux/go-selinux"
I think it's better to keep the old name.
nit: space between `=` and `=`
I think we should be more precise here, something like "Variable interpolation is not supported"
I think this should return an error instead of panic.
I think you need to check for `null` first, otherwise the `depValidationStatuses.put(null, v) == null`.
This is a very long line, could we split it into multiple lines?
I'm not a fan of this name, since the function is not really getting anything. Maybe something like `get_num_built_blocks_in_system()`?
Is it possible to have the same issue in `h2o_push_path_in_link_header`?
This should be `GetTipSetRoot` to be consistent with the other methods
This file is a bit hard to review.
This is a breaking change. Can we keep the original value for the secret name? It will be a breaking change.
Should this be an error?
I think this should just be bios-grub, since we're using the bios_grub one in the boot partition.
This is a bit confusing to me, as it is the data manifest, not the data manifests
I think this is a good idea, but it's probably not a good idea. I think we can just use "toolName" as the key and then get the osSpecific value from that. That way if the user doesn't have a toolName in the tool registry, we don't get a default value. This is a very bad idea.
Why this change?
This is not a warning, it is an error. The message should be something like `BibEdit will be removed in 2.3. Please check 'invenio.modules.editor' module.`
I think this is the wrong change. It's not a duraton.
This test is not needed, since it is already covered by `test_groupby`.
This is a bit weird, I would have thought that the `isEmpty` method was a no-op, but it's not a big deal.
I think it would be better to keep the old constructor and remove the new one.
Why this whitespace change?
This test is not necessary. The `TMemoryBuffer` constructor will do the right thing.
This should be a method of `MethodViewBuilder`.
F401 'IntegrityError' imported but unused
I'm wondering if we should use a recursive lock here instead. The reason is that we are not using the `JobManager` in `JobManager::startJob`, so we can't have a race condition here.
I'm not a fan of this change. I'd prefer to see a test that verifies the ACME solvers and verifies that the ACME solvers are correctly configured.
This is not needed
This is not a DVN. Please fix.
This is a little bit of a nitpick but we usually don't use `+` in error messages.
@liggitt @deads2k this is the change that fixes a bug. The rest is just the tests. I am not sure what the correct behavior here is.
I think we can use the version of the previous write doc values generator here.
I don't think we need this change, since we're only using this for the trieAccumulatedChangesFlush
This is not needed anymore
I would suggest to make these `Optional<String>`.
I don't think this test needs to be changed. The test is about the `toString` of the `StringWriter`.
This should be `slots_t`.
I don't think we need to append history nodes here. The persistence will do it for us.
I think we can remove this log line
I think you can use a `defer` to remove the line.
Why do you need this check?
I think you can just use `str(connect_to)` here, and avoid having to call encode()
I think this needs to be done in the destructor of the player.
I think we should check if the condition is `True` before calling `FindClusterDeploymentCondition`.
Why did this need to change?
This is the same as the `fieldProviderID`. I'd suggest to remove the latter and use the former in `fieldProviderID`
This is a new dependency. We need to make sure that the import is the same as the one used by `@wordpress/data-l10n`
I'm not sure if it's better to use the same package name here, but I can live with it.
This should return `null`
This is the same header prefix as the `CallerHeader` above. I'm not sure if we should have both.
I think this is a typo.
This is not the right place to do this check. We need to check the config and limit.
I'm not sure why the `or cls._timeout` is needed.
I think this should be `this.givenFeeSat = opts.fee ? opts.fee * util.COIN : 0;`
This is a bit of an odd place for this logic. Why not just have a `permissions string` and have the caller check for `""` and return `""` if it's empty? Then you don't have to check if `d.Permissions == ""` and if so, return the empty string.
I think we should keep this at 5 seconds.
Shouldn't we use the same endpoint as the app endpoint?
Why not just `type nodeIDKey string`?
I think you can remove the `!bootstrap` part.
This is a little confusing. I would have named it `use_unbound_dim_formats` or `use-unbound_dim_format`.
This should be a `chan struct{}` instead of a channel.
I'm not sure this is a good idea. We are using a SessionId in the devtools.target package, but we don't have a session id. I think it is better not to import the model.
This one is still INFO level.
I don't think we should have a custom template for each item, we should have one for each item and the other for each item
Why is this changing?
Why does this need a `false` argument?
This should probably be a `LOG.info` as well.
This is the fix for the issue I mentioned earlier, right?
This is not a good idea. It is a counter that can be used to calculate the mean and the mean of the current bucket. It is not a counter that is used for calculating the mean.
Why not use a `String[]` instead of a `String[]` ?
Why is this needed?
Should we include the exception name?
I think this is not necessary since the `reapply_cors` function will handle this for you if you're returning the error code.
This test was a little confusing to me. It seems like it was testing the same thing.
I don't understand this. Why is this necessary?
I'm curious about the difference between this line and the one above it, but I'm not sure why the two are different. Is it because the test is failing? If so, I'd like to understand why it is failing, but I'm not sure what the difference is.
This is a pretty big change. I'm wondering if we should make it more clear in the API doc that it only contains the number of examples to be executed. I think it's fine if the number is the same as the number of times the spec file is loaded, and the number is the number of seconds since the last run.
I think it should be `boxset`
I think we should do something similar for `write` command. We can do this in a separate patch if we want.
I think we should use the `.HasValue` check here, as it will be false for `EndTime.HasValue` and `PointsAcrossPeak.HasValue`
I think we should keep the width as is.
I think it's not a good idea to add a new field here, since the `boltdir_type` will be changed later. We can add a new field in the future if needed.
This is not a regex, it's a string.
`temp_int_part` is unused
I don't understand why we have this sleep.
I think this is a bit too much. We should probably move it into a `scripts/utils/swap-package-links.js` file.
I think it would make sense to move this into a macro.
This should use the `remote.path` helper instead, since the `remote_path` is the remote path.
This is a good candidate for a helper function
I don't think we want to add a newline here, as it's a continuation of the previous line.
This file is not formatted properly
I'm not sure if we should exit here. If we do, then the user will get an error.
This is the only change in this file
This interface seems to have no usages.
This is a bit of a nitpick, but I think it would be more readable to put the `run_script` in a `ensure` block, and then just call `run` on it, rather than having to do `execute` and `rm`.
I think you can just use `list(to_replace)` here.
This should be `null`
I'm not sure if this is a bug, but it seems to me like the `metricsConfig` should be set to the same as the table's `MetricsConfig`, so the metrics config would not change if the user explicitly set it to `null`.
I'm not sure if we want to support this for all generators. I'm not sure if this option should be added to `params_`. I think it should only be used for generators that have a method, but it should be handled by the generators that have a method.
I'm not sure this should be in the `aws` package, as it's a service package.

I think we should remove this file from the PR, it's not used anymore
I think we should use `Objects.equals` here.
I'm not sure this is the right place for this method, it's only called from the `form.js`, and it's not specific to `forms`
This is not a good name for a option.
I think we can remove this
I think we can just check if `file_exists($this->realpath($path))`. It's a bit more readable.
I think this should be called `blockCacheLifetime` instead of `lifetime BlockCacheLifetime`
I don't think you need this.
Why are we removing this?
I think we should use the same validator as the ID one as we do for the root.
This should be `target-file-cost`
I don't think this will work on macos. The `HAVE_LIBUNWIND` is defined on all platforms.
This is a little confusing, as it doesn't look like it's doing anything special.
I don't think we need this check
I don't see why this should exit with zero. It's the same as the normal exit code, right?
This is a breaking change. Please make it optional, and then add a new entry in the changelog.
This is a new error code, but the code is not used anywhere.
I'm not sure this is a good test, it's not really testing anything.
I think we need a new file here.
I think the parameter name is wrong.
Why did you change this to `Dictionary<Address, AddressNonces>`?
I think it would be better to emit the event directly, rather than using `this.emit`.
I think we should throw an exception if the callback is called.
I don't see the need to specify the db URL.
This test should be named `should not block any traffic`
This should be a property of the service.
I don't think this change is needed.
I don't see this used anywhere
This file was changed to `porcelain.test`
I think this is a good place to add this.
I think we should keep this call. We can't assume that the config is present.
I don't think this is right. The errorRowCount will be set to the number that was found in the first condition and the number that has been found in the second condition will not be equal to the number of rows. If the number of rows was found, the errorRowCount should be set to the number of rows the condition is matching.
Why do we need this here?
I think this should go into `_request`, not here.
Why not just use the `Request` constructor?
Shouldn't this be `Keys#CONTROL | Keys#COMMAND` ?
This should be changed.
I don't think you should remove this. It's not a key of the violation object.
I think you can remove this line.
I don't think we need the `unless` here.
Why change to ImmutableList?
This is a bit of a hack. I think you should just use `cPickle.loads(pkl, type=Chem.RWMol)`

I think this should be a polymorphic column.
I don't see how this is related to the PR.
Line is too long. [82/80]
I don't think we need this change
I'm not sure if this is the best way to do this. I don't have a good suggestion for how to make it more flexible. I'd like to hear your thoughts. I'm not sure what the best way to do this is.
Whoops, this is wrong! This is wrong.
Why remove this?
nit: move `resultColNames_` to the end of the vector.
I think we can remove the `/home/ubuntu/` here and just use `forseti_home/ubuntu/config_validator_constraints`
This is an unrelated change, right?
I'm not sure this is the right place to put this. I think we should move this import to the top of the file.
I think this is a mistake. The default value is true.
This should be `ForceLogLine`.
You should be able to remove this line.
I think we should rename this file too.
This is not needed.
I think we should be raising an error if we're retrying forever. I think the API will just return a 401.
This should be a private test function.
I would prefer to call it `--network`
I'm not sure if we should change this to a `setSourceDataAtCell` or not. The only reason it was changed is because the `setSourceDataAtCell` method is called on the `hot` object.
I think this should say "Violation category of the Rule"
I don't see a need for this method.
This should probably be in `version.go`?
Should we check that the error is a dbus.Error?
This doesn't seem to be used anywhere.
I don't think we should be doing this. This is not a command line option.
Why is this needed?

This is the actual fix.
Is it possible to make this a hash with the `sysstat` package name as a key?
I don't think we should do this. We should just use the field name in the case where it is not found, and we shouldn't have any case sensitive fields in the case where it is not found, and we shouldn't be doing this.
I think it should be `<h3 class="workshop-type">Online Workshop</h3>`
This should be `181.243.112.225`, not `185.243.112.225`.
Should we use `Path.GetDirectoryName()` instead?
`if not paths_:` would be clearer
I don't think this is necessary.
Should be `array`
I think it's better to use the `BooleanQuery.Occur.SHOULD` constant instead of the magic `MUST` here
Why is the telemetry config enabled only when the log has been configured?
I'm not sure this is the right place to do this, since it is not a setter.
ineffectual assignment to `ctx` (from `ineffassign`)
This is the main fix. The rest is just cleaning it up.
I would prefer a different option name, `--verbose` would be more clear.
Why ignore the error here?
I'm a bit confused about this endpoint. It seems to me that we're only going to get a failure page for the first time? I think we should be returning a success page, not a success page.
@kushthedude is there any reason why we are using `notification_important` here and not `notification`?
This is a BC-break.
I think this should be `Integer.MIN_VALUE - 1`.
This is a new file, so it should not be included in this PR.
Why this is changed?
This will be set in the session, so you don't need the if statement.
I'm not sure if this is the correct way to do this. The `total` is the sum of all the splits and the total is the sum of the total. The total is updated with the split count and updated with the last call address.
I think this should be a Slot
I think we can remove this extra line.
This is not a good error message. The error code is not the same as errno. The error message should be something more like "Unable to create directory: %s"
This should also allow `role="presentation"`, right?
Why do we need this check here?
We need to add the location property to the `SparkTable` class as well. We should add it to the `SparkTable` as well.
Align `.merge` with `.reverse_merge`.
I think it is not needed to decrypt the instance url here. The passcode should be already decrypted.
This is not used.
I don't see this being used anywhere?
I think we should keep the old behavior and just have a new one with a default value of None, so that we don't have to change the existing behavior.
I think we should remove this class.
I think this is not needed since you have removed the table from the table table name.
I don't think we need to pass lifetime here.
I don't think you can use the class here, as you are not using the class in the method
Nit: This is a little confusing to me. It seems to me that `Header1` is a map of keys, and `HeaderMap[keyName]` is a map of key-value pairs, but it's not. I think it'd be better to name it something like `HeaderMapWithLowercase`.
This test was wrong.
This change is wrong. It's not necessary to change the file structure.
Why not just make this a method of `StorageFaultSlasher`?
This will be better as `extFormat? (char *)"BOOLEAN":(char *)"BOOLEAN"`
I don't think this should be added here, since it's not used anywhere.
Please remove this blank line.
This is not needed, since `yarg` will handle the `--help` flag automatically
I don't think this is needed.
This is a bug fix, we need to unlock before creating the refresh request.
we don't use wildcard imports, please revert
I think we need a lockBeforeLock for the handle to be able to get the rmd for the handle.
Why is this change needed?
I'm not sure if this was intentional or not, but it's not a big deal.
I think this is the only place we call Collect()
Can we move these to `AzkabanConfiguration`?
Should we just make the getter public?
I think this should be a separate test case.
I don't think this is right. The error should be encoded in the `application.error`.
I think we can just remove this.
This option should be added in `DefaultParser` and not here
I'm a bit confused about this name. Is this something the user can specify in the configuration? I thought it was a string that is set by the user and it was a property of the settings object.
I don't think this is correct. The expression is evaluated on the node, not the node itself.
This is not used, right?
I don't think this change is correct.
Why not just check for `updatedInfo != nil && updatedInfo.GetDescription() != ""`?
I think this will panic if err is nil, so I think it would be better to check the err before returning the fqdn, value and return the err.
This should be named `/chunk/{chunk_id}` to be consistent with `/peers/{peer_id}/peers` above
I'm wondering if this is a breaking change?
E501 line too long (116 > 115 characters)
Please add a check here that the path is a valid file.
Why not use the `connection.js` constant?
Is this needed?
I think this will cause a problem, because `string(id)` is a `uuid.UUID`
I don't think this is needed.
I think it would be nice to have this error message in the `__init__` method, since it's not really a generic error.
This is the same as the previous method, so we don't need to add this method.
I think we need to keep the old naming.
I think you should use `get` instead of `or None` here.
This should be `options.padding` to be consistent with other options.
I think this should be `require('../core').MongoError`
I don't think this should be in the `valid_values` section.
This function is unused, and can be deleted.
nit: can we rename this field to `bytesHash` to match the field in `BytesHash`?
I think we need to keep the old option for backwards compatibility.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this is not needed.
I don't think this should be changed. The method is public, it should be called `get_project_policy_iterator`
I think we can remove the `if deadlineTimer == nil` check here, since we already set it to the default timer.
I'm wondering if we should have a `PostAsync` that takes a `string` and sets the content type.
I think we need to keep the `flags` here, otherwise we'll get a `0` in the `if (atom->failed)` branch.
Why do you remove it from the list and then reinitialize it to NULL? Is it to avoid the memory leak?
Missing space after #.
Why the change to PONY_API?
I think it would be better to have this as a separate option, and then use the same value as the `MountDevice` option in `fuse_mount_options.go`, so that we can have a single fuse mount option that can be used to set the device name.
Nit: `UseTargetMethodArgumentsToLoad` is not a very descriptive name, it's more like `UseTargetMethodArguments` and it's not clear what it does.
This is a very weird file name, but it works fine.
I think this controller is unnecessary since we already have the `RepositoryController` in `app/controllers/products/index.rb`
This should be `FeedItem.PLAYED`.
Shouldn't we return here?

I think it's better to report the unused variables in a separate method, because this is the only place that needs to be called.
Why do you want to allow multiple classes?
I'm not sure if this will work. If we set seed to `args.seed` here, then we will set `args.seed = args.seed + dist.get_rank()` which is wrong.
Why are you changing this?
I don't think this is the right example to show here.
This should be a test with `range: 1..100`.
This is a breaking change, please revert
This is a bit of a nit but I think the name of the middleware should be something like `InboundMiddlewareMiddleware` to match the `Middleware` interface.
I don't see this being used anywhere.
This migration will need to be run in the `db/schema.rb` file.
I think we can remove the lock here
This will be a problem for existing databases. The data is stored as text and the data_encoding is stored as text.
Why do we need to add this?
I think we need to remove this file.
I don't think we need to keep the privatefs option, as it's a breaking change. We can keep it as is and add a `Deprecated` tag.
This is a good catch, but it is a bit weird that we have a function called `Kokkos::Profiling::initialize`.
I'm not sure this is the correct namespace.
This is not right, the plugin should be able to get the array from the plugin.
I'm not sure if this is correct. It seems like this is a link to the `Tutorial` section, not a link to the actual Tutorial.
I think this is not correct. We need to convert the error details to retry replication errors. The error is the replication failure, not a shard replication failure.
This is the only change to the file that I am not sure why it was changed. I think this file should not be changed.
Can we use torch.nn.functional.mean_variance instead of this?
This is a BC break, we cannot add `void` to a method that returns null. This is not a valid method.
I'm not sure this is the right place to do the parsing. I would expect this to be a static property of `JsonRpcConfig`, not a property of `TraceModule` (or `TraceModuleOptions`).
I'm not sure if this is a good idea to use /usr/bin/flock, as it's a bit unusual for some systems.
I think we can remove this line too.
Please use `canPlayType` function from `test/unit/video_test_element.js`.
This is a new dependency, right? Can we just remove it?
I think this is the only change that should be made.
This is not necessary. We only need to iterate over `index_spark_columns`
"other arguments should not be used" -> "other arguments should not be used"
Please, use `Log` instead.
This should probably be a separate PR, but I think we should keep it.
I think we can just return the error.
This should be `*GlobalOpts`.
I'm not sure about this. I think it's better to use the same backend as the other ones. I think it's more consistent with how the rest of Kinto is named.
This should be `result.writeErrors[i].index`
I think this is the same as `basicTypes`?

This is not needed.
I'm not sure we want to do that. If we do this, then the `Start` function should be responsible for the `Stop` method.
I think this would be more readable if it were `FinishPrefixed`.
I'm not sure about the naming of this method. It's not a tabBar, it's a tab.
This is the only place where `this` is needed.
I don't think we should be modifying this method. It seems to me that it should just return the value of `@profile_paths[name]` if `p` is `nil`.
Why not just return here?
This should be `public IDictionary<string, object> Properties => _contextProperties ?? new Dictionary<string, object>();`
I don't think this test needs to be skipped
This should be a `List<DeleteFile>`. If you pass a `List<DeleteFile>` you'll have a `null` value for `deletes`.
I would suggest we use the `Duration` interface here. It's not really a long time, it's just a time to wait for a long time.
Should this be `ci.StartupScript != ""`?
Why is it `< 1` and not `< 0`?
line too long (82 > 79 characters)
I'm not sure if this is a good idea. The function is called `render_sync_handler_call_structs`, which is the same as `render_service_call_structs`. The function is called `render_sync_handler_call_structs`. I think we should rename this function to something more meaningful, like `render_sync_handler_call` or similar.
This should be `crypto2`
This is the fix.
I'm not sure if this is correct, but it seems to be the same.
I don't think this is needed
I'm not sure this is a good idea, if we have multiple outbounds for a single service and there are multiple outgoing messages, then we should just panic.
I think we should also add this to the interface.
I don't think it's a string anymore
This should be an `CommandError`.
I don't think we should add this here, we should just add this to the `dockerfile` command.
Why do you need to pass dilation here?
I think we can remove the `Readonlyfs` check from the `setup` function as well.
I don't understand why this is necessary, and I don't think it's a problem in practice, since the compiler will not optimize it for us.
I think we should add a note here saying this is not needed anymore
Why not just use /etc?
Should this be `@Nullable`?
This is a good place to raise an error. I think the error message should be something like `The adapter for the Blacklight config was not found in the Blacklight.yml config`
I think this should be kept.
I think this should be `None` instead of `0`, otherwise we're logging a message to the console and the server won't be able to tell what happened.
I think this should be `for i := 0; i < 10; i++`. Otherwise, if you have more than 10 threads, the lock could be acquired more than 10 times.
nit: `ctor := NewConstructor(dataresidencySs)`
This is a bug in the old implementation and is fixed.
@danmosemsft I'm curious why you added the #? I don't think it's necessary.
I'm not sure if we need this one.
This should be grouped with gcp imports
This should not be here
I think it would be better to return a struct that can be used for the output of a function.
nitpick: `from typing import Collection` is not necessary
I don't understand what this is trying to do.
I think we need a lock here, since the block is not being synced. Otherwise, we might be reading the genesis block twice.
I think we should also check `is not configtypes.List`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why is this needed?
This is a bug, the flags are not set when `dr_get_current_drcontext` is called.
This benchmark doesn't really have any value, since it's not a simple comparison.
nit: I would name this `NatPortRangeRange`. `local` is a little confusing.
This is a bit of a pet peeve of mine but I'm not sure it is a good idea to add new imports to the standard library
This file has changed, so it should be reverted.
This is a bug.
I'm not sure this is a good idea, since we are not using `value.dtypes` in this case. I think it would be better to use `dataframe.head().dtypes.name`.
Why is this change necessary?
I would add a check for the scale factor is >0 here.
Why do we need this change?
I'm not sure if it is correct to change the name here.
I think we should rename this to /stats-stastics
I don't know if this is a good idea. We should be able to tell the user if they want to do a tail update. I think we should be able to tell the user if we're updating the tail or not.
@deads2k I'm not sure if this is the best way to handle this, but I think it's fine to leave this as is for the time being.
This is a very expensive operation. We need to find a better way to do this.
I'm not sure why this was changed.
Why do we need this?
This is the actual fix.
I think this is the right place for it. I don't see any reason for this to be in the toolbar.
This change is not necessary.
This is not a good name. It's not the OOM. How about "OOMWaitingJob"?
I think we can just use `moment` here. `moment` is a deprecated module.
I don't think we should be using backoff for this.
Why do we need this?
I would prefer to call this `GenerateSha256Hash` to avoid confusion with the `PasswordHashGenerator` package.
I don't like this API, I would rather have a separate endpoint for this.
This is not a shared pointer, so you can use the constructor of `SolvingDriver<float>` instead.
Why not just return this?
I think this is a BC break, we should add it
Can you please add some context to this example? I'm not sure what this snippet is trying to say
I'm not sure this is the correct approach. The state is a map of state names to the actual state of the group (e.g. the name of the group that matched the block), not the actual state of the group that matched the block.
Why is this change needed?
This should be nullable, and the type should be `IJsonRpcUrl`
This should probably be `client_model.underscore`
This is not a critical message. It's a normal operation, not an error.
I think we need to use the `&` here.
This is a bit of a nit, but I'd suggest we keep the `function` keyword in the closure. It makes it easier to read, and it's more clear when reading the code.
I think we should keep this, otherwise we will have to change the code in the future.
This test doesn't really make sense to me since it is not actually testing the timeout.
Why do we need to change this?
I think you can remove the empty line.
I don't see this used anywhere.
I'm not a big fan of the `-c`, it's not clear what it does and it's not clear what it does. I would rather see it as a separate command, or a separate function that takes the `zfs` flag.
Why do we need to make it public?
I'm not sure if this is the right word to exclude. I think the correct word should probably be "Email".
Please use `boost::program_options::value<std::size_t> ()` instead. It's more readable.
This is a bit weird, can we do `import ruamel.yaml as ruamel` instead?
nit: I would call this `Validate` to be consistent with the other methods.
This should not have changed. `_` prefix is used for internal variables.
I'm a bit confused. Why are we replacing the root dir with the scrubbed root dir?
I think this is not needed.
I think we should call these `test_tools` to be more clear that they are for testing.
This will only throw if the file is not found.
nit: remove empty line
this is not needed, right?
This is a good message, but it should be a warning.
This will break if `logsDir` ends up being `null`.
I don't think this change is needed.
This needs to be `POST`.
This is a duplicate test, please remove it
This should be `ATTR_SELF_SERVE_ENABLED`
This is a bit confusing, since we are using the same variable for both `startup` and `metadata`. I think it would be clearer to call this `metadataItems`.
I think this should check `m.paths["device"]`, since it is not guaranteed to be there. Also, it might be better for the `devices` path to be `/devices/` instead of `/devices/`
I don't think this needs to be here.
This is the actual fix
This is a bit confusing. The error is returned when the `Path` is empty. It seems like this is the only place we're returning `nil` when the file doesn't exist.
I think this is the wrong place to put it, it's not the database capacity, it's the number of db connections
This was the bug. The fork id was `0xc25efa5c`
We can't use the command `myst` here because it will fail if the user doesn't have the correct privileges.
I'm not sure if it is the best place to add this constant. It seems to me that we should have a single place where we define the resource type.
This is not used.
I think we can drop this import.
I'm not sure we need to worry about the case where we have a `/notifications/` endpoint, but it's a bit weird that we're not returning the data in this case (and the `/notifications/` endpoint doesn't return anything), and we're not returning the data in the `live-container-version/` endpoint. It seems like we'd need to handle the case where the `/notifications/` endpoint returns `undefined` for the live container version, and the data in the `live-container-version/` endpoint returns `null`.
I don't think you need this.
This should be `GrpcGapicRetryMapping retryMapping`
Shouldn't we check that `aws_sts_endpoint` is not empty before setting it to the empty string ?
This method should not exist in `org.apache.flink.api.common.utils`. The Tree class is already in the package.
I think we should not use a primitive type for this, it's not clear what sort order it is.
I don't think this test is necessary since we're checking the value of next_week and last_week.
This is a bit confusing, since it doesn't have to be a `duration` and it's not a `timer` or `timer_duration`, but rather a `timer` or `timer_timer_time`
I don't think this is needed.
This should be `owner`
I think we should keep this as a private method, so we don't have to worry about it being used outside the module.
This is the only change in this file. The rest is cleanup.
This is not equivalent. The original code was fine.
This is not a good change.
This should be in the standalone folder.
I think we can use a `Fixnum` here instead of a `Integer` since it's an integer.
I think we can remove this class
I think we should remove this line, since it will be executed in the `if` block.
This should probably be `sizeof(errNumStr)`
This is a constant that should be defined in `version.go`
I think we can delete this
I think this should be `ReadonlyError("Cannot initialize empty resource timestamp when running in readonly.")`
I don't think this is a good idea. It's just a stub for a no-op function.
nit: I'd name this `ifaceConfigurationEnabled`.
I think we should remove this file as well
This should be `[PROCESS_WITH PID {}]`.
This will be the same as in `build_from_path` except the first exception is raised with the message "Syntax error while reading {!r}".

This change is not needed
I'm not sure this is a good idea. The function is called from the same place as in dcontext.c, so this flag is not necessary.
I don't think this needs a pointer.
This regex should be in `ApiVersionConstraint`.
I think this is a good change. We should keep the example for v3, but we should keep the example for Ruby.
This is a good change, but I think we should also shutdown the topic after the error check.
I think this should be `cassandraProtoVersion = 6`
I don't think this is the correct way to test this, since the file is already in the directory.
I think we should leave this here, since it's not used anywhere
This will raise an exception when `composite_root_resources` is `None`.
nit: can we call this lastLong and lastDouble?
I'm not sure if this is the right thing to do. I think we should just remove `prog` and the other calls to `printCommand`.
This is not the same as cudaMemcpy2D, it is the same as the other two.
This is not a good name, it's a common term for a service that can have a lot of parameters. Maybe something like ImageMgmtImageTypeVersion?
Why not use `::rmdir(pidFile)`?
I think we should add a `<TViewModel>` to `IMvxElement` and add a `<TViewModel> where TViewModel : class` to `IMvxElement`. This would allow to add `<TViewModel>`.
This import is no longer used.
I'm not sure if we should change this class name.
This hook is not called in the `DashboardEntityApp` component, so it should be moved to `useSelect`.
This is a bit of a hack. I think we need to make a new `TokenRequest` that takes a `token` and returns the `token` (or `None` if it's not valid) and then we can just pass the token through to `TokenRequest`
I'm wondering if we should make this configurable, or even make it configurable. I'm not sure what the value is, and if the default is 1MB, it's fine.
I think you can use `repo.ListBranches` instead of `m.Group("/branches", func() { m.Get("/:id", repo.GetBranch) })`
This class should be marked as `@value`
This is not thread safe. We should be using `ConcurrentDictionary`
This seems to have been a mistake. The path should be the root of the web.xml, not the root of the web.xml
I think we should rename this to `setupRerender` since we're only setting up Rerender.
I think this is a bit of an overkill. The constructor already takes a `bool` and the `IConfigurationSource` constructor takes a `Configuration` instance.
I'm not sure if this is a good idea. If we want to submit the form, we should listen for `FormEvents::SUBMIT` instead.
I think we can remove this `true` here
This is a bug fix, but I don't know if we can do it in this PR.
I'm not sure this is a good default. I would rather have a `Default` field in the `AWSRoleSpec` struct, which is a default for all roles.
I think we should only emit the balance if it was not successfully generated.
Please, use `flatbuffers::GenerateJsonSchema` instead of `-S`
This is not a good name. This is a string, not a string.
This is not needed, as it's not used.
I think we can leave the word "desired" in here.
I think this can be removed
I think we can just use `assert.isFalse(checks['aria-required-attr'].evaluate.call(checkContext, target, ['aria-valuenow']));` here. The `isFalse` call should be enough.
Shouldn't the validation be moved to `DataFileOverwriteFiles`?
This should be in its own commit, not in the same PR
This is not the right way. The only thing that we can do here is set the runtime family and the runtime family of the span.
I don't think this is necessary. The `AtomicLocalFile` is a `File` object, so you can just call `super` without any additional initialization.
This is the only place I can find where we're using this.
I'm not sure if this should be `DropAction{}`. I don't think we have a policy for that yet, and if we don't, we should drop packets from pods.
I don't think we need to add these two commands to the `W3C_*` APIs
I don't understand this. Why are we stripping the `3`?
I'm curious why this was moved.
I'm not sure if we want to do this, or if it is better to do it in the `http` package.
I'm a bit concerned about this. I think we should keep the old warning.
I think this import is no longer used.
This is a bug, the test should be `encodeBase64("")` instead
This is the only change that I'm concerned about. It's not a big deal, but it's a little weird that we're passing a state around.
This is not used anywhere?
I think this should be `UnsupportedEncodingException`.
I think we should move this to `pycrypto` instead of `drbg`
I don't think we should be checking for `deletes` here. It's not a valid condition.
Should we use `plugin` here too?
This should not be necessary, as it will always be a string.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is not needed
I'm not sure if this was intentional or just a mistake, but this seems to be unused.
This is the fix
"If a user wishes to modify the said behaviour, they can either handle the exception in the provided Executor, or override the said method in a custom extension of IndexSearcher"
I don't think this is right. `field` is a string, not an empty string.
I think you need to reformat this file.
Remove this file
I don't think we should be setting this state. It's a bit weird to me that we're not setting the data to false.
Is there a reason why we don't just use `Task.CompletedTask`?
This is not used anywhere, can be removed.
I'm wondering why we are removing this check here?
Why do you need to group legacy?
I don't think this should be an error, it's not a user error. If the SPC resource is not found, the user will be responsible to delete it, which is not a good practice. If the SPC resource is not found, we should return an error.
Why is this change needed? It seems like the original indentation was correct.
This should be `default`
I think it's fine for this to be initialized to 0, but it's a bit confusing that it's zero, but it's not clear to me that it's a valid value.
Why is it disabled now?
I think this needs a test
This should be called `validateUserGroupMembership`
Why not just use BlockTree in this test class?
This should be the default TTL, not the cache TTL duration.
I'm not sure this is a BC break. The class is protected, so it should be marked as `@api` and not `@internal`.
nit: this should be a `ValueError`.
I don't see any reason why this should be a static final string?
I think we can just do `len(trimmedPassword) > 0`
This is a bit weird, I would expect the dialog to show the message box.
I don't think we need the `changed = FALSE;` here.
nit: I would prefer to call it `ProjectIDEnv` to match the other env vars
I don't like having a bool here, it's a bit odd to have this flag.
I would prefer to have a separate button for this, rather than adding another one to the `test_response_form` that will be shown in the `test_response_form`.
This should be `s/ask_plans/:market_address/ask_plan/`, right?
I would suggest `kerberos` to match the other parameters.
This is a bit of a hack, but I'm not sure if it's worth it. I think we should just rescue the `NotAuthorizedError` here.
This is not used, is it?
This test fails with the previous version, right?
I'm wondering if we should add a note about what the license header should be, or just remove this line.
I think we can remove this line.
nit: `OpenTELEMETRY_HOST` is not a good name, it is a host name that is used to communicate with the opentelemetry agent. `OPEN_TELEMETRY_HOST` is the host that is used to communicate with the opentelemetry agent.
This is a bit of a hack, but I don't think it's necessary. We can always use the hostname from the app.
I think we can remove this one, since we don't support it.
This should be `txReceipts[i].Removed`.
This should probably be renamed to `repoURLFlag` to make it clearer what it is for
This is a bit weird, why do we need to raise an error?
I think this is not needed anymore
Why not just check if the action is `COPY`? It seems like the only difference is that `ACTION_UNSELECT` is used for the `COPY` action.
I'm curious why this is needed.
Why not using the `ProductExistsStrategy` here as well?
I think this should be `ctx.User.Id`
I don't think this should be in the config package, it's only used in the tests.
This is the actual fix.
Should this be `ControlPlaneLoadBalancerSchemeClassicELBScheme`?
Why is this needed?
I think we need to pass the metadata to the validator, so we can use that for the validation errors
I'm not sure if we want to change this. It's not an error. I think we want to keep this as it was.
I think we need a new constant here, `SOLR_VERSION_CHECK`
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is not a good way to check if a capability has been set.
Why is this in the middle?

I think this is a bit too much for a query string. It would be better if we had the full user data in the query string.
I think we can just remove this line.
This is the same as `ordering = list.map { |x| x[0] }.sort_by { |x| x[1]}` but it's not clear to me what this is for.
This is a breaking change for the controller action. I'm fine with this change if you think this is ok.
This is not needed, it's already defined in `protoPort.IptablesNATOutgoingInterfaceFilter`
This is not correct. It should be 40, not 40.
This is not a good idea, as the metrics are not used by the writer, and the metrics are only used for the field writer, so we don't need to add this to `FieldMetrics`
I think the message is a bit confusing, as it's not clear that the exception should be thrown.
I would suggest to avoid using wildcards.
I'm not sure if this should change. I think the username should be `CREDENTIALS.user`
This will not join the current thread. You need to use `joinable()` to check if the thread was already joined.

This is the new example.
I think it's worth to have a test for this, as the crash is not a valid value for this flag.
Why is the default empty string needed?

I don't think this change is correct.
I think we can remove this line
I'm curious why the changes here are necessary?
no-unused-vars: 'React' is defined but never used
This is not correct. If the user sets the cgroup memory to MemoryUnlimited, it means unlimited memory.
This is a bit weird. I would have expected `props.totalFileCount > 0 && props.maxNumberOfFiles > props.totalFileCount`
This is not used anywhere.
This line is the actual fix, not the actual fix. The rest is just cleanup.
Why not `std::size_t const`?
I think we should keep the `ConnectID` here.
I'm not sure if this is needed, but I don't see it used anywhere.
Can we deprecate the updateTime in ExecutionReference class?
I think this needs a `name string` parameter to make sure it gets used in the tests
I'm not a big fan of this change, I think this is the right place for this.
PRIVATE_SUBSCRIPTION_MULTI_TENANCY_ERROR(
I think we should still throw `NoSuchElementException` when empty.
@karmacoma @karmacoma is this the right place to put this?
Why did you remove this?

I would add the exception message here, as it is already in the exception
E501 line too long (119 > 115 characters)
This one should be reverted.
This seems like a reasonable default. Is it worth adding a `.option(SparkReadOptions.LOOKBACK_TIMEOUT, "0")` so that the default value is not set?
I think it's better to do `if 'text_font_size' not in element.style` here.
This is the only place where we need to initialize these. We can just initialize these as `nullptr`, and then remove `#endif` from the header.
I'm not a fan of the `axe.utils.escapeSelector(node.id)`. I think we can just do `node.id`.
nit: I think we can just use CallReqMeta directly.
This should be `countlyCommon.formatTimeAgoText`
This is a bug fix. The compare should be on the right side.
Is this a typo?
Why did you change this?
I think we should also allow `mainnet` for beta, since it's a private DNS. I don't think we need to allow `beta`.
This should be the assembly of the calling type, not the type.
I'm not sure if this change is correct.
Why is `val.via.str.size` not needed here?
This is not correct. The default is `false` and it should not be set.
I think this is a bug in the old code, as the managerId is not the same as the employeeId.
I think this is not needed anymore
This should be `#ifdef`ed, not `#if defined`ed.
This is not correct. If we have a transaction, it should be a database transaction.
This is a new feature. I think this is the only place where we need to add this parameter.
I think we need to check the result of getuid() and set it to false when it is 0.
This should be a `ValueError` if `notifyObjectDeletion` is `False`. Otherwise, it will just silently fail.
This is a good change, but I'm wondering if we could just log the request body instead of logging it. I think that would be more useful.
@jywarren I'm not sure if this is the best way to do it, but I think it's a better way to check for a case-insensitive humanization. I'll look into it.
This should be in the `init()` function as well.
I think this should be `other` instead.
Why do we need to change this?
I don't think we should remove this, it's not needed
I think this should be `read.split.partition-by-partition`
Why this change? It's not related to the rest of the change.
I'm not a fan of the word "chunk" in the package name. I'd prefer to see this in its own package, like `chunk.soc` or `soc.validator`.
This is a user-error, so I would expect it to be `USERNAME_REQUIRED_PASSWORD_REQUIRED`. Also the wording should be more specific.
I don't understand why this method is public, it's only for testing.
I think we need to add a `ThrowIfAborted()` overload to the base class to make sure we don't throw.
This is a hack, it's not needed.
I think we should also do this for `nuspec.json` as well
This is a very minor point, but I think you can just do `if provider.storage_class_header:` here, no need to check if it's None.
I would suggest to use a `long` here, since the `timeout` field is a long.
I'm not a fan of the wording of this. I think it should be "if regionHint is an empty string, the BucketRegion will fallback to the ConfigProvider's region config" or something similar.
This should not be sanitized
This is a little weird, but the `ApplicationKind_value[k]` is a map of strings to `ApplicationKind`s
This should be a pointer, so we can set the default value to the time it's created in the options struct.
I think this test is redundant. You can use a selector that is not unclickable by default
why do we need to marshal this?
This should be `EmitEvent(InstanceStartEvent, newInst)`
I'm wondering if it would make sense to add a permission to the archive role, since that is a user-specific thing. I think it would be better to have a permission to archive the role, rather than a permission to delete a user.
I'm not sure this is a good idea. I would prefer to use `m.Combo("/avatar")` instead.
This is the only place where we have a `file` check in the codebase, so I'd rather not add it here.
This change seems unrelated.
I'm a bit confused about the use of `/home/weavewait/weavewait` in the `weave` command. I think it should be `/home/weavewait/weave`?
I'm not sure why this change is needed. I think the `package` property is only available for integration tests.
Why do we need a threadsafe interface?
This is not correct. It should be `./tools/actioninjector.v2/gentsfaddrs.yaml`
I think it's better to use `@outputter.print_action_result_if_ok` instead.

This should be in a finally clause.
I would suggest to use the term "remote" here. "remote" is too general. We don't want people to use this for anything other than the local repo.
Why do you need this?
This is a change from info to finest.
Why did this change from an `int` to a `int64`?
I don't think this is necessary.
This is a good catch. But I think we need to handle the error here.
This is the same as the line above.
Why is this necessary?
This function name should be changed to `ReportUndestroyedInstanceObjects`
I think we should change this to `MongoGridFSStreamError`
I think this import can be removed now
I think we should just have a `TraceSpan` interface that has this interface and delegates to that instead.
We need to add this to `configurable.json`
This should be a separate command.
I'm not sure if this is the best way to handle this. I think we can just add a new method `print_ranges` that takes an Array of page ranges and calls `bridge.print_page(page_ranges)` with it.
I think this constructor is no longer used
This should probably be `0xd4d0c1` instead.
This is the only test I can see.
This method should be `@FunctionalInterface`
I don't think we need this. The base processor already has a method that returns a function that is called on each metric item.
I don't think we should use `127.0.0.1` in the test code as the backend address.
This is a bug. `SYSCALL_NUM_MARKER_BSD` is set to 0x2, so it should be `num_raw & SYSCALL_NUM_MARKER_BSD`
Why is it disabled?
I think we should add a log here to indicate that this is the base fee.
I think it's better to have this as an array of `constexpr char`.
This is not used anywhere, so please remove it
I think this is a bug. The context is not updated when the Eth is updated.
This is the only place where we have to propagate the error. If the callback throws an exception, we should propagate it.
why not `private final` ?
This is a breaking change. The old code was correct.
nit: this is not a line continuation, it should be a continuation of the previous line
I think we should keep the exception in the message
nit: this is probably a good time to move to a separate commit.
This is a little confusing. Why not call this `targetDbForSaves`?
I think this should be `self.num_labels`?
Should we make this public for now?
I think this is not needed anymore?
@barklund I think this is a bug in Safari. The first Blob in the array has a 'type' attribute which is empty and we need to find the first Blob that has a 'type' attribute. This will break the video. I'm not 100% sure what the correct behavior is.
Is this intended to be here?
I think this should be `>=` instead of just `>=`.
Shouldn't we also check `info->exited_normally` here?
This is not the right place for this fix. It should be in the `<progress>` element instead.
This should be removed.
This one is not really necessary. The log level is already at `info`.
This is the only line that actually does the job. It doesn't have a test.
This is the only change in this file.
dal::preview::spmd  preview
This is not necessary.
I think this needs to be `0b01000000`
This should be reverted.
I don't think this is needed
This is not a valid response. You need to set the `return_value` here.
I'm wondering if we should use `check_output()` here, since it's the first line of the script?
I don't see how this can be nil
I think this should be `reason="Broken due to yaml safe load"`
I don't understand this change. Why is this not a Random? Also, I don't see any tests that verify this.
I don't think we should be using `ordered` here. This should be a `set` operation.
I'm not sure if this is correct, but it seems like we should use `String.format` here instead of `String.format`.
@smitpatel I'm not sure why we have changed the name of the properties here. Is this expected?
I think we should rewrite headers only if the user specified headers. This would allow to rewrite all the headers even if they have already been set.
I don't think this is used?
This should be removed.
I would prefer a `switch` here, but this is fine.
nit: I think we can use `keyValuePair` here.
This is a bit weird. Why do we need to return true?
Can you add a check that the shared volume is set correctly as well?
Is this a TODO for a future release?
Why are we removing the `info` level?
This should be removed.
This is the only change that I'm concerned with. I don't think it's a breaking change, so I'm fine with it. I don't see any other changes that are required to make the change.
I think this should be `sh.export` instead of `sh.export`
I'm not sure this is the right way to check if the block is in process. I think we can just do it in the `if` above and remove this check.
This is a bit weird, why not just use `pendingConfiguration.host`?
I'm not sure we should be importing this from `@storybook/utils`.
This is not needed anymore, right?
This import should be in the `android` group.
Remove the semicolon.
I don't think we need the `application_name` parameter. We can use the `Application#name` method instead.
This is not a panic, it should be a log.Fatal
I think we should check the role here.
I think this test is not necessary, since it is not checking for the disabled button, and the button is not clickable.
I think this should be `GoGapicContext`
Why did you change this?
This is the only test that needs to change.
Why is this changing?
Why not `if (caster && target) {`?
This is not a user level menu, it's a user level menu. I don't know if we should change it or if we should keep it.
This should be `\d`
I don't think we should be swallowing the exception. If we want it to be retried, it's better to just log and ignore it.
I think it would be better to use `fields` here.
I think this should be `assert str(dt.max(f.A.max())) == str(f.A.max())`
I'm not sure about this one. The name of the field is the fully qualified name of the type.
Should this be a file path?
This should probably be called `of` instead of `ofObject`
This is not correct. We want to add the tracer to the service. We should also add the tracer provider to the service.
I'm not sure this is the best way to do this. I'd rather see the `if` statement below set the lastId to 0 and then set the lastId_ to the wal_->lastLogId(). This way the code is more readable.
This function is not used.
Please add space after the comma
This is not needed, we can remove it
I think this can be removed.
This should probably be in `azkaban.utils`
I think we can remove this now?
I'm not sure why you drop table and create the table twice. I would expect the table to be dropped when creating the tables.
This change is because `incomplete_trails` is not included in `completed_trails`, but it's included in `completed_trails`.
nit: `storageVer` -> `storageVersion`
I think we should add `@AutoCloseable` here
This should be done in the kernel_shape calculation.
Is there a better way to switch between benchmarks?
I think this should be a boolean.
Is this a real Ruby type?
This import is not necessary
I think we need to add this to the `startup-script` section of the `setup.json`
I don't see how this is used.
I think this is a little confusing. What is the difference between these two?
I think you can just do `return subSequence(beginIndex, endIndex);`
nit: I think we can just remove `!==null`
Why is this a string and not a duration?
Can we make this `2018.12`?
I think this constant is not necessary.
This is a bit confusing. Maybe `web_debug_port`?
I'm not sure if we need to rename the route, as we don't have the `label_as_` action.
I think we should use `dataDir` here.
This function should be in `utils/sql.py` and not in `utils/utils.py`.
I don't think we want to return an error here. If the column is not INT or TIMESTAMP, we should just return a status error.
I think this is the only place where we're doing this. If we're not going to do this, then I'd prefer to just remove it.
I'm not sure if this is the best approach. I'm not sure if we should be disabling this for all analyzers.
I would put this into a const.
This is a bit confusing. The issuer is a trusted key, and subject is the subject of the request. The subject of the request is the subject of the request, not the request.
This is the only place where we have the `Error` header. We should be consistent with the rest of the code.
Should we also check that `desc == NULL`?
I don't think this is used.
This should be `assert cfg.nms.get('nms_type', 'nms') == 'nms', 'GARPNHead only support nms.'`
This was a bug. The dialog was never showing when the dialog was not opened. The promise returned by show is not resolved, and it was not being handled by the dialog.show call.
I don't think we need to set the state db adapter for fairbank.
I think this is a bit too long for a sentence. Maybe "A mode that interacts with text in a flat representation that can be navigated with the cursor keys like..."?
I don't understand this. If the user has a higher number of items in the list, then the more menu item is visible and the selected index is higher than 5, the more menu item will be displayed.
This is the only thing that was causing the crash. The rest are just cleanups.
I would use `time.Second` instead of `time.Millisecond`
This will break the rendering of the bookmarks pages. You'll need a `<li class="bookmarksLink">`.
This will log a warning even though the resource list is empty, right? I think we need to return success or failure here.
I'm not sure this is the best way to go about this - it's not really a message, it's a message that is created by a bot. I think it's better to just use "Broadcast" or "Create a new message"
Should we deprecate this? It's a little confusing that we have a `TransitionDependencyMap` and a `ContainerDependencySet`.
I think this should be `(AttributeError, KeyError)`
This is not needed, it's already in `Editor`
I think this was a bug, because `@user.org` was always present, but `recipient` was always present.
I'm not sure if it's a good idea to hide the link when it fails, but I don't think it's a good idea to hide it when it failed, since it's a hidden link.
This should be a `if` instead of a `if` as the `if` will always evaluate to true.
This is a little bit weird, why do we need to debounce the callback?
This should be renamed to `CStorPoolInstance` to match the other methods.
Why not just use `getCode()`?
I think we need to keep this line.
I don't see a need to pass the `inputEl` here, you can just do `const { h } = hyperx`
This is a little confusing, since it doesn't cache anything. I think `if res.Status != keybase1.BlockStatus_ARCHIVED && res.Status != keybase1.BlockStatus_UNARCHIVED {` would be clearer.
This is the error code we want to return in the error message
I don't think we should change the public API.
I don't see where this `addtransaction` argument is used?
@jreback do we have any issues if we do not use old pickle for the new version?
This is wrong as it will replace the last element of an array with the second element of the array.
This is a bit confusing to me. Why do you print the argument type, but not the type of the parameter? It seems like you're printing the type of the parameter.

Please use `__METHOD__` and add a `use` statement for this class.
I'm not really sure if this should be passed as a constructor arg, but if it is, I'd rather not add a new constructor argument here.
I think these should all be defined in `pkg/spi/pin.go`
I think this should be an error.
Should we rename this to `TraceparentHeader` to make it clearer that it's for tracing and not for tracing?
I think we can remove this function and just use `filepath.Rel(wkdir, fullPath)`
please avoid wildcard
This is a bug, it should be `{Unary: "outboundservice"}`
This is the same as in the `step_mailer`, can you use the same method to get both?
Why did you remove batchSize? I think we should keep it, but keep it as null.
I think you can use `Stripe::Customer.update_attributes` here
This change looks wrong, but it seems like the port number should be a `sizeof(int32_t)` instead of a `char`
This should be a pointer, and not a slice, as the type already guarantees that.
This should be a method on `CommandlineParser`
I don't think this is correct
nit: I think we can just use the constant directly here, since it's used in a few other places.
This class is unused.
I think it should be `begin` instead of `begin`, because it's a bit confusing.
Why is this needed?
Use the new Ruby 1.9 hash syntax.
This is a bit of an anti-pattern. I think we should have a separate endpoint for this, like `getSessionQueue`.
nit: `pendingNumDocs.get() + addedNumDocs`?
I don't think we need this. The `curl_with_retries` will do it for us, and the retries will be the same.
This should probably be `labels parser.Labels` to be consistent with the other methods
This function is not used anywhere.
I think we need to check for the existence of the topic here. Otherwise, the topic will be created with the same tags but the tag resource would fail.
I think we should add a `use` statement here, otherwise we are introducing a new dependency.
This is the same as `pvt_small.pth`
I don't think we need to log this error anymore. The error will be displayed in the logs anyway.
I think this should be called `PublishPubsub` or something similar.
This should be an error.
This is not a new requirement, right?
I think this is a good idea, but I'm not sure if we should use the word `wordpress` as the package name. It's a bit confusing to see `lodash` in the package name and then `lodash`.
I think we should use the same pattern as in other places where we notify on the stripe events. I think we need to change that too.
Can we add an assertion here to make sure that the profile is updated as well?
I think this is a typo.
I think this should be `config.Default.DB.GetDB()`?
I don't see this being used anywhere.
I think this method is useless
I don't think you need this, since you are already adding `--export-fixes` to the `analyzer_cmd` above.
This is the actual change. The rest is just renaming the field names.
This should still be `port`
Why do we need this? - as opposed to just calling the static method in FileUtil directly? - L.A.
I think this is not needed.
I'm not sure if this is the right place to check if the allocation is supported. I think it should be in `IsAsleep`, not here.
This should be "the" instead of "the"
Can't we do this with the default schema?
I'm not sure if we should use this value. I think the default value should be 30 seconds.
Shouldn't we check the error here?
I'm a bit confused by this. Why are the teams being passed in the command?
I think we can use `short` here.
Whoops, this is a bad test. It should be false.
I'm not sure if we want to set this to `us-east-1` or `east-1`
This is a bit confusing, since it removes the node from the DOM, but it doesn't really remove it. Maybe something like `removeParentNode`?
This change is wrong, as it's not a boolean
This change is wrong, it should be `\Doctrine\ORM\Column\DateTime` (and `\Doctrine\ORM\Column\DateTime` should be `\Doctrine\ORM\Column\DateTime`)
I think this should be `hasCapabilities`
This is a typo.
I think we need to add an `IMvxViewHolderAdapterBindable` interface to support `MvxRecyclerAdapter`
nit: I think it would make sense to pass a `map[string][]string` instead of a `[]string`
I don't think that's what we want here. We want to skip fields with `$schema`.
This import is unused, please remove it.
This is the same as `return entity.hasOwnProperty('$$hashKey');` right?
@martin-eeley - I'm not sure if it's the right way to check for this. I think we need to set `last_thread_tls_exited` if the thread is already exiting.
I don't think you need this anymore.
I think it's a good idea to keep the old values for the trace IDs, as they are more important to track down.
I think this should be a constant.
This should be implemented in the base class, not the base class.
I think we should check if `isNestedProperty` is true
I think this should be `*flash_count`
This is not needed, as it's already available in the scope.
Why is the comma removed?
Please revert this change.
This is not used anywhere.
This looks like a bug.
This should probably be a static method on the class.
I don't understand this. Why are you removing it?
This should be moved into the `java.util` package.
This should be `False` by default, right?
I think it's better to use `strncasecmp()` here.
This is not correct. If the player is in the store, the inventory weight is not added. If the player is in a store, the weight is not added.
I don't think this should have an empty line.
I think we need to use `expect` here instead of `and_receive`
I think this is a typo.
I think this is a bit misleading. It doesn't close the connection, it closes the connection and closes all connections.
I'm not sure if this is the best place to put this, as it's a configuration that is not specific to the prober.
This should be closed when the app is done, not when it's stopped.
I'm wondering if this icon is still needed.
Is this the only way to detect the AVX-512 code in use?
Why do we want to retry at 3 times?
Why is this here? It is not used.
This should probably default to `None` as well, right?
This is the copyright header.
Should this be called `FlushActivityAsync`?
I'm not sure we want to log this. It's not a user-facing error, so we should just be logging it at the debug level.
Why not make this readonly?
I think this should be `false` now?
missing a space
nit: this could be const
Is this necessary? I don't see how this would prevent a deadlock, but it seems like we'd need to do this in the case where the parser is running, but the parser thread doesn't have enough time to wait for it to start.
Shouldn't we add a check for nil here?
I don't think that this is a good change, it is a BC break.
I think this should be `log.debug`
I don't think this is needed. The test 3 is already part of the example.
I think this is a breaking change. We should keep the old route and add a new route to verifyToken.
This is the only change I'm not sure about. It seems like it's a bit of a change to the controller.
Use 2 (not 0) spaces for indentation.
I think we should use `mode.to_sym` here.
This is not a typo.
I think we can remove these two methods, since they are not used anymore.
I'm not sure if this is the best way of doing this, but it's a bit odd to me that we're checking if a node is a block device.
This is not needed.
I don't think you need this.
I think this should be `options.update(print_options)`
This is a good change. I think it would be better if you could use the same approach as in the H2O_PROBE() call, but I'm not sure.
I'm not a fan of changing commands like this. We should keep the old command.
I think we need to update the `UpdateService` method as well.
nit: `HIDDEN_COLUMNS` -> `HIDDEN_COLUMNS` (for consistency with the other constants)
I think this should be `modules/data-store`
This should probably be set to false in the `[plugins.cri.containerd]` block above.
I'm not sure this is the best place for this migration. I'm not sure if it should go into `product/migrate.rb`, or if it belongs in `products` or something like that.
I'm not sure if we want this, it's just to make it more clear.
I don't see this being used anywhere
This is a little hacky, but we should probably have a more robust approach.
Why is this change necessary?
This method is only used by `read`, so I don't think we need this method.
Why not just `except OSError`?
This is a little confusing, I would call it `reverse_caret_selection`.
This is not needed anymore. The user will be set in the session.
This should probably use the same path as above (and the file name should be the same).
nit: I'd call this "Truncation"
I think it would be good to have some tests for this component
This seems to be a pretty high value, maybe we can set it to a lower value?
I'm wondering if this should be a function.
I think this is a little too much for a validation. I think the validation should happen in `populateLogger`, and then the `substitute` function should be called here.
I'm not sure why this is in the cli, but it seems to have been added to the wrong place.
I don't think we want this change. The only reason I can think of is if the `OSTREE_REPO_MODE_BARE` was set to `OSTREE_REPO_MODE_USER`, and the `OSTREE_REPO_MODE_BARE_USER` is set to `OSTREE_REPO_MODE_USER`.
Shouldn't we return here?
I don't think this is the right place to put this. The test is only checking that it's on the server. If the server is on a different server, then it should be in the gauntlets table tests.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
@michalkurka I think we should check if `jobInfo.cancel` is `1`. I'm not sure what the `1` value means here, but I'm also not sure what the value should be if the job was cancelled, but it's not clear to me.
This is a CStorVolumeReplica phase.
Why not use `ConfigQuery::checkAvailableStock()`?
Why is the type of the `Stdin` parameter needed?
`toArray` is not very descriptive, maybe `copyFrom` would be better.
This seems to be a duplicate code from the `Setup` method, could we extract it?
This is a breaking change.
This should not be deprecated, as it's not really a public API
This should be in the same block as the other import.
I think we can get rid of this. We can use `:transports` directly.
Why is this change necessary? I think the previous version was better.

This is the actual fix for this issue. The rest is just refactoring.
Why not return an error instead of returning a nil slice?
I think it's better to call this function `GetDefaultDockerVersion()`
nit: I think we can remove the `or for more`
This is the only change in this file. It's just a typo, it should be `Every swagger/configuration must`
nit: I think this should be `MockSettledDeposit`
I'm not sure about this change.
This was a bug.
I think we can remove the `MvxGuardedLinearLayoutManager` class now.
I don't see this flag being used anywhere?
Is this a bugfix or a fix that should be in a separate PR?
This should be `assert.NoError(err)`
I think we should have a default value for this.
Why is this change required? I think this is the reason for the failing test case.
I think we need to do this in terms.bytesEquals() as well.
I don't think we need the loop. We can just iterate over `attestedData.Type` and check if it is a plugin.
This is the only place that I see `read_args_impl` being used.
Why is this constant defined in this class and not the other way around?
I'm curious why this change was made?
Why is this change needed? It seems like the block handler was using `HandleNewBlocks`.
This is a good example of how the error message looks.
Should this be `:hosts_file => 'notafile.yml'` ?
This is a bug, fmt is not an array.
I think it would be better to make the default value be `release` instead of `dev`
:bulb: This is code &rarr; `////`
This is not a valid cron schedule. The name of the schedule should be something like "DagsterSchedule" or "Cron Schedule"
I think this was the cause of the flickering issue, so I removed the line
I think this should be `checkCompounds`
"In the event a condition returns a Promise, the polling loop will wait for it to be resolved and use the resolved value for evaluating whether the condition has been satisfied."
I'm not sure if this should be `pages#show`, `pages#show` is the default action.
I'm not sure about these changes.
Why is this change needed?
This line should be removed
This is the same as in FragmentCache.cs
Why remove this memoization?
I think this should be `removeChild`
Why not use the `errors` package?
I think this should be called `cstorRunTemplate`, since this task isn't running
I don't think this is needed
I would prefer to not have this in the configuration. We can always set it to 0 if we need to, but I don't think we have a way of doing this in the configuration.
I think the `reindex()` function should be changed to return an `Error` object, not an error.
I think you can use `.removeClass` here
This should be a constant, not a string, as it's only used in the `create(String url, Properties mysqlConnectionProperties)` method.
I don't think we should be creating the roles if they already exist.
I think this should be `http://` instead of `http://`
I think this is a bit too generic. What about something like "View all of the #{show.name}"?
This is a bit confusing, as we are not using the port for frontend and matching, but for matching we use the port for frontend and matching. Can you rename this variable to something more specific?
This lock is not needed
I'm not convinced this is right. It seems like it should be `connection->attempt->process_block (block, known_account, total_blocks, block_expected);`
why do we need this?
This class should be in a separate package.
This file is not used anymore.
This is the same import as the one in `duck.go` - can we consolidate?
I think we should set this value to `false` in `orderData` instead of `null`, otherwise the user will be able to create an order without administrator
I think it would be better to import the module directly.
This should be a const
I'm a little concerned that this will cause a problem for the application that is already in the middle of the push stream. I think the right approach is to make it so that it's not possible to have the push stream open before we start the push stream, and then we'll just set max_open to the maximum number of streams we've opened. I think we should do this in another way: * If the user has already opened a stream, we'll set max_open to the maximum number of streams that we have opened, and then we'll set it to the maximum number of streams we're currently
@Fryguy this is what I was talking about.
Should we add an overload that takes a `RequestId`?
This should probably be `write.parquet.filter.max-bytes` to be consistent with other config options.
The original line should be kept.
This is not a v2 analogue anymore, so I think we can remove it
I think this is not needed, since we don't return any flows.
I don't think we want to change these.
this is not the correct value. the precursor is used to compute the explicit ce
I'm a little worried this could be expensive. Is there a reason to do this?
This is the same as `self.context.shared_ids`
Nit: I think we should return `nil, err` here
This is a wrong change, the license should be `* <p>http://www.apache.org/licenses/LICENSE-2.0</p>`
I'm not sure if it's a problem, but it seems like the `if` statement above is missing a `!`
This is the only place we use `collection_to_single_partition`. I'm not sure what's the best place for it.
This class does not seem to be used.
This is the only thing I can see that could cause the test to fail.
This should be a private method, not a public method.
I think we need to add `lock (LoggingRules)` here, otherwise we're locking on a thread-safe list.
This should probably be `pser_or_pdf.drop(keys, axis=1)`
This is not the right place to put this method. This is the same as the one in the `inventory_file` class. It should be moved into `inventory_file.rb`.
Should this be a class variable?
I don't think we need this `[rest]` param.
I think this should be package private
Why is the `list()` call necessary here?
Why do you return 0,false here?
Line is too long. [83/80]
We should update the active class to reflect the change.
Why is this change necessary?
I think this should be called `MarkdownWithIndent`, since it's not just a Markdown
// return true
This should be in `server/sql/plugin.go`
This should be a `uint`, right?
This is not a good name. The service is not a destory. It is a service that is being destroyed.
This was the only place where the default value of the `TELEMETRY_ENDPOINT` was used.
I'm not sure we should log this at `Info` level, as it's an error.
This is the fix.
this seems unnecessary
This is the only place where we need to pass the props. We can just get the url directly from the ZkCoreNodeProps.
I don't think we need this.
This import seems unnecessary
Please remove unused code.
Why is this method needed? It's not used.
Is there a reason to not use the same buffer size as the controller manager?
This is not needed. Buffer is a required dependency of the Buffer class
This is a map from chain names to a slice of rules, not their hashes. This is a map from rule name to a slice of rule hashes, and the rule hash is a string. The map is used to map the rule hashes to the full rules.
This will break the description for `None` as the description can contain a `''`
This should be in a try/finally, so that if the delete fails we won't delete the file.
I think we should use `org.slf4j.LoggerFactory` instead of `org.slf4j.Logger` here.
This is a bit of a nit, but I'd prefer to use `.min` here instead of `to_f`.
I think we should move this to `test/fixtures/setup.js`
I think you can use `NewReplacer(r, r.URL.Query(), "")` instead of `NewReplacer(r, nil, "")`.
Should this be `Using WebDriver after calling quit()`?
I think this should probably be `@pinwheel_pattern` or similar. The pattern for the `-` and `-` are pretty much the same as in the other two.
I'm a little worried about this import. I think it might be a good idea to move this to the top, and then use `collections.OrderedDict` instead.
This should be `requireEach(inRange(1, 10)).defaultValue(...)`
This dispatches `getAccounts` twice, one for web and one for amp.
This is the same as `self.source_conn = ServerConnection(source_address)`
This is not needed, as it's already handled by the `if` statement in line 233.
Why do you need this line ? The user object is created by the `get '/auth/myusa/callback'` method.
I would suggest to use `GenerateCode` here instead, as it will generate the code snippet for the method.
This is not necessary.
I would use the `FileNotFoundError` from `salt.utils.errors` here
I think this should be in the second group.
I would prefer to have the factory be a method on `IRewardCalculator` instead of a function.
I think the name of this struct should be `RuntimeConfigurator`
I think we need to add a `@Deprecated` annotation to the method.
I'm not sure if this should be done before we serialize, but I think it's fine.
Why is this necessary?
I don't think it is a good idea to return 0. I think it should be the default score. I don't think this is used anywhere else.
Why remove this?
I don't think this is correct.
I don't see the snippet-start directive here

I'm not really sure if this is the best way to do this. I think it would be better to just add a `getAddonPaths` function in `addons.py` and then call `getRunningAddons` here.
I don't think this should be changed
This is a bug fix.
I think this is a good idea to have. But I think we should add the `-c` to make sure the `/bin/sh` is working.
Why is the `Accessible` removed?
This is not the right place to do this. You should be calling `updateColumnsMapper` in `updateHotColumns`.
I think we should set the errno here, and only set errno in the case of a non-zero fd.
I think we should add an `:timestamps` option here. I don't think this will work with the current default index.
I think we should be using `github.com/strk.kbt.io/projects` here
I think we should log this as debug
I think this is a bit misleading, since it's not the on-instance level, it's the driver level
I'm wondering if this class should be called "alphaPicker-fixed-left" to be consistent with the other classes.
nit: I think it would be better to have a single function `func (b *ClassicELB) IsUnmanaged(clusterName string) bool` and then call `b.IsManaged(clusterName)` on line 346.
I don't think this is the right place to put this. This should be a list, not a dict, so the `.get` calls should be inlined.
This should probably be a pointer, since the value is never nil.
"permanently deleted, this action cannot be undone."
I think it's better to use `AutosensResult.AUTOSCENS` instead of `"autosens disabled"`
This is the same logic as in the `edgemessagelayer/controller.go` file, I would prefer to have a function that returns a string and a function that returns the string and an error if the source is not `DynamicControllerModuleName`.
I would prefer `applicationName` as a name.
I think we can remove this line
I'm not sure if we want to use StringBuilder here.
This was a bug in IE9, so I removed it.
`/* defaultReturn = false */`
This seems to be the only change in the code. Is there anything else we can change?
This is the only place where we need to reset the timer. We could just set it once when the connection is received.
I think you forgot to remove the BOM here
Why was this removed?
I think this will fail if the kernel is not found.
I think we should be checking for `name.blank?` here as well.
This file has a lot of unnecessary imports, can you please remove this one?
Shouldn't we also have a `DNSName` and `URISAN`?
This is a bit of a nitpick, but I'd put `.` at the end of the line.
This is the only part I'm not sure we need to add. The client can access refresh token by using a different path. The client can be redirected to the login page if the refresh token is not available.
This is a test for the nextcloud integration, not the webdav one.
This is a bit weird. I think we should just always call app_memory_pre_alloc.
Space missing after comma.
`if text:`, `if caption:`, `else:`, `if text:` and `if caption:`
This is the actual fix.
This is not used anywhere, can be removed.
I think we should also add this to the `PrimaryExpression::::=` list below.
Is there a reason to use a regex here instead of a regular expression?
I think you can just use `if (transformer != null) transformer.finish();` here.
`peerID` should be `string`
This should be in the `image.go` file, not `image.go`
This should be `rfp_inplanes=None,`
This is not necessary, since we already have a check in `init` that checks the BPF mode, and we don't need to call `syscall.SyscallSupport()` if the BPF is disabled.
@janmeier I removed the bPaginate flag, because it's not needed anymore.
This code should probably be removed.
I think this should be `prometheus_metrics`
I think we should add a check here to make sure that the client is not sending a reply that is too large to send.
I think we should use strcmp(P->short_name, "s2")
Why is this needed? Is it because the plugin is v1 and the v2 is v2?

I think this should be a `static` property instead.
This is not a good place. We need to have a central place for this, so we can add a hook for it in the future.
Why did you change this?
This is the only place where we need to add a new translation string. The `dialog_connection_edit_wizard_conn_conf_network_link` string can be used instead, and it will also be used in the `dialog_connection_edit_wizard_conn_conf_settings_link` string in the UI.
I think this is a bit too much for debug, since it will be logged everytime the window is increased.
I'm curious, is this a debug statement or just a debug print statement?
Should this be `continue`, or is it ok to return?
I'm not sure about this. I would rather see the value of the min_size passed to the function than the caller.
This test doesn't really test anything useful.
I think we should keep this at `info`. It's a bit more verbose, but I think we should keep it.
I think we should move this to the `qt` module instead. It's a bit weird that this is defined here but not used in the `main` module.
I'm not sure if this is the right way to handle this - I don't think it's a good idea to have a timeout for a long time, since the context is cancelled by the caller. I think we should be using a context for the whole operation (e.g. `ctx, cancel := context.WithTimeout(ctx, timeout)`).
I think we need to change the message to be `messages.delete_form`.
Can we use `this._isEmpty` instead of `Object.keys` here?
Why is this needed? The old strings are already UTF-8, no?
I think we need to add `IndexDBPath` to the config.Config as well
I think this should say `query limit %d was larger than max query limit %d`.
I don't think you should remove this line.
Please add a `versionadded` directive
I think you should use the `:base` here.
This should not be changed
This is the same as `commands.get` except that we're not using the `command` parameter.
I think you need to change this file to use commons lang.
This method is not being used anywhere.
This is a bit confusing. The `d.Month()` method is called `Month` and `d.Nanoseconds()` is called `Day` and `Hour`. I think we should be consistent here.
This is not correct, the encoding is not the same as before.
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
I think this is not needed. The `n` is already a string.
Why this change?
This is a bug fix.
I think we should move the `for _, cs := range s.chainservices {` up to where we start the p2p agent
I think we can remove this line now.
This is a bit confusing to me. I think the `auth_to_access_callout_text` should be the content of the Callout, not the text.
This error is not returned, so you can remove it
Please remove this line
This should be translated as well.
I think you need to keep this line, otherwise it's not used.
I'm not sure if this is a good idea. I think we should be using the same string format as in `NLog` and `NLog.Layouts`. We should probably have a single test that uses the same string formatting as `NLog` as well.
I think this should be a method on the packer struct instead of the Packer. The packer should not care about the size of the header.
Why did we remove the V1?
Why is `selectAll` removed here? I think we need a better place for it
I would move the `err != nil` check before the `unpack` call, so we can avoid the extra call to `unpack`
I don't think we should change this. It is not necessary.
I don't see any `assignee` association in the PR
I think you can remove this line
This is a bit of a misnomer, as it doesn't return the security button. Maybe `browse_security_project`?
I don't see any new files here.
I'm not a big fan of this, but this is fine for now.
I think it's better to add a `# TODO: ...` here.
I'm not sure if this is the best place to override these.
Should we add a `omitempty` annotation to this?
This is a breaking change.
Line is too long. [82/80]
This is a bit confusing to me. How about `ChannelStateInfo` or something like that?
This doesn't seem to belong here.
I think we can remove this line.
I'm not sure if we should use the fontWeight in the font size or the font family.
Should we also add the `grpc_service` port to the `service.go` file?
This should be changed to `node in node.body`
Should this be called `--user_id`? Also, it's a bit confusing to have both the parameter and the value.
I think it would be better if we could remove `timeUnit(uint32(d))`.
I think we should rename the parameter as well.
Is there a reason why you chose to check `backend->impl`? I'm not sure it matters, just curious.
This is a breaking change. We should not change the signature of a public function.
why is this necessary?
This should be a number, not a string.
This is the only place that uses `to_ts` - it should probably use `max_ts`, too.
I think we can make it `public abstract` and remove `mock` from `GrpcStreamingType`.
Should we use a different name here?
nit: `catchpointWriting` -> `catchpointFileWriting`

This should be deprecated.
I think we can just remove this line
F401 '.config.CFG_RELATIONSHIPS_NODE_ENGINE' imported but unused
I'm a bit confused about why this constructor is necessary. It looks like you're only using it to create a new resolver.
I think this is a good change. I'm not sure what's the point of this change. The original code was correct, because the `offsets` array was not modified.
I think this should be reverted
This is the only test that's failing, right, and it's not the storybook storyshot.
This is not needed.
I think we can drop this and use `CStorPoolExpansion` instead.
I think we should add this to `DefaultOption` as well
I don't think we should use `using` for type variables.
I think we can remove these checks. The test will still work if `YACC` is `:`.
I don't see the point in having this property.
I don't see any reason to add this new parameter.
Why is the replace needed here?
I think we should use `\RuntimeException` instead of the `GoneHttpException`.
This is the actual bug. The cookie is not deleted if it was not there. It should be removed when it's deleted.
I think we should use the `MathUtils.randomIntBetween(rowsPerAnimal, matchingRowsPerAnimal)`
This check is redundant. If `gJobMgr` is null then it will throw an exception.
This is a bit confusing. The `exists` argument is used to determine if a match is present, but this is used to determine if a match is present. I think the name is misleading. I think `all?` would be better.
nit: `hmPtr` can be const. Same for the other two instances.
I think this should be v0.4.0, since we don't want to support router-expose.
This is a bit of a nitpick, but I think the name of the test method is a bit confusing since it doesn't check the metric name. Maybe `health_metrics` or `metrics_check`?
I don't understand why you need this.
I'm curious, why did this have to change?
I'm not sure if this is the right place to add the ":". It's probably better to just add it in the `.tap`
Why is the `-` gone here?
This is the only change that I don't think is needed. The rest are just formatting changes.
I think we should add this to `AzkabanProps` as well.
This is a bit confusing, since we are using the session id in this function, but we are not using the response here.
This is a little unfortunate, because the `_IF_X64` function is not defined on all platforms. I think it's better to just make it `int`.
Why do we need this change?
`ArrPassing` is unused (from `deadcode`)
I don't think we should change these two lines to `setKeepSorted(UserPreferences.isQueueKeepSorted());`
Should this be platform.SiteRunning?
I'm not sure if this is a correct change.
This is a very expensive operation, as the mutex is only accessed in the constructor.
I don't think we should use `host['platform'].include? 'sles'` here, as it will be always true.
I think this is wrong - it should be `if exch is not None:`. The code below will raise `ValueError` if the exchanger exchange is not available.
I think it would be more helpful if we could say that it is a key with an ambiguous item, so that users know what to do instead.
Why do we need to do this?
This method should be renamed to `getUnfinishedFlows`
Should we rename the file to `NpgsqlConstants.cs`?
I think it's better if this method is synchronized and only returns the set of field names.
I would remove "Returns True if ..." and "Returns True if there is...".

I don't see a need for this. We already have a `Rootfs` field.
This is a static struct, so it shouldn't be a static function.
I'm not sure if we should have this as an option. I think we can always remove files.
I don't think this link is needed.
File is not `goimports`-ed (from `goimports`)
I think we should also check if the capabilities of the session are enabled.
Error return value of `ls.Stop()` is not checked
Why is this change needed? The original code was more correct.
Why is this change necessary?
This should be changed back to `../src'`.
I don't think this should be a public link
Shouldn't we add a validation that this is a list of IP addresses?
I think we can just add this method to the `gitClient` interface, and make it return an error if it doesn't exist. That way we don't need to duplicate the logic for the `ReportDeploymentCompleted` method in `gitClient`.
This will be the same query string that is used in the `queryRewrite` loop. Can you just use the query string in the loop and reuse it?
Why do you need this? It seems to me you're not using the `startMs`, so it seems unnecessary.
I'm wondering if this should be an error?
I think this should be `Holds::class`
I think it's fine, but it might be useful to log the reason for the connection close as well.
I'm wondering why we need this change?
I don't think you should be calling this here. You're calling it on the `createNode` call below, so you can just use `createElement.call(h)` here.
I don't think this is a good default. I think the default value should be `4Gi`
nit: `itemsize` is not a property.
I don't think these tests are needed anymore, since the default value is set in the `Config` struct.
Why do we need to define it?
I think it would be good to add the field name here as well.
Why is this being removed?
These two calls are redundant.
I don't think we need GaLatestWrapperRelease here

I would prefer `ar` and `ar-sa` as the option name.
I think this should be `!=`
I think we should use the `*` import here.
I don't think you need the `Snackbar` import, you can just use the `Toast` class.
I don't see any use of this method, so I'm curious if you had a reason to add it here?
I think this should be `1`
This is a good change, but we can't do it in this PR.
I'm not sure if this should be a separate index.
I think we should check for the error here too
This is a breaking change, we should add a note in the UPDATING.md to the UPDATING file.
missing space between if and (
I think we should keep it. It's a good thing to have it in case we need to close it.
This should be `name: "Dog"`.
I don't think this is the best way of doing it. I'd prefer to use `Mongoid.unit_of_work(disable: :current)` instead, since we don't want to disable the current unit of work in this case.
I think you can remove this TODO now.
I don't see how this can be a problem, but I don't see how this can happen.
This will cause a segfault.

using Microsoft.CodeAnalysis.Diagnostics;
I think this will be the same as before, but it's probably not a big deal
I think you should just do `maxSegmentsPerSegment=maxSegmentsPerCell or 255`, and let the `connections` default to 255.
I'm not sure this is correct. The user is a user object. The user object should be the user who is logged in. The ID is used to identify the user.
this->GetTarget() == this
I don't see why this change is needed. The event was added to the message, so the message is not sent.
This is not a good idea. You should not create the detections graph if the type doesn't have a name. You should create the detections graph if it doesn't have a name.
I think this was just dead code?
Please revert the formatting changes.
This should be `B1`
I think it's worth adding a `dbutils.ResetBucket()` method to the buckets migration interface to clear the buckets.
Is this a public API?
This will need to be changed to `Content-Type: application/x-www-form-urlencoded`.
This method returns `null`, which is not the expected behavior
I think this test should be removed. It's testing the count of the `diary_comment` object.
I think this should be `BuilderForTemplateObject(raw).Build()`?
I think this should be `atexit.register(pool.close)`.
This is the only change in this file.
Should we also check the minimum duration?
I think this is not correct. If this column is the name of the column, then that column is the same.
I think this should be `componenets: Widget`
I don't think this is correct, it should be the same as in the `else` branch.
Is this a typo or is this a typo in `value`?
This is the only change that I can see. The rest are just whitespace changes, so we should be able to remove this.
This is the only change in the PR.
This is the main change of this PR, the rest is just formatting.

I think this should default to False, since it will be set by default for all users.
Should this be `applyPreflightCorsResponse`?
nit: I think it is fine to return here, since we don't want to return from the method. But I think it's better to return here and then log the error in OnRegister.
This should be a `ByteField`
This is a change of behavior. Previously, it would log the class name, now it is a finetest.
I think we should call this "codeFlowLocations" instead of "stackLocations"
This should probably return an error.
I don't think this is a good change, it should be a directory.
I think this is a bit confusing. I would have expected `Bolt::Node::Success.new(result.to_json, 0)`
I think you need to call `super.method(:next_runnable_index_for)` here.
This should be `getInt("query/useCircuitBreakers", 1)`, as it is a boolean
why hard killer is not enough?
This is a bit of a nitpick, but it would make sense to use `wlr_drm_format_set_mod` instead of `wlr_drm_format_set_add`.
Is this leftover from debugging?
This is wrong. The layer is not a child. It's a parent layer, not a child layer.
I think we should keep the `None` check here, as `nvda.pyw` is the default.
I think this should be kept.
nit: this could just be a single line: return VerifySameTrustDomain(td, id)
I think we should also test the `CreateContainerExec` and `StartContainerExec` methods
This should probably be `ENV['RUBY_SOURCE']`
This is the test that needs to be updated to use the new filter
I think you should use the `force_text` function here instead.
Why remove the `uri` key?
This is a lot more expensive than it needs to be. I would prefer if this was done in a separate PR.
Can you move this logic into the `createStartWorkflowExecutionRequest`, so that we only need to do the check once.
F401 'listenbrainz.db.user as db_user' imported but unused
This is a breaking change.
I think we should use the same condition here.
I think this could be a bit more generic. What about a `path_to_parts(path)` function?
I think it would make more sense to have the route name be the first parameter, then the datasource route, then the route.
I'm not sure if this is a good idea. I think it is better to keep it as `info` because it is a bit more useful for debugging.
This is a weird import.
Why the trailing comma here?
`hasPath` is not used in this loop.
Why not just store a map?
This is the default value. We should probably add a `Default: 100` here.
This is a bit of a nitpick but I think it'd be better to call this `DropEncAPPackets`.
This is a bit weird to have a boolean flag. Why not have a boolean parameter?
I'm not sure this is a good idea, but I think this is a good idea. If we have a lot of nodes in a cluster, and we have a lot of nodes, then we'll get a lot of time to propagate, right?
This should be true by default.
I think we can remove this and use the existing `ConfigurationUtils.getBytes` method.
Why is this needed? I don't see any code in this method that does this.
I would call this method `init` and have it throw an exception.
This field should be `volatile`, as it is used in the other thread.
This should be a warning instead.
I think this can be removed now.
I think we should just use `options[:installer]` here. The installer will always be the same, and it's more consistent.
This should be done only when the layer is focused.
This is not a good idea. You should use `this.driver()` to get the driver object. This will be a good place to put it.
I think this is still needed?
I don't understand why you need to do this.
This is a public API, so I'd suggest deprecating it.
Should this be `fail_test_if_not_found`? Or is that a different thing?
Shouldn't the flag be set in the constructor instead?
I'm not sure about changing the setting name, since this is not a default. I'd prefer to keep the old setting name.
This is a good change, I just want to confirm that the change is intentional.
Why this change?
This was causing a `KeyError`.
This is not a test, it is a functional test.
Is this for debugging?
I think this should be `static`.
I don't see any reason why we need this ifdef.
This should be `Bitmask.valueOf(bitmask.intValue())`
I think you can just use `reorder` here.
This line should be moved to the top of the function.
Is it possible to have a test for this change?
Why do you use RSVP here?
I'm wondering whether we should also check for TLS here?
I don't understand what this header is doing, can you explain?
Metrics/LineLength: Line is too long. [83/80]
I think this can be removed now.
I'm not sure this is the right error code. I think we need to return the error code.
I think we need to add this in `setup` as well.
I think this file can be removed now, right?
This should be `defer res.Body.Close()` as well.
Why is this change necessary?
>PATH_TO_FILE [](start = 88, length = 9) path to file? #Closed
The `String.format` was removed in the `getString` calls in this PR
This should be `hasCapabilities` as it's returning a boolean.
Style/MutableConstant: Freeze mutable objects assigned to constants.
I don't think we need this.
nit: I think this should be called `unsafeSinglePtr` to make the code more readable.
Why are you removing the count ?
Why is this needed?
Why is it `null`?
I think this is the same as the previous code, but the code is the same.
This should be `created_at.iso8601`

This is wrong, it should be `$bundles['serializer_jms_bundle']`.
I don't think we should be running the benchmarks on the main process. We should be running the benchmarks in the `src` directory.
This enum is used for validation. It should not have a category.
I think it would be good to have the appId in the constructor.
This is the main bug fix. The method is now always called with a method group name, even if the list is empty.
// Liveliness lease duration and announcement period
This is the only real change. The rest is cleanup and cleanup.
Why is this needed?
I think we can use StringUtils.isNotBlank here.
I don't understand this change.
This should be reverted.
This is not true for metadata tables.
This test case is a duplicate of the one above, so I think it's fine.
why is this change necessary?
This seems like it would be better to just add the `len` value to the end, rather than adding two.
I would add a note here about what happens if the value is null.
I'm not sure this is the best place for this method. The `authenticate` method is only used in one place, so it could be in the `bridge.rb`.
I'm not sure if this function is needed, since it seems to only be used in the `proc_set_num_simd_saved`
I don't understand this. What if `d->completed_files` has a file with `name` but the file doesn't exist?
This is a breaking change, I don't see any reason to make this change.
I think this can be removed now that we have a separate pipeline.
Why do you need to check the length here?
This class is no longer used, so can be removed.
This was removed because we don't have to iterate over all params.
I donot think we need to split the region in the index name, it's not a valid index.
I think this is not used anymore
This should be a debug log, since this is a retryable error
I think this is not needed, we should just throw an `IllegalStateException`
Why did you remove the description here?
I think this should be `EncryptionType`.
This import is not used.
I think this should be `5`
This line is too long, please break it into multiple lines.
Why is this necessary?
"The in-memory map" -> "The memory-based keystore service."
I don't understand this. What does this mean?
I'm not sure this is correct - `dict()` is not a valid Python function.
I think we should return `err`.
This should be trace level, right?
Line is too long. [81/80]
This is a bug. `list` will return an empty list.
Why is this removed?
This is a bit of a nitpick, but the stream is not needed here.
I think we need to remove this code too, since it's now handled by the `GraphNoteService`
Why do you need this method? It's already in main app
I think we should rename these to `PUBLIC_STATUS_EXTERNAL`
This should be a `reduce` since the `map` and `select` are mutating the same object.
I think this will break the behavior if `_catch_errors` is set to true.
I think this is not needed. The button will be hidden when it is clicked.
This is the main fix for the issue.
This should be package private
This should be a property, not a property.
This is a bit of a nitpick, but I would prefer to see a new line between the `createSenderResources` and this.
This should be `dtdg.co/net-runtime-metrics`
This should have a `[Obsolete("This API is experimental, and will be removed in a future release. Please use ForceFlushAsync instead.")]`
why are we removing this?
I think it would be good to add the property name to the dictionary.
This is a BC break. The `@access` annotation should be removed
This is the only change in this file, right?
This test is a bit confusing because it is testing that MDC is not null, and the message is deserialized from the MDC. I think we should just remove it.
This is a good example of how we could use `keybasefs` for testing, but I'm not sure what the best way to do it is
I think we need a deprecation warning here
This should be `if (it != attackedSet.end()) {`
I think it would be better to move this to a separate file.
This script should be added to `data_files`
I don't think we need this change.
This is not a transport. It's a transport that's not used for anything.
This is not a good way of doing this. You need to make a copy of executable_path, and add a new method that returns the path to the executable if it is not found. You should be able to do `executable_path.to_s`
I think we should add a `Ping` method that takes the `PingInfo` and sends it to clients. This way, we can avoid the lock and the lock in `sendPing`.
This is not needed, we use lodash from `lodash`.
I think we need more tests for get_operations
Why not just `m.Get("/:release", v1.ReleaseByName)` ?
I don't think we need to do this check. If the response contains only a single property, it will be handled in `receiveProperties`
I'm not 100% sure if this change is necessary, but if we want to change the range, I think it should be `3 + 1` and `3 + 2`
I think this needs to be `GetTipSetStateRoot`
This should be a separate test case.
I think you want `File.expand` here.
nit: can we use `string.Equals(string,StringComparison)`?
This is not used.
why is this change necessary ?
This is a bit confusing. I would have expected the default to be True and the test to pass if the storage_strict_json is set to false.
This is not needed.
I donot think we can remove this.
I think we can remove the `snippet-sourcedescription:` line.
I would suggest renaming this to `PublicKey` to avoid confusion.

Why not `Name.upperCamel(lowerCamelApiTypeName).toLowerCamel()`?
I'm not sure if this change will affect how announcement works, but I think it's fine.
I think it's a good time to rename the file, but I think it's fine.
Why is this in the Transport namespace instead of Kestrel?
This should be in the enum
This should be a classmethod
This should be a pointer
Please add a docstring. It's a bit unclear what this parameter does.
I think you can use `getElementsByTagName`.
I think we should not have this method in this class. It's not used anywhere, so we should not add it.
I think we need to add this to `docs/reference/api-conventions.md`
I think this should be v1beta1.
Should we add a null check here?
This is not necessary, as `spawn.h` is not compiled in any Android version.
this should be false
I think this should be `hasPermission(final String userId)`, because it is a public interface.
Why do you need to cast to boolean?
I don't think we want to log this. We should just log this in the main loop.
This is the main change. The rest is just cleanup.
I don't think we should be changing this.
I think you should set it here too
I'm not sure this is correct. It's not a primitive or object.
Shouldn't we check for `r.TLS.Mode != tls.InsecureSkipVerify` here?
This should also be done for `p.ext.DefaultCorpus` (and similarly for `p.ext.Rules`).
The `ListView` is still in use.
This should probably be a percentage, as it will also be used for the CPU circuit breaker.
This is the only change in this file.
This should be `bool` instead of `int`
I don't think gradlew is the right term here. It's not a test class. I think gradlew is the right term.
I don't think we need this anymore
Please remove this line and use `java.util.Locale` instead.
This change looks like a breaking change?
This will break if the `master` key is not set in the config
This is a bit of an odd check to me. Why do we need this?
This is a duplicate of `group` in `config/main.js`. Please remove.
Why did you remove this test?
This should be `Individual`
I think we should add a check here for `LowestInsertedHeader != null`.
I don't think we need this. We don't need to create the JMXJobMBeanManager.
Is this really necessary?
I think this should stay as `private` and the test should be updated to use the new `DisplayedTarget`.
I think you can remove this line.
I think this is not needed
This will break if wavelength has a string value
I don't think this is correct. We want this test to run every 10ms, not 20ms.
I don't think we want to have these imports in the `gcp` package.
This should be `0` by default, right ?
Can this be replaced with `return node.querySelectorAll('input[type="submit"] img[type="submit"] button[type="submit"]')`? I think that's what's used in the other PR.
This should be OPSZ_half_16_vex32_evex64
`static vString *label = NULL;`
I don't think we need to add this to the `constants.go` files, we can use `os.Getenv("BUILD_ID")` instead
I don't think we should log this. It is a bit too much for the user to understand.
This import should be removed
I think we can remove this file
I think this is more of a `NoCacheError` than `DiskCacheClosedError`
I don't think this is needed.
This is the only place where this is used, so we can remove it
why change this?
Should this be a `nil` check?
Why do we need to export this? It's only used in one package, so I wouldn't expect anyone to use it.
can you add an assert that `kser.name == ["0", "1"]`
nit: typo in `allowedList`.
This is a BC break
Why do we need this lock here ?
This exception is not really needed, you can just call the parent constructor with the proper arguments
I don't think we want to expose this as an option. We can just use `maxMessageQueueDuration` directly.
This is a breaking change. Is this intended?
Why not use the `ExecutorService` here?
Why not pass the HiveConf directly to the constructor?
nit: can we call it `stateReader` to make it clear that it is a reader?
This is a bit confusing. I think we should have a separate method for reloading the hive metadata and the table metadata.
I don't see where this is used.
This seems like a hack to me, and I don't think it's worth fixing it now.
Is this a TODO?
Please don't use unchecked exception.
Please revert this change.
Is this import used?
Should this be `timeoutControl.BytesWritten(minDataRate, Math.Min(maxBufferedBytes, timeoutControl.BytesWritten(maxDataRate)));`?
This should probably be a set of keys instead of the full object.
Please use explicit import
I'm not convinced this is a very useful message.
Why did we remove this?
This is the only one I'm not 100% sure about.
I think we can remove this method entirely and just use `NamedList` directly.
This is not needed. It is already imported in the parent class
Should we add an option to disable the `tg` API in the `--help` output?
This should also be `code_set.path`
I'm not sure if this is the correct place to remove these fields, as they are only used by the controller manager.
This should probably use `runtime.Compiler == "gc" || runtime.Compiler == "go"`.
I think we need to add the discriminator to fields here, otherwise we will be sending the fields to the wrong collection
File is not `goimports`-ed (from `goimports`)
I don't think we need to change this.
I think we should move the `metricsHandler` to the options struct.
Why not just use `commit`?
I think you need to check for nil or empty string here.
Why did this change?
This change seems to have caused a test failure in master.
This should be a helper function that takes a list of levels and returns the clip level, and a list of levels with the min and max values.
Why is this needed?
I'm not really a fan of the `dataset` key. I'd rather have it be `dataset-` instead.
Why not `--quiet` here?
I would prefer to keep this constant, and use it in `VersionSet.java` as well, as it's not related to the version set.
I'm not sure this is the best place to do this - I think this should be in the `_get_version_id` function.
I think this is the only change in this file, right?
I'm not sure if this should be included here.
This is a bug fix, we should not modify the metadata of the column.
I'm not sure this will work, since it's the default for all the files. I think we need to make a function that takes the hive scan mode and returns it.
I don't think we should be changing the name of this tag, it's a public field.
Please use `from __future__ import absolute_import, division, print_function` instead of `import sys`
This is a little bit of a misnomer, since we're raising the focused window twice, once here and once in `objreg.last_focused_window()`.
I'm not sure why this was removed.
I'm wondering if we should make this configurable.
I think we should use `.should` for this, as it's more explicit.
Why not just `address.toLegacyAddress()`?
This is a bit of a nitpick, but I think it would be better to put this check in a function that is called by the `Tab` class. That way, you don't have to pass the config value around.
Should we add this to `http2.Response`?
I think we should check if the cart is empty before deleting it.
I think this should be `daysFromDate`?
I think this should have been `composeX509SVIDResponse`
Why is this removed?
This test should be in `tests/web_tests/test_auth_flow.py` and should not be included in `tests/web_tests/test_auth_flow_test.py`.
I don't think we want to add an index to the interface. It should be a property on the interface.
This is a very bad idea. It will cause a lot of spammy logs.
This is a public interface, not a method
Is this needed?
I don't think this is right. This method should return a `Query` object, not a `List`. I would rather have this method return a `List<Field>` and have a `getQuery()` method that returns `null`.
Why do we need to parse checks here?
I would call this update_policy_type
This is not needed, as the window will be set in the constructor.
Should this be `props.selectors` instead of the selector? I'm not sure what the difference between `selector` and `children` is.
This is the actual fix.
This is not a lint fix.
I'm not sure if we should do this, but we should probably do it in a separate commit.
I think you can remove this line now
I don't see this being read anywhere?
I think we need to check that name is not NULL.
I don't think we should rename it. It is a service name.
I'm not sure why you removed this test.
This is a bug. The expression should be the expression of the cron expression.
Is it necessary to add `sys.path` here?
This is the only change that I can see. The rest are just refactors of `getDataErrorComponent` and I'm not sure why we need to add it here.
I think this is wrong.
This is a breaking change. We should keep the old interface.
Why did you remove this test? I think it's still relevant.
Is it necessary for this method to be public?
Please add the license header
I don't like this, but I can't come up with a better idea.
This is a lot of `Builders` now. Can we use a static field for this?
I think this is a little too specific, as the `\` character is not a special character, and it is not necessary to use the same character as the `\e` character.
I'm not sure if this is the best way to do it. I'm guessing the defaulting is to allow the ingress rule.
Who is responsible for the change?
E501 line too long (117 > 115 characters)
This should be in alphabetical order.

This is not a parameter. It is an optional parameter.
Nitpick: This should be `envPublicSubnetCFNLogicalIDTagKey = "aws:cloudformation:logical-id"`
I'm not sure this is the right way to do this. I think we should use the `import` namespace from a `versionIndexFile` import, instead of `versionNamespace`.
Why are these disabled?
I don't think we should be modifying the steps.
I think this is a bit too much. I think we should do the same thing for `restart` and `killEvent` and just call them in the same function. I think it would be cleaner to do this in a single place.
This is the only change that needs to happen in this PR.
I'm not sure if we need this change. The value should be `accept`
This is a bad formatting change, it should be "split1cheo2y9e2w" instead.
@njx I'm not sure about this one, but it seems to be an issue with the new executor.
Why was this changed?
I would prefer to have this in the `cli` package. I would prefer to keep all flags under `cli` package.
Why is this necessary? It looks like it is never assigned
Is this really needed?
I would suggest using `FeedUrlNotFoundException` as the exception class name.
I think this is a bug. We don't set the data to the event.
This is not a good change, as we can't have `Unknown` as a country. It should always be set to `"Unknown"`, and the code will panic if the value of `proposal.ServiceDefinition.LocationOriginate.Country` is `nil` (which is why the `if` statement was removed).
I don't like the idea of using a `Overload` here - it makes the code harder to understand and I'm not sure how it would work in the long run. It would be much easier to understand if we just use `connect (this, &DesktopSwitch::setDesktop)` here.
This should be moved into `Run()`
This class is never used
This is not a good idea. We need to know the user who cancelled the request.
This class is not used anywhere.
This is the only real change in this PR.
This needs to be added to the docs.
This should be `CheckSeverity.OFF`.
Shouldn't we add the peer to the addressbook?
I think this is the right thing to do. The `oldChildren` is not the same as the original `newChildren`. I think it's better to just keep `p`, and remove the `index` variable.
I would suggest to add a `--filename` flag to indicate that the file is generated from a schema file, and that the file is generated from a generated schema file.
I think it should be `el4`
Why did you move this to a separate file?
I'm not sure if we need these consts. I would rather have the `manifest.go` file just use `ManifestMantarayContentType` and `ManifestMantarayContentType` as the constants and have the `ManifestMantarayContentType` and `ManifestMantarayFilename` constants in the `types.go` files.
Is this needed?
I would prefer to use `sendCommandForDownloadChromeHeadLess` as the name. `SEND_COMMANDS_FOR_DOWNLOAD_CHROME_HEAD_LESS` seems to suggest that the command is sent for downloading Chrome headless.
I'm wondering if we should just make `runCommand` a function, and then have `runCommand(runCommand(data, keepalive, callback)` be a function.
I think it would be better to use the `Category` class here.

This should not be necessary.
I think this is the cause of the issue. The `axe._tree` is always the same as the `nodes` array. The `nodes` array is the array of the `axe.utils.nodes.getTreeFromIndex()` call, and `axe._tree[0]` is the first node in the tree.
nit: `equipped here to cache...`
This is not correct. You should be using `Path.Combine` instead.
This is the only thing I'm not sure about. We should be able to use `NewExporter` directly, without the need to pass in the connection config. I'm not a fan of passing the whole connection config around, but I'm not sure if that's a problem.
I'm not sure about the naming here, since it doesn't seek to the current item. I'd prefer to have `seekTo` be a verb and `seekTo` be an action.
Align the parameters of a method call if they span more than one line.
This is not used.
I think it should be called "firstTimeEmptySubject".
This is a little confusing. I would expect a `[RestoreFiles] ` event to be fired when the blob is removed from the index. The rest of the code in this PR is just logging the length of the blob's blobs. I think the message should be more like `RestoreFiles: ...`.
This is not correct. The progress control will be shown only when the file is visible.
I don't think this is correct, you should be returning the error here. If you want to attach, you should return it.
This test is not needed anymore.
This is not a new action, so it shouldn't be in this PR
why did you change the vote values?
I'm not sure if we need to export this.
Nit: Remove this extra line?
This is a little confusing. It seems that `item.toJSON` is a property on `Collection`, and it's not used anywhere else in the code. I think it would be better to have the logic on `Collection` in a separate function, and call it from both `toJSON()` and `map()`.
I don't understand this change, it seems unrelated.
Shouldn't this inherit `ContentDialogPlacement`?
I don't think this should be in the config.
This is not needed anymore.
I would add a comma at the end.
nit: `global_index_range_.emplace_back(global_index);` would make the code a little clearer
E303 too many blank lines (2)
I don't think this is needed. You should only be checking that the current page is the match modifications page.
I think we should also check if the summary exists.
This change is not needed
this is a little confusing. why is this the only place we use the expectedStatus? why is this not the only place we use the expectedErr?
This test is not needed.
I think these permissions need to be added to the `ImageManagementService` as well.
I'm not sure if this is the best way of testing the feature, but it's not the best way of testing the feature. I think we need a better way to test this.
I think this is a good idea, but it's probably better to have a `Dictionary<string, string>` type instead of a record.
Why did this change?
This is not the best place to do this. The connection tracking is not the right place for this. It is the right place to do this. The connection tracking is the place where it should be placed. The connection tracking logic should not be in the controller and not in the controller.
This should be a constant.
This is a bit of a misnomer, as the DataFrame's columns are the original DataFrame's columns.
this is the only place where `getExtendedIdentify` can be called.
I would use a return type hinting here
This should return an error, and we should return an error here, so we don't panic on the server side.
I think this should be a warning. It's not really an error.
Nit: `from where flow execution is triggered`
Why did you rename this?
This was causing a test failure.
Should this be configurable?
nit: I would name this `NoIID` to be more explicit.
This is a bug fix, but it's not a bug fix.
I don't think we need BOOLEAN. The type is already a boolean.
This should be Blockly.utils.mouseToSvg
nit: can you add `;` at the end of line?
I think this can be removed now
This is a breaking change, as `conf.iface` will be `None`.
Extra empty line detected at class body beginning.
I think we need `.lower()` here as well.
This will cache the test tasks for all ETE tests and integration tests as well.
I think we should use `mockMergePolicy()` here instead.
This is not a good name. It should be something that describes the actual precision, not a precision.
This is not the right way to do this. The join is added once before the order by is added to the query.
I don't think we need to add this to the counter.
This is a bit of a misnomer. I would call this `ListEvents` and return an error that the user can't do anything with.
I think we should also have a test that checks that the version is actually 4.0.1.
This should be `benchmarkdotnet.binlog`
Please use single quotes for strings.
I'm not sure we need to change this timeout. It is not really a request timeout, it's just a timeout for the request.
This is a bug fix for a bug that I found in the spec. The shift amount is always positive and it's not an error to shift.
Why is this being removed?
This is a weird import, but I guess it doesn't hurt to leave it.
I'm not sure this is correct, as the value is not the org ID.
This will fail on Unix (and possibly other OS) where the regex is not compiled. It's probably better to use `RegexOptions.Compiled` instead.
I'm not sure what the difference between this and `++throughput_publisher_.subscribers_` is?

I think this needs to be `class-form-form` to match the class of the `Form` class.
This import is unused
Why do we need a separate task for this?
Why not use `getDerivedStateFromProps` here?
I would add a link to the Koalas docs here
I think we can remove this TODO.
I'm not sure if this is the right test for this, as it doesn't test the `switch_to` method, but it seems to test the `frame` method.
I think it is fine to make this a `IProvider<JaegerExporterProvider>`.
I'm not a big fan of the name of this file, since it's a bit confusing. I'd suggest something like `countly.events.js` or `events.lib.js`.
This should be done in the audit.js
I'm not sure about the naming here. I think this should be `_bump_and_store_timestamp`
Why remove this?
I don't think we need the `if` statement here.
I think the `SUBGRAPH_ISOMORPHISM_BADARG_TEST` is still used in the `check_subgraph_isomorphism()` test.
nit: remove empty line
I think this is not needed. We have `paych` in `config/commands.yml`.
Should we check that the address is a valid hex address?
I would prefer to make this method public.
I don't understand this condition. If the length is equal to the hash length, then it is not a prefix.
This is a bug.
I don't think it is a good idea to change this default. It is not a good idea to change the default.
This should be internal
I think you can use `WriteRegister` here.
Why are these being changed to `finer`?
This is not used anywhere, so I think we can delete it.
This should be `isHydrating = replaceNode !== null && replaceNode._children !== parentDom._children`
I think this should be `GenNamespaceImports(1);`.
Why do you need to create a new instance here?
This should probably be `RevisionOn(revField string)`
I think this import is not needed
This is a bit confusing, as it's not really a log stat, it's a process block stat. Maybe rename to `logBlockStats`?
I'm assuming you're not using the `test_reporter` anywhere?
I don't think this is necessary. The logger will be initialized in the `cli.Context` when it is used.
We should probably move this to `axe-utils` as we have other axe imports. I'm not sure if we want to expose these as public API.
This rule is not used in any way? I would say it's not necessary to have it. If it's needed then I would remove it and just use the formatter rule.
This should be called FindBestHeaderHash()
This is a good candidate for a test.
This should be a bitfield
I think we should remove this check.
I think you need `inject` here.
I think we need to suppress the warning.
This should probably be in the config, not here.
nit: I'd suggest using `invokeMethod` instead. It's more readable and it's a minor point.
I think we can remove the `@public` annotation.
This is used by the `pslice` package, so it should be removed.
Why not use `TypeUtil.project` here?
Should be alphabetized, not alphabetized.
I think this is not necessary. The account is added after the first time it is added to the list.
I'm not sure about this change. The original code was a bit more efficient.
Why not just pass in `StateDb` here?
I'm a bit worried about this being a problem for a new chain creation that doesn't require any changes to be made. I'm not sure if we want it to be an issue.
I'm not sure if this is the right way to do this. I think the query is wrong here. The query should be: * SELECT parent_of.* FROM tags WHERE id=? OR * SELECT parent_of.* FROM parent_of WHERE child_id=? OR * SELECT parent_of.* FROM tags2 WHERE child_id=tags2.parent_id OR * SELECT parent_of.id, parent_of.* FROM tags2 WHERE parent_of.child_id=tags2.child_id
This change should be reverted, right ?
This function seems to be unused?
I don't think this should be part of the feature flags. It should be part of the buildenv itself.
receiver is unused
I think we can remove this example.
I would prefer to return `ErrInsufficientFunds` here instead of `0`
Black would make changes.
I think we can remove `nullabilityHolder` and `typeWidth` from the signature.
I think this is the only place where we need to change the counter. If you want to change this, you should also change the counter name in the commit message.
You can remove these imports
I would prefer not to import `EventManager` in this package.
Should this be `typeWidth == null || typeWidth == 0` ?
Why is this change needed?
This should be 7.0.1
This is a breaking change.
I think this is not the right error message. It is not a consensus protocol.
I don't think you need the + here.
I think we need to throw a new FileNotFoundException here
This is not needed.
vmultiplier is not used.
This is a breaking change for the `defaultOrganization` value
I think the original was better.
I don't see any reason for this class to have a `Reactive` suffix.
I think it should be `string` instead of `number`
I think we can remove this, as it's a new feature
I'm not sure why this test is removed, it seems to be testing a behavior change.
I don't understand why this is needed, it seems to be the only usage of the class.
I think this method should be removed
This is a bit hacky, but I don't think it is a problem with this code.

I'm not sure about the naming. The resource type is the name of the resource, and the resource reference is the type of the resource. The resource type should be the name of the resource. The name is the resource type of the resource.
I don't think we want to change this line.
I'm not sure this is the best way to check if a pointer is null.
This is not the same as the online video tutorial.
This file is not used anymore, so I removed the import.
I think we should keep this internal.
I think this can panic if the type of the key is invalid.
I think we should use the `getParent` method here instead of the `method_exists` one, as we are not sure if the method exists on the interface
I'm not sure if this is a good idea. The only thing I would expect to be the role is to create an IAM service account, not to create a new one.
I think we can remove this file.
I think we can remove the `force: true` since we're already creating the table.
I'm not sure this is needed
I think we should do this conversion only if the amount is a multiple of 100.
This is a bug fix, right?
I think you can also remove the static import
I think this should not be a separate file.
This should be handled in a separate function, so it's not duplicated
Line is too long. [83/80]
This is the only one I'm not sure about. I think it is a bit confusing that we use the lea for the other case (in the epilogue).
I'm not sure if this should be in the `store` or `state.IpldStore`? I think it's only used for the `IpldStore` and `StateStore` so it should probably live there.
I think this is not needed, `bytes.fromhex` already handles it
This should be `KeyError` I think
I think this is wrong. It will send a message even if the user has not requested a trade.
This is not needed.
I'm not sure we should add a new interface here. I think this is a breaking change for people using `IScopeListener`.
This is a good example where we could use a more descriptive name like `refs` for the same thing.
Line is too long. [81/80]
I think this is a good idea. We need to make sure we cache the view model instance for the fragment host.
I don't think we should be logging an exception here. If the number of messages is 0, it means that the message was not sent.
I don't think this is necessary. The http server will handle all requests and all responses are handled by the same handler.
This is a bit odd, why is it necessary?
Please, remove this line.
This is a bit confusing. Why do we have both ipv6 and ipv4 in the same flow?
Why is this being changed?
I'm not sure why this is needed, but I don't know why this is needed.
I don't think this needs to be in this PR, but we should probably make this a `const` at some point.
I'm not sure we want to remove these. I think we want to keep the copyrights for all files in this repo.
This check is not necessary.
I think you can use Lists.newArrayList here.
This is the actual change. The rest is just refactoring.
I think this should be Info, since it's not a warning.
This will be a string.
This is too small for the default.
I think we can remove this
nit: remove empty line
Why do we need this?
This is a little bit of a misnomer, as we don't actually hydrate it, it just means we're in the hydration phase. I would rename `wasHydrating` to something like `shouldHydrate` or something.
I think this will fail on Windows. You should use `os.path.isfile` instead.
This is not an issue, but it's not an issue with the existing tests.
I'm not sure if we should be using this role. It seems like a security issue. I would rather not have a guest role.
I don't think this is the best approach. We need to make sure the `Revision` field is set on a revision, not on the field itself.
I don't think we need the mock account anymore, since the state manager and the mock account should always be there

This is not a good message. It should be a debug.
I think you can remove this line
I think we should be able to get rid of the `Delete` function entirely, and just have `Delete(ctx, kbfsblock.ID)` call `Delete(ctx, kbfsblock.ID)` directly.
nit: "only supports HTTP scheme"
This change seems unnecessary.
I think we need to add a check for the `c == '>'` here, otherwise it will throw an exception.
This is a bit of a misnomer: it's not a blacklist type, it's a type of a blacklist. Maybe `whitelistType` or `whitelistFlag` or something like that?
I think it would be better to use a different message than "Shutting down executor" here.
I don't see these used anywhere, can we remove them?
This file is missing a license header
I'm not sure if this is the best way to do this. The `-o` flag is only needed for the `build` command, but I don't see how to do this in the `install` subcommand, and I think it should be fine to keep it.
This is the only thing I'm not sure about. If we're going to do auditing for the batch, should we be logging the audited batch?
I think these can be removed?
Can you create an issue to track this TODO?
This is the only change. The rest is just cleanup.
`to_string()` is not necessary here.
I think we should check the result of this function.
Whoops. The `wake_up` should have been a `wait` before.
I'm not sure about this one, but I think it would be better to have a constant for "lombok.NoArgsConstructor"
I think we can just use `i.interceptor = interceptor` here and remove the other `Interceptor()` method.
I think you can just use the static import of the QueryElevationParams class here, no need to have a static import.
I don't think this is a good idea. The compiler should be smart enough to tell us whether it's a null or not.
This is not needed. `importlib_resources` is already imported in the `else` block.
cpInput.NumAdditionalElements = len(antreaSourceStatsElementList) + len(antreaDestinationStatsElementList) + len(antreaLabelsElementList)
This is not correct, you need to set num_simd_saved_abs to 0
This should be 2.2.0, not 2.2.1
I think this should be named `required_subject_name`
This is not needed.
E226 missing whitespace around arithmetic operator
Why are we renaming this?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
Why do we need a separate type?
This is not correct, it's not the same as the old version
Should this be "Automatically sends" instead of "Automatically sends"?
I don't think we need to add this flag. It's already in `account.h`
I think this should be `nsenter`
Why is this needed?
I'm not sure about the naming of these, but I think they should be `ServiceVersion` and `EnvVersion`. The reason is that they're used for the `TraceId` and `SpanId` in this case.
I think you can remove this, since you're already using `force=False` in the command line.
This is a BC break.
This test should also be updated to check the number of rules.
This is a breaking change, not a breaking change, right?
I think we need to add a log here to indicate the versionDetails was not updated.
I think this should return an error, and not an empty response.
this is a change of behavior, we want to set the flush period to 1s
I'm confused why this is changed?
This is the same as `newBoxQuery` except that it does a comparison.
Why did you change this?
I think this needs to be a long, not a long.
I'm a bit confused by this dependency. Is it because the `fscommon` package is not used?
This is not needed.
Shouldn't this be `if (!$solrConfiguration->getEnableCommits())`?
I'm not sure this TODO is still relevant. The state root is the state root of the chain head, not just the block header.
I think we should use the same logger as in `WebDriverFactory` and `EventLog`.
This should be an `elif` instead of an `and`
This should be a `debug` message
I don't see how this would ever happen. If it does, we should probably throw an exception.
Can we make this a list instead of map?
I'm curious about this change, is it necessary?
I don't think we need this. `data` is already a list of dimensions.
Why are we not using `LOG.info` anymore?
This should be `nth:last-child,` (or `nth-child(2)`)

missing whitespace around operator
This is not used anywhere, please remove
Use the new Ruby 1.9 hash syntax.
I think this is fine, but we should probably have a separate benchmark that runs the string helper on all platforms.
Should this be a parameter?
nit: I think the `/schedpolicy/{name}` is redundant, since we have a `schedPolicyName` in the path already
This is the default behavior, so I think we can remove it.
This should probably be a `_("Install add-on")` string, so translators know what to do when they want to do this.
This is a bit confusing. How about something like `Create a new ExpireTableMetadata to manage table metadata files in this table and commit`?
This file is missing the license header.
Why is this necessary?
This is a good candidate for an `internal/auth/acme/provider.go`, but I don't think this will be a big deal. We should probably have a separate package for this.
@PVince81 this is a good change, but I think the default should be the current time in UTC, otherwise the timezone will be used by the user when the app loads.
I think we should rename this function to `getResult` and move all the other `ResultCollection::getXXX` to `ResultCollection::XXX`.
Is there any reason why you're returning a dict instead of a `dict`? It seems like the latter is more efficient.
This is a bit weird. Why do you need to do this in the else block, but not in the if block below?
This is a very weird code structure. I think we should be able to just have a single function evalPreCondExpr and use that here.
This is an unrelated change?
I think we need to do this in `dockerConfigVolumes`.
I think this line can be removed.
This field is not used anywhere
@jennybuckley @bflad I'm not sure if it is correct to skip this for `/dev/xvda`. I think it is fine for now, just pointing out that it is fine for now. But we can add a TODO to remove it in a follow up PR
I'm not sure this is needed.
I think this should be a `NotSupportedError` instead of an `Error`
This should probably go in `pkg/server/server_test.go`
This is the same as `dataplaneToChainToRules` above, right?
I don't think we want to do this. The provider should be able to get proposals from the nodeKey, and the provider should get the proposals from the node. The nodeKey should be the provider ID, not the address.
This is a bug fix. The `ref` property was being deleted in the `else` branch of the `else if`, which was causing the ref function to be called twice, but now the ref is not being called.
Shouldn't we check for the error here? I don't think we want to fail the test if the error is not registered
This is a bit odd, but it is not a big deal.
I think you need to add a `export const ReactComponent = () => <div />;` at the bottom of this file.
This is not used anywhere, so it can be removed.
This needs a translation
I think this should be "bootstrap.js" not "jquery.ui".
Why do you use `ProductDataFactoryInterface` here?
This is the fix.

I think we should also check that the account is not `null` here.
I think we should use `ENV["APP_DOMAIN"] || HOST` here. We don't want to have to change this for everyone.
I'm wondering if we should just check for `github.com` here instead of `repo_private? && !installation?`
This will cause a panic. You need to use `errors.Wrapf`.
"solicited routes" => "solicited certificate chain and hostname of solicited routes"
Why did you change this?
This is the actual fix, right?
I think it would be better to have a test case for this. It's not clear to me why it's not working.
I think this test should be moved to a different file.
This method should return `FileAppender`
I'm not sure why this was changed?
I don't understand this change, why did you remove it?
nit: can we call this `context`?
This is unused, so can be removed.
I don't think you want this to be true.
I'm not sure why this change is needed?
I don't think we want this method. We don't want to be calling the movie service.
Why is this needed? It looks like the `toString` method is not overridden.
@kbrock I think we can use `shell` instead of `powerershell` here.
This test is not really testing the beta version anymore
This is a good example of how to fix the type annotation
This import is unused.
I would remove this.
This should be "of", not "of".
Please revert the change.
This is a bit confusing. I think you should call `unselect` here, and then `select` in `setOnMouseClicked`.
nit: `// Copy the copy of the certificate and order annotations.`
I'm curious why you chose to include this header file here instead of just using `treeobj.h`?
This seems to have been a mistake.
I think we should remove the `return;` here and in the other places.
This is the only change I can see. I'm not sure if we should be passing the command in as an argument. I think this should be a separate PR.
I think this will fail if the data is not base64-encoded?
This is a bit weird. Why is this not just `SamplingPriority.UserReject` ?
Should we use the constants defined in `defaults.go`?
I think this is a bug.
I think this is the only place where `arg` is being used. It's not clear what `bad_key` means, and if you can just remove it.
@johann-sanfordstudent @kzangeli @kzangeli @danmar I am wondering if we should just remove this check. It is not needed. I am not sure if this is the correct fix.
This looks like a bug. If we have a frame that is already finished and is not yet completed, we should not process it again. If the initial frame is already complete, we should process it again.
I think this should be `0`
I think this is not necessary, because `view_proposal_request` will do the same thing.
This is the actual fix
I'm not sure if this is the right approach to return an empty map. I would rather return an empty `Collection` and then throw a `NullPointerException` if it isn't implemented.
I don't think we want to have these constants here. They're only used in one place, so I'd rather not have them in the main code.
Whoops, I missed this one.
Should be `CodeHintInterface`
Why did you increase this?
This looks like a bug fix. Shouldn't we just remove this line?
I think this should be `_("Successfully changed the permissions for %{role.user.email}.") % { role: @role.user.name, role: @role.user.full_name }` to avoid having to use the string interpolation.
I'm not sure if this is the right approach. If the writer gets unregistered from the participant, then it should be removed from the participant's flow_controllers_.
I think we should add a `create_no_window` argument to `Service.__init__`.
I think we should also apply the rules for the `ChainToWorkloadDispatch` action. I'm not sure what the policy is for.
I think this is the only function that needs to be exported.
nit: I think it would be better to call this `DCRedirectionPolicyAllAPIsForwarding` since it is not forwarding all apis.
I'm a little concerned about the name here, since it's not a framework, but an implementation of it. Maybe something like `FrameworkCustomCustomTally`, `FrameworkCustomPrometheus` or something similar.
I don't think this should be a INFO. It is an error.
Is this the right place for the host check? If the host contains a slash then we should not allow the request to go back to localhost, right?
I think it is better to say something like "Note generally it should be set to `True` when using `IoULoss`, `GIoULoss`, or `DIoULoss` in the bbox head."
This change is not related to this PR but I think it is a good idea to change the exception type to `SolrException`, as this is the only exception we throw from `createIndexSchema`.
Please don't change the copyright.
This is a pretty big change. I think it would be better if we had a separate error message that explains what we're doing.
This should probably return an error if `AWS_DEFAULT_REGION` isn't set, as it's a valid region.
I think we should keep this as a tuple of `(str, str, str)` so we don't have to pass in the version string in the function
Why did you make this protected?

Is it worth moving the `authorize` to the `User` model as well?
I think it would be better to log the version here. It's not clear to me what it means.
This should be `db.createCollection('inventory', { cascade: true });`.
I think you can remove the word "screenshot" from the description.
This file is not part of the PR, so it should go.
This will not replace the company, it will only replace it if it's the same as the current company, which is not the same as the one in the current page.
Why this change?
This is not used anymore.
This is not needed, we can remove it.
This is a bit confusing, why do we use a constant?
I'm not sure if this is the best way to do this, but it seems to work.
This will trim the entire body, not just the first line of the body. Is that intended?
I think it's better to call it "fields" since we have the field names in TableMetadata.
This file is generated on Net45, but the changes in this file are not included on Net452.
I think we should just return `err` here, since we already know that `podId` is valid, and we can get it from the `Get` call.
We don't need to keep this method.
Why do you need this check?
I'm not sure if it's the best idea to set a variable for tests. It's a very common pattern to have environment variables in tests, but it seems to me that it should be in the test suite, so that it is easier to test that the environment variable isn't overridden by tests.
Is it worth checking for the existence of the symbol table here?
I don't think the default value should be a boolean.
I think this is a bit confusing. If the error is a `transport.Error`, then we want to retry, but we don't want to retry.
This is an API break, so I don't think it's worth it. We can't change this.
This is a breaking change. The pagination is done by `paginate_params` and the pagination is done by `@response.total` and `@response.start`
This function is used in `SLNParser::toMol` which should be changed to not accept `const std::string &`.
This is a little bit of a misnomer. I'd say `fragment`, or even `Portal` if it's a bit more clear.
Why is it needed here?
Why is this removed?
I think you should set this to `Time.zone.parse('2015-10-01')`
This is the id for the subrow, not the data.
This was the only test I could find that was failing.
nit: `reconciled reason upgrade value`
This is not correct. If there is only one pool type, then the first pool type should be `PoolStriped`
I think this is a leftover from when I wrote the tests.
This is a regression.
I don't think this is necessary. The `xxstrdup()` is a no-op if `digest` points to a null terminated string, which is not the case.
Why not just call this method `setEvent`?
I'm a little confused by how this is used. Why is this being added?
Why do we need to pass default_participant_qos here?
This is not the correct way of handling it. The `tmImplementation` should be the same as `minResolution`
I'm not sure this is correct. The first character of the path should be a space, not a tab, and the second character should be a tab. I think it's a bit confusing to have a space in the middle of path, but I'm not sure how that's handled.
I don't think we should disable this
This is not a great way to check for `null` but I think it's better for now to just use `mongoClient.s.options.autoEncryption.cryptdConnectionString` here. I think we should just remove the `if` statement and always use the `cryptdConnectionString`.
This should probably be done before the call to `os_clone_post` below.
I think it'd be better to have this constructor take an `int?` and have the caller pass in the span id if it is null.
I'm not 100% sure this is the best way to phrase it. I think it is better to say "that was already signaled by queue ..." or something similar.
I think we can just remove this. We don't really care about the context.
I think it would be better to use `app` instead of `app-`
This file is not needed
nit: add `.` at the end of a sentence
I think we can remove these.
I think this should be an exception, not a logger.
I think we should rename this to `lps` now that it's no longer a language server.
This is wrong. You are checking the zone of the target, not the player.
Why not use the new `errShouldUnload` method?
This is a bit weird to me, but I guess it's fine.
I'm not sure about this. I think it is a bit confusing that we have a method called "not_available_on_device".
I'm a bit confused by the word `execution` here. It's the execution of the task. It's not the task that's stopping the task, it's the execution of the task.
I don't think this is correct. The agent will not validate the config if it's passed in.
I'm wondering if we should have a separate `NewWSClient` function that takes in `wsclient.Client` and `wsclient.Server` and returns a new `WSClient`. That way we can keep the `New` signature the same and we can avoid passing in the `rwTimeout` argument.
This is not a functional change. The previous code was correct.
I think this was removed because it was a bug.
This is a new error message, right?
This should probably be `Linux` and `Windows` to be consistent with the `Linux` and `Windows` options.
This could be done in a single line.
This is the fix. The rest is just some cleanup.
Why is this being removed?
I don't understand why you removed `config.online_weight_minimum.number()`, why not `delta()`?
This should probably be an error log, since it is an error condition. Also I think this should be a warning, not an error.
This is the only place where we have to set `true`.
I'm wondering if it would be better to use the `$imageSize` variable here instead of `$event->getCacheFilepath()`.
I think you need to use `api_quota` here, not `api_quota_configs.get('api_quota')`.
nit: import order
`items()` is not needed, `iteritems()` is enough.
This is not needed, it should import from `scapy.constants.all`
This is a minor point, but I would prefer to use `==`.
I think we should not add the dependency here. We should move this to the historyengine.
Why not `ExporterOptions`?
This is a bit of a weird import, I'd rather not use the `HTTPNotFound` class in the code.
This is a bit weird. I think we should have the same metric as in `GraphQLSpan`
This is the only change in this file.
This is not correct, it should be <100
I don't think this option is needed. The `run_command` command will set the environment variables.
nit: unnecessary change
This line is not necessary, as the `global_set_option` will do that for you
I don't think this is necessary, as we are not using this interface anywhere else in the code
I would use std::ceilf here
I think this should be `hv.{class_name}{extras}.apply({apply_args}) on the supplied DynamicMap.`
This was a duplicate of the previous one.
This should use a `set` instead of a list.
This method is only used in tests. I think this should be removed.
why remove this ?
This is the test file. It should be `tests/integration/hotgym.py`
This is the actual fix
This is not needed anymore.
Shouldn't we rename this to `workloads` ?

This is the key file for the GSUITE service account
Is this change related?
Why is it necessary to add this flag?
This line can be removed.
I'm not sure if this is the right place for this, as it's not really creating a response. I would suggest moving this to the `create_observer` action and calling `prep_create_response_msg` in `add_observer`.
Why not `except KeyError:`?
nit: I think this should say `Microsoft.VisualStudio.TestPlatform.Utilities`
Use nested module/class definitions instead of compact style.
This will only work if we're in a running state, right? I think we need a `if machineScope.InstanceIsRunning() { return nil }` here, and return an empty error if we're not in a running state.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
I think we should pass the `rw.headers` as a slice of strings.
This is not correct - `AnotherTask` should not be a subclass of `luigi.uti.Derived` - it should be a subclass of `luigi.util.Derived`.
I would prefer to have this in `putAttribute`, but I think we don't have that in the current code
I don't think this version number is right. The upgrade script is using the latest version, so it should be `1050000`.
Why do you need to change this?
I think we should add a `@since` tag.
I think this should just be `char ToUpper(char c)`.
I don't think you want this.
Why not just use `h.TypeForKeying() != tlf.SingleTeam`?
Can you add the same for `StartWorkflowExecution`?
I'm not sure this is a good name, as it doesn't mean anything to me, but it feels like it's a method that's called on a controller object.
I don't think we should skip this spec, it is testing the functionality of the controller.
nit: can you add `@Nullable`?
This is a little weird, but I guess it works
`for` loop ends with a `break` statement, so this should not be necessary.
Can we use `url.PathEscape` instead of `fmt.Sprintf`?
Why is this needed?
This should be 2019
This is not a pod failure, it is a failure in a container.
I think we should also check for the `childType` here, since it's not necessarily a virtual node
This method seems unnecessary.
Why is this test removed?
can we add this to `ShardInfo`?
This is the first time I've seen this pattern, and I'm not a fan of the name `blog_csr` vs `blog_cert`, but I can't think of anything better.
I'm not sure if this change is correct. `Reader<T>` is not nullable, but `Reader<byte[]>?` is not. `Reader<byte[]>?` should work.
I think this line can be removed
This is the only place where we have a `TableObject`. It's not really a marker interface, so I would just remove this.
Is it possible to have a separate file for this, and the task.cpp?
This is not used anywhere, is it needed?
Remove this line
I think we should use the `property_value` helper here. It is not used in the `property_to_s` helper anymore.
I think we can use the new `ZMSUtils.quotaLimitError` here.
I think we should remove the `dh` option from the config.
I think we could remove this method and just use `$this->setTemplate` and `$this->setName` directly in `run()`
This will be a lot of messages. Can we make this a debug log?
I think this should be `Microsoft.AspNet.HttpReqIn.HttpRequest`
Is there an issue for this TODO, or just a note?
Is this used anywhere?
This is the actual bugfix
Why do this?
I think we should add a TODO to add this to `config.go`.
This is the new example that we're using in the example, right? I think this example should be updated to reflect that.
This is a bit weird. Why not just call `engine.eval(scriptContent, errorCallback)` here?
This is not needed
I don't think we need this option at all. The only thing we need to do is to allow unprotected transaction to be submitted via RPC (and not just the EIP155 one). If you want to be able to send an EIP155 transaction, you should be able to send a transaction to the EIP155 server that is already signed and not have an unprotected transaction.
