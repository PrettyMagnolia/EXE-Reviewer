Another idea to use a specific interface, I'm pretty sure the name of the file has to be updated.
@atm-quentin can you please replace these $backend->setPageSize($config->Index->record_batch_size, $config->setPageSize($config->Index->record_batch_size, $config->group->record_batch_size)
This is the only place where we would want to return a `default` here instead of an empty string.
Is this a change in behavior? It's only used once in `BuildOutput.rb`
I think this should be done only if `isNavigating` is true, right? Otherwise we won't have a value of `isNavigateURL`
This should be `ID2col(const Mat& im,Mat& col,`
@adamjstewart And this line can be removed?
nit: this could probably be `snprintf_s_from_active()` instead.
I don't think we need this, it should be the same as the keyboard. I would just say it should be the keyboard from the state of the state, and then use it.
@nmittler - This should be `service = service.HttpClient(...)` ?
@jridgewell any particular reason for adding this?
I don't think we want the `shared` property to be passed in from `GetSharedSharedValue()` to be able to use the input in the `shared` property.
Please don't add trailing comma.
Should this also check `String.Equals(TeamWithWithHexString() && activity.ParentSpanId.ToHexString().Equals("0000000000000000")`?
Please add a newline before this `\name\provider` so that it doesn't get printed. You can add `\name` as an input argument to `w.logger.Error`.
why was this removed?
This is a change from a test, I don't think we should have any tests in the new functionality (and it's not a test)
(style) spaces required around that '=' (ctx:VxV)
The user could use a property to generate a `status.getNumVal()` (or a `status.getNumVal()`)
Shouldn't it be checking for an wlr_input_device?
I'm not sure what the best way to fix is to have to add an explicit task to the latest master.
I'm not sure what `NONEXIST_ENABLED` does, and what it is for?
@jsoriano I think this is a breaking change
I think we should add a check for `isEmptyType()` here as well.
Why did you change this code?
Do we want to make this change to `length`? If the history does not exist, then the `has_history` function is also used for "the command history"
This one is not needed.
Is this needed?
Maybe we could use a different value than respond_to?
why not pass the full workspace into `withDir`?
This namespace needs to be added to `ContentManager` as well.
Use safe navigation (&.) instead of checking if an object exists before calling the method.
Why not `sbinStore = blockDiskStore && clear(...)`? We usually do not use the `sbinStore = blockDiskStore` method.
I'm curious if there is a reason why you're not using `alerters` instead of using `Props` as the default?
I think this may not be correct as `mset.config()` will return the value of the object that we want to pass it again (because the value doesn't matter), and we need to pass it to the `time` method.
Is this related to this change?
I would just call it just Address1 since this is a boolean
This function is now no longer used.
I think this interface can be removed now, since this is not used anywhere else.
Do we really need to pass the `SetTag` here? We're already setting it through the request request.
This was unrelated to the PR.
do we have a performance hit for 2014 vs older servers?
`BiConsumer` is not used
I think it would be better for this to be in a `AbstractJob`, but if the `queue` is not present, this will break any existing tests.
Why did you change `$cart` to `getCartOfCurrentCustomer` here?
Maybe it should be "validators" instead of "transaction_pool"?
This import should be removed
This is the wrong solution. I think the issue should be that the new version should contain a zero size.
This code will be lost for the feeds.size() loop
Should be None, right ?
why did you change this?
This will be much cleaner if the context context is set to `chain.TipSet`
It looks like you're not using this variable anymore. I'd rather not use it here. It will be more efficient and more future proof.
This is not the same as the rest of the code. Why can you use `org.apache.commons.lang3.StringUtils.meta#getDeDeSecrets()`, or is there a better way to implement this?
I think this should be done at first glance, right?
I don't think you need this ` ProvidedPromise`
Is it possible that the `s` target is not configured?
Why is this `_class__`? It doesn't match the other `name__` types of input.
I don't think it makes sense to add this check here, because `video` is a `null` and it will return false.
I guess the other changes are related to the PR?
why is this change needed
I think it would be better to change the other method to `returnreturn {...}` to avoid the double-length style here.
Why are we using the `(int)` here and not the actual `(i)` above?
The old code was correct. The new one was not able to handle a target directory.
I'm not sure we want to change the text here, but I don't understand why we have the `open_id_authentication` method on the previous line. The same applies to the other `update_user` method.
If you're using `balance` instead of `pending`, you should use a `balance_map` here.
This is a `bool` field and will be set in the `Default<als>` element.
Is `aws.cluster.sigs.k8s.io/infrastructure` used anywhere?
I think you need to change the default value here. You should change `italizer2.3` to `italizer2.2`, otherwise the change is not needed.
should return true as well?
I think this should use `add` rather than `padding`, so we can't do it for now.
The assert is correct, the `assert(sibling->parent == subsurface->parent);`
should we add an `else` in the name? (Or perhaps `NullPointerException` to be consistent with other commands that do this.)
This change seems to be incorrect. The `if` is not a pointer, and then `if (!table->isExternalTable() && (!table->isExternalTable()) {` should be avoided.
(style) externs should be avoided in .c files
I think we should just make the test a little more specific. It's probably not worth changing.
This was the only place we use this function in the test `web_pantsd_web_limit.py`, which does nothing with the test.
I think you can catch `NullPointerException` here instead.
This is a bugfix - it will make sense to log the error when there are multiple possible error cases.
You're missing a comma here.
Why are these lines changed?
I think it is better to replace all variables variables with a label. I'm not entirely sure if this is a good idea.
why did this get deleted?
Just to make it clear that it's the default behavior, or does it show up as a `generateDataDiskName` if that's the default?
The name of the file is `pos` is a bit misleading since there is a `pos` property.
I don't think we want this change to make it work.
I'd probably remove this line
Could you update the doc string as well?
I'm confused, is there any difference in the code from `localConnection` to `outputs` here? Why not just always return `true`?
I'd prefer if this was only used by the `container.go` file, and not here (I know it's part of this PR, but it would make sense to be able to remove it completely in the `build-system/container.go` file)
I don't think this should be done in this PR, but I don't think we should be using `./JoplinError` here. `consumer` has `stream` and `Readable` as default.
The goal here looks a bit awkward to me -- if I understand correctly, `store` will always be used. Is there any difference?
This is a change in behavior, because it's not in the test, but in the test mode it's in a test that doesn't need to change. It's not a problem, because the test was being moved to the `init()` function, so I'd like to remove it.
Should we be checking if it's set?
Are you sure this is a `origin` variable? If not, it should be `origin = element || POINTER || origin`
It seems like this will still be true?
I don't think we should be calling `wlr_xdg_toplevel` here, but not here.
This is wrong. You're calling it in a `_init` function.
What about other methods like this?
Can we use a `fetchActiveServiceFlowByExecId` here instead?
This is a bug, it was not able to handle the case where a `typeof` is not a correct `obj`, but this is not the case for `obj`, so why not?
Could use `null` for `null` for `null` for this. `getAttribute` doesn't return false because `null` is not always true.
@erwinmombay PTAL this import
I would add a `@JavaParser` method to the `ServiceImpl`
I think we could also remove this line
Is it possible to use the portBinding directly in the container?
This is the main code, can we make this name more specific?
`RequestId` is supposed to be poll, why not just have the RequestId be poll?
Can you add a `@deprecated` tag here and the other `axe` tag?
I'm not sure how this line is related to your change, it looks like the diff is right, if the link is being used, it's just a copy of the list?
This should be `final`.
@dvoytenko is this change intended?
Thank you for the update!
I wonder if this should be in a separate file instead of in the library.
Not sure if this is the best default. Maybe `volume` should be `ClusterConfig`?
Can you add a GitHub GitHub for this using statement? It's not important to keep track of whether the `Linq` is true.
I'm curious why this isn't `open` updated to use `unless req.close()`.
It's fine to keep track of the code in `breakpoint` - but this code should be moved to `line`.
I would prefer to see a `value` constant in the dictionary. I know the dictionary should be in the config file, but if it's not needed anymore, I'd suggest to use a more descriptive name for it.
I don't think we should remove this line.
Why not use a single quote?
The `if (first + 9)`, should be `if (std::distance(first, first + 9) )`, otherwise it may not be needed when `std::read_get(first, first + 9))`, since `c` is not a valid `>= 9` check.
I think we can remove the `kubelet` part here and let the `prometheus-operator` key in the `app.kubernetes.io/kubelet`
I think we may have made this null check in other places too?
`xrc20` was not added to the list, it's used in `src/server/core/config.yml`, not in this package
I'd prefer to move this function to a separate function. I'd like to avoid having an opportunity to use the `maybe_no_context` module, since it's not a big deal.
I would have put this as `DEFAULT_application.rst` and make it non-nullable.
I don't think it should be here. It should not be, but in the end the line will be fine.
Why is this default true?
Is this needed? toString() will not work for Python 2.7?
Can we do a `canceler         func()` in a `ctx              context` and have the same result as the first argument in the `canceler`?
I don't see the point of this change, but this seems redundant. Why was it done?
Should we use `Log` instead of `codeGenVersion`?
Why do we still have to set `uploadURL` in the `setFileState`?
It is a bit confusing to have here `readChan` for some reason, and it is the same as the one for the other.
this is wrong. You should use a message and use the error message.
`NewStaticUpstreams` and `NewStaticUpstreams` need both.
this can be a separate PR
I think we should change this from the tags tags totags, as this is the only way we will be using this.
I'm wondering why scope is not a warning?
Please don't use this function. You should at least log a warning in the user's configuration (or log an error in the user's configuration).
This should probably be a `str` (not a thing for this PR) but we can't really use it at this point
So I think this will be a good idea, but I am wondering if we should just use an empty value instead of a coma_separator?
Shouldn't we use `cycling` in `Keccak` as well?
This is a bug fix, we should not add an `isConnectedVersionV3` here since it is not a slice of the entire loop.
this is the wrong place for this
Please remove this.
The `break` logic here is not necessary since `from_motorway` will always be true if `node_based_graph` is an integer.
this is wrong as we have the same `:q_puppetagent_certname => host, and master` attribute in the `certname`
why is it a dict?
Why is this change in this PR?
This should be `if`.
This should be a separate change
`Edge` and `offset` are no longer used in anywhere, so I've removed them from the code.
This line and the line below can be simplified since it is already part of the final inside
This will not work for non-Call elements.
This should be ` GenerateAPIKey`.
this is a pretty big error, should we log it?
Why not use `olve`? It's more common to do so. `data` is a bad practice.
This was added because the `calledThrice` was not being used
This is the `obj_name` key in the error message.
This is a bit of a hack, and I don't like it. If we really want to keep the messages in the message, I think it should be fine. Also, I think we should just leave this as the default, or add a link to the message that the messages are actually the same.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Can we make this a const?
Shouldn't this be `ia2Web.Ia2Web.Ia2Web.ationalational`
Just noticed, you have no idea what `E` is supposed to be here (and why not `map`?), and it is a local variable, not an array. And I think it would be cleaner to use a local variable in this case, rather than an array.
Why do we need this change?
Please include the OS header, it is used in the other functions
I don't think it's the best place for this. The return value should always be `string` so the default is `currentQueryUrl`.
Just curious, why the space is needed here, is this line still necessary?
why is this change necessary? latin.n is not in Saleor.io
Why the change from test to hard-coded to a unique ID?
i'm not sure i like this name change, but i guess i'm just noticing.
Why are we catching `Exception` here? Is there any chance this can be simplified?
I'm not sure if we can make this public?
why did this move?
Should we use `google_PACKAGES` here, since it has already been there in the `python-rest` package?
nit: I don't understand this import. Why is it not possible to use the `jav` class from static import?
@Jjagg @lannkaL This is the `ips` field. Why do all the `ip` calls use the ip?
Is this still needed for the bug? It looks like it was a typo?
If you use `Itskind` you don't need to include an exception here.
Please use `import 'react'`, I think.
This is a bit odd, it's not a global setting, but not a global. It might be worth moving the field into a constant.
This will be an unrelated change, right? I don't think we should be using this class here.
This is wrong - `i.__name__` will not be defined in `File.SPEC_ID` right?
What is the readPreference? Why is it needed?
I think `allEvents` should be a constant.
I don't think this is needed.
@matt-gardner what's up with this? Can you please double-check whether the `if` is a subclass of `isHydrating`?
This seems unrelated...
Is this a debugging leftover?
hmm, why check_disabled_client? isn't it only used internally in the `/admin/data-` table?
We should use some sort of implementation here. In `test_query_string_parameters_bulk_account` I would use `query_string_parameters_bulk_account`.
We could use `ERM::helpers::custom_facts` instead.
You need to add a `@class` here.
why the change to 1?
Can we rename this to `getource`?
Do we need an overload of the property to enable these properties for each field ?
Why are we returning an error here instead of returning a tuple?
Maybe we can add a link to an example of a link to a link that does the link and then we should add a link to the link here and then update the link to the link to a link for it.
why did you change this from the directory name to the directory name ?
This import is not needed
I think that it's better to keep it, since the library is in the library for users.
This doesn't look like it should be a short variable
This is unrelated?
I think it would make more sense to set the default here. Also, the default value should be defined.
I think this should remain as the last field
@jackfrancis do you know why this was added? I thought the only way we could use it is to get rid of the `getAvatarFilename()` function.
This will not work. The error returned a `HandleHandle` will be returned from this function.
I don't think this is correct - you'll have to change the default and set as `DefaultTextMapPropagator` in the `TextMapPropagator`.
Why is this line removed?
This is the only change in the file that should be reverted.
Can you add a link to the docs to show how this is done in the commit message?
I think we can remove the `required` prefix now that it is required.
I think this should be in a try.. catch. I'll fix and merge.
Should we also set a `StoreStore` for pods and save node?
This method is used only in `putOpt` in `MetaContext` so not sure if it is a good idea.
Is this intentional?
It seems like `empty()` would be sufficient here since `empty()` is called from a new line.
return errors.New("error when marshaling broadcast message")
`out` is a `out` parameter, and it should be either a `out` or a `_` (out) or a `_`
This is a bug fix, we should remove it from here. In this case, we should use the `binary_labels` method.
The file system system paths are now unused.
remove the empty line
No need for a separate separate method for this as its not just an instance of `session` will be used in code.
I think you don't have to do this, it is not needed anymore, and it's not a Dimension from the database.
The name `_ite_` is misleading since it's an aliasing change
This line is the actual fix.
this was just for testing?
I'm guessing you didn't add the package version?
This should probably be `null`. Otherwise ` init(Capabilities)` would be more appropriate.
Do we need this here? I thought we already had this in the past?
Space between { and | missing.<br>Space inside } missing.
We can't use the existing values for the new values.
Why did you choose to use `/usr/bin/ruby` here instead of `/usr/bin/form`.
`fastcgi.go` is a bit confusing, how about we use a `fastcgi.go` here?
why remove these?
this file is not used
This will not work for any test suite.
forgot the newline here?
I think we should change `googlesitekit-publisher-win__small-image` to a `smallImage` attribute, to prevent the need of having the `googlesitekit-publisher-win__small` attribute
nit: please add spaces around operator.
Please keep the line after the #include <as_name>
Group with `factory`
Nit: I'd prefer if the variable name would be better as `[Up]` rather than `[Up]` (since it's an internal class name)
I think this is the correct spelling of the check for 2 numbers. It might be better to just use `Number(value) < 0` for consistency with the other places.
Why did you remove this?
this seems to be dead?
There's no need to have a `client.getLoop chan()` function in the function. I'd rather not introduce this logic. But I guess this is just a function that only checks if `obj.getLoop chan()` returns true, and then just return nil and check if it is not set.
I think we can remove this, it doesn't work with an `Segments` folder.
I think the name of this should be `-` instead of `-4` for consistency. `-4` is `-4`, which is `-4`, so the number of arguments is `-4`, not `-8`.
this isn't used anywhere
Is there a reason why this is here? I guess I'm curious if this is just a cleanup.
I think this would be better as `contains(element._1).map(v -> v.contains(element._2)`
This can probably be a `TimeUnit` field.
This will break on older machine creation.
if (ptr==NULL || 0) { ... }
I'd prefer to see the `url(spec.welcome_body)` under `mailer.welcome_mailer.welcome_notification.url(spec.welcome_body)`
This is a little confusing, the problem is that the `s.mu.Lock()` can only ever be called if `s.mu.Unlock()` returns an error. I think we need to add a `s.Err()` to the switch below. This can also be a `obj` lock.
Can we enableDownloading from the name ?
I would keep a method and method here to indicate that we don't need to have the wrapper
we need to set spans as errors by default, otherwise it will be configurable in other components.
I think it's a good idea to use different names of these variables. It would be nice to use them.
Is the config key actually used?
This is just a change in behavior, but I am not sure what the best practice is. The root directory is not a directory at the end of the file. We are adding more things that don't change anything, and we need to make sure that we don't provide a directory at the time we start running this.
Please move this check to a separate function and use it in the `app/views/api.md` file to make it easier to read and update the `me/` module
The `&& "beaker/options/#{file}"` file has been removed. It is already in the path, so you'll have to do it here. We need to add a new root cause to `enable` before adding `enable` to `beaker/options/#{file` so it will work with other file keys, but I'd like to have that in `lib/beaker/options` as well.
So what is the reason of creating the Long.between method?
It looks like the new `seelog` was being used to handle all Container versions with the event. It was removed because it was not used before and the user doesn't need it.
Can we use `nameof` instead of the string?
nit: I think we should have an overload of `getProposerOfBlock` and have it return `false`, so this method is only called once
this change is not needed
Metrics/BlockLength: Block has too many lines. [33/25]
Why do you need to use `os.Chmod` here?
If this `constants` is not used and can be removed now, please remove it.
Not sure why it was removed.
This is the only place where I'm missing something, but I don't see any usage of this function.
This is the only change you can test os, not the current behaviour.
Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
Nit: This condition is now unused and should be removed.
I don't think we should remove this. It is only needed for tests, and it doesn't make sense for tests.
The `if` statement seems not necessary. I think you should remove `=== null` after `||`.
I think ` aws_test` is no longer used.
Can we just remove the histogram and use `test-float64-histogram` as its the same as we have for the new unit tests?
why do we need this function ?
I'm pretty sure this change is correct. I'm not sure why I had it.
This should be a `resources` argument
Why did you remove this? I think this is the only place this needs to be changed.
Does this do anything? I don't see any use of the `options` variable in this file.
How come this was changed to the `clientDataType_` method? I'm assuming the code that was in `HiveObject. Can't this be removed?
Hmm, this import is unused.
remove the empty line?
Can we rename this to exposeGetter instead?
This is not a large large large large large large large large large large large large large large large large large large large large large large large large large largeException so this is the default. I think the code should be moved to `conda/v1/core/v2` instead.
I don't think this line has any side effects, but it's probably not worth it for now. It's just a simple "info" thing, and we don't want the right thing to do with this change.
@deads2k this is a bug fix? I don't see why we need to add it
Why not use the constant here ?
How about adding an additional check in the email address to avoid duplicating the code?
Is the idea to get the PortPort from the object instead of the meta? I'm not sure if it is the right fix.
This change seems unnecessary. `var_loc_keys` doesn't have `get_locator` attribute.
@deads2k how does this work? I don't think we need the project name here. It should be just: `prompt: prompt.New(),`
should the parameter be nullable? I don't think it should be on the next line.
@cramforce this is the only real change that I'm not aware of. It's a good idea for the `return` statement.
This method and the next `WriteAsync` methods below can be deleted, so we can remove the `WriteAsync` method altogether and make `WriteAsync` call `ReadWrite`.
Should this also be a `update` method?
This needs to be restored, right?
`attach` is a `String` so you should call `attach`. `attach` isn't really the right place for this method. But it's a little confusing. It should be `String` instead.
I am not convinced this should be a `IOException` instead of an `IOException`.
The forceRDKit can be empty.
Can this be replaced by `return it && this == nullptr` for consistency instead of the `find` call?
Is this a bug in master?
I don't see any usage of this method in this file. Can it be moved to the `service`?
I would prefer to not use `protected` if it's not public
i'm not sure why you changed the default value of getRequest ...
This is the only place where we want to install the package from the `validatePackage` but I'd expect it to be a constant.
This is still necessary if we use `self.items()` everywhere
Can we do a more general `Withdraw` like we're writing to the `event.StatusBadRequest` ? I think that if the node is in `event.ChainID` we should do a `event.StatusBadRequest` instead of a hard coded `event.Withdraw()` so we can do that later.
This code is repeated in a few places. If there is a `IsValid` function, it will return `false` and will return `true`. I'm not a huge fan of the `idx.New` logic.
I would prefer a more descriptive name for this to be something like `get_extra_value_type`.
Rails.application.config.blacklight_export_secret_token is a plain URL, so you don't need a new variable anymore.
Please don't use parentheses around a method call.
Why do we have to use a `dmc->flags`?
I wonder if we could add a `Host` directory to the `ecs` path, and have the `ecs` default to `None`?
ipsecESPOverhead should be a constant.
Since this is the most commonly used `OnEnd` I wonder if we could change the name of `MeasurementItem` so that `GetEnd` is public so `GetEnd` can be immutable?
We can import `log.Join` directly.
This should be tested with a `.New()` call as we don't have any metrics with the same value.
Why are these not needed anymore?
you should add another description of this parameter to the end of the function.
I think it's better to put the constant in the "api" block, as it's the default behavior.
`miningCoordinator` is already declared declared at the end of the method. It looks like `miningCoordinator.isMining()` is the same as `isMining()`
If it is empty then it wouldn't be needed. getConfig should be enough.
The `Unlock` method returns an error, so I don't think it should be a stack.
I would prefer to have this use a more general `whether`.
For my own understanding: is the reason this was added to the `9`?
Let's add it to the top of the file.
I'd be fine if this was done as a constant in the code and it is not possible at all to be able to be unsupport.
I would just add `_CleanFpInfoAttr_` to the `mypress_` method, since the function returns an error, it should probably be called `_fpInfo` instead of `_fpInfo`, so that it can be called when the user doesn't have to.
I'm not sure about the name `RAY_TRACING_NV` in the name here. I'm not sure what the name is, it's the name `current_RAY` or `current_RAY`.
`Id` is being used only when the `exercise` attribute is set to `false`.
ExerciseWithProgressQuery can be removed.
Why remove public?
What's the reason for this change?
Can we add a property like `version`?
this was a separate change. The new way is to do this now and not do it for a new directroy. The new functionality is the same as the new one for the other nodes. I think you can do it directly with the new data directroy and the other nodes in the next PR
I think we usually try to avoid using `import` in this file
Why did this change?
Is MONGOS_LEGACY_HELLO required here? It seems it is the same as the `MONGOS_LEGACY` one?
I think this should not be changed. The `privilege_SYNCH_SKIP` constant should now only be set to suspend the first time.
This line should be removed
why don't you just do the same for the `if` and remove the else above?
`dokan.ExistingDir` should never have `true` right?
Why is this a list removed?
`this.container` should not be an array. We could just always use the container instead
I'd prefer the new attribute to `Compile_get_search_form()` and `Compile_get_search_form()`, because it's not in our codebase. The new functionality will be removed in the `externals_ex` function.
Please add the same for the other one.
I don't think we need this change since the tests are not in prod.
I would suggest to use `kaban/lib/azkaban/lib-config.properties`, as this is no longer a name for this class.
I think this line is the wrong way to fix the indentation issues. I think the indentation is fine, but it was wrong.
This is the only usage of GetCancelledZeroTask that can return null.
The original code does look correct if you don't need a specific `saml_NODE_*` or `saml_NODE_*`, but I see no good reason to use a different function. I don't know if it's safe to do that.
This change looks good, I think it is a good practice to have auto block() method that takes the `wallet_a` parameter as a parameter to the `std::shared_ptr` parameter...
I think `message` is not a string, right?
@mmaxim this looks like a typo
should we rename this to `ValidateFunc` and add some description?
I don't think we should have this attribute for the `DataState` and the `DataState` attribute now
What is the point of this change?
s/mquery/PORT_SES/mquery/PORT_server/mquery/PORT_SES/mquery/PORT_container
Why is this needed?
Is it better to use `pip.utils.default`? It's not clear why we use it in the code.
I would keep the old name as it is (not sure how it should be, but it is a little less error prone to see how it can be).
I don't understand why this is necessary (and it just looks like it is just the default property)
Why remove this?
You can do this by using Ergonode_Mailer and use Ergonode_MailerBundle instead.
Please revert this change
So we have the same problem here as we are adding new code to the `charset` method? Should we do it in `setOptions`?
This is the change that defaults to false.
Why not use `omitempty` here?
Why not just call `deferError` in `Close` and `Start` ?
I assume the `implicit` was being used in this file and the others are just that they were originally?
why is it not needed anymore? I thought `protoreflect` already exists in the main branch
Should we make it `skip_config_not_supported`? Or do we need to make it a constant?
This is a bit confusing. It looks like `validType` is used for `enclosureTypeValid`, but not `validType`.
Maybe we should add some error codes here, too.
This is not a typo.
I don't see where this is supposed to be?
You can use `&nameof(nameof)` for the case when `cell.id`, but the value doesn't match
Is the `read` safe safe? If so, why not just return? If so, then return an error.
I would move this outside of the `else` branch, it's not really necessary.
The formatting should be changed
This is just making sure that the schema was generated from the schema
Useless assignment to variable - `BSON::Decimal128` is unnecessary.
I don't think this is required anymore. `application/plan_creator` is still a dependency. `init_plan()` is already in the default namespace, so it is still useful.
The 20ms is the one that's the number of values, so it can be hardcoded to the number of values.
I believe these changes are unrelated to the PR
We should probably move this to the end of `createUpdateHook` and then use the function in the function `repo.go` instead.
This is a bit of an unrelated change. I'm not sure it's worth it but it's probably worth it if we could make it a little more explicit.
Does this need to be in a limit or should it be on the next line?
why not keep the pool_payload_pool_->release_history(reader_payload_pool_, false)); and remove the pool_payload_pool_ in the next commit?
Why do we need the change in the constructor? Doesn't this need to be inside the try-catch block?
I'm assuming the `current_key` argument is not being used? Are we using it at this point?
What's going on here? I mean `mode` is a string, so I think it should be a string.
Maybe `!= 0` instead of `DefaultTimeout`.
Do you need to limit to this? It can only be used by one place, right?
`register_const_s` is used in many of the other scapy imports, can it be removed?
I'm not sure why the rollbackPrimary is needed here.
why is this changed?
I don't like this API. I think it might be a good idea to make the `ToNode` method configurable.
`clientset.Clientset` is a function name and can be used here instead of `clientset.Clientset` (e.g. ` fakeListOk`)
I don't think we need to add these to the client client. Can't we call it `go/client`?
Nit: I would prefer the import in the go directory
Is it worth noting this change? I think we should not be able to handle the case where pipeline is nil, but that seems odd.
I think you meant `call_check`, right? I don't see a reason for the argument
nit: remove
nit. Can the same be done in `skipRowsToPreventHalloween_`
I think you want to import Pyleader and Pyleader as well
The `insecure` parameter is now unused.
This is probably a good start, because we have a lot of tests that use HTTP and their background.
I think this test should be moved out of the test class.
This will fail on every call to MakeFunc. We should probably return an empty array instead of a list.
I think this should be done in a separate commit (and a separate PR). Also, the same applies to other `nameLower` ones, so that they're consistent across window platforms.
Why did you remove the `if`?
This should be done in `self.var_self`, not in `setUp()`.
Shouldn't we skip the `skip_targets` block after this merge?
Could you please explain why this function is not returning a function? It seems a little strange to me.
if np.socketProtect != nil { ... }
This is a bit of a nitpick, but I'm not sure we should make the API call `DeleteAll()`. I guess this is the interface we want? (It looks like it is just a `DeleteFile()` method on the `DeleteAll`.)
I don't see this change in this PR
`config` is not a name anymore. Maybe name it `private AUTO_PREFIX`? It's an implementation detail, but it's more consistent with naming convention.
@jglick Shouldn't we also update the method name to `OpenTelemetrySdk`?
I'm wondering if this should be removed? I would prefer to avoid the final `__all__` in front of the package-level.
Why not just have the volume set to the volume?
I'm not a big fan of making this an `tmp` because the `excessDomChildren` is already a nullable `lower`
I'm not sure this is correct. The `if` is already called in `call` block. It is a function that does it, not a `array_merge`?
I think the only reason this is `sc.IsValid()` is because of `get3()` is in `init()` and `init()` is because of the `IsValid()` call below. This is the only thing that would be needed.
should we rename them to something like: > "Rebeititere for consistency with other parts of the code? If not, should we use "span" instead?
`self.app.get('headers['If-None-Match']` is always a valid auth (as a different value), so I'm not sure if this is a good idea.
Shouldn't this say `keyword` as well? Or is `keyword` actually used somewhere, and `keyword` is used in this file?
This is the wrong place for this. The `S2` command is the default setting (s2), so I would say "S2" instead of "S2".
Can we move the `TogglePrefetcher` to a `Validate()`, since it's not a function anymore?
These should be removed
I'm not sure what this variable does.
Maybe we should move this to a separate function?
is it possible to get rid of this method from Project.getResolvedArtifacts()?
`data`? The name of this key is not really correct.
I think this logic is still confusing since it is a new field name. The winpcapy could be a static field that could be reused. The winpcapy should only have the winpcapy if the name is the name of the field
maybe we can move this to `core.core.asset_defs`?
I think this is wrong. It will not be needed. `strncpy` should never return `None`, so it should be considered considered in `string`
I'd like to see a test with the new value of `only source profile`
This is probably what I'm thinking, we should be using `require` for all the services.
I don't see any new code in these two?
I don't think the `kinto` header is needed, it is just being removed (since it's a `.`)
The `!r}` is redundant.
I think you should not modify the openerFromged method in the case where the key is "disabled" (and then if you're not in the "main" method), it will be simpler just to do `if token == "" {`.
This can be removed
I'm not sure why we need to add the new `go` prefix here
I don't think this is the best place for the env vars. It's a user error and it's not the default. The right approach is to add a `options: {...}` to the next line. `options: {...}` is that the env vars are actually in the same directory, so we can add it to the `options:` block (and remove the default from `babelrc`).
why did we add these changes?
this is the wrong place for this.
Why not keep the old name? The new name is the default for the case that we are not going to be updated with the existing `writeencilAttachmentRasterOrder` parameter.
This is an API change. We'll need to update the description for the new variant.
This is unrelated.
Why not use `OnlySAN` instead of duplicating the code? `LongDomain` is more like `OnlySAN` but `LongDomain`.
Why did you drop the `r` here? I don't think it is needed anymore.
For this new setting, we don't want to set this. We need to set this in a more descriptive error code.
I think we don't need to make these changes here since we're in the future.
This is a breaking change and will cause the `NET` environment variable to not appear in the http build. I would recommend adding an `Embedding` to the `Embedding` package.
`gc UTF-8 strings` is the correct form here.
I think you forgot to remove this
Why not just use `newval = mcontext->xflags;` here?
I'd prefer not to use `issueTitle` here
I don't think this change is needed, please revert
should be renamed to `setup_single_has_left_enabled`
Please add the doc for all these changes
This needs to be a `true`, right?
@smarterclayton do you want to keep this for loop too?
Again, no problem with this, just a small nitpick.
@cra0zy do you have an opinion on this?
Why not volatile and not a field?
I would prefer to see this in the `@author`.
Shouldn't we use `ASSIGNERS` here? I don't know if `ASSIGNERS` is a `string` and `sampler` are in its `SAMPLERS`
I think this was a bug in the test as well.
This is a bit of overkill, but what if we moved this to a `try/finally` block above, so we don't have to do it everywhere, just like for the other methods?
Do you have a problem with the code you have here?
This is a breaking change and will break existing users. You can revert this file.
The way we handle the case where `state` is nil, it will always return false. I would change the key to `setUpgraded` or something like that
Line is too long. [91/90]
Why are we adding them?
This will not be called for the `location` table.
should be the `executionproto`
Also change this to `SimonC`
The logic seems to be missing after `break`. Why is it OK to add the `break` case here?
`time.Time` will be always `undefined`, so I would remove this
I think you mean `type=true` here, so that you don't really need the `minval=8` option anymore right?
I wonder if it would make sense to put this ` BeginMethodHandler<TIntegration, TTarget>.Invoke(...)` in the `ClassMethod`?
This was a bug in #5377
This seems to be unused
I removed these assertions. The reason for the use of the assertion is that the input is no longer a string (in the test).
this was the main plan for testing. we should make sure that the server gets the same in the other environment, not the actual actual option.
Copyright on the end of this sentence should also be changed to `build_Copyright`
Is this really what we want? We are trying to avoid the scope of a change in the future. If so, we can't remove it. But I guess this is fine for now, right?
Why not just add the enum to the cachedValue and then use the cachedValue directly?
I don't think this is a great idea, since we are only returning a lot of items in our API that will be expanded, and this is not a hard requirement, but it should be either something like `ui-grid-icon-plus-squared` or `ui-grid-icon-results-squared`.
I think we should still use the `id` field in the `CustomizeApiClient`.
@jridgewell I am not sure why we need to do this, it's not an `s`
Should this be an `internal` interface? I think that we can make `HttpUrl` a `Task.GetRawUrl()` method instead of a `Task.GetRawUrl()` method.
I think it might be better to return the `cfg.SynchronizableEntitiesPrefix` error.
This doesn't look like the best place to put this code. We should be checking if `opts.fs > ""` before calling it.
This can be removed
`self._tab.is_deleted()` should be `self._check_vanished()`?
Do we have a `_check` column somewhere? If so, can we name it `profiling_enabled_port` instead? That's more clear IMO.
You don't need to check if `forward_ssh_agent` is nil.
Can you add the new behaviour to the new servers?
I would prefer to keep the other way to do something like this: `--work- routed`
Not related to your PR but why are we not using the `vIdLen` here ?
here we can use `!` to check if current_user is null, otherwise we won't be able to determine if we should
Should the header be a pointer?
so we don't need this, we have the same error handling in `app/models/log.go`
I'm assuming the `info` flag is not used anymore, but it is not used anymore.
I think it would be more convenient to call this 'orElseThrow'. The rest of the image is used for this method and in a future PR. Also, we should also check for maxImageRampup.getRampupVersion()
I think this should be a `**kwargs` instead of a `-` in the log message. I don't think it's necessary to use the `-` in the `**kwargs` message.
I'm wondering if it would make sense to have this return `True` in a `values_string.rb` file.
Same as above, I'd just put `kv` as the result of the `schemaMan`.
I'd prefer if the line above this `// #include <stdlib.h>` because that's what we usually do in the code.
I wonder, why is `enable` being called by `interpreter.Eval`?
Does `governingServiceName` work when you have `Labels`?
`default:false` is the preferred form here. I think the `default:false` is more consistent.
I think you need to check that the output of the keys are not in the first place so that you can get the output of the first `section` (since you're not in the second).
import is deprecated
I don't think we should be changing the order here. Is it because `path` isn't the correct location? I don't see the code that calls this `on` method.
Why is there no change needed?
Should we move the `wx` to `mainFrame` as well? Otherwise the change can break if `wx` is not defined.
This code was just about a test. I didn't know it was a test, so I'm not seeing how the test is testing this.
Same here, we need to move this test to the test.
Can we keep this warning in the same way that it works?
Prefer `preload_jar_TA`, if you're using the respond to `remote_EC_ERROR_ON`, you can use `remote_EC_ON` instead. This will allow us to avoid the hard-coded string literals. Not a big deal though.
Why was this error ignored?
@drcrallen this is the fix I found in 4.10
remove this empty line
Is there a reason you didn't just change it to `ss`?
This can be removed. flattenIndex = existence
add a specific utility to verify that it's an instance of the whole object
We should not need a `download_store` function to pass.
I think this might need more descriptive name... It can be improved without the need for the `@py` annotation
Just a question. What is this `dialect` for?
It looks like we're using chan2 now, right?
I'm confused, why is `Code` used here?
I think we should also be relying on the transaction to be sure we are not doing anything about what this was supposed to affect. The transaction is being removed, so I think we should just pass the transaction to the block and use that instead.
`kube` doesn't need to be a directory. The only thing I'm not sure about is `open` here. The `file` is only used to load files that are in the file and not a directory. I think the old code wouldn't be a good idea.
Should we also update the `if (params.qstring.event && params.qstring.event.startsWith('[CLY]_group_'))` case in the `params.qstring.event` case?
Shouldn't this be null?
Do we really need this?
why remove this code?
nit: if the dataverse.rserve.user is a generic name, we could add a `private static final RSERVE_PASSWORD = paddle.viewer.password(...)`
nlen_s -> strlen()
I think this is not a bug, as from is the email address from the DB.
Why not just callact()?
This is also wrong as the default is false.
I think we can just use `getExtendedTypes()` instead of `LegacyFormHelper::getType('form');`, because this will be a breaking change
@jona-sassenhagen we may want to try to fix the issue: `opt_port = opt_port;` `port`
The `name` for for loop may be more appropriate for the loop to be able to use `close` for loop.
This is the only change we need in this file that is used for debugging. If the `Unknown` package isn't found, then the `Unknown` package is used.
`v.length === 24` ? :thinking:
`vote` is not necessary.
I'd prefer if we could assert that the equals does not have any assert.
Should we use `registry.Run` here?
This change seems unrelated to the rest of the PR.
I don't think it's necessary to check the length here, as this function doesn't check for the length, right?
This test needs to be moved to another commit.
I'm not sure why this is here, but the other two conditions in the code are just not there
Should we rename `WireSource` to `WireID` ?
I think we should remove the unused import and use the new one.
I think this should be `resolve_files` (or whatever it is)
Since it's only used in one file, should this be `ErrorDuration`, not `_`?
I don't think we should use `BlockChanSize: 1000`. If the `viewer` parameter is `true` then we will set `BlockSyncChanSize = 10` in `Dispatcher`.
I don't think this is right either. If the plan ans is not found, then this change should remain as soon as we're not running the current analytics, right?
I think this should be in a separate PR, e.g. `UART_RX_PIN_api` instead of `UART_RX_PIN_api`
I think `dnsDiscoveryUrl` is a bit too generic. Can we use the `FieldCanBeFinal` instead ?
Do we still need this?
I think that we can also pass `key` to the `name` argument in the `if` statement.
I'd like to avoid a specific test case for this kind of change.
shouldn't the string be `strlen == 0`?
I think it would be better if the `desiredUID` check was added to `out` instead of the `outUser` check. I'm also not sure about the update, but this is just a little bit of a good idea.
why was this import changed?
I'm not sure we need this here. It's only used for the tests.
This is an interesting thing to pass the passwordTime. I don't have a strong opinion, but this is fine, as this is a change in the future.
I don't like the idea of having the check `ProcessStart` twice.
"really" is a bit confusing, we are assuming the test will be failing on the server side.
I'm a little concerned about this one. If you want to do this here, then please change the behaviour.
This method is still used in the ActionByActionHash method, why not remove it?
Can we remove this?
Please don't change the log files
I don't think we should change these?
This will break other languages, which means that the new data will be refactored into this PR.
why not use `storageTestCase`? This is a very large target, I would prefer to not have to pass in a name.
I think this is the only usage of this function that is used for the `client` library, right?
What is the point of this change?
I think we need to move `editController` to `defaults.js`.
this is just a nit, can we just call it `Process()`?
what happens if `None` is `None`?
This is an API break. If an `WebElementElement` is not passed to the method and `value` is not passed to the method, it should not be an attribute.
I'm not sure that this should be a warning or should we be setting it back to state? @mheon @malgorithms is this change correct?
I think it would be more consistent with other JS JS JS JS use `<amp-embed>` (or `<amp-embed>`). It might be worth adding a `<amp-embed>` to the output.
This should be `0` since the default value is a string.
This should be a `\n`
This was a bug
I would suggest to move this to `os.Getenv`
should we have `@NonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonInO` and use it in all the tests?
This seems to be causing the failure failure
This should probably also be private and `PlanResult` should not be used anymore.
This is an API breaking change, but the actual error is being returned from the actual context, so I'm not sure if it's necessary to change it here.
this is wrong. We don't have to do `hu.FairbankBlockHeight()` in the `+a.foundationBonusLastEpoch` and the `hu.i+a` part in the `i` function.
I don't think that this has any effect.
` FieldLenField` is unused? I don't see a reason for it.
This should be done in `viewer.py`.
I would prefer `maxQueryLength`, because it is an `0`
Is this a change in behavior that caused by #181833?
I don't think this needs to be part of this change.
should the `start_PERIOD` arg be `start_t`?
This file has been removed.
The o.appName is not defined. It should be the name of the function.
I'm not sure what's the difference here. In this case, `onSteadyStateDependencies` is used by `distributed.SteadyStateCanResolve`, and `distributed.SteadyStateDependencies.SteadyStateCanResolve` will return `true`. Is this a "suspect" case? I'm not sure what the best way to do that? If not, I'd like to be able to get rid of this.
So, I don't understand why `has_active_subscription` is called when the plan is active?
Why is this pylint still required?
Why are we using the configuration here?
(style) unnecessary whitespace before a quoted newline
This is not a very dumb question, since the model is a little bit different than just a few seconds, what do you think? Maybe a bit more on the model, but I don't see how it's supposed to work. What about `py_delete_=True`?
omitempty string isn't present, so we can omit the json.
This is unrelated to this commit, but I think it is better to keep some of these tests.
Should be `// +build integration,deploy,`.
This is a bug fix. We should probably keep `Perl_croak` at the end of this line.
I think you can just remove this and use SelectTransactions(Keccak stateRoot)
This is not needed anymore? It's a bug.
Is SCAN_WITH_STATS_COLUMNS used?
Can we use ReportStat.New() here?
I think we should probably have some sort of standard library here.
Why change min to min?
This should have a `SchedPolicy` function. See below.
This seems like it should be ` && (a, &block)`. Otherwise you could have a `:exercises` in a follow-up PR.
This should be done with our code above. I'm wondering if it would be better to have an `export_for_accept()` method in a `export_for_accept()` method, since it is in the `for_accept()` block. I'm wondering if this would be an unrelated issue, but if the check is still there is still in the code, maybe it could be in the wrong place to do that? I guess it is just a little hard to understand.
I think we don't need this, we can just do `required_EMAIL_RECIPIENTS`.
The difference is that the `waitForResponse` function calls are not supposed to be called in this function, right?
This is a change in behavior, but not really a big deal, but I'm not sure how this change is used, but it would be a good idea to add the `!string.IsNullOrEmpty(xForwardedFor)` check here (or just `xForwardedFor`) to the `!string.IsNullOrEmpty` call?
Do we have to change this one too? The `status` is already being a string, so the `/status` should not be a string, right?
This doesn't look right. The `feedsFilteredMsg` is a string.
I'd prefer to see these as a global variable instead of a global variable.
This should be kept to avoid the relevant changes in this file.
Why is this in the `init()` function?
I think `s.fieldsFromJWTSvidParams` is not being used anywhere.
This condition will never be true, since we only need a `&& TypeMemberVisibility.Family` (same below with empty `& TypeMemberVisibility.FamilyOrAssembly` if `contract.Visibility != TypeMemberVisibility.Family`).
I don't think this is necessary. The `depositToRewardingFund` variable is not a `false` as it is a special value of `false`. I don't think we want to have the `var` value anymore, so I think it should just be fine.
This doesn't seem to be used anymore
This should be implemented as a view spec
Can you add a reference to the private `load_Milliser`?
I think `allow_None=True` and `allow_True=False` can be removed too. The `default=None` is a `allow_None` and the default is the default.
I'm not sure if this needs to be part of this PR. This should be `downstream` instead.
I think we can keep the `gogo` prefix here
Why is this needed?
Is this file needed?
Is this correct? If we're not using this, we should remove the CapabilityType.
I don't understand why this is being removed. It's used in the core code, and not used in the core code.
change is not required as you're using the value of the value
I wonder if we should be removing all the information on these methods? This method is only used in one place, but I think this is a reasonable place and it should be in a more general location.
Maybe we should create an issue for that? We could add a note in the description to avoid that for some reason (or even C++11).
Hmmm. This is a bug fix. The user is only used once, not once per ids.
I think this is a bit ambiguous to me. We don't want to be setting an empty string here. We should use `NewWriter` instead.
Should this have `obj=obj.focusRedirect`?
nit: remove empty line
why not "job1" ?
This file should not be here. The new `SQLite3` file is in `constants.go` file in `api-constants.go`.
Would it be better to move this to the `Console.WriteLine`? I don't have any concerns with it, but if we do, we could just move it to `Console.WriteLine`
This constant should be named "instrumentation".
This needs to be `public static event EventHandler<SortedPoolEventArgs>` I think.
I think this is missing the other way round :)
Align the parameters of a method call if they span more than one line.<br>Space inside } missing.
I think this is the only place where you're using this method, but I would also recommend using a `default` instead of `null` (or something similar, if necessary to change).
Do we really need to make a string that contains the password id? If the password id is present, we would need to check `Basic %s` as well, otherwise, we can make it more obvious that the string is not present and the password id is not present.
I'd prefer if this was just `BAZEL_TEST_DATA_PATH `
I'm not sure how this works with me. What do you think about adding some transport to the `target_doc_type` method, that would be more appropriate?
Why are you changing the DB__ROOTROLE sees from the DB? If so, then the change is not needed.
doesn't this have the same naming conventions as we are adding new subscription tags?
The `#new` and `#destroy` seem to be too few things to me. Should we keep them the same?
Please remove this. We'll be using the new interface for all platforms.
why did you remove this method? I think the previous code would be better, if you don't have to add `isFinal`
I don't think we need this. In this particular case, you only need to have a `BaseElement` property. In the `ISHashHash` package, you can use the `getDefaults(min, footer, footer, 1, footer, 2)` which will be used to avoid this warning and not the `ISHashHash`. I think the `if` is fine, but we should only have one.
You should just call it `CAvailableInstallers.Installer` instead of `CInstaller`
This change should be reverted as it is no longer needed
@simitt, do you want to keep this?
this is not right. `github.com/Name/agent/endpoints/sdsv2` should be the same as the last last line.
I would prefer a `> 0` before `> 0`, not `null`.
Out of interest, what is the motivation for removing this?
This is a change in behavior, but I'm not sure it makes sense for the use of `use.Exec()`. It looks like the changes in the file were not related to the changes, but the others are not?
This is where I was thinking we should make this `internal` and have a `error` at the end of `actInfo`.
The logic here looks correct but if you do this in a different way, maybe it's worth doing something like "if organization is not None: CN is not None: CN is not None: CN is not None: CN is not None: CN is not
Another autocomplete that can be removed here.
It seems like a good thing to pass here is that the transactionLocation has the same number of times.
This is the fix I found in #5299. I'm thinking about it. I think we can remove the fix in this PR and change the behavior here to `value.startsWith("%s", 0)` and use it here.
Please add a blank line between tags and summary for better readability.
Use the new Ruby 1.9 hash syntax.
This function is never going to be used.
I don't understand why `approval_response_path` is removed?
Please revert the line break, and keep the ones that are sorted.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is a bit scary but wouldn't be better to have a `Read` method on the loop (i.e. it's not a block) and it's not a big deal if you prefer it here.
Can this be `Optional<argument>`?
I don't think this is needed, `ACUtil.run` should be removed from the rest.
Why are we not checking the message twice?
Why do we still need this?
I think we should be able to reset the component directly in the constructor.
you don't need this, it's only called in one place and should be used in the `static/`
Is there a reason this is moved to the `ACTIVITY_TIMEOUT` field?
This is a bit of an unrelated but the rest of the change is not a good idea.
Could this not be `iim`? We could probably just do `Bobier.processRefCGs(ingressRule.SourceGroups)`, and maybe even avoid `funcRead` on `funcRead`.
Why do we need to set the `Pending` variable here?
You'll need to update the last two lines.
@jcotela is there a reason we need to add this `nextPageTokenName`?
Please keep the same pattern as the other one, it makes sure we only change these routes.
I would prefer a more restrictive flags that needs to change to `State`.
"should be"
Not sure what the meaning is here
This is not needed anymore?
Is there a test where `nodeName` is not `img` and `input` is set?
This test is no longer needed.
`if len(sha1) > 7` is not sufficient here, and the next line should be `if len(sha1) > len(sha1) > 3)`
I think this makes no sense.
We should just use an `object` rather than a mock.
This is the only place where we need the `setDataset` method. This is a bug, which is the only place where we use the `res.getDataset()` method.
Is there a reason why the config should be `orderPath`?
Why are these changed?
I think you forgot to remove these
If the object is a `boolean` then it will be `boolean`, right?
This needs a space after `,` right?
What are you trying to test here?
This is a nice thing. I don't see any usage where you don't use a wildcard imports.
It's not obvious from this code but it seems that `armor` is always 0.
Remove redundant import
Should this be `consumerID.Identity`?
I'm not sure if we should just delete this override. This is a public function that is already called in the `override` object.
I think `recently_published` should only be used once, and the first one should be used when `recently_published_first` were not?
I'm wondering what's happening here? Do we have some other test that might not have this sort of exception?
Should be '0.5s'.
This is the only place where the `json.Marshal` would be used here, right?
This is the fix to the include.
this is a bit hacky, but a little confusing...
should we just delete the validation that the number of the Launch Template are removed in `CreateLaunchTemplateVersion`.
Why not just use a single container here?
This can be a single object, not a `.spec.`
This doesn't seem to be related to the PR.
You should just remove all the lines in `boinc_file_exists` function.
Why this import is removed?
this is the only place where run the test was passing
I don't understand what the null check is about
I don't understand why this change is required.
Nit: remove trailing commas.
This should be `MetricStreamConfiguration`
nit: can you move the import outside this file?
> `Type::None` [](start = 16, length = 10) nit: `type` should be `string`
this is an error condition.
Why does this change anything?
I think this should be an `Error` instead.
Is this still needed?
I'm wondering if it should be `httpOption`, not `host`.
this does not log anything. we should log something.Warning("%s
This is the only place this is called for a test.
Please update copyright year in header
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [81/80]
Line is too long. [90/80]
The `!inputs` should be dropped, right?
Is there any chance we could move this to `g te.rst`?
I see that `typeof event event event is null` but I think this should be `!`
This is a bit unfortunate. I wonder if we need to do `j.BlockServer.Shutdown` after this call. If the call is made in `newnew` then I think that we'll need to call `Background()` in case `newnew` fails.
what ifperiod.fraction is not set?
Is it possible to just pass the message as `peer`? We could just pass the entire message to `service` (and remove the other error message).
I would prefer to see a global variable called `false`. Also, I would use `true` as a parameter to indicate the value doesn't matter.
I don't see why the plugin path is removed?
Nit: maybe `getAttribute('alt')`, `area`, and `getAttrValue` are both both present in the test and the test case.
What happens if we don't have `userscripts.UnsupportedError` ?
@becker33 I'm wondering if we need to keep `new MongooseBuffer(value.value(true)`. The BinaryoseBuffer will return `null` if the sub type is empty, which means it will not be `null` because we would not have to change the behavior in this case.
This is a bug fix.
This is a change in behavior, right?
Why not use the `getCurrentEntityURL` method directly in favor of passing the value directly to the `getCurrent` method?
is this change still necessary?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
This doesn't really fix anything.
Is this an error?
This will break all existing models.
if (0 == pthread_attr_init(&attr, PTHREAD_SCOPE_SYSTEM) || (0 == pthread_attr_init(&attr) && ...)
I think we should add a TODO to remove the `Objects` here.
I'm not sure if we should do that for all implementations, since the logic here will still be correct.
Can we just make the `false` optional? It's not a `bool`, but it is a `== false`
This is not a problem.
Should this be `None` for pyqt?
Can you add a doc block about what's the problem with it? This is used for other code. It's just a cleanup of other changes, so it's fine to remove.
Is this really needed, or just for testing?
I don't think that this is the correct place to put in the IAutomaticTracer package. We should add a new method.
I don't like having an 'QueueQueue.format(html.escape(self._opt.text))) else: if the string is not a string, it will return a string like 'QueueQueue.format(html.escape(self._opt.text))) else: if the string is not a string, then it will return a string.
This is used in a different way, we should be able to just have the default constant for `azkaban.password.index.common.config`
I think the var name here should be `update`, `scipy`, etc.
I don't understand how this is used in the LINUX_VERSION function, it seems to be used in the new LINUX version. Can we move this into the LINUX version to be a different location?
Please don't make this variable static.
wow i was thinking that this could have a bug in the first commit
Please add a check for the error message here
Does the patch need to be passed here? Can't we just have a function which returns something like "patch command failed"?
Why is this needed?
Line is too long. [100/80]
I think this import is unnecessary, is it?
This should be return true.
The `isFullScreen` logic should be removed, right?
Please don't add new data file anymore
Is this related?
Do we want to show it's default?
You can remove the line if you want.
struct is ok?
This should be named the same as the other variables. Also, should this be named `mConfirmDiscard`?
You should add a `is_string` parameter to the `media->getBinaryContent()` method that is called before calling `is_read()` in a few other places.
This field should be checked in an error instead of in the field.
I think this function can be moved directly to `proToDelete`?
This is the fix
Do we really want to expose `initTime` and `getInstance` as a collection?
The variable $attributes. I would suggest $attributes['class'] === '' and $attributes['class'] === 'true'
I think we should not do this. Another good alternative is to log the node's default, if it's not specified (e.g. the default).
This method is never called. `installedVersions.remove` will never be called.
Same here, let's not usebridge.send_command
Is this a bug fix?
This should be `Serializable` instead of `& Serializable` (as it's in the other places).
why remove the `this.state`?
Now `disable_iptables` is now unused and can be removed as well.
go without a `# noqa`
Should this logger be logged at line 147?
This should be `allOutputs && !dep.Outputs())`
I don't see this used anywhere.
This condition is already set on line 355 above, no need to check for `mode !== 'primary'`
I'd remove this
This import is unused.
You can remove this line and use `is_powershell` instead. The other way is to use `cur_path = cur_path.gsub(/\n)`.
I'm not sure if we want to have a `<%= [x]` here. If the default is set, we can add the `<%= [x]` to the `edit_guidance_alert_dialog, Y}` tag. We do not want to have a `tile` tag in the `tile` tag.
This message was confusing. The plugin uses {@link ...
I think it should be `add_undo` instead of `add_undo`
@deads2k do you know why this is being made here?
What if the `navigations` is not `null`?
I think we should use `dom.checked !== dom.checked`, to avoid the `if` condition.
Is this the `glue-code` code in the `init` package?
Does it need to be in the array?
Can you add a description of what this table does and why is it a row instead of a row?
Is this a good candidate for a test?
What about just `from os.path.join(the * __version__ != null) for new required required required ?
Is this necessary?
This was a bug in `lvis_v1_instance`
The info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info.
`RaiseSingleton` seems like a better name.
This seems to be a static method, maybe `JobExecutorTests.class`, since it is static?
We should probably check that it is a string before it is present.
The `clone` here will be removed after the loop.
I would suggest using `KindEcsAppAuth.Ecs` to be consistent with other `KindEcs`s.
Is it necessary to set `self.location` in `BaseTree`?
This line is not used, it is no longer used.
This is a key, not the key. It should be "kubernetes.io/hostname"
I don't think it should be in a separate PR. The other changes are to the import of the `config` package.
This looks super weird...
Is it safe to use a function?
this can be null if no no parameter is set. If the caller doesn't have the type of the method, this file is still empty.
I think this is a good idea. It might work with the code in `#if (bome) { ... }` but I don't think it's necessary.
Why not `unsafeSeed`? The `unsafeSeed` object has a single `Long` object, it is a `null` object.
@alexander-schranz can you change this line too?
Why not `string[]string`?
Can we remove this extra line?
This is a new one, no one is using it
should be used instead of hardcoding the name
Shouldn't it be `github.com/iotexproject/action`?
Do we really want to keep these? I'm not really sure why they are related, just wondering if there's anything we should be using.
This is only for testing purposes?
Maybe add a link to the `//` and remove the `//`?
Who will happen if `getLogicPasscode` fails?
I think this was causing the wrong error, right?
is this the result of the `Initialize`?
I think we need to make `down()` return `value` for `null` value
I think `req.Pagination.Token` is a more descriptive name since `fake` could be `nil`.
nit: use `f` as an option to avoid the `vector` object.
This is just reusable on `respond_to` so you don't need to save it every time.
I think this should have more readable
`^ define(Beaker::Command.new("arch | grep x86_64")` is sufficient.
Are you sure you want the writer? I'm not sure whether the writer writer is needed, but I am not sure.
This is the fix, right? I think we should just remove the if and not do the right thing.
I think URISafeName should be URISafeName
this should probably go to the user's builder
It's not clear to me whether this is a requirement or not.
I don't think the previous `return` statement is necessary because the `assert` statement is already catched above.
Can you please add a TODO to track this if statement? It's too big a bit more like `if (_layout.IsThreadAgnostic && (this.IsThreadAgnostic))`.
Should we rename LoggerFactory.getLogger to be a proper Logger object?
The `no_limiter_drop` part is not needed here, as it will be the one used for the node.
why is this change required? we can always send a new data if we're not doing the actual data?
I'm not sure if it will ever be a valid output here
I would prefer to have this check `procCodeA.localeCompare()` to get the procCodeB itself
I'm not sure if this is a good idea for the situation where it's a non-empty string. I think it should have a message.
Does it make sense to set the `ManagedMachinePool` here?
why remove this? I'm not aware of the use of facet, it is now used by reflection
$property => 'select' ?
should be `private` if `return returnType == null` ?
It would be better to keep this property in a separate pull request.
Why does the same thing need to be skipped?
I think we don't need to escape table here, as otherwise we will always get table.
I'm not sure we should require this here? I think it's not used anywhere else in the codebase so maybe we should move it to the core?
Please rename to `payments/crypto/payments/crypto`
Bibliographic is the only thing that is needed to make the change.
Can we use some constant here to indicate whether a value is an enum? Or should it be an enum?
I am confused as to why we have this in the first place. Is it possible to get this from the config?
hashivault is a bit ambiguous?
I'm not a fan of this, but I'm not sure if the `&& x x < *>` would be a better name for this, which is the default. But if we're just setting a default to false, this would be better to keep it false.
This file needs to be renamed
This is the only one that will have.
This should probably be `CheckErr` only if the file is not available.
I'm wondering what the bits of the `dscp` bits is, do you think this is the correct behavior? It might be more appropriate to have the `dscp<<2` be the right name.
I wonder if this should be an error instead of calling MolToCXSmiles in the first place?
This is an easy one, but I think it's fine. But maybe it's a `_param` property?
This change seems unrelated
why the entity is empty here?
I think we want to log the error message to the caller. For example, if the client is actually a non-Python error, then the `conda.core.store.GetOutboundIP()` will return a `conda.core.store.Secret`.
Is this needed at all, since the namespace is already using the namespace?
Why are we using `fboHead` here and not `fboBlock`?
I think this should be a separate PR.
We can use ` gasPriceUnitIOTX` here.
While you're at it, could you please change the signature of `wait` to `Func`?
I don't think the changes to this file are necessary anymore.
this method is synchronized
do we need the `:edit` here? We do so many of them in a single PR, right?
Perhaps this should be `Este :attribute já ligado`?
Can we use `from databricks.koalas import ks` ? This will avoid the need for a test.
@tannergooding, we still have an `err` in here
This is the only way to go about this, we should also update the doc for all the `AddTasksRequest` implementations.
I think I would prefer if we keep the ` trail.complete?` as the `map[string][]string` (e.g. `completed_trails/trail`) instead of ` trail.complete?`.
this return statement is not needed.
I'm pretty sure this is the one that we want to be able to get away with `_` in the `setup_environment_environment`. I think it should work with `_` or `_end_end` in the `setup_environment` and not the other `_end` methods.
If you want to be sure that this tests the right value is, you need to run the test and that it is not a valid value. Otherwise you can use `TestUtils.has_exists()` to get the right value from the environment and it will be more clear.
IMO this is not good idea. We could use a helper here to prevent errors from being returned.
I think it would be more consistent to keep this around, and just use the local var and use the variable here.
Is there a reason we are not using `cleanupSyncsSoupIfNeeded`?
Is the `artist` option used anywhere?
I'd rather we do this in `# ENABLE_sensitive_args` for clarity as well.
Is this the only place the test is being raised?
This will cause the `self._get_firefox_options()` function if the browser is `None`, which is checked for `self._get_firefox_options()` (which is what the browser has).
You can use `if not 'text_html' in ...:` instead of `and`.
I'm not sure if this should be `user` since it is used in the controller.
What if we added a check for this? I think this will break all the other way around and I'm pretty sure that we are trying to avoid the NPEs.
Is there a way we can do this at ADC pins for ADC pins? Or is there a way to define it as separate ADC pins?
Should we make this `messageReceipts` instead?
@lukehoban I'm not sure if this is the right place to put this. if it's the last thing we need it to be in the server. I don't want this in the server. The `ngrok` module is still in the `spack install` folder, right?
I would suggest to add an example of how this should be set.
Never use of the `DynamoViewModel` class.
this is just `immediatelyMetrics.Config` right?
Is this test case related to the new test?
I'm confused, what do you think about adding a note to `metric.transaction` that will trigger this error if we're trying to load the status update.
This will not work as expected since `Name` is nil.
Why do you need this hardcoded here as well?
I think we can return the correct `buildFilter` method here and in `init()`
Can we make this a breaking change?
There is a typo here, right?
why name? is it a valid value?
this import is not part of your PR
This doesn't appear to be an override of the function.
@tgamblin Can you check what you are trying to test in here is this file?
Is the cast to `compressor` correct? Can we remove `Deflater_JDK8252739`?
why is this public?
Standards: Please add a space after commas.
I don't think the "main" is necessary since you can generate the ``year`` header.
Huh, so why do you need this?
I'm wondering if this is the only thing that's needed for this PR, but we should not make it available to the new build process for this PR as it will have the same issue with the build process for the new build process?
this should be a private method
This should probably remain the same condition.
You could just use `string.IsNullOrEmpty(newValue)`
I think this will break the API review, we want to log the client.
We should use the default peering port for the network from the config. It will be easier to change in the future.
This line was not being used, so I removed it.
What does this do?
I'm not sure if this roleText is actually needed. If we don't have a roleText, it will be an instance of the roleText.
This should be moved to its own PR: `<dcontext, 5}`
@DanVanAtta Can we keep this line as it was originally and just remove the extra line?
This is unrelated, but should be done somewhere else.
this code is duplicated code, can it be removed?
With the change to `tag_3002_col_2` the source values are `prop`
@jcotela is this change related? If we don't do that, please remove it.
I'd like to understand this change, it's not used anymore, but I'd be in favor of having an unrelated commit
Should we have a `try/catch` here?
I am not sure why `strncmp` is the correct form here. I would expect that the string representation is the correct form for this case. Maybe we can just return `string.valueOf` instead of `string.valueOf`?
I think this is a bug fix.
@tarekgh I think you want this to be `ftSchedule<C>`?
This is unrelated to the PR.
This shouldn't be needed. In the future we should try to filter out the `deactivated_on` if it's not set.
@davidjumani I am not sure why this method is needed, if I have a similar method in `getOption` it will return `false`. If so, I think we should just check for `argSpec.isOption()`
I don't see this new `if(version >= 1100)` check anywhere? I'm not sure if we could do this before merging.
We should not have the original package for the new tests. We should have the same pattern for the old one as well
`html_safe` is not really a valid url, so we can just use `title` instead.
@cramforce can you confirm this is the subject part?
Why was `defaultSamplingProbability` removed?
Why are you adding `generateDeploymentStrategicPatch` to `Deployment`?
info() is called on debug level, so we could use it.
Is it safe to use DCHECK directly in this function?
why not just `default getImage()`?
This line can also be removed.
I think we should remove the attribute if it is not used.
@kennknowles do you think it will ever be worth adding this to `videoConstraints` as we have in `videoConstraints`? I don't see a need for the `this.` in `videoConstraints`
This should probably go into the `validates` class above
I wonder if `!ctx.IsSIMPSIMP(ctx.Target, "")` would be better?
The `Append` function is not called in the test. It was not added in the test and was already handled in the test.
This would be a breaking change for when the `span.entries` is `nil`. We should also add this to the `span.entries`.
nit: I think we should use the `keybase.SearchTopology` helper instead here.
The default for `$dataSource` is used to be able to use the same `sliderItem` as the `sliderItemList`
Could you explain why this is a good example? I would have expected `claimFromRewardingFund` to take care of the value of the `claimFromRewardingFund` in this PR.
Maybe we should just use the string from `NOGIL gil` to avoid a conflict with the other changes?
This is not the right place to use this interface. I'm not sure if `Block height` is still a good idea, or at least we should add a new interface that can give the block height.
Why do we need to do nothing if it's not an integer?
Why is this change necessary?
@bparees this looks like an optimization... I don't see a need for this.
I guess the `throw new \Exception(...)` could be removed too
The value is `dataType` so the `data` can be `true` by default.
We could probably use `string.IsNullOrEmpty` here too.
@kimanshui1991 can you please change this to `02815`
This is the same as `KDbKey` which is a `KsqlKey` (which is not the default key), right? Why do we need to check for `ToBigEndianByteArrayWithoutLeadingZeros()`?
why not use `x.tbk.Size()`?
Is this the correct name or just `isAppInsight`?
I think the "used" message should be moved into the `log_key_format`.
This was the only place where we were using this code was. This is now a no-op.
I would prefer to use `objects.status` instead of an empty string to avoid the duplication.
Shouldn't `CPU` be part of the `Update`?
I removed `setup_rvm` since this is not needed anymore.
This is a good idea, I am wondering if we could move this method into `TODO` to keep the code simpler? Maybe `TODO_ire this somewhere into `ValidateFunc`? Or `ValidateFunc` instead of `ValidateFunc`?
What about if `from_ts == None` ?
Why the change?
You should be able to use XOR now
I don't think it's the case here. It's the problem with that is that if you have the `Location-Status` then you will get a `SetCookie` value from there.
@cramforce is the new include needed here?
@tannergooding I think we should remove this, but the new import is unused.
I wouldn't add the `from` statement to the `join` method.
I think we want to be more specific and use `as_array` for the variable name.
This is not the only one I don't like about. I'm not sure how I can make this work. In that case, I can make sure that it works.
This controller needs to be updated to reflect that the new file is created in the `application/x` folder.
Is there any reason we are not using `add` in the `width` declaration?
Shouldn't we be using something like `@JsonIgnore`? It's a no-op, right?
I'm not sure that this is the right fix. It should be: `#ifdef ~AARCH64 || x64. */`
Should we make this the default setting? If we want to be looking for a new table, this means the new table is updated as part of a new table and the new table is not updated by a new table. This would make a change in behaviour that we would not have to change in the future.
This option will be re-used as the option option for now
I'm not sure if this is the right approach. This change is correct and I can't see any difference with the changes in the `TryParse` method.
This is the wrong place to put this.
`confidences` will return the wrong value.
`INSTALL_ipvs0` is used to be used in new `_init` module. I'm guessing it is not used in this PR and I don't think it will work. But, I'm not sure how to get to that `INSTALL_ipvs0` here. I think we should just have a single `hashhash` that we can have the `_init` field and only set the `from` property if the value is an `Better` field in the `get` field.
Is this a typo?
If the problem is that the resource service can be used as a determineGateway, then the determineVirtualService should be used as a determineGateway. Otherwise, it can be used as an argument.
This is a breaking change. The test that calls `testing.T` and `testing.Exporter` are only called once. It should be removed.
`JSON_DATA` is unused
So this code was not able to be calling `IScopeManager.Instance` in this PR, but is this not the same behavior?
I am not sure if `fieldPath` is really needed here. It is just an actual field, not a specific one.
This is a bug fix?
I think we can remove this and use `@since 5.0` instead of `@since 5.0`
If I am not mistaken, it should be `_poSSwitcher.ForkchoiceUpdated(newHeadBlock !=.Header);`
If you're using the word `Importer`, why not make it a `data etc` for this parameter? The word `data` is a little too broad. `dataDiskIndex` is a `Sync` for me, I see it is the number of consistency, and it's not a `Sync` for the number of elements of the objects that are in the same file.
I would call `self._internal.index_scols` here. It's a little confusing, it seems like it should be an `int` or a `int`?
Why JSONValue map can't be used for other map?
This is the only change I'm not sure about. I'm going to ask why we don't do it for the first time we call this method in a loop before we call it. I'm not sure we need it for now, but just wanted to check.
Why not `ChannelImplementation` to `ID`?
We should rename the `removeFiles` method from `removeFilesState` method and `removeFilesState` to be consistent with other methods.
This is the only change that makes sense, but it seems like it could break the code. The ` idxCurrentSort` is used by the `idxCurrentSort` value.
The IMPORTANCE library is set on the `IMPORTANCE_HIGH` field.
The error message is not quite helpful for a user.
This is a little hacky - I don't think we should convert the `convert_to_timestamp()` function into a tuple.
This seems a bit odd. Maybe `zero.getAvroName(origFieldName)`? Also, what about the other `isValid` field in `io.prestosql.plugin.plugin.plugin.Field()`?
Could we have a default value of `""` here?
This code can be simplified to `objectName = []` or `updateName` and `updateObjectName` to avoid calling the resource twice.
I assume we don't want to use the `Stdin` variable anymore?
(style) trailing whitespace
This should be removed.
Is this a typo?
Wouldn't the solicited `nil` be better?
why is this removed?
I think we don't need to add the `a` tag here
The `Stop` function should be moved up there, I guess we can safely remove the `pkg/config/before/1` package from here as it will be used later in a few other places.
I think we should be able to delete `util.simplesimple` and `util.simple.simple` from `Warnf`.
I'm pretty sure this is the only thing that affects TF TF.
I'm not sure how this was related to the issue. @nmittler - I'm not sure if this is the right fix. I think this change is still needed, because if you don't want to do anyone to keep this, it will be good to merge this.
Not directly related to this PR but I think this is what we want.
It's not clear to me why you're using the `should` helper here instead of `we` here.
This should probably go into the `ChangeForReader_t` set above to avoid the extra extra work in the `REQUESTED` list.
I think this can just be `Word` because we don't know the `BaseElement` dependencies. AFAIK the extension is going to have an `lodash` dependencies.
@JeremyKuhne do you remember why we didn't add these public methods? I don't see it in the PR
@DaanHoogland this file was not working before, as the `dependenciesFilters` file has been moved to the base class.
This can be a private method, I think.
This method should be placed inside of `BaseTree` (which is what happens in the `BaseTree` class).
I think you can also do `var Tls13 = (SecurityProtocolType.Tls | SecurityProtocolType.Tls12)12288;`
I think it's better to move this to some common lib
I think it would also be better to just use a logger.error instead of a string.
This is no longer needed.
I'd have renamed this PR to something like `zip` or whatever it's used in the test.
reason? is this the same as the one above?
Is there no namespace available for these?
The `TLS.var` does not seem to be necessary, it does not. I'm not sure if we want to do this, or is it really necessary?
Why not just add `// res is openshift response` to `response`?
I would prefer if you don't have to escape quotes here.
I'm not sure why the check is needed here.
does that mean that we can now keep the old public?
Is this an issue or a problem in terms of work?
Can we just use `is` rather than `(`? This way we won't get to `(` and we will not be able to generate `(` with `--`
nit: I don't think it's best to import the "hard-coded" style (just in case).
We'll need to check that the user has an `KeyError` set to `true` before it gets set later.
Is this going to compile?
I don't think we should be calling this function here - if there is no `lookup`, it might be better to just call this function and use it here.
why not EMRFS?
Should we update all routes to be `maxrequestbody `?
I wonder if we should just use `ssl_factor` here? I think it's better to keep the same behavior as it would be `ssl_factor` if it doesn't exist, and it's not really important.
`dialect` should not be used in this PR.
Please update the doc string as well.
This is a very specific bug fix. What about just `where --no-my-string-class --no-my-int:`?
@wilderrodrigues I think I'd prefer to use the same naming convention for `C:\...` and `C:\...` here, in the future, `C:\...` is a bit vague.
Just curious, how does the `if (tmp)` condition get executed?
nitpick: can you revert this?
`Status::Error` may have been the same problem.
Should this be in the `pkg/api/chaos.go` folder too?
Can you add these docs to the new parameter list?
This is a part of the public API and should be removed in a separate pull request
Should we set it to 0 in `V4TrieEntry`? I'm not sure it will work, but if there is any potential for some other V4 LPM config (i.e. is the one we expect there to be a number for that) then I wouldn't remove `lookupPath` from `t.root` and then use the `lookupPath(buffer)` to get the first part of the `V4Encoder`, which is more likely to be set by the caller.
Why do we want to do this? This is a bug, and it should be a bug.
Maybe `glog.Infof` could be moved to a common function in this file? I'm not sure we need to add it here.
@mjkkirschner I wonder if it would make sense to have a separate test for this, too.
I think it should be `this.flowFinished && this.execId`
can we also include `Workflow Workflow`.
I don't think we want to add the link to the database. I think it should be possible to get rid of the `symbolic link` part of the form and then just do `{{- if .IsDir` in the form.
I would prefer `array()` as `@param`
This line is not related to the PR.
I think we can just have `getSVG`.
This is the main change.
Is this change required? We don't have to make it default to `False` for default.
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
I think we should add a TODO to remove the code.
You need to add the `m.Get` to the base class.
Why do you need `addrs.ok()` if there's an empty `empty()`?
I think we can move this to the `Settings.JSONBool` section above.
Isn't the Series a separate requirement? Because the method is only called once, not every time.
Same here, let's use `TODO` instead
We should consider moving this to `Configuration.Create`
The `posNext` is the same as `var limit = input.IndexOfAny(new[] { '+', '-', ']' });)`, but I think we should keep this (posNext = posNext).
I think this is the wrong place to put this in the `if (`
Is there a specific reason for this change? I'm wondering if `Klog` is not used in the code and I don't see a reason for that.
last_modified is defined on line 446 above.
Please use `config.Mattpillow`
This should be a separate test.
`!http_proxy` is already set on `http_PROXY`.
Please add a space after the `if` and before the `if`
I would prefer the original code here, to avoid making it a public var
Can we move this to the split size?
we should probably make the same change as for `i18n` and `i18n`
Shouldn't we check for the empty string here?
This should be `GET_CONTEXT`, not `GET_GET_smart`.
NIT: Can we rename `encoding` to `systemEntry` and `systemEntry` for consistency with the other uses of this exception?
i think `positional` should be `False` as it is used only when a default parameter
Can you explain the logic of these changes? It seems to me like the changes are not related to these changes, right?
It's probably better to make the `__name__` be `spark_session_local.resource_fn(None)` instead of using an enum for `Trees` here, as in the other `Trees` block. This will make the `Trees` delay more complex and will make it easier to debug when it is used.
Is this a breaking change?
Can you change this to use the `sp2` format?
nit: remove the trailing whitespace on this else
I don't see the argument in this method used anywhere?
nit: move this to line 121
This should probably be a `NewTestReferenceCtx`.
Why is this part of your pull request?
Is this needed?
Can we just remove this? It's a bit odd, as there will be more than 1 exception per exception.
Is it a breaking change?
Can you remove the empty spaces around the `(`
why is this file changed from this pull request?
We could add `isFirstAdmin: false` here.
Do we really need the type annotation here? Can't it just be removed from the file?
This method is not used anymore. You should revert this file.
Can you add a little more specific to this API? This is only used by one user and I'm pretty sure this is how it will be used by the API. It will be easier to read if we add a name for this type.
This should not be needed if `args.class_wise` is passed.
Why is this needed?
Can we just use `task.file().path()`
nit: `from config import template` (i assume that it is used in tests)
I don't think we should be changing this.
Remove empty line?
shouldnt we change the names to `StaticNodesNodes`?
I think we should add the docstring to this docstring.
This is the same as line 118.
@Pearl1594 can you help me understand why we have this condition?
I'm wondering how did this work in the past? It would seem to be good if we'd be able to get rid of these.
This TODO is not needed, because the URL doesn't have access to the pause container, but the URL is only used to access the pause container.
This was a bad idea, as this could have been a `null` check and be handled in the `buildCallback` method. But if the process was not found this will never be true, then I wouldn't expect this to always be non-null.
(style) line over 80 characters
This is probably just for debugging, but it's really not that important to do here - it is worth it.
translateing the totalRecordCount to be consistent with the rest of the function.
I think we want to have the test for the `*`/`*` cases in the test. Otherwise our tests won't pass because `x` is an integer.
This is not right. You can call `tls.TlsHandshakeHook,` without changing the `iter` and `iter.TlsStartClientHook` here.
This is the cause of the bug, we can't remove it. I think it's fine.
I think we should use `getUrlFromRouteCache` here
Is this necessary?
This error message is repeated twice.
I know that you didn't write it but I wonder if we can just use `&&` instead of `Aggregate`?
this was just for the new tests?
Align the parameters of a method call if they span more than one line.
Why is this being removed?
I think this should return `None`, and then we should return `tokens.string` here.
These are actually the same, I'd just call them `/` and remove the `_` part.
I'm not sure why this change is necessary, this is the only place where we are trying to load the server in the `component` environment already.
I'd rather not use `NewResource`
Please remove this
should the resource be an empty string?
Why this line was removed?
I'm not sure why this is needed.
This is going to be a good place to put this in the `HttpsConnectionFilter` namespace. It is not clear what the existing `Filter` param is.
I'd remove the `createQueryBuilder()` here and below
you don't need the $this->->->layout below. You can just put the old code below the old code.
I don't see where `readdirSync` is defined.
Is this a typo?
Why did you remove this line?
I think the URL URL is wrong. It is used in both `_start_path` and `SquiltClientClient`. I would suggest to use a more descriptive name, e.g. `_start_path` instead of `_start_path`
this is a very large number of times we have to expose in a different PRs. if we do not need to expose this, we should just use `GasPriceOracleAddress`
Use the new hash syntax `:host_tags             `
Why the double "i"?
I wonder if this should be called if `zh-hk` is true instead?
nit: I'd call `#getQuery()` here
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Can we add an explicit `os` here so that the `label` value is not in the middle of the string?
This will be called in the `InnerObjectObjectWithSelector` interface, no?
Do we still need `InitContext`?
This should be an `isinstance` check instead of hard coded to avoid confusion. I think it would be better to use the `isinstance` attribute in the output to check if the window exists, and if the window has been created, the `window` value should be a value that should be the same as its value (the current window has it).
I think this should be `newProps.checked !== dom.checked`
This should be indented one space between the method name and the first argument.
Shouldn't it be a pointer?
This is a change in behavior that will cause us to have a version number in an existing table.
@jridgewell any reason not to use number of BulkActions reached here?
I think this was the problem. The `Address` was only used to create `addr.ChecksumAddress`, so this was not the problem.
you can just do `HeaderRestart`
I would suggest to rename the `getHeader` to `getHeaderHeader`
Is it worth adding a TODO here?
Shouldn't it be `has_many : sitemap`?
I don't think this is a leftover from debugging.
I would not add this condition to the phpdoc.
I'd like to see an example here where `index` is a `exists`
The root device name is used by a lot of times in this PR. I don't understand why this will not skip. We should check for the root device ID in the future.
This will be removed in the event handler as well. Much cleaner and the changes to the component to ensure the event is being created in the context of the component.
I don't understand this change. I mean why would `if p.value_size is None else None` ?
This will be in a different PR
I think this should be `2.0` instead of `2.0` right?
This is a very good name to me. It's not clear why we are not using `cast` in this package.
`uint64_t` is already a `mmap_errors`, so why is it not a `allow_uint64_t`?
this change is not related to the PR. but it was here so far and I'm fine to leave it in.
should we add an assertion to the user if we can't specify an exception?
Why not just set to 1 if the flag is set to 0? This way it is consistent across the other call site.
Why do we change the Spana prop here?
`match_low_quality` -> `match_low_quality_match`
This should probably be in the same config file as `config`
I think you can just do: `aria-label": "hidden": (true if ...)` and `aria-label": old_hidden`
I think this should be `pyspark`, `pyspark<mlflow>=0.2.0`, not `pyspark<mlflow>=0.2.0`.
This could be `Uninitialized`.
This can just be `object` right?
I don't think this check should be in the `element` package. Also, this check isn't needed. We can just use `element.if_visible` for the `element` argument.
Is this the only place where we have the `isHTTP` check? It seems redundant.
It's better to return a `Validate()` function. In case you want to call `setRequest` we can return error and then use `addTemplate`, which would return a `setTemplate` function. I don't think this is a problem, as it's not really the same. I think we can just return a `nil` error here.
is it expected? we are changing the default value?
What is this?
Can you change this to be a `depBuilder` instead of a `dep`?
This file does nothing. It doesn't have a `dok` file.
Are you sure this will never be called? I guess it will always fail on a few lines below right?
Why not using the same imports?
I think it's fine to just ignore the console.
Why not an ` - see`?
I don't think we should add this to the `Math.round` method.
same here, let's not use the function for this
Code Standards: Parenthesize the method arguments if it's surely a class.<br>Line is too long. [82/80]
Is it possible to get rid of the `Hive` part of the `EngineConfig` part?
Why do we need sleep here?
Why not just return KV.setMetaVersionMan::updateMetaV2(engine) instead of using the KV?
This is the only change we should keep. The new version of the package should be able to use `V0` for now
We don't have a good idea for this. It's a good practice that we should use `/wow/pages` as the default.
I think we need to remove this line.
@deads2k this is the new API change.
What about the corresponding `stephyrT_OF_FURY`?
Can we pass host.Host and func instead of host.HostFactory?
I don't think we should be doing this. It's probably better to use `goByName` instead of `goBackInTime` as that is what the timeDuration is and when it's written.
You should setLanguage directly in `setLanguage`
@deads2k do we need these changes?
I don't see where this is a new revision.
Line is too long. [91/80]
Nit: "the link" should be "the link"
Why are we using the constant here?
Is this used anywhere? I don't see it used anywhere
I think this is not a good idea, but the `if` can be removed now?
Why are you changing the order?
I'm not sure about these changes. It's still a typo. `StartTime` could just be `mne/utils.StartTime`.
So, I wonder if it would make sense to move these methods out of `host.is_pe?` to `dump_puppet_log`?
There's no need to do this for every single-admin function. It's just a few lines down below.
I'd like to avoid using `org.apache.tuweni.concurrent`.
Does the `AddTxResult?)` not have `Keccak?`?
It looks like this method should be put after `newPieces.add()` before the constructor.
The change in this file was just reassigning the code to `s` and `ArrayType` to the next `message` variable.
Is this InstallCRD a valid variable?
I think we should be using the new API and import
return nil if line == '-e:1'.freeze if line == nil`
I think it is still useful to have a `ware-origin` sharing (e.g., `ware-origin`, not `ware-deployment`, or anything like that). I think you can just add it to the cluster. Otherwise the changes in the cluster will be more efficient.
This is wrong. It doesn't allow for obsolete indexes to be obsolete indexes.
Align the elements of an array literal if they span more than one line.<br>Space inside } missing.
I see the code here but I think `if (this.toolbox_)` might be a more descriptive name, maybe `toolbox_`?
I'm surprised this is not part of the `ReSharper` check. I don't think the caller should set `peptideGroupDocNode = tuple.Item2;` here.
Please add `# noqa: EDF for an `assert` to the end of this and `db`
Can we add an alias for `learn-ralph`?
`@sig` should probably be removed here (at least not in the PR)
I think this should be a `PolicyRule` field, so that the flow for the PolicyRule struct should be `true` by default. If we need to set it to `true`, then this should probably be fine.
I think this is a bit confusing since the call to `strtolower($function_id, $impure_functions, true)`. The `function_id` function should have been called before the function signature is called.
Can you add the same in ActiveExecution.cpp?
I don't think this logic is needed.
why are we making a constant for this one?
Please remove this.
This can be done in a single line ifdef, since it is just a `#ifdef _WIN32` define.
I'm not sure this is correct. It's a small thing, but it's just a small thing to do.
Should we also update the tests in `setUp`?
Maybe we can just do `first={ count}`?
I think you need to check the return code here. It is too early for a visibility processor.
Why do we need this? I don't see a reason to have it set in a separate file, and if it is not it should be removed from this file
maybe change to "FIPS region not allowed in ARN"?
Why is this file added?
Missing space between ":` and `{`.
why ` bt.currLimit` is changed here?
Do we need to make sure `RSPEC_SKIP_IMPLEMENTATION` isn't passed to `RSpec::Core::Pending.instance_method`?
Should we use IoChaos_pod_SIZE.go here?
Please move this to `#define` in `codecs.register()`
This check should be redundant, as we don't know if we don't have an invalid name, it should be invalid.
I think `driver_name` can be an option to `name` (and it can be a string).
Can you add these to the pybind module?
should we add this to the `Widget` too ?
I would not change the error message here, because it is not used
I would use blockNum directly, no need to change here.
spire_backoff should be gone, maybe we can use the vague version of `agent.backoff` instead of hardcoding it in the `go.go` package.
This one line should be kept before the #include operator, otherwise we can't re-enable it in the `#include`
The `goimports` should be removed
It seems that the whole `reportWAYS_UPDATE` function will only return the WAYS ALrevrev. This is a very useful way to test if the `reportWAYS` is not actually a `reportWAYS` case. I think this will be more confusing and clear if the `reportWAYS` function returns the parent object.
This is not a tab difference (I'm wondering why you need to check for `get_tab_format_if_form()`)
@jglick Shouldn't the wildcard import be grouped with other imports?
Can we use a helper for this, instead of hardcoding it in the loop?
I don't think the `os.Exit` and `os.Args[1]` are necessary here. I'd expect `os.Args[1]` to return a string, and then `os.Args[1] == "help"` will be false here.
InitialWorkingDir -> sourcesDir
Do we need to check for these?
This is not right. It should be: - we only do this if the `dstack_offs += 15 * XSP_SZ` key is not specified - we should just always return 0 if it's empty.
How can this ever happen? Should this be "boolean extension" instead of "boolean extension"? Also, what about `geterms`?
This method can be deleted
I think we should keep this in `send`
If this is the default, then the DAGSTER_EARLIEST_RELEASE should be set.
The problem with that, I'm not sure it's correct but it looks like this is not the only one that is the version of the `_lint` part.
Can we make these `enableLogging`? This looks strange to me.
`evloop_latency_ms` should be used instead of `ugging_evloop.c`
`_getHash` can be removed as it has been initialized in `txs`.
I don't think you need this anymore. The second block can be removed, it should have a try block.
Why is this here and not in the new `MakeDiskBlockCacheIfNotExists()`?
why do we need to change this?
Can you make this a `&&`?
I would have thought about using "or list" here. If it is, it would be better to check for _write_to_pcap where it was used.
This should be `service code in response to events.`
Please remove this blank line.
I don't understand the purpose of this change. It seems to me that it's only used in `makeFullScreen` so we're not doing that.
You can remove this line now that we don't do this
>uoffset [](start = 16, length = 4) nit: should this be `uoffset_t` (or just similar) as the other `Get` methods in this same file?
This should be a check.
This will not work as expected. We need to ensure that the value is an integer.
This should probably be called `skip_links`, as it is a bit clearer.
This is a change in behaviour, why not do a `GetPhysicalDeviceDisplayPropertiesKHR` call inside the loop instead?
Is it worth to just pass a `IsDockerEngineRunning` to `CreateECSService`?
This is wrong, the original `cai_resource_type` is `dialect`, and the `dialect` is `(7, 7)`
This method is called by `FallbackFallback`, so it is not necessary to check the argument.
For clarity, should `reusable` be used instead of `act_cfg` here?
if we're going to do this, we could just use `options['args']` instead of hardcoding the variable names and let the variable name take care of the specific values.
I don't think the dependency is needed anymore.
`name === 'class' : 'className'` should be fine here since it's an integer
I think we should use `setUp` here, as we are already doing `row`.
The variable 'test' seems unused. Can you remove it?
What's the point of this method doing? I don't think there are any situations where the two are valid, so I'd like to see it more easily.
The min_x and min_distance are 0 for min_x and min_distance are equal.
It's a little hard to read to read this bit, but I'm not sure if this should be here or in the case where `maxp` is `false`. The `batchSize` is `0`, right?
I'm not sure we should use the `Internal` var in this case, but I guess `Internal` is still valid?
This should be a constant so that we don't have to pass it in.
I don't think this was a leftover
This change is needed for all the AWS SDK
I would have expected this to be set before we start writing.
Do we need to return the transactionPool anymore?
`DefaultError` should not be needed here.
I think the top-level test is no longer necessary, right?
@lisasy this code is repeated 3 times
@jeherve @kennknowles, I'm not sure if we need to add the `_opensearchdescription` attribute for the link here since we're in here?
I don't see why this check was here before, can we move it up?
I don't know if this works, but I'm wondering if we should just keep a `modified` and use it in this case.
`base.file().location()` is not the correct value here. The only place we call `TableMetadata.createTable(base.file())` is if the `base.file()` is a valid location. This is the case for the user that the location is the main location.
What do you think about adding a `detach()` function for `mlvl_tensor_list()` to detach?
Maybe we could add a `@classmethod` annotation and use `cls(cls)`?
Hmmm. I'm not sure we want to do this here. The only thing I'm is that we should not be using the `extract_window` parameter here. If that is the case, I think that's a bug.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think it would be cleaner to remove the `clear` and `err` part of the controller, it would be more clear when the user was ready to use it.
Shouldn't we set it in both places? `causalConsistency` and `causalalgs`?
nit: update copyright year in header
should we add a warning for this?
Could you add a space between the key and the key name?
Is `array` the same as `true`?
I would put this function into `Device.go` and put it into `func Stack`, since it's only called by other functions that use it, not implemented.
This class is not used. It is already implemented in `kar.notification`. You should use `ClassHolder` here.
Static analysis: "The import java.util.* is never used"
This is the main change of the PR.
What does this do? Are there any tests that fail if there is no error?
why this? I don't see why it needs to exist. Can this `// +build !` be changed?
Why is this not needed anymore?
I'm curious why the motivation isn't using the `Histogram` option in the spec?
@jridgewell Is there a reason why we're not just passing `He2` instead of `Hx2`?
I think that it's better just to check the number of histogram (or some other parameter) instead of hardcoding the number of file in the middle of the histogram
`FunctionFunction.NoNodeException` will throw an `NulleeperException` when `No collection found at path` or `onSelection` is thrown. The `NoNodeException` is not the only thing that is needed here. It should be removed.
This makes sure that `download_url` is blank and doesn't have any blanks in it. I'd suggest adding it to the controller.
I'm not sure we should keep this message around, since it's not possible for a `Bolt::Logger` to be a `Step32` event. What about just adding a `Bolt::Logger.deprecation_warning("PowerShell 2 controller", msg)` message to that message? The message could be misleading and that is what we want.
I think it should be an `options` parameter instead of a `.filter_options`.
I don't think you should create a new ops to handle the delete.
@tgamblin This is the only usage of `rowCount` to be set by `if (rowCount != 0)`
I think this should be done once in `DefaultErrorFunc`.
I would prefer to avoid this if statement. But if it is not there is an error if it's nil, it will not be `nil`, so if the code is not in the block, it's not.
I don't think this should be `relationship_many`
// Encoding of the handler - this should be optional and used for introspection - the handler should be the time used for introspection.
Why not `blob`? This is a part of the public API, but a little bit more clear what it does.
Why is this being removed? If you are going to remove the `DoubleGauge` variable from this class now that it is being removed from the code. If it isn't used there is a reason to keep them in the `NumberStore` class.
Is this a typo?
`my_` is not null-checking on this if it's not null, so this is a bug
What if the container is empty?
Please make sure your test doesn't change the behavior for `foo` to work correctly.
It looks a little strange to have a "before" block on a page page, but we can't have it in the body itself.
I would use the default value for 0, otherwise it will break things.
The border color when the client is floating.
Please rename to `keybase`
This will throw an exception if `path` is not set.
This import is no longer used.
I think we should be setting Prometheus name here. We should not use it anywhere else.
I'm not sure if the default `!` is necessary because the default `!` will throw an exception. If the user does not have the same value then we should have a `null` check.
Why is segments being NULL?
This is the fix. You're passing the email, but not the email
I'd like to see this change in a separate PR, but we can also keep the old one.
The `[NotNullWhen(true)]` annotation wouldn't work here, right?
I'd prefer to have this be configurable, if we want to use the braille-patterns.cti to use the env var.
So we are not skip generating against non-nullable anymore?
Can you move this to the top of the file?
no need to check the return here.
Just a thought, wouldn't it be better to do `paginate_by_sql(accounts.to_sql, ...)` and then `to_sql` and `to_page`?
should the cache key not be part of the `compact`?
I'm not sure this is the right approach. I'd rather have it be called `filesystem`
This looks like it's missing the change to the original PR
This should probably be implemented as `implemented` instead?
This is a bit of a hack. It will cause the problem to be that the non-null value is not a valid value (e.g. `language == TargetLanguage.PHP`) is a non-null value.
I think it might be better to move this to `scheduler` and remove it from the `scheduler` module.
this will cause problems in CI?
Is there any reason we need to add the `#firstampler` field here?
nit: can use `parameterGenerator.setHttpParameterType(HttpParameterType.BODY)`
I think we should remove the command check now that the error is in the same line.
these calls to `status` should be removed.
This should be `l.trackerMu.RLock()` since it's a new function, not an error.
I'm not sure how this is supposed to work. It does not look like a good idea.
is this needed?
Ah, I see, the `should <-chan struct{}` was not used.
I'm not sure that docker.AuthConfiguration might work, but it's probably better to do this in the `if err == nil { ... }` block?
This doesn't look like it's used anywhere?
What about the `regex/`?
`repo.CreateRepo` is a bit confusing, why is it OK here?
Can we add another `apitype/auth` flag that we use in this struct?
`element = 0 if position in (textInfos.POSITION_FIRSTVISIBLE)`, `0 if position in (textInfos.POSITION_LASTVISIBLE))` or `0`?
This is a very minor, but it's a minor thing to consider, but I'm not sure how to make it so far.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Can this change break compatibility?
is this going to be needed?
This import isn't used anywhere?
This should be called `_getDefaults` to avoid the extra `_tracesEndpoint`.
@mramato do you think we should use a group template for the API?
should we use dvc/QUORUM to avoid duplicating the API?
checkCoinbase isn't a good idea, is it? If we don't want to pass this, it's probably fine as it's probably better to pass the pointer.
Should we make sure that the user's layout is ignored?
I'd like to see an issue to track this, but I'm wondering how come it is used for a while in the past.
What if `example answer` is 0? It looks like it will only be 0 if the type is `""`.
This could be a simple `github.com/context`
I don't see this being used anywhere.
I don't think we should change this line (and the test below is working). The `uninstall.mock` test was failing with `mocks.uninstall` being set.
Shouldn't this be `RSpec.warn_with <<-WARNING.gsub(/^`?
I think we need to move this into `pkg/api/server/Message.go` and then pass it here, and pass it through to `Message` and `api`. We could also use a `const` here.
Do we still need the TODO? Otherwise we're just modifying the `actually` key.
This field can be removed from here, since we only use it in the `mSortType` field.
I think this function can be moved directly to `*`?
Is this necessary?
The blank line is causing the problem.
I don't understand how this works, it looks like you're not using this feature, and you're not using it anywhere else in the code, and you don't use that feature. You should use the same URL as the `spec_rspec`
why the extra newline?
Is it possible for a constant to set the default value for all the `OS_VOL_SUPPORT` value?
Shouldn't `NULL` be kept as `Hate_msg_handler`?
I am a bit confused about this. I'm pretty sure the `doc` variable is still not set here.
I think we want these to be very specific and followup PR.
This should be added in the `CS` section, not here.
You can use `%q` here.
I think this is the only change I found found that `Cause(err) == 0` is needed here. It was not related to the fix, which was just about the bug fix.
can we just return empty?
Is this used?
Is this change necessary?
`!cci->num_simd_skip == 0 /* save all regs */`
I think we can move the validation down there
How come these test modification changes the behavior?
Is the `[tv]` for the type annotation correct? I think it's the only instance of this type.
I'd like to avoid this warning and just do a `wxLang:`. I don't think the message is really necessary.
Line is too long. [87/80]
What's the reason for not using `goog:ch ogOptions`?
I wonder if we should just add `.map(&:to_sym)`. This would prevent anyone using `.branding.dig` from being able to get the last config.
Is this necessary?
I think it is a good idea to have "DATA" in the API, but it should not be here. The method is called "path", but I'm not sure we need to read it in the API, so this should not be part of the API.
This should be `:contact_us_url`. The `User_url` should be removed.
why is the min min required? I think it makes more sense to me to rename it and change it here to something like `gatcast_and_add_another` to something like `gatcast_and_add_another` and `gatcast_and_add_another_en`
This is a very specific change, and it should be in the `grpcgrpcFileDescriptors` method
@tgamblin Do you remember if there are any issues that will be printed in a different PR? I wouldn't expect a bug to see that we can do in a different commit. I'm not sure if we want to delete it, but maybe that's just a thought... :)
Can this be moved to `BaseTracer::CreateCreateCreateCreateCreateCreateCreateCreateCreateCreate`? I'm not sure we can do it now because it seems the only place we need to call `BaseTracer::CreateCreateCreate` is called in tests.
I'm wondering what's the use case here?
It seems we can remove the PodMember now, if it's not used anywhere
I would prefer to keep the `service.name` as its own string, as we don't use it anywhere else.
Do we want to remove the TODO?
you should probably add a `TODO` here to make it more readable.
This should probably be in 8/5
This is the same as `from os.environ["MP_API_KEY"]` file.
Use the new Ruby 1.9 hash syntax.
Why are you returning here instead of returning? It seems more natural to me, as I can see, the return type isn't being used. I think the method can be removed.
import wrong place
I think you should remove these `instanceID` changes in `application/config.yml`.
Is this a dict? Can we add it to all the tests in this PR?
I think it should be a list, it can be false if it is empty
this is never really used and will never be used
I'm not sure how we will be using a "safe" relationship for this one. Maybe we could just call the "safe" "safe"? I think the "safe" would be more efficient.
Why not use `insightfilestore`? It's a bit confusing since we have `insightfilestore` in the `insightstore` file.
This will break the other `def bisect_round_started()` method.
Should this be a widget instead?
@sparrowDom I'm not sure we can't do that for a while. It looks like we do this in a few other places in `Symbol`
I don't think you can use `\u2E00-\u2E7F\\'` to build the string. Also, the string should be \u2E00-\u2E7F\\'\u2E7F\\', because the \u2E00-\u2E7F\\' isn't on the same line as the Punctuation. I don't think it will work on the Punctuation but the `\u2E00-\u2E7F\\'` will work with the `\u2E00-\u2E7F\\'`
You need to update it too, too.
I don't think this is the right way to go. I would have been trying to move it to a separate function and it would have been a bit more robust if the error occurs.
This is wrong. You are calling the `\ get()` method in `src\s`.
should be a separate class.
I'm not sure what to do about this. It looks like it's not going to have a problem.
Why do we want this?
Why not just add the `ErrorListener` to the other `ErrorListener` methods?
This is a change of behavior, why is it safe? I thought you were just changing the `ResourceType` property to false, but this is what you were doing in the other PR.
This is a good thing, if you are using the `config` module, you will also need to use the `ChainID` field. The `ChainID` is only used once, and the `ChainID` is used by the other changes in this class. The other config package is `ChainID()` in order to not change the `config` field, so the `config` field is not available in the `time.go`
I think this change is ok. We're using the default `NativeClient` to avoid the empty list (e.g. `@see NativeClient.Builder`)
why do we need to get `resource_name` now? shouldn't we just get the default value from rule and drop the value from users?
I'm not sure about this. The wl_resource_get_user_data() returns an int, if it returns an int, it is not a slice of each Getmanager. So the result is not a slice from the "texture->width". So if you want to check that it is in the same place and use it here, it will be good to check if it is in both cases.
Can we use `DATE_msid` here? It is already used in `BaseElement`, not `ags`
should this be `strstrcpy(tmp);`?
Whats the purpose of the package? I guess we don't have the same feeling about how many packages are included.
I think we can remove this line.
why did you move this? I don't think we can use Rating more closely
You should not need this. It's a list, not an input.
I wonder if it makes sense to add a set of set of set of set of set.
Is it safe to use `send_resource->send` instead of the string?
It looks like these are the actual fields that need to be added, but I don't see a reason for these.
NIT: "This is a string in test-time augmentation."
This is unused.
I don't see the point of having two options: - `content-pages` - `content-drilldown` - `content-drilldown`
I'm not sure that the retrying has changed in the changelog. I think we should just remove it.
I don't think this will work. This is the only case I'd say that it should be `true` to make sure it doesn't have any special treatment for the admin APIs.
`prevm::dyn_cast_or_null` should also be an `error_type`.
This is the only place where I see `configMaps` is used. I'm not sure we should be using it for now and not for this PR.
This one should be removed
nit: add spaces around `=`
This isn't a loss, but a loss_loss_weight is a loss - the loss_loss_weight should be in the call stack.
I think it would be clearer if we had a conflict suffix.
should be `@context`
I don't think you meant the `centerText` here.
Don't you also need a test for this?
Is this just a change to `eni.guard.RLock()`? It seems a little inconsistent to me.
This would need to be added to the `Dataflow.util.filesystem`
why are these lines changed?
Can you use `self.best[which]` instead of `len(self.best)`, so that we can get rid of `__getitem__`s? That's why the check doesn't break.
This can be changed to `system.enableInfiniteTimeout`
I am not sure why this line has been replaced. The "offsets" variable is used to be removed from the test - the first "Using" variable is a no-op.
Why is this part of this PR?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Shouldn't we do the same for `CabalalG`? I think we need to keep `CabalG` for `CabalG`.
Probably we need to add "more_horiz", to the docs.
Add this to the `init_str` as the default value.
if serialNumber == 0, no need to check `i`
This is a breaking change, so should be removed.
@jridgewell Is this the correct way to test `rerender`?
What is the purpose of this?
I think this is the only change that should be needed.
This seems like a good change. We can't do it in this PR. The `blockAPI` is not used in the PR. I don't think this is the right place to do this.
The `Attribute` here should be `SYSTEM_ATTRIBUTE_PREFIX` since it is only used once.
I would prefer if the `req` is not the last one.
I'd prefer the new `Duration` in `DurationCron`.
this error will be removed from the previous commit
I would not add this to the list above. We have a lock in the list and we should be able to get rid of it.
why is this needed?
Can't we just remove the second argument?
I think the `tables.lock` field should be changed to `tables.lock`.
Is this a bug?
why change to "gles2_texture_in_context" to "gles2_tex_shader"?
Isn't this the most precise way to avoid the `decode_to` call?
This is the same as `respond_to?` logic.
The variable $chars will be used in the if (! (! (! ($char)) {`
Why do we need to change this?
This change is unrelated.
I'm not sure about this one.
nitpick: why not use `@param`?
The original linux and windows linux have different values.
Could this be `workflow` instead of ` v== ""`?
I'm confused why these changed?
This line is the one line that breaks. This line is the indentation of the line above.
I don't think this belongs in the "list" module.
I'm not sure this is the right place to put this.
This is the wrong change, I'll revert it.
This is a change in behavior, but not a big deal. Can you fix it in a follow up PR?
This import is not needed. It only needs to set the "ipsets" folder in `set()`
This import isn't needed.
I don't think we need this. We already have the `guides.Interrupted` file.
This is a bit unrelated to what you're doing here, but why did you remove the default value?
The values should be `uint32`. This can just return a `uint32` and then `NewUInt` can be simplified. The values should be the float64 and the float64.
This is a public key. The only usage of `cache` is to handle this field.
Why was this removed?
Please move these fields into the Eventwrite.
I don't think we need to add new app app to this table. What does it mean?
why did you change this assert ?
I'm wondering if it is better to be explicit and updated to `.to_i` (in `updated_at.to_i`) instead of `to_i` (and in other places we use `updated_at.to_i` in `start_updated_at` in `updated_i` in `start_updated_at`), so that the updated updated will only be used once (the `updated_at` is `0.0`). This will make it clear that the `updated_session` is not in `updated_at.to_i`
The commandLine variable isn't set when it is called on a non-zero `String.IsNullOrEmpty`. This would mean we don't have any other impacts on the caller.
This should not be `StandardCharsets` to be consistent with `StandardCharsets.UTF-8`.
nit: it's not necessary to import utils from astroid.brain directly.
I think this can be left to the `_corruptedRequest` variable.
I think this line is redundant now
Why do you change this abstract? I don't see any use of it, is there any reason to use it to differentiate between users?
nit 'only includes active plans' do 2 (not 4) spaces for indentation.
I'd prefer if this was an `is_ipv4_or_v6` rather than an `is_ipv4_or_v6` which would be the correct user. I'm thinking it would make sense to have a simple `transport::them_address` method that would avoid the `is_ipv4_or_v6` and the `remote` method and `is_ipv4_or_v6` calls.
I think we can get rid of this line
This is not needed. The ` ChromeDriverCommandExecutor` is already `sysName`, so this is not correct.
I am not convinced this is the right fix. It is an enum class or a Enum class. It is a Enum class or an enum class, which is not a Enum class. The call to get the `type0.getType()` call to get the enum class from the `type0.getType()` call will always be `null`. I don't understand.
Can you add a docstring to this dict?
I think we can remove these from the entire PR
Is it possible to have a test to verify the "test" operation?
Why is this here? Is the `self->logIdToSend_` necessary? Isn't it already the logging logging?
The `prepend` here should be indented with the other keys.
What is this line for?
Just noticed this, should be on the next line?
This line seems unnecessary.
I think `WebSpan` and `WebHttp` can be used directly.
@nmittler why not leave the file `public` as the `public`? `FrameworkDescription.Create().ToString()` will return the result of that `Logger.Information()`?
Is it a good idea to get rid of the `AwsSdk` import and `AwsSdk` calls?
Why was this change made to the PR?
I think the `proposals` argument needs to be added to the `proyQuery` class.
I think we should change the name of the new param here to something more specific.
I'm not sure what to do about this. If I understand correctly that this is a bit of a problem, but if I understand correctly, `UpdateSpanWithErr` could have `nil`, and `yarpcerrors.InternalErrorf` could be `nil` and the `Treq` are actually `yarpcerrors`. I see that `Treq.Service` is a `nil` that will match the service name received in the response, which is not `yarpcerrors.InternalErrorf` that we would have to.
Instead of calling this method `get`, why not directly use the default value directly, since we are using the default value?
I'm wondering if we should just make a method on `AsyncApiMethodExampleName` to make it public.
This can be removed.
I think you can get rid of these and just use the chain instead (execSQL, ...)
why should it be `ctx.Tr("dashboard")`?
This is an example where `Simple-id` is set in the middle of the .
I don't think we want this to be an error. We want to use `default` to prevent results from being returned.
I think we should make this configurable.
Should this be `options.compareEndDate]`?
What is this `Clear` call for? I see it is used as a default, but if it's not null, then `Clear` is called from a default, then `0` will be null.
is it needed?
this.datasetFieldType seems not required.
I think it is better to just ignore the `expect(analytics).to be true` expectation
`if isinstance(key, tuple, list, pd)` would be more readable
I think we can just remove `allRunID` from the list here and just do it at the test stage.
The new relic tracer controllers should be in the same controller as the new relic tracer.
Why not `server`?
Please add a property like `proxy.close`, and make the same name consistent with other components.
I am confused. What does the YAML plan mean? Does the plan name not exist?
This is not really correct. `pop` should be a `Validate` object, so it can be a `Validate` object (which is not a `Validate` object). I think it's a good idea to just remove the TODO.
I think `AccessibilityIdentifier` is not used in any of this PR, it can just be removed from this PR and not be used in any of our code base
How did this get lost?
Why was this needed? It doesn't seem like the right choice to pass a `int`...
This could be simplified to `return err := "slimic" || ...` if you want to.
In this case, we can just change this to `title.title` and remove the `.title` part, and use the new one here.
I'm not sure if we should use the `RegistryURL` here. I don't see a need to add it, but I can see it in the future.
Those 2 imports should be alphabetically ordered
I think this is a bit weird. I think it should actually be `IE11`. It's not clear what the user is aware of the IE11.
This could be done with CheckSum.reverseBytes(checksum)
Is there an existing `error.IsDirPath()` function that has a index check?
How about using a single string here to avoid breaking the API surface area?
@dvoytenko I'm not a fan of adding a method to `hasPk` to the index, but I don't see where the column column is actually present. I'm thinking about adding another method to `getIndex()` and then adding it to `indexScanBuilder`. Is that the only way we can do that?
I'd suggest to use the same description here, as we do in other languages.
Is it worth logging a warning that this is not the default?
This is a change in behavior and is unrelated to this PR. It seems to be a bit of a hack. Can we just fix that?
I'm not sure what the best way to do this is. It will be easier to find when the database does not exist and it can be refactored in the future.
This is the only change that fixes the bug
This should probably be `error: false`
The same goes for the other changes.
You can remove this
This shouldn't be necessary.
nit: can we just remove the variable and use the new one here?
I don't see why this change is necessary. I don't see why it is needed.
Why are we adding these copyrights?
This is the way it was before, but it seems like you should also check for `SecureRandom.GetBytes`, and if there are any changes in the code you need to pass the bytes. Otherwise it would be easier to just do `SecureRandom.GetBytes(bytes)` in the constructor and you'd get an exception.
This doesn't look like a reference to an object. Is this intended?
I think this is not needed anymore?
Do you really need to add these? The only time it is used when it is used by the `gt_bboxes_ignore` API. This should be `use_group_of=False` and not `use_legacy_coordinate`.
Can you just add this property to the top of the file, and say, `bool` is passed in, so that it's not passed in?
I'm not a huge fan of adding this, but cant we move it to another component?
this is not needed anymore
It's better to use `import java.util.*`. It's more common to import.
Why do we backend and backend exists?
Can't you just do `ImmutableList.null` here?
This should be `public string[]...`, no need to specify it is.
I don't think these changes are necessary. The code is still in the schema.
I guess this is a change to the default setting, not just the input value.
I think the error should be thrown here instead of `opts.spinner.Stop("Error!")`.
please add the extra empty line above this
I think we should add a log message here, otherwise it won't be valid.
shouldn't the crash crash be the actual value?
Why change to type here? (I don't have a good suggestion either)
I don't understand this file
I think this is the one place where we need to include "spawn.h" from the "CMakeToolchain_spawn.h" file.
This looks like a good approach
Can this type of being an `drop`? I think we should probably have an error message on `Public` type.
I think this method can be called `InvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalidInvalid
Why are you using the `env` class here? I don't see it anywhere else in the codebase.
This will break the loop when `(sep == 0) ? ... : 0`
Should we use the interface to avoid this sort of thing in the future?
`String domainName, Boolean members, String tagKey, String tagValue` is not really necessary
We should use a `io.FormForm` here as well
This should probably be re-ordered. Also, I'd suggest to use `const blitzPath = path.join('blitzPath);` instead.
` validate_found` and ` validate_virtual_vdims` don't seem to be used anymore. Is it?
I think it would be good to add `return s.driver(ctx, source, spec)` here to avoid the check above.
nit: remove "in"
This test fails without the fix?
I'm a bit confused about the idea of the `if not isinstance(as_index, bool):` check here. What if we don't set the value of `as_index` to `true`?
The new class `deleteModuleData` should be nullable. The new class does something that needs to be updated.
I'm not sure if this should be version check at all, or at least not, as in all the other classes we want this to be very specific
I think that we could remove this method
This seems like a regression
nit: remove trailing white-line
Block has too many lines. [39/25]
Not sure if we want to add these to the public API.
Make string -> frames are the actual values used to start with an "if the variable is invalid"
I think that this is going to be a bug in the future.
This shouldn't be here. You should be calling the function in `saleor/graphql/core/axe`.
I think this spec spec is missing a spec for `with`
can we make it a constant instead of hard coded?
This import is no longer needed.
why remove this line?
This is not the correct way to check this. It should always be true. Also the value is not required, so I think it can be false.
This looks like it's an unrelated change and can be removed.
I would have called this `if stripped or '/' in`
This looks like a leftover from an API. I'm not sure if we should make this configurable?
I think that these changes should be reverted.
This should be `#include "fmt/format.h")`
this should go under a separate commit
This should return an error, as the user can still see this error.
The same problem as above.
why remove it?
I'm not sure if the `<source Read>` is needed here.
Maybe we could just remove these `--good case` case altogether, since they will always be used in the future.
Is there any chance we can use `Type` here instead of `Type`?
Why change to `line`?
I think we should use `errors.New` here.
Is the old condition necessary?
I would just remove it.
nit: can we avoid using `java.nio.InputStream` everywhere?
I'm wondering if we should use `[bool]` instead of hardcoding `source.Spec` here?
Just curious, why do we need to check for path rather than just `_this.getValue(path)`?
Why not use `parseInt` here? It should be `!isNaN(...))`.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
shouldn't this be `?`?
DebugTOKEN shouldn't be changed in this PR.
Does this mean we have a new {@link this table and commit the change to this table?
0? Ss-truth are the same?
why do you need to set this?
I'd suggest to use BitConverter.ToInt64(bytes, 0, 8) here, which is the number of bytes in the file.
This is an example of how the code works. We don't want to use a transform or transform transform.
@JeremyKuhne can you confirm if this is correct?
you should be able to use a different name here (and a lot more other things)
I think the `callerType` should be left in here as well?
I'm not sure this is a good idea but it seems like the plan method could be called by the way it is called is used in multiple places? Maybe `set_options_test`?
I'm not sure if the value can be null, or it should be an empty collection.
Please add a `TODO`
This is a little odd - we have the same `world` method in `useCallback()`. If we want to return a `null`, we need to handle the `keys()` function.
why not set the api here?
I'm curious, does it have to be `django.test.moves`?
We should probably have a `bridge.send_command` function that returns the result.
Why remove the call to `ExtractSomeIfAny` from the name?
I don't see this used anywhere.
why change this?
Is this the correct way to get the context from the child?
Is this a typo? We should use uint64 and it's not a pointer.
What about PrepareRequest ?
BTW, it is not really `VuFind (\d+\.?)` :-)
I don't get why the code was written, but it's not the only place where it is used, so I think it should have been done. I am just missing it, as I see it's a bug in the code, and it's a little hard to see.
I don't really see the benefit of making this a `CloseableIterable<ManifestEntry> manifests = new ManifestGroup(ops, manifests)` so I would just replace `otherIndex(interval)` with `otherIndex(interval)`
Would it make sense to mark this test ` ArrayInitializationVerbosenessRuleTest` with a `@RuleTst` class instead of adding a new one in `#ifdef`?
I'm pretty sure this is not correct, since it seems to be a string, which we need to be able to use in the `if val.is_a?` block.
Should this be "not working"? Or is the "working" part of the description really confusing?
Why do we need this check?
This is a good change I'm not sure. I'd be tempted to just add a `#if` statement to the end of the field and have it live in the constructor.
I think this should be `@user_id` instead of `@changes`. Also, I don't think we should have a default value that has been `null` so the user can't see that there's a user.
This line is the main fix. It is not needed anymore. The current version of `tinygo/llvm`, is that correct?
This is a change in behavior, as it will be easier to read when the configuration is created.
Why are we adding this?
I don't like this. I'm not sure we should be doing this, but I think we should do it in a more general way.
Is it possible that we don't need to do this?
`numAccounts` for numAccounts and numAccounts can be removed.
I'd prefer a separate commit for this, as it's a good practice.
Should be `(ctx, 0)`
This is the fix for #2779, which was causing a build failure on Linux.
Ouch, I think we should probably get away with `both` here. We have a few options: 1. The `cborStore` field in the block will be used to be used to generate the block in a way that the block will be used. 2. The second parameter will be used to pass `Put` to the function and use the `Put` field in the block.
I think this is a good change to check for no longest when `temp_file_logical_keys` is False, right?
I think it would be better to use `authResponseTypeProcessor` here.
This function can just be named `monotone_constraints(feat_is_unconstrained)`
I think this can be `_process`, and if `_apply` is not used, then this will raise a `_apply` error.
why are we doing this?
I'm wondering if we should just use the `eventname` flag for this.
The imports are now unused and should be removed (see the `available Web` import)
I guess we need a test to cover both cases
Is there a reason for adding these new APIs here?
I don't like this, if you just do it in the manifest file, you don't want to be able to pass the manifest to the `application` object.
Is this the only new column in v1.9.3? Should we add it to v2.9.3?
Nit: Can we call this `Console.ForegroundColor` instead?
This will likely break some stuff in the process, but let's not forget to remove it.
All should be ~0.0
This should be added to the other file in Swarm Authors. See #4027.
The `admin` user id will be updated to users.
I don't understand what this option is used for?
Can we use a `public` here? It looks like it can be null, no?
@deads2k i didn't know we will be able to get rid of the apiextensions
>pandera<0.8.0 [](start = 12, length = 8) I wonder if we should have this set of `pandera` in the `python` folder. I'm not sure how we should handle this in a way that we will not have to maintain compatibility for other models.
I am not sure if this is correct. The permission is a bit ambiguous. It should be removed from the constructor.
This method is called in the "customThreadPool" module since we are not doing the same thing here.
this should be a single boolean
I am confused, is this line what you are setting the `OriginalRequestCtxKey` here?
Do we have a test for this for it? I don't see any new tests using it.
I think this should be `host1.example.com`
Do the same logic here? Since TraceContext() already has access to the Tracer() method and we can't just use the existing config directly?
I am not sure we should have a default model here. I'm not sure if we want this in the code. If we're going to add an `on_trainer`, we should log the user and just call the method on it.
This seems like something that should be moved out of the `state_block_impl`, right? We may just be setting `T.type ()` in `rai::state_block`.
`DeleteFiles` calls `Delete` in `gopts`.
Line is too long. [87/80]
Please remove this extra line.
You can change this to `An` to avoid duplication with @johanste ?
Why 10 * time.Second and not 10?
I think this should also be moved to the `_init_estimators` function
I don't think you want to use "text-box-wrapper", as it's a button of the page. I suggest to use "text-box-wrapper".
nit: remove extra blank line
This looks wrong. We try to reduce the number of versions in the same package.
this is a change in behavior that we have to pass in the status to the status.
is this used?
I'd suggest moving this property to `TargetAssembly.Empty`.
This is a little weird to me. If it were the root cause, the error will be returned by the user in the middle of the `calculating_iden_v1` function.
I would rename it to `getSchemaName` and not `getSchemaInfo` to match the actual name of the method
I think we can remove these.
Style/DeprecatedClassMethods: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why not make this `upperClass` and not use it in both `getClass` and `getClass`? I'm not sure why we are not passing the entire `getClass` implementation.
(style) space required after that ',' (ctx:VxV)
We have a better way to do this for the future, but I don't have any strong feelings about it either way. I'm not sure whether `curation center` is the correct way to do the trick.
why is this public?
Nit: we can drop this.
Please remove the trailing space
This change is not necessary. ` extract_next_token()` will do the same thing if `isspace(c) == '('`, which is the one you removed. The `isLuadataset()` function has already been called before the `isspace()` call.
`c.Wireguard.EncryptHostTraffic` is now unused. I think `KubernetesProvider` is more correct here.
Can the name change from the description be changed?
I don't think you can do this here since this file doesn't need to be passed to `grunt.file`.
This will break the previous version of the previous version.
why do we need to copy here?
I think we want to remove the `config` from the config
I think it might make sense to add a `skip` parameter to the `internalNetworkPolicy` function. The internal internal Network has a CNP instance and the user will add it.
This is the main change. It's not clear what this does and why it's necessary to copy it. I think it's worth it since it's a bit of an accident accidentally using `cart.pending?`
What does `&.` mean? Should we use `.to_h` instead?
this function should be called `themeWebDataStreamID` or something like that. It will be easier to read when the webID is not set.
`c.parse([]byte(info))` (or similar) is what we do in other places where we have `c.leaf`
Shouldn't the name be more descriptive? It's a bit misleading since it's a hard dependency. Maybe "the name is unselected" but not the name of the property.
If `t *tag` is empty, then `SplitN` should be `undefined`
I'm not sure we want to use the container here since it is a container. It's a container that's not a container.
Why not check for `s.shardInfo != nil` and then check for `nil`?
This is the only change that affects this PR, I'll remove.
Who will these two lines (and the similar ones) if-elseif-elseif-else for one being more readable (and the line above).
This should be moved to `preludeScope`.
The key is a string, not a string, so you can remove this
Can we add a note here to track adding the field to the `""`?
I think the 250 is too large. The number of bytes is pretty much much more common.
Why do you need this?
why not use the `error` package in the error case?
Line is too long. [82/80]
This is a little unusual, but I'm not sure how to do it. It's worth to just remove it and have the `ClusterIdentity` in the `job` struct.
I would use `string.c_str()` instead of this string.
If you don't need to set the `protoFile` variable here, it will just pass the value back to the `protoFile`
I think it would be clearer to set the default DEFAULT_DEFAULT_NAME to the default, rather than set the default DEFAULT_DEFAULT. It would also ensure that the default is the default, and the default is set to the default (i.e. the default)?
should we change this too?
Can this just be `this.configuration`? It seems like the only place where it's used is is if there's a `null` value, but the `on` value is `true`.
I think it's better to keep `inviter_name` as `drop_invited_by` rather than passing it directly to it again.
I think it might be better for this to be a local variable and use it here?
I think we don't need to specify a `-32` here.
I think this can be removed now.
This doesn't appear to be used anywhere
The file name should be `convertableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableableable
Why do we need `isCpuSet` here?
I think we can use a more generic name like "prompt_reader" or something, like "prompt_reader_Q"
you can just remove all the debug code
I don't quite remember why we were not doing this, but the `ipify` is still in there.
this will be removed if needed.
Shouldn't this be called on app init?
This is just a test I would recommend to use `boolean` rather than `displayResources`. Also, I would prefer `boolean` over `displayResources`.
This should be a `time int` not `recordCleanupLimit`, but the intention is that the int is not actually `time int`
@tnozicka we are using a constant for "0"
Is this a BC break?
Is this actually `ignoreUndefined`?
why are these `logger.Sugar()`?
We should also keep this and just use the `queue_queue` for the queue.
I'd like to see this in `checkSufficientFee` and `checkSufficientFee` to be more specific, so it can be reused from the other places.
I believe you can keep the original set of the same property for both the property and the X509elixator.
I'm not sure why you changed this, but it seems like `ci/__init__.py` is more appropriate in case we don't want to set the `gendoc` header
why not call the `Ready()` function directly, and pass in the call stack?
Please don't use `std::unique_ptr` for the `global` module.
This test is also flaky in #6273
I'd like to see the world with the message "Reloading..."
@mfojtik why is the certificate removed? If it's no longer needed then it would be better to keep this.
Can you add the James_SPSP for the James_component implementation?
`readableNumber` can be undefined if `! isUndefined( decimal )` is true. `! 1000 > number` will be true when `isUndefined( decimal )` is true.
This is a very good time to get me (i don't think that we'll have to change this, but it would be nice to have it as a separate PR).
I don't understand why this is necessary. I think you can just remove the defer above.
Please add a description of what the target does.
Is it a constant?
can we remove this?
I don't think this is a good idea.
I don't think we should add this to the `get_data` method, it seems like a good idea to add it. We could move the `get_data` logic there to the end of the `get_data` function.
rename this method, not the `renameClient`, right?
Isn't it invalid to name the metric name ?
Should this be a single string instead of an array?
This line and the next line here are the same as above. It looks like the `SYSLOG_INTERNAL_*_*` is used to be removed.
Is there any way to avoid adding an `options` option?
Why change this name?
For the property `OPERATION` isQueueProcessorActive and a longerState. Can we just have a simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple simple enough context? I think `OPERATION == ""` is enough and that is not a problem, so it's more of a big deal.
missing '.' at end of line.
why is it changed?
This seems like the only change that would cause issues if a node has a 1.Condition repo.
I'm wondering if this should be `DEBUG.name`?
`Math.min` will never be null. `Math.min` will always be 0, and the length of the integer is `""`, and `Math.max(byte[])` will always be 0. If we don't want to be able to use Math.min() to get a length of the length of the length of the length of the length, it will return the length of the length of the length.
The previous version of the previous version was `evb.CreateEnumerator("NONE", 0)` but the previous version was `NONE`. I think it would be more efficient if this was `if (is_union || !opts.proto_mode) {`.
This is a bit odd - we need to get a `getATOabanURL()` here. I think we need to make the `getATOabanURL()` call at the end of the `getATOabanURL()` to return a `boolean` (or a `boolean`). So I'm not sure what the best way to do this is to prevent us to use `getATOabanURL()`.
I don't see how this is called after `mask` is defined, if it can be `mask.dtype != nil`, it will return `default` (and then you will get a `default=bool` value). Now it will return `bool` in the `if` condition (and then we can check it there later).
Nit: remove empty line.
This log statement seems redundant.
optional is not the right place for this field.
This method should be renamed to `canAll`
I'm not sure if it's necessary to do anything here. It doesn't seem to be used anywhere
This should be `undefined`. We should not have a specific `Jenkins` interface for it
Since we're always supporting async function, we should at least call this `syncIndexes` or `hasIndexes` if it's not a single process.
is this a current error? if it's not, it should be only `ec::string representative_text` but not `ec::string`
This will be removed in the next PR.
This is not a bug, it should be an error. In this case you don't want to use the gBy option to get the value of the " roll:"; it will be very confusing for a non-ischain check in the future, but it's not a blocker.
This class seems to be unused. I think it should be removed.
I would not remove this part. It's a bit odd as a side effect in the future.
This should probably be called `get_file_and_handler` to match the return value of `get_file_and_handler`
I don't think we want to make this an error. I'd say we should be checking if the error is not nil or not.
Why the `Trim` is needed in `raiden`?
I don't think you want this to be ID since `GroupCloudBackupID` is public
I'd like to see this as something else (not sure if we should change it to something like `HiveSCSCB inplace`, `DCSCB`, etc.
Why not `attr_value` as well, here ?
What if there's no upper bound?
This should be done in the same `cu.ToolVersion`
I wonder if the type should be `sample`?
Can this be `startTime.In(time.UTC)` instead?
Should this be `tag.update`?
I'd use the `===` here.
Why not just use the instance in both the class and the class?
I don't think we should add this to all the places where we're already doing the same thing as in the `Dataunit` package. I'm wondering if we need to make it configurable by the `Dataunit` package and then use it in the constructor?
Should this also remove the pointer? The pointer is nil if we don't need the pointer?
I would say we should be consistent across all the other uses of `DocIdSetIterator`
This should go in a separate PR.
You can remove the new line now too.
I would use `max_retrials_to_get_pods` here, because we have no idea whether the job has been run in a different namespace. But this is fine as well.
The naming looks good, I would say something like "The default value of `255` should contain 255 characters or less. And I would say something like `The value of `"abc characters or less.255"` or something like that.
is the old code not needed anymore?
Just curious, why is the `local_options` necessary? If the `custom_options_options` always returns a boolean, it will return `nil` if it doesn't exist.
My first thought was that `fasterolr` would be the same as the `to_create` method, but I would have expected it to be a special form for the `to_create`
Maybe use `IP` here?
I don't think we should do this, since it's a partial-forgiving the partial partial.
You don't need to use this package, you already have `aws/amazon-ecs-agent.go` in the package. The `2014` package does not seem to be used
The `else if (value.StartsWith(quote))` is an quote but `quote` is an array.
This should be `client.close()`
What do you think about calling this `supportedPolicies = make(string,func(string) Policy)`? This would avoid the change in this PR.
this will fail the test right?
this file should be removed
What's the purpose of this change? I don't see a reason that we are changing the code here.
This doesn't really matter, but I think the `containerContainsText` is not necessary for this case. We need to think of how we use `containerContainsText` to determine whether `_` is the `containerContainsText` or `_` for the whole `containerContainsText` property.
This is a bit weird, it's a bit of an improvement. Maybe `status_JAVA_HOME`? It would seem like the wrong place for this.
The `#else` is still needed here, since the `#include` is unrelated to the rest of the file.
The `waitForAjax` function is called in `CreateCreate` so I'm not sure it is what this method is doing.
Why do this?
I think we should have a `id` in this case to get IdentifyTrackBreaks. The reason is not in `id` because the value will be `false`.
why not import_mpi4py() here?
This seems a little out-of-place on the client side. I think we should keep the same error message here, if the function is not found and we can log it, otherwise we'd have to log it.
Is this a breaking change? If we don't need a separate namespace (interfaces is a breaking change), then we should not change any of the namespace here.
Do we need this?
why is this false?
Can we make the space here more explicit, like "non-X + space, "X" (or similar) for "Y"?
Can we just use a `_` here?
this should have been a switch too
Could this be named LibraryDetailsPanel?
It's probably better for these to have an `const char * *` `const char * *` `const char * *` `const char *` `static int int_persistdir()`
This is no longer needed?
Why the prefix here? I'm not sure if this will be a good idea. The code below is the `incldued_wf`, which I'm assuming is what it is for?
any reason why we are using `variant` here?
I think it's better to make this more specific, e.g. `delimit.path`
I think this should be moved to `aURL.startsWith`, since it is not a data-agnostic tag.
This should be `0`.
why is this change in unsigned and not int_version?
I'm not sure if this will be necessary. I'm not sure if it's worth it.
This can be simplified to: `unless data['config']['transport'] = 'local' if target.name == 'localhost' if target.name == 'localhost' if target.name == 'localhost'`.
I think you forgot to add a method to the constructor.
nit: IsEip12 should be "true" or "false"?
why is this removed ?
`self.show_warning("Invalid Public key")` was not written as a warning and the message was confusing because `Public` was a list of keys. Now, `False` is not a list, so `None` would be `True`
`role` is a role, can we use `parent.includesName.tooding` instead?
This should have done some tests before merging.
This is a breaking change and can be done in a separate PR. `PodSelector` should have a `SetPodector` object that does nothing.
`if sample < ackDelay {` right? That's the case that any RTT sample is a user-friendly.
I think we can just make `GeneratedCode` internal, it is the same type as the other type.
Use normalcase for variable numbers.
Nitpick: It would be nice to have a test for this.
why was this changed?
The test fails because the test fails on line 152 and 44. It seems like this function should be moved out of the `TestAppContainers` function and in `TestWithAppContainers`.
remove the empty line
`promptText` is not necessary since the variable name isn't `prompt` in the name. The `prompt` is a string name. It doesn't make sense to have the `init` attribute in the name of the class as it is a string.
would be nice to have a test for this
This should be set to null as it's the default.
Does this mean that the first `Exception` will be checked for a 64-bit of the "OPSZ" command (and not for `64`)?
Huh, this is not needed
This seemed like an odd idea to me, since we are not using the `subscriber_id` column. I'm not sure what this is doing. We should probably change it to the `id` column and then call `id` in the `system/system`.
The error will be printed here if `nil` is not set and `nil` is `false`. I don't think this is a good idea to use that.
The formatting of this one is unnecessary.
Should the `set` here be set to `properties`?
Put one space between the method name and the first argument.
Can we call it `iceberg.engine.hive.enabled`?
I wonder if there's a reason for delete this?
Does this work for any other case where `params["PolicyNames"]` is `nil`?
Could be an empty line here.
Is it necessary to call `PasscodeMode`? It seems to be used in other places and it's used in different places.
I think this can be removed. Also the `<0` is not used anymore.
Can you put this as an example in `rake.md` and `rake.md`? Then we would need to remove the `rake` keyword from the `Sulu.py` file. The `Sulu.py` file is already loaded in `Sulu.py`.
Is there a specific reason for this? It doesn't really work with the new `HandleHandle`
`ok` and `ok` are `v1` so that it is `nil` and `v2` are only used once, so I removed them. I think this is what we want to do.
This is a bit confusing, we are not really using this anywhere.
this is just a bug fix.
This function doesn't really need a function.
Oof nice, that's a bad idea, but the export is hard-coded here
This is an example of how the `config` is used. It is an internal interface, but I don't really know if it's worth it.
This is the only place where we have the number of nodes to be the number of items. The number of items is a number of items, not the number of items.
The `md5.h` header is already present in the header file, so this header is no longer present in the header file.
I would add "all" here to explain why we are not introducing any new functionality?
Is the SendSpellBarEnable method still used? It seems to only be used in one place, right?
Rename `invocation_id = ...` to `DateTime()`.
why not just put it in the `err`?
This should probably go in `volumeListOK` instead of in `volumeListOK`
@tgamblin Can you add the trailing comma here?
How about `cachedChanges.Info`?
Should we add a `execute_task` method that returns the `task` object?
The caller should be setting the `chan`.
We should only be rollback if there is no error, and not just rollback.
I think that it would be cleaner to pass `step->getFormType()` as parameter here instead of the variable?
This should also be `google-osconfig-agent-el6-unstable`
Please use `Strings.Join`
you need to import sinon from 'sinon' as the test class is no longer available if you don't need it anymore. Please move it to the other test file
we can't use these constants in this file, but the naming is not really clear what the default value of the RTO is (which is why this is not the case)
I guess this should also be an disk?
Remove empty line?
@mmaxim what do you think about this?
this will break compatiblity with the new custom message?
Why do we need to do this? We're already doing the `NewtonsoftEscapeJProperty(framework)` to avoid the `JObject` if `framework.NewtonsoftEscapeJProperty(framework)`, so it should be `NewtonsoftEscapeJProperty(framework)`.
Should this be a ``>=```, or should we just say "the values that are unhelpful"?
This will need to be added to the new module as well.
This property can be removed.
It seems this is a bug in the test. Why the one in the test file?
if (null === $mediaContext)) we can use `TODO` instead of null here.
I assume this was added in the docs, but I am not sure we need to change it for now.
I would make this optional.
It's a little odd to have a test that checks whether the headers are `1`, not the headers (e.g. `t_t_to_set=False`)
You can just remove the whole `throw new enums("Session ID is null")`. The exception message could be "throw a `quit` if the command is a `command`. I'm assuming you have to do it for all other methods, but the `command` is not a `quit`.
Why do we have to wait for all the time before we call the context?
What's the purpose of this change?
I think this should be changed to 0 as well?
why the change to a `test(t, blockChangeSize(20)` in `testing`?
It would be better to use `try-except` here
i'm not sure what the right thing to do here. I'm just wondering if we should just have `suspense` in this file?
We should also set the default for `BATCH_SIZE_MAP`.
Please add a space between `:` and `:`
I don't know if we should add this method to `ConfigService` but this method seems like it will only be used once for each service (we will not need this method as we do in `ConfigService` for anything other than `host-Service`, right?)
Should be above the package
Is this used?
@jglick Shouldn't this import be removed?
I think we should make this table value configurable instead of setting a default value. Then this can be changed as it is for every call to `getTableRefinedScan` which does something like `getTableRefinedScan` (e.g. a table that has `getDataFilesTableScan`).
nice catch! Could you elaborate a bit about the word "test" here, so the name can be more descriptive?
This is needed because the first print statements are always created, and it is not removed.
this will create BN for every version of BN. It will be hard to parse BN, if it will be set to some new value to BN and then we will be able to use it in the future. will it be better to use `1b0.1` instead of BN here?
Is this change needed?
Why the string change here?
This is a test case I'm surprised we didn't have an issue in the future, but it seems like we should just remove it from the file and use the `bazel.build` property in the `build` class itself.
Is the `-f` prefix intentional?
Why do we need to provide it in this file? I think we should just make it `protected` and have it in `before_action`.
`ProgressBar` has its own `s` constructor.
This should be `errors`
can we use `error.Info(X)` here?
I'm assuming this is a bit of an overkill. I think `avoid` is a little confusing to me - I'd say it was just a bit more suitable to see what the `unncessarily` does and then if it were to be an instance of the `unncessarily` it's not doing anything.
I don't think that TODO is needed, it is?
I think you can remove these `Metrics`s
I think we should add a null check here to avoid adding an error message if `ConstValue*)getType()` returns null.
Is it possible to use a TypeSolver.getcollcoll(..) here? I think we don't have such a difference in the code base.
this is the main reason why you removed and deleted any of the others are using `skipLoad`
can this be done in a separate file?
I think it was not possible to have a type of `blurhashstr`, but it was not a type.
The "return" should be removed here. The "return" has to be removed in the description.
You could just use `self.bbox_head` here?
Why are we changing the return type?
I'd rather have a name `Close ctx` that adds this parameter to the caller.
This is not the best place for this use case. You should remove the ` Heureka` annotation and use the class from `register`
We're losing the `bbox_head` values. Shouldn't we also set `dcn`?
The `!` should be `default: no` or `default: no` (and should be `default: no`). The `default: no` should be `2.02`, right?
I'm assuming we have a `client` named constant in the `Client` instance?
Should probably be `/products/13-ruby-science`.
I'm wondering if we should add a type annotation on `CDs` instead.
The `opts` variable can be undefined, because the deepStackTrace command will not be used in the same iframe.
This method and the corresponding corresponding defaults are named `parsed_email`. It's used in other places too, and it's a bit confusing to have a method named `attr_reader` that's used for the defaults.
I would use `history_` instead of `rhty`
Is the `err` still being used anywhere?
Shouldn't this be `t *V4TrieEntry == ""` rather than `buffer[:0]`?
The result of `user_message_author` is a tuple, it doesn't make sense to have a reference to the result of `user_message_author`. We're not using a tuple for the same result.
Can't we just change it to `EnableLogging` and reuse? It's not clear what we want here. The agent should generate logs, but the agent is still a specific case and not a function. Then we can just remove all the data and delete the data. Then we can just call it once.
>= 0 [](start = 12, length = 1) why does does does it default to `3.0`?
You should try to keep the old logic, otherwise the original logic is not correct
Shouldn't it be None?
This is not needed anymore?
Is it possible that the transactionIndex can't be accessed via a transactionIndex ? If not, I'd suggest we create a method like `transactionIndex` that would be used for the transactionIndex. Also if we do need to maintain the transactionIndex for this PR, let's create a JIRA and move the logic to that function
This warning is only for testing purposes, not for testing.
This will fail in the log if the log is empty.
Isn't this just to be done with the other notification id in the notificationId? I thought the whole notification id would be a notification id, but that would avoid the search on the response.
no need to change `ErrNotFound` since we don't use it anymore?
You can do `getConfig("api").domain` here.
The following two calls to the `certRecord.getHostName()` are never null. I think we should remove them from the string.
I think it would be more convenient if the user were not `title` but it was just not present at all, so I would just say `title.text`
There should be a test here to make sure it's called when an email is called, not a user.
This seems like a big change to be in the python 2.6. I would suggest to use the `verbose` dict from `types.py` for consistency.
What is the reason for this change?
I would move the log to the new message to the switch statement so that it can be removed in the other tests.
This should be `create_package` and not create the output again.
I'm not sure this is a good solution since we're not going to be using this anywhere
I think this can stay private. `pylint: super-init-not-called` is no longer used anywhere, so it's not a problem, but maybe it is better to keep it in sync with an error.
I think we should make it a string.
Trailing whitespace detected.
@kingjr I think you forgot to add the original code to this file
Can we just use hasData.buildArgs() instead? It's not a function.
The type of the variable should be removed as well since we're removing the variable.
why do we need to error here?
How does this checkout from the `checkout` model? I think it is still useful when it is generated from the `checkout` model
same as above we can from bc not add new typehints in the function `temporaryFilename`.
What happens if `rowType` is null? Can we remove it completely?
If the default update can be used, then this would be an error. If you want to do something like "The `if ! ! ! ! ! ! ! has been started and the default update can be provided.
`(1, 0)` would be better
We could use `configStore.IsLogs` here
Should be `!$trustedHosts === false`
This should be a separate change, since this change will be removed and the test will fail.
@xetys @jridgewell Is this change related?
I think we can remove this method, as the method is not used
"Fail to health check" sounds like a bit weird to me. Should we be using the same name?
Should we make the trace a little more explicit here? It's a little strange.
I think this import is no longer needed?
`LessSpecificReturnStatement?` is the only thing that's used. Can you change it to `non_EmptyAssignmentToListElementChangeType`? Thanks
why is that change?
I think that the `if` in the `else` branch is redundant here. We should probably be able to get the actual error handling in the `if` branch.
"Please enter the maximum value" should be "scale" (or something like "Please enter the maximum value".
@kennknowles if this was a bug. The reason I was not expecting it to exist is the `reproduce.on` and `reproduce.off` and `reproduce.on` are not the same, so it is not needed for this PR. We can remove this line from the `buildCallback` method.
It's used in 2 methods, can we put it in one place and just have it in one place?
remove empty line
Hey @bvanessen, @kroitor since this is a setting that will always be `None`. I think we should add a `.Disable()` method to `auth.bytes()`.
The `!` should be `SCSC_` and `SC_` as well.
Can you explain what this is about?
I'd prefer to have these as constants constants. But I'm curious why this is not a problem.
Why do we need to check for the `2012` in this case? Isn't this the case where the check for `2013` is missing? Or is it the case that a user will get at least 3rd party errors?
remove the empty line
this is not a public API, it should be fixed
This doesn't seem like a good idea. The only place it is in this file should probably be moved to `RootMetadataOrBust` if we're doing that.
Why did this changed to `docroot` now ? It's used only once in tests, but it's not related to your change.
This is not used
Maybe this can be `None` as well?
Forgot to add this in `helper_method`?
I'm not sure if this is safe to do - `NAME.getVersion() >= ETH66.getVersion()` means it doesn't get called for the `ETH66`, so we could have a better name here.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Space missing after comma.
shouldn't this be `err`?
We need this to be a Test runtime Test runtime, right?
is this change related?
Would it be possible to have a `l.lock()` at the same time instead of introducing a lock?
I don't think this dependency is needed. The `_version` version is not required.
This file is not used anymore
Doesn't this change the behavior of `isCloud || protoPkg.contains("cloud", "")`, and if it isn't there, we will get `cloud\\/` to go as well.
This change is not necessary, since you're using Lob_Append_Or_START and Lob_Append_Or_menu.
Should we move this log to `info`?
This function is also used by Rubocop. Why not do `!SSL_set_tlsext_host_name(ssl_, getHost().c_str());`?
why is it safe to readActiveBlockProducersByHeightTests and readActiveBlockProducersByHeightTests?
Why the change in behavior?
Why we skip if we don't have a method like `this.skip(this.getOffset())`? Isn't it the same to call skip on top of every call?
can't we have the same logic as a hidden getter?
It's better to use `idv.Interceptors.ID` here.
Wouldn't it be better to do this in `etcdDBDir` instead?
I'm assuming this is for testing? If not, I don't think we should be using this. If I can't specify a message that should be done, or is the message still being logged, so we could get rid of it.
This is not the case anymore.
not sure why this changed?
Can you also delete this file?
This was the reason why you made the validate.
This is the only change I would expect to be to make this change in behavior, since the participant itself can still be a local and a local as a parameter.
This is a bit of the time I see seeing. You're using relative imports. I am just asking because it seems to be the same in all the other files. But if you do, it should be imported before the standard library imports.
This is not a big error, we should probably just make this part of `set_stolen_reg_val` and remove `IF_ARM` here
I would prefer to see this in the `@Internal` module.
This is where we call `vNode.selected` in the `selected` function.
This is a good place for `abspath` to be used.
We can use `reduce` to keep this the first one.
nit: remove empty line?
I would prefer to not use the exception type here.
Please use `sp` for this
This change is not needed.
The error message should be updated to be more specific as it's not a "No IPv4 address found on..."
What is the difference between the two?
This was added by @jackyatnik, but it looks like there's no reason why it was here before.
Can you use `_maxpooledcount = 32`?
Do we really need to add online from the DB? I don't think it is used anywhere else
This is the only place where we have a request in the `*` section, should the key not be the same as `[0]`?
I think we need to add a new constant `executor` so we don't have to add it to the listing.
Is this a typo or should it be a constant?
I'd prefer `<%= link_to( $video %>` as its not a valid value. It's not an admin, so I'm fine with the rest of the changes.
The `RestConst.REST_INVOCATION_CONTEXT` is already set here, so it would be more clear what this is doing. I would say the `RestConst.REST_INVOCATION_CONTEXT` is doing, and if not then we could use the `Invocation` as it is
this one still needs to stay
This is an unrelated change, but it's not necessary to use `T` as a property here.
This is a change to the keyID. If I understand correctly, it's a different keyID and the one from the `Type` block. This is just a simple change, so I think it's fine. Also, the logic here is a bit confusing.
This is a change of behavior. It is not used to test the `ConcurrentHashMap` and `ConcurrentHashMap` implementation.
You should be able to use `if (r !== 0)`.
I think this is the correct test.
This is a breaking change as the test is testing the same as `ctr[ctr]`, but I'd rather we have a test case where we need a test case for this. It seems a little weird to me, but it seems that the test is probably the only way we would have to have this test case, and we don't really care about the same test case for `ctr[ctr]`.
The default should be `""` rather than `re`.
Could you add `_x` for the `type` value? Thanks!
Why do you need the propDialog here?
whats the need for the type of the struct
Plz add a blank line between tags and summary for better readability
Can we use a `String` instead of a `public`?
Why disable this warning?
nit, why the change?
I'd like to see this `continue` on the `Update` and `Updateconstruct` methods.
We should add it to the settings.
I would prefer if you changed the names to use `Time` as `Duration` and use it here instead.
This is not used.
This is the real change that fixes the issue.
Is there some reason for this line? I'm wondering what happens if `err == nil`
Is this used?
Do we want the error message to be reported somewhere? Is there any way we can do the same?
I don't think this is needed. The version should already be a part of the version string, not a part of the version string.
I believe the changes in this file should go in the `AmpElement` class
I think this will not work. We're not doing anything with this.
I'm not sure about this line
Is 10 * time.Second a valid value here? I think this was a bug in the past, but we don't need to do it now.
nit: remove the code
This is a bug fix. You can use the `time.Duration` instead.
Shouldn't we use SolrException(SolrException e) here?
I'd remove that `dt.rbind()` entirely since that's the pattern you are doing.
This should be `KOALAS_USAGE_LOGGER` as a default value of `None`.
I think this is a good thing to do. If it is providing GasPriceConfig we don't want to have the correct price as part of the cluster.
This is an API change. It's a little confusing since you're using `ctor.Reader` to get the ctor name from the configmap.
This looks like a leftover from debugging.
I think we should use the `Kind` interface here
I think this should be `sender_gcpbroker`. It would make more sense to have the other `sender_gcpbroker` function in order to prevent the other services.
@mjkkirschner @n3nash @mfojtik this was the only change in the `if (lit == null)` check which will throw.
Can you also update the test to check that the image is in the same header?
I think it might be worth to check that it exists in `DT_INSTALLED` and `distribute_INSTALLED` in `__init__`, if that is the case, we should check if the name is a directory that's in the `__init__`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Nit: I think we can just remove `errCode` since it's not being used anywhere.
Wouldn't the graphicsPipelineCI be more precise? Maybe if it's a graphicsPipelineCI, then maybe we should have an assert in the future? I'm wondering if we should have a single test case that would allow you to call out the graphicsPipelineCI.
I'm not sure how assets will work without this, it's just a assets.js file.
The final `detectStaleConnections` does not appear in the last `err` call.
I'd use the `in` here
@Eric89GXL @stephentoub - Is this correct? `c.HeaviestTipSetCh` is a list of columns.
I think it is a good idea to add the explicit `AWS IAM` type to the message, as we're in the `Assembly` class. I don't know if it matters much but if it's a good practice to change this one we might just inline it.
this line should be indented by one
why not just use hex.account?
you can just remove that
Can you add the `golang.org/api/rule` line to the top so it is always present?
This is a very common use case, but it is not a good candidate for an int to have a unit test for this.
The style guide says that the rest of the file is missing its argument, but it doesn't have to be changed.
why is this change needed?
this was not used.
Is this change intentional?
nit: move to line 14 and line 22
Why was this added?
this will not work for a new PR. The new VO_REG_register_name should be inside the new new VO_REG_register_name() function.
Bonus points for `is_bip` to be `m/44.*` not `m/2.*` so it should be `m/44.*`
I think we can just do `rbQValueCustom.Select()`.
can you add a validation for these new values please?
Why do you use `reset_logger` here, rather than `logger._logger` directly?
Why are we changing this?
This was a bug in `t` so that it can't be `final`.
shouldn't we also remove the `subdom` in the controller ?
I'd prefer to keep this a bit more consistent and have the same name `node` as `nodecache` as `nodecache`.
I would prefer a `Use this class` instead of a `Use`. This class is used by both Datadog.Trace and Datadog.Trace.Headers
Want to make this package private and add it to the `install` method?
We need to bump this content_for :page_title. I don't know if we can just get rid of it entirely.
this.splashWindow.isDestroyed is a very high level part
Can we move this to `Version`, so it's not supposed to be used anywhere else?
I'd rather not make this a debug log (e.g. log) and then log the entire object. What do you think?
The `setTimeout` method returns a boolean so the `reload` returns a boolean. The method returns a boolean value (e.g. `window.location#reload();`) and if the value is not set, this function returns a boolean.
this import is no longer needed?
I think you forgot this one, but I am not sure it is worth it.
Is there a concrete exception or concrete?
This should be `0.0`.
I'd like to have this go in `messages/os/client/server/os.go`, to avoid calling this method with a simple `os.go`, which is more of a name.
I'm not sure we need to change this, if there is a change in behavior that we can easily revisit this.
remove empty line
I wonder if we should add a little to the interface to be able to add this into the vavr interface?
same here, if (or else { // if( ...) { // else { // // the new line is missing.
This is the wrong name. `Faker` is just `show.kids_musical`
This should be `Task does not support noop`
This feels like a pretty hack, can we move it to the top?
It is still better to use the `sodas_ok` helper class.
Is it possible for `c._nextState` to be null?
The `git grep` suffix here is probably not necessary for the fix, but I'm not sure how much it is for the "default" behavior.
I think we should keep these as they will be very specific and will not be re-used for this case
Same here: ` Lucene80Codec` is used in a few places in the future.
`pdfPageOrientation`? seems like a generic type?
This seems like a good candidate for a better migration.
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.<br>Metrics/LineLength: Line is too long. [124/120]
I think ISetupLoadConfigurationBuilder should be a bool
This needs to be reverted.
I'd rather use the stateDB construction there, I don't see any use of it in this function in the code.
why is this field changed?
This method looks to be unused.
This is incorrect. The number of rows in one step 1 is very similar.
I'd suggest we add `TODO` here. We're not going to have to worry about it, but I guess it's a good time to fix that later
why is this changed? I think it's a good thing to fix
This could use `var.__dict__` for `processors` property, so we can't just remove this entire processor.
This is a change of behavior, but is there no way to do it?
I think this is not needed, we are removing `with_thirty_day_commit_count = true` below
Is there any way to get the default value of the `onCreate` object? I think it's better to only use it if we're not using the default value.
I don't see where the number of parameters is used (I'm not sure if it is actually correct or not, but if this is the case, we should check that the number is in the input list). The reason is that this is because the number of parameters is used is the number of elements.
This is going to be a change to the `request` variable?
Nit: I'd move `Stop` to `NewTaskEngine`, since it is now used by `common.New`
Why the exception here and below?
I'm not sure why we need this?
I think we should be using the new enum values instead of the enum value.
So it seems this `var` doesn't really have any effect?
Can this be made configurable?
Style/ClassVars: Replace class var @@_year with a class instance var.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
It would be nice to move this file to `build_package.py`, and keep the same file for both `generate_build_file`.
Why not call `this.flow1.getStatus()`, and remove the `flow` call below?
you should probably change `iatoranonymous` to `iatorSchema`
Should we use `name` here?
I don't understand this change. Why did it change?
I don't think we need it, since the `url` argument is unused.
You can use `os.environ.get('call', 'run') as fifo` instead of `os.environ.get(run') as fifo`
this is needed to make it clear that udev_enumerate_new() returns the right value
Can you use a different default value for this config?
I think the convention is to have a more informative `require 'pathname'` rather than a formatter.
Why is this change required? Is it only needed if the engine does not exist?
Shouldn't `short_names` be `false` too?
Why do we need to rename this? I would expect the attribute to be in `storestore.Get("browser")` or `storestore.Get("browser")`
You can just remove the cloudformation package from the API and use the service. We don't want this to be used anywhere else
I don't think this will work, we need to add a `action.value` param to the `action` field.
You don't need `string $str` here. The ` = b(string $str)`. The `a` is already an alias in this class.
Nit: I'd rather this be a `static const`
@deads2k this is the bug you removed from the rebase? I don't see any changes in this file.
nit: I would make missingAdminRole private
I'm curious if the name could be just "ByteBuffer _psbb", but I'm guessing you've got a few weeks ago.
This import is unused, can be removed.
This change isn't necessary.
We should just make a simple simple `NewIdentityManager`, and have the named function return the same body as `NewIdentityManager`.
Is this used somewhere?
I think we need to update the `zip` method as well.
Is this used?
Do we still need the `pre_syscall_app_sigprocmask_valid` variable?
The return type is `info`, not `It`. I'm wondering if that's the right solution to just do `info.It is important that the returned list is sorted`
You should be using the `gulp` path here (and in other places below).
@deads2k @mfojtik why not add the `handle_MODE_WORKER` to these two lines? I guess it's just checking for error code that we're using. The "handle_MODE_request" is a bad idea. This is a bit of a problem and we are trying to avoid that.
Can you move this to the parent class since it is only used in production.
I'd prefer a more descriptive name, like `str1.localeCompare(str2, undefined, "no")` or something like that.
This is the only change that will cause issues with the `HasSuffix` to fail. It's probably not the case here, but the `<binary>` part of the `<binary>`, so I would just delete the `<binary>` part.
Is there a particular reason this could be configurable? If not, we should probably make it a property (i.e. `SublistCache` or `SublistCache`) so that we don't have to worry about the actual values here.
We can just remove this error.
Why change the order of asset to look up and not just use asset for the filename?
I'm not sure what `getConsoleWindow := syscall.NewLazyDLL("kernel32.dll")` means.
this doesn't seem to have side effects? why would we need to do this?
Maybe make these constants constants to make the `-1` clearer?
@cramforce seems like this is a bug, can you rename this to `configureResolvedWriters`?
I'm not sure if this is the right place for this.
Do we really need this?
this should probably go in the `substitution` block right?
I'm surprised this didn't depend on the python interface, but I think the python/aio API is the best way of doing this.
This is an environment variable, so I think the more elegant way of passing `openvpnPort` to the function.
Why not just do `if (topology) topology.close(true).connect();`?
I think we could simplify this a bit to make the `expect(current_churn).to have_received(:where)` call to `expect(number_widget_first_value).to eq 10`
I'm not sure if this is the best place for this.
Use this instead of below.
I don't think it is a SimpleActivityProcessor, but the type is a property, which is in the same order as in the other place.
This doesn't look like it's the only change in this file that is required. Why is this required?
This doesn't seem like a very good change, but it does feel like a very nice thing to add.
I think this is the only place where I've used this. If I want to keep it that way, I think it would be better to keep it in the `setup.py`.
This is wrong, I think `asmsecret` should be moved to `server/asm.go` and it should only be set in the future.
I'd like to see a more verbose message here, I'm assuming you've got a `null` error here.
Is this TODO supposed to be removed? The only way I'm able to use a `Transport` function in `saleor/service/service/service/pkg/errors.go` is to create a new `Transport` object. If this method is used, it should be removed in a separate PR.
I think we should use `ComputerName $(` here instead, because it's the name we're not really sure about.
allowError? Maybe we should be calling `error` instead?
This should probably be a constant.
I think you can remove the Metric class and just use VirtualMachineMetrics directly.
Again, no longer needed
I think this is one of those cases where you use `name.and(/Capture$/, ''` (which you want to do in a bunch of places is the same thing that you don't need). It's not the case but it's a big deal, and it's not the case.
I think `fn` is no longer needed? To be sure that `path_parts` is used in `OnWriteWrite`.
This is not a public interface and will break some tests. You can use `int getCount` to make the interface more obvious and return -10 here instead.
I'm not sure this should be an error, since the user can use the var in the container. @siddontang @siddontang
I am not sure why it was removed, since ROMs will not have any effect on the PTautomer target. The ROMs should always have the caller's PII.
Is this needed?
I think this should be done in a separate PR.
shouldn't we check for null as well?
this will fail if manifest['application'] is empty
What does `Include` mean? Is this a `boolean` or a `boolean`?
It's not clear why `mymymy` is not used here. Should we also update `mymymy` above?
@jridgewell Is this intentional? It seems like we should be using the `listItem`.
I would prefer we have a type hint.
Shouldn't we use the same signature for these?
The `[]` should be here.
Intentional blank line.
This was previously a wrong resource for a user.
This line is not right. The only difference is that if `cfg.gpus` is `nil`, it is `2`, but doesn't, it is a valid value
`info()` is called in `hasOwnProperty()`.
Why not set it in a struct?
I'd prefer to have the `FileExistsPolicy.OverwriteIfNewer` be the default, but it will be used only once for the class, rather than relying on `FileExistsPolicy.OverwriteIfNewer`. It is a good idea to keep the old behavior here.
This is not needed anymore.
Is the `default` used anywhere?
What do you think about moving this to a `additionalIngressRules ` and adding another struct to the `additional` struct?
@mikeshultz did you find this API supposed to be public or is it an unused?
I don't think this is correct, it's not a valid "real" thing, right?
This can just be `Optional<MutableWorldState> getMutable(final Hash rootHash, Hash blockHash);`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
You can use `self.weight[None, :, None, None]` instead of `self.weight[None, :, None, None]` here.
I think we can get rid of these imports now.
This is a bug, right?
this should be grouped with the other changes below
I'm confused why this is a "own thread" not a "thread_handle" but not a "own thread".
Can this be removed?
Why don't we need to set Number Number in the past?
How does the snapshot get read from here?
I don't think that's necessary. The go-block will be nil. I'm not sure it is a good idea to go-files and go-files directly from the go-files.
For example, we should also support `QUILT_USE_TQDM`
I'm not sure how I feel about this. I'm not really sure it makes much sense for this to be done. If this is only for clarity, it seems like we could have a bug in here.
This should be removed entirely since the previous if block is not part of the if block
This should be added to `write-read`, no?
This should be something like `_JAVA_OPTS`, not `_JAVA_OPTS`.
remove this line
I wonder if `DISTINCT_session.tls_version` should just be `or 03` and not `fdSTINCT_session.tls_version or 0x0303`?
Is it possible to use `log4j` ?
I'm curious why the old test failed. Is it not possible to see if this test was disabled?
nit: can this be `current_ecr0`?
I don't think you need to add the Gobblin release for `ubuntu` here.
Why did you make this change?
I think this is going to need a different setting than the default behavior.
@Pearl1594 do we still need to do this? The `Object.setPrototypeOf` and `Object.setPrototypeOf` need to be updated to reflect that?
Do we want to check that these two blocks are not only used when the `request.MaxTaskID` is set? If so, I'd like to see a `application.X` that I'm not sure if that is correct.
This should be reverted. `new_size` should be `old_index`
Why is this required, and why does it need to be annotated with `ProgramPathContext`?
This should be `public abstract boolean hasLongrunningOperation();`. Otherwise, the method signature is "hasLongrunning"
You don't have to add the string to the username. You can just use `Basic %s` and `Basic %s` as the default.
Is there any specific reason you removed the `self.all.order(updated_at: 'foo')` above?
I don't think this is necessary, because the `Base.Base` is only relevant for `nil`, not `0`, right?
This will break width by default.
I don't think we should do this. You can simply call `offline.getConfig(api, version.product_mode)` instead of passing it in to `plugins.getConfig`
Why do you need a new option ?
Why this change? I would expect it to be the same as `o.MaxPending` and it's a `Type`, but I would expect it to be ` (%`.
This is an API change that was unintentional. It should be a separate commit
Maybe rename to `WithTimeoutWithTime` for consistency?
Can you remove this from the `v1alpha1` import?
I don't understand why we can't use this?
Is this needed at all?
This is the only change I found, not quite sure. It should be the default 3.
I would prefer to see this as an option. I'd rather have it in a separate PR.
`Bolt::Config.user_path` will return `nil` when there is another config file. Should we check here instead?
this should be done in the `else` clause as well
@DaanHoogland why are these removed?
You can use `version.now().year}</version` here instead.
Shouldn't we use strcmp(type, "goto error)) here?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
this is a very specific API, it might need to be in `spack/api`
This looks like a leftover from the previous commit?
Should this be `toggle_False` or `toggle_False`? I think it would be clearer that toggle will be `False` if it is a `patch`
The Dev codebase is not used. Can you please write this as default?
what is going on here? is it a pointer? is it used somewhere?
This field is not used. Please remove it
Please put this in a single line.
I don't think you want this change
Why is this change needed?
We should not have to set options.readPreference directly when the flag is set. This is a lot of things. We could even have a default options that is set to the default setting and set to the default setting.
This is the only place we use a `block.BlockNumber` when we use `unwindTo` here, which is the one for the `.to` block.
This doesn't seem like it should be just `s`. The other part is the same as the one that is being used.
Line is too long. [89/80]<br>Space inside { missing.<br>Space inside } missing.
I think you can just use `if (rp->schedule_backoff > gstate.now) return false;` here instead.
I think we should not be checking the return value here, otherwise it will not be zero.
It might be better to use the constant `ex set` rather than setting the default to false when the item is not found
This is the main problem, since there's no `#if Travis::Build.config&.ssl&.verify`. The `verify` is already `false`, which is why `d.config.&.ssl` is `-k`, so the `verify` flag should also be `verify=true`, right?
Why do we need to stopEventWalk() twice? It's not used and it should be enough to stopEventWalk() in the caller.
why not use `key.NewNew()`?
This should be `staging-env` instead.
what is the reason for this change? it looks like num_scan is not specified.
Why do you need to set the `partitions` variable at all ? `0` is a `partitions` attribute (i.e. the default is set), and it's not an `0`, and the `partitions` should be `0.0`
Seems ` MinimumRate` is not supported?
nit: use `path` from `path.Join`
This seems like a change in order to not work.
can we add a TODO to make it more obvious that the code that is still in the block which is what's happening?
This needs to be moved to the interface.
This should not be Integer. The field is unused, and it should be moved to a common class.
Should this be the other way around?
It's probably better to leave the type in the `Oneway` function and use that in all the other cases instead of having the constructor parameter.
I think you can remove the `if !config.XDPEnabled && config.XDPEnabled`
I don't know if it's a good idea to add a `isAds()` call here but it would be more readable to do it in a separate PR. I would like to keep the code as it is.
" False for ResNet, True for Houglass."
I think you could remove this
I am not sure that this is correct. I don't think the exit() will exit when using the dict. In other words, it is not clear to me what is happening here.
It is possible that crt.Spec.CommonName should be the same as the first name (and the second id) to the second name (like the second one) and the second one as the second one (i.e. the second one) should not be validated at this point.
please move this to the test where it's used.
The configuration.get_config().getint(self.spark_version, "pickle-protocol", "DEFAULT_PROTOCOL)` doesn't have `self.spark_version=pickle-protocol`?
This should be an option to make sure it's not an options (e.g. `init_Port()`)
Please avoid wildcard import.
I'm not sure how this was done, but this was also causing the issue with the `config.` prefix.
This doesn't look right to me, it's only a single columnm. I suggest `integral_columns` or `integral_columns`.
I'd suggest to add the extra args here to keep the old name.
I'm not sure why we're not just using `ecs.Attribute` as the default here?
This constant is already in the `FEATURE_CODE_USER_AUTH` class, so this constant should be renamed.
Why does the CMake go 4.8 file work?
Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
Looks like the `cancelled` needs to be renamed to `status-header-container`
This file is not required.
This is a bit of nitpicky, but what if the model doesn't exist? Just wondering, why do we allow `var _model = paths.length;` instead of `models = model.split(' ');')`. That's what you're doing in other places?
This should be `StageSendersCfgForStage`, so that we don't have to pass it in.
Please use the original variable name `uafu_irq_set`.
I think this should be `q == null || fcontext.base.size() == 0`. Otherwise, if `numDocs` is called, `base` will always be `0` and we will never see `q == null`, so the base is not null and we can't remove it.
remove empty newline
should we call this `bytes.Buffer` for consistency?
Why not `cert.NotAfter` ?
Remove this import.
The tolerance used to be deprecated in the `grid` module.
This is a bit odd, I'm not sure why. It would have been better to use `NewQuery`. It would also make this `NewQuery`.
@jridgewell Is this what you meant to do when `if deployment.ClusterName == ""`?
This one is now deprecated
This seems to be missing a `initInputShape` method and will return null
I would also add the `var` above, as I see it's not used anywhere.
why the change? This try/catch does not seem to be used.
this seems weird. Can't it be `nil`?
It's probably a good idea to move the keyword argument to a single-gpu output. The name is confusing because the field is confusing. I'd rather have a single-gpu output, or a single-gpu output in the docstring. I think it would be better to have a single-gpu output with something like `data_loader_globed_test` and use it here.
This is a weird change. This means we are adding a new role to the server, but we are using the `site-nav` role in a different order?
This seems wrong to me, as we're only using it for the `.format()` method.
This change is not related to the PR.
What about RTL? Would the site not accept an object?
Just noticed that these are necessary for the tests.
This needs to be add in `BaseModuleSettingsDetails`
Is it really needed to make Deck from the older version? `VERSION_2_0` is the same thing as the default. This is only used by the new version of the file.
I don't understand why we don't need this? Is `default` always the default?
I think this file has no chance to be included in the PR. Maybe we could remove it from the `and`?
We don't need this file because we don't have it in the `/dev` file
It looks like this change should be reverted
I don't think you can add this string if you want to.
I don't understand this change, is it necessary to set the s.IsHidden=false?
I think we need to make sure there is a default value for the "clef-signer-address" tag.
why is this required?
@mfojtik why did we have the CName here?
this is not in the controller right?
What's the rationale behind this change? I'm not sure why we can't rely on the `--prefix` here.
This is a breaking change.
I think the `getAll` method should be removed now
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is now unused, right?
I'm not sure about this. If `vic-machine-url` is the best way to do this, it seems like there's only one place to handle the case where `view.stateViewer.StateView()` and `vic-machine-url` and `vic-machine-url`
We can use `Math.To_EPIS` here and use PodDBAdapter.KEY_EPISODE_NOTIFICATION.
this will cause the error on the client side
Can we make `mobilesdk.cs1.my` the instance id of the instance? That would allow the instance to contain all the `salesforce` objects.
The check for `name` is correct. It looks like this is the correct fix.
Can we make sure the metadata knows about a metric name, e.g. `getMetadataIdentifier`?
I think this should be initialized with a simple string.
Can we add a default call here to make it clear that this is a `@validation`?
It would be good to have a test that checks for the header header.
I'm not sure why the `NETSTANDARD1_3` was removed here?
Can you add the same line in the other PR? The reason I'm not aware about is that the new `net` is now just the new `context`.
This is a bit of a problem, but the `execution_contexts` is used to set the value from the format string. I'd rather have the two headers, then the other headers would just work, but it's not the case, just making it more clear.
Please remove the unused parameters.
This is a bit unrelated. I'd just remove the random conduit node from the tutorial, and only check if the random conduit is not null.
Should we check that the parent is not set here?
I'm not sure if the method `isCaseSensitive()` is really a correct method. I'm also not sure what the correct method is here. Maybe I'm missing?
no need to use msg[:maxTrace]
`mins` is an optional parameter. It would be better to have `_mins` with the value `None`.
should this be a constant?
This should be `<Queue<T, T>`
I think it might be good to move the import to the `add_spack_logger()` function.
Can you check if it's the right place to do this? I think it will always be the case, but if the `--javascript` option is still running in the DB, we should probably check if we can only do this when the user doesn't expect a file to exist.
This is the only change I'm curious to know why.
`id := primitives.NewUUID()` is the correct value.
What happens if no default value is provided ?
typo here, it should be "right".
This is not correct. You should be able to use the `type` variable.
I'm wondering if we should just set this to `opts[:run_in_parallel]`. If the block_hosts are set, we'll end up with a `run_in_parallel`.
This should be added to the `HTTP` below.
I don't think you can do this... it's a little confusing. What does this do?
Is this needed?
I would use an `EXPECT_EQ` from `/tmp/rocksdb_compact_test.XXXXXX`. I would also prefer to see the value of a test with a different value
This is a little strange. How about we move this to a common helper method, and use it in the other method?
Shouldn't we also change the `GoogleSitekitDashboardDetails` name?
I think we can remove this `NewVHS` variable and use the `NewVersionHistories` variable instead of creating a new `NewVHS`, since we have a more generic name for this variable.
The `missing_text` parameter is unused. Should be removed.
Just a note that the `pants.util.PACKAGE_NAME_FORMAT` already matches the full link.
This isn't needed, the component will be automatically loaded by the `i18n` component.
Why don't we use `continue` here?
Is this a false false?
If we add a validation to verify that the schema is empty, we won't have an empty string.
This is not needed
i think you can use `else` here as well
I think we want a test for this. We can keep things simple.
This is the only change that affects TF pr that will create a proper `List<List>` instance.
Could use `strconv.IsServerServer` instead?
Is it possible to get rid of all the namespace types, i.e. in `src/java/org/namespace-java/org/namespace-java/org/apache/src/test/java/org/namespace-java/org/mule/test/java/org/mule/provider/java/org/apache/provider/java/org/mule/java/org/mule/java/org/mule/java/org/apache/test/java/org/mule/java/test-java/org/mule/java/org/m
Should we add a message about this?
This line is the same as the one above, can be removed.
What is this for?
why not using the new version instead of the new version?
This is now unused.
This import seems to be unused. Please revert.
can you check for nil as otherwise it will fail with empty string?
should we use `sysfn_enabled=False` instead?
This should be `device_extensions.vk_khr_semaphore`
I'm not sure this is correct. ` percentiles` is a `None`. I guess it's not required.
Do not use this method without changing the method signature. It will make it easier to read in the future if we need to change this name.
This is the only place where we need to pass the `deps` to the `NodeManager` package.
should we use `when='linear'` here?
Why is the first condition in `IsInvisible()` and not the last condition of `RuleB(Pets, LivelikeBreakCharmOnInvis)`, and then the second condition in the `if` block? If it's not, it should be fine.
This will break stuff for `ConfigKey`. I don't think we should do this here.
This will not work. We don't use the existing `@Override` method in `onPlaybackEnded` method in `onPlaybackEnded` and `@Override` methods. But this is probably not a good reason for this. If we do not change it here, I think we should remove the `onPlaybackEnded` method in `onPlaybackEnded` and `onPlaybackEnded` methods. If this method is called for `onPlaybackEnded` and `onPlaybackEnded` methods.
Is there a reason this was done in the X11 path?
Please put the class in the base class.
nit: no need for the blank line.
Since we're here can we rename this to `Logger.Logger`?
Align the parameters of a method call if they span more than one line.
This is not a great solution since it only works in the `nupic` package. We should probably just leave it for the other `nupic-algorithms` package, and remove this.
I think this test should be moved to the new unit test as well.
can you please update this?
I don't think it's used anymore.
This is going to cause the `__init__` to not be called in the `WriteExternalIP` folder, right?
Please rename this test to `testGetJsonBodyForPodString`, and `testGetJsonBodyForSingleMapObject.IsNullOrEmpty`
The template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template template
I think this is fine for now?
I would not expect this to raise an exception if `action` is an empty `ValueError`. It will make it work for both `develop` and `Order`.
This doesn't seem like a good candidate for a type annotation.
`StackSummary` ?
please update the typehint as well
Is it ok to use `/metrics` here?
Why not `return (r.ismpia())`?
Is the old `#TODO` for `ExtraRuntimes` or `nil`?
This doesn't seem right. We're using dot to doT now.
This will cause the test failure to fail.
is this a false positive ?
This is not the case anymore. You can just do `if field in ('id', 'collection_id')`
I think this debug output should be done after logging it.
It's better for this to be mentioned in the `constants.UninitializedException`
Maybe we need a more specific name for the message too?
>id == "feedbackable") [](start = 11, length = 6) I'm not sure if the spells[spell_id].reflectable is needed for any spells[spell_id].feedbackable is not the correct spells[spell_id] is possible.
Should this be in the previous migration?
This is not a test, it is a no-op. We don't want to test the one that is set in the error message
Can we just remove the `middlewares` import?
@tnozicka I am confused, this line is the root cause of the problem.
We need to move the `computed` inside `generator`
Maybe we can set the default setting for this case?
remove empty line
I think it would be better to pass the metrics into `metrics` and then use it here.
I think we can do this in one pass to `lowerDoc` instead of lowercaseFields
nit: we have a blank line between methods.
The problem is that the exception is not raised as a top level header, so we could just remove the `look` line.
Would it make sense to move the `[JsonPropertyName]` to the `regex`?
Can you please use the `_context.RunStore` instead?
This is a bug fix. We need to make sure it's not actually a bug fix, but I can't see where it's not.
This isn't used.
nit: you could use a single-opt function to avoid code duplication.
I think you can remove `KeyValuePair` here as well. The IDictionary is not a valid value. The IDictionary is an integer.
This one is used in many places and I think we still need to log `info` here. It should be a `info.format()`.
Do we need to make sure the API is only used for API values? Can't we just use `SpecPriorityAlias`?
TODO: we can also delete this TODO.
Can we remove thisfloat? If so, this is a change of behavior, I think, since this is a very generic type.
This is not a valid API, it should be a `&&` (or some other `&` in the other place as well)
I don't like this change. It's a bug.
Can we put these new methods in a separate namespace so they can be removed from the PR?
This is the only place where you register an event on an AI side, but I'd like to understand why the `wakeup` call is not needed.
The first two lines are the same. The last one is `0x30`, not `0x70`.
This is going to be the actual fix
I think `?string $url` should go in this class as well?
This is the main change.
Can we add a link to the docs?
Is this not the right error code?
Do we need to add this to `XFRAMES/image`?
@jridgewell can you please check if the Blockly.Connection is not null or not ?
Please remove the empty line
@lilleyse we are removing the Kratos commit here.
The `bouncycastle` package is used in many places so can be removed.
I think the original original code should be moved to the characters EG, not to the characters EG
I don't see how this file will be closed in the future.
can we keep this file as non-js?
@jridgewell Is this what you want? It seems like we are missing the event handler for the event handler.
I'd rather use a warning message, as it's a bit hard to follow.
Maybe use `String.format` here?
Maybe we should add a `Common` attribute to `1.Service` instead.
Please use `DeviceName` instead.
This is breaking change. I think it is a good idea to add a top level property to the top level property instead of just passing in `engine` and then reuse that that is why it is here.
I don't think this is the right choice.
Why do we need this pylint?
This is the change I'd be fine with the new stuff.
this if else is unnecessary
@jridgewell any reason this is not added here?
This isn't a good idea, you'll need to move this to `src/main`
There are two more similar places in the `small></td` below. I don't think you need the `small></td` variable in the `small`
This is the change that breaks the destroyLinks function, it's an internal function that returns null. The function is used in the `resource` and it should not contain the order.
This will break on older builds of our build system.
I'm not 100% sure this is needed
I think this is not a good change. I don't think it's needed for this case?
This is the only place where we can actually avoid this. The `#if TRUE` below will be the default value for the `#if TRUE`.
`NullActivity` should be nullable here.
We need to remove this, as we're now on the "mailer" page in the "metadata" page.
This is a BC break.
Is this change necessary? I can't find any code using the strict string in the code anywhere.
this should be `Iterable[null]`
can you add the logging message in `registerClassAndNull()`, then?
what is the difference between internal class and static and internal class?
I don't think the `mixed` variable is necessary. `chkAutomaticallyAddToCollectionContainer` is called only if `dom.mixed`, and `dom.mixed` is not defined, so we should just remove the `chkAutomaticallyAddToCollectionContainer` parameter and use it in `chkAutomaticallyAddToCollectionContainer` and use the value `mixed` in the `chkAutomaticallyAddToCollectionContainer`
remove the empty line above (github.com/syndtr/goleveldb/leveldb/os/auth.go)
>from push_front_preference [](start = 16, length = 1) I'm wondering if it's ok to call this just push_front_preference
We can't do this with `rewriteNot`.
I think these changes are not required anymore?
I think we can get away with a specific `flush_enabled` variable.
It should be `prometheus.current_for_version`
I don't think this is the right choice of the bug.
I'd rather we return `default` here, and let the user do it for now?
This is the "peer" error of the error. Maybe something like: "TipSet that evaluates to true when the type is true, but there is an error of the returned slice of TipSets that evaluates to true when the type is not found"
I think this can be removed, since it is used by multiple people.
We should probably remove the service usage in this PR. I'm not sure how much we could do it in this PR.
@bvanessen, @jridgewell Is it possible to get the `cygwin_installed?` check? It is the only way I would have expected to set it to `None`.
`manifest` -> `manifests`
Do we need to also add these to scan task as well?
Should be an enum
This is a bit of a tricky thing to do here. I think we can probably get rid of `CheckErr` altogether since it's not used anywhere.
I'd call this `setSettingsType` and make `enum` optional.
The `?Array` is only used in the first place and thus the last one is not necessary.
`this.data` will throw an `NullPointerException`, why?
I think this should just be the debug level and not the string name.
This needs to be added in the `[a-zA-Z0-9_]+)$/']` as well.
I think we can make this `static const string AppSecExtraHeaders`
This package has a `typeinterference` package. Is there a better name for this? It would also match `typeinterference`
I don't think we should change the behavior of this test, it will make sure we don't run the test on a valid test.
@martinwicke This is not needed because we use a more specific name. The `timerIntervalInMilis` is not a commonly used API.
I think we should include the link to the rules and not the user level.
Wouldn't it be better to just have this be `page.page`? This way you don't have to change anything in the future and it's more consistent.
`id` is not a module-level module, so this can't be used outside the module-level module.
If you use the `org.mockito: quite a bit bit, it is 1.6.5 :(
I don't think we need this
The only place where this is used is in `app/services`. Shouldn't it be removed as well?
Is the remote a "bug" ?
I'm not sure if this is the right way to fix the problem. The first one should be `with the last one to be consistent with the first one in the last two, or if the first one was the first one, then the first one to be the last one. It should be fine as the last one to make this change to the first one to be consistent.
Should this be `from builtins import x`?
This is not correct because it is not used in `env_auth`.
`if (Email' !== $this->strategy) {` ?
This is not a valid path, but the `dir` is a bit ambiguous.
The name ` HPX::m_hpx_initialized` is a bit confusing because it is the same for `m_hpx_initialized=True` (the name) but it is a little confusing. It seems like `hpx::m_was_initialized` is confusing with the name. It is just a little confusing to have this name as a name, but it's more clear where to name the name of `hpx_initialized`. I think it is a bit confusing.
Hm, this is the bug? We are doing a lot of `RPCName` in `nil`, but I'm not sure we should be doing `info.RPCAddress` here.
This import is out of order.
This is an important change that is not related to the PR. I thought we wanted to start a newInst, right? I don't know how we would want to start the restart.
This is a bit of an unrelated change, but why are we doing this in a different PR? I would think that we should not do this in the cache itself.
I'm wondering if we can make compiler a `str` instead?
@jridgewell I think this is a breaking change, since the `args` value is always a `nil` value, so I'm not sure what the best thing to do here is to do.
this is not needed anymore right?
So this is really just an async function? If you're going to use the global var, you'll have to update the method to return a list.
This should be a separate commit, right?
It seems that this change is unrelated.
`&&` should be required for `SrmDocument`
I don't think this is correct. We don't want to be calling a on-the-paste version. The on-the-paste version does not seem like a good idea. I think we should do this for all the other components, not on the other attributes.
I'm not sure this is the right fix. I don't see the need of this check.
This is the only change that affects TF providers of a server that can happen.
@Scottmitch do you think we should be able to have something like `'partitions'` here?
This is just a one-line optimization change which means we could make sure it's safe to remove
Is this really necessary?
@jona-sassenhagen this was the bug that you changed
This should be a separate PR, right?
This should be `[]` instead of `string[]`.
I'm not sure if we want to change this. We can just remove it.
Is this a typo?
I think this could be a `boolean`
Why is the `return nil` necessary?
The H2O text should be kept to allow H2O to be initialized to the H2O cores.
Would be nice to also set `Flags` as the default.
this should be `configParams.SetBaseElement`
`+` in `beat._'` should be fine for now. The `fmt.Sprintf` should be the default value, so it's clear that the default value is not provided.
This should also be `Current != nil`
Is there a reason for the default of the default of neither Sender? If we do want to make it consistent with our default setting, we should be using neither Sender here.
Should this maybe use an `Error` to determine if the span does not exist?
Why the `*`?
Is `DateTimeInterface` a special value? If it's `self`, maybe it should be `DateTime::createFromInterface`.
Do you think we can delete this function now that we don't need the file at all?
You need this array now that you've removed it from the list.
What is the reasoning behind these changes?
This doesn't seem right. I'm not sure what the best way.
can you make it package private?
@bryevdv, I'm not sure this will work. It looks like the only thing I'd expect is to have a system awslect, but I'd be ok with that
This is wrong: `updateIndexQueueByItem` will not be called for each item.
I'd suggest adding a new `element` parameter in `_element` to keep the original signature. It would be better to do the check in `is_displayed` method in the `if` statement above, and to make it more obvious that `is_displayed()` will return a promise.
@karlier, I'm not sure if this change is required?
Please remove this and keep it as package protected
I think you forgot to add this log to the constructor
nit: readonly static int is redundant
I don't think the `isort` is needed here?
use `digits: 10` instead
So, we only use `validate_resolve_reference` when `podman external.plan.properties`? Should we update this to check for `podman external.validate_resolve_reference`?
The changes in this file seem unrelated to your feature?
Why did you change this file?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is the `defer` function still necessary, since the defer function is only called from one place, and the function will be called in another. If we want to keep it, I would suggest we remove the `defer func()` function.
Does the other `coll FIL` references it?
This is a bit of an unrelated change to `rChannel != nil &&rChannel != nil`. It would be better if we would check for the correct channel here.
The name `options.source` should be `string}`.
Please move this down to the bottom of the `handleDelete` method, to match the other instances with a single field name.
@deads2k @tnozicka this should be changed to `struct st_h2o_http3client_req_t *req` as the second parameter.
This is what I meant about. It's the actual blob file and the other files.
Is it possible to avoid this check? It seems like a debug statement
Why is `# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value`?
The tabbed_browser._now_focused._last_hovered_link, is it necessary?
what is this used for? is it used anywhere?
This class does not contain any other code that is used in the code.
I think we could move this to a new function in the `service/python.go`
Please change to `AbstractRun(float)` to `AbstractObject(0)`
Isn't this change related to the PR?
The same question here. Just make `AccessNode` take a boolean?
this class is already named Player
Please don't use braces for an array of strings
The previous code was correct. The `TDTWriter` is never initialized, so this is a bug fix.
Please use a `TODO` for this, it will be easier to read and see what the `GenerateGenerate()` method does.
You don't need to change the signature of `str(x[0])`, right?
This needs to use the "second-id" suffix.
stdout is not a boolean
nit: can we have one in `api` here too?
Please don't put `optimizer` here, it's already present in the `mne/` directory.
I'm not sure if this is a change or unintentional. It's probably not an issue but it's not really worth it to make it work.
I see, this is a test, not sure if it is worth the fix to remove the `renderState` from the other methods.
@jridgewell Is this what you intended? I'm not sure if it is the right approach. It seems a bit weird. What do you think if `c.acc != a` you could get a `nil`, but that's probably okay.
This can be `!make_shared<HDF5Reader>(*this, name, accessMode, name)` and the `!==` is not needed. The ADIOS_HAVE_PHDF5) is a boolean, so we should not change the return type of `HDF5Reader`.
I'd like to have the same error message here. I think it would be easier to understand what the error is.
This is the "default" way to check for MAX_PERTABLE_STATS_ENTRY. The "default" is the number of "MAX_PERTABLE" and is the number of "default" in MAX_PERTABLE_sending.
Is this still needed?
The `UseLane` is not a good idea. It should probably use the constant from `instruction` to avoid the warning.
The name of this package has a pattern `status/models/iotex-proto.html` which is the name of the package name `status/spack/iotex`
Please remove this blank line. Also, please don't remove the #if
just noticed that `pending_color` is used anywhere else now, should it be added to the user instead of using `clean_color`?
This should be a `createRegistrySelector` function.
Why not use the `-` prefix here?
nit: maybe rename to `IsMSIEnvironment`?
I think we should make it configurable?
I would use `!` not `desired_group`.
This is a regression.
I wonder if we need to make the method a little more explicit, e.g. `OpenTelemetry.Instrumentation.AspNet`
This can be removed, right?
We can remove this Deprecated in favor of "go.uber.org/yarpc/peer/peerlist/v2".
Maybe it would be better to log the message here and let the `else if` log line fail and log the message?
@caitp : I think this is the right place for `so`? I think we can use `ICMS.Native.dll` instead of `ICMS.Native.so` for the class name.
This is a false-specific change.
It is not used, so should be `static int int int` here?
why did you remove this?
I don't think we need an `would` after the `ctx`
I think we need to keep this line, and put it back after the `process` call.
I'm not sure about this. I think the reason the fully formatted is because the `fully_formatted` attribute is not set. What do you think?
Why do we need to remove the class name ?
Does this need a `PolicyPolicy`?
Is this still needed?
Please rename this to `telemetryEnabled`
I think we can just use the null pointer here?
Is this related to the rest of the changes?
Not sure if this is needed
The `spec.LocalSettingsPath` function calls `app.enableLocalSettingsPath` which calls `app.siteLocalSettingsPath`. I suggest adding another name.
Why are we using the old config?
It looks like you are using the wrong return value here, but `config.DisableKubeProxy` returns a pointer. Is that what you want?
This is probably a good example to use the new-cap attribute.
this will result in an error when a account is invalid. Is that intentional?
I would default this to `true` and not `false` by default.
The changes in this file are just a testing test, which is not needed anymore.
Use `!hosts_file_generated` instead of `.realpath` since it is only used by one of the other
This import is unused.
What is this function used for?
I'm not sure about this. I'm not sure it's worth it.
This should be `errors/...` since we don't use errors in other packages like we do elsewhere.
Style/SymbolArray: Use %i or %I for an array of symbols.
Is this necessary? I thought we already added `wg` to `errgroup.WithContext` and now we don't care about `errgroup.WithContext`
I'm curious, why `fragAlignRatio` is not set in the above config?
Should this be `host, False`?
I think the `@Test` method above can be removed. The `@clevel` method can be removed.
This should be set only when `reliable` is set.
This `if` statement is a bit redundant. `hasArray` is already a `String` anyway. I would suggest just `return new DataByteArray(String)`
This wouldn't be better as `BaseElement.Add(in spanReference(Baggage, T value)`.
This is not needed if the code is in `verdaccio` but it is in `/-/verdaccio`
I think this should be a separate commit.
This seems like a good candidate to move into a new module.
It would be better to put a constant in the function, like `from_scol = 3.0`
I think this should be `/actual/\/se\/cdp/`.
Can this be merged with a `registerStore()` call?
This needs to be fixed. But we can use proper `secondsHeaderSufficientlyAheadOfParent` and `actualTimeSinceParent` directly.
Line is too long. [81/80]
This should be a list. Also, should it be `data_item`?
I think this was a bug.
This is an example of how the name was correct. The key is always a Getter (`Type`, `Type`, `Type`, `Type`).
this is a change in behaviour - you are using HiveClient_JNI::deleteInstance to get the client in HiveClient_JNI. Why not just have this in HiveClient_JNI::deleteInstance?
`writeConcern` was removed from `NewCollection`, and `Newhelper` was removed from here.
Can't use `log.ID` here because it is an `int` type?
I'm not 100% sure if this was a typo or a bug?
I think the `PublicLink` is always `fileName`.
should re-indexing be renamed?
I don't understand the characters that aren't allowed by default.
Do we need the service header?
This should be `if serviceDirOnHost[0:1] == "." {`. The `Host` is the default.
Is this still used? If not why isn't it a const const
I'd prefer if you could use `if defined.exists(path)` here, and just `except err:` instead.
This function is being used in many places, can we remove it?
Same question for all other view view changes.
I think this check and the next `this.Extensions.ContainsKey("nextMethodName")` check can be removed, right?
this was the original issue
You can remove this, we don't need to add anything here.
Why not use `case`?
I think this is a leftover ?
this should use `0` as it is not used anywhere
Nit: we can avoid this blank line if you're not using it anywhere else
Maybe we should also update the `lambda_executors` code above?
Could you add an example of `func icmpCode = (icmpType)`?
I think it would be better to move this to the caller so it's clear what the response is about.
You can change this back to 2.
The `a` tag is not needed.
This is a little weird as it has a "unsafe". Can you make it `mypy`?
This should have a unit test.
Can you explain why the use case for `postOpResourceModels` is not expected and it will not be handled?
Is the keys of this intentional?
Why not just use `continue` instead of -1?
I don't believe the way we handle this without the `Level`? I don't see any code using `Level` in the `Level-integer` class.
why not using `fetchUnfinishedExecutions()` instead of using `usingfinishedExecutions()` here?
Rails/InverseOf: Specify an :inverse_of option.
I think this line should be removed.
This will cause the tests to fail, which will not be compatible with the tests.
why not call msg.Query instead of adding the second return on the context?
This is the only place where we can set this cache from multiple threads? This is only needed in one test, right?
This should be done with the `*runtimevar.Variable` above
I think it would better to be named `SECTION("Rxn Smart Processing with Dative Bond")`
Can we make this a const?
What does this do?
What are these new properties used for?
Can we have it in another PR?
Does the new test do the right thing?
I don't think this should be here, since the function is called from the caller. I'm also trying to understand how this function is being used.
why use `xERROR` rather than `x`?
This line should be `specifying` I think. Also, the `error` should also be `public Duration {` I think.
I would suggest a `TODO(true).statusTo(true)` check.
import speech is deprecated
This is a breaking change for the change in `src/server/auth/auth-type` - I think it should be a separate pull request.
I think the wording is wrong, because the `Min` and `ReadLevel` are the same, so the `TaskID` is the same as the ` Params` (which I think should be the same as the `taskQueueName`).
This should be `ecs-nvidia`
I don't know if this will work, but this will be the same problem.
Should the name be consistent with the other instr_t *instr* method call be inside this method?
This is the only change that is not needed. The `! 0077` check should be removed.
Is this the same as what we do with other stream?
Can you add a `!IsEffectInSpell(spell_id, SE_InvisVsAnimals)` check before adding the check?
Would you mind adding some of these in a follow up PR?
Oh, I'm a bit confused. Why `FileSystemTarget` here, and not just `import`?
should be `thread_id_t != null && !int32_t`
I'm not sure if this will work properly?
Another way for letting this be is is to use the constants in the `Dagster_home_path` helper
Please remove this.
@normanmaurer This is the way you did it the way, I don't like the iterator.
This is a no-op because the `@Then` has a default value, I don't think there should be anything to be done.
Maybe `reuseKey` or `reuseKey` for consistency? Also I think `Key` would be more consistent with the `TODO` (e.g. `ecdsa.PrivateKey`)
This should be a PackageEntity and a class method.
I think this can just be `prefix`
This function will only be called once after the `Stat` is set.
I think we can just remove this one since it doesn't use anything anymore.
Not sure if you want this to be here, but if this is a correct change then please make sure it works with `size_t`
Rails/FindEach: Use if instead of unless.
This should be a boolean
Do we have to use `fs.Isn't` or `30.exit(1)` here, or is it a `fs.info`?
Do we want this to be called with an underscore? Or is it called somewhere else?
I'm not sure if we should do this at a higher level, since this isn't the most common place to change, it's a separate change. I'm not sure if I'm missing something, but I'd like to see a separate test for the `Ordering::Random` test to see if it's needed to be there.
This method could be called in a helper function, since it's in the same file.
This is a little unrelated. Should this be done in `tstsSet`?
This needs an error, too.
Shouldn't the maxResults be `group_key?`?
Is it needed?
What if `pytest.importors` fails?
So now we have a `urlencoded` field in the `header.rb` file that will allow us to override this?
I'm not sure this is a good idea. The flag is always available when not set. We're not setting this to `~/.pantsd` on the `~/.pantsd` flag.
This should be changed to `testTransferPb`, not the value of `testTransfer.Proto()`
Can we remove the public method?
This is an actual bug as it was before. You can't log the error message.
Why is this required in this PR? I wouldn't expect any other imported parameters to be used in this test?
We should return the error instead of passing it in as a constant.
The `Register._UNSET_NAMESPACE` suffix will be `True` for the namespace.
This should be `return ("Error iterating over item with "+)`
This is the wrong place for this, I think. `minify` will be the default value, so this should be `minify`.
provider is already on the first line.
Why did this change?
Important change from package to package?
This file has the same name as the other one, it is not. It is only used once, so we need to have it in the implementation.
Is this a BC break?
Is this change necessary? If not, why wouldn't we use the default value?
Worth noting that `0` is a very generic name, `0` would make it more clear that `getAuthenticationPublicKeyFile()` is not called.
Can we have a `Notes` for this?
nit: the cast of `to` is unnecessary, since `equals` returns an integer.
What does this namespace do? I don't think it should be a namespace, but I guess we should be able to get rid of it
I'd rather see it on the other branch as it is (or at least in `pkg/config`.) as we can't really do the right thing, so it's not really hardcoded to the right error.
I don't think this is the right place for this. The `linter` will only be set when `self._cache.py` is called when `linter_cache.consent_files`. The correct solution is to use the `cache.consent_files = 'toto'`.
This constructor should be updated to reflect the change you made in the PR description.
"If the provided key is none" -> "If the key is none"
Is there a reason for this?
can you explain why this is needed? The `entry` does not appear to be the same as `BYTES` (or the `BYTES`)?
Can you change the log from `init()` to `mainec()` here?
should we remove this?
This will break for the `.724` (which is what the number of `1.25rem` checks) as the default is `1.624` (which is `2.624`), so it should be `1.624` instead of `1.25rem` (which means we can use `3` with the value `1.25rem` in a few other places).
Is `pytest.py` the only reason to have the `retrying` attribute at the top of the file?
nit: this should probably have `(elements)` be on its own line to avoid any confusion with the if and below
This should be removed as it is already a list of enabled
Is this the only place where the copyright paths are generated? If the copyrights are on the same level, the copyrights should be on the same level. If the copyrights are on the same level, it may be the same as the copyrights.
Why not `getBitMask` here?
I think it is better to use a `DbProvider.attemptAsReadOnly` method in the ReadOnlyTxProcessingEnv method
We should change the value of the `API` to match the existing value of the newModifications.
If we want to start using a single device, we can set the type via `blob.header`.
If `this` is unused, we can use `InitCodeTransformer` instead.
Why not `//` ?
It looks like the `demand` fixture is being created in this PR.
I'd rather return an error if the `summary` attribute is `true`, and if the attribute is `null`, it will be `summary` instead.
I wonder what's the point here? What is the difference between the two?
I think it makes sense to change the `reasonDomainVerified` to `const challenges`. It is a little confusing to have a single `const` param which is used in a single `Present` field.
this change should not be in master
You don't need this block. This is already a public constructor. You can just do a static constant.
i think this should default to false
This doesn't seem right. The `dataManifests` is a `null` attribute and the `hasManifests` is a `null` attribute. It should be a `null` parameter, and we should never have a dataManifests that is passed to the ManifestContent's `null`. The `dataManifests` is not a `null`.
I would use `cappedNumHits.create()` instead. We should also check `cappedNumHits` if `cappedNumHits` exists before calling ` GlobalHitsThresholdChecker`.
This should probably be called antrea.io
Should this be `ActivitySource`
It's a bit odd to call the gas price from the value.
This is a little confusing, as the `process` is already in `TestRunAbort`.
I'm not sure what the `Exception` is. The type of the message will be more useful to be compatible with an exception being reported as `Error occurred` or something. The message will be more useful in the message, which should be the message, not the type. This is the case here, and I'm not sure what the error message would be that we expect the message to be more useful when it's a message. I'd prefer the message to be more specific
We need to make sure the theme is set correctly in both ways.
this might be useful to be honest I don't know how it will be.
I don't understand the point of this. The `**netmask` should never be `****JobStatus`, so we should not change that. The `**netmask` is already the one we're using with the v.vmvm.network for the v.vm.s in the other, but the `****JobStatus` is the only way for the v.vm.max_s.
Please remove the `export`
The `invert` style looks weird here, maybe just ` && (default] > 'upper' && C++ > 'lower' && C++ > 'upper' && C++ > 'lower'`
This file can be removed as well
Since this is a class property, I think it's better to move all these to the top of the class, and just have the class `hyperledger.besu.crypto` prefix as it was before.
Why is it worth adding an extra parameter parameter to the others?
Alibs like "A Main actor must be at the beginning of the line.
What does this _only_ mean? Does `zk-read` always exist?
don't you still need the old one?
please add the TODO, it can be merged merged into master
Can we move this to a separate `checkcheckStockNotEmpty()` function?
I think this one could be moved to the top of the function as it is the other way of saving this function.
This is a non-hashable code. If you want to be able to make this change the behavior of the code in `non_iterating_code` and `load_in({}` function to be able to override the same value, I would prefer if you could use `non_iterating_code_id` to avoid this change.
why did this test fail?
Why are we setting the error here? Shouldn't we be setting the error in the `type` method?
This needs to be moved down one line
This should be a separate PR
I'm not sure we want to include the `q` in this file.
This was the only place it was used.
This test was not working as I was trying to fix the test failure
I think it's fine to just have a version of this class in the package, and not a version of the package. That's a little more readable, since it's not a big package and will be easier to type.
I'd like to see a more specific `os.path.join()` here (and below) that would be good to use `os.path.join()` instead of the hardcoded `.strip()`
It's better to call it `disolactSegmHead` since it's part of the API.
can you please move this to the `driver` class as well?
I wonder if it's more appropriate to catch here, since it's a `TypeTypeFromTree` and a `TypeInfo`?
this method is not really required as `getImageBaseNode()` can be accessed from multiple threads (which is why we need to catch the exception from the method)
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
Line is too long. [84/80]
Does the `isEmpty` always return true?
Rails/DynamicFindBy: Use find_by instead of dynamic find_by_blank.
Is this needed?
This should be removed.
I'm not sure if there is a need to add `value` or `error` to the `or value` parameter. Maybe we should just add the `error` attribute to the docstring and add the "default value" parameter in the docstring?
Is it possible for these to be static?
Instead of doing this, can we use something like `ssm_environment_variables`? That will make it clearer what the field is expecting to be used as part of the variables.
I don't think this will work with github.com.protobuf, should be fine.
I think this should be done in dialogUtils.java:1: If the dialog is not present it could be created as a component. I would suggest to create a new instance that can be used in dialogUtils.java
I don't think we should be using the `pytest` package for the test. The `scikit-learn` package is just a single library that we use for the new `pytest` package. I'm not sure how we can test this.
Is this needed?
@Scottmitch why did you decide to remove this? I think we should keep this and keep the check for `test_completion_item_focus` below and use it in the `prev`. It's not necessary to make sure the check for `next` and `pants.util.plot` are not working properly.
I would go with the `googlesitekitUserData?` as well, but the `service_googlesitekitUserData?` needs to be set on the `service_googlesitekitUserData?` below, but it's only for the connection.
This is not a big deal, but I think it's better to just use `log_capacity` rather than a `dict`.
nit: I think this is a bit too much, maybe ` Flags defined in those class must be used with caution, and strictly reserved to experimental`.
Nit: We should use `path.join` instead of `.sum`
I think we should be using something like `Imported key for account %s: \"%s\""`. Also I think the key is more of a language for the account name. It would be more efficient to use `Imported key for account %s / \"%s\""` here.
Maybe this should be `\r\n`, too.
This was a bug in the old test that was not being used.
Layout/MultilineMethodCallIndentation: Align .welcome_notification with .deliver on line 112.
Why the change from `one_or_none` to `Invalid`?
I'm not sure why we needed to remoteService as per first test, but now it is now a simple remote type?
I'm pretty sure this is the correct place to put this in the controller, but I can't find it in the controller.
I'm not sure why we wouldn't want to get this in here?
`/* eslint-disable jsdoc/description-complete-sentence */` => `/* eslint-disable jsdoc/description-complete-sentence/`
We need to check `//.NextWithContext` before returning, right?
I'm not sure if we should use the rest of the server here. The code below should only handle the rest of the server but the rest of the server will be a little more explicit. What do you think about making the rest of the server a helper method, and instead set it to nil directly? The rest of the server is not the same. We should be able to use the same name in the service, as we have a way to handle the rest of the server.
can we use session.sessionConfig instead?
I think we need a test case for this. Otherwise we could use a more descriptive error.
I think that the `concurrency` package should be handled in the `add_acc` function
Do we need any changes in here and below to avoid potential conflicts?
This will cause a double-negatives to be added to the recipe (and not the recipe), but this is going to be true for the `recipe_id` case. Is that intentional?
This line is not aligned with line 770, please remove.
I don't know how this method is called, so it seems like this method is only called once, and it doesn't need to be checked every time. Maybe it would be better to just remove the try/catch block?
should we also check that the controller has been created and not passed in this method?
I would use `CacheChange_t`, but it is not a good idea. It is better to have the code be a function of `with_Cache(change)` and then use that as an argument. The code above uses `CacheChange_t`, which is not a function that is used to determine whether it is a function call.
This file does not have the same stream in the library. It does not have the same behavior as the other file.
I believe that these are necessary
Why is this necessary? The other changes seem related to this PR.
This is a change in behavior.
maybe just put all the `referral_code` in the config file, since that is the only place we have to go about this?
do we really need the `DefaultHttpContext`? Why is there no way to specify the name?
I would like to keep this assert as it is a bit misleading. But I'm fine with it as is.
I would not change the name of the variable, it is not really necessary to change anything. In any case, I think it would be more obvious and consistent to call it `MessageDefinition.decorating` (it's a `List[Message]` as in the other cases), but that's not a blocker for this PR.
This is the only place where we can use album_msid. It is the same as album_msid.
Shouldn't this be `return NamespaceType == -1`?
I think it is better to use a different name than vNode._isHiddenWithCSS.
Why is this removed?
I think this is a bug, right?
I think this is a very good change. I am just a little confused, since it is a single block, but we don't need the second, and we are not going to be doing anything else.
This is a little confusing since we have an `character` attribute in `product` already.
this is the only part where the API is used is. If the API is used, it should be changed to `Config::`
Why is this needed?
why is this required?
I think the only reason we're removing this is to avoid adding the `if err` check in `service_WINDOWS`
This change is unrelated.
I think you should be able to use this new wrapper here instead, but the existing one uses it
I think it might be clearer to move this logic out there and have `getDictionary()` method that returns `ConcurrentDictionary<string, string>` and `parentDictionary<string, string>`. I think that you could also just use `string.IsNullOrEmpty()` to avoid the NPE.
I think `assert` is not needed here, `assert == ""` and `assert == ""` are equivalent.
If we're changing this to a value, then we don't have to change this one.
I wonder if it would make more sense to return `Endpoint[0.0-9.dev.Endpoint]:` instead? Or is it possible to just return `h.config.Endpoint` when `h.config.Endpoint != nil`?
Can we make these `createElement` changes to test the output instead?
This seems like a function that needs to be called on Linux. Can we remove this?
Why not using ExpectedCondition.Expected ConditionText instead?
Can you add a note to the existing DB that these values are set correctly? Like "shorting" and "device ID".
This was a change that fixes a bug, right?
I'm not sure this will work. You're using a string here, which is why this was added.
I'm not sure how this is used for the time being, it seems to be used. Is this a BC break ?
Can this have a default value?
`assert` is not enough, you should use `assert` instead.
why remove this?
is this a debugging leftover?
Aren't we missing an explicit `progress`?
nit: remove empty line
We should make sure the last field is not available in the `waves` package.
I think this can be removed as it's not related to this PR
It's not immediately clear why `FlinkTypeVisitor` isn't public
why is this changing?
Is that needed?
@dvoytenko I'm not sure this is the right way to go to `FirstN`, but if I'm not mistaken it will be the same as the node?
can we have some utility method for this?
I think it might be a good idea to add a `padding: 0` here. It will be clear if the value was changed.
I wonder if it's more accurate to use the `IEnumerable` helper in `PrometheusExporterMiddlewareTests` as it is the other way around.
Should we make this `PALETTE` instead, so that we don't have to update the other time we reach this point?
@tgamblin Do we have a problem in which `brainz.s3` imports `import sys`? I'm not sure we should be using it at all for the time.
Line is too long. [86/80]
AccountState is already aBody of account... what does it do? Why can't you use it from the `AccountState`?
You can use `find_approval_notice? approval` here
I don't think it's worth it to make it so much clear. For example, why not just "JSON RPC tracers' timeout value" or just "tracer"?
I don't think we need to change this field. We should only support URI icon when needed.
I would suggest adding something like: `false` and `true`.
can you explain why this change is needed?
nit: could you change this to `opt.HttpListenerPrefixes = new string[] { $"http://... }`
Why did you remove this?
Should we add these to the top level classes?
I think you should use the `ipos.ipos.ipos.client.MiBSectorSize` here.
I think these changes are unrelated to the PR.
How about using `conda.operation.api.api.api.Public.Dao` to avoid this warning?
I don't think we want the field to be the type of the `record` here, right? (same below)
Why did you change this? It seems like it's a boolean, and not a boolean, so it should be removed.
I'm not sure about these new constants.
Why `-c`? I think this is fine for now.
Why do we run this?
I think we should just add a `keys`.
The naming here is a bit odd. If the new naming is the new one, the new one is not the new one. What's the difference?
This line should be removed. It will do the trick when the action is not set. You should use `jetpack_add_controller_to_hfg_rows`
Sorry for the nit pick, but I'm not sure why we wouldn't even use "egotiation" in the code here?
Shouldn't it be `_find_elements` instead of `_elements_located`?
this was the only import that was removed. I think we can remove it and just import `gocloud.dev/docstore`
`return undefined;` is redundant. `null` is returning false.
I'd like to see a more verbose way to do it. I would also like to have a `in_memory` flag that does the same thing.
Please add the `TODO` and `TODO` to make sure it's not used
if the state is non-null, the passed in should be the same as above, i think this is fine.
You need to add this to the `else` block as well.
I'm not sure if the description is needed. It should not be `Symbol`
This test is not testing the same as the mining service
progress not supported anymore?
Isn't this the only place that calls ` Flag`? It is used in both places in the code that is used by the `tls_metadata.go` and is used in both places, so we don't need this here as well.
I think you should mention that these values are not part of the entire entire module.
It would be better to replace the `pathlib` and `pathlib` with `attrname` and ` keyword` as the input name.
Can you move the import of `recovery` to the wrong location?
Why did you make a `chan interface` here? It's a `doneChan` which is a `volatile` which is an `doneChan`.
Why is this change necessary?
Is it worth keeping the `tx` as part of this PR as a link? I would have made it obvious that this is the `tx` component. It doesn't matter as long as we do it for now.
Isn't there a better way to avoid the need for this?
This should be `blobExists = ...`
This change is incorrect, the code is not working correctly
I'd prefer to see this `to_not_i` under a `SetInMemoryValue` or `some_strdup` as it is a bit confusing.
You can do the same in all cases where you want to do a `let modify = false;`
the only reason I'm not convinced that the concept of this are not "Artifact" in the context here is to be sure that the concept of the full list is not the CAST.
this file needs to be removed from the `setup.py` file
why is this needed?
No need for the `=`
Same here, we can just use `!ptr`
I would have passed `assembly.AssemblyFilename` to the caller.
You can use `mset.mirror.Unlock()` if you want `mset.mirror == nil` to check.
I'm not sure this is needed. I don't see the point of the `n` and the `clear` function.
Can remove this line.
@events is this related with this PR?
Why the perf difference between `__version__` and `version`?
I wonder if it would make more sense to check for len(cnb) > 0?
I think we should use `allow_interface` here.
This go in a couple other places as well: 1. `k.manage()` is called everywhere, in the other cases, the go in a `manage` is called, so we can remove it entirely.
This should be `||`
This line is not necessary, please remove it
I think we should just make this `str` and `str` in the code duplication.
This is not the only place where `conda/base2` is used. I think it's worth adding a `conda/base2` that uses `ksql` as well.
I'm not sure that the `3` import is really the right way to do that. Do you have any idea what is happening?
This is a bit of nit: I'd prefer a loop over auto and auto here, if it is null, it would be better to have `if (stopped)` at the end instead.
I think it would be better just to pass in the future_addEdges() and pass in the future_chainAddEdges() directly.
I think it's best to use the `prometheus` name here.
should we rename this to `ssm-parameter-store` or something?
OtlpMetricsExporter is not defined in the OtlpMetricsExporter class. Can we add a helper function that sets the options?
This should be `default:` since there's no reason why it's removed.
The `pe_defaults` is used in an initializer and can be removed. It's now just removed and removed.
Please do not change the existing `dispatcher.beforeClickOn` calls to `dispatcher.afterClickOn`. You should just call `beforeClickOn` directly.
Is it possible to use an `::` with a `@` ? We don't care about the `if` statement.
This interface has been deprecated and can be deleted, but it seems like a breaking change.
Why are we calling this here, and in the other places we have a `datatype` interface which we have in this `multi` interface? Shouldn't we call it just `datatype`?
Why are we adding this to the `ForceCleanupOnError`?
This is a very unusual change.
@chchance -> optionaleech, please remove the "manaleech" part
I'd rather we don't do that. We should use allowedOrigins, no need to add it.
Please remove these blank lines.
Do you mind adding new data to a constant somewhere, so that we can use `ZipkinActivityConversionExtensions` here?
@deads2k any idea why this would not work? I'd expect `errors.getResultType()` to return an `nil` value.
why did this change?
I would use `mail_to` to get this email as it's used only in a couple times in the codebase.
What is the reason why we don't use `null` as the default?
can safely be reset?
I think you're missing a "asm/factory", here and in the other tests.
Should be `null`?
Should be `('<Escape>', False),`
Can we make the constructor static?
This is also wrong. The function is not called with an integer value, it is not checked with a integer value, but if a number is not found it will be better to do a boolean check.
I don't think we need to do anything with the `getClass()`, since it isn't used in any of the code.
Is it possible to use the same string as the last argument?
you should use the `port ()` constant here, as it is a `port` property.
We should also support both the `null` and the `null`.
This is the only place where the `restore` call was used.
How about just using `--false` directly, to avoid duplicating code and adding an assert?
I'm not sure this is needed
This is wrong. This should be index, otherwise it will not generate an error.
Please add a `throw new ...` check.
I think we need to keep the cast cast in `inputs`. It's possible we can cast to inputs, in the future we want to cast in `convert_tensor_type` to make it more clear what it's doing here.
This will be a temporary temporary config for the `object.IsNullOrEmpty()` check.
I don't think we want this to be the default version. I think it's ok.
It is still useful to add `Enum<T>`. The purpose of this change is to not allow for any `Enum<T>` elements.
This is also debug mode?
I think this should be a `public static interface ParamView {}`.
We should keep this as "onevent" for clarity.
I'm pretty sure this will break the user's master. The new value will be the same as the current one and the second set of `p.pingConfig.Interval` will be the same in the case of `p.SerializableConfig.Timeout`, which is the only function that is set to 1 (i.e. if the value changes to 1), then we can remove the old `global.NewConn` function.
I don't think you need this.
If I am not wrong, I think the non-pending messages don't have a `pending.map`, so it should be the case that we want to be consistent with the other non-pending messages.
This looks like something that should be finalized.
This is the wrong way around...
This should have a default value for 'mobile' to be surely fine.
This is an API change, I think.
I guess this is a bug? I think I've never seen this before.
Since this class already has an `using System` attribute, would it make sense to move it up there? It's just to be safe and I don't see any benefits by using `using System` in this class.
As far as I understand the `poS` property is not needed anymore.
Line is too long. [89/80]
Why are these lines removed?
This file has been removed.
I think this `<%= f.label :active, Y>` is a bit ambiguous. `<%= f.label :active, Y>.<%= f.label :active, Y>` will work. `<%= f.label :active, Y>` will be `<%= f.label :active, Y>>`
I am not sure we want to reload here, as I can see we're using reload from here, but not here?
Why do this instead of just calling the function?
Could we just use `fname = os.path.join(__file__)` instead?
Extra empty line detected at method body end.
Why is this being removed?
I don't like having a single `zero_count` parameter, but it's really hard to understand the purpose. Maybe it should be a single `count` parameter, or maybe just `zero` and `zero_count`?
The logic seems to be off here, but I think the caller can do this without having to add a top level function.
What does the logic do here? I'd expect a str here would be enough.
I'd suggest to move this to `pkg/archer`, and add a mock to `pkg/cli-v2`.
This one is a leftover. Do we need to keep track of it in one place?
I don't think this is necessary. The data is already in table.
I'm wondering what happens when `queryOptions.perDocumentLimit` is non-null? If that would cause the exception to be thrown, then we should have the check before `queryOptions.limit == null`.
I think we should keep `Params` for this field and `Params` for consistency with other methods.
This file should be reverted.
I think this was more like `with stage` rather than the `with stage`
Shouldn't we do this before, say, if the execution is a JSON string and the JSON string has no execution execution?
This should be `iconImageSource` instead of `ico` right?
this looks like a good candidate for a bunch of exception handling in the exception class
I don't think that `names` is actually necessary. It's not a valid list, it's a list, but it should be an array.
`write.metadata.metrics.default`? I think `AnyCS_MODE_COLUMN_CONF_PREFIX` should be in default value.
I think we can just use the constant here?
Why do these need to be?
Why do we need this if check?
Can we keep these tests now?
I would just say 'TypeError' here, no?
This looks like it will actually be needed.
Do we want to test this?
This seems like a bug fix?
I'm not sure about this one... But if we want to have a more descriptive name, then we could use something like `&&`
The last thing here is that the filecoin-project/go-filecoin/types can be used by other packages with files that are not available by files. The `go-filecoin/files` files should not be available in the code base.
This file should be moved to the `else` section above.
You don't need to import `org.apache.commons.lang3` here. You can import the classes directly.
This will need to be done in `OnStart` too.
I would just call it `cvrUpdateWrapInfo`
Is DefaultLogMessageRateLimit used anywhere?
Why not move this assertion up to the caller and use `assert.Equal()` to avoid the need to create a `SetTime.PullPullImage(store.T)`.
to me, I think we should be able to introduce a new option here instead of suche.
Was the old behavior intentional?
if block ends with a return statement, so drop this else and outdent its block
This is a bit of an unrelated change. I think we can just do `return int(num.Int64())` in `spring.marketContract` and then use that from the `spring.marketContract`.
spec/fixtures shouldn't be needed
I don't think you want to do this... I'll put it in a relative imports as it's the most nice thing to do.
I don't think this line has any effect. It's not related to `self._current_widget()`
this needs to be `aws.WorkloadIdentityStatus`?
You should check for v1 and v2 before writing it.
This line should be moved to the next line?
We don't use `filters` here, it is in the `filter` file.
This is only used in the `root_config` module, which was probably not the case anymore (the test was failing because of `root_config` is now in `lib/python/test`).
This should be `child.reverse(child)` right after `(index)` and below to ensure that the concat loop is trimmed.
I am not sure if we should add this to our `goerli` interface. If we want to add a factory that has this check in the `Address()` function, we can just remove the check in `goerli`
You can use `DeploymentNotification.Mentions`
This test should not use the `after_zero_value_transfer` method, so this test should not be changed
Should we use `id` here too?
this is a wrong error. The unit test was passing with 0.2424
What if a publisher doesn't have `interpreters`? It seems that if we're not going to do that, we'd only need a `Pythonpreters` check if `executable` is a `interpreters`?
This is the assert above, right?
Should be able to delete the `isset` part. I don't see any changes necessary in this file, just a style thing.
I don't think this is correct, you should only call `get_meta` if it's not `meta`
I'm not sure if this is the right move to the `SchemaInfer` scope.
Can we remove this property and use `upload(state_NAME ) = properties` instead?
Since it's not a valid target, it might be good to make the `@unresolved_targets` be `Optional[str]`
Why are we changing this?
I think this should be a `isinstance` instead of a `prefer_values` method. The caller can do it by adding another function to the CMake. If we want to keep it, it will also return the type, but we can't do it in a follow-up. If it doesn't exist, we will also need to return `None` here.
The name "passesRestrictions" sounds misleading, I'd rather have a name like "passes" but I'm also not sure how to deal with the name.
I think you forgot to keep the old interface as well.
I am not sure what this is about. Can you explain? I'm not sure what the original `render` call was.
These are not related, but I don't think we need to do that.
Why this one is not used in this class anymore?
is this file needed?
This looks like something that could be reverted to a separate PR
@wangdi1 this is the bug, right? I'm not sure if the `auto targetFile` variable is used anywhere? Is `fs::FileUtils` a `str`? If so, I wouldn't expect this to be the correct way to handle the case when it's actually an integer.
> fromSnapshotId is an ancestor of toSnapshotId [](start = 16, length = 15) Do we want to expose this to `snapshotId` in the signature of `fromSnapshotId` and then just call `snapshotId` and `fromSnapshotId` directly?
This is a bit unrelated, but it looks like you're using `isset($functionConfig['helpText'], $prefix.php])` instead of adding `isset` everywhere since it's used in other places.
Is the `output_stream` flag still needed, or does it just need a `close` call?
This line is too long
I would prefer if these were a leftover from my earlier pull request.
What's the purpose of this change?
I don't think this needs to be a class. It can be an issue, and you can just remove it if you want.
Can we also change this file to be present in the file?
`memQuotaRatio` is not used, so please remove it.
Why are we removing this?
The `Need` field is already declared as constants for structural types, so I don't think it makes sense.
I think we should have a better name for this type than `SerialNumber`, as it will be the type.
You should use the newly created error code.
This should be `Platform string `yaml` or `platform`.
I think we need to remove the api/external path, as that will cause a difference in the future if someone wants to do that.
How about `ac.SigningKeys`?
Why not sleep?
I think that you can just remove this line and the rest of the code
This is a bit of an unexported situation. The only difference is that we are using `OrderedDict.compat` here and `.compat` is the `.compat` (to make it available in this PR, but it seems that we don't have a lot of work), and we don't need a `Filedict` dependency on the `.compat` object. I think we're doing it here as we are in a separate PR, which I'm not sure what's going on here.
I am wondering how we could use this to be able to use `JSON.JSON` directly in the future.
What does this mean for a file? Is there an existing file that uses this new file?
What does this do? I don't see a new field
This change was necessary because I had no idea how to test it.
This assertion doesn't seem correct.
This was the actual fix for #1984
I don't think there is anything in this file. I would prefer to have a `method` field to have it as a string. I would prefer a `method` field in the `method` and not `method`.
This should be moved to Path.json
The use statement is not needed anymore, it should be removed.
"debug" sounds a bit weird. Can we change it for now and we can add more information about it?
I think the changes in this test should be reverted.
This one is not used anymore. You can just call Commit and restore after it is returned
Can this be const?
Can we put it in `setUp`?
Can we add a notification to send the key?
Why is this change necessary?
This should be in an else clause?
This is a bit of a weird change. `_register` should only contain the editorClass if the editor is added. The function can also contain a `new` (the function can only contain the editorClass if the editor is added)
Why was this package removed? I think it would be more readable.
`*` -> `t`
I am not sure why you removed this, the default value is false by default.
I'm a little confused, this interface is not being used anywhere? What's the idea?
I don't understand why this isn't needed.
Why are you adding the default method?
I don't think this `# `attr_value['string'] is not None` is required. I would expect it to work as `attr_value['string'] is None` but it's a string that has a string. I would suggest to split this into two methods: `# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value`
why add this?
**suggestion (non-blocking):** Should we add a new column like `must_be_admin`? The other one is fine, but I don't feel strongly either way.
Is this change required?
This is an interesting approach. The same applies to the other `Symbol` files.
This will not work with other threads (even if `if (lock.unlock)`) - we can't remove all of these if the `else` block will throw an NRE
why is this `[32]`?
I'm not sure if this change is needed. This class will have the same result.
I don't think this should be handled here. `this.get('store')` will return `null` if the `roles` is not defined, otherwise we should not use the `roles` in the `roles` list. The `roles` field will return `null` if the value is an `null` value. I think we should just create the `roles` value in the `query` list instead, and remove the `roles` in the `get` call.
I think this `role` should always be 'header' so we should not land anything here. We should either ignore it or ignore the `role` in the land.
this change will cause a performance regression since you're not using the null value anymore
What was the motivation for this change?
We usually use `import` in front of `string`, but this one is fine too.
The default message needs to be `Token != nil`, so we'll need to add the `token` message.
Redundant self detected.
This is a little bit of a hack, but I'm wondering if we should add a `iceberg` param to `plural_READER_FETCH_RECORD_BATCH_SIZE` in this PR to ensure we have the config in a future PR.
Nit: please don't add trailing comma.
Maybe we want to change `AWS` to `Factor(IAM) server` as well?
Can we use the `di.Error` here instead?
This seems not used anywhere? compileOptions is not found in compile(), not in compile(), and compileOptions is not removed.
This is not a required change since there is no `mdmLoginServers` key in the array, and it will never be null. It seems to me that we should not catch this exception.
I don't think this test is needed anymore?
We could use `debug` here instead of `info` since the variable name is already `null`.
You could also just change the line below to `verbose`
Maybe we could move this to `AWS_BOUND_SA_SIGNING_KEY`?
These two includes are not needed, they will already have `blas.h` in the `math.h` folder.
Why do we need that? I don't know if we should have nan_key.
Is it possible to ignore the `ignoreUndefined` type?
You can just catch anything, the logout does not have anything
I think this will be better named as `close` or `closeclose`?
why was this removed?
Why not use `setItemVisibility(menu, ...)`?
I think you can delete this whole file. The only one that is needed by the `Posttures` has the name.
I think you can remove `docstore:"i"` and `docstore:"b"` from `database_pack.go` because it's a tag tag.
I'm not sure if this will work, but I think it would be more clear if you pass the `Report` as `__time__` instead of `__time__` (or something similar) - otherwise we'd have to check if it's an error.
I don't think we should use it here since this will be the time being reported in the dev and will be hard to debug.
I think that it would be cleaner if we could use `grc.mfout.printf("%s", q = "<account_out/>\n";` to be safe.
I think we want this to be a pretty strict mode, maybe even better it would be a good place for this?
I think this is a leftover from an API change...
Please revert this change.
do we not want to have this already?
This test is a bit of overkill. It should probably be `t.Fatalf('expected error message to be unchanged")`
This is not true. The H2O_USE_LIBUV does not set the env up to 0. The H2O_USE_LIBUV does not set the value after the H3O_USE_LIBUV does.
I'd suggest moving it to a separate if statement to avoid code duplication and just do the `if (!Object.is(hookState._value[0])`, then you don't need the `if (!Object.is(hookState._value[0])`.
This is a bit of a hack, but I think it's better to move to a separate pull request (and then check if it's a separate pull request).
This is not a good idea.
I'd like to avoid using the variable here, as it is a bit more readable. I'm not a huge fan of adding a `var ExpectedBalances` variable.
I don't understand this change - this code is not in the previous commit. I'd suggest a single commit to not use an "a class class..." in the next commit.
Why not just set `IssuerAccount` directly?
It's good to check this error.
Doesn't this need a unit test?
Please revert this change.
Does this work when using the current value, and when it's not set to whatever the default value is?
This is not really a "HttpServerErrorStatuses" name. It is a bit of a misleading name.
Why are we deprecating the default setting of `true` to zero? I don't see any reason why this is needed, since `pex_server` is not set anywhere else in case the user has set `1` or not, so it's probably best to just check if the value is `true`.
should be `null`.
I am a bit confused by what's going on here. If an attribute is passed as a simple, then it will be used in an async method, which is called from an async method.
I think the default_attributes is probably better here, since we're not using the default behavior for default_attributes.
What is this? Do we have a test?
Line is too long. [84/80]
This is not a valid headers, so it should be set in `__init__()`
nit: this test should be updated to test `server.unschema_VALUE`?
This is the same version as version version. It should be version != NULL
`return aria == 'aria-hidden';` and `return false;` should be the same here. It's the case that `hasAttribute` returns false here.
I don't like how we're calling this `click_button_text` - if we want to be more specific - we should be able to do `click_button 'save'` here and checking for the saved search.
I think we can remove this field and use `_processDataPoisoned` in `_currentProcess` directly.
Is this needed?
`assets.spec.satisfiesies` to `local_PARSE_COOLDOWNREDUCTION`
This seems a little odd. We have some more issues with `status` and `db` but I don't think we should add the `db` option.
What is the goal here? I don't see where it would be used, because if we are not using it, why is the $mediaId a new class?
I think there's a reason to return `null` instead of `null` here.
Is this used anywhere?
This may be a good idea to make these constants into a constant. Not sure how this would work...
Can we rename this to `UpdateProjectSingleSignOnRequest`?
Please add a default value here, this will be less error-prone.
Is it still useful to add the repository?
This change will cause flake8 to fail.
wow, what if we made this a powershell? what will this be doing?
I think we should still use `toLowerCase()` here.
I don't think it's necessary to checkKeyError anymore.
The `onBehalfOf` is a pretty expensive call. I would expect that it can be a `Nonce` method.
This is still an oversight when it's the secondary right?
Should we be checking the lock.lock.RLock() here as well?
Why not just use `.de` here, and then do it in the `getDomains()` method?
@dvoytenko I've seen this being called in a non-index index, right?
we can just remove this one.
What does this do when I run a StreamConfig? Should we check for that?
This will break some existing test. I would suggest to rename it to `gobblin` and `gobblin` to be more specific.
I'd rather remove the package private. It's only being used by the functions in the `getCurrentPageResults`
@mfojtik this is the `compression` argument, right?
I don't see a new issue with this, it's not related to your changes
Is this still necessary? If we don't have any of the other tests, we might have to keep these tests at some point in the future. If this is not a problem then we may still have to research. If we do that we need to ensure we don't have a problem, it would not make sense to move those tests into the `Backdrop` method
what is this `Warning` field doing? is it being used somewhere?
Is this related to this patch?
This is a small small change to the current behaviour. You can do something like `assert('/',) == 1) == 3` or `assert('/',) != 3` (which is the reason to use `assert('/') == 2`)
@smarterclayton can you add the copyright here? I guess it's not needed anymore?
I'm not sure what the difference would be here.
I would have put this into the parent class, but I think this should be `from x import 0`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
So if the response is not a ApplicationError, this will fail for some other response that will not be changed?
Why is this needed? It seems like we're only adding new keys.
This seems unrelated to the change in the PR?
I don't think this is right. We don't have the directories in the API, it seems like there's a bug.
This also looks good, but I'm not sure we should add `Retry` as a parameter to `EndpointResolver endpoints.Resolver`, so I'd like to see if we can remove it from `EndpointResolver endpoints.Resolver`, but this should be fine.
Does it make sense to use the service name in `Run`?
This needs to move.
i think we can remove `OracleAPI` from the name, it will not be used in any test
This is not the same as we did for `black`, but not a user-facing endpoint.
why did you change this?
this is the same as line 556, should it really be moved up to the beginning?
nit: `\s`
This is wrong, I'd just put it in `RAM.py`.
Use && instead of and.
Does this make sense? I don't think there are any more than one key type.
Is there any way we can keep these configs under `ConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsoleConsolePublicPublicPublicPublicPublicPublicPublicPublicPublicPublicPublicPublicPublicPublic
I'm not sure why you changed this. I don't understand how the code in `getScroll` is called.
`getKey()` should already return `null` if it's null or false.
`AdoNetExcludedTypes` should be `null`.
This import is unused, can be removed.
If there are no config changes, can we remove this and add a TODO?
Isn't that going to be needed?
Is this needed in addition to the test, or should we check the actual values in the test?
I think we want to clean up cleanup from the `EnableCleanupReplicationTask` method in the cleanup method, to avoid having the logic in the `cleanupCleanupReplicationTask` method.
I'm wondering if this is still needed?
This is a bit weird, but the `tolerance` is not actually a single-character parameter, right?
Line is too long. [92/80]
then is not needed anymore?
`IsIntegrationEnabled` and `IntegrationName` are only defined on the `IntegrationName` constructor and doesn't seem to be needed anymore
I think it makes sense to have a `Long` field in this class instead of making this a `String`.
nit: I think this needs to be public, since it's a `Transport` class.
`var _ChaosImpl = (*Delegate)(nil)`
I think the "default" name is wrong here. It's not really the best place for the method to do.
this is not tested
Is this necessary, or just for testing?
nit-ish, why not use the name of `telemetryConfig.FilePath` here? `telemetryConfig.FilePath` makes me think that it is more clear what's the intention.
Why did you remove this line?
I'd prefer we start using the same package as the subsub
This will not work as expected. I think we can drop the manifest.json part.
This is not needed anymore
I think this is the wrong place for this.
Could we use the function from `websocket_server`?
why delete? shouldn't the container already be managed by the delete?
This will cause `CMAKE_SOURCE_DIR` to be set by `CMAKE_SOURCE_DIR` in the test.
This seems to be a breaking change. It seems to me that `NewInt` is not always called. Is that correct?
I guess we should also mention this in the LoadImage API
This should be an option that sets `func (c *linuxContainer) error` to `""`, not `errNotEnabled`, right? (i.e. it's being used for `func (c *CheckpointOpts) error`)
If I'm reading this correctly, the old code was a mistake in the future. I think that we want to support the old old version.
I'm curious, is this a typo?
Doesn't this `!` mean that `default!` will never be null?
I think we should just make a method for each item in the dashboard to avoid the need for the dashboard. I'd like to avoid the change to the dashboard in the dashboard.
I'm a bit confused by the logic in `Long` is the default. Can we have a test with a simple flag for this case?
I think it is better to do this with `fluxForFn`.
This can just be `!==0` (and it's the default case)
`TextView` is deprecated, so you can use the `String` type instead of the type.
Why not just do `if (!openContainer)`
Hm... what are your thoughts on removing these?
`Reader` should be `Reader` (not `Reader`)
This should be `/* XXX` (or `#create_mangling`), otherwise this will break the code that uses the next argument in the `on_return_handle_call`.
this is a public function that does it. It does not seem to be used anymore.
This is probably fine, but it's not a good idea to explicitly say something like `WIP-fixture-allowing-js-fixture-js`
Can this be changed to just `chai`?
This should be `handleSingle`
Should we use `String` instead of `String` for consistency?
I think it would be clearer if we didn't add some `\n` here. Also, in theory I'd prefer to rename this to something like `_product_edia` or something like that.
@sjenning I think this is what we want. The `PodExist` method here is a bit of an overkill, but it should be a bit misleading, as the other `-`s are the main purpose. If we are using `PodExist`.
Why we remove this `except:`? Is it related to this change?
If you're not doing anything with the `return` statement, can you rename `q items.Nonce` to `q items.Nonce` and avoid the `return` statement?
n.getParent().getChild(nil) returns a string, we should use a string to avoid duplication
please use `[filter,null]` as we don't have any other type of string literals
This is a change in behavior here, but the code below does not use `log.info()` in the `logMsg()` call.
This needs some reviews.
I wonder if we need to add this to the package.json. I think we can move this const and use the constant in the constant.
Is this needed?
`System.Collections.Generic` is not needed anymore?
@mattpap this should actually be `TwitterController` since we are not going to want any special characters in the service.
I think you meant "has" here.
This is unused, right?
I think this should stay here, it's a part of the component. If it is not, it should stay here.
It's better to move the `AZURE_KEYVAULT_AUTH_VIA_CLI environment variable` to the `azurekeyvault` class, then we don't need to do `Config.az` in the `azurekeyvault` package.
Can we make this a const variable so we're not testing if it is needed?
I don't know the reason of this change. We should not be using the `_` here.
I think this is not right. It should always be the ID.
`urlencoded` is the same as `_url` in the list.
This needs to be moved to some common package.
Shouldn't we move this to `graph`?
this is wrong, it's only in the wrong package
This is the only place that needs to change. The EnableForward was not written before it was introduced.
Style/ClassVars: Replace class var @@ @@ @@ @@ with a class instance var.<br>Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This will not work, because if the `localConnection` is null, this will throw if `localConnection.type != Blockly.OUTPUT_VALUE`
This TODO doesn't have to be removed.
The name of this test case looks odd to me. Not sure why it is better to use `org.sonar.java.util.StringUtils.DEFAULT_to_test.cs`
This could just be `if (filename != nullptr && CheckCanLoadFromBin(filename) != "") {`.
What's the difference between `exec.ExitError` and `exec.ExitError`?
Could it not just be bool? It is already checked in `folly::Future<StatusOr<bool>> MetaClient::dropSpace(request);`
remove this line if not needed
I think this should be outside the `if cluster isPaused`, because we are already creating the `IsPaused` function.
Please remove all of them.
Why is it ok to use `this.instanceDir = instanceDir.toAbsolutePath()`?
I think it would be better to pass `localFieldPathType.schema` as an argument.
I don't think we need to concat the `adapter_name == "Mysql2"` here.
This was added in #2714 and should be removed.
The name feels a little bit unfortunate, it might be more consistent to have the name of the email and read it directly, e.g. `LEGes#draw`.
This is not the right function to RawDiff, because the user is still running on `GetRawDiff`.
I think this needs to be `#if NET461 || NET452`
Can we rename this const and just inline it?
I think it would be more idiomatic to use `cert.URIs`. Also if the user already has a `cert.URIs`, it would be good to keep the `cert.URIs`, but if they're not really part of this script, we would probably need to move it out of the `case` statement as well.
I would prefer to not have this as an explicit name. We have `File` in the name but not really a `File`. It makes it more explicit, so I would prefer to have it in a `io.prestosql.spi.util.util.util.Parameter`.
We can use `mhtml` here. It will be more readable as `download_path_suggestion` will be used for mhtml.
It is not a valid flag?
This is a bit confusing, since the logic is in the `else` block of code where it is being called in the `else` block of code, we don't have to do anything else if the `app.config.secret_key_base`, but I wonder if `CPlight.secret_key_base` should be `nil`?
Is this really needed? It seems unfortunate.
I think you should add `RetryableWriteError` to `addError` and `RetryableWrites` here. The reason is that we are not setting an error, but it should be handled as an error condition here. This is not a problem, but if it's a problem, we should probably just add a message message to the `supportsRetryableWrites` to `RetryableWriteError`.
I think this is still a good default. I think we should be using `None` here
I don't think we can change the description for the `go- how` to work.
What's this? I'm not sure that the backing node is a good idea.
This could be private
I think this should be just `input.GetDefaults(expr)`, since we only want to show the `--help` option to set the same default for `18.04`. I'm assuming the `GetDefaults` function is called when `len()` is called. If there is a default then we can use the `rank` flag in the `rank` function instead.
I wonder why you changed the other ones here and not the other ones? I think we want to make these new ones in a separate file (and then add a note that we'll have to make CV2 CV2 CV2 CV2 CV2 CV2 CV2 CV2 CV2 CV2 CV2 CV, etc).
Is this needed?
the `plicative_prefix` is already ` KV_completer`
I don't think we need a constant for this. The api is only used in a `BaseElement`.
I would prefer to not do this in the `definePropel` instead of using the `$manager` in the `time` method.
I'm not sure this is a good change. It's a little hard to see. Can it be a separate file or a separate issue? I would like to know if there were any other issues.
Maybe use a `# amounts` and use it here?
I think it would be better to remove the `recordLink` parameter and replace the $server object with a parameter `OAI` with `$server` and `??` as it is a `build()` method which does all of them all in `OAI`.
Use && instead of and.
I think you can just inline this?
@saghul is the viewBox supposed to be a string, or a string?
I don't see where this is used?
I'd rather have this use an enum, not the string.
This change should be reverted.
@adamjstewart do we also need a space after `in AWS`?
You can remove the `else if` as well
I wonder if we could move this to `lib/config.js` and make it `doc`? We could also just call `lib/config.js` to keep it more obvious that it's not a problem, but it's a good idea to avoid duplicating the code that's not related to your PR.
I think `poll()` should return `true` for `Split`. It's not an error and should be logged.
Shouldn't this be `manager_env_prefix` instead?
these changes are unrelated but are unrelated to this PR.
I think we don't need this import, just `utilwait "k8s.io/apimachinery/pkg/util/wait"` is fine
There is no need for the encode string. It can be removed.
Would it be possible to add the `isinstance` check in this method?
Shouldn't cfg.model.neck be `None` here?
Is this a BC break?
why is it set to `cxxflags`? it should not be defaulted
(style) line over 80 characters
why remove `accessKeyID`?
Should we use `0` here?
This URL is probably too close to myself
can we add port-list for these cases ?
this is not needed anymore?
I believe this assertion was not correct. The previous assertion was only added to `setUp()` before.
Can we do this in `version.go`?
This is a bit confusing, as we're already using the `hash` prefix in `setUp` cache folder? I would expect it to be called before the `getUp()`. If it's the case, we should use it to avoid calling this method.
I don't know if I can see this, but the old code was not working.
is this used anywhere?
This is not the correct way to do this, but it's not the same thing as the exception handler.
This will need some refactoring to avoid potential confusion.
I'm not really sure what the best way to do this here is, but it looks to me like it should be `aws_v1_Git_ID`. What is the purpose of this?
Is this needed, or can we just define the constant for the value of the constant?
I think we need to use `expire_time.application('track_metadata');` here and in `elif`, as the key's value is not `None`.
nit: can you make this a `createVNode` instead?
nit: the same here and in the other places in this file
I'm wondering if we can add a `TODO` here to prevent any confusion.
I'm curious why this is no longer necessary?
this is pretty hacky. We don't need to add a class, it just returns a string.
I don't see how this would be called. If you are using listener, it should be a `listener`.
why not just add this as an interface?
This is not a good name, but I think it might just be better for this to go in `run`
"Failed to commit state changes on height..."
These two lines can be removed.
This is a very large number of elements in the code, I'm not sure it makes anything here.
This is a bit weird, since we're not going to use the key name, because the key name isn't very descriptive. Perhaps we should just name the key `spring_foreign_key_id`?
I don't think the `authenticationPlugin` class is needed here. The `initializeMetrics` method is already called on the `authenticationPlugin` class (the default value of `getMetrics`) so it will always return null and we should remove it from `getMetrics`.
@jcotela is this going to be true even if Lua is in Lua? If we don't have Lua, why not just return TALKACTION_BREAK and then check Lua in Lua? If so we should check both (player->getAccountType() < it->second.getRequiredAccountType(), so it is clearer.
why do we need to check for `blockblock`?
I am not sure if this is correct. If I want to use it, it would be better to just use the log line, but the code will do the right thing. Maybe we can do this in a followup PR?
why the change here?
I think this is actually the intent of the issue you want, but I don't see any benefit from using it to the code base.
I wonder if we should use the existing `context` attribute in the context.
I think we can remove `to_print` from the length check here and only call `bytes` once.
This is the `toString()` function that uses `PropertyString()`. I don't think we should have a default here, since it's the actual user's url, which I don't have much benefit.
Style/MutableConstant: Freeze mutable objects assigned to constants.
This change is unrelated, but it looks like you are removing the old proto, and is not needed here anymore.
These changes were not part of your PR but it's just a minor thing to add.
I don't see the need for this, but why did you choose this change?
This is going to be a very good time to get a warning. This could be an event on the server, even when a function is called without a string.
I don't understand why we need to have `approving_official` on the DB. What do you think?
This will cause a NPE if the type is not `null`?
Why did you remove this?
I'm not sure why these are failing. It's necessary to make these changes.
should be `forum.forum.com`
This line and the next `NM` tag could be removed.
I think it's better to add a `member-subscription` command that checks for subscription and subscriptions.
Maybe add a `optional` after the `check_all_all`?
@scalablecory, what does this change do?
Shouldn't be done by default, it's not needed.
Should we add a check for both the cmd and the runner?
I would have expected this to be a `ManifestFileDF` method
I'm not sure if this will cause problems, but if the node is in the node we'll get a node in the config file, we will get an error if the node is not set.
this is the default value, not the var name.
Nit: This test should probably go in the `test_parse_cloudtrail_with_botocore` function, because it's not called in the `cloudtrail` module.
I don't think it is needed to put the name in there
Please don't add trailing whitespaces.
Is this needed?
nit: we usually prefer to use the `toBe(3)` and `toBe(0)`.
This can be removed, since the POKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK is used in KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK.
this is the fix. Why the change?
Why is this necessary?
Is it possible to remove the other `1` in the `WorkerThreads` block above? Or is it that the `Path` is removed from the `VersionThreads` block?
I think you can remove these unused imports
shouldn't this be `fieldId.source` ? It would be more consistent and easier to understand what type we're trying to use.
This change doesn't seem related to the PR description. It is only needed for `is_acked_by_all` to be called when the user changes the first time.
Should it be `URI`? The `String` isn't really public.
This is the reason why we are not using the "root" package.
@zcbenz do you think there's any need to do this for `all_defaults`? If `--all-defaults` is a list, then `--defaults` will always be `True` in `all_defaults`
I would suggest to move it to the `AccountData` package, to avoid introducing a specialization for `ndeltas` since it can just be a single `AccountData`. Then this can be `ndeltas` and we could then have the `ndeltas` as a `int` (or `ndeltas` and have the `method`) return the values of the function.
This is a breaking change as it's not a "xpath" thing but the "null" thing is more of a "xpath", so I'd rather not do it in a "python" or something.
I would expect this to return an error if we close the connection and then close the connection
This should be run only once.
Does this have to be `(Errno::ECONNREFUSED, Errno::ENOTCONN, SocketError)`?
This is wrong, `movie.quote` is the default
I'm not sure about this but it seems like `collectVertexProps` should be an `collect`.
Is this line needed?
`CheckpointParentDir` is the only instance that is use for it. It should be handled by `_getCheckpointParentDir`.
I would move this to `UIAInMSWordCheckBox`. The message is not clear to me.
I think you can get rid of the if check here as well
I'd rather not have `MatchString` be a constant. We could use a constant here, but that is what we do for other types of strings.
This is causing the MacOS build to fail. This needs to move to the top of the file.
I don't understand this change. Why do we need both configuration and normal types of `getBoolean`?
I'm wondering if we should just set this only if `PoolAddEventHandled` is set.
I think we can remove this bit. I'll open a follow-up PR to fix that.
Can we set these to 4?
Shouldn't this be "Import failure" ? I mean, if not "Failure Import operations" is a part of flow flow flow, then I think this will be "ImportOperations EventReason = "Conditional"
I think we also need to call this `rb_define_variable` to make sure it's not there.
This should be done with the others, otherwise we don't have to worry about logging it
I'd rather use a constant here.
This doesn't seem right. We have two scenarios in the same class and one `UpdateObject` is a different method.
Can you add a note about this change, it's not really related to your change.
Same here, why not simply use `*` and not `wh`?
This is a bug fix
Should this be debug instead?
The call to get to get this function will not parse when the string is `object`.
This change is unrelated to this patch, but it seems like a duplicate of `std::unique_lock` could just be replaced with a private one?
I think you should remove this newline here.
This should be `false` instead of `false`.
@smarterclayton do these tests still work?
Does `Datasets. Default` need to be consistent with `Dataset`?
Should this test be renamed to `TracerProvider`?
This is not really a good thing.. but it seems to me it should be `google.golang.org/grpc` instead of `grpc`
Maybe we should just make this `read_file`? We don't have the same code as in `read_read_file`
Can we use `defer` instead of `defer.` for the `select` case?
This is a stage-based error on `DefaultHash`, not `DefaultHash`. It's just that we do the same thing in `Hash`.
Why is this change required? It is a breaking change
can you move this to the end of the function so that it's not a general thing?
I don't understand why the `describe` call here, but it's still not that important.
WriteAsync is an exception. In case someone is trying to move this code to testLogger. In case someone is using a server that is not supported with a testLogger. This will make things easier if someone tries to testLogger but it's not going to work correctly. But I think it is ok.
@jcotela are you planning on removing this ?
Does this mean we don't have to worry about the v1 target?
This is a bit confusing to read, but we should probably move this into the `if`/`else if`/`else if`/`else if`/`else if`/`else if`/`else if`
This should probably return `snakebite.lower()` and not `sys.get('hadoop', "version", "cdh4)`, otherwise we'll have to get the `sys.get` from the config.
Metrics/LineLength: Line is too long. [155/120]
Please don't change these files.
Is this the only version of the package you need? The `glassfish` package is used to be consistent with other package variables.
This is a little confusing. If a `Faker` class is `nil` then it should be able to be passed in to the `Faker::Space` class rather than a `AbstractCache::Deprecate`, but I'm wondering if it is better to just do `AbstractCache::Deprecate`?
Why do we need this for the Java log files? Seems unrelated.
This will only work when the url is 'undefined'. The rest is not needed.
I think we should add `/all` to `/monikik-emerson`
I don't think you want to change the port here since this may be portable.
This can just be `enable_COUNT = SELECT_COUNT + FROM FROM (%s)`
@deads2k @jridgewell this is the bug, right?
This is a pretty hack, but I think it makes more sense to me.
This seems unrelated. The only change I have had with the `result` to return the value of the `result` variable. The `result` was not used in the `result` itself.
Since this is an existing ratio, it will be always 0.
What if Mask is IP?
This is a very minor thing but we should be more specific about the `substitute` naming
This is the only place where the selected element is selected. Do you want this case or can you just use `get_Key_Enter`?
this will not work, because it will only show the params from the current user. You will need to use the new one in the future. You will also need to use the new one as the new one will be added in the future.
nit: this is redundant now
you can just do `get('tabbed-browser', tabbed_browser)`
This is a private function that has a reference to the function that does the same thing, right? (Or should the `.format()` return value)
This should probably be better done with the `else` branch above.
What if the `GoQuorumCompatibilityMode` is false? Shouldn't the type of the type be `false`? Or is the `false` false false false false specific to `blockParameters.isPresent()` check required here?
I am not sure if `deleteManifests` will ever be null. Is that correct?
@pabloem what's the reasoning behind this? I don't see the usage of `unless groups` in the code but I think we can just remove the `groups` altogether.
can we use the same name of the key for this config?
I think we don't need this anymore since the only use is for stroio's tests.
I think we can change it to default alpha d and use alpha d instead
I think you should remove this pause
Would you like to add a return type for this, say in the `SETTINGS` method, so that we can use it in both places?
Is there a reason why we wouldn't always want to have "for-push" and not "for-push".
Should we use `TableTable.contribs` here?
I think we should make this `@options[:log] = { 'console' => ...` instead, otherwise the message will break all options.
Line is too long. [85/80]
The name `sourceforge.pmd` should be `sourceforge.pmd.sourceforge.pmd` instead of `sourceforge.pmd.sourceforge.pmd`? Also, why don't you move `RuleViolationFix` to the `RuleViolationFix`?
Please remove the last `_` keyword.
I would have put the `h2o_url_compare_hosts` check in the `if` block, then it would return `h2o_url_compare_hosts` and then check `is_unix_path` in the if statement.
This is a no-op change, but I don't know how this fixes the issue.
Why is this disable?
This should be `int|string` and `stringInterface` to match the other `                    ` doc.
This should have been removed, since this is only for loop-like keys.
This field is not used.
This makes the line of the code a little bit over-kill
`once                   ` should be `Task.Once`.
I think we should keep these private properties instead of private.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
I would use `assertNotNull` instead of `assertNotNull`
Can you add the `get_target_name` function for this parameter? Then, we don't need the `asset_key` function here.
Why is this part of this pull request?
without maybe not the `TimestampType` type
I think the sensor window needs to be removed here
Why are you returning `None`, and why do we want to return `None` here?
I don't think this is the best place for this.
I'd prefer if we could have an `Task` property for these properties and `TaskRunner` as well (in `HoodieEngineEngine`) that is set to `false` by default.
I think this is a breaking change, but we don't have the change to the public APIs for this PR.
I'd rather see the function used anywhere else, but it seems like we're not going to make that change for now.
This change is unrelated to the PR.
Why is this removed? It seems like we should be calling the method with public methods.
Can you add a note here to remove this? This feels like it will cause issues for the other parts of the code.
You can do the same for network policy.AntreaPolicy here.
I think it should use the `AppHandler` constant.
Why do you call `apiRequest.configuration.remoteHost()` here, when `pendingRequest.configuration.remoteHost` is false?
I think we should check this before the caller has been able to know if there are any users.
this import is no longer needed. Please remove it
I think the code is correct here, it might be better to return `returnreturn strstr(cmd, SET_PARAM_CMD, ...)`, otherwise we won't want `return` to determine if we're going to want to do that
I think it might be good to have the `*` as a constant, but this way the value of `Viewpub` can be more accurate.
Please don't remove trailing whitespaces
Can we move this to a utility function ?
This should probably be grouped with the other imports.
can we add some sort of util method to this function that we are trying to get the "It boxplot definition" in the storage?
Is this change required?
Isn't this a problem that the user can use?
This change is also indeed.
Why not just `$code = $location->code;`?
Why does it change from `2013`?
Why not set the default value of `1` to 2?
This is a private function.
I don't think this change is needed, we'll have a good chance to fix it.
Can you make this a constant in getDataErrorComponent?
Should this be `obj:`dataset_VALUE`?
Do we really need to build this action? I think it's best not to have this in our test suite. We already have a single `user.s` table that we can't see that.
Why do we need to make sure that we're ready to run in some cases?
This is wrong. $galleryItems does not always be a string, no need for the clearItems
can you move these up in the wrong file?
This can be removed, if `mochaResults` is not set anymore
@mheon I think the `rwa_number` format should be the default (e.g. `message`) so we don't have to pass it through the type of the format.
Should we also add default number of options here?
I think it would be clearer if we didn't have to change `--user-id` to `--bid-user` in the controller, because it was a user option, and not a user user option.
Should this be `AvailableBalance`?
Not sure if this is the right move to `realmConstructor.Sync.Session`. We should also be able to just use `this.Sync.Session` here.
Is the `!==` part part part part part intentional or should it not be part of the loop? If so, what about a `==` part?
nitpick: "The name of the file is confusing"
Why are you checking for the `cfg.IP`?
Why are we using `type` here?
I think this is a more accurate change. The new metricsMode is used to create a new metricsMode and then check if the `columnSizes` is a name and the `colName` is the correct name.
I would use `ins_data_actions` here
I'm not sure if there is some lint here or should we just remove all of this entire file?
Not sure what the right thing to do here is, `m_DynType` should be `nullptr`.
Can you remove it?
This is the most reasonable way to do this.
Why is the method public?
I would use `[ConditionalTheory]` to avoid all the usages.
This is not needed anymore.
I think we should just delete these now.
You don't need to remove this.
why change this? `json:"-"` to `RWMutex`
ARN isn't aligned with the current description
I'm not sure if this is the right change. If we're setting the `*` configuration, we should just set it. We're not using the `user wants` configuration here.
Shouldn't this be `GetEnvironment()`?
This should be in the same method. If the DialogResult is null, the listener should be able to handle it.
I'm curious about the default value of "my memory of the default" instead of "my memory of the default".
Can you remove these spaces? It's already in the source code.
Is `key` always equal to `None`?
This function is already being called on the `Rails.Fsync` method. We should probably just call it `fs.Dir` and then just use it everywhere.
this could be made DR_HOST_NOT_TARGET if you want to use a false in DR_HOST_NOT_TARGET
Does the `v1/` path still contain a `vzz` dependency?
This is not the correct way to go. I don't think it's an `Error` message, since it's a `Error` type. I think the message is more readable, so I'm pretty sure it's the case here.
I'm not sure why the `$access` variable is needed here?
Should this also check for `ast.File`?
This should not be here, as `A` is not the default implementation anymore and should be renamed as well.
What is the `TaskModeSelectorConstants.BeamSyncFastSyncLag` variable? Can't we just remove the `this`?
I am not sure about using `getBitMask` here.
don't use parentheses around the method call.
I think this is the right way of writing this. This should be the only place where we need the `ByteKey` (or any other `keeper`).
Unused import. Could you please remove it?
Is there a reason this was added here? It doesn't look like it will have the effect.
I think we need to add these to `serverService` as well.
If this is used to add `conda/core/store/gda/core.py` file, this will be used for all `conda/core/store/store.py` files
I'm not sure if we should just pass `false` here, since the test passes without it, and the test passes.
I think you can get this from the previous PR.
We don't need to check the version in the log anymore. It's used in the `if145Provider` below.
This is a new attribute, not a boolean
This can be `static const const "Enabling the ref" => "CallTarget state ByRef". The error message here is more clear.
This is the only place where we need to define these variables, I think.
I'm wondering if it makes sense to just always print a `-1` here?
Could you explain why we have `for _, key` here and not use `nil` in `core/config.go`?
This should also be an abstract class, not a list.
I think it's better to add a `//` to the docstring of the file.
Shouldn't this be oldVNode? It is not thread-safe. Also what is `oldController`?
Why not `import io`?
Please update this test case with the new tests
No, this one has a typo.
Nit: import sorting
This could just be `renderMyDeviceAcquirer`
nit: `TaskTask` is nil. Is it because of some weird error?
I would prefer to not use 'lodash'. I know it is not really the case, but if we are using `WordWidgetPopularPagesTable` anyway. I would suggest to change all these dependencies to `WordWidgetPopularPagesTable`, as the latter would make it clear that we don't have the dependencies in the code.
Just remove the `enode` here, we're still using the existing `enode` fixture from this list.
I think this line should also be indented by the `strings.Trim` below since it was not used.
Why is this test removed? It doesn't seem to call render now.
This error is never reported.
import not required?
I'm surprised you didn't do this. I don't see a need to pass in the `string` here.
I think this should be `const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || Number.MIN_SAFE_INTEGER;`. But that's not the case as it can cause problems.
Is this the right way to handle the call to `_handle` in the `setTimeout` method?
The wlr_xdg_surface *surface seems to be the same as the full-error message above.
This is not existed Pod
Shouldn't we use `svcList` here?
please don't do this. It will work if you use it in the template
Why do we change Column method here? The current column name is `repr`
Do we have any test coverage for the GetRootNodeTestTest?
nit: move this down into line 774, where the second is an error
nolint?
Can you add a note about why we need to forceUpdateCollection() anymore?
this is not a valid solution, if the user passes `--root`, the user appears to have the same value as `nil` (which is what I meant by `platform`) and was removed in a different direction. I think this should be fine.
This should be done with `isAuthenticated` and `authenticated` to avoid duplicating the code. I think this should not be part of the PR.
This should only be done once for `axe.ping` (which is the only place that uses `pingWaitTime`), right?
This test would fail if `KINESIS_PROVIDER` is `kinesalite`
Cool! Shouldn't we add a commitright to fix this file too?
nit: we usually don't have to expose `maxRetry` in the `getState` method
`signedUserName` is more generic.
Why is this added?
this is a change that fixes the bug, is it intentionally not working?
It's not clear what the problem is, but this part is still part-o part, so if you're dropping it for a specific patch, why not use a part-o part?
`DeleteHash` does not return any number of items in the `ErrUnimplemented`.
I think we should throw an exception here as well.
should be "should not be initialized".
I'd like to see a more descriptive name for this. For example, `goog:ch ogOptions` would be more consistent.
I think this should be `NumberInfo`.
This is the only change that would cause the QVariant to be the invariant of the invariant, which will allow the type to be the same. I don't think there's a reason why we wouldn't want to do it for such a warning. The user could have just `convert()` method that calls `QMetaType` and `QMetaType.Type` but we wouldn't need a member variable.
Maybe we should just make this a `OkWriter` and then do `passing done done on line 688`?
Do we need to handle this when the env vars is not enabled, or is it just a copy/paste error?
I am not sure if it makes sense to put this string in the `i+1` string, but that's how it would work.
I think this is the wrong location.
Is there any way to get the initial error from the actual function?
This is a public API.
I don't think this is correct. The only difference is that the `tarInputLevel` is in `TeamInputLevel` that is the same as `tarInputLevel`. I think you want this.
Shouldn't that check that `stripApproved()` returns true?
Why did you set it to False when it's not an issue?
@cwangxiv @carryxyh can you confirm this is needed ?
This can be a single `GetLETTERLETTERValidation`
This was an interesting bug I've been doing in the past. The only difference is that the function is `fileWavePlayerThread`. It was used as a function that has been used in this module, so it would not have been needed to be passed into this argument. So I don't see any difference between `fileWavePlayerThread` and `fileWavePlayerThread` in this file.
This will be `priv-getTransactionCount` for a few reasons. We could probably move the `getTransactionCount` to the top of the file.
This is a no-op, the mem binding for the given mem binding for a reference. I'm not sure what this was doing before.
I don't think this is the correct solution. You could have changed the network and the network to the network, or just the network, and the the project itself.
You can remove the `update` parameter from the method above.
I think this import is no longer needed?
This is not the only place where we have a `User-Agent`, so I'm not sure if it is a good idea.
should we also set these to 1.4?
Is it worth adding this to the recent recent refactoring of this file? It's not related to the rest of the PR
This is a change in behavior. We should not allow for this to work correctly.
should we do this in a followup PR?
Should params_for_params() be removed from here as well?
@deads2k @mfojtik this line will break the build that uses the build server, right?
I'm wondering if we should just keep the #ifdef here and just have the `#if` below the right attribute on the right attribute. If the attribute isn't valid, it's probably fine.
Should this logic be removed? It seems to be used for both consensus and non-InitState
The test case should be updated to remove it
This is wrong - should be `ioctl`
I'm curious: why did you change this?
you have to add the new option for the second parameter
I'd suggest moving the `@connection = ::WinRM::Connection.new(options[:operation_timeout])` to a `@user`.
I think we should get a warning about this in the `get_requests()`.
Why did you remove the check for the new node_id?
what is the point of this? do you want a simple simple simple `assert('foo')`?
I wonder, why not have another method `onPreExecute` and `on ArrayList` (or similar)?
I don't think the `RESTRICT_ACCESS` test should be in this case?
This is the main code, but it looks like you can't just use this `onFocus` at all.
I'm not sure what `GetConnTrack` does here. It's the best practice to add a new field that has a config interface, but it's not really a `bool` so I think it's clear what the `bool` interface is and what it's used for.
I'm not sure what this is supposed to do here. It is a problem, because the `SessionId` value is used by the `env.Json` property, so the `.Json` value isn't always there.
Is this used anywhere?
Maybe package these as constants? It's a little too big.
This should not use the existing `APPLICATION` property in this pr. I think it is not possible to have it as a separate argument, but we want to keep it as a property to avoid having to pass a list and then call the function.
I'm not a big fan of this, but can you explain in what case the `item.data` here contains the dispose of its own value, and if it is not dispose then the `i` value should be used to get the data and not dispose.
This is an interesting change. Why don't you set the size_ in the DB ? The user could set the default size_, then the value of the core will set the default size.
Please rename `computed` to `Buildizer`.
I don't think you need this change. If you want it in the end, the `chan` field should be the first field.
The first test should be changed to `api_types_params`. This is because the first one is `//variable="$3"`. But I don't have a strong opinion.
I am not convinced we should have this package `cstor-volume-grpc` for some users, but I would expect it to be a list, so maybe we can have it in another file. We could add some sort of package that would be a string for other GA too
This seems to be the only thing that requires the client to call `daal_bad_alloc` in the `daal::algorithms::classifier::ModelPtr model_ptr` method, which is the method `new ...(model_ptr.get());`
What does the 0.001FIL do exactly? I'm thinking that we should use it in some cases. @chlowell @pgavlin
@benhalpern Do you know why this file is added in this PR? I don't see anyone else doing it with the others.
Do we really need a new param? What happens if the number is retries?
No idea why this was changed?
This is the only change that affects the test.
This is the reason of `buildBinaryFor` was here because it was not passing the target from build and now it's not called.
Is this just to ensure that the exporter isn't inlined after the above step is merged?
This will be removed in 2.0 now
@mmaxim this is the bug fix
Does this need to be a `boolean` or can it be a `null`?
I assume this is for debugging purposes?
it's still _not_ crazy. You trimming rows to the TrimRows plugin. You mean _not_ get the TrimRows plugin.
I'm not sure this is the best way to make the logic more clear. I'm going to be fixing this, but if it was the case, the re-use `strcmp` is not the only way to do this. The code is to make it work with `first_default_index`.
@jglick Shouldn't this be `@Deprecated`?
I'd suggest to make this class `@deprecated Class`.
This was changed by mistake, but it was just about the other ones.
I think this should use the new `find` variable instead of the new `set`
I think this should be `version`?
I think you need to do something like: if (!X_AC_ENABLE_SANITIZER) {`
This is a breaking change. The proto should have a `protoregistry` that is never called.
This class is unused. You can remove it.
This is the only place where we define a `ssType` in the config file, if we are not using it outside of a module, we should just call it `if err != nil`.
Not sure if it's better to use the `config` constant here?
Shouldn't `exMessage.startsWith()` be `null`?
Is this a typo?
It's a little strange to have a list of keys for this
What do you mean by this TODO? We don't seem to be doing the right thing.
I would expect that if we ever return an error then we should return the `ChangeSetEmpty` property
This field should be removed.
why are these two hidden?
I wonder if these should be removed? If not, it's only for testing purposes.
Why is the INCR_BATCH 25 here?
We should avoid using `writer` everywhere.
This feels like it should be a constant
This is a no-op, the `NEWUSER` is used to test the other components that use this var, so I would just remove it.
This will fail if `StressChaos` is `nil` if `chaos.Spec.ContainerName == nil`.
These changes are also not related to the fix, but they are just a cleanup cleanup.
The `getpvc` was being used for the `volume` class.
same here. I don't think we should change this.
We should be able to use the `transformer` module here.
I'm wondering if we can have `SelectSubscriptionActivity` and have `startActivity` return an array of `*` (e.g. `SelectSubscriptionActivity`), but I'm not sure it makes sense to have a `startActivity` as a static method that returns something that returns an array of `*` (e.g., the same instance is used by `Boolean`) and only if the class is used.
This seems like a regression, as we will have no check in the file.
Can this be refactored to match the existing behavior?
This is the main change. We'll likely have to re-enable it to the `Mux` and then we will remove all the `Always_CLI_KEY_PODF` calls in the `Always_CLI_KEY_PODF` call, which will cause a crash.
This should be a Prometheus, e.g. `io.prestosql.spi.sql.TARGET.TARGET.TARGET#TARGET#TARGET`
`timeZone` is a `DateTimeFormat` instance (like `timeZone`) so it should be a `DateTimeFormat.resolvedOptions` instead of a `DateTimeFormat` instance.
@tnozicka do we want to send a `hostpath` as well here? I'm wondering if this is the only thing that will send an empty `hostpath` object. I wouldn't want to send a `sendEventOrIgnore` to the `hostpath` object.
I'm not sure we need this change
I think you want to keep this line.
Why are we adding these?
This is an array_replace() that does the right thing but has a default array_replace() method that has the correct value to return a boolean value (e.g. `0`) and `null === 'text'` is not a string. I think it would be better to just check the value of `$normalizedConfiguration['type'] = 'text';` here, and instead use `$text` in `_update_metadata_text` as it would avoid the NPEs when the user changes the value.
Shouldn't this be `endsWith(x)`, since we're not doing any validation in the node?
I think it is better to name this property `ZipExportProcessor`. I think that we can move it to the property `DoFn`
Can we create a new key called `RecreatePipedKeyResponse` and `RecreatePipedKeyResponse` in a new key called `createPipedKeyResponse` instead of `RecreatePipedKeyResponse` ?
I think that the message should be more specific.
This is not needed anymore right? The caller will not have this option.
I think we can remove this now that #19395 has been merged.
This will be a breaking change. The `<3` version is a `4` of a `2.6` that will be able to be a single element, but the `<2` will still be `4`. If you want to make sure you want to change this in a different direction you'll be able to use the `L` version instead of a list
I don't think this is the right fix. The other way is to avoid the need for the DVC if we are not doing anything with the DVC.
Apologies if I understand correctly, but it seems like the field itself doesn't need a `omitempty`, so I'm pretty sure it's actually a `omitempty` field?
I think this should be removed because it is not used anywhere.
this change is not needed
`acc` is a lot more expensive name, maybe `formatAppend` or `formatAppend` or `formatAppend`?
@jridgewell Is this the only reason we are changing this?
why not use the path in there? seems like the tests should not be using `/conf/htpasswd`
"The has cancel method which cancels"?
I think we could just write a test to cover all the time. `describe(...)` is expected to be a specially, but I don't think we need to do that here. The spec is not a blocker for this PR.
why don't we use `precompressed` here?
What do you need this?
I would have used "is" here.
This should be `@Deprecated`
Please include the header header here, and in the other places it's not related to this pull request.
@becker33 I think this was the reason for this change
Why 5*1024 isn't 5?
Does this work if the service account already has a "masterPivotFacet" version?
I'm not sure why this was here, it seems that it would have to be the case when you don't have the zombie process.
Can we just use `mock` here? I'd think `bot` would be a better name.
This should be `default_list` instead of `None` right?
I don't like this name. You can use `newStream(ServerStream)`.
`double` and `float` have the same meaning.
Is this change related to the rest of the change?
What is the purpose of this change? The name doesn't match the name. Also, why is the node name a property?
It's not clear to me why we would want to change this to `not end`
Can you make it clear what the approver is and what you mean?
This should be the same as the above.
Is this used anywhere?
I don't think this needs to be in the `pkg/execution` package. A package would have to read from `pkg/execution/proto`.
I would use an instance variable here to avoid confusion. The copyqr variable is not necessary.
Why did you change the behavior?
I don't get this change. I think we can change this part of the if statement to be `outs.append(self.extra_convs)`.
Can be done in a different PR, but I think this method will never be called if the `podcast` is not `null`
Why is this part of this PR? Is it related to the other PR?
I'm a little confused, since v6IPNet does not set v6IPNet to whatever v6IPNet is? We're not using addr here, and it seems like we are going down the rockets of addrs, and that's why I'm using v6IPNet as part of v6IPNet.
Not sure if this is the right way to do this. It should be `id=VERIFY.win`. We should also check if the current code is used in `_new_normal`.
(style) code indent should use tabs where possible
I think the `pgpSignOnly` is still needed. The current code was using `allow` to determine if it should be used instead.
This returns a string and doesn't return the original string
Please wrap the variable in a `commons` variable with a default value
no longer used
Why not use `if`?
Do we still need these `var` prefix?
The only thing I don't like is that the token provided one is the key.
I'm curious, is this a PuppetDB change? It is not used in the PuppetDB class.
Should probably raise an `if isinstance` here instead.
`GrpcHandler.Request ` is probably a better option name. I'm not sure if it is worth it.
Shouldn't it be renamed ` Implementations` here, since the state is unknown?
This seems to be a good place to add a `TODO` clause to the `ADIOS_HAVE` package.
why not using the stack name here?
@mjkkirschner @deads2k i'm not sure why this is needed anymore ?
Should be `androidKeystorePassword`.
can this be done with `RunName`?
Add link to the end of this file.
The test is failing because the tests are not running on windows right? It seems it is only testing if tests are running on windows.
nit: missing parenthesis
Why not just call `bool ParseHeaders(TRequestHandler handler, ...)` ?
Should we rename this to `hive.metadata`?
Could you please use a more specific constant? Like "path"
This should really go into the `_init_proposals` function. (The only thing I'd prefer this is a separate change, but it's just a minor thing that's a bit of an overkill)
I think you can get rid of these two lines as well as these two lines.
Do we really want to log something like `.zip`? Or is there a reason we don't log this somewhere else? Or is there a reason we can't log it, just in case of error.
This is the same as Authentication5.0xc023 and it should be Authentication5.0xc023, as the Authentication5.0xc023 would contain more than one Authentication5.
I don't think this print statement is needed.
I think it would be nice if this was a new command with an underscore.
i would have named all the "ipsets" in the imports and have it use the `set` variable
Do we want to add an extra `@return`?
Can you change all these to use `page_size_MAX_RESULTS`?
Just for my understanding, are we testing this in the test suite?
I think you're missing a "cobuild" here
`CRiOS` isn't needed here, as the original value is already present in the `info`
Why is this made public?
I think the `fail` should still be here, because the `dump_*` should be in the `exception` instead of `exception` at the bottom
I think this is a little too much. I think if you do `dom.multiple = newVNode.props.multiple` we should just use the diff value.
I am not sure why we are adding a bonus-compatible bonus-Epoch if we're going to have to change the bonus-Epoch in the same logic. I think we can use the same logic as the other bonus-Epoch and just use `epochNum < a.foundationBonusP2StartEpoch` to avoid this kind of `s2` check.
I'd rather have this be `DropConfig` and `DropConfig` as the "DropConfig" of the code base.
This is not necessary. The `bool()` function will call `m.GetPaths()` if `paths := os.GetPaths()`.
This is the only change that affects config.HidepidDisable, not the verity disk. We should probably remove this check.
Is this intentional?
Is this intentional ?
Why do you need this?prevFolderId is never called?
Can we put these on the same line?
This is the reason we're not using the `lbann_comm` object anymore. The `open` field should have been removed from the `lbann_comm` field.
I'm not sure this is correct. I don't see why it's necessary (I can't see how the code works).
This is wrong, it can also be set to `true`.
What's this? Isn't `toUpperCamelAndDigits()` enough?
This variable should be removed.
This looks like a typo
The random SP does not have a random SP. It should not be random SP.
Doesn't `in.GetStatus()` need to be a property?
This is the same problem. The renewal will be already happening when `lock.Config.RenewCert(allowPrompts)` is true, but the `allowPrompts` is true.
Why this is removed?
This should be `err.LogLog(false)`
How about using the "piped" method here?
Should be in an unbounded utility
This is the only one that affects TF output...
I would prefer to have a "client" method in the log message. It is a bit misleading, it could be "NotServer; this is the only one in the method that is the "default". What is the reason for the "client" part?
This is a bit odd. Can you change it to `fs.Config.CompareDest` and then remove `copy-dest`?
This is not error prone because we don't want to print errors, but I don't know if we really care about it.
Maybe it is worthwhile to just call `NODE-3405` here, since we have a `TODO` for the error message?
Looks like you are using the `%>`, but you don't need it anymore?
nit: `computed` should also be computed
This return is unnecessary now, since the caller can return a `job_id` or something else.
I think you can do `find(id, Name.id)` instead of `find(id, Name.id)`
I feel like this is the one you meant to include, but I don't see anything in the code that's not yet in the example.
This should be `_stream_data` (and maybe `len(len(len)).dimension_values(...)`
I wonder, how would we handle this in a `Reader.ContainerStateChange`?
This method is now unused
This should be `<p>`
Can we change this to `TryschemaIntegrationName` instead of `Tryschema.location.MySqlCommand`?
Can you add the `pkg/logs` package as a package?
This if statement is redundant.
why was this changed?
Is there a way to avoid using a const for Dataflow_ibl_xfer (like the other uses)? It would probably be better to just use the global var, as it's a part of a method.
I think this should be a `work` or a `a`/`b`/`b`.
Line is too long. [83/80]
I think it might be better to add a default value here.
Why is the default value required?
Should this be an optional?
I think we should remove this file, as we do in other files.
I would not add an empty color. It will be always true for any number of bytes. If color is 0, 0, 4, 4 can be 0.
I'm not sure this should be done for refreshers, it should be renamed.
Isn't it better to have a unit test for this? It's a little strange that we're not doing any tsd code in our codebase.
I'm not sure if it is worth it. I think the method is used by a couple places.
Is this a good candidate for a `DEFAULT_NAME`?
This could just be `Preconditions.checkArgument(width > 0);`
This one seems to be unused.
This seems like it should be a `const` statement.
I believe this was intentionally removed, and it's not needed.
Is there a reason this is not just called twice? I think it would be good to have a test that checks if the flag was not present.
remove this line
This is an accidental change. We should probably be looking at the error in the `cmd.httpApiServer` instead of this.
I don't understand this. What happens if `RouteFactory` is empty?
I would prefer to keep the `sync.go` here. Also, the `sync.go` can just be `parser.go` and not `InstTimeout`.
`If there are any invalid records and there are the fragmentsFragment` fields that are not exported
Ah, I didn't know about this, so I'll have to revert this back. The reasoning of the PR is that it's a test, not a real issue, as it was the reason the PR was not to fix this but I can't remember why we can.
Style/SymbolArray: Use %i or %I for an array of symbols.
This is just to be consistent with the rest of the codebase
I would make the tests pass for the custom template and cancel them all, to make sure it is all the way from the template
@jhipster/developers this is the only change that will not change the default setting of `scribe` - we should just change that one. If it is a default, it's an integer. If it is an integer, then it wouldn't be better to just call the `vic-nar-finished.md` value.
The only thing I'd add `addLink` to `addUserLink` is that it can only happen when `C:\.modifiers` is called from multiple threads.
Do we still need to copy streaming if there is a response header? I think we should avoid doing a client to copy streaming if there's a request in the http2 streaming.
This can return a `task`.
This function is not very useful and can be replaced by just `return this.execute()`.
I would prefer to not have any version in the migration. Can we also add the version to the database as well?
This should be done by using `Config::get('cms.twigNoCache')`.
I don't think this is used
This is an error that should be fixed in a separate PR.
Isn't a `nil` check redundant here?
The script script could be passed through.
This should be reverted, right?
@sureshanaparti is this a breaking change ? For example, we should have a `request.getTitle()` method in `request.getHumanReadableIdentifier()` that calls `load()` and pass `load()` to the `request` object (the `load()`) to `load()` (the `request.getTitle()` method) that returns a `boolean` object.
I think this was a bug before.
This line needs to be indented by `resceptor` right?
This seems like something that should be a constant?
Does it make sense to have a `Itoa` call in a `IcosmGauge_`? If so, I'd like to know the difference between `Itoa` and `IcosmGauge` (e.g. `InstanceTag`).
I think this is wrong, it will return `undefined` if there is `tree.put(contains(false))`.
Can we add an import of these so that it's easier for future later later?
This is an interesting thing, but I don't think the original code was supposed to be able to use the `new` for the three reasons. The only thing it was that the `JSONError` is the more specific one is to change the `JSONError` signature of `JsonReturnType.text`. This code is not a big deal either way.
I don't think we should change the user_from from < 0, since we don't actually support it yet?
If `i < allergens.size() - 1` is the same as `i < allergens.size() - 1`, then you can use `i < allergens.size() - 1`
Can we just always use AppendValue, instead of calling AppendValue directly? We can remove the need for this check.
This is just a small change that is needed, but I think we can just remove `ref` altogether.
I think it would be better to make the default case a bit more generic, like `foo.bar: ...` or something like that
I'd prefer the old config to be consistent with the rest of the file (or at least in the other PR).
can you use something more descriptive? And I think `datetime_types` is not used in this class.
can you please update the type here?
Please add `//`
Not sure what to do here - the tests pass because `be true` doesn't really matter here - it seems like it would be better to do the assertion in `Buffer/type/errors.rb` instead of the `expect` clause.
I think we should check here that `_socket` contains `_socket` but not `_socket`.
Why do we need to pass the param to `std::uniform_int_distribution` ?
Why is this error ignored?
This is not a big deal, but it might make sense to move the import to the top of the file, so we can just import the module directly.
This is not a very good description. We're not really using a variable name.
I would move this to a plot. If it's not necessary, I would change it to a bool (like the other ones).
why is this needed, it should already be a `trim`?
nit: remove trailing blank
This should be in the next PR.
this function could be renamed to `number`
This is a bit confusing. If we have `artifact.name`, we can change the method name. It will be more efficient to say that "org name is empty".
This should be done by `competitive`
I am not sure if the primary is the right fix. I think it is the case. The `primary` was the only place we used this. If we want to use `hence` in a variable that is the default. I'm assuming it's only about the `primary` field.
Why are you using miner or mins for stdlib types here? I would suggest replacing `go-filecoin-project/go-filecoin/types` with `go-filecoin/proofs`.
I think this is wrong. msg.MessageId should not be a singleton.
Can we use `settings.DEFAULT_NAME` instead of `nullID`?
Is this used anywhere? I mean, no `compare` flag?
shouldn't it be `col->expr()->nullptr`
This is not needed anymore.
I don't think this is the right place to put a component. We should make sure that it can be a single component that is notHtml.
I'm not sure this is the right thing to do, because it's a user error (as a user was trying to get a user error).
This doesn't seem related to the PR.
The `KeyTenentMaxLength` is a field that is a field that is the default.
does it make sense to have a `public` method on `CustomKeyValues`? I think it should be public to have the same API
This function should just be called `chooser` since it's a `Start` function. We could probably just do it in the `Start` function.
The log message should be applied for the level of wlr_drm_connector.
I don't think we should refer to `--exists` for noncees.
I think we should use ` NativeModules.ShareExtension` instead, to make it easier to track
This needs to stay
I would prefer to have this be a `GetLengthForVersionNegotiation` and a `GetLengthFromPublicHeader`
This is an example of an example where the `Character` attribute would be `null`.
I think this method should also be `return isInterface() { return false; }`.
I think you can leave this as it was
why was this changed?
I'm guessing `NewMutableStateStats` is used anywhere else in this file?
@deads2k this will be a problem with the `/worker/` version of the `/sonm/worker.ini` file and `/sonm` package.
This is a good thing. I think we should just keep `test.equal('TEST', options.raw);` here.
This should not be needed. The view will be set by the view (e.g. by the view itself).
This should probably be `span` and not `All`.
I think this should be removed from the interface, right?
break here is not needed.
Use 2 (not 11) spaces for indentation.
I think this is not needed here, right?
`db_tests` is already included in the test file that is removed in this PR.
This is not right. We can't change the logic here. `goog` does nothing but it's not doing anything.
This could have been a utility method. The problem is if a user could get a Logger that will have a Logger (like the other functions), then the window will not get the host and will be processed by the caller. If they are processed by @link then they'll be processed by the client, but the user will get a Logger. If they want the screen, they'll never get the right link.
nit: unused import
You should probably get rid of this error message and just call it `success`.
This is an unrelated change that should be reverted.
This seems like a bug. The `loss = F.binary_cross_entropy_with_logits` was never called, and it's not the same as `cross_entropy_with_logits`. If you're not using `pos` you can remove this.
Nit: I think this should be an 'with' instead of an 'with'
This is wrong. You have the default 0, 0, 0, 0, 0 as well. It is the default 0, 0, 0 in the first place. The default 0 should be 0.
I think the `Type#visit` method is not needed. You can use the `Type#visit` method directly in this method.
This should also be moved to `bluebird` as it's no longer used elsewhere
Why is the final?
I am not sure if we should keep the target link to the link.
This is the one we use in the other tests - the first arg is correct. The first arg is a `expectation` that is not the default.
Layout/TrailingWhitespace: Trailing whitespace detected.
Can we make this a default?
I'm not sure this is needed?
Is this change related to the PR?
This was a bit scary. We don't use it anywhere else in this PR, it makes the code harder to follow.
Please add `ext simd8` to the d5 struct as well.
Shouldn't this just be `apitype`?
Why not just `func.Len(..., length)`?
Please add the `String` to this config.
what is the rationale for this change?
I would put it in a `Db()` function, and then in the line below it, it will be `const`
I don't think this will work. In the future, we should be able to make it `on_*_external()` to avoid the need for it.
This is a very old column
Can you also check if this is a private method? I don't think it is needed, just check the return value
this is a bit unrelated to the rest of the PR. we should also check the number of items here
I assume these changes were made in here?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Isn't the retry a pointer?
I'm not sure if this is a good idea. If we want to do something, we should use `VERSION_config`? If not, I'm missing something.
can you update the key name as well?
I think this is what we want to do? @configuration.fail_if_no_examples = @configuration.reporter.report(examples_count)
I'd suggest renaming this field to `Blockly.FieldVariable.prototype.referencesVariables`, as it is used in other classes
Why is the data being made twice?
This needs to be fixed.
This is the only place where we are going going to do this. We can do this as a `_config` instance inside the platform itself. It seems a bit odd to me that it would be a `_config` instance, which is not really the default for every platform? Do we need to add this as a public key?
This is a bit odd, why not just use `os.Exit` directly?
Why is this change required?
If the volume format is empty, then you don't need to pass it as an argument to this method
The `throw new IllegalArgumentException("metric variable must not be null !!!");` is a bug in the previous code
This file can be reverted.
I think we should be able to avoid the `Activity` here
I would just make this an expression expression `_shared` and make a similar one so that the order is identical.
@DaanHoogland do you think it would make sense to move the logic to the base class? The old way is to avoid any plugins using the old one.
This import needs to be removed
can you add a space after if () and a space before `if` and avoid code duplication
This is not the right way to do this, but it is not a big problem. This will be hard to find. The default is `True`, not `1.16`, which will be `4.16`. We could also add a `.io.druid.segment.SQL_File`.
Is this still used by anything?
Don't remove changes to this file, it will be removed from the PR.
Why did you remove `merrors` from this PR?
this was missing from the "if" block
@jeherve do we care about this? If not we should remove the `.` in a `to avoid the `.`
This should be changed as well, right?
Why is this only needed if the target is a full list?
We should probably add a check here to make sure that this is the right error message.
This line is redundant, as there is a default case in the array. You don't need to check if the column is in `coalesce_result`. This will be always present in `app/views/`
This will break the test (maybe it's just a test) but the test that checks for users who don't use `systemdsystemgeneratordir`, and we're trying to find a way that checks for the user. The test will use `systemdsystemgeneratordir` as the default, which is `true`, which means that the `--variable` flag is set to `true` in the `systemd`.
Wouldn't it be better to keep the classification in a block, and then call `_classificationCompute()` on each classification?
The `methodInitCode` method is called twice, not `Init`.
This could be simplified to `startTs` or `User startTs`
`width =Verify(width);` and `height =Verify(width);` should be tested
Align the operands of an expression in an assignment spanning multiple lines.
as parent is not a parent
This is not needed. It's only used once in `account/account.go` so I think it can be moved out of here. We can also just remove the `Emberber` if we're not using this in this file.
I think you can do `include ThreeStateWorkflow.upload :46` instead.
Why is it ok that it is ok to use `np.NaN` now?
please update the variable name too (same for the other one below)
I think this line should be changed to `init_ listener`, since "//_sheet can change from `Python.Pex` later
@agramfort do you see any point in making this change?
Could we get the Difficulty Bomb Delay from the web registry and avoid this kind of pattern?
This change looks unrelated, I'm not sure it's worth adding some code to it.
Can you please explain the reason for this change?
The file doesn't match the `var-dumper/Resources/dump.php` package. It's also not clear to me why you are using `add_symfonyDumpFunctionPath` here (and the corresponding `var-dumper/Resources/php` file).
How about adding a debug message in the settings file? This could also help us understand why we need a different error message.
This one is the main code that I did not do.
This should be removed. It is in the base class, so we don't even need Dockerfile anymore.
I am not sure if it makes sense to add a function for this function. In other words, it should be a function, not a function.
I don't understand what `@group_level > 0` is and why this change is needed. The `if @group_level != @group_level` is an object of a `c`.
I think `Spark3` is more appropriate?
Could we use `get_notebook_path_to` instead?
I'm not sure if this should be here or in the future?
This was a bad test...
This should be added to `lib/constants` as well.
Do we want to use `/` in the build directory?
This is wrong, we should only do this once for set operations.
I think we should just remove `from string import ascii_lowercase` from this file, as it's now the same as `pyqtSlot`
This is not correct as it will always catch `Exception`. I believe `Exception` is not a `Promise.Test` that will return `undefined`.
nit: spacing is off
Why the `[class]`? `MediaLibrary` should be deprecated. `MediaLibrary::class`
I'd prefer `enableAdminApi` over `enableAdminApi`. This way it doesn't make any sense.
Why do you use this? It will be easier to understand if you use it in `safely_import_config()`
This seems odd, why are we calling this twice? Wouldn't we want to call `dyingAndDoneExport`?
shouldn't it be `<br>`?
This should be an enum not a boolean
`===============` isn't needed since the `java.lang.StringUtils` already has an annotation, so this is just an annotation for `value1`.
This was the only one I found.
Is it a good place to add this? I'm not familiar with the code base.
(style) externs should be avoided in .c files
This looks unrelated, but can you remove it?
What's the reasoning behind the reconcile? I don't see any new reconciles.
It seems to me `getClientConfigImportModule` needs to take care of `Interface` here, but it's not the only caller of `getConfigImportModule`
Why not use the `al` package here, since the other packages are now just `/`?
why not directly use agreedCapabilities instead of agreedCapabilities?
Is it still necessary to set the `+2` to `2`, if `lss != nil`?
this should just be `t('export_as_preferred_citation_txt')`
This seems like the only change in this PR. Why do you change that?
The `update_address` check is not necessary, since the action is already set at the `_address` action.
do we still need this assertion?
Should be `T handler`.
I think that you need to add the environment variable to the test, as the environment variable is not defined.
Would you mind adding an update_state_map() function to update the parameter of the update method? I think it would be more clear to just call this method in the call to update_state_map()
I think this change should be reverted.
If you don't want to run this.support the same time, you'll just need to copy the loop.
This method is not really covered by GCS uploader. It would be better to use `data_format` instead of the method, since that will be the default behavior in `GCS uploader`
I'd like to see a test for that, too. We should not be able to use an `length`, but this seems like it could lead to an error when `length` is null.
Do we need to set it in the `newtlements()` method?
This is a bit confusing with the fact that this is what we're doing in the code base. Can you move this up and just move the code inside the `Order` method?
This can be simplified to `from kinto import __version__` and then you don't need a `from time` import statement.
I think this should be reverted
This is the default for the `auxFile.properties`, but it's used in a separate file. I don't know why this is needed.
why do we need the configuration here?
I think these are debug changes. We should probably be consistent.
@karik-gsa @rhtyd @alalazo - can you check if we have a test that fails if `DeprecationWarning: EvalHook is a deprecated` and `DistEvalHook` were in `Sulu-upstream`?
why a sql method?
I would just make this a `common.base.join()`.
I would put the version on the new line. It's the same as line 246.
In order for any type conversion to write `<= null>`, I think it should be `<= type>`, unless you want to check for any type conversion.
Add doc to commit message.
This is the main change I'm pretty sure. I think if we want to use an object instead of a list of two lists (which should be handled by the user's context) we should use a specific object here.
I'm a little confused as to why we're converting the column to a string, can we add a `null` column?
why not just do the log?
Please make sure we don't have a method for that instead of a "isSymbolUsed" symbol.
Is this intentional?
Is it always recent (ec2, Dimization)?
Why `undefined` is needed here?
This looks like the wrong package.
This is the only change that fixes the bug.
Is it possible to get the port from the push push, or does this logic apply to all versions of the push push? I'm not familiar with the push push, but I'm pretty sure it doesn't work with `opt_port` being the port from the push push.
why is it ok to have an explicit message?
should we add a validation rule to make sure this is used for all the future?
I don't think that this should be here, as the default should be `KratosMultiphpark` (e.g. that doesn't work)
I don't think this is needed, we can just use `Function`
Nit: we might as well make this package private and move the `src/server/server/server/server/link.md` logic to `src/server/link.md`
Can you explain what's wrong between "BLACKLIST" and "filter_signals"? "filter_signals(Model, "filter_signals", "filter_signals(Model, "BLACKLIST" (or similar) "filter_signals(Model)"?
I think we could add a return type to the constructor
This is the way the field is only ever null, and we want to always generate the field from the field. The `if` is only used by `if(field.nested_flatbuffer != null) {`
Is this just an issue or should the Push Descriptor be cleaned up in the user's configuration?
Looks like a typo.
Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
This is just to match the `Series(x, ("b")` attribute.
This is the only one which was used to pass an empty PhysicalLocationComponent, which was used for some reason. Can we just pass a new PhysicalLocationComponent directly to this method?
This is not needed anymore.
I wonder if we should add a `expFeeFactor` after the `if` and reuse it here.
This is only needed for testing, right?
I think this class is not used anywhere.
Is this change intentional? I wouldn't expect it to be the actual mail template, but if the user is not using it, the user is not allowed to change.
Could use `map(role)` to be a `List<T>` so that it is not `evaluated(role)` and the `map` should be checked for null
I'm not sure how this test is working as I've used `super(props).ref` in the `LocalHTML` test and I'm not sure if that is the right place to put the test. I think it's better to remove the `LocalHTML` property and just use `super(props)` here (we can just remove the `LocalHTML` field).
I think that this should not be `final` if the `Test` method is not initialized
You can use the other sort of 'unanswered' instead of 'unanswered.must_equal'
I think we need to add this to the `error` above.
The RequestHeaders is always set by the proxy object, so I think it is better to use a list of objects here.
I'm not sure if this is a good idea to add an enum type to the string. I would suggest we move it to a separate file and use a different description.
I think you can drop the `_` here
What about `view_map` or `mlat`? I think the message would be helpful.
This one is wrong, it will be removed in a follow up PR
This is wrong. You're not checking if the batch is null before calling this.info.Export
in the world it's a bit odd to use `assertIn('id')` as a string and in the test `set(assertIn('id')`, the string is more readable.
Nit: `*` => `*`
I think we should be able to remove this `width = maxWidth: * 2, maxWidth = 1,`
This is a bit confusing to me, but the logic is not very intuitive. What do you think of adding a `searchTerm` parameter to `searchTerm`? The `.map()` call would be much more useful here.
minor nit - I wonder if it would make more sense to have a single folder for each parameter, and only do it if needed? I would like to be consistent.
I would use `fetchLevel.WARNING` here.
This is not a good approach and could be improved. I don't feel like the best way to fix this is to have this check.
The `setField` should be removed as well.
Where is this used?
This should be changed to `[]` for consistency with the rest of the PR
I'm not sure why you changed this to a boolean?
I think you can just remove `var` here and do the next one in the next line.
What is the rationale of `3` and `2` here? Is there a reason you changed the other options?
This import can be removed.
Do we still need `attach`?
I think we can remove this line now
I'm not sure if this will break any existing user code, but the code that's just a number of places that we're using this code, which is not good.
@becker33 I think you can remove the `list()` call here
I think it would be better to keep the info.info() call at the beginning and pass the info to the builder.
Do we need this here? It will be enough to see if it has an `[ContributorFact]`
nit: this name should probably be vared as a variable
This is the only place where we need to close the `privacyPublicKeyFile`
I think this can be removed now.
Wouldn't it be better to use `0` as the second param here?
This include is redundant.
I'm pretty sure we're not using `LambdaMethodReference` anywhere else. Shouldn't it be just `OptionalOrElseMethod`?
I don't think this needs to be removed
This will break the `<3, 3>` element, which is not a valid sys.version_info < (3, 3)
Is this a BC break?
It's not obvious from how you pass in `rmds` and not `rmds.MD`. It's probably worth having the `id` variable in `rmds.MD` with a reference to the `MakeMd`.
I don't understand the 'lodash' import. Could you explain why this is needed? The `Word dependencies` import is never used, right?
This can be removed now?
@nmittler I think the `_post.` is redundant here
I don't think we should do this. If we do, we should add a TODO to improve this. If it is done, then we should do something like "you can't do a single apps with no apps, but we can't do it for another Piped"
This is a bit odd... I would suggest a `<none>` or something like that.
This test should be checked in the `*test.go` file, right?
@mhoemmen why is this test failing?
Not a new task but I'm not sure if we should change it. In other words, we should change it. If we don't provide a runtime param, it should just go in the constructor.
Nit: `arguments-out-of-order` is a pretty generic name. I'd say "Positional arguments are out of order", "arguments-out-of-order", or something similar.
The `SnackBarHandler` was only used to set `no_account_signed_in` when it was not used. I'm not sure about the `Snackbar` to handle the case where it is not used anywhere. Maybe we need to change `show` to `no_account_signed_in` when it isn't used.
Is `toHosts` necessary here? If not, I'd rather use `str`
I'd like to see a test for this in the future but I am not sure if it's better. I think we should just pass in the empty string to this function.
You're not able to get rid of the `if` condition here, right?
I think we can remove this
This is the main place where the data store classes were created.
why not use the `_widget` constant here?
(style) trailing whitespace
I would use `denField_MARK`, just in case. Also, you can use `denField.required()` or `denField.in_runner.form()` to get the same id from the name. Also, I don't know if the string value of the `denField` is necessary, but I'm not sure how to get the string from it.
It is probably good to add a `log.info()` to the `log.debug()` that we can use.
You can use a `get_escape` method to avoid this change
nit: `always` is a little weird here.
I think this is not necessary since it is only used by `unsafe` and not by `runtime.Pointer`. The only use of this function is to do this.
Isn't this redundant? Isn't `m_swift_ast_context` already checked by `HasErrors`?
I don't think this needs to be part of this PR.
These changes seem unrelated to this PR.
`closure_TABLE` is a bit ambiguous and should only be used when `log` is a dictionary.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Please rename this to `public`
I think we should be able to use `values.Map()` here instead of `values.Map()`.
Why do we need this change?
I'm curious about the motivation behind the `tenacity` in the test?
Why did you change this?
The null check seems unnecessary.
Why do we want to set the PropertyID here? Shouldn't we be setting the ID here?
I'm not sure why this was moved?
I would move these new lines to its own `load_admin` method, and call it just `load_admin`
`if metadata != nil`, is that OK?
should we also call this `CommunicartMailer.cart_email`?
Please revert the unused imports and keep unused imports. Please revert them and merge.
Can `createSpy()` be called in `testing.js`? This should be called in `testing.js` and not `testing.js`
This was not being used anymore
This may not be the right place to add a "Value of ...".
I don't think we should change the signature to write the block as the second argument.
The `json` type is not necessary.
I think you need to use the new version of the SszLimit class.
We should probably add a TODO here, to make sure that we don't have any code coverage for that.
`pytest` could be renamed
I think `return name` might be a better name to be consistent with other packages.
@martint , I think we can add a conflict with ClusterScoped and compile_NAMESPACE
why remove `Yield` ? I think it is now handled in `next()`.
Can we use the the default `pulumi preview` and just do the `pulumi up`?
The space was not needed here, because `auto space` was unused.
I think this should be in a different PR, as this is now in the `build_data` and not in `build_data`.
I think this should be `connsRespSubjNew.ID`
I don't think you need this change, you'll just be able to run into master on each branch.
I think this `\FrameworkBundle\FrameworkBundle\DomainRouter` class will be better than the other `\`
I'm not sure what value this is supposed to do, is `!added_new && is_merge_or_booted` redundant?
This seems odd. Do you know how many tests to cover this scenario?
Why was this removed?
If this is only a raw node, should it return `None` instead? I would expect the agent to be a valid value.
This is fine. If you are setting a default setting, it's good to be more permissive, but I think we should raise a warning. This would also prevent us from trying to do this if we are trying to avoid a change to the behavior of a `local_path` in the future. But we should raise a different error.
You still have to remove the old `C` part. The new `NU General Public License` file should be removed
You can just use `*7 / 3`.
remove unused imports
Please add `.name()` and remove the fields since it's no longer used.
This isn't right: it is the place where we use the `Top` class to implement `Scorable scorer`.
I would change this to a string here as it's no longer valid
Line is too long. [98/80]
This is a good change. We need to be able to make sure to run some of these tests on the `stderr`s. I think it's ok to run this test by making the `export`/`layout` sanity check the `upload`s
This was the only place I missed in the PR that changed.
`true` isn't the default here, right?
Can't you remove the minerAddress from the config? This will automatically create the new config.
Should we be setting the default here, too? Otherwise, if the user specifies `4.3.*` then the default should also be the default.
why is that removed? I see `not_not_not` being used anywhere else in the code. It is used by `--verbose=1` in both cases.
Why was this not added to the end?
It's good practice to add a method that returns a string that we can actually use.
I'm not sure why the change to protected in the end of the test. Why do we need to add that?
I would rather not have this logic here. It's not clear why we have both the `mongodb-extjson` and the `#mongodb-extjson` are defined.
`default="%.2f` is in `static/default.py` so it is in `static/default.py`
I'm not sure what the best way to do this is. The HAVE_RSEQ functions should be called when the user wants to do something about. In the code you need to move into the `rseq_is_registered_for_current_thread` method to call `rseq_clear_tls_ptr`. I'm not sure what the `HAVE_RSEQ` is, but this is the only way that the `HAVE_RSEQ` is used. So, it is probably not necessary here.
need to fix the indentation (this line should be combined into a separate commit)
this is just to make the origin clearer to the user.
This should have been `ApiKey` to indicate we're using it here
Nit: `wait_for_event` is a bit confusing to follow the naming convention. `dynamo_thread_init` is used for all the thread's `init` and this `wait_for_event` is the only place we need. `pulumi up` should just be `undefined`. `map[string]` will always be called, so we can just remove it entirely and `status[string]` here. I think this may cause problems, as it will only be used in `dynamo_thread_init`
It seems like `get_lambda_name` is a function and we should be consistent. It should be named `get_arn_id`. We have a docstring for the same name. But I think it might be useful here.
Nit, we use applicationVersion to avoid mixing up and up with other metrics metrics readers.
It seems like `&workflowservice.PollWorkflowTaskQueueResponse` should be a `nil` so we don't need to pass a `nil` flag.
I wonder if we want to check that client_options[:read] is an object?
I don't think `facingMode` will ever be set, so we should be able to create it in the `preferredMimeType` function
Should the name of this `LayoutEntry` be renamed to `ImageSubresourceLayoutMap`?
is it possible to get Svc out of this string?
this is the default
why is this necessary?
I don't think you should be changing the behavior here, because `get_default_result` returns `False` if the value is `None`.
We need to keep it in one place
`ImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImageImagePodPod`
Just to double check: why did we change the `docroot` to `_html` if it's only for RHEL?
This is a public API, I think it should be public
Is it possible to make the test pass at the same time? I think the only place the test is on the node.Data is in use and we don't need to keep the context as the node is the node itself.
This method should return a `Map` object, no need to add it.
This should be marked as deprecated, right?
Do we need this file at all?
This should be a try/catch, otherwise we'll be able to run this for us to remove it
I think it is better to use a global key instead of an integer, and then we use `&` in the key name.
I would prefer a constant somewhere to not have a parameter, it's not a array
Does this need to be in a function? If so, I think it should be in `idv`
Do we really want to do this? I'd like to see it in the other PR.
Can we just use `GetMethod()` here instead of making the code a bit clearer?
@mhoemmen this is a good example.
Is the `errno` variable needed?
This isn't necessary because the hasattr is already the actual value, it is a no-op.
I think the try/except is wrong here, since it will always be the first boolean. If this is the case, I'd rather try/except it will be the first time.
what is this default for?
I'm not a huge fan of using package's `go` package, since it is not a big package, but I think `package.io` might be a better place for this
This is the only change in this file.
This could be just `column_label[bool]`. You can't use `bool`.
@deads2k I think this line needs to be added in the `/lib` section, as there is a chance that we can verify that this line is there.
why are you setting `module_class` here? you are calling `type` in other places?
can we add a doc string that will make sure that these are public?
this can be removed, `is_integer` doesn't have to be integer
This should probably be called 'view' instead of 'licenses' (just in case)
This file is not used anymore
Should we use an `IllegalArgumentException` or an `refresh`?
I think this should be `bisect_remove_started`
`paste-primary` is still a valid value, so no need for a `clipboard` variant.
Do we want to show the full user to the user? I guess it could be possible to have the `story` service, but I think that's a bit confusing, since this is not the correct behavior.
This is just making it `object` instead of `table`?
You could also use something like "get" and "getrap" instead of "get" to be consistent with the rest of the code.
Why not use the github.com/unittest for these?
Standards: Can you please add a space after commas?
@jeherve can you confirm this is not needed anymore ? The test for the target system should be removed.
I think we should remove `nodesRegex` here and replace its `StringBuilder`s
While this method is a non-`account` it should be `account.new_record?`
I think you want to check for 1f here
Why does the extra spaces here?
@tnozicka how do we know that this is async?
This might not be necessary because of the MetricReaderType. The metricset will always be created.
I think we should make it `protected`.
There is also an extra check in `FileUtil#isPreviewAllowed` in `FileDownloadHelper`
@Scottmitch was this intended?
I think the message should be "info" instead of "Bound".
@deads2k @smarterclayton do this here also needs to be reverted
this is an internal test I believe
This file needs to be reverted.
do we need to include these logging statements? Why do we need to set them to 0?
Maybe `const lock` can be removed?
Is this a bug fix?
`dbName` is set to the bundle, so the value is null, right?
Is this function used somewhere? I can't find any other code with it.
I don't think this will work. I believe you can just pass in the `typeTable` instance directly.
This line should be removed. The previous one has the original value.
Is this still needed?
Could you remove the extraneous line break?
I think that this function should only be used if the child model is going to be verified
Did you mean `nixpkgs` to also be -E?
Why is this not `SETTINGS_READ`?
I think it might be better to do something like: "Parsing passed IP %v failed"
Why the enum?
`secondaryConfig` is already `PRINT`. Why are we passing `PRINTConfig` to `Timeout` here?
This doesn't look like it will be used anywhere. The `query` argument is always being a `true`.
this change seems unrelated to the change in this PR.
I'm not sure about using numeric_only for any function.
Should this just return a warning or an error?
Why is this include needed?
It's not a good idea to have an issue for this, but I don't think it makes sense to use a relative path here. It is not necessary.
Why is this necessary?
I'm not sure we care about this but I think it will make it clear that we don't have to change this part of the code in the future. Can you make it so that people can have a single place where people can see it?
This should be catching the zk exception instead of an int
Wouldn't this still be better done as a `appendChild` method?
I think we should log something here, because the body is not the same as the user.
This is not really the best place for the `SecretEncryption`. The `Public` field should be `json:"encryption"` right?
so you didn't add these anymore?
I think you want to use a different name for the new function.
I would suggest a method parameter named `infer_result::first()`.
I don't think this is the right fix. We should revert the change.
"Attachment is used simultaneously as two color attachments."
Should we use "application.graphql.dip" instead of "HeadLess"?
This should be `make` or `make_result`
The reason why `id` was deleted is the only thing that is used is in use. We're only using `id` in `pkg/resource/server`
I think this is fine, but since we are using this field, maybe I'm wrong. The keyhint value is not "true". I'm not sure what the right thing to do is do.
This test would break because we were using a `keys` without any special form (so that `field` would be `None`, which is no longer the case)
We could probably get rid of all these too.
Do we need to add a `--options` option here?
I think it's better to pass the entire `returns` and `isinstance` methods in the error message instead of passing it as a parameter.
This only makes sure we don't set the `outside_committers`
`return new Date((Date) o);`
why change this? Sorry if i am wrong but I am not sure I follow. @lilleyse
This is a false positive. The default is false. So the default is true for DefaultEnabled and the default is false.
Do you need to set the variable here?
I think it's better to make the copyright here, and add a note that it doesn't break the API
The `mysqld/mysqld.sock > { /dev/null` is probably more clear.
The `destroy` dependent is not a string, so we don't need to specify the dependent
This won't have the same effect. The on-disk is that if the tunnel has been started it's not set, the NULL was set. If the tunnel has been set to NULL, the caller should not be able to call it here.
It is weird that this is not a child process.
if `newLen <= 0`, is the default value?
I think we can keep this.
There is no need to keep the `unique_ptr` here.
This is really hard to read. If we really need to do a version check in `data.versions[version]`. We need to do a copy-paste error here.
Please use 7.0.0 as the default value.
This will be needed for GapicProductConfig, but the value is not the same as GapicProductConfig.
Why is this change necessary?
This should be moved to the `if`.
Why is this change necessary? It doesn't seem to be related to the issue.
I'd suggest a different name. `<` is more standard for the `>`.
Please remove the spaces, and fix the indentation.
this is a BC break
I think it should be private.
Why are you using heatmap to make this change? I don't think this should be a public variable.
These can be removed.
This was the wrong place for the com.spring.sns.
this was causing the flaky test failure
This file contains invalid characters
I'm not sure why this is needed? It will only be used in single `dev` mutation.
why is it true?
The click-buttons function is a lot more readable than the tab-buttons URL, I think we can change the tab-buttons to a tab-elements function.
The `assert(BEAM-1863-2)` is used in the constructor, so I don't think it makes sense to add it in the list as a default (e.g. the gateway is already disabled) - so why not just add it to the `default_GatewaySolverEnabled = false`?
It's good to use configure.instantiate here.
Is this a typo?
Why does this need to be configurable?
I think it is better to use `bpf` rather than `ebpf`?
This should be a separate file (and should go before we open an issue).
Is this not used anymore?
Why is this needed? IsolationLevel is set to true when we don't have the setter? IsolationLevel will be set as false?
This was just dead code and it was not related to the issue. It was only introduced in some tests, so it is now just the actual issue.
this was an accidental note from the commit
Line is too long. [89/80]
I think this is wrong. The `read will be all` is a snapshot, not a `use` statement.
Since we're using the `LogManager.Configuration`, it might make more sense to keep the `config` as it was and just pass the `LogManager.Configuration` directly in the `LogManager`.
I think we should return `None` here
I think the only place this would have been called `entry.get(d)` is `Iterable`.
Shouldn't we add a `default` param to the `add`?
I think this can be removed now
This is a bit weird - why is the config set?
You should be able to set it on each request. We'll have to add a prefix to the client side and let the system use it.
I'd like to see a better name for this, because we want to use the name of the list. I think it would be more clear if "WelchWindowFunction" and "WelchWindowFunction" would be better.
This is a change from outside of this PR. I think this is the only place where we need to change this function.
This DrawColour &report is a private field of the QColor this method
I think `typeof(int) == null` is more appropriate here.
Missing space after "if".
I am curious why this is necessary? I thought you wouldn't want to replace `!` in a follow-up PR?
This is not the only place this is used.
I would prefer if these were to be empty, and they are never empty. This is because the case below we have already got a non-zero value from the `pd` method, so we'll never be able to use that method in the `CreateDisks` method and we can remove the `@computecompute` method in the source and then we should remove the need to re-link them.
why is it removed?
The default value is not `close` because that's the default.
I don't think this needs to be done anywhere
I think `# `attr_value['string'] is not None` probably probably not required as `attr_value['string'] == value` is probably not required as `attr_value['string']` is a string.
I think it would be better to use `var reader = new String().AddMetricReader(reader);`
I don't think this is a valid case since this test would not be aware of the ported port ported.
This is a very small change in behavior, but I would suggest to create a new property for each of the methods, that it can be called in the `exportFactory` and the methods `HttpClient.Exporter`.
@njhill I think this is not the right place for `query_jvm` (and the `Properties(s)`, so we can get the `(...)` part of that file).
How did you decide on this?
Why is this change required?
I'd rather remove this
Is it needed?
`attribute_changed` is a `attribute_change`, and it should be a private method
We could add the `GetItemLayoutId` method in `#GetItemLayout`.
This is a public method.
This is the only change I'm concerned about here, but I don't think I'm happy with this change as I was trying to fix the issue in this PR.
why not just remove the whole block?
The `renderbuffer_from_image` function is being called in a few lines below, and the function signature is being called in a different place. So the function signature will return the same thing if it's not a different thing.
The name of the constant is confusing. It's just me that this name is the same as the existing `<deploy.on\\>` so I would just replace it with `<a>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,>,
Please remove the variable $code.
I don't see any code using this.
I don't know if we want to have a `ECS_SPOT_INSTANCE_DRAINING_ENABLED` flag in the `ECS_SPOT_INSTANCE_DRAINING_ENABLED`?
Is there a reason we don't use "no", since it's a private constant?
I think it would be cleaner if the check for ` session.TranscodingInfo.IsAudioDirect` is not required
Line is too long. [83/80]
Why did you update these events?
Should we also change the default value to `string` if the default is `string`?
I don't think this is a good idea, because it seems to only be used in the `setBlockNetworkLoads` method.
I think it's better if we explicitly disable the value in the first place and not the last.
Please move this to the top of the file, and move all the other `signer` blocks below to the top of the file
This should be `!localized? || opts[:localize] != false`
should be removed
If we're going to have an explicit pointer in the future, then we could just use `kvs_txn_t` here.
I'm not sure why the name `scrolling.bar` is required. The name should be `when_searching` instead, but the value should be `when_searching`. I think the value should be `scrolling.bar` or `scrolling.bar.when_searching` or `scrolling.bar` instead.
This will not work. You'll need to use `sys.getfilesystemencoding()` here to call `decode()` in the filesystem.
I don't think we need this interface. It is an interface.
This is the only one that is just a real problem with the code that's used.
I think this needs to check SmING so that the beginning of the flag will not be able to run the new SmING when we actually try to send the authorized so that the existing flag wouldn't run when we try to run this.
This is a very large call that should be moved to the `loadload()` method.
This is not really related to this PR, but we should remove it.
This is a bit weird. Why not just have the default value of `a4adc5-b2d`?
Is this method still used?
@deads2k this is the bug I'm not sure if we should just return the empty string instead of the `nil` value.
Why is this a separate function? I'd prefer not to see an explicit `if` condition anywhere.
This is a change in behavior.
I think it would be better to use `chan_isVisible()` instead.
Is this a typo?
I think this is the one that needs to be re-enabled before the committing.
I think this should be `v instanceof null`
Can we use `1.16` here as well?
nit: you might use `TLSTLS.Warning` here
I wonder if we should be setting this to `ThreadPort` instead?
I think this can be removed as it isn't used anywhere.
This would probably also affect other results?
I would use a boolean instead of a bool here.
I think this should be `threadsServer`.
Is the newline removed from here?
I think this should just return `string`.
`for go` method should not be called when run is called.
Nit: remove empty line
this is a private method, I don't think it's used anywhere
What's the point of this, `.map { tag.tag.rstrip.join(" ")`?
I don't see any reason to have `Realicated` in here. What is `@type`?
why is this removed?
The original code was correct, but I don't see any code that was not used anywhere.
I think I'd rather use an enum instead of an empty list.
Remove the newline
I am not sure why we need the nullptr here.
This change is not necessary, since the var function is already in `const`
This can be `final`
why this is not the other one?
this is the main change. It was a problem in the core core core core core core that we don't need to expose a new client state at all. We'll need to pass a new client state in here.
I think it would be better to move these into a separate package (like the other one above).
I don't think we should add these to wlr_drm_interface as an dependency.
What's the reasoning behind this change?
Why remove these?
This one is unrelated to other changes?
this function is already a public API so can't we just remove it and use that instead of relying on the `...` here?
I think this should be `key + "` exists but does not result in a key`.
Is this a bug fix?
This is a bit odd - can't we just use the `ast.AstNode`?
I'm not sure this is actually correct. It seems it's not used anywhere.
`metricNamespace` is too generic for a connection (and `component`).
this is the only change I need to do in a follow up PR. but it was just a reminder for me
Please use `String[]?`
This could just be a `*ibl_tgt != 0` since the special is also used by the `special_ibl_xfer_tgt` function.
Does it work to update the `pthread_cancel` method above to use the new one?
This is a change in behavior, but I don't think we should change anything here :)
What if we made the `node.querySelector` a `::` instead of an empty button?
Can you remove these version numbers?
I'm surprised that `typeof` isn't actually an int. Is it possible to have a `null` value that we can do in this case?
We'll need to keep this the same way as we are adding an additional parameter to the index model model
The field `code` isn't used.
I'm not seeing where is the currency used?
I think this is fine for now but I think it would be good to have an explicit message about it in the `defaultMessageValidator`
Why are these two separate lines?
Is this the same `dashboard` option for the new `pageDashboard` dashboard?
This is no longer needed.
this should be done in the same package as in `NewNewResource`
why this is removed? Is it because it is not used elsewhere in this PR?
Can you use `WithStamp` instead?
Why are you changing the names to use the `api.dbReader`?
If we're not setting the F8FF to a F8, why do you need this extra line? The text should be `'\uE000OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
This doesn't seem to ever be true. We don't need it, as it doesn't affect anything.
We don't want to render output in Jupyter directly, right? We could use either `vscode` or `vscode-` in the `Mypy` module, or `make_api` package, or `make_api` as a parameter, and make the default parameter `default` to render output in Jupyter
This can be `public static final int int?`
the go-import statement is no longer needed.
The name `T` has been misaligned, it doesn't look like it would be a bit misleading. Maybe `T extends struct`?
This is not right. If the user doesn't have an `@visibleForTesting` that is an empty snapshot and the user doesn't specify it. If it's `0`, it means that the data won't be the right one. But I don't see any references to `<= 0` in this PR, which will lead to unexpected results.
This should be `if isinstance(module, 'num_classes', ...)`, not `if isinstance(module.num_classes)`, otherwise LGTM.
Can you please update the `pin` as well as the other one?
I don't think we should do this, `EncryptedDataSize`, and the `_                          ` should be in `edModel`, not in ` management`.
Hmm, so the MIME returns the content?
this was causing the build failure. I don't know if we can get rid of it.
I'm not sure why this isn't `Config`, but if it does it, it seems like it should be `:%s:%s` and not ` cfg.CA`?
How about we call `rollback` here?
this test is failing because the `byte` is now empty
i think we can keep the original here...
I'm not sure this is a good idea, given that we are getting the response from the client and we're not doing it anywhere else in the client. Are you assuming that?
@mfojtik this is the bug fix.
This should be ``None`` and should be ``None`` I guess
I think we can just do this: `when_SPI && ...` and then check if the new delegate is in the purchaser? `
` entry` is not in scope of this PR, it can just be `has_fee(tx.estimates())`
Isn't there a point to put the `IsTopLevelCondition` condition before the call to `IsTopLevelCondition`?
Hmm, this will not work. I'd say that `DEFAULT_alloc` would be a more precise name. What do you think?
I am not sure how this will work for other languages as it seems like this will not change behavior in the code, right?
why change this?
Why is empty? Shouldn't this be in the first place?
Is this a "accidentally found" bug that is being removed?
password_reset is already reset
I would use `require` to be sure it is a valid value
This change doesn't seem to be related?
this is the same as the "shutdown" part, I don't think it makes sense here.
I'm not sure how I feel about this more - it's not the "policy" of the message. The policy is the correct version.
If it's a private method, then you should have `Start` be a global variable.
Is this used by other packages?
This test is failing on mobile so I would remove it
I think it's better to just use `newSlice`, as you're in the above `WaitForInstancesSignal`
I'm not sure this is the right place for this?
What if the webhook is used?
I think the "epoch" part of the code should be renamed to "fixeddifficulty"
why are we only using the `plz` here?
Maybe we can get rid of these paths?
I am not sure if this is the right approach. It's better to use `mapper` instead of `that`
I don't know if we want to make this change.
Isn't the int32 an int64 here?
You can remove `DECIMAL_LITERAL` here as it's not used anywhere.
remove empty line
I think we can just delete this line now that it's just testing the change. We can't change the result from the test if we need to change the behavior here.
Can we just make the Windows and process names `ctx.exe`?
I'm wondering how we would want to have this check in a bunch of other places. I think we should keep it there in the `ServiceConfiguration` and use it here.
I'd suggest to use an enum instead of an enum here (and in the test case `line`) to be more explicit.
I'm curious what was this doing? I'm assuming you've removed the old version in the set, but it's no longer used. Can you explain?
I think it's better if we're removing `s.Noticef("Server Exiting..", sig)` here and in line with `log.Exit(1)` in line with other similar methods, we should be able to remove `log.Exit(1)`.
I don't understand how this is related to the issue...
It seems like these are the only parts that need to be set by the `aws` variable. Is that what we need?
This is the one line change that breaks the test failures.
Shouldn't we also do this when `CurrentToReachCollector` is null? This way we will be able to remove the logic from `CurrentToReachCollector`
shouldn't this be `std::unique_ptr<size_t>` ?
This should be done in a separate pull request.
What about using "Long"?
`expect` doesn't seem right. What is the expected format?
This is going to cause some problems when the zone ID is created and the zone ID is not in the middle of the zoneID
I would just call `def __call__(self, mean=(0, 0, 1) > self.prob: ...` because because it's an intentional thing, I think you'll be able to just change the logic to just `def __call__(self, mean=(0, 1) > self.prob:`. The logic is to change `f2.Serializable(0, 1) > self.prob:`.
I think that this should be a separate PR
This will be very expensive for testing. We should just remove the `testUrl` parameter from the test.
this lock is not necessary
can we keep the old name of the string as `spaceId`
I'll be removing this in this PR.
@Jjagg - Isn't this the best way to implement a `.asing` to `.asing` on the `coupon_id`? I don't understand why this is needed, but it seems like it is not used anywhere. Can you make a small helper method for this new parameter and use it?
This change seems unnecessary to me, since its now public and private, we can't just remove the private `DBPDataSource` interface.
This method can be deleted
Should this be the one above?
Please use a better name
This variable should be used in the `seelog.xml` file.
`manual_wall_time_option` will always be zero-initialized, so we can remove `manual_wall_time_option` from `manual_wall_time_option != 0`.
The `Unwrap` function is a bit ambiguous and could be renamed to `iswrap` to match the error message. Maybe a better name?
Why is this changed?
Can we remove the default "houseOwnedByAccount" and just update the default "houseOwnedByAccount" to not work ?
I removed this because it is used by some tests, and the changes in the file are not related to this PR yet.
`this.driver_.getExecutor().w3c` should be fine, no need to pass it here.
I'm not sure we can get the whole point of all the tests here.
I think this change is fine.
This file should be named `package main`, not the root.
This should be removed.
What's the point of this include? Can't you just make it `_POSIX_C_SOURCE`?
Should `client.getLocalPlayer()` be null here?
Is this something we can consider to move boolean into a constant or a constant with something like `<= -1`
I think this is a good idea, we have an issue about `host-Detected-Locale`
You don't need `break`.
`StatusContinue` is used only in one place in `NewStatus` and not here
`copy-groth-params` is not used anymore, please remove it and add it to `shardParamCache` in the next commit
I wonder if we should make this a `concurrency` and use that instead of `concurrency` and just use this in the `concurrency` module. This way we can avoid this kind of optimization if the user is not using this API.
why is this a pointer? shouldn't it be a pointer?
Can this just be "return" and not "clang-diagnostic-'"?
I think you forgot the `:` here.
The `return` statement was removed.
This is a leftover, we can merge it with the new controller
This is an example of how we want to do that. I'd rather not do `run_command(callback, options)` because it will be the same as the first `--long` (as in `run_as`).
This needs a bit more readable.
Why not use `alASNFromConflict`?
I think we may be missing a test to ensure we never return false.
I think this should not be in the changelog.
should we remove this?
Should we use the enum value from the initializer?
Can you explain why we need both `tx_begin_read` and `SubPlatform`?
This should be done by the new way.
if it's a `op_data[1] == 0` it's an integer. It's not the false false case.
`while(offset + bound / 2, Math.min(offset + bound, length), target, length)`
I am not sure about the `fullResult` property here. It is possible that the serialize can't be undefined for these fields to be undefined, which is not the case. I think we should be able to just serialize the input to that instead.
Why not just `security"`?
It's not a good idea to move these to separate folder since they are only used in a single file.
Is there a reason to do this at all instead of in the `if (this->AutoFireEnabled())` block?
why did you remove this?
I think it would be better to do a `current` here. I think it would be more clear and clearer.
I don't understand why this needs to be here since it's an if statement, but I'm guessing you want me to add it to the `else` branch
You don't need to check that the example is a scalar, you don't need the string as you are in the array
Metrics/LineLength: Line is too long. [82/80]
I'd probably move these to a different module.
Please change `Objects` to `MoreObjects`
Can you use `mock` instead of `mocks`?
this was incorrect. `id` will always be empty.
this line is the one from the output file, not used
I would use `api.joplin#isNotEmpty`.
I would put these back so they can be removed entirely (in order for the new functionality).
add new attribute for these
the `blob` is used by both a module and a module that can be used in a module. This is a very good thing and is probably the best place for it to be used. `construct Bucket` is a module, but it is not a module, so it's a module, it's a module and could be renamed to something else (or something like `2D`, etc.).
nit: remove empty line
I don't see why it's necessary to make the list comprehension happy.
Is it possible to get rid of thesubscriber at all?
@ruflin I think this should probably be renamed to `axe.configure` (or something similar) as we do elsewhere.
I think it's better to have a single rule.
Can we use `map` instead of `Source` as the first name?
This doesn't work with any code that doesn't use the `TValue` parameter, but doesn't use `Dictionary<TKey, TValue>`.
Use the new Ruby 1.9 hash syntax.
this should be `return nil`
Why are these `Boolean`? I think it should be `boolean`.
I think it's better not to call this `window` instead of `pass` - it should be an instance of `window`. It's probably not clear if this is a different approach, but we can just call this `pass` - and use the `pass` to call it with a different value.
You can remove this, since the `Task` attribute has already been added by this PR.
The existing `startTime` is used in many places. We can avoid this cast now. We'll need to make sure the existing `startTime` is a `common.Wait`.
Line is too long. [81/80]
Let's use `JSON.json` here.
Shouldn't it be `nil`?
I'd rather have `@` here, and just have `typing` in the `get` method, it will be `Optional`.
How is this a breaking change?
why not just use `h2o_http2_wbuf_buffer_prototype`?
This should be a `Command` or a `spec`
I think it would be nice to have some sort of flag for these, but that's not the case anymore.
I think you are going to miss this, it's better to replace WebDriver directly with `static`. Otherwise you can remove this `WebDriverException` in the future.
This is a new property, I think we can use it here to make sure the value is null or empty (the value is empty). But then it's fine as is.
Can we move this to the `all` module? We should probably add it in a separate PR for now.
you should add a `nullable` after line 218 instead.
I don't think we should add `selectColumns` here, the select should be checked.
Shouldn't this be "HoodieBoost()", since it's not called from the "is_QueryQuery" one?
This method is only used once in `/` (and the `platform` variable above) and it is no longer needed. The `punctuation` should never be set in the `export` method.
The secret name and secret still has the secret name, right? The secret name should be the secret number and the secret name should be fully fully launched in the secret name. In this case, we could even go with the secret name as well.
We should keep the `slaveOk` value here and not have the default value here?
this is not correct... you don't need to check it again anymore
@danrot what do you think about this for clarity ?
Remove empty line.
Can you change this to a buffer size?
I don't understand the point of adding new username in the view, but I think it's not necessary to do it in the loop.
Why are these changes necessary? The test is failing because of this change.
Can we also test if we're using that?
This is a breaking change.
This is the only change I found. I'm curious why you changed it to use `*` instead.
This is the only change in the test name, should be `Boop` instead of `err`
I think it's better to use the `lock` function.
This is a breaking change as it's a very unfortunate.
How about using `.first` instead of `.to_s`?
This change doesn't make sense to me, but I don't see a reason for the new `build_package` argument.
Code standards: Please add a space after commas.
Shouldn't the elementText be changed to a ExpectedCondition<Boolean>?
This was a test that was not working before. It was removed in #3334 and was removed in #534.
This should be `missingEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEventEvent
This needs to be #ifdef. Also, why is it needed?
Could just be a one-liner, `instanceType` instead of `diagving`
It's not clear that we are using this to store in a `setUp`, and `setUp` for the `setUp` object. But we don't have to make a `setUp` field in the `setUp` file. So, this property is only used to set the `userError` to true. I think it's better for the `setUp` to be set when we use the `userError` object. I would also suggest to add a `TODO` to remove all the read/write methods.
I think we can change `1.4.1` to ` 1.4.1`
Why not just `errno_val`?
Can you change `inbound` to `inboundHandler`? That way we won't have to change the handler in `inbound`
I think we need to make sure we are not using `StdinFilename` from the config name. `StdStdCompatibility` should be used instead. (I think it's also not used anywhere in the code but not your fault). If we're not using it, we could also move it down to the `else` block below.
I think this should be a constant.
Why this change? We only have a default setting setting, so I would expect that `dial(hostName, tlsClientConfig, false)` is sufficient.
Why is this here? Is this the only place this used in the tests? Is it a breaking change? I think we should be able to just leave it here.
Shouldn't it be `public invalid request`?
please add this to the new `Port` above.
please put this at the beginning of the file
This was a mistake before.
Can you use the shorthand since there's a lot more than one line now?
this could go into the `go-mega` package
These should be removed.
I don't see why this check is required, is it?
what happens if the netloc fails? Or is this something different than the previous `index`?
Does it mean we can't log this message?
Is this debug logs or something?
I think we should make it clear that this is the root of the problem.
This function should be `func (nil, nil) *Status`.
should this be set to null?
I think the caller could getChromePath() from this config, right?
It seems that `name` is not a valid name. It can be a different name, so it can't be a `@SuppressWarnings("unused")`.
I think we can just call the `LogDestination` variable here since it's used in the `LogEntity`.
Can you add this extra line to the top of the file?
I'd prefer to see a way to do this in a few places, maybe we could add `#452` as a prefix to ensure we are not using it as a class.
Why are we calling the string `SR`?
Can we just change the default values of '3kb' to 'deepmerge'.
I think this logic can be moved inside the `VK_` like it was before.
I'm not sure that we should have a copy of this field. If we're using a copy of the c++++, we should use the constants.
@fabienrenaud do you want me to re-enable this to `default_funder`?
This file is not used in this file. Please remove it.
you'll want to add `ignore_stages` to our linter
Do we want to make this configurable? I'm not sure it's the right fix, though.
This is a test, so you should not test anything with Provisioners.
Unnecessary since `UentryAddr` is already being used.
I think these import are unused, and should be removed
This type should be `#getKind()}`.
This is an example of what I was thinking about. I can put in an `<button class="UppyButton--circular="((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((),),), Unless I tried to do), it was wrong to fix it, but it was wrong).
`VID` is the same as `l` (and `l`). The CMake is `l` at all.
This is the fix. You are adding `vStringTruncate(scope, old_len)` to the end of the scope.
If I understand correctly, we're not using `connecting` and `required` in a few places. Maybe I missed something. I'm missing something here.
I think you meant `return timestamp > 0`?
I think it might be good to make `MarshalECPrivateKey` return a nil value, instead of passing it as a parameter. The only place this is used is that `testing.T`, so it is not the case anymore, but we could get it directly from the test.
I think this is a little confusing. Can we have a `_` property on the `Url` class instead?
This should be removed.
This should be indented one level (if the user is not using a flag)
Can you add a space after `//`?
This seems to be the actual fix. It should be `generate_special_or_mx` instead of `generate_special_or_mx`
Line is too long. [95/80]
I believe `info` and `finest` are the same, and the code should probably be inside `info` (and I think it should be the one from `s3.x`).
why not `to`?
nit: import is unused
The fact that we are not using this is that we need a generic `_` method.
This is just a cleanup
I don't like this - it will only show up if the value contains `DR_only` or `DR_disp` (and if `myreg != NULL && 4`).
This was an improvement by removing the `v3-` prefix.
>Y-m-d H:i [](start = 15, length = 8) Isn't the same name `Y-m-d H:i` going to be the same as the last line in the alias? The same question for all the `serialization` classes.
just make this `nix.vue` instead of `production`?
Dumb q.to_s[float, compatibility]
Why is this check necessary?
This is a change in behavior, I don't know if it's better to add a method to the constructor.
I think it would be cleaner if we moved the debug message to a common utility function in `flb_debug()`. That way it can only be used in the debug code.
I think we don't need an sql anymore. I believe this was the case for the `Timestamp`.
why was this changed?
I'm curious why this was necessary
I think it should be a constant in `testResult`. This is the only thing that can be used by the `assertThrows` call, so I would expect to fail it.
Do you also want to use the allocate?
during a deprecation notice I don't think we should have the same `puppet` option for all the other tests.
This seems to be a breaking change.
It seems like `%= 0` is the default. Shouldn't this be just the default? Otherwise we always call `limits.maxBoundDescriptorSets > 0`?
should this be `gboolean` ?
Isn't it a good idea to filter the tables from table?
I wonder if it's still useful to have a `c.ReconcileBootstrapData` that is passed in to `pkg/util/config/Runtime/ControlRuntimeBootstrap`?
Why not use the `pylint` class?
This should be handled by the `groupTxBytes` above?
Line is too long. [85/80]
This import is no longer needed
This is a change in behavior, but I think that's fine.
I'm wondering if we should have an index on the type and allow users to get the right type? I'm wondering if this is a change that should be done in a separate PR.
This is a bit of a hack, but I don't think it makes much sense to include `getopt.h` in the future.
@wachterjohannes Shouldn't this be the default of `hack/api-core/src/main/internal/core-mimutils.js`?
Why do we need a `=` here?
Style/Given that we are not using the `run` method anymore, let's remove the `else` condition from here (and in `replicated`). You can probably remove the `unless` part of the `else` block entirely if it's surely a blocker.
Maybe we should use `//Kernel.srand` here instead?
This can just be `&` right? We don't have a `&.` at the end of the method, but the `acme` method does nothing.
I think we should just remove the exception altogether.
This is a bad idea, but we should try to avoid doing an "if the default" check
Please add a space after `}`
This is a very specific thing, but it's not a big deal. But I guess it's just a separate commit.
The `modules` is not in the original implementation. The `modules` is not the same as `modulesProcessor`, so you shouldn't need the `modulesProcessor.Object` file anymore.
` gobblin.pre()`()` does not work. `next='pre()` is already called on the `Schema` object, so no need to add it here.
Should we use `Response.onStart` here too?
This was just dead code
I think we can remove this now that we're using it in other places as well.
You could also just `localtime` and `argparse`.
I'm not sure if we should be adding this to all the others. It's just a thought, but I guess we could use it here to make it clear that this is an enum
Should we add index on all index commands?
I think this should be a `repl_pause`
I'm surprised we have the "h2o_error_printf" and not the "fatal" error, but not the "mo_obj_value" error.
This looks like it is a test...
I think the original fix was correct.
I don't think we should add these to the new `common` package, since the new one is only used by `letp-lib/common`.
Revert this one
This change isn't required.
why 10 * 10?
you have to move this import to `src/server/server`
why are you removing this?
I think we can move these to the `config.go` file, it's already there.
Why is this removed? I'm not sure if it should be removed. I believe the `send` call here should be removed, and if it was removed, then it should be moved to the `if` block
Should the `checkExprDepth` return `null`?
Why did you change this? It's not related to the PR.
Is this still necessary?
We need to update the doc string.
I would not expect an example that the type of the `mapper` is `null`.
Please use `print_list()` instead.
can we make a constant for this? I think it's not a good habit
nit: let's not merge this with the above.
Can we use the same method name for bodyParamName? The method name should probably return `false`
Remove this one, it is not needed
Can we keep `WindowPoStVerifyInfo`?
This line should be kept.
This is the main change to the CountryField::FORMAT_ISO_3166_ALPHA3. In other words, you may have to change this line to: `if (host.form.Country('CC') ? ...) : Countries::getNames() : true) {`
I think we should use the version from the current match instead of the current match. The current match is the same as the current match, which we are not using.
This parameter seems to be unused?
Do not leave a TODO, just leave the code.
I think this should also be part of the new `--conn` retries, as that's what you want.
This is an error condition, so we should use `repr(...)` instead of hard-coding the output type.
This looks correct, but the `ZMS` should still be `public` and `public ZMSImpl`, right?
this will set the tests to `true`
I think this import is unused and should be removed.
Are we sure we're changing the signature of this `DiscoveryField` instead of `Schema`? It might make sense for a user to have a `new` object that has the type info.
I'm wondering if this can be moved to the `container` package? It seems like it should be the default (i.e. the environment variable `os.Getenv()`).
This should have the same value twice
This will need some `gulp help`s
This should be a `pid` (or `graphd.pid`), since it's a new option in our `DEFINE_string` I guess (it's the only one that should be)
I think ` 32 * 1024 * 1024` is the correct default here.
Shouldn't this be "log" ?
I don't think we should be changing this field, we could keep only the `key-` key in the state key, since we are not using it anywhere else.
Can you also add `extraextraextraextraextraextraextraextraextraextra` to keep the mock mock?
This should be `if (!cursor) {` because we don't have a default value in the constructor
You should be able to use `mailhost.mail_if_unreachable` here, as this is a different setting for users that don't use it in the `initial_this.js` file. I'm not sure about this change as it's used in the test suite.
why not just make this `Debug.Assert(!_pinHandle.IsAllocated, "Ad-hoc memory block wasn't unpinned");`
I'm not sure if we should change this to `if (props.defaultValue) {`. The reasoning is that `defaultValue` is not a value, it has to be set in the constructor, and we should be able to set it in the first place. Maybe we should just keep it as is and just delete the value. It's not clear from the code that we do not need to deal with defaultValue values, but I'm not sure we can.
This file should probably be removed. A `WordStreamTable` uses `WordWidgetWidgetKeywordTable`, which is not used in the code.
I think we can drop these to use the `service_api` package.
This is a change in the test that was not related to this pr ... but the `<v3>` was not used.
Why `||` here? The `1` is a long-term, it's just a long-term.
why was this removed?
I would rename this to `QueryQuery` as it is easier to read.
This is only used in one place, not in this PR. We can't remove the pkg.
Why is the `Message` still required? If it's not, we can remove the `try` block.
Why not just use the `mu` variable?
why not use h.Manager here?
I'm a bit confused, how does it get called?
this was causing issues on master
This should come after the err: if err: if err: if err: if err: if err: if err: if !include == 'mt2203.h.'
The original implementation of this is a bit confusing, but it seems like a good idea to add some tests to the docstring.
Is this not the right place to remove?
Can we just use string to make it more clear what the return value is?
This is an API change. I don't think the `Create` function is being used anymore. I think it should be removed.
Use the new Ruby 1.9 hash syntax.
You can just change `cluster` to `kindBinary`
Why was that removed and it's part of this PR?
I think the `err` should be moved to a helper function.
Why is this change necessary?
Is it not possible to use an enum instead? Or should the new enum be a global constant?
I think we can remove all of these from here.
shouldn't this be a `map`?
This isn't a valid description, right?
Why is this needed?
Can you add a check to ensure this is only set to true in the test case?
I would prefer to not do this in a separate PR.
I would use the constant here.
this is wrong
I'm not sure what this means. Can you make them `compile_PATH` for consistency?
Shouldn't this be `TPluginID_count`?
Nitpicking: Can you rewrite this so it's easier to parse if the key is not empty?
Why did you remove this?
Why are you calling theexception method in this method? I don't recall it has to do anything.
We cannot delete the unused file.
Is this an unrelated bug fix?
I'm not sure this is actually going to work? The function returns a new builtins.
It's probably better to use `isMemoryCircuitBreakerEnabled` rather than a `cpuCircuitBreakerThresholds`
what happens if we use these two classes for these rows? Do they use a `@RewriteFiles` ?
Style/UnneededInterpolation: Prefer to_s over string interpolation.
Shouldn't the category name be the DOM?
We could remove the `cancel` field from the `Cause` list.
I think you can useHttpHeaders.CONTENT_LENGTH.
Can't the length have a default value?
The issue I was about about this. I am not sure if this should be a `assert` statement. The `utf8-assert` API should be added to `rules` as well.
Can we move this to a separate file?
Why not just remove the whole `responseMessage.IN bridge bridge` above?
I am a bit confused by this. We're just using `alinfluxdata/ry` in the `alinfluxdata` module. I'm wondering if we can just remove it from the `universe` module in the `experiments.js` file and use it in the `alinfluxdata` module.
can you add a `double EPS` here too?
Thanks for the PR! One question: what is the reason of this change... is it because we are only using this package with your other import statements, which is why we don't need to change?
Shouldn't that be `std::string *error_code, std::string *error_code,`?
This is wrong. The return type will be `false`, which will never return non-null.
why do we need this?
`tracesdk` is used only for dev services and should also be renamed to `sdktrace`.
This is a breaking change, and should not be part of a returning a promise.
(style) unnecessary whitespace before a quoted newline
I am not sure if `fileFormat` is a good name. Could we name it `loggable`?
should be `\n`
this is a BC break, right? why was it not before, and why do we want to ignore it?
why is this one being removed?
Can't we use the new `AsyncLocalCompat` field?
`formatPrefix` -> `format string`
Should this be removed as well? e.g. for a sync sync?
This is going to make the `VUID-VkGraphics` key part of the error message. Is it worth it for now ?
Why do we need to change this to `as_TRAFFIC`?
This is not a big deal, but if this is a separate PR, it would be better to use a `.format` here instead.
why is `backgroundCtx` only used on Unix?
Hm, why did you make this change? I think it's not used at all
why this one is removed?
I think we need a unit test for this.
Hmm, why is the default needed here ?
This doesn't really match what you have in the E-pack project. We have the option to use `REGEX E-packaging` which means you'll end up with an error.
I'm wondering why this change was there for testing. It looks like `test-event` and `test-event` are now not `11` anymore?
This is wrong. You should check if `isset($metadata['multiple'])` is empty.
This is still necessary. It looks like the changes below are not related to the PR.
This should be allUsers or allated.
Just for my own edification: Is this supposed to be `verbose` or `cwd`? I'm wondering if this should be `verbose.cwd` or `verbose.verbose`?
Please add the description about what is done with the new log.
This is a bit of a hack to me, but I wonder if we should check that the `funder_id` is blank and not just `.blank?`. I think `.to_a` is the preferred way to fix this.
This is the only change that affects us when we don't have a Boolean.
Why is this using the environment variable instead of the environment variable? Is it something we want to make sure that we don't have to worry about?
This test is failing on windows
I don't think you mean to add a helper function, I think it's better to just have the interface `nil`. It's a bit of a nitpick, but if you're doing this, maybe it is worth to make it explicit? Maybe something like `info.RunWithTimestamp`.
You can probably just do this in a `before_action :redirect_if_disabled`
This was a bit weird, we do not have to copy the source bucket into the same source. If we do, we need to copy this.
Please put spaces after `}`
I'm not certain this works, what if we made this a feature that's used for instead? I'm not a fan of having an SP for the feature itself.
I think it should say "Could not write the new type" instead of "Could not write" (which we should never be thinking about).
Are these imports used now? It looks like they don't have a problem, but I think they don't have any impact on the UI.
I'm not sure if this is correct. I would expect `.12.6` to be `-0.12.6`, or if it is not there, you can just check that it is 0.12.6 or not.
This was a breaking change, and it was not related to the PR, I think it's still useful to have it here.
log the message in the message too long
Code standards: Please keep the space after operators.
I would move this call to `setup_profiler`.
We should remove this. We should not be able to run this locally.
I think we can remove the `package.spec['libseccomp']` package as the default package is not used anywhere.
Should we be returning NULL in this case?
This function seems unused.
I think it would be better to just put in the static function. I think that in the case we're using this function in the code base, we wouldn't even need to add this in the `<object,object>::Host>` at some point.
In general, the attemptsCount will never have a per-attempts Count.
This was unused.
I would prefer to keep the API compatibility. It's not clear what is happening here, and it's not used anywhere in the code.
Can you remove all the `&&` from here? We don't have to do so, but it's just me
I think the `remoteHostIsNonLocal` logic is unnecessary here. We are calling `getNonLocal` in `pkg/config.config`, and that is the default for `config.config.ConnectionsRateLimitingCount`.
Not a good idea to change this to `isNullOrEmpty` or something.
why this change? Is there a reason we are removing `_` from the package_stats?
This should be `_auto_indexable_2d`.
Will this break the main library for all versions of the build build? I think the version should go in the first place.
This is a little confusing, why the release?
Isn't this the same as the `expr_object()` above?
I think we can remove the `ws` call below.
This can probably be removed, too!
This is an unrelated change but a bit unrelated.
Could this be `published.getResultList()`?
The default is `False` in Python 3.
It's not possible to have this property as a non-nullable dependency on the `MinDataRate` field. It would be better to have this method only once and avoid this property.
`recePoolClaim` is used in a few places in `HiveStorageConfig` and some `Storagepool.Name` and `makeiveStorageConfig` and some some of the other places in `HiveStorageConfig` that are used in `recePoolClaim`
This needs to be named "config". It's not a valid service for a specific reason
This is a different name than the other one you added. It's not a big deal for this PR, but I'm not sure we can't change it in this PR. If you don't have this method for the defaults, you can just call `defaultRenewBeforeExpiryDuration`
The name `rset` is not really helpful here.
I think this is a little confusing. Why is it not? The error message below is "no logging is empty".
why not just `formConv2dPack`?
I think this should be `ValueException('('nameof(spanContext)} must be valid'))`
Why did you remove this?
is this going to cause problem in the past?
I think our coding style is wrong and is wrong
Do you think this should be configurable? Is it just the default value or the default value?
Is this intentional? I don't think it should be, it's the same.
Hmm... this is a breaking change as I can see.
should we remove this?
This line seems unrelated?
Should we call the `responseWriter` instead?
Is this needed?
I think this will be a good place to change. The `mining successive` is the new value for the new `clock.DefaultEpochDuration.String()` function.
Let's remove this. We only import the main library
We could add a `#add` method for this, and use it in the `padding.add` below.
Do you know if this is the correct use case? If it isn't, you might want to use something like `use-case-support-resources` or something.
nit: I would prefer if we used `tagLock` instead
why is no longer required?
This should use relative imports
`WebServer/Hudim` is a good name.
I'd prefer this name as "returnApplicationBuilder" instead of "none" to make it more clear what that does and what the "noneApplication" means.
Why is this translator public?
Should this be a `FieldField`.
Shouldn't this also be `rescue Gibbon::MailChimpError => e`?
I think you should check if the username isn't empty.
This is the wrong place to put this. I think we should be using a specific name for the Xwayland.
This isn't needed.
I don't see the point of this file?
This is not a good idea. This is not the same problem with the old version. It should be the same, not the existing version.
This will not work, because the `<targets>` is not really a data type.
This test should be updated to use `Batch.execute`
This should probably be `Converter{}`
I think it might make sense to move this to a new interface and use it in `rpc_models.go`
We could do this in a separate patch: `DateUtil` is a `default` and so in the future `this.releaseOrCreateDate` would be better.
why is this removed?
Please add a space after `if`.
Can you add a note here that these are indeed need `inital`, and other types?
Why are these changes necessary?
Same as the other methods, use the existing `true` instead.
Can we move this to the try/except block? Seems like the idea is that if there are more than one `grab` view we can set it to the same state. It's not obvious that the `keyboard_state.grab` will be the same as in the above code. This would allow the `grab` field to contain the number of keyboard parameters.
This will be handled in a transaction
Isn't this the same as cascade? If so, should we just use the existing cascade here?
I don't understand how this will work - but this looks like a duplicate line of code, and if not, it will have a diff, I think we should just make this a one-line class.
I'd prefer we don't use `editInPlaceAnnotation` in the name of this parameter.
I think you need to update the type annotation here as well?
Can you use the constants you defined here?
This should be removed.
I think it's fine to just delete the whole function here. I'm fine with it.
I'd like to keep these #ifdef examples.
this is a bit odd, why are we passing the length instead?
I'm not sure about the `e.log.Namespace` here - I don't know if it's worth it.
this should be `@Parameter(names = "-cache", description)`
It's not clear to me that `aria-query` is optional. What about `#query: require('aria-query')`?
This was a public method which does nothing. Why is this needed?
this is a breaking change. It is not used
I would suggest to keep the generated field of `gowire` as it was before and we can change it to something like that in `gowire`
Can this be `true` by default? `false` is not used anymore.
I don't see how this `Timeout.Infinite` check is done here, is there a reason for doing it?
I don't see any new code changes in this file.
nit: you can move the import of git-utils and merge with the other unused imports (just in case you are already using it in your IDE).
@deads2k this change is ok. We need to make a test for that too :)
The message should be "the value is stored as the MPI object."
I would suggest moving it to `*_config`
nit: you can just return `true` directly in the `if` condition.
Is the extra trailing slash really needed?
It would be better to move the `onStartSend` call into the `onStartSend`. It's a bit easier to reason about.
` IRI` is already available in `MethodHash` so you could change this to use `leader.GasHash`
I think this can be removed.
I'm pretty sure this will be a problem if the `externalFormat` is not `null` in the first place.
@rhatdan @tnozicka I think this makes sense as the default we are not running locally. Try `ddev start`
This test is not very helpful. Can we assert here instead? `sns_backend.sms_messages = []`, `sns_backend.sms_messages = []` ?
I would use the `path_auth` or `path_auth` instead, which will be more clear.
This one was the bug I missed that
nit: I wonder if `locally` is a little more readable as the `AutoFilesystemTrimUsage` has to be `locally` and then call `AutoFilesystemTrim` from the `kube.locally` (the `ProcessProcess` does not have to be the same as the `ProcessProcess`. It would be better to use the `ProcessProcess` method in `kube.Sdk` and `ProcessProcessProcess` that would be passed to the `ProcessProcess` method.
@agramfort this will cause a bunch of `labs/agent` paths to be present in the agent, and the `agent` paths are created in the agent.
I think this should be `config`
This is a breaking change, but the `merge` function doesn't need to be escaped.
This is wrong - we have a OSRM_EXTERNAL_MEMORY set in the OSRM_EXTERNAL_MEMORY form. It should be removed from the OSRM_EXTERNAL_MEMORY value.
This is the wrong place to removed.
You can use `true` here.
:+1: for changing `scale` to `pt` :)
No need of "true" in these flags here, we can just get away with "true" in the context and let the user set the flags if they're not defined.
This is wrong. The type should be `default` or `default` (the default value of `nil`).
I think we should just change `proto` to `rpc-protobuf-raw-response` and remove this parameter as this is a part of the proto's configuration, and we can just remove it from the proto and just change this one to the proto to the default value.
Nit: I think you can use `const`
I'm not really sure if this is a good idea (not really sure what `underlayer` does, but the current logic is about). @bparees is this the best solution?
The method is unused. It is no longer needed.
I think this can go in `on_mysql_to`
adjustment -> do_adjustment_NAME, we need to update the partitioning of the variable.
Why is the FlowReference part in a copy? Should we not use the FlowReference?
nit: I think we can drop this line now
nit: can you revert this file?
This is a typo. `torch.11`
This is the same fix as in line with the other similar methods in this file
Please add empty line above
Can you move this to the top of the file, so it's easier to parse it?
I'd use `FactoryBot` instead
you can use `url($uploadsPath)` instead of `asset`
Why not keep `builtins` as the default?
Is this needed? If the test is failing, the test will fail and the test is failing. If the test doesn't provide any benefit and the test will fail.
Can we use cstor directly here? We don't have 10 per test anywhere, so I'm curious why it's needed.
Why was this changed?
This file is not used anywhere?
This should be done in `interface.go` and not here
Maybe `Boolean.indexed are zero indexed`?
This is a bit of a logic change that I don't think we should be changing the logic here. I think we should be able to just get rid of it.
Shouldn't this be `0.0.0rc0`? Or are we guaranteed to always be `0.0.0rc0`?
this was just a bug in master
Why not make SparkStructLike final?
I'm not sure this is a good idea. This is because the `base_type` method is called on both sides of the DB and the DB. It seems that we don't want to call `IsPossibleDynamicType` anymore, and we don't need to call `IsBaseClass`. The same goes for the `CompilerType` one.
2015 vs vs PACKAGE
It should be `head == nil`.
Why did you change this?
This is the wrong place to put it here. We are using the `json.RawMessage` in the config instead of the config.
I'm not sure about the idea of this, but is it really not that the CN is in the same manner?
this is not needed.
It would be nice if we could have a single option for the `--NetworkService`.
I think we should add a `TaskStatus` to `ts`. It's more explicit.
This will only work with `reinterpret_cast` and `max_NOT_PATH`.
I think we can just inline this file. It is not used.
Why is there no `NoError` call now?
Maybe we should also check for nil?
Why was this removed?
Why is the check removed from `L3_5`?
Is there a reason for using a `GroupByAgg` variable here instead of a function?
I would prefer to keep `.getNamer()` here. This is the reason why we are not doing this.
maybe use `len(identities)`
How about adding a `if` statement to indicate the error is raised?
Can you remove this as it is now testing the new error class? This doesn't look right to me.
I think we need a `synchronized` here, since it will always return `true` when a `Update` is `false`.
Is there a reason we are using `skip` instead of `('`?
Can we make this a `Config.meta` and use it only in `Config.v2` instead of `Config.v1`?
This should be a `pip.install` file instead.
Is this error still valid?
is there a reason this TODO is required?
I would use `==` as we do elsewhere in the code
I'd rather you use the `normalizeIdentifier` method here.
Should we check if `formField` is a form or `$this->safeMode`?
Is there a reason for this to be `True`? If we are not going to do it, I'd rather avoid the `== True` check.
The `#if` is removed from the message.
I'd probably add a line after `if (mrb->exc != NULL) {`
@lilleyse can you confirm this is the right place to remove `gocoverutil.go`?
I think this can be removed too.
This is the fix. This needs to be reverted.
I'd prefer not to use `char` as the key name (as it makes it a lot easier to grok).
This will be set to -> which
Why is this necessary and not a debug print? If you don't want to set the default to `""`
This test is unrelated to the current change.
can you add gitea copyright line to header (and keep gogs one next to it)?
For example, you could change this to `block_processor_full_size` and replace the following with `isinstance` and `split_full_size`
why this change?
Should we keep this for all tests?
The only thing I'm not sure this is the right approach. The only thing I'm trying to do is that `GetNameForID` would be a `!` and `x.name` wouldn't work for any other object of the same ID. So we could also use the same ID to be the `&&` instead?
This is not correct. FPGA_INVALID_PARAM should be returned to the FPGA. The FPGA shouldn't be enabled.
This include block can be removed.
I think the `need_unmap` value will be removed now, right?
Why removing it? We don't seem to have 8chaos 8chaos anymore?
This seems like it should be a `common` interface.
This isn't going to work as expected, as there are only one instance.
Why cast to str here? Why not just use cast directly here, and not in the `cast` function?
This seems unrelated to the change?
What about nullability? I think this is the right thing to do
why not `m.Total`?
This is a bit of a weird fix. It might have been better to just use a number of strings here. But I think the code is better, because it is a number of strings, not a number of strings.
The fact that we've had a couple of things to add `AWS` and `AWS IAM` here are now the only supported AWS Identity. Is that the case? I think I had had a better idea here.
I'm confused. Why is the `command` now disabled, it's not `None`? Why not just `len(check_commands) > 1`?
This is a `full_backtrace` object, so the `api_not_false` method can be removed.
Why? This file should be empty?
I think this should be `mproxy.util` and not `mitmproxy.util` right?
I think we should add a new description here to make sure we're not relying on this.
This is not the correct place to put this. The rest of the changes are just so that we can remove this line. It makes the diff very difficult to read and read the tests and then we can move this to the `PY310` package (and remove the `import`).
Is this error-prone because we don't want to log here?
This is not a good place for the `static inline` field. You should be able to do it for ` te::get_row_count()` and `get_column_count()` in `lib/utils/docs.go`.
a lot of assertions here is to move the assertion to a separate commit?
Should we also update the test with `TODO`?
What about the new test, which does not test the wrong behavior?
This needs an update to `_check_singleton_comparison`. The `in` is the default value.
This method is called only by the `aker` parameter, which is called in `JsonStoreStore.java` file. I'd rather see the method named `isSatisfied()` that takes an virtual parameter, which is called by the first parameter.
I'd suggest to use `my.mysterium.network` instead of this new `my.mysterium.network`
I think this can be removed.
I think `AnnotatedCodeLocation` should be renamed to `ISet`, as its a public method.
Do we want to move this import before the `config`?
Shouldn't be a `Set` or a `@Deprecated` since this isn't a boolean.
I'm not really sure why this is adding the new parameter. Do we really have a better description for it?
I don't think this is a correct change. Do we have a test that checks if the current behavior of the `Search.prototype` list is empty?
I think you should just check if null here, it will always be non-null.
We'll need to make a copy of the value to the user. The idea was that if someone sets a copy in `createManifestMergeMinCount` and they can run it on `createManifestMergeMinCount` but not on the client. We should probably have a copy of that.
This should be str(input) for the expected type. The string should be `str(input)))`.
No longer used
Why do we need a different `appErr` if we're not doing anything other than `wire.Error`?
I think this should be an int, or an int?
I think this is the wrong place for this.
I don't think this is right. The `False` class is a string. It's only a string, which should not be present.
Why is this needed, can't you use the same name as the file for all new tests?
I don't think it's an issue here...
Rails/DynamicFindBy: Use find_by instead of each.
I don't think it's necessary to add a path_for here if this defaults to true?
Doesn't this need to be a `urlnd_create_reg()` function?
I'd prefer if you didn't add these to the `title` namespace as it's a bit of a hack.
This was a separate test and made it impossible to parse without a bunch of changes in the PR.
I would add the `ignoreState` field as a field in `SecurityGroup`, like other API methods. We have to do this in a followup.
We don't need this, it's only used in the `MNEetools` package. Can you move this import to `MNEetools`?
Would be good to add the info info here.
Should we use the `logrus` package here?
I don't understand this change. Isn't it the case that value_env is null? If it's not, then we shouldn't be checking that value_env is null, if it's empty.
No, it's not necessary to add `Subscriber` in `Message.Ack`. The `update.Ack` is not used anywhere else.
It looks like the only new `_Name` is used to check whether the bool is `_Name`, not `_Name`?
Nit: Can we put this as a newline?
Should we do `MDClient` here instead?
Could this be a `@Nullable` or a `@Nullable`?
This line should go outside the group - that's what we usually do in production
Shouldn't the `err` be used instead of returning `err`?
Does this not work with `self.python_setup_server_enabled `?
I would prefer to not have it as part of `load_merge`.
This change is needed because of the change in the commit message.
I think we should make this change to `vers` instead of `nil`
is this still here?
I think this is a good idea to have a more general name. It should match `lion` or `lion/lion/lion`
@smarterclayton can you check the consequences from the change?
Why not just remove the default config? Seems like it makes the user unstable.
Why is this needed?
"This does not be a helper function" should be a helper function.
The `req.version_ref()` call below is now unused, which will cause NPE when using the new version.
I would use `ResourceLang`. It's not a subclass of primaryLang object.
Please use `''` instead of `'' === $url`.
I think it might be better to set this in the `href` module rather than on the `setting`.
@jridgewell I would say this is one of the time we get to be able to get a warning on the part. If you do not get a warning on the part, then the message will be very useful. I would have expected it to be an error.
We can't use `Content-Type`. It will make the code simpler.
You can use the new constructor to avoid the new one.
should we use https here?
Why are we setting the name here?
Please remove the spaces around the concatenation operator.
What's the purpose of adding this class?
Nit: This test is not needed anymore
I think it is not worth it. `should_component_be_active` should be `undefined`.
I'm confused... Is this necessary? We already have the `callback` attribute in the `info` list.
We don't need to do this here, just use `sign_in_as(admin)` because it will be an action in the controller
This is the one place where I'm missing something. I would say `-O` is more correct, `-o`.
Why not use `beforeKey`?
you need to also check for an empty map here.
I would suggest to move `listen_count` to `need_exact` so that it can be set in `request.args.get`
`add_transfer ` and `transfer` should be `query`.
You don't need this, it will already be in the core, right?
sftp is used to remove the "server_command" option. I'm not sure why this is here. As such, I think "server_command is considered considered when re-assigning the client. This subsystem is used for the zero option, and it should be used for the zero option. As such, we can add a new subsystem to this option, if the option is ignored when server_command is defined, then we should add a new subsystem to the client.
Why are we removing that line?
This should return a boolean, so we can change that later.
I'd prefer we keep this file in a separate file, but that's probably not the best place.
I'd recommend renaming it to something like `%s` or `UNstr_work_fetch` or something like that.
This should probably be a `error` error, right? I'm not sure we want to be able to make sure that the error is logged.
I think it is better to move this outside of the `if` block.
I don't see this used anywhere. Can we just use `dst.Spec.SecurityGroupOverrides`?
Should these be dict, not dict?
I think you mean `shouldshould be (!dom.isFocusable(el))` instead of `!dom.isFocusable(el)`?
identity import should go into the group above.
You should also add a `function` function here.
Does it have to be on both cases? I mean, if we are going to start using `encode` in `start` we will need to pass `c` to `p`?
I think you meant `if (!eclipseFormattingEnabled)`.
This should be `orig_mocks_syntax`.
I assume this should be 2014?
I think we can get rid of the `aws_sdk_s3` here too, right?
why is this needed?
Is this just for testing?
> ... [](start = 24, length = 4) nit: space after `if`?
I don't think this is a valid service, but I think the `Client` is a little too generic.
I'm assuming these will be nil for all platforms?
I'm wondering if we should keep this private? I don't think it makes sense for namespace, but it would be nice to have it take an implementation detail.
Maybe we can just return nil here?
I think we should add the `<providerReference>` tag in the `<video>` tag.
Can we also delete the empty line?
This is a pretty big change, but we could move it to a separate PR if it's only used by the new one
I think it might be better to use a `@memberof` here instead of a `@since` (if there are no descendents)
I would prefer if this was a private function, instead of an `_msg`.
It would be cleaner to do this with a simple test case.
@karlier I've been adding a new dependency to `cstd` in this file. I think it will be easier to use `cstddef`, `cstddef`, `cstd` etc. and `cstd::` to get the same behavior as the `Cstd` package.
I don't think this is correct, it will be a fetchMock, so I think it should be mentioned in the future.
should there be an empty mFolder?
You should also add `multipart multipart` to this table
This would break if the user is not quilt? I would think that when the user is not quilt, we should not have a quilt.
Shouldn't it be in `q/workers` so that we don't have to add `self.dummy_response`?
I think this should be `EnableBlockServiceFallbackToArchiver` (and not `EnableBlockService`) instead of hard coded it as the default.
This is a change in behavior, but we can't do this with other `GetOrCreate`s. I don't think we want this.
This should be done after the call to `setInput`.
This is the only place where we use this method, but I think we should just make it `true` if there is no `null` value.
I think the previous code didnt complain about this, it just needs to be `else if`.
I think this was intentionally here?
The `Default` should be set as a default, not a `Config`.
I think we can keep this label labeling since it's a pointer so we can use it to let people know what the user is using. In general, we need to do the same thing for functions that have a label labeling and the user is not a user.
This should be false, so cursese, that it is not a required parameter, and we should be able to just set it as a global option.
We need to keep `clone` the `_density_xdensity` attribute here, since we are now going to use it in `clone`.
Please add a `TODO` to the message and use it to get the exception
This is a bit strange. What about `PciIo         `?
Shouldn't it be ` />'`?
The `$` is missing after `$`
I don't know how to write this as an feedback and how to use the feedbackmock instead.
I think it would be preferable to keep the 3D Tiles string and have the same 1000 as the 3D Tiles string to be 1000.
Why removing `MultiDimensionalMapping._sorted`? It should work.
@mitchellhenke would love to hear your thoughts on this one as I was trying to find out where this was being called.
This is a little confusing. It seems like a debug output will be used for the same debug output (and it is not even used for when it is used for more than one line). Maybe we could just use `if 'address=_debug_port_' in opts:`.
This would be a bit nicer if the intercept-build was not a file.
It's not clear from the API "EnablePipedResponse", but I don't think we need to change it here.
Not sure if it's better to use a reference here?
Is it correct that we flush the current value? Or does it not matter?
Doesn't this assert that `NullRepository` is null? Shouldn't we be checking that the object is null before we assert that it is null?
Is this a "go" of the "go"?
Why is this value deleted?
why addMapping() here instead of addMapping()?
This is an unrelated change, please revert.
This code is not necessary because we now allow the variable to be set to `null` in both cases. The `if` condition above is fine as it would be better to just do a `if subs != "" {`.
The package is used only in core and not in core, can we use the package for that instead?
This was just a weird point to have a limit.
I think this is better named something like `Tag Groups Tagging API`
This appears to be unused now
Can you please update the changelog
this is wrong. It is the same problem as the one below.
`configs/include_bad_conf_check_b.conf:10:19: unknown field "monitoring_port"`
nit: remove trailing comma
You can use `fd_data` instead of `summary_data` in this case.
Can we get away with a bit more here?
Is the condition not correct?
Is there a need for this? I don't see it.
if there is no error, should we return here?
I'm a bit confused by the `nextSibling` field. What is the reason to use it?
Why is this removed?
Nit: For consistency, we could move the `CreateCounter` under the `if`/`CreateS`
This is the only place the push/set is not nullptr. Is that intentional?
Does this mean that when a reaper is running on non-initiated providers, the m_history will be updated to the same process?
Why not use `time.Duration(time.gettime())` ?
I think the `!MBean.labelVirtual(virtualNode)` can be removed because `sanitize` is called twice. The same applies to the `let` above.
Is there a reason why we wouldn't just call the `ParentChildrenSyncTargetHelper` rather than `ParentChildrenSyncTargetHelper`?
I don't like this change, but I think we can just use sys.maxsize in case we are not going to use sys.maxsize, and it will use sys.maxsize as default. The code is not good enough. The code is still in a single package, but we don't want to have sys.maxsize to be a warning. I'm not sure if we can use the default value in this case
I think you mean the same?
I think this may be problematic.
remove empty line
switch the error?
Is retry really necessary ? Also, why a retry?
It is not safe to use a test case for these tests to fail
I'm not sure if this is the right place to put this - it's a `-` and not just the `-`
Nit: line up imports
What is the reason for this change?
Can we just make these `private`?
This if statement isn't necessary.
Maybe we should make it clear that it's only used in case of failures?
can you add a default value for these as well?
This should be changed to `BufferBuffer` (and the `ReadPasswordTwice` below as well).
These don't need to be in another PR
Is this still needed?
GraphType cannot be changed.
Why is the EntityRepository removed from `EntityManagerInterface`?
Isn't this supposed to be `getPos`?
Does this change anything?
This is an API breaking change. It is a public public API which is used as `_maxmaxFrameSize` in other public methods and I'm not sure how to handle the API public.
What do you think of this TODO?
I would have put it in `metrics`
This should be a separate commit, right?
The value `Gas` should be removed.
I believe the "the span is not valid" part should be changed to throw an exception.
Just wondering, why don't we just have the "go_native" check on the `dcontext->go_native` check?
Can we keep this `connect()` method in the future? We have a similar thing with `#panel` in the `fetched` method, so we should not remove the `connect()` method in `config.js`
I think this is a bug.
Why is this error ignored here?
I would prefer to see `node` in the constructor as well
This seems like it would be nice if the user already did this. For example: - `snapshotListCommandHelpText = ` and `snapshotListCommand re-enabled snapshot` - `snapshotListCommand re-enabled in hot path (`--vol` should be a `before`, not a `before`, `set`/`p`, `set`/`node`/`node`, `node` etc. This allows us to use the `method` as the `before`/`furomag` (and not a `--volname`). But I think that's the correct location.
Shouldn't we keep the pb and use the pb?
Is this related to this PR?
We're still running parallel process by default. Please revert this and merge.
I think we should remove theCanEnablePulls from the config
this should be removed as we don't need any any more since it's a different type of the project
`flash.now` was the flash message, so I had to update it. I don't have a better idea why it was here.
This will not work on parent class.
I think we should move this up to the top of the file to avoid testing the `phpVersions` value to avoid this testing. The way I'm doing is to test the `phpVersions` value to avoid a warning when a project is running and that it's running in `time.Name` and then use `time.Name` to generate the `time.Name` as a local variable.
What is the difference between this and the other functions? I'm wondering if it is worth adding an `@FunctionalInterface` annotation on the new method and adding another method for that.
The error is being returned to the `updateOrderStatus` status, so we should still update the Order resource to be present.
Why do we need this? Is the idea that `Errno::ECONNREFUSED` is only a `T` error?
Can we rename the project to `project_cache_throttle_percentage` to be consistent across the other PR?
Maybe call these `ListPowerSelectorEntries` as well?
I'm not sure we should be using this in the `pkg/config.go` file. Maybe we should just use `type UVarint`?
is there any way to make it clearer?
I think it's more descriptive here to use `get_sections_scalCase(String, StringComparison)` and `get_sections_scalCase(String, StringComparison)` for the template
Is there any reason this is added here?
We should probably also include `TODO` here and below, `an Windows Sysprep` is just for the default.
Why not use a set here?
Why not `\DateTimeInterface`?
Can you use the constants for this and the other constants?
Is s.Txn.Src() == 0 if s.Txn.Src() == 0?
If we're not doing anything other than the `padding`, we should probably be able to just use `count` here.
Would you open a new issue for moving the randomState to a randomState so we can get rid of the `randomState` at the same time instead?
(style) space required before the open parenthesis '('
@K_UNDEFINED = -16 was the issue?
wtimeout was 'wTimeoutMS' not being used anymore
why do we need a lambda here?
No need to specify the `Errno` constant here, since it's a constant. Also, `Trace` may be confusing. I think you'll want to update the `const` to just `try {...}`
I'm pretty sure this line here is not necessary. I'd remove the `if (this.appenders[i] == null)` part and put it inside the `if (this.appenders[i] != null)` block.
should the client use the server to get the user's copy?
why change the res ?
this was just a mistake and not a mistake
Why does this need to handle the `Ex`? I think it should be a `Set<T>`
Shouldn't we still use the `strdup` helper for the `xwayland`?
The math/rand and math/rand need the imports to be sorted.
Please add a blank line between `log` and the `seub`.
this is a bit weird, why are you checking for `getUNF` in the `index` case?
@mhoemmen do you remember what you think of this change?
I'd prefer we use the `config` here, not the `config` above
allowOptionalMappings -> lessMappingsMappings
i think we can remove `dict` now, as we can also remove it.
The `Export("T")` is unused.
Why do we have to change this? It looks like it is only called in `UDSServer`
This will not work if `if ($articleId !== null) {` statement is true, if $articleId is null, the `if` will always be true and the `if` will never be true, so we should just return `null`, but we should keep the `if` here as it is.
@jackfrancis can you help me understand this change and why is this necessary? It is just a `map()` method. If the `return arr` is `undefined` then this wouldn't need to be `undefined`
This is the only change I need to fix.
remove the empty line?
@matt-gardner How does this work? I'm not seeing the `is` logic here...
Why does this work? Is this the right place to do it?
I think the metric name `negLL` is a bit misleading because it is not the `elihood`. I think it would be more readable to use `_` or `_` rather than `_`.
I don't know the difference between repr and null
I'm not sure this change is required. If I remove the `finally` keyword from it, it will not be used anymore.
Why is this change required?
Why are we doing this? Is there a reason we only used `make gen`?
Does it make sense to call `beforeRetry`? `SetAnnotations` will only return Modifier. Therefore this is a `CertificateRequest` property.
I think that `IdentifierScheme` can be removed now, since this is the same as the scheme above.
I think we should put the `break` in the previous block to avoid the `break` here.
Shouldn't it be in a separate pull request?
This is the wrong place for the `if key != nil` check.
It's should be relative imports
This is the only place where we use it. This is not a good idea.
`require \"preloads` -> `require \"preloads_`
Might be a good idea to name this `layout` or `layout::count`
if false is not used, please use `== false`
I think we should just call `Spec.deployment_Deployment`
Why do you need `CustomClientAuth Auth `json:""`? Why not just use `CustomRouterAuth Auth`?
We could remove the hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex hex here as it is no longer a problem since we are using `IMvxFormsViewPresenter` in `IMvxFormsViewPresenter`.
The `typeof child=='number` variable is used in the `<source>, true>` conditionals. Should we remove that case altogether?
I'm not sure what the right thing to do here is, since you are changing the condition to `|| rawErrorData.containsKey(STACK_TRACE)`.
I'm not sure this is a good idea... Maybe we can just call the `InitAddress`?
I'm not sure if that's a problem since this is only for `event.null`?
`setZoomFactor` and `setSingleFactor` should be set along to `None`.
I think this should be `this.spring.spring.S Settings=true`
`chan map[string]Result` and `chan` should be renamed to something more meaningful? I can't see where this map was used. If we do need the `chan map[string]Result`, then this `Result` should be removed from `Ready()`
This is the only change that fixes the issue. The `id` is only used by `Project`.
Can this use some more specific name?
Is there a reason to return Unmarshal and Unmarshal directly from Unmarshal?
Static fields should stay final.
You can remove this, too
I think `Trim` should take a first param to ensure we are doing strings.Trim.
Why not just delete `tablet`?
I don't think we need to call `info()` here. We're already using the version from the previous version.
Isn't this a mocked api?
this can be changed in another commit
Why are the changes to this file needed?
I think you should also add `list()` to `ptags()` and `ptags()` to get the list (all other things that use it), `get_holdingpen_objects()` and `get_holdingpen_objects()` to get the same behavior as the old style `objects()` call below.
Can we just use a pylint disable for this?
We should add a check that the cloud ID is not present in the default behavior (I think it is not there)
I guess it is better to use `None` instead of `return` here?
(style) code indent should use tabs where possible
You don't need `super` here, since you don't have to create a new instance in this file.
This should be a separate package
I think we need to add the new column name to be consistent with the other one
I think it would be better if we just return a nil here.
Isn't the same thing going to be in the cluster cluster cluster cluster cluster cluster?
Please avoid import ordering.
Does it make sense to set a value to the `tables.lock`?
`pkg/util` instead of `package.json`?
Do we need to make sure we are always in this case?
@karajit-pratap I guess this check should not be necessary. The `addedName` check is only used by `buildCallback`, and if the check for `if (foundBinary && foundUnary)&& (NOT hbaseLookupPred)) {`. This will avoid that indeed what you think.
Note: The current logic was correct: * `computeServiceAccount` * `compute_service_account`. * The current logic is a little confusing with the value `computeServiceAccount` (and it is only used in `compute_service_account`), not the flag.
We'll need to update the API as well. If this is only for testing versions, we can add it back in the future.
Is there a reason for this change? We're using the tabindex="-1" and tabindex="-1" and tabindex="-1" to clarify that it's not a device or a device?
Is there a way to check for `np.uint8`?
Should we make this configurable? Looks like it is used only once.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [88/80]
I don't think we can do this, we just return a `eff4` from `input csvs.dataframe_input`.
This should be `BlockCache`
I think we should do this in `pkg/st/errors.go` so that it stays in there's no way for the user to call the lower-case `.NewStream()` method
why this line?
Align the parameters of a method call if they span more than one line.
I think we need to add this to the `amp-adog`.
Use the new Ruby 1.9 hash syntax.
Why is the line changed here?
What is `curSchemaSumary` for? Can't it return null?
Does this need `continue` to be a `continue`?
Why is this import needed?
I think we need a more specific location for this, we can use the constant names here.
Could you also update the doc string to match the other one?
I'm not sure why the removal of the `__eq__` code is necessary. The only reason I'm removing this line was that when the code was `__eq__` was `__eq__`, the original check was `__eq__` was removed.
@cra0zy - is this what we want to represent? Or is the `readConcern` property available from its state before we call resolveReadConcern?
this line is too long?
why is this super class public?
Why did you change it to false?
Add a link for the error message
`Value.empty?` is the same as `Value.wrap`, can be deleted.
I think it would be a good idea to add the new constructor parameter to the new method, as it's a static method, and a private method. It would be a good idea to also add the new one.
I think it's better to return `Fake` here, as that would be the case.
I think `setProfileID` is a better name than `setPropertyID`.
I would add the first argument to this method and use a boolean for this.
The logging should be removed now, since the `init` call will be dropped.
The `has_one` shouldn't be `links` anymore.
what does this change do?
this should probably be in a `static const` block.
I think we should keep the sync log to prevent errors from running.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
This is not really necessary.
This is a pretty generic function. I'm not sure if this will work for any go-routine.
This is the same as MockDbType=Int32
why removing this
This should be removed.
Is it safe to do this in getOpsNoAdd?
You're missing the `debug` variable in `LoadInt32`, but `logging.debug` will be `null` and this can be changed to use a `debug` value to ensure the value is not set.
This will only work if `GetConfigPath` is present if the `Config` has been deleted.
Why is this removed fromBuildBasePathArgumentProcessor?
Remove empty line?
this looks like it's missing a comma.
This should be a separate pull request.
is this used anywhere?
I don't understand why we are converting it back to a value here. Is it a problem that we don't have a task?
This seems like a bad idea...
@tnozicka this is the only new import we have in the baseclass.
Is this needed now that `client.Client` is nil?
I think we may want to remove this, it's no longer a "public" thing.
I would use a `if ((delta_from_revision) > 0)` here
I am confused by the number of proposal here. Can't we just do that? `call_doc` returns `0` for the proposal in `semantic_feat = [1] > 0]`.
whats the difference between h and Component?
Since we're using a `<fmt/format.h>` interface now, should we instead use `<fmt/format.h` here?
I'm not sure what this `if` is.
This is the fix. It is to avoid using the `if (port)` check below.
I would keep a `auto *` before the loop
This looks like it would be nice to have a look at how this works.
Is there a way to handle this case with atom->removeremoveiom() instead?
Sleep should not be used anymore
why change this?
`vmHelper.vmHelper` has a function with `Speed` and `Label`. The reason is that `vmHelper.vmHelper` has a `Speed` object. It is only added to ` Consider Consider` and ` Consider` objects.
@scalablecory, I think you want to be careful here as well as in the PR description
I think this is not needed
This function should not be called. You can use it to generate a `-1` object.
shouldn't it also save the `_autosave`?
@jridgewell I am not sure why we did this here? Is this an issue? Or was this not related to this PR?
Shouldn't this be under the `*_WINDOW` section?
Please revert the import order. The other imports are a bit long.
Is this still needed?
this method name can be confusing with "if you use it"
Why is this being re-used?
Was this changed in the old config? I was hoping it is just to make the config part of the new config.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this should say something about `records. The file has 3 header lines that contain [line, random, random, random, random)`.
This blank line is not necessary
I'm wondering why we have the `req("q","*:*", "wt","velocity",VelocityResponseWriter.TEMPLATE,"foreach"` test?
I don't think the `TextFormat` variable should be used anymore. I would rather see the variable `isProfileFormat` variable defined.
Why did you change to 16 in this PR?
This should probably be in `api_args`.
This should be done a way to get the user from the `setDisplayHomeAsUpEnabled` string. It should be done in line 275 as the method signature. (Or maybe this is something to do with the user's `setDisplayHomeAsUpEnabled` method)
@matt-gardner you can remove this import statement from the changelog as well
This is a no-op
hmm, why don't we have `stdout` in `indent()` here, or `indent(4, result.stdout)`?
This will be removed after PythonSdkType.isStdLib() was called.
Is this a required field?
I think we should change `update_delete_validate_Remote` or something, like that in `update_delete_validate_Remote`
I'm not sure we should have a test for the `Class.getName`
This is the new `""` tag for the default config. I don't think it is used anymore.
nit: we could return a list of `elementCount`, `sourceCount`, `sourceCount` and `sourceCount` directly. And in case of, we don't want the count count on a `get Placement`.
This method is used in the other place in this file. This should happen after `buildAction creates a build action for a target and returns the action digest digest. No uploading is done, so the `stamp` method can return a nil object.
This should be done with the other one.
you are not testing the right code here
This should be `Beta` and `DEBUG` as well.
this is a change in behaviour? is it a bug fix?
I think it is better to move it in the `else` block.
This is wrong, we have the `||` in the `Dataflow-Objects`
This is the only thing I'm not convinced about. It should probably be a ` NormalizerConfigPass` instead of a `ConfigPass`.
Is this used?
should we return true?
Do you need to call ` AddPeers`?
Please add a blank line after this one
Is it possible to remove the "iptablesRules" type? It seems like a better name might be "iptables".
This was an unused parameter in `README.h`.
This change should be reverted.
Nit, might be good to include a period at the end of this sentence.
I'm not sure if this will cause some problems, since VolumeSnapshot is now inlined.
Is there a reason you are using the `@since` here?
I'm wondering if this could just be an `Boolean = response.get_child ("blocks"`. The `Boolean` is always empty and the `Boolean` should be ` blank` and should also be ` blank`. Otherwise, it will always be empty.
I think `forEach` was intentional.
Is it not required? Isn't it a global flag?
@sahbi-ktifa Can we have a test for that? Or do we want to do something if the build has no `buildInfoLogCxt`?
This is a test that has been moved to the core of `src/server/core/test/utils`.
I think we don't need this line since the only caller of this method is the `user` field.
I think this is the wrong thing to do, because we have the `--storybook-host` tag tag.
What is this line for?
These are the only places where we want to use `@` because I'm pretty sure they're all going to be a `email`, but maybe it's worth considering if there's a `@` in this context?
I'd prefer `import selenium.types import Any`.
Group with last group of imports.
`showLockActivity()` is no longer necessary, we're not actually doing a lock anymore.
I'd expect this to have a `run_config["solids"]` value. I think it would be cleaner than checking the value of the config here.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Does this test mean that a user will not have a read-only server server? If yes, then this should probably be called `_HS_tests`
I think this is fine.
I think we may want to do something about it being a bit more verbose here, but I'm wondering why we don't just return it again.
I'm not sure this is the right approach. If the session is closed, and the client is not closed, it is the actual session. If we don't have a way to set it in the `session` list. Is there anything we can set in the `close` list? If so, I think the session could be closed, so it should be `session.close()` instead, but that's not what we want.
Can you make this `gofmt` for consistency?
We could use `Bolt::PAL.load_puppet` to determine the behavior of the page.
I'm not sure if it makes sense to use `isEmpty()` in the constructor, since ` CharSeq padTo()` returns a static object.
nit: I think this is a bit ambiguous. If there is a default config, it will be `custom_imports=None`.
I'm not sure if this question is actually actually needed anymore, since the question is the proper way to do it
Shouldn't we also call `preload` instead of `preload`?
Please add a space after the colon.
Why include the module?
I'm not sure why this is here?
I would use `window.self.location` instead of `window.window.location`
You can remove `ErrWorkspaceNotFound{}` as well.
This will never be null, since the block is not supported. But we can't do the validation in `ShutdownAsync`
The vardel should not be removed from the api.
Please remove this. The other ones in this file are just unnecessary.
This is a bit weird. I would suggest to use `c.ovsCtlClient` as the default, or at least have it return an error.
why is this default true?
I'm confused. If we're not going to do this, we can't do that. What is the difference between this and the other PR?
I would add `go-homedir` here.
@matt-gardner, why does this need to be a `AppCtl`?
Is this a related change?
This file has to be renamed to `final`
This seems to be unused
Does this work? I don't see the `name` attribute defined anywhere else.
`const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || (2 ** 53) - 1;`, is it because of the cast?
What about the `liveManifests` be used here?
`import docker.utils import kwargs_from_env`
I think we could just do `ra.actions = ...`
I think it should be possible to have side-effects be the right value here. What do we say?
I think we need to change the behavior in sec to be a number here. The problem is that we have a "wait(sec * 1000 + 1)" in which the sec should be changed to a number of seconds.
Could be changed to `H2O_VECTOR` to return the same thing? The same question is about whether the listener has been provided or not.
nit: you can add `@throws`
I don't think we should be changing the behavior here, as we have a package to store the error and the new behavior is not clear to me.
this is the wrong way to do it
I'd like to get rid of the new lines here as well
What about using a simple String to indicate that it will be an array? I'm not a big fan of keeping code paths to understand.
`>1` ` @group_level` is always `nil` in this file. Shouldn't we just remove the `-1` and `@group_level` in the first place?
I think you need to use `&&` here as well.
Nit: I think this should probably be `type != null`
why change this?
nit: I would prefer if this was a separate file.
The new year is `-1` so you don't need to change this. It's not clear what this file is.
@tnozicka what was the idea here? We are going to make sure that the `allowedOrigins` field was defined before the `allowedMethods` field.
This should be done in `Preconditions.handleClass`.
I think this is wrong. It will only work on associations, not on the first line of a text.
This is actually the default behavior and should be `UoE` instead.
I'm not sure if this line is correct. It will throw an error if `exception.MustBeRethrown()` throws an exception, but it will throw an exception.
why was this removed?
I think we should remove the line after the last element (and the line after `each`).
I don't really get how this works, as this does not trim any possible possible callbacks. I think the preferred field should be renamed or after the if block, since that does not exist. I'm not 100% sure if it's possible to get the correct field or if this should be set to the current version.
I don't think you can import_numpy, you are using relative imports.
I don't think this is correct. It's the case where the user will have the v1 version, so I'm not seeing what it does.
This is not the correct way to do that, I think we need this method. IsPathRootedPath() returns a boolean, which we should probably return a boolean
Init doesn't change the status. I think it should be `status: "Init"`
This function has been deprecated, but is not needed anymore.
I think this is missing some more
This is the only way that this is called from the build system. I think that it can be removed.
So, it's `TierPriority *uint32`?
We need to give a more descriptive index on a column name and each column name for each column. This can be one of those cases that need a column.
I think the `winImage` should be a strict comparison, not a `SVG`.
We can use the `ecs` helper function here
i think we can just return outputs, no?
why did you remove these imports?
this was the first time you run the default on a different line.
This change is still required by your pull request.
How about using `ns` in the `use` method instead?
We will not remove these after we get rid of the `TODO`s in the PR?
I think the original test case is actually incorrect. I would suggest `places_by_each_buffer` (and `places_by_each_buffer`).
Should we log the info?
I'd prefer `from nupic.bindings import numpy` to avoid the need for import numpy
I think it's not clear what ` subscriber` means?
I think this needs `defaultMode` to be set to `True`?
What's this change for? Does it matter?
What happens if the buffer is not `false`?
Why not just use the proposal ID and set it to the current request instead?
`Baseline = true` is unnecessary.
I'm wondering if it would be easier to have a `dict` method that checks whether the object exists.
Looks like this is a regression.
I don't think this is a good idea. It should be a path.
I think we can use `defaults64` instead of `x64` here.
I am confused why this was necessary (Bokeh_renderer.comms is not None)
I'm not sure if we need the `modname` here. It will only work if the `if node.modname` is true.
I don't think we need to add this to every other setting. We should either add it to the configuration or set the constant in the `previous-log-max-count` to keep it consistent.
this is a painful of a nitpick, but this is not related to the PR
Do we want to include these fields in the user-specified namespace?
This should be done in a separate PR.
Why this change?
This is the same as `debug` on line 355 above. It should be `debug` (or maybe even `debug`) instead of `parse('debug', 'console', 'level', 'console', 'level')`, but we should probably be consistent here.
I wonder if it would make sense to also `address_string.ffff` to be a string here?
This should go into proxy.lock() instead.
same here, we'll need to add `.. versionadded:: 0.0`
I don't think the Load page was used anywhere. It's the only place where we want to load the sources from the assembly.
I'm not sure if the original `n` is necessary. I think it should be an `error` instead.
I think it's not needed to have this as a class option?
I'm curious, why the test removed from the value of the test?
@tnozicka this is the fix to the other PR
Should we make it explicit, and add `error` to the `error` struct?
nit: I think we should be more explicit and say "mapTo" (and similar in other places)
The other `go-sqlite3` imports go- keywords.
Why are you doing `$this->relationModel->getKeyName()` instead of `$this->relationModel->getKeyName()`
Line is too long. [89/80]
This needs to be done with `ListDeploymentConfigTemplates`.
I think it's better not to use `ssl_id` instead of hardcoding `null`. I don't have any better suggestion if we can.
This change is not really related to your changes, and could be reverted to `unsigned long long`
I think you could remove the `#Sql`.
Why is this being rebased away?
Is it better to use `Utils::calcUnscaledVdW`?
Maybe we should just make this a list and use that here?
We could have used `Post` instead of the `Post` attribute
This class is unused. You can remove it.
`clef-signer-enable`? I would expect the endpoint for the default, or the endpoint should be set in the same time.
What is the benefit of using the `scss` value?
I'm not sure this is a good idea, but it's not related to your changes, so it's just a mistake.
Extra empty line detected at module body beginning.
Why `@package` ? We are only removing `@` from `@`...
I don't think we need to make the reduners about reduners, it's just a platform, no?
@mrakan , are we ok with this?
I'd use `UserList.list`, but it's a bit clearer.
This doesn't belong here, it's not used
I think this is a good idea... It's not a great idea...
Is `RetrySettings` a typo? Should we be using `RetrySettings.connect(RetrySettings)` here, and below?
I think we should add a `default` interface to avoid all the constructors being used.
I don't think we should do that. The global is not available on all services
I think this should be removed
I'm not sure about this. It will allow RPC RPCs for each "T" input, and it is indeed a bad practice. The "old" input is not a valid input (i.e. it should have been a "old" input, not just one. But I guess I'm not opposed to adding it here, just wondering what's the best way to do it.
we need to revert the changes in this PR
This should be a function.
This should be added to the end of the component as well as we'll have to add a `@cescoff_info`.
This looks like a change in behavior?
This is the wrong place for this. In the `triple-flush` we should be able to just do `log.Flush(return, "getVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion", "validateVersion""
I don't think we still need this. We can add `float` to `complex` in the types. I think that's fine.
What about `if isinstance(vals, str)` here?
This should be moved to another PR. You can just do `t.RemoveAll(dir)`.
@nmittler - I think we can remove this. I think we need to revisit this and revisit the `row` method
I don't think we need to add this method to the public API. I think it's only used in one package.
This is an implementation detail, but we should still pass the implementation to the `toMap` and use that instead. It will be better to use `toMapMap(toMapMap, row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row row
Is it possible that this is called from a project and not an automatic project? If not, we could use `localProjectAppNames []string` to get the `local` list.
We can also use `get` if you need to do this.
I think the assumption we don't need an empty records here? I don't think any of the other fields will contain txgroup, should be the tx
Is there ever a chance this is not possible to use? I'm not sure that `n` would work, but I'd rather we have `-i` as a `-001` as a `-001` (or something else).
The name of the spec says "Dagster" - is there any particular reason for it to be unique?
affine_grid_generator is a good name, please?
Does it mean there is a default for the user? I don't see where it should be.
this file needs updating to reflect what it's doing
I'm not sure what `trailStream` means here?
Shouldn't this be inside the `wait_for` block?
This seems like it would be a reasonable change.
I think it's better to use the `time.Sleep(namespace.CacheRefreshInterval + time.Second)` call instead.
Could you add `git grep message` as well?
I think it's best to just add `Video` to `call` block and `call` block. That way we won't be able to remove all of them without having to repeat the web block every time.
Is there a possibility of `T` vs `T` vs. just `T`?
Can you use the `if` here instead of hardcoded `r.h.Type`?
remove empty line
why is this change necessary?
I'm not sure if this is the right thing to do, because if an topology is null or not it is not set?
nit: this one line?
`is True`? `app/menubar`?
@mattpap thoughts on moving this to some other PR, as we use `serve_static_assets = true` and then we should make it `config.serve_static_assets = false` and have all the `Rust` functions set in `CDNling.rb`?
Why remove this?
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
Maybe this is a good example of how `expects error when instance could not be found` could be nil?
I don't think we should be passing null for `Tuple` and `null` as the default.
Is it possible to remove `Won` as well? If not, let's just delete it.
Would it make sense to also update the `XUnitIntegration` field to have this field? That would be a breaking change as there isn't one.
The `format_com` format is now unused, so this should be removed.
Metrics/LineLength: Line is too long. [97/120]
This doesn't seem related to the PR that change is not related to this PR. You can just revert the change.
This should be `return`
`trait JsonResponseTrait` is used to preserve the `CacheableResponseTrait` parameter.
is this really required?
I think this could use some sort of `from` function, and maybe `to_or` in a follow up. This way if it can use a valid email, it can easily be a user error and not a user error.
This was a typo. we could do a `CopyActionsToFlow` inside it.
if `config.XDPEnabled` changes the behavior, we don't really need the `--host` option.
I don't think it's worth it to put in the `AbstractJavaAccessType<T>` structure. We don't want to have an `qualifiedName()` method, but that's the only reason for this change?
I don't really see where this is used anywhere, but it seems like `HTTP2AuthorityPseudoHeaders` should be used in a similar way.
This change doesn't seem necessary
Is this related to the other changes?
What's the purpose of this change?
Can we rename this to just `isDocker`?
I think these changes are unrelated to the rest of the PR
I think the username should not have the user ID, as it is used in the username.
This was not working, but this was just a mistake
I'd rather have this method be deprecated since it's not part of this PR. Thoughts?
Why not use `QItemSelection`?
I'm not sure if this is the right fix. The `spaceLock` is used to set it from the sharedProcessor when it's not shared.
`extensions: [", ".jsx", ".js"]` will do the trick
wrong import order
nit: this change can be reverted.
Why are we doing this? It looks a bit strange.
Nitpicking, but I'd prefer to use `*big.Int`. Also I don't think you have to `int` here.
this is just an example of a bug fix
should we remove this test or is this not working?
This change seems unnecessary. `CLIENT_ASSERT(instr->label_cb == NULL || cb == NULL)` is the only place where you have already been trying to use the `label_cb` function.
Same here, the `<%= _("Copyright information:") %>`
Can you use the constants from `pkg/net` instead?
This file doesn't seem to be used anymore.
This method is unused.
The `CASDefaultCstorPool` CASDefaultCstor pool will be configured, for "false" (we might want to be consistent with `assign_POOL` but not to be able to be configured).
I would not close the client.close() directly, as it is done for all the client().close() calls.
I don't think this change is needed.
I'd like to see this not used anywhere else.
I think you can just import datetime from the next line.
I don't think we can have this on the "Restating" method. Can you change it to "Restatingating".
Can we make this an `Optional`. It's a simple string, and we can't use it.
This test should remain remained.
This is a breaking change and we should keep the `workingState` function.
I think we should be able to remove this now.
You can just call `breakpoints` here, it will return `null`.
This was just to fix the bug. I don't have a strong opinion but it looks like we can change it to `1` and then `rjust` to be `0`?
why are we adding the `signedHeader` variable?
This should be `<value>`.
I think we can remove this empty line. We are already doing a copy of the array.
This should probably be `getDescription`.
Shouldn't `onStartNestedScroll` and not `handled` be in the `onStartNestedScroll`.
I'd suggest to have a helper function for this. `!(*inbufs[i].fill_cb)(&subreq->super, inbufs[i].len)` and then `!== 0`
Line is too long. [87/80]
why did we remove it?
These are the only ones I need to be updated.
Is there a reason for not using `true` here instead?
What do we think about renaming this to something like `MetricDirectory`, and using an existing `PathDirectory` as that is more common term `PathDirectory`?
I think you could have used the same naming convention here.
Why the config.s3 removed from here?
I'm not sure if we should add this to `ModelBase` as it was. It's a little bit confusing to read the id from `id` and the `hack/utils.js` are not used.
Why not use an interface `long` for the value of `int`?
This is the fix to the hi field.
I think it would be clearer to name this something else, e.g. `gulp check`, `gulp check-set`. I'm not sure if this is a problem.
Can we move the logic to the bottom that we don't have a package that has all the way to do it?
I'm curious: does this work with other files too?
I would say `simplify chained comparison` but it wouldn't be better to just have both values. Also, the `comparison` and `a` should be renamed to `simplify-comparison` for the same reason as `simplify chained comparison`.
Why removing this?
is it possible to replace proxy with a proxy?
why isauthority moved to?
I don't see where this is used, why?
Why are the case of this if?
What's the idea behind a new flag? What if the user already sets `mark`?
I don't think this is needed
Is it needed, `--logging=TRACE` will be set to `true` in the root build?
I'd like to see this in a separate PR. It's a little confusing. What is the reason of adding it?
It's probably not possible to just return `nil` here.
This log line is also useless.
I'm wondering why `NewTestLogger` and not `NewTestLoggerLogger`?
I'm not sure this is the best way to fix it. I think we have to fix it in another PR.
Don't we have a strong reason for this?
I think it would be good to have this in a `lastfmscraper` class rather than in a `./` namespace, and then you don't have to create a new param for this one. It might be better to use a mock variable.
@citizen428 I think it should be `aspnet-mvc.request.current.local-mvc`
I don't think we can assume these are the same, but they are just used in the `execute_powershell_script_on` method.
@purchaseable.collection? should be an array
I don't see any reason to keep this buffer in the `page` suffix?
If we're using different names, we should be able to use the `pseudo_sampler` import at the top of the file. The only thing we should be using this function is that we can import the `import` statement and just do it in a later file. The `import` statement should just be the one from the list.
Nit: we usually try to use `go score` or `go score` for consistency with other imports.
@Eric89GXL don't you think this is the right approach? I'm not sure what the `l2` default should do?
I'm curious if these import changes are intended to be in this PR?
This doesn't seem right. You're using the `.hash()` function to generate a hash.
I think this is wrong.
Please remove this
This line is redundant, because ` lock_a` is already a pointer in the final `lazy_response` anyway.
There's an extra `_volume` at the end of this file. I don't think it's necessary to specify a volumes.
@jridgewell can we get rid of the check for the deprecation notice and the deprecation warning message here?
`AbstractAnyTypeDeclaration` is a little confusing, since it is a new class name.
@sparrowDom Why are we using this?
Why did this change?
Does the pain need this check ?
nit: `////`
This namespace should only be available in the `_` namespace.
Can we move this up to the `api/server/server/server/os/server.go` file? This means we can also remove the check for both the two that have been added for each of them.
Too Exp also needs to be added for all the other operations as well, no?
Should we also add this method to `getPermissionSet`?
I think this will be a bit confusing since we don't have a property name that we are not. Maybe "is not None and ..." would be better?
Why is this in `core/util/core/src/service/resources.go`?
Place the . on the previous line, together with the method call receiver.
This message can be reverted.
I don't think this should be `str`.
nit: should we rename this to `require ALL`? It's a bit hard to follow. `object` is more clear. Also, `quit chan` is not a blocker than `object`.
I think this is a bug in `MemoryLimit`?
Should this be `Apply == true`?
idx seems to be the only value that will be used in this file. Is there a reason why this is added to the `idx`?
You changed all the time
Please remove the space after `:`
I am not sure why this was here. I'm pretty sure the function returns an error when it is passed to the function.
This was not used before.
Doesn't this test pass after a `samplingDetach`?
"inventory" is a bit confusing since inventoryfile contains the global directory name. It's not really a valid directory name but I'm not sure we should do it in the same way. I think the same thing could be done by just using the inventoryfile's name to avoid the global since it's not the same as the inventoryfile.
It would be good to include the exception thrown in the UI.
Why is IOException andThrowable handled here?
This is an unrelated change to Dynamic clone. We could also use a simple Dynamic clone in the type.
@bartonjs - can we rename CONTAINER to "component", to be consistent with other uses
I think this is an interesting one.
This change seems unnecessary to me.
I don't think you need this. `request.getRequestType()` is necessary.
Why do you need this? This is a `Kokkos_Core` file.
I'm not sure we need to change this. The handler should be a queue.
This will cause a regression. I think we should be able to make the old `[0]` parameter be a valid `len(rule.Dst) == 0` check. I think that's what the old data is.
I think we should add a validation to ensure we don't add these new properties in the future.
How do we know that this works?
This will cause a regression for everyone. I would suggest to move the `if (xstate_has_extra_fields)` out of the `if (xstate_has_extra_fields != nil)` line.
What is the difference between these two?
It looks like `DIFFICULTY_BOUND_DIVISOR` is used to be a `parenticulty` property of the DIFFICULTY_BOMB_REMOVED, or the difficulty to the lower-level value.
What is the issue here? I mean, if we don't have any/reproducued, we can add the check to the scheme if it's only for the lifetime of the module.
This will break compatiblity with the user's `listens` list.
How come this is changed?
I'm not sure we should be using the `if` here.
this was the only real change. I'm curious if it's worth adding a newline to the end of the line.
`2013`
I would add a todo that this will be removed.
I would suggest a default value to avoid duplicating all the settings.
Can this be removed?
nit: can you please make a constant for this class?
@martint Why are we changing this?
Wouldn't be better to use `pyunit.java` instead of `java`?
I would expect this test to fail and not pass the test
Shouldn't this be set to something else?
Could we put this in a common scope, please? `*` is a common name, maybe `json:"-"` (and a few other places in the file.)
Can we use something like `httpHandler = httpHandler.empty().assert(httpHandler)`
`baseFeePerGas` is nullable
why are you changing the default value here?
can we use `io.prestosql.spi.StringUtils#shouldTable` to be consistent with the rest of the test?
Is there a way to make `defaultLivedMarshalByRefObject` take `LongLivedMarshalByRefObject` and `defaultLivedMarshalByRefObject`? We should do this in a follow-up PR.
I think this can just be `bridge.send_command(cmd: params: params)` since it's a plain `data-options`.
I don't see a point in adding this. There are some cases below that need the containerd argument, and the container is in a context, so I'm not sure if this is the correct solution.
We don't need this check anymore.
I think this should show to the `new_ncr_proposal_path` as the second part of the component
why not use `timezone_data_param`?
I think the ` transaction` can be removed?
I think you can remove the "return"
Why are we changing these from ID to ID here?
I don't think we need a git_checkout parameter here since we're using the default from git_checkout.
I'd prefer to see the new method on `CertificateRenewal` for this.
The `extension_condition` is used in a few places, maybe move it to `update`?
The seed should be the same as the `order.seed`, otherwise the `seed` does not exist.
This is probably not necessary as we only get one client if the client is not client is not client.
Why does it need the reference to `OtherKeys`?
I believe the imports are unused.
In this case the module should probably be `module.exports`, right?
This file is no longer needed
I think it would be more useful to give this a more descriptive name like `signed_in?` rather than `t`, what if we just use that for `signed_in?`?
I think this should be `Address`
`autoRowSize` is not supported in IE.
Why not just `consider-using-namedtuple` (and avoid the `namedtuple` variable)?
The octest should be removed.
Line is too long. [87/80]
I think we should also check for the second block ID.
This should probably be `"""A dictionary`.
Should it be `_data`?
I'm curious: why did you choose to change this?
Why are you using the `type` here? It should be the default in the error.
this is just a bug. no need to return error. I think it should be returned
why is `dict(classes=classes)` needed here?
Does `ChainID` have any side effects?
I think we should add `null` check here, to avoid making it easier to debug.
`ruamel.yaml` is the same as `_register_ruamel`
This is a bit weird. I would have called the pass of `checkArgument` as well. But that would also make it a bit easier.
I don't think this is a good use case. The code will fail when a file is created
the default should be `true` here instead of `:user`
I'm curious about the implications on this. What's the reasoning behind this change? I'm wondering why `panic()` will have to be removed and it seems like it should only be removed in the `client.go` file.
Is this really necessary? I don't see any use of it, just wondering what the function is supposed to do?
This will cause some problems when the `$this->taint_flow_graph` is not set.
I don't think you meant to remove the `Stream` from the list, it seems like you can just use `collection.Map`.
I think we need to keep `doc` here as the default.
Can we move to a `TTemplateParam` and `call` calls, so we have to pass that?
This should be a set.
I don't like this name. Is it a utility to generate other modules?
Looks like this is an unrelated change.
info() and logging should be removed
I don't get this change. `get('selection') and 'component value` does its own value, why do we need this change?
I am not sure this is the right place for `originalIcebergType`? I don't see any reason to keep `unoriginalIcebergType`.
Is this a typo?
There is no test coverage for this, but it's not clear how `MongooseError` works. I think we could just change `url` to `isDebugError` and remove `url` altogether.
I think it is better to use a different name for bundle here?
I'd prefer if this method was called `CloseableIterable.Is(json, Record::copy, "connection")`. The difference is that `Internal Wrapper` is the type of `Azure` which is the type of `Azure`. The difference should be `Iterable<CloseableIterable<Record>`.
I wonder if we should do the same for the other sessionStats as well, instead of just returning the sessionStats?
I'm not sure this is the best way to handle the else clause.
This is an actual problem and it doesn't seem related to the PR description
This should be just `return {`. The previous `ModelParams` calls `validateParams` if you're not doing anything about the API surface area.
Is there an advantage in using networkPattern for that?
Would it be possible to set the metadata variable instead of using `block`?
i dont think that this string is used
`marionette: true` is not the correct type here, it just needs the type.
why this file changed?
I don't like this. When the device name is an instance of `deviceName`, it should always fail. What about `ad.DeviceName != ""`? What about `deviceName := ad.Source, ad.DeviceName != ""`?
This should be in a separate PR.
What is this? The `long` is the `1` (which is the default).
@bparees this was the only one I found in this file.
Style/MutableConstant: Freeze mutable objects assigned to constants.
@kingjr I don't think it's possible to return the `null` type here. I wonder why it is needed to add `initializer` to `BagDictionary`.
`ElementType` is not necessary
Can we remove the `props` from `ls` instead of `remove`?
Is there a reason for not using a `warn` here as the default is `false`?
It's probably better to have a separate variable `atomic.NumMatches` that is the same and then assign it to it.
I'm not sure this is really necessary, but it's not the case that there is no error handling?
`fetchMock` should be renamed as well.
I think this should be `ExpectData` and then we don't need to check `context.ExpectData` anymore
I don't see where the code in this file is coming from?
Can you add a TODO to remove these tests?
This log message is not necessary as we don't do anything with the actual error message in the log message.
Please move this to `layouts/v1`
I don't think this is the right place to put this. `var FEATURE_NAME = "reports";` is a variable that should be used for consistency with the rest of the codebase. Maybe it should be `var FEATURE_NAME = "revealing_reports"`.
I'd rather we check if the `initProcess.signal` returns an error here, and return the right value, if it returns a `nil`, then it should return an error, otherwise the `initProcess.signal` will be nil
This error message is confusing as it is not used anywhere else so I would just remove it.
We have an issue for this. This function is used in the UI.
Warnf in Core Core Core Core
Why not `public/plugins`?
`getUploadedFlowFile` seems to be an implementation detail. Maybe `AbstractBeanFlowFile`?
This is an interesting bug. The `dynamicconfig` is already being set for the `dynamicconfig` case. The `dynamicconfig` is already being set for the `IntPropertyFnWithTaskQueueInfo` when it is `true`. If it is `false`, then this should be `dynamicconfig.IntPropertyFnWithTaskQueueQueueInfo`
I think it would be clearer if this were to return a `NVDAObject`.
Extra empty line detected at class body end.
This is not a good place to keep the `exists` check.
Is this a typo?
this doesn't work. `CachedThreadPool` is not `max_threads` because `max_threads` will be nil
I'd prefer a single `if not specified` check instead of `sum == 'none'` (or `if not specified`).
I think we should add padding if we added the attribute here (it should be added in a different way).
why did you change this ? It's not a public var, but it's a strange decision. Also, why not use `balance` instead of `balance` ?
This is a test that does the trick.
This is a breaking change, and I think the code in master is not the best place. This is a separate patch, it's probably not the case here, so we're just removing it from the build file.
why don't you just do a `other.operoperName()` and then `if std::move(other.txt[i])` here?
This file is no longer needed?
This seems to have been a separate change. Is this going to be dead code?
this function is only called from the environment. It could be used in other places, e.g. a `_get_extension_overrides` function.
Can we have an enum instead of 'enable' here? Or do we want to enable it?
I think this should be done in `waitForThumbnailsBeforeUpload`, not `waitForThumbnailsBeforeUpload`. It's a bit confusing to have a value that is set to true.
I'm a bit confused by this change. If we do not have USERS defined in this file, then why do we need to define it here?
I think this queue should not be removed, it is no longer needed.
@dvoytenko Is this related to the bug fix?
this is a BC break
I'd keep it as `PhaseSelector`
I would just call it `AllowlistedModules` because that's what is specified in `json`. This way we won't have to call `bulklistedModules` when we create a new `json:"renner_modules"`
I'd prefer to use an array, not a list. Same goes for L187 below.
This import should be removed.
This is the only change in the code.
Why don't we just return hybridMountpoint here instead of using a constant here?
Use the new Ruby 1.9 hash syntax.
I don't understand the logic here, why do you want to set this to `true`?
campaignSource is struct, so why is this not anonymous, instead of anonymous campaign?
Can we use `gofmt.r.y` instead?
nit: it's best to use a more descriptive name for this to work.
You don't need to catch any of the message here, because `($fault handler)` is a `const`
I'd suggest to move the disposed parameter out of here and use that constant, so that the method can be more descriptive.
Can we have an explicit test for the sep=3? That way, it's not a good practice.
I think it's best to just use the `user.created_at` check above, and check for the `user.deliver_later` in the function, since it will automatically return a `nil` value.
I would rather use a constant here, like `List[string]string`, etc.
This is the only real change in the code. Why are we not doing a check?
Why not just remove this?
why do we need to add this to the `CreatableIndex`? it will be like `Get(addr, false), but error)`
I'm curious if this is the correct way to fix a length of `len == 0`?
This needs to be done in a single method.
I'd love some feedback on how these methods will be reached.
Does it make sense to move this above the "ifdef DEBUG" block?
this one was wrong. This was the original author.
`freopen()` does not need to be here. `a` is a boolean, not a boolean.
Why the "U"?
Is it possible for this to remain?
I think this will be more clear if the nodeToCIDRs map calls to `nodeToCIDRs`
This seems like something that should be in `Gem.rb`, not in `#if Gg`
I don't think this is going to refer to the `_format` list, and it's a bit confusing to have the package passed in as `_format` or `_format = package` in it's own `format` and then set `format. Only` in the `_params` package. If it's `None` then the `format`, the `format` would be `None`. So this would also be `set_format`
Could you explain this change? I think I would expect the `Class` to be null here, and not have it, as the `@Nullable` is now `@Nullable`.
This should be `protected`
Please remove this.
`backend` will be a string so we can use `config` here
I'd prefer not to use a `ListDeploymentChains` here, as it's a private function.
The error is logged at line 130, so that should be handled in the error message
Why did this change in #1717?
@sparrowDom This was the intended behavior.
Do we still need to `FATAL` here?
This is a public method and will be re-generated in any cases
This is the only one where the ScheduledJobType is used. Can you make it non-nullable?
This should be done after the call to `init()` in `init_bytes()`
I'm wondering if there will be a test that will fail on PyPI because of the `this.isEmpty(trList2.size() > 0 || trList2.get(0).pumpId == 0`
This is a bit weird. I think we can just do `shortAddressAddressAddressAddressAddressAddress = pAddress.checksum.checksum`
I don't think this is the good way of doing it. I think it should be `provisioningDelayCondition`.
Metrics/LineLength: Line is too long. [82/80]
Nit: `Create` is a bit ambiguous to me, and I'm not sure it is better to do something like `nilkeys` in `Create.eslintrc.js` or `nilkeys` if the latter is not `nil.`. I think `if a.Key == nil` would be better.
We should use the new API for `PipeWriter` here
Please remove the `db` prefix.
Shouldn't this be `FOOPackage`?
The fact that we don't have any information in these actions is that we should have the duplicated actions in the `out/api.go` file.
Can we also remove the entire block?
is this needed?
I don't see the associated associated associated here?
Why not use a `BaseMap`?
This is not needed, please remove
Maybe a `json:"serviceAccount,omitempty"`?
@stephentoub can you please add a line break after this one? It looks like you're going to be able to use the existing `serverOptions` in `src/server/server.md`
Why is the removal of the C clause removed?
I think this is a leftover?
This is the same as `addGameTask` above.
This change is not related, but it was a leftover from the PR
Will echo: false ever be false?
This test is testing that the output is testing the output for the output.
We should also be returning `defer`
I would have called this `&`, since you can't just do this here.
why do we need to update this?
I think this can be simplified to `RunActions` and `PersistBlockLevelInfo` since that's what we do for the other methods, since it should be the same.
do we need to specify a `dict` value?
shouldn't it be `isView()`?
I would call it `attr_writer`. The `attr_writer` should be fine.
Don't use a default var.
You can also call this `worksh`
I'm wondering if `!receiveError(...)` should just be `undefined`?
grpc -> bool.
The `cancel` is now unused.
The last two parameters are identical.
Openstackstack -> using the config name
Is it a good idea to keep `[0-9][0-9])):(0-9][0-9]))\\b")]`? It would also be more idiomatic with `2[0]`
I don't think this is correct. This should be `AddDiagnosticSourceInstrumentation<TInstrumentation>`
I think you can replace `project.name` with `project.yaml`
Maybe we should just make this configurable?
can we add a TODO to remove it and add a `break` after we get the nodes with 6.0?
These 3 lines are all just leftover code from a single file
I believe this should also have been removed.
How about using the deprecated field in `sprintf`?
I don't think we should do this. We should only keep it for the domain level of specs.
This doesn't seem right. We're using `true` as the default, and I'm not sure we should be calling the `selector` here. I believe, the behavior should be changed in the default, and if we do, it is the only place where we're using the default, not the default, so we don't need the `false`.
Why was this needed?
`ZoneOffset.UTC` is a bit too much, and could be replaced with `.findthed()`
@mjkkirschner can you confirm we need an additional `NAME_REGEX` property? I'm wondering if we can avoid the `requirement` part of the `@` model?
this is just to avoid the NPE
Can you remove this? This is not used anymore
I would prefer to pass `AWSEmailProvider` to ` EmailNotificationService`
If we add an email (user) option to these, we should add a check for both in the and and in the view
Should this be in a try block?
I'm curious if we can just use `0.0`. It looks like you're calling `close_retcode` on all the other places you're using `0`. I think this is the only place where you're passing 0.
I'd add the link to the "real" of "useless"
This is a change in behavior that is not correct.
Should be `LOG(''` here.
I think this is a bit of an overkill, we might want to pass the `boolean` parameter to the `boolean` method to ensure that it is not called.
nitpick - should you be consistent and not a big deal?
This is not related to the issue but I think the `is-ca` function is missing from this file.
I don't think this is the right place to put this. It's probably not an issue for this PR though.
I would expect this to fail if the user has a `script.cancellation('script')` script.
I don't think this is correct, the caller is calling `s.close(err)`, which will call `s.close(err)`. In theory, we should call `s.close(err)` before calling `s.close(err)` which will be lost. The call to `s.close(err). Can't find any other place, that we should call `s.close(err)`.
I wonder if we should add this to the other functions. If the other functions are being used, then the code wouldn't need to be in the call to `bar.m_weights`?
I don't think you should remove this, it's not used anywhere
I don't understand why you added the default if you set it in the first place.
Is this a problem?
The value_len value is not set here.
Please add a line after this
The `WithoutNS` is already done in `pkg/resource/server/server.go`
can't we just have the standard `OBufferSize_` prefix?
Does this mean the `at` bit of the `bit` without a `-`?
I'm curious how does this fix the bug ?
I don't think there's anything in adding this file to this PR. I'd rather remove it.
Can we add `@since` as an example to avoid this warning?
I would use `data` here as well, or `null` or something.
we could also just make sure `revision` is a `string`, not `string`.
@nmittler - Does this file still need to be internal?
This is the only place where I used the `Helpers.SingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingle
I would not expect that the `conftest.py` should be used in the test.
nit, this is wrong (I know this is not your change but it's not related to this patch).
Can we also check that 1070296 is an array of PodDBAdapter that is 1?
I think this is the only place where we need the `LogicalType` fields. I think that it would be cleaner to remove the `if` and `continue` fields in the constructor.
Rails/DynamicFindBy: Use find_case for variable numbers.
Indent the right brace the same as the first position after the preceding left parenthesis.
Should be `[:]`
I don't think the error should be here, if the user sets the user to the user, then you can't set the root cause, and you don't need to call it.
Is there a specific pattern we use in here? I would recommend to add a helper function that takes the `attr` as argument to `str` instead of `if`?
I don't think we need the duplicate duplicate error message. Can you explain why this change is needed?
Use && instead of and.
This is not a user facing thing, but I think it's better to put a operator into the `Operator` module.
This class is only used in one place. Can it be removed?
I'm wondering if we should just use `TaskQueueType` to make it clear that it's an intuitive value. WDYT? @patrickxb ?
`transaction.AccessList` will always return a AccessListItemForRpc so I don't have to make this change.
You could just make the `e unauthorizedRequestError` be a `*` (this isn't a `func`)
This is fine, but the count is not the first flow of a timeout.
What is this for?
This needs to be `super(SGEJobTask, ...)` since the `__init__` method has already been called in the constructor (the constructor does the reference to the `__init__()`)
Should we add a migration to cover this table?
I'd rather not do this in the `const` loop. And I would have expected this to be the first one.
It's not immediately clear what `GroupIDType` does. Is that intended?
to contract [0..1]" is 1.0"(1)
should we make this default true and set the value to `""` ?
I think it's safe to change these to use `count` rather than `count`
I think we need to keep this property in the `GetSourceSource` property and use it everywhere
`@Kubernetes.new("@coupon")` will work on windows and is not supported. I think it is better to move it down in a constant.
I would prefer to have a list of %.512s in a list like this.
This needs to be removed
The call to `Output` is unnecessary because the call to `wrapped()` is `wrappedOutput` anyway.
no need to check for 0
I think this is the wrong place for lowerDomainInResource - it just means all the delimiterIndex must be set to zero.
I think it's better to have a separate column for `body_html` and `trail_map`
This selector is not used. In fact, it means that the `env` field is not supported in this list, which is the default value of `env.deny` which is not the case anymore. I think we should be more prominent and provide an example for the user to be able to determine which field we want to provide.
I wonder if it might be a good idea to keep these tests to make things clearer. I'd rather have the `bundle/exec` prefix, as there's only ever one.
is this the only place where we need this?
We can't call `batchForBlock` from `WriteBatch` anywhere. I think `WriteBatch` should be renamed to `WriteBatch`
This is a bit weird: why do we have to call `AbstractAbstractUtils.complete` on a field? It seems that it will be only used when `Void` is `null`. Wondering if this is the case?
Can we put this in `_x`?
Please remove this
Why is it changed?
+1 for adding listener
I would add `time.Now()` to the top of the file (and then just pass the value to it) to avoid the warning.
I'm not sure if the `500` can be removed from the ALGOSMALLLAMSEC environment, and we don't need to pass it in as a parameter.
@cramforce should we be using fssuring here?
Is this valid? I don't see any new changes to this file so I wouldn't remove it.
Do we need to import six here?
Do we really need to keep these tests? (And I'm not sure if that would cause issues in the past?)
The `$value` should be `null` by default. If the type is `null`, it should never happen. But, the type is `null`, so `string|Markup` is `null` by default. So, we should keep it to avoid this kind of check here.
this is the only place that needs to be changed. It's not the right way to do the same thing. Maybe you can add `Guard.Null` method in the constructor instead? It's a bit confusing. It might be a good idea to add a `NullPointerException` method that takes the value to an argument and pass it into the `this` object.
This doesn't seem like a good idea to have a test for this. It can be removed. We have some test for this and some other test in the future. The `catch.hpp` file was only there for a `catch.hpp` file that was not working. But I don't think we need to catch this.
I would use `TYPE` and `TYPE2`.
We have a test case for this
This seems like a leftover from your IDE settings. Please let me know if you want to do wildcard import.
I think this is the wrong place to put this on the `k8sSDWithNamespaces` method
Why does this fix the other way around?
Could you explain why this is necessary?
Should we add a `TODO` to make sure we are not testing the right error message?
I think you could do a `error` with `Bucket/`
The naming of this package is confusing. How about `set` or `build`?
This is the wrong way around. This is a different icon, which means it won't work for any icon.
I believe we should be using the `context` package here (and in the other go classes). Also, we need to use the go folder as a `x/net/context.go`.
this is a BC break. We should fix it in a different PR
I'll admit, I don't understand how this change will work. But, I can't find it.
Can you add a `try/except` here so that we can avoid calling this if `data` isn't `stderr?`? That way if we don't allow the `assert` we'll end up with the `else` branch?
LOG_IF can be null or empty.
`*` is the default.
The other one is a bit scary, but it's best to leave this as-is.
I think we should also add a `GetType` to the public API.
This is the same as in T Current#fill(). It doesn't have to be nullable, right?
@wachterjohannes This one also removes the space between the `:` and the opening brace on line 554
This function name is confusing, can we rename the `common` function to something like `return radius.IsClose(capacity)` and make it more clear?
I would use the `cm.value` constant, because it was already defined in the message.
This is the only place where we can't do `b.localstoreCloser` - I think that we still need to keep the batchstore interface if the function is in `lib/api/`
can you please add a default config to avoid the config config and pass it as default? This would simplify the existing code.
why this change?
Do we need this? Is there an issue with it?
This is a bit weird. I think we should have a `org.jboss.runtime.api.api.api.Experimental.api.Experimental.NumberUtils` which I think is more important, but it is not possible to have a way to create the reader and then call the reader directly.
Should be `Exception`.
Blockly ->ocop
I think it is better to remove this class. It is already in `@deprecated`.
This seems to be the only change to `s.lstrip('0x').0x')`
`objectXML` is not used in this method, so this one is not correct.
This is not a commitments, you need to add the same logic in Commitments.
This should probably be renamed to `return fileSchema`
Can we just use `ErrRequestCancelled` here instead of relying on `Cancelling connection initiation` in the `extension` package?
This should be a part of the standard library.
I think this method can be called more than once, e.g. `paused`
I don't see this logic being tested outside of this PR, it's not that important though, because the user can't get the "vk" keys if they're all in-flight.
should the default value be excluded?
I'm not sure we have tests for this?
This seems like something we'll need to be very careful about.
I'd prefer to see this as a `bytes.length`, since the Useducetet has its own `moreRaised` and it would be more clear if it was not set.
Shouldn't these be `email` ?
@floumalouomega you probably need to do this as a follow-up. Otherwise the `this.setParameter()` will fail as expected
If `firstTimeEmpySubject` is true then `close` should be added to the `mne/server/server/server/server` package, right?
Shouldn't this be `transport`?
You want to raise the exception at the bottom of the connection (and raise the exception message above if you raise the exception).
What about the `_expands_user ` and in the above function? That way you can avoid this entirely.
Isn't `_isHidden` available in `isFocusable()`? If `isHidden` is true, it will be thrown.
I think you can also remove this
This will need to be moved to `KeyStorePasswordFile`
Can you move this log statement to line 1439 so it's easier to parse?
Should it be an error log?
I think this could be a malformed flag.
Shouldn't this be `self->logIdToSend_` instead?
Can you please move this above the other way around? It seems like it should be handled inside the `if` block?
I think this is the main change for all the `tab_to_focus` instances, but I guess that would be clearer?
The second context here is a bit of a misnomer. I'm not sure that it matters, but it seems like it could be an easy way to get confused with this. The second context, the duplicate formatter exists for the same output target, and the duplicate output target exists when the formatter exists. So the second context is not written to the second one, but when the second one is not written to the second one, it's not the duplicate, which is not the formatter. I think this is the right way to go.
We could use a const here to avoid the need for a const at the end.
Can you rename this to `ContentContentContent`.
We can use `getPathsOperations` to be consistent with other code that needs updating.
this change is unrelated to the current PR, but this test is testing the wrong test
Should this be `continue`?
Is this used anywhere?
I'm not sure that this is a good idea to use this in the test. The logic is not to import the module from the dependency from there. It's not a good way to test the dependency from the tests. The `utils` module was a special case for the `utils` package and `import json` package, because it's used as a dependency for the tests.
this is the actual change that is needed for users
Why are you removing this line?
I'm not sure that we should have the `ethBackend` in the `chaindata` function in the `api.ethBackend` function. The function name is just `eth-coinbase`, but I would like to see the error message as it is actually used by the `devBackend` interface so that if there is an error it is a `common.Address`, then we don't know what that function is doing.
Line is too long. [84/80]
Shouldn't the flash/* be removed from the `font` block?
Right is a significantly commonly used contract, so I think the contract is wrong.
This is the only change I found in my PR. I don't like this change.
@michaelkuhn Do you know if this one is correct? If you are using the default, you'll be able to use the default server hostname.
This was unused?
What if the host is empty? Do we need a null check?
It seems that bytes wouldn't have been a valid response?
I'd like to see an example in the `split_id` function, but it might be more efficient to call out that the user might want to use their label as its label and not just the user-defined.
@nmittler - This is the only usage of this method, please remove it.
Why are you adding the extra `<` here?
So this means that the namespace is not used anymore, right? How will this happen?
Indent the first parameter one step more than the start of the previous line.
@smarterclayton do you know why you changed the name of the `dba` here?
Shouldn't the message be more meaningful? `options.containsKey("type").equalsIgnoreCase("hive")`?
This is the same as line 37 below. It should be `return float and content_type` (with a default value).
Can you use a try/catch instead of testing for the "test" tag?
Nit: `if (index > -1) {`
@danrot please add a doc for this
why did you add this?
"error_open_zip" => 'error_open_zip' => 'file'
I don't think we should be changing the behavior of "or image" to "not set" and "not set" (the `d.SourceSnapshot` is set).
How about to use `Object.equals(empty)`? It is easier to understand why it is not.
Just to confirm: this is a bit unrelated to the fix and it seems that the local ip can be the same as the other way around?
Can be `!========` instead of bool?
Why is this needed?
I'm a bit surprised that the call to `get_SECTS` is not a function.
@jeherve This is the only place where I can see the `Any` exception, but I'm wondering if it's the case where the exception is being raised (in `io.prestosql.plugin.hive.util.Lee` or `Any`), not `Any` in this file. I think it would be nice to just catch all exception handling here.
This should be `lbann_data_store/data_store/data_store.hpp`
Does this mean that the `ValueTask` can never be null?
I'm wondering if it's worth it to check the `CLIImage` property instead?
Can we use `newTableMetadata(schema, Table, properties)` to get the behavior here?
I think we can remove the tests from `T`
we should log something like `debug.map(t -> TableIdentifier.of(database))` to avoid the debug statement
I don't think we want this to be removed
How do we pass in `badContentType` here?
The `throw new` statement will not throw a `NullPointerException`. The `quit` parameter is `null` in this case.
Why is this change necessary?
I don't think this is right, the flux_respond_error should be the flux_respond.
This should be imported before `webpack` (as it will be imported after `util`).
`newSchedule` ? No `resource.ExecuteSchedule()` call.
Why did the project be null?
The other header is `restriction` because it is no longer needed.
break here isn't necessary
This is just a bit confusing, the manifest file is always the file. If you're going to be using the manifest file, you can just use `.config` here instead of the file.
`s/lib/Viewer/lib` in `s/lib/Mule64/`
Can you add a `PercpuUsageInUsermode` to the top of the file instead?
You should use `check_user_can_edit_record` here (or `if not (user_info)`).
Do we want these to be `DEBUG`s? (Also I think the `CDP` command is redundant.)
Is this a bug fix? Can't we just pass this into the `DestroyDestroy`?
I don't think you meant `date`?
why is this test test needed?
This will be called once the "fields" check is done
Shouldn't we pass a null serviceInstance() to Micro MicroserviceInstance() instead?
I'm a little confused by the `make update` method, but I'm not sure we should have any of the `make update` method for these, since they're not really part of any API.
whats wrong with this one ?
Is 5 or a bug fix?
Should `c.Stateful` be passed in from `integrator`?
I think it is better to keep the protected override to override
This test is not working as expected. It is in a test file that will be ignored. The test should use the `_tcpproxy_modify_LENGTH` helper
transferred -> transferred, so this will work
This is a change from what I was working on. It was probably not working before.
This should not be ` MCTX_NUM_SIMD_S`
What does `seconds` have in some unexported case (as opposed to an empty string)?
I think we don't have any null checks for this type, so it should be non-nullable.
nit: `-1` as a variable name would be more clear.
The name `BackendAuth` is a bit misleading since it's used in two places.
This was wrong before. It should just be `nano::epoch nano::send_block::epoch () const`
Is this really needed? I thought it was already added somewhere
shouldn't we also update the corresponding corresponding configuration?
this is just for clarity, right?
I'm not sure why the `plugin yarpc` flag is removed here, can you confirm?
I would prefer to keep the `API_END()` method, it's not a big deal.
I'm not sure if it is the better choice of this `DbRound` struct because we have `InstanceInstance` at the beginning of the function. The only difference is if we don't have any other function for `InstanceInstance`s, we should have a `DbRound` function which we can. In the future we should probably rename the `InstanceInstance`.
`assert.Equal(t, getClusterRegion(cd), target.getClusterRegionLabel], "incorrect cluster %s")`
Please add gitea copyright header to this file, it will be nice to avoid breaking API changes.
We could just use `prefs.edit()` instead of `putBoolean(key, false).apply();` here
Please add a space between the opening parenthesis.
Is this a BC break, or is this just for testing?
Could we just make this a helper method?
Is this copy still useful?
I don't think this is a leftover. We should add `protoingConfig` to the permissions list.
This was an internal function that was only used to implement this for server, and is not really used in the client.
Just a random question: why change the `HdkPath` to `HdkPath`?
Why is this change necessary? The original code was not working, but it does not.
This is not the right way to do this, but if it's the only place it should be in the manifest?
Can be removed
This is the only change that will cause issues, I would expect to be able to use a specific implementation of this. In case the `toStringHelper` method is called in a different place, then it will not be called in any case. In the future it is better to use a `toStringHelper` method and use that method in a different way, which is more likely not the case, but I think it should be possible to have the same logic as the `getFromBlock()` method, so it would be clearer if we do this in the future.
This is needed because we don't have any of the headers in `.cstdio.h`.
This should be the existing version number too.
shouldnt it be TestRuleCheck().around(..) ?
Can the default value be `4`? I think the `4 == 6` is redundant, because the default value will be `4`
I think we need to get rid of this
I guess we should remove the `@tributor` annotation?
I'm pretty sure this is needed: `TCP` should already be passed `TCP` as an attribute of the attribute `TCP` and `TCP[TCP]` is also passed in.
@jackfrancis do you remember why this import is not here? why did you remove it in the first place?
Why the change here? Is the line above necessary?
`Use && instead of and.include` is more accurate.
This is a very minor detail, but I think the `spec.action` is used to set the `action` property.
It's not a good idea to introduce a new interface for the new `runelite` APIs
I'm not seeing where is this used? I think it's more likely that it would be a good idea to have a method that just returns the map instead of using the map.
Can we just call this something like "region the return type of the Region and therefore" ?
I would prefer to have a constant somewhere to avoid calling the code in a constant.
This file doesn't exist anymore.
This is a bug. The path was already checked for ` DirPermissions`. If this was the case it can be dropped, but it seems like it should be moved to `MkdirAll`?
I think these are the only changes in this PR. It would be good to add a spec for it to be in the spec.
I don't understand the purpose of the write, but I'm not sure how the `exes` variable is used, so I would write `exes` and then if it is, then the `write` variable should be `true` or `false`.
Maybe we should log this?
This is not a good name. It's not a very good name.
why do you need this?
Should return 0 instead?
I'm not sure if we should do this in the api format.
Maybe add a `TODO`?
Should we add `TODO: @mramato do we need to add the `cluster` field in the `Cluster` package?
Perhaps this should be "bbox' in define_semantic_fusion and \" instead of "while 'over' in define_semantic_fusion' in use" instead of "while 'over' in use_semantic_fusion' in use_admin'?
Can we make a method that accepts a `Copy` ? We should also have a `break` argument.
shouldn't this be a warning?
Why was this moved?
Should we do a check for null here? (e.g., a boolean that gets passed around this)
what if we moved this assignment into the `@current_user` key?
@jmhooper @annando - can you please rebase your code on this change? I'm not sure if it's necessary to check the lightbox and not the current behavior, since the new code does not work for any other lightbox.
nit: `@param segmentInfos the total set of commit`
I think this should be `>= 2.7 as well...`
This should be `generators_machine`
This change is still needed to make the test fail with zero.
Why are we changing the value of `prefixed_userid` to `bob` here?
Ah, this function is a no-op, so I guess it's not needed.
Nit - remove the empty line here.
Should we also add the `FilesystemInterface` annotation in the `ImageConfig` class?
I think this is fine. I don't see the point of the implementation. Can't we just have a "Replace" tag and use `ISpanContext`?
Is it possible to get the ` particip461` and ` participFunction2`? I'm not sure what NET452 is for this. Also, if someone calls NET461, the `torch.X` file will be using it, but if it does, it will be for a specific use-case...
Is it still possible to have this as a default value at the top?
I think this is what we want to do, since the URL could also have a `find_instance_group_by_url` function which returns the original `continue`. I would expect this approach to have the same effect. (The same question for the other changes below)
It's not clear to me why this is necessary? It looks like the only place the `to` is used is in `(\\d+)`.
Is this related to the fix? I think it is better to do it in the `FormatIsMultiplane` method instead.
Maybe we should move this to `CachedAccessor` and put it into `CachedAccessor`? It's not clear what the problem is, but I think it's probably best to just call it everywhere.
I don't think we need an assertion to track what the function is
You should not be selected. `selectedItem` has default value.
Is it necessary to change these parameters? E.g. the "volume_type" attribute is not used anymore.
This should be a `ParameterTypeNames`
I think we should add a note to remove this and just add the `ISpecProvider` to the base class.
`afterAction` is not used anywhere else
I'm surprised that you don't need this.
I think we should default to the `1.1` and use the default value.
Not sure how this test happened... but the tests still pass when I try to use `resource_statuses_ pem` or `resource_statuses_ pem`
I'm not sure if this is the right place for it. It looks like we need to cache it in the past?
You could use the `deepcopy` method in favor of calling it directly.
`HTML_FILES_PATH` and `HTML_FILES_path` need to be defined here.
This should be a constant so we have an error message in front of the environment
Please don't add extra whitespace
this was the original issue. we don't do that for the first element, right?
I'm not sure if we should have a dependency on config. Can we use `Config.warn`?
(style) line over 80 characters
I don't think this will work. The templateRole is a required parameter so we don't want it to be in the list.
This is the only change in this file. The only change that will be to addMainThreadAsync to the constructor is to avoid calling the new one.
so `if opt.is_a?` is always true, so this is an assertion that is only valid if you want to be true.
This should be called `BaseElement` or `className`
This doesn't look correct.
Since Unit is not public API, we can remove it.
Do we want to add these to the `idx` struct?
why is these two import needed?
You'll probably want to use the "cart table" column here, too.
I think you can use `DEFAULT_GITHUB_ENDPOINT = "https://api.com"`.
Can we add some task to the log message?
This test should be moved to test_map.go
If you're using `sys.Start`, you should be able to use the same former.
`listType` has been used by other languages, so `listType` is a `count` value.
why is it ok to leave it here?
I don't think this is the correct fix. The title should be the title
This needs to be an `if` - that's where the `if` condition is removed.
why change this?
I don't see any code using thispaths anymore.
I think this would be a good time to use global `translate` rather than `error`.
Unnecessary empty line detected.
moved this to `resolve_module_install`
Wouldn't it be possible to call the `free()` function in `element.rb` instead of `kds`?
I think the default should not be here
why 1.15?
Can you use `{options['lazy']}` instead?
This isn't a test?
This is an odd case.
I'd suggest using `build_system.rb` to be consistent with other packages.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Metrics/LineLength: Line is too long. [82/80]
I'm not sure if it will work for nullptr. I don't think that it should be here
Can we remove this and just use an explicit version
I'm not sure why `Intf` was there before, but `AddInt` was there before?
How about just `only pending`? Also, maybe ` Torchic_notification`? Just curious, does the 1s argument name change from ` Torchic_notification_id` to ` Torchic_notification_id` or does the 1s argument exist?
I'm not sure if we actually need to use `config` for these attributes.
This was a duplicate of the one above.
This line is unrelated.
Why useTrait directly?
No need to add `f` here
The `io.prestosql.util.Rememberers.directory` imports go before the `torch.beat/directory.util` file, but not on line 392.
why is ENCFAIL removed from the ternary?
I guess this is not the only place where we can use this property.
What does this class do? Doesn't seem related to this class?
This is not a valid way to do the same. In the case of `string.IsNullOrEmpty` we should probably return `typeof(originalFileName)` here. We can remove the `call LoggingConfiguration Reload`.
This is a breaking change, but it's a no big deal, and it's just a minor cleanup
It looks to me like this is a bug fix?
Why is this needed?
This is unrelated to the rest of the PR.
Is this test not needed anymore? It doesn't seem related to the PR.
I would put these on a single line.
Since this is only used in the UI, it's not a good practice to use the `value` value from the DOM to the DOM. It should be either an array or a boolean.
I'd rather call `auto begin` at the end of `RDKit::MOL_SPTR_VECT::const_iterator begin` which is a function for all uses of `MOL_SPTR_VECT`
I think it should be `Action_ptr ptr` and not `Action_ptr ptr` as the second argument to `Action_ptr` (not the argument name) but the move it up to the next line.
why is this line necessary?
I am not sure what this is about, but the `resh` is a string, so maybe it should be `'theme.install'`
Is it possible that a table name can't match? What do you think about that? Also, why does this test fail if you use `name()` with a name that doesn't contain a table name.
I don't think you need a viewTop here.
I think it would be nice to have a method `List<String>` which will return the new values and then we would need to change the method signature of that method to return the new one. It can help us understand what's the purpose of this method.
This is not the best place to put `ScriptDTO getScript()` in a local variable. It's not a good idea to have a `@return` statement.
I'm not sure if this is the right fix. I would suggest changing the code to `!= null` if we do.
SimplifiedBasicBlock is only used in the UI, so should we remove it?
Do we want to make these error-prone as well ?
I don't see how this method can be called anywhere. I don't think the class is in this class, so this method should only be called once at runtime. Also, can't we just call this ` SparkMicroBatchStreamScan_` or ` SparkMicroBatchStreamScan_` ?
@wido This change will affect all the other changes in the same PR. The diff is not related to your changes.
This is a bit of an overkill. Maybe `var fixture = document.createElement('fixture');`?
nit: remove this import. Just use `openshift`.
This one was probably intentional?
This will write the content. I think it's ok to write it to the `array()` function.
I would put this on one line.
We still need the `goimports` package now
We don't need to handle the case where the context is not passed in the context. We're still using it in the context context, right ?
This method is only called when we return an empty string.
Can this assert be removed from `test_options` to `assert type(j)`?
This seems like it could just be `!dartfmt`. We have an example of how this can work.
I think there is a typo here.
I'd prefer the docstring here.
The value `ICICICICICIC` is not `called-File`.
I removed this because it is not useful to link the path to the `Sign in` option.
This was a bug, not sure about it.
This method name is not really descriptive. We could just use a `logger.info` method.
This is a breaking change for any reason. We should probably add an explicit `if err != nil` check that the `if err != nil` check was there in the error message.
Use the new Ruby 1.9 hash syntax.
I wonder if we should store the type of `upload` in the `Set` instead, since `source` will be the actual value.
Is this change necessary?
I'm curious why you're not just calling `waitUntilAllElected`
This should be `final`.
Shouldn't we check for the new type in the core?
this is a public key. Can we remove from this?
I think it is better to use `action.searches`.
I think we should add a check here that the user can use the same number in the code. It would also be easier to see if the number prefix was a fake call.
I think this is not the case anymore.
I think IApiResponse should be isposable here
I'm not seeing where is the fix, is it?
This will cause issues when using the app. But I would have made it so that the app would be the same.
@deads2k do we want to usePoolPool for this?
This code path should only be covered by one SRInfo.
I think this is the only change that affects TF providers.
This was the only place where I can't find a reason for this.
what if we called the `pubSub` in `block.Block` instead of using `BlocklistenerBuffer chan`
Can we make this 100? Otherwise it's a long time ago.
This should be split across multiple lines.
what about `bit`?
I'm not sure how I missed this - is it safe to just use `testMatch` here?
Can we have a test for this?
Why remove this? The root cause of the issue is no longer needed, but we can remove this.
Why error? I think it should be returned
this is the only place where we have a `@method` method that does the `schema()`. Shouldn't `sortOrder.unsorted()` return `Schema schema = spec.schema();` be sufficient?
The use statement is not necessary, it is only called in one place, and you can use it in other use cases like this.
It will be redelivered by default if you do it on a single thread, otherwise it may be redelivered.
I'm not sure why it's needed to have a true attribute. Is that intentional?
This change is not correct because `asset_type` is a asset type.
Should the `StateDBAdapterOption{NotFixTopicCopyBugOption()` call at the bottom of the file?
This should be `len(new_name)`, right?
I think we should use `include` in theory. We have the following "require". The H2O version has a different value than what you're working on, and we should be able to use it. We should either either move it to `mrb` or move it to `include` or move it into the `mrb` section.
why is this removed?
This is not right. You should be able to use `String.info` instead of `value.slice()`. I'm wondering what's going on here?
This change was necessary since we were using the `RSpec.configuration` to be in the `currently_executing_a_context_hook` key which is the only one that is being used. The code in `configure_group` is not in `app/views/models/main.html.erb`, so there's no need for `configure_group`. The `RSpec` is only for Rubocop and not just the `on` key. The only one we want is to use in the `configure` key so the `Rubocop` should be the only one for
I'm not sure this needs to be added to the "update string" command - it is used in other places as well, and not in the UI.
Why was this changed? I would expect it to always be empty.
`1000` is a better name, I think. It is a little confusing for me, and it's more like "1000". It is just `0.0.8`, not `0.1`. Also, I would prefer if you could add some description about what is the problem here.
This is not really correct, it is a function that returns a string that's not returned to the hermes. It should be returning the string.
Does it make sense to add a `Config.threads` field to LoadInterval Duration?
What is the purpose of this? Safer to make it work. It can be `localization.js`
`in(col, x)` is `literalSet`.
What is the reason for this change? I don't see the need for this change.
Is the `h.describe` still necessary here?
I'm not sure if we should use the old version here, I'm just curious. How does it work if it is not a problem in the future?
This is the reason we are not not in necessary_tasks anymore because the `.id` and `.append` are the actual `.id` methods. The same is for `get_active_tasks` methods.
Nitpicking: I don't know if this will work correctly in general, but it might be worth considering some more code that might import `log`
This should probably be ReadPreference.primary instead of ReadPreference.bypassDocumentValidation
What if a method returning null, does the return type have an argument? Isn't this return true, or a method that does not return null?
I think it is not necessary to call `blockValidatorProvider.setValidatorsForblock(long block)`.
This change is unrelated to your change, but it seems unrelated?
Can we move this to `bulk-edit.js` and move it to `bulk-edit.js`?
This is not really a good description to me. Maybe add a new `span` tag for the `definition` attribute.
I think you can just remove the last parameter altogether, and put it in the `if`
I would prefer to keep these in `__future__` for the same reason as before.
We should also do this for the `EXITING_DR()` method in `dynamo_detaching_flag`.
why was this removed?
Is there a reason this isn't just a pointer?
This seems unrelated.
I'm not sure this should be removed?
why is this change necessary?
Please add a license header here to make sure it is needed for some reason (like `#include "monster.h` and `#onTrigger`)
Does this mean this will only be called in a `beforeTaskJob`?
You could use `system.h` here. You don't have to check for null, you can do `sys.h.h`.
Is the idea here that events is `change` or "schema"?
Can we call this "SequenceNumberForNewDataFiles"?
Since we're using a value from `1` in the array, I think the `url_name` is more clear.
Why remove this?
Align the elements of a hash literal if they span more than one line.
`@var string[]` should be an `@param`.
I think it is better to move it down there.
"record" is the right term here
@smarterclayton I'm curious why we are not setting the local variable in `downloadProfile`.
I'm not sure about this change - `int` was supposed to be an array, because it was not a type array. The reason this is because of the type `array` was a type array, which means we can't change the type `int` to `int` because it is the type of the array. It's the type of the type `int` which was a type of `array`.
(style) Macros with complex values should be enclosed in parentheses
Can you add a TODO here to get rid of this and get rid of `tab_id` as the default value of `get`?
is this needed anymore?
Why are you adding this? We don't have the option to be able to use the `Gamepads` as the default.
i'm not sure this needs to be `signerFlag`?
This log line should be removed.
I don't think this is a right fix. The caller can have `parser::numeric` which is a normal parser error. I think the code should be in a separate package (which is not the right place for this) and the caller can call this before it is called.
This is a bit scary, but the naming of this code is very hard to follow. I think we should try to avoid the bucket and use the bucket in the `Simple*`, but we'll try to use it.
Same here - it should be `defined('CACHE_ENABLED')`
Why this change? It seems like it is a test that's used here?
It would be better to use the existing constants `run_HOST` method instead of the default one.
Is `application_default_PATHS` guaranteed to be the default application?
This might not be the right fix. The only case I was saying `io.prestosql.spi.countRows` will be `depth` if you want to change `entireColumnSelection` to `depth`. The user can not specify that the return statement is a valid value, so it can just return `true` when using `entireColumnSelection` (so I can see the same pattern as in the `validate` method). I don't believe this is a good idea.
strict code should use `use` instead of `use strict`
Is this needed? Seems like it should be removed from this test.
nit: it might be nice to have this as `options='build' not in sys.platform`
Why is the scope not set anymore?
What is the point of this change? Is it correct to include the CMake and CMake of CMake in the CMake? Or are there tests that could be updated to use `<Controlansible>`?
This change is not required. The `bearing` is not needed.
I think this should not be `FULL_VERSION` - the `nastroid` and the `nPython` should be `aio`, and should be `aio`. Then we don't need to add `int` to these functions.
Please remove this
This is just for testing purposes, but we want to make sure that the name is an integer.
I think we need to add this to the existing `self.approvals` model, since it's the only one that's already in `super`.
`Function` can be `List<U>`, right?
Can we remove the ChainCompatibility from the list of exceptions from these side?
Please rename to `delete fileExists(Hash $hash, name, bool)`
This should be in `__init__.py`
Why is this change needed?
How about making the `writeConcern` method public? It would allow a test to execute if you don't care about it.
Why does anything use it? What is this for?
I think it might be better to just do `pytest.mark.skipif(...)` in order to avoid the tests if they are in the same package (it doesn't have to exist), and only if the localstack is a local in case of tests. This will be a no-op because it's not a problem.
do not leave in like the edit method.
`[syslog-prot]` -> `[syslog-prot].prot`
I don't think there is any point in using RWMol to be a global variable instead of the actual variable.
Can we just name this `pendingMu`? It is not really used.
Is it possible to use the same result?
This will not work for null, if you have a bug you need to do a call to `loadAll()` and `loadAll()` to be consistent with the other code.
I think you need to install the OpenMP library, just to be sure.
Hmmm why is this test necessary?
I'm not sure we want to do this. It looks like it's only for testing.
If we're not going to finish, should we just call `hybrid` here or remove `TODO` altogether?
Can you just remove context.DeadlineExceeded?
This will cause a argNameVal to be a boolean, which is the true value for the "true" value.
It's weird that `$chars[$i + 1]` is checked twice, but it seems it doesn't.
I think it would be better to keep this as `env_array << "#{key.to_s.upcase}=\"#{val}\""` so we don't have to make sure that the previous code won't work correctly
I think this should be done in variableOptions rather than in scope scope. Otherwise we can get variableOptions from outside.
`checkNotNull` can return null.
Should we create a RuntimeIOException for this?
Who will happen if the tmImplementation is an integer?
This is no longer a part of the PR. It looks like the code was wrong, `up.js` and `up.js` will use the `up.js` to get the value from the builder, so I changed it to `up.js` instead.
why the logging statement?
Can we just use a "with" message here, instead of "with"? Then we wouldn't have to worry about the two.
`replace-partitions` ? This is a valid value. It might be worth moving it to a separate PR.
Why are we using these in a different PR? I'd recommend adding a new one to the `w3CB` instead of `*Bridge` to be able to get these to work.
This change is not correct. You can also test if `user = user != nil`, which will result in `attr`.
Should we use an `KubeletExtraArgs` here as well?
This is probably the only usage that is being used in this function. Can we just remove it?
It's a bad idea to test this behavior. I think the test should not be in this test, but we may want to test it for the "is this test" case.
this is the only change that will be needed, right?
I think this should use '_autosave instead of '_autosave
Why `BalanceRecord` instead of `AccountData`?
Why are we removing this? It is used in other places in this file.
this can be set by the `1` variable above.
Would it be simpler to use `(version2.spawn2, {})` here?
Do we have a case that this will not be the case anymore?
I think this is not really necessary as the `nowarn` method should be moved to the `log` object
I'm not sure if this is the correct place to put the `SessionStats` variable.
Why is this changing? Is it because the `codec` is nil?
can you add mock to ensure that the types are changed?
This field is now unused now.
I think this is a little too much. I'm not sure if this is the right place for this. The output is a `<%= video.clip.wistia_id>` so I'm not sure what the output is for it.
Why are we usingcrypto? why not make it a `crypto?` ?
I'd prefer a single if statement, if it doesn't have any side effects, so we can remove this.
Please update the doc for this
For some reason, it's not a big deal to add an explicit explicit-flush property. I think this will break some other code.
This is a bit confusing since you're using `pytest.mark` in a file, not a `pytest.fixture`. I would have expected this to be the `read` fixture. I'd just call this `pytest.mark` or `pytest.fixture` if you're doing the right thing.
Line is too long. [96/80]
Can we use just `slack_webhook.SlackWebhook` instead?
This is the wrong default, but the value of 0 is 1.
Is there any particular reason why you changed to `hive.openshift.io` instead of `clusterName`?
This is unrelated to the PR PR, I don't see a reason why we need to change the implementation in the PR.
This doesn't really fix what we are trying to do. I'm going to suggest to use `int` for `string`.
Why is this change in this PR?
This is now done by `retention`, so why not just `>=static const`?
I'm not sure this is the right fix
tpfp_func already does the appropriate argument for this parameter, so I think this parameter is fine.
I'm not sure why it is necessary to return the empty list here?
do we need this function?
I think we should just do feed.close(feed) instead of checking feed is null.
I'm not sure what `allowIncompatibleChanges` is supposed to do, but I'd rather it be called `null` and not `allowIncompatibleChanges` here.
Shouldn't the `$manager->registerReportWidget` be done after the `$manager->registerReportWidget` call as well?
I would suggest to use `http.Response`. It's not a big deal, but I'm not a big fan of this.
It looks like these strings only provide constants. Can you please revert them?
Should we assert that the value is 3?
I think we should be able to change these const constants.
`find` could be `it`
I'm not sure why we would ever return an error if the key is not a fresh key. The returned key must be comparable, and if the key is not a fresh key, the returned key must be comparable.
I'd be happier if we just use `goTransform` instead of `make update`.
This seems like the wrong place. We're using the correct `todo` value. We should be able to remove it for now, as this is a breaking change.
if not len(tab.history_prepared) > 0
This looks weird
I would put this in `Only_one_img` so that we only need to call the `show_img` when `open_one_img` is provided.
I think we should be using inputOffset[0] instead of inputOffset.
I'm not sure why you removed this? It is not the ccATFORM nvcc anymore.
why not use an `Spec` as a string here and use `Spec.string` here?
@pablolagreca I think we'll need to move this to the task. We already have `task.info`, so it's not necessary to have `task.info` in the task itself. Also I think that it will be better if we could use the task instead of the specific task.
I think you should just pass the `action: nil` param to the `start` method instead of passing a `action` argument.
Remove this import.
@bparees it was a bug. This is a bug fix.
Can you move this to a separate commit? I think this PR is already merged.
I think this spec spec needs to be moved up to the spec spec, to avoid confusion with `spec_spec_spec_helper`
Why is it ok to just use ex?
Should this be `if not is_tensor` instead of `->tensor`?
I don't think this is a good idea. The `x` prefix here should be `false`.
I think this method can be called `stats` instead of `null`?
`addBinaryAnnotation` returns `null`, so `keyValue` is not null.
I think this should be `item.recording_start` to be consistent with line 780.
It is not used
I think this can be removed
I don't think it's a good idea to move this to the top of the file, but maybe there is something about it in `pkg/cmd/server`?
use `assertEqual` instead of `assertDictEqual`
@Eric89GXL can you check whether it's ok for this case? I'm also thinking of the change I'm not familiar with the change but it is not possible that the normal `alloc pool` is a required one...
I don't think this is the correct place for this. If you're going a copy/paste of the code that was introduced in #2727, you can leave it here.
I don't think we can add the version here. The older version is the same as the older version.
if `metricsConfiguration.isPushEnabled()` throws an exception, we should add a default value of `metricsConfiguration.isPushEnabled()`, otherwise this will not be true.
Why do we need to check `num_outs >= self.num_ins`? The error message is "This is equivalent to `# if num_outs < len(self.num_ins) or self.num_ins == len(self.num_ins))`
I think this should be an enum to avoid an int.
This should be the actual value of the error.
This is a private member. Could we please change it to something that is private and does not change any other public/search/Ret/Start?
I'm not sure what you mean by "_canonicalRankingNumber" here ?
`loss_normalizer_momentum =0.9,`
I would prefer to be able to have a single block argument in the _WIN32. If the result is the same, then the function name will be less confusing.
Please avoid unrelated changes in this PR.
this is an interesting change. If you're using the `tailBal`, it should go in the `acme` section, otherwise it should be in the `acme` section, right?
Why not just return 0 here and then do nothing if it is empty?
This was a bug, if `copy.List()` is called on `modifiable`. If it is a list, it should be called from the caller.
Thanks for this change as well
I'm not sure what the best way to handle this is to make things more clear.
This is a bug fix as well. Shouldn't this be `version`?
This errors is a little confusing. Can't we return `errors.Wrapf` instead?
I would suggest that the new code here is defined as well.
Why not just `network-audit-results.json` and not just `network-audit-results.json`?
Why is this removed?
This seems like a breaking change?
I think this can be simplified to `background_color` as well
This seems wrong as its the default implementation.
The reason for this change is because it was here before the `if` below.
This is not related to your issue, but I think we still need the `html_safe` option here. The current user is used to generate a single thread.
Why this change? The only reason it's using attach_case is when the user doesn't want to use it.
I'd suggest to use a constant somewhere for this in the `const`
I think this could be done in a separate PR
Is this needed?
this should be removed
@matt-gardner How do you feel about this change? I'm pretty sure we'll end up removing `1` here.
can we use the same constant for the `RDKit::common_properties` instead? Or do you need to make a new constant for the `RDKit`?
I don't know if this is true or false anyway, but I think we should probably check for the `current_user` variable instead of using `@current_user` everywhere.
Please use tabs instead of spaces
This code is only valid when the account is not set.
Is it not possible to just have this in the `add_index_in_config` package? I think we should be fine with it.
We don't want to wait for the client?
I don't think this needs to be in, but the others are not in the same directory.
I think we can make this package private, it's a bit more obvious and clear what's going on. What about something like `pkg/resource/utils/pkg/resource_id`?
This method is used in the same package. Can we remove it?
Is this a breaking change? I'm wondering if we can get rid of it.
why is this needed?
I think you can remove the `label` parameter, the `hasOwnProperty` parameter and just use `hasOwnProperty` instead of `hasOwnProperty`
I'm not sure about this. The only difference is that you're using a single space in a row that is not a row in a row but in a row in case of a single row in a row, the same as the one in the row in `io.prestosql.plugin.hive.config.Long`. I'm not sure how to test that. I'd expect a way to get the version number.
I think this was the intended change. The only problem with the `h` is that if there's any `p` value, then this value should not be used.
Why remove the name? We could just use the `name` tag.
why not the new method ?
This is also part of your fix.
why do you need this for keyword? you can just add 'device' to the other the component
I think it's not a problem, and we should only do something if there are no roots_xcursor_theme_create is NULL, and if there is a workaround, then it would be better to check the list and then set it to NULL. If we are going to do a check here, then if there is a `xcursor_theme == NULL`. I think it's probably not worth the effort to do this.
The `Filter` and `LogEntry` are used to return a `null` value. Is that intentional?
`key in self.keys[0]` might be clearer here, as it's not really the case that it's a `key`?
This is the only real change in this file. The desktop window can never be created. This is the only way that the `windows` window is in NVDA windows, so the `windows` window can be created with any other getter.
I'm not sure why you're not change it, but I'm still not sure if we should change `VCPULimit` to `GROUP1 vos` and have it in the `VCPULimit` type.
The default number of supported Tiers is 10
I don't think it makes sense for this code to be configurable.
Is it better to use the v1 API for this?
@michaelkuhn Do you have any concerns with these changes? I'm curious how does the package package get resolved in the `private` interface now?
Is the `GenericMeta` import really needed?
The template doesn't have the template anymore?
This is the only place where `configuration.reporter` is used. It seems like a very common pattern here would be to avoid calling `.reporter.reset` twice.
writeLongScalar is a very generic name and the value was being used to generate a new method and the value is not "write" at all (i.e. it is not a part of the API and should not be added to the caller.
can this be final?
Should we be checking the `c["reason", sErr.ErrStatus.Details.Causes[0].Message)` instead?
Maybe make this a `@return` and make it a `boolean` instead?
AFAICT we don't need this. Could we use `continue.MAX_VALUE`?
Please add the `<%= ...` tag to this method
Do we want to say that `if tab.pin is True:` is always true?
Why did you remove this?
Is this change required, or is it just me? I don't see it used anywhere else...
This doesn't seem right to me.
This is an important change.
Is this really what we want? I'd expect it to be a global flag.
Shouldn't we use the `SqlServer` helper?
Can you change to something else? To force this, this would change the behavior as the reindex will now be incorrect, as the code will be in `beat/pantsd/openopen` instead of in the new state.
is this a pre-existing change?
This project file does not exist, so I removed it, because it's no longer used. The `Bolt::Logger` part can be removed from the code base.
I think it should be `reverse.of(arg, value)`
I think it should be `takesHeapSnapshot` (and similar for `src/main`).
Same here with the other two conditions
This change is unaligned and is not necessary because the `extern.supported.go` package was not modified yet.
Please revert this change.
Why not just do `getUpdateCKorUniqueIndexKey` here, and do `if (getOperatorType() != REL_UNARY_INSERT)`?
Please use `glassfish.gmbal.lass` instead.
Block has too many lines. [32/25]
I'd add a check to see if there's any value in the config here.
I think we can remove the check for null check.
This one is not needed, we can just add it to every request.
I think it's better to remove the `job.identity`, and the other `job.identity` files.
@jridgewell can you confirm if the code in the list is the same as the first parameter and the second parameter it's not the last one?
I think it should be an error to see if it can be nil. Otherwise, we'll have an error for user code which will be fixed.
@smarterclayton do we need this? Can't it be a `*`?
Do we need to also have a migration to make sure we don't have data in the DB?
I don't think there's a problem with making `-d` an optional string here. We're just getting a `None` from `io.prestosql.spi.return None`
I'm not a fan of having a variable called "devices" in our codebase but I think it'd be better if we used something more generic.
I would use `iff`. It's used for all platforms.
I think this is fine as it was just a lot of cache-related things in the `TestAccAWSER` and not the "Region" of the "store" code.
Why `connected` is `None`, `None` is required here? If not, I'd prefer to avoid `Optional[str]`, as that would make the code much harder to understand.
Maybe we should add `ConfigError` to `run_no_window` as well?
Should be `getNonStreamingMethods`
I don't think you need this change.
The cast cast is not necessary, because `zeros(shape.size(), 0)` is equal to `torch.shape.size()`
Metrics/LineLength: Line is too long. [82/80]
I'm not 100% sure if this will cause issues. But we should not be using it unless the other file doesn't exist.
Can we use the `GraphController` instead of the `Model` one?
I think the original code should be removed and the new logic should be moved up to the `setupOn zeros` block to be consistent
This should be `destination` and the `Class` field should also be added to the `*` field above.
nit: You can move this to the top, then?
I'm not sure why this is changing. I would expect a bug.
I think this is wrong, the `pair` class should be in a new `after` component
I'm not sure if this is the right way to fix this - I'm not sure whether this will make it easier to test the user. I think the agent agent should only be set if the agent is available. I'm wondering if `c.ust.kdirAll(dir, 0755)` is the right way for the user to be able to see the agent.
Why do we have this `TraceContext?`?
nit: `FileOutputStream` and `BufferedWriter` should be on next line
This seems like a regression.
Why does this change to 255?
"This field is prohibited from being present" -> "This field is prohibited with ..."
nit: remove empty line.
Is this a change in behavior that the user might be using `QUIC_GO_LOG_LEVEL.cs` ?
This is a bit of a logic change, but why not make a `*virtualDiscDesc.CapacityAllocationUnits` return a pointer?
Would it be easier to test if the `fingerprint` variable is not initialized?
I think you can get with a simple `mkString` with an `isEqualTo` with a `toString()` method that will be returned by the caller.
why this change?
I am a bit confused here... what happens if a server is not running? Is it a server side?
Shouldn't this be an error if only the error is used for scopes is used to be used for scopes?
I think we can skip the test if there's only one image
the go-type imports are the same, can you remove it?
Nit: You can use the variable name `depts_text_t` instead of a special name for `list[subquery]`.
Please use the `NU General Public_NAME` variable here.
Metrics/LineLength: Line is too long. [90/80]
I think this one is missing the test name
I think the `env` and `Tags` are unused.
I'm not sure about the extra new line.
What if there is no host_output?
this should probably have a `getNodeAttributes`, I believe.
I think we can remove the old field.
I think we need `topic}/ws` here and `s.pssPostHandler` because the value is a `DefaultTopicTopic`, but that can be `null` in the case where the POST is not a `schema`, so it can be used instead
this can be removed.
This test seems to be missing an `object`.
This seems like it could be `allowedPostRequest(req)` but the same as before.
I think this should be `static`. I don't see how the new methods are being used.
Any specific reason to remove this ?
Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
Please make this consistent with other constants. Also, don't put `int` on the next line.
`Cas_global_BATCH_clear` should be added to the DEFAULTOR_DEFAULT_BATCH so that it can be used here.
Is this variable used anywhere?
Why do we need to check `Buffer.isBuffer()`?
I don't think it's necessary to add `padding: 0` here, since it is in the `init` loop.
I don't think this should be in the constructor, right?
this is not the only caller we want. The only reason we are setting is to send to an file is if the file is in `daemonExportFile`
Why the extra line here? I don't see why it is needed.
nit: we don't need to do this, it's only a single value.
It's really a public API. We should be using it for the same reason, and instead just in the API we are using it in the API which may be used in the future, we should be able to remove it from the API.
I'm not sure we need to do anything more here. In the case of relay, I don't think it should have relay, but it is the relay execution that is not relay.
is this a regression?
Metrics/LineLength: Line is too long. [83/80]
remove this line.
This is just a minor cleanup - we should try to keep it simple.
should the output output be the first one?
Why is this change necessary?
We could use `onchainConfig` and `onSelectionConfig` directly instead of `isOnchainConfig`
We have a `AutoRest` field which will throw and throw an exception when `AutoRest` is true (which I think is not what we want to do here).
In theory this could just be `time.axe`. It would be better to have the default value be a string.
Can remove this file.
Why is this not a negative value?
I think this is not really the right way to do this. It is only used by one thread, not a thread. So I don't think it is necessary to do this.
You should be able to use scenarios like this, but it's more a convention for class names...
Why is `MainMenuItem` not needed here?
The way I understand this is to make the code more general and avoid the `PrivateProfile-L1-1` dependency. I would like to have a test that checks whether this path is enabled or not.
Is this change necessary? I thought the idea was to have a single field to override this instead of relying on the existing one.
Can this just be removed?
I think this should be moved to `mypy` as the name. It's a bit confusing since this is a `acc.URL`. I'm also not sure if that's the case.
I think it's better to just use the constant in the name.
This could be a debug statement and use `return !'se\/cdp/`. That would avoid checking whether the value is provided. Also, this is a bit confusing.
this will break the tests in the next release
It looks like the new values are not used anymore. Is this intended?
You can do `.to receive(:send_notification_email).now`, no?
Why not "apply", as well?
Should be `TabConfig`
I don't know what this is supposed to do. The user should be able to just set the "user" variable.
I'm not sure this is a good example, we should set the default of Unsubscribed in the test. Isn't the default of Unsubscribed used anywhere else?
Is there an issue with this? We may want to have one of the `sports.literal`s here to prevent this from being called.
Whoa, I think the intent is that you can do this for the same reason as in the `context` model.
I would not change this, it should be a static import.
Can we just use `failed responses`?
please remove the extra spaces
Do you mean "prefQueue" instead of "source", so that we can use the same message as "prefQueue"?
I think the idea of using `Admin::Base` instead of `Admin::info` is not enough to be consistent with the other two, maybe `Admin::Base` or `Set::Error`?
injectionManager isn't used anymore
This should be a constant somewhere (not just before the "of" PR)
I am not sure if this is something we want to do to pass to `self.tab_url(idx, self.tab_url(idx))`. What is the reason?
This should be a `try` block.
I don't understand how this is supposed to work.
@mjkkirschner why is this needed?
Same here, the `freeze` is not necessary.
This package does not match the code. I think the `jav ?>` package should be ` Kind<TYPE, ?, ?>`.
do we need the `DGCSem` object in chunks?
This should be in a separate commit
This is no longer needed. Please revert.
Why this include include? I see the issue with the #include "xlocale.h" should be changed to use the #include "xlocale.h" to make sure all the includes are set.
I'm not sure if we should just get rid of this?
I'm not sure if it's safe to remove the mime check here. We should probably just remove the second check.
I think this was intentional - the `LongType` function is already called in a `Koalas` module. I think that it should be removed.
I'm not sure how this could potentially work. I think this function can be called by the `objectTypes#getAll()` method in the same class that's already called by the class `getAll()` method
Why not using the word.
For clarity: This is a bit confusing since the solver is only used in an `if` statement in the solver. It's also not needed since the solver is actually the solver. The solver can be removed from here. The only way the solver can be done in `_set_phase()` and not `_set_phase()` calls in `solver_mode()` and `_store_frame()`.
I don't think the extra whitespace are needed.
The `isinstance` check is pretty hard to understand. How about just `if (isinstance(value, str))`?
Why is it necessary to make this change?
nit: remove unnecessary formatting
Is this actually a `working_dir` variable or should it be `working_dir`?
I think it's not necessary to put this in the method.
Nit: I think it's better to move this import to the top of the file.
Is it necessary to change this value to `this.id = id;`?
This change doesn't seem necessary.
How does this work?
This import is unused.
Should this be done in the `DefaultTask` function?
Shouldn't we also add the grantee id in the DB and the granteeID in the DB?
can we call this environment variable to be surely reused?
Is it possible to use the same pattern for `driver`?
Please remove this empty line
This is the actual actual root path.
Is this used anywhere?
Do we still need the v1 API?
`--review-status` is already in the list, right?
I think it might be more readable just to check if this is the case (i.e. the code is in `io.prestosql.spi.cmd.server.Resource.DefaultResponse`) so we can check for that instead, but it seems not a big deal for this case
What is the reason for this change?
It is not clear that this will be a problem when using the `pDependencies` value. Is that intentional?
I don't really like this. It seems to be a better approach of using `QUmnt` in `Error`. I think it is better to do something like `using System.uce(key, bool)` instead of `using System.uce(key, bool)`.
We could use `onAll` and `off` here.
I'm not sure about this. If the flow exporter feature is in `__enter__` it is in `FlowExporter`. The only place this is used is when `featureFlowExportTimeout` is set or set to false.
nit: `debug` (and `debug`)
This was the only place where we would have to fix the bug that's in the issue.
I would put this right before `if (ledger_walker) {`
I would put this in the `__init__` block as well. I'd rather have it as part of `BaseTree.setName()` and then use it to make it more explicit.
should we use `path.bytes_to_escaped_str` here instead of `str.wp_path`?
Why did you change the opportunity to use spaces here?
Why not use an if?
This should have `ImageDirectoryStructureCreator` set to `ImageImage` otherwise the name won't be changed in the future
I think we don't need `s.AWSCluster.Spec.Tags` any more?
Is this needed? I don't think it will do much, since it's the default
Please add `initPWMClocks()` to restore `initI2CClock()`
I would have put an empty line after this one, it will be easier to debug
this is not necessary if your your branch is merged
Why are you using a `iFromPeers` from the `Bail.simplee`?
I don't think this should be part of the API. We should add the `clientId` property to `oauth2` and not the `oauth2` field.
I don't think we want to add this, but it's probably better to just return the result from claims.Namespaces in the code base.
I don't see any reason to use a RelaxedclaimPurge?
I am confused. Is there some reason why you didn't change the `eips` variable in the `ethereum` method?
This default was unused.
If the node has been cleaned up right, the node will be cleaned up after the block is cleaned up.
this was the bug, in the case where the originalbody had a `ACE` with `filepath.Join(criuOpts.ImagesDirectory, imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp imp impbodybodybodybodybody)`. I think it was only called by AVR?
You can't change the original version, right?
The "currently" is a very confusing name. It would seem to be more consistent.
please move the `computed` import to the top of the file (ie. `pip install`), otherwise it will not be computed.
I think we should be using the @reload tag here
this code is removed
@slavkap check if menu is set to true?
@deads2k i'm missing something here but I think the package still has `ConfigConfig`?
**suggestion (non-blocking):** It's a bit unfortunate that we'd need to do some kind of things with the `if` conditionals here.
I'd prefer to return (ev->flags & ASIO_DISPOSABLE) != 0 instead.
I think we can remove the variable here and not just use the variable.
I think it's not clear why this is called "StatusCode"?
`TickerandasIndexingError` should be `UnandasIndexingError`.
Should we check that `GetDescriptionDescription` is set when the CoreChecks is not available?
I don't get this change - the Context object can be private. Is this intended?
Are these no longer needed? The `choice_name` field is already being set in `esc_choice_label`.
I'm not sure what the right thing to do here is, but this seems to be a different error than the `createWriterFunc`. What about adding another `if (createWriterFunc != null)` to the `schema` above? The `metrics` is not used for the `metrics` case.
I don't think this is necessary
Why not `zpoolLastSyncTime            .Gauge`?
This feels like a little weird, what about the subtraction?
Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
We could use a public constructor here.
hm maybe we can put these parameters before `f`
Why not use the `paginggroup` package?
"Re-upload all fragments, even when it is used"?
Not sure if this is a good idea. But if we want to be consistent with how we name these, we could just have a single `ctx.Resolution` and a single `ctx.Resolution` or something
This change seems unrelated to the bugfix, but the bug was there before, in which case, you could check `mSession.setActive` before calling the `setActive` method.
Why are these needed for BMOs? If you are going to be looking up in BMOs, I would say the limit was the correctness. If it's a bug, it should be fine.
I would keep the old name `req.go` for consistency
Why not just "toukyou"?
I don't think this is correct, we want to make sure that we don't provide `./gradlew spot` there as an option to remove this.
Isn't this one still working? What is GridTest?
nit: move to line 152
I don't like this if-opts.generate_hexfloat_in_json: but if-opts.generate_hexfloat_in_json is not set, we can use `!opts.generate_hexfloat_in_json && (type.base_type == BASE_TYPE_DOUBLE)` to get the `!opts.generate_hexfloat_in_json` check.
This is a good idea, but we can't make this interface type boolean. It will be easier to read when we add a `App` interface.
I don't see the difference between parserparser and parsers in parser. The parser needs to be added to parser, not just parser, so it is just that we need to know about parsers in the parser.
Can we just have this as `require ('./.gulpfile.iced')` so we don't have a way of doing this now?
`findElements(By by)` is more clear.
Is the new check necessary?
Isn't the right place to do something if `opts.fee` is undefined? I'm not sure if it's the right way to get the right error.
Can we just use `this.has_binary` here? We'll also need to check if we can use the conditional on the block
The `*Time` should be removed
Don't we need the `ReadVectorSize` in all cases ?
This is unused and should be removed.
How about `GetDataBlob` for this method
we don't need `info` here
I think it's better to use a boolean, not the string literal.
Is there anything we can't do on 2.3?
if `spec.GetXattr()` returns `0`, this should never fail
I think it's better to put these on the nextMedia if/else clause.
I'd prefer if the name was not the name of the name.
Can we add the file to the copyright?
why not `findUpVirtual`?
This should probably be `os.environ`.
The reason I'm not seeing these `substring` functions are using a string, is that because we are using `token` instead of `substring` here?
The delegate variable `delegate` was never used. It was just a thunky bug in the future. If it's a good thing to do with `back` it was just a `delegate`.
I don't think this should be removed - the `--call` flag is now being used anywhere else.
I think this is not needed?
This should be removed now, right?
If this is just forcing a different filename (which is why we are not doing that, we can't just delete the old `NCR_BA80` and then do a check that the data is present on the database), and then do the right thing in that case.
The question question, answer, readonly, dep instead of each type of the entity? The question, answer, readonly, template.
The name `--Dockerfile`, `--no-cache`, or `--no-cache-cache` is fine.
I don't think this will work. It's an object of a resource that was not present in the middle of a string.
splitting this list is not necessary
Are these changes related to the bug fix?
Why was this removed?
This is the wrong place to put the auth. You can simply use `certificate.getPreparePayloads().stream().map(SignedData::getAuthor).error()` instead of the second.
I don't think we should remove the `mqtt` import.
this should also include the `<`
I don't think this `format("%s` is the correct type of exception. I think you need to check the `type` is not supported.
I'm a little concerned about the use of `procfh` here, since there are some other code that is used for this.
This should be done in a separate PR: 1. `django_headers` must be used for the new headers. 3. `auth_header` should have its own headers, which is not what is expected. 3. `django_headers` does not do the right thing.
nit: it might be nice to have this as a `setTLSMap` method.
This line can be removed, the same line below.
I don't think this needs the `on_approver_removal` function
This is not needed, because the test is already testing the `stages` value
Why not just `if (messageBody.IsEmpty && messageBody.IsEmpty)`? It doesn't seem right to me. If I understand correctly, the `&&` check for the empty string is not needed here. For me, I don't see how the code works. The `IsEmpty` method is called after the `&&` check and the `messageBody.IsEmpty` is called.
I'm not sure we want to change this, but just curious why it's needed?
I would have added the `_tls_hash_sig` here, but it's a separate PR
It is not possible to have a tmp column that has been passed in from the client code, and not to the client code, which is not the right one to use.
This is the default setting so should be set back to false.
Why the `MPI`?
I don't see where is the case?
We don't need to use this file anymore, right?
what is the difference between `mkString` and `HashSet`?
Shouldn't `CertificateRequestReasonApproved` and `ReasonDenied` be defined here? In the case of Denied, the CertificateRequest has been approved by the signing.
@jridgewell Is this a bug? I don't see why it should be `if ( !accountID ) {`
Why not set this to `image` if it is not `alteratively` if it isn't `X`?
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [86/80]
I think we should be able not introducing a new list of `PRIu` here.
@mjkkirschner Is this going to work on Windows?
This was not right
This was an odd case where we were using `winVersion.winVersion` in a non-public source, but now I think I can live with it.
Just wondering, why is this a default?
This instance of `xyz` can be removed now since it's the `@product` annotation
I think it would be better to use a more specific typedef
<msg> <msg> <msg>  parens should be on the line after the last argument when opening brace is on a separate line from the first argument.
I think this should be changed to a different type of error.
nit: this import should be removed.
nit: can we change this to be "history of the table's state" and "currentSnapshotId" to match the other two methods?
This should be in the `instr_is_scatter`, not in the constructor.
the same as the other one in `pkg/api/pkg/api/pkg/register_test.go`
This could be moved to the `LBFargateManifest` function
Shouldn't this be `vpn`?
Is this the only way we can have a single `body =` or can we just return an error?
why is the return value removed?
I think `retry` is a little confusing with a step in the spec. What about the go build command?
@saghul this file has some side effects, are we sure they are not publicly affected by the tests?
This needs to be removed.
This is a little unusual, but if you don't mind to leave the `verify` call in here that is the only one we can get to the `verify` call.
Is it possible to test that k8s 4 is already `ply`? If not then we need to test the k4s dependency in the test.
This should probably be a warning in `pkg/reci/Ri`
should we use a constant here instead?
This should probably also be a `SyncSyncSetResources`, I think.
What about a `while batchr` field?
Is this a null check?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I think the if block can be moved to d_nullptr() and then else block on that branch.
Should be 'esversion'
@danrot what does it mean? is it only for testing?
Maybe we should rename `capabilityFirelensFluentbitCapabilities` as it's the same as `vic-machine-per-enabled`
@bparees this one is the bug.
Rails/DynamicFindBy: Use find_by instead of dynamic find_by_major.
`pmix_RELEASE_leet(Module, pmix_nspace_caddy_t, !hehe_RELEASE_leet(Module, pmix_nspace_caddy_t);` This is why I added it in the end of the function. It's a good idea to remove it from the list.
Can we have the test fail with this PR?
I don't think this method is necessary, there should only be one method that takes a array and returns a value. It should either be `true` or `false`, but not the class. Also, it should not be used in this class because the class is not called from the class itself.
I'm not sure we should have a test for this.
Do you need a nil check here? `if found_env_vars[:th]; not found_env_vars[:th]; not found_env_vars[:th];`?
This was a bug.
This is not a valid call, we should be able to re-define the `if (variableInMap)` check above if `refreshToolboxSelection_()` fails
Do we want to keep the finalized index?
@mjkkirschner @stuartwdouglas thanks for this change. I'm surprised you needed `auto` here...
This change doesn't seem to be related to this issue. It looks to me like it should be reverted, and I'll remove it.
I think this is not the best approach, but I don't see a reason why I'm not saying it is a good idea to just use `Parse`
Why do we need this? It is not a very long-term const.
can we move this to the other go files?
This doesn't seem to be used anywhere.
`cludingcluding-*` is more correct here
Should we rename the method to `EnableApplicationResponse` or something like that?
This is a bit weird. What about we just add a `pony_assert` method that returns the stringtab object, and use that here (which is the case in all of the other instances) and then checking if it's a string. That would be easier to read than the `default` function.
This import is unused.
Is the changes in this file related to this PR?
I don't think this needs to be hardcoded to `_u.date00` (in this case, in case it is not null) `_u.date00` is 0.
` BoolParameter` and `default` should be `default=True`, right?
I'm wondering if the reason this isn't just a single parameter? If so, we could make it `http.waitName` or something, since we don't really need that, but we can't really do that at all
I don't understand why this is needed, but the only reason this is not using the loop is because there is no licence in this loop
I'm not sure about the import here. If we add it to `ncr-layout`, we can remove it from the file.
This is not related to this PR - we should remove it too.
This is a bit unrelated to what we are passing in `Map<bytes>` so you don't need to pass in the constructor and use the new `Map<bytes>` in the `getQueryIds` method.
`GetSlot<T>(string name)` is enough, it could be `!== CSR.TryGetValue(name)`
What about `const std::bind()`? We are already doing `std::luaGameLoadMap.IsWindows(g_game, path)`
Why does it make sense to have a method `Loading` here?
Why `healthcheck`? Is it a `healthcheck` rule?
is this a change in behavior that we will want to be able to set it back to false?
Does SubnetGatewayIPV4Address not need `SubnetGatewayIPV4Address` ?
This is an unrelated change, but I wonder if we should have an `find` method that does the same thing.
Please use the C name as the first argument to avoid the needing to import anything from the database.
this was a bug, I didn't know you could write it.
The issue was fixed in #9346.
I think this can be shared roles, since it's not a part of the plan
This is a bug fix, we may want to make this an error if `myv.compute_in=true`, otherwise it will fail.
this is a bad idea... but it doesn't make it so we don't need the `ful` here.
@deads2k @smarterclayton can this be done in a follow-up PR?
Is this a copy of the original bug?
I think it would be better to use `GetStream(string filePath, FileAccess access = FileAccess.ReadWrite)` and `GetStream(string filePath, FileAccess.ReadRead)` as it's not really a part of the API.
`q hints` should be imported as `q_for_run`.
Could we use `WP_CLI_class` here, instead of ` neve-tansUrl-header`?
Is this a typo?
It seems that this function is only used in a single if statement, so it's probably best to use it in both places.
No longer required after changes to `<insert-name>`.
The same question here: Is this true for `version` (see above). The `packageImplementationVersion` should be `-ee`, not `version`.
Is `*` needed here?
This file has to be removed.
`copilot-task` might be better.
`value` is always 'input'. Is it because of `<=` or `<`?
Can we make this configurable?
I think this is a little bit of a hack, since the `if` and `strncasecmp` is the same. Maybe just `if (!strncasecmp()) {`?
What does "the" mean? Is there any specific reason?
This can probably just be `issubtype(X, B, ...)`
This should go up the `checks` above, right?
The `KOKKOS_ARCH_VOLTA70` is defined at this point, it's not used anywhere.
This is the way the pretrained tests are running, right?
I think the old version was correct, but I'm not sure it's good to check here, but maybe the new behavior is better.
Do we want this to be an array? I'm not sure how it's done, just wondering if we can get it to avoid the need for it?
this should be `daemonExportFile`
I think this needs to be `global.googlesitekit = {}`. We need to use `!=false` as the API is already in the `googlesitekit`.
I think it would be more readable if we could also set it once.
I think we can also add a type to `omitempty` in the `json` field in the `omitempty` field.
Can we just make this a constant and use that in `conans.utils`?
It would be nice if this was a separate patch, but if we're going to make it a separate commit for the future (if any) then we should make sure the existing code is in a separate commit.
What is the difference between `os.path.dirname` and `os.path.dirname`? It's the root cause of the issue you introduced in the issue where the file is not in the current `os.path` folder. This will make it more clear. I'm not sure if this should have any side effects, but maybe that can be done in a follow up PR, so I'd like to see how to reproduce it.
I'm not sure this is correct. The only reason we have this is for the `this.wineEnginesPath` check in the `buildCallback`?
If we want to use a `break` in the `KafkaItems` we should do that here as well and fix the other fields.
Can we add an example here to ensure we are always creating a new Network ID?
Should this be in the next PR? I think this should be moved down.
> This value is not right-hand. If we use `salesforce.androidsdk.ROOT` we will have more than one constant for the SalesforceSDKManager
We don't use this variable anywhere else. If it's a default, let's set this value to `DEFAULT_REVISION` instead.
This is not correct. It's called from the login configuration, not the login configuration.
This should be `if (layout === 'viewer') {`
This import seems unneeded.
Why not use the `py` for this?
I am not sure if we should do `/` here or we could just pass a string here?
Do we want this to be configurable?
How about using a simple `RetryForever`? It would be easier to track the API.
I would prefer a different error message to use `error_to_gio_error` and the `ot()` function.
I think this would be better as a key. The user would expect it if they're not specified in the hash
I would put this on the `IntegrationTest` class instead.
This should be ` MatchPriority(priority uint16)`.
The packged described in the schema is unfortunately unlike the information in the log message, but it seems like it should be the unresolved.
nit: I know you didn't write it, but it would be nice to have an explicit `if (Path == "") {...}` in the `else` block.
For consistency, please add a link to the name of these new api fields.
btc = Concurrent2 and Concurrent10 have the same meaning as `btc[0] = info.count[0]`, which is the default. So we should probably remove the `[0]` here.
What is the error returned by the `fmt` here? Could this be `github.com/g`?
This is not a good place to put this in an if/else
Do we want this to happen after the `_target` call?
I am not quite sure this can work. If `torch.shape` doesn't exist, we should just move `torch.shape` to `torch.shape`. That way we don't need to import anything in `torch.shape`.
i don't think you need the `return nil, nil` part here. I don't see why it is needed for this PR. it's a good idea to add it back in the interface. just make sure it returns an error.
shouldn't this be 'complete'.
Since we use the `@project` constant in the Job method, can we use the `admin_session_required` constant here?
I don't see why you need this change
I'm not sure if the interface will ever be `nil` here, but ` PutHash` will throw?
why the change here?
Is this what we are trying to avoid? I think the issue is that this should be a different fix.
I'm not sure what the best name. How about `to scopes?`
I would suggest using `call()` here, otherwise the test will fail if you want to load the node
I think we should be storing the `secondary_info` variable in the `fields.yml` and then we don't need the inherit at all if we are using it in the `fields` file.
This is an unrelated question. Maybe something like that in `DataKeysStorageStorageFunction`?
This seems to be dead code?
@tgamblin This will be more readable in order to maintain the list of files in the `build` module
This seems to have an easy change in the code. The "in this context of the PkIn" of the code is `src`. Can the `dstPort` be moved to be `1`? Or is it just for the `1`?
I think the default should be "Initialize"
why not just `race` ? `settings` is a list of url
This should be `oseSettingsProviderProvider`
@mhoemmen I think I'm fine with this, but I'm fine with this change. The point of this PR is that we have a lot of work to make a copy of the log message, and I'm not sure what's going on here. In the end the message is that if `chunks` is `int`, then `db.logger.Infof` will always be `true`, which would be the case.
Is this label only for node.textContent or will it be true for the label?
Can you add a space after the comma?
Why does the config need to be set here? If not, how about we just pass a string in the config instead?
This should be moved to `updateLibrary` so that it is called from the LibraryController constructor.
I think we should default to using the `is_default` here, since the default will be set to the default. Also, we can use `is_published?` instead.
Is this needed? If not, why? If not please use `encodedBuf.copyOf(encodedBuf, "n")` (we do not need to do any other things in the future)
What does this do exactly? I think we should be doing this with the other `Tracer` types.
I think `JsonRpcError` should be just `CharCharS_PRICE_TOO_LOW`
It's better to return the type here.
This will break compatibility with existing test coverage.
I'm not sure that this is going to work - you'll get a bunch of these in a `BaseTracer.create_lambda` function.
This is not really a good example of how the `lz3` works, but I guess it's the default of `lz2` above...
It's not possible we could have a method for the null skew that can be set by the previous one.
spire/api/server should be mocked
This is the only change I wanted to call `RunQuery` now. I'm not sure if this change is worth it.
What about type hints?
Please add a description of what the new class does and why we need to add this class
Do we want a test for this? I don't think it will work as is
I think this should use an existing one, not a clone. The main issue is that this isn't the official plugin name.
`connection=True` or `connection=False` would work here.
I'm wondering whether we should call this get_get_monitor_create() or something? Would it be possible to call this action only if there is a call to get_get_monitor()?
Can you add a TODO here that this is a TODO?
I think this should have been a separate commit
This is a little weird, I have a doubt. If unlink_display_sockets() method does that mean there's no unlink, it is no longer a bad idea, just want to keep unlink.
This function is unused.
Metrics/LineLength: Line is too long. [82/80]
This is not necessary. In general, we should set the result of the `RestProducerInvocation` in a few places and make it available to the constructor of `RestConst.REST_INVOCATION_CONTEXT`.
I'm not sure if this is actually the right idea. Maybe it should be part of the if block?
I would prefer if we were checking if `buf` is `true` and if `!buf && {}`, then it wouldn't have the same behavior as the old behavior.
I think we can use the `wlr_input_destroy(dev, wlr_devices, link);` constant to ensure everything is properly properly initialized as a global tool (e.g. a tablet/destroy for an event).
Should we do the same thing for the other methods?
This should be `props.children.forEach`
I would change this option to `--mode=true` to avoid creating new flag if it is a reasonable default.
This is where the test fails, but we have a test that fails. Is that correct?
Is it possible to get rid of this code? I think it's a good change.
Should we use OnEnd here?
can you use `long` instead of `double`?
I think we should be able to do something like `proposal_attr.to_sym`, and `proposal_attr.display_name`.
Maybe just `routes#COMMAND` or `routes#SHIFT`?
I don't think this is the right place to put this. I think you should just add a `boolean` to the `om` list and then call that twice.
This one is a bit odd, can't you just use the `is_file` function?
Why did this change?
I don't understand the motivation for this change. I would have expected this to have an `isTracking` secret to set it. The `secret` secret has been `true` in `debug`.
This should be `_blazer`
What's the reason for this change? Can't the user know what the ActivitySampler is?
I think we don't want to use `settings.migration.default.default` for anyone who might not be using this.
Should we add a TODO to remove this? We can't really re-run it.
Why is this needed?
Does this work on all platforms? I don't see a difference between `IsIs_pyumed()` and `Is_pyumed()`.
Can we put these conditional on `Var`? `VariableModel` and `VarRename` are probably more clear
Should be public?
Probably should mention this type is specific to all type type.
The type `T` is `ARRAY`. I think it should be `ARRAY<T>`.
Use a guard clause instead of wrapping the code inside a conditional expression.
I think we should be using `string.enumerable` instead, otherwise it'll just be an `string`.
There shouldn't be any need to specify the `#` here.
This is a breaking change. It will work for both `spack info` and `spack info` and `spack info` but not for `spack info`.
I would just put this logic here as `min_bound` is not really needed and it is always `null`.
Why change it from 2014 to 2004?
What about `(tail_, len(tail_)`.
I think you can use something like `DeletePodEntry`.
Line is too long. [91/90]
Why did you add it to the `before`?
@options[:preserve_hosts].to_s =~ /(?:never)|(?:pass)/ what do you think about calling `is_preserve_hosts` instead?
I don't think this is a good idea. It will be better to add a new one if needed.
The `console.warn` here is not necessary because it will always be `true`, not `false`.
This should be in the `_is_editable_prop` function, right?
Should this still be `*Warning`?
Is this needed? `basename` is already being called on line 392 above.
Is the 1.0 intentional here?
Please do not use a single quote if statement.
Do we still need this in Jack?
I would use a `EnvironmentFiles` field here
I don't know what this class actually means, it seems that it is a list of the app. Maybe we could add an `@trail` property that we will be aware of?
Won't this break other code too? It looks like it would have been better done in an exception handler.
I think these changes are intentional?
can we add the "CosineWindowFunction" part for the "CosineWindowFunction" part?
nit: the folder is a `folder` option, so it is `Added`
I think `from rdkit.Chem import rdmolops` is a bit redundant, it should be `from rdkit.Chem import rdqueries, rdmolops`
Why do we need this? Anki Desktop might be a bit confusing. What if a user doesn't care whether a client has a pxz or not, but it seems like it might not be called when the user changes their config?
this change is not needed, the new `Level` variable is already defined in `src/server/test-api.go`
This change looks wrong. The sortByColumn is only used once in the test container, so no need to change it.
Can this be removed?
why is this needed? If the latter, we should probably remove it.
shouldn't `v` be nullable?
The `long` should be changed to `Embedding.offsets()` as it is used for other types of mismatch and is used for the `long`.
You should do `id.Substring(3);` here
This is a very generic function and I would rather just set node_l->peers.not_a_peer (endpoint) to false.
The copyright here should be changed to `BoolBool` instead. Also, why not simply use the copyright? The copyright should be the copyright.
It would be better to move this import to the top, then it's only used once.
This could have been a separate function, I don't think we need to pass the same value to all theKeyring.
Might be better to add a check that it's not set.
What about the unit test?
why is the new type annotation needed?
Shouldn't we check that the `IsApiToken` is `true`?
I don't understand the logic here. I'm surprised if the `||` is still not needed.
This can be removed, since there is a go default port.
I think we should remove conf.HTTPConfig.nil right?
This is now a `<object>`
These two lines are also not related to the issue, but they should be moved out.
`|| PrivateKey._getRandomBN()` might be clearer
What do you mean by using `if` here? I don't think it is worth it.
nitpick: can we call it "only non-empty"? I would think "only non-empty" is more clear and confusing
I don't think this belongs in nextPrefix
Please use braces for multi-line blocks
This import is used to not import events. The other package should use the `pkg/logging` namespace.
Shouldn't the span be a `handler` here?
@mjkkirschner @matt-gardner I think it should be "127.0.0.1", not "127.0.0.1".
This will be removed as well
This should be `KBFS_DEBUG`
This should be `>=` (which is the default).
I'm not sure if we should use `false` here. I don't think the `is` is necessary, because it's only used in tests.
Is this change required ?
I'm a bit confused about the logic here. What's the logic that would be created with `searchengines` and `Query`?
This is a breaking change, because the code is in the `void` namespace.
`name` is not a correct name since it's more of just `elif` and not an `int`.
This is an actual bug fix.
This file can be removed
Can we remove the std::chrono now?
These 3 lines of code are repeated in 2 locations. Can you revert them?
I'd prefer to have this include in a different file.
this is not needed
`StateReader.Hash160` to be consistent with other `StateReader` functions
I don't like the idea of how to do this, but we can just pass a `it->` into the map to make it more explicit that the object is being created.
What does the `diff_res` do here? Why not just pass the value?
@jridgewell I'm not sure if this will cause the fix to fail when a user changes the behaviour. If it's possible that we'll end up doing this for a user-defined input.
I think you could replace the null check with "new span is recording events", just in case it is not null (or in some other case)
I think it's better to make the configuration configuration static as well, and just check if it's true or false. I'd suggest removing it from the base class, and only pass the configuration if it's not true.
I think we should remove this message.
why is this no longer needed?
It's not clear to me that we are not doing anything in the code base. Maybe we should add `/bzz-tag/name/{name` to `/bzz-tag/` or `/bzz-tag/`? I think it's not the right thing to do, but we might be missing a step back and just have a unit test.
Not sure about this change. It might be useful to have rollbackTraffic as a context context and rollbackTraffic as a setter. I see it's used as a constant.
Can we just use an `int`?
`Collectors.clientPort` will be used only when zkDynamicConfig is true, so the zkDynamicConfig should still be zkDynamic and we should not have zkDynamicConfig.
Since the `using System` above changes it will be managed by the `DynamoView.Message` namespace which is `usingMessagePack`, so we can't delete the `DynamoView.Message` property.
@jridgewell Is the idea to change it to `/dev/null`, or is this a breaking change?
Isn't this always true when `GetuildFile` is called?
`_MissingPandasLikeIndex` is used to be re-enable this file.
Should this also be `subnetsnets('subnets',omitempty),`?
Does it make sense to put it in a per-east header? What does it mean? If it is only used once, then we should be looking up the code for `urn.load()` to determine the cn-northwest-1 issues.
This test wouldn't have failed. It was the case that the test was only disabled for testing the test. It should be removed.
I would use `@activity.graphql` here
The Puppet test will be useless after you write the Puppet.Environment flag to the new Puppet test.
Can we use `new` here, instead of adding another new method?
Would be good to make the change in the `newInstance` method a bit more explicit
I think we should return true only if Attribute is null, no need to add it.
Is this a valid error?
I think we need a new method `try {...}`, since this is an internal method, I believe, the method is not called in an `done()`.
The default should be `rclone` (or `aws.rclone`) but not `rclone`.
`torch.clamp()` is enough, `torch.clamp()` is not enough
Is it possible to add a `TODO` here? I'm guessing that it will be easier to read than the `_requestQueue` as it was before, but not sure if we should just be passing the entire `Blogs.msdn` as we already do in the `Blogs.msdn` above.
This line is a good place to change it to `subsurface->parent_pending_link`.
I don't know if there's an extra line in here.
I think it's better to pass the test `AsUserOrTeam` rather than `tlfID`, so it's more obvious how this is working.
Remove empty line?
We don't need this change anymore?
why not just call Error?
Should be a `@Nonnull` annotation, and a `@Nonnull` annotation
Why are you calling DefaultOAuth2UserService.class with a mock?
I'm a little worried that this will break existing users that have been running. I think we should keep this for now.
I am not sure this is correct. What if the query id is empty or the other key is available? The table can be empty, or both are empty.
This is the same as #6561, we need to make sure we don't match the exact same information as we do on line 616.
This is a breaking change, right?
this test is failing because of the `testFile` class
Why are you setting this to 7?
I don't like that we need the `value ]` as it is a list of supported values. Do we care?
I don't like having the variable set the `--sort-order` flag. Should we just call it here?
I think this import can be removed from initialState, since it's only used on the fly right?
We need a more specific `translate` method to ensure that the `joins(:video)` returns an array, rather than a string like `data_video`.
This seems like a regression. We should probably use `awsRequestID` to avoid the double quotes here.
I think it'd be nice to use the `tests` field here instead of using the `python` field.
What is this change about?
I think this should be a link instead?
Isn't `defer error == nil` redundant here?
I'm not sure we should add a `/session` here?
I would not do this. If `expect_deprecation_with_call_site` is called before the method name and is called before the method is called. It's not clear from the method name.
I think we may have better names in `core/utils.rb` for example. I think this would be more appropriate and more consistent with other files.
I assume these are all code changes in this file, or are they they both?
This could also be a static function to do the right thing.
>W3CB [](start = 15, length = 6) Why are we using the same result?
What about the other method in this method?
I think you can remove the trailing slash here
I think it's better to have all the checks for `AppCfnTemplateNameFormat`.
I'm wondering whether this should be `protected $clones;` instead? Or is it not defined somewhere in the `buildCallback` package?
Would you like to revert this file (as it is used elsewhere?)
Do we need to call `Get()` on this `RefreshAndGet`?
I don't think this line is right -- you can actually fix it.
This should be done in the `else` case
Do we know if this change will be useful? (It might be better to make sure that we don't run the table in the future).
Block has too many lines. [39/25]
@mfojtik why are we removing `balance` here?
Which notebook is being added to the end user? I think you could just add the `_notebook` argument to the docstring below.
Nit: I think this would be more appropriate for these as we use `db`, `db`, etc.
The `*fullpath` should be removed from the file, right?
Can we move this up to the next `if` block?
This line should be removed.
Redundant `self` detected.
Is this needed? I'm wondering why it was added. If so can you make it a breaking change?
This should probably be `getrara`
We should probably make this `WriteDeadline` instead
This needs to be added for the `@Restricted(NoExternalUse.class)` config
nit: unrelated change?
This file is not required anymore
I'm not sure this line is necessary for `recall_lookup_call` to be `ip6 = iter(ip6).orElse(ip6).orElse(ip6).orElse(...)`?
Why does the returnPartly returnPartly?
What about the other error messages?
This is a mistake in `teams` test. It doesn't mean that it will change behaviour in 430.
I would call `h.h.Write(p)` here because that's the plan of having the `Writer` field. It's also a bit weird, and the `Hash` field is the same as the `h.h` field, but we can't really change it.
@mhoemmen this is the reason why we didn't just use `\r` here
Could we use the factory as a constant so it's clear what this is used for?
I think we can keep the check for `0` here as well.
The `DEFAULT_IN_MB` is used in all places so we can remove this now.
The return type should be empty.
This is an example of how you want to use binary binary. What if the binary is not null?
I think we can also use `controller.SetRegion(1)`. The `controller` package is used only in the `Configuration.NewClusterRegionGetter()` method, so we don't have to use it everywhere else so I think it's better.
You should just be able to just `_settings` and `_serializer`. In this case, it is only used for static properties.
No need to pass in the `metadata` variable.
same here, maybe a simple string
what about the alias? is there any alias for the `Jenkins` or should we just call this `bytes` or should we just call it `bytes('model')`?
`GetMetricPointsAccessor` is deprecated. It will be better to have this method be private.
Not sure we need this change. I'll change it back to something like `violation.get('violation_data', '')`.
This should be `net/http`. The reason is that `https` is in `net/https`.
This will be a breaking change, because it is not the best part to force a checkpoint. We should try to do this.
This will change the default value for `v2` to `True`.
I think it's better to use `expect().to eq("/myusa/callback')`. It's more of a nitpick, but it's easier to parse by the next spec and not a test for the next spec.
I don't think this is used anywhere?
This file is not needed.
I would add the `name` field to be consistent with the above.
I think it would be cleaner if we could also add `runtime_type=DataFrame` to `refreshDefinition`.
@rhtyd can you give a look at the current state here? e.g. "selection start"?
Nit: remove empty line?
It's not clear to me why we are adding "privacyMode" for the "language" case but we don't have to worry about "language" being the correct "privacyMode" is the most appropriate thing.
Why is the change needed?
Nit: Why did you move the compiler compiler compiler to the `using System.X` file? It's probably not needed for the compiler.
this is the same problem as above, can you add it to the `go-checkpoint`?
why 200? Is it a part of the config file or the config file?
is this used?
Why is this `std::uint64_t` not `std::size_t`?
Why is this being removed?
I'm wondering if we need to make a `Simple3` type for this (and other similar places in `Simple_config.rb`)?
Is it not possible to just add this to `DisableAutoObservabilityMiddleware`?
This is a temporary workaround. It is not related to `stdbool.h`. The other option is to change the default from `stdint.h`, `stdbool.h`, and `stdbool.h` to `stdint.h` (which I am assuming it is in this file), and I am not sure how it will be used.
It seems to me that we should only support searchScope for the search search?
This doesn't seem right. We are already doing it elsewhere in this PR.
Is this safe?
I don't see why this is required. The public constructor should be removed.
These are the other ones, not the "attached" suffix.
Isn't it better to import `org.shredzone.flattr4j.model.User` from scratch? This would avoid the import if we want the same thing in the constructor.
Do you have any idea why this should be a string or a string? Should we be using `--build-system` or something?
Why was this change necessary?
Please remove these now that we are not using the parameter from the parameter
I'd prefer to have a separate transport->transport function for the transport->value. If we're not going to have a connection, it would be better to have a test that covers that and pass it to the transport->transport which does nothing.
This is the wrong place for these. For example `in.Status.ChaosStatus.Experiment.Phase` will not work.
Please remove empty line
I'm not sure about this. It's just a test that has been removed, it's only about the one that is used in the file. Why not just have it in the file?
I don't think there was any need to add `_project_rule` to the `QueryContext`?
I am not sure if this makes sense, but if arg is '{}' then I don't think it should be? I think that's a good idea.
Maybe it should be `LoadGroupMembersPipeline`?
I think the name is wrong
We don't need to change the `private` to `SystemHandler` for the `Little.jetpack.extern.util.Json.util`
why did you move it?
This should be `boolean` (as it's used by other tests).
This is a bug fix, right?
This is not related to the issue.
I think this is a better fix. The same applies to `maxFeePerGas()`
I think this should still be here. We're not doing that at all, so we should be consistent about that.
This is an API breaking change.
I wonder if this could also go away if the TRUE field does exist?
This may not work for the task in this PR. If this is the case then we should just call this one from the task in the `Task`.
I don't think this is correct. I would suggest that we keep that field in `Plugin`, and pass it to `ConfigFor` directly, as it is the same way we don't use that field in the interface.
Should we use a different name like `JSON_request`?
I'd call this ` IMvxMainThreadAsyncDispatcher.Base` because it is already part of the `Action`
I don't think we need to pass the last param. I think this is just the function.
I'd remove this and put it in `and`
Is this change necessary?
This was the bug that was removed in #6503.
Line is too long. [87/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Use the new Ruby 1.9 hash syntax.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
I'd suggest adding this to the `VersionDetails` list
@deads2k I've found the idea that `assertEquals` can never return `1` in a context, which is now the default implementation of `2`.
I think it would be useful to check the file name here instead of doing it in the test.
I don't think we need an enum here. The revision is already defined above so I'd just go with it.
I'm not sure this is the right choice. You are calling `fontawesome5_icon_mixin` at the end when the user wants to use it.
It looks like `weight` and `generator` are now lowercase.
Please remove the space before the opening parenthesis.
This is a bit confusing. Why not just pass in the `master` directory? I don't think it should be here. You can only use `puppet_tmpdir` to set the user to `master`, and you can only use the full temporary directory in the properties of the temporary directory. You'll just need to create a temporary directory that contains the directory from another config, otherwise the user will not contain the temporary directory.
I'm not sure if we should use upload here
I think we can also add this to the base class `wx.Dialog`
Should probably also use trace_flags here.
I think this should be part of the standardized homepage
I think this is fine as it was before but I would also suggest `AuthFree` and `AuthTesting` to match the other uses.
I think it would be nicer if you could add a type like `New()` and then do `New()` if you want to.
I think we can remove this class entirely. There is no guarantee that the class is present in the `__init__` method, which is now empty. We should add it to the constructor and remove the class from it.
I'm not sure why you added the params here
Is it possible to get rid of these somewhere? I don't think it's going to work, but I'm pretty sure it makes sense to make these in a separate PR.
you don't need the variable anymore.
What is the purpose of adding this attribute as nullable? I'm wondering why it is nullable.
This interface is unused.
this is the only place where I need it :)
I'm not sure about this. I think you should just have two functions that need the property, and you can just call it from the class. It will be more readable if you have a single value to call `ValueFormatter` and `ValueFormatter` on the same property.
Why is this change needed? It's only a single-axis property...
This change is needed for tests to pass.
I don't think this update is correct. The user can do this.
Is it possible that span.Origin == span.close on the fly if span is a span? What's the motivation to call this method?
I'd like to see this in a separate PR, but if you have any opinion, I think we could add it to the docs as well
This method is called for both the old and new methods in the new class that have to be modified.
I would prefer to use the 250 loop to avoid the specific test.
I think we can catch only one exception.
Why do we need to check for nil before creating the server?
I don't understand how this is working. The only difference is the `Ember` test was there before. Is there a reason for this change?
How come this was changed? Is this a bug?
Could you update the test with an example of what this is testing?
I'd prefer to avoid the use of the array here.
This is the only way that `blockBytes` is called when the total-value-error is set. I'm not sure we want to make this change, but I guess that's a good thing for it.
There's no guarantee that `attached_listener_mutex` is not set.
This is not a user error, it's only in an error.
Can we move this to a test class? We can't do anything with the test in this PR.
This should be the class name as it's not a class name
Same here, this might be `<tr>`
@mfojtik why the removal of `i`? The `+` is not needed since the `i` is only used in the `****s**` function.
`no_docstring_rgx.pattern and re.match(no_docstring_rgx, node.name)` is no longer needed, right?
I think the original value was correct, right? I'm not sure we want the same check here
Does this work without `describe`?
Why are we logging this code block here?
Standards: Please add a space after commas.
It's better to put this in the log message.
This seems a bit odd - how does the DateTime and set the slow slow down?
I don't understand the logic here, we are not adding `if ( footerText ) ) {` to `Grid className` but the logic below is going to get rid of this `passed` component and we should keep it in that `passed` but I don't know if that is the correct behavior for the `EncryptedState` component
I'm wondering if this should actually be public.
This is a bug fix as well as the fix.
We can now call this `*caBundle`
Wouldn't it be better to use a more specific description of the layout? That way it would not need to be a public method.
We don't want to use `drive-use-created-date` in this case. Also, it should be `drive-use-created-date`
Can't this be `1e-15`?
`NewMasterIndex()` could return a `idx` object.
This function should probably go into its own PR
It looks like the `:duced` logic here is a bug fix. I don't know if it's necessary that `.uniq.sort(&:name)` is called from the other PR, or if so it could be made much faster than `.uniq.sort(&:name)` and we would have to do it in a follow up PR
Why do we need to count this to 0?
There was a `if defined?` added here before, so I think we can just use `if defined?(Mongo::QueryCache.cache_table)` instead.
you need to make sure that you don't set the index on the user's default
@jcotela is this the only place you have added this? If so we should probably add a `#ifdef` statement
This is an example of a nice change to the code that was here.
This could be simplified to: `return;`
No longer needed.
Why this change? I'm not sure why we should change it
why is this change necessary?
why not return here?
Could we add a spec for approval here?
I would use `info()` instead of `info()` here.
This could be a `@Nonnull` annotation
`rand` is unused. I don't think it should be removed.
This line can be removed because we don't use any ternary commands. I think the `use` part here is unnecessary.
I think we also need a `pendingRequest.configuration.remoteHost = pendingConfiguration.remoteHost;` after `pendingRequest.configuration.remoteHost`.
I don't see the purpose of this?
What happens with the plugin name in the test? I think it is the plugin name in the test file
should we add a check to see if this is not needed?
I think the `op` is still useful in this case.
Maybe use `path.join`?
I don't see any reason to use postage here, since the web.ChainHandlers will be the one from the postage. It will be the case for postage on the same page as the web.ChainHandlers
Is there a reason we can't just use `is_object_node` here and just use `is_leaf_node` here?
I'm not sure this is the right fix - we should change it.
This is just a bug fix, right?
memoryamUsageTester.sizeOf(dic) should be in the same line as !
I think you should be able to just remove this and the next `io.Writer` part of the OM.
These two lines are too long for the past
I would prefer `null: false`. The default should not be `null: panic`, so I think `default: ''` would be a good default.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this class is not needed.
This should be `null`, no?
this is a private function that will call the function
I think this is fine, but we should probably change it
This should be the only place where the cleanup fails, as we're not calling it twice.
This is not needed anymore, it's only for debugging.
I would use a more generic name, e.g.: `converteded_RESEARCH_PROJECTS` instead of `RESEARCH_GROUP`, as the name is a bit misleading.
shouldn't be in the view
I think this is a good idea, it may be useful to have a separate patch, but if you want to do this in a separate PR.
I'm confused by the logic here - what was the `var`/`ReadConfig` call before?
Is this file supposed to be `//build !cgo`?
I think we should raise the error if the element was not found.
I don't like this name... it's not just the default :)
This should be `final`
This is the only usage that needs to be changed. It's the default.
Is this the only place that uses `binary`? If not, could that be moved into `binary`?
Import packages with the other package imports
I think you should add an index on the DB and name to be consistent.
should be added as default value.
This is a little confusing. I think we're using `dataFile` and we should just check the file name and not have the ExternalToolHandler. It's not a very good idea and if we're using ExternalToolHandler we can just use it here. I'd rather not check if we have it in the ExternalToolHandler and we need to check if it is a specific file.
Why is the `LocalPrefs` still necessary?
This should be in another PR, right after the `afterEach` call and on line 408.
Please make it easier to read if we can use the existing `ang` (and the other) as we're doing.
Could you use `object.join` here?
This is unrelated. Please don't change it.
Can we move this method to the `junit` class?
I think this should be the other one in `PipingSpec.go`. No?
Style/MutableConstant: Freeze mutable objects assigned to constants.<br>Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I'm not sure if this is a good change - it makes sense to me if we want to keep it as internal, and then have the same behavior as the one in the `Assembly` (which is a single `Assembly`). @kroitor But I'm not a fan of the impact of the implementation (and I'd prefer to keep this property as internal) and keep it private.
I am assuming this doesn't need a `Policy`?
Please add the long line here (and in the next lines later).
I would call this `createMetadata catalogName`
Can we use `/VersionAsString` instead of `/idv`?
If `readRetryCount_` is set to 0 in this case then this exception could be thrown in the `if` block
This change is not required in this PR.
I think this will work in 1.0, as `Transaction` and `len` are not actually a `Transaction` field so I suggest moving this into a `NullPointerException`, as the `pants.util.start()` and `git grep.util.start()` will be called for 1.0.
This line has no effect.
Maybe `return inside { return; }` or `return` for both cases?
I'm not seeing any advantage of this change, but can we just use `return RequestLineStatus.Done;` here? I'm not really sure why we need a new one. It's just that we are doing the same with the other functions that are using `RejectRequest`
This is wrong, we have the "web0s" option in the options object. Does this mean there are other options for all the other bangs?
Why not return the src here?
thanks for the PR, but this should probably have an array of type information.
This should use debug_output. It should be debug_output()
I think you can remove this line and add a `&&` history to `true` on line 534 instead of passing it as an empty string.
I would rename this to `@team_page?` so that it returns a boolean for `@property`
Do we need to call `DecryptingCipher(DatabaseKey, iv)`?
I think the old `take_snapshot` method should be moved to the new `hypervisor` module, so that it can only be added in the first place.
this requires setuptools to True, does it mean that the default is set elsewhere (or whatever it was before) is setuptools?
Why change `invalidConnectionManager` to `ConnectionManager`?
This is the fix
`Unwrap()` is not a good name to me. Should `specify()` or `isUp()` be better?
This should be `ctx.client.flow`.
Should we make this a constant?
why do we still need this? Why not just have an `__init__` as a `aio`?
I'd rather have a `assert` here that `ok` is a string, which will be a string, so you could use `assert`.
Can we just use a single function and avoid this in `mTask.emitContainerEvent`, like we do for `IsIsStopped`?
Could this be a `char *` rather than a ` hiveTableName`?
Why not use `AbstractJob`? It's a very generic name. It could be confusing to have this method in the `AbstractJob` class. We could also remove the class from `structure_ID` and `structure_ID` as well.
We can use `Integer.undefined.versions` here
This should be in the `Stream<Activity, object>`
The `fullSynchronization` check was only here for syncing. I don't think we can do that. It's a good idea for syncing to use `fullSynchronized` in syncing.
I don't think it makes sense to return a nil here. I'm not fond of that part of your PR, but I think that's fine.
Can we keep the controller in the controller-status and let it be the other way?
I am not sure we need this import.
I don't see this being used anywhere?
This test doesn't work for test purpose.
This one seems unrelated.
I'm not sure that this should be inside the `unless excluded...` component. I think we don't need the `unless excluded_portal_link` check anymore.
You can delete the `#` here
What if we don't use `^on(Ani|Tra)/.test(key)`?
The `else if` should be moved out of the `else` block.
This should be moved to another class (even if org.apache.MDC`)
should this be a try/catch?
This is the only real change that will make it easier to read.
nit: I'd suggest to rename this to `createMetadataTableInstance`. The reason is that the `createMetadataTableInstance` is used is static, so that the variable name should be renamed.
Why this pylint check?
moved the `delegate` to the top
Why did you change it?
`bundle` is not defined here.
The same as in the `Export` method above.
I don't see the point of this, it will fail to copy it from the `bootstrapMessageDirect` method and I don't have a strong reason, but it's not the case.
Shouldn't these already be `ReflectionFunction::getReturnType`?
`fileModified` is not used anywhere else in this package, please remove
Just curious why you remove the `GONE` here?
Could you add this? I'm not a fan of how you're going to make it work.
(style) line over 80 characters
@mfojtik I think we should remove the `rvm` keyword here as well if we remove it.
This seems like a good candidate for re-using the `<H` (and the one that will do in the `mypy.fixes`) and could just be an `int` (and possibly just `int`) and use that here as the first check will make sure the value is not `int` and then the string.
I think this should be done in a separate PR.
why was this removed? the only place this was needed is when the `butPlay` is not needed, it should be removed from the `TestAccAWSiteQueryRunner`
I think this test class should go away
I would add a `!= BASEFEE` here and just add it to the `HashHash` in the `Keccak 256-bit`
Let's use a common constant here, too.
Can you move this to a different file, so that the `CLOCK_REALTIME` is in `CLOCK_client`, and then in `CLOCK_client`?
I'm not sure this is the right way. In this case `vk_ext_scalar_block_layout` should be `||` instead of `||`
You need to wrap this into an if statement.
Just checking my understanding: what's the difference? The `nonzero` method returns `None` if it's `None` or `""`?
`Uri.Scheme` and `Uri.path`? I don't think it will work.
this will make sure that we don't have data=%s, we are not providing new data in the debug message
I think we should use `It's init creates an copilot directory`
Do we need this wrapper at all? I'm not sure if it should be `trails`.
I'd like the same for the one used in `SabreEvent` too.
If you use `backend.definitely`, you should just add this function to `Image.pkg.common.Stop()`
I think we still need to move the `accountID` into the new `client` package. Can we move the `accountID` to the top of the file and remove it?
No need for an `_` in this test. It should probably be renamed to `is_one` if that's the case.
What happens if CharInfo::UnknownCharSet is an integer?
Why is the default implementation required?
`client_slug` and `client_not` are only ever `None`, so I think this could be `None`?
Was this a typo?
I'm not sure if the `cdn` bundle will be used by other packages.
I don't think this will work. I don't get it, it's the case and `Data` should be `Data`.
This is not the right place to do the same, but it's not the same. The only problem is `getAtomicNum() == 0` is that the user can't create a user with a valid user, but that's the same. So I'm not sure if this should go in the `MolFileRLabel`, but it's a bit of a burden of a change.
I wonder if it would be better to keep `archiveFile` as `null` in the constructor.
@davidjumani do you know why this is necessary? It looks like it's only needed for ` getBaseFeePerGas`?
If the `util.Errf()` method gets called from the main `output` module, this is not a good place to change.
why this is removed?
This needs to be the default, no need to define the default.
I think this was just for debugging.
I think it's worth noting that we need this method in reload because it's in a single script. Maybe that's because the script is in `self.scripts[:]:`, we can just load it from here.
I would prefer if we made this public instead of public and public
Is this file meant to be part of this PR? If so, can we make it a `private`? Or add a TODO to fix it here?
This should be a warning or at least, no need to import it.
Making sure to change this to `hashable<key>`. It's more readable.
It's a little confusing how `2017` works.
@liggitt this should be `const fn` instead of `const fn` right?
I am not sure we want to change the order here, but I would expect this change to break some existing tests. What do you think @shwstppr ?
nit: move this outside of the `if` block.
hierarchical_name -> concrete_hierarchical_name
I think you should also add this to `ingress/#ingress-class`.
This should be in a separate PR
is it possible that view must be null?
Why did you remove zap?
Could use `glog.Errorf`
Can't find this error in the error message. I think it should be an error and not a user.
I don't see the value of this error.
please keep this class, use the new attribute `method`
I don't think it's used anymore.
This was the first part of the script script change which isn't relevant to the PR.
This protocol ID is not used outside this PR, right? The protocol ID is removed from `iotexproject/iotex`.
@jona-sassenhagen we can move this to the else block. It seems that the else block should be after the else block.
Please use the `localrelrella` method instead of the hard-coded string.
Can you add a note about the other stuff we add here? I would say that the name should be `xattr`.
I think you can do `assert(0)` with `test_assert(0, val);` and remove the `kube_fails = 0`.
Please don't go through separate imports.
this line is not needed.
This isn't necessary. The `deprecation_flash_if_xhr` method is already called in `NEXTController`.
i'm not sure we should change the `NonceMap` field in `AccountNonceMap`
I think the clientconfig should also be "clientconfig".
Isn't the same problem with the existing code? The idea is that if we do, we should be able to do the same in the admin and just have a different error message.
should be `null`
Can this log be removed?
This is wrong, the test is not correct.
Why is this needed?
nit: can you revert this change ?
Why not use `feval` directly? The `feval` is already in sync with the rest of the file
Why was this made to the user?
I think it is more consistent to return `false` and use `time.NoWait` directly
Is there any reason for this change?
Why are we changing the name? I mean, why is it being explicit about that?
Should we check for `0 !=` here?
Can we use `current_user.subscription` to avoid having to use `%` in this PR?
preg_quote is a good idea to get rid of the variable name.
Should we also have a single test for that?
I don't think we should be using an empty line here. If you can remove it, please add it in your IDE.
I would prefer to have this assert in the file. But this assert should be removed.
why do we need this? can we just call the constructor?
I would keep the space here.
I think we don't need the "go-selinux" import anymore
Is the `DELETE_REQUESTED` part part part part necessary?
I think this could just be `enable.quartz.enable`, but I would prefer the latter.
I'm not sure about this one. If we can't do it, we can use `.from_preformatted_error(e)` instead.
Is this necessary?
This should be done in a separate PR, but I think that the `d != null` check can cause any issues, so the `d == null` can be made nullable.
`if port.nil?` would work here. Also, you can pass the value in the `server_port` object.
This will need to be in the same PR as the one below.
should this be done in a try block?
This is a change in behaviour. We should not make a pass in the `boolean` state, because we are already adding the `var` state. The only place this is used is when the `Master.get` is used, so we should use the function `GetTipSet` instead.
I believe this import can be removed.
should we also update the config config? so that we don't have a good default value?
The error message here is very confusing. How is it used to get the wrong error?
I think the biosentlyLegacy isn't enough to be able to configure it on the Windows. If we want it to be hardcoded in the middle of the bootFlag, we should just call it once and call it everywhere.
Is there any reason for this change ?
Should be a try-with-resources to avoid using the default commandParameters?
This change is incorrect. The `.v` should be moved to `.Content` (which I assume is the only place this is needed for this PR), so it might not be necessary here.
Is it possible to have a BibEdit and Bibcio version of these? It seems a little weird to me that they're all in the same range.
I don't think the `= 0` is needed, any bug fix?
This test fails without the new test. I'm not sure what the best way to test is with the new test. The `.DataFrame` tests are actually testing.
This change is unrelated, can you revert?
This is a private constructor.
This change looks unrelated.
Can we have an explicit test for the 32-bit environments? I'm not sure how to test the 32-bit environments in the test. The rest LGTM
Why this method is needed?
Could you make `IntegrityError` a variable too? Otherwise you don't have to do it at all.
Shouldn't `recursive_mutex` be renamed to `FailedFailedFailedFailedFailedFailedFailed`?
This isn't a validissuer name anymore.
@agramfort do you know how this import is related to your change?
I think this should be `writeStartElement("source","DVN")` (and the one below) and be consistent with the other keys.
I'd like this message in `CompareCommits` - it's not a big deal. It's a little unfortunate to have a name that makes sense to me - it seems like the method should only be called when `s.rest.Repositories.CompareCommits`.
This is a little strange.
I think we can also keep these as `static` if we can.
I think we should be able to get rid of this.
I think we should add the config option to `addRequestId` and then add that in `build-system/test-js`.
Can we remove this?
Why did we change this assertion? It makes no sense to assert something that the result of the test is not the source itself
I think it should be `++` instead of `++i`
This check is not needed since `AppendHistoryNodes()` will always return an error and `*p.Internal` will not be used in other places.
This should be `telemetry.SPIFFEID`, right?
This is the only change required to get rid of `vpnServer`.
This condition will now always be `true` since the mocha does not contain `'mocha'`
would be great to keep the space after `"`
@wangdi1 Is this the correct way to do this? I'm worried that this will be the correct thing to do with the changes to your PR. Is there any way to do this without a conflict?
@jridgewell Is this change intentional?
@JeremyKuhne @cramforce is this the only place where we want to fix it now?
Is that really what you want? The interface does not have to be defined.
This file is wrong. You're using the `Word dependencies` in the static variable. You're using the `element` variable, which is already covered by `WordSourcesReportDataDefaults`. I think we should move this file to `src/pants/util/lib/python.js`.
I think this is wrong. I'd add it.
Hmm... I'm wondering why do we need to provide an empty await here?
Should we also include `Rpc-Header` in the `cancel` package here?
Please remove the newline here.
I'd prefer to have a method called `account` that returns `0` in that case
Should the `==` operator be removed as its redundant?
This should use `!==` instead of `if`
This looks a little odd. Can we use `fmt.Sprintf` instead?
@jsoriano Can you explain why we need a "message" call?
can we make it a `Config` ?
Can we change this to `PhysicalPlanNode` now that #6027 has been merged?
Is it not possible for this to happen in the `build` namespace? I don't see any benefit to keeping this, just wondering if it is better to keep it here.
Why is this False check necessary?
why not just `closed` and `db`?
Isn't this the only place we call this? I think we can use `SessionId` here, but I think it should be `true` for `true`
I think this log line should be removed.
I don't think we should be changing this name. In theory we should just make a `spec/models/type.py` for all of them.
Why is the schema removed? It is used as a field in the DB.
I don't understand the purpose of this change.
Would it make sense to also log in the `estManager` and log that?
It's not the right place to put the new code here.
This should be `_min_count`, not `min_count.
You can use `MediaStore.Files.FileColumns.MEDIA_TYPE_IMAGE` directly here and remove the `@path` tag from `Helix-utils`.
This change is not correct, `A-Za-z_` should be `<\\>` instead of `[A-Za-z_][A-Za-z_.0-9]*)*\\]"`, and `[A-Za-z_].0-9]*)*\\]"`, right?
I'm not sure if it is worth it, but it's a good idea to add this to `RetryLimitExceeded` as it's a special case for the error?
I don't think this is a valid message.
`TimeoutAfter` seems a little confusing to me, it seems that the `Task` here is the default and the other way around is to avoid the check for the current user, and the current user doesn't really make sense in this case
I think you should use start_pc, not start_pc, and just check if it's needed.
Just noticed this, it's the preferred one?
Is it a bit of an unfortunate name? I'm not sure why we're trying to load the read/write of the time at this point.
This should be added to the `music` tag as well.
We should not allow this session to be set. This way we can skip the ack when it isn't working with the next major release right?
I think it would be better to use `Time.HasValue && EndTime.HasValue` instead of `60.Value` for clarity.
`mLineEdit.setFixedWidth ( 10*fm.horizontalAdvance(QStringLiteral("a"));`
For consistency with the `sys.strip_count` method, I think the `sys.strip_count` should be the default (and `sys.strip_count`)
I think `ruby-` would also be a better name.
For this line it should be 0.0, &temp_int_part)
I think you can use sleep here instead of sleep
I think it would be cleaner to have an `__init__()` that has the `/` folder. We would have a better exception than the file name.
I'm not sure this needs to be special. I think it should be `ifdef X86` instead of `ifdef X86` to avoid the `ifdef X86`.
I'm not sure this should be `(! $allowedArgs -contains $_)`.
should this be handled differently?
The formatting here should be `<p>`
Remove empty line.
I'm assuming this is the one that we want to do here?
The `highType` will be `types.Basic`.
This is a bit of a nitpicky, and it might be worth to use some sort of constant for the name.
I don't think you need to add this to the `.Dispose()` method, it can be used in other places (and it just calls `.Dispose()`) and it's not a big deal, but I think that's a bit confusing to call it out as the `.Dispose()` is called, but it can be confusing if you're not doing anything else.
I'm not sure if this is an example of a bug fix? It seems like it should be a separate fix (and maybe in the future).
I believe `getComparator` is not thread-safe, so I would just do `return Comparator<? super T> directly]`.
I think we should move all the config to a separate map, so that we can just use a map here instead.
I'd rather we just make these conditional on the main branch of `generator_opt_long`. Otherwise it'll be easier to find when we get here.
why are we doing this in this PR?
Can you explain why you need to define the struct struct here? I think you have to make these two things more readable and understand the purpose.
I was wondering whether we should include these in the `require` namespace instead of `FINE_inventory` namespace?
This should be `t.equals(t._1)` I don't see where it's used
You can add `forms` to `user-system/plugins-system/babel-prefix/api-system/api-system/babel-prefix.js` if you want to do it in `user-system/babel-prefix.js`. I think that's fine.
you should not have the default value at all.
Should we rename this `Entity`? It's a bit confusing since we have a `ServiceName` attribute.
Please add a docblock here.
Can we use `isinstance` instead of `returns`?
I'm not sure if it's better to remove this, the way I see this PR is merged is fine but if it doesn't make sense for this test to run.
This file is now unused.
I'd suggest adding `andand` as a `time` to the `_root_` in the `id` class and using a `allow_root` instead. That way the `schema` property will always be used to set `_root_` to `false`, but that can be used in the `id`.
Can we add a note here about how this works for now. We can add some validation and let the properties in `commit` to the common properties.
I'd use a more explicit name here, e.g. `Lamba::GetConfig()`
This should be done in a separate file as well
This should probably be `data["server_conn"]["ip_address"]["ip_address"]["address"]`
This could be a const reference, right? This is a bit of a very large number.
This is a breaking API change that was previously in the wrong commit
nit: the `ErrCodeBucketNotFound` is not needed, right? it can be simplified to `ErrCodeBucketNotFound = "NotFound"`
I'd like to see a test for `host.generic_install_msi_on` (or something else, but that's not really a problem) but I'm curious why we're not using the new `8` version here
This should be done in a try-with-resources
I think you can also remove this one and remove the one from there, right?
This is `Concurrent`, I'd rather you make a `Concurrent`.
Remove this, since this is already a callback
I think we need to move the `changeStream` above the `changeStream` constructor and use `Error` in `changeStream.validate`, as the other `changeStream.validate` method is only used for `Error`
This test is testing the "db" URL, which is why the URL is removed.
This is just a thought.
This should probably be `IDID`?
I think the `+ additional_features` is wrong here?
Is it possible to get rid of this line?
This is a good use case where you can use the `test_id` package which is the default.
Isn't this going to be true for the test?
I don't think it should work with empty string
I'd prefer if we don't do that here, but if it does, then the code is not needed, and the code is a bit redundant.
Why is this needed? If it's already a `Name`, it seems that it should be called `nil`.
Is it necessary to catch any exception here? The body will be undefined for the user.
I think you should be able to use `loadClassCache` instead of `getClassCache`.
"If the provided key is none of those"?
This can be simplified with `import org.junit.Test;`
I don't think we should change this line, it's only for now, but `scanner_index_id` is a good idea. The caller can have `inventory_index` and `scanner_index_id` to pass the given given an `id` is set.
I think this is not really required. To fix the problem, I think `dispatcher.beforeClickOn` is only called once, not once per process. It will be called in a separate process.
Why do you need both?
It looks like we are not using `List<List>` because we are using `List<List>` directly in the `public ImmutableList` type.
this test case is too late. I'm just not sure what the best approach here is.
I'd like to avoid these kind of usage. What do you think?
shouldn't it be `null: false`?
I don't think that's the correct wait.
I'd rather not have the `value` here as we are not using it for an empty string and just doing a copy of it.
I think we can just call `this.struct` on the instance of `arg`.
why does this work on all clients? it seems like it's not related to the issue? I'm not sure if this is the right place for this to be.
This change seems unrelated.
Is it really needed? I'm wondering whether it's worth it to remove it and remove it from the commit.
why this change? I'm not sure if it is necessary to make this change.
This is not needed anymore. `systemctl start cloudsqlproxy` will only work with `systemctl`.
`C` -> `C`
This should be `import os`
Please don't make it nullable
This is still `ForceTraceWriteLine` so we can remove the `DefaultValue()` declaration from the `ForceTraceWriteLine` property and get rid of the property from the default constructor. This way we can remove the property and the default value from the `Trace` field and then we'll have to keep the old behavior in both cases
(style) trailing whitespace
We still use `pipeline_definition_sensor` in `raiden.json`.
This file does not seem to be used anywhere. Please remove
You can use `new_token['default']` instead of `NULL` here.
This should be a stricter
Shouldn't we add `--network-host-project-id` to the `Host`? Also if we do add `--network-host-project-id=None`, we should add `--network-host-project-id=None`, to the `Host` and `--subnet-name=None`.
I'm a little confused by this change. If you do this it means we're going to be setting up an empty array instead.
Id => "!!! implement me and make me abstract !!!" => "Owner stack"
If you want to return an error then you don't want to return an error?
This is just to not depend on `err` because it's always a "= 0" check.
Can we just return `false` in this case?
This is a breaking change, I don't think there's any need to change in this PR.
@tnozicka I don't know why this was here but I think it's ok to just have it in the `dumb_SUCCESS`
Please add a line break.
I think that we should probably change this to `Sure` and then we don't want to make it a `@classmethod`.
This change is incorrect, because it's not needed.
Line is too long. [81/80]
This should also be moved to `default.NewF` if it's going to be case sensitive.
I don't see why the `workshop` is hardcoded here, can you remove it?
I think this should be removed.
`if (!string.IsNullOrWhiteSpace(tracerHomeDirectory)) {` is enough, you could just use `if (!string.IsNullOrWhiteSpace(tracerHomeDirectory))` here.
The `path_` is now deprecated. I don't think we will ever be wanting to use it for the path to be present in `b/path/`
This can be called with an event handler. We should probably be consistent about how to use the our own service and how to use this approach.
I would keep it as `Array`
This should be ` MUST.SH`
Should this be `if telemetryConfig.Enable || telemetry URI.Enable`?
I don't think this should be in the header or the boundary type.
This is not required.
We need to ensure the IBL_UNLINKED is in the list.
@Gaeilepp this doesn't seem to be a problem, since `#include <glib/gi18n.h>` isn't used in the GOption. Could you remove it and put it in a `GOptionEntry` function.
I think this should not have been done here.
I don't think it's a good idea to get away from the R API here (and the corresponding `oauth_callback` one)
The `background-color` isn't used anymore?
I think the indentation here is wrong
@michaelkuhn Do you know if this is what we want, or do we also have a similar flag for NestedField?
We should use the default for these
>UDPv4Transport [](start = 12, length = 6) I don't think this is needed. You can just do `#include <rtps/transport/UDPv4Transport = eprosima::fastdds::rtps::UDPv4Transport` directly from `#include <rtps/transport/UDPv4Transport`
Ah, this is a bug fix, right?
This is the only real change. We should fix it.
This line can be removed.
I'm not sure we need `userInjectedExpandableRowHeader` as there is no guarantee that `expandableRowHeader` is set to true. I think we can just use `expandableRowHeader` and `userInjectedExpandableRowHeader` as the default in this case.
@mfojtik why is the cached path removed here?
We don't need a `prohibitedAttrs` property for the `label` field.
Is this check necessary?
Should be `SparkTable.class.class`
I don't think we need this one. If you want to use it, then you can get rid of it.
I think this should be just encryptedInstanceUrl
This pattern is not clearly named. It makes sense to me that we're passing in `bftExtraDataCodec` and not just passing it in the BlockHeaderFunctions itself. This is a very common pattern for me. It would make sense to only call it once in `bftExtraDataCodec` and in that case we would have to call `BftExtraDataCodec`.
Is there a reason we can't remove Tags from the exception?
I would like to see `get_extents` with `combined` as the default.
This was changed to match the code style in the commit message, but I don't think that's a good idea. The reasoning is that the new code would be `<amp-ad>` in the first place. The new code is `<amp-ad>` but the new code does `<amp-ad>` seems like it should be the new one.
should we make this a hidden field instead?
This seems a bit unrelated, why don't we pass a new `PrefetchAfterBlockRetrieved` here?
I'm not sure about this one, is it?
Can we also add a link to the response to the user?
The changes to this test are only needed to check for `node` being set.
I think `#if // HAVE_CONFIG_Hrm` should be `#endif // HAVE_CONFIG_Hrm` (and remove the `#if` statement above).
Do we need this in the test too?
I think the more elegant way to handle the same logic here.
I think the `vertigo` label should be removed too, since it's a part of the `device` package, I think it should be removed in the changelog as well
I would suggest using an `urlstr.lstrip()` function to get the URL from the URL.
I think this should be a `db`.
I'm not sure what this actually does, but it would seem a bit a good idea to move this into the `repository` initializer
This is not the actual fix, but I guess it is not.
I think the unused imports are unnecessary.
I would call the name `lockBeforeLock`, it's better, and more descriptive name would be `lockBeforeLock`
I would prefer we don't use `org.junit.TestUtils.JavaParserConstants` here
Is it correct that we are using Guid for all these versions? It is only used by Guid, not in the codebase.
@sazeez maybe we can also remove the `Collect` call?
Is there a reason why you use `projectname`? It seems a bit strange.
I'd use `#if SupportsMutex != null` instead of `return _concurrentWrites ?? ??` for this, and just have the following `#if SupportsMutex != null` check here.
This change doesn't seem to be related to this pr, but I'm wondering if we should just have a helper method that takes a file? This way it wouldn't be able to use `get()` as the name for this test and `get()` can be used as the name for the `get` method
This TODO is about to be merged.
I think you can just do `global.VERDACCIO.URL`. It's the default value for this URL.
This is a bit confusing with `.envName()` (which is why the `Option.builder()` was removed)
This is an example of an example of the "start" of the `DD_CONVENTION` property. Is it the case?
Whilst unlikely, `private getters.getAliasProp` was always called before `private` was called?
Is this used?
Can you revert these changes?
I'm not sure about this. I'm not sure we need to update anything in the "if updated" section.
This should be set to nil, as you have a default for the new version.
Maybe `s/chunk/{address}` or `s.InfoLevel`?
This looks like a function to me. Can we use a function instead of a function?
This was not a good idea to make sure I understand correctly, you're not using `submit.info` instead of `submit.info` right?
Should we also check for `null` here?
I'd add a `const CONNECTION_EVENTS = ['prepend', 'prepend']` here.
nit: why do we need both?
why is it an empty string?
this will be very useful in the test, but if the test fails, we can get the error from the test, right?
No need for a `__init__`, we can just use a simple `__init__` method to avoid any error handling on the exception
why is this being deleted?
This class was used in a similar way, which may be used in `partitionFields` and not in the interface.
I think this should be None. The default value is `None` if it is not `None`
Might be more efficient to use `padding:0` instead of `padding:0` here.
I think this is fine, but I don't want this to be MongoError or MongoError to be a MongoError. Sorry if I'm missing something.
Nitpick: Can you use `assert` instead?
What is the idea behind this `std::cerr` ?
I'm not clear on this term. What is the difference with "terms term ID"? Can we start just the byte or the other checkpoint?
Should we rename this `replaceResultInFormWithNew` since we are not doing it now?
this was removed in #6321
please revert this file, the two import statements are not aligned with the new style
project_id (str) == "id of the project to query" (it's the "id of the project"), so no need to change it.
We already have a `defer deadlineTimer`, so it should be enough to get it from here.
This is a breaking change. We have a test that covers the old behavior.
The change in this file is to ensure that the `NONBLOCK` key is in the `_._._._._._. The `NONBLOCK` key is in the `_._.` block, which is a `NONBLOCK` key, so this change would still fail.
I don't think we have to do this here. If we can just call wlr_touch_point after you've done the same in all the other call sites, then it is better to have a single function like `wl_list_init(&point, 0, 1, 0, 0), ...)`.
Line is too long. [85/80]
I think we're missing a `PONY_API` call here, right?
It seems that we are using a function with `Configuration.of(String)` which does something like `volumeDeviceFuseMount = "REDIRECT_DETACH"` and `volumeDeviceFuseMount = "REDIRECT_DETACH"` which will be called once the value is used. So I'd suggest we move this up to a new constant.
Why are we returning `bool` here?
why not just put this below the line above?
Do you think it would be better to check for the `@offering` object in the `@user` action (the `@catalog` check above)? That way you could remove the `@offering` object from the `redirect_to` and use the `confirm` part.
I'm not sure this one is correct, but it might be better to just make this a local var and have it be a local var.
this seems redundant, is this a copy/pastepaste?
why not directly use `MsgQueue` here, and then we have to update the type to `box`
should be in the `<codebase,>.<codebase>.
@bartonjs, this file doesn't have side effects.
I think we should move this to a constant.
is.undefined is no longer used?
@martner I think this file is the new way to fix the issue. I can't think of any reason why we don't use `example` for the `.example`
This test fails without the changes in this file
Same thing applies as in ByteTests.
I think we can also delete the `//`
`volatile` could use `bool` and `boolFactory`
We need to add a check on row row row row, in order to pass in to the index
updateParams is not called, please remove it.
I don't think we need the `data` parameter here. It's a little hard to see if it's all just the case, right?
The reason for this is that if we change the default branch we don't have a valid branch (which we will never be set by the `.b` branch)
This should include `#include <mpi.h>`.
The `RootfsMountMode` should not have the output, so I think it should be removed.
This should be done after the #ifdef
I think this should be a `@UnGenericState` instead of a `@UnGenericState`
Don't think this is needed, you can just remove this
This is a typo.
nit: I think you should remove the `RetryTaskV2`
I'm not sure we want to keep this wildcard wildcard imports.
Can you make sure the `img` is a list of strings? If so maybe just `.get`?
This is wrong as it will always return null
I think we don't need a `jsonRpcConfig` variable.
I'd prefer if we could add `forseti_cron_runner.lock` or `forseti_cron_runner.lock` to make sure the lock file is not present
why remove it?
this should happen after `TizenVersion`
Let's just move it to `go.opentelemetry.io`, to keep the core harder to read.
I would keep the old name `ke_version_first` for clarity. I would also suggest renaming `ke_version` to `version_first_url` and `version_bulk_first` to match the name (or something similar).
What about the f-strings in the `if` branch?
`data` is a dict, it's a dict
I think it's better to use a more descriptive name for the API
This just made me realise that you're removing the deploy mode now.
Is this an issue that the client does not have the CVR object?
I would prefer to have this be an enum
I would change the name of the config to something more meaningful, because it's a bit misleading, and it will be less confusing in future when the changes are not related. It's not really related and I'm not sure how it's used.
Ah, this was just a mistake.
Can you use `SetBool` instead?
I don't see this file used?
shouldn't 100 be "MYST" here?
This is a bit weird: why is it a `map` or `map.Wrap`?
Isn't this the same if we're using the old one in the old one? Should we just always have the old one in the new one and use the new one here?
The function call `get_tab_widget()` is now called after the `removeTab` call. The call to `get_tab_indicator_color()` will be called when the object is not created (which is what it is done with the call to `_set_current_index()`). I would suggest to move the `get_tab_indicator_color()` function to a new `get_tab_Real()` function, which calls `get_current_index()` in the `get_tab_Delay()`.
Should we just return `true` here?
I think we can just delete the default value now, since it will only be set if the path has been provided.
We should probably log a warning if it's not working, but I don't feel strongly either way.
I don't like this property, it is not a `Dictionary`.
Does this `skip` not work anymore? Should it be a `delete` method?
`s/this.deletes/..` ? deletes : newPackage + **`s/
I think this should be `final`. The reason is that if the exception is indeed cast to a `Set<ExecutionReference, ExecutableFlow>`, then we should not throw `Exception` if the exception is being returned. The user can't see a return value of the exception, but not the return value.
this will be the default script, which is not the default.
can we avoid exposing `LocalWidth()` in the `if` block and avoid having the `if` block?
we should rename this logger to `error_message`.
It seems to me this function should be called `_args` instead of `_struct` since that's what the function is doing.
I think the other changes should be reverted.
`StatusForbidden` seems redundant.
should we use the rankstr[64] instead?
@sparrowDom Shouldn't the `ecsAgent` be part of this PR? It doesn't look like we have a `ecsAgent.New` defined anywhere.
`logger.info` is a bit confusing. It's not clear what `logger.info` is, and if we use the `logger.info` function for it's own `logger.info`. I suggest keeping it a bit more readable.
If we have a task we will get a reason and we will never get a task right. What about an `cancel(reason string)`?
I'm not sure why `@phpstan-param` is required here. The only thing we should be calling `@phpstan-param` instead
Should we log this error or just log it?
I don't think this is used anywhere, it is a tag.
Should we also update the pair of `ilation.py` for these cases?
What is the rationale behind using a set?
This is a bad idea, but I would prefer the C++ side effects, rather than just calling it.
Nit: This line should go before the declarations.
Shouldn't it be "mount ("etc" instead of "mount" here?
This method should be renamed to reflect the `sequenceNumber` parameter.
Use `raise` instead of `raise`?
shouldn't we also remove these global `aws-global` as well?
This is the wrong place for `querystring=False` in this case. We should probably just make this `qs = dict(errors.request_GET(request))` if it's `None`
`ticker.C` still returns false if the lock is acquired
is the name still valid?
I'm pretty sure you don't need the extra empty line here, it's already there.
This should be `Instance` and the same for both `Instance` and `IonMobility`.
If it's only used once, should we just remove `PagedMethodAsyncCallSettings` and `CancellationToken`?
I think we can also get rid of the `secrets.org` prefix.
I don't think this is the problem. This means that the upgrade upgrade and when the upgrade upgrade is the only only version of ConsensusCurrentVersion. Instead, we should use it for every upgrade upgrade to do this. It is not the problem.
The commit message should be updated to match the other implementations.
Please, rename to `flasklock_free` and `flasklock_free`
Nit: Can we name this one `DruidContent` or similar to make it more obvious that the value will be set to true? It's not clear what the meaning is
`s.idx.BuildIndex` will return nil. When `len(s.idx)` is `nil`, it will return nil.
I'm pretty sure we don't have a `yield functools` property anymore.
Line is too long. [95/80]
Why this change?
This can just be `mcontext = {0}`, no need to assign it here.
Would you like to avoid the need for this to be `public Color::IsNullOrEmpty(Description)`? I think it will be easier to read if the `Docstring.IsNullOrEmpty` is a boolean
The default port will be undefined in the port port. This will be set to true if `portrange;;local` is false.
I am not convinced this import is needed
Need to add these to the list as well?
This is the most important part. I'm not sure about `acceptable_exit_codes` being called at the beginning of the method - it does not.
This seems a bit too ad-hoc and probably better to have something like `dataframe.tail().to_markdown()`.
Is it possible to get the type from the web build step and just check for `this.servers.size`?
I'd just put this if check outside of the if-condition
This is not needed.
Is the default value of the `true`?
I think `stastics` will always be present, and this is just for stats stats. It might be good to rename the `hat.getAmpors()` to match the stats class and add a check `stats` to ensure that it is not set.
Does this also need `tail: unrecognized file system...`?
I don't think `fake-infra-id` is used anymore, right?
This function is a bit odd - how about just `if not len(ancestor, last_ancestor)`? Then the `if (ancestor, last_ancestor) {` statement can be removed.
Shouldn't this be `nil`?
i don't see why this should be `addons` rather than `kill`. I don't think this is needed, the only thing that should be `kill` is for killing.
Use `CreateSharedString` with `[since=` instead of `if (!field.account.get("service")]` and above
I'm not sure how I feel about this one. I think it's probably not a good idea to move this logic in `setState` method as well.
`#notice` should be in both `#pipeline_helper.rb` and `#pipeline_helper.rb` in both branches.
Is there any reason to keep the old field? If it is only used in tests now, then we can just remove it if we do not need it for now
Do we need to pass it into the dateFormat function?
If we're going to return an error here, then I think it might make sense just to make sure the enum is a bit cleaner and just do it in the enumsspb.WORKFLOW_BACKOFF_TYPE_UNSPECIFIED = enumsspb.WORKFLOW_BACKOFF_TYPE_UNSPECIFIED = enumsspb.WORKFLOW_AS_NEW_INITIATOR_WORKFLOW
Should this be `e.keyCode === browser.tizen` instead?
I think the password and `nil` should be fine here, since that's what I see is, but is there a good reason for doing that? It might be a good idea, to have it as part of the `config` package that the `sha256` package might not have been passed.
The `TelemetryConfigurationDto` is now unused.
I'm not sure why boost::make_shared is necessary here, as it will be called in PyNet.
This is not the only usage of this PR. It is just testing the flow-specific properties. The other changes are not related to the flow-specific properties. The only thing I'd like to understand is why the `ShtermResourceFlow`, the `ShtermResourceFlow` should be renamed. I'm not sure it would be better to extract it as a constant in the future.
@alexander-schranz should we use the constDelete here? I don't know what the best way to fix it.
This code block will be printed to the response with the `response` value. You should replace the `status` value by just `response['ResponseMetadata']['HTTPStatusCode']`
Can you use `interface{}` instead of `interface{}` for this new parameter?
This error was introduced in #2432, so we should not log it here
Is this really the most common information? `JsonRpcUrl` or `UrlUrl? url`
Do we need this to be part of `client_model_slug`? It's not used anywhere else so I don't think it's a good idea to store client-model in the `/`
Maybe we should move it to `LOG.info()`? We are deprecating them.
shouldnt the first param be >= 1?
The function is already being used in this file, right?
I'm not sure this is a good habit... I don't understand why the `root` array has been initialized and not the ` cache` array? Why is it not? Shouldn't the other `root` fields be in this PR?
It would be better to put a check on the shutdown in FetchDate. It can be done in a separate PR.
Is this a breaking change? Can we remove it?
Remove empty line.
Why does this return null?
Is this really the same thing as the `-c` command?
It's public now - I think its a good idea to add a new parameter.
Should it be `Email` instead?
For the current signature, it should be called `block_processor_verification_size`. The value should be *Nitpick, but that is not a number of outputs.
Why do you need this?
I wonder if this could be a `defer queryRange.QueryRange`?
I think this should be defined, since these are different things already.
I think you should have a separate `ROOTDIR]"` for this.
Is this include needed?
Shouldn't we have a jira for the change here?
This is needed for both python2 and python3 as well, right?
Could you add the `sync` tag tag?
Is this the right place to put this? I assume it is just for debugging.
@tnozicka I'm not sure what this means. How does it work?
I think this should be a separate PR?
What do you think about moving this into `newArrayList(configs, HTexture[])`? Then the `configs` can be removed from here and the `ToolOptions` can be removed from this class (and I think it's a separate issue, just like in case).
This is an error as well, we should probably just set the `reader` value to true.
I'd rather see the tests in the `tests` directory as this is a breaking change.
Can we make it configurable instead of the one the other is used for the "self"?
I think it's probably better to keep the old name here
I think it should be `m.paths["devices"]` instead of `m.paths["devices"]`
Just a thought. We should not be using the `gaPropertyID` as a class name. What about `super().ga_ID` ?
This line was not merged with the PR description. This line is not correct. The status code is not performed performed on the database level but not on the element. `fetchStatus` and `status.uploads` are only for testing purposes. In the database, it's not immediately clear that the status code was performed before the database has changed. In this case the PR description was not able to be changed to use the current `fetch` method.
This is a bug fix. We should not be using `.path` here.
DbCapacity needs a DbCapacity or something like that.
This is the reason why the hash will be ignored
I think you want to use `RunV(cmd, cmd, cmd, cmd), cmd)` instead of `sudo`.
Is there a reason we wouldn't want to use the default value? It's used to use the default value, right?
If we're not going to add the `state = component.prevState || state` to the previous `previousState` state, then it's probably worth making an `if (component.constructor.getDerivedStateFromProps)` check that the component was not null.
This import does not appear to be used anywhere.
I think you could remove this line.
Why not use `xhr` instead of hardcoding `error`?
This change doesn't seem to be related to the PR. I don't see the change in this PR. Can you confirm?
I think this error message might be confusing as it will be more confusing and more reusable if the endpoint is not provided.
This doesn't actually appear to be the right description. It will only work on the first element of the Tree.
Please use a `volatile` object to indicate it is null.
this spec is failing on CI, I don't think it's going to be compatible with Mcoming (and we have the same spec as the spec) to get rid of the spec.
Do we need to set `rampup` to `true` when it's not?
I believe this line should be indented one level too?
This is a bug, we should probably not do this...
I think this can be simplified to return the error
why remove it?
I think it might be worth to check for `return nil, formatCommandError(err, out)` before the copy? That way we don't need this copy at all.
This variable was unused, so I removed it.
Please don't do this. You can use the imports in this file. You'll need to move these imports in a future PR.
Nit: `errors` is a little confusing. What's the thinking behind it being `nil`?
Is this the correct one?
This is the same fix that is in `Validate()` and should be moved outside the `if` block.
Is there a reason you need to print the `sqlcode` into the `errorNumStr`? We could do it at the top and have a separate function that does the right thing.
We should not be using `AccountMaxVersionPrefix` here. It is a common field and will be used in other parts of the codebase, as in the case of `Account` value being set to `""`
I assume we don't use `apinamespace` in this version?
I don't think this is correct. We can change it.
Would it be better to use `Coroutine` in this package?
I don't think we need the `ipVersion` here anymore.
I think we should keep the `MultiDomainHost` as the parameter and make it non-nullable.
I would have used an error here so that you can use `o is an "unknown option" for the ps command`.
This is an unrelated change, but I think it should be moved to a separate file.
I don't see this change in this PR, but I'd be tempted to remove this test for now.
Why are these `1`s necessary? The reasoning is that we do not want `-1` here is because `1` is the default value.
I think this should be moved up one line to the `emit_ibl_routines` function. The other one in the file should be used to avoid this specific case.
I would have put this on the `FieldField` package as it's a lot more readable and doesn't matter but it doesn't really matter much either
It is not necessary to use `description` here.
I'm not seeing any usecase for this (e.g. what was it before before)...
If we use an empty top here instead of an empty value we could just call it `top`
@czarek What do you think about this change? The version is a const, which will be read from the server.
This file has been removed, so I removed it.
I think we could remove this and just add a constant in `chromeOptions`
if len(self) is not None, then use _ or _composite_root_resources for it
I'm not sure this needs to be an enum.
How about making it `OutputOutput`?
I think you can remove this and the `v2D_v2` tag as well as the library.
I am a bit concerned about this interface. I think it's better to have this as `public final String IMAGE_TYPE = "imageVersion";`
This can be removed, since the filename is in the `pidFile`
I would move this to `X-Forms`
Is this import needed?
We'll want to bump the class name in the header so we can remove the `Pricing` part.
This is a wrong place to import the `useSelect()` function. This is the main purpose of using `DashboardEffect` in `__init__` in `__init__`
I think it is not a good idea to add this to the `let` function, but I'm not sure what that is supposed to do here. The `auth.is_active` function is going to take the token as an argument. It seems to me that the `is_active` function is only needed to return the `auth` object.
This should be a `Set` not a `Set`
should this be `m.Group("/user", func() );` ?
Autoomatic doesn't work here. It will be better to just remove the base class from the class.
I'd use `Replace(enable)` for the attribute name, as its a bit more readable.
same here as well.
This is a private field.
Shouldn't the order of the sources be used by both `AsyncSources` and `AsyncDefaultSources`?
I don't think we should be changing the function here.
I guess this change will be unrelated to the PR?
What is the purpose of this copy?
Why do we have to add this?
I don't think we can do this. The `balance` is not an error. I'd recommend moving it to a function.
nit: remove spaces around `=`
nit: can we use `valueOf` here?
This is not a good idea, as it's only a singleLayer argument, not an integer.
This is a bit weird - it's not an `tasks` field and not a `tasks` field.
I think we need to do the same for `t.Fatal`, otherwise, we can do the same in `expect error`, and `expect error` below.
Can you move this to a separate `describe` section, since it's used in a different way?
I think it's better to add a static method that accepts `validateNoConflicting`.
Remove empty line?
This will throw if the `AppSecEnabled` is null. The `AppSecEnabled` and `AppSecEnabled` are not null and we are not. The `AppSecEnabled` should be null. It's only required for the `state` case, but it is also not null.
Does this need to be inside the constructor? This `AtomicLocalFile` is the default implementation and is the only caller of init.
why are we removing this?
This looks like a regression. Is it something we can use to do with the `x32` helper?
Shouldn't it be `_POST` instead?
Do you need the `record` here?
Does this change the behavior?
How about a single `rel`? Then we wouldn't need to have a single `if` statement.
I think the message should be updated to be able to take `Loader` as well
This file is no longer used
Can we keep this line in a single place instead of a function?
Should this be `type='sample'`?
This is a bit of a hack. We could also have one method that does the same thing.
Shouldn't it just be a `boolean` instead of a `Exception`?
I think the `from .drbg.hmac_drbg import DRBG` import should be fine, as `from .drbg import DRBG` is a bit ambiguous.
this is the only place that would need this.
This is a breaking change as it is not part of the pull-req.
Shouldn't this be `true`?
Can we just remove the 'Lade hoch' from the list?
Should we default to `true`?
I believe this was causing issues with our test purpose as it is no longer needed after the `mongoError` class has been moved to the `3x` file.
I would keep this function. It's a bit misleading.
Maybe add a link to the docs about these new events?
This change is not right. If `str(2, 2)` `if field` is empty, it will get set.
how about the imports above
This is the only change required in this commit.
I think this should be set to true only if the new `X` state is set.
I think the `Task` can be removed here, because we don't want to include it in the `Task.FromResult` implementation.
The `try/finally` isn't used in this file and I'd suggest `return co(string, yield User.create({ name: 'Hafez')` and then you could use `const yield User.create(string, yieldUser.create()).err;` directly in `yield.bulkWrite(int)` and use the `try/finally` in the `if (int) {` below.
`math.MaxInt64-action.ExecutionBaseIntrinsicGas` is not needed here.
I don't see why this test didn't exist. When you run the legacy code, it was removed, and I found that you didn't run all the tests.
Should this return `false` instead?
I don't understand why the 8 values were changed.
I am wondering if it makes sense to add a new setting that will show up in the dev config?
This is a bit confusing. It's the only place the user could call this `handle_()` without the second return value.
I don't think we can have the test coverage at all if it's safe to remove it, since it's not the one that we're using in a test.
why the function rename?
This should be `validateProxyUserUser`
I don't know if we can get rid of this namespace.
I think we should remove this line.
This doesn't need to be added.
@xiyakar Can you please review this change? It's not clear from the current change, the type of the object is not correct.
Can you make this string a constant and use it in the other one with `org.mule.runtime.module.util.Default#addunits`? That way, we can use this constant here too.
This should be done in the `if not len(password) == 0` check above.
this is needed because you're not using the `message` variable
Does the `va_start` function need to be called after the va? If not, please add it as a separate commit.
I think you could move this to `envconfig`
Why do we want this change?
I think this should be `!Array.html.erb`
is this a regression?
this line is duplicated in #10710. You can get rid of the description from this line.
I don't know if `By default` is the right place to put this. I would say this is an improvement
How does this work?
This test should also assert that the `--p2p-port=0` option is not specified. It should also fail if the test fails.
This line needs updating.
I think this one can be removed now? I think it's no longer needed.
I think the name `entelemetryNetwork` is better here?
This should also be a `node-env` (or some other one)
I would add the special case for all other tests and to verify the issue
Removed is the same as the next line in the loop above. It should be removed.
I think it is better to use the same name for githubURLFlag to use the github menu url. `url` is used only in one place in the code.
Line is too long. [87/80]
why import?
I think this should just be done after the first commit. This will simplify the commit's commit.
why not using something here? it seems to always be the default.
You don't use the attribute here, please use `PlatformDetection.categories`
Why not `ctx.User.LowerName` ?
This should be `1 * * time.Second`
What is this directory used for? Can we use something like `abspath` or `path_directory`?
Is there a possibility that you can use here? It looks like the `omitempty` will be the same as the `omitempty` field
Why are we using `var CircularJSON = self.cling. evictioncular()` instead of repeating `varvar CircularJSON = self.cling.Shrink.Access.getName()`, but not for this PR?
I'd prefer if we used this to be `MergeState.After` instead of ` ServiceDefinition`, but I think we can remove the `foreach` function altogether.
This is not right. `open file bucket:` is not a directory directory. `file` must not be a directory but not a directory.
nit: rename to Solr, we don't need to change that.
You need a more specific type for this, as in `lib/lib` is used by other packages.
I'm not sure this is what we want. If the user doesn't specify a count, the user will still be able to get a long time the value. What about an explicit `slots.stream()` method? If so, we should be able to return an empty string and have it return a `boolean` object instead.
Do you think it would be useful to have this flag as a class field?
I would suggest renaming this to something like "http://*:80/"
Please use a more specific type for this.
Please add the `needs_reshape_` flag for all entities
RANDOM_ORDERING: lambda do |list| Kernel.rand(list.size) : 1
This is a bit weird. Can you use an explicit path and use `index.format` instead?
I think it would better to use a `string` argument here, since it is a string.
Is there any way to make this a warning? I don't think that would work.
This should be removed.
I am not sure this is correct - we are trying to reduce the number of elements that are not a `ENGINE-16002 Exception` (I don't have the exact same exception) but that's the case. The problem is that if we want to catch more than one exception, then we should be able to do the right thing. But I'm not really sure how to do `ENGINE-03029 Required admin authenticated group or user` or `ENGINE-16002 Exception while closing command context: ENGINE-03110 Required admin authenticated group or user` because it will just be a `<ILoggingEvent>
I think these should be imported after `codahale` (which may be a problem)
I'm surprised that the config config file is not in the `config-` package.
This if statement is redundant because it will be removed from the if statement in line 98.
Should this be called `init()`?
why not use `_view`? I think we may just add some information here to keep consistency
"crash_test" isn't a good name for it.
Is the new parameter used somewhere?
This should use the constant from the config file
These are all unrelated changes, please revert?
nit: you can use `self.floor_thr)[0]` here, as in in line with the other functions.
I think you forgot to remove the import in 11.1
I think we can get this back to master
This change seems unlimited. Was `MemoryUnlimited` a reasonable thing to do?
`maxNumberOfFiles` and `totalFileCount` both have the same `maxNumberOfFiles` name, which is what it does, and is what is expected. Do we want to do that in the `BaseElement`? It seems like `totalFileCount` is not used anywhere, but it should be a separate PR.
It seems `*` and `*` are the same, right? Should we be using `*` here? `d` or `d towards` as `epochNum` is the same as `l` as `l`?
This should be a `ConcurrentMap`
no need for another one?
I would use `MESSAGE: connectID`
What does this mean? I don't see it used anywhere?
This needs to be deprecate
why is this a part of the name?
I'm not sure this change is the right place for this.
"Failed to intrinsic gas exeed" - the limit is a bit more accurate, since it can be the same as "foo".
Is it safe to assume the `tail()` is now a non-empty string?
This is a breaking change, but it's just a small thing to fix.
This was a bug, so we could leave it.
Please add `[a-z0-9]+` to the docstring.
This is the fix for #1846.
this was the bug in this PR. if you want to insert a `null`, it will be hardcoded to `map[string]`
Does the C++ not use the C++++ anymore? If not, why not remove it?
Can you change this to `"0"`? I'm pretty sure it makes sense to use a more explicit default value, but I'm not sure if it's a problem for the case when we have a default number of things that's more than 10.
this should be 'text_font_size'
I'm curious why this needs to be checked before the first `m_isAlive(true)` call
We could change the condition of this line to something like the if statement below, otherwise we will have no effect.
I don't see where these are used. Can we call them just `PackageKey` or `PackageDelegate`?
this is an example of the change that is testing the correct value
This is not the only place we need to call `TRUE` on `ITM_EQUAL`. I would recommend to use the constant `ITM_EQUAL_TRUE` instead of `TRUE`.
The API calls `nan` and `olete` are not necessary.
I think this makes sense, but if we're going to use `1` we should probably use `notBefore`, as it's not really a good reason for it
I think we should also change the default behavior of "testnet" to "mainnet"
This is the wrong way to handlesembly in the future.
I'm curious: how does this get run on older compilers?
I'm not sure if we should just make this change.
should be `@var string| false`
this test was incorrect. I think we should just remove it.
@deads2k do we want this to be `validate(ctx, sm, sc, act).Async(4)` or `validate(ctx, sm, sc, act)`?
shouldn't this be `NO CEN` instead of "#if?
I don't see how this works. The only thing I'm worried about is that the next release of Reader has to be able to be triggered in a non-const status code and we can try to get a `tx` status in the next release. Is it possible to have all status code that can be reused?
I'd like to remove this from the PR
I would suggest using `==` to get the value from `Helix_perf`.
I don't see any use of this function anywhere? I guess it would be better to put this check at the top of the method.
I think we should add this as well: `return err` is a `DumpRequestOut` I think.
you can use `strings.format(type)` here
`antrea-agent` and `antrea-agent` are just for the same controller, so why are we just making `antrea-agent` an enum?
why did you remove that?
`is SpanContext` is not null.
The `Trace` is not needed here, we can call the new `ards` method in the constructor
Can you rename this `by-partition`? It is more clear.
This looks wrong
Maybe use `chunk.new` here to make it more consistent?
you can drop the password from the setter and use the new one instead of using the new one
Can we change `longNumber` to just `CommitCommit(blockNumber)`? Then the ` CommitTree` should be `blockNumber`.
What's the impact of this change? The user will see what happens when an exception is thrown, but when a user does not use a custom type, they will see the type.
I would prefer to see the import in `NewFs` but the file is still available.
This is a bit odd, why not use the new one in the version?
I think you can remove this and use `STANDARD_storage_class_header` directly. It will be more likely for `2.5.x` to handle the case where `storage_class_header` is `None`.
Please remove the empty line between key and value.
"The region is specified..."
Should this be `if (tpMatcher.group(1))` instead of `if (tpMatcher.group(1)))`
I'm not sure if ApplicationKind is an issue here?
can you also add these to `X-custom-impl.js` and `X-custom-impl.js`?
I think the original `click` is more clear. Do we need to make sure the element is not actually a `element`?
Why this is moved from the if block?
Is this really a good candidate to remove?
Use a guard clause instead of wrapping the code inside a conditional expression.
This is a no-op because it has no impact on GetInitialize and I think we should keep the `Post` and `Get` methods
The file is not empty.
@jridgewell I'm not sure what app label this means? or if it's not the app command?
This isn't related to this PR, but I don't have a strong opinion either way.
I think the `String#includes` is not necessary anymore, since it is not only used in the tests anymore. We can keep it as is if it is used anywhere else.
I guess we can remove the getter and just add a description.
This change is no longer needed?
I think the `cache: true` can be removed now.
I think these are the only ones where you've removed the `long` and `x` in this file.
What is the problem here? I wouldn't expect this to be an exception, and then we wouldn't want it to happen. I think it is better if a new shutdown is called multiple times, which is not what the expected behaviour was. We wouldn't expect this method to be called multiple times, but I guess we can just move that into shutdown.
I don't think you need to escape here.
You can remove this.
I think it's more like this log message, it would be more readable
Is this change required?
Why do we have an option for the case?
could you pass the test `mypy.ServeHTTP()` to the test so that it's not always called by the user?
The `Recv` here doesn't seem right. Shouldn't the `MintX509CA` be `nil` here?
I think we can move this logic into `setupsetup.go` so we can do the same for other `ctx`s.
I'm not sure why we need to have both the `SurfaceKHR` and `ReportUndestroyedObjects` parameters. I would use the old `ReportUndestroyedObjects` method as a result.
nit: The `MongoDriverError` is now unused, so you can remove it entirely.
Can you use `maya` instead?
I think `ISpanDecorator` is not an interface, so you should just call this one
This is probably a good example of what we were talking about. We can probably remove this in a follow-up PR.
Please rename the key to be "Increase verbosity"
I wonder if we could have this method return an error instead of ignoring it?
Would be great if to rename these `_` to `ChainProcessor`
I don't think this is the best solution for this. The first time this PR is to set it to 0, it is a const-wide value (not for this PR), and then set it to 0 as the first time it's in the second time you get a const and a const-wide value.
`Assert.Same(KestrelEventSource.Log, stop?.EventSource)`?
nit, remove empty line?
I would call this `GetMetricFunction`
I think we can use `wait_for_port_open` to make sure `wait_for_port_open` is called before we set `dynamodb`. We want to make sure `endpoint_url=None` doesn't break anything else.
Why is it possible to remove the `== 0x2` check now?
This was the only test I did not do what was the original issue.
@bartonjs, I think this is a bug. It's only `ulong` because we don't need to set the `0` value.
This is a bit weird. It's a number.
no need for this.
this looks like a bug, we are missing a check here?
This should be `parseResponse`
I would add an enum value here to be consistent with the one above
Shouldn't we check the `props.containsKey` here?
This is an example of how it was previously.
The exception message can be more helpful.
I think it would be better to move this method in a separate class to keep consistency
I'm not sure this is needed. If the stateDb was a list, then it should be the format of the format of the format.
You can use `self.num_classes = paddle.fill_function(labels,num_total_anchors, inside_flags)`
This function is used by a lot of other places in this PR. I think `ByteSize` is fine.
Is this change required? If not we should remove this.
This should be `.isNotEmpty(blob => blob.type?.length > 0)`
Code Climate says this is not tested.
I would prefer to keep the `api_version >= VK_API_VERSION_1_1` as an option in the extension. It seems that the `khr_API_VERSION` should be `opt` rather than `physical_API_VERSION_1_1` (the `pluggable_VERSION` isn't `AL_opt`). But I guess that's fine to leave it, because that is what it means, and the `planner_version >= VK_API_VERSION` is a special case for `AL_opt` is not the right thing to do.
This should be `job_failed_router` instead of `job_failed_router`, right?
NIT: `i !== dom.value && (newProps.value) && local!i))`
@lisasy you probably should just remove this, and just call it from within the C++ doc.
info is not needed anymore.
I think this should be a global constant.
I'm not sure why the change is needed, if you have a good reason to use the same value from the url.
Is the `preview::spmd` used in the `init_form` module?
This method should also return a boolean, so we don't need to pass `false` to this if.
`SumWithMinMax` will be `0x70, 0x20`
We could just remove this one. It's no longer needed.
Maybe we could simplify the usage of `__apply_mult_override` and `__apply_single_override` if we do that?
Should we be checking the error here?
Maybe we can set this to `universal_newlines`? It seems to work.
I don't like this change as we will have the same issue in the `GetActiveClusterName` function in `Clusters`, so it can't be done in `Clusters`.
This test was failing because we were running the `@pytest` tests during the tests because it wasn't running in tests. The reason for this is that `pytest` tests was not passing in a pytest class. This was probably a bug.
I think it's not the correct fix. The current logic is the only usage of `items.ToList()` when the items is not found.
Line is too long. [91/90]
should we make sure the string is not set?
@aosyatnik, I'm not sure this is the right way. It was to have a `clientModel.ModelTypes.First()` in the `client.ModelTypes.First`, which is where it is used?
I'm not sure this is the right place to reprocess if it's set to `None`. I guess it's better if the headers in the `request` list are set to `h2o_headers_command_t`. But if you have another way to tell you what to do, this should probably be a public method, or at least `request_request` is the right place to put this code. If we do want to keep the old code and just have a single `if` statement, we can remove it and then just move the logic in the `if` block.
I think it's better to move refresh state from refresh state, as refresh state can be set to refresh state and not refresh state.
why did you remove this line?
This should be `colName == TRAF_SYSKEY_COLNAME` instead. The reason I'm not sure what to do is is because `TRA_DIVISION_COLNAME` is only ever used when `colName == 0`.
Why are these lines changed?
I'm not convinced that the `collectLinkLibraries` method should have the right `forAllModules` method. It's a function that does the right thing.
Is there a reason why this is set incorrectly?
Should we do it in the `onResponse` method?
I think it would be better if the user could use `info` here instead of `finest` as `info` in `info.py`
Is the `std::string` used anywhere?
I think that the only place `HttpClientInstrumentationOptions` is needed is in the constructor.
This is needed to generate the case that `GOMAXPROCS` is `2`.
Would it make sense to make this a `*ResourceAddress`?
Since `pendingRequest.configuration.remoteHost` is only passed to `fixUpHost`. I'd prefer to keep the `defaultsRequest.configuration.remoteHost` as an argument.
Nit: Please move this to another file.
Why is the O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
This can be removed. There is a typo in the `java.json.JSONObject`
Are these changes still required?
**non blocking**:** This one has been missed in another.
Is there a particular reason to not call ` RegisterGlobalOption` twice? Seems like a function that does the right thing.
isProtected is a pointer?
This can be simplified to `click_to_be_unclickable` since it is in the `Url` element.
I'm not sure if the `BaseElement` should be a `Object`. What's the difference between ` GoGapicContext` and `Object`?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Are the changes to this class really necessary ?
This is a bug fix. The `===` test should be moved down to the top of the file
I'm not sure this change is the right fix. The target is the params.distanceEffect, but the target was not the params.
It looks like `analytics-enoughly-user-loyalty` is the preferred one, so it's a separate action.
What if we called `/` in `environment.js`? Can we have the same script as `/`?
Why is the try/catch necessary?
I don't think this is a good idea. The rest of this file is a good place, so it can be improved by adding a field to the list.
nitpick: I think this should happen after `DT[:, f.]`
Is it safe to change the name of this variable?
Is there any chance that we can make the `l` tag tag `import org.apache.hadoop.common.util.l` a property of the validation?
Can we just use `@since TODO` here?
`enableOpenTelemetryTracing` seems to be a breaking change. I think the only thing we want to make sure `enableOpenTelemetryTracer` is also available in `getOpenTelemetryTracing`. I'm not sure if it would have been better to use `enableOpenTelemetryTracing` in this file.
Is this line supposed to be here? `wal` is already a string (i.e. it is 0)
This is not really needed. MakeEnvironmentURL will already depend on the other environment. We should probably just call this MakeEnvironmentURL.
Use .empty() instead of .VISIBLE
I think the app name should be "v2" since we have a unique name for it. Maybe something like "ed up v2"?
The `NoError` here should be done after `NoError`. It's used in multiple places, so the `Recv` method should be called after `letsencrypt` and `letsencrypt.Recv` should be called.
I think we should remove this from this list. The only place it is needed is in this list is in a separate file and it doesn't have a `@SuppressWarnings("windows")` which does a `@SuppressWarnings("windows")`.
why is this removed?
drop  I guess we should not be calling Allergen() in this class as it may not be necessary to call it in other languages
We still want to use `expect().to have_content(just_finished_trail.name)` here, but that's not a valid expectation
Could this be replaced by the typedef or is it just the same as the `else`?
I think the `WriteableGroup` should be a constant
The dilation data variable is a pointer (e.g. `33_shape[i] - 1`)
It looks a little strange to see `DidMount`s using `BenchmarkSwitcher` here, because it is only used in a single method.
Is the `no_model1_train` not the best way to do it? I'm thinking we should just do a similar thing in `ckpt_train.py` and do nothing in `ckpt_train.py`
What do you think about using a `TODO` here?
this is a bit odd - could it be a constant?
I think this is a leftover statement from debugging.
I wonder if we want to use something like `useCIArtifacts`, or just `setCIArtifacts`?
I'm not seeing any use of `TeamPlan` in this file, can we just use `prime_workshops` instead?
I'm not sure why you moved this. I don't see the point of this method
I think it would be more consistent to throw a null check here like in the `if` block below. Also, the `registry` block can be null and a new `registry.get(registry)` check. This will avoid NPEs and then we would need a null check. The `registry` is already `null` in that case and the `registry` above will throw.
Why is this being changed here? I thought it wouldn't be better to just use the `ocn` attribute to determine the value.
this is a very large number. It would be better to make a constant.
This will be importing from `__init__` from `__init__` (as it does) is a function call.
This should be `verbose` not `str`.
We have a label_spammer that was never used (either in a label or another, as a user's code) but I'm not sure that this will work. I can't think of any reason why we're using this label to generate a label label, and that we should be able to make it explicit. I'm not a huge fan of this label and I think I can't figure out what the label is, so I think it is okay to have it be a good idea for the user to use the label as a label
This is the only place I'm seeing a `EnsureTelemetryConfig` with a name. I'm not sure how I feel about the name.
Should be `* 2` because of `\` in other cases.
Shouldn't we be able to use `type != SupportedType::TIMESTAMP` instead of `type != SupportedType::personal`? Or do we have any better way?
I think this should be `ctx.Body = hex.EncodeToString(hasBytes)`
Does it mean you can't use a ternary if you don't want to use a ternary here? What if you want to use the ternary if you want to use `settings.abc.clangsa.settings.abc`? I think the ternary would be more correct than `settings.abc.abc./'`. I think that is what you need here is: `if "clangsa" in analyzers or "clangsa" in the ternary if you use `settings.abc.abc.abc.abc.abc.abc.abc, you use `settings.abc
What happens if `21000` is disabled for fee ?
This is not needed. We already set the id if it is not nil, so you can just pass the id in.
The original error is malformed. In this case we don't want to check if the token is empty.
Shouldn't we also skip the wlr_output *output, the wlr_output *output_type from the previous one?
These should probably be imported if you are using `from .. ..` instead of `sql`
do you have an example here?
I think we can keep this and `reject` methods as it is, because `ok` is now a promise and `reject` is no longer available.
Should this be `config.PATH`, since the hash is not nil?
This is still needed because the `if` below is already there.
This should probably be called `PushViewController == 5`. I think we should be able to use a constant here.
This is still needed to call `onNewPasscode` on `PassPassManager`
I think defaultPostWriteInterval should default to the min of the min of the values. This change is redundant.
This is a good thing to change. It's not related to this PR, but if it doesn't look correct, then I'll open an issue.
this could go either way if we want to have an option on the client side, we can use the `amd` value to get the value from the resources
The new functionality should be "Defaults to be able to be set by the new one (with new one). "Defaults to be set by the new one."
nit: can we have a `json.prototype` that returns the status to another instead of passing the status to the state?
We can still pass the DataFrame here?
Please don't use the `DisableGit` field in all tests, it will be easier to understand if you add the field `Disable` in the UI
@user.org is a valid field name I think
Is this a case that is not a `disabled` field?
I don't think we want to do this here because the default `docker` is the `docker` param. I'm thinking we should use `etc_hosts.node_by()` instead.
Nice catch, but this looks unintentional.
I'm a bit confused as to why this is necessary?
I don't see the point of having the `getIdentifier` function if it's not a single one, it should be renamed.
I'd rather have this `AbsolutePath` be added to the `FLATBUFFERS_PLATFORM_NO_FILE_SUPPORT`
This might be a leftover from an earlier commit
This is a bit confusing since the `QueryRunner` function is only called in the `ctx` object.
i don't know if it is possible to have an enum of the `dyn` field.
I'd prefer to add the `old` method to the ID as the method name. `IDisposable` will be more accurate.
I think this default to True is redundant, since it is used in the base class.
We don't need to add this, we can just get rid of the old pickle from the external external external runs.
Could this just be `str_replace()` instead of `LOG()`?
I'm not sure if the argument type is actually the correct parameter. If I want to call argument type then I don't think we want the right parameter (and not argument type). I'd suggest removing the argument type.
I think this should be removed from here, since the other classes don't have this annotation
The `Class Cms\Classes\MediaLibraryItem` deprecated is not deprecated and the message should be removed.
you can use the $config directly, no need to pass the $config to the variable
This isn't a valid SPI... We should also check the number of logs that the user should use.
I'm not sure if the `LinkageError` class would be needed anymore? I think it's not used anymore?
why change the default value to `traceparentHeader`?
This is the only change that affects TF vendored code.
please revert this change and add your IDE automatically import.
Is this for a change from a different handler? If so it may make sense to add `*OUtbounds` to `InitInitProcess`, but I'd like to avoid the need of `--OUtbounds`.
Looks like you missed the extra space here.
These seem unrelated to what this class was doing? I'd expect a user to use the same value. Can we keep this as a field?
Same here, I think this should be an error instead of an status.
This may not be necessary since we use sizeof on `sizeof`
Does this need to be `SourceGroups` or can we just change it to `sourceGroups`? I think that's fine since it's just `source`, but I think it should be `sourceGroups` to match other components.
I think this could be re-introduced if you don't want to use this string.
Can we add a TODO in the code to remove these two lines? It looks like they are used only in a single place.
@cramforce I'm not sure what this is for?
Remove this file.
This should probably go in a separate PR
nit: it would be nicer to add `logFieldsFields` as a `TiSession` and use only `logFields` when the params are used.
I'm not sure this test is really necessary. The test should be testing the create(:user) so it doesn't get tested. The test would only see the value of the form.
I think this is wrong, the new one is a little bit odd.
This should be added in a try-finally
I'm confused, is there any way to make this `retry_on`?
I think this needs to be added here, too. We can also fix the other `apitype` changes in this file
I don't think you need the private method. You can just call `braille.handler#handleCaretMove`
Can we just use the `Topic` tag in the tag name?
We can use `StyleguideController` directly.
Please use `_base_` to make it clear the purpose of this function is to add it to the `DEFAULT_params`.
This throws the exception, not the exception.
We can use `s.pubsub.PubSub` instead of `s.pubsub.Publish` for this
Would it make sense to have the info info be an error instead of an empty string?
Should this be in the main `git blame`?
Please change to WordPress dependencies to match the other imports and make the other way easier.
Do we need to make this change? Seems like a bugfix.
This spec is already present in a `before_action` block, and it doesn't have a value but it does seem to be related to the profile profile.
I'm not sure why you removed the first 2 here?
This change should be reverted.
We could use `showSpeechViewerAtStartup` here.
Would be better to use a `@return` to add the `segmentId` property.
This doesn't seem right - `--export-fixes` will never fix the `--on-fixes`.
@sayden Should this be `big.big.big` ?
Shouldn't be `if options[:port] = port`
This method is never used, right?
This is the main change to the cache? I think this is a bit confusing...
I think we need to also change the implementation of `AllocationContexts`, `UserCallback` and `UserCallback`, which is more consistent with the other API.
I don't think we want to use `\*` here.
Why do you need to clear the cache on the DB? Why do we have that step 1, 2?
Can you use `5 seconds` instead?
Can we make this a `sum64` please?
Can you add the new line to show what the pytest does?
Would it be worth moving this to a new class as well? This is a bit odd.
why is this Assert.True(true)) needed?
I guess we could add new fields for these as well, as we have the other key in the database.
I think you can just remove the node from the `node` variable here, as it's the most common pattern. Also, I would suggest to remove `node` as it is the same as the node above, it's not used in this PR.
I think we can change the signature of `in` for now. But for the time being we want to change the signature of the dictionary, we should just have it here and return the value of the dictionary (which is what is used for).
The variable `position` is only used once.
This is a bit of a hack, since it could be an `Optional`. It would be better to have `slots` be a `boolean` instead of `preload`.
Why did this change?
I think you can remove the "Bindable" annotation here
@deads2k @siddontang This is the most important change. I am not sure if the cluster pool needs to be used at all.
What about the `opts` field that is passed in as a string?
This file can be reverted.
Can this use the filter method instead of `$$hashKey`?
You need to check if dynamo_exited is false, and this should be the only value of dynamo_exited
I think we don't need to expose `SetTlsCACertificate`, it should be `Config.setParam("setup")` and it should be in `common.utils`.
I don't quite understand why we're removing these changes. Could you please change the formatting to a new line?
This is a pretty generic way. I can make it so it can be called more than once (in the future), but I think we should probably be consistent across the codebase.
I'd add a `@classmethod` annotation here.
Why not using `boolean`?
Isn't this line needed?
I'm not sure that this actually fixes the issue. It doesn't look like we're calling this `IScope` for current scope. Maybe we should add a `Replace` property on the property `IScope` instead?
I think the most important part of the page would be a `#restart` too
let's remove this.
I think this should be a separate PR
The message should say: > > > >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >= >=
Is this needed for `IEnumerable<T>::<T>`?
I don't think we want to remove this error message.
nit: can you update the order in this file to reflect that new order in your IDE?
Why use `use_depthwise` instead of `use_depthwise`?
This is a bit weird - maybe a single thread-related note?
I think `getStoreInbox* storeInbox = getStoreInbox();` can be removed. The `if (storeInbox)` above should be removed.
Could be `private`
I think this should probably use `sys.get("Host #{host.name")`
I think we should keep the "cart-comments" option on the page page as well
I don't see any new code changes here
Can you use the `*` format as well?
this is not the case anymore right?
We should add a quick note for this to ensure that the button was removed.
I think we should move it to the `instr_may_write_zmm_register()`, as it does not really need the update() method.
I think `has_RETRY_LEVEL` should go in `start` and `start_stop`.
Please rename it as `SessionStats.imitivesimitives` or `SessionStats.imitivesimitives` (in `srcsrc/develop/develop/currentSessionStats.imitivesimitives`). You can use the same pattern for the other changes in this PR.
This is an API breaking change
Please remove the empty line
I don't think it's a good idea to have a method that is going to have to know the original behavior.
This should be a warning
I think this readonly should just be readonly and not just readonly. DoublyLinkedListNode head.
This one change looks unrelated. I am fine with it, but just wondering...
This is a breaking change (I think it's better to move the `Descriptors3D` from `globby_VSA` to `globby_VSA`). I think it should be fine here (it's a bit more efficient and more closely refactored to use the existing `globby_VSA` API, but maybe that's more clear what it is.)
Is this a typo?
Does this have to be done by `limiter`?
Why do we need this change?
Why is this change necessary?
I think we should leave the logging in here
You can use `_test3_a`, like you did for `_o.Test3.A` instead of `_test3_b`
Why the change?
I think the `@param` and `@proposals_data` can be removed because the query query contains all values of the listing
@mhoemmen why do you need this line? I mean, I don't see any code that calls this function, so if it's not there, you can remove it
I'd like to see a default here
Why not just "sizeof"? The reason is that if you're writing the standard library, then the error message could be confusing, and we're not saying we don't want to configure it.
I'm not sure why this is a good idea. If you use `setNetworkConnection`, then you should have a default value. But I'm not sure how to fix this now.
Why did you remove this?
It is not a bug if sys.version is 0 or sys.version == -1. This will not happen if there are any versions of the version
`string_metric_parse` is checked in a few lines above, could you please rename it to `string_metric_parse()`?
I am not familiar with this. I would have put the return value here as a parameter and then do it in the `python_requires_root.py`, and it can be used in other places as well.
This is an unfortunate test, I think.
It looks like the app container is not being loaded?
This was changed in #5046.
This field should not be used in the schema as the column name will be removed.
This is an unrelated change, and probably should be reverted.
I'm not sure this is the right move, but if this is the case I think we should probably set it to something else, or perhaps just `create_required_files`?
I don't like the name, especially since I'm not a huge fan of it, I'd like to see the name of an explicit name for this.
Maybe we don't want this to be an optional value for `sig`, since we don't want it to be set in every case of 0.
Can the other functions be moved into the `ctx` package?
Can we just make this an explicit assert?
Shouldn't this be a manager?
`splitName` should not be added to the `Number` class
Shouldn't this be `os.makedirs(path, Python 2)`?
I think this should be `@cmdutils.Is_tab`
Is this needed? It looks like a rebase, but still does it?
I think it would be better to have an `if buildfile` here as well.
The code below does not match `0` in the server. I think it should be fine.
I think this should be done with `isNotImplemented` instead of `isNotImplemented` as it's no longer a function.
I'm not sure why this was 6
Do you think we need to do this in this PR as well?
Should we make a call to `stateController.NewReplacer()` here as well?
We don't need to use `ssm` anymore, right?
This is a bit unrelated, but I'm not sure it's worth it. It seems that we have a test for this case, which is a `user_check_bare_or_bare_user`.
I'm not sure why we wouldn't do this. `len(statusParts) > 0` is an error, and if it's not, we should do it.
How about something like: "Not skipped on particular server..."
if we change the `bad_request` here, we won't be able to switch from the `must_respond_with` method to the `bad_request`
I think you should do this in this same method and move the `jobInfo` into a `try/except` block to avoid this.
How about just ` CStorPoolPhase is a CStorPool phase.`? Then we can remove the `type CStorPoolPhase string` line.
What is the purpose of this line?
Why change this?
I think we can use `sizeof` here instead of `''` to avoid the loop.
We don't have to worry about it, but it's better to have the variable in the variable that is set at the top of the file.
The changes here look unrelated to the PR.
Can this use the `@SuppressWarnings("unchecked")`?
This will break the pool for every single pool.
Line is too long. [83/80]
This is the only thing where I don't think we should be using the new node. The only way it could be the new node is in the first place. In case of this, it should probably be the new node to keep track of the old node.
This seems to be missing a `windows.h`.
This should be set_binding_pair.first
this will be removed after the `InvalidArgument` has been removed as the error message will be logged
why not keep the original version?
I think this URL can be removed too?
@lannkaL what does it mean?
Do we need to do this?
` array $user of user data`
Why are you converting them to a struct?
Why not use the existing `Register` method here?
Shouldn't these be moved to `api/server/server.md`? Or is it used in the config file somewhere?
I'd prefer to see two--while winUser.getMessage calls for winUser.getMessage and a similar one.
Is this necessary?
I think `overwrite` and `overwrite` are unused.
`&& !s` not needed anymore?
Nice one! I'd prefer using the `if (term != null && term.length == currPrefix.length)`
We need this TODO
This should be done in a separate PR.
@nickytonline I think we should also add the config here and use the config name
nit: this method should probably be public so that it's clear what it is doing
why do you change this?
This is a breaking change, but I'd prefer it not to be part of `_` if possible
Can we move the `instance_variable_set` logic to the `Schemaaker` class, instead of the hosts itself?
Since PyObject is a required result, I would prefer to use PyObject_value()
This should be `+=` instead of `+`
Is it not possible to get rid of this part?
In case anybody wants to write this to the non-standard cron (and possibly not to be able to run this on the client) this will still be the case for the user.
@jackfrancis I'm sure this was the only place I got here. This change does the original behaviour, but is there a reason to remove the change from the PR? @dvoytenko
Why was this removed?
`<p> <p>` not promise, but `<p> <p> <p>` is an interface.
This route is not really important, but I think the `id` should be removed from the URL, and the URL should only be picked up if the URL is actually actually passed in.
This is the fix to the line above.
I'd add an empty check here
Why this test is changed from stdlib to stdlib?
This can be done inside `var childViewModelCache = Mvx.GetSingleton<IMvxChildViewModelCache>();`
I don't think this is used, is it?
I don't think this is the right approach. The only difference is that `el.parentNode.removeChild(el)` is `el.parentNode.removeChild(el)`. The first one is `el.parentNode.removeChild(el)` which is the first one that is `!empty()` which is `!empty(el)`. The second one is `parentNode.removeChild(el)` which does the same. If we want to remove `!empty(el)`.
This is an example of how the `unexpected status` is used.
Can we use `const` for `pkg/api/types.go` instead?
I think it would be better to do this at the top of the file, so that we know how to do it.
I think it would be better to have this as an `GetUrl` rather than using the `lookback` as the default. It would be more efficient to change the description of what the user wants.
I think we should keep this as it was.
How about `this).val() === countlyGlobal["member"]`?
Shouldn't it be `db.driver.class` ? I think that would be a better solution than a more direct class name.
The `ensure_system_roles_exist` logic only applies to `roles` attributes. I don't know why it was done here.
We could use `String.format` here
I'd add a link to the docs to not break the plugin.
I think this should be a constant somewhere.
Is this line supposed to be indented?
I'm not sure that this should be an error if the block_id block is not specified, if the block is not found. If the block_id block is checked, the block_expected would not be called if the block does not exist anymore.
to help with default number of parts
It looks like there are no `TypeGenerator` objects, which would be sufficient to annotate them.
This is a wrong name. The `matchers` is the same as `image-tag-matchers.js`
This seems like a wrong place for this, and I'll let it be refactored to use the same thing
@atm-quentin please remove this and add a `$this->createdAt`, since it is used in the `createOrder`
I'm a hunch of disabling it for a while. Can you explain why this import is required?
I think we can remove this `PublicVolumeCreationDisabled` and `public-volume-create-allowed` altogether and just add the other fields in the `--no-no-no-no-no-no-no-no-no-no-store`
This should be `default_MAX_to` instead.
This one probably shouldn't be necessary. We have the `exit_code` in the return value. You're using this to pass the user.
This was just wrong, we have to keep the `remove` method to return the same value for the `remove()` method.
why not set the default value of the enum?
this change should be reverted. The changes in this file should be reverted
I don't think we need to keep `HIP_UNSUPPORTED}},` for anything else now that the `HIP_UNSUPPORTED}},` is for testing purposes.
shouldn't this return nullable?
Please remove the unused variables
I think we can just remove the `using` and remove `TransitionDocNode`.
I think that we can do something like `maybemaybemaybemaybemaybemaybemaybemaybemaybemaybemaybemaybemaybemaybe_maybe_Optional(..), "should" instead of "with util.prestosql.util.Test('traverse')`.
You should use `is_empty()` instead of this?
Should we check the region in there? I'm not sure if this is the right place to put this.
This one still needs to be changed to the one from the core.json
`&& rawErrorData.containsKey(STACK_TRACE)` can be replaced with `|| rawErrorData.containsKey(STACK_TRACE) == null`
nit: maybe define a constant for single partition, so that it can be removed?
This use statement is not needed.
Is this really needed? If the debug mode is used in a different way than the other uses are removed from here, I'd prefer to keep it in mind if you prefer.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is the only place where I'd expect a new rule is used.
@xuehui1991 I'm not sure this should be right, if the user has to know the pser_or_pdf.js is not None.
`config['transports']` is a bit of a nitpick, but I think we can use `config['transports']` instead of hardcoding `context`.
I think the last argument should be removed here.
why not import?
Why is this needed?
This is a change to fix the problem and should only be in a `list`.
I'm not sure what this is for, but it seems like it should be `stats` instead of `null`?
@matt-gardner Is this a typo?
Can you move the TODO to be removed?
This change was unrelated.
This isn't needed anymore.
Why did we change this? It's not true, right?
Is `sqlite` the correct concept here? If not then it should be `sqlite`
this will be a debugging leftover.
I would suggest changing this method to `void` as it will make it easier to debug
This is the wrong place to do this. It's an internal config (and it can be accessed by the other way), so it's a public constructor.
The `log.TraceLevel` is used to log the output of the target.
what is muExceeded andUnlock is not the right approach?
is there a reason we need to change this?
Why not pass the namespace to the constructor?
This should probably be `@Method`, not `IdentifierScheme`.
I think this is only used for testing purposes, right?
Please remove empty lines
Why do we have to get the id from the `boolean` entry if it has been initialized? It seems that the `getContentDescription` value is not used, so we shouldn't be adding it to the `registerMethod` as it is, but we should also add it in the `getContentDescription`
I think this should not be necessary, the code is already doing the actual work for the static static method and it's not a valid alternative
Is there a reason to use `#buffer` here? I think it should just default to `0`.
This was the only place it was used.
I think this should be moved to the `inner_type` field in this class as well. It's not really needed, and I don't see a need for it here.
The config file can be deleted, since it's already defined by the `config` resource.
Would it be more readable to use LOG here?
I would make this `&:to_f` and do `&:to_f` in the config (and remove the function above).
I would have named this `mod` (and maybe `mod`) would be better :)
why is this needed?
I think it should be `throw new enums(command).quit` instead of `throw new enums(command).quit`
I'm not sure if there is a better way to do this?
It would be good to explicitly import collections.OrderedDict
This is a breaking change. The `Single integer values` property should be used in `multiInt`, so I think it should be removed.
I think it would be better to use `finishResolution` instead of `getAccounts` here. This is the main code that's used in the `receiveGetContainers` which is called on the user's `finishResolution` which is used in the `finishResolution` function.
Is this used?
This if statement is redundant, if no other else is specified, the if statement doesn't contain a single condition.
I think we don't have to have an empty method for getting the user ID from the first name. I think we could use an `fail` here?
Should this be `Doc generateModule(Element element, Doc body, Iterable<String> imports)`?
1. why is this set to `true` when PMT hash is not exist? 2. The PMT hash should not be set.
You can use `config_file` here, which is already there in `build_config.py`.
I think this needs a license header
@aparajit-pratap I'm a bit concerned about this - the only thing I'm not sure we want to use this as a spec. I would have expected it to be used in other cases (e.g. `rewardward` or `rehension`)
This is an example of a situation where we want to have the logic in the `Client` API which we want to use here. We can't do this in the `Client` API, as it has the same issue. We can fix this later on in the `Client` branch to fix the bugfix for the next PR.
I think the name is misleading. I think it is more readable than just the name.
This seems to be a good candidate for a flag to run `ast_ctx->GetReplExprModulesDir()`?
Do we need this? I don't think it's necessary to pass in a `section_teacher` field, which is why we need this.
It's not the right way to do smoothingScore. This should be 0. The current behavior is not correct. The only reason we need to call `0` is if it's 0. The only reason we need to have the API return 0 is to prevent the API from doing the same thing.
The site site should be set to `true` in `unitype`, not in `update-bower`.
Should we add a TODO to remove all the other uses?
The s3-Simple StorageRoot uploads of unencrypted objects to an Amazon Simple Storage Solution is unencrypted objects.
@sahbi-ktifa Can you please explain what the difference between min000 and min000? Also, the timeout should be 25000, not 25000.
This is not needed.
Why did this change?
why is the row count removed?
I don't like the extra space here. It is a bit odd, and I don't see how it is, why do we need to add it?
Just curious, is this `getDeclaredConstructor(cls)` still useful? It seems like `getDeclaredConstructor` is not always a `cls` but is a `boolean` (or `boolean`). I think it may be more accurate to use `getFactory()`.
This is the fix to `this.hot.countCols()`, and it will not be called with hotSourceCols.
What if I set this as `-1` to `-1`?
This needs to be `false` if `create_table` is not set.
Can you remove this line please.
I think this `//` should go in `LoadSplit`, since we have `tag.DoneSplit` and `//.Error` where `nil` is set.
Is there a reason why we don't use `instanceLogLevelUsage` as default value instead of `instance` and we're just using `instance`? I wouldn't expect that `instance` would be a good name. What is `instanceLogLevelUsage`?
Why is this needed? The layoutManager.mobile can be used in other places.
Is the `clusterName` variable ever used? I'm not sure why this would be `b.IsUnmanaged(clusterName)`, since it's not a boolean, right?
Should we keep the original value here?
`original` is a better name than `map[string]string`.
`This profile will be permanently deleted` => `this action cannot be undone`
Is there a reason you chose this value? Can't we just pass the string and not the value?
I'm not sure this is safe. This seems to be causing CI failures.
Please use a `StringUtils.isEmpty`, which is more efficient.
@n3nash @n3nash, this should be `invocation.addContext(cseContext);`
I think we can just remove it.
This test is still running on 9 9 and should be removed
Why not default to -1 here and just set the default here?
These two are not used, but they are not used in S3. Can we remove them?
`c.setFirstPingTimer(c)` should be renamed to `//` and remove the need for `WithFirstPingTimer`
@adamjstewart I think the changes here are intentional. It's a little hard to follow.
why did this not break?
should we use a `no-base` here?
This should be `files` only, not `plans_path`
Is this used?
Is this needed?
What does this get really netty?
This will be hard coded in the `if`
Shouldn't it be a `int` instead?
Why did you change the addr size here?
I think this test should not be needed. It should be `Debug.Assert(approval_group)`
this should probably use text.text, 'decode'
Why are you doing this? Why not simply do GetValueAsData() in the same way that you did the other thing?
I'm not sure how I feel about this - if you want to go to yours, we probably should add the `[{...,]] }` to the `calc` and add a check for it.
This isn't a prefix, it's just a prefix (in order to avoid any conflicts with the old one you're going to do with the other).
@Pearl1594 I think this is what we want to do for the most important case. If we do want to trigger the processing of a single record we'll never get a good processing processing.
Should this be public ?
This is a bug fix for the existing peer changes.
nit: I think you should be able to use the `rpmDependenciesDirectory` package instead of the `rpm.valuedPath` API and then you can use it here.
Should we assert that `Basicfp` is None here, as well?
This was not related to this PR, but I'm not sure why we are removing this?
In general this is the only place where we have this. This is a very common pattern, and not a part of the issue. Can you confirm if this is the case?
This is the cause of what we were doing in the coreclr's build system which will be used to see what it was before, so it would need to be fixed by this commit.
@mfojtik why are we sure we don't need this?
Shouldn't we just check if the trace is a `trace` and not the string `subject`?
This should be checked at `return` level.
Do we want this to be `if isPluginV2 { ... }`?
@DaanHoogland what's the purpose of this change?
This should be a string too.
Is it the first step? I'm not seeing any new logic here.
I am not sure this is correct, we should use `id` in tests as well
I think it is better to use the new helper `a>` rather than hardcoding `<a>` and `a>` here (and in the next one, `<a>Network settings (SSH, SSL, Proxy, ...)`). I would use the old name `<a>` to avoid this. It is not clear to me if we can do `<a>` or `<a>Network settings (SSH, SSL, Proxy, ...). I'm not sure what the right thing to do is, but if it's a problem, then I would add a new helper method to the old one. I
I'm not sure we want to log the flow control window here?
Do we need to pass controller in as an argument?
I think that the OCI field is not allowed in a kernel namespace (which should never be present)
I think we should change the size here to make sure that the attribute still gets set and not the response will be zero.
Why not just add theAppendAppendControlControl to the base class?
We can just remove `info()` from `version()`.
Can you add a TODO to remove this line? We don't use the new `qt.io` module anymore.
Why timeout?
I'm not sure if this should be a name?
This is a bit weird. Why not `this.setState`?
I think we should keep encoding in the DB as UTF-8 to avoid any chance to set the encoding. What do you think?
I think this can be removed, and the other `vm.DB.IndexDBPath` above should be removed.
I'm not very familiar with this code. Do you plan to have a limit for the configuration?
This file should be removed, I think.
I think `feval` is only ever used to find the string ``None``. We should also mention it in the model layer, not the string ``None``
Style/RedundantSelf: Redundant nested xstream 0 be deprecated.
I don't think this is the right place for this. The main reason is to make sure the output is the same as the "ddev" package.
Hmm, this should probably use something like ``str(self.write())`.
this class is not needed anymore ?
Please use `StringUtils.isNotEmpty(StringUtils.isNotEmpty, String String, StringComparison)`
We should add a `url.New` method here and below?
I'm not sure if it would work here. I think `six_text_type` would return a boolean, because the value will never actually be a string. I'm not sure if it's possible to do the `utf-8` thing in the future to avoid this kind of change. But I don't think it's safe to do it for a while. I would rather do the `.text_type` check in favor of checking if `value = six.text_type` and then `six()` in the `utf-8`
Trailing whitespace detected.
Is there a need for this?
I think we should be using the `Escape` here.
Why remove this line?
I think you can delete the errors here
I think it's still not right to make the whole `respBuf` parameter in this test.
Do we really need to modify the test to check that the file is present? I would expect that if we're not going to change anything, I'd suggest to keep the `_data_text` method in a `before_action(false)` and have a test that checks that there are no tests.
I think the `delete` should be left in `delete` instead of `delete` since we are not using the output in the output.
Is this used for anything now that this is a `private` constant?
I think this is wrong: there is no device saving WebCal-calendar in the message. The device should be the device saving WebCal-calendar or the device saving WebCal-calendar. So, you can just delete this line.
Shouldn't this be in `chromeOptions`?
I would use a better name, `InMemory.,.,.,.,.,.,.,.,.,.,.,.,`
This will be very confusing because `p.m.Unlock()` is already in a `host`, but the `host.Extension()` will return `p.m.blobs)-1` in a local `host.Lock()`
@nmittler - I wonder if we should remove this from all of our other files. It seems we have to keep all of our tests using this. I think we'll be able to remove this as it's not related to anyone using the current code base.
I'm not sure if this is the right place to add the command in `commandNotImplemented`, so I would remove this entire block.
can you remove?
why `sanitize=True`?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at block body end.
@sparrowDom I'm not sure what this means. The `private` is an `int` or `int`? It seems to me that `private` is an `int`.
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at method body end.
I don't know if this is really a good way to go, but it seems that we should add a new `src/p` module in a future module, and then just add one to the `src/p` module?
Do we still need this?
This can be simplified to `from . import ...`
this is a change in behavior, but should we add an assert here?
What do you think about `json:"notification"`?
This is a breaking change. But we don't have the `driver` property for the `name` key, so we don't really need it here.
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
@jridgewell I think we should be able to get the payment channel from a channel that is not a79 channel. I would suggest we rename it and add a new channel at the top of the function.
I don't think we should change the URL here.
this is the actual bug.
Is this change required?
This could be an `str` (and the previous one, but we can't really do it for `grpc`) as a way we can't just do this for all platforms.
`BL_id` is not the same as `BL_id` (not the same as `statement`) so you can use the same variable name here.
this change looks unrelated?
@deads2k do we really want to use sleepTicks here? Does this mean it was done for some reason?
What is this change supposed to do?
I think we can just do wlr_backend_destroy
Why not just call LoadPlainYAMLManifest
This is wrong... the method fromBuilder is called fromBuilder, and the second argument is used from the interface.
We should use `to Wrapper_READER_FETCH_BATCH_SIZE` here.
This is incorrect. I'd say `max_ts` is an instance var, not an instance.
What's the difference between grpcStubTypeName and grpcStubFunctionName? I see that there are multiple usages of this method.
Is TraceConstants needed here?
I'm not sure this will be needed. I think it's better to throw an exception when the exception is thrown.
could you also change `model_config` to a unique name, also that will make it easier to read.
Can you explain why we remove this?
why is this change needed?
Do we need `import` as its global namespace?
nit: remove the space
It seems the only place `count` is used is in the array list. I'm not sure if this is the right thing to do.
I think this line is not needed anymore, right? Also, is it not needed?
I think the `testTimeout` is already included in the `addon-storyshots` file
@bryevdv, I don't think we can do this...
This seems to be an unfortunate way of saving the `md` type. I would prefer `mdExp` to have a more proper type than `mdExp`
You don't want to use `--rpc-allow-unprotected-txs` in this context.
This change doesn't look necessary.
We can't change the `AC_CHECK_PROGS` function now, since we're using `YACC=1` in the wrong location. But then, it looks like the `YACC` function does not change the value of the `AC_CHECK_PROGS` function. We should change `AC_CHECK_PROGS` so that the `YACC` function can be removed from the list.
Is there a specific reason for this change? I don't think it should have any value.
you're still using `/admin/key_name/key_id/security_groups/`? I don't think we should be changing security group on every single file.
I believe this should be `path.replace(path.separator, ".")`?
Should be changed to use `HttpKernel\remember::getByError`
I think that the line is too long (and it is now a leftover from the commit). I don't think it's worth it, just checking myself.
why is this changed?
This is the bugfix.
This is not really important, but it should be a `force`, not an `else`.
I would not add any hmPtr here, as it's only used once
This tag is not in the "to be overridden" tag.
I'm not sure that this is the right fix. If the health is a `prometheus` I think we need to fix it.
I think you should add `ICoreLogger` to the `LogEventSink` class.
This was the only change that was needed to make it more obvious that this is used by the public APIs.
I would just do `exception_class_name` here instead of the string, but also in the docstrings for `#map`.
Why are these lines changed?
I would have expected the new config config to be set when the user doesn't specify the full config. This is not the case anymore.
Can be final?
`response` is the type, we can't use `apiClient` anymore.
(style) code indent should use tabs where possible
This is a little strange. I think the `@link` function name is misleading, since it's a public function.
The same as above. The `Delete` is just for `Settings::Array`. The `UserDelete` has a `Settings::Array` that we don't use here, so we should probably move it to `User::Array`.
why not setLocked() here ?
This will never be `running`.
why not just `ECSDataVersion = 13` ?
@jcotela is this right? I thought the idea was to only add `mutex` for `PipelineSetupServer`.
How about 'sles' instead?
Why do we need to set `False` if it's None?
Do we really need a warning? If so, can we do this in one place? What if the error was logged at the beginning of the function?
Nice. But this is a change from the config file to a change from the server. I'm not sure how I feel about that one.
This is a bit of a breaking change.
Why are we name it?
This method should be moved to `org/mocks/core/config.yml`
`get_screenshot_as_file` returns `null`, no need to check `rails::get_base_to_l`
This return statement looks unnecessary, you can remove it
Can we rename this to `JSONJSON` or something like that? `JSONJSON` sounds like it's going to be an internal struct and not a string.
struct field should be all over the place
We could just have a method on the `ReachableFiles` instance of `action` and make it `apply` directly
I'm curious: what happens if we have `Consent_apps` as a parameter?
Please remove the empty line.
This seems like something that should be done after `slots.stream()`.
I'm not a huge fan of this test. The test is not testing the `newTestPeerSource()` function. It seems that the user can get the right one and `logging`.
The following two conditions are not the same. Is the following two lines still valid, or is it a valid value?
Why change this one?
@jcotela this is the only thing I'm not sure why it's necessary to keep the version off?
>publicLink [](start = 8, length = 6) nit: The previous code would be `publicLink = Component` (or similar)
Could we add an early return for this case? To avoid the need for a specific force force to add the delete? I think it might be worth just making an explicit `JSON` field and use the `JSON_` field as a `json` field, and then just use the `JSON_` field.
I'm not sure if this interface needs to be made visible? It seems like the `ReportDeployment` interface is only for the caller. It should be renamed to something more meaningful.
Could we make a method for these?
This will not be true. We should use a default value if not specified.
I'm wondering if the `[]decode` should be a warning rather than a warning, or if we are going to decode a warning, we should not be able to decode the message.
MyResearch/Holds is probably better than a global var.
I don't think we should do this, but let's just say "use that it is not allowed" and the user will be able to see it in this function.
Why do we need to pass this as an argument? It's not a big deal but a user can use it as an attribute.
This would be better as `serializeHtml, name(..., spyAll, DBAll)`, which is used for the `list` block below.
In this case we can change the configuration to `4`, so we should make sure it's the default value.
Should this use `_bytes_property` instead of `unsupported_function`?
This test should fail if the input is a string, since the error is in the `TaskCPUMemLimit` set. I don't see the point in the assertion to check if the type is `true` in the error condition.
Why do we need to get rid of Object?
I think this could be moved into the `else` block above
why is this removed?
Is this a bug fix?
I think we should also change the test name to reflect the new `gcloud-beta-prod wrapper-latest`
I'm not sure about this one...
Why does this work for all occurrences of the `U Standard`?
This is the wrong thing to do for a few other cases, I think you should be able to remove the `externalFormat` parameter and just do `required = pExternalFormatANDROID->externalFormat == 0`
I think this change is not required?
This import can be removed from the list.
I think it is good to make a test for this
I don't see how 15 limits it to the disk. It seems like it will be more accurate to have the default value of 10, which will cause us to avoid the "range" variable in this case (e.g. when the default is zero).
I think we should add an issue here to ensure we don't get to the environment.
Style/SymbolArray: Use %i or %I for an array of symbols.
The original intention was that this test was passing, so not sure about the caller.
I think we should be able to remove this now. It should be in a separate PR.
if we have a copy of the list, it will be cleaner if it was a copy of the list
I think close listener is redundant, since the listener is not closed.
why are these being changed?
You should not use `.dup` here.
This looks like a bug
Why do we need to wait for `Add` and `Unlock` to be set to a pointer to the same value? If `len(s.clients) <= s.opts.MaxConn` will return ok, so I think this should work.
I'm not sure how `client_` works when `itself` is true.
Do we really want this in the public API? I guess this is not the case anymore.
I think these two lines are unneeded.
I think this is wrong. It is not enough to have a `Application<Wireguard.EncryptHostTraffic` if `KubernetesProvider == config.ProviderAKS && c.RouteSource == "top"` so it will always be true.
`get()` is not used in this function.
Can probably add a space between the `,` and `(`? (Or maybe the `,` before)
This is not necessary. If the default is false, the `auto_fire` is undefined.
`MESSAGE_TRADE` is now an integer.
This should be `&split[0]`
Why was this removed?
Why the change here? The only thing you're calling it is `tree` but the `tree` is the name.
I am not sure this will work on all cells. Can we just use the actual cell instead of the second time?
I wonder if we should use clear_hashed_changesets here.
I think we need an example here to make sure that the license is a valid license.
So this will be called when the attributes are added? I'm not sure if it is a good idea to change the logic of a different approach than the job.
Does this change the old signature?
I'm not sure about this being `create(:diary_comment)`? I'm wondering if it would work better if we just made `diary_comment` a `Set`.
BuilderForRuntask(...) returns error, why do you need to set a copy?
why do we need to use `pip.close()` here?
Note that the REQUEST_REQUEST is a valid scope of this method, so I'm not sure if the password is an AMP request is a valid scope.
I don't think we need this. If we're going to use `o.LameDuckDuration = ...` on the server side, I don't think we want to add `Await` to `o.Lame_duck_duration` to the server.
This will break on older versions
I am a bit concerned about adding the Widgets to the Widget's name. Maybe it would be better to just call Widgets in Widget to avoid the call site?
I think this should be done after the if statement above to avoid the possibility of getting the meta.
I don't think this is the right change. I would have expected it to be a valid path, not a `null` value.
NIT: this one should be in the `component.js` file
I think this is a bit confusing, why is `if (true)` necessary?
I don't like that it is in my PR. I am going to make sure it's only here for a single PR.
wrong import order
It looks like this is a breaking change. Can't we just add it to the `compute` class?
This is not right. `!applyPreflightCorsResponse(resp)` could call `allowAllCorsActions`.
I don't like this. We have to do a rebase, just like we do for the logging.
This should probably be `pants.version` and then the `fields` is missing.
@mhoemmen why is the `info` and not `finest` here?
Is this unused?
This should be just `err hasher.Write([]byte(suffix))`. Otherwise the error will not be returned
If we're going to make this an interface for everyone, we should make a method that has the same interface as the interface itself. We should make sure to do it for the interface as well.
We don't use `Bolt::Node::Success` anymore, as it's a result, which can be the result itself.
I'm not sure if this is actually necessary, because it is used internally in `api_group`.
I would use a `100`, it's more clear what's the difference between these two
The name `HardKiller` is misleading because it's the default.
This should be `sizeof(i)`
this was the only usage of this file. It was an API break because we've moved it out of the interface
This should probably be `std::find(m_child_layers.begin(), ...);`. The `has_activations()` function is called twice.
what happens when the template has been changed? I don't see any code that does it.
why remove 'stderr' ?
This is a bit of an important change, but the logic here seems weird.
Can you add a check here that the code is actually not actually actually occur in Windows? I would expect the code to be able to be checked before setting the `SinceSinceAllDB` to `false` in Windows.
This doesn't look correct
This `Filters` will break the rebase. You should also add `Filters = yarpc.Filters{`
why is string.encode?
I think that we should keep the logger, and remove the logger.
This is a change in behavior. We need to do some validation that the service uses `logic` in the context.
Does it mean that the enum value will never be empty?
Please move this to `brainz` package.
I think it should default to 0, to keep the API simple.
I don't think the other ifs are needed.
you don't need to pass a `key_parts` variable. It will be used only once
I would use `$this->getDataSource()` instead of adding the variable. It is also easier to read if the variable is called `if (!empty($set)`. It's not a problem and I wouldn't be able to call the method from the variable.
Where is the test environment being created?
Is there a reason to change this?
why this change?
I think this is not the only place `query.selectedInclusively()` used to handle paths in the `getServer`, which will only ever be used for paths in the `getServer` query.
I'm not sure if it's better to use the `statements` type in the constructor. It's not the expected behavior as we already have a `statements` type in the `init` type. It would be good to do this for the parser parser to be a `*` or `^[int]` in case we want to have the `--statements` attribute in the constructor, since we don't need to worry about it.
I'm not sure what the right thing to do, but why is this part of the record record record created in this case?
This should be `DropVXLANPacketsFromWorkloads` to be consistent with other config options. The `PIPPacketsFromWorkloads` should be fine, but I'd like to see the same thing here.
We can remove the `io.prestosql.sql.UninitializedConfig.RemoveTransaction(...)` method here because we don't need the `removeTransaction` method anymore anymore (and it will be the same if we do not remove the "remove" in `io.prestosql.sqlConfig.RemoveTransaction(...);`)
Why? Is it always guaranteed that interest will always be returned by the production?
can you make this a `bool`?
I would use something like `@property` or something, for instance variable.
This needs to be `if not X, Y`
This should probably be a separate PR, I'm not sure why this is a good thing. It should be a separate PR and if we should have a different PR.
Why not `final` for private?
Nit: "Missing any documentation in "%s" -> "missing-any-param-doc", "the parameter and/or type documentation."
nit: I would prefer `LINQ` over `SIMD`.
I think we should only do this if `options` is present. This means that `options` will be present when `+c:options` is present in the `options` block.
I think you need to add a call to save the `wlr_layer_surface` call before the `while`. The `while` will only be set for the first half.
`return this.driver()['loadExtension'](path);` Should we do `return this.driver()['loadExtension'](path);` here instead of `return this.driver()['loadExtension']`
is it possible to add the `buildLabel` package to the `target1` package?
This is a bit weird, we are not having a size of the size of the size of the size of the integer. We should be looking for the size of a number and then the size of the buffer in a single string.
`Query_search_results` is used in this function and the query method, it will be able to use a `world_controller_params` method. That is, the query method should be removed and the query method should be removed.
This test case is out of sync with the `rescue Beaker::DSL::Assertions` block. I don't know if we should use `rescue Beaker::DSL::Assertions, Minitest::Assertion`, but that's not the case.
This is a function that needs to be renamed to be able to be passed in as a function.
Why is this change required?
why did you change this?
Isn't there a possibility that you want to use this file directly?
Why `selection_specs` instead of `selection_specs` ?
I think we should use `com.tuples.output` for this. We should probably have an `a_number` or a `describes` for the `numeric` to work.
This is good. You can check `.content` before creating the `.format` without the empty content.
Not sure if we should set it to false in dynamo_exited_synched. I don't know much about it, but if it's not a good idea, just add it to the dynamo_exited_synched case.
What if the user explicitly specified `#if null`? This is fine, but I guess it will be hard to debug.
I don't understand the reasoning behind this change. Why the change from `Long` to `Long`?
I guess we should use `using this as the `<<-SQL` constant instead
Should this be conditional on line 118?
This is a regression. The s3a://' will be set to `false`, right?
This line should be called before `pushObject` (the `fetchPrivate()` function is called) but not after the `fetch` call.
is the check still necessary? If not, we should probably be checking for the value
This include block shouldn't be in the `#include`
Layout/TrailingWhitespace: Trailing whitespace detected.
I think this file is not related to app/lib/twitter_digits.rb but app/lib/twitter_digits.rb isn't a good name for it.
(style) line over 80 characters
Let's add the new parameter to the repo so we can easily change these.
This is unused now
I think we may need a better place for this. I am a bit concerned about this change as the res.Body is not always going to be nil and it's not a user's set.
Can you use a positive condition to test the behavior when `query` is `null`?
nit: I'd suggest to use the `c.LockmassTolerance`.
I'm not sure we need to use a valid value here.
For consistency with the existing `slots` package, we should use `count()` to avoid the habit of using the slot.
Do you have any ideas for this?
I'm not seeing where this field was used. I think we should just remove it.
It is not clear to me why we need a type to this. I would prefer the type of `l`. Same for the others below
Can we move this to a constant?
I wonder if we should be more specific and check for the return value instead of using the component?
Why is the parameter `0, null` removed from the `indices`? If so then this would need an `int`
I'm not sure we should use `logger.info` here? I don't see the point of the `update()` call.
You should add an empty `esc_at` field here to be consistent with the other methods.
move this up there
You should be able to get rid of the empty line here.
I think the compiler is better than making this a `before_action`, so that the default value is `false`.
Is the `long` needed here?
Please add a JIRA to track this issue.
This is now done by the `InvariantCulture` interface and we're not doing that.
Is this line necessary or was it just wrong before?
Is this a bug fix?
I assume this means that you will get an "Extract" environment now.
@Pearl1594 can you confirm if the pathParam can be empty ?
nice! The return type of `owner` will return `true` when `owner` is `false`.
This is not really correct as `@Internal` can also be used in the constructor
This will be hard to see in a different PR.
Is it expected? I'm assuming it's the same user that has `-1` and `-0`?
I guess you should add `self.has_binary` to `form_meta` as well?
I don't see this change in this PR, but it's not a good idea to remove it and just do this in a different patch.
The property is not defined here
shouldn't this be in the view?
Do you really need this function? I don't see it used elsewhere, just wanted to double-check.
This should not be `dag_file_exists`
why is this change necessary?
is it possible to use the `*` here?
Should this be a `str` instead?
This is a breaking change for the ASTAttribute constructor to not change the AST attribute. The `updated` field can be made private to a `ASTAttribute` instance. I think we should keep that private.
I'm not sure this was the right fix - we can't remove any of these code. If we are removing it, we should probably remove the `InitCodeNode` parameter from the function.
I don't think you need a new splitTableRegion. If the table is empty, it will show an error. The new split table should not be splitTableRegion.
Can we use the new one instead?
can we make this an Optional[str] and then call it `== block block %d.getAll()` ?
Unfortunately we don't have to keep the old Exception. I don't think we should be able to remove the old `Exception` here.
Remove unnecessary newline or all files.
We have a `PGP_MIME` property. Is this what you wanted?
remove empty line
Why are we not using a macro for this?
For the record: we should be able to remove this now.
I think `findElements` will return `null` if there are no `Element`s.
You could also replace all these `password`s with `"".NewName(String)`, `data-based`.
Please remove the description.
please add "dict" after freezing.
this error is not correct.
I think the log message is more accurate. The whole thing is fine.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
why do you make this change?
I don't understand how this is used. It's an existing object, but it's an existing object, so I'd keep it.
Maybe rename to `tree`, and rename `tree` to `matcher`.
@cramforce do we also want to delete the entire `appId`?
I think you should be able to use the same plugin name for the same plugin? (same for other similar instances)
Can we make this Solr? It's used in a few places, and it's used in the `job-config.yml` API, and also in other places, we may need to rename this to `job-config.yml`
`if value.pivot` is an object, not a `map`
Line is too long. [81/80]
I think it should be `hideOnTouch`, not `build`.
This is the only change that affects the null check. I'd rather see `UpdateSpan` inside an `if (scope != null &&scope.Span != null)` so this doesn't break.
nit: can we rename this to `Conversion<string>`
This shouldn't be set.
This should be moved into the next `createSenderResources` call.
Why the change? The `dtdg.co` prefix is a `BFAF` option.
This `<returns>` doesn't seem to have side effects in this method. Can we change it to `<Domain>` instead of `internal`? `<returns>` is only used by the API, so we don't need the `<Async>` property.
I'm not sure if this is the best way to test the tests?
The same issue in the other if-else blocks.
You can use `string\LastID` since we're here already.
nit: it might be best to rename this method to something more descriptive like `return` or something. But just to be clear what's the intention here.
This test needs to be reverted.
Why not just remove the default `errors` package?
This change is unrelated to the PR?
I'm not sure why you wouldn't use "removeAttacked" as it would always be false for attackedSet. This would mean it is true for attackedSet that is not a list of attacked and is not a list of attacked. Also, why is this not simply a "removeAttacked" of attackedSet?
Is `module.` at the end of the line necessary here? If so, then `module.exports` is just a variable
I would not add this because we want `scripts` to be `IN`
Shouldn't this be done in `driver()` ?
This interface is not used anymore.
Do we need to check for `missing_text` here as well?
Should be `// );`.
This file should be reverted. You can replace `WordStream` with `element.WordStream(WordIO.class).toStream(src[], "WordStream"),`
I'm not sure this is the best approach. I'm not sure if this test should pass, and if so should be `get_global_operations` or something else, that's how it should work.
I think it's better to use `m.Get("/constants.py", func())` instead of adding `m.Get()` here.
These should be done in the `dispatch()` function.
I don't think the 6 is a good idea to change this. I think we should change the number of arguments to be 3, not 6.
Should we add an `if` to the interface instead of adding a new one?
I think we should add a check to ensure that we expect a 413 to be the same as the first 413 (which is the same as the last 413)
could be better explained now, but if this is just a cleanup, you can do `return "~/Applications/Firefox.app/Contents/...`
I'm not sure if this is the right thing to do - but I think this is a bit of a tricky. Can't we just use `serviceDefinition.Host?.EqualsIgnoreCase(..)` for consistency?
The node name should be `pool_pool`
I think we can remove this Dunk.
I guess we should keep this test history in place. This will break the history history.
why not keep the same pattern forkind?
The parameter `AppDomainFixedOutput` is now unused.
I'm curious why it's necessary to change the `AWS IAM` type to `object`?
why is this being made public?
Is the `make codegen` used anywhere?
I would prefer a simple name. `upperCamel` returns an enum of the name of the api.
Can we remove all these `!` changes in this file? We're trying to avoid that in the future
`storageclass-` is a pretty strong thing for the `Core_` directory. It is not the case of the replica class.
Since this is used in other files, should we add a TODO to move the logic to this file as well? This is not really a part of this PR but if it is not related to the change, I'm ok with you.
Why not use a `inUUID`?
I don't think that this should be part of the public API, since it's the actual purpose.
I don't think this is necessary, since we only have `HttpServerResponse` in front of the API server.
I don't think we should use private private `config_path` from the config file, since it's not a dict.
I'd rather have the common code be `flattenedTree`, and then use the `iframe` instead.
I think this method can be removed as `addConfigs` is no longer used.
What does "in this value" mean here?
This import is repeated 3 times.
Do you have any idea what's the difference between this and the previous `isNonNullableReturnType` check? Shouldn't we check the user's default and set the default if not set?
Can you add this in the `spawn.h` file, so that we can remove this from `netinet/in.h`?
This is not the best approach for this function. If we do want to always have the `time` resource, we could have a separate `pa` function in the `off` package that can either have it as a part of the `time.Deleted` function or return a bool or a `time.go`.
Would it make sense to move this to a different file?
This will fail in the `build` case because the options could be `null` in the message instead of `options.beforeHandshake`.
It would be great if to make this a function. Seem OK to have a function called `Apply`
Why does this one one need to check for `identifier` and `k`?
I think this would better be `if full_parent_name != 'composite_root/root/':` as it will always have a composite root parent, and it's not really a composite root parent.
Should we move this to `service/main`?
Why not use `Zero` to specify which type is considered negative?
What does it mean for the error message?
@mattcaswell, the 'if' is not correct here...
I believe this was a bug
I think it should be called `Thresholds` or `ThresholdThreshold` to be consistent with other tests
why is this changed?
This should probably be a separate PR to replace `struct calico_nat_dest *nat_dest` with the new `nat_dest`
`Image` is used only once. `gradlew` is used for both main and main
algod import is never necessary.
Please remove this.
This should be `patternKind`
This is not really a valid change.
This is the only place that needs to be `nil` but the `(data) == 0` check below.
@martin-john this is probably a good change.
I don't think you need this method anymore?
Use `contain` instead of `contain`
To keep things much more expensive to have a `LowestInsertedHeader` arg here, it should be `syncConfig.PivotNumberParsed`, and then `LowestInsertedHeader` will be `nil` if there's a `syncConfig.PivotNumberParsed`
Please add `private FakeApp` class to `TimestampApp`
This line should not be removed.
Why is this removed?
so the changes in this file are unrelated to the PR?
Nit: this import is unused.
This should be `int`. The message should match the type.
It is not clear to me why we have both `Cancellation` and `Millisecond` in the same way that we have the default `1 * time.Millisecond` in both places and where the value is used. WDYT?
This file has no effect?
chainID is a good name - this is an option to use in this case?
`else if` is not used in the button
Why are these two defined?
This is just a small fix.
I don't see the BuildIDOSEnv           being used anywhere, is it a typo?
I think this might make more sense as "has started _all_ started (which we want to show up in the case of an error message). What happens if you run the test with the same name as the test?
Is this needed?
I don't think the `/` should be here?
This doesn't appear to be used anymore
Please remove this line
Why are these `public` needed?
is there any way to avoid the new data?
I think we should also check for this in the `envCfg` table
this will be called before the `Tracer` function has been called, no?
@becker33 What about the other tests? I'm not very familiar with the rest of the code and I think we should be more explicit about whether the tests are actually using the `self.assert_eq(kidx, pidx)` or not.
Is the change from `String` to `String` the old behavior, and the new one on `NodeResponse` is the actual fix?
Why is this not the first two lines removed?
This is probably not right. We should be using `cleanup` in `klog.Infof` as a lock, not just an `is`. This will be a bit more descriptive.
Why not use `string $message, Exception $previous = null`?
I think `maxMessageQueueDuration` and `maxPeeraggeraggerDuration` might be better?
@mmaxim do we want this to default to true for all commands?
I think this is the bug fix. If I am not wrong, the `executorService.shutdownNow()` call will still be called if the shutdown is not found. In the end you can just call `shutdown` and you can call `close(executorService.shutdown())`.
`new HiveConf(HiveMetastoreTest.class)` is the same as `HiveMetastoreTest.hiveConf()` above
we can probably get protocol to be very dangerous.
Is the variable `HiveTable` used somewhere?
@adamjstewart I don't think the message is correct, the "fail" should be set to zero by the user, not the X. But I don't think that's a good idea.
@bparees this was the fix for the fix in `False` as it was before
This will be a separate change for the fix. You're using the code to handle a memory only.
Is this needed ?
How is this import related to the PR?
Is there a reason to not make these package-private?
What's the purpose of this timeout? Is it the correct write timeout for the `maxBufferedBytes` timeout?
I'm wondering if this should also be called `prev[]`
I don't like using this import as it is only used in the end, so you need to keep the imports at the top of the file.
Should the wlr log be logged on log level?
I think this was a bug in master, right?
Line is too long. [85/80]
I think this should be `volatileList<?>`
please put these separately in alphabetical order
I think we also need to use the `pulumi up` constant here because `tg` is `0` so the `0` is a special case (since it's a special case in eth)?
We need the Clump in all the tests too, right?
Is the idea to remove the `config.ControllerManagerConfigurationSpec` member field from config.cs?
This is a bit confusing, if a user has `go` and `go` they should probably just be `go . .` or `go . . .`
This is a bit odd, we're already ignoring the `&&` fields.
Why are you moving this file here? I'm assuming it's not used anywhere.
Please update the lambda `DiskGroup`
Can we use `org.mule.runtime.module.extension.extension.extension.extension.extension.extension.extension.extension.extension.extension`?
So if you change the commit to `editor.apply()` you removed the commit?
Is `!` needed?
Use relative imports.
`Math.size()` is the same as `Math.isIn(null, byte[] )` I think?
At first glance we should avoid passing `clip` by an `int` here, because `lidx` can't be `None`.
Why this change?
why do you need this change?
I am not convinced about the ` #{quiet_o` class being used anywhere else.
I don't think this is used anywhere?
I would prefer if this was `query_args.append('versionId=%s', 'versionId_=%s')` but the value was `query_args.append('versionId=%s')`. I think it would be cleaner (especially as this would be `query_args.append(versionId=%s)`.
@lannka I'm not sure this change will cause the problem with the tests.
This file should probably be moved to the top of the file since it's only used in the file system
Is there a particular reason for adding `self.name`? It seems like this is a ` AtomicInteger` value that we don't need.
This variable should not be set in this case
I'm not a big fan of changing this to work in the future. Can you explain the difference between these two?
I'd rather we disable this file in a future PR.
Is this really necessary? It doesn't work with Beam, right?
I don't see the reason to remove the `mov` tag here. I think it's not a big deal. The `deadill` value is still a valid slot, so I'm not sure why. If you still want to keep that, let's remove it entirely.
This is the main change. Is there a reason why this was changed?
this is what we want to test: - `spec/controllers/controllers_test_color_enabled/map` - `spec/controllers_test.rb_color/map`
This should use `coincash.toAddress()` and `coincash.toAddress()` instead.
Can you add an example here for a non-setting mode?
I don't think we need to do this - we can just call it before `Stream.cancel()` and pass it as a static `im imported interface`. We could also just call `im imported` and remove the `Stream.cancel() interface` in `Admin::create`.
Can you add a `isEmpty()` check here, in `cart.isNullOrEmpty()`?
Why not just do `LITERAL_FIELD.get(leaf)` and then you can do `Date.get(Date)` here?
This test was not working. It was only here before, and not here because it was a no-op. I don't see how `Test` was being called.
I'm not sure about this change, but this change is still correct as it is not needed. The `package` package is used as a `_` field, but that is not used. The `101POST ` is used as a `_` field in this file. If we're not using it anymore, let's remove this field.
I think it would be cleaner to use `assertEqual()` and `assertIn` only when the test is actually executed, and then check if it was `nil` in the output.
I'd prefer if we could get rid of this, since this is a public API and it will be re-used later.
Why is this not an error? The `rContext` should only be configured if the `timeout` is `nil`.
We can remove the `Block` prefix.
It is better to use the full `features` variable in the tests, as that will be the same as the default in the tests.
This method should go before the call to `matchWithNoTerms`.
I wonder if it makes sense to use a more descriptive name for this instead of using the `parseChecks` function?
`update_policy` should already take `incoming` parameter and be added to the method call `set_dir`
Do we have any concerns with the other approaches like this? I would expect this is the other way to go, and it's not the same as we're adding to the window.
can we call `props.selector` directly?
Why not just check for `true` instead of using `?? false`?
Is the corresponding change here needed?
Question: why doesn't this mean we won't need to define # coding: utf-8 #Resolved
I'm not sure if this is the right place to put it here - it looks like we don't do anything wrong with it?
why is this one needed?
I'm assuming this was just a bug? (I'm guessing it was before?)
I don't think we can have this constant for this, but I think it's better to be more explicit
why did this test have to change? It's not a test, but in a test.
Why is this needed?
Do we need to do anything else here? I would say we could do it in a followup PR, which I'm not sure what's going on with.
I don't like this name. I think it's a little better.
Need to explain why it is not "validation sets", but what is it used for?
@QilongTang do you know why the class is renamed as well?
Metrics/LineLength: Line is too long. [87/80]
I think we should just make this a function, and make it an abstract property that has the same signature.
This is a bit of an unrelated note but I'm fine with it, but just wondering if we can move this to a different file. I'd prefer the `hack/develop/src/main/java` as it's a different file (and not a different one for the others in this PR) and then just `hack/develop/java` and `hack/test-java` in the future.
Shouldn't this be `!model.schema.base.options.strictPopulate == false && options.strictPopulate == null`?
I think we should be using the same `Builders.Build.A` class here. We don't want the same logic for all `Build.A` methods, right?
If you are going to be looking at ` preserve_backslash`, I don't think you need to add any special handling for the string here.
This is a breaking change, but it doesn't look correct.
I think you should not be checking the expected expected reader here. This is only used in `InterpreterManifests`, so the function name doesn't matter.
This is a bug fix.
Why is this import needed?
why not make this a separate issue for the bug you introduced in this PR?
should be a single boolean
Nit, I would use string concatenation like `type name:`
Is it possible to get away from this?
I would suggest to add a tabolations_tablename to the list of violation. This will be a bit more expensive and less confusing when reading the code from the list of pylint values.
what if we called this `ExerciseWithProgressQuery` ?
this is an interesting case.
This needs to be revisited for a model.
I think we can just change this to be consistent with the other ones and not change the default behavior.
I think we don't have the same short version as `false`. Shouldn't these be `false`? Also, why did we remove these?
Not sure what the best solution is for
I think it's better to leave this as a message and avoid the `None` part.
Please use the same naming of the cli-input-yaml definition for this.
This is a breaking change and will be unrelated to this PR. The issue is that if ` DoSend` fails, this is going to fail.
please put the import in the `TODO`
Can we just use `ImmutableList.RuntimeException` instead of `local`?
Can we just make this `msg.Data`?
This doesn't need to check `len(country) == 0` any more.
Does it mean the QSignalMapper has already been defined in the QV1?
Please add a check that stopGPGAgent is called before base.
`public static final`? The package is already `protostuff.runtime.model`.
The reason isn't being passed to this method so I tried to keep track of what the `user` does.
This class should not be used in the `Catalog` table, right?
Shouldn't we do the `data` on `shared::wrap` too? This way it is not always going to be used as a list of bytes
I'm not sure why you did this... It's not clear to me why we wouldn't be using the type of the hash. I would say it was a `list`.
We should add an error message here, as we already know the message that is not set
`s/topologyDriver/AddPeer/` is a good name. It's probably worth making the code more general.
This is an unrelated bug fix. This is a bug fix.
should be `<no name --cache>`
no need for this check?
This method should probably return `null` for `fixedWidthBinaryBatchReader`.
`Content-Type` might be clearer.
Shouldn't this also be `_pin`?
This will only ever be used if the ID is `/class`, which is why I wanted to make it a constant?
I think this import is unused, please remove it
This is the same as `getReference`, I'm not sure.
@erwinmombay PTAL this part.
Is this file still needed?
Does virtualTree need an update?
I'd prefer `*` over `mdcache.Delete`
I don't think that we should handle both cases.
Is there a reason why we're not just passing the whole config directly instead of passing a `config` directly in `nil`? It would be nice to pass a `nil` value to `config` so that the `Config` call is not actually needed at all.
Can't this be a `currentPlayer`?
Use an `404` method for multiline lambdas.
I think we should make this a global constant.
I think this should be `warn` and not `warn`
`goldenRetriever` is a `const` so we can use `core` instead of `analytics` to determine whether or not to use the `GoldenRetriever` or `goldenRetriever`.
You can make this a const, it's not used anywhere else.
I wonder if there should be something like `if err := nil {`?
This should be in a separate PR
Style/PercentLiteralDelimiters: %w-literals should be delimited by ( and ).<br>Layout/SpaceInsideHashLiteralDelimiters: Space inside { missing.<br>Layout/SpaceInsideHashLiteralDelimiters: Do not use spaces inside } missing.
can we make it clear that this is a ternary?
I am not sure we need to have an `http` here. In `client-go` we can also get rid of the `if` statement, and then use `client-go` as the default (the default is `req-slice`) and then you can get `pkg/util/slice` from `client-go` to `client-go`.
This one should be fine to keep. The `!=` is not needed.
I think you forgot to add `toJSON`
Why do we set NULL here?
This class seems to be unused
Do you want to add `.` at the end of the sentence?
This change should be reverted. We only need two `SERCOM0_USART`, and it's not used in this scope. The `SERCOM0_USART` method is already used by the `policy` package.
@zcbenz is this change correct?
I think this should happen after a transaction (which will be sent in the `binding` method, since it will be used once per transaction).
This test is not needed anymore, right?
I'm wondering why `AssertEx` isn't just `importPeptideSearchDlg.CurrentPage == ImportPeptideSearchDlg.Pages.match_modifications_page`
I don't see this being used anywhere. Can you explain why we need this change? It's used in `service/service/service/config.yml` and in `service/service/config.yml`.
What's the reason for this change?
should be a TODO?
Why this change? I thought the only change we want this to be the actual test was to ensure the test fails and we don't have to reconfigure it. If we're going to do this now, we can just remove the test.
I would add a note to the docstrings that it gets updated in the middle of the size.
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
I think it's better to use a record.
This method should be private
I think we should move this to the `connDoc` package
I'd prefer to not add a default value here.
Why is there no such a list comprehension?
Maybe we should check if it's not identify before it's populated?
Why are we doing this here?
I'd prefer we don't want to have a test for this, but I think this is a breaking change.
Is there a way for us to use ``conf.l2types.get(type(p), None)`?
The name should be "sourceNames" (and the trigger on the other side) and "sourceNames" (or whatever).
This should be just `lvis_v1_instance.py` right?
I would put `<th>` before the stdlib imports so that it is not a part of the stdlib as we don't have "hi".
Why is this needed?
I think you can remove this instance
`-1` isn't needed here. `total_instrs < 1` will be enough.
Can we get rid of these types types too please?
I think this is the right solution. `this.getParentSvg()` is called twice, so the code is in `skipParentParentvg()` and `this.getInverseScreenCTM()` is called before the base path is created.
Why do we need a hard-coded value for the default value? Shouldn't it be enough to add the default value?
I'm not sure why we need the wit here. It seems it would be a good idea to keep it around as it is. If we don't have any other code coverage for that, why?
Is there a way to test the user?
It's not clear to me what the problem is with this, but why are we using `LicenseAdmin` in our `spec/features/features/` instead of `pre_features/`?
What if we made a function for this and use it in a struct instead of a hard-coded string?
Nit: Can we have a test for this?
The test here is not needed since it is already testing the same directory.
Why are we returning bool here?
Do not use the shorthand for $aliases. See if (!\is_array()) {
@mmaxim do you remember why you removed the old one?
I'm not sure if this is needed anymore. The only way we can handle the case where `webservice.ListEventsRequest` is set would be `nil`. We're only passing in a `ListEvents` field to get the result of the context.
this test is a bit of a big deal as it will be testing the sqlcipher version, not thecipher.
I'm not sure how to handle this. The only thing I'm worried is that if a user doesn't specify a build, they will be able to see their build. If so, it would be good to have a different log command that sets the build to a very long value. The build will fail and then the build will not be sent in the build. I think you can remove this and just add a message to the build process if the build fails.
I don't think you should use `_url` for this. It's not a function.
I would prefer if it is a global variable. In particular, the code is a bit misleading. I would expect `unresponsiveTimeout == 10`. What do you think?
I am not sure what the intention is here is. It means that if a user uses the current node and the node will be 0 then the node will be zero.
I don't see any new code using this, are we using the old version instead?
I'm not sure we should change the name here, maybe we should just change it?
Surrounding space missing for operator '+'.
This is unrelated to the PR.
Don't need the `subscribers_` here since it's not used in the `data_discovery_count_` function.
Why this include? I don't think the headers are needed.
Wow, so you could get the same form as `JETPACK__('foo', 'foo')` instead of repeating it as the first string.
This is not used.
Just curious, why do we need the onCompletedCalled here?
The changes in this file should be reverted now.
Should it be `_` instead?
This is a bit of a nit, but would it be worth adding an enum value to the `torch.sql.sql.sql-2.0` instead?
nit: Since this is only used in one test, I would prefer it be `iframes.html, either the test doesn't need to be in this test file or the one in the test.
you don't need the `ProviderContainer` here, just do this for all other classes.
In theory, we should be able to use `events.views.js` here. I think this can be improved.
This should be done with `ax.rames()`.
I think it's better to use `self._bump_and_store_timestamp` here, as its a timestamp in `self.bump_and_store_timestamp`
I see that `MemoryDiagnoser` also used in the tests, so why not just remove it?
I'd rather have a `utils.getValue(arg, doc)` that returns the path, then do the if condition in `settings.getValue`
This was not related to the PR.
Can you remove this and add all other packages to the new ones? It's only used by `protobuf#JSON`, not here.
`paych` is the correct name.
The `StringValue` should be removed.
This seems unused
`prefixAsNibbles` is always `2.2`. Can you use `HashLength` instead?
why was this removed?
This is not a NullPointerException. It should be "NullPointerException", but I would use the variable instead of "NullPointerException", which is the default for "NullPointerException".
I would also say that this namespace can be removed now, right?
This change is not necessary.
I would prefer to remove this line. The log messages are the same, so that they are not really needed (e.g. `info(...)`).
I think this can just be `../../core/Utils` since it's not part of the API
nit: `isHydrating` -> `isHydrating`
Nitpick: It would be nice if we could get rid of this line.
You can use copy copy as the latter
Can we do this in a `setUp()` method instead of making it a `setUp()` method? I think it should have a `SetUp()` method that returns a boolean and not a `SetUp()`.
Please add a blank line after this one.
If it's a `map[constants.uint64]` then we need to do this in the `EnableProcessBlockStats` too.
why remove it? Isn't it a test_reporter or does it need to be set in the `test_reporter` block in place of `test_reporter`?
We don't do that anymore. This should be a `.init`
Can we move this file into `axe/`? It's not used anywhere.
`super()` is a better name for this class. In this case, it's not clear how `unsynchronizedStaticMessageDigestRule` could be used and also also `unsynchronizedStaticFormatterRule()`. It's just `MessageDigestRule` and `FormatterRule` should also be used as a static class.
I don't understand why it's needed to have this `Keccak` property. It does not make sense to have a `soft` property.
This should be a property.
This should be added to the top of the file, otherwise we would need to fix this in the future.
why did you remove the file name? I think the file name was not working correctly. It is used only in `io.prestosql.plugin.config.BlockCache()`
`map` is the same as `m` right? I think it would be better to just be passing `m.map` as a type of object and then use the type to `mod`.
This is not a `final` but a `CloseResource` is missing.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
It would be good to have a unit test that checks whether the verb was run, and that the verb isn't actually present.
Revert this one
This function is unused.
Is this a good change? Is the behavior change?
Is this a breaking change?
Please use `if (accountsInOrder != -1)` here and in the other similar methods
I'm a bit confused as to why this change was necessary?
I think it would be better to pass the other arguments here instead of passing the empty array.
I'd like to see a more specific way to do this, but maybe better to make it explicit and return the current op for the op and let the op be an error instead of checking it in a context?
Is `parent_id` not `parent_id`?
I think it's better to remove the `=` part of the type.
I think we don't need this check, it's already in `setupDev`. We already have the mount in `Config.Mounts`. The GA part is already pretty hard to understand if the mount is in `pkg/common/api/dev.go` and `pkg/common/api/dev.go`, but it's a different thing to do.
We have an issue to add a note to help that the default help doesn't match the `config` option.
receiver and issuer are not used?
should we add the `s3` to all cases of these too?
This should also be moved to `baseIntrinsicGas`. The reason is that `MaxUint64-baseIntrinsicGas` has a `*` value, so that it is not set by `true`.
I'm not sure if this is the right choice of the `MINUTES.new` module?
Shouldn't we use the same name for `nullability` here?
The `cs.dirty.CAS(3, 2)` was the bug.
please update the doc accordingly
remove unused import
Why is this typeWidth? Why do you need it?
I think it should use `encryption<? size,3}` to make it more obvious what the reference is
@jcotela is this what you have in mind? I would have expected this to be the same as the `ifeq ($(llvm_version),7.0.0)`, right?
why remove this?
I wonder if we shouldn't have a default `proto, ok := config.Consensus[protocol.ConsensusCurrentVersion]` in this case? Or is it not possible to set it in the `!ok` case?
Does this mean we can't use it in this PR?
I think it would be cleaner to just use `string errorMessage = String.Format`.
I think it's best to add a `ExecutorService` to the `IdentityRegistry`
Why are u using vmultiplier here instead of passing in null to the new format?
Is this change required?
This one is the wrong place to remove this.
I don't think it is necessary to use the `Reactive` and `vice`.
Do we still have a `string`?
Why are we adding this?
This code was removed.
You can use `WPSEO_CR_Missing` to get the right value here.
This is not the right way to do it. If we do want to have an enum of a different type of type `DataType` then it will never be empty
It seems to me like the `render` should never be provided, right?
I think this is fine but I think you can just change this to `d ErrOverflow` and add the `dAssert` suffix here, as it is in the `saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/saleor/dunderstood/saleor/sale
I think it would be better to have `getResourceType` and `getResourceReference` and `getResource` call that directly. It would also allow `geteconfig` to be the correct type.
This is wrong, the `else` will not be needed anymore.
This would be better as a combat parameter, but that would mean that it is used only in the first part of the test.
This was removed, and I don't see it in POD
I'm confused why we were using relative import here. We don't do that for all of our functions, because it's not used much. The MIB was used for python-sty of dag, but it's not used anymore. If we do, then this can just be removed from dagster.seven.abc as well.
`Sdk` is unused.
This seems like something that could be a `nil` check. Is this something we can do with the right approach or should we do?
The requirement should be the main library. We don't use the library here.
I think it's worth it to use the serviceAccountTokenCreator constant here, instead of hardcoding it in `ROLES_CLIENT`.
We try to avoid import *
should we remove this completely?
We need to import github.
I'm not sure this is the correct fix. If it is correct it will cause the page to be sent even in the current URL. If it's safe to make it so that it doesn't change at all, then it will be always going to make sure it doesn't work. I would like to see this change there.
I don't think the code here is correct.
Is there a specific reason for removing from org.mortbay.util and mortZ_HEADER_PROBLEM too?
The `executeCommand` command should be renamed to `executeexecuteexecute`, as it will be removed entirely.
This is a change in behavior. If we want to be able to run a status code with status code on error, we should not be calling this here.
Line is too long. [81/80]
`#3307: unimplemented` -> `# mangling cases in`
I think this is a bit of overkill. I would have used the interface "name" and "Value" and "none" instead.
I don't understand that `bytes` is a list of bytes, so I would prefer to use `Array.fromhex(pubkey_hex, pubkey_deriv_info, pubkey_hex)` instead of using `bytes.fromhex(...)`
What does it mean? Can it be a property?
This should be removed. We do not want the if check.
Is this change necessary?
Can you make this one `ScopeListener.setScope()` ?
This test case needs to be reverted. The `refs` is never used in the `old` and `old` methods can be removed (and the `refs` is never used)
I'm not sure about this change. I think it's worth making the change in a PR.
The only difference here is that the `optionalViewModelCache` is only used once, not when we call `Resolve` inside the `IMvxChildViewModelCache`, and when we call `Resolve` inside it, it is just `Mvx` and not `Mvx.Resolve`.
Please don't make `exc_info` raise an exception here.
This file is not in the main file, it's better for the `mux` package to be in the main file
These are unused imports. Please revert them.
I'm not sure if the use of the `System.out` here will be necessary. The `System.out` will be the source of the `esc_Token` and `//` will not contain all the other `object`.
Can we have an option to enable this for all NodeProxy, and have the commit default value set? This seems like the wrong place to do so.
I don't think we should remove this, it's not used anywhere else.
I'd like to see the linter for removing these `t:` statements.
Shouldn't this also include the value in the `IdleTimeTimeout`?
I think this file can stay reverted.
@michaelkuhn Do you remember why this change is required?
This might be a breaking change, I don't think there's anything we want to do with an empty list here, just a thought.
I think this would be more appropriate if it was added in the `setSelectedElement()` method.
I think this should be a separate `if` condition. The function above should either return the first `Info` or the second `if`.
I'd expect to see a `to` at least a `prefer_string_from_string()` here, but it's a bit confusing that the `assert` would be used in a `assert(&tagId)` which is used to see the output.
I would make this public. It is already in the public config.
I don't think you want to keep this as a map.
I think it would be good to make the `return this;` statement configurable.
`this._super(arguments)` seems a little weird. What would happen if we called this `actions`?
I don't think this is necessary. The `!c.pendingSuspensionCount++)` is set when `suspended` is set, but `c.pendingSuspensionCount` is set when `suspended` is set.
I think this should say `log.debug('URL is a local file')` instead of just `.debug`
This change seems unrelated to the PR.
This constant should be in constants.go
`c.opts.RevisionField` is used to determine if the return value is not set or set to an empty string.
Is this not needed?
This should be `*` as it is for `latte_io.c`
Is this really the best place to put this check?
I'm not sure about the `MockObject` here. We are not testing the `gestManager` anymore.
Why are we using the new `numRemoved` package in a context instead of having the `including` package?
nit: can we name this `extraB`
This was just a bug in my testing.
This else is no longer necessary, since the else is not needed.
What does blacklist end in a single string here mean?
Why is the port needed?
I would suggest to use a constant here
Please don't use `in_copy_in_copy` for this.
this is wrong. `target` will work with `--target=config.Target.Triple` (or whatever we call the config, it's a `--target=config.Target` option) and it will work with `--target=config.Target.Triple`.
I'm wondering if this should be `results` instead of `System.AuditRPCWithTypesStatus`, right?
const key?
This TODO can be deleted.
Can we remove `final` here? We are adding a lot of different areas in the code.
This should be `string.to_string()`
Should we set iptables-pospos in the test suite to make it more obvious that it's implemented in multiple test cases (e.g. is it not a file)?
I'm wondering if this should be `m_userWriterList` instead of `recursive_mutex`?
I wonder why we should not do `ASTAnnotationTest.NoArgsConstructor`, but not `ASTok.NoArgsConstructor`
I suggest to replace `i.interceptor = interceptor(...)` with `LOAD_DATA_TYPE(field)`
This can be removed as it's not used in the code but since the `QueryElevationParams.ELEVATE_DOCS_WITHOUT_Q` it is only used in `QueryElevationParams` and is used here.
This seems unrelated. Why was this changed?
I don't think it's necessary to add this. It is only required for Python 3.7.0, so I think it might be better just to move this import to `5.QtModMod5`.
I don't see why this needs to be `ipip` - it's just for the `antreaSourceStatsElementList`, so I'd just remove it entirely. I think it's fine if we just need the constant here and just use `if len(antreaSourceStatsElementList)`.
You should add a `#pragmaagma_saved_abs` to remove this one.
I think this should be `2.2.1` or `2.2.0.1`
I am not really sure if we need to make the API configurable, and that's the correct behavior. This should be `ulu_subject` or `ulu_subject`, not `ulu_subject`. It's the only one that needs this line, which means they're all all of them.
Nit: revert whitespace changes.
I would put it down below the `if` and add another check to the function below.
@kennknowles I don't know if this will affect all of our code, but I think it's fine to just do a line break.
I would have used `template.published` here instead of hardcoding the template.version.present in this way.
Why do we need to do this? Is it just a separate control plane and control plane? It looks like we can use a separate control plane for it?
It's not clear that these are the same as the old one. Shouldn't be `gcnArch`?
I think we should keep line 244.
Can you remove this empty line?
This should probably be `--verbose`
please sort these alphabetically
For my own edification: Is `VersionKey` a global constant for `service`? If yes, we should use the global one here.
I think this should be `else if:` and then use `try` as the next line. (Unless there's a reason for it.)
Can we change this back to `env.properties`?
Why did you change the bucket name? I think it should make sense to use the `assertEqual` message.
I would say remove this line, it is no longer used. I think we should keep it as is as it was before.
Can we make `RubyVersion` return a `nil` instead of passing a `nil` here? I would rather have a `ValidateFunc` return an `ValidateFunc` and `ValidateFunc` to return a `ValidateFunc` instead of `ValidateFunc`, which would avoid that.
`exp Details.getAddressDetails` is the name of the method, so you could use `error.error.getAddressDetails()`
Should we make the change on the line below this?
Why are we sure we don't need these anymore? Isn't it enough to just always return a `false`?
I think the order of the query could be `""`
I'd rather use a variable name like `getAmpMetric`
can we make it public ?
Can you add gitea copyright line to header (and keep gogs one next to it)?
I'm not sure we should do this.
This is not needed
Is it TODO still required here?
@wido the script is not the same as `info`. The original code is not needed.
I'd rather have a `args` arg, like `assert subscript.parent.value.as_string(self)`
I would use the actual error message. In this case, you could use the `s.id` function in the `s` module.
Why do we want this?
This is a public key, so we need to do a default value
this will need to get triggered when `getStandards()` returns an instance of the query.
Why do you change this to a irregular_dims, but not a directory? Is the `ir` array always the same?
I think we should be able to remove the log line if we don't need the log line.
If you're using the space, then it might be better to split the whole file once and then use the second dot before the `padding` declaration.
This file should be grouped together with the other files.
I'm wondering why this change is needed?
Please revert this.
I think we can also update the `clearfix` description to `<search_names>` and `<clearfix>`, to be consistent with the other attributes.
I'm curious why this is necessary and how we could get the `Asp` config from the `Core` interface.
Why do we have always a `alwaysOk`?
It seems that you don't need to check whether the policy is set or not. I don't know if we want to run it with anything other than `sched policy`s than `APIVersion`.
This can probably be `def null`
Should this also be `secure.add()`?
I think we should remove the expire table from the dashboard.
Why is this type needed?
Why not return `return receLogOnErr`?
i wonder if it's better to just add `caddytls` (or `cCloudtls`) to the `ChallengeProvider` class.
OC.getLocale() can be null if no user's `C.getLocale()` is provided.
Doesn't this need to be 1?
I don't think we should add this to the `<byte>.<dict>` below.
This should be `allocate == ""` instead.
It's not clear why this is correct. Can simply do evalInsDelPreCondExpr() directly
Is this TODO still TODO?
This is not really correct, we should just check for the URL here, not just the error.
please don't use __load_module
@cramforce wouldn't this work? We should probably use `_forCompilation` in the `if`
@bparees just to confirm, does this change make sense?
`fstream` here is the default, so `iostream` should be `const`
Can `null` be removed? I think that we will need to throw an exception when it's already throwing.
This is not a test, so the tests are passing.
nit: this is already a pre-existing change.
If we're using this to create the status status, wouldn't it be more appropriate to pass the error here? I'd like to avoid using the status status in the status status
This is incorrect. The node is null, but it will always be empty.
can't you just return `err` here and avoid `nil`?
@tnozicka why did you need to include these?
should return true for both cases
This is probably the only way to go around the `.js` file. I don't think we should use it here.
Use the new Ruby 1.9 hash syntax.
Is this the right approach?
The only use of `CartItemTest` is to use `ProductTest` in tests, is that correct?
This doesn't work for cachedID. In this case, there is an error that only cachedID is present.
I'm not sure we can get rid of this and we already have a package named `generated` in `generated.go`.
Would it make sense to just say `notifications.emptyempty()` instead of this?
Freeze mutable objects assigned to constants.
This should probably be `repo_private?` so you don't have to explicitly force the output in the output.
The error is being changed because GetActiveApp is an empty string, so the `if err != nil` check is unnecessary.
We need to make sure we don't change the default for the production.
Please add a TODO to remove this.
This is an actual bug fix.
Why not move this into the else block?
`click` should not be necessary here as the `driver.element_to_be_unclickable` will always be undefined.
This should be called `dataFile`.
This doesn't seem correct. We can't do it in a test like the others.
This should be done for RDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBbb they're only ignored when the RDBDBDB were disabled
This should be moved to `channelqedge` package.
Why was this not needed?
Why this line? Is that related to the PR?
`httpHandler := handler{rpcHandler}`}` should be the new field `httpsHandler[rpcHandler]`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why not put it as a separate method?
This needs to default to `undefined`. Otherwise if you have to change the shell to `undefined` this will be a bit confusing. Maybe it is the default for `account` and `props`?
@sarifRj are you sure this works?
I don't think we need to remove the `__name__` here, it's only needed for `pkgutil`.
this import is not used anymore?
You need a test for this, too.
I'm not sure that this change is correct. We are throwing exceptions in the exception message which is not the case.
This file is now useless, right?
You don't need to do this. You can use `select` directly.
This doesn't make much sense. The function returns the value, so I don't know what is going on here.
Ah alongside, the commit commit can be removed.
the wait was done in the same time as in the other transaction, not in between 5
Why is this necessary?
why did you remove it?
I don't think this is correct as its a function that is going to be passed as a function. It will always be a function, which is not a function of a function.
Is it possible to use `KeepTraces` here and have `samplingPirority` at the top of the file?
Why do we need a separate default for this?
Isn't `procedures_prototype` always true?
please sort it alphabetically
Does that work if you remove this line?
Why remove the operationTracer from the interface as it was already being used in the case of the operationTracer?
I think you need to keep the previous field for this. Also, I don't see any reason to keep the field around.
I don't think it makes sense to add this here
This line seems to be too long.
Can you explain the logic here? I would expect this method to return a `Map`, which is a `implemented`.
Nitpick, but it's a little odd to have this constant at the beginning of the file. I don't think it's a good idea to have it in a separate file and then use it in the `const` block.
you can remove this line now
Please add a `use` statement instead of `set` for this type and other string.
Is this change necessary?
Do we still need `SafeAreaInsets` here?
Line is too long. [81/80]
I'm not sure if this is a writer?
This should be the last parameter, not the last parameter.
I think we should be able to avoid adding another field in the namespace for now, but I'm wondering if we should just add an additional field in the namespace for now.
do you really want to check if the int is an integer?
I think `user-apis-forwarding` should be fine
Shouldn't we use `custom` instead?
This will not work with the non-null path.
This change seems unrelated? Shouldn't the loading name be loading or loading name be loading ?
It might be a good idea to give some performance regression, e.g. "Note" vs "severe".
I wonder if we should have a `createSolrConfig(dcore, coreLoader, trusted)` which we could use here? I'm not sure what type we're expecting. If I see this is the case, I think we should have a `createSolrConfig` method in the code and then we could create two separate `SolrConfig` and `createSolrConfig` in the future.
Why not "If the copyrighttd" ?
Is this a glober? Do we have any other globers for this resource names?
Maybe we want to set `config.AWSRegion == ""` when we set `New` on it.
Is this what you meant by changing the version to a `version` instead of being a `dict`?
This is not needed.
I don't think it matters much but it'd be nice if we could move the check to `go/`
I think this is wrong. You want this to be `unless current_user.can_org_admin?`
I think we don't need to add these, since they are not really faster, just because they will not be compatible with other languages.
This is going to break the existing code, which means the `collection` function will only be called once per component.
Why was `openqa.selenium.Screenshot` removed?
Why is this needed?
Why do we need toreplace Count? It's a bit unfortunate that we're trying to use a Count here.
I think we should change this to `...`
I'd prefer if these `Dict` according according to the rest of the imports were changed.
Group with empty line.
Why are we adding the `local` cluster?
This variable should be declared at the beginning of the method.
I would suggest to make a new variable named something like `data_html`.
This should have a `static final String` variable as well.
I think the `NETNET.cs` needs to be changed to `NET.cs`. We need to keep this in the future. It can be fixed in #if PEP-821.
should we return the error here?
I think it would be better to keep the test name as it's not a valid URL.
Please fix the indentation here
I think you could move these code inside the `try/except` block, since that would be a problem for the future (and I don't think they should be here too).
I think this could be `model.getServiceConfig()`.
I would use "must be used" instead of "has a set" here, since it is not really required here.
I don't think we should be passing in the retry. We're using this as a warning for status code. We should either be using the error message or change the error message to `fineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineineine
This class is being set to ` ServiceDefinition`, not a `ARM`.
Use the new Ruby 1.9 hash syntax.
Why not use a const?
I think this needs a `Err` instead of `export`.
should this be set to 1.2.2? `this.s.hooks` is not a clone anymore.
I'd like to leave the bool and change it to bool for consistency.
1. Should be 2.0
`crash-data-subrow` and `data-crash` are sub-data-subrow, so the `data` parameter is `data-crash-data-subrow`.
Why did you remove this? The `assertEquals` method is already called on the `failure.c` which is already called on line 567.
@deads2k i don't think this is correct. The idea was to have this return a `nil` function that does not depend on the `nil` object, which is why we have it in the first place.
@smarterclayton do we need the `[0]` part?
Why is this defaultTitle public?
I think it is not better to call SampleTransformer() twice? It is more readable.
I would use `(char *, digest *path, algorithm, digest[...]).per_html` here.
What is the purpose of this change?
I think this should be `NewServerServer`
Line is too long. [84/80]
`tm` is a function, so we shouldn't be changing the signature.
This can't be changed if you want
I don't understand the difference in this PR. When I see `npController.networkPolicyListerSynced` and `networkPolicyfortatSynced` it it looks like an old `namespaceListerSynced` returns a new `defineController.name` that is the default `defineController.name`. So, I think this is just the first part of the function. It's not the case anymore but it is the same as the one above.
I would have expected this method to use `mongoClient.s.options.autoEncryption.cryptdConnectionString`, and then we need to check if the mongoClient is set.
I don't think we can do this. We can only switch the result if it's not set.
Shouldn't we use the `spanIdGenerator` helper here?
I think this is fine as it was. I think this is a bug in the original code. You should be able to just say something like: > > > > > * queue of the sample queue > * queue of the flow queue > > * queue of the queue > > * queue of the flow queue > * queue of the flow queue > * queue of the queue > > > * queue of the flow queue > >
This would be more readable with the `invoke` method.
Should we use the `@Restricted` annotation here and elsewhere, to make it consistent?
Maybe add a `*`? We may want to remove the `*` from the name.
nit: this line can be removed
I don't really like this, the test would still pass. I think that we should just set it to `true` here (and let the test fail).
I think it's better to use a specific `Error` instead of the `string` (and a few other things)
Is the `build_langserver` flag available at this point in the tests? I'm not sure how to test if this is the case, but if so, it should be the default one.
Please add a `class->classToEmpty()` method here
this should probably be `errShouldUnload(err)`
I don't think we want to do this in this PR, if we have `Topic.find_by_slug` we don't have to do this on every request. I think it'd be a good time to find the current implementation. This will avoid having the `@articles` query in the future if we don't want to have it in the controller because we don't have to.
This method doesn't seem to be used in this file.
I'm not sure about the need for this. If there is a task that's not allowed, then we should just set them.
This will be `if err == nil {`
Can we have a `url` as a default? I'm guessing it's not used anywhere so far.
This logic should be reverted. The logic is not correct here, if it has to be set to `true`, it should be `true` instead.
This will break on older releases, which will cause problems when `init()` is called and called in a single thread.
Nitpick: I would add a blank line after this one, so that the `assign` call is identical.
We have the "schema" prefix in the name of the test
I would prefer `array_filter($authors, function ($a);`
Nit: can we name this `UIA_notification`?
I think it's ok to remove the keystore here, since the password is set by the password itself, so it would be more readable.
@mjkkirschner can you review this change?
We can just remove the `Text.standardize()`
Can this be false by default?
I'm curious why you added this new option. What's the reason to change the default value of `$sourceFilePath` instead of `$originalImageSize`?
i'm wondering if we should not have the `api_quota_configs` variable in the API context. We already have many different quota classes for the same reason.
the only thing I'm concerned about is this "Beni" and "Beni" are "not" so it looks like "precompile" is just the best way to do it. I think I would just have called the "Beni" and then have it as "hyperledger.besu.evm.COUNTCOUNT VHoodieContract.
I think we should be consistent and use `None` here.
@DaanHoogland I'd keep the import, it's better to keep the import, and put it in `src/server/install/install.py`
equal is a string too, can we just use a string here?
Why are we doing this?
`Config` and `Options` can be removed now, since they have `Config` and `Options` as they have to be escaped.
I think this could use a `saleor.graphql.core.httpexceptions`.
I think we should use `Tags.GraphQL` instead.
this is a bug fix. we should not be using this in the loop, it will be rebased away
Isn't the `id` variable still valid?
This should be `env`
Is this a change from what I see?
This is an improvement.
Can we have a helper method for this? `int64` seems like a very generic name.
I think this is wrong.
I would use `cls.info`. The `info` is more common. The `cls` is a private variable name.
this one needs to be updated too!
You can use `self.config.options.listen_host_url`, or something like that here.
Can we add a TODO to remove this?
Why not just remove this bool parameter?
What's the rationale for this change?
I'd be fine if these are all, but I don't understand why we want to return the error.
What happens if it's no longer a device without using the global global var? Is it a device without any file?
This will need to be `ListServices`, otherwise this will break the test.
@jcotela I think this change should be reverted. It's not required for me to remove.
this is a new API change, we should not be able to remove it
This is the wrong way around, we should use `globalVars.appDir`.
DisableInMem is used to generate a config struct. Can you change it to something like `M3_Disable`?
I don't think this is needed anymore.
The name of this method is confusing. It's a bit confusing since we're in an observer now.
I would prefer to have this be `except Exception Exception` instead of just `try:`
Why are these required here?
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
I think it would be better to use an error here, e.g. a password that can contain a string like `r.Recorder.Eventf("Failed to deregister control plane instance %q", i.ID, err)`, as it can't tell which error is returned.
This could be called by a `update_all` method, no need to do it here.
I think the error check can be removed here?
Is this related to this PR or was it just to make sure I am correct?
@Scottmitch why isn't there a way to throw an exception without this?
Shouldn't this be in the constructor?
I'm not sure this should be `org.joda.time.Period`, is it?
I think `map` is better.
This is unrelated to the rest of the PR.
Why is this needed?
why not use a separate `bind()` method?
Why are we deprecating 0 if it is not set?
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
This is probably fine as long as there is a spec for this
I think this should be `streamHandle`
I'm not sure about this. The options in `cursorState` is not a `ServerOptions`. I'd rather not have a name for the options.
this was a bug in the code
I wonder if we should just add the `bucket` variable into the `sha256: true` below.
@stephentoub can you add a `ApiModel` here for consistency?
Can you add a line break after this?
Shouldn't this be the actual containerized flow?
what if role is false? Shouldn't we throw an error if role is null?
Should this be done in Boolean.java.util.Boolean?
Why do you need these changes?
`node` is not a global variable, so it should not be a global variable
Why is blogSvid path set?
Why can't `string` be non-null?
I'd rather use `io.prestosql.spi.QueryQuery.php` here, as it makes more sense to use the variable in all cases.
It's probably better to put the parameter `type` as a parameter to this interface.
This should not be included in the `TBB_INTERFACE_VERSION` file.
I think this is the right choice here.
This is a leftover.
Align the parameters of a method call if they span more than one line.
nit, should be `curTagCount`
Why `none` is `None` here?
I'm not sure why this was necessary?
We need to log the entire stack trace as well.
It looks like the `AspNetInstrumentation` and `activitySource` are unused?
Not sure why this was here, it was not a function, but I was wondering if it would make sense to return an error instead of a function.
This should probably be `rootId` instead of `root.root` (and the `rootId` should be in the `PreactElement` case)
This was a bug, right?
I would return null
Should be exported
Also change this back to `.rb`?
I think it would be better to use `engine.eval` here
I don't know why it is necessary to use the `rand` variable here... but the `rand` property has to be set in `common.Logger`.
This can just be `--rpc-require-chainid-in-txs` I think. I would also suggest `--rpc-require-chainid-in-txs` as the value. I am not sure if it's possible that the `--rpc-require-chainid-in-txs` option would be used, but if it's not, let's not change it for now, to make it clear that it has the same effect.
