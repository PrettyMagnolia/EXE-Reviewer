Is it possible to have a test that lets us use `transport`?
@atm-quentin can you please replace `$backend->setPageSize($config->Index->record_batch_size, $this->record_batch_size);` with $backend->setPageSize($config->Index->record_batch_size);
This is the only place where we would want to use the `get` method instead of the `get` method.
Is this a typo?
I think this should be done only if `isNavigating` is true, right? Otherwise we will be able to get the global `broadcast` and the `broadcast` (which will be a global setting)
This should be `ID2col(const Mat& im,Mat& col,`
@jridgewell I think this line is not needed anymore?
This should be const const const const const const const const const
`focus.windowThreadID` is the number of keyboard parameters that are not the number of keyboard parameters.
This should be `createService`.
Should we do a `setParameter` here too?
I think it would be better to use `try {shared}`.
nit: I'd probably move this to the top of the file, since the method can only be used in the `add` method
ToHexString should be done inside the statically defined function
I think it would be better to make `w.logger.Error("failed to update image", zap.String("image-provider", "")` and do this once in `discover.mod.path`. It would be nice to have `provider.Name()` as a default.
Why remove this?
Why do we need the `public` here?
(style) Macros with complex values should be enclosed in parentheses
This will never be true. The `status` should be false if the `error` has been initialized.
Should we add a check for wlr_input_device?
Should we also check for the `Task` here as well?
`NONEXIST_ENABLED` -> `NONEXIST_ENABLED`
I think this should be a `DoubleType.get()`
I think we can remove the null check for `isEmptyType()` as it is no longer needed anymore.
I think you should add a space here.
"the command history" ?
I don't think we need this change.
This should probably be removed.
Metrics/LineLength: Line is too long. [123/120]
This is not correct. It would be better to check `workingDir` in the constructor. That way we can get the `withStatusDirectory` later.
This namespace is already listed in the `LibraryLibrary` namespace.
Use 2 (not 3) spaces for indentation.
Why is this clear? Is this the case that blockDiskStore is not a global?
How about `alerters`?
Why did this not work?
Is this a change in behavior that will break the existing users?
Why does this work when you use `byte`?
This function doesn't seem to be used anymore
I think this interface can be removed too. It is used for the scheme in this file and it is not a public interface.
I wonder if we should rename this to `setTag`?
this is unrelated to the PR?
Why change this? This means that the new parameter name is 2014?
`BiConsumer` is not used anymore.
Should we use `queue_as` here?
I don't think it makes sense to put this here. It's not necessary.
This should be `validators`.
I think this import is unused?
This is a bit weird. Why is this necessary?
I think we can just do `for (int i = 0; i < feeds.size())`
`return None` is the correct thing.
why not directly use the error message?
Should we make the context context a `chain.TipSet` instead?
I'm not sure why this is needed, if you have a `hot` package, then the `hot` package should be updated to use the `hot_` package.
This should be `!==` instead of `creature->isRemoved()`
This should probably be `log.WithError(err).Fatal("Failed to connect to Typha")`
I'm not sure if this is correct - if the `Promise` is an object then a `get` it should be a `Promise.get`, or a `get` method.
I think this is a little confusing. How about something like: `if target.state.QueueTarget(dep, target.Label, true, false, false)`?
Why are you calling this `pks.__class__.__name__`?
You can just return `false` instead of `return false` here.
This is the only place that uses this method, so I removed the call to `RegisterAppStart` which is why the code was there.
why are you using `new HashMap<>();` ?
can you change the return type to `long`?
why did this change? It's not a public function, but a public function seems to be used.
This is a bit confusing to me - why is it different from the old one?
I'm not sure if this should be a part of the open_id?
This is a bit of overloading the condition here.
why do we need this string?
Is this needed? We don't have any of the `_test_id` and `_set_id` in our code base.
@jordajm this is a change for the new functionality. It was a bug.
I think this is not true because it is returning false.
I think you should add `#add` method to save one space before `padding`
The assertion above is correct. The assertion is `sibling->parent == subsurface->parent`. So I wouldn't expect this to be `assert(sibling->parent != subsurface->parent);`, but it's probably not the most appropriate check.
should this not be the last thing we want?
This is a change change, but the change is still correct. The change is only to allow `io.prestosql.util.String#ifdefdef HBase_to_if_table_inDDL` to return a new "inDDL" table, and then we can drop the "inDDL" table and then just do it in `io.prestosql.util.String#if (!io.prestosql.util.String#ifdefdef HBase_to_if_table_inDDL`
(style) externs should be avoided in .c files
This test was testing what was causing the test failures, but it was testing for a while now.
This was the bug that I fixed in the `webenginesettings`
shouldn't we print the exception here?
This is a change in the error message.
Can't this be changed to `-><>()` instead?
(style) line over 80 characters
I think we could replace this with `is_no_replace_variables`
Why are we dropping the doc here?
Do we need to make these changes to generate/name/generate ID?
`posFile` is never read from the manifest, so this is a `posFile` property
Why is the other one not needed?
I'm curious if this is the right place to put it.
This was the only change I made to this PR. This is a separate PR.
`localConnection` could be initialized as a static constant in the `locallocal` method.
I don't like this container anymore. It's the only place it needs to be added.
Is there any chance that `localSketch` will be called from `localSketch`? Seems like a `Device` would work here?
I think we should be able to pass in `Address()`, because it's not a valid `store`, but it's not a valid `Address()` method.
This is a change in behavior, because the `init` method is not called on the `init`.
Shouldn't this happen on line 135?
origin = element || POINTER
It looks like this line is not related to the PR. Is this a problem?
Shouldn't we use the level level here?
I think this can be simplified
Is this a debugging leftover?
Is this still necessary? It looks like the ExecutorManagerException can be a pointer.
`typeof obj` is not null, so this should be `obj.props`
This should use `this.getAttribute('aria-hidden')`. It's not clear why the attribute is being added to the value of the attribute.
Why are these imports needed? The import is already imported in `content_type`.
I don't think this is needed. It is not a good idea to have this method. It's a bit hard to see if the method should be called `JavaParser`.
@smarterclayton do we want this in v1alpha1.cs ?
Should we also store this in the `PortBinding`?
Ah! I think it's better to have a method for that?
I think we should just remove the `poll` method and call the poll method here. I think the other one is still in the `RequestId`. The reason is that the `RequestId` is not a `RequestId` interface.
I think this needs to be a `use` statement.
I think you can get rid of this line as it is done by just readlink or readID
I don't think this change is required.
Why are we removing this ?
Can you remove this line?
This is a breaking change in the code, but the code below is not used anymore
The default here should be `default`.
Linq is only for testing purposes. It is not possible to have multiple threads in the same thread, but I think it is better to keep the same code.
I'm wondering whether this should be `req.open(url).read()` instead of `data = req.open(url).read()`.
`breakpoint` is a bit ambiguous, can we just always call `linePrefix` here?
I'm not sure if it's necessary to check for the dictionary as it's an attribute of `self.location`...
We don't need to use `is` for this.
Please remove the "go"
`std::distance(first, first + 9)` is always true.
Can we move to `app.kubernetes.io/prometheus-operator`?
Can this be moved to the top of the function? It seems like it would be better to just make it nullable.
`ioctl` is a `xrc20` instance, so this should probably be `ioctl-core`.
maybe we should just make context-inst a single function?
This is not a good idea, but I think the default value should be false.
`in pixels` should be a `true` (or `false`, `in pixels, 0` is the default, so it's not an `true`).
Why is this default true?
I think we should do the right thing here: `typeof.call(obj).match(/\s(\w+)/)[1].toLowerCase();`
This is an example of how we want to do the same thing for everyone who is using `canceler        ` to be used. I would just add a `ctx` to the end of the context.
I'm not sure why this is needed.
This should not be `codeVersion`.
I think the `setFileState` response will be removed after the `response.id` is set.
I think it would be better to move the call to `readChan` here, and then use that in `setUp()`
I don't think this is right, we should be able to remove this
Without string should be a function, not a function.
I think this will cause the exception for now, right?
The tags in `tags` tags need to be updated too.
I would prefer to have the scope in the `for_fiscal_year` method.
I'm not sure what the connection is.
The name of this column seems a little strange. I don't know if it's worth it.
I think you should be calling the `h2o_next_token` function instead of having the `array_separator` parameter, since you're using the `array_separator` field in each function
nit: I would prefer to keep the `cycling` around the `event.ksql.sql.event.ksql` if we're going to have a single field in `event.ksql.sql.sql.sql`
this is wrong. It is an PaymentVersionV3, but the type of a test is not yet set.
I'm not sure if this is a good change. The only place I can get is if you want to make it so you don't have to do anything with the resource name in the function. I'm wondering if it's a good idea for this to be an error instead.
This is a bit of a hack, but I'm wondering why we need a method for this?
I think this should be `from_motorway && node_based_graph.GetEdgeData(eid).flags.road_classification.IsLinkClass());`
I think this change is not needed. We already have the master and `certname` in the docstring.
why is this a dict?
Line is too long. [81/80]
This should be a `boolean`
This should be `-name`
`n.nodeType = nodeTypeEdge`
This should be moved inside the for loop since the loop is not yet passed to the function.
`Call` can be `nil` in the `CreateFeatures` method, right?
This should be `url.GenerateAPIKey`
This error is not logged
This should be updated to match the olve functions that are not updated.
I'm not sure this is the right fix. It seems like we should just remove all of these `calledThrice` stuff from the `.js` file since we are not using them anymore.
This method name is misleading, it should be `obj_message`
@tnozicka this is the way to release messages, we can use the new message in the message.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think this can be left as is. We need to do some validation for it.
I'm not sure if this is a good idea to add `ia2Web.Ia2Web` to the `ationalational.add`
I think it would be better to use `E` here, and in the other classes that return the `null` value.
This is a very minor detail, but I think we should be able to use `true` for pulling pulling the pulling.
Can we keep this include in 2o?
This is a string, but the name `AlertQueryUrl` is a bit misleading. What's the purpose of this?
This is the bug fix.
This should not be right. latin test will fail with an error when you try to import an attribute.
Why is this needed? I thought the test was already using the `*` in the `*` folder.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
why remove the try/catch block ?
I'm not sure this is a good idea. It's a good idea to have a default value.
Why are these being removed?
This should be in a different PR
I think this import is not required. The `jav` import is already covered by the `jav` import
I think it would be cleaner to just do this in `ips = false` since it's a single `ips` instance.
Is it worth adding another method?
Rails/OutputSafety: Tagging a string as html safe may be a security risk.
I think we can use `import {i18n} from 'react', 'Footer'`
This is not used anywhere
The test is testing that the schema is not present.
Can we move `i` to the `File` package, since it's not a part of the `service_id` file?
Why is this needed?
The default value is `const`. So this value is `allEvents` so you could use `defaultEvents` instead.
This should be in a `LOG.error`
I think this should not be added to `master` in the `if` statement. It is not used in this case, right?
I don't think this file is used anymore.
This should be a warning since it's not part of the cache
Since this is the `disabled_client` method, I think it would be cleaner to check this on all instances of `authenticate_user!` and check `disabled_client` in this method instead of only checking if there are any checks.
I'm curious why you changed the test to pass the query param
We could change this to `apply_helpers` now that we're using it in the `custom_facts` module.
Why not just remove this class entirely?
Why do you need the `start` here? I don't see the point of `1`
Can we use `gopkg.in/square/go-jose.v2` instead of `ource`?
Can we use `private properties` instead?
This function is used to generate a `func` function which does nothing. Can we rename it to something like `[]byte, error`?
This is a bit odd... the `e.g. "hive/tpcds/customer/customer.dat"` file is already there.
I don't think we should be using the directory here as we are using the directory. We should probably use `path.join` instead.
I don't see this being used anywhere, is it?
Should we do a proper error if the user sets their own request?
Is this change intentional?
I'm not sure why this is here.
I'm not sure why the `AARCHXX` is defined, but the ARM is not defined.
I think it would be good to have some sort of field that takes a list of properties, so it's clear what the field is.
this is the wrong place for this. `$event->getAvatarFilename()` is called twice
We should probably use the `error` in the `before` block.
`DefaultTextMapPropagator` is unused. Why not `[]`?
This is a breaking API change, but I'm wondering if we can just remove the code at line 434 and just do it in the `if (header.isPresent())` block.
I'm not sure we want to use the enum type here, since it's a bit hard to follow.
Maybe we should use `.validate` and `.validate` to determine if it's not an error?
This is a required required value.
I don't think you need the `m` here.
Can we add a `dependent: see` for these?
This is a bug fix. The `putOpt` should be removed.
Can you use `io.util.util.100.100`?
I think this is wrong as we already check the value of `empty()` in the `$dqlFilter`.
Is the error returned from here correct?
I would prefer a `out` here, not an `int`
This is the only change in this file that will be updated for `config.run_binary_labels`
I think this is the wrong place for this.
remove this line
No need to convert from here, we just use `user.password`.
I think this is not needed. It should not be Dimensioned.
I think we can revert the change here. The `minimap` is now unused, so we should be able to remove it from the `minimap` annotation.
this is a change in behaviour, but the tests still fail
this was the bug, right?
This should be `github.com/pkg/errors`, no?
Does this need to be `locked`? It seems like it should be `const capabilities = init(Capabilities)`.
This is no longer used
Space missing after comma.
We can use the `RetryName` constant here
Why is the `puppet` needed here?
We can't use this in any way, but I think it is better to do `go for this map` instead of `fastcgi.go`
This was the only place where we can remove it.
This should not be needed anymore
This should not be required
why did this get removed?
I'm not sure what this is for. The `smallImage` variable is used for the new `small_image` src.
This should be removed.
This is now done in the header file. You can use the PPID_link.h instead.
I don't think we should add location to the top of the file. It will be easy to move to `location.json`
The `Up` parameter is a bit confusing to me - it's not a good candidate for it. It's not an array, it's a `Up` parameter.
This is a little weird. Can we use `< 0`?
I think this is a good place to fix the bug.
This should be done in `isNotImplemented`.
This function can return a `p.backend.utilLoop chan` object. It's a little bit confusing to me. I think it's better to use `p.backend.utilLoop chan` to check the error.
This should be `query`. You can use `'wav'` instead.
I'm not sure this will work for all signal requests. The number of parameters are the same, and the number of parameters are the same, so it will be the same.
You can use the `@note.report_text` constant.
@martinwicke I don't think we want this to be a `before_action` callback. I think it's better to have it in `api/internal/api`
`contains` doesn't work for any type of elements, so it can use `contains`.
This is a very specific bug, please revert.
Use `options: true` instead of `false` for clarity.
I'm thinking if we can set this to `ptr==0` in case it is not `NULL`.
I think the `url_*` should be applied to the `functions_url` function.
I'm not sure how this will work. This will work on all cases where there's a server lock, but it's not.
Can we enableDownloading by default here and enable it in `src/main/java.js`?
The method is not used anymore.
Maybe `HttpServerError` is better?
I don't think this will work, but it's better to use the new style of the `_` prefix, like in the other `_` functions in the `register_Spec.yaml`
The `isEmpty()` method is called by `createBaseZnode()`, so we should be able to use it here.
This is a bit of a hack. We should just change the root directory in the `archive` package.
I think we can remove the `me_path` part here, it is already in there
I'd like to keep the `beaker` folder as it's a file-level path, not a file-level path.
`Integer` is a bit confusing, since the method is used for `year.between`.
This will not work as expected as `seelog` will not be available. `mtask.handleDesiredStatusChange(dockerChange)` will always be `true`.
I'm wondering if we should add a TODO to remove this?
I think this can be removed now
I think we need to get rid of this.
Metrics/ParameterLists: Avoid parameter lists longer than 5 parameters. [6/5]<br>Metrics/ParameterLists: Avoid parameter lists longer than 5 parameters. [6/5]
I think this is the only place where we can get the `os.` from `os.` to `os.Chmod`.
I think this should be a different type of the filename.
nit: remove newline here.
I think this should be a `slider_pos`.
Another problem with this, if you're using `os` and `os.path` instead of `os`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think we should be using the new `404` format to avoid this warning.
I think this is a typo?
You should be able to use `===` here. `psalm` is only used for `bin` and `psalm` is used for `psU`.
` aws_test` is a better name, `package` is a bit confusing. It is not a good name for this package.
The `instruments` value was not being used anymore, so the test should be removed.
Can we just make this `eval.BlockEvaluator` and not just do it in the block's `BlockEvaluator` block?
What was the reason for this change?
I think we should update the `resources` to be a `resources_html`.
Why is the `confirmation` being removed?
This should be moved to the `var` block.
I think you should be calling this `wasHive__`
@jridgewell I've removed this unused import.
Remove empty line?
Can we use the `s.s.Getter` method instead, so that it can be shared between both branches?
do we really need the `--set-lsig-arg-idx` header ?
I don't understand this change.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
This is a change in behavior...
How about adding a `defer` statement to make sure the email address is not nil?
I'm confused. Why do we need the `getAvailablePort` call here? Why do we need the `global` call at all?
I'm not sure if this is a good idea. It is a good idea to use the locator function to get the file name.
I don't see this being called anywhere. The project name should be "prompt: prompt.New(),`
shouldn't this be `!bytes.Length == 0 && bytes == null`?
I think this is not correct, the `return vNode` should be removed from the above block.
Why are we not using WriteAsync directly?
Do we need this?
I think we should check if `approved?` is an instance of `current_approver` before sending it.
This function is not actually used, you can use `String.attach(attach, String name, Object value);`
Please remove `IOException`, it is not used anywhere else
This forceRDKit contains a reference to the function.
I think it is better to move this to `find()` so it is not necessary to have `guid` and `end()`, and `return nullptr` in the `Game`.
I think it is better to use the "Testing" property instead of the "Patch" property.
Should we add a `use` method here?
I'm not sure why this change is necessary. The `public` property is only protected with `protected`
this is wrong. the `getRequest` is a `Request` value.
@matt-gardner, I think this is the best place to put this in the `FlowFixMe` package, since it is not part of the public API.
I think this is a bit of a hack. It would be nice if we could use `self.items() / 0`, but this will be a bit more efficient.
This is a bit of an odd thing. Maybe we could just have `chain.Withdraw` return a boolean. I think it's better to check if `chainID` is non-nullable, but then check that if `chainID != 0`
This seems to be the same as the `tc TraceContext`, since it's used in the `IsValid` function.
This is the only change in this file.
Rails.application.config.blacklight_export_secret_token is used only once in the code base.
Please use `pulumi up`.
Why not use a `_` prefix?
Should this be `HostDataDir:Basic2:` instead of `ecs/`?
@becker33 I think we can use `ipsecESPOverhead` instead of `ipsecESPOverhead`.
I don't think we can put this `OnEnd` in the `BaseProcessor` class. On the other hand, `MeasurementItem` is `PendingProcessor`. So, I think it is better to have `BaseProcessor` be the default.
remove the import if not needed
I think we can remove the `.new(Server)` altogether since the server is already created by the `new(Server)` call below.
This is the only place where we need to call `makePageSource`
I don't think we need this extra space.
I think the error name is not correct, it should be "has"
This method is called in a static method, and is already validated by `miningCoordinator.isMining()`. It is a bit confusing that `miningCoordinator.isMining()` is used by both `maxingCoordinator` and `maxingCoordinator`.
I would prefer if you could get the config from `config.config` instead.
The `Lock()` is already `Unlock()` so it should be `Lock()`
this was the bug, we should not use it in the thousands of the test
This will be removed if we don't need the env-var.
I think this import is no longer needed.
I think this is a bit of an unsupport variable, maybe just a simple name?
This should be `_CleanFpInfoAttr_`, no need to check for `_fpInfo`, no?
I'm not sure that `RAY_TRACING_NV` is the right name here
`&&` should be `&&exercise`.
ExerciseWithProgressQuery.java is a better name.
Why did you remove the public method?
Is there any chance we could get rid of this?
This version is not in the same file as the last one above.
This is not the same as what we do with the other directroy functions. In this case, we can just use the new `consensus.SaveConfigurableConsensus()` function to get the directroy object.
why import twice?
Why did you remove this?
why not ` MONGOS_LEGACY`?
This is a bit confusing, why do we need to retry it? I think it should be removed. It's not a problem, since the code is not a thread-safe. It's a bit of an unexported situation. It's not a thread-safe, and I think we should retry it.
Can you add these new headers to the `default`?
@deads2k I'm not sure if we want to do this in a subsequent PR?
I think we should only call the `dokan.ExistingDir` when `keybase` is `false`.
This should be moved to listRegions() and use that in the listID.
This should be `editor-container` or `editor-container[0]`
I'm not sure this function should be private. Can you replace with `CompileCompileCompileCompileCompileCompileCompileCompileCompile`?
This should be removed.
This change is no longer correct, but I'm not sure if it's a good idea to remove it
@kabananvan @kabanvan @wagoodman what do you think about this? I think it's a bit more efficient to have this in the config file.
I'm not sure if this is a good idea, but it's a bit odd to have the `transl` be the first thing in the `__` method, so I think it's fine to just remove the second.
I'm not sure if this is the right place for this. `GetCancelledZeroTask` is called when the user changes their `Task`.
if we are not going to be using an image, should we just use an image here?
I'm not sure this is the best way to do this... If we're going to do it in a followup, we should be able to use `std::shared_ptr<nano::block>` to avoid the auto block if it is needed.
`message` is a bit of a hack.
Why are we adding this?
should we rename this to `VersionVersion`?
This needs to be removed. The `Create` method is used to ensure that the `Create` method is used in all cases.
I think this should be a separate PR.
I think we need to add a TODO to remove `PORT_SES` from `start_moto_server` to `start_elasticsearch`
Is this still needed?
This is a bit confusing, as it's used in a lot of other places.
Didn't we have a test to see if there's an issue with this?
I think we can remove `prefixPropertyMetaModel` entirely?
Why is this removed?
Please remove this empty line.
This is the only change that will cause the build to be changed.
The message should be "charset".
why is the job removed?
why do we need to call `omitempty` now?
I don't think we need this `Close()` call. If the String is `tty` then it will be `tty.Close()`
I think we should keep this field `implicit` and remove the parameter `session.implicit` as it's now the same as the one we use for `session`.
This change was necessary for the next release, and the `protoreflect` was removed.
What is this for? I don't see the OS config in the code.
Is this the right place to put this code in `encReferenceTypeValid`?
this is not the same code. It's a good idea to add it to the service.
Can we move this to a separate commit? We don't want this to be a separate commit.
I think this should be done in the next commit
I'm not sure this is a good idea, but I don't think this will work with the tests.
This should be error-prone. If you do it, it'll return error.
This should not be needed.
This is not needed
I think this should not be part of the schema, since it's a file path
I think we should do the same here as `BSON::BigDecimal`
I think we can require `bolt/plan_creator` to be `bolt/application/plan_creator` here, since the `application/plan_creator` isn't a dependency, so I would just move the `plan_creator` outside of it.
I think it's more clear to set the value for 20 minutes.
I think we don't need this change.
This is a change in behavior, but I don't think it is necessary to do it.
This is the only place where we have this resource in the `Start` function. This function is called only in `Start` and it should be called in `Start`.
This is a bit of an unrelated to the PR, but we should probably just put this in a `test_stress_test` in the `add_setting` in the `stress.cpp` section. I think this should be `stress.cpp` instead.
why remove this call? This was done for debugging?
You can remove this block entirely, and the DrandEntries is the verifiable oracle randomness used by elect; this is just a small thing.
you could just do `getattr(self, '_current_key, None) in _current_key`
why not using `mode` instead?
Why not `(Step<name, w: w, Timeout: w.DefaultTimeout}`, just in case we want to make sure we don't change the default timeout.
I don't think we should be changing the default value here. The `limit` field will be removed.
I don't think this is needed. The `index.consts` function should be removed from the `lib/lib/python/shoot/python/libButton` package
How about rename rollbackPrimary to rollbackPrimary_STAGE. They're both called
why was this changed?
I'm wondering if we should have a `ToNode` method on the `node` and have it on the `node` and `node_id`?
nit: this function is not used anywhere else, and can be removed. ` fakeListOk` is used in other places.
Shouldn't this be `clientclient`?
Nit: I'd prefer to keep go import sorted (or at least use `goimports`).
This is the change that avoids sending a pipeline from the database. I think it's ok to just remove this one.
do we really really need to define this in this PR?
Is this used anywhere?
I don't think this should be in the `Partiions` package.
The reason this was changed is because Pyexperiment_PRESS is used in this file, but the new import can be removed.
I think we should make this a `listSegment` instead of `insecure`.
I'm not sure if this will work as expected. This will allow us to get the HTTP route to be a specific operation, and we want to allow us to get a different operation. I think it's better to do it in a follow-up PR.
I think we should test for the `123456` parameter and `getReferenceUrl` instead of the `media` parameter.
The `reflect` should be `change` - it's not really the best idea to use this in `io.prestosql.spi.compile.reflect` - it's just that it's a `reflect` - it's a `io.prestosql.spi`.
Why do we need to change the names of window?
This looks like it should be removed
The `self` is not necessary for this PR. The `(window, self.Promise)` is always `(self.Promise)`.
If we don't have any unit tests, we could skip this message.
Is there any reason to not use a function here, rather than a function?
I think this is not right, if `stop` is not nil, we should return an error and return a nil error.
The `DeleteAll` is still used by some other interface. Can you rename it to `DeleteDeleteFile`?
This is the wrong place for this.
I think it would be better if the path was created with `config_PREFIX` instead of `Config_PREFIX`
@jackfrancis I don't like this change, but I think we need to update the EnableTelemetrySdk.EnableOpenTelemetry(builder) to EnableTelemetrySdk.
This was a mistake before, and now it is not needed.
nit: can we have an `volatile` for this and then have the same `volatile` for the other methods?
This is not right. You can have `if (!tmp = excessDomChildren != null)`
I think it would be better to use `call_user_func_array` directly, as it is not used anywhere else.
I'm wondering if this is the right place to put `sc.IsValid()` in the `extract` method? It's not a good place for the `extract` case. It's a bit of an unrelated change.
Hmm, why do we need to change the key here? I think it should be `Erstellen und weitere.`
Maybe it would be good to move the logic to a helper function, to keep it simple?
Why change the `keyword` type? I'm wondering if there's a reason to change it to `keyword` instead of `keyword` since it's more likely to break things that need to be changed to `keyword`
Is this a "S2" thing? Shouldn't the name be "s2".
I'm curious why `TogglePrefetcher` is needed here. The `TogglePrefetcher` is already used in the test, so I think it should be removed.
I think we need to revert this change. The fact that it's not a part of the PR.
This should be added to `mne.utils` as well
This is a breaking change, but it is not really related to the change.
This is not the right place to use this method. `getResolvedArtifacts` should return `null` if it is not null. I would use `getAllFromResolvedArtifacts` here
The data-lists setting is not needed.
if we have a winpcapy and a new winpcapy, we don't have to do this check here. We don't have to check for dnet as we already have dnet in the dnet.
I think you should just use `core.asset_defs` here
I think you can remove `strncpy` now, and just use `pathTemplate` in the next line.
I think we should use `one()` instead of `only one`.
I think this should be done for the `require` package.
Add docstring
I think this is a breaking change. We should not change the kinto version.
The `!r` is redundant.
This is a bug fix. I would suggest to move it into ` openerFromtests` if possible.
I think we should make this a property and use it here.
This is used for the other `go` packages.
I'm not sure if this is the best way to do this. `options: {...}` is the only thing that should do is add for the `configFile: false` parameter to the `options`. I think it's the case that `options: {...}` is the right thing to do, and it should probably be the default from the `--env` option.
why is it changed?
why do we have to change this?
Why not keep a "writeencil" method?
Shouldn't this be in a `.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::.. versionadded::............
This should be removed.
I don't think this should be `Expect(OnlySAN, featureset.LongDomain)`
Is this change necessary? It seems to me that the `r_filename` value is not set anywhere.
This should be set to false in `src/main/resources/core/config.yml` (it is used in the `src/main` file).
Can you use the `search.maven` constant?
I think we should change the default to `NET.http` instead of the default to `http`
This supports all UTF-8 strings, which is not really correct. You can also remove this if you want.
I don't think we need to remove the secondary check here, since we are already doing the same check in the other place.
This is a change in behavior, but the rest of the code is still in the same file.
This is the only one that uses the `issueTitle` method.
I think this is the wrong thing to do.
I'm not sure that we need to keep the `single_start` call in the `register_new_style` method.
I think this can just be removed.
This function is not used anywhere, right?
@tnozicka this is not needed anymore
Why is this necessary?
I think it is not needed anymore
I don't think we need to volatile here.
I don't know if it's better to add a `@since`
I would prefer `ASSIGN` and `SAMPLERS` to match the other packages. I'm not sure what the best way to do it is.
this is a bit weird, can't we use `should_receive` here?
I think we need to do this in `stats.py` too, right?
@deads2k i am missing something, but why is this needed?
This file is only used in the `<something>`.
So, I'm not sure if we should add the state to the database?
Line is too long. [82/80]
I don't see why this file is required.
I think we can get rid of this if check and just do `location != null ? properties : Maps.newHashMap();`
should we rename this to `executionproto` or `Config`?
Why did you change the parameter name?
This is a bug fix. The EClient will never return `false`.
`time.Time` is a little confusing with `Time.Time`. I think it would be better to have the same in `time.Time.get` and `Time.get`
Nit: "does not" sounds weird to me
This will cause `TIfIntegration` to never be null. This is because the `ClassMethod` will never be null.
Should this be an explicit `__all__`?
I don't think we need to do this, we can just remove it. We don't have any other API that we can do.
This is the main change. I'm not sure if we want this to be a separate PR. I'm not sure if we can get rid of this. I'm just wondering if we can get rid of this check. I'm just not sure if this is the right place to put this assert in.
this is a bug fix. We'll want to keep the old behavior for the new version of the new command, but the new command should be the new command. If you want to keep it, please make sure the `winrm_nodes` is the default.
Copyrightright is not needed here, it will be changed
Can we use `!isLobColumn()` instead?
Why not just use cachedValue?
I think this should be `ui-grid-icon-plus-squared`
Why are we removing this?
@franckc @jstewart @johanste @johanste this is the fix for `dryRun`
This interface is only used in `HttpHttp.js` and is also used in `Http.js`.
`if SynchronizableEntitiesPrefix == nil {` would work here.
I think this is the only place where we should be using the path here, but if it doesn't, then I think it would be better to just check for path here.
You can remove this line now :)
This is the only place where we call `_check_vanished()` in a `_tab` is called when the object is not `_check_vanished`.
why not just `profiling_enabled`?
why do we check `c.ssh.forward_agent`? Shouldn't `forward_ssh_agent` be nil?
Can you please add a TODO to remove these lines?
Why do we want to support both `IsBool` and `work`?
This is a good change to me.
Align `#if_disabled` with `current_user.` on line 7.
I think the word "if" is not correct.
I'm not sure why we need the `Row` here
I think we should not be removing this line. It is not needed anymore. The new one should not be removed.
If we are going to use `maxImageRampup` as the second param, should we also check if the image version is not in the database?
I think it would be good to have some sort of flag that the user might not have to know what the default behavior of this error message is about.
I'm not sure if there should be any way to make this configurable.
The `auto schemaMan` variable can be removed now, since the variable is now unused.
Why is this file needed?
This is a very minor thing, but it might make sense for a `interpreter.Eval` function in `Admin::interpreter#service` instead of `Admin::interpreter.Eval`?
Why are we adding these default values?
`default:false` is a little confusing. Why does this need to be false?
I think this should be a helper function, not a function.
remove unused import
`path` should be enough, because it is not a `path`
This is the only change that affects all of these classes, so I removed the `Accelerometer`s
Is there any reason to use `wx` here?
This change seems unrelated to the PR?
Same here, we need to move this test to `HoodieTest.java`.
I don't think we should remove the `||` here
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
I'm not sure if we need to return an error here.
@matt-gardner, I don't know how to fix these files in the PR, but this line is a bit redundant.
Please add a blank line between tags and summary for better readability
Can you make this change in order to avoid the need for the `ss`?
`flattenIndex` can be removed.
This is a bit confusing, as the code is not really a list of strings that should be masked.
Is this going to cause the user to see if the download is not specified?
This file is a bit of an overkill. I think we need to move it to a different place.
Just to make sure: we're not using `dialect` anywhere in the code base, we don't have to use `dialect` here.
It looks like the chan is not defined at the beginning of the function. Can we remove the field?
Is this safe to call `Code`?
@deads2k @smarterclayton I don't think we need to remove this part of the code, as we are not going to be using a block anymore.
I think we can just use open and use `cPickle.load(file(...))`, as we don't want to use open here as we will use open.
I'm not sure if `params.qstring.event` can be an array or `nil` if `qstring.method` is `nil`
Should this be `null`, or is there no way to set the value from `read` to null?
This should be an error.
why is the change here?
I think this should be `dataverse.rserve.password.user`, otherwise we'll have to update the `jar` to `jar.rserve.user` and `dataverse.rserve.password.user`.
`fprintf(stderr, "invalid bus: %s\n", tmp_optarg)` might be a better name
This is not a valid email, but the `from` field already exists.
Why did this change?
This change is unrelated to the PR.
`return LegacyFormHelper::getType('form');`?
I think this will be more readable as `opt_port`
I'm not a fan of this name, but I'm wondering if it wouldn't be better to keep the `name` variable at the end of the loop.
I think we should check for `Unknown` here. Also, we could check `map[string]` for `READY` in `install` and `connect`
I think we should use the `v.length === 24` variable here instead of hardcoding the condition. It is possible that the condition is not always the same as the `v.length === 24` but we don't have to check for `keybase.of(v)`.
I'm not sure why we need the vote vote here.
I don't think this test is right. The assert* is not the same as the one above.
Can we make this `registry.client`?
This is the only change that will fix the bug, right?
this is not correct, we need to make sure we're not running the test right?
This test should be renamed to something more specific. We should probably just make it a `true` or something.
why is this needed ? I don't see any other changes in this PR
Shouldn't we check for Wire?
I think it would be better if we just use the old name of the API.
I think we can remove this from the list above, since it's no longer a list.
This constant should be defined in the constructor
I'm wondering if `BlockChanSize` is a `0` so it can be a `+ 1000`.
I think this is a little confusing. What if we called `plans.reject` or just `plans.reject`? I think that we wouldn't want that.
This is a good idea, but I don't think we need the `UART_RX_PIN` constant for these values. I think we should be able to use the `UART_RX_PIN` constant for the `Ptasks` constant and just have a `Ptasks_api` constant for the value that can be used.
I'd prefer if this only works for both `dns` and `discovery-url`. I would like to use dnsDiscoveryUrl only if the current `memory-` is true, but I think we should use the `memory-` option instead.
Is this needed?
I don't think we need to add `name` argument here, if `key` is `None`, we could just pass the key and use it directly in the key directly.
This is a breaking change. The `TYPE_I16` is not the same as the `I32` field in this class and we should be consistent.
Please use `strlen_type` instead of `strlen`
I don't think you should add the `desiredUID` field to the `TeamRole`. I would just remove the `#TeamPlusKeys` field and just use the `desiredUID` field.
Why is this import removed?
Do we want to log something here? I would expect this to return a ok error and not return a ok error.
This is a breaking change. The passwordModificationTime.getTime() was never used. This is the cause of a bug. It was only used in a test and it should not be deleted.
This check is not needed anymore since we already check `evt.ProcessName`
Isn't it better to use the `Printf` call in the `if` block?
I'm not sure why we need to do this. Can we just do a `this.textContent` instead?
I think we should keep the ActionByActionHash method to avoid calling the method directly.
This method is not needed anymore.
Is this a bug fix?
No need to wrap this in a conditional.
The above logic is further specialised, depending on the kind of the currnent
I think it's better to use `--storage-target` instead of `--target`
Can you remove this? It is not used anywhere else.
Do you need this? It's used by a test and it should be fine as long as the code is being removed.
why do you need this change? It is only used by editController.
This is not a "Process" method, so it's not really a "Process" method, but it's not a method that's used in the "Process" method.
you can remove this now, right?
I don't think the `value` is necessary, because the type is `string`
This should be `task.state.saveTaskIPAddress(taskIP)`
The above step was not able to output the URL, so the `B81FF` was not being set.
This is a private function, I would put it on the top of the file.
This looks unrelated.
I think this line is not needed
I think this is the wrong place for this. This will cause a problem if the environment variable is set and the user has changed the error. I think it should be `if err != nil`.
This test is failing in CI?
I think it's fine to leave the check here, but just in case.
I think this should be `beamResult` instead of `PlanResult`, since that's the only one I'm not sure what the best thing to do is.
I think this should be done in `core/v1`
this is a bit weird. what about `hu.FairbankBlockHeight`? and if we are going the `*` in the year, then we should probably have a `+a.foundationBonusLastEpoch`.
i think we can remove these
` FieldLenField` and `max` are the same. We should use `max` instead of `max` and `max` for all `max` and `max` for all.
I think this can be removed?
I think we can remove this from the previous commit, and remove the `maxQueryLength` value from the `UpUp` field from the `UpUp` field.
this will cause the test failure
I think this should be `@return`
I am not sure if ` FNM_PERIOD` is necessary here?
This is a duplicate line
I think it would be better for this to be a constant in the `appName`. It would be more readable to use the same name as the function in `app.name`.
I think you can just do `onSteadyStateDependencies, onNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNon` and `onSteadyStateCanResolve` to be consistent with the other methods in this file. In general, we don't need to have to do this for the `onSteadyStateCanResolve` methods.
So, if `has_active_subscription?` fails, then `allow_view_open_subscription` will return `nil` if the plan isn't active or not, and `allow_view_open_subscription` is not active.
Why not remove this warning? It's no longer needed.
This change is not needed. The reason is that we're not doing this is because the default is set to `false` in `config/config.json`.
Is this the right place to do this? If so, I'd rather not have a compelling thing.
I think we should add `sign_delete_=True` here. We don't want to use `sign_delete_=False` for the new `glue` files.
Why are we no longer using `omitempty` in `json`? Is it because we are not using it in `omitempty` anymore?
I think this is a good change to the actual fix.
Are we sure that build integration anddeploy is not a valid build integration? This is a very large change and we don't have to build this file in order to build this integration with a build build build build.
Perl_croak() and notPerl_croak() are not needed here.
I think we should use a better name here to make the ` SelectTransactions` optional
I think we should keep this line as well
This should probably be SCAN_WITH_STATS_COLUMNS
I don't think we need this method. It's used by `ReportPipedservice.Query`, but it should be used by the caller.
This should be removed.
why min and not min?
Is this a bug?
This is the `:exercises` constant.
I think it would be more clear if we could move the `export_accept` logic out of the loop (and have it here) to be more explicit and more clear.
I'm curious why we have `EMAIL_RECIPIENTS` set in the controller but not the `PASSWORD` set?
I would prefer to keep the `waitForResponse`, because we don't want to keep the `have` and `have` calls.
Is it possible to have the `!string.IsNullOrEmpty()` check here? I don't think it is a problem, but I'm not sure it's worth.
This will break people using the old API, which is the only one we need for the `/status` parameter.
Is this a valid use case?
Is there a reason we are not using `Threshold`?
This should be removed.
Why not just use the struct?
I think this is a bit too short. The `fieldsFromJWTSvidParams` method is going to be used in the `service` package, which I think would be fine. But I'm not sure what this means.
Why? Isn't the NICely long enough? Or should this check be `if (contract.Visibility != TypeMemberVisibility.Family && (this.Visibility != TypeMemberVisibility.FamilyOrAssembly) {`?
I don't think this is needed, it's just a single line.
This is not the same as the previous one.
I'm curious why this is needed?
It's should be relative imports.
I'm not sure if `allow_None=True` is the right default here. I'm not sure if `allow_None=True` is necessary.
This is the only place where we use the `downstream` interface, so we don't need to add it to the `ClientK3sController` interface.
Just a style change, please double check your IDE is using "go94"
What about a property that has this set as a boolean?
This file should not be included in this pull request.
The `methodUsage` should be `Optional<Type<T>`
Why are we dropping the `eaSendRawTransaction` from the `subAC` implementation here?
@matt-gardner, @dvoytenko why did you change this?
This is a very minor cleanup. I think it's better to move the logic to the "BPF" section, then in the method signature, it will be better to keep it in the future.
The `Bla` is a bit confusing for me. It's not just for the `__a()` type.
It looks like this is the only thing that should not have been `destroy` with the user ids. Maybe `destroy_recids` could be a better name?
nit: can we rename this to `NewWriter` or something similar
I don't see where the events are referenced. Shouldn't this be `obj.focusRedirect` instead of `obj.sleepMode`?
remove this line
why the change from job to "job1" to "job1" ?
I think we should use `SQLite3()` instead of `SQLite3File()`
I'm not sure we should be adding the `Console.WriteLine` here. I think we should be able to just use `Console.WriteLine()` instead.
This is a bit of an overkill. It's not a problem, but I think it should be a different name (sometimes we use `instrumentation.get`) or something.
Can't we just disable the whole `cryptoStore` warning?
Is this needed?
Align the elements of a hash literal if they span more than one line.
I would use `StringFormatConfig` to get the value from the configuration.
Should we use the string "Basic %s" instead of the string "Basic %s"?
I'm not sure this change is correct. BAZEL_TEST_DATA_PATH is used to test a non-testing path. The test should be removed. The test should also be added to the BAZEL_TEST_DATA_PATH when it has been added to a BAZEL_DATA_PATH.
I think this should say something about the actual date, not the date.
This is the only change that affects `granteeList` and the `roleList`, is it intentional to use a different name for the DB?
I think we should be able to just do `subscriptions_subscription_count (subscription)`. In other words, when a subscription was created we would not have a subscriptions.
The `#new` and `#destroy` attributes are now unused
I think this should be done in `init()` and `init__()`
I think we can just inline this method. The only reason we don't useFinal() is for this method is because we are now using this method in the `isFinal()` method.
I think this should be `<a>` not `<a>`. The `random` method is called multiple times and `random-random-random-random-random-a>` is called multiple times. I think we need to do this for `footerHeight` and `random-random-a-random` and `random-random-a-random-a-random-a-random-a-random-a-random-a-random-a-random-a-random-b-a-random-a-random-b.
I think it should be `com.playonlinux.ui.InstallerInstaller`
What is this change about? `start_time` and `host_type` seem to be the same as `start_time`?
@sjenabling I'm not sure why you did this. It seems you're using a placeholder for this, but I don't think this is a good idea.
You can use the `spiffe/agent/endpoints/sdsv2` package instead of the hard coded value.
I don't think we need this. null check is redundant.
I'm not sure we should be using this as the main code base. What is the benefit of having a `Out` function?
This is not correct, we can use the `Exec` method to get the container's `use` method in `use`
I think this is a good change, but it's not a big deal, but it's not related to the issue.
In this case, we should just use `int64` for `commonname` and `64` instead of `commonname`
Another `Pipeline` before `!` is needed. We don't need the `!` in autocomplete, since the other `id`s are already in the previous ` private`, so we can just do `id` in the `Pipeline`
This is the only place where we need to make this public. It seems to be used for the same code as in `getBoundBound`
The `value` value is already set in the scope - it should not be set in the `sanitizeWith`.
I think we need to add this to `mov` too.
Use `tabtab` instead of `and`
Should this be a taskmanager->GetQuestVars?
I think this is not right: `approval_response_path(approver_action: 'approve')` is removed.
Please don't do this... it is not a big import
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
So, if we're going to use `Read` we should just return `nil` for this. This is a bug, and I don't think it should.
This should probably be a `@SuppressWarnings("unused")` instead.
I think we need to keep the `require` below to avoid the `<2`
I'm not sure this is the correct message. The problem is, if the user doesn't have a `compute_trade_REQUIRED_from_story_story_story` then the `compute_trade_REQUIRED_to_story` is not the same, and then the user will see the same message as the message.
why the change here?
I think this is reseted too specific. Can we remove it?
you should use `@command` here
Is it correct that the enumsspb.TASK_TYPE_ACTIVITY_TASK_TIMEOUT is not set?
This is not needed.
What about `iFromPeers.IPBlocks = append(ingressRule.SourceGroups)`? The `iFromPeers` field is a `nil` value, not a `*` value.
Why is this needed if we're already using the `Pending`?
Please add a trailing comma.
I think we should also add `builder.nextPageTokenName(fieldInfo)`
Please update the error message accordingly
I'm not a fan of the name of the flags. I'd rather have a `let` or something like that. We can make it a string, but I'm not sure what the meaning of this is, so maybe it's worth it.
It's not clear to me what this is doing.
Do we need this wrapper? I'm not sure it's going to work correctly for a model.
I don't think this is needed.
This is the only change in this file.
This seems like something that should have been removed.
This is not right. If len(sha1) == (2) > (3) returns len(sha1) and (2) returns (1) we can use (2) with (1) we don't want to use 7 as the value we're in the first place. I'm not sure if we should do it in this PR, though.
We should add `noDuplicates` to these files, otherwise we'll have a better description of what this means.
Nitpick: I'd prefer `t.Fatalf` over `require()`
why change this?
Isn't there a better name? I mean `orderPath`? Also, should we rename the config file to `orderorder`?
Why are these whitespace changes? They are not really part of the diff.
Is this change required?
I'm wondering if we should be using the `object` here instead of `schema`.
I would have used `MySQLType.TypeDuration` for this.
Can you please add a link to the `CMakePackage` module?
I think this import is unused now.
It seems this is not correct. The function returns `0,2`, which is not the case.
How about using a test to ensure that the test is not run at all?
Maybe add a TODO here, if the parameters is not set and the user will get sent?
I'm not sure what the override is for. I'm not sure what it is, but I think it would be good to have it be a flag.
I think this should be `recently_published_first`, since this will be called in a single class (the first one) not the first one
Should this use `\` instead of `\`?
Should be ipt?
I think it is better to use `json.Set()` instead of `json.Value()`.
This include block should be removed.
why this change?
should we delete the Launch Template version in `CreateLaunchTemplateVersion` too?
This is a breaking change.
This is a bit of a nitpick, but I'm not sure what the best way to do is is to do `.split(@').last)` and then `.downcase`?
can't do this now
I think this should be removed. The check is done in `if` block above.
I think this import is not needed
This is a bug fix? This will run the `run_server` instance twice.
`StringUtils.valueOf(type)` should not be null
I think we should remove the `toUpperCase()` call.
These changes are in the wrong location.
Can you add a TODO here to remove the `MetricStreamConfiguration` from `CreateRunner`?
nit: this should not be needed
I think this should be `if (type == Type::None)`. The function is called in `GetValue` and `GetValue` (or `unknown`, `Value`), but the function signature is also called in `GetValue`, which is the only place that is used.
I'm not sure if this is the best place for this. The rest of the changes are not necessary.
This should be defined as int32, not as int64
Why is this changed?
I don't think this is needed
I don't think this needs to be a request.
Can we move this to the log level to avoid the log level?
This is the only place where we need to do this. This is the only place that needs to be used in the test. I think the `Resource` can be removed after `MetricsProcessors`.
I think you can remove the `@`
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Line is too long. [83/80]
`inputs` should be nullable.
I think this is a bit of a brief description. Can you add the `g te` field and `pulumi-pulumi-python` to the end of this function?
This is a bug, as `isAdAdersers(tmp, current currentVNode._dom)` is not null.
I'm not sure if this change is necessary. `Shutdown` is called from `j.BlockServer.shutdown()` so I think it's safe to call `shardServer` instead.
I think we can get rid of the `fraction` parameter here and just do `fraction =period.fraction`.
What's the purpose of this change? I'm wondering if it should just return `peer` or `service` when the dispatcher is running
shouldn't this be `true`?
Should we keep the old plugin?
Nit: I would use a different `getAttribute('alt')` to get the attribute name, `getAttrValue` returns a non-zero value.
We should probably just call it `userscripts` here, so we don't need the `except` here.
This should be `new MongooseBuffer(value.value(true), [this.path, doc])`
This is not needed anymore.
This should be changed.
I think this should be `getCurrentEntityURL()`.
How is this error generated?
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
Is this necessary?
This change is not needed anymore.
It would be better to use `None` here instead of `nupic`.
if (0 == pthread_attr_init(&attr, PTHREAD_SCOPE_SYSTEM) && ...
@jridgewell Is there a way of passing the full `Objects` here?
I think we should check if the PMIX has been loaded, right?
I don't think this should be `true` - `false` should always be false.
I don't see this being used anywhere, is it?
I don't think we should be passing the `None` here
Why was this removed?
This is the only change I can see
I think we should not use this as I think. We don't have to add a new interface to `src/server/client.cs`.
`self._doc.setHtml('{}'.format(self._opt.text)))` is a bit confusing, can you use the `self._doc.setHtml('<b>{}</b>'.format(html.escape(self._opt.text)))`?
I think we should also check for the other attributes here. I think it should be possible for the new attributes to have an enum that the value is not available in the `super.core.store.tests.azkaban.server` namespace.
This is a little odd. The variable `update` is used to create an `var` (which is the default) so I think it should be used instead (the variable `update` is used for the variable name, not just the variable).
This will not work for linux linux, but I think it should be on LINUX_VERSION(2, 6, 27) and H2O_ASYNC_NOTIFY_USING_EVENTFD, which is not the correct one (which is not what it does). I'd rather have the same in LINUX version of the file descriptor, and then we can use the LINUX version of the file descriptor, which will make the version more explicit.
This field is not initialized in `ClassBase`, so I would use it here
wondering if this should be `@ssh.shutdown!`
Is there any reason to not just use `hbasescan_tdb->setSQHbaseTable(TRUE);`?
@vitek-karas @ruflin, if you have the patch command you want to run, I think it should be possible to run `stdout.size()` on the command and then just check that it is not set. I think the code should be in the `patch` package.
Why do we need this?
Line is too long. [81/80]
nit: please revert this change
I would not return here.
I don't think you need to check `self.isFullScreen` here.
I think this should be removed
why are these tests not required?
I think we should just default to `False` and remove this setting.
You need to use the same variable here.
Why not keep this in `struct`?
This can be set to `mConfirmDiscardStarred` (or `mConfirmSpamDiscard`)
I would use `is_string($media->getBinaryContent()))` here.
The field name should be field. This should be more readable
Why not just make this a function?
Can you add a TODO to fix this issue?
This should be a public constant, right?
I don't see a reason to make this a string, but it's not a string.
I'm not sure why we should use the `opNeedsSpace` here.
@tnozicka this is the problem, but is it worthwhile to remove this call in `installedVersions.remove()`? I think it's not a problem, but I think it's not a problem.
This should probably be `options.bridge_command`
Why this change?
This is the only real change in this file. The only reason this is because `SerializableTree` is a `Serializable`, but the `T` is not a `Serializable`.
I think this should be a part of `switch(window)` since it's a part of the component
I think this should still be `disable_se_linux`. The `ED_iptables` function is called by `se_linux`. The `ED_iptables` function is now called by `se_iptables` so it's not a big deal either way.
Is this intentional or was this intentional or was it intentional?
This log line was added in #5333, I don't think it's necessary to have it here
I think it is not possible to use a list of resources, but it seems like a list of resources is not the same as a list of resources, so I think we can avoid that if someone is using it in our own machine.
I'm wondering if we should just have the constructor statically explain why we need to change this.
I think we should check for `readPreference.mode !== 'primary'` here
This test is failing because of the fix.
Should we remove this?
I think this is not right. `cur_path = cur_path.gsub(/\//,'\\')` should work.
This should be `"edit_guidance_alert_dialog"`
This link is not correct. The plugin uses {@link SamplesGenerator} is the return of its coordinates.
I think this should say "add_undo" instead of "add_backbackback"
I think this is a bit confusing, as it's used in a few places. Can you add the variable to the `HandlerList`?
What about the other `navigationManager.tv` methods, like in the other `navigationManager.tv`?
I think you can use `dom.checked !== dom.checked`.
This provides the glue-code in the file that is not in the `Read`. I'm not sure if this is a bug or a bug or something.
I'm not sure this is the right place for this.
Can you add a link to the docs to explain what this table does and why?
I'm not sure this is the right approach, since this is a test, but I don't see where it's used.
@qutebrowser is this a breaking change?
Is this necessary ?
I think we should be able to get rid of this `lvis_v1_instance` instance and let it be there.
Maybe we could also make the info info info.info?
I think `RaiseSingleton()` is a better name since it's a private function.
I'm not sure why we need this. What if we just use a static `JobExecutorTests.class`?
This doesn't look right. It's only used in one of the `check` blocks, but the function name is `(int, int)` and it's `(int, int, str, str)` in the function. It's a bit weird to have the function as a parameter.
The `clone` here is not needed.
why do you use `KindEcsApp`?
I think this is a leftover?
why is this being removed?
I'm not sure if this is the right way to test the key. The key is not passed in the key. It should be `KeyNode.kubernetes.io/hostname` and `kubernetes.io/hostname` to the key.
I don't see any new changes to this file. It was a bug that was causing issues before, but it is not related to the changes in this PR.
I think the `break` can be removed now, right?
I think we can just remove this function and just use `return inbounds` and `return outbounds` directly. It's not really used anymore.
Shouldn't this be a `static` class?
I'm not sure this is correct. The `input_img_shape` is `""`
I'm not sure why we need to call ` dagSeed` here. It's a private method. It should be a `private`
Why are you changing this?
The return type is `bool` so we don't need to return `string`.
I think we should keep the old method to avoid duplicating the code
This is a private function
I'm not sure if this is a good idea... but I'm not sure it's worth it, it's just a thought.
This line should be grouped with the other CI?
I don't think this is used anywhere.
I'm not sure this is a good idea...
Is this not true?
This should be done with the `return null` check above, right?
I don't think we can remove this. We don't have a `pkg/config.go`, so I don't know if it's worth it.
This is the wrong place for this.
This is a bit of a hack. If we don't have any value in the code, then I would suggest to use `.build()` here instead.
I don't think this is right. The `fake` function returns `nil` if `req.Pagination` is `nil`.
nit: `vector` -> `f`
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
I don't think this is used anymore.
`^^6464` is always true.
You can use `RayWriter.Complete` here
This is the only change that affects TF providers. I'm not sure if this change is needed, but it's just a small thing to do.
The URISafeName should be added to the name.
I'm not sure why this is here?
I don't think we need to do this. The original version of `require` is a very generic name.
why not just `return Error` ?
This is not right. It is a bit of an overkill but it seems like this should be done in the `if (_layout.IsThreadAgnostic) {` check instead.
Should this be `LoggerFactory.getLogger()`?
I don't see the reason to use the `no_limiter_drop` in the code.
Why is the `AccountAlias` now a string? Should we use `data.Success`?
This could have been `False`
I don't think this is the correct name. `procCodeA.localeCompare` is the correct name.
I think it is not possible to have this in a separate patch.
I think we can just remove this if `s.scope.ManagedMachinePool.Spec.RoleAdditionalPolicies` check
why not use \_sort_count()?
Why are we adding these to the end?
What if the `getClass()` method returns null?
This field was never used.
Why the `,`?
Can we use `tableName.contains("hive")` instead of `table().toString()`, to avoid creating another table?
This is probably a regression?
I'm not sure if it makes sense for `payments/crypto` to be a directory for some reason. I don't think it's necessary to have a module defined by `mysteriumnetwork/payments/crypto`
Bibliographic is no longer the best way to test it.
Can we use a constant here?
I'd like to move this to a separate `clean_policy_selected()` function. I think that we should move this logic there, in case the `get_settings()` function is called from `clean_policy_selected()` and `clean_policy_selected()` call.
I don't see why this rename is removed. The only reason we are using `hashivault` is that the `hashivault` is used is in `src/main` and not in `src/main`.
Is it possible that the value of x tags are false?
I think we should keep these old days and just remove them.
This import is unused.
CheckErr appears to have been removed as it was before.
This is a good thing. It should probably just be `bool` to be `false` by default. The `dscp<<2` is the correct value to be zero, and the `dscp<<2` is zero, and the `dscp<<2` is the default.
This is not the right way to fix the problem, but I don't think this check is necessary as we have the cxSmiles as the default.
This is a bit confusing, since `self` is a super class. What about `self.param`?
This is a breaking change
why do you need to change entity here? it is a entity that is a string
I think we should be using the `outboundIp` method in `get_api_client.go`
I think this is not needed. The namespace already has the namespace.
@fbo-sassenhagen I'm not sure if this makes sense in the code but I'm not sure it makes sense to have a test for this
I think this was the only place it was used.
We need to ensure this works as expected as expected. The other option is to allow this to be included in the `gasPrice` interface, and not have the ` gasPrice` interface. The `gasPrice` interface is used to return early on this error, so the error is not expected to be invoked.
The variable name is being used only in one place, so we could just change it to `wait`.
Can you add gitea copyright line to header (and keep gogs one next to it)?
I don't think you need to remove `synchronized` here, since you have already added the code.
should we add a check on `meta` to make sure this is only available if the user is being aware of it being present?
This field should be named `Este` as it is a list of objects that are not actually used.
I'm not sure if we need to do this. Just because the Python 3 test case depends on the `testmod` field.
I think this error message needs to stay here.
I think we should be able to get rid of this line.
I think you need to update the `DBDB` to be `DISPLAY: trail` instead of `DB: trail` here, as you have the `completed` key here, as you did on line 539 above.
you can use `return agent.ec2MetadataClient.OutpostARN()`.
I'm not sure if this is a good idea. What about something like `setup_Freeze_case` ?
Can we remove the test_incompatible_with_ch and just test_incompatible_with_ch in this test?
IMO this is not the only place where we have two IMvxs. It is a very good idea to have one of the two.
This should be a separate commit
Is the node used anywhere?
I think this can be removed now that we don't have a hardcoded "artist" option.
Is this related to this PR?
Is this needed?
This is a bit weird, we have to do the `if browser == 'firefox'`. It seems like we are using `self._get_firefox_options()` instead of `if browser == 'firefox'` (which is not true for the `if`).
You could just do `if 'text/html' in 4.4' in 4.4`
This controller uses AccountWidget
This should be removed as well
Is there a way we can do ADC pins for ADC pins, and then ADC pins for ADC pins?
This is not a "messageReceipts" error, but I don't see a reason to change it.
no need for the `ngrok.io`, just use the `url`
I'm not sure this is the right place to put this. I'm not sure if this is the right place for the user to do.
I'm not sure if it is worth the extra `using`
Should this be `StartMetricsSessionParams`? It seems like we're only testing if it is not `immediatelyMetrics`
I think we can use `testGOPATH` instead of `srcDir` for this.
Can we just call this `metric`?
This is not a `Name` function, but a `Status` function.
I think this should be `hardcoded` and `hard *` should be fine.
We should not need to do `3Filter`. It should be `2Filter`.
I think this is a leftover from a previous PR, but I would prefer the same fix as above.
Can we remove the empty string?
why are we name?
nit: this line should be above the group above
Can we add a description of this?
I don't see this in the PR.
Just curious, why is this change in the first place?
why is this public?
Why did you change the default value here?
Can you please rename the method to `_check_<i>` and `_main_<i>`
I think this is not a good change. The new functionality is just a function that does the same thing as a function.
I'm not sure if this is correct or if it's not a problem, but it is a problem, so it should be a problem.
I think this should be a public constant
This is the fix.
I'm not sure this is the right place to put this code in the `CreateCreateCreate` method. It is a good place for the `CreateCreate` method to do anything, but it seems like we should be using the `ReplacementSubstitute` method here.
How about `GetLatestEventsEventsResponse`?
I'm wondering if this will cause the network to fail, if the user hasn't specified a port in the config, and the user hasn't specified a port in the config, and the user hasn't specified it will have the same port as the default peering port, but if the user hasn't specified it will cause the network to be the user hasn't specified specified it will cause the user hasn't specified the default peering port
@tgamblin This change is not needed anymore, as it was in the previous commit.
Can this be moved up to the top of the file?
What if roleText is not roleText?
This is a good candidate for a `<amp-story>` to use `<amp-story>` as the `<amp-story>` to avoid any NPEs.
nit: remove empty line
I think this should be removed.
This is the only place where we need to do this. Can you please change the name of the feedUrl to reflect the new name?
What's the reason for this change? The `tag_3002_col_2` is not used anymore.
I don't think we should remove this line
@alalazo Is there a reason you didn't remove this?
I think it's a little too big for this PR, but I think it's a good idea to have the same `Header` field in the `cancel` method.
The `strncmp` is a `strchr`, which is not a `str`, which is not the correct thing to do.
this is not the same code as the one in the other PR
I think it's better to have a `@ftForkSchedule<C>`
This is the main change that was not needed.
This should be `on activated`
@dvoytenko I don't think this is a good idea, but I'm not sure if it is worth it to have `getOption()` method for `positional`, and it's not a good idea for the `getOption()` method to return `null` for the `positional` method.
This is the wrong way around. If you are using 1100, you should probably check the other way around. If the version is 1100, then you should check the other way around.
This is not a good place to remove it.
`html_safe` is not really a string, so `title` should be `html_safe`.
I think you need to call `subject` here as well.
I don't see where this change is used, it is not the default job itself. ` ProbabilitySampler(defaultSamplingProbability)` is called for `configconfig`.
I think we can remove `generateDeploymentStrategicPatch` now that we don't need to create the `Deployment` attribute.
info() is called twice, this one is already there.
This should use DCHECK instead
Why are we removing the default behavior? I don't think it's needed to have the default behaviour
Why is the `component` being created here?
I'm not sure we need to make this change.
I think we should just make `videoConstraints` an array of `facingMode`.
This should probably be an `validates :published_on` instead. The `validates` is a `class`, so we should have a `validates` attribute that will not be set.
I think this is not right. The `!=` part of the `if` condition is not needed. `sampleHelper.WasmAbi` is not set.
This is a bit of an overkill. It might be better to do something like `Append` or `Append_Append`
This will cause the span to always be `null`. We need to make sure that if the user doesn't have a `entries` attribute then it will be `null`, but the user won't get `null`.
I don't think we need this. The only reason this is because the function `SearchTopology(ctx, req)` is in `TestServiceContext`, but it seems that it should be called in `TestServiceContext`.
The default admin should be set only when a feature is created.
Why did you change these tests? I think `claimFromRewardingFund` should already be set to `MarshalFromRewardingFund` in this file.
`NOGIL gil` can't be set to `false`.
Can you make this a `defer block height` instead? It's not clear what the error is.
Is there an option for the std::swap and std::swap, or is that an existing one?
Why is this change required? It's not related.
I'm a little confused by why this line change is needed. It seems to be the same code as the `Object` method above. I would expect this change to be reverted.
This is the main change that will break the build.
should we add `dataType` to the `out` block too?
The `<` is not used anymore.
What's the difference between the two (and the one above) and the other one below?
I don't think this is needed, `KDbKey` is already in ` ToDbKey`, so I think it is better to have a static constructor.
I think `x.tbk.Size()` should be moved out of here.
Is this the only way we could use `is_AppInsight` instead of `IsAppInsight`?
This is a bit of a hack, but the name of the function is used to be consistent with the rest of the function.
This is the only change that affects the user's configuration.
Why did the change?
It seems like we can get rid of the `CPU` here. It's not used anymore.
this is wrong because `setup_rvm` is a `rvm`
I'm not sure if we should do this now, maybe `TODO: this.Type` or `Set.Set.Set.Set`?
What if we just use `from_ts` instead of `timestamp`?
this is wrong. It will be removed in the future.
You need to use XOR, also use the peer function.
I'm wondering if it's possible that this is an error, but it seems like we should just not have it there.
This file is now unused.
This import is unused
I'm not sure if this is a good idea. It seems to me we should just have an assertion to the user?
Can you add the new parameter at the end? It's a bit odd.
This will be a change in behavior, but it's not the only place that calls this function with a `listUserRepos`.
I think we need to remove `application/path` from `pkg/config/server/auth/auth/_config.html.erb` and `application/key/auth/auth/auth/auth/auth/auth/auth.html.erb`.
Is there a reason for this? We should probably add an additional parameter to `save()` in this PR.
I think we should be able to remove the `_dogStatsDMonitor` property. It is not used anywhere else and should be used.
This is not really necessary. It's just for the default `#ifdef AARCH64 || !AARCH64`
This is a bit of an odd change, as we have already done in `.join()`
This is the only change that affects TF providers. The following changes are in the PR that I've seen seen this PR only.
I'm wondering why this is needed?
This is not correct, the method should be called `isPvpWorld`.
I don't think you need to do this, you can just do `mlvl_confids.append(confidences)`.
`kube-ipvs0` is not a new column, so you can remove `ecessaryExclude` from the config.
This is a bug, right?
This will break if the resource is indeed not configured.
why do we have to export this?
This is the same as `JSON_DATA` in the config file.
I think you can just remove this `IScopeManager` and `IScopeManager#validateServer` method entirely.
I'm not sure if this is the right approach. It should be the existing one. It is not a field, but it should be the existing one.
@mramato do you have a better idea for this to happen in the `Buffer.json` file?
This should be initialized with `@lucene.count`
`_poSSwitcher.ForkchoiceUpdated(newHeadBlock!.Header, finalizedHeader);` should be changed to `_poSSwitcher.ForkchoiceUpdated(newHeadBlock.Header, finalizedHeader);`
I don't understand why you need this? The only place it should be `StandardError` and not `StandardError`? The only place it's `ImporterDiskName` is `nil`, but it's not `nil`.
I don't see where `index_scols` is set, but the value of `column_scols` is set. I think it should be a separate function.
It seems that `map[string]` should be a `string` instead of a `type JSONValue`
What is this for ?
Since we are removing this from `ChannelImplementation`, we can remove `antID`.
nit: I think we should remove the `removeFiles` method from `io.prestosql.sql.util.Map#createFiles()` method
This is the only one where we use idxCurrentSort -1, so we can remove the `long` check.
I think it's better to use a simple number of overloaded methods in the future. It's a little confusing. It's a simple number of overloaded clients, and we don't have to have it as a constant.
why this change? I don't think we should change it
I'm not sure that this is correct. It's not a `convert_to_timestamp` method, so we should be consistent across all of them.
I think this should be done in `if (!isValid) {` and then `if (!isValid) {` after `if (!isValid)`. Otherwise, it would be more clear to check if `!isValid)`. Also if the idea is to not add the check here, then we should check if `!isValid)`.
This is not a boolean, right?
I think it's not safe to do this because `objectName = resource.metaTaskExec.isObjectName(resource)` will return a `true` if the `objectName` is not set. I think we should do it in the `if` block.
I'm wondering if this should be changed to `ReadPassword`?
(style) line over 80 characters
This is not right, we should just add the ADIOS header to the ADIOS module.
what's the thinking behind this?
I think this will not be needed. I think it will be better to have the solicited deserialize inside a function and then call it once.
@jridgewell I've removed this part because I don't know if this is a problem, but it's not related to your changes, so I'm fine with it.
I'm not a fan of this. I think we should just use the "non-default" part.
I think we can just use `Stop` here, as `dao.Stop()` is the default
I think this should still have an `output.Errf` in the `if` block since the `err` already includes the `err` part. It should be `util.Errf` in case of `output.Errf`, not `err`.
can you please remove the `logEvery.C:` in the `select` block?
This is not needed anymore.
I'm not sure if this is a good idea... Maybe it's better to just use `team` instead.
this should be `</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</</
This will break if the `ChangeForReader_t(*sit)` is set to `false` and the `REQUESTED` is set to `false`.
`Word dependencies` is not used. It can just be replaced by `anAttach` with `lodash` and `they` with `lodash`.
@matt-gardner, what does `avroSchema` do in the `public` class do? I think we can remove it from `avroSchemaUtil.convert(avroSchema).asStructType()` in favor of adding the package to `avroSchema`
nit: we can remove this file entirely as we can no longer export the file. We can remove `GoogleComponents/data` as it's not used anywhere else and we can remove it.
I think we should also check that the columns is None here.
I think this can be `continue`
I think we should be able to use Tls13 here, as we are not using Tls13 directly.
I don't think this is the right place for this.
Should this be a function or something like that? `logger` is the name of the variable.
why is it removed?
I think this is the wrong place to use reduce, it is used in the code base.
reason is not a good idea. It's better to use the global `false` when we use the global `false`.
Please remove the namespace from php-node
I think it would be better if we could just change this to `TLS` instead of `TLS` to indicate it's a bit more clear.
I think we should just check if the response is non-nil and we can't just set it.
I'm not sure we should change this.
This is not a valid value. You should be able to remove the category manager.
It's not clear why we are making the public API public. Can you make it public instead?
I think you can just change this line to be consistent with line 156.
I don't think we need to add these. I'd rather not have them in the struct
I think you should import `org.apache.hunspell. import java.io.*`
I think you need to test this with a new `expect` call.
The other two options are the same, can you move them to the top?
I'm not sure this is correct. It's possible that we don't get the hook, and we don't get the full address from the VM.
I think it's better to change the EMRFS commands and not EMRFS commands.
I think we need to make the `maxrequestbody` flag private, as `caddy-maxrequest` is not a good name.
I think it's better to use the same error message here.
This should be dial.dialect
I think this is a good change. It's a good practice to not use an enum, but it's not really a good thing to do.
This class does not contain `__init__` and `add_int` but I think it is not needed here. The only thing you're trying to figure out what the difference between the two is that the two are there.
@mattpap AKSon is there some reason we don't want to add this? I'm not seeing the `C:\...` in `C:\...` files in `C:\...` files, but I think we should add a note about it.
Just a note that we can probably remove the `if (tmp) { ...}` in line 298 above?
This is not the same as the `valueProjection` logic.
`Status::Error` doesn't have `spaceId`, right?
I think this is a little hard to follow. The package name is `pkg/rpc` and not `pkg/ethereum`.
This is a little hard to read. I think it would be better to use a single string.
I think it would be better to keep this as an annotation. This is a very good change, and also it would be good to have it in a separate commit.
this is a change from the `V4Trie` to a `lookupPath` function, should it be `buffer[:0]`?
Why are we adding this? I don't see it being used anywhere.
can you make it a pointer?
I think we should keep this here, it's not a big deal.
I think it would be more efficient if this was `this.flowFinished` - but the `isKilled()` check will throw an exception.
I don't see the reason why this is not `Workflow Workflow`.
Is the "symbolic link" link really needed here?
I would prefer `@param`
I'm not sure this is the right fix. It should be reverted.
I think we should be able to get away from `node.getSVG()`
Is this a breaking change?
Can we change the signature of `isFocus` to default the value of `isC` instead?
I'm wondering why this is not `freeze`
This should probably go in a separate PR.
This should be a user-facing endpoint.
`addrs.ok()` can return `empty()` if `addrs.ok()` is true.
I don't think you need this. It's used in the `Settings.JSONBool` function.
This doesn't look correct to me. You're calling a `get_column_column` twice in `get_column_column`, which will do the trick. I think we should do it here and instead use `return DataFrame(data._kdf._internal.copy(sampled, scol=scol), ...)` in `get_column_column` instead. It's not clear why we are adding a new method.
Same here, let's remove this. It's not a big deal, but it's just a minor thing.
We should use `time.Minute` instead of `Duration` here. Also, I'm not sure what the right thing to do here is.
This is not right. The logic here is to always call `posNext`. In theory we should be able to remove the `var limit = input.IndexOfAny(new[] { '+', '-', ']' });` altogether.
Can we just check if `checkAvailableStock` is true and use `checkStockNotEmpty` here instead?
I don't understand the reason why this is here. I don't think it should have been here.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
Is this necessary?
I'm not sure this is the correct place to do this. It's an unintended test, and if we want it to be an int, it will return the correct size. I'm curious why this is needed, but it might be worth checking if the cache is not a number of seconds, and then checking if it's a number of seconds, so I'd rather have the correct size.
should we set `http_proxy` to `HTTP_PROXY` here?
This check should probably be done if ($settings['height'] == null)
the variable name is misleading, it is not used anywhere
Can you move this logic to splitSize()?
Why not `supported_` ?
Shouldn't we check for an empty map instead of empty string?
Just curious why we need to use `self._commands["GET_CONTEXT"]` instead of `self._commands["GET_CONTEXT"]` as the key name?
This is a bit unrelated to this PR, but I'm not sure it's worth it. I'm not sure it's worth it. It's not really the case, but the `encoding` should be `throw new ParquetDecodingException("could not read page in col", " + desc, e);`
`positional=False` is a bit ambiguous, can we name it `i` or `positional=False`?
Can this be changed to `ReplicaSetConfiguration`?
I'd rather make a `*` in the `__name__` in place of the `if` condition, and make it `spark_session_local` as well. It's more obvious where we're using `Root_fn` to make it clear that this has a long-only `resource_fn` call.
Is this the default behavior?
you're missing a space after the colon
this should probably be in a try catch block, otherwise it will break the code
I think the default is `None` here
I think we can remove this
I don't think we should do this, it seems like we should do the same in the `NewTest` package.
Why not use an enum here?
Please don't add module to this file. It's used in the header file.
Is there a reason why you wouldn't want to use `ExceptionInformation`?
Is this not needed?
Can we remove the `@Nullable` annotation here?
@tgamblin Should this be changed?
I think this should be added to `isFirstAdmin`, right?
I'm pretty sure this change is correct. I'd rather not have it as `Type` in the name, because it's the type.
This is not needed anymore, right?
why is this being added? is it used in other languages?
The default should be `args.class_wise`.
Why not do the same thing here?
I'm not sure this is correct. I don't think we want to do this.
I wouldn't do that in this PR, it's better to use `config` from the `from config` package. The `config` package is already defined in `config/kinto` package, and we don't do anything with that, and it should be available from `config` package.
Please remove this.
This import seems to not used
`StaticNodes` is a `null` value.
I don't think we should be changing this, but I think the docstring for `verbose` is a little bit confusing.
I'm not a big fan of adding this to `app/views/internal/internal/internal_model.rb`. I think it's worth it for now.
This is the fix for #6327 @jridgewell
This is a breaking change, but it seems unrelated.
This TODO can be removed.
I'm not sure this is correct, if this.process is not set, then it is set to true, but it will not cause any exception, so I think we can remove the null check here.
The first part of the line should be 2 characters long.
This should be done in a try/catch block. If you're going to use it in a followup, you'll need to remove the #ifdef in the try/catch block.
The `translate` should be removed.
This test is failing because of an error. This test fails on the `fan_cache` version of the `sql_test` version.
It looks like the `tls.TlsHandshakeHook` and `tls.TlsStartClientHook` could be deleted instead of the `Start`, right?
This should be done in the next commit
If you introduce a `id` field, it will always be a string, so you don't need to pass it in.
Is it worth adding an `if` here as well?
Can we just return the result here and return the result here?
I think you can just do `&&` and you can use `Aggregate('kill', 'kill')` here
Can we remove this?
I think this code was not doing anything. It was only here before and it wasn't?
Why are we removing this?
If we're using `str`, should we return `undefined` here?
Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
I think we need to do a copy of the original.
I think this is not the only change required for this PR, right?
I think we need to remove the `if` here as well
can we use the `Task engine` for the `Task`?
This is no longer needed.
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
We should add `Filter` to `HttpsConnectionFilter`
The `createQueryBuilder` method should be called only when `null` is provided.
Why not using an empty path here?
Should we use `readdirSync` instead of `readdirSync`?
Why do we need to change this?
This is the only change that affects TF providers. I think we can move this to the `*` package.
I would add a `list_url()` function that returns a string.
this is not a "Oracle" right?
Use `tags_tags` instead of `tags_tags`
This should be a separate PR
I'm not sure if this is correct. The code below is `currentCulture == 'zh-hk'` but if it's not, we can just use `cancellation`
I think we should not need the `QueryVisitor` here.
Line is too long. [87/80]
I think this is a good time to get the environment variable from the server to the server, and we can get the same value as the `os` in the client.
I think this needs to be `ObjectObjectWithSelector`.
Do we need to call `InitContext` on `init()`?
I think this is a little confusing. What if the window is using `window`?
We can use the existing `newProps.checked !== dom.checked` variable instead of this.
This should also be `trace`.
Should we add an example here that will be used for every single time?
I don't think we want this to be the same as the version. I'm pretty sure we can get this working with the new version.
I'm not sure if this is the right approach. If it's just the default value, it's the correct value. If it is the default value, then we should just set it to `1`.
I'm not sure if this is correct. If `addr.ChecksumAddress` will be nil and the value will never be nil.
This was a bug in #9321 so we don't need to change this, but I'm not sure if this is the right place for this to be `ButtonRestart`. It seems we should be able to use the default value for `HeaderRestart`.
I don't think this needs to be stored as a `HeaderHeader` property, since it's only used once.
Whats the reason for adding this?
I think we should add this to `with_options(through: :classifications, source: :classifiable)`
This is the only change I can revert.
I'm not sure this is the right fix. The first part of the code is a bit confusing.
This line is a leftover from an earlier commit. It's a little confusing that the `alias` function is used in a couple of places.
I'm not a fan of this, but we can just skip this, since it's not a root device.
It looks like the `event` is never used?
I'm not sure if this is a good idea, but if we do, I'm not sure we need to handle this. The first `if` is `None`, but the first line of the `if` is the second line of the `if` condition.
I think we can remove the `==` here.
This should be `WindowText`
This was a bug, right? It is not used anymore.
I'd suggest using `(uint64_t)mmap_errors` instead of `mmap_errors`
I think we need to update the docs for this change too, right?
I'm not sure if this is the right fix. This is the only thing I found in the first place, so if we're going to do this we'll have to do it.
I don't think this is needed. It is a new method, so you can just remove the `if` and `return` statements (which is not a blocker).
Why was this removed?
I don't think this is right. `match_low_quality` is the right thing to do. The value of `match_low_quality` is the default value for the user, so I think it should be the default.
Not sure we should pass config here?
I think we should be using the `:param` here and in the other cases, if we want to use the `label` field instead of the `hidden` field.
This should be `pyspark`, not `mlflow`, right?
I think it might make sense to make this `@param {string} direction Declares the direction of the autofill. Possible values: true})`
what's the difference between this and the .py file?
Isn't this going to work? `element` is a `locator` object, not a `element`.
I think we can just remove this condition. This is only for testing purposes right?
@mfojtik why do we need to return `nil` here? I think we should be able to pass a `ctx, func(context.Context)` to `return str(ctx, "false")` and use it in `startCh()` to get the same behavior.
Just to confirm: is it expected that we are not testing this?
What is the purpose of this?
Just to confirm: This change makes no difference. `dep` is used to generate a new `trigger_instance_id`, which is the default value, so it is possible to have a new `dep_status` value.
This is not the only change that fixes the issue.
Do we really want to make these app-readable? I don't think we want that.
Should this be a separate file?
I think this should be removed?
Why the ` -` and not ` - see`?
This should be done in a separate PR
same here about the other change
Code Climate says this is not tested.
this is the same change as above, right?
Why is this sleep needed?
This is not correct. The KV version is not the same as the meta from V1. This is the KV version.
`V0` is the new name. It is a bit confusing to have a version number.
I'm a little confused by this, why is it `/wow` and not `/wow`?
Remove empty line?
I think this should be removed.
What's the reason for this change?
I would call it `host.Host`. It's a function that accepts a host.HostFactory that returns a host.Host.
This is a bit of an odd name. I think we should just use `goBackInTime` instead.
You don't need to setLanguage here since it's only used in one place, right?
Is it safe to remove the attribute?
Nit: `new revision<>()`
I think this should be a different commit. It is not clear why we would want to change the name of the list.
This link can be reverted.
This is a little confusing, how does the `http.request` get used in this file?
I think this is a good place for the use of the `instr_get_instr()` method.
Unrelated to this PR, just wanted to point out
isn't this a BC break ? if yes, we should probably change the order here.
This is wrong, we need to be careful to wait to wait to wait to wait to wait for the same notification to wait to wait for the same notification to be the same same as the `StartTime` instance
I'm not sure this is correct. The `is_pe` check is for calling `dump_puppet_log` twice in case it is not present.
There's an extra empty line here
I think this should be moved to `RemoteServerServer`.
I don't think we should be changing this to `AddTxResult?)` if we're not using the correct `AddTxResult?)`. It's not a big deal but I'm not sure if it's worth making the `AddTxResult` a property of the `Transaction` object and then we should just pass the `Transaction` into the method.
I think this is a bit of an odd change, as it is a little confusing to have a `NamePiece` property that is used to generate the file name.
I think it would be cleaner to use `isArrayType(t -> s[0] = t);` instead of `ArrayType` as the whole.
We should also support `InstallCRD` in the name.
I'm a bit confused about this. Why is it not part of the `if` block?
I think you can just remove the nil check since it's no longer nil.
You can remove the `cors` from the cluster-api-api.js
It's a bit odd to do this in `removeIndexIndex` and `removeUserIndexIndexIndexIndex` as we do for other repo types.
Use safe navigation (&.) instead of checking if an object exists before calling the method.
Since `toolbox_` is a `null`, we need to do the same for `if (this.toolbox_.position())`, and remove the `if (this.toolbox_.position)`, and just do the check in `#ifdef` above.
What is the difference between this and `ReSharper`?
I think it is better to add a `plugins = require('../plugins/pluginManager.js')` to remove the `dbConnection`
This should probably use the `clean_not_body` helper method
Do we need to add `@sig`?
Does this mean we have to open a flow for the PolicyRule struct, and not for the policy flow?
This is a bit confusing, how about the `opcache_compile_file`?
I'm not sure what happened here. Why not just always call `get_steps_to_execute`, which would mean we don't get ActiveExecution?
This is a good idea. It should not be inferred.
why change the miner value?
I think it's still not a good idea to have this be a separate commit
This is a bit confusing, if `_WIN32` is defined and `_nil` is defined, then define in `_WIN32` will not be set.
I don't think this is correct, the variable should be moved to the variable declaration.
Is this change necessary?
Maybe `first count`?
I think we can remove `visibilityProcessor.NotifyNewTask` now that we don't have any other tasks in the same package.
I'm not sure if this is the best way to go. It's a good idea to have a default implementation of `DefaultTemplate`, which will make the code easier. I don't think it matters much, but I think we should move this to the `DefaultTemplate` class. I'll merge it in the same PR
This is the only place where I'm not allowed in ARN, I don't think it's safe to use it here. I think it should be possible to check if it is in the state or not.
this import does not belong in this file.
Missing space after #.
why is it ok to use ` bt.currLimit()`?
This is not a valid assertion, but I don't think it's a good idea for the `RSpec::Core::Pending#skip` method to be used in the `RSPEC_SKIP_IMPLEMENTATION` method.
I think it might be better to use `podName` instead of `Type64` for the `omitempty` case.
I think this is not needed since `codecs.register()` will already be called in the codec itself. The `register()` method should be called when there are no codec methods, but I'm not sure if there is anything we can do here.
Is it possible to avoid the invalid name? If not, we can add an assert.
I'm not sure why we need to do this.driver_.getExecutor() is a valid value, so we should use the default value instead of the default value.
this is the actual fix.
I would prefer to use `Widget.count` instead.
This should probably be changed to `dba:ge.message`
Can you add a TODO here that this should be a separate fix and not the one in `backendNum`, since the `backendRes` will be set to the same block as the blockNum?
spire_backoff should be renamed to Cenkalti.
Please keep the line above this (and the ones above in #include).
Why this change?
I would just return WAY_UPDATE here, and call it just WAY_S ALWAYS_UPDATE.
Please add a `tab: clang-formatformat` to the top of the file
@Scottmitch do you know why you did this? I think it's better to use star imports.
I'm not sure if this is the right fix. It is, but the logic is fine.
This is a little weird. I would expect `os.Exit` to be a valid help string and not a `--help` flag. And then you can just do `return os.Args[1] == "help"` instead of a string.
InitialWorkingDir -> namespace packs
Do we need to check that these lines are not explicitly specified?
This should be `if (dstack_offs += 15 * XSP_SZ)` since the value is zero.
I don't see any reason to use ResponseermsOfUse?
This method is not used anywhere.
I don't see the point of this method being called in `send`.
Is this file needed in `DAGSTER_EARLIEST_RELEASE`?
I don't think you need the `hash` here.
Can you add the new param `enableLogging` and `eventLogging` to the top of the file?
It's not clear to me what this means, why do we want it to be evloop_latency_ms instead of evloop_latency_ms?
`_getHash` could be a static method, and use it here.
I'm not sure this is the right solution. The new `podman run` function should be called before the `gen` function.
Is this interface still used?
This seems unrelated. Why are we adding this?
I think we can move this `</p>` to the top of the file. It's not used anywhere else, and it's not used anywhere else, and we don't really need the extra `&&` here.
You can probably just do `isinstance(offline, list)`.
I think this should be a global variable.
This was unused.
Do you really need this? It looks like the only place it's used is when you're doing `window.hasState()`
Why are we removing this check?
`auto` is not the correct cast.
I don't think we should be changing this behavior.
This is the wrong way. It is done in `code()` and `code()` methods.
This is not the right place for this - I'm not really sure what the best way to do it is. This will allow you to have the `skip_links` attribute on the `a` model.
I think this should be a `GetPhysicalDeviceDisplayPropertiesKHR`
nit: `IsDockerEngineRunning` is a better name.
This is the default `image` to `1` (the `1` version is the same as `image`), so I think the `dialect` should be `1.7,2` (the `image` and the `dialect` are the same as `image` (the `image`).
This is not really needed.
I think we should move `act_cfg` to the bottom of the file. The `bias` parameter here should be removed from `reusable_config`.
if possible we can use `profile_format` here.
I don't think this include is necessary. The changelog is the one that the link is used in the `folly/resource.h`.
I think this `dom` is redundant, because it's already a `name === 'class' : 'className'`
why do we need to handle the `row`?
If you make this change, you'll need to use `master` here.
I think this is what we want for the user to know about
why min_x and 0 as the first min_distance?
I think this should be `maxp && !isEmpty` instead of `batchSize > 0`
This was just a bug, we are not using `Internal` anymore.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I'm not sure if it is a good idea to move this up to the top of the file.
@tgamblin Shouldn't we have a way to avoid this in a different way?
I think we should remove this and just do `NetworkConfig` in `config.NetworkConfig`.
This is a breaking change - we should be able to remove the "createPrivateMarkerTransaction" return value from the transaction, instead of passing in a transaction, and just call it directly in the transaction transaction, and then just call it again again.
`DefaultError` should be renamed to `DefaultErrorMessage`
Why not use an "antrea" test to check the top-level test?
I don't think this is right, you should check for the `ap.epType` variable
@kargakis - Is there any way we could do `application/opensearchdescription/opensearchdescription+xml` instead?
This should be `nil`
This change is not related to your change, but I think it is still a good idea to add the `p` option here.
I don't understand the purpose of adding `TableMetadata` to `doCommit` here. The `base` variable is used for `updated`. The only thing is that `base.file()` is `null` and `json()` is `null`. The only thing we need to do is `return (base.file() != null) ? this check is not required.
we can just use detach=True here, for the future: #Resolved
I think it would be cleaner to use `self.__class__.__class__.__a__`, as it is a classmethod.
This should be a public parameter.
Metrics/LineLength: Line is too long. [83/80]
I'm not sure about this - we should be trying to fix the issue in `clear` and the `err` view.
This should be `causalConsistency`.
This change is unrelated to your change, but it seems like it should be removed.
I think this is a bit too broad.
This is a bit unrelated to the PR, but it might be worth noting that this is the one in the past, as it is not related to the other changes.
I think this is the wrong fix. We should not have `array` on the `array`
I think this function could be called `not implemented`?
This class is unused. You don't need to pass `notification` to `class NotificationHolder`
import \* is not allowed
Why is this change necessary?
This is a bit of an overkill, but I think the code would be more clear and easier to read.
This should be `// +build !`
I think this was a bug.
I'm not sure if this is the right default. You should be able to use the `Histogram` variable here.
I think we should keep `[He2]` in the `[x2]`
I think we should just remove this line and remove the `default=None` above.
We don't need to throw `NoeeperException` anymore, we can just remove `NoNodeException` altogether.
Since there are two blank lines in the first position, can we change the parameter names to `validates_each`?
I'm not sure about this change, but if we do, we can keep the message more explicit and check for `Bolt::Logger.deprecation_warning`
This should be `.filter_options()` I think?
This will fail if the ops is nil. This should be `if ops.deleteFromFavorites(ctx, fs.favs)`.
I think this is wrong. This is a breaking change, because we want to be sure that theCount is not zero.
I'm not sure if this is the right place for this, but I don't think it will work.
What if `--HTTPMatch` is nil? Should we check if `--HTTPMatch != nil`?
For consistency, should we add a new `if` statement to make sure the `relationship` is not present and then we don't have a `NullPointerException`.
This doesn't seem like a good idea. It's a little hard to follow. It's the correct call to `optional` on the next line.
I don't think this will work for both the emails.
This is a bit odd. I think the old code was wrong, and it is a bit confusing to see the usage of the method in `DoubleGauge`. I think the code is still a good idea.
This is not correct, we are not checking if the server is in the `if`.
`if (p_jmsg["compress_method"] != nullptr)` is not needed, we can just check if it's null or empty.
This is the fix, but I'm not sure what the problem was here. It is, if there is no errorDialog.showAndWait() is called.
Please add `assert`s
This is a bit confusing to me, since the body of the body is a bit confusing. I'm not 100% convinced this needs to be done in the first place, but the body of the body of the body of the body was not changed at all.
I think it would be better to use `t0 = []`
The border color when the client is floating. The border color will beautiful.border_color_marked
This is not a big deal. You can use `pathlib.Path` instead of `.ts`
Is this necessary?
I'm not sure this change makes sense. I think we need to remove the unused import.
I think you can remove this extra line. We will do ` guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed guaranteed outputs.
You should be able to use `!= null && !$this->getAuthManager()->getAuthMethod();`
I think you can just use `copy->segments != NULL` here.
I think we can move this check to `User`
This should probably be in a separate PR, but we should consider making this configurable.
Is this change required?
I'm not sure if the idea here is to use the `braille-patterns.cti` option. It is possible to use the `TABLES` option, but I think it is a better idea to use the `TABLES_DIR` option.
Is it not possible for this to skip generating a `list` ?
nit: remove empty lines
This is not a valid function, it's not a big deal.
this is not a good idea. `paginate_by_sql` will return a dict if the sql is sql, but the `accounts` is a dict
This should be `compact`
This is a good place to make it clear that this function is only used in a single file.
This is a change in behavior, but I'm not sure why we need to change it.
I think this is a little too bundleder, since it's a `implemented` object, not a `implemented.js`.
why is this not a TODO?
I don't think we should do this. If I am not wrong I'd say that the messages are accepted in `scheduler_messages`.
this is not needed anymore
Is this related to this PR? It seems like this is the same as `getInstanceHandlerDiagnosticListener`
@nmittler why did you remove the `BODY` call here? I think the method name should be renamed `parameterGenerator.getHttpParameterType(BODY)`
Is there an option to pass the `c.locallyCacheResults` to this method? I don't think it's needed.
these changes are unrelated to the PR but I don't think we want to use the `error` status to be present. The status code was not present in this function because it was not being called anywhere else.
I'm not sure we should do the same thing here, but if we do, we can just remove the `l.trackerMu.RLock()` function and use `l.trackerMu.RUnlock()` in the `addWritingCatchpoint()` method, since it is a memory pressure, and not an exception.
This is the main change. The `musicbrainz_id` function does not support the `Mad` field, so it should be the default.
I think we need this in `#if (Array.isArray())`
I'm curious why you did this change. I think the ` stop <-chan struct{}` was not the only one that was not the responsibility of this function.
I think it should be `image.getAuthdata(image, authData)` instead. It would be better to have the docker config be a `Config.Email` and then use that in `Config.io` in the future.
This is a breaking change - the API will not work with the API changes. The API will not work for all API changes. The API will be updated in this PR.
This is the only one I would prefer the `regex` prefix. It is a bit confusing.
`repo.CreateRepo` will return an error if repo.OpenFSRepo fails. I think we should return an error.
Can you please explain why we need this `auth`? It seems like it should be the default.
I don't think this is the correct way to do the job, since the `element` value is always 0, but it's the correct way to do it.
Not sure if this is a good name, we should be consistent.
Line is too long. [87/80]
This change seems unrelated, but the change in behavior is not correct.
is this related to the log level?
remove this line
What's the reasoning for adding this line? It seems like it should be the one in the `handle` function.
I think we should add a `munnerz` package to the API package. The group name is already used by the `munnerz` package. The API name should be renamed to `openapi-gen`.
I think we can use the same naming convention for `QUApi`.
checkCoinbase is always true, this is the default
Is this the only change that affects TF providers?
@kos-aparajit-pratap @kos-aparajit-pratap @kos-aparbitov @kos-aparajit-pratap I don't understand why this is needed
What if I have a `example answer` or `example answer` ?
Can we add a more meaningful name to the name of the context?
is this a typo? if not then this change should be reverted
This is a bit weird. Why do we need to use `uninstall` as a `write`?
You can remove this line entirely. The `semanal_if_key_taken` function will return the value for `RSpec.warn_with <<-WARNING`
Can we have a const for this?
It would be good to have a test that checks whether the body exists and the caller is aware of the `actact_response` method.
I think this can be removed
I think this function should be called `passOnTime`?
This should probably be a constant
This is not related to the issue.
If the user is on the `example_specs_with_formatter` method, should this be `rb:ms`? If not, then why is this needed?
This should default to False.
This is the only change in this PR that I'm wondering why we need to set `OS_VOL_SUPPORT` to true.
I don't see why NULL is needed.
Why is this necessary? It is already in the `if node.nodeName.toUpperCase()` block, right?
This looks like a bug fix. Can you fix it?
This will not be true. The flag will be false when the flag is not `CS` and that is not `CS`.
This should be a constant.
I'm not sure this change is the right fix. It is just a warning that the "default" function will not be called.
can you make it return `false`?
Is it needed?
These need to be moved to the top level
This should be (cci->num_simd_skip) == 0 /* save all regs */ && ...
Please add license header
Any reason for this change?
This is a change in behavior for the new functionality. The `type` type should be used for `--allow-optional`.
I think this should be a `AssertionError`
Metrics/LineLength: Line is too long. [82/80]
I don't think you need to add this here, since you have a `goog:chromeOptions`
I think it is better to be able to use `.branding.dig` here instead of hardcoding it in a variable
Is it possible to have a default setting for this?
I think it should be "DATA", since it's a string, not a string, not a string.
This is the wrong solution, since `contact_us_url` is a url.
whats the motivation for this change? I think it should be `es Element hinzufügen`
I don't understand what you're trying to do with `grpcDescriptors` in this method. Can't you just make it `grpcDescriptors`?
I'm not a big fan of this if statement. If the delete fails, we will not delete this if statement, so we will not have to delete it.
`public static explicit operator` (and similarly for the other `return` statements)
I think we should keep this here and remove the need for the new one.
Maybe `GroupMember` is a better name, `GroupMembers`? It's a `GlobalGlobal`, not an `Validate`
I don't think we can use `SpanType` here. It can just be `service.name`
I think this should be a separate PR
Why do you need this? It's not a big deal.
I'd prefer to have this as a constant in the base class rather than having it here.
`get_download_info` should be called from `mpr.get_file_info`.
Use the new Ruby 1.9 hash syntax.
Why is the return removed?
Nit: please move to the top of the import block
Can we just change `instanceID` to `instanceID`?
I'm not seeing where this dict will be used?
this is a bit weird, why is this needed?
This will never be an `data` right?
This is not needed since it's a private member.
Why are we using `insightfilestore` here?
We should probably just make this `def bisect_round_started` instead of `def bisect_round_finished`, since we're already doing this for the `first` case.
Should this be in a separate pull request?
This was the only place where thepect was used is.
I think you can just remove this \u2E00-\u2E7F\\'` now that you can use the same \u2E00-\u2E7F\\'` method. This will be more readable as you did on the Windows and will be able to use the same \u2E00-\u2E7F\\'` method.
Please add the new stuff to the `mne.core.core.mne.utils` module.
I'm not sure that this is a good idea. In theory, the `out_file` and `out_dir` are not used at all. I think we should just move the `if` to `else` block.
This check can be done in the `if` block, but I'm wondering if we could just have `return c1 - c2;` and then just get the `return` and get rid of `cmp` altogether.
I don't think this should be a separate pull request. It's a good thing to do here.
You can just use `http.Redirect(w, r, r, u.String(), string)` here.
I think we can remove this line now.
Why not use the `ErrorListener` class instead of calling the `ExceptionListener` directly?
This is the same as `ResourceType`.
this should probably be `ChainIDIDID()`
I'm not sure about this change, the `NativeClient.Builder` here is a good candidate for it.
I think we should also check for `violation.get('rule_name', '')` and then we can remove `resource_name` from the `violation` list.
I'm curious why the other two `imports` statements are necessary. The wl_resource_get_user_data is already in the `texture_width` method.
I think this should be a separate PR to use `DATE_msid`
I'm not sure why you're changing this line. It's a bit odd to have a function called `strncpy` that is a `strcpy`, which is a bit of a hacky, but is not a good idea. I'm not sure if the function is actually used anywhere. It seems like this could just be a simple function.
We don't have to change the default package, so I think it is fine.
Why did you remove this?
We can remove this now, it's only called in RatingConfig
You should use `det_bboxes.is_in_onnx()` instead.
I'm not sure why `bucket` is set here
I'm not a big fan of this. If you're using a list here, you should be able to pass the timeout to the `send_resource` variable and then pass the format to it.
Is this a tab break? If not please remove this.
Nice, I think this is a bit more descriptive, since `CMakePackage::test` does not support test-time augmentation. It's a bit confusing to have a more descriptive error message. Also, I would expect `CMakePackage` to be a `id` and `id` (or `id`). What do you think?
Important change. This is not a problem, but it is a problem. I'd rather you add it to the package.
I think it's better to keep `content-pages` and `_r.drilldown` the same way as the other `content-drilldown`.
I think this is a wrong approach. It should be retrying.
Please add a link to the website and link to it.
I think you should be able to use the correct location of `llvm::dyn_cast_or_null` here instead of using `pre-env` directly, but I don't see where you can use `Remove_type`. I don't think there is a better solution. It's not the case here.
This should be a separate commit.
This one is wrong.
I'm not sure if this should be a `final`
This is not the loss of loss_loss_weight. It's not a loss, so it can be improved.
The conflict suffix seems like a little weird, maybe we should just return `true` if the prefix isn't actually specified.
should be `@context`
This should be done in a `internal/internal` folder, not in the `__init__.py`
this test is testing the right thing. I don't know if this is a good idea
This is a little weird. I think we should just call `eni.guard` instead of `eni.pop` and then use `RLock` in `amp-story-path`.
nit: remove the extra parenthesis
We need to keep track of the old values, as they're in the same data.
this is a public API, we should have a similar logic as in `__getitem__`.
This should be a separate commit
This is the wrong place for this. This is the `ti.offsets` case.
Why is this part of this PR?
Prefer `#merge_*` over `#merge_*` over `#merge`.<br>Line is too long. [86/80]
This is a bit of a weird place to do this. If we do, then I think it will be better to have this as an URL. I don't have the idea how to do this, but I'm not sure if we can just use `/usr/local/ghcc_version` as we do for the version in the future.
I think the indenting here is wrong
do you want to set these to 1.0 to be able to use the splat/init attribute?
I don't understand the logic here. Why not `i` (i.e., `if mathrand.Int63n(100000000000000000)`, but the `i = mathrand.Int63n(100000000000000000)` above?
Why are we removing the default value from here?
@smarterclayton I don't know if this is the best place to put it. This change is not related to the PR.
What's the reasoning behind this change?
This is a bug fix.
This change seems unrelated. I'm pretty sure this change is the right place to put this in the PorcelainAPI.
The attribute `SYSTEM_ATTRIBUTE_PREFIX` should be `AttributeAttribute`
I'm not sure this is needed.
I think this should be `allErrs = append(allErrs, err)` and then `DurationCron(in.Spec.Scheduler.Cron, schedulerField.Child("cron")` since it's an `Error` in the `podchaosSchedulerError` case
This is a bug fix. The error returned from `err` is not being set.
I'm not sure this is the right fix. I think we should be using the `ksql.lock.0` file instead of the `ksql.lock.0` file.
Why did you remove this?
Is this change necessary?
Does the `tables.lock` lock need to be set?
This is a change in behavior, but I'm not sure if this is the right place for this?
This one is a little odd. I'd just put the `gles2_texture_in_context` first. It will be better if we can use it in a separate PR.
Is this change necessary? I don't see it being used anywhere.
This seems like a good candidate for a `respond_to?` method.
$char is not a '\\', it is a variable.
Please revert this change.
no need for brackets.
Why not use `===`?
This is a bit weird. I think it would be better to use a `Account` or `AccountInfo` instead of the `@return` statement.
The original version was correct. This means the linux will be parameterized so we don't have to check both linux and windows linux.
This is a bit weird. My first thought was that we're using a `workflow` field in the code and we're always in an empty source, and it's the same as the "source". I think we should just be able to use `len(false)`.
I don't think we should change the response here.
This line should be removed.
This is a bug fix. We should be looking for a lot of these values to be able to use "list" as the name, but we don't have to change them in this file.
Style/IfUnlessModifier: Favor modifier while usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
Is this change required?
This can be simplified.
This line will break if `ipsets` is set, and `set` is not set.
This import is unused.
should we also check for `guid` in `gocloud.dev` and `gocloud.dev` ?
This is wrong because the default is `true`
The `Value` and `int64` values are the same. The only reason we need to do the conversion is that `Value` is the type of `New()` and `int64` are the type of `New()` is what it is.
Should we do this in `cache.CreateRuleViolation`?
Why is this no longer required?
I don't understand what is going on here. This is a `UpdateEvent` event, but it seems that we're not going to be using it anywhere. Can we move it somewhere?
I think it would be more convenient if we could add `products` key here, and then add `products.update` to the key in the model.
This assertion is still useful, but I'm not sure if this is a good idea.
This seems to be the same as `updated_at.to_i`, but I think it's better to be explicit here. I'll change it in the future.
The commandLine will be set when we set the appExe to the core domain. This will cause the core domain to be set when the appExe is set.
You can just use `UTF-8`.
This can be imported from `import astroid.brain`
Why do we need a different check for `_corruptedRequest`?
Seems like this should be an option.
Why does this abstract? I don't think it is needed.
why not just `it 'only includes active plans' do`
>is_ipv4_or_v4_mapped_address [](start = 28, length = 1) I'm wondering if this is a network limit.
This is an API break, so it is not needed.
Why is this necessary? It doesn't seem like the place to use ` ChromeDriverCommandExecutor` in this file already.
I think you can remove the `type0.getType().isEnum()` check here and remove the cast to `type0.getType().equals(type1.getType())` check.
Why do you need a dict?
Please add an example of a reason.
I don't think this is the right fix.
I'm not sure why we need to change this here? I think the `last_` log should be done after it's been initialized.
The `prepend` and other similar methods can be removed.
It's probably best to just use a `Field` here, and do it in all places where we use it.
This can be removed.
I think this should be `sess.Close(nil)`
I think this is a good idea to add the `WebSpan` to `SetTag()` method, since the `HttpMethod()` method can be called directly from `HttpHttpMethod()`
This is the reason the `FrameworkDescription` was removed. It was not being used anywhere in the code.
can you please update the `when` to `AwsSdk`?
this should not be changed. It is not used anymore.
I think this is the wrong place for this - `proposals` is not necessarily necessarily true.
The current code is repeated a few times. Should we add a new line before this?
nit: `does not match the service name received in the response, sent %q, got: %q", treq.Service, resSvcName)`
The default value should be the default value, not the default. I suggest adding the default value to the `protocol` field.
Can this be `final`?
This should be `final`
why not use `execSQL` directly?
why do we need both: `ctx.Tr("dashboard")` and `ctx.Tr`
I don't think this is a good idea. The `Simple-*` suffix is the same as `Simple-*` (the same as `Simple_*`) but it doesn't seem like a good idea.
I think this will break if `error` is `undefined`, which will return `undefined`.
I don't think we need a new field for this, it's not a global constant.
I think we should add a `NotImplementedError` here
`Clear` is a `null`, so this should be `!= null`.
Why is this change needed?
this.getDisplayValue will be added for all the new exception types.
this is the one that is about to analytics, it's not true. I would just remove the second sentence.
I'm not sure why we need isinstance() here?
I'm not sure why this change is needed. I don't think we should change the test ID.
I think it should be `/` instead of `/`
I think we should also change the server in the UI.
I think we can remove these now
This is not a valid plan, the name is a scalar, so it's not a valid plan.
I think we should remove the TODO
We need to keep the `AccessibilityIdentifier` parameter for the interface to avoid the generic interface.
Hmmm, I'm not sure why the change is necessary.
Why did this change? It looks like it's an int, and it's not really intuitive to me
This is a bit of a hack, but I think it would be better if we just return `err` and then return `info` here.
The naming here is a bit confusing. I would say that we have a different name for this, but I think it would mean we have a different name. What do you think?
I'm curious, is the idea to use a `RegistryURL` or `env` here? If the value is set to a `Config` then the value should be `Config.RegistryURL`
I think these are unused?
I think this is not right: `IE11 do not support IE11`
I think it would be more readable if we just check CheckSum in `writeLong(true)` instead of checking if the process doesn't have the reverse process
This is not the right place to fix this. I think we can just do it in a single function.
Why is this change necessary?
This is a bit confusing, how does `tableInfo.isCommonHandle()` return a `hasPk` ?
This should be in a separate pull request.
Do we want to log something here?
@jridgewell I'm not sure if this change is correct. I think we should change the behavior for `obj.ndarray` instead of `obj.to_csv()`.
I think we can remove this one.
Is it safe to remove this?
I'm not sure why this is necessary
This is not related to this PR but I don't see any use of `!strings.HasPrefix(None)` in this PR.
This change should be reverted.
This is a bit of an overkill but we could consider it a bit more explicit that we're using this instead of a hardcoded path.
I think we should keep the old name of the keyFilePath, as it's a no-op.
This change is not necessary. I think it's a bit confusing to have a `Optional.of(table.properties)` which does the same for `io.prestosql.spi.TestTable.GetTable().equals(table).toTable().getTable().getTable().equals(table.schema));`
Why are we adding this file here?
nit: I would call this `SecureRandomBytes`, `SecureRandom.GetBytes`
I'm not sure if this should be a different header.
I don't see why you removed this.
ioa_thr is required for users to set this to False. so why don't we add it here?
Can we just add this to `bool`? It's not clear what the expected behavior is, but if we ever do it with `bool` we should just return `bool`
I think this should be a ` teacher`
I think it is better to move the `@NotNull` check outside the if statement.
I think the only place this can import java.util.* should be used.
Why does the backend have to be different than input input? I'm wondering if we can just use the input input instead of the input?
Isn't this always `null`? If not, we should probably remove the `ImmutableList.null` check and use `ImmutableList.isEmpty()` in the exception message instead.
This should have been `I` as a default value. We can't just have it as `public` or we can have it return an empty string.
I think we can remove this.
Is this change needed? It looks like the build is being created in the build
This should not be here, since `opts.spinner.Stop("Error!")`.
I think this should happen after `if (ok == 0) {`
I don't think this is the right place for this. We need to add the logger in this file.
is this change intended?
`proto->set_name(type())` is a string. Is there a reason why you changed this?
Is this file used anywhere else?
I'm wondering if it makes more sense to just add `#include <stdint.h>`? It would be easier to read and add a `#ifndef` below. It would also be easier if we can just add `#include <stdlib.h>`.
I'm wondering if this is the best place to do this.
This should probably use `PublicPublic` for all type hints.
I'm curious, why do we need to do a notification for the email address?
I would use the constant for the `=== null`
This will break compatiblity with the previous version.
This is a bit odd. I think it would be better to have a separate function that takes the value as an argument to this method.
`String domainName, Boolean members, String tagKey` ?
This is the wrong way. If the user doesn't have to click on the warn, it should be the same as the `warn_deprecation` method.
This is a very minor thing, but I think it's better to be explicit here. I'd rather have the `process.argv.length = 1` in a `blitzPath` and then `process.argv.length = 1`.
This needs to be `if not_found` and set the `validate` attribute to `True` if it's not an attribute
I think this will break all the other `return s.driver(ctx).IsPureVolume()` cases.
Is there a way to specify a link to the copyright? If so, I think this file should be removed.
I think we should remove this method
I don't understand why you need to check for `as_index` here? `if not isinstance(as_index, bool) {`
`Module` is not used in the constructor, it is already loaded in `ConnectionInterface`.
I think this should be `const int = 'version'`
I think this change can be reverted.
I think this is a good idea. It might be better to move it to a constant somewhere.
I think this should be a `off` rather than a `off`?
Metrics/BlockLength: Block has too many lines. [39/25]
Can we add a `omitempty` field to these new vars? It's not used anywhere else.
Make string a parameter is a bit confusing
This is a bug, we should not do it. We should only do this if the user is not using the current user.
This should be in the `setUp()` function
This test doesn't test what it does
Is this a bug?
Please remove unused imports.
This should be done using descriptor->GetClass()
This should be `!==`
This is a little hard to read, but it's good to go with the other `TargetType`s in the future.
if stripped is 'PUT', then use 'number'
This seems like a breaking change?
I think this is a good change. The first one will not work with the old one.
I don't think this include is needed. `#include "fmt/format.h"` is a string.
this is wrong
should return error
We could use `Bytes.EMPTY`
I think we can remove this.
We need to make sure the XML is not set at all.
Maybe `--good- case` should be `--user-date`?
I think this should be removed.
why did you change this one?
I think this should use `errors.New`
Is the cast necessary here?
@mmaxim this is a test for this
I think this import is unused.
I think this is a breaking change, but I think it should be a separate commit to fix the issue.
`_this.getValue(path)` is not assigned to `0`
Isn't `parseInt` always true? I don't think we need `parseIndex`, so maybe `!isNaN` is better.
i don't think this will work, we should default to 'ssh'
Why did you change the order here?
I think you should move this to debug?
Does this mean we can't have a mapping in the constructor?
this is a bit weird, why is the SsmpGlobals 0 a global setting?
why do we have to do this?
I think we can remove the `if` condition here and remove the `else` condition.
This should be `#if transformedTo(String)`
@kargakis this change is the bug fix. The bug was breaking because the tests are not failing because of this.
We need to remove the date. It's not used anymore.
Should this be `callerType<T>`?
I don't think we need this method. It seems like we're only using `set_test?` in the `Useristerable_by_id`.
This is a breaking change. It is a problem, but I think it's better to keep it as a field.
Please remove this annotation.
@smarterclayton do we need to handle the `ImmutableMap` here or does the `ImmutableMap` still handle the `[]` on the `toggle`?
why do we need a separate field forSig?
I'm not sure if `django` is necessary here, since `_pool` will be imported from the `TestCase` module.
This isn't right, you can use `bridge.send_command` directly.
Why do you remove this? We don't use `ExtractSomeIfAny()` in the function.
I think we should use `setup_dependent_auth` here.
I'm not sure this is a good idea... but if we're going to make it clear this is the same as the other one we have.
Should we use the `err` variable here?
Why is this change required?
This is wrong, PrepareRequest is never null.
I would suggest to use `VuFind (\d+\.?)+$/` instead of `VuFind` as the default.
nit: I don't think we should get the state directly from the `getConfigName`.
I think it would be more consistent to have the `force` method in `CloseableIterable` instead of creating a `ManifestEntry`.
This class should probably be renamed to ` ArrayInitializationVerbosenessRuleTest`.
I don't understand why you are using `!` instead of `!`... can you just say `if val != 'disable'`?
This test was not working before because of the issue, and now it was not working. It was not working before.
Shouldn't we check that the previous `currentDataLoaded` is not `(section)` and then `previousDataLoaded` is `section`?
This is a bit confusing with the code in `Read`
This is a bit weird. I would have just done a default value of `@changes` and it's a user error, and then we wouldn't want to have it as an explicit user error. I'm not sure how this is supposed to handle it. Also, I think we should be using `@user = nil`, but I think we can just use the `@user` object here.
This import is not needed anymore, it's already in `lib/llvm`
Are these still needed? Are they not being used?
I think we should not have the `&&` at all.
I think it is a good idea to move this check to the `if` block.
Why is this change required?
I think this is not really a bug, because it is not really a `numAccounts`.
I think you should not be able to use this in this PR. It should not be in the `if` block.
Should this be `ctx.NodeInfo(ctx, 0);`?
Why not just remove the `case <-ticker.C:`?
This is the only place where we use `cbor` instead of `Put` in the loop.
If `setup_temp_file()` is called in a different function (and the same `setup_key_is_temp_file`), we should be able to remove this method. If it is not, it will be called in a different function, which will return the correct value.
I think `ResponseTypeProcessor` is a better name.
feat_is_unconstrained should be 0 as well.
Why does the `process` method not call the `apply` method? I don't see any other code in this PR that makes it clear what `process` is supposed to do.
Do we need this?
This shouldn't be needed. The `eventname` is used only in the schema.
available WebEngineWidgets imports are not needed anymore
This can be removed.
should we add a `<h2>` to the list of strings?
This is a bit odd - if the manifest is not in the manifest, then the manifest is in the manifest?
I'm a bit confused by the name of the new parameter. Can we have an enum here for the new parameter?
Nit: I'd use `Console.ForegroundColor = ConsoleColor.White;`
I would prefer to see a `log.log` in `log.py`, but not in the `log`.
All should be ~0x8000
This will be in `bee_` in `pkg/api/core/config/bee_`. We should probably add a TODO to remove this.
The users are not using users. This should be removed as users are not using users.
This option should be in `main` (and the other `site` plugins, `main` and `site` metrics)
Is this change necessary?
I think we should add a `apiextensions-v2` package for this.
I think we should use `pandera<0.8.0` here
I don't see where this is used. It is used to generate permission permission when the node is removed.
The `return` statement is redundant here as `customThreadPool` is not used.
This is the same as the other one.
I don't like this. I think we should have a `setup.go` and a `setup.go` that would be the best way to do that.
Is this the right place for the "test" format? I think we should just pass the "test" format as the first parameter.
I think this should be a `host1.example.com`
I'm not sure this should be the best way to do this. `Tracer` doesn't have a `Tracer.Instance` attribute. We can't change it.
So the same thing here is that if there is an empty string, it is not in theory. If there's an exception, it is also in `trainer`
Why `state_block` and not `type ()`?
Delete the `gopts` here as well.
Line is too long. [87/80]
Please remove the empty line here.
This should be `An`
Why 10? Shouldn't the default be 10 instead?
This should probably be `classification='array'` as well, no?
I'm not sure why this is necessary. The `<text-box-wrapper>` should be the repo, not the `<obj>`
I think this is only used in one place, not a big deal, though.
Is this a good idea? It seems to be a version string.
I don't think it's safe to remove this, since it's not a valid status code.
Is there a reason for this change?
It seems that this property is only used for debugging?
I think it might be better to use `calculernetesResourceState` here, as the error message is not clear to me what it means.
This should be `@JsonProperty`
I would use the `export * from './helpers';` for this.
Style/EmptyMethod: Put empty method definitions on a single line.
Why not use `getCache(getCache(upperClass())` here?
I think we can remove the `!` here.
cur center doesn't have to be updated as well.
This is a public constant, please remove
This is the only change that affects PORAL_CLI_TLS_DNN. It's probably worth it to remove it from the code base.
Is there any reason we need a test for this?
I think this should be ` extract_next_token (const char *begin, const char *end_sentinel, vString *name) { if (isspace(c)) return (bool); }`, otherwise the `isLuaIdentifier` will not be used for the `isspace` method.
I don't think this should be here. If `c.Wireguard.EncryptHostTraffic && hassamplesampleHostTraffic` then `c.Wireguard.ILHostTraffic` should be fine. The check for `if c.KubernetesProvider == config.ProviderAKS` should be fine, but it's probably not the case here.
Can we add an example here?
Can you add a license header here, please?
This could be done in a separate PR. We don't need to add the new parameter to the `driver_name`.
why don't we use the `target` object?
This is a breaking change. It's a very commonly used value that is passed to the config, but it's not a blocker.
If we skip the CNP here, then we can skip the CNP. I think we should skip the CNP here and not skip the CNP.
I don't think you need this method anymore. I can just write `cart.ncr?` instead.
What does `&.` mean?
this function is not used in this file, please remove it.
`c.parse()` can return a blank string. I think it is worth to log it, and return a `nil` error if `c.parse()` fails. This will prevent the debug output.
Shouldn't we use `states.discard` here as well?
I think this should be `.SplitN(tagStr, ",)`
I think it's better to use the container name, because the default value of the container is `""`, not `ports` as the default.
Is `s.shardInfo == nil` redundant here?
I don't think this is a good idea. It's not a problem for the `1` package.
I'm not sure why this is necessary. It's not the case anymore.
why remove this? I assume this is no longer a pointer?
This is a very good change. We're not using `kvKeys` anywhere else, so it might make sense to have it return a promise.
This is a very minor detail, but I think it's better to return a string here, and then check if it's an enum.
I'm surprised this wasn't the intent, but it doesn't mean we need a 250 test. Can we do something similar in the other places?
This is a breaking change, but the `set` function has a default.
Does it not make sense to error out here?
Line is too long. [87/80]
I'm not sure if we should do this. If we do, then we should just pass the cluster as a parameter to Antrea. If we do, then we will have the validation for the Antrea to pass the time, and we should also add the `ClusterIdentity` field to the Antrea as the cluster.
I'm not sure if this is the right fix to use this. I would rather use `c_str` instead.
protoFile is not used in this file. It is used in the `protoFile` class, which is used in the `protoFile` class.
Maybe we should name it `SERIES_DEFAULT_NAME_LENGTH`?
Let us use the same name for the new config.
This should be done in `after('build', 'root')`
I think you can just change the `inviter_name` variable to `invited_by`. It's the same as `iter` and it's the same as `inviter`
I don't see where it is used, but it's not clear why it is needed.
This is an example of how we want to make the number of elements in a number of elements.
I think it would be better to use `.split("/")[3];` here
Can we just use the `context.Context`?
This file should be removed from the file, since it's not used anywhere.
I don't think this is right. It should only happen if theCpuWeight is not set or after theCpuWeight is false.
you can use `QLineEdit` here, no need to check for `s`
is there a reason for this to be an error?
I don't think you can use `ipify.ipify` here.
I'm not sure if this is a good idea.
this should be called on app init
This needs to be added to the `displayResources` description.
Is the `recordCleanupLimit` variable still needed? If not then I think it is better to remove the `recordCleanupLimit` variable.
@sparrowDom Just a thought, are these changes related to the bug fix?
Why is this removed? I'm pretty sure it's the same as the one below.
Should we check that `options` is null before returning?
why use a logger here, this is the one you added to the other resources.
I think this is the right fix. The `self._queue` queue is already `""`, so I think this makes sense.
@smarterclayton can you add `if len(txgroup) == nil &&` here?
We should keep the original implementation for clarity.
This is a pretty big change, as it is a `gendoc.py` file that is used by `ci/__init__.py`.
I think this logic is still not right. We should probably just remove it. We will not see the `Ready` in the `p2p`.
Why not use an int?
Is this one needed?
Why is this changed?
I don't think this is correct, the `AWS` variable is not actually actually used.
I think it's better to have a static method that returns the message, and not the original exception.
I don't think you should do this. Another thing that wouldn't work. Another thing that wouldn't be to add `! isUndefined( decimal )` if `isUndefined( decimal )` wouldn't work. The latter would be a bit more efficient.
I think it's better to move it to the `composite` package. It's used in the `handlehandle` method.
We should probably defer the whole point of this function
I'm not sure if this is the right fix. Can you explain ?
Is this a BC break?
I think we need to keep this?
I don't think this should be a part of this pull request.
Shouldn't these be moved into the `get_todo INT_data_completed` function?
rename this method to `renameClient`, so that it is clear what it does.
Nit: we can merge this into `invalid`
Do we have a test to verify this change is needed?
I would use `SYSLOG_INTERNAL_with_package_active()`
This should be set in `--options`.
I think the name is a little too short for this change.
This is not a valid "OPERATION: isQueueProcessorActive" method. Also I don't think we need to have a "OPERATION: getQueueProcessorActive" property, and the setter should be renamed to "OPERATION: getQueueProcessorThreadState" to avoid confusion.
Plz add a blank line between tags and summary for better readability
The other test is failing because of the traceLogs...
This will be called when `state_exists`. This is an error, and we don't want to have it in the `state_exists` case.
Is this a bug fix?
I don't understand why Math.min(byte[]) val).length is not a valid length, so this line should be checked.
I think the `&& 0` is redundant here. The `&` field is already there.
Why not use `getAPubSubabanURL()`?
If `mask` is undefined we should check `mask.dtype` before calling `get_default_mask()` (which would be a bool).
This line should not be deleted.
This log message is a little confusing.
optional is not a great candidate for an assert.
This is not the right place to put this.
I think it would be more efficient to just use `module` and `all_set` here.
Shouldn't this be org.api.plugin.data?
Since this method only calls async function, why not call `syncIndexes()` directly?
I don't think this is the right fix. I'd rather see `ec::string` as the default, and then it would have the default value.
This is a very good change, but the logic is still not correct.
This is a bit of a weird change, but I'm not sure it's worth the extra `is transluup` check here.
I think this is a wrong name. `swap` is the default value for `Name` and `swapParamTransformer`.
I'm not sure why this is needed
I think you can just return `[]` here.
This is not really correct, as we are already passing the error.
I think we can remove `kegg.Trim()` from here and let it fail if it doesn't exist.
The ID is not the `GroupCloudBackupid` type, right?
Should we add an `@Getter` annotation here?
Hmm, this seems like a good change. I don't think we need to add the `attr_value` attribute.
I don't think this is correct. It's a public API. It should be a public method. It should be an API.
Is this a debug command that needs to be removed?
I don't think this will work. We don't need to add `sample` to `NewActor` so we don't have to pass the input.
This should be `closeUTCTime.In(time.UTC)` since it's an `time.Is` and not a `startTime`.
Do you know what about `tag` or `Tag` means in some cases?
this is not needed
I'm not sure this is correct. The old code was wrong.
This is a very old code path, can we make it a const? It's not a blocker, and it's just a const.
This will cause a nil pointer if no default is set
I don't think this is a good idea. The `DocIdSetIterator` function is used in the `NiFi` package.
I think it would be better to log the file here as well.
You can't use new Ruby 1.9 hash syntax.
I would prefer to use `max_retrials_to_get_pods` here, but I'm not sure what to do with the other types of packages in this file
The `255` characters are less specific than the characters in `AttributeAttributeAttributeDictionary` (which should be the characters) and the `updateAttributeAttributeDictionary` should contain 255 characters or less. If you want to do a "255" here, then the characters should contain 255 characters or less.
Why did you change the order of these to `int`?
This change is needed because `custom_options_options` is a `unitunit` class which is used to create `file_options`. We can't do it in this PR, but I think that's a bug.
you should be able to just use `RSolr.connect` here
I'm not sure if we should keepIP as it is?
I think we can remove `partial:` here as we don't have any good reason to do it.
Is this the only place we want to use this file from the `2014` package?
This should be `else if (quote && value.EndsWith(quote))`
I think it would be better if we close the `cursors` and `obj` after we close the connection
Is there any particular reason for changing the type to `string`? The only reason we have `Policy` is the name of the function is to be the first element in the string.
I'm not sure if this is the right place to put this. I'm not sure if we should just remove the if condition.
This should be changed to reflect the new version.
Why did this change?
I think we should add a "No longer name" to the container. The "containerContainsText" should be "with %s items", otherwise it's the container.
This should probably be `sh.prepare_JAVA_HOME`
I think this `#else` is needed for the `#include` case as well, since it is in the `NOM`.
I think that the `waitForAjax` method should be called before the `waitForAjax` call.
I don't think we need this anymore since it will only be called for a single object.
I think we should have a `IdentifyTrackBreaks` function in `IdentifyTrackBreaks` and `IdentifyTrackBreaks` function in `IdentifyTrackBreaks`, but that would be a bit more clear.
I'm not sure what the best thing to do is is to move the import_mpi4py() to the end of the if statement.
This is the only place where we want this. I think we can remove it
Is this the only difference between these two and `interfaces` (instead of adding an additional field to the `interfaces`)?
Is this change related to the PR?
I don't understand why this has to be false.
Why do you need this `key.append(reinterpret_cast<const char*>(spaceId), sizeof(spaceId))` ?
Can you add the `_` prefix?
Why was this changed?
I would suggest to add LibraryDetailsPanels to LibraryDetails
This should not be `const char * *attrs` since the `persistdir` variable is used in all places.
This was the only place I used it.
This will be set to the `incldued_wf` app name, right?
any reason to use `variant`? It's not clear what this means.
`delimit` -> `delimit.php`
The data variable is not used in this method and will be removed in the `aURL` variable.
This should be 0.
This is the only change that affects `TimeUnit.unsigned`, so we can remove it.
This is not used anywhere, please remove
This is the default, that `data['config']['transport'] = 'local' if target.name == 'localhost'` right?
why not use `@Nullable`?
Isn't this already in `IsEip1234`? Isn't this already set to true in `NPE`?
This is a little unrelated to this PR, but I'm curious why you didn't do it.
If `e` is `None`, `Public` should be `None`, and `Public` should be `None`.
I think this should be a `String` so that the role is always present.
Why do we need this?
I think we should be using `PodSelector` here and instead use the new `s3.jit.PodSelector`
I think the code was correct here, `sendDelta` is the correct value to `minRTT`.
This should be internal.
Use a guard clause instead of wrapping the code inside a conditional expression.<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This test doesn't seem to be working.
why was this changed?
This function is not being used. It is a little hard to follow.
nitpick: no strong opinion
`promptText` is a bit confusing. How about `prompt_name`? I think it's more clear what's going on here.
Should we be using `with_init()` here?
This is the only change in this file. The rest of this file is not related to this PR.
I think you can use the "OPSZ_CACHE_LINE" constant in the config file instead of the hardcoded string, since it's a `64_size` one.
why not use `pb` here?
This is a change in behavior, but the old code is a little confusing to me. We need a migration for this. Can we change the migration and change `add_foreign_key` to `subscriber_id`?
The function name `getBotReply` does not return a nil error, so this function can be called `nil`.
Can this be removed?
I think this will be set in the schema's `properties`?
Style/HashSyntax: Use the new Ruby 1.9 hash syntax.<br>Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
I think it's better to move the property names to `iceberg.engine.hive.enabled`, since they are both both used in other files.
I'm not a fan of doing this, but I think we may need to delete this.
what's the point of this?
I think this is not needed anymore?
I'm wondering why `PasscodeMode` is not a new `newMode` instance? I'm not sure what the difference between the two is the new `PasscodeMode` instance.
I don't think this should be changed.
Can you add a space after the `:`?
I think we need a test for this?
This is a bit weird, why don't we just remove the `!ok`, and then `return ca.Provision` below?
`handler_registered` is not used anymore?
I think this change is still necessary, since we don't want this to work anymore.
This function seems to be repeated in many other places. Can we remove? (i.e. not have a function that has this code but I guess it's a good idea to have some other function that does the name)
We should probably make this `!==` so we can pass the timing here.
This is the only place where I'm missing something. Can't see any other changes in this PR, but I'm not sure if it's a good idea to add a type annotation to this file?
This is the fix, I think
This include block seems to be dead code now, and should be moved inside `md5.h`.
Should this be a public function?
I don't think we should be checking for `CastToClient()->SendSpellBarEnable` here. I would prefer if we just return false.
Rename to `invocation_id = _home_group`
Can't we just return `nil` here?
This is not a valid path
I think we should remove this from here as it's not used anywhere.
I'm not sure if this is the best way to go. The `cachedChanges` is used in a few places.
I'm not sure if it makes sense to have this `execute_task` call in the view. It doesn't seem to call `execute_task` anywhere, but I'm not sure if it's a good idea to call `execute_task` directly here.
The `Spriterite` type of the `c.bridge` is the `chan` type of the name of the method.
This line is not correct. If you're trying to get an empty string (which you'll be rollback), then you should be able to get a string (which is already done with an empty string).
I'm not sure if this change is really needed since `getFormType` is a string.
shouldn't this be `yum -yy-osconfig-agent-agent`?
Can you add a `boolean` tag to this string?
you can use the new test file `import sinon from 'sinon';`
we should use the constant `timeReorderingFraction` to get the value from the string instead of the string.
I don't think diskAttachment is needed anymore.
nit: remove empty line
what if we called ns.WaitmArrayArray(nsType) ?
this is a breaking change
I think we should keep the old method to be able to just use the new method to make the constructor clearer
Why does this need to be changed?
This could be a constant
> the minimum data rate should be received. This property is not needed.
@tnozicka this is the fix, but I think the function name is better
shouldn't it return `null` instead?
This is not a valid value, but the default value is 1.10.
I think we need a test here for that.
can this test be configurable?
This is a bit of a nasty change. If `command` was null, then `quit` will throw `NullPointerException`. If it is, it will throw `NullPointerException`.
I don't think this is the case
Is this not needed anymore?
Why was this changed? Is it related to the issue?
why do we need a different `test(t)` here? It's a no-op.
I don't think we need to catch this here, since `try` is a `try-except`
I'm not sure why this is needed. The test is testing the testing of the testing configuration.
I think this should be called `BATCH_SIZE_MAP_BATCH`
You should be able to use `open_` here.
I'm not sure this should be `configConfigService`? It should be only `configConfigService`.
Can you please add gitea copyright line to header (and keep gogs one next to it)?
should be a constant
I think we should remove the import block
I think it would be cleaner to have a test that checks for this table and then a test for that value
I'd rather use the new test case, it makes sense to have the test code more robust.
This should be print
no need to set `docker` to new BN, just use BN.
I think this is a mistake
This is the only place where I could see the string value being used, but I think the string is still necessary?
Why did this change? I'm not sure if it is the case. I don't think it makes sense to change this, but I'm not sure it's worth it.
I don't think this should be changed.
Why do you need to provide the Azure domain?
I think this should also be `ProgressBar ()`.
Why are we using `errors` here?
Is this method still useful to the caller?
I think we should mention that it's a DynamicMap not a DynamicMap.
Is it possible to get rid of this TODO?
I think we should be using `Metrics.IEnumerable` instead of `using Nethermind.Runner`
Does this need to be a variable? Or is it only for `add`?
This is the only place where we could use the TypeSolver typeSolver, so we could just have a nullptr check.
why are we removing Load from the config?
I think this can be `nil` since we don't use the `block` attribute anymore?
This seems unrelated?
I would say "it doesn't remove the control flow when we are de-indenting"
Same here, we should be able to just use `info` here.
@matt-gardner How does this get merged?
It's a bit odd to have ctx.go be a nil check here?
This is not a good idea. You should use the Heureka class
Would it be possible to set `bbox_head` to `true` in the future?
I think this should be `[--with-modern_grub:2.02].default: no)`
The client can't get the client client directly, the client can't tell which client to get the client. I don't think we need the client. The client can only get the client.
this is the same as the one above
The `CDs` is the same as `CDs`. The purpose of this is to use the `CDs` type, not the `CDs` type.
I think this should be ` AuthStackTrace` instead of `this.stack`, right?
This method name should reflect the new name
This is a little weird as I can see.
I'm wondering what's going on here?
I think it's better to use the `lookupPath` function here, rather than doing the `V4Trie` function in the constructor, so we don't need to pass the `buffer[:0]` to `lookupPath`.
This is the main code of this PR, I think we should move it into `user_message_author`.
This should also have `json:"RefactoringLogging"` so that the agent should generate logs.
This is not correct, `03bulaKeyUtils::dataVersionKey` will be set to `true`.
You should probably use the `log.url` here.
Shouldn't we use `expect:` here?
I don't think this is correct. We should be removing it from the if/else below.
What do you expect this TODO to be?
This is a warning, right? I think it should be.
This is the only change that affects TF providers. It's not necessary to modify this code.
`InUse.delete` is already done in line 264 above
This is a very minor thing. I think we can use the `ErrNotFound` variable name here.
You can use `getConfig` here, as you do below, and you don't need to pass it as an argument.
I think we should still keep the null check here, since the default value is `null`.
Should we use `title` here?
Why do we need a new `Session` here, if the method returns an empty `mne`? If it's a `mne` then it should be `static`
You can remove this dict now, right?
What is this used for?
I don't think we want to log something. If the container is in the network mode, we should log it as an error.
I don't like this. The `create_package` function is only called in one place, so it should be called from the other place.
This is a private function and can be moved to where it's used.
This can be removed. `read_optimizer` is not used anywhere else. The code that is only called from `pylint`.
I don't think we need a string here, we can just use string concatenation.
Do we need a case for this?
This change is not needed, right? It seems like it is only used once in tests.
`hasData` -> `reportArgs`
Why remove this?
Should we log an error here?
Not sure if this is correct but if you want, you can just use `checkout.plan` here.
why did you remove this? It is not used anymore and the parameter should not be nullable
Can this use the same `RowType` in `rowType.getThread().getName()`?
It would be better to update `call_by_position_for_update_position` and `call_by_position_for_update` to be consistent with `call_by_update_position`
`\n` or `\n`?
@smarterclayton do we want the `o.appName` variable in `configStore`?
This is the main fix. The current way we have to call this is `getHost()` instead of `==` and the `==` on the `Host`.
@deads2k @saghul is this a bug or is it just an issue?
why did you change these?
Why is this needed?
"Fail to health check"?
I think it would be nice to also include the trace paths in the `subtrace` section.
Can we add a note that this file is not in the changelog?
Why not just always LessSpecificReturnStatement? That way, it will be able to handle that case
is there a reason why we wouldn't want to log this?
This will be more readable if you just set $(error staticbuild) to true or false, but you can't use $(staticbuild, false) in the else branch.
"Please enter the maximum value" should be "scale" (i.e. the type of the file)
I think this was not used, we should just pass it in to `reproduce()` instead. The reason is that `reproduce()` is already called in `_build()` so that it can't be triggered by `_build()` because it was not called in `reproduce()` so it is no longer needed.
Is this import still needed?
Remove empty line.
This is a little weird. It will be a single string.
This could use a more meaningful name. `ksql-in-name`
This should be a single line string.
Please revert this change. It's not related.
What if the application is not triggered with `2012`? I'm not sure if it will be possible to get the version back from the AMP object, or if it will be installed by the user.
remove this line
I think this is the only change that fixes the bug. It was a mistake and should not be fixed.
This is the only place where we use this method. We can remove it if we do not want to.
Just to make sure, this is the `docroot` path now?
I think this is a good change. I would rather have a `getImplicitRole` function which calls this function, and have the `getImplicitRoleMatches()` return the result of the `getImplicitRole` function.
This seems to be a duplicate of the `NVDA` constructor
I think we should use the template template here, it's not a template template
This should be called before the `ETH66` property.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Do we want this to be an error if we are not going to want to use the `err` variable?
I think this should be a `TestExtendPartialURL`
This is a breaking change. I think it is worth it.
I'm not sure if it is worth the lock, but it seems not that it should be re-introduced if it's not lock?
I think we need to keep these from the package version.
This file doesn't seem to be used anymore
I think this can be `if (!isCloud || protoPkg.contains("cloud", protoPkg.contains("cloud\\/))`
LobTgtFileFlags is a bit ambiguous and can't be used in the LobTgtfile. Could we add a TODO to remove it and add a new LobTgtfile to the list of the LobTgtfile as well?
`info` should still be necessary, because `container` is not `null` in the `w` loop
This is not right. The "OpenSSL_set_tlsext_host_name()" is not defined. You can just do it in the "if SSL_connect(ssl_));
I think we should change the default `readActiveBlockProducersByHeightTests` to be `readActiveBlockProducersByHeightTests`.
This is a change in behavior. It is not needed anymore.
`skip` will return `this.getOffset()` if there are no IOException.
This is a bit of a nit, but I think it might be better to have a `getChild` method that returns a boolean. It would be better to return a boolean.
It's not clear from this PR, but it seems like we should be checking if the `Interceptors` is the same as `tch.ListenAddr(":28941")`
I think we should use the standard library for this.
I don't think this is the right place to put this, since the `env` package is only for pubsub.
I don't think this should be here, but it's not a warning.
I think we should add a `TODO` to make sure we don't run into the default.
Why was this removed?
This is a breaking change, I think the only place this was used was. We should be able to use `validateUnstake` in `validateUnstake`.
This change is not needed, it's only here in a test.
please do not import *
This should probably go in `constants.set_stolen_reg_val`
What is the reason of this change?
This should be `vNode.selected`
Can we use `abspath` directly?
I think we should use a different name. `reduce` is a very common pattern.
This file is not used anymore
Shouldn't this be a `NullPointerException`?
this import should be removed
This is a breaking change, I'm not sure why we need to change this?
@tnozicka I think we need to add the same code as before. This is the same problem.
This is a change in the PR that was fixed, but the old version of the PR was not merged.
This was not used. Please remove it.
Why did this change? It doesn't seem to make sense to me. If you are not using the `maxPendingWrites` anymore it's the default.
I think we should rename this online_weights as its not a good name.
It's not clear to me why we need to change this. If we are going to change the request, why not just change the key?
Can we have a container that is passed to `executorashed executor/container`?
Please use `http.validate`
I'm not really sure how to fix this. I think the `#video_available?` should be on the `purchase` page, so it can be on the `#video_available?` page. I don't see why this is necessary.
This is not the place to use a `RestConst.REST_INVOCATION_CONTEXT`.
why are we changing the build script?
This is not a good idea. It's not the case anymore.
This is a breaking change. We're going to have to make sure that all our calls are being made.
`ConcurrentHashMap` is a `ConcurrentHashMap` (same for `ConcurrentMap` and `ConcurrentHashMap`)
This is a bit confusing to me, but I don't think it makes sense.
Line is too long. [87/80]<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This was a mistake in #5027
This loses the network bookkeeping, so I think we can just call this `re`.
This should be a `x` prefix.
This will fail if `reClosedForm(propDialog)` is not null.
This is the only type of this struct that is used by all of the type of this struct
This is an unrelated change, I will revert
Can you use `String.format`?
I think this should be `disable=False` since the function is used to disable it.
I don't think this is correct.
This file is unused.
Should add a todo for the description here?
I think it would be better to use `TimeType` here instead of `Duration`.
nit: `o.applyGRPCOption` -> `o.GRPCOption`
This seems like it should be `nil`?
Is there a reason why this was nil and not nil?
Is it used anywhere?
We should probably add some sort of `err.Code` to the `BucketAlreadyOwnedByYou` to prevent any possible error handling.
I would use the constant here.
nit: can we remove the extra blank lines?
This is a little unrelated to the change, but the only place I'm using this is in the code.
this was a leftover from the PR
@sparrowDom This is a bug in the past. The default sync was 10 seconds. I think it was 60 seconds.
I think this is the wrong place for this. I'm not sure what the right thing to do is is, but if we're not going to do it.
I don't think this should be a warning, it's not a blocker
I think the SolrException and SolrSetup are already declared in SolrSetup.
@jridgewell Is this the correct behavior? This is a breaking change. If you want, you should use `assert.rbind(5)`. If you want to change `dt.rbind()` then you should change `rbind(5)`, otherwise you'll need to change it.
I think this should be `@pytest.fixture(autouse=os.getenv("KOALAS_USAGE_LOGGER", "")`. It's a bit odd.
I'm not sure this is correct - GasPriceConfig is called before the first transaction transaction transaction transaction is called.
I think this change could affect all the tests that have the `ctor` ctor.
Is this a typo or should we fix that?
Should we do the same for CertificateRequest?
This is the only one where I'm seeing is `sender_gcpbroker` used.
This is a bug. if `lit` is null, `Literal<T> <child> {` will return `false`. I think it is better to throw an exception if `lit != null`
This test should probably go into a separate PR
I would use a `try/catch` as the name of this module, it's more obvious what it does.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think this error message needs to be changed anymore.
>topology_at_rasterizer = graphicsPipelineCI.pInputAssemblyState->topology; [](start = 16, length = 7) nit: we usually don't set it in a variable inside the if block
Can we rename this assets.js to something more generic, like assets.js?
So, I don't understand why this change is needed, it seems like the `detectStale` function has no real value.
I'm not sure this is correct...
why is this a c.HeaviestTipSetCh? I think we don't need to make it here.
The fact that we're using the `AWS` variable here is not a typo. Should we also update the `AWS` variable in the two places?
I think this is the only place where the log is being set.
I'm not sure we want to log the error here. If we don't want anyone to log the error, then we should just log the error and log the error.
Why not just use `===` here?
Please remove this empty line
I'm not sure this belongs here. It is not a problem for testing purposes, and if we are not going to be testing purposes it should be in the future.
Nice catch, I've seen this a lot more than once.
whats the reason for this change?
I think it's better to keep the constructor private and set the value to true.
This will break the `rfile` target.
remove empty line
I don't think this should be here.
I think this should be `get_register_name(reg, DR_REG_P0)` instead of `get_register_name`?
I think you can use `m/44.*.*` to get rid of this.
I think the `Checked` can be removed now since the `Select` method will never be set.
I think this is not the right place for this.
Isn't this redundant? `reset_logger` is already called in `None`. I would just remove this line.
This should be changed in the parent as well.
This is a little odd - it was just a GCing error, but it was not a "random" error.
I think we should keep a hardcoded value for the `subdomain` table
I think this is the only place where we'd need this in the node cache, since there's no node cache.
I think we should keep this in the `namespace Datadog.Trace.Headers` class since it isn't a struct anymore.
This is not used anymore.
@jeherve @jridgewell Is the content_for needed here? I think we should probably change this to `page_link` and `page_back_link` to make it clear what the content type is.
`this.splashWindow.isDestroyed`, `onDestroyed` is not needed
Can we make the version private and move the version back to `Version`, so it's not required?
I would use `update_last_info` here, as in the other places we use `update_last_info`
I think `setTimeout` should be on a new line (i.e. `window.location.reload();`)
This was the only place I used this, so I removed it.
This is the only place where the metric is used is.
Is this still needed? If the method is called multiple times, then the logic is not needed.
This should be a separate commit.
I think it might be worth moving the `messages` to ` publishN` and then use `ctx. t, top.Message` directly.
I'm not sure if this is the right move here, since there is no approve property in the first place.
This file should be removed.
Is this the correct place to put these? I'm assuming they are the same, but I don't see any reason for it to work.
Can you use the `orElse` helper here?
I'm not sure if `show.` is necessary here. `Faker` is a `nil` class, so `kids_musical` will be always `nil` and `show.play` will be `nil` when we remove `show` from the `show`
I'm not sure this will be true. The test will be able to support noop without any change.
I don't think this is needed. We have the `go-ethereum` import above.
I think we need to check that the URL is the same as the one in `sodas_sodas`.
Should we use a `Set` here? If it is, then assign `c.state` is null, it will be `null`.
I'm not sure if it's better to have the `flags.DEFINE_integer()` call at all, but it's a bit more efficient.
Why do we need this?
` Lucene80Codec` has a name like `Supported.Supported`
Can you add a TODO to export this and use `Evaluate` instead of `false` to set the `Medium` flag in the middle of this new `pdfPageOrientation`?
This is the only real change that will cause issues. We should probably add a TODO to remove this.
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
I think we should make this `bool` instead of `bool`
This seems unrelated, can you remove it?
If you add a state key to the state key, this will be added to the next state key.
I don't know how to use this for the `_` but it's not a problem.
This line should be removed
How is this different than before?
I think we should be able to remove the Skip and import from `src/main` now.
I think we can remove these all the fields and just use the `key`
This should be `var tasks = new List<Task>();`
I don't think this change is correct. The only thing I don't see is that the `Class<?` is used is that `src/should be initializedClasses` is not the correct thing to do here.
Might be worth checking for the `organization` variable too, to avoid having to pass it again.
Can this be removed?
Does this work if the input size is not max_cat_threshold?
This is the main change.
This change seems unrelated?
This catch block is a bit confusing, as it is a very small exception, and I don't think we want to catch it in the debug level.
Should we also add a `# noqa` to the docs?
I think this should go before the openshift-webwebwebwebwebweb is not necessary
So this will cause a file to be created if the path isn't found.
This should be a `private` statement, not a `private`.
In the past, `created_at` and `fiscal_year` were already in `created_at`, so this is a breaking change.
I think we should remove these lines.
Why is this change required?
Are you sure it is safe to use `anonymous`?
Should we just use the record from the `name`?
any reason why you changed this to an int?
I'm not sure this change is correct. I don't see a better solution.
I don't think this is needed
I'm not sure this is the right fix, but I don't know why we need to change this in the future. The other place where we use this is `with` and `with` are the only ones that need it.
is it possible to use `org.mule.runtime.module.extension.extension.extension.extension.extension.extension.extension.extension.extension.buffer.client.core.utils.XmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXmlXml
I think we should move this to `require 'pathname'` as it is a special case.
Why is this change required?
Shouldn't this be `short_names`?
Is there an attribute in the node itself? I'm not sure if this should have a attribute, but not a attribute.
I think it's better to use the `service/cloudformation` constant here, since it's used in other places.
@jglick Shouldn't this be `action`
I think this should be `InvalidScalarArgument`
This should be in the `NiFi_NAN_SIZE`
This is the main change. The problem is that we are making sure that the user will always be the same and not the response to the response.
nit: missingAdminRole -> missingSymbol
This should probably be marked as private. We have a lot of different things.
I think this import is unused.
I think it would be better to have a single `waitForResponse` that would do the trick for the existing ` Io` (and have the ` Io` return the right value).
This should probably be a `NewIdentityManager` since it's a pointer
I think it should be `const`
I'm wondering whether we should have a `.zip` constant somewhere in the `lib/` package. It's a little confusing.
why is this line added?
Do we need to handle a signal signal here?
I think this should be `Object.It is important that the returned list is sorted`.
remove this line
so if i'm not mistaken, the `preg_MODE_WORKER` will be set to 0 in this case, so if it's not, then we will get an error. If i'm not wrong, i would expect it to be -1 -2 -1 and -1 -1 -1. If i am not wrong then the test will fail. If i am not wrong, i would think we should do something here?
Can you add a space before the colon here?
I think this should just be `str1.localeCompare(str2, undefined, {string}).string` instead of `str1.localeCompare`
I'm not sure this `if` condition is needed
I don't understand the purpose of this change. Can you please add it to this PR?
This is a bit of an unrelated change, but it seems like we should probably just return an error.
The `.unit` types should be wrapped in `asset`, so the asset is not necessary.
Could we just use `activnd`?
I think we should do this in a separate PR. If we do want to keep this in mind, we should do it in the same PR.
@nmittler - I wonder if this is something that should be `-1` or `-2`, but I don't know if it will be `-1`, or `-1`, but I don't see any reason for the change.
what is the difference between "WarningWarning" and "WarningWarning"? It seems like it is only used by one of our own readers.
I think we can remove the `import`
Why is the order of the order required?
I think this should be a constant. It is used in `substitution` and it is a constant.
nit: can you add the `python(name)` to the `name` above?
Should we call `openvpnPort` here?
the `topology` can be null, no need to check for it.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This needs to stay as the default for the default.
This can be simplified.
I think it would be good to avoid adding SimpleActivityProcessor as part of the constructor and then just pass in in the constructor.
This is the only change that isn't needed. Please remove it.
I think this should be a separate commit
why was it added?
I don't think we want the `asmsecret` in `pkg/util.go` to be consistent with other tests, so I think it is fine to have it here.
Same as other similar code, let's keep it consistent.
Is it possible to get rid of `TODO`s here? I'm not sure what the best way to handle this is.
I think it would be more clear to change the name of the variable `ComputerName $(hostname` to `ExceptionerName` as it is more clear to what the name is.
do we need to add `allowError` to the end of this method too?
I'm not sure if this is the right place to put this.
I think we should have an `Metric` class in the constructor instead of relying on the `AbstractMetrics` instance.
Why are you removing the check?
It looks like `nameLower` is not passed as a slice.
`fn` was a boolean so it can be reproducible. It is not possible to use the boolean value here, but it is still a bit of a hack.
I think it would make sense to make the return type a bit more descriptive. What about a `ClassAndCurrent` method? It could also return a value that would be used in other places.
I think we should use the existing `Timer` var here instead of the `Timer` variable.
There is a typo here: `unique_ptr<ROMol>(...)`
Should this be `final`?
@daniel-beck is this change correct?
this is not the same as the method above, we should just remove the method
I think this is not a bug in the code, if it was not a bug, we should just check for `application` first. This way if we get a bug in the code it's not a bug.
Please use `d.AsAs` instead of `Include`
Can we make this a constant so we can make it clear it's a constant?
@jridgewell Is this change correct?
I don't think we should add this to other types of types. I think we need to add it to the types that we want to get from the types that we want. I think we should just add a new type to `TransactionPolicy` to make sure it is not a valid enum.
Please add a space after the colon here.
I don't think we should default to `null` here. I think we should add an attribute to the default in the constructor and pass it to the value.
this was removed as it was for the other PR, and I removed it for the other PR as it was not used
I'm curious about this one, what was your motivation for removing thegen?
I'm not sure if this is the right way to do this, but if `cfg.gpus` is a `model` it is a ` processed` (which we should probably be able to use here) instead of a ` processed` (or something similar) so we could just use `model. processed(self.gpus, cfg.gpu_ids)`.
Maybe it would make sense to keep this line as debug level and then keep the `info` call?
Why are these values needed?
This is not the correct place to use FileExistsPolicy.Overwrite
This is unrelated to the fix. Please remove.
This is a bug fix.
Should this be `updateIngressRules`?
Why was this made public?
This is not a valid number of objects, it should be an array.
I'm wondering why these are being changed. The `MutableWorldState` can't be `null` and the `blockHash` should be `null`.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
you should also add the `x` parameter to `norm`
I think we don't need this file, it's already in master
This should be done by `Run`
This should go below the other imports, no?
the check for the `own_syscall` flag is done in a separate patch, so that it can be removed.
This is not a valid library.
Why is this not Number Number?
I think this should be an optional parameter.
Why the change from go go to `block`?
I'm not sure if it's worth it, but it's better to make the value configurable. It's more clear what the default value will be.
Why change this?
I'm curious why you removed the else clause here?
i would call it `write`
I don't think this is needed, the default `JAVA_OPTS` value should already be set in the `main` package.
remove the empty line
I think this is not correct, if `tls_version` is a `or 0303` and `tls_version`, it will be `>=0x0200`.
Remove this extra line. It's not used.
I think we can also remove the `test` keyword from `DTA` and just do `DTA.get`
this is the only thing I don't think you want to use mock_ecr0
Is the `ubuntu` intentional here?
Does this work? I'm assuming this will cause any problems.
I don't think this should be here.
You can just use the Object.setPrototypeOf(). It will be better to do that in the next PR.
I think we should also check for `taskManagerImpl` here.
The old version was incorrect. The old version is the new version of the caller.
Why are these not needed?
I think it's a little confusing to have a method called `isLongrunningOperation`. Can we also rename `hasLongrunningOperation` to `isLongrunningOperationOperation` and `hasLongrunningOperationOperation`?
I think this is fine, but I think we should add the password "Basic %s" to the `User` model. It's not really necessary to have the `User` model. It's not clear what the string does.
This is not correct. `scope :updated_at_desc, -> { self.all.order(updated_at: 'true') }` is the default value. It's a bit odd.
I'm not sure if this will work. The Base.error is not expected to be the first end. The second time I see the first digit is a `Base.error` and I think I'd rather have the first end.
I think this should be `width`.
I would suggest `plugins.getConfig("api").offline_mode;` instead.
You should use the default value here.
I think you can remove this?
This is not used anymore
Why is the default value being `""`? If so, I don't think `4` should be a bool.
This import should be removed.
What is the point of the `_ancestorComponent` variable? I'm not sure if this should be a field or not.
Nit: this should probably be a separate commit
This was the only change in the 3.0 version, but I don't see a difference in the code.
This needs to be reverted.
`Bolt::Config.user_path` will be false for this config file as well.
this is needed for all cases where we can't use it in the `else` block
This class is unused. I don't think there's any reason to remove it.
I think this is fine, but I think we can just do `<version>{version, datetime.datetime.now().year}</version>`
I think it's better to use `strcmp(type, "goto error")` instead of `== 0`, as we already check for null.
This is a bit of an unrelated change but the rest of the PR is not 100% convinced about the rest of the PR.
I think this needs to be moved to the `config` package.
This is a very unrelated change.
This is the same as above (on line 280) but the toggle is `False`, so I think the return value of the function is `toggle`.
Why are you setting DevStatus to `1`?
what if there is a strange index?
I'd suggest to keep this field as `@Nullable`
Can we use a more strict comparison here?
You should add a space between the `=` and the closing brace to make sure this is not the right default
I don't think this is the correct solution.
I'm not sure this is correct. The default `command.readPreference` is `true`. I think the default `options` is `true`.
Can we use `block.BlockNumber` to get the root hash from the hash's `to`?
Tiny nit: I would prefer if you'd use a `T` here instead of a `T` here. I would prefer if you could avoid the `T` here.
Line is too long. [81/80]
I think this should be done in a separate PR, but I'm not sure if this should be done in the commit description.
This should be done in the constructor
This will be a change in behavior. This is a change from the config file to the user. The default behavior is to set to false, and then the user will not be set to false. I don't think this will work, but it's not the case anymore.
This can be simplified to `if Travis::Build.config&.ssl&.verify == false` since it will be true for anyone who will see that the Travis build is set.
Why remove the `stopEventWalk()` call?
I'm not sure if this is the right place to do. The root chunk is encrypted, so I would expect the key to be the value of the value of the `ctx`
@smarterclayton do we need this? I think this should be `staging-install-media` or `staging-staging-install-media`
You should be able to remove the `num_scan` parameter from `fscanf` and just call `fscanf` directly.
I think this is fine. `partitions` is a `0` so the `partitions` can be `0`. The `partitions` is not a `partitions` thing.
Seems ` MinimumRate` is used in this class, and `src/service/arguments` is used as a nullable `src/service/arguments`
It seems that this is a `path`?
This change is not related to the PR.
should we just delete all the block calls?
This is an unrelated change, but a separate PR is not needed
This should be Integer.
Shouldn't we check for the "tx.Type" part in `IsWellFormed`?
Why are we adding a new type?
I think the `config` should be `nil` here. The other `init()` function is `nil`, but if we do, we should check `host.XDPEnabled` before calling `host.XDP`.
I don't understand this. You can use ResultCode::ERR_SPACE_NOT_FOUND directly.
I think it might be better to just use `False for ResNet, False` instead of `Res`
This seems like it should be in a separate pull request.
Can you add the exit to these?
I'm not sure this is the right approach. If you don't have any special name for the crt.Spec, it will be an optional parameter that we will not see when the user changes the right name.
I'm a bit concerned that this test is not testing what it does and why it is not. It would be nice to test for the unit test, if it doesn't actually fix it.
I would use `self.spark_version` here
I'm not sure if it makes sense to have a random port for this test.
No wildcard import.
I think we can get rid of the `config` prefix now.
"aggregates changed to operate on"?
This is a bit unfortunate. It's a little hard to see.
This change is not needed, it's already in the `ecs` package
I think we need an enum here to make sure the `FEATURE_CODE_USER_AUTH` is not initialized with `null` value.
Why are we doing this? We don't use `8` for `x` and `x` for `8`.
Align the elements of a hash literal if they span more than one line.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we need to make sure that we are not using the `cancelled` interface anymore. We can remove it.
This is a breaking change. We can remove this.
I think this should be inside the if above, not inside the for loop. If the model contains only one element, then the `var` will raise an error if the model contains only one element.
I think this should also be done in the other PR, right?
I think the code should be in the regex, not in the code
this is the same as `base.size() == 0`, right? I think `numDocs` should be `0`.
This was a mistake in the original commit.
It seems that `bytes.Buffer` is used in other places, maybe we should just use `errors.Buffer` here?
I think we should also include `cert.Status` here.
Is this change necessary?
I think this is a bit confusing, as the `grid` data is a gridded, and not the `saleor.grid` data
This was a bit unintuitive. I'd rather have a method on the `clickPreference` that does the same thing.
I think this is not the right approach, if `deployment.ClusterName == ""`, we should just set `hard.ClusterName` to `True`. I think it is better to just set `hard.ClusterName == ""`, and use `if deployment.ClusterName != ""`.
So we're not going to be using this in any test yet?
This is the only thing that needs to be fixed.
We could probably move this to a constant somewhere, so it's not a specific value
why do you need this? I don't know if this will cause any regression
This should be `Result{}` not `Result{}`.
why not just show=False and out_dir=None?
This was the only change that was necessary.
Is this the correct name? It is used for the same name as the one in `src/p/`
This is a bit weird. I would have put a check in the constant somewhere, like `any_name_type`.
Should we use RTL?
Do we want to keep the old URL for backwards compatibility?
This should be added to the `addFilter` method
I think we should just make this part of DVC (especially in DVC) instead of having the `VERSION_2_0` property in DVC
@tnozicka this is the default change. We should not change it in any way. If it is the case, we can't just change it here.
Is there a reason this file is added?
We don't need this extra line
This change seems unrelated.
This could be simplified to `--no-overlay-type` if you want.
What if s.IsHidden is false? Should this be false?
I think we should be using `clef-signer-address`
This line should be removed.
I'm wondering if the idea here would be to use the new CMakeacher names instead of the the new CMakeacher names.
I don't think this is right either
What's the reason for this change? I don't see the path to the core, but if you are going to make this change the `--prefix` option will be helpful.
I think this is a change in behavior?
This change is not related to this PR.
Use 2 (not 4) spaces for indentation.
This should be done in a try catch block, not here
use `vic-machine` or `vic-machine-machine` instead of `view`
I don't think we need to do this version check here since PodDBAdapter.KEY_EPISODE_NOTIFICATION is the default for the current version.
I'm not sure why this change?
Shouldn't this be `mobilesdk.cs1.my.salesforce.com`
Please add a space between `if (`
Can you add a default parameter to `getMetadataIdentifier` and `getMetadataName` to get the default value of `getMetadataIdentifier()`?
I think we can just use `final`
I would prefer `default Set<T>` to make it easier to grok.
I'm not sure what `for header, value` is here, and if we don't have to include it, it's a bit dangerous.
This is the only change that affects `NETSTANDARD1_3` but not `#else`.
This was the only place where the context was being used. The other package was `context` but the other package was being used.
This is a good one, I'm not sure why this is necessary.
I think this is the right fix.
I think it would be better to move this check to the random conduit.
I'm not sure we should handle this here, but I think it would be better if we call `killRecord.get()` on the same line. This will prevent us from making the call to `killRecord.get()` in the same line.
This is a bit confusing. I'd say "This will be split size for this scan". What do you say?
no need for the msg.
This is the only place where we need a single value, `mins` is `None` and `days` is `None`. The only reason we need to change the default behavior is for `mins` and `days` is for `mins`. The only reason we don't need `mins` is `None`, but we should be able to change the default.
This will be a breaking change for a non-null value.
Why do we need this?
Maybe we can move this to the `src/server/server.py` file so that we don't have a `log.logger.debug` file.
I'm not sure if this is the best way to do this. It seems to me `according to the `javascript` script that we want to support in the `script` script.
This is the only change that affects the code. The `len(imageAlpha)` is not the `true`
In the case where primitives was disabled, we were using the `id` value in `NewUUID()` to get the same number of fields. I'm not sure if it's safe to do here. If we're going to change this, we can do it in a followup PR.
I don't understand this change: if I understand correctly the check is needed, then the check is not needed.
typo here - "don't" -> "not"
This is a part of the fix. I don't see any test coverage here.
I think this change is not correct, because if the block_hosts are equal, the node is run in the block, and the node is run in the block, the block_hosts will not be run in the node. The code will run in the node if the block is run in a node, but it will run the node with an error.
This is the only change that affects this PR
I think we can remove this method entirely.
is this needed anymore?
I'm not sure this is the right way to do this.
this is not needed anymore. It will be removed in the next PR.
I'm not a fan of adding this, as `GoogleSitekitDashboardDetails` is used in some places, so I would just remove it.
I think we can just use `NewVHS(versionHistory)` instead of `NewVersionHistories`
Do not use variables in variable name, use variables like `--executable`.
Can we use the `pants.common.PACKAGE_NAME_FORMAT` constant here instead?
I think we can remove the `editing` component from here as well.
should we continue here?
This is a good test, but I'm not sure what the difference between `NoLog` and `true` here is. I'm not a fan of this test because I don't think we should set `false` to false.
I don't think we need the `empty()` here
Can you remove these lines?
I don't think this is the right approach. We should be able to do something here if the p.ipv4 is nil, but the p.ipv6 is nil.
This is the line that was removed.
This one was missing.
I think we should just make sure that the user is not using the `/home/foobar` package.
I'm not sure why these are all the other tests?
This debug mode is not available in the session, so I'd remove it.
Why did you remove this line?
is this needed?
How about we put this into `misc/Usersiprocess.py`?
I think it is not used anymore, right?
This import should go before the last group
This is the only change that affects TF32.
should this be `h2o_sysfn(socket, fitting_UNIX, SOCK_STREAM, 0) != 0`?
this is the same as above, we could use the function `device_extensions.vk_khr_tricks` instead
This is not correct. It should be "None" or "allowiles"
This can be deleted now right?
This is a little weird. It's the only place that needs to be passed.
isn't this the same as the `NcrDispatcher` above?
Shouldn't the `docker-NOT` be on the `[RuleB(Pets, LivelikeBreakCharmOnInvis, invisible_undead]`, since the `formerpet` can be initialized as a `| Invis [{}]`.
This is a breaking change for the key key, which is not what we want. I would expect a key key to be passed in.
We should probably add some validation to this method and the other `onPlaybackEnded` methods in `onPlaybackEnded`s
Is this related to X11 needed?
I'd prefer if this class is only used in the `DataflowRunner` class.
nit: can you move to `pkg/pkg/pkg/errors/grpc`?
I don't think we should do this.Logger is the only place this Logger is being used.
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
This is a little unusual, but we should probably just make this `from nupic.frameworks.opf.expdescriptionapi import ...` and then we don't need to import it.
This should be an else expression. The `target` should be a single expression.
@deads2k do you want to change this line?
this import should go before the other imports.
I don't think this is needed
Please remove the `@RuleRule` annotation from these tests.
I think we may be missing a `templates` package here. We may also have a `upgrade templates` package in the template template
This is the only change in this file that is in the PR that was merged.
This is not correct. We should probably just make it a `develop` and use it in `add_data` in `add_data`
This is a very unrelated change, can it be reverted?
I think it might be useful to give the results a more descriptive name like `Stack cloudformation`. Also, please add `nullable` for this specific case.
please add docstring
Is this change required?
I don't think this needs to be a string, it is only used once, and not on the `if`
Should we add an `error(ExtraRuntimes, "nil");` check to ensure that it gets set in the `Metrics` list?
I'm not sure this is correct but I don't see the point of having the dotRegex set.
This is a bug fix.
Can we make it configurable?
This seems like a very odd case to me. Why do we need a check for `'collection_id'`?
this is for debugging, I don't see why it should be here.
Why are you using a specific Exception here?
Should be "message_id" or "0123"?
I think we need to check spells[spell_id] here. The spells[spell_feedbackable") is always true. The spells[spell_feedbackable" is not a correct spellable. It is not a spellable, so the spells[spell_feedbackable" is not a correct spellable.
Should we also add this column to the `teams` model too? Or add it to the `aio`?
Why is this test no longer fatal error?
why not just `middlewares`?
@mrajwa504 What are the cases where we don't have a lot of this stuff?
This is a bit scary, but I think the `computed` is the preferred version, it will be better to use `pageTitle: t('admin.textReplacements.pageTitle')`
I don't think you need to set the product, you should set it in the test
nit: remove new line
I think it would better to pass the metric to `metrics.Event` so you don't have to change this method signature.
This is a good name. It might be better to use the `encoder` helper in the future, e.g. `New encoder{lowercaseFields: lowercaseFields}`.
nit: can we just remove the `enrichContext` altogether and just use the `ctx` in the `BaseElement`?
The method `look` can be removed as it is no longer used.
Would it be worth adding an overload of success instead of passing the array?
Can you add a TODO to remove this?
This is a bit odd. What is the reason to use `after()` instead?
I'm curious why this isn't just a single statement?
I don't think this is correct - it's not a problem. `opt_port` is used in a few other places. `port` is used in the code.
I think IEnumerable should be a `KeyValuePair` rather than a `Xmlping`.
`info()` is used to preserve `info.format()` and `format()` methods.
This is a bit of overkill, but I'm not sure how to use the `SpecSticky` here. I think the `SpecPriorityAlias` and `SpecScale` should be in the constructor. I think the `SpecPriority` is more appropriate.
TODO: we should keep the TODO
why remove this },? it should be removed.
This should be `&&` and should be `& Counter`.
I think we should be able to remove these from the core and remove all the `Assembly2`s. We can just remove these now, but I don't see a need to make them all here.
I think this using statement is redundant.
I don't see why we are not using register here.
I'm curious, why the change of `0x30` to `0x80` here?
Please add the check in `IsIntegrationEnabled` method to make sure it is never called.
I don't think we can change the default value here. The default value should be `null` and the type should be `null`, not `null`
I think this change should be reverted.
This should be added to the docs as well.
This is a breaking change. I'm not sure why this is needed.
Should we add these to the other services?
I think this is not right. `computeF.RandomRandomWith(re Blockly.Connection, Blockly.NEXT_STATEMENT)`, so the code below will be removed.
Please remove the blank line
this is a bug fix. I think the error message is not right.
`Files` is used in `bouncycastle`
Some characters in the EG is the characters that the characters in the EG is the characters in the EG
I think this file is not used anymore
I think we still want to keep this import, since the `#js` is not used anywhere else.
I think we should add a new locale component here and let the other methods (with the `ivä`)
Shouldn't you use the `warn` method in this case?
Probably should crash if bad format string
Maybe we should just remove this ServiceReference altogether?
why change it to `DeviceName`?
This should be `engine`
Do we need this for anything else?
This could be a separate PR if you made a mistake.
I think we can use `errors.New` instead of `count`
this if block is not needed
@jglick Should we keep these hardcoded values?
This should probably be moved into `metadata.md` since that's how we're doing it everywhere else.
I think you can remove the `diff` module from the `small` module.
This is a breaking change. It should not be necessary to destroy the Links. The current logic is in the `ResourceLinks` class, so the current logic is in `resource`.
I think this needs an update.
I don't see any use of this. I won't see anything wrong.
This is the only change that fixes the bug that changed. I'm not sure it's worth it.
Can we make this `#if TRUE` instead?
I'm not sure if we should just do this in `NullActivity`, since we're already doing that in `NullHandling.NullNullActivity`.
I think this should be `<%= t("mailer.proposal") %>`
Why did you remove this?
strict use strict strict?
I think this is the only usage of properties that can be removed.
why this?
What's the difference between `__init__` and `__set__` here?
I think the check should be before the `parent.querySelector('chkAutomaticallyAddToCollectionContainer').classList.toggle('hide', contentType !== 'mixed')` check and then we should remove the `-` part of the if statement.
This should go before github, no?
The only thing I'd like to see is that `authentication_front_preference` should be the same as `authentication_front_preference`. But I'm not sure if it is worth the change in the code base. I think this should be a separate PR.
I think it would be better to use the global `rewriteNot`.
This is the only change that affects the server side?
I think we can remove the `flush_enabled` variable and just use `https_enabled = true` here.
I don't think we need this file, it's only used once
@tmds, this is the bug fix
I think we can remove this and just use the default above.
I think we should add a `peer` interface for the `ts` check.
Can you add a TODO to change this to use `can be done with `//`?
@jridgewell I don't understand why this was removed, but it's not used anywhere.
This is not the only change that fixes the issue. The `cygwin` package is installed on `host.cygwin_installed?` but it is only installed in `host.cygwin_installed?`. I'm not sure if this is a good idea, but it's something I'm not sure if it's necessary to do.
I think this should be moved to the other `manifest` package, otherwise the manifest will not have the same effect.
I think we should also check if the task is in the schema and scan is not in the schema.
I would have added this as a separate PR, but I'm not sure if it's worth it to be explicit.
CheckErr appears to not be a problem. We should not have an ErrErr call at all if we don't have a file or it should be a problem.
I think this is wrong, `enum` and `creator` are actually being used in the `AppendSettings` class. The enum values in the `AppendSettings` class are used in both the enum values.
`@return {Array}`, the token doesn't have a `@return`
I think this will break the code in the next PR. The `label` label is always defined, and we will not be able to use the `data` label for each `label`.
This is the wrong place to put this. The "application" part will be displayed in the database without a warning.
Why is this needed?
This should be added to the PR description
I would move this package to `pmd/pmd/sourceforge/pmd.net/license.html.erb`, since it is used only in tests.
I don't understand why we need this test. What is the test doing with this?
I'm curious, what's the difference between `timerIntervalInMilis` and `serverIntervalInMilis`?
This does not belong to any rules.
This change is not related to your change, but I'm not sure how this is related to the issue. I'm not sure how to fix it.
`conf` is a variable, not a class.
why remove this 1.6.5?
Is this TODO still needed?
I'm not sure that this is a good idea. The only thing we want to test is that this is not running at all in tests. We should probably move this to a different place where the `app` function is used.
I think we can just pass in the `if` here.
I don't think we should be using this logic here - we should be able to just use the `sourceNum <= p.cfg.FoundationBonusP2EndEpoch` value here.
This was a bug in master?
This is a good change, but it's a good thing to do with the change in the PR.
I think it is better to use `if (!Email)`.
I think this is not correct. The `dir` above should be removed.
> HPX::m_hpx_initialized = [](start = 12, length = 6) HPX::m_was_initialized = [](start = 8, length = 6) nit: for consistency, let's rename HPX::m_hpx_initialized to HPX::m_was_initialized
I don't think we want to check for `RPCName` here. I think it's better to check for `Enabled` in `info.RPCName` and not check for empty `Enabled` here.
Why is this import moved from the base class?
I think this is not the right approach. It seems to me we should start using restart, but I'm not 100% sure.
We should not need to call the cache twice.
I'm not sure if this should be `compiler: ''`?
Is this necessary? We already store `args` in a local `Query.html` anyway, so we can just remove this if-statement.
I'm not sure if this should be done for every single task.
please add docstring for "concat"
This should be a separate commit
I think we can keep the old name because it is a new one.
I'm not sure if this is the right fix.
This is the only change in this PR that needs to be fixed in a separate PR. The `C` version of the `-` version of the `-` PR is the same, and the `C` version of the `-` is the same.
I think this should be a `==`.
can we do this only when the client isn't specified?
I'm wondering if we should have a test that covers both partitions and result and partitions.
this is not related to the PR, but it seems like a bug in the PR
I think this is the wrong place for this.
@czoido I think this should be `static const`
This is not a good thing to do, but I don't see any reason why we need to check for `this` here
This is a bit of an overkill, as it's a `dict` and not a `dict`.
I think you can remove this
Please remove this
Can we remove this code and use a single string?
return nil ?
the text text should be removed from the commit message
Is it possible that this will be a value from the `Flags`?
Is the `configParams` used somewhere?
What happens if `err.Sprintf` is not nil?
Add `del` as an optional parameter.
i'm not sure if this is the right place for this, but it's still the default, so it's still the right default? I don't think we should change the default, as it's the default.
What's the reason for adding this line?
Shouldn't this be `0`?
Can you use `DateTime::createFromInterface` instead? It's a little bit more efficient.
This function is no longer used. We can remove it from the function.
Can you add a space before the `%,`?
This should be a separate commit
I think this should be done in the `sso.js` file
I'm assuming you didn't have to add this here, but I'm wondering if it wouldn't be needed for this PR, but I don't think it's needed.
I think the `types/types` should be `sigs.k8s.io/apimachinery/pkg/types`
This is not the right place for this. It is used for the time being, but not the last item. It's a good idea to add a method that returns a new one.
Can you add a TODO to remove the `locator` parameter?
I don't see any new code using this.
I don't see any new code using it in this file.
This log statement is not used anymore.
`Vector<byte>` is a static, not an `int`.
This is a private function, so it's not a big deal either way.
I'd rather see this in a single `__init__`.
Ditto on using `print_plugin_list` instead of `validate_resolve_reference`, since it is used in other places.
This is the only change that fixes the issue.
I don't think this line is required.
this was just a copy/paste error
I think it would be good to rename `func()` to `defer func()` and `func.Close()` to be clearer
I'm not sure this is the best way to do this. It's not the right way to pass the `coll FIL` to `Filecoin`.
Is there a reason why you wouldn't just use the channel here?
This should be `@param {string} [options.source, Y]`
Please add `@JsonProperty("other_information_fr")` to the service and then you can remove it from here
(style) line over 80 characters
I'm not sure if we want to add a note to the blob/Start.
Why are you setting `i.nodeConfig.IPv6` to nil if it is not nil?
I think it's better to replace `# `attr_value['string'] is not None` probably probably not required as `attr_value['string'] == value`
`link_hovered` and `link_hovered` should be `hovered_link` (as in `_now_focused._last_hovered_link`) so that the tabbed_browser and the link should be `hovered_link`.
i'm not sure what this means... can't we just use `invitation.email`?
The `using System` annotation is redundant, because it is already there in the `Azure` class
It's not a big deal but if this is a bug, it should be a warning.
@samouri can you check the case here (and the other similar places below) to avoid the `@float`?
Why not use a `@NonNullNonNull` annotation here?
shouldn't we call this `AbstractJavaAccessNode`?
I don't think this class needs to be added to the UI.
This should be `/^[1-9][0-9]+|0|[1-9]`.
The `TDTWriter` was never used.
What do you think about using MyActivityProcessor?
Should we use `str(x[0])`, too?
I don't think this is a good idea. I'd say we should make a constant for it.
stdout is a bit ambiguous, maybe `result.stdout.chomp`?
I think we should have a test to cover the case where we don't have the url, and we don't want to have the url in a future version.
I think it's better to use `optimizer` instead of `save()`
I think it would make sense to move the logic to the `components` loop, then the loop will not be executed.
I'm curious why you changed this line. If the function is called only once, then it will not be called.
It's a little hard to see what this `if c.acc != a` means. Is it the case?
Isn't `make_shared` always true? Can we do it with `gather than `the (current_PHDF5) `
I'm not sure this is the right description, I think we should be more specific and say something about what the user has and how it is being constructed.
This is the only place where we need to MAX MAX_PERTABLE_ENTRY, whereas MAX_PERTABLE_ENTRY is used.
Is this still used?
The `UseLane` is not defined at this point, please remove the whole if statement
This is wrong. The problem is that if we remove the other `iotexproject` package from the other package, then the other package will be ignored.
This will need to be added in the `#if` statement above, as the first `#if` statement will be removed after the #if below.
I think we should add a `clean_color` check here, as I see it is used in the other `user_color` check above.
I think we should use a `createRegistrySelector` helper function.
This looks like it's a bug fix.
Isn't this the default? Isn't the `IS` enough to just be `IS`?
I think this should be set to 0 in case the user is not set to zero.
What do you think about making it a `resource_id` and using `resource_id` instead of `desired_group` and using `each` directly?
I don't see the point of this change, it just seems that the cache is not a property, so we can just use the constant?
Is this related to the PR?
This should be in `QueryConverter.class`
I think we can remove the Deprecated from the v2 package and just use the new one.
I don't think this log message will be useful. The message will be printed for the user to get the log from the `if` block, which will be `nil`.
Should this be Windows.so? I don't think we should be adding anything to the Linux class.
This should only happen in the `init` method. If the default value is false, it will always be true.
It seems like this should be `const` instead of `static` to make it clear what the default value is.
This is a breaking change.
Shouldn't this be `changes` instead of `allAffectedNodeIDs`?
I think the changes to the core function is not needed, the changes below are not needed anymore. The new functionality should be changed.
`all_formatted_lines()` is deprecated because the `fully_formatted` method returns the way that the way it is being used, so I think this method can be removed entirely.
This class is no longer used.
This should be `PolicyPolicyUID`.
@tgamblin I'm not sure this is the correct way to fix this, but I'm not sure it's the best way to go
This should be set to `telemetryEnabled`, otherwise it will be set to `true`.
What does this do when it's a collection? I would expect it to be a collection instead
This seems like it should be an error instead of a context.
Not sure if this is a good change, but I think the logic is fine here.
The `app.SiteLocalSettingsPath` is no longer used in `app.getAuthAuth()`?
Why are we not using the `ecpb`?
I think this is not the right place to do this because it's not returning anything. I think we should return an error instead.
I think it's better to use `new` instead of `cap` as the default.
I think we can use `c. closeConnection(c, _EMPTY_, _EMPTY_, false)` here instead.
I would default to "default" instead of "default"
I don't think we need to test the 512 path, just because it is not a 512 path, so we need to pass in the test against.
Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
@martinwicke This was the only place where I was trying to get rid of the `import` block. I'm not sure if it was the right fix.
This function is not used anymore.
This was a mistake before.
This should be `errors.go`
I don't like the index of the resource here. I think you can just put the index in the DB, and you don't need the `products`.
This is the only place where we use contextgroup.WithContext() instead of errgroup.WithContext(), we can remove the errgroup here and just do the conversion in function.
I'm not sure this is the right way to do this. You should just set the default and use `fragAlignRatio` in the `fragsize` property. This is a different way to set the default.
Maybe `bool` instead of `return False`?
Is this test going to fail? I don't see the `@Test` annotation on `OAuth2LoginWithOneClientConfiguredAndFormLogin` in the `@Test`
Maybe this should be called `m_liveliness.USE_m_liveliness` instead?
This will not work as `hasArray` returns a boolean array, which means we don't need to return the array, right?
Can we use the spanReference and use `BaseElement` instead?
This test should not be included in this PR. The `verdaccio` package is already in `io.js` file.
is this needed?
This should be a new line after `String`
This is a bit unrelated to the PR.
This will not return `cdpTargets` if the value is `/`
I think we should leave the old name here as it is now.
I think we need to add `actualTimeSinceParent` to these services. It would be better to move the logic to `seconds` and then use `actualTimeSinceParent` directly.
Line is too long. [92/80]
This should be `data-item` (and should be `data-item`)
This is a bit of a hack. I don't think we should do that.
Why is this removed? The `GetterKeyGetter` is now unused and can be removed.
can you please change this back to HiveClient_JNI::deleteInstance?
@tmds I'm not sure why this was removed. The `writeConcern` was removed from the `cancel` below.
`log.ID` is a little too vague for me, since it can be a single `log` object.
why is this a pointer?
I think we should just return `PublicLink` instead of `fileName` here
These changes should be reverted, but I think we should keep both the `k_0` and `in re-indexing` values.
I don't understand this. What does this mean? What is the characters that aren't allowed?
Should we make this service default to "Rpc-Service-Header"?
It's not a good place to use `DirOnHost[1] == "."`, but this doesn't seem like it's the case.
This seems like a bugfix.
What happens if we try to catch an exception?
This function is not used anywhere, please remove it
I don't think this is the proper fix.
this.Extensions.ContainsKey("nextMethodName" should be handled internally in this method, right? this will not work.
This was removed because it is no longer used.
I'm not sure we should be changing this. It's not the case anymore.
I'm not sure we want the logic here, but it's a good idea.
I think you should remove these lines
this change is unrelated.
This import is unused.
Maybe we should update this as well? It's not clear from the API.
I don't think you need to do this, the only caller of `icmpType` is in `pkg/config.yml`. The only use of `stateType` is that the data is the data type of the `list`. In the `list` we should be able to use the existing `list` type, and then just pass the existing `dstPort` type as a parameter. This way, if the only way we can do this is, we could just use `stateType` to the new data type of the `url`.
Why was this removed? Is this related to this PR?
Is this an issue or issue that we don't support those new items?
I don't know how to fix this, but this is a bit of a hack. I'm just curious why it's needed.
This should probably be a separate PR, but it's not a big deal either way
This is an unrelated change, but it's not a big deal.
I don't think you can use `Union` here
These changes seem unrelated to the PR.
If we're going to have to use `-1` here, we can just use `execCodec.encodeRow(bytes, -1)` instead.
The `-long` parameter is a bit confusing. Can we change the type to `-integer`?
I think the function name is better. ` fetchUnfinishedExecutions` is not really a function name. It's not a function name, but it is a function name. It's a function that does not have the name of the function.
This is a bit of a problem, but it looks like the build system has a `compilers` that has a `compilers` that has no `compilers` attribute. I think we should be using the stricter's `compilers` instead.
Can you add a space after `//`?
nit: missing space between the `,`
I think we should have a `Query()` method in this context and a `ctx`.
I think we should use `c.dirtyBcache` instead of `c.config` for this
This will need a `Rayl`
why not just `SECTION("Rxn Smart Processing with Dative Bond")`? I think that would be more clear
I'm not a big fan of using this in the code, but I'm not sure what to do about the `pre-ad` command.
What's this condition for?
This is a breaking change. I think the `Getwd` should be a `dict` and not a `dict` (and a few other places in this file).
Please remove this extra line
This looks like a bug, we need to do a clean-up of the test
This will be a bit confusing if the file was created.
I think we can remove `ERROR` here, since it's not used anywhere.
`specifying` -> `element`
Nit: remove newline
import speech is unused
I think this is a leftover from an API change. It's not a problem. We need to make sure that the `NONE` property is not available in the API, but we need to be careful with that.
So now I see the `taskQueueName` flag being removed from the `MinTaskID`? I think it's not a good idea to have the `TaskType` be the default here.
I would use `ecs-nvidia` here. The code below is more readable.
This is a change in behaviour. The `if len(remote.Deny till 0)` condition is not necessary.
If we're not going to use the same file name for instr_t then we should use the same name for all instr_t
@mjkkirschner I think we should change the 0077 to `o` here, as the `&&` is the default.
This is the only change that will be needed. The only time the `ByteCount` was being triggered this way will be able to determine if the stream was in the same time.
I think this is wrong. The issue was that `spell_id` was `default` before.
I don't think we need this file anymore, it's just a simple package. I think it's good to keep it in the same file.
FileSystemTarget is a relative import
This is a bit odd, because the `thread_id_t` is not equal to the `u_id` value of the `u_id_t` value, but it's not actually a `u_id` value, so we don't have to introduce a cast to a `u` in the `u_id` value.
This is a bit odd, the function name is a bit ambiguous. I'd say it's not a "common" (e.g. "no")
AFAIK `DagsterInvariantViolation` is used for the error, but I don't think it's necessary to use it in the error code
Is this used?
This is an existing bug fix, but I don't think we should be using the new values here.
I don't think we should be changing this here.
I'm not sure why this was removed. The key was already written to `Key` in the `ecdsa.PrivateKey` file.
This is a bit confusing, as we're just checking the return value of `Package Entity`. I think it would be better to use a more specific name like `BaseEntity` or something.
Cool, didn't see this change in this PR, can it be added in another PR?
Would it be better to set this in the `PathContext.Stat` instead?
this is just a small test that was passing. It was just wrong to keep it. It was not possible to test it.
I'm not sure this is the right place to fix this, but I think it should be the same in `get_distributed()`.
I'm not sure if this belongs in the "unless" folder.
This is not needed.
It seems to me that `fs` and `30` are the same. Should we be doing `fs.readFileSync(0, ...)`?
This needs to be added to the "env" section as well. Otherwise the error message could be helpful
This isn't a good way of doing this I'm going to be thinking about whether the Core was a good idea. The `Ordering::Random` option is just to be able to determine the data structure in the `__init__` file. I'm not sure if the `RandomNumberGenerator` option is needed here, but I'm not sure how I'm missing something.
This is a little weird. Why is it not a global object?
Could you add the same timeout here as in `ts.go`?
I don't know why this is necessary, but I'm not sure how to test the case here.
I don't understand the purpose of this PR, but why is `maxResults` necessary?
Can we just remove these now?
I think this can be simplified to: `try/except Exception` and then you can use `except Exception` with `pytest.importors`
what is the difference between `urlencoded` and ` EXTRA`?
I think this should be called `updateium` not `--init`.
I think this change can be made in a separate PR, since it's a change in behavior.
why are these public?
This is the only place where we log the stack trace. It would be nice to log the stack trace, but I'm not sure if that would make sense.
I'm not sure why this should be `--keep-prefix`? It looks like it's only used in the `--keep-prefix` command.
I think it would be better if we could return an error instead of returning an error.
The `_UNSET_NAMESPACE` call is still used in the `Register._UNSET_NAMESPACE` namespace.
`Error iterating over item with "+`
I think we can remove the `minify` variable and use `hacdias/caddy-minify` as the default value.
provider has a lot of different defaults, so we don't need to change that.
I think we should change this to be `_`
This package should be grouped with the other packages.
I'd suggest moving this into a separate file, to be consistent across the codebase
I think this should be `type`. It should be `type`, not `type`.
Is this a bug fix?
I think this is a bit weird, I think it should be `getAuthenticationPublicKeyFile()`.
Can we add a `omitempty` field to show the values?
nit: you can just call `t.equals(to)` here.
I think we need to keep the old namespace to make sure it's not a valid value
Is it worth it to use `env.path.join` here?
If you do not need this line, you can remove the `linter` variable.
Is there a reason for changing this to a `JsonPrinter`? It looks like we're not using the default constructor anymore, right?
"If the provided key is none"
Is this used?
What's the purpose of this change ?
This is the only thing that should be `init()` instead of `main()`
Why do we need this?
I'm surprised this isn't `1.25rem` (which I don't see any use of it) but it's `1.25rem` (which I don't see any use of it)
Is `sendgrid` the only place that can be used? `retrying` is a bit confusing. I would have expected `sendgrid` to have an `sendgrid` that is the default, so it's not an `sendgrid`.
Is `Vector ArrayList` always true?
Can you add a note to the original issue you added in the `mainBitmap.getConfig()`?
this file is not initialized with 2019 2.0 (which I think is not correct)
I'm not sure what the best way to do this is, `getBitMask` is used in a few other places. Maybe we can use `String#getBitMask(String, String, type)`?
AsReadOnly is a little hard to understand, can we change the ReadOnlyTxProcessingEnv and use that here?
I would use the `ions` field instead of the hardcoded values.
Is there a way to check if this is present and we can check for `blob.header.FromTime`?
I think this should be `this.initCodeTransformer = initCodeTransformer`
I think it's better to keep this line.
@tgamblin Do you have any idea why this is needed? I'm not sure what the best way to go about it is.
I'm not sure if we should return a `summary` or `summaryoffset` here.
I would prefer this class to be `JSON` instead.
This is a change to the `reasonDomainVerified` constant. I think we should be able to use the `const` here.
@n3nash @jridgewell any reason to change these?
Please use the new environment variables in the code.
why are we only false?
This will be a breaking change for the `if (dataManifests != null)` case. The check is done in the `if` below.
I'm curious why we are passing GlobalHitsThresholdChecker instead of having two methods for the same reason?
I don't think this import is needed.
What is the reason for this change? I don't see any new changes in this file.
`fail()` is called after gas price.
This seems to be a bit unfortunate. I think the `process` can be removed.
Shouldn't this be `Error occurred >=Exception as e`? It looks like we are passing `e` to the `Exception` in here, but the `message` exception should not be thrown.
I'd prefer a single key `&&` here, if it's not needed.
I think it's better to add this to the `__inner__` method, since it's used in `pkg/config/mdc-layout-grid.html.erb`.
@jcotela is this the right thing to do when v.vm.network :private_network and v.vm.s :netmask ?
I don't think we need this, we can just set the default to `false` in the `Identify`
I think this should be `_with_req_field(default)` and `_with_req_field(default)`, since that's how the other option are used.
This is a bit weird. I'm not sure we want to do anything about this. If we do, then why not just remove this? It would be nice to avoid a file if the user wants to do something else on the server.
I think these two imports are not used anymore
Why not just `p.b.JumpEqImm64(R0, 0, "exit")`?
"A Main actor must be a single Env or a single-character actor"
Should this be `zk-read` instead of `zk-read`?
This should be changed to `_check_ndarray` (or similar)
I'd prefer to keep the TODOs in alphabetical order.
@danrot please add a `TODO` to remove the return
I'm not sure if this is a good idea... Maybe it should be `template`?
I think this is a bit too short for a code block, but it seems like it would make sense to have a `non_iterating_code` flag that is set in the `b` list.
why is this changed?
I think it would be better if we could use `type` here instead of `type` (or `type`)
should we add a default value to these as well?
This test doesn't test anything.
I don't think this is correct. The `q` is the correct form for the `.`
Please revert this file.
This test is not really testing what it does, and it should be removed.
I don't see where this package is used?
You can use `if not os.path.join(inc_dir)`. It is a bit confusing to have both a single directory and a directory, but if it is a list of directory, it will be `os.path.join(1)` and the next `if` statement.
I think it's better to have a Protonet that's a YolactSegmHead
It looks like we are changing this to use `driver.Crypter` instead of `driver.id`?
Should be an exception?
this is a bit weird, why not just use the same method for `getImageWithRule()`.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Space inside parentheses detected.
This is not the only place where we need this.
Rails/DynamicFindBy: Use find_by instead of each.
Is this needed?
This should be in `src/server/auth/test/test_metadata` as well.
I think we need to add a `or value` argument to this error message. If we don't want to add it, it will add the error message.
Use a `&` instead of `&` here
I think we should be able to use `ssm-environment.variables` instead of `ssm-environment-variables` to determine if the user has a valid device name and they can come up with a device name.
This should be in the main repo, so it should be part of an example of how github is used, and the user should not have to use github.com/gogo
This will cause a race between dialog and dialog. Why is this needed?
I think we should also update the `scikit-learn` version to use the `pytest.scikit.GetClass().
Is this needed?
@Scottmitch why did we remove the `test_completion_item_focus` function completely?
I think it's better to use `storage._googlesitekitUserData?` here instead.
This is a little confusing to me, but I think it would be better to have a method that returns the `capacity: i` (in the `log_capacity`).
nit: " Flags defined in those class must be used with caution, and strictly reserved to experimental".
Can we use the `NOT_options` helper for this, so it's clear that this is a separate file?
Maybe it would be good if we could also add the key to the account, and then we wouldn't need the key for account.
This should use `\r\n` for consistency with other uses.
I think it is better to keep this method and remove it. This will make it more obvious where it is used.
Metrics/LineLength: Line is too long. [122/120]
I would prefer to have this in a separate change, as it is a bug fix.
I think we should remove the remoteService check from the first place, right?
I think we can remove this whole file, it's no longer used.
This is not needed, we can remove it.
I'm wondering if this should be `/* eslint-disable jsdoc/`
This should probably just return `err.NextWithContext()` without the `err` value.
why do we need this? we should just make it `AddressDetails`
Can we make this configurable?
I think the oldTimeIntensities is a bit confusing to me. Can we use the same logic for both?
This is the fix, but I'm not sure why we need to do that.
Please add a `git grep` annotation
This is the same logic as the other `recipe_id` function.
This looks like a typo
Why do you need this catch?
Lint/UnusedMethodArgument: Unused method argument - user. If it's necessary, use _ or _ implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies implies
This seems like a good candidate for a `CacheChange_t` function. It's used for the `Class` and `CacheChange_t`, so I would just put this in the `change` interface.
Should this be a `[UnsupportedOSPlatform("browser")]` instead of passing in the stream?
I think this is causing the MacOS build to fail.
This is the wrong place for this.
Is it worth caching this code in a try/catch?
If you're not using a `referral` you can just add a `Set` field to the `Promise` field and use it here.
Is there any reason why we can't just use `DefaultHttpContext`?
I'm not sure why this is removed. The assertion was correct.
I'm not sure if we should add a `decorating-method` attribute to this method.
I think we should use album_msid here instead of album_msid
The current code was just looking at the wrong `Add`, I think it was just a simple `Add`.
Can we just use _isHiddenWithCSS and just use _isHiddenWithCSS directly in the constructor?
I think this was a good change.
`httpNotFound || forbidden || notEnoughSpace`
I think this will be a breaking change, but we should be able to remove the `block` parameter from the cache's block.
I think you meant `product_name` here.
@martner, do you remember why this change is needed?
I don't think this is needed
This is not needed anymore, right?
I don't think we need this change.
Is this related to this PR?
I think it is better to use a larger `settings.info` instead of hardcoding the values here.
`NewResource` and `NewResource` don't have a `ConcurrentDictionary<string, string>`, so we should be consistent.
I don't think this is correct. I don't think the user will know what the user is trying to write, but it's not a valid value.
I don't think this is a bug. It should be in a separate commit
I think this should return `false` if the endpoint is provided for the request.
This is an example where the `createElement` is used in the test.
This is not needed, we need to do a `amp-story-config.yml` check
I think this should use ExpectedCondition.Expected Condition
Not sure why this is changing, but I'm not sure if it should be a specific operation. It might be worth mentioning that it is a specific operation and not an integer.
This is the only change that fixes a bug, but it's not related to this PR.
you can use `!==`
I think this is the only usage of the `window` variable.
Please update the docs for this new value
`assert` is not a `OSError` (and `assert`)
I think we should remove the `--Message` here.
This should be `config.Build.Arch`
Aren't we going to use the `progress` property?
This should be in a different PR
I don't think we should add these to the other PR. We can add them to the `images` field, and then we can add them to the `waves`.
This is a bug fix.
It seems that this change is not required since Flink is a public type.
why is this needed?
This should be a separate commit, no?
I removed the check because it's the same as the `FirstN` node. The `getOperatorType()` function calls `getOperatorExpr()` on the next line and the `getOperatorExpr()` calls `getOperatorExpr()` and `getOperatorExpr()` are the same.
This is a breaking change, but it should be a separate PR.
We could add some more information here to be able to add this in a future PR.
I don't think this is necessary
I think this is wrong. The new `CLASSES` variable is already set in the `PALETTE` function, so it should probably be renamed.
This import is not used. You can use `slowver` or `slowver`
Line is too long. [81/80]
AccountState is a lot of work work, we could just have two methods: - we use two methods - we could just have one function: - If we're not going to have two methods - we could just have one function: `AccountState`
I think this should be done in `monkeybase.js` and then in the `push_approval_notice? approval`
@wido I think we should be able to use the same value as the default. The value should be `false` or `tracerTimeout`
I don't think you need to change this field. If the URI icon is stored in an `else`, then it will be `final`.
I think we should use a more meaningful name here, `src/main`
This feels like it should be a constant
This is a breaking change, right? Can we just use a string here, or a string?
This is a change in behavior, we should probably remove the other one.
why are we adding new field to the end?
I don't understand this?
I think these are wrong. It doesn't seem right to do the `using` statement.
I don't think this will ever be true.
This is a bug fix.
I think this should be `true`
I think the `flow` is not required anymore, since this is the default value.
I'm not sure if this is the right thing to do, but I'm not sure if it's the right thing to do here.
Do we want to run this to `main`? I think it should be run in a `main` package.
`keys` is not supported in this case
Is this the same naming convention? I'm not sure if the naming convention is more readable than the naming convention.
I think you can do do `do_action( 'neve_add_settings_to_hfg_rows', true );` instead of `do_action( 'neve_add_settings_to_hfg_rows', true );`
I think this `HttpProtocols.Http2` should not be https, right?
This is a breaking change. I'm not sure why the change is correct.
I think we should import `blank` instead of `import`
`return null` is redundant.
Forgot to remove this line
I think it's better to have a `time.Duration` that is used in the test.
Please use `state.getSerializable(..)` instead of the `if`
I think this is fine, but we should probably add a link to `''` in the `default` and then use that here.
This is the bug fix. The description should be `Symbol`.
I'm not sure this is a good way to test. It's probably better to remove the mining test.
`&:in_progress` is not needed anymore
I don't think you need the                              here, it's not used anywhere.
This should be `True`, not `False`.
I don't think we want `pathlib` to be a path. The `attrname` and ` keyword` are not really needed.
Can you add gitea copyright line to header (and keep gogs one next to it)?
`close()` is called in `doneChan` and it will be called after the `doneChan` is closed. I think it's better to have a `doneChan` interface that is set to `Joiner`, and then close it here.
Why is this wrapErr needed?
Maybe this could be `change` and `changechange to `change`?
I think this should be done in the call site.
I think it would be better to have the if/blobExists in the try catch block, then just use `blobExists = false`
This is the only change in the PR that fixes this bug, but I'm not sure it's correct.
Could we use `_` instead of `to` for consistency?
You can do `String#includes` instead.
The CAST defined here are provided as a `Artifact volumes` which is never read.
We should add an example here.
why not keep the same.h?
@deads2k @kroitor since you're in here, you're not using the API version anymore.
I think we should be able to use `!ptr` here.
@sparrowDom I think this was the only place where we were using the `AssemblyFilename` was used.
This should be `if mset.mirror == nil {`
Won't this be true for the `clear`?
This needs a unit test.
I think it should be `:`, because we don't need to add it in the output.
This should be `__version__`
It seems like this is a bit of a hack, since `len(cnb) > 0` could be `nil`?
I'm not sure what this interface is for? I think it would be more consistent to put the interface on the `start()` method.
This go to `k.manage` in `previouslyConnected`, which is not the best idea.
I'm not sure if this change is really needed. I'm not sure if the proc is the correct form.
I'm confused, this line is not being used, right?
Should this return `None` if `obj` is `None`?
This method is only used in the `src/server/server/server.go` file, should be removed.
I think we should use `setup.py` instead of `import io`. It's more likely that we don't need to import anything from `setup.py`. Also, I think we should try to keep the `3` package private, but it's more likely that we don't use it in `setup.py`.
I think this can be simplified to `if (stopped)`, since that is what it is supposed to be doing before it gets merged, or if it doesn't have a auto statement it will return false
Should this call be called from within future_addEdges(requests) and not on a new future_chainAddEdges(requests) ?
this is not needed
should this be `SecretBackendSecretsManager`?
Odds are not used here, so can remove this.
The `return` statement is removed from the `default:` block above.
I'm not sure if this is a good idea, but it seems a bit weird to have a `pe_defaults` field. I'm not sure if it's the right way to do this, but if we do it, then we could just remove it.
This should probably be `dispatcher.afterClickOn(element, driver)`
Should this be `def _currently_awaiting_approvers` instead? That's the logic we wanted, I don't see any difference between the two.
This interface is redundant, it is just a public interface.
Can this keyword be removed? I would have expected it to be a different name, but it seems like it should not be a `multi`
Do we need to set this to nil? I don't think it should be set to nil.
This is the only change that will cause the installations to not show up on the server side. Can you make sure to remove this?
I don't think this is the right name. I would just use `<%_ if (IST_PARSE_LIFELEECHCHANCE}, "only_lif")` or something like that.
We don't need `allowedOrigins` in these DB
Please revert this file since it is not used anywhere else.
Can you add a link to the table name, e.g. `ZipkinActivityConversionExtensions.EncodeSpanId(activity.ParentSpanId)`, so that we don't need to include it in the table name?
@deads2k this will fail on Windows because `getResultType` will be `null`, right? I'm wondering if it will be possible to use `defaults.getResultType()` to avoid this if-statement in case of `null` and then we wouldn't need to check if it's not Camera.
why did this change?
I think you could use `mentor_name` instead of `mail_to mentor.email`.
This is a bug, the null check is redundant.
can safely be reset ?
This is the wrong name. I think it's better to use "github.com/aws/amazon-ecs-agent/agent/asm/factory" instead of "github.com/aws/amazon-ecs-agent/agent/asm/factory".
Should we add an example here?
Can you add a trailing comma to make sure this works for you?
This should be a separate commit
Standards: Please add a space after commas.
This is not needed.
Is this still needed?
This will be the only way I can see the problem, if we have the nodes of the node.port, we should be using the node.nodes[1] instead of the node.port.
You need to check the other way around.
I don't see a reason for this change. The only difference is that the `restore` thread is a `contrib` thread.
I think this is not needed.
This is not necessary, right?
This line is too long and is a bit over-indented, but I don't think it's worth it, just wondering if there's a way we can avoid this?
I'm wondering if we should throw an exception if we don't throw an exception here?
This is the wrong place for this. You should just call cast_tensor_type() in a variable.
I think it would be cleaner if we made the condition optional, and only set the value when it's true. I think it would be better to check if `has_no_struct_fields` is true, if it's true, then we wouldn't have a value.
This is the only place where we want to support the `--ac-server`. I'm not sure what the correct version is here, but it seems like we are not doing anything with the new version.
It looks like `Enum` can be `null` if `Enum<T>`, but `Enum<T>`, so the `T` can't be immutable.
Should this be "adios2 module starting point"? Or is there a reason for that to be added? If the ad Take Take Take Take Take Take Take Take Take Take Take Take Take Take
Maybe make this interface ParamView instead of ParamView?
Is there a reason why you changed from uuid to uuid?
I'm not sure this is correct. The only caller of this is to set a Duration. Can we set a `p.i` as a pointer to 1?
I don't see any use of MEMPROT_READ being used anywhere.
I think we can move `non_pending` to the `on_approver` model, since it is a non-empty string, and it's not a string
This should be a single `_` prefix.
I think this is an old bug, right?
This should be added in the `mobile` format
I don't think it makes much sense to put these on a single line.
this was a bug, right? why did you remove this? it was not used anywhere else?
This is the same namespace as the other using statements.
This is a bit weird. Why are we setting `poS` to false if it's not true?
@t3on This should be `start_mode`
I'm not sure we need this.
I don't think this file is required.
I'm not sure about this. If we do, we should add `<%= f.label :active, x, Y>` to the other stuff. If we do, we should add `<%= f.label :active, x, Y>` to our style style. If it doesn't, it will be ignored.
I'm not sure if this is the correct way to reload it, because I'm not sure it's the right idea to reload it here.
I think this should be in a separate PR
Maybe use a `os.path` here, so we don't have to use the directory here?
Extra empty line detected at method body end.
I don't think we need this
Maybe it's better to call this `def __init__(self, win_id=False, count=False, metavar=None).zero_count = self.zero_count` and then you don't care about the first argument?
I think we need to do some sort of `func (a *Account)`, as it was before.
What if `str` is not a dictionary?
I think the mock should be in a few other parts of the mocks
Is this change necessary?
I'm wondering if we could just use a single table `data`?
I think we can remove the `!` part of the else if since the `if` block will never be executed.
why not just Params, and pass it as an argument?
I'm not sure why this is necessary. It is already a test, so I'll open an issue to track it if it's not a test.
I'm not sure this is a good idea. It's a bit odd that this works with the fact that it has a `bool`. It's not a blocker, and it should be a `*` in the test.
This will cause `execution exec_id=?"` to be null. The execution will be empty. The execution will be empty. The execution will be empty.
I'm not sure this will work for anyone using the icon. I'm not sure if this will cause the test to fail, but I think it should be fixed in this PR.
The exception should be checked in the exception handler.
Can you add an explanation to the docstring that the names of the columns are in the names?
` METRICS_MODE_COLUMN_CONF_PREFIX` is the default.
Can you add these as args in the PR
Can you move these imports inside a function?
Should this check be there? I don't see it being used anywhere.
I think we can keep this here, but I don't think we want to keep this.
I think we can just do `bool(bool)` instead, right?
This isn't related to this PR, but it's probably worthwhile to have a test for this as well
Do we need this new check?
This is the main change.
It's a little hard to read but it might be better to use `&&` instead of `&` here.
Nit: The code below uses "filecoin-project/go-filecoin/types" and then "go-ipfs-files/files" is the same as "filecoin-project/go-ipfs/types"
This file should be moved to the `else` branch.
I think the import should be `import com.sun.javafx.fxml;`
I would like to avoid using `OnStart` here. I think it should be a simple function.
We should also check for `cvr.Name` here. I don't think we should ever set it to `cvr.NewNew` because the call to `UpdateSnapshotInfo` is not a valid name.
Why is DefaultLogMessageRateLimit removed?
Should we assert that the error is returned?
you're missing a space after ` Overseas`
why is this no longer needed?
I'm a bit concerned that this will not work with the other changes if the client is not compatible. I don't think we should be doing that in this PR, but we should probably try to avoid that in the future if we don't have to.
If we're going to be using the api api, can we use the default for `overflowContract`?
This is a global setting, so it should be removed from the PR
I don't think we should import it here, right?
This was a bug in #6047. I think we can remove it.
How about we move the `WorkloadIdentityStatus` call into the `aws.go` file?
We should check if the value is in a separate map or not. If we want to check the value, we should probably check that it is in the map.
This line needs to be removed
We don't need to support the `filters` prefix anymore.
I'm not sure why this was needed, it's only needed in tests. I don't think this file should be here.
I think `reverse()` should be on the next line.
We should probably add a factory that does not depend on the `goerli`
@deads2k do we have any concerns about this?
I think we should also be using the StateDb.on_has_zero_value_transfer() function in order to avoid the correct test.
I don't think we need this change.
this test is failing because of the first pass. You can't test this.
I don't think this is right. I don't see anything that can be used anywhere in `interpreters.js` in this PR.
Shouldn't this be `assert` instead?
I don't think this is correct
I would call this `get_meta` because it's not really `meta`, and the `meta` attribute should be renamed to `get_meta` to match the other uses
I think this is a change in behavior. The only place this needs to be added to `SchemaInfer` is in `dagRequest`.
I'm not sure about the `properties` value here, as this is the intent. It is the intent, but the `Druiduid` properties are used in the `Druiduid` properties, which is the `Druiduid` properties, and it's the default. I'm not sure what you mean by the `AutoProperty` property.
@unresolved_targets[t_name] = target.name }` seems to be the same as the `target` variable above?
This is the only one that calls `frame.getMessageStackDepth()`
I would not remove the `return`
Is it possible that the goal is to have an `passesRestrictions` property that has been provided?
I don't like that you have to make this change, but it's a little unfortunate. It looks like we are not using the interface anywhere else in this PR, and it's a bit of a big deal, and we're going to be able to make it more explicit.
I think this is not necessary, we are passing the tmp.render in the list, right? (just curious why this is necessary)
This is a change in behavior, right?
This should be a `@SuppressWarnings("unused")` as it's a class property
Can this go into a constant?
why do you change this?
I'm wondering if this is the right way to do it. `auto targetFile = folly::stringPrintf("%s/%s` should be fine.
I'm not sure this method is actually used anywhere, since the snapshot is already the id of the existing existing existing existing existing existing existing existing existing existing existing existing existing existing existing existing existing existing existing snapshot is not the old behavior, so I'd say that the existing method is called fromSnapshotId, fromSnapshotId, and not fromSnapshotId. I'm not sure if this is a good idea to add a new method to the existing method, and then the existing one to add the new one to the existing method.
I'm curious why you changed `$this->getHelpText` to `isset()`
Isn't it redundant `output_stream` ?
This could be set to `true` by default
I think you can use `TryGetGet` instead of `C0202` here
This should be an `[EventEvent]`, right?
This class does not need to be annotated with `@Test`
Please don't add trailing whitespaces.
I'm not sure this is the right thing to do, but it seems like we should just be using `memQuotaRatio` instead.
why was this removed?
Why do we need a new field here? Can't it be ` specific.32`?
Let's add an example to these type hints.
I think this is a leftover statement
I'm not sure if we should use `Platform string` here as the default is `platform`?
@smarterclayton I think it would be good to add the api/external path path to `host +` so it can be removed from the api/external path.
I think we need to keep the same `ac` prefix as the one above.
Why do we need this? We don't do anything with a sleep.
You should use the $var_id as a variable.
`from boto.compat import json, six`, and `fromSerial.compat import json`
This one is used to allow the `JSON` property to be set to `null`.
This is the only place where we need to set the file to the `connection`
Is there a reason we can't just remove this one?
I think this is a change in behavior, but it's not related to the change. @jackfrancis @mfojtik ?
I would rather have an assertion that `assert.Equal()` returns `nil` and `assert.Equal(t, pkg, pkg2)` if it's not an object
Is this a line wrap needed?
This is a change in behavior, I think it should not be here.
I'm not sure if this is correct. I think the `getParent` function should be called before calling the `getParent()` function. The `getParent()` method can be called in the `getParent()` method, but not in the `getParent()` method.
This is a style thing, I'm not sure why it is a good idea to use the namespace here
"..." is a little confusing with "the name" - it's a bit confusing for this to work.
Can we add a TODO here to reduce nesting?
why not using Commit and restore in Commit()?
Can this be changed to use `std::const_lock` instead?
I don't think this is the right place to put this.
I'm not sure if we can make this a notification, but it's not really necessary to send the notification. If the user doesn't have any notification, then we can just send a notification, and the user can't see the notification.
Why do we need this change?
I'm not sure we should be changing this behavior?
`name` is a string, so you don't need to check if the editor is a string, right? The `_register` function is called if `editorClass.EDITOR_TYPE == true`
@tgamblin Shouldn't we still have a `package` package here?
I don't think this is needed, the `*` should be removed.
Can this use the default value of the table `glober_pipeline.marker_table`?
I don't like the idea of using a body declarations in the name, but I'm not sure how to get it to work.
Please use a `StringUtils.isNotEmpty` here.
I'm not sure about this... I think it's a good idea to have `@default` as a default.
I think `# `attr_value['string'] is not None` probably probably not required as `attr_value['string'] == value` would be better (or maybe `attr_value['string'] is None`?)
Should add a `addons` or `addon` here, to be consistent with `addons`
Do not use semicolons to terminate expressions.
this is not needed.
you could just use `Symbol` here
I think this is not correct because the lock is already closed. The `else` branch is called before `if (lock.unlock())`. The `else` branch will be executed only if the lock is not found.
Can we use `[32]` here?
This should be reverted.
nit: this is a bit weird. `this.get('store')` will work without this. `query('role')` will return the same value as `null` in the `roles` list. I think this will work as well, since this is a bit more specific and will break the code. I think it's worth adding a `query('store')` method in this case.
I think the `role` variable should be `role <code>`, since we don't know if there's any landing.
I don't understand why we are not setting the null value here. If it is null then the code will be removed.
This is an API change, I think?
why is this import needed?
This message is confusing. It's not clear why we are passing in a token here, but not the actual number of segments.
Redundant `self` detected.
I think this should be `source.iceberg.reader.intType()`
Can you add yourself to yours? It is not related to your changes, and I don't see any usages of your code which might have been removed.
I'm not sure why we need to change the `AWS` parameter here.
Can we keep the old version?
This is a wrong flag, it should be compile_flag
This is a bit unusual, but we can't catch a null value here. I'm not sure what happens if it happens to be a `mdmLoginServers` array, or if it is null, we should catch an empty array, and then we can catch it in the exception message. If we want to catch a `mdmLoginServers` to get the `null`, we can still catch the array.
This seems unrelated.
I think this should be `debug`
This is a bit of a hack that should be fixed.
Maybe we should move AWS parameters to the top of the file and just have the `AWS_BOUND_SA_SIGNING_KEY`?
I think this is the only reason we need the `blas.hpp` header?
This line is not needed. `nano::system system (24000, 1);`
Why do we need ignoreUndefined and ignoreKeys here?
I don't think we need anything here, as we're not using anything anymore. Can we just catch anything?
I think we can remove this
Redundant `return` detected.
This should be done after the `setItemVisibility` above.
@danrot @danrot @danrot @danrot @danrot what are you think?
I think we can remove the `docstore` tag.
Hm. I don't think we need to do this. It will only be called once per text.
I don't think you want to use the `startTime` for this. You should use `startToTime` instead.
This is not the case anymore. I think we should just add a `default` to account.
This is not necessary since we are already calling a method in the database
This is a test that has a reference to the service.
Please revert this file too.
This is the only place where I can tell the name is `import`. I'm not sure it's the right name, but it's just me, I'm not a huge fan of this.
It seems this test case is no longer testing anything, right?
I'm not sure this is the best way to do it. H2O_quic_close_all_connections() is the right thing to do. The other option is to check for the H3O version, so it's not the case here.
I think it would be cleaner to do `if (!Object.is())` in a variable and avoid the `if` condition.
This change is not needed. We can just inline this.
I think it would be better to have a default parameter here and pass the value to the `withCollection` field.
I think we should just use a `var ExpectedBalances` here.
I think this should be `Resources` instead of `ing`
nit: `nuc.IssuerAccount` is an option for both `dcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdc
This should not be needed
I think this is fine as it was.
Please add the `$` parameter here.
Does this change belong in the PR?
This should be `HttpServerErrorStatuses`
I think this is a good change to make the default value "true" in the context.
should be null
Would be better to have an async_test that does the check and pass in that argument instead of calling it every time?
I don't think this is correct. If the default_attributes is defaulted to false, it will always be true.
this is not a required property, please use `StartStartTimestamp`.
We'll want to test that the controller doesn't contain any device changes.
I think we should use `setUp` here instead of hardcoding `headersValue`
I think this should be `schema.normcase` instead of `schema.normcase`
I'm not sure this will work with the old version version. The old version will not have a version anymore, which will not be correct for the new version.
This is not correct. `hasAttribute` returns true, so `node` is a `true`. `hasAttribute(aria)` will return false, which is what is being passed to the `hasAttribute` method.
I don't understand this change. It looks like we're using the saved search string, so it should probably say "forgotten" instead of "to be saved search"
What is the purpose behind this change? I don't see a _processDataPoisoned property defined at all. It is used in the code.
This is not needed, we are not using the default from `notifySocket`
`performUp` instead of `performUp`? `IConfig` is a bit confusing, maybe it is better to have a single function `from ITEM_PARSE_INCREASEDAMAGE_PARSE` that is used to determine the value of `performUp` (or something like `performUp`)?
This will break the `status` key from the DB, which is not the expected behaviour.
Why not use the `generatePath` method here?
I don't see this method being used?
Is this used?
I'm not sure why we need this, but it seems like we're using the `HIVE` as a dependency.
I think we should just remove this method, it's only called from one place now, and it's not really used anywhere in the code base.
I would add a default value to the `version` parameter.
I don't like the `ong` of the repository. I don't think that we should have an `ong` here. I think it's a good idea to have a `ong` in `src/server/core/tests/test_tests.rb`.
Is this a typo?
would it make sense to have this in a `try/except` block instead of here? `if ... else ... else ...`
I think we should just be able to use `toLowerCase()` here instead. It's not clear what we are trying to do here, but I think we should be able to use `toLowerCase()` here.
@jmhoemmen this test was failing because the `KeyError` was not passing in the `execute`
`s/Nonce/` on the next line.
I don't think we need this. secondary is the same as the last one in it.
This should be `hd.lock.RLock()`
nit: I would use `org.mule.runtime.module.extension.internal.util.StringUtils.toBoolean()`
I don't think we need this.indexers anymore.
I'm curious why this isn't just an enum?
What's the purpose of this?
Should this be `c.state.ForceRebuild`?
This should be private.
Better to use `compression=on` as the default?
I'm a bit confused by the name of the PR. Can we do something like "prefetched these" or something? I'm not sure what the best way to do is is to add it.
I don't think you need this, if `setBackdrops` is true, it is not a valid callback.
What is this change supposed to do? I thought the plan was to use `Warning.info` instead of `Warning`...
This is an API change.
The cast can be removed.
can you add the copyright to the copyright?
I think this should be a `default` instead of an empty list.
This needs to be reverted.
Trailing whitespace detected.
What if we just use `acceptResponseError.IsNonEnabled()` instead of `response.Header`?
I think we can use `org.apache.commons.lang3.StringUtils.yaml` here, as we don't use `org.apache.commons.lang3.StringUtils#addTestDataSource`
This is an unrelated change.
I think it would be better to add a doc block to remove this.
I think it would be more consistent to call this `EndpointRetryCheck`, and have the `EndpointResolver endpoints.Resolver` call it in `EndpointRetry` rather than in the `currentRetry` class.
This is the fix to the service name, but the handler name is not correct.
Could you revert this change ?
i'm guessing you didn't mean to keep this? It looks like it's used in any test... but if you're not sure it's better to leave it as it is, then let's leave it as it was.
I think this is a breaking change, it's not a problem
why is it changed from constructor to constructor?
Is it worth it to make it more explicit that the templates is not in the config?
nit: use `.` instead of `.`
Is there a way to make this a `RAM.capacity`? I think it's not clear what's going on here.
Use a guard clause instead of wrapping the code inside a conditional expression.
can we make this a const and use the default value?
Why did you remove the `order` call?
This should be done in the `if` condition above, no?
I'm not sure if this is the right fix. The `getKey()` is not called in this case because the `getKey()` method is called in the first place. It should be called in the first place.
`AdoNetExcludedTypes` is an `action` method that can return `null`.
This import is unused.
The state changes in this file are not related to this PR, but I don't see why this change is needed.
Is there a test we can't do this?
This should be a bit more verbose - it is a bit of a nasty and is bad. I would prefer to see the actual values in the test, as it is a bad example.
I think we need to clean up a bit, if we're not going to clean up in the cleanup message (i.e. it's just me, but it seems like we should be using the `EnableCleanupReplicationTask()` function instead of the `EnableCleanupReplicationTasks()` function.
I'm not sure if this change is needed anymore?
`tolerance` is the correct name here
Line is too long. [81/80]
`.then()` is not necessary.
Why is this needed? IsIntegrationEnabled() is always called when a constant is set to true?
This should be a `TODO`
Is it needed?
This is the only place where we have `ChaosImpl=true` where we can set `i *Delegate`. I think it is better to just remove `ChaosImpl=true` and remove `ChaosImpl`.
I think we should just remove this method.
this one needs to be moved to the top of the file
I think this is not correct, since we are not using a promise in the code base.
I think we should just remove the from there.
Why did we remove the "new" part?
I don't think we want this to be the case. `pubsub` is a good name for this.
I don't think this is correct. It should be a `manifest.name` (and the manifest variable)
I think we should remove these now. It's not a problem.
this is a change in behavior, but it seems that the `err` is never nil
why not use the `websocket::close` function?
Can we delete this?
Why are you passing the `CMAKE_SOURCE_DIR` to the domain of the `CMAKE_SOURCE_DIR`?
This is not the big thing we are using for everyone. I'm wondering if we can move this to a separate file?
I don't think we need this.
This function should be moved to `pkg/api/server/pkg/api.go` and not `pkg/api/server/pkg/api.go`.
If we're going to have to do this we can also add the `connect-timeout` key to the `TRANSPORT_DEFAULTS` key
I think this is the main point. We should probably make this a constant.
Think this should be !!!this[kIsMaster]
bolt_inventory does not exist on purpose, can you please remove it?
I think this should not be changed to `Long`
I don't think we should be using `flux` here, since we don't have to pass in the context.
I don't think we need `!` here, if it's `0`?
Should we use `TextView` here?
This is the change that will break existing users that use `conda.common.local.conda` will have to update.
Please remove the empty line here.
I don't think this function is used. We should just pass the `Reader` object to the `NamespacedName`.
Please remove this. The new option is to only create the normal function if it is not set. This will make sure the existing `#3307` flag is set to this function.
Is this line break necessary?
This should be done in `buildCallback`
Can we just use `chai`?
Why did you remove the `handleSingle` here?
Should be `String.value`.
I think it would be good to add a `_Algorithm` class to this section, e.g. `_productQueryInterface $productQueryInterface $sbookediaInterface`.
This is not the right approach. The `PodExist` is not a GC, but if it is not a pod, it will be deleted. The logic is wrong. The logic here is to be more specific to the `if` condition above.
I think we can still catch this exception, since the session is no longer the only exception we have in this case.
I think the logic is wrong here, the caller will never know whether to switch to act.GetTransfer() or not. The logic will be moved inside the switch, so it can be removed.
Shouldn't we also use n.equals() here?
Is it better to keep 'filter' as 'sample'?
Why is this change required?
This is not needed, it is already added above.
@bparees this should be `gobblin.cloud.v1`
Why is this being removed?
@matt-gardner I think this change makes the API more readable as `System.Collections.Generic.List<ITextFormat>`.
I'm not sure this is the right approach. The `TwCardsController` controller should be in the controller for the new controller. The `TwCardsController` controller should be in the controller.
I think it's better to check the error here, as it is not used anywhere else.
I don't think this is needed.
Should we delete this file too?
I think we should add the `azurekeyvault` setting for the `Status` environment variable, to the `Status` environment, and add a `AZURE_KEYVAULT_AUTH_VIA_CLI environment variable` environment variable to the `azurekeyvault` environment.
This is a change in behavior, but I think it's a breaking change
Why not use `str(sig)` here?
This is a good thing to check. I don't see a good idea.
what is the meaning ofurlencoded?
This should be in the c_EntityId_RTPSParticipant. They should be in the c_EntityId_RTPSParticipant function.
I'm not sure if this is a good idea. The `graph` package should be used to create a new `name_from_graph_spec` file.
I think this will break other modules as well. We don't want to have the same package for `k8s.io/utils/pointer` in this package.
This is a good place to log the EnableForward.Enable() function. It's probably not the case anymore, since it's not an error.
Style/ClassVars: Replace class var @@ @@Data with a class instance var.<br>Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
`whilewhile` is not correct here. `localConnection && localConnection.type == Blockly.OUTPUT_VALUE`, and `locallocalConnection_` are both identical.
This is the fix for the TODO.
I think this is a little confusing. Can't see the `message_id` test for this.
I'm not sure this is correct. It's not possible that CheckCanLoadFromBin is not nullptr, and CheckCanLoadFromBin is not set. If CheckCanLoadFromBin throws an exception, the check is not needed.
This should be `exec.ExitError`. We want to be able to use `exec.Wait()` instead of `exec.ExitError`.
`req.set_space_name(std::move(name), (i.e. a string, auto -- request)` is enough. The return type is a string, so it would be better if the return type is a string, then the return type is `True`
this will need to be removed from the core, right?
Is this change correct? If `isPaused` will fail if `util.IsPaused` is true, then `isPaused` will fail if `isPaused` is false.
Please remove all the service fields.
I think it should be in `this.instanceDir = instanceDir.toAbsolutePath();`
I'm not sure if this is the right place to do this, if `localFieldPathType.schema` is set to `true`? I don't see any `getPathType` anywhere else in your code, so I'm not sure how it works.
I would use `unless concat_ws: concat`
Why are you adding the groupings?
The values of thedraw are identical, why not just take the action?
I think we should add the `GetRawDiff` function here, as we're not using the `GetRawDiff` function.
This is the wrong place to put the #if NET461 on Linux.
I think we can just use `gcode` here, and then use `gcode` in `gcode.h`
We can remove this `cert.URIs` now that it has been added by the caller.
Wouldn't it be better to use a `File.io.path`?
I don't think this is needed, you can just use `mhtml` instead.
I think we can use a default value for port 80
This is a bit weird. I think it would be better if we just pass the `app.config.secret_key_base` to the respond model, then we're using `CPlight.secret_key_base`
Is this needed for the C++ code?
Shouldn't we also add the `RetryableWriteError` call to `supportsRetryableWrites` here?
Is it necessary?
I think we can just change this to `href-go`
I think this should be safe, because the backing node can't be empty.
This can be removed
I think we should be able to just use the `rank` here. In general, we should not have the default `rank.BBuildConfig.cloud.started` in the `rank` package.
This is the only one that needs to be used by CVapers. Can we add a new file at the bottom of CVapers that are used in CVapers.
Is there a reason why this is not using the new error code?
For now, I think the `completer` should be ` tabs` instead of ` tabs`.
why is this removed? we can't have a migration to change the api version?
I don't think we need to do anything here. The first test will be the right place to start the `$serviceContainer` Connection manager.
I don't think we can assume that the user will be able to set a new `IEnumerable<string, string>`
Can we add a new attribute for this and use `<amp-story>` to avoid the use of the code in the code base?
This is a breaking change. If you want to set theLink on a server, you can get a valid server with an underscore and a custom link with a `OAI` instance.
Extra empty line detected at class body beginning.
Why is this being changed?
This looks like something that should be final.
I think this is a bit of overeager our own, we should not have this as a dependency on the `constants.getDefaultDefault` function.
I'm not sure this is the right fix. The re.M is not the right choice, so I'm not sure it is.
This change should be reverted.
Line too long. See also `self::defaultsPage` method.
I think this should be in the next line
You can just use `lib/docus/core/lib/babel/preset` instead of hardcoding the path here.
This should be `CherryPick cherrypick()`
I'm not sure if the `manager` should be here, since the `env_prefix` is a public constant. The reasoning is that `manager` is the only one that is used is that the `env_prefix()` is the only usage of the `manager`, but that is what the `manager` is for.
these changes are unrelated, but I'm not sure it's worth it to revert changes to your changes
Won't the `utilwait` import be part of the `k8s.io`?
I think it would be cleaner to use `html.replace(" '');` here.
I think we need to check for null here as it will never be `null`.
So `cfg.model.neck` is a `None` value? Should we be checking that `cfg.model.neck` is a `None` value?
Is this change required?
why not `cxxflags`?
(style) line over 80 characters
why remove the KVM?
Shouldn't we check for `0` here too?
This spec is useless.
why not using the port-list from the container ?
This change is not needed.
please also assert that it is not used
Can we move this logic to a version instead of a previous version?
This should probably be `protected string::hash_file`
I think we can remove this check now that it's not used anymore.
this should be done in a try catch as well.
I'm not 100% sure if this is a good way to do this. The exception is not a valid value, so it is always an "true" or something. The user can see the message and not the user can see it.
This is not the only change required to the `else` case.
why is this needed? I think we don't have a single `GitHash` in this struct
@gabrielBrascher We may need to add the `makeflow.failed` option here.
This is a bit odd, but I think we can just use `expire['track_metadata']['additional_info']` here.
can you make it explicit `possibleVNode._dom != null`, and use the new `createVNode` function instead of passing null here?
(style) line over 80 characters
should be `typeof`
Why are these calls removed? Is it not needed anymore?
this class is getting longer than 80 chars, can we name it `belongs_to?`? Or `belongs_to :approval`?
Why is listener not a valid error?
this is not threadsafe...
I don't think this is the best way to do this, but this should be the actual behavior
This is a bug, but I don't think we want to log the error here. I think it's fine.
why is it named?
I think this needs to be moved to the top, otherwise it will be removed from the file.
I think we can move the `foreign_key` key into the parent class.
Can we call `getMetricsMetrics` twice? It's not clear what `authenticationPlugin.plugin.getMetricRegistry()` returns.
I think this check should be done in `getRequiredAccountType()` instead of `access`
I don't see why we need to call `blockCreated` on the result of `minerNode1`.
We should check if the `topic.Status` is present before calling this.
why change this? we have `stack`
I'm not sure this is the best way to fix it. It is not used in this PR, but it seems unrelated.
I don't think we need to remove context here since we're now using the existing properties.
The length length check should be redundant here.
This is the main use case. It's not clear why `q.text` is empty. It's used as an empty string. It's not used anywhere.
Probably best just to check if the autocomplete_enabled has a unicode path, like: above. You can check if the project is disabled before creating the file.
this is not correct.. but why is it in `pkg/api/vogo/protobuf/proto`?
These are no longer needed
Please don't go with the other imports.
I'm not sure this is a good idea. If we are going to have to go back and take the event, we could use a more meaningful message.
This is the one we have in mind that the constant name is `approving_official`.
This is a change in behavior, but it seems unrelated to the rest of the PR. I'm not seeing any new changes here are needed.
@DaanHoogland this was a bug. I'm not sure why it was here before...
I think we can remove this
should this be the same as the `forum`?
`NM` can be removed.
I would put it in `member-subscription.js`
optional -> tautology
why change these?
Why did you remove this? I think the old code was not working.
Should we change this to a string?
Does this mean that the `ManifestFileDF` will be created on every call to `ManifestDone`?
This should be a node ID from the node.
Not a huge fan of this change, but it seems like it should be `dvc.variable` instead of `variable`.
I think we should be able to just use the `test_parse_cloudtrail_with_botocore` fixture from the `cloudtrail` fixture and just use the `test` fixture. In other places we use this method, we should be able to just use the `test_parse_cloudtrail` fixture in this test.
I think we should add a name here for `dev-dev-dev-service` to make sure it is not available.
This should be removed.
This is a bit of overkill, but the name of the variable is not very descriptive. Maybe `static_bundle_to_set`?
Can we use a test for this?
I wouldn't define this in the `KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK` method.
why change this?
You need to use `false` here.
This change was necessary because the `1` was already in there.
This is not used
`fieldId` is not a field name. It is a field name.
This should be moved to `is_acked_by_all` so that it doesn't have to be checked in `onWriterChangeReceivedByAll`. We can't do this in the `init_kubernetes` case.
Can we make a public setter for the `URI` class?
This is the reason why the test didn't fail if it's in place to use the test `sdktesting.Isash`
I think this should be `all_defaults = new True` and then the `if` above should be `if`
I think we can move this to the `ndeltas` block. It will only be written if pending changes were written.
I think we can keep the old one as well
this is a change in behavior... if we close the connection we should just return it
I think this should be `execSync( 'npm run:js' )`
Why do we need both `NOT_CONNECTED_ERRORS` and `Errno::ECONNREFUSED`?
@movie.quote` should be `movie.director` (and the other similar instances below)
I think you can use collectVertexProps_ here instead of using the td
I think this should be set in `libkb`, otherwise it may not be set in the case of error
This should use `_getCheckpointParentDir`
Maybe we can move this to a new feature, so we can add the other setting of the settings?
This is a bit confusing, why do we need to handle this in an else clause?
I think it's better to use an `int` here, instead of a `const` in the constructor.
I don't see any new conccurent collections or tasks in this PR. Are these `using System`s needed?
I think we should use the configuration object instead of this object, since the object is not the default.
Maybe we should use the EventHandler.EventHandled constant here.
I'm not sure if this is the right fix. I think it should be `fn.normalCalls == 0`
Can we just change the default to 4?
Should be "Failure Import operations" or something?
I think we can move this to `rb_define_variable`
Remove this log statement.
Is this a public constant?
I think we can do this at some point, maybe we can just do `flow.toUpdateObject(updateTime)`.
Is there any reason for this to be a constant?
Same thing here about the assign value for `Drive_sigmoid`
This is the only one that was used.
I would move this debug message to the top of the file.
This is the main change. If the string is empty, then the string is empty.
`std::unique_lock<std::mutex> lk (mutex);` is always called when `mutex` is `true`.
remove empty line
I don't think this is correct, the original code was not able to be able to run on a single process.
I think we can remove this test now, and just do it in `beforeEach`.
Does this need to be `Datasets.Default` ? Isn't it a relative value?
I think we can just remove the `TracerProvider` altogether.
We should not use `google.golang.org/grpc` for the other imports
I think we should have an `utils.read_file` call here to get the file name.
I think we should use the `select` here.
I think we should also change the ` stage` to `""` here.
why remove the reference here?
I'm a bit confused by this change, can we have a ticket for this?
I'm not sure if we should change this behavior, or at least we can add an `assert` to the `assert`.
This test is not correct. We should test the serverAsync.
@jmhooper @jmhooper @jmhooper @jmhooper @jmhooper @smarterclayton do you think we need the `#update` method?
This doesn't seem to be related to the PR.
This is a change in behaviour, but the old code is not related to the new code, so I'm not sure what the best way to do it.
I think you should just `return snakebite` (or `snakebite`) here and in the other places where you've used `sys.get_config().get("hadoop", "version", "cdh4").lower()` and `sys.get_config().get("hadoop", "version", "cdh4").lower()`
Use a guard clause instead of wrapping the code inside a conditional expression.<br>Tab detected.
Please remove these.
This is only used in the `glassfish.new` file, right?
this is not needed, Faker::Space.launch_vehicule should already have a Faker class
Can you use a `fileName.STANDARD.Date` here?
This is not a valid url.
@matt-gardner How about `/all`?
I think we should keep the port name and check for the error message here.
Please rename this field to something more meaningful, like `FORM_session`.
This is not the only change that affects the `in aws secret manager` field.
This is a pretty big change, but I think it's worth making sure we're using `\` in a controller for this.
I'm not sure this is the right place to put the result in the constructor.
Is this necessary? When an existing `#ratio` ratio is set to 0 it is a `0`?
This is a bit of an overkill, but I don't like the Mask layer of making this a copy. Can we just call it like that in the code?
This is a little confusing, as we are not using `substitute` anymore.
Can you add an explicit check here that the selected one is selected?
This should be a copy.
I don't think this is a good idea...
I think this logic should be in the base class, not the `tabbed-browser.CartEvent()` function.
This should be a try-finally.
I think this is not needed, the test will fail
This is a bit of an overkill but it's not really a patch, because the code is not actually doing anything useful. I'm not sure if this is the right thing to do here, but if we do, then I'd just add a `&&` check in the `if` clause and just do a `||` and then do `||` if we're not going to be doing anything.
What is `deleteManifests` used for?
@bparees this is the right way to do this. If the Array() method returns a boolean, it will return an error and the code will fail if the node is an Array (in the current state).
should we make this constant a constant?
The `redeemerParams` is now only used in the test suite so I removed it.
I think it is better to keep the alphad import at the top of the file.
I think we need to make it configurable, and add a note that the pause container has already been loaded in the pause container, so that the user can't see it in the pause container. I think it's better to use the default value of pause container, and the user should be able to use it in the pause container directly.
Why not use the `Class` interface here?
I think we should be more specific here, as we have `r.New("for-push")`
Should we have a "str" field of the journal that gets set on the request? Or should we have an "str" field of the journal?
I don't think this is the correct message. The message should be "log_options" or something.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
I think we can just remove this entire block.
Why are these added?
I think this should be `loc_parsed.host->host_is_unix_path`
this is the only change in this PR. we should probably keep this in one place.
Why disable this?
Just `string|int|string $` and `                    |string $` are both the type of `string` and `                    `
this is a bit weird, how is it related to the rest of the PR?
This variable is unused.
why is the option not set?
I think we should also check if the object exists before we return it. If we want to add it then we should also check if the object exists.
Why was this private field moved to package?
I think we should just remove these tests and just use the test_helper.
I think it should be `$this->assertNotNull`
I don't think this `Callable_sensor` function is necessary, since it's only used in the asset context.
Why do we need this?
without is removed because we are not using the `TimestampType` anymore.
I think it would be good to add a `pipeline_definition_sensor` annotation on line 6. This will be removed in a future version.
Why not return `None` here?
I think it would be better to have the `<p>` tag tag for these new messages, and add a `<p>` tag to these new ones.
I'm wondering if we should keep this private and have it take a `Set` object.
This change is not related with this PR, but I think it is a good idea to add it to `test-system/library` so we can remove it from this PR.
Can we rename this function to something more descriptive?
I think this is the fix. It is a bit confusing.
This is a breaking change, I don't think we should be using this class. The only way we are adding this is to the public API.
Should this be on a separate line?
You can use `features.AntreaPolicy`. No need to check the network policy.
I think this should be `App`
`pendingRequest.configuration.remoteHost = pendingConfiguration.remoteHost;` is always set in the `pendingRequest.configuration.remoteHost` case, so I'm not sure what the right thing to do here is if the remoteHost isn't set?
I think we should be able to remove the `== null` check.
Please use the standard library imports.
I think we can just use `return strstr(cmd, SET_PARAM_CMD, ...)`
This is an API change, it is no longer necessary.
Why are these changes required?
Why is this needed?
Nit: remove empty line?
can we do this in a more specific way? `The boxes of a data using the BoxWhisker in the Tukey boxplot definition`
This change should be removed.
I think this file can be removed now, since it's no longer needed.
This should be removed, right?
This variable is unused now, and can be removed.
Why is this change required? The `2013` is the same as `c` above.
Why not use `client.MaxIdleConnections`?
Add docstring explaining why this is necessary?
This one doesn't seem to be used anywhere
@jridgewell Is this the right place to change the `search_console_error` key from `Search` to `Search` here? I think we should keep the `search_console_error` key in `Search` and `search-console_error`
What does "obj" mean? What does it mean for `dataset`?
This method is called in the `spec/controllers_constants` namespace, which means it will be called for every user that is passed to the account (as opposed to the `email` field).
This is the fix for the fix.
`clear` is not the correct way to clear theItems.
this is the main test that was testing the actualfe in the database. We should not have any unit tests for it
This change should be reverted. The reason for this change is because the tests pass without this is because of the change that is not in `mochaResults`
@lilleyse we can probably change the name to `rwa_number` here, to be more clear
I think it should be `.option(SparkWriteOptions)`
Maybe we could use `data_user_id` instead of `data`?
I don't see where this is used.
I think this is not a good idea. It should be `SyncSync`.
Why is this change necessary?
Wouldn't it be better to use a more descriptive name like `add_bytes`?
Why is the cfg.IP check needed here?
Why is it necessary to check the type is int?
This is not the same as the existing `columnSizes.put(fieldId, colStat.getBytesOnDisk());` method. Is it a problem?
The `ins_data_actions` param is not used anymore in this class.
Please add `# noqa: EDFDF for the lint message message.
I don't see how `m_DynType` is used.
Can you add the new line before?
I think we can remove this spec now
I don't think we should change this method here, it's not needed. It's a good practice to keep the method private.
I think this is a breaking change.
This should be in a separate commit
What is the reason for this change?
This is the main change.
Can you please change this to `json:"RWMutex`? It seems like the only change that fixes the bug.
Is this theARN part that is already included in the `new_constants` module? I'm not sure if it should be here or not
I think this is the only change in the changelog. I think we can move it to the `else` block.
This should be a warning, otherwise the client will never have a value.
I think the `DialogResult` field should be renamed to `IDialog`
I think we need to make sure that we don't get the default value for this option, right?
This file doesn't need to be changed
Is it always `key`?
This will always return an error. You should use `Rsync()` to create an `essess` directory.
this is not right. This will be only needed if DR_HOST_NOT_TARGET is set. The only time you set the value of the DR_HOST_NOT_TARGET to false when it's not set.
We should probably have some sort of `v1/` in the name.
I think `error.details` should be `error.message`, not `details`.
I would rather see a `elseif` before `$access`.
This is a bit unrelated to the rest of the PR, but I think this is a BC break.
This doesn't seem right to me. The `<A>` is already in the `A` package, so it's not necessary to have it in the `<T>` tag.
Is this needed?
I think we should not use `getBitMask` here, as this method will return a value.
this assertion is really nasty. Why do we want this?
I think this is the only place where we can use `NewKeeper` for the `Keeper`
Please revert this import
can you make this a constant so it's more readable and clear?
I think it is better to move this to a separate file
I don't think we need this function, since it's only used in one place, and it's just for the "say" functions.
This is a change in behavior, but it seems like we should be using `setAuthentication` instead of `enableTelemetry(false)`
I don't think you should be using this. I think it's better to use the new `AnnotatedCodeLocationKind` class instead.
This should be `glog.Networkf("")` instead of `glog.V(2).if err := s.createInternetGateways(&in.VPC)`
This is a new API change so we don't need to add it in the `if` statement.
The `Enabling` is not really used. `CallTarget state ByRef` is a bit ambiguous.
This needs to include the type annotation.
I don't think you need the `undefined`, right?
Could this have a problem for the key?
I think we should just return 0 here.
I don't think we need the second part of the task.
I don't think we should be passing in the old version of the `component` object. Is that intentional?
Is this a BC break?
this is not a test, the `max_sizes` value should be `None`, otherwise it should work with the `max_sizes ` with `1.8`.
@tgamblin I'm not a fan of this. The reason is that the test is to allow this test to run on each build process, but the test fails without this change is that we're going to run on each build process with a different version of the build process. I don't think it is a problem.
This import should be removed.
I'm not a huge fan of keeping `renderMyDeviceAcquirer` as the default. Can we just use `verifyDeviceAcquirer`?
I think this should be `TaskTaskTaskTask{}` instead of `nil`, right?
`Word dependencies` is not used. `__ } from 'lodash'` is a better name than 'lodash'
Did you want to make these `enode` statements removed?
I don't think we want to do this. If we do this, we should probably just make `acme.Authority` a `WithDatabase()` method that returns the server state.
do we need tests to ensure tests are run with `expect(...).to.equal(...)` ?
This should probably be a warning, not an error.
This import is no longer used.
Why is the default here?
`const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || Number.MIN_SAFE_INTEGER;`
This was a bug, we should be calling it `_sethandle()` instead.
This change is incorrect. The only reason we're using this code is because the wlr_xdg_surface *surface would be a wlr_xdg_surface *surface would be an wlr_xdg_surface
I think this should be `not existed Pod`.
I think the discussions here is the only place where `svcDescriber` is used. I think the better approach would be to use the same logic as the other options, like `TDescriber.deprecated_file()`.
please remove this
is Column(String(256), nullable=False) here?
This change is unrelated to this PR, but we should probably rename the function `GetRootNodeForTest` to `TestAccAWSeTest` to match the other `TestAccAWSeTest` methods.
I'd prefer to see the `<=` in the if block.
Why not using the int-specific string here? It's more readable to use the `nolint`
Can you change the 'force' below to 'link', as it will be called before the 'forceUpdateCollection' method is called?
What if we added the `if` here? The `platform` is not the same as `user`?
The `isAuthenticated` should not be used. `global.googlesitekit.setup.authenticated = response.authenticated;` should be changed to `hasoglesitekit.setup.isAuthenticated` to `hasoglesitekit.setup.authenticated = response.authenticated;`.
I think this should be `!== NULL` instead of `pingWaitTime`
I would just change `kinesalite` to `KINESIS_PROVIDER` in order to avoid the `kinesalite` test
right is not needed
I don't think we should be using maxRetryTimes in the constructor. I think it is better to have a method for maxRetry and max7Times.
I think it would be better to have this as a helper function to avoid the `signedUserName`
I'm not sure this will work for other components. I think we should be able to just use the `ProcessExit` here and use it here.
I think it's better to move this to a new location instead of using the new one.
This change makes the code more readable. I don't know why we need the `h` part.
`DeleteHash` is a bit confusing. How about `DeleteHash`?
This is not a good example of what this is doing.
I think this should be a separate PR, right?
This should be done in `__init__` for all cases.
I think this might be a good time to change the behaviour of the `PluginInfo` to `instanceInfo`
We should just use `convert` here and let `QMetaType`. The `value` is already the type of the `convert` method.
I'm not sure that this is the correct way to do it. I'm not sure if we should do it or the right thing to do. What if we made this a context.Writer and then done on that context.Writer?
Align the operands of an expression in an assignment spanning multiple lines.
The `+1` is not the right place to put this. It's the default behavior, so we can just use `string.Format(Resources.ImportTransitionListColumnSelectDlg_DisplayData_Column_) + (i+1).ToString()`.
I think we should use the same constant for each loop
This function is not used anymore.
What is this method used for?
I think this is the only change in this PR. I'm not sure if we should remove this method. If the `DatasetFieldType dsftTest` method is used, then I think it is not needed anymore.
Should we use the `CertificateRequestApproved` function?
Why do you set it to False?
why is this changed?
I don't think this is needed
I'm surprised this didn't break anything, but I think it's a good idea to keep this around to make it easier to find what the API is.
This should be `priv_getTransactionCount` instead, otherwise we wouldn't have to change it.
I think this is the only change that needs to be done in the PR description. The code should be able to handle the case where the mem binding is a mem binding, and the next mem binding should be used to get the mem binding.
Why is this needed, it doesn't seem to be used anywhere?
why update it?
I don't see why these are needed.
It would be better to use a `User-Agent-store` that is the `User-Agent` attribute.
should this be 1.7?
I don't think you need this #if .
Should we also change this to use `tab_count > 0` here?
can this be `c.config.36u`
Should we rename `params` to something more meaningful?
This is the only change I'm not familiar with, is this a good approach?
This can be removed now since it's no longer needed in #1717
Shouldn't this be in the consensus consensus instead?
I think this test is not testing the same as before?
Isn't this the wrong place for this?
These changes seem unrelated to the PR.
you should not use the translation method here
Is this correct? In case we have `#WinRM::Connection` we will get an error when the user is not present.
`get_requests` is not used anymore.
The node_id is not a connection object, so we should be able to remove this check.
what is the purpose of this line?
`onPreExecute` is a bit confusing, since the method is used only once. It's a bit confusing. How about `onPreExecute`?
I'm not sure if `RESTRICT_ACCESS` is the best name for this test. What about `can_create?`?
I think we can keep this in the `onFocus` method and remove the `focusTimeout` function.
I'm not sure if this should be a `GetConnTrack`. The `facer` is used for `config` and `GetConnTrack` are used for the `config.UnboundedUnConsumer` interface. I'm not sure if it should be an `facer` or something.
This will fail if `SessionId` is set to `false`.
I think we need to do the same in `setIfNewer` too.
Should we also mention a package for this? It seems like it could potentially cause a problem if the package is not available.
nit: you can just use `isApplicationObject`
I would prefer a list of dispose values, not just dispose.
The GPU should be set in the Caffe class.
Please rename this file to `computed`
This is a breaking change. It should be fixed in a separate PR.
If you're going to be using the `*` value, then you should use `\d` as the first parameter.
Can you add the `/cstor-volume` package to the `/cstor-volume-grpc` package?
why is this `bad_alloc` instead of `model_bad_alloc`?
What about the miner with miner that can be 0.001FIL?
Can we add a license header here for the file to be removed?
I think we should also mention that `!number` is passed in as the number of retries.
I'm not sure this is a good idea. What is the difference between `Rule` and `Rule`?
This is a change in behavior that is needed for the test to pass.
This should be a `buildBinaryFor` method.
InMemoryMetricExporter() method is used to avoid creating a new exporter instance. I'm not sure why you changed it here, but if it is, I'd prefer it not be there.
should be a single string
@matt-gardner How does this change help?
Does this need to be configurable? The ` getInstanceId` should be omitted from the other side.
I think you can remove this line now
Suggest rephrase `TrimRowsRows` to `trimRows` (or `maxRows`) and get rid of the `trimRows` part.
I think this should be a separate function or a `_default_is_extension()` method. I would have used `_is_extension(node->data.scalar, "default")` instead of `strcmp`
Is this a public API?
This should be `@deprecated Class is deprecated`
why did you change the default?
I'm not sure this is correct. If we want to use the `find` method, we should just pass the `countlySidebar/` to the `find` function.
I don't think this change is needed.
It would be good to check that the X_AC_ENABLE_SANITIZER is empty.
This change is needed because we have the proto set to the filename.
I don't think this class is required, it's only for tests.
I don't like having this in the first place. Is there a reason why it is here?
Not sure if we want this to be an empty config object.
I think you can just do `if (exMessage != null && exMessage.startsWith("Data"))) {` instead.
I'm not sure why we're changing the default here?
Is this a typo?
TODO: In this TODO I am not sure we want to remove this TODO.
I think we should return an error if the project has both the resources and Emptyating. This will make the request easier and not realistic.
This variable is unused.
why did you change it from afeIDSpec to afeIDSpec?
I think this is a bug. It should be removed as it's a copy of the planeTiles
This is a good thing. I'm not sure if this is the right fix for INCR. It's a very common use case, but it's not a good thing. It's a little odd.
@jeherve @jeherve @hackaugusto you may need to fix the other PR. The code below is not doing the right thing, but if you are doing the same, you can remove this.
I think we should use `JSON.parse` instead. It's the most important case for users, but it might be worth considering to avoid this in the future.
This is a change in behaviour, but the code below is not correct.
This if statement should be `if exp.Target.StressChaos.ContainerName != nil && exp.Target.StressChaos.ContainerName`
this was a bug, right?
Does this mean that if `pvc` is `null` it will get the wrong default?
I think you should not need to write the 8 8 8 8 here
Missing a `transformer` module.
You can use `SelectSubscriptionActivity.class` here instead.
This is a bit odd. I would use a check-check here.
I'm not sure if this is the right fix, but I think it's just a good idea to do this.
This is not a PODF
This should be `json:"version,omitempty"`
This is not the same as `Intl.DateTimeFormat().resolvedOptions()`, right?
I don't think we should add a new `hostpath` property to this function. I think it would be better to just send the `hostPath` as the `sendEventOrIgnore` object and just send the file directly to it.
What's the reasoning for this change?
This seems to be unrelated to the commit description?
I think we need to make sure that the errors are always going to be used.
This should use `$normalizedConfiguration['text'] = 'text'` instead. The code is not using `$text` as the field name.
why not `endsWith` ?
This property name is confusing, and should be renamed to "ZipExportProcessorOptions".
Can't we just make this a private function like `RecreatePipedKeyResponse` instead of `RecreatePipedKeyResponse`?
The only thing I'm not sure is that the ads will not show ads in a different network.
Do we need to update the tests to ensure that this is a non-empty string?
This file doesn't exist, you're using the `FileCitationEndNote` version.
Not sure if we should be using the `MapMap` here. We have to update `allMap` to include `cliquet` in the future.
@jridgewell I'm not sure if this is the best way to do it, but I'm not sure if this should be the right way to do it?
I don't think we should ever be changing this. The output of the `AppliedTo` field is not a `unitAccounts` field.
`hide caret` is not a `C are ->`
Why did you change this?
This should be `smallsmall.REQ.ACCOUNT.PING.CONNZ`, and the `acc` above should not be needed. The ` destroyed` above should be `https` or `https` (the `https` should be `https`) and not `acc`)
I'm curious why you changed this to use `volatile` rather than `volatile`
I think you should also change the path in `conf/htpasswd`
I think it would be more useful to say "The has method which cancels the callback."
This test doesn't fail because of the `second` block.
Should we also check `precompressed`?
The name `_Unknown` should be renamed.
This doesn't seem necessary.
Why do we need @Deprecated here? If we don't need it then it can be deprecated.
Please add a `#include` before the include.
I'm not sure this is needed anymore.
@matt-gardner How do you feel about having two constants for these? I'm not sure if we want to keep these constants for the same values. I don't know if we will have a better suggestion for these, but I don't feel strongly about this.
This should be `masterPivotFacet`.
Do we want to put this in a separate file? If not, we might as well do it in a separate PR.
I don't think you need to add mocking to the botocore. I think you can just mocking and the `bot.start` above.
I don't understand this error, is it?
Could you add the `newStreamHandler` method to `ServerStream`?
double scale should be wl_fixed_to_double
I think it would be more readable to keep these methods on the next line, as it was done in #5026
why not just use the same name? `step.name` is the default value
The "standard" label should be "has not end".
I think you could use a more descriptive message here. "status you may not approve the principal..."
I would have expected this to be a request. It's not a valid option. The `listens_matched_p` should have been defined.
why is it named as test_container?
I think you can just use `java.com/temporalio/proto/execution`
I think it's better if we just copyqr.qsubs and then copyqr.qsubs
I think this was a bug.
This change is not needed. You can use the `outs` variable directly.
I'm not sure if we should handle this here. I don't think the code is right, but it seems like we should have a different behavior for the `else` block.
Is this used?
I think this should be `if v6IPNet, ok := addr.(*net.IPNet);`
I don't understand this. If the `record` attribute is not present, the `details` attribute should be added to the client. What is the reason for this change? I think it should be added to the client.
(style) line over 80 characters
I don't think we should remove this, it is not needed anymore. The Settings.versions() should only be set if the current user is not set.
I think we should return a `_` here, since the `!==` in `init()` will return a `string`, which will return `false`.
I think it would be good to use the `name()` method here
This should be reverted.
if `s.mu.Lock` fails, delete the `try...`
This variable was unused.
You can use `PRIVACY_MULTI_TENANCY_NO_TOKEN` here.
@puppetdb/api-server should this be a config option instead?
I would raise an error here. The `if isinstance()` check is unnecessary
I think we need to use `GrpcHandler.Request.use` here.
I don't think it's a good idea to remove this, since it's not safe. I don't think it is a problem, but it's not clear what the problem is.
This is the way it is done to use the `ADIOS_HAVE_by_active` version instead of the `!==` part.
why is this needed? if the user doesn't use `cls` it's going to be used, right? I'm not sure if this is a good idea to do something with `stack_name`?
Why is this removed?
Could you also move this to `androidKeystorePassword`?
can we add a check for `nil` here?
This is the only change I made. The only thing I've been trying to get is the `_` object.
The tests are failing because of this test, so I think it's ok.
This line should be reverted.
I think `bool ParseHeaders(TRequestHandler handler, ...)` is the correct way to go
I think we should move this to HIVE_ICEBERG_METADATA_REFRESH_MAX_RETRIES_MS. It is a simple string, so it should be fine. Also, we can move it to HIVE_ICEBERG_METADATA_REFRESH_MAX_RETRIES() so we can avoid the need for a new config file.
Could we use `dnsmadeEasy.SecretKey` instead of `dnsmadeEasy`?
This doesn't seem right.
We should add this to the existing `HttpHttpMethod` interface, as we already have it in `AmpElement`
I think this is a debug statement and should be removed. The `root` command should probably be removed from the `zip` command.
This is a bug fix. The Authentication Protocol was not used. The Authentication Protocol is used for angular.
I think it might be a good idea to add this to the print statements.
Is this needed?
BTW why not just set it in `ipsets.go`?
This is not a boolean, so I would just call it `Table`
This should be changed to `page_size_MAX_RESULTS`, since we don't use it anymore
Is this needed? Are we assuming that this is the default?
I think this should be `cobuild`
I'm not sure this needs to be OSMOS
I'm not sure why this is necessary. The only usage of this is in the public interface is to avoid the breaking changes. I'm assuming it's a breaking change.
why dump puppet logs here instead of the one from `dump_puppet_log`?
I think this is a little confusing. Can we just always have an diffHTML and not have the diff type?
I think we can just do "epochNum <= a.foundationBonusP2StartEpoch" instead of "epochNum <= a.foundationBonusP2EndEpoch"
I think this is still necessary. It is not a problem, because the user can see their own custom limits, and they're just a different IP address. So, the IP address is not a problem because it is not a problem, and if it's a problem, the IP address is not a problem, then it should be moved to the IP address.
This is a bit of a hack. I'm not sure what `m.GetPaths()` does, and it seems like a better idea to use it in the `paths` function. I think this might be a bit more clear. `GetPaths()` is a bit of a tricky, but I think it might be worth it to just check for `paths := m.GetPaths()` in the `GetPaths()` function.
This check is not needed. It is set in `HidepidDisable`.
Is it possible to add a check to make sure the message is not initialized?
Is this file still needed?
This should be `prevFolderId_`.
I think we can remove these now
This is not correct: `lbann_comm` is an `const comm` of the object. The `finalize` is a `const` for the `lbann_comm`.
This is a bit unrelated to this commit. It's a bit unrelated to this PR but it seems like it's not related to this PR.
This is not used anymore, right?
I would use `toUpperCamelAndDigits()` and `toLowerCamel` to avoid any confusion with the `toUpperCamel` implementation.
This should be `true` to make it clear that it is a `null` value.
Is there a specific reason to change this?
This is not right, the random SP will be random. If the random SP is off, the SP hasn't random, but the SP hasn't random. If it is off, the random SP will be random, but the SP will still be random, so the random SP will still be random, right?
This will need to be moved into `GetStatus`?
I don't think it's a good idea to have a `ctx.Config.RenewCert(allowPrompts)` lock if it's a renewal.
I think the indentation is wrong here
I think this error should go in the `DeploymentNotification` package, otherwise it may not be used anymore.
This will cause the error to be logged
I think we need to add this to `JDKDK.Node` as well.
I don't think this change is necessary
I don't see this in the code, but the daemon should be client, not the current client
I think this should be `fs.Config.CompareDest, "copy-dest",`
I think this is the only error that should be put back in `err`.
I don't think this is a good idea... Maybe it should be a `NODE-3405` instead?
this should be a `<%= _('...')`, otherwise there will be a lot of work in the future.
Please use `computedEvents.searchTitle` instead.
Should we return a job_id instead?
I don't think we want to do this. I think the `find` method should be the `id` and not the `id` variable. I think we should be able to just do `.eager_load(:name)` here.
Is this still needed? I don't see it used anywhere.
This `_stream_data` is not needed.
This seems like it should be an ContainerMap instead of an ContainerMap.
This change seems unrelated.
This should be `return` instead of `return`
I don't think this is the right place for this. The only place it would be `TryIntegrationIntegrationName` is `where` in this file. This change is not related to this PR but it seems to be a little unfortunate. Can you change the name of the variable to `TryIntegrationName`? I'm not sure what this is doing here, but it seems more like it's doing the same for `IntegrationIds.AdoNet` as it's a `where`?
This import can be deleted.
I don't understand the logic here. If the method returns an error (theme) it means that it is a string.
looks like there's some logic here...
If you're not going to use the `int` here, you should use ` emit_special_ibl_xfer()` to make it easier to read.
I think this should also be a `work` dependency
Line is too long. [83/80]
This should be set in the `*_config.go` file.
This is the only place where we need to make the constructor parameter `protected`
I'm a little concerned that we'll have to update the docstrings for the new functionality in the future.
This should be removed.
I think this can be done as a different way. If color[0] is 0, 0.2, 0.2, 1 should be 0.2.1 and color[2] is 0.2, 1, and 0.2 should be 0.2.
I think we should also add a method `synchronized` to the `cancel` list.
Is there any way to test this? I think it's more like: `const tsd = new ArrayList(goto err: 'should' =>` or `const tsd.fileName}:${d.line}:${d.severity}]: ${d.message}`
This method can be reverted.
This is the new default.
I'm a bit concerned about this change. I think it's better to have a test for it.
This is a breaking change. It's not really a good idea.
I'm not sure this is the right place to put this.
This needs to stay
This is not needed.
remove empty line
Is this the only error we want? I don't think we want it.
It's not clear from the current state of a test that checks if `self.empty_list` is empty.
I'm not sure how to do this. It is a bit confusing. It seems like it would be better to just pass the `sync.Time` into the `clusterDeployment.Status`.
I think this is the only change that will cause the fragment to fail. The fragment has been removed, so the fragment has not been deleted. The fragment has been removed, so the fragment has been removed. The only way I'm not sure if the fragment has been added is to add a new field to this method and the fragment has been added to the fragment, so it should be the right one.
I think this is a bit too slow. Maybe we can just use the `list` instance here?
Line is too long. [83/80]
This should be a warning, right?
I think it's better to use an expectation `custom template` here instead, since it's a custom template
Why not `scribe`?
It seems like we should add a `addLink` call to add the `Link` call.
Do we need to check that the header is in `flushInterval` or `source` is in `http.Flusher`?
I'm not sure this is the right place for this. It seems to return `task()` instead of `@return`. The partition data for the file of this task may be the same as `build()` and the file of this task.
@smarterclayton do we want to do this for the `GetRepoRepoNameError` case?
This is the only one I would say that it is not a header.
Why are you using `$useCache = Config::get('cms.twigNoCache');` here?
nit: remove extra empty line
This is a bit weird. Can we have a default value for the error?
Why did you remove this check? I don't see the `else` block in the `ecsAgent` package
The script could be passed directly to the `run_script` method.
Is this a typo?
`request.hasTitle()` is not called in `request.getHumanReadableIdentifier()`.
I'm not sure if it is a good idea to add this to the log message.
I think we can just pass `i` to `resors`. The `interceptor` will be the last thing in the last thing, but the `resors` will always be a value.
This is a bit unrelated to the PR but I'm not sure it's worth it.
I don't like this. I don't like it, but it seems like we should be using `Itoa` here.
This will return contains the tree, so it will not work. You should use the tree.put() method to get the `contains()` method.
I don't think we need this.
I think the `new(heap)` can be removed now since the three lines above it is the same as the `JSONError` below.
I don't understand why this is necessary. The code below does not raise an error if `user_from < 0`, but it does not throw an exception.
@jridgewell I think it would be better to use `size() - 1` instead of `i < < allergens.size() - 1` for the loop.
This is a little strange. Why do we want to return `values`?
Why was this changed?
I don't think this is the right description.
This doesn't seem like a good change. We should probably just pass a config in to `tests/config` and use that in everyone.
Do we have to worry about the `datetime_types` field?
can you please add a TODO to track this?
why is this change needed?
Not sure why we need to keep this test. It's not clear what the block is testing. The `be true` was doing the right thing to do.
I think it's not necessary to call it `_socket` here. It's only used in `lib/libbeat/`
I think we need a JIRA to track this. It's not the same as the data_id but the XHR data.
This was the only thing that I'm worried about, we can't just get the "WIP validation validation" error from there.
This is a nested import.
This needs to be `final`, otherwise it will be `final`.
I don't think we want this. We should be setting the `trip_properties` in all caps. I'd suggest to add a new param for all caps, e.g. `show_legend = param.Number(default=0., doc=""")` and then adding the `has_properties` in the plot.
A bit worried about the length here, if it's not a traceId, then it will be a `trim`
I don't think you need this.
This should be renamed to something more meaningful.
`!number` is a little too broad.
This should be "orgname", otherwise the user can't see the benefit of the test.
This is the only place I would expect to see this method as a separate method, and it is not called anywhere else.
This is a no-op, as we're now only passing the full master list.
Should this be `go-filecoin/proofs`? I think the other package imports go into `go-filecoin/types`
I think we need to do `msg.MessageId != nil`.
Why is the `nullID` needed here? Is it the same as `nullablePropertyId` in ` ('sql', 'sql', 'Dll.run')`?
Why is this needed? I don't see why it is used anywhere.
I'm not sure if this is the right fix. It should be `col->expr()->isInputExpression()`. The nullptr is not a pointer and should never be empty.
Is this used anywhere?
I think it is better to make it a string, it is a string, not a `lt;'` (i.e., `<pre>{message>`).
@sparrowDom Just a thought, are we sure this is the right approach?
Block has too many lines. [39/25]
I wonder, should we rename these to `TimeTenentMaxLength`, since that's the only thing we need to use for the `TimeUnit`?
Same here about `protected`.
This function will never return null, so you should just pass it in as an argument. This function returns `chooser` if it returns false.
The log message should be applied only if the level is not found.
I'm not sure why we need the nonce here.
I don't think we want the default value here, as the user can't set the default from the server. I think we should do that in a separate PR, but we can do it in a separate PR.
Is this used?
I think it's more readable if we used PublicHeader instead of PublicIC
I don't think `Character` is the right approach here.
This is a good idea. It's better to put `return false` in the `isInterface()`.
I think we should leave this file unchanged.
I'm not sure if this is the right place to fix it.
Is this the `StateStats` variable used anywhere?
Can you add a `filters` entry to this entry to make it easier to read?
This test is still testing what we want to test. `test.equal('TEST', options.raw)` does.
This view will be set in the view view. Is it intentional?
So we're just checking if `pr.peerToNode` is 0?
I think this should be removed.
Minor nitpick: It would be nice to have a test that checks whether the `break` value exists.
Use the new Ruby 1.9 hash syntax.
This is a very minor thing, but we should be able to use `.io` for the `.io` files.
If you're not going to use the new tests for `mongo_server` this should be fine
I think we can change the `googTitle` property name to make it easier to read.
`Split` is not used in this file.
I think this import can be removed.
I think this is a leftover from debugging. Can we get rid of the `error` prefix?
Can we move these above the `conda/` package?
I think we can remove the `loss = F.binary_cross_entropy_with_logits(loss, true, class_weight, reduction='none')`
I think it is better to use a more descriptive name like `testType` instead of `testType` for this test.
This change is unrelated, I'll put it back to the PR.
I don't like that this is a good idea, but I think we should just use a `convert(schema)` here.
I think this can also be `bluebird`.
Can be final.
Please remove this file. The targetlist field has a parameter name and it's used in the call to `target_link`
This is the same as `expectation` method, but I think it should be fine.
Align the parameters of a method call if they span more than one line.
I don't see the value of this property being passed as `[NotNullWhen(true)]`
I'm not sure we should add this to the `TODO` below but this is the same as `TODO` for the `TODO`
Is this change related to this bug fix?
This is the only change that will cause the server to get from the touch, so I removed it. It's also possible that the service is not in the touch, but it's not in the touch, so it's not necessary to get it here.
I'm not sure this is the correct way to fix the existing image image, but I don't see a point in adding the new image to the new image.
Should this be a pointer instead, so that we can set the struct directly?
This seems to be a little strange. You can just use `func.Len(t, manager.Sessions, length)`
Is there a specific reason why we need this?
Can you remove this line?
Is it a good idea to add a `Db` field to `src/`?
This will be called in the `on_external` module, not `on_external`
Looks like this is missing from the "if" clause
This will be a no-op, right? I think we need to do the same for the `_show_source_pygment()` call
I think this is a bit of an over-kill, but I think we can remove it, and we don't have to worry about it.
This line is redundant.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is there a reason why we don't want to retry here?
I think we can remove `VERSION` from this class now, I'll update it.
why change the order of equal value?
@configuration.fail_if_no_examples is the current user, so this is not the right one
This is the wrong place to do this. The `Blockly.FieldVariable.prototype.referencesVariables` method has a `true` value. The current `object` field was not present on the client side, and the client side was not present. So, it was only used in the client side. So, it was not doing anything.
I don't think this is correct. We want to have the old method to be able to be part of a specific method.
I think we should be able to use `add_options` here, as we already have the `type` field in the `add_options` package.
`_instance_name` is a platform argument, not an `int`
The `Exit` function does not seem to be used anywhere, so should we remove it?
I think this is the wrong place for this.
What is the reason to not have a volumeStatusOK here?
This should be `throw new IllegalArgumentException("metric variable]`
This file should be removed
Shouldn't the same be done for the other methods?
Line is too long. [90/80]
I think we should move this to the `@NonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonNonRRRRRRRRRRRRRRRR
wrong import order
if we are not going to use `profile_json.as_json`, I think it's worthwhile to do `if options['args'] = profile.as_json`
This should be set to 3.0, so that the default value will be set to 4.0, so we should not add it to the file here.
Shouldn't we use the existing `Http2ExperimentSwitch` field?
I think this should be a `dict` instead of a `dict`?
Why are we removing the `merrors` import from this file?
I think this error can be moved to the `else` clause.
This is not needed.
is this necessary?
Is this used?
This should be `VUID-VkImageSubresourceRange-aspectMask`.
This should probably be `sum.to_s`
If this is a specific test that should be passed into the `600.systemdsystemgeneratordir` function.
I think we can remove the classification and get the same behavior.
This is the bug fix. `methodInitCode` is a bug fix.
This should really be `startTs`.
I don't think we need the `rect` here.
This is a bit confusing with the `_` in the `cancel` method.
This is a bit of an unrelated change. The parent class is already defined as a class (which means it does), and it should be removed.
Can this be removed? I think `EmberRouteMixin` will do the same for `route-session`, which is not the case anymore.
I think we can get rid of this ThreeStateWorkflow
This is the fix. It should be `np.NaN, 0.7, 0.7`
please update the summary above to match the new param
I think we can move this to a new location, because it's part of the existing `Python` module.
this should be reverted.
This should be `Bomb Delay`, not `Difficulty`
This is a breaking change. We should not be adding this in the `forEach` loop.
I think we should just check if the image is not nil, and not just staking.
Could this be moved to the `var-dumper/Resources` file, since it's not used anywhere?
I'm not a fan of having this in the `app.Create` file. It's not a big issue, but it's not a real problem.
I'm curious why this change?
I'm not sure if this will work. If `Dockerfile` is `None`, the default value should be `False`.
This function is a function, not a function. It's a function that is passed as a function.
I think this should be: @c_level = @group_level -= 1 if @group_level > 0 @group_level
Why not use a regular `SparkWithPartition`?
Could we use `get_notebook` here instead, so that we don't have to check for the content here?
I'm not sure this is the right place for the search field
Why is this test needed?
This should be removed.
Do we have a build message for this?
This should be `if options.fullResponse === 'boolean'`
I think it's more consistent to just import `from string import ascii_lowercase` and `import` from other modules. It's more likely to be confusing to see how it is used.
This is not a good example of why `test.done` was not called. I think it would be nice to have an issue to track this. I'm pretty sure it was the only thing that was here, and it's not the only place that calls it. I think it would make more sense to have an issue that `all()` returns a new one, but then the one that calls `catch(function(err) {` in `test.done()`.
nit: remove empty line. (I think it's not needed since we're already doing it elsewhere in the class.)
The `Conv2.7` is not a `class` class. It's not a `MediaLibrary` object, but the `SystemMediaLibrary::class` is a string.
I think this is a breaking change. The EnableAdminApi string should be the default. The end user doesn't want to enable it.
This is a no-op, but I'm not a fan of this.
This is a bug, because the queue is not in the flow records. This should be fixed in the flow records.
Should be `<br>`
This should be an array of the input parameters, not the input parameters.
`2` should be kept as a parameter to this method, not as a parameter.
This is a change in behaviour, but it's a good change.
I don't think we need this line. It's the one that happens. The test should probably be moved to the `testEncoder` class, so we can't just pass the resource directly.
(style) trailing whitespace
This file is unused
I think you should add `if reconcile.Reconciler` to this list as it is now not used
I think `getClientConfigImportModule` is a better name. It is used in the `Client` method and I'm not sure if it is worth it.
This is the only line change in this file that will be removed in a different PR.
Wouldn't it make sense to have a `_agreedCapabilities` class in the class instead of this class in the `spec.ts`?
This will fail if `+1` is `nil`.
can you make the `t` here and not the other way around?
this is a bugfix
Since this method is a public method, I think it would be better to move it into the `individual_approvals` method.
do you really need this assertion?
I think we should keep this interface for now, and add an `@Nullable`, to the interface.
We should check if `CATALOG_URL` is set.
This should be changed to `update_state_map` and not `update_state_map`
This is a change in behavior that is the only place where this exception is thrown. I think the only thing we should be changing this to something more specific.
Is there a reason why you wouldn't just use `this.inputs[i]sequence` here?
This method name should be more descriptive: `GCS uploader` or `InvalidDataFormatError` (or whatever you are using it) would be a more descriptive name.
`final` should be `length`.
Do you think it's better to add `/settlements/{peer}` to `peerSettlements`?
why is this in the config file? we are not doing anything with the config file anymore
I think we can just use relative imports. It's the only thing that should be done in the `if kinto` block.
I think this should be reverted
I think this will break the existing extensions that will be updated. If we don't want to do this, we should add a new method to `file.properties` instead of relying on this property.
I'm not sure if this is the best way to fix the issue with @dvoytenko. I'm not sure if we should do it for now.
Please don't make use of this file, it's only used in the `Debug`.
We should use something more specific like "DeprecationWarning: EvalHook is a deprecated method and use it in both places. Also, it should be just `verbose` or `and`. Also, I'm not sure how to use it, but I'd like to avoid adding warnings if possible.
Please use the logger here
This import should be removed.
Please remove the #.
This is a bit of an improvement. I think if we use `isEmpty` we could also use `key[0]==='o'` and then check for `type!=='function` and use the `key[1]` type.
I think this is a good change. The hook is passed the plot object and the displayed object, and other plotting is accessed via plot.handles.""" so the doc will be accessed via plot.handles."""
I think you should check if the value is a specific value, otherwise it would not be used if it is an array
This feels like a little weird to me
I think we should use `String.format` here.
I think we should not add this method to `isSymbolUsed` method.
Is this change intentional?
I would use `ec2_client.get("ReviewReviewReviewReviewReviewReviewReviewReviewReviewReviewReview()` instead
`undefined` is undefined
This file should not be used.
Is this change necessary?
@jridgewell I'm not a huge fan of using `opt_port` as the name of `start` and I think it is better if you can use `port = opt_port;` instead.
I think we should change it from "codec:" to "stack:"s" instead of "codec:"s"`
Please add a default value for this config value.
I would suggest to add `.map[string][]string` here.
Why is the class still in `Function`?
Can we use `Array.linklink()` to make it clear that the user is using the value from the `max-committed-checkpoint-id`?
This will not work. `signal` will be a `BLACKLIST` instance, and `BLACKLIST`.
This will not be necessary.
This was the bug that we were trying to generate the field in the database. The field is not null, so the `if (field.nested_flatbuffer != null)` is probably not needed.
This should be done in `io.prestosql.plugin.hive.plugin.hive.planner.operator`
Use a StringBuilder
Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
I think the `Series` is not needed here, it can be fixed in this PR.
I think it is better to keep the `PhysicalLocationComponent` as the argument name and use it directly in the `PhysicalLocationComponent`.
I'm not sure this change is correct, but it seems like a good idea to change the name of the module.
I think this should be moved inside the `if pool.numPendingWholeBlocks > 1` block since the only thing we need to check is the `expFeeFactor` is the number of items in `row`, so the code can be moved inside the for loop.
This should be a separate PR.
I think we can just remove this method and use `FileNotFoundException` instead.
why not use `$this('E-mail')` here instead of passing the value as `Email`?
`map` is not necessary because `RunnableNodes` is `null`. So `RunnableNodes(false) => implicitSelector + ':not([role])'` is always non-null.
This test was only testing the `super(props);` and `thing`s are not needed because it was already called on line 576.
This test fails without the fix, right?
You should use `.order()` instead of `.order()` here.
Is this necessary?
I'm not sure this is a good change. It seems to me that we can always create the RequestHeaders object.
I think this would be more appropriate. Maybe `typeBeta`
Why is this change necessary?
What if the trace is `on`? Shouldn't the `view_map` be `on` too?
This file is removed.
You can use the `exporter.Export()` method here.
why are these assertions needed? `assertIn('id', ...)` is not really necessary.
This is a change of behavior, but the code in `spec/services/tests/main.md` doesn't have to be changed. The code in `spec/services/tests/constants.go` is only used in tests, so I'm not sure why this was changed. It seems like the code is not being used in this PR, but it's not a problem.
`width = 2, maxWidth = 2`
This is the only thing I'm not sure about, but is there a reason why we would want to use `.map()` instead of `searchTerm`?
Why are these force?
this is not correct, it should be removed
I think it would be better to use a `<p>` here instead of a `str` (or a `string`)
This should be set to `""`
This is a little confusing to me. Why is it not a list of `in_data`? Isn't it a list of `in_data`?
This should be `\n`
I think this is a leftover.
I'm wondering if we should use `varvar` for next and use the same logic as `split`.
These are all of the changes in `NumOfCallFromPayloads` because of `2` in the converter's `2`
Can you add a blank line after this import?
Do we want this to be `<attach>`?
This is not needed.
I'm not sure if this is a change from the current behaviour. The problem with the change is that the `IsAny<double>` will be a `Node` (not sure how we want to test the case where we can't change the default for the `IsAny` to `Node` (and we can't use `bool` for `IsAny`) is a bit of a hacky.
Since we are removing the `list` from the list, should we just remove the call to `dao.iter_cai_assets` and remove the call to `dao.iter_cai_assets` here?
The info info info is a string. It can be changed in a separate PR.
This is a little confusing, why do we need a new `ContributorFact` here?
i don't think this is used anywhere
This should be `return`
This was a bug in the test that was removed.
This is the fix.
Please include the other include blocks in this file, that's why I added them.
This is a breaking change. The `LambdaMethodReference` should be `OptionalOrElseMethodInvocation`.
This change is not related to this PR but I'm curious why you didn't put it in the PR
I think we need to check `sys.version_info < (3, 3)` here and below too.
Can you add an issue for this?
This is the only place where we need to make sure we are running the ID of the ID of the ID in the `java.util.config` file. I think we need to do that in a followup.
I think this file is not actually used in this PR. You can just use `Word dependencies` instead, since it is not used in the file.
This line can be removed now.
Can you add this to the existing `Dispose()` method?
I think this TODO is redundant now that we're modifying apps registered by another Piped right?
I think this is a bit of an overkill, but I don't think it will hurt to add a snapshot to the snapshot. Maybe we could just call it `spack_snapshot`?
I think we should also check for the `awslogs` value here, otherwise the `test` will be ignored
This is a little confusing to me. I'm not sure if we can just use the batch size here. What if we just use the batch size?
I think we should change the task param to `task`
Why not use a `arguments-out-of-order` constant instead of a `out-of-order`? Then it would be more clear that `arguments-out-of-order` would be used instead of a `out-of-order` as the name of the `arguments-out-of-order` would be more clear.
I think we can move the `show` method to `SnackBarHandler` and use `no_account_signed_in` directly.
This is not a good idea to have the `toHosts` return value, but the `str()` function will always return the same value as `false`.
`$` -> `$ string`
I think we should be able to get rid of the `if` statement here, and instead use `if (!str) {` for more flexibility.
I don't think this is needed, right?
This is a bit unusual. What happens if the data store classes don't have a `n` or `n_tarball`? I think it's not a good idea to use a data store classes.
why not just `return`?
(style) line over 80 characters
This should be `denField`, not `denField`.
is this going to be used anywhere?
The `escape` parameter is a `const` parameter, so this is a fix for the test.
Nit: I think it would be better to just use `always` rather than `always`
I think we can use `runtime.size` here.
This is not related to the rest of the PR, but I don't see why it was there.
I'm not sure if this is a good idea. What about `<%= f.p. Manifest_to_name>`?
Please revert this.
I think it's better to move the `log` to the `log()` block.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
nit: can you rename this method to `HelixelixnetConfig`?
This is a breaking change. It's just a cleanup of the PR.
I think this is not needed.
Do we want to make the `tenacity` configurable?
I think this is the only usage of this class.
Maybe we should just pass the entire null here and pass the null to the constructor?
I don't think this is the right place for this. I think we should be calling `getProfileID` here. We should either be using a `null` ID or we can use `validateProfileID` instead of a `nullID`.
Why is this removed?
Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
I think we should be able to avoid using ` metadata == nil` here.
This method is only called on a notification. You can just put it in a `email` and call it directly in `cart_email`.
Please avoid wildcard imports.
This test is not needed, you can just delete the `if` statement.
Why is this deleted?
I think this is a bit too expensive. I would just say something like "if (throw !res) { ... } else { ...} else { ...} else { ...}
why not write write to the block as input?
The type should be `Events`, not `The`, right?
This should be in the same package.
We can remove this line
This file is no longer needed.
I think we can just use `return name.replace(k,v)` instead of the hardcoded name here.
why not just switch to the target namespace?
This should be `await Task.Yield();`
nit: I think the `Late` is not needed here.
I don't think it's necessary to auto space here, it's only needed for auto-space, right?
I think this should be in a `filters` package.
This is not right. `connsRespSubjNew` should be used for both available available.
I think it's better to move this line up, so it's not used anywhere else.
You can use `\FrameworkBundle\FrameworkBundle\Router\DomainRouter\DomainRouter`.
I think this should be done in `is_merge_or_booted` instead of in `is_merge_or_booted`
This will not work. It will return true when `role` is empty.
I think we can remove these.
Shouldn't we use `skip_session_tracking?` here?
You should be able to use `raise` here.
This file is no longer used, right? It should be removed.
You can use `* 2 / 3` instead of the `* 2 / 3`
I think this is a leftover
The API uses this field. I don't think we should be using it.
This is a very minor thing, and not a big deal, but I would prefer a separate PR to use the "Top" class, which is not really the case.
This is a breaking change. It should be a trailing comma
Line is too long. [83/80]
This should be `bool`
This change was not related to the PR.
I'm not sure if this is true or false. Is this the right place to put this?
why not just remove the minerAddress and call itblock.Address directly?
Should this be `json_json_version` or something like that?
Why remove `tm_py` from `cpp`?
Is there a reason this is added to `init()` instead of `init()`?
is this a regression?
The protected protected doesn't seem to be used?
Is this needed? It seems a bit of an unbounded state. Could we use `mongodb-extjson.local()`?
I think we don't need this anymore, since the default is `None`, so I think it should be `Optional[str]` or `Optional[str]`
Can you please move this to the `HAVE_RSEQ()` call? It's not clear what the `HAVE_RSEQ` is.
remove empty line.
this should be the new spec spec
I think this can be removed.
`wait_for_event` -> `wait_close_stop`
It seems like this should be a module-level function. It's not a module-level function.
The variable name `NewVersion` seems a little misleading.
It's not a good idea to add the &workflowservice.PollWorkflowTaskQueueResponse, since it's the same as in `service.PollWorkflowTaskQueueResponse`
`read` is not a string, so it should just be an `client_options[:read]`.
This is the wrong way to do it. It's a preferred function that is called `facingMode`.
This is a good change. It is not clear why the `ImageSubresourceLayoutMap` is not `LayoutEntry`, but I don't see why it is needed
Why not just use Svc?
I don't think this is needed
I think you can use `strings.Actions` here
I think it's better to use `result` rather than `\`.
Can you change the types here too?
Isn't Interop\Container\ContainerInterface sufficient? If not, we can use Interop\ContainerInterface instead of Interop.
Why is the `docroot` change necessary here?
I don't think this change is needed. The public constructor is already `public`.
This code is now only used in the context of `node.Node`, so no need to remove it.
Do we really need this to be a public API?
This is a breaking change. We need to be sure that this is only used for tests, but not for tests.
This file doesn't seem to be used
This is the only change that affects all calls to `Query`s. I don't see why it's needed.
Do we want to keep the old labels? I think we should keep the old labels in a separate change.
This should be `icons` to avoid the tab icons. If the class is `true`, the array should be renamed to `secondary`.
I think it would be good to add this to the docstring. I'm not sure what the best way to do is is, but it might be good to have it in a separate PR.
I think it's better to use a list of `DataflowServer`
> Won't `GetMethod()` return `false` if the component is `GetMethod()`?
This should probably be a `@SuppressWarnings("")`
Isn't it the same as the `errno == EAGAIN` check above?
This should be `''` (or `''`).
Could you try to avoid the try/except block?
what is the default setting for here?
Why not `package.io/otel/internal/debug`? It's a little bit confusing with the package name. `go.opentelemetry.io/otel/internal/debug`, but I think it's more clear.
I think it is better to keep the type as `string` rather than an empty string.
Should be in a try/catch around this one, and in the case of `bool(prefix)` in `column_label`
Why are we using this variable? Isn't it a constant?
why do you need to pass `module_class` to `type` ?
This is not needed.
why not just `is_integer`?
I'm not sure this is the right place for this, but it seems like it should be a column or a column. I'm not really familiar with the code but I'm not sure it makes sense to have a column for this. I guess I'm not a huge fan of having a column on the table table, so I'm not sure how much this is going to work.
nit: remove extra new line
Should this be `DEBUG`?
I think we can keep this, it's not a part of this PR
This should probably use `paste-primary` as well.
Is it possible to use the constant here?
This was removed because we are not using it in any way, but we should probably move it to the baseclass
I don't think it's safe for this to happen in the case of a tradeItem that is not a tradeItem, it's a tradeItem that is not a tradeItem.
Could we add the github github github here?
You should use `return ()`, otherwise it will always return a string
This is a very specific test, I don't know if it's possible to have any other test in the future. If it is not possible to run this code path, it will be better to use the `lang.` prefix.
It's not clear to me what the best way to do this would be `api.SpecNodes(api.SpecNodes(arg2)` instead of `nodesRegex`?
`account.new_record?` doesn't seem to be used anywhere. I think it should be changed to `account.account?`
I don't think we need to do this, since it's not always 1f
This is the wrong thing to do.
async () => {..}
I think the `exporter` should be a constant.
This should probably be removed.
`FileUtil` and `FileDownloadHelper` are the same. Should this be moved to a new Private class instead?
I don't think this change should be here.
We can remove this line.
I'm not sure this was a bug, but if it was the only place it was used.
I don't think this should be in this PR
This file should not be here, it's only used by the new `helper` action.
I think it is better to use `db.capacity == 0`, and then use `db.capacity != 0`
`lock` could be declared as a local variable.
This is a bit of an unrelated change, but we should really be able to remove it in the next PR.
`!bundle.containsKey(DB_NAME)` is not called in the constructor. You can set `dbName` and `dbName` to null if `DB_NAME` is set to `null`, which is not the case. The value is not null, so it is not null, but the value is not null, which is not.
I think we should use a more meaningful name for this.
I think this is a breaking change. It should not be necessary.
I think we can remove the `nvda` prefix as it is not used anywhere.
Why is this deleted? I don't see the use of `#if` in this PR.
Why not use the same name for this one?
this function is no longer used?
This might be more clear as `nixpkgs` or `nixpkgsVersion`.
Why is this being removed?
I don't think it's necessary to include the IP in the error message. The IP is a bit confusing.
I don't see any usages of `enum` in the enum.
I don't see why secondaryConfig is not null here, why not pass it in as an argument?
This is the only change that affects TF32. I think it should be `query`.
This change seems unrelated. I don't think it's a good idea to add a new parameter to this method, since it's only used once.
No need for an array here.
Should this return `true`?
Why include?
Is there any way to avoid this file?
Is this a breaking change?
Should we check for null here?
Why are we catching zk from intentional? Can we use the zk in the catch block instead?
Can you add a TODO to remove this check?
I think this is a bit too broad to catch all the exception cases where `body` and `resp` are provided.
Can we add a TODO to remove this?
Why was this changed?
I think this is not a valid workaround, it should be a different PR
Is it possible that the `Copy` parameter is not being used at all?
Why the change here?
This change seems to be unrelated.
This is a little bit weird. I would have just used `StartHeadLess`.
I think it would be better to add `type='build'` to the end of the string, as it's used in the other order.
I think this is the reason why we don't use `id` here, but we don't have to use `id` in other files.
This is a bit odd, as the keyhint keyhint has been released.
Remove the cast and use `.keys`
This is the fix for #4207
Use options[:current_info][:step] instead ofoptions[:current_info][:step] = {}
I don't understand the purpose of this change. The `returns` returns error should be handled by the caller.
This should be set to the user who wants to set the providers on the user's permissions
This will break if the copy/paste the current user is not in the middle of the Date. That's why the copy/paste in the `return`
I think we can just change this to be `MIN_expand` instead of `alignment.Status`
This should default to false. Instead, we should use `BooleanDefault` to get the default value from `false`.
This is the wrong way. You can just use the set_id() method.
You can't modify the copyright.
I think you can also add `mysqld/mysqld.sock > {0}`
Rails/InverseOf: Specify an :inverse_of option.
This should be done by the `if (stream->tunnel == NULL)` check above.
(style) line over 80 characters
if you're not doing anything useful, you should just use `newLen <= 0` instead.
I don't think we want to remove this
I'm not sure why this was changed. I think the `unique_ptr` should be a boolean and not an array.
This doesn't look right. It seems like the `else` case is not necessary.
I think this is a good change, but we should use `Pattern<T>` instead of `string.MAX_VALUE` in the `install.json` file.
We could probably make this a little more explicit. GapicProductConfig.create(model, configProto, TargetLanguage.GO));
There's a typo here. `it's` -> `it's`
Why did this not work?
@mramato do we want to change this to be a pointer?
You can use `string::format()` instead.
You can use `@phpstan-common`.
this is not needed
I think this can be private. It is not needed for our tests. We don't want to be able to use the private private key in our tests
The heatmap[y - top:y + bottom, right] here should be updated to reflect that change.
I think this change will break existing users.
why not use the `sns` package here?
I think we should remove this line
The file is in `io.prestosql.spi.netty.testdata.enc-too-new.conf` which is in `testdata/server/server/server.conf` so I think it's more clear what this error is about.
This attribute is not used anywhere, please remove it
I think you're missing the `true` here
This is the only place where I would expect `tab-buttons` to be set. I would change it to `on('build-system/server')`.
I think it might be better if the user explicitly sets `GatewaySolverEnabled` to `true` when the user doesn't specify the form. I'm not a fan of just passing the entire entire component to `default_config.go` and have the gateway be automatically set in that case.
I think this is the only place this needs to be called by a `instantiate` statement, which is a bit of a hack.
This was a separate bug.
Should we add an `@param` annotation?
This is not the same as `bpf` in `fetch_generate_root_send_from_dygraph_PATH`, but I don't see why it was there. I think this is the case.
I don't think we should be adding new public APIs.
should be grouped with the other stdlib imports
Is this actually true? IsolationLevel will be set to null?
Why is the interface removed?
Why is this removed?
Line is too long. [84/80]
I think it's better to add an error message here to say "no parent will read all files".
Since we are removing `config` from `LogManager` anyway I think it would be more clear if we could remove `LogManager.Configuration` and just pass it as `true` here. I'm also wondering if we should just have `LogManager.Configuration` and remove the `true`.
This is a bad merge error. The return value should never be `null`. So we should not be returning `None`.
We should probably have some tests about `entry`
I think this should be `""` since it is a string, not a `add`.
Why is this not needed?
I think we can just use `config` instead of passing in `config` directly.
CDNDN: Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search Search
Can we have a default for this? This is a very generic name.
@deads2k do we want to change this function to pass the `d.blah` as a var?
This should be `String.format` and not `String.format` (or `String.format`).
I think we should be able to remove `typeof(int)` from the `map[string]` and `int` here as well.
Please remove debug print statements.
I'm not sure if we should do this here. The `!` should be removed from this file and the `<StringValue>.value.string_value }}</StringValue>"` should be removed as well.
I think we should be able to make these tests pass.
@smarterclayton I think we should move the snapshot into `pd.go` and then we can just remove this line. I'm not sure if it is a good idea to add a TODO here to remove this
why is this removed?
I think `default` is a bit confusing with the name of the method. Is there any reason why it is a method that just returns a boolean?
This should be done in the next pull request.
I think `# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` is probably more appropriate?
The exporter variable is unused here and the next line should be removed.
Why not just make this a `Set`?
This should be `HttpClient./>`, right? `export` is used in many places.
I don't think we should change the `;` for this one. I'd rather have a `Config` that is used for the `[$` and `[$` in this file. I'd rather have a `[$` with an explicit `Config` for the `PropertyProperty` that is used for the `Builder` and not the `[$` and the `[$`
I don't think this is a good change.
I think this line is redundant now.
I don't see this being used anymore.
This was the only usage of the `if (is_single() && comments_open() && ... ) {` block below.
I don't see where `attribute_changed` is called, but it seems like the `changed` should not be a `attribute_changed`
Do we want to add the ItemTemplate id here? I don't think it is necessary to add the layoutId to `GetItemLayoutId`
This should probably be in `__init__`
I don't think this is needed
Why are we changing this?
This is the same as `return r->impl->renderbuffer_from_image(image);`. The same applies for `preg_print_to_image()` above.
I think this should be `<deploy.on\\>` and not `<sources\\>` since it's not a hash (not just a hash)
This should be a `defaults()` function.
I don't think this is needed.
I don't like the `ECS_SPOT_INSTANCE_DRAINING_ENABLED` flag. The `DRAINING_ENABLED` flag should be set to `ECS_SPOT_INSTANCE_DRAINING_ENABLED` in this context.
I'm not sure if we should remove this. It's not a problem. We can keep this for now.
I think we need a test case for this as well
Line is too long. [81/80]
I'm not sure about using `task.exists`.
The default value is not guaranteed to be set. Can we change it to something more descriptive?
I think it would be better to use a `beforeBlock` method that returns the block block, rather than doing the `beforeBlockNetworkData`.
I don't see this file in this PR.
why change it from var to var?
I'm wondering if this should be `!localized? && opts[:localize] != false`
should be removed
If you're going to make a copy of `kvs_txn_t` function, you can remove this.
`when_searching` is always `True` here, so I would just remove this function. You should also add `when_searching` in the `scrolling.bar` file and `_mark_changed` method.
This is the only place where we use the `sys.getfilesystemencoding()` call. I think it should be safe to do `fs_path = bytes(fs_path).decode(sys.getfilesystemencoding())`
I think we can remove this interface. It's not used anywhere else, so I'd just make it a public method.
This is a breaking change as the method is no longer used.
The name `CryptoSm2` was used to match the new name `CryptoSm2` so it's more explicit that it can be changed
I'm not sure if we need to call this method? It's not a big deal, but if you are going to add it to `refresh()` it should be called.
This is a leftover from debugging?
This should be a different commit
Is this method used?
Is there a reason for this change?
I don't think this should be part of the public API.
I don't think this will break anything. I think it's better to do it in the controller.
This is a bit weird to me, I think it would be good to include a default value in the first place, and then just pass in the second. I'm not sure if this is the right default.
Why do we have to remove this?
Can we move this up to its own PR?
Is this the correct way to implement this to avoid the v instanceof?
This should be `1.8.3` (or `4.3`).
Isn't this a BC break?
Please rename this to `stopUser` to be consistent with `stopPort`
I'm not sure if this should be a part of the package.
This is not a good idea to avoid the `raw` field.
Could this have a default value if the struct is `true`?
It looks like we can move this to the `Server` list.
I think this is a breaking change
nit: `\` is not necessary
This change is not related to this change. The only thing I found was that `run` was not called in `go` (and ` go` was called in the `go`) but it is called in `run` (which I think wouldn't be a problem in practice).
I'm not sure why this change is needed?
I think we should also add this to `UserDecorator` as it's used in other places
I think this should be `.map { tag.tag.rstrip.join(" ")`
I think it would be better to have the interface `@type {boolean}`. I think that we can just remove it. `Realicated is this Realm is closed.`
why is this now `corr`?
The second set of error codes are all crowned by this code so it's not a blocker.
This is a bit confusing, as we are not using the `typeof` field anymore. I would expect that the field is not a list of keys and not a list of keys.
I don't think we need to remove this line.
This should be a separate commit
I'm not sure this is a good idea. The function is a `const` so it's clear what the behavior is. It should be `const` instead of `var parent`
This can be reverted.
this should be added to the `Eth1L1DATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATADATA
Isn't the default core.DefaultBuildState supposed to be core.DefaultConfiguration?
Please revert the changes in this file, it's not related to the PR
I think this one is wrong
This is a breaking change, but I think it's better to remove it.
Can you remove this?
Why was this change made?
this is a change in behaviour, but I think it's a good idea to move this to the top of the file
The error is not correct. The error code should be logged. It should be `!==` instead of `.
Can we revert this file?
I don't see this being used anywhere?
I think we should just remove this whole if block as well.
This doesn't look like a good candidate to use `metricNamespace` to build a component that will be called when `component` is not a `metricNamespace`, but I think it is a reasonable default value.
I think it would be better if we could just use the "page name" name here instead of the new one.
Should this be `final`?
I'm wondering if we should use the same `special_ibl_bgp_IN_tgt` constant instead?
i don't think we should remove `pthread_cancel`, since this is a static field.
I don't think you should add the `USER_DOMAIN`, since it is not a valid value
I think you can remove this if you do the above check.
Can you explain why this check is needed? The other one is a version-specific, so it should be the default.
I think we should be able to just `typeof` here and not `number` at the end of `#define` level, since it is the same as `typeof` in this file.
Another spec where we can use `.delete()` instead of `.delete()`
I think this belongs in the `code` field. I'm not sure if it should be a `enum` field.
I think this should be the only time we get here.
This is a change in behavior, but I don't think we should change it here.
Nitpick: We usually avoid the comma if possible.
I think it would be good to have this on the `dashboard` action.
This one is still used in a few places.
is it possible to get this right?
I think we need to keep this uint16 as the default for the new values, and also we can keep the old values in the new one.
WithStamp now throws an exception, we can use `WithTagID` to determine if the user has a `Stamp` attribute.
I think this is a change in behavior, but I don't think we need the change.
I think the wording should be `'\uE000-\uF8FF' + // Private Use'`
The Type\Atomic\T* was a typo
I think we need to make it clear that the default value is `vscode` and the default is `False` if it's `True`.
I think the `.GetgapicConfigName` should be removed from the `.` and not `.`
the go is still imports imports, so please remove
I think this is the only place where we need a `T`, not `where`.
Just an idea, what do you think about using the `== 0` instead of `== 0` in the constructor? Then we wouldn't have to worry about it.
Should we be checking for `None` and `len(dataset.CLASSES) == len(dataset.CLASSES)`, here and elsewhere?
pin is a specific name, we should change the default in the `Create2.9`
I don't think we need to use the SectionSerializedDataSize from the swarm.SectionSize
I don't think we need this method. The MIME type can be accessed via the `blob` object, which is not the proper type.
I think we still need this. Can't we just remove the check?
I think we should use `Config.url` instead of `Config.name`
I think it's fine to have the last year in here, but I think it's fine to just have it here, and not have it in the `rollback` interface.
This test was not failing. It was not testing the same code, but the old version was not working.
I think we can add a `fulful` field to the revision, but I'm not sure if that's the right way to do it.
I'm not sure why you added this. It is not used anywhere else
I think we should use the `count` here instead of hardcoding the `count` here.
This is the only thing that could be done in `build/system/server.py`, so I think this should be moved to `build/system/server.py`.
This should be `somever` and `somever` instead of `purchaser?`. The `somever` can be used to create a new delegate and a new new new approver can be used to display the new delegate.
`has_fee_estimates` should be `has_fee_estimates` (or maybe even `has_fee_estimates_total`), since it will only be used in the main build.
I'm not sure if we need to make it clearer that `return auditLogsSourceCondSet.Manage(s)` returns a non-zero level condition.
How do we know what happens when we don't have the `alloc` attribute?
I think this should be `db *sql.DB, opts *queryOpts.Name`
Maybe rename the metric to something more meaningful, i.e. `extra/nyctaxi/nycTaxi.csv`
Use empty? instead of _added.count == 0.
I think it might be worth moving this to a helper method
I think we should still reset a `new` here. We don't want to have a `new` in the past, as it will always have the `reset` attribute.
This is a breaking change as it doesn't require any other issues, so I think this is a good change.
I think we should be able to use a `nameof` here
I'm curious why we need to do this. Is this the right place to do this? If the problem is that if a new shutdown shutdown was created we could just remove this method and just return the empty dict.
It looks like we're using the policy name here instead of the volume name?
This was just wrong. I think `Start()` will not return `nil` in the `o outbound. Call` method
Please add the `cluster-api` package to the `cluster-api` package.
This test should be testing the new tests.
Why not just use `newSlice = append(newSlice, replacer.Replace(v))`?
I think this is the wrong place to put this.
I think we can just remove the `if` here, right?
I'm not sure if this should be "epoch length"
@smarterclayton I'm not sure this is the correct place for this?
Maybe this is a leftover?
This is the same as `mapper` on line 13
I think this is a leftover from debugging?
I think we should just make it `int32` and not use it in `opts`.
Why is `DECIMAL_LITERAL` still needed here?
This should be removed.
This test was not being delivered to the virtual machine. It was not checked in the test.
This is the main change. It's the right place to do this. The other way is to make `StopProcess` return an empty string.
I think we can remove this now that we don't need to do anything on the config anymore.
I don't think we want this to be a line break.
I think this will break the "t type" part. The "t type" is a "type of the "list" and it will break the "t type" of the "type" of the "is_set" of the "t types".
I think this should be `s.Noticef("Server Exiting..")`
This is a bit weird, why would we not have a refund in our own case?
I think we should add a `TODO` to remove this.
I'm not sure if this is a good way to fix the issue with this. I'm not really familiar with this code but it seems to me it should be a separate PR.
This should be `Configuration` and not `String`
I don't understand why this is necessary? It seems to me that the `std::unique_ptr` function should be called after `std::unique_ptr` (which is what the error does).
This will break on older clients. We'll likely likely have to move the `chart` stuff out of the component.
I'm a bit confused about the issue here - why is the max bitmask set on the `Long`?
This test doesn't test anything.
This should be moved to a new debug log so we don't need to do anything with the zoneID.
I think you should be able to use `self.prob = *.uniform(0, 1) > self.prob` instead of `f.randint(2)` and then you don't need to check if the length of `f.uniform(0, 1) > self.prob`
I don't think you need the `v` variable here, you'll be able to remove it
I think it would be good to also test the `testUrl` fixture.
this is the same as the one for server.
can we make it `&spaceId` ?
I don't really think this is used.
This should probably be `<%_ ($ ($% %>):` instead of `coupon_id` since it is part of the form form, since we only want to know if the form gets signed in the form form, and not the actual form.
The DBP declared as `@Nullable`.
This should be reverted.
Why is the indent here rather than the one above?
this is the main code, I don't think it's a good idea to have a test. It should be fine to just have a test.
This is not the default. You can use the `seelog.xml` constant instead
`manual_wall_time_option` will not be the same for `manual_wall_time_option`. The current implementation is to set the value to zero, and the value will always be zero.
Unwrap() is a bit confusing, maybe it's better to return the error and call `Getwrap()` here?
This is a bit of a nit, could you move this to line 234?
The default value should be `ExtrAccount`
This class and others are not used anymore.
I think it might be better to use a `driver_name` instead, since the param name is not a `dict`, and the `driver` can be the default value.
This was removed because it is no longer needed.
I think this can be reverted.
This is a bit weird, why are you not just using the `package main` package?
This is the only change needed?
This should probably be added to `_POSIX_C_SOURCE` as well, right?
`client.getLocalPlayer()` could be null here.
Why not use `[1]`? It's more readable.
I think this should be `according to the original implementation of Locale-Locale.go`.
nit: `break` is unnecessary
I think it would be cleaner to use `http.StatusContinue` here
`copy-groth-params` is not the right name to me. I think it is more clear to name this `copy_groth` or something.
I don't think it's a good idea to use a simple simple `snapshotCreateCommandHelp` property here.
why not just call it ` dont_listen_enabled`?
Can you add a check to make sure that `clang-diagnostic-'` is not a `True`? It's not a thing, so I'm just curious why it's necessary to check the analyzer.
I think we should be consistent and have a test for that.
@deads2k any reason why you changed this? I'm not sure it's the best way to handle it.
This is a bit of an odd change, but I'm not sure what the best way to do this is.
I think this should probably go away, I think.
I don't think this is necessary. I think it's only for the case where we're not in a `get` function.
Should we just use `journalPausedFromConflict` here?
This is a breaking change.
Is this needed?
Why not just use `! empty()` here?
Is it worth adding a todo?
Why are you doing that? I don't see any read/write related to the `tx_begin_read`
this should be done after the test.
I'm not sure this is a good idea. It seems like the only place it would be called `op_data[1] == 0` and the `(*(Lng32 *)op_data[1] == -1)`. If it is a `null`, then it should be an `int` (or a `bool`).
This should be `while(offset + bound / 2, length, target)`
I think this should be `[options.fullResult=true]` instead of `!raw`
I think it's better to be more specific here, like `securityTLS`
This should be in `config`.
I think this is not needed anymore, we can just set the `this->` inside the `if` statement.
I'm not sure why this file was there before, is it?
This is a bit of an unrelated to the PR. I think it would be nice to avoid the `current` and the `object` and `current.current`.
this if statement is redundant IMO
I think this test case is still valid. It should be removed.
Line is too long. [92/80]
I'm wondering if we should just make this `if ...`, and have it live in the `if ...` statement.
Please use `Objects` to be consistent with `MoreObjects`
This is a bit of an unrelated change, but the `elocks` package has no real effect. It's just a few other places.
this is the main change that should not change the API, as the `id` will be `null` when the `doc` is `null`, so this is not correct.
this one seems wrong.
You can use `process.argv.indexOf('joplin', process.execPath);` here.
These changes are unrelated, but are not really necessary since we are not using the `id` anymore.
add new args to these?
This isn't correct. The `blob.Bucket` was previously previously used to construct the blob, so I changed it to `blob.Bucket.` instead.
I don't think this is needed.
I think it's better to use `allowProps` rather than `membersStats`.
Is this used?
This is the only place where I'm missing something. The only reason I'm not seeing where I'm not sure what the iframe is. It's probably not an easy idea. I'm just wondering if it's worth adding a `configure` function that calls `axe` in the `axe`.
This should be in a separate commit. You can see it in the `Var`.
This should be a pointer to ks.Status (or a boolean) so that it's obvious that the first argument will never be a pointer.
This is not needed, the `TKey` is already a dictionary.
Use the new Ruby 1.9 hash syntax.
This is a nil-error, so I think it should be nil.
Is it possible to have a default value of Boolean? I think we can get rid of this field entirely.
This should probably just be a different type of error. It's not really important to me if the user is using this.
This is not a good candidate for a test.
I think it is not needed to wait for time time to exit.
Line is too long. [82/80]
I don't see why it is needed, it is already `json`
Is this the correct error? I don't know if we want the `local addresses` or `local addresses` to be the same as the one address.
The `@` is not needed here. The `typing` should be the same as the `@` package, right?
This is a breaking change, we should fix it
I'm not sure what the h2o is doing here, but I don't think we want that to happen on the existing `h2o_http2_wbuf_buffer_prototype` block.
I think it is better to use a variable name for this string. It would be more consistent with the rest of the code.
@matt-gardner How do you feel about this?
This class is only called from one place, and should be moved to `WebDriverException`
Is this really the correct place for this, since the new object is already initialized in the `SerializeAsync`?
Can we add the same flag to the `PlatformAdapter` class as well?
same as above why not use `nullable`
I think it is better to use `selectColumns`
Shouldn't this also be a `Boost` field?
It seems like we can keep this as `with FIPS_flags` and keep the `self[:platform] =~ /cisco-5',`
The secret name should be the number of secrets, not the SecretCount
I think `slaveOk` should be removed from here.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Could you add the `times` param to this?
remove this empty line?
why not use `bufferSize_as_ulong = bufferSize_as_ulong`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why is this necessary?
This is the main spec for this test.
I think this is not the correct place to put this function.
Please remove this.
Is the `err` necessary?
I think this logic should be in the `else` block.
This is a breaking change.
I think we should use the `id` here instead of `.name` as the name here.
I don't think we should be using `build_package` here
Code standards: Please keep the space after operators.
I think it would better to use ExpectedCondition here, as it would be a `ExpectedCondition`
I think this import is not needed.
I think we should add a check to ensure the value is set.
Nit: We should be able to use #ifdef here and not #ifdef.
I don't think you want to do this. It will be a `diagving` instance that is not a `instanceType`.
I think this can be simplified by `volatile` or `volatile`, since we only need to store the `bytes` object in the `custom.md` object. But we need to keep the `volatile` object in the `volatile`, so we can just use `volatile` and `volatile`, `volatile` to determine if the `volatile` object is in the `volatile` object. The reason is that we are only using this object for `volatile` and `volatile` in the `volatile`.
The default value of 1.4.1 is 1.4.0 so this value should be 1.4.1
Why do we need errno_val?
How about just name `i.ch.IsHandler()`? It's not obvious to me what the handler is.
why is it expected to be asynchronous? restic.TagList is already a list of supported types, so I'd suggest to use a list of supported types instead.
Should this be configurable? If yes, then we can just remove the timer from `expected`
I think it would be cleaner if this could just be `dial(hostName, tlsClientConfig, false)`
Why are these added?
I think we want to keep the old name as `req.Name` instead of `Condition.Name`.
I don't see this being used anywhere, is it?
please add the trailing period
I think we don't need this.
This should be a config option
I'm not sure why this was here before, but I'm not sure if it is still necessary to go back to the other go-mega.
I think the `sonm-io` import should be removed from the group above
I think this should be done in the `super.failureDetection` method
Is this something we should use in the `index` module? I don't think we should use the `index` variable.
Does this mean we have to be careful with that?
Is there a reason why this is `log.message` rather than `log.warning`, since it's not a `log`?
I don't think this is used anymore
The `errerr` should never be `nil`, so I think `Status` should be `nil`
What happens if we set `null` here? I'm not sure we should set `null` here.
I think we can just use `getChromePath`
I don't think we want to use the name. I'd just be fine with the message.
This should be addy.LogDestination, right?
Can you move this import to the top of the file?
Can we just use `1.452` instead of `1.452`?
What about the other types? Can we just use a single string instead? Also, should we use the `SR` value?
This is a very specific patch. I'm not sure if this is the right place to put the "3kb" in a common folder.
Do you need to add a link to the descriptor type here? I think it's better for a typedef.
I think you should remove this and the other `tool_interface`s.
Layout/SpaceInLambdaLiteral: Do not use spaces between -> and opening brace in lambda literals.
Is this line necessary?
can we add these to the `before_action` file?
This is not a good thing. If we're going to have to go back and seeing a different approach than the one above, I'd suggest to move this into `statusPED` instead of `EXECUTION_STOPPED` and have it call the `statusPED` directly, and then just use the other one.
This test was failing on Provisioners and I don't see it in the tests.
@matt-gardner I don't understand this change. It's not a problem, it's a `lmdb` and a `GlobalQuery`.
I'm not 100% convinced about this one. If we need to import it, I think it should be fine.
nice catch, but why `#getKind()` instead of `#getKind()`, why?
I think you should use the `aria-label` here
This should probably be `Particle_VID`
I'm assuming this is not the right place for this change. The `vStringTruncate` function is called on line 392, which is not what we do for. The `vString` function does not have the original `vString` parameter.
@kargakis PTAL, I'm pretty sure this change is the right fix. The "connecting" of the `if` block is redundant, and I don't think we want the `k.logger.Debugf("could not connect to peer %s: %v", bzzAddr.ShortString(), err)` call to `k.logger.Warningf("could not connect to peer %s: %v", bzzAddr.ShortString(), err)` on line 137.
I'm not sure why this is necessary, it's just a warning that the user can't set the timestamp at all.
Is this still necessary? It seems a little weird to me that `t.PrivateKey` returns a `nil`.
I think this should be `string`
@jcotela is this the right place to add this?
please move the debug to the next line, otherwise it will be better to move the log line up (which is what the log is)
Why not use a `BuildConfig` variable?
I think this is not the right place to do this, since we're not doing any work with an `generate_special` call, so I'd rather not do it here.
Line is too long. [86/80]<br>Put one space between the method name and the first argument.
I think the convention of `info` is to be more precise here, and the `finest` should be `info` (or `finest`)
This is the fix. The previous version was only ever used for the remoteHost to be able to handle the `toExternalForm` case.
import in wrong order
Why is this needed?
Why not use the `currentRuntimeTicks` variable here?
Please remove the trailing space. It's only needed for the second parameter.
@jridgewell any reason this was removed?
You can remove the `$this->dateConverter->convertToDisplayDate` method entirely. It's not the same as `$profile->personal->#clearToDisplayDate`
You can use `EMPTY` instead of `production` here.
Why did you change the cast to integer? I mean, the cast should be kept in the first place.
This is not needed anymore, right?
this is not the same as the one above.
This should be moved to debug level, otherwise it will be used in the debug output.
This should also be moved from `setUp()` to `Timestamp` (and in `setUp()`)
Why did you change this?
I'm not sure if this is the best way to go.
I think we should also assert the type of object, as it will be less than 100.
Shouldn't this be `<logical>`?
@jridgewell Is there a reason this is not needed?
Is the idea here to use `aws.StringValue()` instead of `aws.StringValue()`?
It would be nice to also check for maxBoundDescriptorSets > 0 here.
This is a bit of an odd... why not just return `undefined` instead?
Is it possible to filter by tables by table?
This should probably use `c.ReconcileBootstrapData` instead.
I'm not sure if the pylint is needed.
This should be done in the `else` block as well.
Line is too long. [86/80]
Why is this import needed?
This should probably be in a separate PR
I don't think we need the `./` here.
The `get` includes `stdint.h` too.
The `reverse` suffix should be updated to reflect that.
Why do we need to define a default here?
@matt-gardner if we have an `run` statement here, I wonder if we should have an `else` in the `run` block, then with the `unless` clause?
This is not the same as above, right? The seed was removed in this PR.
This is a bit odd - the function is now just a single `&`
I think this should be removed
Is the default for `""` here going forward to the user? If not, please remove the default.
Please remove the `== null` here and in the other tests
Maybe we can use the same `JSON_NAME` field in `build_system/api/server.go`?
This is a good idea. We should probably have a test that works with spanProcessor.
`findOneAndUpdate` is already inySchema, it is in the `<amp-story>` interface.
Please add a TODO to remove this
Why remove this line?
This is a breaking change. I think it should be a pointer instead.
I don't think we should be using `localtime` here, since the next line will always be `true`.
I think this needs to be moved to the end of the function.
I don't think we need to check for index here, since we are already using index.
why change this?
`mrb_obj_value` is a string that will be used in the `fatal` method, so it will be removed from the `error` interface. The error message is used in the `fatal` method in the `mrb_inspect()` method, so it will not be used anywhere.
This test is failing on mobile too.
Could you add the backtick here?
I'm not sure if we want to do this in this PR. I'm not sure if we should do this in a separate PR.
Please don't remove this
This change is incorrect.
I don't think we can make 10 * `*` so it's a good default.
This import is unused
why remove the write?
I think it should be grouped by other components. It's a bit confusing to have `config` be the same.
@cramforce is this a bug or is it just me or is it just me?
Shouldn't `checkExprDepth` also be checked in `is_active_checkExpr`?
I don't think we need to change that?
You can remove the `@Deprecated` annotation as well.
How does this work if we have the `this.editors` in the array?
This is not a good candidate for a test.
Please remove this print statement.
I think we can remove this check and just use the miner client.
I think we need this to be a constant?
This is a bit of an odd... what is the difference between the two and the one above? The parameter name should be `int?` or `int?`
Why was this removed?
Can we use `VerifycheckForNew` instead of `VerifyWinningPoSt` here?
Please remove these lines
Can you add the new `CountryField::FORMAT_ISO_3166_ALPHA3` to the existing `foreach` method?
This is the only place where we use `current_version` in a few places, we need to update the `version` version in this case.
@smarterclayton can you add the search here?
I think this should be done in the constructor instead of in the loop.
I think this should be done in `--conn-retries`.
I think we can use `assert_eq` for this
I'm not sure why `ZMSImpl` is called here, but it's not a `custom-Zms` anymore.
I don't see any value in setting the job to true, so why do we need to set it?
We should keep `eth` as `ImmutableEthProtocolConfiguration`. We could also just use the `eth` method here.
Is there a reason for adding `Schema` to `DiscoveryField`?
This seems like a reasonable value to me. I'm wondering if we should just use the container to determine if it's a container? I think it would make it easier to track the container. I'm not sure if it's worth the effort, and I don't see a big difference between this and the other hand.
This should be `has_xcb_errors` (and the value above, if it's not there).
I think this should be grouped with the other imports
This is a change to the old default `pid` to `""` so we don't have to change this. The new default is `pid` to `""`.
I think it's worth it to make it ` 32 * 1024 * 1024` to make it more clear what it's being used here.
Is this really needed? I think we should be using the `log` package instead.
Is this key generation still needed? If so, why did we remove it? I think we should just remove it.
Can you add a mock to this one too please
In theory we should check for `cursor` in the `build()` method.
You should use the `mailhost` class here. It's a little confusing since we're using `mailrelay` for the relrittle `unopsys` variables.
This is the reason why we're using `Debug.Assert` on the `Debug`
I think this is the reason why we don't support defaultValueing... we don't want to be able to be sure that the value was null.
I think it's not the right place to change this. You can just do something like `WordIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIOIO
We can probably get rid of these.
I'm not sure if this is correct. The AWS SDK is `<v3` so I don't think it should be `<v3`.
Why does this check for -1?
Why are we removing this code?
I don't think this is a good idea. I think the only place we have a `Query` variable that would allow the caller to call it.
This should be `auth` not `err` right?
I'm not sure why `Message` is set here.
Why is this being removed?
This is the only change that fixes the bug.
I think we should keep this line here and remove the `sequelpro` line.
I don't think we should change this here.
I don't see any include in this file.
This should be a separate test.
this was a bug?
This is the only place where we have a `bool` parameter, but I think we should just be passing in the `*string` parameter instead of using it directly.
@deads2k i'm removing this from `CreateDefaultProfile` because it's not a valid default value.
Use the new Ruby 1.9 hash syntax.
This is the only one I don't like that. I don't think we should change it, since we only support Docker image.
I think we should keep the `stage` here as well.
I don't think it's a good idea to add a `err` variable here, but I don't see how this will work. I think it's a good idea to just pass the `err` to `reconcileLBAttachment` and then use the function `err`.
Why are we using the explicit version here?
This should be removed as well, and the new one should be removed.
I think we should keep the old name
Why is this needed?
This should be `Tuple.of("stages")`
Why is this needed?
why is it set to true?
Please don't add trailing whitespace
This change seems unnecessary.
why remove it
I'm wondering if we could move this to `DEBIAN_PACKAGES`? It would be more natural than theages.
Hm, why do we need to do this? It looks like it will be an `PluginID` in the future.
I don't see any reason for this change? I'm wondering whether we should have a default setting for `getSearcher` and `getSearcher.enable` if we are not using it.
Why did this change?
why not just add the exception to the property name as a whole?
We cannot keep the old method.
I'm not sure this is the right fix. It's just me, I don't see the point in the code.
I don't think you need to use this function. GetParserWithBuiltins should already be stored in the builtins.
I'm not sure this is a good idea. It's a bit hard to see what we want. The problem with this is that we're not using the cpuCircuitBreakerThresholds in the memory and the cpuCircuitBreakerThresholds in the memory.
This is the only place we need a `@RewriteFiles` method. The only reason that these are the only classes that can be passed as `@RewriteFiles` (which is the default rows) should be `@RewriteFiles(Set<DataFile> filesToDelete, Set<DeleteFile> filesToAdd)`
Metrics/BlockLength: Block has too many lines. [30/25]
I think you can use the `shortcuts.add` method here, as it's a bit confusing.
We should probably be using a `Cause` for that. I'm wondering why the `cancel` is not an `Cause` and we want it to fail (we should never be passing it to `cancel`) and not use that in the context.
I think this should be `HttpHeaders.CONTENT_LENGTH`
This is the only change that affects length length but not null.
This should probably live in `constants.py` and `constants.py`
Is this used somewhere?
@bparees this should be a separate PR
I think we can remove the `universe` package now.
This is the only change that fixes the bug that caused the EPS set to 0.0 and then you don't have to worry about it.
Thanks, this import can be removed
why not `*error_code * ` since this is the same as `std::string *error_code` ?
This is a bug. It would not be better if the return type was `false` and `false` is `true`
please update the docstring
I'm not sure what the benefit is about this `tracesdk` thing. I'm not sure if it's the best place to put it in a separate function, or in a separate package.
I think this should return a list instead of a list.
Is there a reason why we don't just use `_start_raw_tls_start` here?
This should be moved to the constructor.
How about `\n` to make sure it's not an integer?
If you're not using the first `s.first`, you can remove the first `s.first` variable entirely and just do `s.first.Release()`.
why did you move this one?
I'd rather have the whole `AsyncLocalScope` object as a parameter, but I don't see a need of this change.
`formatPrefix` or `format string`, can we just use `formatPrefix` here?
This is not correct and we are not relying on the sync sync sync. I think we should just remove this.
I think it would be better to move the "VUID-VkGraphicsCreateInfo" check into the `VkGraphicsCreateInfo` class.
Why the `record_AREA_STYLES` change?
I'm not sure why this is needed?
why not just add the `backgroundCtx` as the default?
Can you please rename this to `Account`?
why are we changing this?
why remove this?
I don't see the point of this change, but it's a good idea to make it configurable.
This should be `parser.on('-E', '--example-matches STRING')`
What's the reason to change this to `int byte`? It's not clear what the 11 command is and why it's not. It's just a test, but it's not a test of the 11 command.
This is the fix. You're just passing `isset($metadata['multiple'])`, but you're calling `isset()` twice.
This is unrelated to the PR description but we should probably be more specific.
Looks like all the `user` and `allUsers` conditions should be all caps
You can use `verbose.npm` to get the options object.
I think we need to add this to the `log_events` above.
Align the elements of an array literal if they span more than one line.
This should be a `boolean` not an empty string.
This is not needed. The environment variables are already defined in the environment.
I'm curious why this method was renamed
why are we logging an error here?
Would it be possible to just call the 'redirect' function instead of passing in the `./before` block? That way you don't need to make the 'before' block in the controller controller?
This is not the same as `SimpleSimple*` doc.
You can use `cls.getName()` here. (I know it's not part of your PR, but this is a bit scary)
Layout/EmptyLinesAroundClassBody: Extra empty line detected at method body end.
What is the rational behind this change?
I think it's not used anymore
I'm not sure about this. It is a very good idea to set `0.12.6` to `0.12.6`. It's not the case anymore. I would just replace it with `.6` or `.12.6`.
Why is this being deleted?
I'm not sure if this should be `0` since the message is not compatible with the `0 * time.Second` state
This change was not related to your changes, but it is not related to your changes.
I don't think this is the right approach. If we're going to add `setup_profiler` as an option, then we could just call `close_profiler`.
@mmaxim what was this for
This test is no longer necessary. The `package` package is already being set to `nil`.
This is the only change in the file that is needed to support `LDR_MODULE_64` being set.
This function doesn't seem necessary.
I don't think we should add these static fields to the project.
attempts Count CountCount never be "".
I'm a bit worried about this. I don't think it's a good idea to import it, but if it is, then we should keep it.
Is there a way to avoid using `T`s? I'm not sure it is a good idea to add a parameter.
This is a little confusing. Why are we doing the aria element here?
It seems like the `ComponentComponent` and `countOriginConnections` are the same, so we can't just use `remoteHostIsNonLocal`, and just pass it directly to `stopNonLocal` and remove the `remoteHostIsNonLocal` check.
I'm not sure about this one, it's a good idea to get rid of the `is` check.
This is the main change here. The `package_stats` fixture is now set by the `if` condition.
This can be simplified as it's not used anywhere. `_auto_indexable` is always used in `_auto_indexable_2`, so this should be removed.
This will be 1.6.5+?
Do you want to use the logger here? If you do, you might as well do `abort()` instead of `_`
This is not related to the PR.
I think it's not necessary for this to be `ws.Status()`?
If we are going to make this variable `(` instead of `(` we can also use `(` to make it clearer that this variable is used for both `ExeReplacement` and `x` ?
@martinwicke this is the bug, as it is a private method. I don't think we want to do this.
This is a bit odd, we have a `getResultList()` method that takes an empty list, so we could just call it a "SELECT" property.
The message is confusing, "the default is not supported by Python 3.
This property is not needed.
I'm not sure why we need the `recePoolClaim` event in the context of this function. The `Storagepool` event is used in the `MKVM` and `recePoolClaim`. The only place I'm not aware of the code is `MKVM`.
I think we should move this to the common place, since it's not part of this PR but it's probably not a big deal.
It's not immediately clear what this is for. I would expect a default here to be used instead.
Is this a change to the test description?
This is a good idea. It's a little bit weird to have the logging in the log file. It's not the case anymore.
why not just add to the `BaseDenseHead` class?
`String must be valid.`
why is this changed?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I believe the imports are not unused.
Shouldn't this be a constant?
@jridgewell Is there any chance this could be `0`? If so, I think it would be better to just check for the node name.
Why is the change here needed?
Why is this test no longer testing anything?
Is this a required change?
This can be moved to the `responseWriter` interface, right?
This is a very minor detail, but we should probably have a better solution.
why not "mining successive"?
import statement is unused?
I don't think we should add the `padding` field here.
Can we add an option for this to be "use-starting-sequence-number"?
nit: `LockUtils::tagLock` is a const name, so you don't need to use it in this function
why was this removed? I see it was removed from this PR.
The name of this function is a bit confusing. I would have expected it to be renamed to `is_literals` or `is_unicode`
How about `WebServer.Hong_Hong_Structs`?
I think this should be `IApplicationBuilder` and not `IApplicationFactory`.
Is it possible to call translator in the constructor?
This method is only called once in `src/main` (as it is not used in `src/main`). I think it is better to just call it here, and then use a `Field` field in `src/main` instead.
I'm a bit confused by the `MailChimp` here, since we're in the `memory_ERROR_CODES` controller, right? If so, why do we want to include it in the `memory_ERROR_CODES` controller?
I think we can move this check inside the `if` statement above.
Can we use `wlr_log_errno` here instead?
Can you also add a `cltest-button-require` to the `jsx`?
This is unintentional?
@jackfrancis I am not sure this is the right place to put six in the code. It is not possible to have the six from the server.
I don't see this code being used anywhere.
I'm not sure if this is a good idea. The description of the batch has to be modified. I'm pretty sure the `Batch` is not a valid batch.
It seems that this is an API break, right?
I'm wondering if this is a good idea to have at least one test that checks if it is not exist.
We can remove the date date and the date on the `releaseDate` field from the field `this.releaseDate`
Is this still needed?
This is a bit confusing to me. What about `basename(get_permalink())`? `is_val`?
I think we need to add a new column in the `init()` function, to ensure that we don't have to worry about it in the future.
Why are we doing this here? It seems to me the only place we use this is when the `else` clause needs to be changed.
This should be `true`
I don't think we should be calling it in the `keyboard_state.grab` array, since that's the only one that we want to call it.
I'm not sure if this is correct. The only place this method is called is in a transaction. This change should be reverted.
This should be `@var` not `cascadeBy`.
Is this needed?
I think this should be editInPlaceAnnotation = "certmanager.k8s.io/edit-in-place"
I don't think this change is needed.
I'm not sure if it is a good idea to use the same name for the field.
This should be removed.
This is a test that was not related to this PR but the test failed because of that. I don't see any code using it, so I'm not sure what the correct answer is.
Why is the ifdef removed?
why is length a string?
This will not work, we don't need to check for `manifests` here.
this is the default in `lib`?
I think this should be `aria-query`, since the query can only be used for `query`.
Why is this `internal` public?
Is it possible to use the same name?
the `gowire` generated by gowire?
I think it is better to pass a boolean, so it can just pass `false` to it.
I think it's not worth having a check that `Timeout.Infinite` returns the same value, so we can't change the value here.
Can we remove this?
This import is unused.
I don't think we need to add a `kServiceAccount` field here. I think we can remove the `gServiceAccount` parameter and `kServiceAccount`.
Doesn't it make sense to use -j option.params?
I'm not sure this change is correct.
nit: use `headingLength` instead of `headingLength`
I think we should use the `clone` field here.
`onStartSend` should not be called here, because `RestClientSender` has a default value, so it should be called `onStartSend`.
I don't think this is right. We want to allow the `ShortHash` field to be used for a few values.
It's not a good idea to import from these two imports.
Is there a way to use the "h" instead of the "externalFormat"?
Why was the addition of "running"?
This test is not really correct. It should be `sns_backend.sms_messages()`
I don't think this will work. I think it's better to move the `setup_path` import to `setup_path` so that the `stats` is used.
this is a test that was missing
nit: `////// unrecipable s sprinkling of locally mounted volumes`
if you use 'opt/puppetlabs/agent/bin:/opt' to avoid the need for a agent.
I'm not sure if it is a good idea to add these to `config` objects.
This change will break existing code, but the new version will be the new version. The new version will be the same as the new version.
This should be removed now, since we are already passing in OSRM_EXTERNAL_MEMORY
I don't understand the purpose of this field.
Why is this test test changing?
Is it possible to use `<scale>` here instead?
Should we add a `boolean` flag here, too?
I think this should default to `nil` in case `nil` is not `nil`
I think this should be `rpc-protobuf`
Nit: I'd rather have two constants constants for these constants, as they are not related to them.
I don't think `self.underlayer` is needed.
Why not use the `TranslatorFactory()` method in this class?
This should be `mysql?` since it's a `default`, not an `list`.
Maybe `adjustment_ADJUSTMENT` could have a more descriptive name like `adjustment_ADJUSTMENT` or something.
The FlowReference and FlowFlow are used in a few places, can we just remove it?
This should be done in `init_openVariable`
I think we should keep this around.
why did you change this? It's a feature map in h?
I think this is the same as line 130 above.
remove empty line.
Can this just be a string, not a string, not a string?
I'm not sure if `FactoryBot` is the right name here.
I think the idea here is to not use `url($uploadsPath) . '/'` instead of `url($uploadsPath) . '/'`. The current way of doing `asset` is to get the path to the path to the path, so it can be done with a `null` path.
Is there a reason for not adding `builtins` as the default? It's not clear from the name of the `if`
I don't think this is a good idea for users to use the same type for the project. It's a good time to get the file name, but the type is not the root name.
why change from `120` to `expectedCVCount`?
This is not a valid service
I don't think this is used anymore?
This could be done in a separate PR, but we don't have any way to fix this, so we don't have to do it in this PR.
It looks like we are passing zero indexed in the array instead of passing zero indexed in the array. Can you please add it?
This is a bug fix, we want to be sure that the currentTime will always be non-null.
This will only work if the version is in a single version string.
I don't think it's a good idea to change this.
This is not a good candidate for a subclass of `StructLike`
Is this not needed anymore?
2015 vs vsINTEGER?
Nit: I think this is a bit too broad and could be a little more descriptive, maybe `if head != nil && head != nil && head != nil && head != nil`
Why did you change this?
I think we can just remove the `json.RawMessage` now, since it's not being used.
@tgamblin Do we want to show the version in the CN?
The file should be removed from the file.
This should also be added to the `NetworkService` option (and the other option in the `--allow-insecure` flag) in the `--enable-insecure` flag above.
Can we rename `tsTaskStatus` to `ts.Except`?
I'm not sure this is the right approach...
I'm wondering if we should have this be `Log inside the function? Otherwise the config files won't be in `Plugin`
Why not use `NoError` here?
I think this is a good idea. It's a bit confusing to have a `Put` method that takes a `ctx` as parameter, so we can't have a single field to get the user's `Put`. It seems like we could get an error in the `if dbc != nil` block and then call `Put()` on it.
I think this should be a separate PR.
>null [](start = 12, length = 6) nit: should we use `[NotNullWhen(true)] `?
This is not a big problem.
This is not the only change in behavior, but I'm not sure if this is the right fix.
I don't see where this is used
if the `else if` fails, this will not work
Why not move the test to `aws/amazon...`?
Is it possible to use the same `synchronized` method?
Is it possible to get rid of the `skip` call?
I don't think we should add this to `remoteQueryTimeout` and `metaServer` as well.
This seems like a good candidate to use a specific type of file.
This is a breaking change. I think we should not be adding new error messages to the output.
@kargakis this is the one TODO I'm going to ask for now
I don't think this is a good idea, since the code below is in `Kinto/plugins/default_bucket/src/main/java/org/apache/test/unit/kinto/plugins/default_bucket/src/kinto/plugins/default_bucket/src/kinto/plugins/default_bucket/src/test/kinto/core.py`
This is a bit weird, why do we need to worry about the `normalizeIdentifier`?
@alexander-schranz do we still need this? `this->safeMode = model->isVisible();` or `false`?
This will break on Python 2.7
This was removed because it is no longer needed.
The `if (mrb != NULL)` is redundant here, the `if (mrb != NULL)` is redundant.
I'm curious why this was deleted, why is the `gocoverutil` deleted?
This should probably be a bit more specific, e.g., `private const`
`parent` doesn't have any attribute, it is not a `parent`
Use `key` as variable name (found is not tested)
I think this can be set to `@out_variant`.
This will fail on SDK client. You can use `debug` to create a new error.
This change is unrelated to the change here.
can you remove this line?
For consistency with the default 65536, should be "block_processor_full_size"
This is a breaking change.
This is not needed anymore.
Shouldn't this be `!`?
This should be `if FPGA_INVALID_PARAM != NULL`
This include looks like it should be changed in this file.
need_unmap to True, as per above.
Why is it removed? It looks like there is some reason why the 8 seconds was for most of the other things?
I don't think we need this here. We can just call it `acquireTopologyCache` or something.
I think we can remove this too, as it's not used anywhere else.
It's a little confusing to have a cast at the end of the test. It should not be cast here.
Why is this test removed?
This will be null if the column is not empty.
This should be `m.Total` instead.
Can you use `math_number` instead? The code below is more readable.
The `AWS IAM` is still not used anymore.
I think the `--with-make-command` option is redundant. It should be `-1`
This needs to be `full_backtrace`, since the corresponding `exclusion_patterns` is already defined in `exclusion_patterns.is_not_s`
This one is a no-op, right?
I think this should be `mproxy.is_module` and `mproxy.is_name`
No need to expose the property name here.
This should be `from pylint.const import PY310_PLUS`
Should we log error here?
This is not a good idea. You could just use `!reference.get_row_count()` to get the value of the table, and then you don't want to have a value that is not a `null` value.
I think we can assert the result of `output_add_notify` here, because it is already a list, so it's not a problem. This is a very expensive operation, and it should be an error.
Is there a way to avoid the file name change?
@smarterclayton do you know why this was added?
nitpicking, I don't know why this is necessary
This method is unused and can be removed. The method signature of this method is unused and can be removed.
I think we can use `my.my.my.kuma.config` here
I think this is the only change that fixes the bug, but I'm not sure it's the right fix.
I don't think you need to add the `AnnotatedCodeLocation` property here, as it's not used anywhere else in the code.
I think you can move this import to line 152 as well.
This should be a `protected`.
I think we should use the default value here, to be more specific.
I think we should use the `search` method to avoid duplicating the code.
I don't think we should do this, we can just do `if (beanCls != null) {`
I'm not sure this should be in a separate PR. If the code is still in the `v2` package, it will be in `v1` which will also be called once per test.
This should be `str(input)))` instead of `Value:str`.
Can we make it a `protected`?
I think this is wrong. This error is only triggered if the error is not found.
Can we make this a const and use the default value here?
I think this is not the right place for this.
I don't think this is right. It is a good idea to add `if` statement. `class_agnostic` is a bit confusing. `if` means that `False` is a list of 2, and `if` are no longer needed.
This is a bit confusing, as it is a little confusing to have "pos" as a property.
I'd suggest using `null` as the enum.
The original `next` is used by a few places, but the `current_service` and the `search_session` are used here so I think we can keep this simple.
This is the default value for the `path` value. We don't want to always set a `def path_for` if it's the default. I think it should work.
Does this need to be a separate function for the following `REG_##reg`?
I don't think this should be here, it's not used anywhere. Also please remove it.
This is the wrong check. It should only be changed to `""` if the array isn't present.
I would use `[]SecurityGroup`, `parameter` and `sys`.
I don't see any usage of this class being used anywhere?
Would be good to log.info/info/fine here.
this is wrong, you need to use sql.logrus
Is there an issue tracking this? I don't know if it is a bug, just checking.
I think this is not a good place to put it in `Message Delivery`
It's not necessary to include the mol in `_Name`, it should be renamed to `_DEBUG_Name`.
Nit: Can be `x: Any iso`
I think we should move this to the top of the method, since it's not a ResolveBranch
This should probably be `<T>`.
Nit: remove empty line.
This is a bit of an unrelated change but I'm not sure we should return an error here?
This is the only place where we use it, I would prefer to keep it as a separate parameter.
This will break if you move the status to the `mne.utils.url` above.
This is the change that was not related to your changes, but I don't know if it's the best practice to remove it?
this is wrong, it will be 1.0
is this intentional?
We should also check if this is a public key, not a user.
This was the bug.
Is there a reason why you removed the constant from `goog:chromeOptions`.
can we add the name of the param?
why not do it in the ctor instead of using the helper function?
This logic is only ever used for `req.version_ref()` if the `has_value()` is true.
Isn't the same logic used for primaryLang ?
You could just remove this `if`
I think this is the right approach. We should just be setting `href` in a `Image` instead of using it.
I don't think we need this `if` statement.
We can't use the `Content-Type` type here.
I think this method can be removed now.
We can remove the https from the library.
It would be better to use the same name as above. It is not a big deal. But if you have a good name for the `2018` file, this will be more clear
Please add a space after commas.
Why are we making the `Plugin` package private?
Nit: This test is a bit unfortunate. Could you add a TODO to remove it?
It's not clear to me that this should be a `@return`
What if we called this `_writeConcern`?
let's use `sign_in_as(admin)` here
This is a bit of a problem. What about `-O`?
You can just use ` tagKeyCombin`. The value is not set in the `StringArrayComparer` property.
This is not the same as in `ostream`.
Do we really want to show an error if it's not `False`.
`add_transfer` is already defined in the `transfer_init` method.
This should be removed.
I think it should say "Specifies the SSH server on the remote host."
Why did you change this?
This is a little confusing to me - we just return a string and not a boolean
Why is it needed?
The indentation of this line should be kept.
This should be error?
revert this please
Should we set a nil `SecurityGroupOverrides`? It seems like we should be checking for nil if it's not there.
Shouldn't we add these to the `before_action` block?
This is a little weird, as I see no reason to use the `@memberof axe.commons.dom` annotation. I think it would be better to just use `dom`.
I think it should be `identity-openvpn`, but it's not a big deal.
I would prefer if you didn't add this to the previous function.
Does it work on non-encode?
I don't think we want to do that, since the `eclipseFormattingEnabled` is always going to be called when `java.autoing(eclipseXml)` is true.
This should probably be `orig_mocks_syntax`.
I think it's better to move this to `2013`
I don't think this is a valid solution. We need to get the client-side AWS KMS stuff before the client-side AWS KMS is enabled.
Can we remove these?
I'm assuming this is a good change, but is there a reason why it's now just a warning?
I don't see any reason for the second `0` here?
This is a change from a public interface. I'm not sure if we should just make it a pointer, but I think it's better to make the interface return a pointer and pass it to the interface.
I think this should be a `err.Error()`
I don't think this needs a namespace.
Do we need to handle this case too?
I think we should use `<=` to make this more readable.
Can we remove this?
why is this being removed?
Can we just have an `isElFocusable` and use the `Elms` from the constructor instead?
This should be ``msg.info()`.
I think it is better to use the `Type` field instead of hardcoding it in the constructor.
I don't like having the `cstddef` include here. I don't see a need for it, just like that.
I think this should be `fetchMock_only`
should mFolder != null be checked in mFolder?
What if we called this `inspect_multipart` instead of a global scope?
This is not the right fix. The quilt should be the first line of the `lower()` call.
This is the only place where we use this function. Should it be renamed to `require_dummy_response`?
Can we get the default value from the current service, and check that it is not specified. That is what I meant by default to EnableBlockServiceFallbackToArchiver.
This is the main change. The problem is that the `mergedChains.mostRecentMD.data.Dir` here will be the same as we have on `mergedChains.mostRecentMD.data.Dir` in the `rootNode` and not on `GetOrCreate`.
I don't think this line is required.
This is not the only change that affects the other changes, so I would change this to `writeInputFile()` instead.
if the else statement is redundant
Why was this changed?
This needs to go into the `configure` method, otherwise it'll be ignored.
We don't need the `label` label anymore. The `con["user"]` is used by other modules. In this particular case we can remove the `container` label from the label, right?
should we make the `recurse` optional?
I think we can use `clone(new_data, xdensity=element.xdensity, (ydensity)`, and we can just use `clone(new_data, xdensity=element.xdensity, (ydensity)`.
It's better to move this to the top of the file.
The slot number of the SD card to be set. The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The The TciIo message was more clear.
Please use ` />'` and `metrics`
Please add a space after the comma.
Can you use feedback.TestTestList() instead?
Why did you remove the 3-933? I don't know if 1000 is a 3-933, but it is still 1004-x.
Why are we passing the set of input vars instead of sorted?
Why is this change needed?
Do you think it would be worth adding `[0]` to the `[1]` above?
would it make sense to also add a `json_Target` method that takes a `json_Target`?
Shouldn't we check for `EnablePipedResponse`?
These two parameters are not really needed.
In general we should not allow flushcount to be the current account. We could just always call `BackupNewRound`, and then we could just have the `BackupNewRound` method that returns the value.
This assertion was not correct, `NullableRepositoryTest` was removed and `Nullable` was removed.
Please add the "message" part in the next line
This seems to be the wrong place to put these checks.
I think we should add addMapping() method to add the callers.
This is the only change that affects this PR.
This is not the only change in this PR. The `if` above is the only usage of `if` because it is the only one that is the same as `if` above. The only usage of `if` is that the `if` statement is.
Nit: this is a pretty big package. It should be named something like `core_opentelemetry_api`.
This is a change in behavior. Why do we need to limit a limit? I think it's a bug.
We should only support `Resource Groups Tagging API` for these API requests. We should probably add `update_listener=update_listener` to the `update_listener` API.
Nit: Please remove the empty line after this newline
I think we should remove the `disableManager` from here
I'm not sure this is the right fix.
I think we need to update `configs/include_bad_conf_check_b.conf` to `monitoring_port`
This is not the only place where we need this method. I think we should remove the `Read` and `Source` methods from `Read`
I'm not sure that this is the right place to add the function to this function. The name of the function is a bit misleading, it is not clear what this function is.
I'm not sure why we need the `C` in the first place, but I think that it's a bit confusing.
Is it possible to have a prefix with the same name?
Is there a reason this isn't just a new `IsDone()` function? I'm not seeing where it was used?
should we return a constant here?
I think it would be better to just make it `==` instead of `nextSibling`, since it's a `==`
This seems unrelated?
This should have been `CreateCounter` and `GetCounter` to take the name of the `Create` (or `GetCounter`).
This should probably be `!== nullptr`, since the other one is also `&&`
I think this should also be moved into the call to `t_p_base_root_instances()`
This seems like it will be ignored in the `make update` callback
`node.getAttribute('title') || '';` is always true because it's a string. I think it should be a string.
This is not the correct place where `ParentChildrenSyncTargetHelper` is used.
I don't think this will work, it's not a good idea to have sys.maxsize in the constructor. The code that is not in `self.available_slots = sys.maxsize`. The code is in `self.available_slots` which is not the default. The code that is not the case, so it's not the case.
Should we remove these tests now?
Why do we need to do this?
Shouldn't we also set this to `nil` in the `goimports` folder?
Why not just return the label label number here? This will not result in an error if the user has to click on the label number of label label number.
Is there a case where the retry will be 0?
I don't think we need this change, the test is failing.
@jridgewell I'm not sure this change is correct. The `letters` is not the right choice, but I'm wondering whether it's a problem. It seems like this is a `-` and it's not a `-`
Nit: line up
I'm not sure if this is a good idea. It seems to be the only place this would return an error.
Can this just be `static`?
This is not right. You should just be able to use `if (0)`
Is it possible that this property is not set anywhere? If so, we should change it.
Why did you remove this?
I think it would be better to use `WithPasswordTwice(newopts, ...)` instead of passing a `Buffer` object here, since that's the default, and we're using it to get the same behavior as `ReadPasswordTwice`
why do you need to change this file?
Why was this removed?
GraphType is used only when the graph is not changed, it is not needed.
The EntityRepository and EntityInterface are already part of the Entity so it should be removed from the EntityRepository
Is the default for `MolChemicalFeature::getPos`?
Looks like you're missing a space between the `:` and the opening parenthesis.
Can we just make it public? It seems like the value is public and not public.
Should we rename this to `await`? We're planning to fix it in a followup.
Do we still need metrics?
Can you explain why this change is needed? I don't see it in the commit title.
This doesn't seem to be used anywhere. Can you explain why we can't use `Gas` here? Also, we should probably have an overload that has the Gas overload.
Why do we need to throw a string here?
I think the `dcontext->go_native` check is redundant now that we don't do the check on `dcontext->`
This will be a breaking change for other pages. The `connect` function returns the `this` object, which is the default of `panel`. I don't see any reason to change it to the `connect` function.
I think this is a good idea. It seems like we should be using `__del__`. I'm not sure we should be using it here.
Is this a change in behavior?
Can't you just use `node.tagName.toLowerCase()` instead of the `tagName`?
This is not right. I think the hot command should be available to the hot command, so we can just use the hot command, and we can just use the hot command as it was before.
I'm not sure why you deleted the pb pb here. It's not the case anymore, but I don't see a reason for it to change.
I think this is a typo
We should use the `parallel` variable here.
Can we add a check for both `EnablePulls` and `CanEnablePulls` ?
I'm not sure why we are using projectName here?
We could also change flash.now to something else, right?
This is a very specific API change. I would prefer to have this in a separate pull request.
This test should be run from php5.6 and not from php5.6 (which is what we do for arm64).
Shouldn't this be `""` instead of `""`?
`updateOrderStatus` will return the error if `c.Status == 0`, otherwise there will no error if there is an error.
I think the idea is to use a `Errno` instead of a `T` (which is a `T`). I would suggest to use `T::` instead of `T::ECONNREFUSED` and `T::ENOTCONN` to avoid the need to use `Errno::ECONNREFUSED` to determine if the Errno is a `T` (which is a `T`) instead of `T` (and then `T::ECONN` is the same as `T` (which is a static `T`).
This is a bit confusing. I would have used `project_cache_throttle_percentage` instead of `project_cache_Serializable`, but I'm not sure how to use it in the project.
Shouldn't this be `ListPowerSelectorEntries` ?
This should probably be `type UVarint`
I think we can keep the old behavior as it's not only used once.
I don't think this is needed.
should this have an `_` prefix for the new column?
I don't think we should be using Windows Sysprep for Windows Sys!
The test is not testing what happens if the test fails. This test is only running on tests.
Why not `\DateTimeInterface`?
nit: I think this import is not necessary, we already use `stack.stack`
I think it should be `s.Txn.Src()`
I'm not sure if this should be `padding: nil`.
I'm not sure if there's a better way to do this... I'm curious why we have randomState.nextBoolean() always returns a non-zero value. I'm not sure what the problem is with the caller, but I'm not sure if there is a better way.
I think this should be changed to `g_strcmp0 (match_collection_id, current_collection_id) != NULL`
This is a very minor detail - I would have just made the value a `-1` or a `-2` flag.
wtimeout is not 'wTimeoutMS', why are we removing it ?
We should not have a lambda here.
const iota - Allowno.Trace
`this.appenders.Length` will always be null, so this shouldn't need `lock(this)`.
should this be called `protoprotoproto`?
This is the only change that affects TF file. I'm not sure if it's worth it.
I think this is not needed anymore
Why not use PlatformTaskEx instead?
Does this work if there is a wlr_xwayland_server() call above?
You can't remove math/rand from here, since math/rand is already closed in this file.
this log line should be conditional on line 534 instead of the last line.
I think you can remove the `getUNF` now.
@becker33 This is the main change I was talking about.
do we want to keep it in config? I don't think it makes sense to add it to the config
allowOptionalMappings seems to be the same as the key. Can we just change it to a `allowallowallowallowOptionalMappings`?
i think this is a bug fix
I think we can just delete the var 'eeg.Export'
I don't think we should add a "UDS" API to this API, but it's not a big deal if you have a "UDS" API.
This is not the right place to put this. The `if ($articleId !== null)` is always true because the `if (!$articleId)` is not `null` and the `if (!$articleId) {` is true; we can just remove the `if (!$articleId)` and return `null` if the value is not set.
I think we don't need to pass `map` here, since `return arr` is a `null`. The only reason we are returning a `undefined` is to return an empty array, and we don't return `undefined` in that case.
This should also be a `@version`
This seems like it should be a separate PR
Why not just `setElement`?
This seems like it should be a function. Is that what we want here?
This is a bit confusing, why do we need to specify the metric type here? I think the `negLL` should be a `Values`. Also, I'd expect the metric type should be a `elihood`.
I'm not sure if `token` is the correct thing to do here, because the first `repr` is the first one, but it is not the first one.
I think this is the only place where we could use `finally` here.
Why not keep the original implementation?
const comma is missing.
I think you should remove the `CertificateRequest` call here, it's not necessary to pass a new `SetAnnotations`
I think we should just remove this line and remove the scheme from the model's `IdentifierScheme`.
This probably needs to include some sort of error handling in the changelog.
This doesn't work. You need to update this to use `ghost.js`
This should be `key != nil` if `key != nil`
It is better to import this at top of the file, so it's more obvious what the file is.
I think we should be able to remove the `setProduct` method.
Please add a `/* require core modules` to the test description.
Extra empty line detected at block body end.
This will only be true if `== false` (same for the other `isNotImplemented` check below)
I think this is the only place we need to call `model.Deployment` if we are not going to use `deployment` for all the `Deployment`s. I think it should be just `deployment.Deployment`.
`CustomClientAuth Auth `json:"-"` `CustomRouterAuth Auth` ?
We don't need this file since we're just throwing away the file `IMvxFormsViewPresenter`
Is this really needed? It seems to be able to use `typeoftypeof=='number`
Is this `||` check required?
Should this be `InitAddress`?
I think we need a new function for this
I don't think this belongs in `setZoomFactor`
Why not use the `S Settings` field instead of the string?
why not use `Ready()`? like we do elsewhere in the code. `chan map[string]Result`
This is the only change that affects the changes in this PR. The `id` is not used in this PR, so it is not required.
is this a bug?
I think we should make this configurable. The Unmarshal.NewDecoder method returns a boolean, not a set.
Can be final.
Why did you change this?
I think it would make sense to move `bool.Trim()` out of the string, since it's not a `string`, since it's a `string`?
I don't think this method is used anywhere? I think it is not a good idea to add it to the base class. It seems like the method is only used in `getString`
This is a breaking change. If you're using `.info()` in the `get` function it will not be needed. The version will be created before the `version` call is called.
Should we also get rid of the patch?
You need to use the `_viewsContainer` variable here.
Please add a `@Deprecated` annotation here.
This function is only called in one place, and it's only called in one place, so it's probably better to have a list comprehension to avoid confusing things like `get_holdingpen_objects_for_resource` and have it return a list.
Can we remove the pylint disable from the file since it's now not used anywhere?
I think it's better to move it to the `FORSETI_HOME` namespace, it's not used anywhere
This function is not used. You should use a return value here.
(style) line over 80 characters
I think it's better to move this to the `vmware_fusion` class, since it's a constant. That way you don't need to do this in a separate file.
This is wrong.
I think we need to update the URL for the new column name too, as this is the new column we have for the new column.
I think this should happen in `pkg/api/server/test_test.go` and not `1.5`.
I don't understand the motivation for this change. It's not a bad practice to use a cluster pool for this PR.
I don't think this import is used.
I think it is better if you remove this and make a `tables.lock` in `src/server/ptables/tables.lock`
Doesn't it work for all the `<package>` APIs?
I think this should be a warning instead of a warning?
This check should be done after the `if (foundBinary || foundUnary)`. Otherwise, the `addedName` will be set in `colVID`.
Note that you don't have to update `computeServiceAccount` in the `importer` flag, but you don't have to specify it in `app/views/compute_service_account.go`.
This API has been moved to `<element>`, which has no impact on the `<element>` tags.
This should be `<a tabindex="-1" href="uppy.io" rel="noreferrer noopener" target="uppy-Dashboard-poweredBy">Powered"`. Also, I think it should be `<a href=None>="tabindex=None>="this"tabindex="-1" href="uppy-Dashboard-poweredBy">Powered">`
I think we should check that `numpyImage` has `2` and not `2` here.
Should we do this after `NewSubWorkflow`?
This is a little odd, but I think it would be better to use the `license` as the parameter name.
I think `pandas_kernel` should already be used here, right?
why is this needed? it's already in the config file
I think we should be using this instead of `st` here and in the `TestStream` function.
is this related to the issue?
Align the elements of a hash literal if they span more than one line.
Can you add a TODO to remove this? The other one is going to be used for the new `beat/`
Line is too long. [86/80]
I think we can remove these line
This may be null as well, since `curSchemaSumary` is a null value.
This is a breaking change, is it?
I think you can just import the empty line here
This is a little weird. Can we have a method that returns a boolean that returns the array?
Please add a trailing comma to the end of this string.
This is a duplicate of the `boolean` below, right?
I think we can remove the `explain` property now, and just call it `_`
It looks like these two files are only used in the tests... I'm not sure if there is a better way to do this.
@deads2k I'm not seeing where the `super` argument is used?
is this a regression?
Please remove the empty line here.
Rails/FindEach: Use find_each instead of dynamic find_each_with_object.
I don't see any reason to do this, it's not a separate method
We should also be able to just ` asked asked` here. `Identity registered` is only used in `Fake` and not `oct` as a global var.
I think it is better to use propertyID here, since it is only used by property ID.
This is not a good example of why we need to add to our own `if (m->getNumAtoms() == 14)` block and the other way around it
This log line should be removed, right?
The `has_one` should be passed in the `links` field instead of adding a value here.
I'm not sure what this is doing. I'd expect it to be a list of layer classes.
this is a bug, we should not be doing this.
This is a good time to fix the error handling.
I'm not sure if this is the best way to do it. It is just a test, so it doesn't need to be changed. It is only needed for the `org_letters` to be used for the `org_letter` to be able to handle that case.
Is this change intentional or a bug fix?
I think it would be better for these to go in `pkg/errl/byte`
This change is incorrect. The only reason we have ` MockDbType=Int32` here is to prevent anyone using it in the code.
I'm not sure if it's a good idea to keep the `content` parameter in the `ContentChangedEvent` class?
I think this is wrong. The class should be renamed to `src/main/java/org/apache/netflix/iceberg/src/main/java/org/apache/netflix/iceberg/org/apache/flix/iceberg/org/apache/flix/
Is this a typo?
I think this is wrong. `c.debug` is `c.srv.logging.debug`
This is a breaking change. The only place this was used to pass the configs in the ConfigPath. The other option is to pass the configs to the ConfigPath.
This is the only place where I'm missing something. I think we can keep this as BuildBasePathArgumentProcessor and remove the reference to the reference to the reference to the reference.
wrong import order
this is a bug fix.
Is this related to the issue you're using?
Align the operands of an expression in an assignment spanning multiple lines.
I think we should use `Long` here.
Should we be checking if the error is nil?
why do you have to add this?
Is it possible to have a `client.Client` that is a `ctx`?
I'd prefer if we didn't add these too much here.
I don't think you need the `if` here. The `else` is not the default.
I'm not sure if the number of proposal is the right choice. I am not convinced that the proposal is the right one (and if it's the right one), the proposal can't be the right one (and not the number of proposal), and the number of proposal can be the right one.
why did you change this?
I think this should be `#include <fmt/format.h>`, since it's an LAM-MP dependency.
This should be able to handle both cases.
if the port is not specified it will be empty.
I think it's better to keep the original `auto *`
This is a little odd. I would have put the bucket list in an array of `m.Bucketlist`. I'm not sure what the right thing to do is.
Isn't this the same condition as in `ps.removePrecondition` ?
Wait, why is this `Sleep`?
why change this?
`SpeedLink` is not defined here, it will be removed in `notification::dismissed`
@ruflin I'm surprised you didn't get this one before.
I think this is a good change to the original code.
I think this should be a separate PR
This function will only be called when `_autosave` is set.
@tnozicka I'm not sure if this is correct. The idea is to have a `identitySourceIds` in the `getClass` method that is called from the `idToConstant` object.
Shouldn't these be constants? I think they are supposed to be wrapped in the `_` clause
Please remove this import.
I think this should be `github.com/ncw/rclone/`.
this one is wrong. It's only needed for the new one, not the other
Is it possible to do the same for the other case where `MAP_SHARED` is 0?
@jackfrancis can you change this to `config:"serverXX"`
Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
I'm not a fan of using `records. The file has 3 header lines that contain` and `records. The file has 3 header lines that contain` and `records. The file has 3 header lines that contain` and `records. The file has 3 header lines that contain`
This one probably needs a unit test
`query` returns `null` so we don't need to change the test.
I think this should be a separate variable (and a `x` variable) instead of a var.
I don't think this is the right place to put this 16 in this package.
I'm wondering if this should be `_base_`? Or should it be `_path`?
I'm not sure this is a good change. It seems like it should not be related to the PR.
This import can no longer be used
Why remove this?
`process.stdout` is a `nil`, so I think we need to check if `stdout` is an array of `indent(4, result.stdout)`
This is the main change. The PythonSdkType is only available in the PythonLib package. The PythonSdkType is not defined in PythonLib, so we should not need to change the behaviour.
This is a breaking change.
I'm not sure if `name: 'attachment'` is the correct delete.
nit: use `ClassUtils.toExceptions`
This should be done in `init()`
nit: `elementCount` is a bit confusing with `NaN` - maybe we can just have a helper method that returns `NaN`?
This is a bug fix, but it should be a `buildAction creates a build action` and `build.*.*` to a `stampAction`
I think you should also add this to the `DefaultableParamView` constructor
I think we should use `=== null` here.
This isn't used anywhere.
This should be done in a separate PR.
I think we should add the property to the `else`
should we change the constant name to match the other one?
You can remove the Normalizer configPass from the store.
This will be a breaking change for anyone who is expecting a list.
I think we can remove the return type as it's not used anywhere.
I think this is the wrong place for this. AddPeers is a very generic name.
I think this file is unused?
Should these be iptablesRules and IPTableRules as well?
I don't think this is needed anymore?
This is the only place where we need to handle the case where the object is empty, but the object will be empty.
What is the meaning of this ?
Kind is an API break. You can use a simple simple simple simple simple simple simple VolumeSnapshot.
Why do we need this annotation ?
I'm not sure what the best way to do it is. The `byte_count` should be `Boolean.second.size ()`, and it should be `Boolean.front ().second.size ()`.
I don't think we should use anything here - maybe we should just use `forEach()`?
This should be done in a separate PR
It seems like the `runtime` is not used in this function?
Why was this removed?
This seems like something that should be moved up after the last `if` statement.
I think this is the only place where we're removing the `--storybook-host` header. Shouldn't we just always use the `--storybook-host` header?
I don't think you need the `value`
I think we can do `@invitation.email`.
I'm wondering whether this `import selenium.types.types` should be better?
remove empty line
I think this method is not used anywhere, it's used in a different way than the one in `showLockActivity`
This is a bit of an overkill, but I'm not sure how the intent was to add a new `solids` property in the `property` class here. If we want to keep the old `property` attributes in the `property` class, then we should just call `patch_config` and just do a `run_config`.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Is this the only place where we have `./pv-tests`?
This seems to be a bug fix.
This is the fix for the `JetStreamMaxStore` function.
This is not correct. The `client.close()` will be called when `client.close() == null`.
This file is not used anymore.
better to use `Bolt::PAL.load_puppet` here?
I think this is not the right place to put the `padTo` method in the `CharCharSeq` class, but I don't think it is necessary to call ` CharSeq` directly.
I think we need to call this `custom_imports` now.
I think it would be more consistent to use the question to be consistent across all the other systems.
I think it would be better to have a `preload` attribute in the `BaseElement` and use that in `preload` instead of `BaseElement`
I think it would be more clearer to name this `docker-`
Why this include?
There are two changes in this file that need updating the test.
`window.self.location` is not defined here.
`ErrWorkspaceNotFound{}` is not really correct. `EXPECT` has a `ErrWorkspaceNotFound` instance.
This is the only place where we call `ShutdownAsync`. This method is called after we call `ConfigureAwait(false)` in the `Shutdown` method.
@liggitt I'm not sure this change is correct, because I don't think it's the right fix. I think it's the right fix, but I'm not sure it's worth it.
I think we can use `session.SessionDto` here.
This is not needed anymore. The `c.ovsCtlClient` will always return an error. The `c.RunOfctlCmd` should always return an error.
why not set to false by default?
I don't think this is a good idea. It's not possible to have a single origin, but it's not the expected behavior.
This should be `go-homedir`
I don't think this is the correct place to put this. I think the only place this is needed is in this PR, but it seems like the only reason this is here is because the function is only called in `AppCtl`.
This is not a function.
I think we can just remove this function
NIT: this is an internal function
Does the `name` format work here?
`const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || (2 ** 53) - 1;`
What's the point of this change?
I would use `from docker.utils import kwargs_from_env` here.
I think this needs to be a `const` rather than a `//`.
This whole block can be reverted.
The `if (is this the case) {` block above should be `>= 1`
I don't think we should be changing the behavior of this, but I think we should just use `H2O_VECTOR(struct listener_ssl_reuseport)` instead.
I don't see any usage of this method being called anywhere?
I don't think it's a good idea to use `zone` package. It's a bit more efficient to have it here.
This doesn't look like it's necessary to do anything.
The same as above, can be changed to `+ System.lineSeparator()`
This is a little hard to read. I would use `String[] data = null;` to avoid a `TODO`.
I think the original logic was wrong. If @group_level is 0 it should be - 1. If it's not, then @group_level should be - 1.
I think this is the same code as in #4109. I'm not sure why we need the change in this PR, but I'm not sure it's worth it.
Nit: this type should be `ID`
I don't think this should change, since it is a private method, and it's not a private field.
I'm curious why you changed this line.
I don't think this change belongs in this PR. The code should be updated to `git commit --file`
@bparees this is not the best approach to make sure the test fails without the `allowedOrigins` option.
I think it would be cleaner to have the conditions in the constructor, and use the new one instead of the existing one.
I think we should not be passing in the entire block to `attr` if the type is not supported. This way we can just check if the type is `true` when the error is raised.
@lisasy you can use 'UoE' here, and in the other cases, use 'null' or 'UoE' to be consistent
This is a change in behavior. We should be able to re-throw the exception if it's not there and just throw an exception here. The exception should never happen. In fact we are not going to throw an exception, because the caller can call `exception.MustBeRethrown()`, but it is still a `Exception`.
I don't think we want this to have been removed.
This should be `!`
Why does this trim the preferred MarcField only when the last argument is set?
Shouldn't this be `import_numpy()`?
This is a good idea. The `v(.+` should always be a string.
Is there any reason why we wouldn't have `IsRootedPath` be called `IsPathRootedPath` rather than `IsRootedPath`?
The `status` field is unused now.
This should be removed. I think.
shouldn't we check for the other values?
This was removed because it was not used anywhere.
Can we change the `*int32` to `TierPriority *int32`?
This column is missing the index index on `grant_id`
I don't think it's a good idea to use `WinImageSVG`.
I'm not sure this is a good idea. It seems like we should just be using the default value of the environment in `ecs/`.
Is it worth caching this function in favor of being a `StackEvent`?
why the empty line here?
I think this is wrong, the default should be `false`
This file is getting removed from the main branch.
I don't think you need the explicit `ns` here.
I'm not sure if this will work. We will be looking at the error message, which will be removed in the next PR.
I don't understand why we have the `places` in here. Can we just pass in the 20 instead of hard-coding it?
I think we should log the logging here.
I'm wondering why we need to import this?
I'm not sure if we should use the subscriber.
I think it's better to return `Optional<default>.get()` instead of `boolean`
This change should be reverted.
What's the purpose of this change?
How about using proposalID directly instead of a constant?
I don't think this is the right place to set `Baseline` to true. It is the only way that the `Slice` is used is when `Baseline` is set to `true` but that is not the case.
I don't see this being called anywhere.
@deads2k @tnozicka what do you think about this?
I don't think this is the best place to put this.
should we use `aws.x64` in this file too?
I don't see any use of `mpl_renderer.comms` in this PR.
This is not correct. You can just use `if node.modname`
I don't think you need the `previous-log-max-count` constant here, as the default is `write.metadata.previous-log-max-count`
this is not needed anymore right?
Shouldn't this be `_`?
Shouldn't this be a ``outputoutput``?
Is it possible to use metastore and 10 here?
This is not the right approach. If the user doesn't have a `Bolt::` that is the `debug` option, it will return `nil`, but it will return `false`. I think this is fine. But I don't think it will work, because it will always be the case, so we should be able to just use `debug.dig('debug', 'console', 'level', 'console', 'level')` here.
This should be `address_string.ffff` instead of `str(address_string)` right?
Is it possible that proxy will be proxyed? If it is, it should be a proxy.
This can probably just be `ool/image`, since the other keys are all lowercase.
This was not the only place where we were using Load page. The reason for that was, is that the problem is that the user has not requested the login page?
Wouldn't it be better to use a `boolean` instead of a `export` block?
This is a breaking change
I don't understand what you're trying to do here?
I don't think this will work, but I think it will be more readable.
Why are we passing in the struct here?
This will be `[mapTo]` even though the properties are not in `mapTo` but the value is in `string`, so I think it's better to be consistent.
The other go-sqlite3 imports should just go-mattn/go-sqlite3
`isKeyName` is not the same as `getKeyName`.
Do we have a constant for this?
I think it would be better to make this a `ListDeploymentConfigTemplates` and use it everywhere in the context. This will be more obvious and easier to understand.
I think it would be more convenient to use `url_helpers.path`
This should probably be `(unsigned long long long)bytes_to_read`.
Why was this removed?
Why is this no longer needed?
Is the `Utils::calcUnscaledVdW` needed here?
can we just make this a constant and not use that in this case?
I think this should be a constant.
This class is only used in one place, not here. We can remove the WebDriver static altogether.
I think it's fine to have a default endpoint for this, but it should be `'clef-signer-enable'`
Is this needed? It looks like the `scss` is already in there?
@jcotela It's better to use `host_dir` here.
Extra empty line detected at body end.
`@package` should be `@`
You should be able to just use `auth._redhat_fips` here.
Is it worth adding a TODO here to remove it? If so, I'm not sure it makes sense.
The result of `UserList` should be `list` and `UserUserList` (which is the only place where `list` is used) is `UserList`. The result of `User` is `list`.
this doesn't look correct as it's used in the database
Is this needed? I thought the only place where we would use the `Stream` object, but the `Stream#of` method is the more common term.
I'm not sure if this is the correct approach. It seems like we should be using `RetrySettings.get(RetrySettings)` instead of `RetrySettings.get(RetrySettings.get(RetrySettings), "RetrySettings";`
I'm not sure if this should be a public interface.
I don't think this is needed, it is only a global object.
this is a bug fix
I'm not sure if this belongs here, but if it is not. I would suggest `CreateDispatcherForGRPCDispatcher` as a `TChannelDispatcher`, and `CreateGRPCDispatcherForGRPC` (which is the only place `TChannelDispatcher`) would make it more clear where it's used.
is this log necessary?
This should probably be `DEBUG`
This should be added to the `taskInfo` above.
This is a bit unrelated to the PR?
This is not the right place for this PR, but we should probably call it "triple" instead of "Scheduled" here.
It seems that `complex` is only used in one place, so we can remove it.
I think this is a bug fix. We can't just do `if isinstance(vals, str)`.
I'm not sure if this is the correct solution. You should be calling ` os.RemoveAll(dir)`.
This is a breaking change.
This method can be removed.
I think we should remove the HashMap method. It is used for the Map toHashMap, and it is used for the map.
I'm not sure if it makes sense to have a `localProjectApp` field in the `local Authentication` field in here. It's not a problem, but it's not.
I think we should be able to use the `next` method in the nextHeightWidth. Otherwise we'll get an NPE when we need to use it.
Does this mean we can only keep the `txgroup` when the tx exists?
@matt-gardner, what is the difference between `/` and `/` here?
We'll want to use the same color as `DagsterEvent` for all of these. I think it's a good idea to use `resume` as the first parameter to indicate that it won't be a valid color.
I'd make it `int.affine_grid_generator` instead, as that will make the models available in the `Dynamically.py`.
Why not just set the default value for `AttackTimeout`? It's more readable.
this is not needed anymore right?
`trailer` is a bit confusing with a name.
Should we make this `vol.wait_for` for consistency?
@saghul, @smarterclayton can you confirm this was the issue and we don't want to be at the end of the code?
This seems like a bug, as the `time.Sleep(namespace.CacheRefreshInterval + time.Second)` is not the same.
I'm not sure this is the right place to put this.
I think we should just be able to remove this file, we don't need to touch it for web
I think this is the only place where the user could see the same thing as in other locations
This should be done in a different way.
I don't think we should be using it here.
why change the default value?
why not just take `topology.description`?
nit: this line is unnecessary?
I don't see where it is used. It is not the same as `raiden.menubar"><dt`
This should be `serve_static_assets_with` instead of `CDN` since we have the same problem in the `serve_static_assets` file
I think we should keep this here.
Align the parameters of a method call if they span more than one line.
I think this should be `expects error when instance could not be found: %v`.
`null` is a little confusing with the `Tuple`.
I think we should remove the `Won` field from the API, we don't want to keep the API in the API. We want to keep the API as long as we're now using it as `Won`.
I'm not sure if this will work without the need for XUnitIntegration.
I'm wondering if it's better to make this a string instead of a string, and use `str.format` instead of `str`
I don't think this is the right place for this change. The target_base will be nil if it's no longer a pointer, so I'm not sure if this is a good idea.
I think the way to go is add this to `addFlags()` and `setFlags()` methods, it will be used to add it to the `ValidateName()` function, but it is used in the other place.
I'm not sure we should return a nil object here? I think that would be a good idea.
`traitMethodTrait` should be renamed to `use CacheableResponseTrait`
could we remove this log line?
I think we should do something like `:user` and not `:user`?
I think we can move this fields to the `CopyActionsToFlow` method, since it's used by both the fields and the flow fields.
I think you should be able to remove the `if !config.XDPEnabled || config.XDPEnabled` check.
This is not needed, since `qualifiedName` and `qualifiedTypeDeclaration` are already defined in the same module.
I don't think this is right - the `HTTP2AuthorityPseudoHeaders` is used in the `HTTP2AuthorityPseudoHeaders` package.
Is this change required?
I think we should use `org.apache.commons.lang3.extension.extension` here.
The new name here is confusing. It's not clear why we're using this.
Can you use a `TODO` instead of hardcoding this in the ` RunTestsDependingOnDocker` package?
I think this is a good idea. It will also be good to add a `spec/models/` to `ALSPA` so that the errors are not displayed correctly.
@Scottmitch why did you change the username name?
Remove empty line.
This is the only change in this file.
I don't think we need to change the `QItemSelection` here.
Should we also set the sharedLock in the `try_lock_shared()` method?
`extensions: ".jsx"}` would be better.
This import can be removed.
nit: this is not a good change.
I think we can remove this interface.
I think we don't want to use `*big.` here.
this file is not required
Why is this deleted?
I think this should be `CLIENT_ASSERT(instr->label_cb == NULL || cb == NULL)`.
I'm not sure this is the right fix. It should be the one in the output.
This is a pretty big change, we should probably move it to the end of the line.
Is this change necessary?
This method is now unused.
I think we can move the CASDefaultCstorPool check to the `OPENEBS_IO_INSTALL_CONFIG_NAME` variable and use `CASDefaultCstorPool` in the CASDefaultCstor pool directly.
I think we should close the client directly.
Since you're not using this, can you remove the `&` space here? Thanks
Why is this needed? I don't think it's used anymore.
`datetime` should be after `import`
I think it is better to use a temp variable name for this, it's not a big deal
This is a bit odd - can we change it to something like `NewNew`?
This test is now getting run in `buildCallback`, right?
Shouldn't this be called `workingState` ?
Is this still necessary?
We could probably just remove this line and just do `breakpoints, ...`
Don't you need the `i18n` index here? It's used in a couple of places.
why is this change necessary?
The `''` is not needed here.
this is empty? is this the default?
` getNameDescription` is not the right thing to do. A lot of the code in this method are just a little bit misleading.
Shouldn't we use `onStartNestedScroll()` here?
You could also use `fill_cb)(&subreq->buf->size += inbufs[i].len` to avoid the error.
Does it make sense to put this in a constant? If so, maybe we could make it a constant instead?
This is the only way I found that the color was removed in this PR.
I don't think this is correct. It is a good practice to use a variable name.
Is this needed at all?
This should be `os.Stat(info)`.
I think we should make this `RemoteViewsService`
This is a change in the way it was before.
I think we should use the full `id` here instead of the `Type`.
I don't think we need this since we have a default number of places in the past. It's not a big deal either way.
I'm confused. Why is this hi still not there?
"... is not have a settings definition"?
This should be `os.path.join`
Is this used somewhere?
This should be "simplify chained comparison" or "a < b and b < c"
I think this is the only change needed. The `===` needs to be changed.
Is it possible that proxy is not a proxy?
I'm not sure what the best solution is. The `authority` here is the default.
This is not the only place where we need the `WriteResponseIfMarshalError` function.
I would prefer to have this in the first place, and in the other cases you've changed this to `if (ret != 0) {`
This is not the default behavior. It will always be true if `config.option` is an integer. It will always be a list if `mark` is `None` but the default is `None`.
this is wrong
Is this supposed to use `--logging=TRACE`?
I think we can just inline this function.
I think this is a change in behavior
Remove this log line?
Shouldn't we do `logger.NewTestLogger()` in a `CreateLogger()`, to avoid the need to use the `logger.NewTestLogger()`?
I think we should add a `@Nullable` annotation to `hashCode()` and make it non-static.
Don't change this.
I'm not sure this is the right fix. If the user is not set, then lastfmscraper should be set to user. If it's not set, it should be set to user (we can use this in the future)
Can we use the same naming convention for the `aspnet`?
powershell -> response_powershell
Please add `collection?` to the `collection`
This is a pretty big change. We can't do this anymore.
`import allpler.samplers.pseudo_sampler import PseudoSampler`
I think this should be `go-algorand/` (or `go-algorand`)
@Eric89GXL don't you have any idea how to write a default?
@jridgewell any reason for this change?
I'm not sure why this is needed. It's not a good idea. The code below is not a good idea.
why is this not needed anymore?
This test should be done in `nodeWithFactory`
`std::lock` and `std::mutex` don't have a ` lock_a`.
This is the wrong place to put `volume_...` before `./` to make it clear it's the default.
this change is not correct as zkShardTerms is already set in the `getState()` function above
`AbstractAnyTypeDeclaration` is not a good name for this type of check.
This file is not present in Spack
Why did this get removed?
I think this is the only change that fixes the issue. @bparees this was the reason why I had to fix it, and it was just about it in the first place, but it was just about it in a different PR.
MPI-CUDA is a small matrices, so this can be removed
This namespace is not used anywhere, please remove
Isn't the envvar file already set? If so, we should probably add an error message here.
Too Exp is a public API. It is used for the `Too://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://://
I think it would be better to use a `ImmutableMap` for the `Map`, and use a `ImmutableMap#getPermission` directly.
I think we should use `self.TYPE_REGISTRY` instead of `None` here. I think we should just check if the value is `None` and not just `None`.
why do you need to change the name of the variable?
I think this is a leftover from an earlier PR
why this change?
I think we should be able to use `QDesktopServices.openUrl` here.
I think we should be using `key *ecdsa.PrivateKey` to match the `quit chan` parameter.
Can we change `MemoryLimit` to `MemoryLimit`?
I don't think we want this to be an `Apply` rather than `HasApply`
I'm not sure what the best way to do this would be to just have a `idx` field.
You need a blank line here
Please remove the spaces around the concatenation operator.
nit: remove empty line.
This was just a bug. I'm not sure what the best way to do it.
Doesn't this test fail if a caller has `sampling` set?
I'm not sure we should change this. If inventoryfile boltdir is a global then it will never be a global. We should probably change the default inventory file to a directory. If this is a directory, then we should change it to a directory. If we do want to change the default inventory file then we should change it to a directory.
This is a very specific API change and will be confusing. How does it occur for a `exception` exception?
why change IOException toThrowable?
This should probably be `Optional[T, Dynamic]`
@bryevdv, is this the only place you used CONTAINER?
I think we should use a `Iot` for this, as it's not a `32`.
Why is this change needed?
I think it is better to use a different name for the request. I'm not sure if this is the right name.
I think we can remove this file and remove the `Kokkos_Core.hpp` file.
I think this is a change in behavior. This is the only change that will cause the queue to not have the `cb_mq_health`. I think this change will cause a race condition if the `cb_mq_health` is a `metrics` not a `health`, which is not the case. The other option is to remove the `health` from the `health` above, which is not the case for the `health` queue.
I don't think we should be changing this. I think we should only have a `len(rule.Dst) == 0` check.
I think this is not needed. I would just add it to the other `IConnectionHeartbeatTickFeature` interface.
How does the error message look nicer?
(style) "foo* bar" should be "foo *bar"
Nit: I would use `using` rather than `using`.
This should probably be `parenticultyCalculator<Void> DIFFICULTY_BOUND_DIVISOR>`.
I think we should also add this to `scheme.blob.Open` (and remove the need for this)
It's a little confusing that we use a `listens` for `listen` as we have a method for that, but I'm pretty sure it will be better to have it in the `listen` package, and then call the method `listens` in `listen` (or similar)?
This is a breaking change. Can you revert?
I don't think this should be here.
This should be changed to *all* the Copyright (C) in the core, right?
I think we should change this to `2013`
Maybe we could add a link to the ACME server so we can add a link to the ACME server for the German?
why is the default changed?
I'm not sure this is the best place to put this.
I don't think this is used
I think we can remove this line now.
Maybe `junit` should be `Optional`?
This test is not related to the PR, but it should be removed.
This is not really required, I think. The property is set by the setter.
Just a note: This is a breaking change. It's not really the best practice for this PR. I think we should keep it in mind. If we need to add `*` to `*` we could add it to all of the other components.
I think it would be better to return an error instead of silently ignoring it.
`baseFeePerGas` is nullable, it is a baseFeePerGas value, so it can't be used in the constructor.
This change should be reverted.
why this change?
You should be able to remove `T234MarshalByRefObject` and `T234MarshalByRefObject` from the test class.
This isn't right, you can just use `bridge.send_command` directly.
I think this should be a `containerd`, not a `--container`.
This should be `MaxConnectionWindowIncrease`
I'm wondering if we should show the result of the page as a warning?
Just curious, why do we need to force force `prefetch` here?
I don't think this is the correct way to do this. The only thing I'm worried is the `FSTxEncode` function is in `FSTx` and it is used in the code base and will be the correct way.
I think this should be `return get "'" + value + '\\r`
If you don't have to change this, it might be better to use a more meaningful name. I also don't think it is used anywhere else.
I think we can remove the `git` from the `Samples` method and add a `retry_checkout` parameter to that method. We can remove the `Samples` parameter from the method.
This is the only place where we want the `Certificate` attribute to be used.
Shouldn't we use `extension_condition`?
I'm not sure if the problem is with this. The problem is with the `order rand:SEED` in the spec is that the `seed` does not work. If it is a `seed`, the seed should be a `order.seed`, not a `seed`.
I'm not sure if this is correct, but I think it would be more consistent with `mod->is_client = false` and the `is_client = false` check would be needed.
This doesn't look correct.
Please avoid wildcard imports. We usually do not use wildcard imports in our code base.
why are we adding module.exports to config?
Is this still needed?
I think this `if` should be fine, since it's only used in one file and not in the `if`. Also, what if `signed_in?` is an `SessionElement`?
What is the closest connected peer?
nit: `autoRowSize` is in a separate variable and should be removed.
I don't think we need this. The `namedtuple` is a global variable, and it should be a global variable.
this was the only usage of octest, not sure if this is the correct place to do it.
Style/MutableConstant: Freeze mutable objects assigned to constants.
Can we change this to `doNotUnref`? I think it's better to only do this if the value is `nil`
I think this can be `>=self._execute(Command.GET_ELEMENT_RECT)['value']`
`data` should be in the `call`.
I think it would be good to also add these for the `profile` action.
@jcotela do you have any concerns with these changes?
this could just be `return nil, nil, nil`
We should add another example for this.
this is a bit weird... I would just add `chainID` to `ChainID`.
Is this the only place where the exception is raised?
This is a different bug fix. The yamlamel.yaml needs to be added to the `ruamel` module.
This is the wrong place to fix the bug.
This should be in a try/catch block, not here.
Just noticed the naming here, I think we need a `:user` suffix.
I don't like the idea of this (or the idea of the `*SignedMessage` function in the UI), so we should be consistent. If we don't have to, we can just do `*SignedMessage` in the `client.go` where we can't do this.
This is not used anymore
this was a bug in parent_nodes, we need to avoid a new parameter to the new parameter
I think you should remove `org.infinispan.commons.lang.StreamStream` from the list.
Is there a reason we don't have to change this line, but the `count` prefix is the same as the `doc` field in `ssto.js`. Is this what we want?
This is the main fix. The `TTemplateParamClass` should be left to `[]` instead.
This is not really needed, you can remove this if statement as it is already the default
This could just be `*` to match the other modules.
The BigInteger must be initialized with an int.
`debug` is used to generate `format` in the `debug`. The log message is not clear about the `.format`.
I think you can replace the `get` calls with `to.deep.equal`.
I am a little confused by this. The `originalIcebergType` class is `_` and `_` but the `_` and `_` are `_` and `_` both are `_`. The `final` variables are not really used, so this is a bit weird. I think it would be more consistent to have `_` as a parameter, and have the `_` as a parameter name `_`. It is not a big deal, but I would prefer to have `_` as a parameter name, and `_`.
Why was this changed?
I think it's better to keep `MongooseError` here. I'm not sure it's worth it.
This is a change in behaviour.
I'm not sure this is a good idea. I would suggest adding the `Internal Wrapper` class to `CloseableIterable.transform(json, Record::copy)` and then calling the `CloseableIterable.get` function in the constructor. In the case of a `Internal Wrapper`, I would rather see the `CloseableIterable.get` calls in `CloseableIterable.get` in the `CloseableIterable` method.
why not use the `translate.isDebugEnabled()` function here?
This will be a bit confusing, since `getImagePosition` is not a `} else {`
@kennknowles do you think this is a bug fix?
I think we should just remove `AssemblyOptions.validateParams` from the constructor, since it doesn't have to be wrapped in the `Model.read` file.
This should be `networkPattern`.
I don't think the use of a hardcoded block is necessary.
This should be an empty string.
`marionette: true` is not really true here. I would remove the `marionette: true`
Should we use a chain.DefaultStore() to avoid any potential future issues?
I'm not sure if we should check for `deviceName != ""` here. If the device name doesn't contain any other attributes, the `DeviceName` will be used in the `ad` mode. If we want to keep it, I think it's a little less readable.
This should be a public property.
I think this can be simplified to `get => 0`. It is a little confusing to have a Valueable size.
Is this a typo?
Align the elements of a hash literal if they span more than one line.
@matt-gardner How about adding an `initializer` parameter here, and in the `BagDictionary` constructor? The `null` parameter is not nullable.
This is not a good place to put the `ElementType` in `FEED_server.go`
Can we remove this and just call `props` from the `index`?
I think it would be better to move this into the `eniLock` block, since it is used for both the `conan install` and the `conan install` block.
I think we can just do `if atomic.get(3) == 0`, and remove the `atomic`
This is not the correct way to go. The link to a link to the link to the link to the link.
`fetchMock` is used in this file and can be removed.
I think this is the only place where the code was created. The `ExpectData` should never be used.
I think this should be `&&`
Would be good to have a test that checks for these cases.
I think this should be a warning instead of a debug logging.
I think it's better to move it to the beginning of the file
This variable is unused and should be removed. `var FEATURE_NAME = "reports";`
This looks like a good idea, as we are not going to use the `initProcess` variable anymore.
This should not be here. The error is not valid
@scheibelp This is the wrong place for this.
`Warnf` is not a valid call. Do we really need to call `Warnf`?
This is a bit of an overkill. I would suggest adding a new method to `StringUtils.isNullOrEmpty()` to make the code easier to understand.
I don't think we need to get the Uploads flow file. Can we just get rid of this method and just do it in the constructor?
This is a breaking change, but the `dynamicconfig` is not a `DurationPropertyFnWithTaskQueueInfo`
This is a pretty big change. It is possible that the deepest object will not be the same as the deepest object, but the deepest object will be the same as the deepest object.
Extra empty line detected at block body end.
I don't think this is correct. This method is only called for the `exists` method.
This is a bug fix
this is not right. The only reason I'm not convinced about the `CachedThreadPool` is to create a new thread, which means we can't remove it from the `max_threads`
I'm not sure if this should be `else` instead of `None` since the `sum` is the main value of `sum_loss`
This should use padding instead of padding
Please use `balance` instead.
This is a change in behaviour - it's not a good thing to change in the future. It is not a test, but I think it is better to have it as a test, as it does for now.
I think it's better to move this to the top of the file, and add a TODO to remove it in the future.
I don't think this is correct. The `other.idx` should be the same as `VAR(other.txt)`
I'm wondering if this should be a module-level module.
This is not needed anymore?
I think we should be using the environment in the function, instead of using it everywhere.
Can we move this to the ZMS_PROP_ENABLE_PRINCIPAL_STATE_UPDATER_FREQUENCY? This way we don't need to add it to the ZMS_PROP_ENABLE_PRINCIPAL_STATE_UPDATER_FREQUENCY_frequency.
nit: space after `,`
can we make USERS a constant?
Shouldn't we just call queue here as we are removing the whole block?
I think this should be `List.ofAll`.
this method can be removed as it will return the value
Should we also update the `PhaseSelector` field to mention that it's the correct field name?
Why do we need `AllowlistedModules`?
I think you meant `set` instead of `set`
I think this import is unused
@lilleyse can you please add a TODO to remove this?
This will break all our tests that fail if hybridMountpoint is nil. I think this should be `Optional<hybrid> - gcc>`.
Ditto on the previous line.
I don't think it's necessary to add this to the `before` section
campaignSource struct should be sufficient here
Is this a regression?
Can you add a TODO here to not have the max "." value in the string?
This is the fix for the `isNodeProcess` case below to catch the message.
What does "disposed" mean? Why is it disposed?
Can you add the new tests for this function?
I don't think we want this to happen anymore. We're not going to have a valid user with an SP, which means we can't send a user with a valid user with a valid user.
I think we should be using the `strings.Join` here, since it's not a single string.
I'm wondering if it would make sense to have this check in `#Start()`? I'm not sure what the right thing to do is, but it seems a bit of a hack.
I think this can return null.
Can we add a TODO about this to the `Get` method? I don't know if there's a better solution. `BACK` has a default value, so if you want to be able to add a `Alias` argument to `CreatableIndex`, then we could add the `Alias` argument to the `Creatable` and then we can add it to `Get` in the `Alias` method.
I think we should also check that the length of a non-null value is `len` here.
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
I think we don't need this anymore
I'm not sure this is the right fix. I think it should be.
You can remove this author as it's already covered by the other changes.
This should be done in `STDERR_FILE` and `a`, right? I think we're not using `freopen` anywhere in this PR, but it's a good idea to avoid it.
Is it possible to use a single string? It is not obvious what the string is for.
I don't think this is correct.
I'm not sure if this is correct - if a node is a node, it will be a node.
I don't think it makes sense for these to be an `Gem` module. It is not important for these specific files, but I'd prefer to have the `#end` block in this file.
`set_format` is used in `set_format_format` function, and it's used in `set_format` method. It is used in `_format` and it should be used in the call site. You can add it to `format._format` in `set_format`.
This doesn't look right. I don't think the `<T>` should be required here
This should be a `public` (or an empty list)
I think this is not really needed
`backend` is not used in this function, can it be removed?
I think we can remove this and just do `return new ListDeploymentChains(ctx context.Context, req *webservice.ListDeploymentChainsRequest)`.
I'm not sure if we want to make the error message more specific.
I think this is the only place where we're using the value from the config. I think we need to change it to the value in line 275 instead of the value.
Is it possible for some reason to use `cmake.Context`?
This is probably the wrong approach. You should use `LOG(FATAL)`
nit: rename to `replay`
This is the only place where we need a `ScheduledJobType` in the `pushContainer` method.
This change is not needed anymore since the file is already created.
`trList2.size() > 0 && trList2.get(0).pumpId == 0` is equivalent to `count`
In this case, we should probably have a `shortAddressAddressAddressAddress` field of `checksum` in the `checksum` struct, but that is a `map[string]` in place.
@jridgewell Is there a better way to do this? I think we should avoid this if we are not using the default implementation.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [90/80]
I think we can remove `nilkeys` and `Create`. Since `nilkeys` is nil and `nilkeys` is nil, it will return nil if the `nilkeys` is nil (and we don't want to do that in a later PR), and it will be nil.
I'm not sure this should be here?
Should this have been `dbCommand` struct now?
Shouldn't this be `ast.Package{&ast.Package{`
Why was this removed?
should we make sure that the string is missing in the spec?
Why is this changed?
I think this was just dead code
Why is this needed?
I think this is a leftover
Maybe we could also change this to `// +optional`
@smarterclayton do you know what happens when the configuration is `1`?
I don't think this file is required.
Is it worth putting this in `app/views/api.go`?
This is the only place where I can see the `playerExecuteParsePacket` flag. I think this should be removed.
I don't think we should be changing the API here. I'm not sure we should do anything with the API.
Will echo: false ever be false here?
This test is testing the same as the one in the `test_*`
Is there a way to get the `defer` from here to not print the error?
I think this is a leftover?
I think we should use `Int64` here
Shouldn't we call `PersistBlockLevelInfo` here? I don't think it's a good idea to call `RunActions` on the interface, so it should just be called `RunAction` instead.
Please remove the `dict()` here.
Why not make `isView()` return `false`?
Why do we have to store the `attr_writer` class instead of the `attr_writer` one here? We have a couple of `attr_writer` in `attr_writer`. I don't know if this is the best we want to use.
You can remove the variable entirely. It's not a blocker for this PR.
I don't like this name, I don't like it. It's used for the `.worksh` and `.extra` fields.
I think it should be `receiveError`.
Could we put this in `grpc`?
`cancel := context.Background()` is the same as `cancel := $cancel := $cancel := $cancel := $cancel := $cancel := $cancel(state))`.
Is it worth adding a TODO here?
Openstack is a very generic name for the config?
What is the motivation for this? Is it a problem? It seems a bit redundant to me to always depend on the `2`
Should `AddDiagnosticSourceInstrumentation` be renamed to `TInstrumentation`? It's not a big deal, but it's a bit confusing.
Rather than re-implementing the `project.yaml`, I would just use `project.name` and `project.yaml` to make it clear that the `project.name` is the same as the `project` object, but it's the name we're using. I think it's a good idea to just change this to `project`
Maybe we could add a `//` here to make it more obvious that it is an error and not a user.
I think it's better to put this in the `if` block.
This table is missing the table name which should be added to this table.
I think this should be removed as it was before.
I think this is not deprecated.
This TODO is not needed.
I'm not sure if we should change this to true here.
I don't see any use of this field in the code.
`ZoneOffset.UTC` is a `withOffset` so it can't be `nil`
Would it be better to name this `NAME_REGEX_id` so it is more clear what the `requirement` is for?
I think we can remove this method now, right? We can't remove it in the future.
I'm not sure this is actually the best way to do it.
I don't see the need to change, if I have a `AWSEmailProvider` it will return the ` EmailNotificationService` instance, which is the same as the `getResourceNotificationService` instance, and then it will throw an exception, so we can just pass the `AWSEmailProvider` directly.
This is probably not needed, but we can't rely on `spec/models/password_path.rb`
Please remove this file and the other similar ones.
Why does the `0` here just return 0?
I think this is a leftover from debugging.
This condition is now unused?
LOG() is no longer needed
I think this should be an `Optional`.
I think it would be better if this table was disabled and the table is not disabled.
Why are these added?
I don't see this being used.
We could just do `dev.javascript.script` instead.
This is the one place where the `s.close(err)` call was removed. It was introduced in the `s.close()`, but it was never used before.
These lines are too long.
Why remove the `attr`?
I think this should be in the line above
Do we want to make this configurable? I think we can remove it.
Are we sure we don't need to change the value of h2o.h?
This should be done in `setUp()`
Is this what the NS ID is supposed to be?
can we use the vXLANVNI to be consistent?
This should be `bitRead(atones, "yoda")`
This is the only change I found.
Can you add a note to the commit message about this change?
I would rather see this method called `config`.
I'm not sure if `data` is the best name for the error.
I think we should also mention `revision` in `getServiceForDoc` and `currentServiceForDoc`
This should be internal, it is internal.
This is not a valid value.
Why are these `conftest.py` needed?
Nit: This function doesn't seem to be used. It's used in tests.
I think this is the right place to fix the problem, but I think the intent is to set the default version of 1070296 to 1. This is a very simple number of items in the UI. This would also be more efficient to use the default version of 1070296.
This is a breaking change, as we're using `LogicalType` directly in the `if` statement.
Rails/HelperInstanceVariable: Do not use instance variables in helpers.
Lint/ParenthesesAsGroupedExpression: (...) interpreted as grouped expression.
This should be `Boolean` instead of `descriptions`.
I think we should use `time.Duration(val) > 0` instead of the `timerNoUserLatency`.
This is a bit unrelated but I'm not sure if we want to do it this way. I'm also not sure if we can do this in this PR.
I think we need to change the name of the key here as well.
Metrics/LineLength: Line is too long. [83/80]
I don't think we want to add this operator to the `Operator` component.
I don't think this change is required.
This is a bit of an overkill. How does this work if the taskQueue is not a valid url?
Is this necessary? It looks like we are not checking for AccessListItemForRpc when we don't have any non-`Field` type.
I think it would be more readable to just use a simple `func (e unauthorizedRequestError) Error(s).apiToken, e.errorString)` here, and then in the other call sites where we use the new one.
This is a bit of a weird pattern. I'd rather not count the flow processsing.
I'm not sure this is the right fix. I'm not sure it is worth it. It is just a warning that the value is `True`.
Does it make sense to use `super(SGEJobTask, SGEJobTask)` here?
I think we can just do this in the table table. The table table is created by `admin/podman/mypy/compile/etc.yml`, so I think it's fine to just do this in a separate PR.
This is the only place where we need to check for the destination limit.
This should be `GroupIDType`.
>Percentage of the graph (in vertices) to contract [0..1]" [](start = 15, length = 5) Should we be using contract [0.1]" or contract [0.1], contract [0..1], contract [0..1], contract [0..1], contract [1.0], contract [1.0], contract [0..1], contract [0..1], contract [0..1], contract [0..1], contract [0..1], contract [1.0]
I don't see this value in the code, can you use a default value of the GET_CAST_SINKS for this. It's a little hard to follow
I think this is a change for the core test.
I think this is the only place where we use the new `GetIDictionary` method.
This is a bit confusing since `@Kubernetes.new` and `@Disabled` are in the same file. I don't think it's necessary to be in a single place, since it's only used in one place.
should the message be `block512s`?
I don't think this is a good idea. I think the new interface is better.
The output of the errors are never used, so the output of the errors are empty.
This line is incorrect. It should be `< 0`
It seems like the lowerDomain can be lowerDomain = resources.substring(0, delimiterIndex).toLowerCase();
I think this column name should be `false`. The column should not be `false` in the `trail_map`, so I think this is fine as it was.
This selector should not be used. If we want to keep the old user's selector we can use `backend::lang.user.inherit` instead.
this should include `bundle/exec` and `bundle/exec` are not needed.
is there a reason for this?
`err = kv.WriteBatch(batchForBlock)` is enough.
I don't think this is the right solution. The only thing this would be to set a CompletableFuture object in the constructor is to avoid the future from being called.
This should be a `_x` prefix.
I don't think we should change this
Why is this change required?
As discussed offline, I'd use `listenerListenerEL` instead
I think it would be better to do `time.Now().Unix()` here instead of `time.Now().Unix().`
This will be `0` for all the ALGOSMALLLAMBDAMSECs, but not 500 env variable
Why are we using `-` here?
Nit: This should be a constant, not a constant.
This import is unused.
This is what was there for a reason.
I think it would be cleaner to just remove this string entirely and just do `getDefinition()->get('allow_html')`
This is the only place that needs to be done in a separate PR. It is not a good idea to use the same null check in the `Guard.Empty` method.
This file is no longer used. It can be removed. The main process is not working on Windows.
This change seems to be the only change in this PR. I'm not sure if it makes sense to change the `TYPE` field to `IN`?
This is a bit confusing. It's the case that `stateChangeEvents` returns `nil` when the container is not empty.
This import should be removed. The `*` import is never used.
I don't think we should be using the `k8sSDWithNamespaces` here, since we're using the `k8sSDWithNamespaces` in our code base.
I would call this `fixtures`
Use a guard clause instead of wrapping the code inside a conditional expression.
can you make this change in the future?
I'm not sure if the `err` is needed anymore.
I think it would be good to have a test that works with `package` as the default. But if it is not there is a better approach, then it would be good to keep it as it was.
I'm not sure why you added the `getIcon` method here, it seems that `excerpt` is called twice.
I don't think this will work, but it's not a good idea to go with `golang.org/x/net/context`
This is the fix.
this is just to avoid the need for a new cache
This was the bug that was causing issues.
LOG_IF_ROOT() is a good idea to use a constant. I'm wondering if this should be an optional parameter.
I think this should be `default`
I would prefer to see a new dependency in the code.
Would be good to have this as a constant. For now, we could also just call it `ctaLink`.
The `Current` method is nullable, and it is not needed.
@SamSaffron Shouldn't these also be added to the `mail_settings` namespace?
This function is a function that's used in a few other places, so I'd just call it `common.IsQuantity`
Why are you removing this?
Nit: I would rename this function to `localstoreCloser` or something like that.
What is the difference between this and the other ones?
Is it possible to get rid of the `creationExecution` field?
I don't understand this change.
This is a bug fix. I don't think we need to change the behavior of this `else` block. I don't think this is the correct solution.
@stuartwdouglas What's the difference between Exception and NPE here?
This is the same problem as the `Blockly` part of the code. It's used to create a new `OUTPUT_VALUE` field, and the type should only be returned if `Blockly` is true.
This class was deprecated.
Does this work if hex is a `*length`?
This is a breaking change. I don't think we should be changing the API. The `XML` is not used in the `AbstractXML` interface.
I don't think this needs to be a `Commitments` variable, since it's a struct.
This is a breaking change. The file name should be changed. I think it is a bit confusing to read the name as it is. It is not clear what the schema is for, but if we are not using it here then we should just change the name.
I think we should just return an error here. Can we make sure `ErrRequestCancelled` is an interface and not a `Identity`?
This is a bit unrelated, but I'm not sure about the change here. I'm not sure if this makes sense. I'm not sure what the best thing is to do, but it seems like it's still a bit of a bikeshed.
This is the only change in this file that will need to be changed in `Createpaused()`
I think this is the only place where we can't use this, since it is a different keys that are not in the `vkCode` keys.
@deads2k i'm not sure this change is correct?
Do we need to keep the old number?
Why did this go up?
The `BYTES_PER_DEL_TERM` is not the default. We should just be looking at `BYTES_PER_DEL_TERM` here.
How about 'email' => 'required_with:password' ?
Should we add a `setParameter` method here?
Is it better to use `firstTimeEmpySubject` instead?
`transport` can be removed now, right?
You can raise the connection here, it should raise the exception if you want to raise the connection before the exception is raised.
I'm not sure if this is the right place to do this, since `_expands_user` is a private member, but it is a public member. Maybe it should be a private member?
I think this is not right. The `_isHidden` will be `false` if `_isHidden` is true.
I think we should use the `NAME` constant here, as we do in the `NAME` package. And in the future, we can use `NAME` to make it clear that the `NAME` is the same as the `NAME` value.
I think we can use `ionKeyStorePasswordFile` here.
I'm not sure about this. If we are testing the actual log, we should remove it.
This should be a `list`, not a `list`.
It would be good to add a malformed entry to the result.
I would prefer to remove the `logIdToSend_` from the method, since it's not used anywhere.
I'm not sure this is the right place to put a new one, but it's not a big deal, and if you want to do this, it's a bit confusing to have the same check for the `return reconcile.Result{}` check.
This change should be reverted.
This is a bit confusing. What is the reason for the test? I'm not seeing the duplicate formatter exists and it seems like it should be the same output target. Perhaps a test should say that "when a duplicate formatter exists exists for the same output target" would be helpful?
Shouldn't this one be in the core?
This should be transient so that it gets compiled in an `mContent` interface.
this is not a good idea. It should be `getOperations()`. If the code is in the swagger, we should not use the swagger.
This is a BC break, no need to pass the full request.
Shouldn't this be `current_user.mentor?` ?
Is this the only place that needs to be added?
This will break the `from` case when you import `max` (which you'd get a `max` from the `utils` function)
This seems like it would be more reasonable to have an `TODO` check here.
Standards: Please add braces to this condition.
this is not a bug, if you have to do a `ethBackend.Etherbase()` that does the same thing.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why is flash-async removed here?
Right is a very large number of bytes. I'm pretty sure that it is a good idea to get a more specific number of bytes. The contract is just a single element of the contract, but not sealed.
@jmhooper @jmhooper @mitchellhenke can you confirm that this is the reason why you changed?
This is a bit of a hack. I think we can just use the Cassandra name.
I think this should be a field of `System.separator`.
Use `if host.exec(Command.new(...).text_exit_codes` instead of `if host.exec(Command.new(...).text_exit_codes):`
It's not clear to me why this is needed? `if response.status == 200:` instead of `body`
`label=comp.split('.')[-1]` is enough
I'm not sure this is the right fix.
I think the first parameter should be `false`
Shouldn't this namespace be `if handler.namespace != nil && namespaceEntry.GetInfo().Name`
Indent `config` as deep as `hash`.<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
The `# omit_containers` should go after the `#`, so the one below should be `# database container`.
I am not a fan of using the uri, but I think it's better to have a simple message like: "Use the `hive.comparing(options.containsKey, Node.hive.comparing(options.containsKey)) { //
This function is not called in the "return None" case?
I'm a bit confused by the `CA` test. Could we have a more descriptive name?
This will fail if both `excessDomChildren` and `index` were null. I think it should be fine.
This should be a `off` function.
why was this removed?
nit, open the directory before setting the directory.
I think it's better to use `or` instead of the `or` here.
I don't think this is a good idea. The test should be testing that the `list` has the correct key.
`local_ip` is not used anywhere else in this function.
Why not just return bool?
I'm curious why this was changed
What is the reason for this change? It is not a bug, but the code is not correct.
I'm assuming that when we have a 400, we should try to catch this, and only catch the exception if the exception is `None` and we don't want to catch the exception.
This should probably be `lbann/data_store/data_store.hpp`
This is a breaking change. It is not a `ValueTask` but it's a breaking change.
I don't see the point of having the `CLIImage` in the test. Can you make sure the test fails?
I think we can remove `TableMetadata` from the `newTableMetadata()` function.
This test is no longer testing what the new tests are doing.
I think this should be debug or at least log the debug level.
This was a typo
How about: `badContentType: goodContentType,`
I would keep the `throw new` here, because it is not a `quit` method.
Is this really what we want?
I don't think you need the flux_respond here.
I think we don't need this import. We can just remove it from the `webpack` package.
why not use a newSchedule ?
I don't think this should be `project != null`
Is this include needed?
break here is unnecessary?
I'm not sure if this is the right way to do it, since the manifest file is set in the `manifest_file`. It's a good practice to use a `file` (which is the default for the `manifest_file` which is set in the `overwrite` case).
I'm not sure if we should do this at all. I'm not sure if we need to do anything here. If we do, we should be able to use `--verbose` in `app/views/javascripts` and `--verbose` to get the correct behavior.
Maybe rename to `PercpuUsermode` and `PercpuUsermode` to be consistent with other packages?
I think you can use check_user_can_edit_record instead.
This is a bit of a hack, and it's a little confusing to me. Can you explain what the user has and what the user has?
I think this can be removed now, we have the default value.
What is the purpose of this change?
is this spec actually being called for a competing?
check the error
`getMicroserviceInstance()` should be renamed as well, right?
I think we need to keep the `static` keyword for this.
I don't think this change is needed.
This should probably be a bit more descriptive, like `ip_header->&& 5`
This is a breaking change, as the `Stateful` field is only used to pass the `convertful`.
This should stay `public` because `private protected` is not protected.
Should we check that `tcpproxy_no_no_no_no_no_no_no` is not enabled here?
Is the transferred required by the transfer that can be removed from the previous if block?
This is the fix for the test.
It seems like this should be ` MCTX_NUM_SIMD_S` instead of `== 0`?
@n3nash @jeherve - This is not the best place for the `[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$[$
This is only used to return `null`.
Why do we have a constructor argument here? If we do, we should not use a -1 flag here.
This line should be `claim\BackendAuth`.
If this is a change from the PR, I would recommend to change `nano::epoch::send_block::epoch () const` to `nano::epoch::send_block::type () const`
This should not be necessary, right?
shouldn't it be `prefMobileUpdate` ?
Can we have a test for this?
I think you can just remove the `sanitize-tchannel` flag. Also, you can use `!issanitize-tchannel` instead of `!issanitize-tchannel` and `--plugin yarpc` flag.
This is a bit of an odd name, but I think it's better if the value was `1`, and `API_co_to_API` would be `0`, but it would be `1`.
I think we can remove the `DbRound` struct and just do the `DbRound` struct. The only difference is that the `struct` and the `DbRound` are the same, so we don't need to add `DbRound` here, but it's not a big deal either way.
I'm not sure this is correct. The test is `testClusterDeploymentWithoutRegionLabel` is `true`, so the test will still fail.
You don't need to use 64-bit anymore.
I think it would be better if we could return a `prefs.edit().putBoolean(key, false).apply();`
Please remove this.
Is this a BC break?
Is this used anywhere?
do we need to copy the input data? I think it's probably better to copy the data
The flattening config override flattenings from proto annotations, should be changed to proto annotations.
I think we can keep this the same as the one above.
I don't think this change is necessary. The `K` attribute is already in `HdkPath`.
This will break compatiblity with multiple nodes.
This is the only place where I was expecting a manifest to be re-enabled, I was not sure if it was a manifest or not. I was thinking about it, but I don't know if it was a bug or not, so I'm fine with this.
This should be a separate PR
if we do this, we could make it a method
I'd rather have these in a separate PR. It is not needed.
This is a bit of an overkill. It's not a good idea to use the v1 version of the test.
I think this test is still not correct. TestRuleCheckCheck(). It is not a big deal but it is a test of the test.
@normanmaurer I think this is wrong. I'm going to suggest that you change the default length of `Extensions.parse(4, 6)` to `Extensions.parse(4, 6)`.
This is a breaking change. It is an old version of a new version of a function that does a different thing, so it's not really a big deal either way.
Why not use the `tributor` variable?
Since we're not changing the `TCP` field here, can we just remove this assignment and use it directly in the `TCP` field?
I don't think this import is necessary
There's an `::` in this file.
I think this check should be done in `app/lib/base/unitunit/unitunit/unitunit/unitunit.xml` and `app/lib/unitunit/unitunit/unitunit/unitunit/unitunit.xml`.
@jackfrancis I'm not sure if `spec.action` should be a part of the spec?
I think we should remove the `get` and `getQuery` here.
I think it would be better to make the property static and use the new one instead of repeating the existing one.
I think this should return an `region` with an instance of the underlying algorithm. You should also add the return type of the Region.
This should be done in `pkg/api/server/server/test_test.go` and not here.
this file is not used anymore.
This is the fix for the `path` part.
I think we should be able to remove these for now
I'm not sure this is the right way to do this - I'm wondering if we should have a `execut` parameter on the write and have a `exes` parameter on the write. The `write` parameter is the same as `write` and `exes` in `get` so it's easier to understand if it's not there, but I think we should just have a `exes` or something like that, and then use `exes` in the `get` function.
I don't think it matters much, but it's probably better to just have a function that does the output, instead of doing it again again.
Is this a typo?
why not use a `Data` instead.
Why not return 0 instead?
Can we add an extra line after the declarations?
Why is this line added?
cluster should be the same as the api config
I'm not convinced this change is the right way to fix the bug. The number of proposal is not 0. It seems like it should be `whilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhilewhile
I think we can get rid of this line too.
Use `log.startsWith` for the log.
Why was this removed?
Shouldn't the `width` be in the array?
this could be a param
I think it would be better to use a new `simple` property instead of a new `lightbox` class (and a simple `null` one) instead of a new `simple` property.
This is a bit of an unrelated change but the only thing I'm worried about is that the data is in a different way. I think it might be a good idea to add a `@since 5.0.0` to the `SegmentInfos` field and then do the data in the constructor.
I think we can keep the original version 2.7 as the default.
I think this should be `nupic.data.generators`
This is not the only change I have, but it's not clear why we're removing the `and` part here. It's a bit of an unrelated change. I think it's better to just change `and` to `undefined`.
Why are we changing the default value from ``prefixed_userid``, and the ``bob`` path is not needed?
Can you please remove this and the above `mock` above?
I think we don't have a "pkg" in the package anymore.
Why is this needed?
I don't think it's a good idea to add this to the "ISpanContext" command. It's not the case that the span is active scope is the values of the value. It's probably fine, but it's not the case here.
This is the only usage that I'm not sure we should be using NET452 in this file. Can we remove it?
Can you add a note that this is not a problem, when we do the right thing to do with this fix?
I think this should be `find_instance_group_by_url` (the `continue` can be used in multiple places).
I think it is better to use `to | 2` here
I think it would be more clear if this `FormatIsMultiplane` was used to avoid a different `FormatCompatibilityClass` than the previous `FormatIsMultiplane` function.
There's no need to use `CachedAccessor` here, as `leader` is already imported below
I don't think this should be changed.
`selectedItem` is not a class-level class, so this can be `Media`.
EBS is not used anymore, remove
I don't think this belongs in the `ParameterTypeNames` class.
I think we should add a `ISpecProvider` class to this interface and use it in the other `ISpecProvider`.
`afterAction` is a boolean so it can't be `true` by default.
I think we should use `service_lookup` instead of this.
I think it should be defaulted to false.
Is there a reason why the tests were failing?
I'm not sure if this is a good idea, but I think it is worth it to just remove this and have it be a separate pull request.
This will never copy in the first place. It will be worth it to just copy in the first place.
This function is not used anywhere. It's used in the test code, and the file name is used in the test.
@smarterclayton I'm not sure if we should change this to something like `get_si_url`. I'm also fine with this.
Please add the same fix for the other functions.
I would use a `for (auto atom: atoms())` here
I'm surprised we don't use the `config` in the `boolean` here
These are not related to the PR, but I'm not sure how much it is. I'm not sure if it's a good idea to have.
I think we should also update `configRole` to include the template.
This is a good place for this PR. This will be a problem if we don't want the specific `MainThreadAsync` to be set in the `Func<Task>`.
if opt is not a string you can use `.is_a?(String)`
I think this is a bit confusing. What about `saleor.graphql/core/types.py`? What about other templates?
I think we should keep the old version
I think Unit is not required anymore.
why is this in the database?
why did you change this? It's not used anymore, and it's a style thing to do.
This table should be visible only for trades. Also, I think we can move the "cart table" to the top of the file.
I think it's better to be called `DEFAULT_GITHUB_ENDPOINT` instead of `DEFAULT_GITHUB_ENDPOINT`, since that way you don't need to set it every time you call `DEFAULT_GITHUB_ENDPOINT`
I think it would be better if these were added to the `Task` and `capability` attributes, to make sure that they're in the same thread, and the `v` attributes are in the same thread.
I'm not a fan of this test.
I think it would be good to also check for `time.Start(...)` here and below to ensure that the `open` call is not removed.
`listType.count()` is called twice, so I think it should be called here too.
This should not be necessary.
@nmittler - I think this is a bug fix.
Why not just `return None if cls._timeout == socket._GLOBAL_DEFAULT_TIMEOUT else cls._timeout)`?
why change it?
`replace` on this one, not `replace`
`gettranslate` returns a boolean so we can use `isinstance`
Unnecessary empty line detected at block body beginning.
I think it should be `plugins.resolve_files`.
This is a little confusing. What happens when the container is `free` it is `kds`. Is this what we want?
I'm assuming that this line is not part of this PR.
@mjkkirschner do we want to set the size of `actualIntervalLimit / 1.15` here?
Isn't the `options['lazy']` always true? Should we check for that instead of checking for `true`?
I'm not sure if we should use the namespace here.
This should probably be `\A`
I'm not sure if this is a good idea. What do you think?
This is a bit of a weird change to me, I'm not sure how the `errors` will work.
This is a bit unrelated, but it's probably better to use `p->mp_impl->is_null()`?
Why did you remove this?
`Intf` should be renamed to `AddInt`.
This test doesn't work with the ` length of 1s` patch, so I removed it.
I'm not sure if this should be a `config_or_or_config` suffix, but I think we should be able to use it here too.
This is a bit of an odd change.
This file is no longer needed.
Why do we useTrait?
This is a bit weird, why is this needed?
The enum should be the same as the `torch.beat.directory` file, not the `enum` object.
Why is this removed? The problem is that if you remove `ENCFAIL`, you don't want to call `ENCFAIL` in a `sizeof`
I think this is the only change that will break existing tests, right? If so, we should make sure that the default value is false.
This class is not used, right?
This should be `call LoggingConfiguration Reload`
I don't think we need to keep these 3 lines. It makes it more readable.
I think we can remove this.
I think you should also remove this line
this is the same as the line above
This test is no longer needed.
why do you need to add these?
Since we have a different name, we could use `string.value` instead of `enumerable`.
This is a bit of an unrelated change. I'm not sure if this change is correct. I'm not sure what you mean by passing `auto begin` to `RDKit::MOL_SPTR_VECT::const_iterator begin` here.
`Action_ptr` is guaranteed to be an Action. You can use the `Action_ptr ptr = Event_ptr(event)`.
I think it's better to return `bytestring` here, and return `bytestring` in `lib/python/go.go`
I think this should use the same name as the first two lines of `${System\Console\Theme, 'System\Console\Theme'`
Is this test going to pass on a data file? It doesn't seem like a good idea to use that. I don't know how to use this name.
I think `Top` is not the right place for `getMetrics_` here.
I don't think we should use ExternalString, it is just a method. It is better to use the existing method in the constructor of the new one.
This should be a `List<String> path`.
I don't think we should check for `item` here. If we want to check for `null` then this would be fine.
SimplifiedBasicBlock should be renamed
I would add a `@Nullable` annotation here
I think this method can be called ` SparkMicroBatchStreamScan`, since it is now called in the class itself.
I don't think we should be changing behavior here. I think it is better to just use `addConverter` directly.
This is not the right place to put this fixture in this method.
@scheibelp I don't think you need this anymore. We can just remove the shiftgocontroller and just add it to the shiftgocontroller.
This is a change in behaviour - it was just for a while and it was a typo.
@wido I think the `writeCharSequence` function will return `content.array()` if it is `array()`, and it is not `content.array()`.
This should be a constant.
This is a good place to put the go go dep on `goimports`.
We can probably get rid of this timeout now.
I'm not sure we should make a copy of the method to avoid the need of an `@SuppressWarnings("unused")`?
This test should probably be `assert type(j) != dict`.
Why are you adding this here? I don't see why we are adding this here.
This file is not used anymore.
Thisabel isn't really used anywhere
Why are we passing the entire struct to `cloudDNS`? This is the only one that uses `AccountFile`...
I think it's not useful to link link in `Sign in` and not `Sign in`
Why was this removed?
This interface is no longer used, can we remove it?
I think this is not a problem, since the error will be logged even if it is not in `f.quotaUsage.Get(ctx, quotaUsageStaleTolerance)` but I think it should be removed.
Use the new Ruby 1.9 hash syntax.
i think we can move this to `Set['upload']`
Is this change required?
I think this test is not going to pass the correct value to waitUntilAllElected. In fact it will not wait for the time being.
This is the default, but the value is 30000
I don't think this is right. It is a good idea to use the new `ProposalLowestOutput` instead of `Hoodieest`, which is a little bit more obvious
Can this just be removed?
I think we can remove this line. This is not the same as `action.searches`.
I think we can just use `call_*` instead of `""` to avoid the number in the future.
This was a mistake in the main code.
This is not a IApiResponse object, but Iid doesnt have a better name.
I'm not sure if this is the right fix.
This is not a good idea, but it should be a separate commit.
I think we can remove this if statement as it's only used for negative price.
This check is redundant, we don't want to use the `getSSSR` method in the `fetch`
Is this change necessary?
Why did we remove this block?
Why do we need to pass in `pubSub`?
Can we make this configurable? 100 is not needed anymore.
This should be agnostic
This should be a `Sparse inputPattern[i] <=` and not a index.
I think we should use `Match` instead of `testMatch` here.
I think this test was not testing what we are testing?
The reason for removing this is because the root cause was not to be unstable in the root, but the root cause now is to remove the root cause.
This is a bit odd, why are we returning a `err` here?
This is a bit confusing, since `cantChat` may be used as `prefix` in the `schema` table, and it seems like we should be able to remove `Schema schema` from `getOrderOrder()`. If the `cantChat` method is called only from `getOrder()`, we should keep the old `Schema schema = spec.schema()` and remove `cantChat` and `cantChat` methods.
This one is a leftover, please remove it from the use.
Can you also mention that we are adding a lot of places that will be redelivered.
I'm not sure if this is the right fix. It is just a copy/paste from the `ids` table?
This is the wrong way to fix the asset_type.
NotFixTopicCopyBugOption() should be a separate function.
I think we can get rid of these if we do this.
I think it's better to include the other "require \"acl.rb\"\n" and the "include H2O" stuff here. The other "require normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal normal
why remove this? It's not used?
This seems like a good candidate for an explicit way of writing `value` to the variable.
This is not the right place for this. The `RSpec` can be removed if you want to keep the `*args` and `*args` as the default.
I don't see any new name for this new name. Can we have something to think of it?
AFAIK `playbackTicks` is used only once, not when the `currentTime` is called.
`0` and `0bula` seem like a good thing. Should be `1000`, but `0bula` are more consistent with the rest of the codebase.
should we return the error?
I think this should be `datadata.egInterval Duration`
`localization` is required to be added in `plugins` below.
This would be better as `literalSet.stream().anyMatch(...)` and `literalSet.stream().anyMatch(...)`, and you could use `isIn` here
@jridgewell this is the fix. This is not needed.
Is the `h` here necessary? It seems like we're not doing any validation anymore.
Just noticed that the `application-server` property is not set.
This is the only thing that affects the necessary context, but it's not necessary. We can just remove the `.id not in necessary_tasks` part and just use the `necessary_tasks` here.
Nit: please avoid imports by usage by header.
This will be `System.primary` and not `System.bypassDocumentValidation`. It will be called when the `SystemPreference` is created.
I don't think we need the null check. It is only possible when `sourceName` is null.
I think it would be more clear if the block block is not set.
This change is incorrect as it will break the build.
I think this should be `bulk-edit.js`. The `bulk-edit.js` is already in there, so it's probably fine.
I'm not sure if this is the best way to go. I know it was a bit of a hack, but it was a little bit more of a design.
I'm not sure this is the right fix.
This import can no longer be needed.
I think we should call `EXITING_DR()` here instead of adding the `EXITING_DR()` call.
Why was this removed?
Why do we want to allow for 2 seconds?
This will cause issues in the future when running `sdk-system/js-server` from the build system.
Remove this line.
What is the purpose of this change?
Please don't add this include, it should be removed.
Why is this `NewUpgradeTaskJob`?
This should be `sys_get_meminfo`
I think it should be "schema" and "change" and "change" or "schema" to be called when the events is supported.
This method should be called "SequenceNumberForNewDataFiles()" and "SequenceNumberForNewDataFiles()" to avoid the need for the manifest
This line is a bit too long, but I would suggest `1:1.0` instead of `url_name`.
Why is this removed?
Use a guard clause instead of wrapping the code inside a conditional expression.
`@var string` is a boolean and thus a string is not a boolean.
I think this is the wrong place for this. The test is failing because of this.
We should just change this to `record` here.
@deads2k i think this line is needed since we have `downloadProfilePhoto` already?
@danrot @jmhooper this change is good, but it's a good idea to add an `int` array to the type. The `array` type is used to indicate the type of `int` (the type is a string, which is a string) and should probably be a `int[]` type.
(style) Macros with complex values should be enclosed in parentheses
`if tabbed_browser != ""`
Is it possible to avoid this change?
Why not move this into `enable`?
i think we should keep track of if we have a non-signerFlag interface
I think it would be better to log the output here, as the log is not being used.
This is the wrong place for this. The caller should be able to set the `numeric::bad_numeric_cast` to false if boost::text was empty.
This is the only one we use in the `SimpleSimple Storage` folder.
Can you add the `CACHE_ENABLED` variable to the `useCache` variable?
Why are we removing this function?
Maybe use `cmakeZK_HOST`?
I don't think you need to default applicationS here. It is used by default in the application map and the default applicationS should be used by default.
If you don't return any value, then I think it would be better to use `this.countRows()`
strict use `ImageImage.Background_strict`
Is this used somewhere?
Is it possible for this to work with `posix='win' not in sys.platform`?
Why change this one? It's a breaking change, and it's not a scope.
I don't think this should change, but I don't think we need to change the `Controlo ControlPath` to `int` here.
I'm not sure if `shifted_bearing >= 360` is needed here, since it's already in the `style` above
This could be simplified to: `from pylint.reporters.ureports import nodes as variable.`
I think this should be `final`
This will need to be a string.
I think this needs a migration
I think this should be `List<U>` instead of `Function<?<?>`.
`javaCompile.getToolChain()` can be removed as it's now an unused import
This should be `public function fileExists(name):`, I believe the type should be `Boolean`
This is not a valid name. I'd suggest to use `__u8_count_binary`
Is this needed?
@jridgewell I'm not sure why we needed the execute() call here. I don't see why it's here.
why do we need this?
This will cause a lot of tests to fail. The `skip` was the only thing that would cause `root` to get `True` if it's not `True` or `false`.
This needs to be reverted. The edit() method is already called on line 750.
This message should be renamed to log-prot
I'm wondering why you changed the `RWMol` part? It looks like the other way around...
Maybe we should add a `RLock()` method to the `RLock()`?
Is this a bug fix or is it just to get a test to verify that it's being set before the call to `map`?
This is a breaking change. This is a bug. It is not a bug. It is not a problem.
This should be `_on_data_config`
this is not necessary anymore
Why not `serverserver.IsServer()`?
I don't think we should ever call this `hybrid` on the `users` parameter.
This context is not used anywhere else, is it?
This should be `String[] "true"`, not "true" (or "false")
The variable $char is used to set the variable to `true`, but it seems the variable should not be used. The condition should be renamed to $chars[$i + 1] or $char = '';
I think we can remove the `.upcase` method and the `.to_s` method entirely since it's not doing anything useful to do anything in the code.
I'm wondering if it's better to put the variable into the base class instead of passing it directly.
I think we should check for null values here.
You could just use `RuntimeIOException`.
How about just calling the tmImplementation `__name__` instead of the exception?
This is a bit weird, I think it would be better to move the "ForAdditionalLiveTvOptions" logic into the "aggregate" section.
I don't think this is a good idea.
This is not the right place to put this. This will cause the `if` block on the `if` block to fail.
`replace-partitions` (and the other similar instances) should be added to the `super`. The `partitions` is not used anywhere else, so I'd suggest to use `super(tableName, ops);` here.
Why is the O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
I think we should use `with_for_update()` here.
Is this something that should be done in `KubeletExtraArgs`? If not, I'd suggest a `KubeletExtraArgs` property.
I think it would be cleaner to just pass the `bool` to `.,Definition` and then pass it directly in the `definition` method.
This test should be moved to the form's `*` (and not the `export`).
I don't think this should be in the public API.
I think you can use `autosave.get('session-manager');`.
Why `BalanceRecord` and `AccountData` are needed?
I think the `wait` function is no longer needed? (I'm not a fan of the test name)
Why not just 1?
No need for a `.` here
Can we use the same pattern for both the `fe953108-f64c-4166-bb8e-20da7665ba00` and the `fe953108-f64c-4166-bb8e-4166-bb8e-4166-bb8e-900`?
Could you remove `nowarn` from the message?
Is it possible for these to be `nil`, or is there an error you want to do?
Why is the cast to int? Isn't it a bit simpler if we pass a block to `codec`?
can you please add a mock here?
This is not needed anymore.
I think this is a leftover?
Why is thecrypto parameter optional?
Why is this not needed anymore?
@smarterclayton I think we need to keep this for all platforms.
What is this `Onflush` for? It doesn't look like it will be used anywhere.
I'm not sure that this is correct, but I think it would be good to get the test to see whether it's actually testing `pytest.mark.qt_log_ignore()` or `pytest.fixture()`.
Line is too long. [82/80]
I think we should use `slack.Vladers.SlackWebhook` instead of `slack.Vladers.SlackWebhook`
Maybe we should make this a `-1`?
Is there a way to create the cluster cluster for a specific environment (if we have a non-static cluster)? If not, we can add the `.openshift.io/cluster-cluster-` prefix, which will be used by the cluster.
I don't think this is the best place to put it.
This should not be an int? The return type is `string[]`.
This is a change in behavior that will cause a regression.
This is a bit of an odd name. I would have just done `retention`, but I would have just done that in the `src/retention` file.
Shouldn't this be `Error(arg + " + arg, true)`?
tpfp_func is a very high value. It is used in many other places, and is not used in the codebase, so it might be worth to rename it as `tpfp_func` or something like that
I think it would be cleaner to return a `boolean` instead of a `boolean` and use it in the other `try` block. That way it can be used by the `boolean` function.
This function can return an error, since the `func` is not a nil. I think that we should return a nil.
I think we can skip feed creation when the second item is null.
This is a bit confusing, why not just use `allowIncompatibleChanges`?
What is the difference between "System" and `$this->config['APP']`?
Why are we converting this to a struct here? I don't see any use case for this.
I don't think this is the proper name of this option.
I don't think this test is necessary
I don't understand why you change the ` const` to `cms::theme.active` here.
nit, the `find` here is already done above.
This doesn't appear to be comparable, right? I think we should remove the `if unordered` block altogether.
This was a bug, we should be able to use the `go test` for that.
I'm not sure this is correct - if the fact that the `todo` is present is a non-string value, it is not a string value.
this is not needed. if statement, just do in in .NET Core, just use in .NET Core
Is this needed?
I think this is not correct. The input_img is a very specific function, not an `-1`, which is not a boolean. You can use `#show_img` to get the value from `#ifdef torch.from_numpy`
I think we should use `30` as it is a `inputOffset`
This should probably be removed from ccATFORM, right?
@matt-gardner, @smarterclayton I'm confused, why is `c` a typo?
This is a good place to add the task to `len()` instead of `fail`.
I don't think we should change the signature of the method, the `action` argument is unused.
nit: import order
this is not a public method, please remove
@matt-gardner How about adding this to `volume.shouldshouldshould get this from `volume`?
I think we can remove this and the next `spec_spec_spec` action.
This should be `ex`
this is the equivalent of the `if not is_tensor` condition condition above.
Can you add a new line after this `[0] = x]`?
I think we can add a `@private` at the beginning of the method, as it's a stats class.
`if (ann.indexOf('=') || || || || || || || || || || || ||` and `idx` are the same, can you fix the indenting?
I'm wondering if this should be `recording_start` instead of `item.recording_start`?
Why are these being removed?
I'm not sure this is the right approach, but I think it's better to use `java.util.List`
I think this should be `go-ethereum`
hm, this test should be `assertEqual(api_response['Some'], 'content')`, right? `assertDictEqual` is called in many places.
@mrajwa1 @tnozicka do we have a better solution to this? `alloc_buf` doesn't seem to have the same effect. I'm not sure why it's necessary to do it, but I think it would be better to do this with the other changes in this patch.
I'm not sure this is a good thing to do... I don't think it is a good idea to have a `Set` method.
I'm not sure what the correct version is, is that the first character of the version?
This is a bug fix. if `metricsConfiguration.isPushEnabled()` throws an exception, it will be thrown in the case of `if (metricsConfiguration.isPushEnabled()) {`
I think this can be simplified as `self.num_ins < len(self.num_ins) or self.num_ins`
I think it is better to use a `StringUtils.isBlank()`
This should be error, right?
I don't think this is a valid peer type is private. The peer type is private.
I'm not a big fan of adding this. I don't know how to use the `_canonicalRankingNumber` field to determine if it should be used.
loss_normalizer_momentum is 0.9, right?
I think this should be done in `ioctlsocket` instead of the block.
No longer used?
The `tail Probability` is not the right approach here, it should be an instance of `BaseParams`.
I think this needs to be moved into the `index` variable above.
So we're dropping `ImmutableList.Ismodifiable()`?
This was a very bad change. The first part was not correct. It was not the first part of the line.
Can you add a `config.path.join` to the top?
Can we use `Objects.of(version)` here?
This is the only place where we have errors.Wrapf / returns an error.
I think it would be better to move this to the beginning of the ifdef, then you can just change the code in the ifdef to `#include <sched.h>`
This should be `network-audit-results.json` instead of `network-audit-results.json`
why remove this?
I don't think we should import static imports.
`1, 1, 1` ?
why not using a message instead of the actual message?
The changes in this file are not related.
Can we change this to `<html_safe %>`? It's the option for all the classes.
Why is this needed?
This needs to be initialized in the constructor.
I think this should be moved up above the if-statement.
This seems like a breaking change. Can you explain?
why did you add this? I don't see it being used anywhere.
Is it possible to keep the original version 1? I don't see a reason to change it.
I don't know if this is the correct solution. The old code doesn't do it.
I'm not sure if this is a good way to do it, but it doesn't really matter. It seems like it should be a `@current_user ||=` instead.
Please use tabs for indent and tabs for indent.
shouldn't this be the same as the account being closed?
I don't think this needs to be in the `uators` folder
I think we don't have a good way to wait, but I don't think we should be using this.
I think this is not correct. It should be a `protected`
I think it's better to move this package to `updateAPI`
Please add a link to the `Object` annotation.
Is there any specific reason why you moved these lines down?
I don't understand why this is being used
This test is not really testing the right behavior, because the test is still testing the same thing. We need to test the different values.
I don't think the version of this change is necessary, as the `toMillis` function is only called once in `hub.java`, so it's only called when the version is not `hub` and the version is not set
I'm wondering if this should be `p`?
Why is the name removed?
this function should be removed
This is a change in behavior, but I'm not sure if it's worth it to make a PR to fix this, but it might be worth checking if it's actually a good idea to make sure the `organisation-templates` is not a `id` option.
Can we use the `<label>` tag?
It looks like this should happen in the `if (!desktop->views)` block below. The `if (desktop->xcursor_theme != NULL)` block below should be kept, right?
The TopicsFilter should be renamed.
`key == 0` is the same as `key in self.keys[0]`. I think we need to do `key in self.drawn:`
This is a little weird, I think it would be better to do `--windows-windows-901` and just do `--windows-901` instead of just ``.
I think you could remove `json:"CPULimit,omitempty"` from `VCPULimit` and `json:"Memory,omitempty"` if it's not needed.
Is 10 a lot more consistent with the rest of the codebase?
I don't think we should add the new code to the `foreach` method
I think we should add the godoc to the interface
I think we can remove `@author`
This can be simplified to GenericMeta as _GenericAlias
@alalazo I think this is the fix. We should be able to use the `sections` here, but it's the only place that uses it.
I'm not sure if this is the best way to do this. The `reset_reporter` will reset the `reset_filters` if the `reset` is already `configuration.reporter.reset`
why not using `writeIfScalar` in `writeIfScalar`?
This interface has no chance of being used
I think we should be able to use a `reason` message here, because `Causes[0]` is not a `some`. We should use `some` as `reason` and use it as `some` as `some` as `some[0].Message` instead.
Can we make this a `boolean`? I think the method is already defined somewhere in the `setting` package.
Another case of "continue".
Please don't change this to a `HttpHelper` class
This message should be pinned.pin
I'm curious why this is necessary?
This looks like it should have a unit test
Can you explain this change ?
This is an API change, so it doesn't have to be changed.
This should be `__u8`
I think we can keep the test case as well.
I'm not sure if this is correct, as it is, the new test is going to force the reindex, but it will be called once per collection.
Why do you need this?
This method is not used anymore. It should be removed. Bolt::Logger.warn
`t` can be null here.
I think this can be done in a separate PR, but it's not clear what `HeapSnapshot` means and what it is actually used for.
The variable `m_comm`. It is used in a couple of times.
@smarterclayton I think we should probably be more explicit here. In the future we should be using the `supported.go` and `supported.go` to get the wrong impression that the `go` package is the same as the other supported package.
I think this is not needed
I'm not sure what this is supposed to do? The first part of this condition seems to be the same as the second part of the `if (getOperatorType() != REL_UNARY_INSERT)` condition.
This is not needed anymore, we use `glassfish.gmbal`
Trailing whitespace detected.
I think this is a good idea. It should be a separate commit (and not a separate commit)
I'm guessing these changes are unintentional?
I think we should add a check here to avoid making it a warning.
I think this is a breaking change. We should be using the same interface.
I'm not sure this is correct. I don't think it's used anywhere, but it's a bug fix.
I think we should be able to use `opts.DockerfilePath != ""` here, since it is only used in one place.
I think we should be consistent and use the constant here
this migration doesn't need to be in the schema
If the filename was None and returns None, we want to avoid the filename. I'm not sure if it's possible. I think the `return None` here is a good thing.
I think we should start a new config to start a device.
I think we can get rid of this.
I think we should just call `Region()` here, as we're not doing anything with it.
Why `connected` and not `None`? If so, then `None` should be `None`.
`window_args` should be added to the docstring.
@stephentoub do we have any idea why we can't just use the `getNonStreamingMethods` method here?
I think this is not correct
Is there any reason for changing the default value from `zerosProxy` to `shape.size()`? I don't see anything in the rest of the code, but I think the default value should be `zerosProxy` instead of `shape.size()`, so it should be ` Actually, ` Actually, ` Actually`
this is a bit confusing, can we just use the `to_i` constant here?
You should use a `_get_site_kit_VERSION` function here, not a `null` one.
Why is this not `Config\Controller\GraphController`?
I don't think we can set the `depreciated` flag here.
I'm not sure if we want to add a default value here. I would say "destinationPodId" or "destinationPodId"
what's the reason for this?
nit: you can now delete the `)`
I'm not sure if this is a good idea...
This is not correct. You can just use the agent in the constructor.
What is `TraceContext?` used for?
I think this should be `java.io.OutputStreamWriter`
I don't think this is needed, the `String` function is called from `run`
I think this is a bit confusing. Can we have an `ID` or `HasEEID`?
"This field is prohibited" sounds like it should be part of the field, not the field. "prohibited_if" sounds a bit confusing and more "prohibited_unless" sounds a lot. "This field is prohibited" sounds like it is not, and it is not a prohibited from being present, and the field is not prohibited.
nit: remove empty line
Isn't it better to use "QUIC_GO_LOG_LEVEL" ?
I'm not sure if this will work as intended. The `*` in `include/byte` is `*`, not `256`.
this is a bug fix. We should not use the `fingerprint` field in this file, because it is not a valid value (as it is already a `fingerprint` field in the client)
What does `mkString` do here?
this is a very weird place to set the min min. It's a bit of an error when the user doesn't see it. It seems that we should set the min min and then call it once.
I'm not sure this is the right fix for server side?
this is a bit weird, why not just use a `_access`?
I'm not sure what the best way to test is here is to test for the wrong state.
The go-go import is not used anymore, is that intentional?
This test doesn't really pass because the `depts` key is already being set in the test file.
I think you can just remove this line
I'm not sure if we should do something if the name isn't a valid object. What about `example_group_block_spec`?
this should probably be a separate PR, right?
This should be CoreTags.env.
This is not needed.
This should be `preserve_host_output`, since there's no way to check for `host_output`.
I'm wondering if we can get rid of the `getNodeAttributes` call here. I'm not sure if it's necessary to have a test that checks if `node` is false.
This should be `final` and `final`.
I think we should have `s.pssPostHandler` instead of `topic.ws`.
This is a very unfriendly to the PR, but I think the only place where we need to handle `_` is `Key`. I'm not sure if that's a problem.
This is an example of how the test was passing.
I'm curious why you made this change? It seems like it could just be `allowedPostRequest(req)`
I don't think this is necessary. I think we need to do it in a separate PR.
I think we can remove this and make it a `@pylint`
Use 2 (not 1) spaces for indentation.
I don't see any use-case for this, is it?
You should move this to the DEFAULT_BATCH.
This is a very minor detail, but I'm not sure it's a good idea to make this a copy.
This is the only place where we need to check `Buffer.isBuffer(payload)` when there is no 20 20 payload.
I don't think you need to specify `padding` anywhere. We're not going to be using it in the future.
this seems to be the default?
Can you add a `NullPointerException` to the error message so that it can be removed from the file?
I think it's better to just return the `Builder` here and then just do `@param {ie.ServiceBuilder}`
nit: we could just have a single line here.
@JeremyKuhne might want to keep this `public`
I don't think we should change relay here. I would expect it to not have relay copy in the relay.
is this needed?
Metrics/LineLength: Line is too long. [82/80]
remove empty line.
I think it would be better to have a `Simple3_` property in the future, like `aws_sdk_s3`
This is a bit odd, we're just checking the output instead of expecting to be output.
Why did you change the version?
@martint Why do we need to check onchain config here?
The method name `AutoRest` is now unused.
Can you use the `axe` constant?
Why is this file needed? I wouldn't expect it to work unless there is a reason why.
Why not just return tracker.mu.Lock()?
I don't think this should be in the `createRecord` package
Why do we need this?
It's better to use `MainMenuItem[]`.
should we also update the `PrivateProfile` page?
What is the purpose of this change?
This change is not related with the fix, but I'm not sure why it was necessary. It was changed in the first place and the previous code was not needed.
I'm not sure if this is correct but if the `mypy` system has a `acc.mappings`, we don't need to have `mypy` in the `mypy` mode. I'm not sure how `mypy` would work, so I'm not sure if it's necessary to have it be `extra` or `extra` or `extra.New` (which would be the case that there is no `mypy` in the `Dataflow.go`), and I don't think we'll want to have this check at all for now.
Why not just using the volume.VolumeConfig?
This should be `ws:\/\/`. Also, the code should not be able to return `cdp/`. The same could be done for the `else` case above.
This is a little hard to read. Can you add a TODO to remove it?
Why are we making this change?
You can use `.to receive(:send_notification_email).now` here
I don't think this is correct, the `apply` variable should be added to the docstring.
`TabConfig` is already defined as `protected $config;` (I think).
This is the main code that we don't have. The user should be able to run in the `amp-story-user`.
The `setUnsubscribed` function should be called in a single function.
Oops, I think we should have a `NotImplementedError` method that does this. I'm not sure what the best thing is about, but I'm not sure if it's worth it.
This is the fix for #239
I think we can use the `if` statement here.
I think this is not correct, the `failed responses` function will always be called for the ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring ring``
Please don't use spaces in square brackets
I think it is better to make this a `prefQueueTo` instead of `String`.
I'm wondering why this was changed. I'm not sure why this was necessary.
injectionManager is used in a couple of other places
This should be "must not be set" instead of "must not be set".
This is a bit of a weird thing to do. I think it's better if you pass a `idx` to the `tab_url()` method, and then pass that in to `self.tab_url(idx).ifPresent(idx)`
This should be a relative import as the rest of the files are actually not needed.
This is the only place where the digit is being used is.
Can we change this to a `rune`?
I'm not sure this is the right fix. I'm not sure if the `freeze` should be the right thing to do here, but if it doesn't, it should be the right thing to do.
`jav ?>` is a generic name for `dependency`, so it is not a `list`. Also, I think `jav ?>` is a good name.
why not `database capacity: !swarm` ?
Can we make these properties final?
I don't think this is necessary?
Can this be replaced by the include_WIN32 && !_OS_X_VERSION_MIN_REQUIRED where it's defined?
I don't think you want to change this line, since it's not a part of the pull request
I don't think this is right - we want to fail if the resource is no longer a valid value.
This file is not used anymore.
Is this the correct fix? Shouldn't we use the `==` attribute?
Shouldn't we also change the word word?
I think this should be called `Caffe::SetDevice` if it's true.
Why are you adding this? I'm not seeing the other changes below.
I think we should do `and (isinstance(value, str))` instead of `isinstance` because we are checking for the first value in the string.
Why is this being removed?
nit: can we use `ParseNamespacedName` directly here?
This should be `working_dir`
@smarterclayton do you know what this is doing?
Nit: Please remove single blank line. Also, please use tabs instead of tabs.
Is this the same as the id id?
This is the only change that affects TF TF
I'm not sure if we want to use `step_output_handle.step_key` here, but I don't see a usecase for it
This import can be removed.
I think this is a good idea. It's not the best way to do this.
I think we need to use `//    co ROOT: granteeIDID`
I think we should just call this `env.CGO` or `env.env.CGO`
I think we can remove this. It's not needed.
This is a leftover from previous PR
This is not necessary, the test is failing in CI?
I'm not sure if it's a good idea to have a test for that.
Why are we removing this from the API?
I think we can make sure that the `--review-status` flag is always available in case of a status.
This will cause a NPE if the `DefaultResponse` is null.
Should this be `[]`?
Please use `m_additionalSubpassDependencies.insert()` instead.
This is the same as `QUmnt` in `PipelineSetupServer` and it's not just the default, so we don't have to worry about the correct `PipelineSetup` here.
This is a bit confusing to me, but I think it should be `off` not `off`.
I think this is a good time to fix. If `FlowExporter` is set to true, then `featureFlowExportTimeout` should be false.
I'm not sure this is the right place to do this. It's a bit confusing to say "if you have a Scriptve is not a useful one, you have to go back and use it in the other place.
This is a change in behavior, but it's a bit odd.
I don't see where this is used?
This is not correct and can be removed.
should we use `bytes_to_escaped_str` here, or would it be better to use the string representation of the path?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
shouldn't it be if-expressions?
We should use the image version of theImage class as the name.
What is the difference between `s.AWSCluster.Spec.Tags` and `s.AWSCluster.Spec.AdditionalTags`?
Why are we adding this as a Copyright method?
Please add `initUARTClock` to `initPWMClocks()` and `initinitPWMClocks()` to `initinitPWMClock`
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
Can we remove this line if not needed?
Please don't change the variable name. It's not a big deal, but the `iFromPeers` has been the same behavior as before.
I think we should move this to the `oauth2` class instead.
@mfojtik why are we checking for the `nil` here?
I think we can remove the RelaxedReclaimPurge from the struct.
I don't see any new code in using `ethereum`
This is a bug, right? We don't want the default to be True.
I think we should use chain.NewStore() instead of block.NewStore() to be safe.
this will make it easier to read when `filepath.Join` returns `pdsJSON, 0655`. I think we need to change it to `wipeipe`
Does this mean we can't use the same `.data()` for all of our `.data()`?
This is a bit of a nitpick, but I would prefer to use the `currently` constant here, since it's a single line.
Please change to `computed`, ` observation` instead.
I removed this because it's not used anymore, but it's not used anywhere.
this is a change in behavior?
@davidjumani do you know if there is a need for menu here?
This is not needed. `io` is already in there.
1 trailing blank lines detected.
Isn't this redundant? ASIO_DISPOSABLE == 0 means that the next loop will be able to be able to use this same check for the other one.
Is it possible to have a metric that has been set to something like "I'm not sure if we want to use them to avoid any kind of value?
"not written" -> "not written".
This is a breaking change. It should be in `Makeandas`
Why are you removing the CoreChecks from the name?
Why is this public? I think the ` Context` should already be public.
why removing the default_name from the builder?
The `metrics` here is a `schema`, so it is not really a `null`, so it should be `metrics.get(schema, schema)`
I'm curious why you need to check for `g_hip_visible_devices`?
It is not clear to me why `Counter` is here. Wouldn't it be better to use a `*prometheus.Gauge` here instead?
This needs to be added to the `code` below.
Layout/MultilineMethodCallIndentation: Align .find_by with .id on line 29.
I think this can be `public` since it's only used for `getDistributionMode`
nit: `f` -> `tr`
should this be `paginggroup` ?
I think it's better to use `--reupload` instead of `Re-upload all fragments`.
Not sure why this is here, but if it's just for clarity it should be called `Rules                  `, `RulesRules` etc, or `Rules                  ` etc.
This is not right. It should be `mSession.setActive(true)`
I think it would be cleaner to put this limit into a constant in 100ms. This is not a good place.
This is a change in behaviour, but I think we should keep it in the `Int` section.
Is this change related to the change in the PR?
I think it should be removed as well
I think this should be changed to `Twig_Environment`
nit: move to line ~16
I think we should use `opts.generate_hexfloat_in_json` here and below. The `!opts.generate_hexfloat_in_json` check will be more efficient.
I think this should be `App.URL` instead.
I think it is not a parser, but I'm not sure we want to use parserparser in this context. Can you please change the name to "harparser"?
This is the only place it's needed.
I think this should be `findElement(By by)`
I'm not sure this is the right fix, it's just the test right?
`if (!opts.fee) !== 'undefined'` would be better here.
this is the main point of the test. What if I remove it?
Why is this in `pkg/resources/resources`?
Don't you want to use the `ReadVectorSize` in the `geometries_indices` method here?
I think the unused import is unused.
nit: this function can be deleted.
info() is a copy of it, so it should be here.
I'm not sure if this is the right thing to do.
I'm not sure if we should be changing this behavior. I think it would be better if we just use `#ifdef` for the current behavior, but that's a good idea.
if req.GetXattr() >= 0 {
This doesn't work with `nextMedia` if you don't have to, right?
The name should be `@SuppressWarnings("")`
Can we add a `// note that these files are actually not modified after the release?
I think you can replace `findUpVirtual` with `findUp`
What is the rational behind this change?
The existing code was correct. The existing token was only used to set it back to an empty string.
`delegate` is not thread-safe, so this is not correct. `back` will be delegate if delegate is not nil.
Use the `host` variable here instead of the `if` inside the `if` blocks.
Can you remove this line please?
Nit: please sort this alphabetically
This variable was not used anymore, and is now removed.
I think this needs reverting since we're using a partial.
I would use the `Dockerfile` as the name here.
These two lines are unrelated, but I think it's still useful to have them in the `src/server/` directory
splitting this list is useless
@bparees this should have been a separate commit
This is not the only place where we call the function. It's not the case anymore.
This is a little confusing. Why do we have to move the auth code into `certificate.getAuthor()`?
I'm not sure if we should use the `mqtt` package name here
this is wrong, the `Article` variable should not be removed.
@tnozicka this is the type of message. The message should be "format("%s is not supported", type.
I think we should also remove this function. It is used in other places in this file.
I don't understand the reasoning behind `auth_header` here. The only reason we are adding the headers here is that we don't need to have a `django_headers`. Can't we just use `auth_header_id`?
This is the only place I'm using it. If I'm not missing anything, it's not an error. I think it should be moved into the `inTLS` package.
Remove the declaration
This should be done on one line, not on the block start.
This test should be moved to the top of the file, right?
@jackfrancis I think we should move this to a `&&` in line 233. For the message that was not found in the message that we're not actually calling the messageBody.IsEmpty on line 235. This is a bug fix that is why the code is not working. For the case, the messageBody.IsEmpty should be a bug.
This is a leftover from an API break.
This is a breaking change.
This is not the right place for this - the `128` is used in this function.
I don't see the point of this new function being called.
This needs to be `#if MPI`.
this is not needed
Is there a reason this file is not initialized in the `__init__` package, or is it not in `pkg/api/server/register/register.go`?
what's the reasoning for adding this String. It's not much of a race condition?
Shouldn't this be `CertificateRequestReasonApproved == Denied`?
I don't think we need this, we can just check for `!accountID`
I'm not sure if this is the right approach. The default is `alter`, which is not `undefined`. I think we should be able to change this so it can be removed from this pull request.
should be one of the viera rules
This is a breaking change. The `PRIu` is the same as `u` and it will be the same.
I think we can remove this method entirely, it is now always present
why is this change necessary?
This is the only place where we can easily detect the source copies in the same directory.
I don't think this is needed.
This `@product` variable is not used. You can remove it.
Can you add a `, bscMainnetPreverified`?
Looks like this was unrelated to the PR.
Is this the right place for this?
This import should be removed.
Can this be moved to a separate method, so that it is only called once?
This should be in the constructor, not in the constructor, right? `instr_is_scatter()` will return `false`.
the same here, we use `undefined`
I don't see the `LBFargateManifest` method used anywhere, please remove it
Shouldn't we use `vpn` here?
I think the "new" is unnecessary, since the body is already in the `response`
Why are we returning `undefined` here? I don't know if it is the case anymore.
This is the main problem. The `retry` has already been `nil` for a `nil` error, so I removed it.
I think we should add the original one to make sure it's not available.
This is not used anymore, and is required for the new version.
This is the same problem as the `Well-formed` check on line 433.
`<4.12` is not needed. The `ply` is already added to `register_json_query` in the test.
This is a bit odd. I don't think the intent is right, but if it is not, then I would just say `int32(0)`
This is the one line fix.
I think this should be moved into `SyncSetResources` and `SyncSetInstanceFinalizer`.
This is a bug fix.
shouldn't this be `null`?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at method body end.
I'm not sure if this is the best way to fix the else block, since the nullptr isn't going to be used by the else block, but it seems to me the if block is missing here
This should use `verbose` to reduce nesting.
@danrot what do you think about this ?
`base/esp` might be a better name
I think we should add `@SuppressWarnings("unused")` to the docs.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I'm not sure if it is worth it to just remove the pmix_nspace_RELEASE, and remove it from the list. It is a bit odd that you have to call it from here and remove it from the list.
I think we need to remove this test
I think this would be more clear as "call" rather than "array" (and "call" would be a better name).
I don't think this file is used anymore
`foss` is a bit confusing, maybe we could just have a `!is_pe` method that accepts a `foss`?
Why was this added?
The variableInMap is already being used by this method. I'm wondering if we should just not use the `variableInMap` field here and not have it in the `Create` method.
Why not just call this from the finalized index?
I think this is the wrong place for this.
This file needs to be reverted.
Why not use `Parse([]string{"-test.coverprofile", tempCoveragePath()})` ?
This should be const. Language = "dotnet"
can you move this closer to the other place where it's used?
What is the point of this change?
How come the order is changed?
I think it would be better to use the constant `EnableApplicationResponse` rather than the explicit `EnableApplicationResponse`. It's not a big deal but maybe it is worth it.
This should be `if (def != NULL)`
This import is unused.
I think this is the only change that will do here.
Why is the `startDate` constant in the new `date00`? Why not just have the function `date01`?
` BoolParameter` should not be `default=False`, right?
This is the main fix. It's not related to the PR.
This is a change in behavior, but it was not related to this PR, so it was just a bug
I'm not sure why you added the tests here - I don't see where it's used (and it's used in `ncr-layout`), but it's used in `n18f-layout`
This was a bad sign.
This is a little confusing. I would just use `newHashMap()` instead.
It would be better to check for TryGetValue in the slot itself, and check for the slot in the return type.
This will throw an exception if the std::bind fails. This will throw an exception if the std::bind fails.
Why do we want to check for other cases?
We should rename this field `healthcheck`
Is this still needed?
Does SubnetGatewayIPV4 address not exist anymore?
I think this is a bit of overkill. It looks like it can be an `find` instead.
Please use relative imports as we use them everywhere else
I don't see this used anywhere?
I think we should just be testing that the test is not actually testing the actual values.
I think it's a good time to create a shared roles with an underscore, and instead just call `.concat(reason:reason).any(reason)`
This is the main change.
This is a bit unfortunate, but we should be looking for a bit more strict and more explicit.
Why is this necessary?
I don't see any new reason for adding this new parameter?
`GetStream` returns the `null` access. If it's not a `GetStream`, we should use `GetStreamStream`.
nit: Can we use `q` instead of `import operator`?
This should probably be ` neve-yarn-tans` instead, right?
@deads2k @smarterclayton do we need to add this here?
should this be moved to the if below?
This is the fix
This will fail if `version == null` and `version.contains("-ee"))` will be null.
This is a bit of overkill. I think it might be better to use `*` instead of `str` here.
This file should be reverted.
I think it would be better to have a task for `copilot-task` and `copilot-task` (or something similar) and pass the task to the `latest` object. It would be more consistent and easier to follow.
I don't think we want to support `<value>`, `<value>` as the value is `<string>`
This should be changed to `0, 0` as well.
I think this can also be moved to `strncasecmp()` if it is not needed.
We should probably add a `else` clause here to prevent the error handling.
I think you forgot the `issubtype` method here
Is this the correct place to use this? If so, we should just use a `checks` here.
This needs to be added to the `XOR` function as it's a different approach. The `VOLTA70` needs to be set to the current value, not the current value, not the current value.
I don't see any new tests for this file?
This is not the right place to put it in the if block?
I think this is a good time ago
this is the wrong file
I'm wondering if we should only be setting the API in the config file. I don't think this is a good idea.
I think it would be better to use a different name for this one, rather than the current one.
Shouldn't we also add an `omitempty` field in the `json` type?
Can this be refactored into a common function?
I think we can drop this file. We don't have a aspects anymore.
I'm not sure if this should be a `os.path.dirname` or a `os.path.abspath`?
I think this should be `this.wineEnginesPath`
I don't think this is the right fix. It should be in a separate PR.
Can we change this to "EVM Network ID" ?
Is there a reason for not using the `<T>` here?
I don't think this is correct. The `salesforce.androidsdk.getInstance()` will return `True` and the default value is `True` if the regular device is not `false`.
You can just use `DEFAULT_REVISION = !DEFAULT_REVISION` here, right?
This is called from a login, which means the login is created. I don't think this is correct.
This should be done with `this.focusElement_('noteTextViewer')`
nit: import order
is this the only version that works for a while?
I don't see the point of this if we can avoid the `/` or `/string` since we're using `continue` to get the correct key.
I'm not sure if this is the best way to go
How about `RetryForever ACMESelfCheckFailurePolicy`?
I think the `ot` should not be here.
Is it always going to be a singlekey?
This should be just a static void
This is not right, you can pass `priority uint16` to `arsPriority` and just use `arsPriority` instead of `arsPriority` to avoid the need for the extra variable.
I think it is better to keep this packged and packaged described in the future, since the unresolved is already generated in the `.go` file and it's a separate file.
Please remove this file.
This is the only place I'm going to add. I'm not sure why this isn't a valid user's configuration, so I'm not sure what the best way to go is, just wondering if this is a good idea.
I think this is a bit confusing. The `btc` is a `Read`. The `testnet` is a `Read` that is a `btc` of the `read` that is a `Read` of the `WriteValue`. The `testnet` field is a `btc` that isn't a `btc`. So the `network` is not the only `testnet` field and will be a `Read`. So the `btc` should be removed.
remove the `fmt` import
Is it possible for this to be an enum? It's not a number.
This feels a bit odd... why not just do `_target.destroy(persist: true)`?
I'm not really happy with the change. The `torch.c` import is used by `torch.c`.
I think we can just return `nil` instead of `Instance` here.
shouldnt this be `'complete'` for consistency?
Is it worth it to use `admin_session_required` here instead?
I think this was a bug, we can't use a default value here.
`hashHash` is not a `hashhashHash`, so I would remove the `hashHash` parameter from here.
This file doesn't seem to be used anymore.
Is there a reason this is not `!= threads;`?
I think we should use `String.Range`.
this test doesn't work any more. We should probably have a test that fails to test the output of the `if node != 'don't' {`
I don't think this is the right place to put it on the `secondary_info` interface.
The clear call here should be removed.
This should be a warning.
I think the name `<Return>'>` is not very descriptive, because it is a simple name, and it makes it sound like it will only be used by the `<Return>'>'>`
Could you please add a `use_url(src, dst)` to ensure that the data type is the same as `icmpType`? I think the only reason this is `1, 0, 1, 0, 2` is the more common term.
This is a breaking change - it's just a breaking change. It's not a problem, but if we ever want to make it a breaking change we should be able to make it a `Initialize`.
Why do we need to check the settings?
Can we make the same change as the above one?
@d bytes and %.2f megabytes are the same? I don't think it's worth it to create the db.capacity.
could you please add a check that node.textContent is not null and we use it in node.getAttribute('alt'); in the future?
I don't think this is the right fix.
I think this is the only change that will break existing models. We should probably check if there are any fileBytes and not the ones that are in the config file.
This should be called `updateLibrary`.
I don't think this is right. We don't have a default value for the `published` object, so we should be able to handle that case.
Is this a typo?
I think you should also check that the Tracer was initialized at a time when the Tracer was initialized.
This will fail in `Lolis_JsonRpcError`. Is it correct?
This function is only used in the tests. Could it not be moved to `Admin::getAmpDoc`?
This should be removed.
I think we should also check for `create_lambda_function`
This is a change in behavior, right?
Why not just do `if (skewFromParent != null && skewFromParent)) {`?
spire mocking entry should be mocked as well. I don't think it's a good idea to mock mocked since we are using the mocking
This is a bit confusing. It looks like the `RunQuery` function calls `go fmt` on the same line as the one above.
I don't think we need to add this type. Just use `report.get()`?
I'm not sure why we are removing the class name. It is a good idea to add the `TODO` class name.
I would prefer if these were done in a separate patch, instead of in the PR description. It's a little confusing because they're not really part of the actual actual code.
I'm wondering if we should have a test that checks for the hot at the same time?
I think we should just use `unflushedPaths` here. It's not clear what the cache is and what the next one is.
The monitor should be created before the actual actual monitor is merged, right? So why is it necessary to create the actual monitor from the other functions?
Thanks for this! I was thinking we should use the `logging.LogRecord.wait_connection` helper for this.
I don't think this is necessary
This one can be changed as part of this PR, but we can also delete the unlink one too.
This function doesn't seem like it's related to this PR, but I'm wondering if it makes sense to have it return `nil` instead of `func` here?
Metrics/LineLength: Line is too long. [81/80]
I think it is better to set the `RestProducerInvocation` variable here.
I don't see where this check should be, but I don't see why this check is needed. The `projectJsonPath` should be removed if it is already in the first place.
I think you need to do this in a try/catch and assign it in the ifdef.
This should be done by the `wlr_input_destroy_tablet` function.
this is not a supported method, please remove
I'm not sure if `props.children.forEach()` is the best place for this.
I'd prefer `--mode=('build', 'system')`.
I think this is not needed, we can just remove it
I'm not sure if it's possible to have a `defer false` here, but that's the case.
This change seems unrelated to the PR?
This method is not required. It can be just `return {`
I think we don't need to put `proposal` in the `delete` method.
"If the provided key is none" -> "If the key is none"
I think it would be more convenient to use a `boolean` for this.
I think this can be removed
This looks like an oversight.
I think it would be better to use `TimeUnit.secretsecret` instead of `len()` here.
This should be just "blazer"
What is the reason to change the name of the ActivitySampler?
This will not work for any kind of customary. The only thing I'm not sure is that we should just set `headers.Set`.
I think this is not needed. A PMD is already in the name.
Can we remove this line?
Does it make sense to also add this on the `scipy` interface? It's used in many places, but it's not a huge deal either way.
I would put `storage` under `VarateDelete`
why is this public?
type types should be type object
The name `T` is misleading. It is a bit confusing. How about `<T>`?
I think we can remove this.
I don't think we should add `enumerable` to this file. The `initiator` method is called `connection`, not `connection`.
I think this is still a good idea. I can't see any usage of it in this PR.
I think we should be able to use this. If we want to do this we can also add a `*` to the `*` list above to make sure it is only used once.
this is a bit weird, I think it should be: `min_bound === null && $this->max_bound >= $i)`
do we really need 2014? I don't see any benefit to using it for this PR
What about only one `tail_`?
@deads2k do we want to change the `Delete` here?
Line is too long. [91/80]
I'm not sure why this change is necessary?
I think we can keep the `preserve_hosts` variable and `never` values (and `never`). That way, if we do the same in `isinstance` we will get the same value from `never`, and we will also need to handle the `[0]`.
Shouldn't we use the `.to` here too?
This is the wrong place for this. You should just be able to use `.to.be.calledThrice` here.
This should be called `_has_editable_prop` (or similarly `_is_editable`).
I'm not sure why this was added.
Is it necessary that the job has been started with a timeout here?
This test was incorrect. It is 1 minute which is not the case anymore.
This line should be indented one space between if and the opening parenthesis
This is not related to Jack, but I'm not sure it's a good idea to add the `TODO` here to this file.
This is the only one that uses it.
This class has no effect. It's not a blocker, and it's not a blocker.
why is this needed? it looks like it should be the default in the `start()` method
I think we should keep the old method for this and keep the old one as well.
I think this needs to be added to the list for the list as well.
I think we can just remove this if it's a folder.
`from rdkit import Chem`
I think we should do this after `pxz.wait()`.
I'm curious why this change was changed.
This change is not needed. `sortByColumn` is a parameter that was removed.
This line is the same as the one above (here and in other files)
Revert this change
shouldn't we check for null here?
This should be `long`.
This is the only change I would suggest to split this into two separate commits, to make it easier to track the number of changes in the future. I think we should be able to just do a `Substring(3, 0)` and then use the `str` to get the value of the string.
This should be split across multiple lines.
The Copyright (C) is changed to match the copyright year in the copyright year in the near future. So the copyright year is the copyright year, so it should be the copyright year.
I don't think it is necessary to re-cached it, since it's not a dependency
Shouldn't this be a pointer too? Otherwise we will be able to get rid of the `if` condition.
Is there a better place for this? It's not a big issue but it should be just a single `Dimensionps::policy`
I don't think you need to cast to string, as it is a valid option.
This should be changed in the `SEMANTIC_` package.
I think we can just return `c.Data["IsApiToken"]` here, and remove the return value if it is true.
I think it would be better if `||` would be a `&&`.
I think we can remove this line.
This is the conf that we're using in this function
This should probably be `<T>.<T>.<T, string>`.
These are not in the same package.
Is there any chance that PrivateKey._getRandomBN() will always be true?
I think it would be better if we just use `===` rather than `if`.
I think it would be cleaner to just have the `and only those fields in the field mask` and then use that in the field directly.
this is a public method
I think it is better to move the `if` to the top, then you could use `===` instead
This will be removed in a few other places as well. We still want to keep the eventing imports in the main package.
I think we should still keep `operation string` here, as we are not going to use it anywhere else. We can just remove it.
This is not correct, the "127.0.0.1.0.1" is not a valid default.
This is a change in behavior, but I think we should change this to a `typeMap` in `NewInvalidArgument` instead
This is not the only way that we have to support DefaultInitParams but I don't have a huge impact on the default behavior. This should also be fixed in the tests.
Please add a blank line between tags and summary for better readability
I think this should be done only when `true` and `false` is true.
Is this change intended?
Do we really need to set the `searchengines` and `Query` at all? If not, we can use `config.val.url.searchengines.keys` instead.
Why are these being removed? The only reason we don't use them is to avoid the "void" part of the code base.
I would suggest `LCLCizationization` and `Observation` to be consistent.
This is the bug fix.
This is a bit of an unrelated but I'm not sure it's worth adding a new one.
This file is now removed from std::chrono.h
Shouldn't we use the attribute name?
Please don't add this include in the changelog
nit: this constructor is not needed. `this` is already defined in `onModel`.
What happens if we update the `StateReader` method with the `Reader` state?
nit, I would put it in `it`
So, we are testing the diff data and not the data?
should we add a check that the user has the1000 before doing this?
This is the change that fixes the issue. It's an issue that the span was recording events.
I don't see the reason to change this method to `configuration`.
Is this a debug message?
why are we removing the `inf` here?
I think we can just use `s.getANewTag` to get the `default` value from the API.
How does the rollbackTraffic get called twice?
Can we use a constant here?
I'm not sure this should be zkDynamicConfig.getServers().stream()?
Can you add the `using System` above this so that the `MessagePack` is still needed?
@jridgewell Is this change necessary?
Is it a valid file or a `build_defs` file?
This was just wrong, we were not using PandasLikeIndex
The `subnets` tag should be added to the subnets in the DB.
I think we can remove this and use cn-northwest-1. And we can change it in another PR.
This test is now testing that the correctaky is testing is testing.
`@activity` is a good place to add this. It should be `@activity_url` or `@activity_url`
This is not the right place to put this. It should only be used if Puppet is true.
I think this should be a new one.
This is the fix, right?
Is there a way to get the `getDisabledMetricAttributes` from the `disabled` class?
I think it would be better if we could return an error here.
this is the one place where the `done` is called. I don't see why we need the `this.close` call here
I think we should keep this in `fs.debug` and make it a `rclone` type.
I think we can drop the `# noqa` here. The alternative is to use `clamp` instead of `prob` as the default.
Why is the `TODO` needed?
@wido the reordered is the only place this was called with a `subsurface->reordered = true` check.
I think this one is wrong
I think this test should be removed, right? If it's only used in tests, should we also set `AsUserOrTeam` to false if it's not there?
Can you remove this line?
This method was only used by one place in the tests, so I just removed it.
`throw new Error(message);` would be better
What is the purpose of this change? It seems a little strange to me, but it seems like a very small thing to do.
Why not just `mock(DefaultOAuth2UserService.class)`
This will break the build time.
Can we make it more specific? `queryID` or `table_ID`? I think it's a little confusing to have the query ID, but the value would be more consistent with the name `public`.
I think this should be `which does not match the configured trust domain of '%v'. The `a` entry should be used instead.
I don't see any tests for this change?
I don't think you need to add this test.
Why do we want to set the size of 7?
I think the `value ]` is still a good name. It should be `DoFn`.
Can we use `use` instead of `use_sort_order`?
I think we can just `import initialState,`
Shouldn't this be `Teacher.joins(:video)`?
we don't want to add this to the `awsRequestID` base class, right?
I think this would be a breaking change as the tests are now passing. The `tests` is not used anymore.
This is a breaking change.
This should have a `validate` method that returns a `link` (which is a `has` method, not an `lower`).
I think you could just return `nil`, otherwise this will fail.
I think this is the only thing that should be done with the `/session` command.
I think it would be better if we just test for the deprecation deprecation and then check if we're not in the actual actual app.
Should we be using the existing constant for this?
This change is not correct. The previous code was not match.
This is not the right way to fix it. I think it's a good idea to do it in a separate PR.
Thanks for this! I think it would make more sense to keep the `W3CB` as a param.
I'm not sure if the method name is necessary. If it's the same as the method, it's the same as the method, so it should be renamed to `return !isNot caCert(..)` or something similar.
I'm not sure if this is the right way to go
This is a private function.
This should be `protected $clones`.
This is the main change.
I think we can just call `Get` here, and use `RefreshAndGet()` instead. The `Get` is not a good name for the `JSON` parameter.
I think you can remove this line
I don't see the point to this method being called anywhere.
Why not just make this a `identifier`?
Block has too many lines. [39/25]
Is there a specific reason why we didn't add this in `__init__`?
This is a bit confusing... why not just `_notebook = []`? It seems like it should be a single-line notebook, not an `__call__`
This is not a good example of why the db was deleted.
This change seems unrelated. I don't think it's needed, since `fullpath` is used in the `BaseElement` function.
Can we add a TODO to move this to a separate file? I think this will make it easier to debug.
I don't see this being used anywhere.
Redundant `self` detected.
I'm not sure why this change is necessary. I think it is not needed.
This will not work for anyone who has changed the behavior. You should not modify the `_spectra` function.
This will cause the client to be updated as the timeout will not be executed for every request.
This should probably be in an enum
This is not a good change, we should be able to just remove this one
I think it is better to just remove this file and the other changes in this file as well.
This is the only place where we need this. You should be able to do `if isinstance(ip6,Net6):`
This is a bit weird, I would just return `null` here. I would expect that we would return the function that returns the result of `update` and return `false`.
Is this really necessary? If it is only for tmpOutput, then why not just set it to ` basePath`?
This is a test, not a great start. The test is that `430 == 0`.
This is not right. We're losing a `h.h.Write(p)` twice, so we're trying to write a `h.h.Write(p)` that was previously logged before, but the Write() call was not being used.
@chirimoya Is this what you mean? This is the only place I'm asking.
We have to add this to the factory, so I think we'll have to add it in the future.
This should be added to the `DOMode` class as it is not supported in the `MNE_MNE`.
@matt-gardner, @smarterclayton do you have any concerns about the other changes?
Why not just return empty?
The binary binary dumps is not a binary binary
I think it's better to move these `controller.go` and `cluster.go` to the `AddBackoff` API, since they're all the way down to the `AddBackoff` API
I think it is better to just pass the `_settings` as a property instead of static, since it's a static property and it's a static property. The only thing I don't know is if the property is static, but it is a static field and is a property. The only thing I don't see this method is being used is in the `IRunner` and it is a static property in the `IRunner` class is not a static method.
can we use `f.metadata['websocket']` to avoid the NPE?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
why is there a alias here? should it be just `bytes('model')`
This method should not have anything to do with `GetMetricPointsAccessor`, so it should not be in the base class as it is used in other places.
Do we really need this? I think the default should be `true`
This file should be moved to the `net/http` package.
This will fail in the test, as we are not running the checkpoint in the DB. We should try to avoid the schema.
This is a bug in v2.
I think this is the wrong place to put the test. I think it's fine to just ignore the `deliveries.clear` here.
Should this be removed?
this file should be removed
I think this is a leftover?
I think this should be `runtime_type=DataFrame`
I think it's not clear what start/selection are, but it might be a little bit more efficient to just say "is anchored at the start"
Remove empty line.
It looks like this is the default "privacyMode" - it should be "language" or "privacyMode"
I'm not sure this change is correct. It is not a problem, but it seems like we are not doing anything with the `.name` at all.
I don't understand this one. It is actually a separate commit. It's not related to the PR.
I think it would be better to use a `spack info` and `client-go/` here, as that's what we use in other places.
should we make the existence of 200?
Can you remove the file too?
Why is this `std::uint64_t` needed?
why is this removed?
I don't think this will work. The S3 API is the same for S3 and the S3-64. The S3-64 should be the same for all the S3-64. The S3-64 should be in a different PR.
do we want to add a check here?
`stdint.h` and `stdbool.h` should go away.
@wachterjohannes Isn't it better to search searchScope at this point?
I think it's good to add a `RefreshAuthToken` function that will be called in the `init` function. We could also add this there as well.
Is this the correct fix?
I think this method should be called from somewhere else. The public constructor should not be used in any case.
This field is reeds aangeheg.
I think this import is not needed. In fact, you can import `org.shredzone.flattr4j.model.User` without `shredzone.flattr4j.model.User`. The same applies to other classes.
Is this the right way to do this? It looks like you can just pass the `Build` variable directly to `String`
This test should be updated as well.
I think it's safe to remove this?
I'm wondering if it makes sense to have a test that checks if the transport->transport is an object (max object) and not the g_value_dup_object (max object)
Since we have a `Status` property, do we still need this `ChaosStatus.Experiment.Phase`?
Why are we adding this here?
I think it is not needed here.
This is the fix for the fix in #5040
`replace()` is a better arg to say `e` in `self._obj.start`
Should we use `LoadGroupMembersPipeline` instead?
Why not use a `name` name?
I think this method should be private and not private. The `private` should be private, and `uninitialized` should only be used for the `SystemHandler` class (or any class that does it).
why is this not needed anymore?
This should be `static`. Same for `isNotImplemented`.
I think the default is 0.2.0
This method is not used anywhere.
This is not a good candidate for the same method.
This is not needed since the `T` can be removed.
This should be removed.
I don't think that this is correct. TRUE is a singleton name. The parameter is a singleton name, not the parameter itself.
Why do we have a `TaskArn` in the `DefaultTask` and not just the `te`?
This is a little weird. Why are we not using `ConfigFor(interface{})`? I'm not sure if it's the right thing to do, but it seems that we should not do it in the `Plugin` package. I think we can just do it as a `ConfigFor(interface{})` and then we should do it in the `PluginConfig` and use the `interface` function in the Config struct, since that is what we want.
I think we should use `JSON_request`.
This isn't correct. It's the only place where `ConcurrentConvention()` returns a `ConcurrentConvention`. I think it's the best idea to call this `ConcurrentConvention()` instead of `ConcurrentConvention()` in the `ConcurrentConvention()` method.
I'm not sure if this function is used anymore.
This is the only place where I'm seeing `and` in the `if` statement. I'd prefer `and` not `and` here.
Is this correct?
This should be a constant.
Use the new Ruby 1.9 hash syntax.
What's this for? Is it a version string or just a version string?
I think we can get rid of the assertEquals call here as well.
why was it changed? it seems like the function is only used for `os.makedirs` and it was not used for `os.makedirs`
I would prefer to see this as a static final field, to avoid having the revision defined in the KIE configuration
I would use a list of ixawesome5_icon_mixin.
I'm not sure if this is a good idea, we can just remove weight, and weight_(1)
I think this should be a single line string.
This seems like a weird pattern to me. Maybe we should check for the temporary directory and not just use the `master` user? I'm not sure how to get the user to the temporary directory.
I don't think we should use upload in this package, it's a lot better if we don't do it for other packages
I would use `wx.Dialog`
I think this will be more readable if you pass in an empty trace and then pass in the function that you get here.
This will cause NPE
I think this needs to be a AuthFree flag instead.
I think this is not the right place to put this code. This is a very minor thing and not a part of the public API. The reason I have to do this is that the API is not written in the `if` statement.
This class does not contain tests, right? It's not used anywhere, and it's not used anywhere else.
Looks like you can just change `params` to ` params_for_search`.
This should probably be added to the new `ovs` file.
Why are these two lines changed?
I don't think this is right. I think it should be non-nullable.
This interface is only used in the UI, not the interface itself.
Why was this removed?
I think you can just use `ValueFormatter` here, and use it directly.
I think this should be `axis`
Can you add a newline to the end of this line to make it easier to read?
This update is not needed.
Is this a typo? It seems like we should be checking if span is null.
I think it is still not needed anymore
This method is called in `FSFSMethod` which means we should not be checking if the method is not called in the constructor.
I think this will cause a warning if the number of 250 was `ENOTEMPTY == 2` and the number of 250 were `ENOTEMPTY == 3`.
why is this try/catch? it seems like we are catching an exception here?
Why is this `nil`? Shouldn't we be setting `true` in the `s`?
I think you should use `Ember` instead
Why is this changed?
I'm surprised this isn't a problem before...
Why do we have to set this to 0?
The code below is not correct. The code below is not correct because `blockBytes` will be `null` if it's not a `list`.
This function is only called when `attached_listener_mutex` is provided.
this should be `on_mode_left`
I think this test is not testing what we are testing in tests. We are not going to be missing a test for this test, but we should probably fix this in a separate PR
Is this needed?
Same here, I think we should use `<tr>` instead.
I'm not sure what the best way to do this is. The problem is with the `+ i` and `+ (i)` is that we're using `+` on the `token`.
I'm not sure about the reasoning behind the `d[:possible]` since `no_docstring_rgx` is a painful of chars. I'd rather we have an assert here that `d[:possible]` doesn't match.
I think it's better to keep the old behavior, as it is done in a separate pull request
This is the only change I found in this file. Can we use `describe()` instead?
Why not use `LOG(ERROR)` here?
Please add a `use` statement.
I think this log should be moved to a log level.
This is the same issue as above. In the case of an empty DateTime is set, it means that the DateTime is not set.
@tnozicka I'm removing this because we're using footerText in the code base, so I removed it from the `Grid` component. I don't think it's necessary to do this, but it seems like we could just remove this component altogether.
I'm not sure we need to make these methods configurable. I think we need to make them public.
This change seems unrelated, I'm not sure why we need to do this.
why is it possible to add this to the `*byte` struct?
This is not a valid parameter but I'm not sure it is worth it to just say `transpose = param.Boolean(self.secret_value)`
Maybe `drive-use-created-date`?
I think we should use `def update_hyperparameters(self, eps=1e-15):` here and below.
What's the difference between `NewMasterIndex()` and `idx()` here?
This is the only change that affects TF providers.
What about the `.uniq.sort(&:name)` case? That way the other occurrences can be removed from the list and the other one can still use the existing ones.
Why do we need to count the aptr->count here?
I'm curious if this is the correct place to put the `if defined?(Mongo::QueryCache.cache_table)` part in the if statement?
you can just put `funder_id` in the model, it's a constant
This is a change in behavior, but it's a good thing to fix. Can we fix it in a follow up PR?
This is not a good idea. It should be `id` instead of `id` (or maybe even `id`)
This should be done in a `return` statement.
I think you can remove this?
I'd rather we add a new constructor to this interface.
is this the only usage of the loop where the loop is being used?
Maybe we could add a link to the payment channel?
This is the main test that works.
Maybe we could just use `info` here.
Why not just use a `LogEventLevel` type?
`rand.rand` is now unused. Can we remove it?
This should be `use Shopsys\FrameworkBundle\Component\Environment;` instead of `Config\Environment`.
Since `pendingRequest.configuration.remoteHost` is always undefined, we could just change `pendingRequest.configuration.remoteHost` to `pendingRequest.configuration.remoteHost` and `pendingRequest.configuration.remoteHost` to be consistent with the other places.
This is a bug, we don't need to handle the error.
This is an example of how the plugins can be set.
Is this needed?
It looks like we're using `op` for this, but I'm not sure we can make it a string here?
This should be a separate PR.
This is not the case, we should just add `s.postageTopUpHandler` to the post.
I think it would be better to keep the full full error message (and the internal one) that is meant for this function to be a internal function. It's not clear what this function is used for, but it's not really a internal error.
This is a change in behavior. It's not related to this pr ... but it's a bit unrelated to this PR.
Why is this here?
Why change it to RamUsageTester ?
Shouldn't we add a TODO to remove?
I think we need to use `1` here too, right?
should this have `null: false`?
I don't think this is used anywhere
The class name should be renamed
I don't think we should be passing null here. It is a valid value.
I think we should use a more specific type here
I think we should add `refresh_token` to the end of all refresh connections.
This should be `clean_MIN_NAME` or `clean_MIN_NAME` (or similar) as in the other PR, as we do for cleanup.
This should be set to `true` in `server.py`
I'm not sure how to get Dataverse from these changes.
Ah I missed this, it's not related to this PR, but it's a good thing to keep.
This was the only change that was not needed, and was not being removed.
I think we need to keep track of the `config read from local` variable.
while `//build !cgo` is added here, do we need to define the `.build` file at all?
this error message is confusing, as there is no actual error message. I'm not sure how to test this.
This should be `True`
This is not used anywhere.
We can remove this and just do a `String`
I think this should be `<binary>`
Import packages with `package.parameter`, should be renamed.
should this be a `project_name` column?
I think we need to add `false` here, as the only thing we can set is `true`.
This is a little weird, we're not going to have to call ExternalToolHandler.getDefaultFile() twice, because it will be null if it's not a file and the ExternalToolHandler is null. So, we should just set ExternalToolHandler.getDefaultFile() in the ExternalToolHandler and do the check if it is not there and if it is not there, we should check if the ExternalToolHandler is null.
You don't need this. There is already `LocalPrefs` in the `Task`
If it's a `Supports` object, it's a `Supports` object, and the test would fail.
Please make it `_HIP_PLATFORM clang` instead of `schema`.
This can be `object` since it is not used.
This is a private constant so it can be removed
I'm not sure this is a good idea, but if we have the config for the chain, we should throw an exception rather than just the default exception.
I'm not sure this is correct, if the cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster cluster
Missing space around string interpolation detected.
This is an API breaking change
Please remove this
This file doesn't have to change
Doesn't this mean we have an catalog name in a non-nullable name?
This should probably be `.VersionAsString()`
It would be helpful to check whether the error happens in `SSL_peek`.
This file is not used.
I think it would be better if we could use a `Transaction()` function to avoid the `Transaction()` function.
Nit: update copyright year in header
The `<` should be `< 0`. Also the `< 0` should be on the next line.
I think we should just pass the Exception to the `RejectRequest`.
This line is the same as `videoAudioCodecs.push('web0s')` above.
This is a good idea. It's not a function. It should be called `return hipError_get_API()` or something like that.
Can you use `string?array()`, as the parameter?
This should be debug_output, not debug_output.
I'm wondering if it wouldn't make sense to move the `if config.registry.statsd.get('listeners.history')` to the `if config.registry.statsd.set(plugins.history, "path")` check and use that here instead of hard coding it.
I don't think we want this to be `@team_page?` instead of `if isinstance(@team_page.present?)` since it's only used in the `if isinstance(@team_page)`
This is the fix, right? Can we do a Next and initialize the values in the `Decrypting`?
this is probably a good place to test for the case where `hypervisor` is nil.
I think this should not be setuptools.
`_` instead of `_`? `configConnectionManager`
This seems to be a no-op?
This should be `Unwrap` and `Unwrap` (or `Unwrap`) to avoid the duplication with the other types of `Unwrap` (or `Unwrap` and `Bytes`).
This is a bug fix.
Can you also update the `a4adc8f4da9c7ec0e` file as well?
you should also add the `require` above the `Constants`
I'd rather have a test that checks for `assert('basicauth', 'Exporter_json['capabilities']))`
I think it's better to just use `mTask.emitContainerEvent()` here.
Could you add a `TODO(data-*-path)` here?
We should remove the `JOB_ID` parameter from the constructor. We can remove the method from the constructor.
I think this should be a different setting
I don't think we should add this to the public method.
`fullSynchronization` can be `null` if `fullSynchronized` is `null`, right?
I don't think this is correct. The previous code was not able to handle this.
Can we just use the `container-cont-status` constant here?
I think this import is unused.
I think this is not needed.
This is the one we have in tests.
This is a bug fix.
I don't think we need this. The `unless excluded_portal_link` option should already be in the `validate_one_in_compact` table.
I don't think this is correct, it's not a problem, it's a `.`
`afaics.Tra)/` is the correct value for all of these tests. I think we should just check if `props.defaultValue` has `Ani|Tra)/`
I think this should be `else if`
MDC is not used, please remove it
This should be `HistoricDetailDetail`
Why is this being removed?
Why do we need to change this import? The reason is that `createMetadataTableInstance` was only used for static imports is static, so it should be static, not static imports.
I think the pylint is not required here, we can remove it from this PR.
I think we should just add `delegate` to the `map` method. It's not a pattern we need to do in this PR, but we should probably add `delegate` here to the `purchaseable` method.
I'm not sure this is a good idea.
Is there a test for the remote files that can be updated?
I think this is a bug fix.
I think it would be better to use the `CreateMessageDirect` method instead of the hardcoded `bootstrap` here. It might also make sense to have a `CreateMessageDirect` method that takes the `CreateMessageDirect` as parameter, and then just call `CreateMessageDirect()` in the `CreateMessageDirect` method.
Should be `ReflectionFunction::getReturnType()`
I would use `getModifiedModified` here, as it is not really needed.
I think we should keep the original implementation in `GONE`.
I think it's better to just remove the TODO?
I think the indent is off here.
Why did you remove the vm?
I think this is the wrong approach, because it is the same as `len(p)-5)` and it is the same as `<H` because it is a `int`.
Why do you need these changes?
This was a bug, now it is no longer needed.
I think this test is redundant.
nit: `The BASEFEE of this header` ?
nit: remove the extra lines
I think we need a better description of what we're trying to do here.
Is the `||` check intentional here? The `||` part seems like a good idea. The condition should be `||` instead of `||`? I think the `||` part is fine for me.
Use `std::size_t` instead of `std::size_t`?
I think this should use `nonzero` instead of `cls` since it's a `cls`.
`Uri` -> `Uri`
this should be debug or debug?
I think we should use the same logic in `copilot/.workspace.js` and `copilot/.workspace`. The reason is that the copilot directory is not set in init creates an copilot directory, which means the user can't set this file. This is because we want the copilot directory to be set to the same file as the `copilot/.workspace` directory.
Can we remove these `trails` and `Type:` from these attributes? I think they are used in the same `options`
I'm a little concerned about this change. If you are going to keep this for Sabre, I think this should go in the next PR.
This could be a `Stop` function, no need to have the `func Stop`
I think it's better to move `accountAccountID` up to `validateFetchStore` so that we can get the client ID from the `validateFetchStore` method.
I think the tests should use `ok` for this. If you want to change this, you can also update the `ok` below to include the `v1` version.
I'm not sure this is the right fix. The CharInfo::UnknownCharSet will be the same as the first character in the loop.
why not a `HttpWebRequest`?
This should be `client.where(client_slug: observations.user_id)`. The only thing that would be to make this change is if the user is not using the `client_slug` or not.
This is an example of how the `--local-scheduler` flag is set to `--no-lock`
should be `examples/cdn/*"`
This is a public API, so I think it's not necessary to change.
I would use the existing variable here to make it clear what the user is trying to use and what the user has to use. The existing code does seem to be trying to get the existing one to get the existing one.
This is the fix.
This is not correct. `OptionalLong getBaseFeePerGas` is used in the code base.
I think we should be using `util.Errf("@package-only-my-module-parameters", docrootRelPath)` here instead of the `output.Errf("@package-none", docrootRelPath)` in favor of `util.Errf("@package-none", docrootRelPath)`
This was a bug, right?
This should be added to the `SpecCSI` command.
@tgamblin Do we need this? We could leave it for now, but I don't know if it's a good idea to leave it for now
This should be in `self._cache.reload_scripts()`. The script that was not called in `self._cache.reload_scripts()`
This is a public API, I think we should be able to use it in the future.
This file has no real benefit.
This line can be removed
May be it would be better to move the `[key]` below the `[key]`
I think it would make more sense to move this to the `2017uuutdddds.js` file
This should be const or const.
Why is the method still called `updateMax`? If it's not, then this should be called `if (field != null && stats.hasNonNullValue())`.
This should be set in `lib/sysfs.h` and not in `lib/sysfs.h`.
can be done with other call to `hierarchical_name` and `hierarchical_name` to align with other variables.
This is the only place where we can't use the `ingress/#ingress-class` object in a `kubernetes` object.
@smarterclayton do we need to add `Task.state` here as well?
is it possible for this to return null?
Why is this needed? The `t.Logger.Error` will return the error, so it should not fail.
I think it would be better to use `log.Error` here instead of `err` since it's a `Error`
I think this error is not correct. It is not clear what the error is. It is not doing anything, but it's not doing anything. I think it should be just a simple catch and not raise an error.
I think this should be done on line 433.
The class should be renamed
@jridgewell Is this change intentional? I don't think it's a good idea to remove this
This is the same as the one above, it should be `script::set_balance` since it's the same.
Won't this protocol ID be nullable?
Why is the else branch not needed?
Nit: we can use `StringAssert.Contains(startInfo.Arguments, string.Format("{0} {1}",, Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Constants.ParentProcessIdOption, parentProcessId);`
Does it need to be a tuple?
I'm wondering if this should be an assert in testing testing. Then you should have `<something>0` and `<something>0` instead. The test is not really needed.
this was a separate bug
why was this removed?
This is not the right place to skip the `h` tag. I don't think it should be here.
I think we can just remove the `NonceMap` here and just call `AccountNonceMap` directly
I'm wondering whether we should just use clientconfig, like "clientconfig". It seems to me the name `clientconfig` is not really helpful.
The `admins` is not a valid value, right? If so, we can remove the `||` part.
should be `null`
I'm not sure this is the right approach. It should be in `logrus.WithField`.
This change should not be needed. The test is not working without it, but the test doesn't fail because it is not present.
I think this is a good time for a follow up PR, I think we should just make this `static const` and remove the `.` prefix.
nit: can you revert this change?
Why not just use `feval = [feval]`?
It's not necessary to change this line.
This was the only place where I was used it. It was a bug, and I'm not sure if this was intentional.
Is this an error?
Is it possible to use `string.func()` here?
This is a bug fix. It should be 0
I don't think this is right. We don't want to allow the `.subscription` page to be present in the controller, but the `.actions` page should only be present if the user has requested it.
I think this should be left as-is. The preg_quote() is a boolean and we should be able to re-enable the variable name.
I think this import is unused.
Can you add the newline to this file?
I think this assert can be removed.
Should we add a note that these are all added in the UI as well?
I think this is a leftover statement
I think we can just remove the `go-selinux` package. It is not used anywhere anymore, right?
This is a bit odd. Can you add a `TODO` as well?
Can we move the property to `enable.quartz` so it's clear what it is used?
This will block all block implementations, which will cause `.new(message)` to fail. This is the reason we're not doing `.new(...)` in this file. I think it should just be the block itself.
should we also add the same type to the service service?
This will cause a null pointer to be thrown. Shouldn't we return a `null` value if the key is not found?
I think this is a bit confusing, since we are already in `server_port` and `server_port` in the `service` model. I think it should be in the first place.
I think we should return the value here.
should this be `h2o_strtosize`?
Can we use `GetTipSetAndState` instead of `GetTipSetState` here?
This import is unused.
I think this is not required. We can also remove the `conf` from this config property and just use the `private` property.
Do you want to error here? If not, please use a function.
"bios_grub" should also be "bios-grub" (it is not used in this function)
This is the fix for #3332
I think this can be done with a different approach, but it would be good to use the same naming convention for the `defaultParameters` variable.
I think this is the right place for this. The `StringUtils` is `event.Content`.
BibEdit is removed in 4.4.0 and will be removed in 4.1.
why change this?
The test for the new integer tests should be changed as it was before the new integer tests are updated, not just the integer tests.
this is an API break. I'll remove it
Why was this private?
Why does the change here?
This test was not testing the wrong way. It was only testing the TTransportException, but it was not. I think we should remove this test.
This seems like a breaking change.
`import IntegrityError` should be renamed.
Shouldn't `recursive_mutex` be renamed as well?
I think this is the only change that will break things, since the `issuerName` will always be the default.
This import should not be used anymore.
I think `source","DVN` is still a valid value, so I think it is better just to use `Attribute` instead of `source","` and `Attribute(xmlw,"source","DVN");`.
I think it would be better if we could just pass `CompareCommits` into the method and pass it directly.
This is not a valid output, but it's a little hard to see.
You need to add the new values in the list.
I think this is a leftover from somewhere else.
This looks like a typo I guess
This field can be removed.
I'm not sure this is the right test. Can you explain?
This is the fix for the `++` PR.
`AppendHistoryNodes()` is not used in the `AppendAppendNodes()` function, so you can remove it from here.
I'm curious why you changed the type of `SPIFFEID` to `telemetry.Entry`.
This is the only change I found. The `vpnServer` is used by both `Server`, but the `Server` is used here.
This is a bit of an unrelated change, but could we move the condition to `mocha`?
This should be a spec.
This line should not be here - we should probably be checking for an error if the `pet get lost` is `2`.
Why is this change needed?
Why did we add these?
I think we can drop the interface. It is not used anymore.
I think this is not the right place to put the `Word dependencies`, as it is not used in the file. I think we should just change this to `ignoreFoo` or `ignoreFoo` and `ignore` to be consistent with the other files.
I think this should be grouped with the other standard library imports.
Hm, why not use `List` instead of `undefined`?
This should be `ContextHeaderPrefix` instead of `Rpc-Header`
this should probably be changed
I think we should have a `account` and a `account.MaxConsumers` that would allow us to have the `<` and `account.MaxConsumers` under `uint64.config.MaxConsumers`, and then we can just do it once again in that case.
Why not just use `return None`?
I think this can just be `if (opts.fee)` since it is a valid identifier.
You can use `String.base` here
This is a change in behavior. I would have expected the "hive" to have a message written in the time.
I think we should remove the `AccountID` here.
I think we need to make sure this is not immutable, we can just make sure the NextPlanNodeIDKey is not immutable.
Is this expected? I don't see any value in the `bootstrap` field.
Why did this change? It's False now, but it's not.
I don't think this is the right approach. I think it should be closed, not the returned channel.
I think we should move this to the check for `SessionId` instead of `0`.
is this log needed?
This will be needed if `Cart_ram_password_password` returns true and `Cart_ram_password_password` returns true.
This is the only change I'm not 100% sure.
This seems like a bugfix.
this should go in `estCompletion`
This should be `Converter{}`, right?
The other code is going to be a count. It should be "min_count".
@matt-gardner, I don't think this change is needed.
`A-Za-z_][A-Za-z_.0-9]*)*\\` should be `\\[...]`
should we add `Retry limit` to the `Retry limit` as the result is?
Maybe add a `error` here to reduce code duplication
This is a bit of a hack. It would be good to check if the `TimeSpan` is not empty, but the `TimeSpan` is not `TimeoutAfter`.
I think this line is too long.
I'm not sure if this should be a `subprocess-html` or an `int` or a `html`.
I think we should use the default `load_time`, since it doesn't need to be executed at all.
This is not a valid device. You can use `<i>` instead of `<i>` to avoid the `music` class.
This seems like something that should be in `w === 0`. I'm not sure why the `if` check is needed? I think it should be the same, but it should be `if (writeCommand.session === 'insert') {`
I think it would be better to use `60Time.HasValue` instead of `(EndTime.Value) * 60 / PointsAcrossPeak.Value` as it's a variable.
`mLineEdit.setFixedWidth ( 10*fm.horizontalAdvance(QStringLiteral("a") )` and `mLineEdit.getFixedWidth ( 10*fm.horizontalAdvance(QStringLiteral("a") );`
For consistency, please use `sys.strip.oltdir_type: :cd11`.
You should use the `ruby-` constant in this file, not the `spring-info` class.
[prec] This is a little weird. Is there any difference between 0 and 0, 1 ?
This sleep can be removed now that we are not working.
This is a bit of an unrelated to the rest of the PR. I think we should just remove the `swap-package-links` script from the file and use the `/api/client/` package.
I think we should only be passing the entire state here, if we're using the `X86` state.
I'm not sure if there is a way to do this without modifying the `contains $_`, so this will be a breaking change.
I would use `_get_value` here, which is more efficient.
This doesn't look like a boolean parameter. I would just change it to a boolean.
I don't think this is used.
Is this a typo?
I'm not sure why this change is necessary, `highType` will only be set when `types.Basic` is `nil`.
I think we should remove this file.
I'm not sure about this. It seems that the first `copy` method is called before `conda/path` will be called. What if there are multiple `conda/path`, and what if the `conda/path` is called, and then `conda/path` is called, and the second `conda/path` will be used?
What is the reason for this change?
`getComparator` returns `null` for the first parameter. The second parameter is not a `private`. The second parameter is not a `Comparator<T>`. The second parameter should be `getComparator<T>`
I don't think this is the right place for this. I think we should just use the `.map(table)` here.
This should be `opt_long` instead
Is there any way to test this?
@matt-gardner How do you feel about this? We should be able to avoid the different versions if needed.
Just to confirm: is the `inventory` option still needed?
This is not correct. `equals` is a list of `2`s.
I think we need to use the valuetests as well.
I think it would be better to use the new name, e.g. `<amp-form>`, etc.
I think it should default to `true` to ensure that we don't get the ServiceName.
Why not just use `===`?
Can this be done separately? I'm not sure if `isSelected()` returns a `returns` object, but I think that's what we do for other blocks.
This is a change for a lot of users. You should probably add a `Masks.AD` that is not used in the `Mask_s` package.
This is wrong
Can you change the name to "schemaValidator" and "root___metadata"?
Maybe we should add a `nameof(split)` to the top of the properties? It's not a big deal but I think it might be a little confusing.
This is not a valid function, but it's not really a function. It's a function that's used to generate the `libunwind.h` so it's not really a function.
What's the purpose of these checks?
You can use `data["server_conn"]["ip_address"]["address"]` here.
I'm not sure we should use the `exit` method here.
This should be removed.
nit: we should be able to remove the `ErrCodeBucketNotFound` variable and just call `ErrCodeBucketNotFound` directly, and remove the `NotFound` field from the response error code.
I think we should just check for the full host here instead, i.e. do |host| "install arbitrary msi via url" since it's a test pattern.
This is not needed
I think this change is not correct. It's not a big deal, but if it's just a single file, it's better to be explicit, and we should change the doc.
This is the only change I'm worried about, it's a change that we can change in the past. If we need to change it, we can also change the Concurrent-name to a `Concurrent`.
This should be a `time` callback
I'm not sure this is the correct fix to use the Error rather than the next one.
This test name is wrong, we should not have to change `db.tar.gz` in the `url.go` file
I'm not sure why this is needed.
I think you need to do this as a copy of all the places we have `ServiceNameMappings`
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Can we move this to the top of the file, please.
Can we remove `URL_test` here?
This is a bit unrelated, but I don't think this is a fix, right?
I think we should keep the cast to `ConfigName` and not the `Boolean` type.
I'm not sure if this is a good idea. The "if" is the right thing to do.
Isn't this the default behavior? It seems like we are already ignoring `Name` in `nil` below?
I think we should log the exception here as well, as the body is empty.
The `loadClassCache` function is used to create a new method that does the same thing.
I don't like this change. You're not using `COMMAND` in your `SHIFT` field.
I'm curious why you changed this to `import org.junit.Test;`
Why is `scanner_index_id` being removed from this line?
`dispatcher.beforeClickOn` doesn't seem to do anything, why not use `dispatcher.afterClickOn(element, driver);` ?
Why are these fields optional?
`List` and `List<String>` are not supposed to be public. It can be `public static`, but it's not a public public API.
This is a test that will fix the issue
Why is this needed?
Isn't `null: false` the default?
This wait was not working as expected. It was a bug in the task.
Is there a reason for changing the order of the arguments?
I'm not sure if this belongs in this file, since the constructor can be `win` and the arg can be `win`?
why do we need this? It's not clear from the `preinit()` method, but it's not clear from the name. It should be either `<somethingStart>`.
I don't think you need to change the `tmp` part of the path
I think this line is redundant?
This is a bug fix.
`systemctl start cloudsqlproxy` is the only one that is needed here
is it possible for the parameter to be used?
I don't think this will work.
I think we should keep this and make the default value configurable.
This is a change of behavior, so `ForceTraceWriteLine` is not really a `WriteLine`...
This is a very good place to set a new cache size.
I think this should be `pipeline_sensor`, and not `definition_sensor`.
This should be `fanout_enabled.cs`
This could be simplified by using the `let` helper, since that's the only one that is used for users.
do we need to check for `--success`?
I think this should be `--network-host-project-id`.
Why does this change? It seems unrelated to this PR?
@matt-gardner, I'm not sure if there's a better way to do this. The same for the other properties below.
This is a very generic function, but is a bit of a fan of a better name than a `map[string]int, error`.
This will only work if the app has been started, but the current URL is not set.
Is there a reason we don't want to return the error here?
I'm not sure this is a good idea. It seems to be the same as the one below. Can you make it a const?
This file should be moved to the `dubbo-config` file.
This is a leftover from the previous version, I don't think it's necessary to have a `game.h` file.
I think we should keep the old name here.
I think this is the only change that affects this class and should not be changed.
Line is too long. [83/80]
We're not really sure what the `caseField` means here. Can we instead just return an error instead of trying to match?
The shop string should be shop-text-box
This should be a set.
I'm not sure if this is the right place to put the `INTEGRATIONS` if we're going to use `string.IsNullOrWhiteSpace`?
So it seems like this would be a more general purpose? What if we added a `path_` variable in the future?
seconds -> getting away
`Array` was not used.
This is a bug in MUST class, so it will not work. You should just call ` MUST` instead.
Why is this `if telemetryConfig.Enable` check needed?
I think it might be better if you could just use a `if not header` here.
Why do we need to require the full package name?
I think you can just remove the `source_fragment_type` field from `UNLINKED` and remove all the `SHARED_FRAGMENTS_ENABLED` field from `UNLINKED`
I think this should be `gOptionEntry` instead of `gOptionEntry`, since it can't be a GOption.
this is a bug
This is a breaking change. We're going to be using `oauth_callback` to create a new `auth` object, but not `oauth_callback`, so I'd like to leave it here.
@liggitt this will break any existing tests.
Why did you remove this?
this is the same as `Integer.MAX_VALUE` above, right?
Maybe we should just make this a `LogMessage` for now and have it use a `LogMessage`, and use that for the `LogMessage`.
I don't think you can just use `GetGetUDP4TransportDescriptor` here, it is already in `UDPv4TransportDescriptor`, right?
Can this be refactored to use the `with` function instead of `self.in_memory`? (just curious)
Why do we need to do this?
This should be changed to `foreach`
I think we need to use `expandableRowHeader` in the `userInjectedExpandableRowHeader` as the default value here. We can't just use `expandableRowHeader` as the default value for the `userInjectedExpandableRowHeader` as the default value.
I think it would be better to move the cached call to the cached call, and then do the cached call in the cached call.
We should add `prohibitedAttrs` to the `read` model. We should either rename it to `label` or add `prohibitedAttrs`.
I'm not sure why this is necessary.
Is it safe to remove this `SparkTable` ?
I'm not sure this is needed. The `reverse` method returns the class itself, which is not the case anymore. The class should only be used if `merged_params` is set.
This should be called after encryptedInstanceUrl
This is the only thing I'd suggest we move this to the BlockHeaderFunctions. It is a little bit more efficient. It's a little confusing. It seems that we don't need to expose it to the BlockHeaderFunctions.
This is now unused and can be removed.
I think it is a bit confusing that `get_extents` returns `combined` if the range type is `None`. I think it would be better if we just use `get_type` here, and have `get_extents` return the `combined` as the default value.
I don't think we should change the order here. The import should be fine, but I think it's a good idea to keep the import-style code consistent.
I'm curious, why this is needed?
I think it's a good idea to make the `PrefetchAfterBlock` a bit more descriptive.
Why did you add this?
This is a very good change. I'm not sure if the `response` key is still the case, but I think it's a reasonable value to be able to find out.
The test for the new results was correct.
this should be `#if // HAVE_CONFIG_Hrm`
I think we should remove this.
This needs to be `char *`
I don't think we should remove `vertigo` from here since it is a single key in the case of `_` being `nil`
`urlstr.lstrip()` will return an empty string. Is this an error?
This should be done in a `utils.js` file
this is not needed
I think we can remove the refresh request now.
This is unused and should be removed.
This lockBeforeLock doesn't seem necessary.
Isn't this test going to fail if `JavaParserConstants` is disabled?
Is this Guid change required?
I don't think we should be calling this.Collect() twice.
I'm not sure if this should be a broker-name. What about `.state.id`?
I'm not sure we need to return `true` here. `#if SupportsMutex` is `false` and the `IsSupportsSharableMutex` check should return `false`.
nit: can you make it explicit `Exception`
I think we still need this. We can just do this with the `encodedError` above.
Please use `spec/features/features/VERDACCIO.md#VERDACCIO_API_URL` instead.
This should be `Option.builder()`.
I think we can remove this from the "convention" property. It will be more efficient.
this is a little hard to read - it's worth to move it to a separate method, as getters.getAliasProp(getters) should always be getters.getAliasProp(getters)
Why are we adding this here?
Can you explain why this is necessary?
It looks like the updated updated code will always be updated. Is that intentional?
This seems unrelated.
Maybe it's better to use `_chunk/{address` here, and then `s.MethodHandler` in the `/`? It would be easier to understand if we're using the `/` in the same package.
@jmhooper During our PRs: This should be `comms` and not `S Atoms`
Does this work? It looks like we're using a string that is not a string, which is a string.
Why do you need to add this condition?
We should move this const into `STROYING` so that it's part of the public API
This using is redundant
you can remove the `string` here, just use the `id`
I think this is a little weird, we are returning the addr. If there is no error then the `Address` will be nil.
I think it would be good to have a more descriptive name like `NoRegionError` or something like that
Why is this removed?
Why do we need to use a `partitionFields` here, as we're already passing in partitionFields?
This line is a bit long, it's not a problem, but the `or None` check is fine.
I'm not sure if we should do `padding: 0` in here.
I think this is the correct error message. "MongoError = require('../error') is assigned to the default "MongoError"
Nice! Could you add a space after the colon?
This is a very minor thing, but I'm not sure it's worth it to just do the `for` loop at all, since the output of the loop will never have to.
I think it should be `terms::size` instead of `size`
This should be `replaceResultInFormWithNew`
this is just for testing purposes?
Our style guide suggests that you can import this one.
project_id == 0, short_id ?
I think this should be `defer deadlineTimer.Reset(deadline)`
Is this change required?
I think this is a good place to put in the `NONBLOCK` call.
What is the motivation behind this? I don't see any code in wlr.init() where the listener has been removed.
Line is too long. [81/80]
I think it's safe to use PONY_API as the input name.
This should be "Configuration" (or "volume"), since it is used for both.
Why do we need this bool?
I'm not sure why this is needed. It's not used anywhere else, right?
Do you think you can redirect to `current_user` and `@offering` instead of just `@catalog`?
This is the only change needed to make the test fail.
This seems to be causing the CI failures.
why not `boxbox`?
This should be a separate function, since it's not really a global var
Why did we change this?
This should probably be `if (args.seed) {args.deterministic}`
is.undefined andis.empty aren't used anywhere
I'm not sure we need to use this example. It is used in the `example` package.
I don't know if this is the right test, but I'm curious if it was better to test the `[0-9]{5]` instead of just the `*`
This will not work. You can use `StandardCharsets.UTF8` to get the UTF8Encoding from the build.
This is a breaking API change
I'm not sure if there is any way we could do something like `Idata.boolean CircuitKeyBreakerEnabled` without having to pass the `Idata.boolean CircuitKeyBreaker` and use `Idata.boolean CircuitKeyBreakerEnabled` directly instead of the `Idata`, which is the only way to pass in the `MemoryMXBean` instance.
We could add a check to make sure the user doesn't have a default value.
updateParams() is called when calling `updateParams(X)`.
I think we should add a doc here to make sure it's the same data as the original data.
I don't think you need the branching here.
@jridgewell I'm not sure this include include is needed. The `mpi.h` includes the include of `iostream`
I think this is a breaking change, right?
This is the only line that needs to be fixed.
Is it possible to have a `LogProvider` for this as part of the `MvxBaseLogProvider ` ?
This should be reverted.
I think we need a link to this link for the `[Close]`
`RetryTaskV2` is not really used.
This import should not be part of your PR.
Can you add a TODO here to remove this code?
these should be removed
I think we should just use the `_cancellationTokenTimeout` field.
I think we should add `forseti_cron_runner.lock` to the lock file.
why is this removed ?
why do we need to add this?
`go.opentelemetry.io/api/core` is already in core, so no need to add it here.
This is a change in behaviour, but the `ke_version` version is not being used in the `subscriptions` function. We need to update the `subscriptions` method to reflect that.
This change is not related to this pr ... please revert.
`data` is a dict?
I think this should be a separate PR
`deploy_mode` was removed because it is not used anywhere.
This will be a bit hard to follow, but I think it's a good place to add this.
I think this needs to be moved to the `AppName` class as well.
I'm curious, does the cache key still exist?
@jridgewell Is this the right place to update?
Why is this `Bool`?
Is this file still needed?
I think it's more clear that we would want to say 100 here. I would say 100, but it's more clear what it's doing.
I think it would be better if `map.Wrap(err, controller, sc); err` after the `ctx` check. I think it would make more sense for `keybase` to be `nil` and `keybase` to pass the `err` to the `err` and then we can use `defer` to avoid errors when `ctx` is `nil`.
This will fail if `opts` is not null.
The call to `get_color` is not necessary here, because it will be `_set_current_index()` in the function signature (and there are multiple places), and it is not a function that is called in the `removeTab` method. I'm not sure how this is supposed to be called. I think this is the only way I can tell. I can see a few things like that: - the `tab` and `get_color` call, which will be called after the call to `get_color` (in the first place, which will call the function, but it will
Why add the return here?
what happens if we have multiple instances of this?
We need to add a `default` parameter to this function. I don't think we should do it for all cases.
This property should be private, e.g. `Dictionary<string, object>`
This should be a test instead.
This is not the right approach. If the `new DeleteFile[] deletes` method is called with a `null` value then we should just call `deletes` and then use that.
This is not needed, we need to throw an exception.
This should be `!sourceExists(ci.StartupScript)`
can you use the const and the `==` here?
same here.logger.error should probably use string.
Are you intentionally ignoring the `args_struct` function here?
I don't think we need to change this.
`StatusForbidden` already has a `StatusAccepted` object, so I think we can just use `nil` here.
I'm not sure if it makes sense to have this check here. If the rankstr is a slice of the string then it will always be the same as the first element of the slice.
I think we should use a `TODO` here, as we do in the `ecsAgent` function.
`panic` seems a bit redundant, can we just use it here?
Not sure why we need a new method here, but I think that we can just pass directly the `cancel` directly.
I think this should be `@param array<string, string> $config` and `@phpstan-param array<string,int> $bundles`
Should this just be `subprocess_key`?
Do we want to keep the `tags` prefix as the default?
This should be `dilation_size` instead.
What is the purpose of adding `setReadonly`?
I think this might be a bug, since the CMakeC API calls CMake now, which is not a problem.
Please remove this line
shouldn't this be "mount ("etc" instead of "mount ("etc")?
Nit: I think `sequenceNumber` is a better name.
Why not raise a `adapter` error?
Just a thought, why is the global global not a global?
This is the only change that affects `querystring`, which is why I added it. It is used only if `request_GET` is `None`, but it is used in a few places.
Why is this removed? The only time the lock is acquired, the start time was acquired?
Is this a change in behavior?
This one needs to be fixed in the future.
I think this should be `IonMobility`. Also, I'm not sure if the `Mz` dependency should be in `CCMobility`. It's not used in the `Mz`. The `IonMobility` dependency should be added to the `usage` interface.
I think it would be better if we could just call this `IO` instead of `CancellationToken`. The other two methods could also have `IO` as `Schema` and `CancellationToken` but that would be more clear.
Do we want a test to be able to use a test to verify that we're using a specific test to run?
This seems wrong. Why do we have to pass the version to ConsensusCurrentVersion when when a specific upgrade is not provided? Why do we need to pass the version to ConsensusVersion when it's only a specific upgrade? Why do we need both?
I think it is better to use a `BlockCount` here, since it is a `Block`.
This should be `import requests.flask`, and the next line should be wrapped in `import abc`.
This seems like it might be better suited for some reason.
Is this a bug? It looks like you're passing in the `BuildIndex` object to the block?
This is not right. `yield functools.FormatString` should already have a default value, right?
Line is too long. [81/80]
I think this should be moved out of the `if` block.
This is not needed. You can remove the `at_taken` method altogether.
I'm not sure why this is needed, the others are already defined by the system layer
Why not use the default port port?
I think this is the only place where we import all the Python Python Python Python Python, but we should be consistent about that.
I'm curious why this file changed?
Do we want to keep `acceptable_exit_codes` as an option?
This should probably be `dataframe.tail()`
How about just calling this.servers.size?
what if we added the `<=`, then?
What is the difference between `WebRequest` and `WebId`?
I think we can remove the `--cache` flag altogether now, and just remove the flag altogether.
shouldn't this be `stastics` ?
What if there was an tail? If there was no tail, then `tail: unrecognized file system...`
I'm not sure we want to keep the "fake-infra-id" variable in the docs?
It's not obvious to me why we need a type for this. If I read the name correctly, it would be better to make a function of the node that takes a `Type` argument and then use that as a parameter to get the `Type` argument.
this is a bit of a weird error. I think the error is not nil, so we should probably be checking the value of the context.
Please add `kill` to the kill method.
`CreateSharedString` and `CreateSharedString` have the same name. It's not clear what the difference is here. I'd suggest removing the `_fbb.CreateString` call from `CreateSharedString` and adding a new method to `CreateString`
I think it would be better to move this line to the beginning of `setState()`
Should this be `notice`?
Is this necessary? I thought we had already done this in `MetricMetricMetric`
This is a bit unrelated to the PR. Can you explain what's going on here?
I think it would make more sense to just return `workflowBackoffType = enumsspb.WORKFLOW_BACKOFF_TYPE_CRON` here, since the enumsspb is not a error.
why not `e.keyCode === browser.tizen` ?
I don't think the password hash should go in the `sha256` namespace. We should use the same password for the password password, but not the `config` namespace.
This should be TelemetryConfigurationDto. The variable is used in other places too.
I'm not sure this is the best idea. The boost/make_shared/boost isn't a good idea. It's a little confusing to have a shared shared interface, and it's not a good idea to have to have a shared interface.
Why not use the constructor?
I don't think this should be constDelete.
`response['ResponseMetadata']['HTTPStatusCode']` is a bit confusing. How about `response['ResponseMetadata']['HTTPStatusCode']`?
I don't think we should do this. We should only do this if the value is a `nil` or a `false`.
I think you should keep these error codes.
What is the difference between `JsonRpcUrl` and `Url`?
I think this should be `client_model_slug` and be `client_model`
info() is a debug level, so we don't want to print it here
I'm not sure if this is the correct way to fix it. I'm just wondering what's going on here.
I would prefer a function to avoid the need for the new function
This is a change in behavior, but I'm not sure what the best way to do is, it will be to create the default, and then do the cache if it is not present.
It seems that Fetch within timeout can be removed from here?
This is a bit unfortunate. We're not going to use the `__temporal` name here.
remove empty line.
Why is this check needed?
I don't think we should be changing this.
Why are these internal? Isn't the breaking change needed?
I don't think we should be changing this name. I think it should be `Email`.
For example, I suggest replacing `block_processor_verification_size(2048 * signature checker threads)` with `Set_type(2048 * signature checker threads)` and `Set_type(2048 * signature checker threads)`
This line is a leftover from #389
I'm not sure we want this to be an `err` or `nil`, so we don't have to worry about the `err` value.
This is the only change I would expect to be to have `HOST_ARM_`, which is the default for `HOST_AMD64`.
This is the fix. I think it should be `filepath.Separator` and not `ROOTDIR.dir`.
Is this include needed?
This is a change in behavior, but it's not a big deal.
This is a bit of an unrelated but I think it's better if we explicitly check for `ScanProvider.FileExists()`
Could you remove the empty line here?
This will need to be done in a follow up PR. This PR will fix the CI failure in master.
I don't think we should add a warning here, it will just be less confusing to people.
I think this change should be reverted.
This will break existing tests that use configs and generator.set(..) as the default value for the task. Is there any reason we need to do that?
This is a breaking change, but I'm not sure it's worth it, but I'm wondering if it's a good idea to have the default case in the `/` module.
I would have named this `tests` as a name.
I think we should make this constant `self` to avoid any conflicts
I think we should keep the old name here
I'm wondering if this should be `m.paths["devices"]` instead of `m.paths["devices"]` to be consistent with other paths?
I think we should be consistent and call the other properties `gaPropertyID` here.
I think this is not right. `this.status.uploads.push(file)` is not used anywhere.
This is the only change I'm worried about. Is there a way to check for a non-deterministic path?
DbCapacity is not used anymore
This test should be updated to make sure the hash format is not initialized with the same name as the hash format.
It would be nice to have a helper for this, e.g. `sudo`, but I think this is a good thing for now.
I think we can use `user.cloudformation` instead of `user.cloudformation`
The `long` state should be removed from the previous `previousState` state.
Should we also support `application.net`?
I don't think this is the right place to fix this.
This should be in a `error` var, not in `xhr`.
If this method is used to return a boolean, it should be able to be used in a different way. This could be a different way to get the value if it is used.
So if the endpoint is not set, the endpoint is not set.
This is not right. `gcode element` is already in the `Number`.
I think this field is unused?
I think we should just pass in the DB to the DB instead of using the DB.
This is the fix.
What is this? When is it a warning?
I think this is the only place we need to do this now, but I think the code should be moved to a separate function.
Why do you need to handle error here?
Why is this test removed?
This was a bug, as copying a copy, which is not the correct repo.
I don't think this variable is used anywhere.
import not required
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
Why is this removed?
can't we do this in `else` block ?
I'm not sure this is a good idea. The `sqlcode` variable is a bit confusing. I would expect it to be used in `char` rather than in `sqlError`, but I'm not sure it is worth it.
`AccountMaxVersionPrefix` is used in some places, maybe we should just remove it?
I think we can remove `apinamespace` from here and delete the import `apinamespace`
We can remove this line
I'm not sure we should have a `Coroutine` function that returns the `NOPE` here.
Is this the correct name?
I'm not sure why we need the NETFRAMEWORK if the user is using the value of the `MultiDomainHost`, but I don't think it makes much sense to do it for `MultiDomainHost`.
It's not a big deal but it might be worth adding a `TODO` statement to make sure that we're not using a global variable here
This is a bit of a hack, but I think the original code is fine, because it is not a big deal, and I don't think we want this to be a problem.
I think we should be able to get rid of this test, since it is not a valid value.
Why are we changing the return code here?
I think we should just make this `#endif` instead, since we only need to do it for `d_r_avx512_code_in_use`.
This was added to support `2.0` as well, so we should probably update the doc for `2.0`
This can be `\`
I'm not sure if this is the right place to put. I'm not sure we want to make it work with all of our tests.
I think it would make sense to use the top level variable here, since it's only used in the tests.
I'm not sure why you changed the default to `1` here. The `const` is not the default here, so it's a constant.
This test is not working anymore right?
I'm not sure about this change, the `chromeOptions` constant should be removed.
if it's None, just set it to None
This is not needed.
The test for `Output` should not be necessary, since it's a single `strconv`.
I think it is better to remove the cus and use the dygraph installation.
I think this is fine, but I think the `Boolean` and `Constants` are the only ones that were being used.
This should be a `const`
I think we can remove this file entirely, as it is not used in Element anymore
This is the only change in this file. You can just remove this.
This is not related to the PR. I think it should have been fixed by a specific `P Paymenting` annotation.
`import each `useHasScrolledEffect` import is never used and you don't need it. You can use `DashboardEffect` directly.
I think we need an extra `g.auth` check here. The `is_active` check is already done in `auth` and it's not in the `token` check.
This should probably be `const`
This will break the API review.
I'm not sure this should be here. The `Auto` class is used by `Auto`. I'm not seeing where the base class is used, it should be.
This should be `this.attributes.Add(new KeyValuePair<string, object>(key ?? string.Empty, sanitizedValue);`
What is the case where `same` is `None` and `nil` is not `-`?
This is a pretty big change, and I think it is better to have a `./pants go-routine` file that can use. This is the only one that is used for this file.
Why are we adding the default sources to the `useDefaultSources`?
I'm not sure this is the right fix. The function signature is used to pass the `rm` object, which is not the right place for this function.
I don't think this is the correct place to fix it.
What happens if we have sub.subject in the middle?
I don't think this is used anymore
I'm not sure we should do this. It is a bit confusing to have a `balance` field in the input input.
Is it necessary to change the test name to `template.JsonSchema`?
This is a very specific bug fix.
This is a good idea. You're going to need a singleLayer.
This should still have `tasks` in the service.
nit: we should use the `error` function here to make sure it's a valid value.
Can we use `assert.deepEqual` here instead of `assert.deepEqual` for the target name?
This is the wrong place to add `validateNoConflicting` to `conflictDetectionFilter` (it will be called before the call sites are called)
Remove empty line?
We should only be using the TagSpan when there is a DataWriter in the past.
This is a bit of a hacky, but I think we should be using `AtomicLocalFile.getattr()` here and in the `_Baseinit__()` method. It's a bit odd to use the `_Baseinit__()`, and I think it would be better to use the constructor directly in the constructor.
why is this removed?
This is not a valid device, but it is just a simple device.
Shouldn't we also add a doc on the last page?
This one probably shouldn't be here.
I think it is better to move this to the end of the test file.
This should be called `utilHandler` and `utilHandler` to match the other response types.
This is a bit odd, we could use the `Loader` property here
I don't see why this change is needed.
This is a change in behaviour.
This was a change to use the new filename.
I think this is a good time to get a better idea. It's not really a good idea. It is a good idea to make it configurable.
I think this can be simplified to just `String` and not `Exception` since the class is `String`.
I think it would be better to use a nested import here, like `from .drbg.hmac_drbg import DRBG` or `from .drbg import DRBG` or `from .drbg.DR_drbg import DRBG`
This will break existing code.
I don't think we need to add the new field here
Should this be `Time`?
This should be `<%_count>` instead of "Lade hoch".
I think it would be good to have a default value of `minimumUmask` for that.
Why are we removing this? We don't have to keep track of the `mongoError` instance anymore, but it's not a problem.
This is a change in behavior, but I think we should leave it as it was.
I think it might be worth moving this to a more informative class (or at least in the context of the task) to be consistent with the other two methods (e.g. `-1`).
This change is unrelated, but I wonder if we should change this to `num_args += sum(1 for field in named_fields if field == "")`? Or perhaps it's worth doing some things in the past?
nit: remove empty line
Why is this change needed?
I don't think this should be set to true.
This is a bit weird. Why do we need this? I think the only place it is in the `Async` method.
I think it's better to use `return co(string, yieldUser.create(writeUser))`. Also, it seems that there is no guarantee that the `if (string) == yieldUser` above will never be used.
why change `url.ExecutionDataGas` to `action`
I don't think you need `@since TODO`. Also, you should be able to remove the `legacy` annotation from the `MediaInterface::class` annotation.
Is this the right error to caller? I think we should just return error here
The default value was `1, 2, 3` and `value_x` are `-2` but the default is `1`.
Let's not change the default here. `aws.aws.endpoint` is the default value.
I think it might be better to just put the `handle_()` call in here, since that's what the user will do in the future.
I think it's safe to remove the `Test`
This function can return a boolean and a function with a `func (c *cstorSnapshotCommand)`.
`validateProxyUser` is a bit confusing with a group. `validateProxyUser` is a bit confusing with `@return {...}` and the method `validateProxyUser` is the one that is the group.
I don't see why this is needed. It's not necessary to make a namespace for each resource.
this is the main change. we should not have to pass the test.
Please remove this.
I don't think we should be doing this, we should just check if the cache is not in the object.
This should be initialized as a constant.
I think it should be `if len(password) == len(trimmedPassword) != 0`
Is this needed?
This should be called `va_start_ Contract`
Why is the env var `envconfig`?
This should be `static`. The `static` field is not used in this PR.
I think it might be better to move this to the beginning of the file. It's used in a few different places, and we don't have to worry about it.
This should be a separate function.
I think this would be clearer with a `default='token'`
Not directly related to the PR, but why do we need to make sure that it only applies to the icon?
I think this is a very good place to put it in the list. It's a very hard requirement, and I'm not sure it's a good idea for this to be a problem.
This test is failing on Linux, so I'm not sure what's going on here. The test is failing on Windows, but the test fails on Linux, and it doesn't really test anything, but it doesn't seem to test that the test is failing.
This is not right. It is not used.
This should be removed.
I think this should default to "false" if the default isn't set
Is there a reason this is added to the `env`?
I don't think this test is necessary
Removed is a bit confusing, can it just be set to 0 and then set to 0 to 1?
This is a change in behavior. The current default `githubURLFlag` is `repoURLFlag`, so the `github-url` and `repoURLFlag` are the actual default. I think we should keep the default value here and change the `githubURLFlag` to `repoURLFlag`.
This is not a good idea. It should be an `if` block.
import from wrong section
I think it's better to move this to a `execute`.
Why was this removed?
Is it a bug? It seems to me it should be removed.
This should be `:code:`
I think we should use `minInterval=1` here. Also, I don't see why it's 60, so it's not a problem.
What does `abspath` mean? Does it work?
I'm not sure if it is the right place to put this.
I'm not sure if `CircularJSON` can be used here, or if it's just for the use case.
This should be done in the validationEx and be part of ServiceDefinition.
This is the wrong place for this. The `open file bucket` is used by both dir and directory. The `file` package is used by all dir files. The `open file bucket` package is used by both dir and dir files (which we use in the code below). The current code is a bit of a hack.
I'm not sure this is the right fix. The Solr version is the same as the one in the other file.
Can you add a new line at the `join('lib', 'concerns')` line with `.join('lib')`?
This is the main change. It should be `slots.stream()`.
This should be renamed.
I think this is a good change to make the tests pass because it's not always valid (and it will always be true).
Shouldn't we use the same constant for the same constant?
I'm not sure that this needs to change, or if it's a real bug?
RANDOM_ORDERING is used to be less than random than random than random
This is not needed.
I think it's better to use a `string` variable instead of a `string` field.
I don't think it's worth it to just do a single `require` after it is called.
I'm not sure this is a good idea. What about the other `getQueryRunner` methods?
I think it would be more readable to just use `ENGINE-16002 Exception while closing command context: ENGINE-03110 Required admin authenticated group or user,`
Nit: We can move the imports to the `commit` block.
Can we use `.config`?
I would prefer to see a more specific `if` here, but I wouldn't expect this to be an unlimited state. It's not a problem, since it's an unlimited state, and it's more likely that it will be a very useful one.
This function is not called in init() right?
This is the only change in this file. I think we should change this in the `testing.js.erb` file instead of the `testing.js.erb` file.
Maybe we can also change `DEFINE_crash` to `string_test` and `crash_count` to be consistent with other tests.
This is a breaking change.
Same thing here, but I don't see how the default behavior of the config file is actually used.
I think this should be removed.
nit: you can just put `self.floor_thr == 0` at the beginning of the function, and remove the `self.floor_thr)[0]` line.
I think this should be `github.com/chaos-mesh/api/v1alpha1`
this file is no longer used.
The above change is not needed. `MemoryUnlimited` will be `0` and `MemoryUnlimited` should be `0`
This should be `query.totalFileCount` and not `maxNumberOfFiles !== props.totalFileCount`.
I don't understand why we need `*` here, and what's the difference between `*` and `*` (as in the `epochNum` var)? Is this a bug?
Is this still needed?
These should be left in the PR.
I think we should use `connect` and not ` ConnectID` as the name of the test. It is a bit confusing.
Shouldn't this be `@var`?
this should probably be done in `io.prestosql.spi.precate.DEFAULT_SIZE_SIZE`
why not pass in the config?
Is this a bug fix? It seems like we are not using this anywhere?
This is not the right place for this one.
What is the use of `tail()` here for?
what is the difference between `_` and `_` here?
why was this removed?
I think the two spaces are unnecessary.
I think you can use a more descriptive name here.
This is not going to cause the `listened_at` value to be not defined. I think this is not the case, but it's not the case anymore. It is the case that `listened_at` is not set in the `generator_id` case, so I would just remove it.
Does it make sense to keep it in the first place?
why 10? I don't see any value for test_SCAN_TASK_SET_ID
I think it's better to check for `'text_font_size'` here.
Use the new Ruby 1.9 hash syntax.
I think this should be reverted.
I think it is better to use `PackageUtils.name` instead of `8`
@danrot @jridgewell Is it correct that we're not using the non-nullable value here?
@jona86 @wangdi1 @wangdi1 Is there a reason for the `FALSE` argument? If not, I'd recommend `TRUE` be an `ITM_EQUAL` instead?
I'm not sure if we should use the `URL` as the names here. `nan` should be the same as `nan, inf, name (signed)`
I'm curious, what's the difference with `1` here?
I don't think we want this change. I think the previous version did work, but I think it's more correct.
I'm not sure if this is a change in behavior, but it seems like it wouldn't be the right place to change the behavior. The `sembly` is not used anymore.
I think we need to update this function for the future, as it's not a valid input argument
Why is the change to the same?
I don't think we should do this. `string| false` is the default behavior.
This is a change in behavior. It will make the test pass. We need to test the old behavior for the new behavior.
why remove this? I don't see a lot of other places we are removing the `validate` function from the code base.
I'm not sure if this is correct, but I'm not sure if the "#-issue can be null.
The ` ReaderReader` is a little confusing here because we don't have to worry about it being called in `src/main` (which is the default for `src/main`). I would suggest to use a `tx.Begin(ctx)` or something.
@mmaxim this was the bug
This check should be redundant as well
@jcotela this change is the fix. The Python Python Python Python is used to set the value in the _collectionThreadID.
This is the only place where the `dumpedBody` is used, but it's not the dumpRequest, so I wouldn't expect the error to be reported.
I don't think we should do this. If you want to do a `type` check, you can do it with `None` as well.
I think we can also add the new controller name to `antrea-agent`, `antrea-agent`, and `antrea-agent-controller` to make sure it is not set in the controller name.
I'm pretty sure this is the only place where we should use this.
I think we should not introduce this condition to the existing `is SpanContext` interface. It's a bit confusing since the scope is a `null` anyway.
What does this do? It doesn't seem right to me, since it is the other way around.
should we use `bypartition` instead of `partition` ?
This is a change in behaviour.
Why are soc different from validator.
Should be `USERNAME_PASSWORD_REQUIRED` or whatever the password is already registered.
Why does the original logic change? `long CommitTree(longNumber);`
This is a bit of an internal implementation detail, but I think it's better to be able to use `BaseMessage.ConnectionConnectionAborted` instead.
I don't think this is right. The import should not be used.
I don't think this is a good idea. We should not have a single version of the package. I'd rather not use it.
I'm not sure we should do something about the `STANDARD` in the context of the object. I think it would be better to do something like `if (self._storage_class is None) { return self._storage_class = 'STANDARD'`. Then the `storage_class` can be moved into `handle_version_headers` (which is not the case here, as it's a public method that does the right thing).
I think it would be good to have the same name as `get_connection_TIMEOUT`.
`The region is specified, hint, an error`?
Is this change necessary? `tpMatcher.group(1)` will always be a `null` value. The Text should always be a pointer, so you can just call `tp.sanitize` directly.
nit, prefer `return False` and `return False False` to make the name more clear
this is the wrong place for this.
The `click` element is not used.
This is a breaking change. It's not really necessary to add a new parameter to `PipelineManifest` but it's not being used. I think it should be removed if the only place this is used is in this file.
Is this really needed? It looks like it should be a constant.
Use a guard clause instead of wrapping the code inside a conditional expression.
This is the fix. We have a lot of "Form" calls in `m.Get("/avatar")`. I would suggest that you change `m.Combo("/avatar", user.SettingsAvatarPost)`
The original code is correct. The code is only for testing purposes, so this code is not needed.
I think this app name should be renamed or something like that.
This is not the default. It is a bit of an unexported feature.
I think the `integration` is still necessary. The `Unit` is already present in the `output` directory.
I don't think you should change this.
Why are we removing this?
I think this should be removed
These two lines can be removed.
This is a change in behavior, but I don't think we should be doing this here. We can't remove the shutdown if it's no longer a problem.
Why is this a pointer?
I don't think this is a good idea. We could just remove the code if we don't have a `\rDoc`
I think we need a new log at the end of this method to avoid logging the output.
Is this the only thing you're using for this?
I'm not seeing where is the `default` key used?
This should probably be `ServeHTTP()` instead of `code, err := b.ServeHTTP(rec, req)` right?
The `enum` should be `nil` if `t.Recv` returns an error.
I don't think we need this. `setupSucceeded` is the only caller that uses `ctx`.
As discussed, you have to have a `ReportUndestroyedObjects` that is the only thing that will have to be used.
nit: I think we could just change this to `MongoDriverError`.
I think we don't need this. We already have the same `maya` and it's the default.
I wonder if `ISpanDecorator` should be an interface for `ISpanDecorator`?
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think it should be "sample_event" instead.
This is a private function, I don't think it's necessary.
Please add a similar one in `_checkNotNull`
I think it should be `pc_++ = 0K_flags` instead. The value should be `pc++ = 0K_flags`
Why not just use `.format` here? It seems to be more explicit that `stop.EventSource` will return `nil` if the `Name` value is not present. That way, we can just check `.EventSource` and `.EventSource` when the `Name` is not present.
nit: remove empty line
I think this is not the right place to put this. It seems to me that `NewGetMetricFunction` should be used as well.
Is it possible for the `wait_for_port_open` to return a http://tensorflow/dynamodb/tensorflow/dynamodb/tensorflow/keCoder.py?
This is not the only change in this PR, but it's not related to the issue.
This should be changed in a separate PR.
`baseFee - feeDelta` was added to the baseFee -0.0.
I think this can be left as is
nit: can you add trailing comma to this line?
this is a bug fix
This is not the right place to change this. The bodyConverter is a string and it is not a string. It is a string, so the bodyConverter will never be a string. I'm not sure if it's worth it.
These changes are in the same file. I'm curious if these were the only usage of this class?
Should we do this check in `props.containsKey`?
This is an unrelated change, but the PR description says it should be changed to use `time_backward + 1e-3`.
Why is this being deleted?
why not use a separate interface for the class ?
I think we need to keep the old field name as it is not only for testing purposes. The new field name is `public`.
I'm not sure if this should be `self.num_classes = self.num_classes`, since it doesn't seem to always be `None`, right?
This function is only called in `ByteSize` and should be called in `ByteSize`.
Can you add a TODO to remove this?
This is a little weird. We're using the same Blob as the `type?.length > 0`. I think that's the right thing to do here.
this should be `.to_s` instead?
What does the `api_version >= VK_API_VERSION` do here (and below)? The physical device does not support 1.1, but 1.1. Is it possible to support 1.1?
I don't think this check should be inside the job_failed function.
I don't think this is the right fix. It's not clear to me that this is a bug. I think the fix should be in the `progress` instead, but if it's 0, the `i` is 0, then the value will never be `true`. Then the `i` is `!i` and we will be able to fix the value of the `i !== dom.value` value, which is `!i` and the value will be `true` and the `!i` is `undefined`.
I'm not seeing the rng dependency in this file.
info() should be removed as well
I think we should make this a `private` and add a `private final` field to the URL.
This is a good place to put this.
`preview::spmd` will always be `true` anyway, so you should be able to use `namespacenamespace ps = (style) need consistent spacing around 1 for conditional statements
This is the only change that fixes the bug, but I don't think it's necessary to do this now.
Why did you change the `Sum` to `0x70 0b010000`?
Should be `@param` or `@aintaint`
I think we should just return `None` here.
Shouldn't this assert be `all_statuses.next_token, 'page-2'`? (I'm not sure it's a good idea to check the return value.)
Why not use ` subprocess.check_output(shlex.split(' '.join(version))` here?
Can you add a new line after `GetActiveClusterName` to make sure we don't get an empty message?
This test was only introduced in tests, but it was not in the test itself, so I had to remove it. The `skip` was not working before.
The default `items.ToList()` is `IEnumerable<bool>` because it is no longer used.
Do we really need to pass in a `nil` here?
I think we need to do this in a follow up PR.
I don't think you want to change these two types of `clientModel.ModelTypes` to be consistent with other types.
@mhoemmen I think this line should not be part of the headers. It should be checked in the URL. If the request is not found, the URL should be checked before the headers are created. If the URL was not set, the request was checked before the headers was created.
I think it would be better to move the refresh to `refreshInterval`.
why did you remove this?
Nit: `==` would be more readable.
Why not use `discovery.New(common.common.spec.size(common.size(common.id, "10")`
I don't see a point in adding this to the collectModules list, but I think this is the only place this needs to be called for a global state.
This is the only change that will cause the test to fail
I'm not sure if it's a good idea to add a method `onResponse`. It's not a good idea to have to pass the interface to `onResponse`.
Could you please move `info` to `finest`?
This is the only change I'm worried about.
This is the only change I have in mind. The `HttpClientInstrumentationOptions` parameter is used for the value of the `Level` method. I'm not sure if that's a good idea, but it seems like it's not used.
I'm not sure what this `2` means, is it supposed to be? I think the `GOMAXPROCS` is a bit confusing.
Would it make sense to also add the `errorLog.Msg("error when validating the block signature")` check below?
Since we're using `pendingRequest.configuration.remoteHost` to be able to handle the `pendingRequest.configuration.remoteHost` property, I think it's better to just check `pendingRequest.configuration.remoteHost`.
This file should go in `pkg/services/react.js`
Why is the O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
This is a bit unrelated, but I think it would be better to just call the method `message.pure()` instead of `json.JSONObject()`.
I think it's better to have the list of parameters that you want to be passed in.
Please move this to the top of the file
Since you're using RegisterGlobalOption, you can also write as `opt` and `opt.start` to avoid the right type.
This is an API change, I think. It's a bit odd that we have to check if `isProtected` is true, but it's not actually true.
I think we should use `click` here instead of `driver`
Why is ` GoGapicContext` still needed here?
Use the new Ruby 1.9 hash syntax.
I think it's not needed anymore. The test can be removed.
Why is this change necessary?
why change target to target ?
It's just a thought to make this a little shorter. We should probably just have a wrapper that does `user-loyalty` and `user-loyalty` as the user name. We can just have it as a single action.
This doesn't have to be a path to the script. Should we just use the same path as the `environment_script` script?
I don't think we should be changing the behavior of the try/catch block, it should not try to catch the exception. I think we should try to avoid the `ConfigureAwait(false)` exception and just catch it. We can't do it at all in the catch block because it is an exception, but I think we can do it as a follow-up PR.
This is a breaking change. Can you please remove it from here?
can you make this a `float` instead of `float`?
I think it's safe to remove this, since the field field is already declared in the constructor
This is a good idea. It's not clear what the best way to do it. This is a very specific error. I would suggest `path-file-path` or `path-file-path`
This is the only place where I'm missing something, but I don't know if it's safe to use it.
I think we can just use `isOpenTelemetryTracing()` instead
I think we should be able to use `wal_`.
I think we should just make `MakeEnvironmentURL` public and pass it to the environmentID, and pass it directly in the `MakeEnvironmentURL` method.
I don't think we should be changing this method, since it will be called in the `NullPointerException`.
This is a little confusing. What if a new `WriteServer` type is not a struct? Should we have a new `WriteServer` type? Or do we need to have it as a string? I think it's not a struct, and if a struct we should add a new `WriteServer`, we can just add a new `WriteServer` type to the `WriteServer` version.
The `letsencrypt` in this file can be `nil` instead of `nil` here.
This is a leftover from an API
I'm not sure this change is correct.
Can we rename this as `AllergenDao.dropTable(db, true);`
We can probably remove this spec entirely. The `expect` method returns an array, which is not the expected format.
This should be done after the `else` branch above.
I don't see how this can be a `@NonNullable`.
The dilation data array is a number. Should it be `i`?
I think we need to make sure we don't run `Program` twice.
I'm not sure if this is a good idea. This could be a simple model, but I think it would be a good idea to do something like `ckpt_train_ID` if the model was not set.
Is it possible to have an empty string here?
This is not used anymore
I think we should add a note about this in the future.
Is it possible to set this in a `kubernetesVersion` instead of in `setCI`? If so, we can use `useCIArtifacts` instead of the flag.
What about the other `projected_monthly_revenue`s do?
This is a good change. It's not a problem for the case where the `beginIndex == endIndex` check is still needed.
I think the `throw new IllegalArgumentException()` check can be removed as well.
Not sure we want to use this in other places, I think.
this is not needed.
This will be imported from the `__init__` function below.
This can be just `verbose` right?
We have `:make` in the label as a label, which makes it sound like we are only using this for a user. I'm not sure if there's any benefit to removing it from the code base. I'm not sure what the label is, but I can't remember if we should just make it a user. We could add it to the labels in the `make` method.
This should probably be `EnsureTelemetryConfig`
I would use `* 2` here.
I'm not sure if this is the right place for this. Maybe it should be `&&` or `||` instead?
This is a change in behavior. It is a bit of an unrelated but I'm not sure what the best thing to do is here, but I'm not sure if the `hash` should be a `EncodeToString`? I think it is better to have a `EncodeToString` that has a `Reader` of its body.
This will not be a good idea. What if we have a different way to get the output, and the output, and thealyzers, and the output, and the output? I'm not sure if we should be able to do that here. I would rather see a different way of writing a different way to do the same.
This is a change that fixes the bug, as we have for the fee to be zeroed to be zeroed to be zeroed. The only reason we need to do this is that the user could use `21000` and not `1.1.0` because the user can use the max price instead of the max price. This is the only way that the user can use `1.1.0` when we can use `1.0` when we need the max price.
I think this is a bug fix.
I think we can drop the `Access denied` part altogether and just check `https != malformed`. The error is only for the `increasing` case.
I'm not sure this is a good change. It's not a good idea. It might be worth moving this to a separate function.
These should be imported before the `from ..sql import sql`
can we use `assert cfg.nms.get('type', 'nms') in cfg.nms` here?
I think you can just remove `reject()`, since the only reason I'm not seeing `ok` is being called is because the `reject` function is being called.
Shouldn't we use the hash's value here?
I think this can be removed now.
I'm not sure if this will cause the problem when we try to send a non-zero menu items to a higher than 5, but this will cause a lot of problems.
This is the wrong way. You can call `onNewPasscode()` directly without a call to `onNewPasscode`.
`defaultPostWriteInterval` is a default value.
This is not a part of this PR but it is still a good idea to have some unit tests that fail
This could be a constant.
The new `NEW_MESSAGE` is unused, so this code should be removed.
This should be removed.
I think the "L" is not correct here, since the `L` above should only happen in the `orient` (the `L` above), so I would suggest to move this `except` to the `L` above.
i don't think this is needed, we have a `DisableGit` in the `if`
This will cause the test failure. We don't have a @user.org field in recipient
Is this a case that we don't want?
I'm not sure if we need to handle this. It looks like we're trying to move the `if host['hypervisor'] == 'docker'` above the `docker` condition.
Nit: I think this line is too long and is a bit confusing.
we can remove this
I think the check for `normalizeIdentifier` is already done above.
I'm confused. If the `AbsolutePath` is not defined here, the `FALLALL` will be set.
I'd like to see this as a separate file for now.
Maybe it's better to just return an error, and then just return the error.
This should be `dyn.ErrCodeTransactionInProgressException`, since we don't need this anymore.
`oldOpenTelemetryBuilder` is already a `IDisposable` method.
I would make sure that the default is True
I'm not sure if we should use the `pandas` module here.
I'm not sure this is correct - you replace the string with `RemoteRemoteRemote` in the `RemoteRemoteRemote`. I'm not sure why we need the `str_replace` call in here, but I don't see any other way around.
"argument type is argument of parameter"
This file needs reverting.
Why not `Class Cms\Classes\MediaLibraryItem` ?
I think we can keep the old variable $config as the default value.
We need to set `SPI0_MOSI_PIN` to 3 as the default.
I don't see where LinkageError is used?
I think you can remove the check for `traceparent` and `Traceparent` in favor of `TraceparentHeader`.
This seems like it would be better as a helper function.
Why do you use import from `src/harvard/iq/dataverse/src/harvard/iq/dataverse.js` ?
Is this a problem? It seems that the `OUtbounds` may not be needed anymore.
this is the same code as above.
This field is not used.
Same here, consider `save` to be a single name like `save_controller_field`.
Why is this needed? It seems like the `sizeof` should be the default value of `sprintf`
The source and destination already exists in `SourceGroups`?
I'm not sure if this is correct. It should be `_get_ clauses`, not `_get_mode`
This is a very good thing to do. If you want to do it in a map, you could just make the return type an error.
I think it's better to use `string` instead of `string`
Is this file still required? If so, is this file still needed ?
Why is this being changed?
This is a little confusing. What about `TiSession`?
I think this test is testing the right thing to do. It will be great to create a test for that.
I think we can remove this now
I'm not sure this needs to be public...
This is the wrong place to put this. If we're using `retry_on` then we don't need to create a new URL
This is a pretty hack. It's a little strange that we have a `.json` file that we need to fix in the future.
I think it would be better to just call `braille.handler.handleCaretMove(self)`
I think it would be better if this would be `validate_tag_error_response`
Why do you need this? It's only used once
This could be `_base_`
I don't see the point of this change: it is throws Exception, but it does not seem that it is checked
`s.pubsub.PubSub` can be `nil` if there is no match, and we should be able to use `ps.pubsub`
Would be good to log something. What happens if the info level is not present?
I don't see this being used anywhere.
`import {` should be only used in WordPress dependencies, not WordPress dependencies.
Do not use `import` for the new functionality
should we consider putting these in an `before_action` block?
This is the only change that affects all tests, so I would prefer to use the `tls.master_secret.close()` calls instead of the `master` element.
I think it's good to have a test case for this.
`showSpeechViewerAtStartup` is a global parameter, so it is not a good name to change it. It's not really important to have it here, but it is not a good name for this PR, so it is not really necessary to change this.
This could be `SegmentId $segmentId`
This should be `--export-fixes`.
I think this is a leftover?
I think we need to add a port if options[:port] is set
I'm not sure this is the right way to do it. This is just the method name, and it's not really a method, so I think it should be renamed.
I'm not sure if this belongs in the actual change in the PR. The cache is in the `bundler` namespace, but the `--directory` path is still in the cache itself, so the cache should be in the `or undler` path, not in the `cache?` path, so it should be in the `pulumi up` file.
This is a good change. It is not possible to have a `Allocation` property that is not required to be set to true.
I think the `*` should be at the top of the file, not just the string.
Why are these values required? I don't think they should be necessary?
I'm wondering if it should be `5 seconds`
what if `r.ContentLength` is set?
These are all the changes, so they are not needed anymore.
I think we should use a `@JsonIgnore` here. I'm assuming this is a good thing.
Can this be `Assert.True(host, true)` instead?
should we add this to the other `S3_ACCESS_KEY` table too?
Why do we need to remove it?
I think it's a good idea to add the key to the dictionary. It's just for the first dictionary, which is not the case for this change. I think that it would be better to just say "for key in dictionary".'"
There is no need to change the `position`.
This is the wrong place for this. It should probably be `slots.stream()`.
I'm wondering why you changed this. I don't see it used anywhere else.
I think we need to add `BindableHolder` to the docs.
why do you need this? We're not using the cluster pool anymore
Is it possible to have the same error code in `opts.skip_unexpected_fields_in_json` and `opts.skip_unexpected_fields_in_json`?
I think it's not used anymore
I think this should be called _any_ filter, as it's not a filter, so it's a filter.
I'm not sure if this should be a thread fault, or a thread fault?
Should this just be `SetTlsCACertificate(caFile string, certKeyFile string)` and the `ca` should be `Config`?
I think it should be `"%s"` not `"%s"`
This is a bit odd - if the error is not `nil`, then `err != nil`.
This method doesn't seem to be used anywhere, and should be removed
this should be set only if `$field->isBoolean($field)` and `==`
Is this change needed?
I wonder if we should add a "state" to the current scope to avoid confusion about the "state" of the "ISpan" property.
I don't see any new tests for these changes?
This file should be removed from the PR
Would it be worth to make a test that checks for the actual base classes and not the new one? I think it would make more sense to have the base classes return a different type of the pool.
Shouldn't this be `DesktopHandlerDelegation\"`?
I think this should be a `IEnumerable<T>`.
Why was this error removed?
I think the original code is unused.
Why do we want `use_depthwise` here? If we want to use `channel_depthwise` everywhere, we should probably add `channel_depthwise=True` to the user.
I think we should just make it a `static`.
this should probably be `if (!storeInbox)`, and then `getStoreInbox* storeInbox` is not a `StoreInbox`.
This is not a good idea, but I think we should just remove the `@private`
this change is not necessary. `CmdCmd.Host #{host.name` will always be `None`.
I don't see any point in keeping this file?
This doesn't seem to be used.
Can you add a check to ensure the key is empty?
Why are we adding this?
I'm not sure why this change is needed. If you are adding the button in the first place, it will be removed from the second.
Should we move this block of code to the top of the function?
shouldn't this be MAX_RETRY_LEVEL?
Is it possible to get this from `*` to `*`? I'm not sure what the best approach is. I don't see how it is to make it clear that `*` is a `SessionStats`...
Need to update `_` in order to reduce nesting.
Could you add the new copyright year?
I think it is better to move this to the `Read` method.
Is there a way to avoid this?
What exactly is the difference between `GenericGenericLinkedListNode` and `readonly`? Is there any way we could make the same type as `GenericGenericLinkedListNode` to avoid this?
Is this change required?
nit: you don't need to import ` Descriptors3D` here, it's already a dependency on `VSA`
I'm not sure this change is necessary
I'm not sure this is the right place for this. I'm not 100% convinced by the difference in this function.
Why was this changed?
Why did you remove the attribute here?
I think we should keep this here.
This is not the same as `_test3_a` and `_test3_b` tests.
Thanks for the fix, this was a bug.
This seems like a hack to me. It should be `allowed_Optional` instead of `allowed_query`, but it should be `Optional[Optional[T], [x]`.
@node is now an instance variable, so we don't need to do it in the `format` array.
I think we should default to `false` instead of a default here.
If we change the repo then I would say we'll have to add the repo version to the top of the file
I think we should use the global format here
This is a breaking change.
This is the only change that fixes this PR. `if sys.version > '3'` is to fix it, but `sys.version` is the version in the `if` statement above.
I don't think we want to parse this string, it's not a file size anymore. We can just use the file size as the parameter name.
This should be a public function
Is this a change in behavior?
I don't think this is supposed to be a programmer error. This is the only place where we want to support it. I think it would be better if we were to make the `app` labels match the other options.
I don't think this is right.
Why not just make the column name a field?
This change is still necessary?
This is the only place that uses the `create_by_create_in_user` method, so we should probably just leave this here.
I don't think we need the extra here since it's a string.
Maybe `sig[0]` instead of `counter`?
I'm not sure this needs to be a pointer, since it's a pointer. It can just be a pointer.
What's the reason for this change?
I think it would be better to do a `str(e)` here instead of the string `s`.
I think this should be `splitNew`. It's a little bit confusing to see how it's being used.
This is a bit confusing. It would be good to have a `os.makedirs(path)` that is not Python 2, which would be the correct type of `os.makedirs` that is `OSError`. I would also suggest to use `os.makedirs(path, Python 2)` instead.
@Pearl1594 is there any reason for this line?
I think this is not needed anymore, we can't re-use the `confirmEmail` variable here.
I think this is not the best idea. We should probably have a `build_file` that we can use for `pathlib`.
I think we should also mention that this is a connection ID sent in the Public Header.
I think it's better to just ignore the error and return the result.
I'm not sure this is the best place for this. I don't see any other 6 policies being used anywhere.
I think this should be a constant.
This should be in a separate function
We have a space after the colon.
I'm not sure if this change is correct. The user can't set the result of a user.
I'm not sure if this is a good idea... if (len(statusParts) > 0) { statusParts[2] } else { statusParts[1] }
"... server" is the right name here, not "server"
I think this is the only change that fixes the problem, @kroitor since the `bad_request` was the only place this test was being used.
This is the fix.
This is an unrelated change, but the CStorPoolPhase string was not being used anywhere. I think we should just remove this line.
Why the space after the `if`?
Why did you remove this? It seems we're not using the password anymore
Is this really the right place for this?
I think it would be better to move this to `setupCgroup` and have it in `pkg/errors.go`. It would be nice if we could use `pkg/errors.go` as well.
The `a` tag should be `b`.
This should not be needed
Remove the package imports.
Metrics/LineLength: Line is too long. [123/120]
I think we need to keep the `else` block. The `updateNodeStatus` is never used and we can remove the `else` block.
Is this a needed needed?
This is not a descriptor, it is a pair, but a pair has no descriptor.
Shouldn't we use the `InvalidArgument` type?
why not just a version?
Why not just remove this line?
This is not a "hardcoded" change.
I think this should be a `SettleDepositResponse`.
This array of user should be renamed to Array of user data.
I'm not sure if this is the right default.
I think this needs to stay `Register`.
I think it should be configured in `src/server/server/server/v1/api.go`
I don't see any point in having two methods, and one `while winUser.getMessage` calls `winUser.user32`...
Is it possible to get rid of the error here? It seems like the error is now handled in the test.
Shouldn't this be `overwrite`?
This is not a valid package, but `2xx` is not used anywhere.
This is the only place where I can see this code smell - can we just remove it?
Should we add a TODO here?
This should be indented
This is a private constant.
nit: we have an `Optional` constructor which is a `data`.
why is it ok to leave these?
I'm wondering if we should keep the error as it is, and add a TODO to remove it
I'm not sure if this is a good way to handle the case where we can just use `--strict-host` (which is what we want to do with the new `--strict-host` code)
The `PyObject` parameter here is a `PythonInvoke` that is used in a few other places.
This should be `<%=`
I think this can stay as is
`standard cron` is a bit confusing, why not just `Sudson.yu`?
This should be removed as it's used in the `setText`
Who calls `return null`?
`<p>` is an array. `p>` is an array.
If we're using the id, I think we should make the URL configurable.
This is the only line that fixes the bug. The logic should be changed in this PR.
This is an unrelated change?
I'm not sure this test is still necessary, but if you remove `stdlib` from `primer_stdlib` you'll have to update it in `setup.py`.
What's the difference between this and `var` above, and `nil` in `Mvx.GetSingleton`?
I think this is the wrong method name, we can just inline it.
I think `removeChild` should not be needed here, as `el` can be a `parentNode` and `removeChild` can be removed from the `remove` function.
This should use `error` for the `unexpected` status.
Why not just remove this?
Shouldn't this be the same condition as the one above?
I don't think we need to add the `.lookback` property to the `strictTraceId` as the default value is `nil`.
This is a bit unrelated to the PR. I'm not sure what the best way to fix it is, but I'm not sure it makes sense.
This is the only way that the `countlyGlobal["member"]` is used to determine the string value of the string. It is not the case, but the `countlyGlobal["member"]` is the string.
Please use `db.class` instead of `.class`
We can remove this method and put the `ensure_system_roles_exist` one at the top of the method.
We should add this error message to the message.
I think it's better to use an enum instead of a string.
This will cause a problem when it's running in a different PR.
I don't understand this change? I don't see it in your commit.
I think that this is a bug. The "total" block should be moved into `process_block (block, known_account, block_expected)`.
Might be worth noting that default_parts_num is a boolean.
I think it's better to use a `DATE_topo` instead of a `DATEGenerator`
`tag-matchers` and the tag should be `image-matchers` (or `image`).
I don't see this being used anywhere.
We should use `createdAt` instead of `""` for the field.
Why are we importing these from constants in the module module? I'm not really familiar with them but I'm not really sure what the best way to do it is
This is not the right place to do this. The `PublicVolumeCreationDisabled` should only be used in `-get` components, and not in `public-volume-create-allowed`. I'm not sure why we need to do this.
I think this should be called `http2o_http2_decode_goaway_payload`, not `http2o_http2_decode_goaway_payload`.
This should probably be `exit(exit_code)`.
Why remove the `Task.poll` here? I'm not sure if it is a good idea to use `remove` here.
why is this needed ?
I think we should just revert these changes.
Is it better to keep the old name? I know it is a new name, but I don't think this is the right thing to do with this change.
I would return null here
this should be a separate PR
I don't think this should go in the `TransitionDocNode` class. It is a bit confusing. It would be better to have it as a static field in `TransitionGroup.Children.Any()`.
This is a bit of a hack, but I'm not sure if it's a good idea to have a list of `MNE_util` that will be a list of `MNE_util` in the same way that it's a list.
I don't think this will work, but we should use a `None` here instead.
I think it would be better to use `client.client.client()`
This change seems unrelated.
I think you should use `||` instead of `||` here.
nit: I'd prefer `return collection.repartition(npartitions=1)`
Why use this?
This should be moved to `#if DEBUG` instead, otherwise we'll get the debug mode.
Ah, this is not a bug in master right?
I'm not sure why we need to lock here, since these are the only ones we need (I'm wondering whether the rule is a problem, if we don't need to be able to handle them in a different PR).
Maybe we should drop the `pandas` from here?
I think we need to do `config['transports']` in the config too.
Is this the only purpose?
Why not import from the other one?
this method is no longer used?
this is not correct, you should use `list(...)`, right?
why not `return stats` ?
I'm pretty sure the format isn't the last line. Is that intentional?
Is this TODO still needed?
This is the only change in this PR.
I think it would be better to use bytes.Fields directly instead of bytes.
why change it to `true`?
I think this is the only place where the `sqlite` is needed.
this is wrong. It will allow the loop to be set in the `OPSZ_4` list.
I'm curious why you changed the method signature of this method to `void`
I don't know if it makes sense to put the `new` in the constructor.
I'm not sure if this is correct, but I'm not sure what this is. I'm not sure if the `log.Error` is the best way to do it. I'm going to suggest we add a `log.Error` to the output. I'm not sure if it's worth it, but it might be worth it to make sure we're not doing anything else.
The `if mset.mu.RUnlock()` condition will be removed if it is empty.
is this a public function?
I think the code below is still not used anymore?
Metrics/LineLength: Line is too long. [81/80]
I think this file should be removed from here, right?
I think this import can be removed?
Why do we need to add `getContentDescription`?
Why do you need to cast to a `1` here?
Is this file still needed? It doesn't seem to be used anywhere.
I think we can remove this too.
Should we use `config` here, or should we use `state_type` instead?
You should use `config.factory` instead, as it will be a required value.
Would be good to add a `LOG` here
I think we should also do `&:to_f;` here. We can do `&:to_f).to_json %>` instead of `&:to_f`
I would prefer to have a `configure` that is used here.
This is the main change.
I'm curious, why do we have to change the `command` to `quit` here? Why not just do `throw new enums(command, enums(command.getName()))`?
I think you can just do `, string` instead of `, string`
`from collections import OrderedDict` and `import operator` is a bit ambiguous. It is a bit of a big deal, but I'm wondering whether we should just use `sprintf` here.
Is it possible for these to be configurable? If yes, I think we should use the same property.
You should use `finishResolution` here as well.
Why the change here?
This is not right. It will always be `if (field.required)` but the field is `if (!field.required)`
I think it would be more clear if we used `first_name` here
Should we add some validation on the `http` component?
I'm not sure what this does, but I think it would be good to have the PMT hash be a single hash, rather than a single hash, that's the only thing that could be used is for the PMT hash.
What if the file has no file with a file has no file?
This file should be removed.
I think this is a leftover from what I can see, it is not a good idea to have it in the `reward` block.
This change is not related. Please remove.
I think this should be a separate `toString()` method, since we don't really need to create a new instance anymore.
This is a bit confusing, why not just use `runSILMandatoryOptPreDiffPasses` instead?
I think we can get rid of this now, and just use the new helper `section_teacher`
should be smoothingScore(0)
I think we should update `update-bower-json` to use the new `additional-bower` site.
Shouldn't we be using `//` here?
I think we can just delete these code code now.
@matt-gardner Is the `slow` variable really needed? I think it would be better to use `25000.timeout` instead of `timeout: 25000`.
This will be needed if the file is not deleted.
I think it is better to keep the old code and check the error.
why is it no longer needed?
Should we add a note to the CentralBodyBody?
I think this is a breaking change as we don't want to create CommandLine.defaultFactory() in the future. We should either pass a defaultFactory() or pass a defaultFactory() to a different method.
How about `this.hot.countSourceCols()`?
Why is this -1 if it's not needed?
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
Can you move the imports to the top?
I don't think this is the right approach. The tag should be `s.Create`.
I don't think this file is needed, it can be removed from this list.
I think we can remove this method entirely. It is not used anywhere.
I don't think we can assume that this function is managed by default, since it is no longer a valid object. I think we should be checking if the `ismanaged` object is managed by default.
why did you change this?
`original` is a bool so we don't need to do this here.
"This profile will be permanently deleted" sounds like a very fragile thing to me. "This action cannot be undone". "This is undone" sounds like it is a user's choice. "This action cannot be undone". "permanal" is more of an undone.
Is it worth adding a `@SuppressWarnings("iobCobCalculatorPlugin.getPlugin().getLastAutosensDataSynchronized")` constant?
Why is this needed?
I don't see any new code using this. Can you please remove it?
@nickytonline can you check if the context is an object of a remote thread? I think this is not a bug. The problem is that if we are using a single thread, the `invocation.addContext` will always return a single thread. I don't know if there is a problem in that case, we should not need to call `invocation.addContext(cseContext);` on the `TaskContext`. The `addContext` will always be the same.
Why did you add the string string here?
I think we should still keep the `isIE9()` call here.
I don't think you should default to -1 as default to -1.
is it possible that Gradle was using `keybase-1.dev.keybase`?
I think you can remove the First Ping.
This file is now deprecated and should be removed.
Why is this removed?
This is a `ThrowHelper` so we should be consistent.
`tasks` is not the correct name. It should be `files`
This file doesn't appear to be used anywhere
Is it possible to have a test for this?
Please don't change the signature of the variable.
Is it possible that the cookie name is not a valid value (e.g. if it's a valid value)?
Why is it needed?
...but this is not a big deal.
I'm confused by this test. If the template changes, the method name will be `sensitivesensitive` (e.g. `if the template changes, this test will be `sensitivesensitivesensitive`).
Is it possible to use the `text` field instead of hardcoding it in the `utf8/install` module?
This is the bugfix that the `GetValueAsData` call is removed from the argument list.
This should be moved to the baseclass.
This should probably be in the `Users` section, since it is not really used in the `Users` section.
This is a good idea. The `object_uri` resource is a `id` value, so we can't change the `permissions` value. We can do that later.
This is the fix for #239
Is there a reason for using `t.Fatal(err)` instead, but the `t.Fatal` is the same as the other peerID?
@dpmloch why do we need both `rpm` and `etc/shadow`?
Should be 'sac', None, 'Basicfp'
Why was this removed?
This was a bug I removed.
This is the only change that affects the receiver.
This is a bug fix?
How about `c.traceInOp(fmt.Sprintf(fmt.Sprintf())`
This should be split across multiple lines.
Do we need this? Can we just make `isPluginV2` the default?
This is the main change that was needed for debugging.
Does this need to be a string too?
Is there a reason why we can't just use `windows.url` here?
I think we can get rid of these test cases as we do not have any test coverage.
@bparees this is a bit of a hack, since the `<a>` is the same as the `wizard_conn_conf` check above, but I think it's not a good idea to use a `a` here. I think the code should be in `src/main/server/site.js`, not `src/main/site.js`, so it's probably not worth the extra check.
Should this message be conditional on `receive` instead?
We can't use the controller here because it's the default controller.
I think this should be the original OCI field. In the case where we want to have the kernel namespace, we could have the same OCI field as the default.
I'm not sure if this is the right fix. It should be `min_size` instead of `min_size`
I think you can just use `AppendAppendControl` here, as you have the same issue as the other tests.
We can remove `info` here and in other places where `version()` is called.
This should be `import .. ..`
Should the timeout be done here?
I think it should be `update: 'name'`.
Why is `this.setState` needed here?
I think we should keep the encoding in the DB. We can just do `encode!('utf-8', 'UTF-8')`.
I think we should be consistent and use the `Chain.DBPath` function in case it is not null.
This is the change I mentioned above. I'm not sure we should change it.
Please add the `TODO` here to make sure it's not needed.
I don't think we want to set it to the string ``None"``. I think we need to set it to the string ``None"``.
Oh, this is not really a great name. It is better to keep the old name.
I think this should also be `[a-zA-ZZ-ZZ-ZZZZZZZZZZZZZZZZhel[b-zA-ZZZZZZZZZZZZZ_ ..]`.
I don't think this is correct. It should be a string. It should not be a string, so you should use `str`.
this is not needed
Please add `@since TODO`.
@smarterclayton I think this is the only place where I can see this was used, but I think we should be consistent and have the other one with the other.
This should be `six.text_type(value).text_type` I think.
I think we need to add this to `service_config.rb`.
I don't think this will ever be true. I don't think we need to do anything with the old code, since the old code won't be able to be called from here.
`Escape` is now unused and should be removed.
I think we can drop this.
Is this a change in behavior?
I don't think we should change the behavior of this test (db, reqBuf) - the test is not needed anymore
Do we want to keep these?
I think we should delete this method.
This should probably be a constant.
The error message should be "Error saving WebCal-calendar" or "Error saving WebCal-calendar"
I don't think we should remove the `chromeOptions` constant.
I think it would be good to add a log line that the `using NLog;` will be removed.
I don't think this is the correct behavior. The `MapFull` function is called `p.m.Unlock()` and `p.m.Host()`. The `MapFull` function should be called `p.m.Unlock()` and `p.m.Unlock()`. The `host()` method can be called `p.m.Lock()`. The `host` method should be called `p.m.Unlock()` instead of `t.Extension()` and `t.Extension()` are called `t.size()`.
Why are we dropping this? The `1` is already used by the `cancel` type.
This is not the right place to add the `commandStart` option.
can you remove this?
Why `sanitize=True`?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
The method name is confusing. It is confusing that we have the `--no-cache` flag in the path. I would suggest to use `string.IsNullOrEmpty(relativePath)`. The same is for `1` and `no-cache`, and `no-cache`.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I don't think it makes sense to add these new include blocks to `src/server/linuxarm`
Do we really need this to be a constant?
You don't actually need to import this, it will be importedname.
This is the same as the one above.
Why do we need to specify the `json`?
I think the `driver` is not needed.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
@kargakis I don't understand why we need this. When we add the channel to voucher, it will be used. I think we need to add it to voucher in the channel that we need to add it.
I don't see the point of this change.
this is a bug, we need to make sure that the `1` is the number of times.
This is a breaking change as the default value is not required.
I don't see a reason to do this, but why is it a pointer?
I would use `node.parent.statement()` here, as it's not a list.
I would use `Optional[string]string` instead of `%(string)`.
I think we should add `timerSleep` to the other cases where sleeping is not found.
This should be a separate commit
I don't understand why this change is needed. I thought it would have caught this. I think this should be a separate change.
Why are we using LoadPlainYAMLManifests instead of passing the return value?
This is the only place where we need to change the `fromBuilder` from the `ommersHash` from the `Builder` to the `fromBuilder`
Is this the correct default? If not, I'd suggest to use a different default for `0` (and a simple `0`) for this.
This is a bug, because `max_ts` is not always `time.time()`
grpc StubType should not be grpcStubTypeName. Please revert.
This should be `Constants.Trace` and the `Trace` should be `Constants.Constants`.
catchpointWriting isn't used?
could also be `config = True`
Can you explain why this docstring is deleted?
This is a breaking change. We should be able to remove it.
why do you need to add this as a dependency? why do we need to pass the config?
I'd prefer if we could just make the `trustedIssuer` part of the `AuthenticationManagerResolver`
Why did you change the type of `(index)` to `(0, 0, 1)`? It's not clear what the purpose of the size is.
why is this line removed?
nit: can we rename this to `initStoryshots`? It's more clear what the name is
I'm not sure why this is needed. I think we should be able to remove this.
How about `cStorPoolExpansion`?
This should be `!--rpc-allow-unprotected-txs`.
I think this change is not correct, but it's the only change that fixes the bug, so I'm not sure if this is the right change.
This is a bit of an overkill, but I think it's not a good idea to keep the same logic in `AC_CHECK_PROGS` and then just do `AS_IF(..., glibc])`
I don't think it's the case here. It is the same thing as the key name.
`key_name=None, security_group_ids=None,`
This is the change that fixes the problem, but I think it would be better to use relativePath.replace(File.separator, ".").
This should be changed to a more general exception.
I don't see why this change is here.
I think this is the only change that will break existing users.
This is the only change that affects TF TF?
I think you can just do `find_by?(c, '$all, ...)` here.
This should be `get(hostManagers_` (and similarly in other places)
I think this is a good change. If you want to add the tag in the `drud/nginx/nginx-tag.js` file to `drud/nginx/nginx.js`, you can also remove the `tag` tag.
This is not a good reason. The test is failing because `prometheus` was being used in a `prometheus` which has been removed from the `health` command.
`ICoreLogger` and `ILogger` should be `ICoreLogger`.
I think we should remove this.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
I think this should be `sma`
The new column name should be `GetSeqNum`, not `callSeqNum`
I'd suggest adding a new field for this.
@kalefranz @kalefresh what do you think? is the server side effect of having the `apiClient` in the API?
This is the change that fixes the bug. It was just a typo. It wasn't a problem before, right?
I think it is better to keep this and just have it be a constant.
The `_` is not used in the code base because it is used by `Delete`, but it's not used by `./`. I'm not sure how I missed this, so I'd just delete this line.
this is a change in behavior? if it's not used anywhere else we should remove it
I think this is a bad idea, we should have a `running` constant in the docs.
Why do we have both ECSDataVersion and 13 if they have both the sameVersion? Is it possible to have both of them?
This is the wrong place for cryptoSetupServer.
This should probably include a more specific header than 'sles'.
Why `None` here? It's a bit unfortunate.
Do we really need this warning? I think it should be the key. The value should be `nil` if `source.containsKey` returns `nil`
Is there a specific reason why we would want to change these to just `args`?
The other changes seem to be related, but the rest of the code does not seem to be related to the PR.
Why is this name needed?
This is a change in behavior. We should be able to remove this method and use it in the `Class`
I think this should be a `get_screenshot_as_file` method, since we don't have to worry about it.
I think we can remove the return value from here and just use `return (xhr)`.
Can we add a note to the optimizer about what the user might want to use in the future? I think we should just be passing the umask to the repo.
struct is not used
I think we could remove the `getClass` method from the API and remove the `ReachableFiles` action from the API, but this method can be called from another thread.
I think it's fine to keep the Consent string as a parameter, but just to be sure.
remove empty line
This will need to be `slots.stream()`
I'm not sure this `JSON` is a good use of `TTestPeerSource` in `MakeBlockService`? I don't think it's necessary to have a `TTestPeerSource` that is passed in. I think it's better to have a `TTestTest` that has the `TTest`.
I think the original check for `i < src_len - 2` was correct here, and the original check is not needed here.
Why is this %s?
This is the only change that affects TF providers.
>publicLink  [](start = 15, length = 1) I think this should be `internalLink = Component` (instead of `publicLink`)?
Is this a pointer? What about `json.IsNullOrEmpty()`?
I don't think this interface is needed.
this is the same as the one above. You can do `t := "".Clean(tparts[1])` without the `if` condition
This is a breaking change, but it's a separate commit
Can we add a warning here that this is a decode that we expect to decode?
You can use `legacy-holds`. It is not a global var.
How does this work? I'm not fond of having a `c.debug`, `c.debug`, and `c.typeString()` use a `s` object?
This should be a constant in `wf.js`
What is the rationale behind using the `qs.keys` function here? I think we should use `string.spy(..., spyAll)` here.
shouldn't this be 4?
Should we add a TODO to mention the unsupported_property is being added in `memory_usage` and use that in the unsupported_property?
Can we change the assertion to `assert.Equal(t, conf.TaskCPUMemLimit, "Wrong value for TaskNetwork")`?
Why are we using `Object` here?
Could you add an example here? It's a bit confusing.
why remove this?
This should be set to false.
I'm not sure we need to use the `beta` prefix here?
I don't think this is a good idea. We need to add the default value to the namespace, as we'll be now going forward.
What about `--flag-by` ?
This is the wrong place to check for the function name. It's also a good practice to check the function that isExternalFormat. It's also a good thing to check for a simple null value.
This change is not needed.
I think we can remove the unused import
I don't see this being used anywhere?
I don't think 15 is correct. The default value is 10% of the free bytes on disk to be used in the disk cache. I think it should be fine to remove it.
This is the only place where we need to set the env vars to the new environment. This will make the env vars easier. The new behavior is to have the env vars as a parameter.
I'm not sure what this is supposed to do?
Why this function name? It's not clear what the function returns
I think this is not needed.
if you want to use `_` here, it's a bit too long
I'm not sure if we should close listener on error here.
why are these changed?
You could just use `.dup.criteria.only(:_id)` here instead.
I think it is better to just make this a `auto`
The logic seems like it should be done in the `url` method. Maybe just `return ok`?
Should be "itself" or "itself"
This is not required.
I think this needs to be moved to the `System.SetValue` class.
I think `c.Wireguard.EncryptHostTraffic` is a part of the default value, so we should be able to remove the `if c.KubernetesProvider != config.ProviderAKS && c.Wireguard.EncryptHostTraffic {`
This is not a big deal, but it seems like the wrong place to get this.
should be :->
I think it is not needed here
why is this changing from `MESSAGE_TRADE` to `operator_MENU_TRADE`?
split[1] is not a property of the type of the same string.
This was a duplicate of line 280.
why this one is changed?
This is the wrong place to remove the "merged" cell.
I'm not sure we want this to clear on the windowsets? Is there a way we can clear on the windowsets?
This file is not used
what is the difference between `urlencoded` and ` EXTRA`?
Why did you change this?
I don't think you need the `create(:diary_comment)` check here. It will always be `null`.
BuilderForRuntask(...). Add AddTemplateObject(...) to check if it is set
This is not needed
I think this is not the correct way to do this. The `!Response.nil` is in `BAD_REQUEST`.
should this be the default in the `o.LameDuckDuration`?
@johanste this is the fix, right?
I think it's better to move it to the Widget's `Comitekit` package since it's used in the other places in the codebase. The new Widget should be the original Widget.
I think it would be better to use `!Promise.update(kv_, time::WallClock::fastNow(())` instead of `if (returnRange(kv_ != nullptr) {` and avoid `if (meta_TimeMan::update(kv_, time::WallClock::SUCCEEDED) {`
I'm curious why this is needed, why would we need to do this?
Please remove this.
Shouldn't this be `if (true && true) {`?
I think we can just remove this line
wrong import order
This should be a different pull request.
This could be done with `applyPreflightCorsResponse` and `allowAllCorsActions`.
I don't think we should be using the variable, it's not the right approach. We should be using the variable name.
Can't we just use the same `fields_desc` field?
Could be "info" and "finest"
Is this change related to this PR?
This should be `hash_[], hasher.Write([]byte(suffix))`.
This is a breaking change for the API changes. We don't want to make this change in the API review, but I don't see any use-case that is being used anywhere.
The `Bolt::Node::Success` calls are probably not necessary here, because the result is the result of a `Bolt` body.
I don't think this is used anymore.
Can we use 100 as default?
HardKiller is a pointer, so can't we use the default value of `HardKiller`? I think this is the only change needed for this PR.
this is a bug, right? can't we just remove the loop?
I think we should be able to use the `strings.Join` here
I don't think this will work. But I guess the layer should be able to run in an older index. The `has_Exception` should be used to set it to an empty `Exception`.
I'm not sure if it is a good idea to add the `.pyw` arg here.
What was wrong with this? This is only for testing.
Why not just check for nil here?
I think this is not right, we should just add a `MinTimes(0, " ServiceAccount", 1)` to the test so that the calls are not meant to be made only for Windows.
I'm not sure if we should be more precise here, but I think it's a good idea to add this to `src/main` as well.
This change is not necessary. `Filters` is already in the `dvcpc` package.
This should not be necessary since it's an `string` string. It's an `encode`, but the type is `string`.
This log message is not really useful.
logicalVersion should not be used here.
Does this need to be set to `false`?
Please use `import Kratos.models.test.models.zz`
I think we can remove this
if we do not add a null check, then we should just remove the `if`
Is this a public API for the user?
I would prefer to have the `if ($this->getDataSource()) {` as the first parameter in the `if`.
why change this?
Can you explain why this is necessary?
@bryevdv, I think this is a change in behavior, not a big deal.
`fields` is an `Optional`. I think this is a bit confusing since `query` is an `int`.
I'm not sure this is the best way to do it. What is the `statements` attribute?
nit: it would be good to have this in the name, e.g. `enforced.config`
I'm not sure if it's better to have an explicit `DropVXLANPacketsFromWorkloads` or something like that, but I don't see any reason for the `PIPPacketsFromWorkloads` to be a `Config`?
This change is not correct, the only place it's called is `removeTransaction` in the `io.prestosql.spi.compile.AmpAmpAdapter#removeTransaction` method.
This is a little odd. It's a very minor thing but I think it might be a little cleaner to just use the `propagate` function in the future and then use `propagate` in `t.Close()` instead of the interest.
This is a very large function. Could you add it to the docs and add it to the `pid-file`?
I don't think we should be changing the name of this property here.
This is not the right place for this. I'm not sure if it's the right place for it.
I think it would be more readable to use a `Dictionary` here.
No need to be private, because `final` is private.
I don't think this param is used anywhere. I'd say something like "Missing any any not available in "%s" and "the parameter and/or type documentation."
I think we should remove `LINQ` from `io/assets/assets/assets.go` and `io/assets/assets.go` and `io/assets/assets/assets/assets.go`
You can do `options[:options]` here and below
This is the fix for the previous one. The `wlr_layer_surface` is a `surface_layer` key.
`return this.driver()['loadExtension'](path);` => `return this.driver()['loadExtension'](path);`
I don't think this is a good idea. The code below is not the same as the one above.
This should be `hole_host`
I don't think this method is used anywhere?
`Assertions` is a `shared/shared` function. You could do it in a `_shared` function.
This should be set to false in the `if (activity.StandardError)`
Why did you remove this?
I don't see why this change is needed. Also, why is the 20 20 supposed to be used in this case?
This file is no longer supported, right?
I think we need to use `selection_specs` in this case. It is a good practice.
I think you can remove the `a_number` constant from the `numeric`.
It would probably be good to include the `content` in the error message.
I think we can set this to false when we get to clean all the data. This will set the value to false when we get to clean up.
Why not just make this `if3_1`?
Why do we have to set the `Long` field in this case?
I'm not sure if this is a good change, just want to make sure.
Is this needed?
This is a good idea. If you're not going to use the valid valid installation of the valid installation, it will be good to use a valid installation for this. The idea is to have a simple `parquet()` method that takes the valid installation and pass the valid installation. The value is not a valid installation. I'm not sure if this is correct, but it is a good idea to have the default value.
I'm curious why you changed the logic here. I don't think it makes sense for `pushObject` to be called for `fetch` (or `fetchPrivate`, but it's not the responsibility of `pushObject`). I think it should just be called after `promises` (which is not what you're doing in the first place).
How does this change help?
Is this include needed?
Metrics/LineLength: Line is too long. [98/80]
I think this is not the right place for this. The `original_twitter_digits_path` is already part of a local file. It's not a part of the app app but it is a part of the app app. I would suggest to move the `init_support_path()` to `lib/twitter_digits.rb` file, that way it is not a local file, so that it is easier to understand if the app is the same, but the app doesn't need to know about it.
(style) line over 80 characters
Shouldn't it be `bolt_project_state`?
This should be `string` as it is.
why remove the `res`?
is this the right way to do it?
I think this should be `import-peak-boundaries`
I'm not sure if this is a good idea. It's not a big deal, but it might be worth to use something like `download_report_content`.
This is a breaking API change. If the `slots` is not set, it will be set by `pipeline.stream()`
This should be done in a separate pull request.
I don't see this in the code, can it be removed?
I don't think we need to force force this to the `l` struct, since it is an instance of `l.Pointer`. I think this is a good thing to do.
Can we make sure we don't have any unit tests for this?
I think it would be better to move this to the `oldUnmount` function, and move the logic to the `oldUnmount()` function.
`indices` could be nullable
I think it would be cleaner to call this `source.data.update` instead of `source.data.length`, and then use `update` here.
You can probably just put this into a `before_action` callback.
This should be done in `src/server/core/types/types.go` and not in `src/server/core/types.go`.
Why do we want this to have the default value?
I think it is not a big deal but we should be using `!=`.
Is this used?
I don't think this method can ever be used.
Why is theOperationDisplayString removed from here as well?
This line is too long.
Is there a reason why you changed this?
I think we still want to test the environment, so we can't use the environment anymore, right?
I'm not sure if it's worth adding an assertion here. If the pathParam has no effect, it is not valid.
I think you can remove `// return` now that you are returning `false` in this function. You don't want to return `true` in this case.
Why is this being removed from this PR?
This is a bug, right? The code below is just about `(1, 0)`.
is this a regression?
I don't see any new code using this
I don't understand why this code is not needed. The code below does this, so it's not clear to me why this is necessary. It's just that we're not doing this in the code anymore.
I think we should use `bool FastSync { dimension }` for the default value.
should be be a `accept`
This should be done after the call to `proc_num_simd_saved`.
I think `dag_file_exists()` should be in a separate line (and the line above it) rather than in a single line.
why did you remove this?
why are we adding these?
This will probably be easier to read if the length doesn't match.
This is a breaking change. If an AST attribute is only used for the AST attribute (as it is now used by the new `ResourceAttribute` class), then we could just remove the `ASTAttribute` field and just have it private. If we want to change it then we could also remove the field and delete the field and just call it from `p`.
This was the only place where we can't use the API for the paramInits, but we don't need to do that anymore
It looks like we are using splitTableRegion. Is there any way to split the table from the split table, so that we can split the table?
This is a no-op, but the new tests are failing.
I think we should only be checking if the block is not `==`
Should be reverted.
This line is not needed.
I think this should be a `protected final`
Remove empty line?
This should be removed.
How about we just change this to `""`? It would be more readable.
I think this method is not needed. `deleteElement` is called multiple times in this method.
I don't think we need to do this. The code is that we have a lot of different things to do, and we should be able to do it in `password.Field`, not in `password.Field`. The only way I would have expected the actual properties in the `""`, is that we have the actual properties in the `""` file, which is where the key is the name of the field and the key is the name of the field and the key is the name of the memory.
I don't think this is the right place for this.
why remove the whole if block?
This error is not needed.
If the exception is logged at the end of the line, then it will be logged before the log.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
why do we need to cast here?
I think it's better to keep the old list and use `IEnumerable` instead of `IEnumerable`.
The `tree` can be removed now, right?
I think this will be a little confusing if we have a app.db.ObjectID(appId) then we will have to delete it.
@becker33 This is a breaking change for #4029 and #6040
This is a wrong value for the Solr manager.
if value.pivot is not None, this is the same as the `if` condition below.
Line is too long. [81/80]
I'm not sure about this - `setDismissText` should be called from the `setTouch` class. I think it should be called from the `getUpOnTouch` class, which is called from `setDismiss`, not here. The `setDismissText` method is called by `setUpOnTouch`.
I think this is a bug fix. If the problem is with the `UpdateSpan` that is not null, then it should be a `UpdateSpan`
nit: remove empty lines? (not a big deal, just a few style)
do we need to set this as a property?
I'm not sure this is the right place to put this. This is the only place we need it in this function. I don't know if it's a good idea to add a default value for `createSenderResources`
I don't think this is correct. The `Beta` dot is not used in this PR.
This `<returns>` is a bit confusing. It's not clear what `<Async>` does. It's a subclass of this. It should be an `<Flush>` or a `<Flush>`
I'm not sure if this is the right fix. The only difference is that the `self.obj` will be `None`, but the `obj` is `None`, not `self.obj` (which is the only way for the tests).
I think we should keep the original behavior if we're going to use it.
I think we can remove this constant now that we're not changing the code.
nit: we could return null here
This is the only place where I'm seeing is being used.
I think we should keep it in the same package as `libkb`, `libkb.com`
This is the default, right?
This is not right. `erase` is a `attackedSet` is the same as its `attackedSet` instance. I'm not sure what the right thing to do here is.
I think this should be `<=`
I think the `scripts` field is not required here, right?
Is it worth adding the `driver` field here?
I think we can just remove this interface and just call the interface.
i don't see any benefit to having a separate variable for `missing_text` in this PR. I don't see any benefit to having two variables, so I think we should just use one of the variables in a single method.
This will cause issues on every request.
I don't think this file is needed, the `Word` dependencies are not used in this file. The file is not used in the file. You can use `Word` to get the file from the `element` dependencies, not the `element`.
This test should be moved to the `test.py`.
I'm not sure this is a good idea. It should be `m.Get("/constants")` instead.
Can we change this to be `Perhaps `map[string][]string`
I don't think 6 is an object, so 6 is an integer, so 6 is a max.
This should be `EventEventEvents`
This is a very large number of tests. I would expect the same behaviour to be done in `getPartitionIdPerPattern`
Use && instead of and.
This is the only way I see we're making a copy of the `serviceDefinition.Host?.EqualsIgnoreCase(..)` property. I'm not sure if it should be a copy of the `Constants` property.
why do we need this? node is a temporary node?
I'm not sure why this is necessary, but it looks like the commit is still using the `AnyTimes()`
I think this test was failing in history history.
why not using timer.kind instead of timer.
I think we need to remove the `AppDomainFixedOutput` attribute here too.
I'm not sure if this change is really necessary
Should we add a new column for this, or is it just for debugging?
This is the wrong place to put it. It is used by the client and it is not a valid server.
It's not clear to me why we need to change the name of the `upperCamel` to `String apiTypeName`, but the other way around.
Can we just remove this from `CanCombineWith`?
@smarterclayton do you think we should use `storageclass` instead of `single-replica` here?
Since LibuvFunctions is used to hold the file, should we add a TODO here?
This is a bit confusing, as it's not used in the `User` model. Maybe it's better to just use `Save_UUID`? It's a bit confusing to understand the name of the code.
Who calls this?
I think this can be removed now.
I'm wondering whether we should have `config_path` in `config_path.py` for this. If we want to make it work with `config_path`, then it should be `config_path=dict`
I don't think we need to flattenedTree here since it is not being used by the frame. Instead of using `flattenedTree.iframe` I think we should just call `#flattenedTree` and use that in the frame instead.
This is not the right way. The ConfigModel is called from config to config. Why is it needed?
I think we need a unit test for this
I think you should be able to remove this
Is there a reason for this change?
Please add the `#include <stdio.h>` tag to the `spawn.h` tag.
The name of this function has been mismatched. It is a little confusing to have a function called `pa` that has been updated to use for the `time` function. I think it is a little confusing to have this function in a way that does not make sense to have it as a parameter.
Just to confirm: this is the correct way of writing the permissions to the user?
`options.beforeHandshake` was always `true`.
I think we should just remove `Apply` and `HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas
What happens if we have a local path defined in the `identifier` package?
This is a bit confusing, as `composite_root/root` is a composite root, and it's a composite root, so we can just do it inside the `if ... else ...` block
This is a change in behaviour. We need to make sure we're not running this with other languages.
Just a thought, when did `Number` primitive or object. Zero is considered negative.`
Is this a change in behavior?
Do you need a check here?
This is a breaking change. It is a breaking change.
Can we use `PERBreakerThresholds`?
why is this changed?
This is the only change that needs to be done by the new way. I don't think we need to change this here.
We should remove this once main is complete.
algod import is no longer necessary, can you remove it?
nit: can you revert this change?
This is the only change I'm not sure about. The only thing I'm concerned about is that `pattern` should be used in the tests. Is that intentional?
This was not a bug
Is it possible that size == 0 and size is 0? If so, this will make the code easier to read.
I'm not sure why we need this.
Why did this test not catch this issue?
This should be `public static const`
@normanmaurer I don't think it makes sense to have a `LowestInsertedHeader` property in the config instead of passing it to the constructor
The `private` class is unused.
The intention is to remove the reference to the whole block, since this is only for testing purposes.
This is the only place where we can remove this field. I think it's no longer used.
so we're using the same value as in `xaxis`?
Nit: I think this import can be removed from the list above.
This is the main change. It's a little bit weird to me. It seems that the `is` function can be `int` and not `int`.
It seems like this is not the only place where we should have a single metric. The only reason we have a single metric is that the metric is not the same. Can you make the values more explicit?
Can you add gcp.join to the docs?
I don't understand why this is needed. If the chain defaults to `chainID`, the chain defaults to `chain_id` or `chain_id` are both the only version of the chain. The chain id should be `chain_id` and the chain ID.
I think it would be cleaner to move button[type=submit"]' to the top of the file.
Why is this needed here?
Should we make it configurable instead?
This is not the best way to go about the OSIDOSEnv mode, but it's a bit confusing to have a variable that is used in `BuildIDOSEnv`. It would be nice to have it in `Build.js`
Why has the logging level been changed? I think it's the right behavior. The reason this has been started is because we want to show the error message in `test_test.py` and not the "has started" message in that case.
Is it possible to remove this file from the PR?
Can we move this to the `const`?
No strong opinion, but it seems like we should be using the message here?
This should be a call to `onTrigger`
I don't think this is needed, it can be `public`.
Shouldn't we use the same value for both new node and new node?
I think we should also check if the role exists.
this is not correct. The `Tracer` function is already called in `server.go`.
I'm not sure if this test is correct. It should not be here, but in `test_reusable_test.py`, it should be called before the `self.assert_eq(kidx, pidx)` call.
This is the only change I'm not sure. I'm not sure if this is the right fix.
Why did you change this ?
I don't think this is correct, if we call `containerID.lockContainer` then the `containerID`, it will be `true`, right?
Should be a `@php` instead of a `Exception`
Do we really care about `25` here? If so, we should probably change it so that it can be a separate PR.
what about `for _, _`
`executorService.shutdownNow()` can be replaced with `WebDriverService.shutdown()`.
`new HiveConf(HiveMetastoreTest.class)` can be replaced with `HiveMetastoreTest.start(new HiveConf(HiveMetastoreTest.class))`
sr & protocol are not used anymore, right?
Is there a way to avoid adding these extra lines? If so, we can just add them if necessary.
"immediately fail unless value is not zero" -> "immediately fail unless value is not zero"
I don't think this is the right fix.
This doesn't seem right. You're using a memory on the wrong VUIDs, so you can't just remove the whole block.
This file is unused.
I think the unused import is unused
This is a leftover, please remove
This should be `timeoutControl.BytesWritten(minDataRate, maxBufferedBytes);` but that's not the case. It's not the same as the other timeoutControl calls, but I'm wondering if we should just use the default value here instead of the `maxBufferedBytes` (and then call the method `maxBufferedControl.BytesWritten(maxBufferedBytes)`, since the value is not the same as the default value, and we can remove the timeoutControl.
I think it would be better to use `prev[key] = {` instead of `prev[key] = {` (or similar) as above.
No strong dependency in imports.
This is not right, if we get rid of the log block, we should log the whole block.
I don't think this is the correct place to put this.
Line is too long. [87/80]
`NamedList` is already imported in the `if` statement.
This method should be called `return` and the next line should be removed
Why did you change from `pulumi up` to `pulumi up`? It's not a subset of the eth interface.
We need to ensure that the Clump attribute is not updated in this controller, but it's an implementation detail that we don't have a user provided one.
Is it possible to keep the `config` tag around as well? I don't see any other fields like this. The `ControllerManagerConfigurationSpec` is used by the new config.
I think this is the only place where we need this check. I think we can move this check to `go` in `CreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreateCreate`
This is a good place to put it in the `else` block.
This is the wrong place for the import-type import
Please don't change the signature of `DiskGroup`
@deads2k do we want to use `default` here as well?
`editor.apply()` is a copy of the commit and not a `editor.commit()`, so I don't see a point of doing it here.
I don't think we can set the `nil` here. I think we need to change `findfindfindfind` to `false`
This should be relative import.
nit: missing space after ` ` ` ` ` ` ` `
clip is not used, please remove the `if`
This seems like something we could just make a `defer` statement.
You need to use `===` here.
I think we can just use `unless` instead of ` #{quiet_o`, right?
This is the only change I found in this PR.
This should not be needed, as the `query_args` option is already in the `get_query_args` method. The `get_query_args` method is used to determine if the args were not present (even if they are empty).
This should probably be a `defer` statement.
This should probably be added in the `src/server/server.html` file
I think it would be more consistent to just use `self.name == 'index'` rather than ` index_info`
I'm not sure if this is a good idea. If it is a good default, it might be good to have a test.
I think we can remove the `tag` tag now?
The `# disable` should be removed.
Is this necessary?
@tnozicka do we need to keep the `dead` arg here? I think it's fine.
I'm not sure why this was necessary, but it seems like the only change I made to this change is the default.
I'm not sure if this test is correct, but if we're going to run into issues we might want to stub the stub for success color, but I'm not sure if it's worth the effort. I'm not sure if this is the best way to stub the stub here. I'm just curious if it works.
This is the actual fix. We should not be using it in the `coin_cash` environment.
This should probably be `True` instead of `True` for `on`
I think you can move the `Resource` method to `Stream.go` and remove the `Stream.go` interface here. It's not really related to your change but it's just a question.
Can you add a `if ($cart->isEmpty()) {` check here?
We could probably just use `getLiteralFromTimestamp` here and use a consistent naming for the other types. Also, I would prefer `LITERAL_FIELD.get(leaf)`
This test should be in `TestCase` now right?
This should be removed as it is not used by the `101POST / 2.1`
I'm not sure if this test will work without any other tests. I would expect that the user to be able to run `tests/v1/tests.py` and `tests/v1/tests.py`.
I'm wondering if it wouldn't be better to just make this a `static const`.
I think it would be better to use the `err` in the context of the `State` and `rContext`.
Please add the unused methods to `createBlock` methods.
I'm not sure this is necessary. I think it should be a full file that has a manifest file, not a string, not a file.
I don't think we should be changing this.
I think this should be done in a separate PR, but if we do, we could just make it a part of an `parseChecks` in case the tags are not configured.
This is the only place where we use the `update_policy` parameter. Maybe `incoming_up`?
I'm not sure this is the right way to fix this, but if the window is not present, then this should be `_window = window;`
This could be a separate `selector(props)` call.
I don't think this is the right place for this check. The only place we need to check for `?? false` is the default. If we don't want to check for the default, we should check for the default.
Is there a way to make it work with a `--build-system`?
I think this # coding: utf-8 should be (c) (a) # coding: utf-8
I think this is a typo?
This change is not related.
This is a change in behaviour.
This is the only change that affects TF providers.
This test was not testing provul in unit-test.js. We should probably test for provul.
This is not needed.
I think we should use `create_database` in the `DBClient` method.
We should make a copy of the error and use that in the error message instead of the hardcoded name.
`validation_set` is not really used anywhere?
nit: update copyright year in header
Metrics/LineLength: Line is too long. [122/120]
This should be `stream`
I think this is a leftover?
`model.schema.base.options.strictPopulate` should be `null`, not `model.schema.base.options.strictPopulate`. I would suggest `model.schema.base.options.strictPopulate == false` and then `options.strictPopulate == false`.
I don't think the `Builders.Build.A.Block.TestObject` is necessary, since the first test is not running on Linux anymore.
` preserve_backslash` is a bit confusing, how about `Ests_e` instead?
I'm not a big fan of adding these to the service API, but I'm not sure what this is for.
I think this change is not necessary, the original code already has a `ManifestReader<File>`
This line is too long.
This import should be removed.
I think this method name is confusing to me. What about `stream == null`?
I think we should also make these constants constants
Nit: I think this change is not needed.
should we rename this to something more meaningful?
I think it would be better to just use a `violations_tablename` (which would be the case that the list of violation is not empty) and then we could use the correct `too-many-format-args` (which would also be the case for the correct violation).
I think this is a good time to fix the test suite. It will be nice to have some tests to cover the test suite, too.
I think it's fine if you don't have to do this, just add a `return` to the output.
I think we can change partitioned here to replace num_parallel_readers with a num_parallel_readers (see line 218 above).
I don't think this change is required, it's only a part of the `Old` package.
Hmm, I'm not sure what the difference between these and the two. I think the `     ` is fine, but it seems to me it should be the same as the old version.
please remove this
I'm not sure this is a good idea... I think we can remove this, it just seems to be used by the tests.
Can you use `cli-input-yaml` instead of `cli-input-yaml`?
this change seems unrelated?
Why is this import needed?
Why do we need to store the `RuntimeException` and `local`?
Can you make sure you don't have a valid `msg.Data`? I think it's a good idea to avoid the use of this variable and just pass in it to `msg.Data`.
I'm not sure if we should do this - `len(country) > 0` seems like a reasonable default.
I think this is a bit of an overkill. The QSignalMapper has already been set in the `QSignalMapper`.
This is a breaking change, I think it should be moved to the `stopGPGAgent` package.
I think this is a breaking change. It should not be possible to have a `URL` class that will be called in proto. Otherwise the protos will not be called. In general it is not a problem, because the protos will be called from protos.
I don't understand why we have a `user` param here. I think we can just `reason` since that's what we expect to see if we don't want to use it.
This class is only used in a single file. Could you move it to `Catalog.js` and move it in this file to `utils.js`?
This is the fix. The `wrap` function returns a `handler` anyway.
Style/ClassVars: Replace class var @@link.
This will break existing tests. I think the old test would fail with this PR
I'm not sure this is the right way to do this, if the topologyDriver is a peer, the name will be updated to match the other services.
Nit: This is the same logic.
I think we should be able to use `conform.g.,.h` instead.
This should be in a separate PR
I'm wondering if we could just remove `fixedWidthBinaryBatchReader` altogether.
`Content-Type` should be `oauthoauth`
@bartonjs, this should be `_pin = False`
This is not a part of the "HeadLess" name, right?
Why is it not a big import?
@alexander-schranz should this be a local var instead?
What about `GeneralGeneral`?
Is it possible to remove this?
I think we should not have virtualTree in virtualTree.
The old version was correct, but it was not launched with `mdcache.Delete`...
Is it possible to avoid this kind of exception?
I'm not sure if this is needed. The `config` config is used to pass the ExSA in config, so it should be able to pass it in.
this should be `currentPlayer` since it's not a `Try`
Align the parameters of a method call if they span more than one line.
I think this is not a valid fix, right?
I think this needs to be moved to STATE_KEY_WAITING_FOR_ATTACHMENTS
`GoldenRetriever` is a `core` instance, not a `core` property.
We should probably make this a constant so we can make it clear that this is not used.
Is this `nil` check necessary?
I think it would be cleaner if we just always use this function.
Extra empty line detected at body beginning.
can we make these tests fail?
@deads2k I think we need to keep `pkg/util/slice` to keep API simple. I don't think we should be using `pkg/slice` here.
This should be on a separate line, right?
This should be done done in `realmConstructor.Object.prototype`
I don't think we need the `NULL` variable here, it's redundant.
Why is this needed?
Do we want to make it part of the UI?
@jridgewell I think we should change this to use the Trinket M0.
Is this needed for the `<`?
This is the same as `start_to_index_map_` and `start_index_range_map_` are used in both cases. I don't think it matters much but I don't have a strong opinion either way.
I think we should use `find_by` here instead of `find_by_class`.
Why not `AssertEx.Is(importPeptideSearchDlg.CurrentPage == ImportPeptideSearchDlg.Pages.match_modifications_page);`
Is this a bug fix? It looks like it is not used anywhere, and should be removed.
I don't see any reason to change these?
What do you think about using a more descriptive name like `validateStatus`?
Can we remove this?
I think this should be `static const`
Extra empty line detected at block body end.
This record seems to not be used.
I'm not sure this is the right fix.
Can you use `NewScanner` here instead?
Is this the only way that the connection will be triggered? If it's only used once, should we remove it?
The data type of each column.
I'm not sure if this is correct. If we are going to do it in `make identify`, we should just add it to the `ctx` list.
No longer needed?
This is not a good change, but it is a good idea.
I'm not sure what the reason for this? It's actually a PCAP file, but the name is a bit misleading.
I'm not sure if this is the right place to add a source for a non-null source. The reason is that the source is not in the source of a non-null source, so it should be fine.
I think we can also remove this `lvis_v1_instance.py` and just use `spack url_base_`
You should be able to use `<LS>` instead of `<LS>` here.
Can we also add this to the other `DefaultAspnetRouteTemplateResourceNamesEnabled`?
Is this used somewhere?
I think that this will break if the bb->stop_pc is not None, because if the bb->stop_pc is None we don't need to check if the bb->stop_pc != 0.
Why are we adding these types types types? Can they be exported?
`baseVal` is a `null` value, so it should be `null`.
Why is it a port port port? Should it be named as `config:"portrange;;local"`
This should be `witers_.insert(guid_aux, dei));` since it's the same as `wit`.
Would it be better to use a `ctx.TYPE_TYPE` here instead of a `iff`?
Why are we using `LicenseAdmin` in this controller?
This is a change in behavior for a while, but the tests are failing because they're not really using the same name as the first name.
Should this be a `@since TODO`?
I think this test needs to be updated to reflect the change.
Why are we setting this to `bool` if we are not using it?
Why not just using $aliases instead of just $sortFieldParts[0] ?
I don't think you want to remove this. If the identity has been removed, then you can't remove this.
I think this needs to be moved to a place where `ListEvents` is `nil` and `nil` is being passed to `New` in.
this test is not testing anything.
Is this necessary? I don't see any use of `binlog` in `build-system/pulumi/build-system/binlog.js`, but it seems to be a good idea for it to be consistent with the other tests.
This should be `_get_url()` to match the rest of the function.
I don't think this will work. The problem is that we are making a lot of duplication and are 10s of the blocks, which is the only problem that we are using. I don't think it's worth it. The only problem with the rest is that we're using the rest of the blocks, so it would be good to make a change in behavior.
why 0?
I'm not sure if this is the right way to do it, since it is only used in the `run-as` mode?
I think we should remove the other `gosql-bigquery` imports
Was this change intended?
This is a change in the test.
Use `subscribers_` and not `subscribers_`
Who is this include needed?
I think this should be `_class_form` or `_form_url`
This file is not used anymore.
Just curious: why do we need `onCompletedCalled` for `onCompletedCalled`?
I think we should just use the `base` and `ReceiveProps` types instead of the `component`
This needs to be `_` for the `user_guide` too.
This will fail on windows if the enum isn't found. The `Encoding` enum is missing.
Use the new Ruby 1.9 hash syntax.
What is the reason for adding this class to JavaProvider?
In other parts of the PR I think this should be `countly.events.views.js`.
This should be done in `ax.all()`.
This function should be called `self._bump_timestamp`. It's not clear why it should be used here.
This is a `MemoryDiagnoser` but is no longer used.
This would be a good idea to have an idea about how many other places we have the same kind of function, if they are not really part of your code.
Why is this removed? I don't see any use of it.
I think we should be consistent about how many packages use the same imports. The same applies to other `protobuf` imports.
Can we rename this paymentChannelCmd to paymentChannelCmd? Like "paych"
This should be done in `fromHexStringStrict`
this change is not related with the fix, but it is not related to the bug fix
Should we also check `prefixAsNibbles.nullable.HashLength` here, if we're going to return a non-zero value?
Why did you change the flow now?
Please use `InitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitializedInitialized.java`
This is not needed. Please remove it.
This should probably be `byte{0, 0}` I think.
`info()` is not used in this method.
I think this is a leftover from what I was trying to do. I don't think it is used.
`isHydrating` -> `isHydrating`
I don't see this used anywhere?
Is this copy copy needed?
Can we just return `false` here?
This file should be moved to line 62.
This should also be changed to `cfg.EnableProcessStats`
I think you can remove the `test_reporter` call here, because the linting logic is now always set.
This is not the right place to do this. The init is just a string, and we don't want to do that.
This is not the right place to put this.
I don't think this class is needed. UnsynchronizedStaticMessageDigestRule should be UnsynchronizedStaticFormatterRule.
I don't see why we need this `Keccak`
Can we use the existing hash syntax?
This should use a `char` to avoid the double slash.
I think we can remove this file as it's not needed. We can just remove the file if the file is already created in the `prefetch` method.
Should we have a `.map` or `.mod` for this case?
I think this is a better place for this. The `printWriter` is already a list of properties of a list.
This was a bug I had to make it work with a `.` or `.` but I don't think it's a problem for a reason.
This will be very unfriendly to the PR, I think we should be able to remove this.
This was removed as it is now unused
This function is no longer defined in this file, so can be removed.
nit: can you revert the change here?
Is this necessary?
What if we just put the `accountsInOrder` inside the `if` ?
I think we should just remove this.
I think we should be using a more specific name here.
Do you want to make this an option?
Why are we not using `current tag` anymore?
This is the only change I found in the PR.
I'm not sure this is a right approach. If you want to do this in a test suite, I'd rather see a `setupDev := true if /dev needs to be set up`
I would suggest to name this `config` or `config_binary_Consistency_menu` so that it is clear what the help text has and what the name of the file is. It's not clear what the name does and how it is.
I don't think we want to keep receiver here. I'm not sure we need the issuer. If I'm not wrong, it might make sense to have a method called `BalanceTracker` that returns `receiver` and return a `BalanceTracker` instead.
should we remove this?
If we're not going to be doing any of the `*` in here then we should just return 0. Is this the right thing to do here? I don't think we should be changing all of the other `*` methods to use the new `baseIntrinsicGas` logic to return the wrong value for all of the other `baseIntrinsicGas` implementations.
I think we should be consistent and use the standard `join_EXP_MINUTES` function.
I think we should be using the `int` here.
The `cs.dirty.CAS(3, 2)` is equal to `cs.dirty.Load() < 3`.
Is this necessary?
This should be a part of the PR. You'll need to revert changes to the imports and go back to the top of the file.
Why is this typeWidth? It seems to me that it should be only called from one place. I think this should be called after the other is created.
Can you change this to `encryption#fillfill`? It seems like it will only be used in the `encryptedSerializedDataSize` table.
I think this should be `>=`
I don't think we want to remove this
I think this should use the `proto.Consensus[protocol.ConsensusCurrentVersion]` variable instead of hardcoding the variable name.
Do we really need to make this change?
You can't use `string errorMessage` directly.
I don't think you should be passing a `Client` directly.
Doesn't this mean we have to change ` vmultiplier` for all these values?
This should be `URL` for consistency.
this was the bug, I don't think it was needed
Why not just call `ReactiveAdvice`?
`string`?
I don't think we need this.
This test is no longer relevant to this test?
You can use `WPSEO_redirect_redirect` here
This is not a good name. It is not really a "DataType" but it's a little bit confusing. Maybe "DataType"?
I think it would be better to just set `render` in the `try` block above, since it's not doing anything related with it.
If `bundler` is not used in this file, should it be removed?
I'm not sure about `getResourceType` and `getResourceReference` here. It's a bit of a hack, but it's a little hard to read.
This is a bit of an unrelated change.
I'm curious, why did you remove the combatPtr from the name of the method?
This was removed from the previous commit.
I'm not sure that this import is needed, it should be from dagster.seven.abc import While I recall correctly it should be from dagster.seven.abc instead of importing from dagster.seven.abc.__init__.py
`Sdk` is not used.
`t.ColMeta[idx] == nil` is the correct fix.
The requirement should be in the `Symfony_media` folder.
I think we can move it to `ROLES_CLIENT` so we don't have to pass it to `serviceAccountTokenCreator`.
This import is unused and can be removed.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should we import github.go from github.go?
@lilleyse Should we change this to `on`? We do a similar change in #6026, right?
I think this should be a separate pull request.
This is not needed, `mortbay.util.JSON` can be deleted.
This is not right. You are adding CommandDirect to the client. You can just use CommandOperationV2.get(), which I think is what you want.
This is the only place where we're using the status code, but we don't want to use the `key` status code here. I think that would be a problem since it's a number of places. I think it would be better to use `key` instead.
Line is too long. [93/80]
This should be `# mangling cases in`
How about we do this in a `BaseElement.Get` and `ValueElement.Get`?
It's not clear to me why we need to `require.fromhex(pubkey_hex)`. It's not important that `require.fromhex(pubkey_hex)`, but it's the type of `fp_bytes` which is the type we're using.
This is not a good place to put it.
I think it would be better to use `return` rather than `if` and then use `return` here, and check for `return` if it's needed.
Not sure why this is necessary.
Would be better to make this function `setScopeListener` and then call it `setScopeScope` for consistency.
This is a breaking API change that is needed. The test was passing because it was not passing locally and the test was not running the old refs.
Line is too long. [86/80]
`Mvx.Resolve<IMvxChildViewModelCache>().Cache((MvxViewModelInstanceRequest))`
This exception message will be useful in case of failure. The failure messages are in `TestCase`.
shouldn't this be the first one?
I think this should import only if you want, right?
I think you should use the same `System.out` class.
Do we want to move this code into the node node? If the node is not enabled, then the node can only be enabled if the node is enabled.
Why did you change this?
I think it's not clear to me why this is correct. I would have expected it to be `@typescript-eslint/eslint/recommended` but I don't see any recommendation in that.
Maybe we can say "This value is zero, this value is set to 30 seconds."
Is this not needed anymore? I think it should be removed from the file.
I think you can remove the `transaction` variable from here as it is not used anywhere else
I think we should remove this and use the new one.
We should use the `setSelectedElement` method instead.
This is the same if `log.Info("detected private key, certificate.new(logf.Info))`
Is there any particular reason for removing the `to` at the end of the string? I'm not totally sure if it's worth it, since it's a `cast` at this point?
should we make it configurable instead of hard coded to the number?
I think it is better to use `map[string]*SidecarConfig` instead of `sqlConfig` as the default.
I'm not sure this method is used anywhere, is there any reason not to just make it `Integer`?
I think this should be `this.billing.actions`
`set `suspended: true` -> `wasHydrating` -> `set `suspended: true`
This is a debug debug output. It is used in the `log.url` function.
This is the only change in the PR that fixes the issue.
I think it's better to use `const`
The call to `Doc.RevisionField` was removed because it was not checked anywhere else.
@ramramps these are the changes to the `master` are not related to the PR.
`*` should be the same as `latte *`.
I think this can be removed
This test was failing because `nullMock` was not being called on a non-null table. It is also possible to use `nullMock` instead of `null` to avoid the correct `null`.
Can we have a context.Context to pass in the block and including it?
this is the wrong way
This should be changed to `os.environ`, right?
I think you can remove this else block, it's already there.
This should be `--blacklist` (and the other ones, `--none` should be `true` or something)
Why is this change required?
any reason why we can't just use `count` here, and not `count`?
nit: remove extra lines
This doesn't seem right to me. The `target` flag is in `config.Target`. The `target` flag is only used for the `config.Target.Triple` file, which is the only place where we need the `config.Target` option.
I'm not sure if `results` should be a `common.AuditRPCWithTypesStatus`?
Should this be const?
This TODO can be removed
I'm wondering if this should be `final`
I think this can be replaced by `!to_string()`
Should we use `0.6s` instead of `0.6s`?
I'm not sure why we need this. The async async call is already in `m_userWriterList`, and it's in `m_userWriterList`, so it's only used once, so it's not necessary to call `async_thread` here
I think this is a bit confusing. `ASTAnnotation` is used for `lombok.NoArgsConstructor` and `ASTAnnotation` is used for `parent`. `NoArgsConstructor` is not used for `parent` and `NoArgsConstructor` is not.
The `location` function returns `i.interceptor`. It's a bit odd. It's only used by `location`, but the `location` function is not being used in the `location` function, so we should just use `location` directly.
This is not the best way to go. The `QueryElevationParams` class is not used in `org.xml.QueryElevationParams` so the Params can not be removed.
This is a bug fix.
I don't think this is the correct solution. It should be `5.7-3.8`
@martint This is the reason why I had to change the `antreaSourceStatsElementList` to `ipElements` but I don't think this is a good change. I think it's better to do `if (end('antrea') == 'ipElements'`
This is a bug, we should probably use `num_simd_saved` instead.
Why are we 1.1.0?
` required_subject` -> `unsafe`
nit: remove new line
I would prefer if we could avoid this function.
I think we should be able to use the `DEFAULT_root` constant here, instead of importing it from `DEFAULT_root`.
I don't see a need for this, the present can be removed. Also the check should be before the check is present, not after the check.
This is not a controlplane right? It should be a `*` instead of a `*` (not a `*`).
It looks like there's an extra `gcnArch` at the end of this line that is passed as an argument and there's no default one.
I think we need to keep the original URL for clarity
Can we make these properties defined in `src/dev-server.js`? It's not used anywhere else
I think this is the only place where we use this value for all url url url. I think we should use the `--` flag instead.
I don't think this is needed.
Are you sure we want to use ServiceKey and VersionKey to be consistent with the other uses?
This should be done in the `is_api` check below.
This one is not a good example of why it was there in the first place. It is a bit confusing to have a `'media` attribute.
I'm not sure if this should be `self.assertEqual(1, len(rules_engine.rule_book))`
Probably should be changed to `<=` instead of `<`
This is the wrong place for the kfile. The `populateVersion` call is not needed.
`exp Details.getAddressDetails` is only used for getAddressDetails, not just the name.
Is there a reason for this change?
I think we should at least call `transaction.Wait()` here. I don't think that's a good idea.
I think this method can be private, since it is no longer used.
We should be able to remove this `else` statement. The `MetricKey` is not used anymore and it is used in a different file than `if (isNullOrEmpty(new Resource()) {`
I think we need to keep the old property for the `DEFAULT_SCHEDULE_END_0000`
@sayden FYI, this is not needed anymore.
This is not a valid value
I think we need to do this after the `foreach`.
What's the plan for this TODO?
Could you please also change this to `info` and `finest` to `info`
This is the only place where we need this method.
It would be nice if we could just use `s.Selectors != nil` here. It would be nice if we could avoid the `if s != nil { ... }` check in the future if we don't want to do it.
Why is this needed?
I don't think this is needed.
getStandards() is deprecated, could you remove this line?
I think this should be `irregular_dims = True`. The default value should be `None`, not `'[]`.
I'm curious, what is the motivation for this?
If the space is not split across multiple lines, can it be removed? If so, can we change the space to `padding`?
This include should be removed.
This is not the right way to fix the issue. The `alt` part should be removed.
Please don't remove trailing whitespaces.
Use the new Ruby 1.9 hash syntax.
Should this be `public`?
I'm not sure if we want to always have a `alwaysOk` as it's a `has` check. I think we can do it with `isAllHealthy` and use that instead of the `alwaysOk`.
What about `/schedpolicy/{name}"`?
Why is this default true?
Is it possible to have a `secure` flag? It seems that it could be a `None` flag?
I don't think we need to expireTableMetadata from these APIs. We should just remove it.
I think this should be called `return &Stream{Stream: stream}`
I'm not sure this is the right way to check `return receLogOnErr`?
This import should be renamed to `caddytls`
I think `OC.getLocale()` should be fine here, as this is not a user's `boolean` value.
I don't think we should be changing anything here, but I think we should just make it `quality_metric::interface1`.
This is not a good name. It should be a function to indicate it is a string. It should be a user id, not a user id (and a user id, but not a user id).
Please use `allocate_string_value` instead of `out`
@tgamblin Do you remember what is the eval behaviour here? I don't see any other code using it.
Can we move this TODO to `PAGEPAGE/constants.go` and use the `TODO` here instead?
Why is this needed?
why is this removed?
I think this should be a `Set<String, String>`
@sjenning is the `vda1` setting the version of the list correct here?
`fstream` here is a bit ambiguous, it should be `fstream`
This should throw a `NullPointerException`.
This is a little unfortunate. I think it's worth testing that the `--testing` header should be the default.
I think we can remove this and just do `FullRules`
@deads2k do we want to use the `myId` here? It seems to me that the key is already passed in.
Is this really needed? I don't see any use of `ref` in the `if`.
can we make the error message clearer?
Can you add these include functions?
I think this should return an error instead of a valid React component
Can this be moved to `lib/`?
Please add a trailing comma.
This should be `bootstrap.js`
I'm not sure if we should remove the `CartItemTest` class from this class. It's not just a test, but we should also keep it for now
This is the only place where we can't do the cache for `VerifyingKeys`.
@sparrowDom Just a thought. The `generated` package was already being used here, so it was removed from this file and was removed from the `generated.go` file.
I'm not sure this is the right way. The notification should be the quiet time and notifications. If the notification is quiet, we should be consistent across all the notifications.
This was the wrong reason to do it.
This should be `repo_private?` since the `force_private?` logic should be initialized to `repo_ssh_key?` and `force_private?` should be set to true.
I think this should be GetActiveApp. It's an error if the user has already run on the server side.
This is the only place where we use it. I don't think it's the best place to put it.
why change this?
@mhoemmen can you please double check this?
Is this if block intentional?
I think we can just remove the `click` element.
This should be in a `getAllFile()` method.
can this test still fail?
Is this safe?
This import should go before the import order above. We can remove the `context` import from `channelq` package.
This should be marked `final`.
This will break the API review.
I think this is wrong. The problem is that the `httpHandler := handler{rpcHandler}`. The `Deps` is not used anymore.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is not needed. We can't have a null pointer.
I'm not sure if we should just do this here. If the user has to do `shell = default.new` it means it will always be `undefined` and it is not `undefined`, so I think this should be fine.
Is there any way to get rid of the `sarif-1.0.0-beta.5` from the config if we can use it?
Line is too long. [82/80]
this should go before merging
Can you use the `gulp dist` helper here? I think it's more clear that this is used for the `azure.core.gulp` namespace.
This change is not related to the issue.
I'm curious, are you sure you want to remove the "ExtraAugmentation" part?
This is a bit unfortunate, but it seems to me we can't do this in a follow up PR. I'm not sure what the best way to fix this is. I think this is a bug, since the code is only needed to be called from a subclass.
This is the default for the `EnablePprof` function
Can you add a `commit.h`?
I think we should wait for more than 5 seconds to wait for more updates.
This is a change in the way we do this in a different way.
This was a bad idea.
Bootstrap: clusterv1.Bootstrap{Data: pointer.StringPtr("dXNlci1kYXRhCg=="),
Is there a way to do this without having to check `KeepTraces` and `AutoReject`? If not, can we just use `samplingPirority` instead?
Why is this default?
I'm not sure if we should change the `procedures_prototype` value here, as we are now only checking if `blocks[i].type == 'procedures_prototype'`
please use `!` for this
Why is this one needed?
This operationTracer is not used anywhere else so can remove the redundant operation from the finalStack
why not just make this `SERCOM0_SPI`?
Can we add the `@VisibleForTesting` annotation on the `div` component?
This looks like something that should be reverted.
Why do we need this? I think the `implemented` method should be renamed to `final`.
Why not just a const?
why not put them in alphabetical order?
I think we should be able to remove this `string` parameter and use `is_string` instead of `string`
I think this is a typo. @smarterclayton
I'm not sure if this is a good thing to do, but it seems like the `SafeArea` is only used for the `SafeAreaInsets` case?
Line is too long. [87/80]
This is the only place where we can call `this.get_builtin_guid()` here which will return the writer if the writer isn't found. This is a bit confusing, since the writer isn't found in `get_builtin_guid()` will be used.
I think we should also change the signature of the `no_window`.
I think we should be more explicit here.
I don't see where it is used. I don't see the need to be changed.
Do we need this? I think we should just use the `user-apis-forwarding` option, and we can remove the `user-apis-forwarding` option.
Is it necessary to implement a `custom` options here?
I don't think this is needed.
If loadingUrl.getHost is null, we can use `bridge.getAppAllowNavigationMask().matches(loadingUrl.getHost())))`
Note that this is generally generally the regression term term.
I'm not sure why we need to do this. It seems to me that if we're going to have a `createIndex` field in the middle of the field, the `SolrClient` field should not be used here and not in the middle of the field.
This link is not needed.
This is a good approach, we need to do to ensure we don't have to do this in the glob mode.
why do we only need to AWS to set it if config.AWSRegion == "" ?
This version is not used anywhere?
This method is unused.
Is it OK to remove this line?
I think this check is redundant because if the `unless` fails, the `plans` will never be the correct data.
I'm not sure if this is the right fix. The issue is that if the server is not running, we will not get an error if the server is not explicitly disabled.
Please use `String.collection`
This is the wrong way. `openqa.selenium.Screenshot for usage` should work.
I think we need to add this to the `<insert-up>` interface.
What happens if both Count and Count are specified? Should we be doing the same for all the other key?
Please revert this change.
`Dict` is not really used.
remove empty line
Why are we using the local cluster? I think we should only set the local cluster if we don't want it to be a local cluster.
This should be done after the `createEntity` method.
why do you need to do a comparison?
This should probably be `DEFAULT_LOG`
Not sure if we should be using `NET.Diagnostics` here but I don't see any other use cases where we can't do this.
Why return the error here?
This is the only place where I can see this test.
Please don't use string concatenation.
I don't think we can do this here, since it's only used by `setup.py`
I don't think this is right. I think we should not be adding this method.
This is a breaking change. We should not have a default value for it.
I think we should be able to use the retry function instead of the error.
This change should not be required. ` ServiceDefinitionDocumentType.ARM` should not be necessary.
This is the only change in this PR. We should be able to use the same name for the `@response.start`
Why not use the const?
This is a little weird, I'm not sure we need to use this. It seems like we could just use the `exportPortal` function in the `exportPortal` package. What would be a better way?
I think this is a wrong solution. It is used by the tests. The `hooks` clone is not used anywhere else.
I think we should just remove the bool here and remove the bool.
1. Is this a 3500 and a 3 times?
`data` and `crash-data-subrow` seem like a weird meaning to me. Maybe we could just use `data` here and `crash-data-subrow`?
I'm not sure that this is a good idea, but it seems like the `assertEquals` should never return `len(failed_files), 1)`. I would like to keep it as it was.
Could this be a separate commit or something?
Do we have a test to verify the pool name is 0? I think we should be consistent and use it in other places too.
It's probably better to use the default value here, it's the default in `src/server/server`
Can you please change the `SampleType` variable name to `IN_CODE`?
This is a very minor detail, but I think it would make sense to just use `char *chirp::get()` instead. The way it is to avoid the need for the digest, it would make the test more clear that the return value is `None`.
What does this do?
Do we really need to do this?
Line is too long. [85/80]
This is a little confusing. It's not a valid model, but it's a valid model. Maybe we should add some docstring here?
This is not a valid input.
I'm wondering if it's better to just return `npController.networkPolicyListerSynced = alwaysReady` and then just return `npController.name()`.
I think we can just do `connectionString = mongoClient.s.options.autoEncryption.cryptdConnectionString || mongoClient.s.options.autoEncryption.cryptdConnectionString;`
Should this switch be part of the switch instead? Or does that happen?
Can we use `spanIdGenerator` instead?
I don't think it is a problem, because we're trying to get rid of the message and we should be more explicit about the queue here and say that it is a signal that is not a signal. I don't think it's worth it, but it might be a problem.
I think we should use `AttributeError` for the error handling.
Why are we using this?
I don't think this file is used anywhere.
I think this is the only place where we need to change the default, but the default behavior is to not change the default.
I'm not sure this test is still necessary, it's just a test, right?
Should we use a more meaningful name for `Error`?
This is the wrong solution. The `build_langserver` field should not be present in the `BuildManager` folder.
This is not needed.
Should we also be setting the whole block on `CONFIGCONFIG`?
I think this should be `@topic.articles.Topic` since it's the same as `Topic` in the `find_by_slug` method.
I think this should return a warning, not a warning.
should we add `messageTask` to the `flow`?
This is a `validateFlowExporterConfig` call that should not be needed.
This should be `URL` and not `URL.Duration`.
The logic is correct, because `hasQualifiers` is true if `hasQualifiers` is true.
Why is it not needed anymore?
Please remove the whole `assign_to_columns` method.
I don't see this used anywhere.
This should not be the correct way to do it. The array_filter is always empty, but the filter is empty. It should be a string.
This is a very specific error and should be handled in the `UIA_notification` function.
Is the k8s client still passing the key to the `keystore` package?
@matt-gardner, I think it's better to check for `x` here.
I don't think we should remove the `Text` part.
Why do we need to set this to `false`?
What's the difference between `sourceFilePath` and `$originalImageSize`? Why is this necessary?
@cra0zy I'm not sure if this should be in the new `api_quota_configs` variable. I think it should be in the same way we have `api_quota_configs` variable.
the `hyperledger.besu.evm. Stored` class is used to compile the `Contract` class. I think it should be removed.
I think this is a breaking change. It should be removed.
I don't see this being used anywhere. Can you remove it?
`StringUtils.equal` should be enough
Why are we adding these two new params?
With the change in Config supports, we can just change this to `Options struct {`.
I'm not sure if this is the right place to put this. I'm not sure it makes sense to make this a `list` and use it in the baseclass (and the `list` function) instead.
`GraphQL` can be null, right?
This is the only change that will fix the error.
Why did this have to be changed?
This should be `true` to make it easier to debug when the `/` is run.
this is a change from an earlier commit
This should be in a separate PR.
Why `int64` here? It seems to me that `int` is a required interface. Is this intentional?
this is wrong.
I think this would be more useful as `cls.info` (or similar) as `cls.info`. I would also expect that `cls.info` would be an arguable `info` (and then `info.info` would be an arguable `cls.info`).
Why was this deleted?
This should be listen. The `listen_host` is a number of bytes that are supported by the same number of bytes.
This method can be private, right?
Can we just make this `bool`?
What does this change do?
If the method is called `return null` then we don't really want to return the error.
I don't see the point of this change. In the future we should keep it in place of having a default value. In the case of `locustio-taurus-wrapper.py`, it will be `taurus-wrapper.py`, which means it will be `0`.
`ListServices` will not be used anymore.
@sparrowDom I'm not sure why we need to change this, but we're not really using it in this PR.
I don't understand this change.
`globalVars.appDir` is a very large number of bytes that are valid. `+lib` is a `globalVars.appDir` and `+nvdaHelperRemote.dll` is the only one that needs to be used.
This will be `DisableInMem=true` by default. We should probably just have a single struct.
this is a bit odd - how about just the `s`?
The name `obs` is a little misleading since it's the name we're using.
I don't think we need to catch the exception here. If we get rid of the `try`, we can just catch the exception, and just catch the exception, and get rid of the try block.
shouldn't this also be a Copyright (c)
Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
I think it would be better to move this check to after the `if` block, and have the `if` inside the block.
This could be renamed to `update_all_map` to align the other specs with the correct values.
This change looks good.
This change is not needed.
This is the only thing I'm worried we should throw an exception if the previous object is not set.
This seems to be unused.
I think this should be `org.joda.time.Period` instead of `org.joda.time.Period`, right?
Could you add `@type` annotation to make it easier to grok?
nit: remove space
This is a leftover from this PR, but it's probably better to move it to a different file (or in the other PR, if it's needed to be merged in a separate PR).
this is a bug fix
I think we should be using the correct one.
I think this should be a `@return` since it's the query's `Package`
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
I don't think this is needed. The streamHandle should be renamed to be consistent.
We can probably remove this.cursorState.options altogether and just do the commandOptions in the options object.
I think we should be able to remove this for loop now, right?
This is a bit of a weird variable. The `bucket` variable does not match the `a-z0-9` prefix. I would prefer if we were going to use `bucket` instead of `([a-z0-9][-_.a-z0-9]*)` and then `a-z0-9` in the `a-z0-9` namespace.
@stephentoub do you know what's the difference here? Is it possible for a ApiModel to be a Java Model?
We need to update all these copyrights
This seems to be a container only, so no need to pass it to the existing flow
`role`s shouldn't have a role
nit: `boolean` instead of `Boolean.hasBoolean(defaultValue)`?
NIT: we can keep the old name
`node` is not a global variable, so it is more consistent.
this is a test, but I don't see any `SvidPath` in the `test/fixture/certs/pem` directory
Why is this change needed? It seems to be only used in `string` and `string` can be null.
Why not just use `lower`?
I don't think we can ever get a TableObject by default.
This should be removed.
I think it's better to use a different name, like `<%_name>` instead. That would make the code more readable.
I think you can remove this
Redundant curly braces around a hash parameter.
I'm not sure if we should just remove `curTagCount` and `new tags count` here.
How about `none-`?
Why is this necessary?
I don't think you need the log level here
why do we need to use the new `AspNetInstrumentation` here ?
I'm not sure this is the right way to do this. The proxy is always going to be used by the container. I'm not sure it is a good idea to just do it in the container. I think this is the right way to do it, since it is the only way to do this is to do it.
This can be removed. The reason this is because `rootId` is now unused is because `root` has been deprecated.
I think we should just remove this line.
nit: you could remove the `return` here.
why is it a pointer?
@tgamblin I think this was a mistake, but I'm not sure if we need to change the `.v3` here.
This is a bit of an unrelated change.
I'm not sure why this is needed. We're not doing any conversion in the test.
This should be `--rpc-require-chainid-in-txs` instead.
