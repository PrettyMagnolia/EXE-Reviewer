Another idea to use a boolean parameter, I guess we may want to use a more meaningful name
@atm-quentin can you please replace record->setPageSize(setPageSize($config->Index->record_batch_size, $backend->setPageSize($config->Index->record_batch_size);
Do we really want to make this a `*`? Can't we just use `get()` here?
Is this a change in behavior? It's only used once in `isParallel`, right?
I think this should be done only if `isNavigating` is true, right? Otherwise we are going to get an edge case when `close()` is true. Otherwise we can get `isNavigatingURL` from the AMP page. If it's not enabled, then we'll need a better option here.
This should be `ID2col(const Mat& im,Mat& col,`
this should be alphabetically sorted
This change was needed to avoid unnecessary refactoring. The "snprintf" suffix seems redundant.
I think there should be a log.debug that will be hard to debug when it is in the state.
@daniel-beck Is this intended ?
Please remove this
I'm not sure what the best way to do this is. The SharedValue should be used instead.
nit: I don't think we need this anymore - we might as well just use `add-on` if we can.
Please use `String.Equals(String, StringComparison)`
should be `w.logger.Error("failed to update image", "")`
Why is this line removed?
Can you add these examples in the docstring?
I think this would be more clear as it could be the same in the `RuntimeError`, it would be a good idea to use that in the `RuntimeError` module
nit: you might want to put some other debug message in the name of the test
It's better to pass the `dev` parameter from the `build_shared()` function above to the top of the function. The only caller of this function is to call wlr_input_device on the other hand, it's probably not worth it.
I think we can delete this line now that we don't have to update it in the future
I would put `NONEXIST_ENABLED` inside `pend_Category`.
I think we can just remove this?
Is there a reason that `isEmptyType()` is called without `isEmptyType()`?
This should be done after the `$this->locale`.
The naming is confusing. Why do we want to add these? I think you should not try to add the command history.
I would not add the other one here. It's not needed.
Is this needed?
Rails/OutputSafety: Tagging a string as html safe may be a security risk.
This is probably ok because the workspaceRootDirectory is already there, but the first time we call `withDirectory()` we return the value of `workingDir`.
This namespace has to be moved up to `ConcurrentMap`.
Line is too long. [83/80]
The `clear` isn't necessary. It doesn't sound right.
How about `alerters = Personters;` ?
this is a bug fix as we use the same value in the `Event`
can you check the return value here too?
Why not do `byte("node1", "node1")` here and below?
This function seems to be unused now
I don't believe we actually need to do this interface at all. In theory `@PageApi` may just return `null` (or `null`) if it is an interface with a non-local extension. It may be better to just do a `@PageApi` rather than a `@return` with a `default`. This way we won't see the interface itself, since it won't be able to return a `null`, and the constructor is a `@since`)
I believe we can just return `Span.SetTag`. We don't want to have a return value for this, and we can do a null check on `setUp` so it won't be necessary.
I don't understand this change
2014-4, 2009,BYCERN.
We should only import `BiConsumer ` when the classes are used.
I'm not sure I like this name. It makes things less confusing. I'd suggest a single one. Also I'm not sure I like having this `.to_s` in `queue_as`.
Why do we change the variable name here? We could just remove it from the `foreach`.
Is there a reason to have the `validators` property as part of this constant?
Might want to avoid star imports
I would suggest to use this as the other way around.
I think this can be `for (int i = 0; i < feeds.size() {`
Shouldn't this be `None`?
We should just remove this line. If needed, let's remove.
Can we move the `chain` out of the `Outputs()` method?
what is the difference between `s` and `low`?
Why not a different function than `hasDesv()` ?
I think this should be done once, not every time the start time is not found
Is there a reason to replace the `Promise` call?
I think we should be able to handle this at runtime, but I think it would be better in the case of an error.
Just use `import notice` for the `__name__` module, it's not clear that the error message is thrown at `__name__`.
@franckc @bparees just curious... is there something that needs to be done on the next `return false;`?
Is this related?
This is just dead code
This should be in the same method as you have done in the other places in this file.
why is this changed?
This code was never correct, but if it's not used, then `pkg/Chmod` should always return an error so this is no longer a directory or a directory.
Would it be worth to also open the OpenID away from making this an IDE instead of calling it everytime?
The `balance` should be removed completely
why are we returning an `string` instead of a string?
Can you use the ` == ==frastructureReady` instead?
this was the bug. The first one was changed to match the other one (which is not the case in the first line).
should we be returning true here instead?
I would add the `use` loop, as in every other loop
I would not add the assert here. The former will always assert it. The problem was that if a request is not installed, we don't have to worry about subsurface->parent (and we're trying to avoid the `subsurface->parent == subsurface->parent)`, which is more accurate as you have to `assert(sibling->parent != subsurface->parent)` on each call.
same here, maybe worth adding some code to it?
Should we change the other part of this file to "inDDL"? I think in fact, it would be cleaner to just change the `if (!table->isExternalTable() && (!table->isExternalTable())` to "inDDL", so it would be more efficient to keep this logic there.
It is not necessary to add a single application and always set it to 0.
I think this test is missing in a one-line test that fails because with the last one you added, you can check it.
This is a change in behavior, but a webginesettings.default_profile should also be defined.
Instead of printing the e.print, I'd use a more specific exception.
This should probably be `if err != nil {`
It would also remove the `@TODO` annotation on the JSON JSON.
why is this change required?
What do you think about moving this to `no_replace_variables ` and adding a new flag to replace variables?
I don't think this is correct
Would be good to rename this to generateDataIndex, since that's the user expected to use their own keys. The user can use `generateDataIndex` for all these.
`posBinaryFile` is not read from the manifest.
This should not happen, the method is called `logService`
I think there's a reason to keep these things sorted and not simply call the new class `wireguard`.
Can we revert this change?
I think this may not be correct. `localConnection` is a very generic name and returns an instance of the Blockly.
Why not just use Internal?
Does this work on any other newly created `inError` to be added to `util.util.stream`? Seems like the wrong choice here.
It doesn't seem like there's a race condition here. It looks like we're using the same value to get a different value. It is used for some reason. I think it would be good to get rid of this. IMO the code should be a different value if it is not needed.
Which unit tests do not need to init anymore?
I think we should only call this once for all the other methods.
`origin = element || POINTER`
can this happen on the same line?
Should be `top level_for_each(surface->url);` I think.
This seems wrong.
I would put the text on its own line.
This will not work on windows. The ExecutorManagerException must be fetched by the Executor?
I think the `typeof` here is wrong?
`return el.getAttribute('aria-hidden') || el.getAttribute('aria-hidden')`
I think you can replace this with `from [...] import null`
this method is not called for everyone. In general, it should be called `JavaParserVisitor visitor`
Is it possible to add this to `v1alpha1` in the future?
Should this also be in `PortBinding`?
Same here about making `sig` an alias and only use `#include` in the `error`.
I am not sure if there's a better way to do this. I think `RequestId` is a required parameter because it is passed to `poll` in `Id`, so I just wanted to call `Tokens` instead of `Tokens`.
nit: whitespace?
I think you are breaking the tests. The `readlink` was not working without it, so it should be removed.
I think we should just remove this annotation if not needed.
Was this change necessary? I think it is still working as part of this PR
Think this is a typo
Why are we removing this?
I don't think this is the right default, as this is the default in production. I'd like to think of a better solution than passing in and hardcoding it.
Can we just use `System.Linq`?
Would it be better to create the whole function with `close_prefix()` here? And then you could do the `data = req.load(url).if(data)`?
`breakpoint` should always be true and we should be explicit about `linePrefix`.
This doesn't make sense in python 3.0 since the actual dictionary will always be the same? If so, then it might be simpler to check `self.location` instead of `self.value` for all cases.
I think these changes should be in a separate PR.
I think this was the reason why you didn't add anything to the user. The user was not able to get the right user and not the other owner. If you're going to go with this code, the "repeated" part of the "repeated" one.
If you're at it can you remove the `!std::distance(first, first + 9) != 9)` from the `if (first + 9) {` block?
The app.kubernetes.io/prometheus-operator is used to show any app.io/kubelet after the prom them. This seems to be the only case where you want to use a single value to indicate which app is in use.
Can you explain why this was changed? It seems like the idea is to have a null check that the result is empty.
`xrc20` is not the name of the group that is `undefined`.
The new context needs to be passed to this function, since it's used for each request, and now it's called in a couple places.
I think we can keep this as false and use `org.mule.runtime.module.api.application.module.core.engine.MessageMessage` or something similar.
If the first two conditions aren't aligned anymore this will break all of those, but the second one still be present in the doc string?
Why is this false?
The toString is already done in the `typeof fetch` object. This is the only place I could use.
we need to do `ctx.canceler`. We should at least create a context in a separate `canceler` or `ctx.canceler` (or some other function)
This was the only usage of this function
What about using `codeVersion()` instead of `getVersion()`?
Nit: `setFileState(file.id, { response }` should be removed as you already know `uploadURL` could be used for `response.id`
Should we be fixing a `readChan` here?
This is wrong
Without is not needed here, we are checking if this is a function, but that's where it is being added.
I think this is the only place you need this...
You should also update the tags to `tags`.
I would call it `where(created_at: scope[:start_time]...range[:end_time])`
This should probably be moved into a `on_connection_closed` function (in case of anything else being handled in `on_connection_views`) or at least just call the function in `validate_connection_closed`.
Style/SymbolArray: Use %i or %I for an array of symbols.
`k2o_iovec_t *iter, int separator, size_t * coma_separator`
We do no support `cycling` in LruCache. I see the same problem. Can you change that in LruCache and use `cycling` to `foo` instead?
This is the only line change needed, we have a bunch of PaymentVersionV3 AFAIK, which is the one that is using it. The current logic is not in this context, but it seems like it's a good idea.
This is a bit confusing. I think the `for` statement is fine for users, but not sure if it's worth it.
This doesn't really belong here, it's just a method that returns a new one, so I'd just call it `Date` or something else.
Is there a test for this? The node_based is the eid of the node_elem and when isRampClass is not the eid?
A `certname/code-set` file has `--certname`, and other fields `--certname/code-set`.
why are these tests not needed anymore?
Why is this change needed?
Do we need this check anymore?
Use `||` instead of `||`.
Is the check removed removed? Does nodeTypeEdge still work?
This would be more concise if we'd have to pass the entire entire pointer.
`Call` can also be used to make sure we don't use `quoted` in other languages.
should probably just return an error instead of GenerateAPIKey
can't this be err := filedao.NewFileDAO(cfg)
why do we need to handle a ASSolve?
why render and not an array?
I'd like to keep the name as it's not a good idea to keep this function and return the error if we have one of them. It's a good idea to add `obj_name` and its name to the `start_message()` method.
Isn't the message information sufficient here? Maybe something like ``messages-messages``?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I wonder if we need this check in the test for both the stream; otherwise we'd have it there.
this should be renamed to PresentationalList(ia2Web.Ia2Web, b2Web, ...)
There is a similar change in `HoodieFactory.java` that is used to override E or E E, I don't know where I'm missing something. But I think it is worth considering in favor of `HoodieFactory.java` and not having a mock mock E in some places.
(style) externs should be avoided in .c files
@adamjstewart I don't think this include is needed.
Should we just pass the entire string into the `AlertQueryUrl` instead of relying on it as part of the `Query`? This way the `string` can change if possible.
Does this need any special treatment if the ip is an object?
can we call this latin. These are the tests we expect to use?
Is this an unrelated change to the rest of the PR? Can we discuss a few alternatives?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
why not catch and throw an exception here?
why are these being removed from the PR?
why remove this?
Can you please change this to `_google_PACKAGES`?
This seems like it might cause issues with the import of lang rather than sprinkling in a message. But I'd like to see if I'm missing something.
Is this safe? ip is always DIPS.
This file change is not being used anymore
Line is too long. [81/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [86/80]
Please remove this in this PR.
This variable should be unused.
The changes in this file are just cosmetic, are not always relevant to the test files in the build itself
This is the same change as in `cli.js` file, should it be `i.exists()` to remove the ID ID and then we can just use the `cli.setTime`?
Can we change the type from `readPreference` to `object` here?
I think it would be better as `const event Ant` (which would be more useful for allEvents connections).
@bryevdv, I have no idea why this was here.
I don't think this belongs in `isHydrating`.
I'm not sure if we should remove it...
This should be a regression. I'll revert this change
Since this only works for backwards-compatibility, what about the check_disabled_client?
We should not test that the query parameter is `nil` in the tests - the tests pass because the tests are not passing without any issues with it.
We should not be using `apply_helpers` in this PR, right?
Why is this class needed?
What happens if we don't want to use `r.Seek(0, 1)`. It seems like the `TODO` function can still be a single `start` here, since it was a list of `2`s and then a list of `2`s will be `2`.
Can you add more information about what `Close()` is called?
Can we call this property something other than `x.properties` or `x.jvm.override`?
Would it be better to pass an error instead of just errors and just initialize it here (and the function above)?
This is a bit weird, it will be removed if we're not using it.
why not using the path directory here? we use `Defaultpath` as dir name
import wrong place
You might want to do this on a different line than the one above, if you want to use it in the next line (which I think would be great if it was just a simple tuple of a single line).
Is the first character of this intentional or just the format of it? If so, I'm ok with that.
This line should not be removed (and the line below).
Why did you change the behavior here? This breaks the rest of the code. The `AARCHXX` function is not always defined in `Helix-server`.
This field can be removed from here?
same as above we can use `$event->getAvatarFilename()`
This was the wrong error I'm not sure, but I guess that's the problem.
Why this change? The `DefaultTextMapPropagator` is not a boolean.
I'm not sure this is the best part of this change.
I think it would be good to keep a `-` here, if we're going to do it for now.
This should not be here
I wonder if the `required` field needs a space between the `"` and the first set of flags.
This should be a `@SuppressWarnings("unused")`
I would use `prefix.filter` here to make it more clear
`putOpt` -> `putOpt.id`
I think we should have an issue to track this and see if this is still needed.
If you remove 'empty' from 'number'. Why not just remove 'number' from 'number' ?
I guess we can remove the error return and the previous error returned by the error returned by `p2p.GetBroadcastMsg`
I would not add it to the interface like these packages in this PR. If we want to make sure it still works, we'll have to revisit `out` on the `@type`, etc.
this was a bug, the `binary_labels` is now set to zero in `config.json`.
I don't think this is the right choice, as there was only ever one. This is the problem, we're trying to figure out where the path is referenced. If you really plan to use the file name, I would like to get some guidance of the file.
this should be grouped with the other standard library imports
Not related to this PR, but we should probably add some docstring for this function
Can you add this to the `idx` usage of the Dimension property?
I think we still need to keep the old name as well to make it impossible.
this is the actual fix, right?
this is the one I missed in the first review?
You should probably also use `pkg/errors/pkg/errors` here.
`this` seems to be unnecessary
This was unused and removed the corresponding feature.
Space before `{k: ...}`
We have a `--verbose` flag, so we should be able to do a `--verbose`.
Why not the `bin/__init__.py`?
We can't do the same for `fastcgi.go`. I'm also not sure about these.
This is a good place to test this.
Remove empty line
Nit: This seems to be unused
Do we remove this?
This will be `<img>.googlesitekit-publisher-win__small-image>`. The `small-image` parameter is now unused and the `<img>` should be removed.
I think I'll be missing something but we should probably add a new type to this one.
Is it still needed after this, or did it be re-ordered?
you don't need `location_factory` :stuck_out_tongue_closed_eyes:
The other functions are going to be defined in the `buildUp`, but the other checks are the same.
This is the fix as to not modify the test. You should also change the test to use the value '1' or 0 if not specified in the test.
I'm not sure about this change. It is still not required. I think you can remove it.
this was the bug. If you don't do this, you can do it without the fix in the bug as it is now just a copy of the above loop
I think this function could return an error and only return `*`. We're not calling `checkLoop chan` twice in a file with a reference. So we should just pass `*` to `black` and do something like `client.getState(client.getState())`
I would move this to an interface, like `src/**/*.wav`, just in case it is used.
Shouldn't the type of -4 be the number of bytes? (I think I've seen the number of bytes in the past)
@note/coreclangski isn't this the correct text here?
Does this need an `ableable` argument too?
`contains` will return an `Optional`. The `contains` method calls `map` even if an object returns an `Optional`.
This is not used anymore, right?
I think this should be `bool`
Can this be simplified to `if(ptr==NULL || 0)`? If it's true, then `hip_status=hipError` will be undefined.
I'd prefer `[]` instead of `url` to make it obvious that the name doesn't match. What about `mailer.welcome_mailer.welcome_notification.signature` or `mailer.welcome_mailer.welcome_notification.url_te_url`
This is the main code that fixes a problem, but it seems like we should not wait after this in the `if` block. I think we should only send this if the acc is acquired.
It is not a hard requirement to enableDownloading. But then this is a legacy legacy one so that's not a path of the default.
This method can be removed as it is used by some other places in the PR.
Maybe `HttpServerErrorCodes` and `HttpServerErrorCodes` can be omitted if it does not exist.
I don't think it will work for both python and python3, but it would have better to keep those as simple as possible, as it's a separate issue, and it should be used in both python2 and python3.
Please consider calling `missingmissing` from `kubectl logs` to `kubectl logs` to be more readable.
This is a change in the "root" section that needs to be updated.
I'm pretty sure this logic should be part of the `defaults` package. I'm a little confused by how `verify_controller_path` could cause the user to not have a `validate_me_path` attribute in the user?
I'd prefer to have this in the `&beaker/options` file instead of the root path. We're trying to move the file into the `libbeaker/options` file. That way the tests can still run if necessary.
`Integer` can be removed? It will allow the type `year.between(EPOCH, timestamp)` in `between`
We could also remove the `mtask.Arn, dockerChange.container.Name, dockerChange.container.GetRuntimeID()()`. It can be deleted.
i think we don't need this, the value of the `source` is already in the `Html`
This is a bit unrelated to the PR, but I wonder if we should just make this `protected` instead of `boolean`?
Why did we remove the old one?
The `include EnvironmentSpecHelper` type is already listed in `Model` anyway.
Is this needed?
Is there a specific reason to not use `== null` when it's needed to be ignored?
The formatting here is off here.
Can you remove this space? This looks like it should be a separate commit.
I think it should be a file. It should be in a separate file
Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
I'm curious, why the change from `404` to `done`? Is it really related to the `else` branch that will be removed from `x` as there is no way for this to happen again?
I'm curious: why this change?
The previous version of psU was `bin` not the case.
` aws_test` seems redundant. Can you rename `package aws_test`?
The test data from the histogram is now in the wrong place?
do we need to add this to the new release? Or maybe just move it to the transaction so that we don't have to close it later
I think it should be removed here
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Do not use semicolons to terminate expressions.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should this be a different type than above?
Hive this will be an error if the user has the same stack as `Sulu.Fromive()`.
@juranusjr Can you check if these imports are intentional?
I don't see it used, can it be removed?
Can this be moved inside the `OwnerGetter` function?
Do we need a new parameter?
Use `.videoName()` instead
Minor naming nitpick: remove space between `=` and opening brace.
This is the only place where we use this function.
What's the error here? Should `iss.Email` be nil?
Is it the correct call `metaServerPort` to get the PortPort from the meta?
Is this used by the locator or the changes in the file that should be removed completely from this PR.
This change is not right. We don't have a other bug that we have project-specific packages that have project-specific. But I'll update the current behavior in a followup.
>null [](start = 12, length = 6) Can we just change this to `!bytes.Length == 0`?
this will throw an NPE if the node is null, so we can return false.
WriteAsync does not seem to be used in the constructor and thus does not need the methods anymore right?
Does this need to be `?`?
I feel like there are other places this method is called for a method called `org.apache.commons.lang3.lang3.versions.VersionUtils` that will use.
Do you really need to call `attach()`? What about other `String`s?
This method should also throw IOException.
The forceRDKit shouldn't be changed.
I would add a check for `guid == it.second->getGUID()`. We should also add the exception to `update` in `find`
Why the change?
It's better to use the API's `service` and `service.gitea`.
This is a public API, right? The method `protected` should be public
Could have used a more specific `getRequest()` method in this file so we can get it directly from the `Request` value.
@franckc I don't think this should be called `validatePackage`
this is a change in behavior. It's not really worth it. `deep_mapped[k] = new_val is not None` should be enough, no?
Since this is a boolean error, we should probably move `chain.promiseSettler.Withdraw` to a new `chainID` so that the name of the chain is not clear what is the `event.StatusBadRequest`
This is the only change that requires passing the `IsValid` to the function. Is that intended? If so, why isn't the linter always calling `getInstance(tc TraceContext.id)()`? This way you could just remove the condition in `getOnRemoteSpan` and call `getInstance()` in the function?
I am a bit concerned about this change. I guess this is the case of the check for nullptr check
Rails.application.config.blacklight_export_secret_token is the same as v1beta1beta1beta1, so this might be confusing
These assertions are a bit vague... maybe a bit more clean up?
same here, as above we use tabs and spaces.
No need to add Hosts. This is the default.
I'm wondering if it's better to have a `ipsecESPOverhead` inside the `ipsecESESPOver` class. Then it could be a `Configsec*` that does the same thing but `ipsecESPOverhead` does not.
Since `MeasurementItem` is `ignoreEnd` in `OnEnd`, we could also move these to `OnEnd` and move these functions to `ignoreEnd`. That way `OnEnd` is also used only in `OnEnd`.
Weird that we've imported this one :)
The server is already checked in an instance variable.
Why was this removed?
I think we should keep the old config. We're already doing this in place.
Is the old code still useful?
I think the code is already handled in the `isMining()` method, so we should just remove the `isMining()` method in `renderDelete` method.
I think this is fine for now, but I don't quite agree with this. But I think we'll need to move this to another place in the `getConfig()` method.
Is `Unlock` a valid `Lock`? If so, we should be using `rename` here too.
Hm, why change the order?
For now it's best to add some text to be able to get the text from the GH actions for example, as we're now using the api version.
This can be moved to the top of the file, right?
I'm not sure I follow the idea that this is a function call, and it's probably not the right place to put it in the `pants.common/bin/resources.go` ?
What if `_CleanFpInfoAttr_` is empty? When would `_fpInfo` occur?
> `RAY_TRACING_NV` [](start = 8, length = 1) Why are we setting a name like the other one?
This is the wrong way to fix this :) For now the `exercise` is being created for this column in `Image.com` (which I don't think we should have a `Image` with the `jetpack_` and `jetpack_`).
ExerciseWithProgressQuery does not exist anymore
I assume this is public, but not used in the codebase
I'm not sure about this change. It is a breaking change for users to not have any issue with a null level.
I'm afraid of what the intention here will do if version is 0? If we don't, I think we should make a `version` check for that.
Can we put the TODO in consensus and just add it to all the other buttons/manipulation/manipulation.go?
please keep a wildcard import, see 2 lines above
Why is this change necessary?
why was this change? MONGOS_LEGACY_HELLO should be the type as the default.
We could also change `privilege_SYNCH_SUSPEND_FAILURE_RETRY` to `privilege_SYNCH_SKIP_CLIENT_THREAD` to avoid weird weird values.
This is not the default, so I would use `in` instead.
this is not correct, but I think we should add it to the `if`
I'd suggest to rename `dokan.ExistingDir` to `NewExistingDir` to make clear this is the same as `NewExistingDir`
I suggest to use list::exists().
Are all the mobiledoc and linters still useful now? We're removing the container because the container is still running.
Why not `esc_get_search_form($argument)` and call it in `esc_get_search_form`? I don't see why we don't need this function?
It would be nice to have some sort of exception handling at the top of the file.
@smarterclayton do we have any idea why this change is necessary?
Can you make this class more explicit, like `@Restricted(NoExternalUse.class)`
I would keep the `transl` as its first, as this is the other option.
You can just use `GetCancelledZeroTask` here, and remove the `GetCancelledZeroTask` below.
So if I have a image/siped state, then I am not familiar with that. @KonajuGames @rhtyd any opinion on this?
@jridgewell I'm not really sure if this change is correct. I think you want to check for the auto-value, or if it should be done that way.
I wonder if we want to use `message` for the type as well?
Why did you remove this?
What's the default behavior for these new data?
Can you explain why it's removed?
I think these two `Read` methods are unnecessary.
s/if/elseelse move to es_starter.py
This seems odd. I think the `name` field should also be added to `mattp/types.py`.
Maybe this will give the same result as the one above?
I don't understand what this is about, is there a good reason to remove this?
I am still confused by this line of code. Is the value of `prefixPropertyMetaModel` the same as `annotationsPropertyMeta` in `src/main/api/dev/dev.go`?
Was this just unused?
Please move it in the end of the file
This is a BC break
The message should also be done in `charset` class.
This is unrelated to the changes in #9595. Why did you drop this?
why are all of these fields required?
The `Close` here needs to be updated, otherwise it might have been the bug.
Why are we passing `implicit` to `config`?
why is the `protoreflect` removed?
I think `skipOSConfig` is fine since it is a OS configuration.
Is the idea here that when `number` is called `List` we'll always get the `validType` case, right? (I'm not sure how to get this. If we do, it would be nice if the code was correct.)
I think this function might be a little too heavy for now (or at least I think we can't do this).
This doesn't seem right. It makes debugging harder to read and read.
Just curious: Why did you do this?
Is this a bug fix?
This condition is already checked for line 233. Shouldn't we just return error if it's not zero?
I think we could just remove this?
Another `#include` statement is needed
this should be moved into the new method
So, I think `.to_s` should probably be `obj.to_s?(BSON::Decimal128)` instead?
@wmvanvliet I don't know why we do this. Should we have `require 'bolt/plan_creator'` here? The `plan_creator` above has been removed so it doesn't get set.
Do we need `(20) > 1`? Also, why do we need the one for 20?
I don't think this is needed?
This is a leftover from an else test
This is an overkill. The node.Start() should have the storage provider, not the input. Also, I believe the node.Start() should be the one that needs to be the provider.
I thought `stress_test` was a number of times when we're using `add_setting`, but it was an inconsistency between the two, so the compiler would actually be more clear.
why remove this? we have the same pattern for the caller above? I see no reason to remove it.
So the DrandEntries column is still in the risks, but is the new DrandEntries column still in the risks? Why was this not a real IP? What if a IP is not enough? Is there any IP/sourceity for the users to start? Or does the new tag not contain multiple kinds of users in their own file?
I'm not sure why you need this `current_key` parameter. `current_key` is supposed to be `None`, not `key`.
why is it an input here? why not just call `mode`?
@mjkkirschner Is there a reason for `DefaultTimeout` instead?
The `limit` isn't used.
The problem is that scapy.consts is still available if scapy.config is not available.
why should the rollbackPrimary method be called in both places in the context?
This line is unrelated.
I don't think we need a `ToNode` annotation here...
You should just do `clientset.LogLog(clientset)` here and below to call fakeListOk, but this function does not have `clientset` as an argument to this function.
I am still not sure about this. If there is a reason why we'd want to use `client.client.client.go`
Nit: Since you are changing this file from the goimports you should go after `goimports`
The pipeline changes are a noop in the test.
what is this used for?
Can you add the license header here to be consistent with the other packages in this file?
I like that there is a better way to do this. If it were a separate commit, it is not a blocker.
I think you are able to use PyQt5 imports in this file because this file is already imported in the main file.
Can we add a `insecure` var, and move it to a `utils`?
I think this is fine, but if you really want to support HTTP-1.1, I don't think you'd want this
@cramforce is this test supposed to be testing the exact same thing as the one in `player_parameters_width.js`?
It's not a good idea to use `reflect` instead of `return Value{}` as these are more commonly named. Perhaps `io.prestosql.spi.compile.reflectFunc`?
Does `nameLower` work on purpose?
This change is still needed since the field is being set before it was removed.
Does this mean it will always be self.Promise = undefined? Should this be `self.self`?
So we will skip skip for non-functional files?
Maybe we could use `sys.is_function()` here to simplify the code.
if np.socketProtect == nil, probably better to use a more descriptive name.
I assume this interface has a `DeleteAll` interface. I thought we had a slight preference to do about this.
I'm a bit surprised this isn't needed, but I guess it's the only place that uses it. I'm wondering if we should just remove it?
`config` instead of `Config`?
This change will be required to Enable OpenTelemetrySdk.EnableOpenTelemetry(builder) no longer exists (if I can't see any reason to change it in the migration).
I assume these changes are intentional?
Why have you added this to the volume in the backend? Can we have it outside the backend and return the `vol`?
`tmp` is not null, the `excessDomChildren` is the correct type.
`$user_func_array` could be `null` and `array_merge` will return `null`
I think you could just do like `sc.IsValid(ctx, ctx)` since we only need to have it for the same reason and that's the case.
I think you are also missing a "itere" here.
I'm guessing that having this in a separate PR would make things clearer, but I don't know whether it's worth it for now :)
Shouldn't there be some logic in the `keyword` function?
@Eric89GXL can you update this to `PROJ_WKT2_NAME_METHOD_S2` and `PROJ_WKT2_NAME_METHOD_QUADRILATER` to take the options object?
Shouldn't we check for `TogglePrefetcher` here too?
why are these lines changed?
Can we put these in alphabetical order?
Please add the `&&` here.
this should be `getAllprojects()`. I am not sure if this is the best way to do anything. What about `getResolvedArtifacts()`?
Should not be exported. They will be added to `data-lists`.
I would have done this in a different PR. The new functionality should not be able to configure the new functionality at this point. I think it should be fixed in this PR. I'm not sure if this was a problem before, but if we're trying to get rid of it then we don't need to add new functionality.
I'm not sure this is going to work? The other package `asset_defs` instances do the right thing
Why not leave `strncpy` at the end of `name.get()`?
If we do something wrong here, we will need to update both the scope
I think this is still OK, but it's only here, I'm not sure what the best place to put this inside the `require()` section.
I think we can get rid of this.
@deads2k I'm not sure this belongs to all the `kinto` files, but in this case you're using `kinto.config` as a dependency.
Why is this changed?
It's not immediately clear to me why you changed this but if you have some other code that works it might be possible to fix it, I think it's more clear to put the `if` check before ` openerFrom*`
Should we make this property internal?
I think this was just a wrong name... it was just "go"
@babelrc: false -> make the default to be the default
Is this a regression?
Why the type hint?
I think we can keep both the same and the new one in `writeanging`. That's the only case where we need to change the input from the input for that. I would also suggest to use the `put(writeanging)`. I'm not sure whether this is a good idea. It seems we can also just change the function to something like `graNotImplementedError: [certbot.nn.nn.openopenopen()]`, or we're not using the input at all for the user-defined. I'm not seeing if I could add `put(writeanging).delete(book();
Not sure why we need to do this, but this is not a test.
Please remove this line.
We should only be passing in an error if the Domainet does not have the exact same value as the existing `OnlySAN` parameter.
Why this change? It looks like there is a test case that the `< ArrayList>` defaults to false.
This should probably be a public constant so that it won't be used in any place.
Can we also update the `search` key?
This is an API breaking change. This is just a small change to the docs.
I'm not sure why we need to do this, but I think the wording here would be much more appropriate for this (the function that uses the longer supports all UTF-8 strings).
The test here needs to be updated updated to `SolrInputDocument` to be `true` in order to prevent the issue with that change.
Is there a way for this to be able to handle the case of a nullval?
This is a bug in the previous PR.
This is a change in behavior that uses the new `0.1` header, which is why I deleted it.
should we call this `setup_single_has_filter` or something?
Why did you remove it from here?
Can we avoid this by adding a `if ('getFilesAndDirectoriesApi')) {` function and see if the function can be removed?
this is a bug, it does not belong here
I guess this is due to the changes in this file?
This should be reverted
Why volatile?
I think we should just add this to the `@since`
I am just not sure I understand how `ASSIGNERS` will work, but is it ok for now? It's not really a big deal since the `SAMPLERS` is just used in `ASSIGNet` (it's in the `SAMPL` namespace) to just use `ASSIGNERS`.
I assume these are all in the ones that aren't valid to make the integration test pass.
If this fails for the `stats` table, then we should also check that the result is not `disabled`, not the `stats` table.
Could you please update the doc accordingly?
This seems like it should be an API break? Maybe a good idea to have a test for that?
This is an important cleanup. I suspect that it's better to move the state to a separate location. This makes it more obvious that its not used and makes sure if this is what we want. The state won't be in the assignment like `look.filter("unchecked.service.state");` or `look.Color("unchecked.service.state", "vocab"}`
Line is too long. [81/80]
can you make the copyright?
This is not right. `location` will allow for null values from the table as well, no?
execution from proto?
Hmmm ... this is a bug, should have been deleted?
Please update `break` as well
Maybe we should add `time.DefaultTime`?
This doesn't seem right to me.
I'm pretty sure it's worth to check this in ` BeginMethod`.
I think this should be renamed.
Can you also add these to the `DefaultView` below? It might be too much of a good idea to have a more descriptive name.
I'm a little confused, these tests are now just for `Sadara` -- they were not really relevant as they were previously. It might be worth changing the test to assert that they're being added, as far as I know, they were never registered as possible, but not in order to match. If we're going to have to.
this doesn't look right, the old code would only work for non-winrm fields (but that's not what it does as the new one).
Copyright -> wheat the
Is there a better place to put this check in `hasLobColumn`? This may be better than the check on line 131, and we would have to check on the other one.
Why not an enum instead of a primitive?
The `ui-grid-icon-plus-squared` value should be a constant (or at least a constant that is used for the `Present-icon` value), not the default value.
@tgamblin do you think it's worth adding a `TODO` check to make sure that if you don't do anything, we would be able to remove it in an `if` statement and remove it altogether here?
@murrant I don't like the `./g` library here.
Should this be named `GetHttpUrl` or something?
I think it's better if we could make these `SynchronizableEntitiesPrefix` constants above, and then just return a `func` object if there is a `cfg.SynchronizableEntitiesPrefix != nil`.
Should not start using the path to keep the core of the core?
This seems like it should be removed from master
I think this should be done before `self._tab.is_deleted`
Not a fan of just adding simple simple simple simple simple simple simple simple `profiling_enabled` will be fine as well.
Does this mean we are only checking the full path to determine which `forward_ssh_agent` is nil?
just a naming nitpick... why the order of the parameters?
Can we move this to `config.FlagKeepConnectedOnFail`, instead of introducing a new method?
This is the fix.
Metrics/LineLength: Line is too long. [97/80]
Should be able to remove this
It seems that this line is redundant.
I'm wondering how this works, but the new info info might not be available.
The only thing we're using in an older image is that the imageVersion should be the current one as maxImageRampup
I think you should use `log.Errorf()` to get the output from the `Read`.
The `subprocess.run()` method can now be removed (in which case there is no longer a deletion function).
This test is not needed. We can just pass in a schema from directly.
Can't you have the same code as the line above?
Is this the only place where `enable.interpreter.Eval` will be called?
Do we have a test to cover this case?
If this is not a boolean, then it is better to use `default:false` instead.
I'm not sure why we need to guard this again, if it's not just a part of the code, it's not a function, right? (It's a bit of a matter of taste, but maybe there's a better option to do it?)
Why are these imports not required?
`path` will be used to the addon... it will be removed after the call to `add_path`
can you update the copyright year
Why not move `wx` up into `mainFrame`?
This is a copy/paste error.
Another test would be good to see when we can log the exception.
`--min-gas-price` and `--miner-enabled` are not really helpful for our new purpose and we need to be very careful, as it is not just for a specific purpose. I suggest to make this change, as it could be a separate issue, but I'll take care of.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Should error be logged before return from `ddev list` (or maybe not).
I guess this is just a copy/paste from `RTPSParticipantImpl`?
This is not used, right?
Is it possible to keep `+1` and `*` as a string or a string? If so, we can drop the `*` to clean this up.
Why `flattenIndex` instead of `childElement`?
I'd like to keep these methods consistent with the rest of the codebase. I don't see a reason why they should be called `addMaskables` instead.
Why is this change in this PR? The user would expect the default behavior for `download_store` and it would not be called with `s3`, so we should probably have a default here
This file is in the same line as the one in `pkg/api/carjs/`
Why was the dialect removed?
It seems that we use chan2 for the first two chan2. Can we do that?
We should probably use `#Codef` instead of `err.uDA`.
This was a mistake in some cases - I had to add a note about this being a little more robust. I have changed all of the code and changed the logic here to just call `ctxPaymentSetup` instead. The logic is still fine because the `label` call does more than `ctx` on the "developed" of the `CreatePayments` function, and I didn't think that it was intentional, because the transaction could be mined, but I don't know the logic we're still using this value. So i think we can do some other way to go without doing this.
Hmm, why do we need `load` here? I think we should probably do it in `f` instead of calling the `file()`. We could avoid `load` if we want to load the file and use a custom field.
This is the only place where we can't use `params.qstring.event.startsWith('[Resource].minimumEventGroups(stringstring)` if we don't want to use the `if`
Can we add an enum value for this new value?
This will be an error if this is non-nil, right?
why remove this?
Instead of this, can we rename this to `dataverse.rserve.user.password` to be consistent with other Rapers?
nlen_s is used in the strlen() block, the string value is not equal to sizeof(tmp_optarg).
this should have a `from:from` and `cc: from`
Why not using `act(<Comp,>, scratch)` here?
this line is the one above it?
this seems strange, it is better to have the `LegacyFormHelper::getType('form')` as its return value (I don't know why it is implemented in the first place).
Is there a case where `opt_port` could be falsey?
Why the for loop is not needed here ?
This function is only called in `UnknownDeployment`, not here.
We should probably just always use the strict equality check, because otherwise it's not clear what the user is expecting. Otherwise we might be able to check if the 9 is a 9 thing, and we can check if there is no error.
I think we should just pass in a vote and not pass in in config.
I'm surprised the `assertFuncEquals` is not actually called here anymore?
I wonder if we should create the existing `registry.store.store` file, that way?
This is a very expensive change, right?
Should we log it?
This test should be testing the same way it was. Also, it doesn't seem related to you, but I can't see it in my PR because it's not doing the same thing.
I would suggest to remove these parameters.
Should we make the `Wire` tag configurable?
This should go to `src` instead of `src.Namer` to avoid the extra work for user code.
Could you remove the `_` in `build_files`?
Why not use constants?
Is there any use of `20, 1000` here for `BlockChanSize`, so that we don't set it to 1? (just for clarity)
I wonder if this should be an `Error` instead, right? Since it's a `plans` object that should always be a string and the `reject` is a string based on it, then we could still go through the whole thing.
This is a bit hacky, but I'd like to use `UART_RX_PIN` instead of `UART_RX_PIN` to avoid the need for a constant. I think the `UART` should be the same, it is fine to just call `UART_RX_PIN`
I think this field can be `dnsDiscoveryUrl` since there are more instances of `/dns-discovery-url` in the class
is this file still working?
What happens when key is None? Should we use that as the default if it exists?
I think we're missing something here. The "init" field is already set when the number is 1, so there should be no number here.
Is the previous `is` used at all?
"not if that particular UID or private, the associated data is really confusing :)
why is this import removed?
Do we want these checks to be ready to handle the case where the cluster cluster does not get called?
This was a bad idea, but I don't know the consequences of the change. We need to make sure the passwordModificationTime is set to null before the password is null.
This check is not necessary because there is only one `ProcessStart`.
Is it the first lock?
Why is this being removed here?
I'm not sure if there are any other way to implement this, we can't just call `getActionByActionHash(new String(h))`, since it is only called during `getActionByActionHash`, right?
Can we add a Jira to track these?
is this really necessary?
this should be removed
This change was not covered by #3314.
why not build target and layout target?
We can remove all the `client` altogether now.
Can you please add a `TODO` to get rid of it?
why do you need the editController?
I don't think it's a good idea to do this, it's probably fine.
what about we make it a string, instead of a string ?
This is incorrect. In case the element is not null, the `value` is null.
I think you should just add the state to the list of its own. If you do `models.saveTaskIPAddress(task)`, then add the new one to the message.
Should this be 'color' or 'owner' instead?
you should not have to default to 0 if you want, it's fine as is.
This looks like a regression? Doesn't look like it is used?
Metrics/LineLength: Line is too long. [82/80]
I think this will cause a problem since the old way will be used for every environment. If the environment is in a `RCLONE_CONFIG_PASS` then the error will never be `null`.
This test should not be necessary anymore?
This should probably be done in `core/src/test/core/utils/i.xml`
This should be `farResult` and not `PlanResult`
It seems like this should be done in `pkg/resource/server/api.go` so it doesn't get picked up. It would be nice to have the test do this, but that doesn't seem very intuitive.
what does the `+a.foundationBonusLastEpoch` do? is it necessary to check `2.6.1.0` after this change?
i think this is too much
` FieldLenField` isn't needed here.
I don't see where this is implemented.
This should be `maxQueryLength`.
`ndc}|` is always defined, so you can drop the `ndc:topframes` part now.
We'll need to add this to the `else` block below to reduce the number of entries.
I think this should be a `ToStringM_PERIOD` instead.
Please revert this change.
Should this be done in other places too?
I think you need to call `verifyStatusResolvable` on the state to ensure that `SteadyStateDependencies` is not explicitly set when `target` is set. In which case, we should add the state to `onSteadyStateCanResolve` to be consistent with `onSteadyState` and not just `IsSteadyStateDependencies` to avoid this call to `verifyStatusResolvable` because it's always called on the state of the listener.
In general, `has_active_subscription?` returns the value of the `plan` object, so it should be checked against the `Action#has_active_subscription?` check.
Should we fix the indentation here? I've seen seen a lot of work in general.
I think we need this to have another PR
This is wrong. We only have one compid and it has one extra arg but also it is better to have it here.
You should only be using `dict()` if `dict()` is enabled, and only for the `join_delete` case.
Why `omitempty` is optional here? We can't use `json` anywhere.
Is this a typo?
Just to keep consistency, we usually prefer `build integration,deploy` to build with `node`. It's also fine with the latter but we can do that later.
Perl_croak() is now deprecated, should be removed.
I'm not 100% certain that there is an extra stateRoot that's going to be used as the result of the result. The current code seems to be using the current code and we don't need to repeat the whole result of the result (the current logic is not the same)
This looks unrelated to the rest of the PR?
How about `file_size_in_bytes_STATS_COLUMNS`?
I wonder if this should be done with the caller in line 288. I wonder if we could have a method to return some boolean that returns false in some case.
Is this include needed?
This would be better as min as 0.
Why not `SchedPolicyGet(policy, name)` ?
This should be `:exercises` (not a valid one, but not a `a`)
I would say `modeman.factory(index)` here and then use `#is_accept` instead.
I wonder if we need this in the future?
The `Available` block needs to be renamed to `waitForResponse`.
I'm not sure if this will work. If we have the `nifi.IsNullOrEmpty(xForwardedFor)` in the middle of the process, then we don't have to do that, but I don't think this will work.
think it should be directly `status` since it is not a user-facing user-facing user-facing user
I'm not sure this is worth it...
This should be a `Map`.
This is not needed.
Why not keep the dependecy?
@mfojtik this is where I hadn't seen the two changes in the `mintJWTSVID` method as well... but the code was probably in the `mintJWTSvid` function.
is this check correct? if (contract.Visibility == TypeMemberVisibility.Family) { if (contract.Visibility != TypeMemberVisibility.Family) } if (contract.Visibility != TypeMemberVisibility.Family && (contract.Visibility != TypeMemberVisibility.Family) }
Can we move this above the `var` declaration and move the `depositToRewardingFund` calls?
This should be the service account.
This can be removed.
Please use the standard standard library imports.
`allow_None=True` is more consistent with other uses, it's probably more efficient to use `allow_None` here and below
We should probably make a similar change to `downstream` here and not the `GetServer`.
I'd suggest `go-Scope` here
I think it may make sense to have this set in a common folder, and then have it in the `lib/` folder. This will make things easier and easier to understand if there are any issues, but maybe that can be done somewhere else, so I would suggest we add an option to the API of this API to get a breaking change for that
I don't know if this is correct
I think you can remove this `if` as it is also used in `methodUsage` above.
I'm not sure what to do about the pool here. Is there any specific reason to keep the pool pool public ?
Why are you removing the empty value from the value?
This is the only part where I'm seeing the `LockPath` method above. I wonder if it would be better to leave this method directly.
The issue says that `Bla` does the same thing here. This class is used for `Bla:`.
I think we could get the "recids" part here by calling `records` here instead of a boolean value. It would be better if we could just call it `_recids`.
Is this something that needs to be set if `errerr` is set (which is not a cluster with `NewWriter`)? Otherwise you could get the right approach if `Vbrev` was set but `NewWriter` does not.
I would not expect this to be an event, instead of creating the action as a parameter.
Remove empty line.
Hmm, I'd suggest adding another `job` parameter to `Literal` as well.
The goSQLBase is not in the ES3 file, so why we need to add these?
Wouldn't it be better to be consistent and use `Console.WriteLine(...).WriteLine(...)`, so it's clear what the error is?
This is a bit of an overkill but it is not a very specific property and we could just make it `public final int int`. I suggest renaming "METRICS_PROTOCOL" to "instrumentation".
We need to disable these in a more specific way, such as `SystemUtils.Distributed` and `SystemUtils.Distributed` (or `SystemUtils.Distributed` or `using`). In the past we could add some new (and we can add `[Distributed] /NETFramework.Distributed.Distributed` and get rid of this warning.
Do we not need to do anything here? I don't have any idea how to do it.
Align the parameters of a method call if they span more than one line.
I think this should be done as a constant?
I think this is what we want to use: `Basic %s` and `Basic %ss` to determine if that is the right approach. The password for the string is a string, not the string.
If BAZEL_TEST_DATA_PATH is no longer defined, can you add it here and use it instead
I think it makes more sense to say something like `whole` here. I think the actual date is more common and we should not have both.
I think we need to remove the if statement here and in `Int3232 = granteeList;`
This is going to work correctly with the other `subscriptions`s that are also getting the message. The "client" is an uninitialized value which can be used for other services.
Should we keep the old behavior for new users of the new forms? (I do not see an issue in the future, but I'm not sure it's worth it)
I think this can be removed now, it's no longer the case
The reason I'm not sure this is a good idea, since `isFinal` can't be deprecated.
nit: `<=` is the preferred style to use `< height>` instead of `< height>`. Also, I don't think this is the right way to do this. I would use the `onModelTracker` to do all the `footerHeight` and `scrollbarWidth`.
Isn't it better to use RemoteAvailableInstall instead of RemoteAvailableInstall?
Can you revert the change to `map[string]` so users can use `int32` instead of `run_id` for `**kwargs` ?
I think you forgot to remove this line. It's not really related that change.
The linter will need a ternary if keep keep.
This condition is redundant because `!` will be null if `checkChangeResult` is true
Out of interest, what happens with `ingbuf`?
`return container.Exec()` might be a problem because of the "cannot start a container"
I know the change is not correct, but I'm pretty sure the "urlInfo" should be done after line 221.
I am wondering if we should just use `None` instead of `64` to avoid this check?
A global var in autocomplete is a good idea
Shouldn't this be removed?
This could be refactored to use `sanitizeVersion` for consistency
Please remove the blank line.
Use the new Ruby 1.9 hash syntax.
Should this be a `Quest::stringstring` instead of a `!` block?
I think `approval_response_path` and `appro algorithm_or_reject?` is the same as `url`
This is unused.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
this should probably just be `return invariant, err == nil`
I guess we could also have this take `super(tableName, ops);`
Why is this in `base`? We're still using it in `2p2` so you can remove it.
I'm pretty sure the name of the param can be changed to `PodPod<2, 2, 2, 5>` instead of the number.
Why are you changing the signature of the parameter here?
This is a little unfortunate... but I don't think the logic here is appropriate. I think this is reseted as a zero component, not an empty component.
Should this return `False` or is there a reason for this to happen? I think it will be easier to see the logic for it
The `ActivityTaskTimeout` is never being called. I think it can't be deleted. @mheon suggested you, but this is a good thing.
This looks unrelated, but I'm not sure why it isn't a good idea.
The `aplugin` API is being set in `func/pure/ingressRule#exception.go` so we don't have to change this line to `iFromPeers.IPBlocks = append(iFrom DisressRule.AddressGroups)` - the `[i]` will now be set to `BailConfig` and `BailConfig`, so you could do something like this: `if (!n.processRefCGs(ingressRule.SourceGroups) > 0 { return append(iFromPeers.AddressGroups) + AS AS(iFromPeers.IPBlocks,DM
Is this needed for every version of the `Pending`?
What was the purpose of this change?
I think this is the only place where people will use the new analysis name, right? If you really have a specific bug, how is the new code still correct?
Please rename this to something more meaningful, like `upload-show-profile`
this will work for the first letter of the flags. It will be removed in next step.
nit: I would use `,` or `,` for consistency with the rest of the codebase
Do we need this check here? It's not used anywhere
Why did you remove this?
This is the only change in this file. Should be reverted.
Why is this removed?
It would be better to move these to `if len(sha1) > 7 {` where we're in there's no such feature.
I'm not sure we want to make this here since the end of `noDuplicates` is the actual option.
Nit: Can you add a TODO with `return` instead of `e.mock.object.GetName()` to make sure they are all mocked?
this is a bugfix?
Please rename to `orderPath` to avoid confusion with other mutations.
I guess I'm confused by this. Can you explain?
This is unrelated, I'm fine with it.
Is it possible to remove `object` from the function and remove the `master` in the `if`?
I think it might make sense to add a TODO here to remove the public constructor and remove the `TODO` as well.
Can we make an environment variable for these route types, and add an "components" parameter?
Why a non-zero import statement?
How about `2` instead of `2`?
this is a test class but you don't have to use it
We need a space here. If we want that to be visible in the parameters, then we can also get it from the connection by using the parameters.
It's probably best to just delete this and `override Debug`.
I think this is more like `recently_published_first_published`
We're not really testing the content of the file, so I would prefer we avoid using the content of JSON.
Should be `0.5s < 0.5s`
Can we just use `json.Is()` or `json.No()`?
This one should no longer be changed. You should add the include below.
This is unrelated.
This should be in `CreateLaunchTemplateVersion`. Also, should `callLaunchTemplate` not be Launch by the version?
What's the reason for these changes?
This should probably also be a single `success` object to be able to determine if the value is not a `null`. We want an `error` to be passed to the `exists`.
can we use a more specific name for this?
Can be reverted now?
I believe you need to do the same for the imports.
what is the reason why we were assigning `run_server` to `call_doc` in the `server` base class?
I think you should check for null here, otherwise the `if` statement is redundant.
This was just a missing part of the `if` above.
Should probably add a `is` section for these new imports
I'm wondering if `MetricStreamConfiguration` would be clearer here.
is this a leftover?
The `unknown` here is an `string`. It is a `string` not a `string`.
Does anything need to do with this change ?
Why is the default value set here?
I'm not certain this is really necessary
Please add the other files in this file since we don't have any new data in the app
Should we add some info on the error that we're trying to use here?
what do we do if it returns an error? how does the log it work?
@deads2k do we want to do this in master? I don't see it needed.
Can you please move this doc for consistency?
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [82/80]
Trailing whitespace detected.
`!inputs->nullptr` might be more appropriate here, e.g. `nullnull`, and if it is, `nullptr` might contain the type.
Can we use the function from `g teWithServer` or similar?
The way you can remove `!` from the tuple and the `isEmpty`.
why change from `Shutdown` to `shutdown` here? Isn't the `Shutdown` going to be called in `j.BlockServer`?
I think it would be better to keepperiod.fraction to avoid the file.
Is the dispatcher intentional? I'm not sure if this is a good example.
is there a reason for this to be an integer? we're not using `false` for each value.
Should we keep the old configuration plugin if it's not configured? I think it's not needed.
I think it's better to have `getAttribute('alt')` and then use the default value. The logic is not important to use `getAttrValue` for the service name.
Shouldn't we just `except` this be `userscripts.UnsupportedError = e`, and remove `except`?
I would prefer `new MongooseBuffer(value.value(true), [this.path, doc])` to be consistent with `0x00` and then `text`.
This is a breaking change.
AFAIK `reason` is unused.
I would use `CurrentEntityURL` instead of `getCurrentEntityURL`, it can be more clear that you're using the two variable for the default
This error is not correct
Align the elements of a hash literal if they span more than one line.
Is this needed?
why this change?
why is it necessary?
The `||` can also be removed if needed
I think this would be better named `onContainersContainers`
Do you want to add a line break above?
I'm not sure if this is the false column or anything.
Remove empty line?
Should be `None` as the last argument?
why was this removed?
I'm not sure this is related to this PR?
I'd rather have a `Holder.DistributedTrace` that I'm not sure how I'd like to get to this point.
`self._doc.setHtml('<b>{}</b>'.format(self._opt.text)))` is a list; a list of strings can only be created to the first of the list. So, it seems the `<b>` is not a list. The first time the last time the first time it is an absolute path (e.g. `self._doc.setHtml('{}'.format(html.escape(self._opt.text)))` would be a string, which will not work, but it is a list of strings. The second time I see the second time
Should this be `super.has_quartz` or `super.has_quartz`?
I don't think you want to do this. The new code does not have the right error, so the var call should be removed.
@Eric89GXL do we need to change LINUX_VERSION to be able to make a pipe dependency to 1, 6, 27?
This field is only used in test code. Why not just make it static?
AFAIR we could remove this check here.
This is not a good idea, but I'd prefer to not have this if block in this file.
I think we can just use here `patch command-org.apache.dubbo.common.patch command`.
I think it would be good to have these constants inside the `lib/` folder, and then just use `id` in the future.
Line is too long. [100/80]
not sure how you feel about this one
I think this can cause the error code to fail as a result of the "return id" check
I think that `windowState` can be removed.
@alalazo can you help me understand why this is added.
This should be indented before `objExp.GetObject()`
This should be renamed to be consistent with the others above, to make sure that there are other default settings.
Why change these? It's a string literal.
Why not just remove the formatter?
Please also rename to `mConfirmDiscardHere`.
This would be better named `is_true` to match the error message.
This is not needed since nested is only used when a field is created.
This one also needs to be moved to `if (time.Millisecond)`
this introduces a lot of noise. I think this makes it clearer what it was and what it does
Would it be possible to use the same name here?
You don't need this variable.
Nit: space after `}`
This was removed because it's now deprecated. `addVersions.remove(version)` is never called.
We have `bridge.send_command` in the `create_admin` model, so you don't need to check for it here
I'm not sure we should handle this here
This will break existing behavior, I don't think we should be doing `SerializableTree` here. We can just use a `Serializable` to make sure to do so.
why remove it?
We can remove `disable_iptables` from `se_linux`, since it's now unused and should be removed.
go is not used anywhere
I think this is the default
The `gofmt` check looks like it can be removed.
Why this change? It's a bit strange.
Why do we want to check for `readPreference.mode !== 'primary'`?
Line is too long. [89/80]
The issue is that you didn't update the tests, this is only for the core, not for this PR. This is a very good test.
This is not right. The host is disabled with `cur_path = cur_path.gsub(/\//,'\\')`
The `edit_guidance_alert_dialog` tag is used to show as style of JS. I don't see the point in this file, I just changed it.
The plugin uses {@link SamplesGenerator} ?
I am thinking about adding `add_undo` to the `tab` method, we'd also be able to add the `Args` argument.
@marek-safar This is a real real change, but a separate PR.
navigations with keyboard navigation
You can do `dom._prevValue = newProps.checked !== dom._isControlled`
`tests/{ code}` is redundant here.
Does `no-3rdparty` need to be updated?
Can't we just remove this `table`?
I would prefer that this will not trigger a runtime error on error. It might be better to be explicit, and just check if it's not there.
Not a big fan of this for myself: I would say that the version will be used in the user's docs.
we should change this to use `errorLine_map`
I'm not sure we should be checking that the `lvis_v1_instance` extension is still used elsewhere in this PR?
`public static final` is a `static` method that does a `info`. It is not used anymore.
Why not `RaiseSingleton`?
`JobExecutorTests` has to be static, so it's fine to just call it `JobUtils.class`
I am confused about the argument to `check` for this, the variable name should not match what we do for ` their check blocks`.
I'm wondering if a bit of an unrelated note here, but wouldn't it be better to use `clone` here and then call `clone()` in a `try` block?
Ecs and Ecs Beam
you don't need to copy the whole object?
no copyright here, we can just get rid of.
We should change this to "kubernetes.io/hostname" so that the key was in the key, as it is not in the key key.
I'm not sure it is a good idea to add an `config` dependency. It's more obvious that this was an `config` and the `state` is used for `MeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMeMe
I don't see this used anywhere...
Is it possible that we can just return an error? We could also use `return inbounds()`.
This can be removed.
Does it make sense to move this line down into the above block?
I think this change can be made to `Long.compareUnsigned`. That is, since it can be accessed via `bytes.getAutoSeed()` and `bytes.getAutoSeed()`. We're using `bytes.getAutoSeed()` to avoid this change. The `Long.compareUnsigned` method does not return a `null` object.
@danrot please move that, please, as it is a separate patch.
The argument `[]string` returns an array of arrays, so we should just be able to just return `string` directly.
I think this is not needed anymore.
should be removed
I'm not sure that this file should be removed
Please remove the other imports and rename the imports. Otherwise, the usage of the code in `pkg/configurator` is confusing.
Don't use parentheses around the condition.
This is the only place where we would get this path.
Isn't this still used?
It seems we don't need this check anymore.
Why did you remove these checks?
nit: the error is not handled.
Can the `!` be removed from the diff since we have the `.build()` method in `plot_reference()`?
I'm assuming `req.Pagination.Token` can be nil if `fake` is nil (and `Token` is returned) would have returned `null`?
Hmm, I wonder if we should instead use FunctionExpression instead of just `Vectorized`?
This will only work if the first version of the summing the Python relative, so you can remove the second.
Nope, we should have a `[NotNullWhen(true)]` annotation as well.
`Python6464` is already in `reviewers_64`
You can use `var writerWriter.Complete();` here.
This seems to have been the only change. Is there a reason we need this?
Instead of using URISafeName in all cases, why is a URI defined at runtime?
This is a breaking change.
I think we should keep the original as is.
This error message might be useful to log the Error itself as well.
I am still not sure whether you should check that the `IsThreadAgnostic` is a `IsThreadAgnostic` here (which it was a number in the `_layout`).
Could you remove LoggerFactory from here and just use `LoggerFactory.getLogger` instead?
So now the limit limit is always the same as the limit limit? Is it possible that the limit limit will never be created?
What happens if the `Success` is not the same as the `AccountAlias` above?
Is this one needed?
I wonder if this can be just `procCodeA.localeCompare`.
I'm not sure why you would not do this here.
I think in the case of no-cache Gobblin-ManagedMachinePool we can just skip this check
I think we should not introduce a new facets here, since it is only used for the client-side of this class. This is a very good idea and not a deal breaker.
should be before the new call to gett please
@mjkkirschner Is this really what you want? This would avoid a memory leak. What if an empty string and an empty string is null?
This seems to be dead code.
The code above does not match, so this one should not be needed
I believe we're using the "real" path here, which is the `table` field. So maybe we should rename it to `Dataset_path`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Can we just add the import to the base proxy proxy and use the `payments/crypto` instead?
`Bibliographic` and `Bibliographic` are unused. Shouldn't we remove the `Bibli` part?
@kroitor since you're using these constants, I'm not a fan of having two constants. Perhaps it be better to just pass the constants in?
this if statement doesn't belong here
This is not needed anymore. `hashivault` is not needed anymore.
Is this actually false by default? If not, how about just setting land to false in the case of `xwayland`?
remove this trace
Shouldn't we do the same for the other imports?
Should probably just be `CheckErr` instead.
Is the correct bits to 1 bits?
Another reason to not put MolToSmiles on a separate line. Is there a better way to do this?
`self.param` is not used anywhere.
`public` can be removed
@wido We should probably be using entity.factory here
This was a very old code. I don't think we can pass a `outboundIp` to the `client.ip` instead of making this an interface.
Nit, using the namespace as prefix (see other files below)
Why are these lines changed in this PR?
@deads2k do you have a problem for making this change?
We should be able to use `STATUSUp` for this instead of hard coding it here.
The format for the wait param still needs to be changed.
This is a change in behavior.
Would prefer to have consistent naming around `synchronized` and `count` on consistency.
should we pass a set of users to the user?
I think this could also be "Este" because it is actually the other "Este" or whatever.
Let's use `testmod_id` here instead.
We should also err if there's an error and we don't ignore it, right?
I would move this to a separate `ShardID` package
Are we missing ` trail:` here?
I would use `getoutpostARN()` for this.
Trailing whitespace detected.
Is this test no longer needed?
IMO we don't have a good implementation for this. It is not a good idea to put the IM type in the `IM` interface.
Please use `is_aio`.
It seems we can remove this method and only put in the context of `cleanupSyncsSoupIfNeeded` directly.
does this really work with `artist`?
I am not sure if this is the right fix.
Is this needed?
Can we check if browser != 'firefox' ? Wouldn't it be better to check if browser == 'firefox', for the actual sorting by checking for both `get_firefox_options()` and `get_firefox_profile()`?
You can use `if 'text'.format('Content-Type', '')` rather than checking if it isn't present.
I think this should be `user_id`
Why are these needed?
There's a typo here. `ADC5` is already loaded on `init` function. You are trying to use it in the ADC pins for example.
Is this needed? Is the chain of a project not going to be used with `messageReceipts`?
@lukehoban for myself, this was the wrong change. We have some "ngrok" in our tests (1 overall). This was why this was added for the tests as well.
`s/map/map/setting/_component/`
This is not necessary. You can remove the `[always-9][0]s...` in the list as well.
Hmm, I'm not sure what `immediately` means here. I'm not sure what the difference was here. The difference in the test is that if we are only testing `StartMetricsSession` it means we don't need to check the result on line 601. @smarterclayton @deads2k @mfojtik
This tests the `testGOPATH` call.
Can we just track of whether we should do the status and not the stats calling right after this loop?
Is this needed? It will be used only when `Name` is not found.
Why do we add the "hardcoded" parameter to the top level string? I think it should not be used at all, it should be hardcoded or not.
Is buildFilter ever called without a pointer in the api?
This is not a valid test.
Can we make this an enum?
I'm pretty sure the `name` property name is not necessary?
is this used?
Can we add more context around that? I think the best approach is to use some separate method, and it could be useful in a future PR.
@cvializ I'm confused why we are using a global option here.
Should this be `useDeflater_JDK8252739`?
Why is it `internal`?
Why was this removed?
It seems that you should probably use a single main method, as you don't use a single one.
Not sure how the default will be used
I think it's better to add a parameter in the first line, it might be easier to see what we're expecting.
Is this a global var?
It seems a lot of things indeed have changed this, can we make a separate PR?
I think you should check for nil here
Nit: I'd prefer if we keep it in a separate PR for the future.
Should we move network_params and SCM_port to a new line if the user hasn't specified a port after the user hasn't specified a config, and if the user hasn't specified a default peering port, and the user hasn't specified a port that will be able to compile.
this was removed because it is the same as the one in the core, which is not the same as the one in core, right?
Can be done in a follow up PR?
This code is repeated in many places in `attrs.get`. I think it might be better to move this check inside of `getSpeechTextForProperties` and do it only when roleText is provided.
We need to handle that in dcontext, as it is possible for this code to work correctly
nit: no longer needed,
I would not change the error message.
Is this really the correct place to put this code in the feed URL? I'm assuming it is just making the URL explicit.
I believe you can also use `tag_3002_col_2` if there is a `prop` argument.
Does this work on windows? It would make sense for the use of the module, not that it is.
@jackfrancis seems this change is not relevant ?
Is this related to the PR?
I would suggest returning `strCon_strstr()` for the test. The test would be `(strCon_str, string) != 0`.
I'm not sure if this is a bug. We should probably make it `final` instead of `final`.
Is the Fork<C> still needed?
Can it go before?
I don't think we need `deactivated` here, we could just call it `on` instead.
It seems that we need to use an `positional` here because we want to have a `@SuppressWarnings("unused")`
Can we change this to use `if (!version <= 1100) {` and then have a function that accepts an empty list if the version is a non-11 version...
Does the original intent of the code base correct? The reason I'm not sure about the original behavior was to change it here, but I would like to avoid having it on our own line, I don't think it is a good idea.
What if the `html_safe` isn't used? Why would it not work?
Please use `String#subject` to reduce nesting
`defaultSamplingProbability` was added in the wrong place and should be deleted here.
This function is used in the `generateDeploymentStrategicPatch` method, so we need to use `generateDeploymentStrategicPatch` for it.
info() is deprecated and will be removed as well
This will also check for the DCHECK type.
Why does the `default` check need to be removed? It isn't used in any of the tests.
I'm not sure if this is actually the right move - but it should be a no-op, and I'm not sure if it would work.
This is unused.
I think it's better to move to `videoConstraints` as that's what we do in `videoConstraints`
This class does not exist, it's only here, because the `validates` can now be `null` and it's the last one you added.
`Collectm-abi=generic` was previously a modified flag to be set on `config.Target`, but we don't have any other flag to `dubbo.WasmAbi`. I assume that is why I had to do the same thing with `config.Options.WasmAbi`, but the `Astm` class actually fixes it.
Why not `Append` at all?
This is a bit odd... why is the span a pointer here?
nit: this can just be a const, since you do not use `keybase.topology.SearchTopology`
Is this a valid admin, or the admin? If there isn't any change, why do we need to change this?
I don't think this is the right place for this. It's better if you do this in `claimFromRewardingFund` and it still runs in a `var` and not have it in `claimFromRewardingFund`.
I'm sure it is the best option here, but I'm not sure it's worth doing. Can we just use the `NOGIL gil` instead and have it be `useQueryQueryMatches = false` (in some other places)?
Can we just use `height.getDefaultTimer` here?
I think you can add another one in `setFilter` and avoid this `else` branch if it is never used.
Can we just return the error?
I would move this method outside of `DatabaseObject`. It's not a blocker for the future, but the logic here is to make the change more readable.
I would not add the filter here
Instead of calling the route, can we just use the `data` function directly and have the `data` return? This way the function would be only called once and only if an object is present, and then we would get the value from a `SetField`.
I believe we are missing an `||` here and below
shouldn't this be `[]0280404*`
We need this to be simplified to `KDbKey` - can we name this as `ToBigEndianByteArrayWithoutLeadingZeros`?
why remove 6k here ?
should this be configurable? what is the issue? Is IsAppInsight used for?
This should be done in the `used` block as well.
why is this removed?
Why do we need these changes?
This can be simplified to `CPU` and not `Object`.
I think `setup_rvm` should be `nil` so that when `rvm` can be `nil`.
should we consider making this a `TODO put this` instead?
I think you could add a type to `uuid` in the `if` block to avoid the need for `from_ts`.
this is one of the non obvious groups of code :-( I'm not sure if this is a good change.
I don't think we need a peer. Can we make a function called `peer swarm.Address` or something? Seems to be more descriptive of what this means.
Is this change necessary? It is used for all caps that do `redirects` on line 675. The rest of these changes seem to have been the same.
Why not use `common/concurrent/Barrier.h` here as well?
This import needs to be removed
Why the change to a string here?
I'm assuming we're not using the same type for every key? Can we just add a parameter to `DestroyCallback` and then have it return an int?
In this case we are using an `listUserRepos` function to make the user more generic...
Style/LineEndConcatenation: Use the new Ruby 1.9 hash syntax.
you could add the `add` in the `before` block to avoid this change by using the same `order` method in `add(...)`
I think the only usage of this should be `_dogStatsDMonitor` and the `traceAgentProcess` should be `volatile` and not `volatile`. It's a more appropriate solution to use.
The condition should be `|| x64. */` instead.
This should stay on one line - it doesn't make sense in this case, but it's a bit nervous
The option name makes sense. I'd rather have a flag `const` that's what it's doing.
`GetType` and `GetCollection` would be a better default value.
Should the condition just be `client.getWorldWorld(client.getWorldType())`? Otherwise, there is no need of a variable, it's not doing anything.
why do we need an `conidences` here? why not just use a dict to avoid modifying the dict?
Not sure how I feel about this, what do u think of this? I think we should be more explicit with what we're using `kube-ipvs0` to handle a new config property in the context.
I guess the change in the output was unintentional. I don't see any reason to do it.
We could rename `Resources` to `resourceLE`
why is this being changed?
I would also call this `JSON_DATA`.
I think it is better to be explicit here: `IScopeManagerManager.Instance.DistributedSpan()`
should be the only property that uses the field name in this class.
could you put some of the lines above too please
This should be `final`
`_poSSwitcher` won't be reset in finalizedHeader. I'd prefer to remove the assert
This is good but if I want to change the message of "diskImporter" in the name, I would expect that `v` should be `'data-diskImporter-importer-%v`, not `v` or `data` here, but it's not clear what it's going on.
This is not a huge fan of the label name. Why is this not `index_scols `?
Why is JSONValue a map here?
Same as above, let's not use a `Object->` if necessary
@deads2k i think we can change all this to `ChannelImplementation` now that we're using `ID` in the future.
I think it might make sense to call `removeFiles` from `addFiles` to keep it consistent between the two places, and the other method. It might make sense to have a method that does the same thing as the one that does it.
What is the ` idxCurrentSort`? Does it need to be there too?
Would it make sense to put the "IMPORT" into the `static` class as well? It seems like it could be just used for the "minimal" class. If we don't do this, we probably should add an issue to track down the runtime.
nit: why not use `is` instead of casting to a const?
I think `convert_to_timestamp` may be confusing here, since `violations` is an instance of `types.Type`. Do all of the object need to be passed?
I don't like the idea of this, but I'm wondering why do we have to do something like `if (!isValid) {` on `if...else`? It will always return `true` if `isValid` is true.
This could be a constant
Can we avoid the processing-level object's task name? It's not really a repeat name.
Should this change be undone?
(style) line over 80 characters
The header isn't correct, it is just `adios2.h`.
I think the original version was missing here
This is not the same code as we use `c.leaf.remote.Hub` in the function, so we only need the `c.leaf.send != nil` here.
This is a bug fix.
It's still good to keep the "used" here, but it's in a separate PR
I think this should be `dao.Stop(ctx)`
I think it would be simpler if we could also check if the `output.created` is not present. I would suggest to add `util.warning("Currentcounter", [None, docrootApplicationApplication)` in `util`
@matt-gardner How do you get this error code?
@wido We'll need to re-enable this change in the future.
Missing space around string interpolation detected.
It's not clear to me that `should include_sexp` is always defined here. If it's only, it should be either `build_created` or `build_created` to avoid double backslashes.
what if the goal of `ChangeForReader_t(*sit)` was to set the array? `this.array(REQUESTED, chit)`
Is there any particular reason for not using `Word` as the `element` (which also works with the `lodash`) as the original dependencies, rather than `Word`?
I think we should remove the public `avroSchema` here, since it is no longer needed.
I'm not sure about this... Do we need to do it in the new `GoogleComponents/data`? I think we can just remove `dependenciesFilters` as well?
This doesn't seem right. You have the `_` key, and I wouldn't expect that you wouldn't have to check the `is` key in the extension.
This is a bit of an unrelated but the rest of the code is much nicer with `Input#visit` on the `Input#visit`...
`SecurityProtocolType.Tls | SecurityProtocolType.Tls12 | Tls13` is in the param for the second parameter.
This wasn't necessary. Was this deleted before?
I think the function is a good place for this. It could be something like "public_many_message" or something similar.
you should probably remove this whole file since we only use it in your branch
Can you try to keep this file as reduce for now?
Why are we changing the reason to a span here?
Use %i or %I for an array of symbols.
"TLS" is not suitable to support TLS (and thus does not support TLS)
Why not just check if the response is empty?
I don't see why this is here, the test is still working.
I'm not sure we need the `category_manager` here as the second argument is already defined.
I would recommend adding a `[UnsupportedOSPlatform("")]` to the public constructor instead of making it public.
I'd like to see this in a separate commit, but I would like to know why that would cause issues.
Is it expected?
I think the import should be removed from the list above and the next one on the other.
`expect(trail_with_progress).to be_a(SimpleDelegator),`
This is not correct. The code is a bit hacky, but it's probably ok.
I am not sure this is a problem for existing users, I'd rather have the hook called `ProtocolWithlookup` which is what we are doing, instead of relying on this.
This is a bit odd, because `mymymymymy` will only include `TargetRFS commands`. I would have called `mymymymymy` instead of `mymymymymy`
This and the one below are just `maxrequest`, is this intended?
I think this needs to be removed.
Do we really need a new cpp on any of these tests? I think we should be returning returning `dialect` instead of `dialect`.
Please update the docstring accordingly.
What is the difference between setting a_string and a_int to the base class here?
would it be better to use `CrlPackage.shortDigitalSignature` for this?
What about putting these lines into constants? Should we have a `TODO(tmp)&tmp);` or `&tmp` and then we can do it in a `if (tmp != nil)` so we don't have to check that it's present later?
You need to add the conditional in the `if`: `if (keyProjection.schema()) return false;` and then you can add one line.
`Status::Error` was not called in the call to `onError_` on line 539.
I don't think this change is needed. We have to add the package imports for v1alpha1 and v1alpha0 (see below)
Can you update `controlTypes.ROLE_DELETED_CONTENT` to `controlTypes.ROLE_RestRest_CONTENT`?
You can remove this and just use `assertTransformer()`
Just curious, why did you set `t *V4Trie` to 0 here instead of an empty string?
What is this change supposed to do? This is the only change I'm seeing as is so much less code I'm not sure we can make it public, and I'm not sure about it.
can we do this in a const?
I'm not sure if we should remove this, since it's no longer used?
nit: `this.flowFinished && this.execId`
Maybe a `Workflow Workflow`?
I'm not a fan of the idea of the link and passing a `symbolic link` here. Should we use the `tlsmbolic link` here, instead of the `symbolic link`?
@samouri do you think it should be `@param string $rangeFilter`
This line should be useless
Is there some linter rule that could possibly get lost here? (I think it is only useful when `getAttribute` is null, since we're not checking for `null`/`getAttribute`... but in the end, we should probably get a null value from `getSVG` if it is null)
I think this should be removed from the constructor.
This change is needed. `isFocus` is always true and we are defaulting to `True` here, so `isInNew` can not be `True`, right?
Style/IfUnlessModifier: Favor modifier while usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
this might break things
This would be a breaking change for some of the other things.
So is there a reason why you replaced the `addrs.ok()` in the `write()` method? I would expect a `return addrs.value().empty()`.
I don't think we need to be passing the JSON pointer. It will do the same. It is just the same thing for other tests.
this is wrong. Series is a number of seconds, the problem is that we don't set the latest 3.x count to `return ends` and we don't set the latest 3.x count to the old one but set the new one to the new one
Is this a BC break? It's a bit of a large regex to figure out.
Is there a case where we don't want to send an empty config? If so, we should consider moving this to a constant somewhere so we might as well give this more meaningful information.
I was thinking that we can skip this limit in `posNext` because it's already done in `var limit = input.IndexOfAny(new[] { '+', '-', ']' });)`. The `posNext` method also has to be `var limit = limit.IndexOfAny(new[] { '+', '-', ']' });)`. But in theory, there is no guarantee that `var limit = limit.IndexOfAny(new[] { '+', '-', ']' });)`, which is what `var limit = input.IndexOfAny` does. The `
What if the current HasStock actually is defined?
this file is duplicated in the `klog` package
last_modified is defined on line 121, so you don't have to add it here
Is it needed?
Shouldn't we use a specific assert?
Is the new check that `http_proxy` is not set to `HTTP_PROXY`?
Why the check if `width` and `height` are non-null?
does this change behavior? It is a test that will be updated in the future
Does this mean the split size isn't always available? If so, you could write a method `splitSize<TableProperties>>` instead.
Shouldn't this be division?
Please add a check that this isn't set.
I'm wondering, why is this needed here, or is it a `": "GET"`. If you're using a `Core` field and a `KeyError`?
Why is the encoding needed? Are there any other exception handling?
The param name suggests that it can be `positional=False`. So it should be `positional=True`
Please revert this file.
I think we also need to add this `#define spark_session_local.resource_fn(None)` above and let it go above.
Why did you use `application.stream` here?
Can we make sure we only have the `sp2` listings? We've always seen the same list of fields, and I don't see the list for the Cesium and I think we should change it to `w` or `sp` to be a `minval`
is this necessary?
Why change this?
This change is unrelated to the PR but should be reverted.
`NewTestCtx` returns a non-empty string, why not use `ctx.NewTestCtx(t)`?
why not use an enum instead?
Please add a license header.
Can we use the `NumberParameters = 2;` here.
I'd prefer we don't use the `LocalLocalLocalLocal` class anymore, as it's used in other parts of the file. It makes more sense, but it also makes a lot of sense.
Is `LinkedFile` used?
why this is removed?
We have no default for this field, so maybe `isFirstAdmin` is better?
Is this change required? Can't we just remove the unused `if` and just inline this one?
Why is this changed?
Maybe name it `IdId` since it is a `parentApi`?
Perhaps this should be `args.add_argument(args.result, args.max_dets, action='store_true', msg='args.class_wise', 'args.class_wise')` (as in `api.py` and `api.py`). The only reason this needs to be a help message is to add a `list` to `_add_argument`.
Why are we changing this value ?
This seems like some existing code. Is this a regression?
from config import template?
Is this a leftover from the PR?
this is not related to this PR - just a few minor changes :-)
should we make this a `StaticNodes` instead of an optional?
I think we can remove this.
This is just a minor suggestion, but maybe it's worth it to be a separate PR, just like the one in another PR
Also not sure why the `else` check is necessary (at the same time as the `bodyParameterType` above).
I think it was not needed at all, but it's not necessary to keep these, but the others have their own custom models.
Is there a specific reason we are not using `gcr.io` anymore? Or do you think that this is the proper TODO?
I don't think this will work. The `process` variable should never be null, so the `null` option is not being set.
This looks like a typo
The same question here, if OP_isb is defined in the above `OP64`, the following `&&` can be removed. I'm not sure how this is used here.
The record record is already tricky and can't be closed. Please change the record record later
This test should be testing for the new `s_nan` number of supported values that are supported.
Is there any chance that the `data.TlsHandshakeHook` will be called before `tls.TlsStartClientHook` is called and there is no need for a new `data.TlsHandshakeHook` will be called when `tls.TlsHandshakeHook` isn't. In other words, what does "tls" mean?
This needs to be done after the "default value" check.
Why not `getUrlFromRouteCache($type, $node->id);`?
I think this is a little hard to read but I don't think the `this.activeEditor` is the right approach. It should always be set to `true` by default.
Is the return here really needed? I think it should be the first error, otherwise the error would be returned
I don't quite get why I was looking at this code. This code is only being able to handle a `--Aggregate` I was trying to get a `--no-87`. I'm not sure we should do any validation here at this point, but I'm not sure if it was the right approach, because I don't care.
Can we move this to the `withSetup` section?
I am curious why there is no such test in the `#ifdef` above
Why is this file removed?
You are using `string` instead of `str`.
I know this is a little bit of a hack, but would it make sense to make the `/` prefix clearer if it's the same as the one in `/`? Maybe just inline `/`?
This one is a little confusing. I'd rather see one method on the class. It might also lead to a bit of an overkill to have a method call like this.
I don't think it's necessary to change this line.
Please don't remove trailing whitespace
can we log it as error or not?
This needs to be removed.
I don't think this is used anywhere
It's not clear why this is named ` HttpsConnectionFilter`...
This isn't a good idea, as this function will never return null.
do we need the `wp cli` here?
Do we need to ensure we are not using the read API?
Please add `config-` to the docs below.
@nmittler - can you confirm this is an issue?
I am a bit confused, if this is a url and the name will fail, and the function will return an error (as the `Credential` field is still in place) it will have no effect in the actual error message.
is there a reason we're not using the existing "Oracle" name here?
Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
Why was this changed? Does the original logic have any side effects?
if we have the check in the file above, we could remove this.
This method doesn't use `QueryVisitor visitor` because it is private.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [87/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think it's fine to leave this in, but I'm not seeing that it's used anywhere. @pablolagreca thoughts?
Could add a `ObjectObject` annotation here?
Do we really need `InitContext`?
I think it should be part of a separate if
Does the `else` here need to be moved down into the `if`? Otherwise this would break the code which uses `We` anyway right?
This should be `trace`, right?
Should we just add a `// +optional` here so that we don't have to add this in `// +optional`?
I don't think this is correct. The version should only be set when the version is actually set.
I think that it should not be 4, right?
You should also have to use ChecksumAddress and use it in place. The code is not related to this pr though.
why not `HeaderRestart`?
I don't think we need to expose `Keccak.Hash` for `HeaderHeader`
Why is this changed?
We don't seem to use this in this file as the source types are not modified. Also, why do we need to add the `attributes` attribute for this controller?
I don't see any point in keeping this method.
You should use `===` here.
I'm pretty sure `alias` is the correct thing to do here. I guess it should be `index = self._scol.alias(index)` ?
The root device device should be `""`, not `""`
This is the only place where we can't change it. I would suggest to rename this to `event` to make it clear that it is the only place we're removing.
Should be able to see this if `p.value_size` is an empty length. This means we don't need `None` check if `None` is an empty length, but also the if/else clause.
This field can be removed and we already have a default value.
I think the old `WindowText` property needs to be renamed to `_get_windowText`
This and below also can be removed.
Not the best place to change this, `(uint64_t)` is also unused
Do we need to change that?
This line will not work, because `noext` is an array, which is the proper type. But, I'm not sure if that is the case.
Should we check for any other uses of this function?
this is the actual change. `t Span.SpanContextFromContext` will cause OOMs in the code as well.
`bool` is a little bit confusing to me, what's the difference between num_low and num_low_quality?
Is the default config used in any way? It doesn't seem like it will be used anywhere
This change is unrelated but why don't the `.label` in this file?
I guess `mlflow` should be `pyspark`, which is the default.
Should we update the `TODO` to match the other types?
Use `FileSystemInteratesManager` here, not `warn`.
Can't do this in this PR, but this method should be called `_element_if_visible_if_element`.
I believe this should be fine too, I'll let you update your code in your commit
I'm not sure if it's worth it to store this `errNoClient` in a context, and just pass in a `ctx` function. We need to do this in `pkg/config.go` as well so we can pass in the context here. Maybe just do the `ExportMetrics` here? This is a little misleading as I know, but we might as well do the same for `custom` and other `getClient()`.
I'm not sure that's the right change.
I think we need a test for this, right?
Just a small nitpick: We usually prefer `dep_status` to be consistent with `trigger_instance_id`, but that is a bit confusing.
This file is used in an in-memory release or after another PR.
Are there any potential issues with the `!=` operator being replaced with the `!=`? I'm not sure this will actually be a problem if someone else tries to use this.
This needs to be in a `spiffe/http/pprof` package.
Can we use `debug` here?
shouldn't this be: ` - see:`
Is there a reason we don't use the `initial_NOT_SOME_too_see` constant here?
same here. No need to add parameters.
Code Climate says this is not tested.
Is there a reason for using `r.Client` in the config file instead of `r.parallelConfigJsonKey`?
Why is this sleep necessary? It seems that you are not sleeping with sleeping in tests.
I think we can remove KV version without the return from the KV if it is not enabled.
this seems like an odd choice of V0, how about extracting the check to something like a lot of other plugins as well?
@tarekghov @rhymes Do I understand why this is needed?
I think this should go up.
This should probably be added in `setup.py` (and the same in `setup.py` above, too, but I didn't know)
why is this changed?
This does not look very neat. The host.Host function here is the `host.Host`. The host should probably be either `Host.Host`. I'm not sure if this is a good change to `host.Host`, but it seems to me we should be using something like `host.Host.Host`, and we should only use a function from a field of host.Host. I'd rather be in a class that can be used here.
I'm not sure if we really want to keep the old helper here? It seems odd that we don't have to go back to the timeDuration. I'm not sure we want to go back and just do that for now.
This should be in `setLanguage()`
@jona-sassenhui1991 Thanks this was not the reason for the change
I don't think we should be using this for the new revision since it's always going to be defined here.
I'd suggest to use a more descriptive name like `get_get_cetet_accepted()`
This link is not correct
I'd be happier with a `HttpMessageHandler_https` constant.
I wonder if this could be an error if it's only used in one place.
same here, let's remove the `if` and the associated `if`
This is a BC break.
`StartTime` was introduced to be a subclass for a user who was trying to configure it, so I removed it and just moved to another place.
I think I'd prefer `is_pe` over `dump_puppet_log`. The caller should be aware of `host.is_pe` and `host.is_pe` since they are both specified for `dump_puppet`
This is a temporary part - it makes sense to have a separate PR for this (not to be sure how to fix this in a single PR), but we should have some tests that cover it, and it's not really important for the new functionality
Why is this default? We don't use it.
This is the only thing we use for the `ValueTask<Keccak?> SendTransaction(Transaction tx, TxHandlingOptions);` check. I wonder if the `AddTxResult?)` is a good idea. @kalefranz what do you think?
@mikeshultz did you intend to get rid of this to work? (And in the `for` loop)
I think this is the change that will break existing code. The fix will be the bug that was introduced to get the same fix from the previous commit.
Is there an InstallCRD that is already a field?
I don't understand the purpose of this change, can we have it in one PR?
I feel like the `nil` can be removed now. I think it can be removed since the `line` already creates a nil if the nil was actually found
I think this is probably not the right place to remove this. Also, it may not have been correct in this example. The exact reason is for `aws-sdk-s3` (in the future, it's not possible to move to a cross-origin resource sharing, it is not possible to wait for a cross-origin- resource sharing to a Amazon Simple Storage).
Why do we have to call this in `remove obsolete indexes`? Why isn't this enough?
What if we have an index on the `id` instead of a string? Should we have a `nil` for the `current_user`?
This code is in `setUp` and I'm guessing there is another situation where this.toolbox_ could be a null value if null is passed, since it is null if the positionbox is null.
Why not just use `ReSharper.missingTo(peptideGroupDocNode)`?
nit: can we call this `dbConnection` for better readability?
this is not assigned correctly
Nit: `@sig` is already an instance variable.
The openflow string should be the flow for the first policy.
This function does not have the name `function_id`. I guess it's a separate option.
Please add this to the `env_steps`, `Split_Syntax`, `Split_steps`, etc.
Use `Subscript` and not `Subscript`'s store.
why are we doing this?
This is still a separate fix.
I wonder if we can define a `POSIX_` constant somewhere? Or maybe it should be `_WIN32` if possible
This was a bug, but is a bug.
You can move this up before the `if` condition above.
I think that `first` should be imported in the same package (not in `build()`).
I don't like this name yet. It's an `visibilityProcessorProcessor` but this name is more of a `visibilityProcessorProcessor`. Can we move this into a constant for clarity? I think that's a good pattern.
this is unused?
I think I'd prefer a constant for "FIPS region not allowed in ARN", as it is a good default.
I think this import is unnecessary?
can you avoid this in the main `base_` branch?
So what is the impact of `base.currLimit` ?
I would use `R RS::Core::Pending#skip` to be consistent with the rest of these
This is an interesting optimization - I'm assuming the `pod` is not a `Name`?
This will give us a better codec name for example `codecs.register(..., codec=true)`. I wonder if this is an issue that would be thrown for users? I wonder if the codec should be used in the `<bugs>` part in `utf-8`?
This isn't going to be invalid.
Why do we need to set the param name?
This is actually the actual fix, as this PR has it been merged as part of this PR.
I would have used the `pagespeedWidget` here
This change is causing a test failure... I don't think it's worth.
I'm not sure if `blockNum` is necessary.
Should use the vire agent.
The issue I found was that I fixed this PR. The `#include` suffix was only being used in the code, and `#include` is not being used anywhere else but now that you're using it. The `#include` option was not renamed as it does not.
The only time I saw is that the original request was actually a bug and this is the user seeing.
I don't think you need this. We don't want it for ` ALWAYS_UPDATE` to return the class name.
Nit: can be simplified to clang-format.tab?
Nit: unused import.
This is the main fix. If this is the problem that we want to fix to a different method, we should just set the default values to `undefined`.
You're not actually using the `--help` option here, as you do here, but you're not using `spring.needs` which is more correct, because it will be more efficient in terms of the `--help` option. This is also not a problem because you have to use it with the `--help` flag.
`InitialWorkingDir` is only relevant to initialWorkingDir, so why did it go here?
Do we really need the discard-sending line?
Does this need `kid` or `kid` to avoid unnecessary issues for each of the existing `dstack_offs += 15 * XSP_SZ`?
This can never be `null`. We're not using `getermsOf`.
nit: rename
I think this is still needed, we should not send a `send()` function.
I think this import can be removed. We don't use `RELEASE_FROM` in the name.
I'd prefer we don't change the hash here.
I don't see any use of `BaseLogging bool` in our codebase, but I guess it is not really needed?
It's probably better to add evloop_latency_ms in this case.
This line can be moved inside `._getHash()`
Can you move it to the `gen` package?
This interface is a little confusing to me - can we call it out as `TDiskBlockCache`
It doesn't seem like the other PR will use this, should be reverted.
Use `%q` in `%s`?
I don't think that it will hurt to use `isinstance(offline, list)`. I think it should be fine to check for `None` in case we don't have `or` or any other value.
What do you think about using a proper implementation of these variables instead, like `analyze_to_frequent` or `analyze_to_frequent_device` to make them clear that they are all in one place?
It's not necessary to change these, since they aren't used in the PR.
This should be done in _app/models/window.js
I don't understand this change, it's not really a bug, but I don't see where this change is called.
Does this cast only take the size of `i`? It looks like it was just adding the cast (or at least the length of it) that it was never checked.
I don't think this is right. We should have a default implementation of proto annotations that have the proto annotations at runtime.
This line is also not needed. It is also included in `<env>`
Is there a way we can do this without the `skip`?
The only thing I found is that we don't need the `GetPhysicalDeviceDisplayPropertiesKHR` flag anymore?
Is this something that we can do in the past instead of `IsDockerEngineRunning(bool, error)` ?
why `get_string_by_dialect(3, 3, 700)`?
Does this need to be a `\n`?
act_cfg op needs to be added before download_channels
what do you think about replacing these with `if options['args'] || profile.as_json['args'] || profile.as_json` and if it's empty?
I'm not sure if it would make sense to include any include from thefolly interface. If yes, why is it needed at all?
Please use `dom.name()`
This should be done by the `try...` block in `BuildOutput.txt`
You should just use an variable to make this clear that it's a var.
This could be a constant
why min_x 0 and min_distance value? why change it to 0?
I don't quite understand why this check is needed. The goal is to create a new `maxp` that checks if the maxp is not present, and that will be incorrect, which is not the case anymore. It seems a bit of a hack to fix the problem in this PR, but I'd like to fix it. It also looks like we don't have to do this for the `is_maxp` case.
I don't see where we use the `Internal` event. Should we be using the same value here?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is this really needed?
Is this a change in behavior? I don't see a good idea for it to be.
This should be `config.NetworkConfig`.
Is the `createPrivateMarkerTransaction` returning true here because the superclass is now no longer needed?
I think we should make this `DefaultError`, as it is the default.
How about `antrea.io/antrea/pkg/features`?
@sparrowDom This code doesn't seem like a right change.
This is a bit hard to read, we don't know what to do here if opensearch_description_tag != null? I'm not sure we should change it.
This seems a little odd...
I don't believe the `||` is necessary.
Can you please add a `findPreviousMetadata` with some other `doCommit()` method? (and the location to metadata table) I believe this is what we need to do when we can re-use a `TableMetadata.validate(base.file())`
we should add `detach()` instead of `detach()` so that we don't have to duplicate this function.
This is probably not right. It might not be needed.
This will break the build step for all the tests.
Style/MutableConstant: Freeze mutable objects assigned to constants.
Why not use "clear"?
This could simply be `causalConsistency`. Same for the other uses below.
Important change?
This is an error, right?
It seems like this is the one line change.
I think you need to pass the array to the `->->array`?
The name of this function can be misleading since it's not implemented anywhere.
I don't think it is a good idea to have all the `notificationMessageHolder` methods in `k9-notification`. In other words, what about having an `ClassHolder()` method on `addMap`?
We usually avoid wildcard imports. We should be able to fix this.
This will be wrong. This is what we do in a core environment where the core is in the hash.
This would be a regression if we use only one table.
Why do we need this? Can't we just do `// +build !openbsd`
this is a BC break, right?
I'd rather not have this `Histogram` be zero, but then we don't have to make that defaulting the user's local defaulting to `0.2`.
I think `[0]` should be on `He2`
`s/tix/tix` is a bit too big for this PR.
`throw new KeeperException.NoNodeException(No collection found at path: `{`
This fixes the weirdness of the blankity: > The `download_url` will be blank after the blank line (which may be incorrect)
This was a bug in `Bolt::Logger.deprecation_warning` which was removed in Bolt 3.0. Does it still work?
This should be in a separate PR, I think in a separate PR that will pass the `options` object and the `filter_options` object that will be used as `options` as a string.
Do we have a ops.deleteFromFavorites(ctx, fs.favs) in the error case? Why not move that to `if ops.deleteFromFavorites(ctx, fs.favs)` to after line 153?
Why is the count count count used here instead of the count count? I'd rather just set it back if it's 0.
This should probably also be in `DefaultErrorFunc`, I think.
why not `if in.HTTPMatch == nil {`
I would make this a `relationship` rather than a `_`
nit: the `optional` can be used for introspection (in order to make it explicit to call the constructor)
The old code had a "metric number of Close written" but it is only written when the user is logged. Should we not start with a constant?
This looks like a regression. Why don't you do the same for loadingGauge and cancel the other TODOs?
I'm not quite sure how I feel about this change. I'm unsure which one is the case. If I'm not wrong we'll have this on a server-side. Do we even have it in the list? I think we are going to do it elsewhere in the code, just thinking out loud.
I don't see why it's possible that `p_jmsg["compress_method"]` would always be `nullptr`. Should we use `!is_compress()` instead?
Shouldn't this return `true`? It looks like it will be the case that a container gets appended to the input string.
Please don't add trailing whitespaces (it's important for the first two-lines statements).
Is there a case that we can't switch from an int? (And the one that is not related to this issue, I don't think that it matters)
Would it be simpler to make this configurable by default? Also, I don't quite understand why we use a `_t0` constant if it's not set in the `if time` block.
I'm not sure that this should beautiful.border_color_marked as the solid colors is supported by default. The border color is the client not visible in this class and the client is set from the start of the solid colors.
remove empty line
This is very unrelated to your changes, but why did you get this?
this was moved from the same place as line 218, please revert
I would use `globaletheusMetricBuilder` here
I think it is more readable to put this code in the && instead of adding it here.
I don't think that it can be NULL. I suggest `if (copy->segments != NULL)`
I would rather check that this is only used for firstname, not last_name
This is now done by just a single `ParseTime` which is never called.
This change is unrelated, can it cause regressions?
We should be using the braille-patterns.cti directory.
Is this used anywhere?
This is not a good example. Do we really want to expose `HttpStartLine` as a class method?
(minor) maybe `!`
Just a little confused by how this `to_sql` is used, is it necessary to do `paginate_by_sql` instead and `to_sql` are called when `accounts` is `undefined`? If not we're not testing any of the `to_sql` logic here, so this is fine.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think the old name should be `filesystem`
Is this related to hex and hex?
We have 3 different ways of implemented, and the one below, is to not send this to all platforms and send the new ones as well?
why is this required? why would we fail if we do not have a non-empty script?
scheduler is used to use it on the next line, I'm not sure if this is an issue with a specific case of something, and if it really isn't, it will try to avoid relying on the `scheduler` property being used
Does this cause any regression? Or is this a BC break?
I'd prefer this to keep our ability to store anamplerName (in the same package) in the same order.
I think you need to add `parameterGenerator.setHttpParameterType(BODY)` to `HttpParameterType#BODY`, as well.
Why is this necessary?
Is this the right status to handle the status status? Seems like you might wanna consider doing `status` at the end of this function
I don't think it's possible that the memory pressure could be coming from a constant or not, but I don't really think it's a good idea to say that we need to do it for the `Transport` section of the code (and then remove the `l`).
I think that this is an interesting refactor, but I think it's more likely that we have to move all of this test into a helper function.
You can just use `this.getState(collapsibleColumns)`
@stephentoub do we need to keep a `encrypted_chan struct` for the pinging table? Or is it not that that we don't need to specify the ` stop` at the end of the function?
Should it be docker.AuthConfiguration?
This is an API change, and will be easy to understand.
Should this be `regex/`
This is not what we want to do. `repo.CreateRepo()` should not be here.
I think we need to bump the default value here to avoid creating an `SQL` path. I'm sure they can be different from other projects (and I think this will be an issue if there are more than the same folder at all).
I would rather see the `element = 0` as the second argument here.
I guess this should be `rule`, `ruleFetchThreshold` and `PartialPageFetchThreshold`, or something like that.
Line is too long. [89/80]<br>Use 2 (not 4) spaces for indentation.
this seems to be not needed anymore
I think you're missing a log statement here. Also, why is this needed?
This import should be grouped with the other group below.
This should be `Log.Error` (and the corresponding line above). It can be made an `Error` with the error message.
We use the `keybase version` API which is already the API name so that the user can set the environment in the groupmanager.
I think it should be RpcApi(QUORUM)) to align with other methods (i.e., use the "QUORUM" class and use the same name for the new class to change "Common" to "Common/weight".
Can we rename this `checkCoinbase` or `isCoinbase`
Was this a separate change?
I am not sure we should be changing the text here.
What if the `example answer` or `example answer` are identical? I would have expected this to have an error if the type is `null`, and if it is not, `example answer` should be `None`, right?
Should we use the default context here?
This is not a typo, right?
I think you can use `ConfigurationConfiguration` to avoid the `uninstall` value, as it's already handled in the `ConfigurationConfiguration` class.
This should probably be `RSpec.warn_with <<-WARNING...`, since this is a normal function.
This is not used anywhere.
This TODO can be removed. We are already getting the whole body from the BUCKET_LIFECYCLE now.
I think this field can be removed as we don't want to keep track of if we don't want it to be in another PR.
How does this work? Are there other parameters we might be able to reference?
This should be a constant (and a local var)
Looks like you removed these changes from your PR.
I would keep it to the `example` package, and add a `install:**spec` so you can remove this.
I think the default is `True`
This is the default behavior - we can only show what the default is when we are not running. This seems to be something that is used when the default setting is `nil` and we can't modify the default value, right?
(style) do not initialise globals to NULL
If you don't want the `node` to be zero then you should be able to remove the `doc`
Can we also include the other way around?
Nit: I think we can use this variable name to match the function name `CS` for this.
this is not needed. it is only used to generate client code.
This was a bug in the first commit :-) This was probably a bug in the first commit. If we are going to change the version in that file, we should make the change in the first commit. But that would be the cause for the first commit.
Is it needed here ?
Please add an example here.
shouldn't you be using the system property?
This check is redundant. "simd" is only used by one save_simd_skip" (see above "is_skip_regs".
Is this used? Can we remove it from somewhere?
This line can stay
The type is `===` so it can't be the last item.
This can also be moved to the `locale` module.
Line is too long. [83/80]
@adamjstewart I think this is fine, but I'm not sure why we need this here. If we are only using the generated generated code, we'll probably need to set this on `__init__` when we have the `__init__`
Doing a single keys in `severe`, so you have to call `.branding.dig` here because `.map(&:to_sym)` returns `nil` if you don't care about what kind of keys you want
Can we move this to a constant somewhere?
The manifest has a ManifestReader read `DATA` in the past. I think it is worth it to keep it in the past.
Should we use `:contact_us_url` here instead of `:contact_us_url`?
why are we using the C++ side effects?
The method `grpcgrpcDescriptors` does not return a grpc object. Can you try to maintain that?
I don't see where is the new delete call removed from the exception being thrown. I'd prefer to keep the original behavior, but in the case of some reason.
I think the old code was a bit hacky; I think ` impl_->filter_all_changes(removed)`. Is there a way we could call this method only once for each call?
This change is not really relevant.
This is not the right place for this, but it looks more like an optimization is to be able to call `GroupMembers` without any type of PodReference. If there is a check, I would say we need to call `GroupType`, if it is an `Pods`, and if there is no actual values, it will be hard to maintain.
I think we can remove the `Span` and `name` here.
This is an API change, right?
you can also do the same for the `_deepcopy`
Shouldn't we check `shared_from_this ()` first (or also check for `1`) to make sure it doesn't get closed? If that's just to be correct then we can use `!==` to get the same error message, but I don't see any reason to not use `this_l`
I don't see how you will need this for each test, you can define a new environment variable for your test in order to use it in the `from_params` helper which will avoid this error (which is not your thing but will cause `mpr.skip_Version` is not set).
Use the new Ruby 1.9 hash syntax.
I think this is returning the wrong place for this, but we should probably return some tests to ensure this returns the correct type.
Nit: remove empty lines
Why is this just `instanceID`? Looks like there are no other changes below.
Can you explain why it's not a dict? It's not a dict, see below
why do you need this change?
we should never remove this
Same here, can we use `time.Duration`?
Why not use `insightfilestore`? It's a convention.
We should remove `def bisect_round_started` method altogether.
Is this a BC break?
This was a mistake and should not be needed, because the original code was using the "Symbol" method instead, so this is fine.
Is the `\u2E00-\u2E7F\\'` intentional here? We've already loaded the exact same code. It seems to me you should just use `\u2E00-\u2E7F\\'` instead of `\u2E00-\u2E7F\\'` and just add the `\u2E00-\u2E7F\\'` to the Gobblin process. If the build system doesn't contain an older version of `en.wikipedia.org/wiki/Supplemental_Punctuation`.
Please add `maintURL` so that the `maintURL` is in the global namespace.
Should we check that the file is not not None?
This is not correct. This return statement is not correct: if (cmp == 0 || ...) == '\0', then use `return c1 - c2;`
nit: `final`?
This should be handled at the beginning of the function.
Is this needed?
`ErrorListener` has a `ExceptionListener` as it is a real type
This is an existing bug that's set for `ResourceType`?
this shouldn't be an ID, we don't need to pass config.ChainID when it's a bc
I think these changes are not related to the fix, since the tests will run `src/server/worker.go` and the test will be fixed and will be removed.
Wouldn't it be more efficient to do `violation.get('rule_name', '')` and then get rid of it (or whatever it is) and then call its value from `violation.get('resource_name', '')`?
I don't understand the intent, but this line seems to have been doing some weird tests. The wl_resource_get_user_data() function returns an int if the wl is not the same as in the `texture_width()` function.
This is a pretty big deal, but we may want to add the `DATE_domain` key as a string that could be used here. In general we can also use a `DATE_domain` property.
shouldn't this be `str_sds_env(tmp, tmp);`?
Maybe this package is not part of the package, it's not the only package that is used.
The problem with this was that we can make sure we do not use the new tests for the new tests.
This is not a big deal. If the user does not want to go through a list of Rating, it should have `make generate` set.
You should use `det_bboxes.shape()` to avoid the duplication.
the `bucket` argument was never used?
Can we use the existing code for this?
Did you mean to add `AggregateAggregate*` to this list?
The `ERROR` is the right thing here, but the `TestFlow` is not actually supported now. So maybe something like `Asean PAAHead does not support test-time augmentation`?
Important change to MIBDOCFILE_DEFAULT_ICON_SUBFORMAT, and call it here.
I'm not sure if this is correct. It seems that `content-pages` is a string that we are not using in this function. It should be a string, not a string, but for example `content-drilldown` if it is not `content-drilldown`.
<!--new_thread; commit:05b6ce4f4f4; resolved:0--> Which of these is really necessary? Are there any tests that depend on `local` in this file? I see this was added to `gcp_api` that is called in the server and that is not called in the server, but not in my local build.
The name isn't very descriptive. It's a little confusing because it's a bit confusing with the `*`.
I think you should use `llvm::PostPost` instead to get rid of the `isa` helper function.
I don't see any use of `configMaps` in this file, is it?
Plz add a blank line between tags and summary for better readability
These changes are not needed anymore
So now we have loss_loss_weight in loss_param where we check loss_loss_weight?
conflict suffix seems a little strange to me. What happens with the conflict suffix?
This one is not really correct, but `container_prep` seems to be the first one.
Can this field be removed?
nit: this test is duplicated
Should we call this `eni.ampid()` instead? Also what is the use case for this?
nit: the space is unnecessary here, and if it is, it can be removed.
why are we making this the default?
Can this just be `return self.best[which]`.
I think the default value can be set to true, if the default is 'true' then it will show the default in the case where the default is true
The `ti.offsets` is still in the first place, right?
The rule should be `version`
Unnecessary spacing detected.
This will need to handle the Gradle. Might want to do `/usr/local/ghc/#{ghc_version` in the past.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Add the extra line after `loss_weight=None` to work?
This change will cause the `i` value to be `0` if the `i` is 0 and it will be `nil` if `i` is `0`. I think it should be `i.iterator` if `i` is 0 and this is what we want.
This is a regression I don't think we need a JIRA to fix it.
This is not the only usage of the ``Centralentral`, it might as well go in `Rails.extern.js`.
Is it not needed anymore?
How do we ever get to this point? I guess it's always going to be right after the first run.
what is the logic between PorcelainAPI and current block?
The compiler can change to `AttributeCode` to match the other one as well.
This is not used
I don't think we want to ignore the whole `Duration` here since this is not really the opposite, right?
Should it be `p.dataForWriting`?
This needs to be kept to be moved up to the `HIPLockArrays` folder.
Why do we have to initialize this here?
This is a change in behaviour - it should never be done.
I think it would make sense to also make the property `tables.lock` be in `tables/run/tables.lock` and then we would get a `ravel.lock`.
This seems like it should not be in the `if`
This one is wrong. It should be moved out of line 530. It is not related to this PR. The problem is that if the `texture` flag is moved outside of line 274 it is removed and `gles2_texture_in_context` is called from the "real" of the line 574.
Is this the `.decode` needed for this change?
This should be done with `is_respond_to?`
The variable $char is not used. The variable should be moved to the top of the function (same for line 243). The variable should also be made before the variable $chars.
Same as above, you can delete the old code.
I'd suggest to split this into two lines.
This change seems unnecessary.
This method should be marked `@Deprecated` (same throughout)
The linux and windows linux need to be removed from the media media media folder.
Should we do v := range i.w.Sources[k] as in tests? Otherwise it looks a bit dangerous to me. Maybe we could have 1 minute per source, and the minimum v will be empty, and then we will be able to use this function to set `Instance` to 1 minute and we will have 1 minute.
@Pearl1594 can you review this change please?
Can you use use `PackageInstallCancelled.replace` instead?
@tgamblin @bharatviswa504 Is this right? I don't get the list of files in `setup.go` but is being changed in this PR?
this will need to be added to the `@proposal` model
I wonder how this was working before.
This change is not necessary, the code will now use the default value, but you are already setting the default value for the `today` object
No need to import `ipsets` like `set`
No longer needed. Use the `import` below.
Is this still true on windows that have been started in ESLint? We should only have the parser parser in a file that's loaded by the disk.
This method is unused, can it be removed?
I don't think the `NewUInt()` method would be more appropriate as `uint32` and `col` are equal. I would expect a `uint64` and `col`.
`cache` is not used in this class, please remove this and `CreateRuleViolation`
Please don't change the interface.
this is a temporary workaround. This line is called from 3rd-party event Event rather than 3rd-party event event.
Final newline missing.
I like the idea of having an assertion that `assert not any(..)` is not a valid index, because it is not a list.
Not sure why it's a `updated_at` - if it isn't, I would call it "to" instead of "to_i" (we do not use the updated updated at the same time), and we should make sure the updated code is not run at the same time. If there is a "updated" we could do, but we'll be consistent.
If you don't want to check whether the commandLine is set, you need to check if the file exists before calling `String.IsNullOrEmpty()`
You can make the constant configurable. It makes the code easier to read. It can be `StandardCharsets.UTF-8`.
This can be simplified to `from astroid import utils`
This is a little awkward. I'm thinking if we want to do something like `_corruptedRequest`. What about just making sure that `_corruptedRequest` is false and not only if there is no `is_corruptedRequest` case?
this is unrelated to this PR?
`abstract` is never used in the code base, so I would change it to `AbstractNode`.
why do we need both plans and plans?
Should it be `!is_ipv4_or_v6` or something like that? Or is it a problem, or is it just that network is not being used?
This file is only used in context.xml
Does this work without the ` ChromeDriverCommandExecutor`?
In this case, `type0.getType()` will return `null` if `type0.getType().isEnum()` is not null, it will return `null`, but `isEnum` will never actually throw an exception.
nit: should we make the `dict()` in the docstring for consistency with other similar instances?
I think we should add this to the other files as well. You don't seem to have any benefit about it, it's only for the `prop-types` dependency, right?
can you make sure that we don't have an `continue` in this case?
this can be initialized in a different function (or rather only used once) since it's a direct call to it. if there are any cases you could also just call it directly, and that you need to do it in the `self->logIdToSend_` to verify the issue
Nit: the `prepend` is not needed here. The previous version doesn't do anything.
What is the plan for this fix ?
Could you use a `\n`?
Can we call this `defer` or even `defer`?
This needs to be moved into a `PlatformTag()` package. It can be used in multiple places.
This is a really bad place to put the `FrameworkDescription.Create().ToString()` call in the `Logger` class. I don't think this is the right place for this.
why are you failing with /ec2?
I don't think you need this change. You can just check for the output and avoid the string value.
Do we need to `proposals` this one? Can we just use one of those instead?
The constant can be removed now, or add a new constant.
I think we can get rid of `UpdateSpanWithErr` method altogether, since `nor.UpdateSpanWithErr` will only be set if the user already has a value in the response. Otherwise the `Token` object will not match the service name received in the response, since the `Token` object will not be called for every request.
You should get the value of the default value if you set it to kwargs.get(...)
Why is this necessary?
I think this should be removed too, since this is in the test class itself
why remove the extraneous line?
why should we only add `reader` if `s` is not ` + `
The case where the `SimpleSimple Storage Solution` is not the same as the `requirements.rb`, so this is not a problem.
Can you add a similar check to the one from `default` to `return results[1].Interface(), results[1].Interface(), error)`?
Is there any reason why we're not always storing `FromMinutes` as the default field in _connectionTimeout?
This is an internal function and should be moved to `src/server/options.js`
This is going to check whether the Map is null or not. If it does, it will return true on the map map. I think it would have made sense to return `false` if it's `null`.
Please use `setFull`
I think this should be removed?
This is the only test that happens because of the analytics, but now the event is always set when the analytics is true.
I believe the line should be changed to `if isinstance(key, tuple, list, pd)` instead of `if isinstance(key, tuple, list).str()`
Why is this test duplicated? Shouldn't it just be `nil` and `false`?
We should not have to put these on the `/` attributes. We do not need these in the `/` namespace.
I think you want a test to cover the server but the test failed with this change
I believe this is supposed to be a pointer here.
I would suggest a similar test with the `setup_environment(output_plan).to_stdout`.
Maybe add a `TODO` to remove this TODO?
I would prefer the `AccessibilityIdentifier` -> `GlobalAccessibilityIdentifier`
Does this make the processor not work with the changes in the UI?
Why the change here? I'm not sure what the intention was.
This return type is wrong. It's the error returned by `return err != configs.Thawed`. If there's some reason, we don't want that error.
`title` has an `_` key that does the same thing, so I don't know if `title` is necessary.
I think `RegistryURL` might be a better name, because of the other parts of the code that might be used
nit: is this used? Or was this a separate change?
I don't understand why we do this if the `IE` is a `IE.getState().getState()` does the same thing. Should we instead add `IE.getState()` here?
@nmittler - This should be `writeLong()` if I have a check for CheckSum in `readLong()` because it is also called before the check `readLong` if no call to `reverseBytes()` was found.
Why is this not the existing `request.go` file?
I'm afraid that all our classes that use this are necessary, is it? It's not used, and we want to keep it as simple as possible, but I'm wondering if the change could be to have the default value set to false. If we ever add a default to `spire` we would need to set a `INFO` field here.
can this not use `IndexUtils.isCommonHandle`?
Is it a problem? I thought the only only valid version of the test is `nil` so we'd be good to have it.
This one seems like a regression?
Maybe use `obj.nil` instead
Where is the file created, should it come from here? And why don't we make it a file? This will also help with `class.getName()`.
Is this change related to the changes in this PR?
This seems like it should be done in a separate PR?
I wonder if there should be more than one if statement
should we update the test as well?
This file is now getting declared within the `.map`, so can't be removed.
This is incorrect, `of` is always a string.
I thought for adding a new parameter `for` was not needed for adding more than just `properties()`. I think we can use the same pattern for each parameter of the function. Or maybe it's better to pass the new param directly to the `for` method.
can we add this to the file too?
I am not sure it is correct that `SecureRandom.GetBytes` returns a string (even if it is a string) instead of a string, i.e. `SecureRandom.>0`, which is not the value of this object. I'd expect the value to be a string, or `SecureRandom.GetBytes()` which will return `None`, and if so, you should use the const `SecureRandom.GetBytes`, which will return `None`.
do we need it now?
Can you remove this line?
Do you need to add it to the imagr list as well?
Why do we need this struct? Is the `json:"bool` sufficient?
I'm not 100% convinced about adding this here - I think it should be done after this block, but if you do that it will be easier to maintain.
Isn't the `global` variable already declared above?
I would prefer to have `import java.util.*` here.
`ExtAR_FACTAR_FACTAR_FACTAR_FACTAR` is not used anymore. `confS/cliquet/permission/redis.conf` is used only when there aren't any backend, but still isn't it?
I'm not sure why we need a data type check here? The `null` should be sufficient for the `ImmutableList.of()` and `List.of()` methods, so the List will be null.
I wonder if it would make sense to have an overload of this property that we have a default project, and then in the case where we can use the default dependencies and we need to add it again.
@mramato do you think there is any reason to change this?
This makes it a bit harder to read. Is an `on` always available when the `init` element is missing?
It seems `opts.spinner` will never set to `err`. Shouldn't `defer` be nil or something similar? Or would this be a bug?
(style) 'tensor' may be misspelled - perhaps 'number'?
This will not work, as you have already added the `--Arguments`. This will be used by all the errors (i.e. not in the file) and the error handling in this file as well.
Run should be translated
I think that this will be more readable if set_name is set to an array and an array of values will be a string.
I would not do this. It is a bit unfortunate and has no effect on the code, as in general, I can't find any problems where this file is not generated.
I assume you did not need this line? Doesn't `spawn.h` include the actual `spawn.h` header?
This looks like an unrelated bug. I'm not sure it makes sense to use a boolean here.
I think it should be `PublicPublic` since the type is being a string.
I think we should name this "sound" for consistency (and the corresponding one for `.proposal`). Sorry to be a little more on on this! :)
I would prefer to not use the `is` method for the default
This is the fix for the following line.
This seems a bit odd as well, maybe maybe move to a separate function?
This is an unrelated change but a typo I found while working on the `Boolean` interface.
` warn_deprecation` doesn't seem related to the other PR? It looks like it's only called from `semanal.rb`, which does nothing in the past if `warn_deprecation` fails.
Could this be called `blitz`?
Doesn't `validate_cls` also need to be passed as an argument to `<br>`?
Should we just add the service to `return s.driver(ctx, error)`?
I'd use the `*` for the copyright year here.
This test should go before merging.
should we use `_array_index` or something instead of `as_index`?
What is the difference between `deleteModuleData` and `currentVersion` here? Can we rename it to `currentVersion` or `currentcurrent_ModuleData`?
I wonder if this should be required for all versions?
I think you need to fix the bug.
Is the log statement worthwhile here?
I would prefer if this was a `off` at some point.
Block has too many lines. [30/25]
this is a very specific field so will need to be removed.
Make string is a string?
It would be nice to move these to `_issueLogJsonWriter`, but that will be more likely to use them.
Could you add a description here?
I think we should also test that `building` is set.
Is this related to the change?
This should be `@SuppressWarnings("unused")`
This change should be reverted.
This should probably use `NULL`, `undefined`, `onError`.
This is a little confusing, as we can't use other nodes to set this to empty string. Is it possible to do that?
What if we just use `PORT_S3` instead of hardcoding it?
Please add a `TODO` as well
Is it a typo? Should it be false?
I think we can only include one string if the user sets the `fmt_id` format. This is why the `#include` form is being included.
Remove empty line?
this return variable is unnecessary, it's not used anywhere anymore.
Could you use a bit more context here? This will result in additional queries in the future.
Why delete it? I see it's no longer needed
Can we add something like: if sourceReport is not null, set the exception and add a exception to not parse the XML
why not "good case2"?
Why do we have to change this?
Shouldn't we also use the "line" style here?
I think this makes more sense as it's a `*` statement
Shouldn't the default result have an error if the attribute is not empty?
I am not sure if this is a good idea?
I think we can move this out of the try block now.
Is this going to be the only place we have if this error is logged?
Is this safe to change? Better to use `this.getValue(path) || (_this.getValue(path))` in the next `if`
Is this really what we want? I would expect `parseInt` to fail and ` parseInt(tabIndex)`.
Do we need the `ssh` variable here?
Isn't this supposed to be `?` ?
DebugTOKEN should be removed now, right?
This method looks like the `@SuppressWarnings("")` has to be used in this class, since this method should never return `false`. It's a mapping of this table, and if we're not really using it, we could change it to just `true`.
Why does SsmpGlobals::work() not have a boolean value?
why are you adding these three calls?
Can we use the `if` here?
I see, if we have a default transform, then why do we need a transform, why do we need a different set of parameters?
I'd move this to the left and then use `NotifyDataSetChanged(NotifyCollectionChangedChanged)` instead of hardcoding the new code.
i think this should be a list, we need to have both.
This should be only `callerType`
This method doesn't return anything, why don't we just pass the `confirm` as a `id`? I think it makes more sense for the `set_test?` method there instead of passing the `confirm` parameter and then passing the `confirm` method to the `id`.
nit: this can be removed as the constructor can be used in the constructor
Is it necessary? It looks like we are not using this twice?
Can we avoid this change in case it doesn't handle `SetCallback` from `toggleMenu`s?
why is it called 'envSig'?
I'm confused as to why `django` was not imported here?
I think this should be done in the `bridge` module, because there is no way for them to be configured in the `send_command` method
can't use the bool since the method signature is not used in the function anymore.
This isn't needed, it's already the default
Good catch! Could we remove this?
Hmm... Why not return null in `job` instead?
I know the difference is that `i` is a bit vague.
Is PrepareRequest a good candidate for this?
This should be `VuFind (\d+\.?)+$/`
i think we can get rid of the call site in the method and get rid of the method signature in the method call in the method
A bit late, but this is probably a bug, but I don't think it will have an empty `snapshot` property. If it's a `null`, it should be `null` and the `StartableIterable` is not null. I think the `filterfilterfilter` method should not be called here. We should probably just always use "array", but in which case the `snapshot` would be null (i.e., it's a `null` and be `null`) and just use `!== null` (i.e. the `CloseableIterable` would fail if it's empty
You should use this. You can only use `PmdRuleTst` if you need a ArrayInitializationVerbosenessRuleTest, don't forget to remove the `PmdRuleTst` class from the `isTest`, you don't need the `sourceforge.pmd` constructor.
This is a good example of why it's in a "prefer" block. We want to avoid re-index the `!` statement and `[3]` so the `disable` is not a valid value.
not working anymore?
I believe we are missing a `!` here. @mattpap
Why is this change needed?
This should be `@user` instead of `@changes` since this can be a user-facing error.
This is not related to this change, but I don't think I follow up this PR, so I just left this as is. The `go/llvm` is the preferred name.
I think this can stay as is, if you have some other testcase that checks the value as a property.
Is this check required now?
I wonder if it wouldn't be more accurate to have this as a `@since TODO` check
What happens when `message` is null?
`numAccounts` here is a new variable, not an `int`.
I believe this should be an option to do something like if (!empty($pluginPath)) {
This is not correct. It should be `0.0` to get the current behavior in the future.
I think this will break all CMake, but I think the last 2.x file could be reverted.
This looks like you have a bug in here. Please remove it from the two functions in `cborStore` and `Put`.
this is a bit unrelated to the rest of the PR?
why not use a `ResponseTypeProcessor` instead of removing it ?
`monotone_constraints` is supposed to be an array of `feat_is_unconstrained`, but it would be better to make the value consistent with all other values.
`process` and `apply` need to be public
whats the benefit of using the variable?
This won't work for you (the old `eventname` field is removed) since `OBJECT_ACCESS_COUNTS` is now only used with the current `OBJECT_ACCESS_COUNTS`, not sure if this should be removed from the list.
nit: you can remove the import of QApplication and use `available WebEngineProfile` in this file and in `QtveveEngine.py`
@jackfrancis can you confirm this?
do this have to be lowercase?
could you check if this is the only place that will be returned for a manifest inside a previous if statement? This will make the code simpler.
Use %i or %I for an array of symbols.
Nit: we could move this to the top of the file. `Console.ForegroundColor`
nit: `except` should be on the next line. It's not needed.
All is not default to `0x39` (the `all` should be removed)
This is the new command file that is used for some other sources but not the `bee` command.
I'm wondering if we can get rid of these too. We can do `admin` inside of `user_id` and then check if it was empty.
I think it's better to move this option to the `__init__` section of the `_` module, it will be hard to make things simpler.
Is this change needed?
Can be removed if you need the added added `apiextensions@0.9.3:`
I think we should include a more descriptive error message here... I think we may want to consider storing a "pandera", but not use a single "python" suffix (or "x" in the error message)?
I believe that the `@Internal` is not correct. You need to use the permission, otherwise it will be called from the constructor.
This change is not really relevant since we always use it in `serviceThreadPool`.
This should also be `0`
I think we should use the existing `r.URL` package and just use the original `r.RemoteAddr`?
Can you add a check that only `args` is set to `true`?
I would use `host1.example.com` instead.
I am surprised there is a `Tracer.Instance` field in this file. Can't we just use it instead of passing this map to it?
please use Marlintrainer instead of Marlintrainer for all cases
Why is this `state_block_impl (rai::state_block_type (), hash));` here?
DeleteFiles() here just to avoid duplication and use an empty string. Please revert this change.
Line is too long. [84/80]
nice catch, this one might be more readable for future proofing...
Maybe we could just have this be a list, and have it be shared between both the interface and direct fields?
Is 10 * time.Second needed? If so, then you could just pass 10 * time.Second as zero.
I think it is worth it to just pass 'array' to 'const' and only use 'foo' when to load 'array'
I'd use an enum here as I can see you look at `text-box-wrapper:` and the `text-box-box-wrapper` in the file.
I think we need to move this into the `antennapod` module.
This is a really unfortunate name, maybe we could just make the version `import` instead of having a `__version__` at the top of the file
As far as I know this is not something to change from an A4A, it might be worth checking if it exists.
Why are we adding this?
What happens if there are no fields (e.g. the property)?
`calculatingephemeral` or something, but `calculatingephemeral` is more informative than necessary, so we should add a note that this is a bad idea.
Please add `@JsonIgnoreting` and add `@Nullable` here
why is this not in the base file?
Preferably we need to `require "#{Rails.require "#{Rails.root` as well? (and in other places like other places too)
This should be `getClass().upperClass().upperClass();`
This can be reverted
`curation center` is now prefixed with `curation center`.
This is not used anymore?
This one should be removed as well.
I think we want a test for this
This one is not correct. In `isspace()` it is only used once, so the `isLuaInstall` isn't needed. Also, you could make the `isLuaInstall` take the first parameter instead, or you could add the second parameter. This way you can remove the `isspace` parameter from `isLuaInstall()` and just do this check inside `isspace()` and just call it without the `isLuaInstall` since the first parameter is now the same as `isspace()` in `isLuaIdentifier()` in `c.c`.
@mmaxim what was the purpose of this change? The only thing I'm trying to do is this change: `if c.Wireguard.EncryptHostTraffic && c.RouteSource == 0 {` What do you think?
Is this an unrelated change? It seems unrelated?
Can you remove this blank line please and change the file to `grunt.file`.
Same here, `driver` is not needed.
maybe `target` instead of `target`
I think we can remove that now, we don't need to do anything about it.
This is the wrong way to skip the CNP.
I'm not sure if we need an `find_by` check here?
What does the ``&.to_h`` mean?
Can we also add the `validateWebDataStreamID` method? That way the `getWebDataStreamID()` function can be called in `values()`.
Nit: we can just use `c.parse()` here. Also, should we be using `leaf` here instead of `byte()`?
This should be a `@SuppressWarnings("unchecked")`
I think it's better to move the `SplitN` check inside the `tag`'s `tag.SplitN` check.
I'm guessing this is a breaking change - `ports` needs to be the first. If you want to change it, you must update the variable name as well.
Probably should crash if s.shardInfo != nil
@nmittler - It would be nice if we didn't get to this for the future but we could be careful with that.
The `c` here doesn't seem necessary.
I don't know if it's a good idea to remove preludeScope from our own spec, but if there is no reason to have a very good reason to do it, we can add a new property to avoid prelude a breaking change.
`std::move(keys.begin(), keys)` can be removed
I am not very happy about this. The function seems to be no more expensive to return the hostname.
`250` is not a number of characters. It can cause a number of characters as we can use the number of nodes, which is not.
This is a little confusing to me. What are the cases where this is called without a string?
Does this error get called? If so, is this really necessary?
Line is too long. [85/80]
I don't think you want this to be an enum. It's a user by default, so the interface will be considered as expected by the time at which the time at which can be considered.
I'd prefer to see this be `.c_str()` instead.
protoFile is stored in a config file, not the filename.
Since we're using the DEFAULT_DEFAULT_NAME, can we name this field `verifySERIES_DEFAULT_NAME`?
This should be configurable.
We should not be able to see this in the `before` method anymore. It should be a separate PR.
I'm not sure what the best way to check is. @resource.invited_by is, the former is also an integer with the real object, so this is an actual bug.
I don't understand how this is being used and how it is used, is it?
Should we make this a constant?
I was not able to run into issues with the previous version. Please revert, including the new version.
Should we add a todo that the key is in the context?
I think we want to keep the `init` arg in the `init` base class (or in `start()`) to avoid the confusion. The only place we need this is used is if `init` is in base class.
Do we want to put these into `setUp()`?
I would say, we should not allow `QLine` and `version` in this case. It might be more reasonable to add a case for this.
I would use `StringUtils.join`
This was causing the test to fail if the server was not using the previous extension. This issue has nothing to do with the previous changes.
why are these changes necessary? Should these be removed?
This should be called on app init. You can then write the called on the init instead.
The default should be `displayResources`.
It would be a good time to update `recordCleanupLimit` to just `dbOperator`. This change is not really needed.
I know it's old code but we should not make this `0` and use `1`.
Is there any reason why this is removed? I don't see anyone using it in the first place.
@alalazo maybe this needs to be a `ignoreUndefined()`?
This looks wrong to me, because you can't use a logger logger, and then use it in a logger.
The `_queue` argument can be removed in the general case that it will automatically be `True`.
Why not check `t := txgroup[0] == 0` and check `err == nil`?
I think we should add a new public class for the `X509Certificates` parameter. In general, we can remove the `System` parameter.
I guess `gendoc.py` is unused?
I would use `p2.Ready` in this file.
There's an extra space here between `std::unique_ptr` and `kvstore`.
This one seems unrelated?
Why does this not check the world_repop object? Why do we have to check it?
Won't these be removed if the `AWS` option is already added somewhere else?
Please also add the default parameter
`readableNumber` and `readable.isConnected` both exist in the same package. `getNumber(config, Number.isConnected)`, `getNumber(config, Number.isConnected)`. `! isUndefined( decimal )` is sufficient (and also in the same package. `readableNumber` is a bit weird. `! isUndefined( decimal )` is a small call, so `! isUndefined( decimal )` is a small small small small way to handle it).
This can be a const const
I think it might make sense to move `defer` out of the `if` block above.
I'm not sure what it means to do the same here. I see two lines are used.
Why was this removed?
this is wrong. I don't think it's a copy/paste error.
this is a BC break, right?
@cicdw do you remember if `data` `dataValue` is a correct thing?
rename the method to be removed (rename the method to be removed in the method)
I'd move the "invalid name is invalid" part under the `if`
It's not clear why this is a stupid question. Can you please rephrase the existing code in the next commit?
Would it be better to move this above `SYSLOG_INTERNAL()` and `SYSLOG_INTERNAL()` calls above?
I think we should be returning the `options` object instead.
Is the name accurate?
Please rename "OPERATION" to "OPERATION" and "OPERATION" to "OPERATION_" to reduce "ClusteredFlows".
This was probably a typo?
BUTUT is used here, I think it will break the tests.
This could fail if there's no client
Is this related to an issue? Is this a problem for a specific test?
`Math.min` could be used here, too (or any other error message, if there is a length check)
I'm not sure it will make sense to put this in an if statement, instead of having two constants for the same value, we don't know which one to use. Maybe we want to keep the `if (is_union || !opts.proto_mode === !opts.proto_mode) {` check above.
Why does this need to be getAzkabanURL?
`mask` will always be `None` anyway - so why do we need to check `mask.dtype` before setting it to `bool`? In that case, `mask` will be `None` when `mask` is `bool` or `bool` and if that value is `bool` then `mask` will not be `None`
This line should not be here.
Remove this log, just use log.
optional is not enough. I think that is the case.
Why not use the constructor?
This should be done after the if above
Should we throw an exception when user wants to use this class as well?
Minor, but this should be async function, not async.
Should we also check here that `ec` is null here?
This is not the same as above.
Should this just be 'grpExpr->generateCacheKey(cwa); instead of 'one:"? Also, do we need to check the value in the if statement here?
If I understand correctly, ` haystackMethodParamTransformer` can be used for these, then ` haystackMethodTransformerContext` and `Name` and `ApiMethodParamTransformerContext` can be used with different values to be used only for the `Client` flow. Is this the case of the correct name?
Why are these changes needed?
I think `isinstance` would be a better name, e.g. `get_validate_files` or something.
I don't know how to do it. I have some concern that you do not want to do that. The function name is used and the name will be the server, so the name will be the name of the server. We can't do this if there is any.
Are we sure that the form is C07481? If it doesn't, it would be good to check for the `kegg.Trim()` first, otherwise it'll get no impact.
Would it make sense to add another `FormBackupID` property to this group? I don't think it will work, but I'll let it either get a more idiomatic version of this group.
Can we add an `fan_more_INill` to the `DC.arg` as well?
I'm surprised `attr_value` is required here. I don't think it is needed anymore, but it's the case for now.
@jridgewell Is this right? I'm a bit worried that it will only be set if someone adds one entry, but not an empty string...
Is this a debugging leftover? Can we not just ignore it?
Should we make this return `sample`?
I suggest `return startTime.In(time.UTC)` as a variable. In fact it seems the behavior of the function is the same as what the function does. I suggest changing the function to return the startTime.In()
I'm curious, does this mean that all backups will be persisted to the tag?
Why is this here? I guess we should have only one argument per chunks and not the other chunks?
Why are we calling the method here?
I am not sure how this should be configurable (as the `Data` is not a global property for example)?
@lisasy what if `exp.Target.StressChaos.ContainerName` is nil? Is this the correct place to remove this check?
Would it be better to make this configurable? Also I think the function name `DocIdSetIterator` is not really used and I think it would be clearer.
is it possible to create a file for a file somewhere else?
You can make the new Ruby 1.9 hash syntax.<br>Unused block argument - current. You can omit the argument if you don't care about it.
If we set it to "max" we'll need to set it to "max" in the future
`The product it should contain 255 characters or less.`
is this a "new" variable?
Just noticed that this gets called twice when `custom_options_file`. I'm pretty sure `local_options` is a boolean, so I don't think that's the proper solution.
Lint/UselessAssignment: Useless assignment to variable -apon.
Why not make thisIP
`partial` should not be required here.
Why not just use the '2014' file when no other users are using their own ES2 files?
I think we should also check if the `quote` is undefined.
This `cursors` is only closed on `close()`. I think it should be called `client.close()` instead of `client.close()` because the next line is called `cursors[0].close()`.
Doesn't this prevent a caller from modifying a string with `c`? Seems like this could cause some problems when somebody passes a `string` object (in a `Type.New` method), and that's the motivation?
I think it might be better to just have the context in the constructor rather than passing in a context here. This way the `if err != nil {` will be the default.
unnecessary change
What is the rationale behind the change of the message here?
"containerContainsText=_("with %s items")
I feel like this should be `sh.prepare` instead of `PATH` since there are multiple instances in the same module. Maybe we should make `JAVA_HOME` a `PATH`?
Please avoid this file unchanged #Closed
The `waitForAjax` is the same as that of `isInterface()`, so why not just take the wrong result?
Why is this changing?
I'm not sure what we should do here. This function should never return Identify after calling `IdentifyTrackBreaks`. This is a breaking change for the user's `id` case.
Nit: "import_mpi4py()" is not tested.
This is also a race condition.
Hmm, why is this a typical typical typical typical breaking change? It is required in general, and it's not a breaking change but it is not the case anymore.
Nit: remove newline
Why was this default initialized with `true`? Is there some reason to not just default to `false`?
can we make the space the first parameter?
Can we remove this?
why not add `defer udpConn.Close()`?
I would call LibraryDetailsPanels to compute the LibraryDetailsPanel.
These are all `const char * *`s and `const char *` in `const char *` (the only point of the `persistdir` was to be irrelevant), and I'd probably just remove them.
I'd like to keep this, it's the actual changes that were made in the code.
Since we only support this one and the one from `incldued_wf` it should probably be fine to just move the `src/main.go` check out of the `wf` component as it seems there is no way for us to keep the `src/main` task to `src/main.go` and use `src/main.go` in there. I can do it in the `incldued` file because the `src/main` is `incldued` and the `src/main` folder, so we can add some property to `src/
Are we sure this is the actual fix? If so, do we want to ask for the user to change this? (Or would we be interested in checking whether the user is not disabled or not?)
This seems to be more clear as `delimit -> :Sources,,` in `lib/remote.php`
BROWSING_URI -> Private_BROWSING_URI. The logic here is not clear. It can either be a separate PR or a separate PR
why not 0?
why not `unsigned` ?
Why not use a `_` constant? Seems more clear.
I'm not sure if we should check whether the target contains the value that the local name is the target name or not. It should probably be `data['config']['transport'] = 'local' if target.name == 'localhost'` if it's disabled
The method is not used. It can be deleted (since it is not used)
nit: IsEip12 seems to be the last thing that we use in other places (i.e. IsEip12 is just the default value of this struct) ? I think this should be more explicit and more explicit.
I'm not sure that this should be here, or am I missing something?
This needs to be changed to show_warning("Invalid Public key") or something similar.
You could just use `String.toython()` for this. I am not sure if `getComposedParent` will always be true for this particular role.
We should be able to remove these two lines now.
You can use a `PodSelector` from ` MIME` to `ipv_IN_net_curses.jit.config.s3p` in this file.
I don't think we can use `sendDelta.minRTT` anymore. In the case of this we should just use the `if sample < ackDelay {` instead.
Is the `GeneratedCode` necessary? It doesn't look right to me.
Use 2 (not 4) spaces for indentation.
This line needs to be indented by one step.
This is a regression.
This function isn't getting called in this function, so it should be called in a separate function and it is a little strange to call it in a separate file.
nit: move to next line.
The variable name should be `prompt.promptText`
It's ok if we have a constant here.
This is just to not be compatible with the rest of the PR. The rest of the PR is just a random update, but this one was not related to the PR.
Can we use an int64 here?
why not use `pb`
You could also change this to `add_foreign_key :changesets_subscribers,changesets_id, :subscriber_id]`
The `err` is never used here. It is a very good idea to use a variable to get `nil` in the `client.PostMessage()` function.
This line needs to be updated as well.
I'm wondering if we could move this `setAll(properties)` method into the `createWriterFunc` function in `createWriter`? I think it may make sense to rename this function to `createPath` and have it take an `@properties` in `setAll` in `setAll`
Align the elements of an array literal if they span more than one line.
should it be `iceberg.engine.hive.enabled`?
Why delete it? I think it should be updated too to delete it.
what is this extra space used for?
is this the default? or should the default be the default?
You have to use `PasscodeMode.CheckCheck` here, instead of `newMode = PasscodeMode.Check;`. Same for `PasscodeMode` below.
I am not very sure about this one :) I am confused as to why we can't just have a function or a constant.
You need to make sure `rake secret` is used by Jest also.
This isn't used.
This is the wrong place to do this. The current function returns `nil` if both of these are `ok` and `ok` are `nil`, but I guess we can't rely on it if `is`
Is this change required ?
I don't think this is needed. The `fixme` value is already broken. The `on` function can't be removed, it should be removed.
This function is a function. I'd just put this function in the func that will be used directly.
maybe the original was correct, `timing` is enough?
This still is necessary if the app is already added
Are we also using the exact same `/`? I think we should just be using the constant instead of a `char` here.
@matt-gardner How do you use this include? Seems like you have no idea what this patch will be doing for this.
I'm not sure what this is used for. Can you explain what is this change about?
I know that `CastToClient()->SendSpellBarEnable` returns true but we can remove the check for `IsClient`
shouldn't it be `invocation_id = null ?CIDR(break) : 0`
why do you need to return tx.indind() here?
`NewNonApiApi` seems to be used anywhere
Why was this removed?
Do we still want it to be `cachedChanges`, or can we just use `nil` here?
I would keep this method to not have to pass in the `execute_task` call.
This is a bit of an interesting detail, but we're still testing that "Connect" will be the same as the "rewrite" type (e.g. "chan struct{}", which is what should be used for the "just work" block).
I don't see how this is done every time you call get_replicateLogs(). Is it not the case anymore?
Is this change intended? Shouldn't `$FormType()` always return a pointer?
nit, should we also mention that this will be added to the `google-osconfig-agent` dependency, if the `google-osconfig-agent` attribute is present?
Is this used anywhere? I don't see it set anywhere.
I don't know if it is correct or not since `import sinon from 'sinon'` is a better import (so I wouldn't do this).
Nitpick: Can we use a `timeReorderingFraction` and use it everywhere for the const?
I wonder if we can move disk info to disk below?
nit: extra new line
This is the fix.
Is it possible to avoid a blank line here?
Why change this from `NewtonsoftEscapeJProperty(framework) `
Why not `hard-doc` or `hard-doc` as the second arg?
This is a leftover from the PR
This property should be received.
Is this an unrelated change?
i would not use the null pointer. I think it will always be null when there is no way to avoid this
Do we need a way to test this?
I think this is the only place where we can use this method. I am pretty sure it should be in `config/config.py`.
we should test this in an upgrade and check if the `request_in_headers` value is set.
We are using `throw new enums in quit()`. If we do it here, we don't do that in the `NEW_SESSIONS` method. If we remove the `command` parameter then this would throw NPE.
The value is "/metrics".
Is this just for consistency?
The cast was unnecessary.
I am assuming this is the test now testing for us?
we don't need to catch exceptions here, as try catches it
i'm not sure if this should be `suspense.test.js`
You can useBATCH_SIZE_MAP = 'InvalidParameterValueException' for this.
I think it might be better to do this with `toString` and then pass it to `contains` here, instead of casting it to the `contains` and then `setPriority` directly.
I'd suggest adding this attribute to the ConfigSetService class, since it is already used in the config class.
I don't think this is needed, you should not be able to add it for a logr anymore
@scheibelp do you know if this is the right place?
@deads2k why change this import?
Is this needed ? I don't think we need it for all of our tests
Please put spaces inside array brackets and before `,`
All these print statements should be removed.
no need to put BN inside a new class, and use `docker-auto` instead. The default `docker-auto` is `balance`, so `docker-auto` will be `docker-auto-auto` will do.
this should be changed to use `java.util`
This is a breaking change as the default behavior is `string` which can be replaced.
This is the only place in the source code that needs to be `build`/`filter` instead of `bazel`/`bazel<pazel>`, it is better to move the source check out of the source code.
If you remove this line, it will not make a difference in the next major release.
So, is this the default Azure work?
i don't think this should be part of ProgressBar
This should not be here. It should be `errors.warn` as we don't care about `errors.warn` in Spack (and `errors.warn` can be `None`)
I would prefer to use `http.Name` instead of `http.Name`
I think it would be better to add a space in `is_component` and `avoid` to make it clear that this doesn't break anything.
This TODO can be removed.
I think the idea of `Metrics` is that it is the case in this case.
I wonder if the first time you add `addType()` here would make this a bit more clear
Is it necessary to make the `solve` tag private?
Can we use `skipLoad` here as the other key is used for the `_` key.
this could be an expression, do you think it's worth it?
I assume this was a bug before...
Why the change to the "all" link?
You forgot to add this to the old constructor.
Why not use `spc.enqueueSpc()` here?
It's not a good idea to have Close be called multiple times. Perhaps add a `defer Close.IsClose` method to pass the context and pass the underlying values?
I would use the HeurekaCategory class to return the exact error.
why set `bbox_head`?
The issue with this was: >2.02 (default: no) { 1.02 }
This method is only called on the client side, so I'd prefer if we split the client side in client side (which I can do in the client side). I'm going to change this because we don't do it everywhere in the client side. So I wonder if it's a better way to do this. What if we change the client side?
this is probably the same as `/products/1-impl` (or maybe we can move away from this module and use something like `/products/13-7-46` or `/products/13-8-46` to the source)
I think we need to add `CDs` to the ` engines` table
The goal of this was to check if the deepStackTrace command is in an encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded encoded
I am a bit worried about this being too much for a model on my machine   Let's see if we can make this a constant. It might make sense to have it be just an instance variable that we want to have. I'm not sure if there is any benefit that the second parameter might be used, and if so then I could add an option to the `attr_reader` method and just pass the instance as argument to `parsed_email`.
why not use a `history_` from the definition of `rfly` ?
Is it really a good idea to log the logging output here?
Can we add an LPM parameter to the generated `V4TrieEntry` so that we can get it down the V4CIDR? That way we won't get `buffer[:0]` from the LPM? The LPM could be a V4?
can `user_message_author` be used here or in the CSS file too?
`EnableLogging` is never used in non-migrate code. We could move this to `agent.go` so we don't need to change anything in the code.
I'm thinking we can do `context::getClass().getName()` on the `3.0` branch in this way. This is the only way we can do it for each call and will be able to set a non null string to a string.
This is an unrelated change.
Should we call this `expect:` ?
I think this should be left as part of the wlr_init()
I like this TODO, as it is only related to the changes in the code
This shouldn't be called "warning" (which is in `make_e`). I'm not sure if it's better to have this on the `Error` itself, so it might be clear that it's the case where the error happens is that it could be a `Error` object and it might be `null`.
Does this mean we don't really need it anymore?
What about other notificationId related to the newInUse?
This seems like a very common pattern, maybe worth changing the behavior here to return a tuple and then just use the `ErrNotFound`?
`getConfig` could be replaced by `config.getConfig()`.
Why did the null check change?
The `title` should be `current_user.title`.
There's no need to pass theSession variable.
Use `dict()` instead of `dict()` here, since the dict is not actually a dict anymore.
What do these tests need to be in here?
Why do we want to log if err is present?
This is still necessary. The output should be the source of the package, not the hash itself. The current one is not really strictly shown for the `create_package`.
This needs to be configurable.
I think it would make sense to put this in a `__init__` for all the super-init-not-called.py already
Please add the `TODO` to this file
Do we need to add this to `prepare_path_from_each` method?
I guess this is not part of your PR?
The `reportArgs` should be used by hasData.
@danrot what do you think @damenchoum?
`chan error` is not necessarily the same as `errCh` but now the same error returned here
What if the checkout is used?
This should be nullable since `$temporaryFilename` is null
why not use `Optional.newArrayListWithExpectedSize(rowType.getFieldCount())`
I think we should update `output` and `update` to `position` instead of `position` to make sure it's only called from `toArray` cache.
Hm ... I'm not sure what you want here? The device will be `""` and that's the device type. I'm not sure if it's the case, but it's worth having a trailing `,`
We should add a note about the `getLogs` below.
I think we should also check that the `!empty()` returns a string if the host is not defined.
i think this is a bug... but we should probably change it back to just removing it.
whats the difference between `in` and `in`?
why this change?
What does "Fail to health check" mean?
Should we have the trace case for AzureAppServices as well?
I'm not sure I like this but we use a file for a version check. What is this dependency?
Why don't we just always generate the LessSpecificReturnStatement?
this should be done in a separate PR
I think this is the correct way to do it in the `if` branch. It can only be used if `${error name}` but `${staticbuild} else}`
Does this mean that the new text will delay on Linux? If yes, we need the new text.
`this.on = this.emitter`, and its two lines below.
No strong dependency please
Please remove this blank line.
How is this different from what's used for?
I think we can remove this field and add a migration here. We are already passing in `positional-args: true` to `execute`. The reason is that there is no risk of a user using `positional-args: false` for example if they are in preview mode, but I'm not sure that it's still useful. Maybe we should just remove one in `positional-args: true`?
If I understand correctly, you are going to do `return f.server_conn or not f.server_conn.ip_address` but not f.server_conn.ip_address[1]`
The last time we add new properties to the interface is the same as `Date`. Can we keep that one as well?
What do you mean by setting the return of `2012` here? The check seems to be done only when the return of `oo_on_inner` is true, and it will always return the default. Maybe you should check if it's an empty list and not just return the correct error for that case?
remove empty line
I am wondering if the whole thing is a good idea. It can be done in a different PR.
The `TestElement` version is used to generate the new `RootMetadata`, `RootMetadata`, `New` and `New` functions should be added to `oauthNew` and `pants.util.Metadata` but the `oauthNew` and `pants.util.Metadata` are now different.
Why did you change "docroot" to "html/html" ?
why is this necessary?
This is actually an actual error, we should be able to do this.
Seems reasonable to have the template overrides in parallel. If the user has two offset values, then this function is only used as an environment variable (i.e., it could go away with a template if needed)
I think you're missing some more `equals(NAME)` around this
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Do we still need the `secretURL` check?
Please rename to TestResponseResponse for other tests
This is where we don't have `index` attribute for the key.
Why is the wite lock still needed here? The rest is the same.
Is it safe to keep version as `_` for version and version as a version?
Remove extra line.
`if (isCloud && protoPkg.contains("cloud"))) {`. This would allow us to add a constant to get the cloud cloud specific code.
What happens if LobTgtFileFlags is defined as a directory and there is no version in the LobT?
Question: Why do we need to keep the info log level as info log level level? I think that's fine. In other words, why not keep the original signature and use `info(...)` as above?
It seems like this `&& Mono.emu_Open` should be checked here and not in the Mono.emu_Open.emu.emu, but in the future it should be `ssl_, getHost().c_str().c.html()` or `ssl_, getHost().c_str().c_string()`.
I don't know if it's better to read `readActiveBlockProducersByHeightTests` and just read `readActiveBlockProducersByHeightTests = []`
I am not sure why you did this
Wouldn't this work if you made made `this.getOffset()` an instance of an IOException? I'm assuming we don't have to do this check at all, but we should only skip it if there is a reason why.
This is the only usage of this method that needs to be updated.
`Interceptors` doesn't need to have `Interceptors` in the first place, because we can only call it if `tch.ListenAddr(":28941")` is true. This will be a bit more readable.
Should we add an assertion to verify that we don't load data directory at all if the user wants to set it?
"env var for pubsub"
The error message here seems like it should be improved?
@mramato do you think the default should be here? I don't think it should change
This is an error in the file, I see now I removed it.
Can you use `validateUnstake(p *Protocol, act *action.Unstake) error {...}` to avoid potential warnings? :smile:
This looks unrelated to the PR.
import by default.
nit: use `set_stolen_reg_val` here.
Would it be better to do this for us?
This was the only change I had to be about this change in the commit title. This change should not be related.
Can you use `abspath` instead of `__file__` directly?
Would it make sense to have an explicit `reduce` method for the `DateTime` type?
Is this file still relevant?
This should have been a bug, since the error message would be logged.
this is the main change that is needed?
This method is not used, please remove it
The error message should probably say something about the message being displayed in the error message.
Should we have a test for this, say, if we don't have a model with a model with a model with a model that will be passed and a different name?
I was seeing you are removing the `iotexproject/client_golang`, but this is probably not needed.
This was just dead code and is not needed anymore. I can't see a reason to use it here. I would suggest using the 3 property.
I wonder if this is the right place for the `clear` online, since it has a name like `_var_OPTIONS_TYPE` and `_clear_online_weight`?
is it worth it to use `attrs.Header["...].valueOfOf(values) == 0` instead of the `name[0]` as the URL?
We should also try/catch the `executorashed executor/container` as the module name (the `container`) is not a thing. I can think of a better name than this, but if we're using `reflect.get` it should be `reflect.get` or `reflect.get('executor')`, then I'm fine with that.
Please add a blank line between tags and summary for better readability
I would move this down with the one below. We can probably move the logic here to the `update` method. The `<%=` logic should be moved down to the `else` block in line 218, and `<%= [8]` block.
This feels pretty trivial... why not have the constructor take a `pause` that gets `Invocation`?
this one needs a `.`
This is a breaking change. I'm not sure it's the right change here, but we may be missing test cases.
This is just for testing purposes, right?
Nit: `ConcurrentHashMap` may return `Integer` (I think), since it wouldn't change any value.
Hey @hustodemon this is what it is about
**question:** is this still necessary?
This test doesn't pass.
For some reason I don't know if the user will see this in the p2p bits, but I'm not sure how to use it, so I think the user will get the wrong user once and what was the reason for doing that. The user will need to see the full link for this link in it (see #18333). This is a bit weird, I don't think it's worth the effort to do it in the user's source and not necessarily necessarily for this link.
Can you use `_flow` here? `google_site_kit`
If we're still creating an external image then this should probably be `Sequence.OkDialog()` instead of `Sequence.OkDialog()`.
The type is always `ec2Id`.
This is a typo!
@dvoytenko I'm not quite convinced we want to use `String` here - is there a reason to use `public` (and similarly `SettableGauge<T>.<T>.<T>`) instead?
Same thing as other PRs
I think the change here is redundant
Why not just add this one to the top of the class?
It looks like I'm missing something, but I would recommend adding a little docstrings for the `description` description and adding a field for the `conda.go` (which I think can be confusing because it is what it is for the other case).
Do we really support the "time" data type? I think the `time.Duration` could be used for more than the value.
This is a little hard for me to understand, but I think it is a good idea to use a `\_` for it.
This is probably good! :-(
This line should probably be `err == nil` instead of `err == nil`.
I'd move this to a separate file so that it's obviously a little bit more obvious
I think the error message could be misleading, if `BucketAlreadyOwnedByYou` is an error, then the error that would be returned.
Should this be named `io.servicecomb`?
Please remove it
This is an unrelated cleanup change, I had to remove it.
I think the `url_options` should have been removed, and that is what the behavior does.
I think you're still missing something, but `10 * time.Second` should now be `0 * time.Second`.
There is a typo in "init".
I think `time.time` could be moved inside a context and use it here to get the correct size
If SolrException is SolrParse, shouldn't we still close `SolrException` ?
could you also assert that the string is `--tensor` ?
I wonder if we should change the `KOALAS_USAGE_LOGGER` class to `results` and set the `None` to `True`? If there are any other types of the `results` attributes we would like to fix, I wonder if it's more accurate to use a `default` value.
Can we make this GasPriceConfig private?
This is still needed since we're not actually creating the `ctor` resource type as an argument, and not an `ctx` (since they are no longer needed). We should probably have a call to `ctx` at the end instead of `ctor` here.
This looks like a typo?
This is a better way to tell which CertificateRequest is used. This is also the reason I see we have the other way around.
I think we should be able to just use `sender_gcpbroker` instead of hard-coding the cpbroker name.
So, it looks like the `else if (lit == null) {` block looks like it would return null?
It would be better to use a different name, like `nrmse.getClass().assert(gt, 6, 3)`
I would just move this try to the try try `DT_INSTALLED` above this try and use it here.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This error never returns before, since the `errCode` will always be present.
Would it be better if the graphicsPipelineCI.pInputAssemblyState is a common helper (see the one in `topology_at_rasterizer`) and set it everywhere in this case?
I'd suggest to move this into `assets.js` and then we would use it as the value. It's a bit more obvious what we're doing with `assets.js` in this file.
This function is used in all the functions that return `attachment` which should be removed. The `detectStale` function is only used in `attachment`.
I don't think this is a good idea. The `in` part is not a single row right? I don't think it would work.
I'm not sure why we are adding this field as the HeaviestTipSetCh?
@mfojtik @smarterclayton do we want to remove the `AWS IAM` here as well?
This is the only place this log message can be helpful.
I assume this will still fail if a hex is an error and the hex has no hex...
Why did you change the condition ?
I think we should remove the default if it's no longer used.
@KonajuGames - How does this work? I think that this change should be reverted, and maybe even be avoided (if we do not need this file), I'd like to see a more accurate implementation of this and have an un-descore, if we ever want to expose it.
Line is too long. [95/80]
why is this change required?
Why does this need to be configurable?
Shouldn't we also close the `rfile` when we're not?
this should be in `config` package
remove the empty line
We should also remove this line and make sure it's only called from `reg.c` if it's a `L` enabled.
Just checking, this wasn't a bug in the previous PR that `m/44%/1` returns error. We need to update `bip` to `m/44%/2` and then `m/44` to be able to generate empty strings that are not expected to be expected. But then I think this change should be reverted.
I don't understand the change here, the `Checked == .01f` method is only called once per loop, so the test is not failing.
nit: can remove this.
Is it necessary to reset `logger._logger` as a `None` instead of `None`?
why is it changed?
Not sure we care about these. I'm not sure we still need `t` because the GC could be the actual size of a hash (i.e. it is an unknown size of a GC, which is not the number of changes that need the GC.
Just a minor suggestion: I know we've been using the `subdomain` function in both cases in the same time - but I think you can just remove this one (and use the `conftest.parse.parse` function) and we don't need the `conftest.parse.parse` file at all.
`nodecache` -> `nodecache node cache`
I'm confused... how can we have this struct in the `kubernetes` class? I guess that's what we usually do?
This is an unrelated change
@pgavlin, I changed the content_for :page_title, here is where the content_for :page_title
This is not the same as this. I'm not sure if this is something we want to be using for `isDestroyed` on every single callback.
Can we move the versions from the top of the file so the version doesn't show up in the same package?
Maybe `info_and_current` instead of `info` since that's how we want this to work?
I think the idea of keeping `setTimeout` is to call `window.location.reload()` instead of `window.location` since the call to `setTimeout` is also in the `reload` method. The `validate` call here is not only needed if the second call to `setTimeout` will return the first element and will not call `window.location.reload()` twice.
this is not used anymore
Are these changes actually necessary? If so, should this just be part of the PR?
"concrete" sounds more like a `concrete`.
What is the difference between rationale behind the fix ?
Why are we using publishN and not the child child?
Should this be `step` instead of `approval`?
I guess we can remove this
this should not be needed
I think you can just pass in the error message and use the function from the null check to avoid the need for the else block here.
This isn't necessary. It's missing the `show` prefix. `Faker` is never used.
`Task does not support noop` -> `noop: `Task does not support noop`
I don't think we should remove this package anymore. We are already doing `go-ethereum` in the package.
I guess the `sodas` value is being changed to `water/sodas`?
Why is the value of assign({} changing?
I would just put these on the `SK_metadata` constant in the `decode_api` method and make it clear that they are the case that these are all `decode_metadata`.
Why do we only need to set this for the port?
I think the `NEW80Codec` can be removed now.
just pass `true` as a key to `pdfPageOrientation`?
What is the migration for adding this?
Do not use `.nil?` with `.. versionadded::`, unless you're using `.. versionadded::`, you're using `.. versionadded::`, and in that case you can use `.. versionadded::` instead.
I'd rather pass `bool` to `ISetupLoadConfigurationBuilder` instead of `ISetupLoadConfigurationBuilder`.
Please revert all changes to this file.
We need to use the `state.delete` attribute instead of the function.
I don't think this can ever be null. We need to remove some of the field.
This method looks to be called twice
Hmm, this fixes a bug.
why the `Skip` level?
can you remove these unused imports ?
We can add a `foreach (var processor in this.processors)`. This way you will also need to check for the processor that we can't set.
I'd like to avoid this change as it is not related to the PR description
I don't think that's necessary. The `with_thirty_day_activity_id` is supposed to be checked with `thirty_day_commit_count`, but it's the same logic.
I think it might be better to use the default value here, instead of hardcoding the default value
I'd expect to see this in here, if its for a number of places, or in the past we're not doing it for the best info.
What's the reason for this change?
Please add a return type for this to ensure this is the one in line with the others
Why the exception is thrown? I don't know if this is an error.
Should be `i.`
Could we make the `GROUP_USERS` variable configurable?
This isn't going to cause problem since if we're using a file_dict, we're in the same directory.
I think we could leave this as it is.
Redundant `;` detected.
I think this is not needed anymore, since the file doesn't exist anymore.
Any particular reason why this change is not related to the PR?
the `anonymous` parameter is the only one that's passed to `you-returning-long`.
Don't use parenthesis around the condition.
Why change this?
@mmaxim this is the reason why we changed the tests for this?
I'm not sure if it is worth it, but it might be nice to have an example where this file is actually used.
can you add the `__FreeBSD__` constant? it should probably be just `__first__`
Do we want both?
nit: I would suggest to explicitly call it `require 'pathname'`.
Doesn't that require the user to run the engine?
Shouldn't be: `short_names`
I am wondering if this can fail in any other way. I would expect the attribute name to be something more meaningful, e.g. `func (agent *ecsAgent, attributePrefix, attributePrefix+capabilityFirelensFluentbit)`, and in that case we would not have to worry about.
We should also support the GH SDK's `cloudformation` package.
can this be moved to `action`?
I'm not a huge fan of this cast as a string because it's an array of `InvalidScalarArgument` (and not a string). Could you please add a line to remove this cast?
I guess this is one line break.
What's the reason for this change?
I'd rename this to missingAdminRole, to be consistent
Hmm, can we make the name consistent with the other `_IDEO`s?
We need to keep importtimestamps
I would use the `-` part. It's easier to read than a dev.
Wouldn't it be simpler to just use `NewIdentityManager()` directly?
this should be defaulted to `undefined`
Should we call it `.zip`? Same with `.zip` in the other PR
why is this added? I think we should just remove this.
shouldn't it be checked for every other `pre_syscall_app_sigprocmask_valid` call?
The return return is important that the returned list is sorted, so you don't need it here.
Thoughts on making this a global constant?
so we just return an error from `debug` or the `debug_deserialize()`? We do not need to do any harm if we're only adding it for `STATUS_MODE`
Please use `_`
I'd use `str1.localeCompare(...)` here.
It feels like there's a reason the `<=` is not here? I see that `>` is not always the same as `<` but `>` seems more correct.
I think it might be useful to include this in the `*` struct since we're here anyway.
This should be error instead. We need a test for that to work with @garyrussell, we can't do that for the future.
Why change this "unit" to "asset", as it will allow asset to look up?
I am afraid that this doesn't work in terms of `GetConsoleWindow` it does a bunch of different commands, but it should be `GetConsoleWindow.Find()`
this is an interesting change. I think it's better to not have `.Version` and `.VersionV03` methods on the context, then we don't need to pass the context to the transport. It can be used by other components (and not in this PR). I think we should at least call this method in the `VersionV03` package.
Should be `-1`.
this was the unclear of your bug, but I think it was wrong. In the `time.configure` we still need to have one function named "source" and "resolvedWriters" that we can have one or the other. But, I'm a little confused as to what it does.
Can we just have a test that covers this case in the future?
Why was this changed?
same here. I don't think I can easily easily use `substitution` to build a higher priority, but this one is only for a specific text.
I would have changed this to `__len__` (I would have called it as `python_hash`)
Shouldn't we call this envenvpnPort() so that the user can set this for every port?
Why we don't need to connect to the topology in this function? The method should just return topology.close() which we already do is in the next if statement above (if the method is in the class but we don't need to worry about it).
Style/UnneededInterpolation: Prefer to_s over string interpolation.
This is now part of the new version as it's only used in `nnictl package` and is removed.
This is incorrect?
In the current step in SimpleActivityProcessor, we may need to use SimpleActivityProcessor here.
do we need this?
This is going to be the default value of a method that is actually used
why is this a pointer?
I think it would be cleaner to move this to the top of the file `asmsecret` section, since there's more of the broad and it would also be more useful
This change is unrelated to the PR, but we can't really change it here.
Why do we need this TODO now ?
This is a good example of why it was noted above. Perhaps we need to use `ComputerName $(hostname` here?
allowError is the same as the output of this function.
It's not immediately clear to me what this is supposed to do, but if so, we should add a TODO to remove it
The VirtualMachineMetrics is used by the `ServerMetrics` so that we don't have to override the class in `Metric`.
there is a `req.NewVote` in this file.
This change is not necessary. `nameLower` is always defined within `o`, and `nameLower` is not defined.
I'm curious why it was `fn` before and after, why not just `path = os.path.split('/')`, and then remove the `fn` altogether? Then we could just remove the `if` condition from `.split('/', path)`
This is where the interface we want to return -10 here.
Would it make sense to set this in a loop instead? i.e. when we set it in a var statement in `Timer.Time` and `post.Time` in the context of `handshakeEvent` it could be confusing.
Did you consider using ROMR instead of ROM_ptr in the regular regular order?
Wouldn't it be better to use a more direct value than this?
this should go before the `boolean`
this is not related to the PR, can you elaborate? I think it should be possible to have a mMessage to avoid the need for a different exception
this will overwrite the manifest key, we can't just check if the manifest key is not present
i think it would be more accurate to change the order of `Include` to `Exclude`.
Can we change this to be a constant so we have more meaningful name? e.g. "user-domain"
Is this not related to this PR?
I don't think this should be called from multiple places... is it possible to use a boolean?
This is just a small change
we'll have to define a default value in our API as well.
this file needs to stay
I assume these values still have side effects, but they should be restricted to agree.
This is not really related to your changes, but I'm wondering if it's better to use `cfg.gpus` instead of a hard coded string. `!cfg.gpus` could be a ` processed_ids` variable in that case (if it's a string)?
`info` should be kept inside `info`
should we make it a list of values instead?
This might not work as expected. This makes me think we want to be able to use FileExistsPolicy.Overwrite
This line isn't needed anymore?
Why is this test changing?
Doesn't `additionalIngressRules` need to be released before the `master` loop?
can't you make it public or public?
I'd say we don't add this. We don't use datum_vector in this case, but not in this case.
Lets keep a shorter name, please use `blockHash.wrap()`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think you are going to do this in the first place and then only on the first one.
Is it used?
This is the fix.
No empty line.
Is this necessary? The message needs to work for own thread, since the next time the command is re-introducing a new message to execute the thread.
Hmm should we add some kind of description of how we could link to some docs/method/method?
I don't think we can name this ` Number Number` because it's a smaller type.
Is it worth adding a `default: null` to the end of this method?
The `block` go-filecoin was being set here because it was not set by the user.
This isn't a difference, but it is a bit hacky to call "QUILT_USE_TQDM" here.
This should be fixed in #43434
This should be `if (component.componentWillUpdate) {`.
Why do you need this? We are deprecating the `ad` key and the rest of the params.
I'm not sure this is good idea. It seems the `JAVA_OPTS` logic is used in both ways.
remove this empty line?
I think it would be nice to use a `0x03030x0200` (in `pkt.tls_version` or `intx0200_min`) to be more descriptive. This will also ensure that if we are going to have to change the type to `xsch` (in a `x0200` in case of any `pkt` and `welcome`). This will also help to check for a single version of the `source`.
Remove the `log4j` dependency since there is no `log4j` in the commit message.
Nit: we can probably drop this test altogether.
why did you change the order of mock_ecr0 to just mock_ecr?
I think the `ubuntu-` URL URL should be `1_amd64`.
I'm curious if we have more detail here for the purpose of making this change. @jridgewell Is this change needed?
Why this change? We are using this in a lot of places (see the codebase below).
`Object.setPrototypeOf()` should be called here. The attribute should be renamed to `Object.setPrototypeOf()` as well.
So, if I have to do a rebase on which version we may want to start to do something more cleanly? What will be the expected behavior if I have both?
I don't think we should remove `new_size` from C code since this class is redundant. The new constructor is already there, and the `old_index` has been removed.
What about the other places we add this to `sonar.java`?
Nitpick: "isLongrunningOperation()" is unnecessary since we use it in the other places.
The name `Basic %s` is not very descriptive here. `Basic %s` should be fine for me. I think `Basic %s` is more appropriate here. `Basic %s` is not really a good name for this (or something similar). The password is a `s` and so `Basic %s` is more descriptive.
`self.all.order(updated_at: 'fields')`. Is it possible that you'd never call `scope` twice? If I understand correctly, the `self.all.order` will be called on every `updated_at` on every single scope of `updated_at` will cause a bad test.
Base.Base can be replaced by the Base.join_to_i
I'd rather not use the width tag like other occurrences. We'll need to add the tag tag to all of our tag usage.
I see, `getConfig` is used in all tests, why use `plugins.getConfig("api").offline_mode`?
I'm not sure why the name would be a bit clearer here as well. Can you replace the method with `$this->config->Catalog->shibboleth`?
Shouldn't we have a `*` at least in the log message?
This will likely result in some issues.
I would just make this `Field`, `block`
nit: this could be named "chaos-mesh"
Why do you need a `c` here, can't you just set a `c` at the end of the line?
This looks like a bug, right?
The 3 bytes were not being changed, so they are not really used.
This needs a docstring.
Because we're only adding one extra arg for the Config we probably shouldn't just do `Bolt::Config.user_path` here
this should be a part of the `else`
Why this is removed? The reason I'm not actually able to remove any type hint.
You need to use the same pattern as above `<source>`. Same below. `version>{version, datetime.datetime.now().year}</version>`
I'm not sure this is correct, `strcmp(type, "goto error))` isn't true.
This could be a constant in the test
This seems like it should be a single line string.
Please also add these magic numbers.
This should be done after `toggle_on_toggle` (as it may not be a special case when toggle is True)
Shouldn't this be DevStatus?
This will cause the specs to fail. The auth auth auth auth auth and auth auth is in the specs, so the auth auth is no longer needed?
Please remove this.
Please use `drwrap_event_bb_item_event` instead. Also, `drwrap_event_bb_item_event` has already been set to `true`.
Does this work on windows? Or did this work on all components that we have?
I guess this is due to the changes in this file
Not sure about this. This is necessary because if you have `options.readPreference` then it will be `command.readPreference`. This means they are always called twice, the first time the command is called.
I don't think this is the right place to put the second block. We need to check the result before checking the block.
Can we instead just put this in a function? It will be easier to see what is being passed to it.
Line is too long. [82/80]
There's no need to add this line. Just return false here.
this will be a different case, no?
`ex` seems to be a better set here.
I don't think we need the `if Travis::Build.config&.ssl&.verify == false` condition here since the `if Travis::Build.config&.ssl&.verify` condition is used only in one line now.
Why `stopEventWalk()` is called in `init` function?
Would it be simpler to do this in `init()` instead of using the `init()` function
I'm a bit confused with @mjkkirschner, what is the difference? How is this not in `staging-install-media.js`?
Nit: we can use `num_scanf` to be consistent with other lines
Why do we want to set the network::NetworkUtils::getAvailablePort() to zero?
Seems ` MinimumRate` is not used?
You need to check that path.Join() contains a directory that contains a directory that has no directory but it is not a directory.
Why is this changed from the previous previous line?
Can we add a TODO to redefine block in the future?
This should probably be `@private`
Why not `IntegerIntegerId`?
I'd prefer if we could use `IsWellFormed` here.
This type is now an unused `Oneway`?
`config.XDPEnabled` was defined here so that we can get rid of it entirely and set it to nil when `hosthost` was enabled.
I think the logic of `ERR_SPACE_NOT_FOUND` is more consistent with `&&`
" False for ResNet, True for Houglass."
This is a no-op change as it's a public interface.
I think this should also say "consider" since the `exit` has been built in to the `exit` package, which means it will be used in multiple environments.
I'm not sure if `cr.Spec.CommonName` is the right approach for that.
This is just a test that takes a temporary variable, not a param
This one is dangerous, but I think we should use the configuration version instead of the default value here. Then in other words, I'd like to avoid `spark_version` to be the default.
This is the wrong place for this.
`import *` -> `or` (the `protected`).
I'm not sure if this should also be removed. The logic is not needed anymore. @mitchellhenke would be nice if you could take some feedback about this?
"aggregates changed to operate on indication that this doesn't need to operate on row"
This is a breaking change. Please revert.
Why not `ecs.Attribute`?
I think that we should move this to `FEATURE_CODE_USER_AUTH`.
how about `8`?
It would be better to move this to a separate test file to ensure it works in an `login_as admin` block
I'm wondering if we should just call this `cancelled` for consistency with the rest of the component (i.e., `status-header-container` and `status-header-container cancelled`)
Why is this removed?
I'd prefer to not raise the correct exception here. If there's a reason for doing this, then `models = paths.length + dereferencing.url(path='structure.length);`
I wonder why these are being removed?
nit: this is a bit weird, can we have one?
The `base.size() == 0` part was needed to avoid the `numDocs` check.
I don't know if it's possible to remove the extra parentheses from these imports.
Is it ok for the update to return empty strings here? I think that `bytes.Buffer` is too generic.
Do you need to add `now` to `cert` as it's used in all places?
Please don't change this import.
I'm not sure we want to go into this `grid` class. It's really a good idea to introduce it if we want to do `allowable sampling` or `target` as it's the type we want to.
This is not correct, the `clickPreference` should be removed, so the test should be updated too.
I guess we should just do `if deployment.ClusterName == "" {... }` here instead of removing `if deployment.ClusterName != "" {...` and use `hard.ClusterName` inside the `if`
is there no way to test this?
I think it would be good to use `this.input()` for the input.
I'm not sure we should update this default value here. I believe it's the default value in `pkg/api/server/register_field.go`
I think a more specific question. How about adding a try/catch block here to ensure we're not catching a file?
I think we should add some validation on this, to be consistent with other arguments.
`model_loader` and `score_thr` aren't needed anymore?
This looks like the wrong place. Is this the actual role?
Is this the right place for the "globally" type?
Is this change the right behavior? This was the only code where the types are specified.
Should we be supporting both `RTL` and `scale` here? I'm wondering if it makes sense to have a test-only `scale` and use `RTL<T>` instead.
Shouldn't the URL be `_window`?
We're missing an entry here
I am not sure about this one: Daan should be VERSION2, Daan should VERSION2 (hopefully I'd expect the same Daan to be for Hard-VERSION).
I see the default being used here - but not the default.
Please revert this file and change the whitespace.
If we still don't need it, we could just set it in the `else` section.
This is not needed, we will never be re-using it.
This should be done if not on line 23 above.
isn't this supposed to be `s.IsHidden == false`?
I don't think this is a good idea. The previous code should be used instead of `clef-signer-address`.
This seems to only be needed in one place, right?
This is the correct way to determine the CName name. I don't see where it is used in the code.
Could you remove this space as well?
Doesn't `prefix` always exist?
`ClassLogger` is already imported on line 674.
This could be replaced by `getAllVariant`
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
This line is redundant as its already in the previous pull request.
This is a little weird. Just use `vic-machine` `url` instead of `view`
I would have expected the state to be a `ALTER TABLE`. It looks like this logic is actually in `KEY_EPISODE_NOTIFICATION`, but I wonder if it would be better to add an additional check that we don't have to do so?
This will break some of the other tests.
This seems a bit of an overkill, but what is the logic behind `ench.salesforce.com`, i.e. `mobilesdk.cs1.my.salesforce.com` ?
The result if name is "name"
I think you need to keep the `getMetadataIdentifier` method here. `getMetadataName` can be shared among all the other constructors in the future. Also, `getMetadataIdentifier` could be renamed as `getMetadataSpackpack`.
I see, `IEnumerable<String>` is a more general purpose for this. This should also be `IList<String>`.
It doesn't seem right to me that the API is not allowed in `map()`. Can this method be `with static`? In that case, it would be easier to understand why we would need to do `default Set<T>`?
I'm not sure what the `request_request` header is here? I'm not sure what `response_headers` is doing, or at least some of them should be used.
Can you also add `#if` in `Spec.js`?
This will need a bunch of `context` changes in the `make codegen` namespace.
why do we need this?
Please annotate `@Nullable`.
what is the "random" idea for?
Wondering why `killRecord` isn't always the "kill", since it's not a "kill"?
This should have a default implementation of this. If we're going to make a dumb question. Maybe we should move this to an interface instead of an int?
maybe we should just return error here.
I am just wondering why you set `mins=mins` if `mins` is None?
this check isn't needed
I am assuming this is a breaking change, since the `@since` is now a public API.
Maybe we should log something (i.e. for `src\JIT` and `src\JIT`) or something like that (i.e. log files) ?
The script is going to be used when it's just the form, but we should probably also check if its a `--javascript`.
I think we can remove these if not needed.
Isn't `id := primitives.NewUUID()` an immutable value here?
if this check is not necessary, it might be worth moving from `if (GraphSummary.IsHandleCreated) { ... }` to a const.
do we really need this?
Not for this PR, but why is this required?
why do we check this if block_hosts.length > 0?
I think this should be removed.
Is this used somewhere? I don't see any code that uses it.
Is this needed? Seems it is already handled by the other test.
Could this use `data.emplace_back` to avoid this kind of error?
The table map is a non-empty string, so it can't be removed.
should we remove the `GoogleSitekitDashboardDetails` ?
I wonder if a more specific class would be to make sure we have a `NewVHS`, or just pass in the `NewVersionHistories`. If we don't do this (we do not know that it is a NewVHS).
i don't like the idea of having a `missing_text` variable in the app. i think that would be much more readable.
I'm confused, what was the reason for doing this? The former below is not always present. Also, if you want the `pantsPACKAGE_NAME_FORMAT` value, then the default value of `pantsPACKAGE_NAME_FORMAT` will be always present if there is no `pantsalloc`.
@Savalek instead of 18ing in case you have a component with `editing` then it's missing
Why don't we just continue to log the whole struct instead of continue?
This is just another place where I was expecting to put a false false in the test. It's not really an error, so I'd suggest to set the test.
Could use `.map(ASTHelpers::getType(...))` instead of empty string.
Could we have these docs for the new enums?
why not `len(p.ipv4) == 0`?
I think the line should be removed here.
Please remove the unused code
I think we need this case in other places too.
The namespace is already listed in `teams.GetResize`
You'll want to add this to the top of the file too.
I don't think the extra space is needed here?
Is this needed anymore?
@tarekgh I think this is where the `interface` directory is used, I guess?
This is unused and can be removed.
Group with line 7.
shouldn't this also throw error if the message fails?
why are you removing this if check? I don't think it matters either.
`device_extensions` is now just a const, not a typo
I'm wondering whether there should be some better description here. "If we don't want to show percentiles, we probably want to use something like `True`?
I'm not sure what the best way to do this is. In case of no actual users we can't change a user's settings on a project.
Is this used?
Why? Isn't it a bit ambiguous?
I see that the switch to `RuleB(Pets, LivelikeBreakCharmOnInvis) || (!RuleB(Pets, LivelikeBreakCharmOnInvis))` is just a copy of #3333, but I don't see where the other is needed for the original `lite` line has already been there.
I think we should move this check to `Object.Config` in order for the key to be `false`.
This should be a call to `onPlaybackEnded(...)` to ensure the value is only ever used by the `GlobalEnded` constructor.
is there any reason why the X11 is needed? I guess it should be enough to make some changes here.
What's the purpose of this class?
nit: you can use `pkg/err, since it is not used anymore.
Can this be changed to `Logger.Logger`?
Align the parameters of a method call if they span more than one line.<br>Line is too long. [87/80]
We should probably add this to the `nupic.algorithms` file so that we're consistent across the `nupic` models.
Would it be more robust to do this in the test instead of the `target`?
Does this work without the change to 1.11? I'm assuming you're planning to use a default from 4.11?
I don't understand what this line is doing. Can you add it to the group below?
This is the only place where we need to keep track of the flow for non-mined flow.
Please remove the tests in `testGetJsonBodyForSingleMapObject`, and use `testGetJsonBodyForSingleMapObject()`.
I'd use github.com/openebs/maya/pkg/upgrade instead of a separate template template
This was the only thing I missed in #948. @karcingebala
We can change this line to `assert 'momentalite' or 'momentalite' or 'momentalite' or something similar.
for backwards compatibility with this change.
I'm not sure that this will cause StackSummary to panic. This might cause problems for some platforms.
is this duplicated?
Is this change needed?
I think we can remove this completely, as it's not used anywhere now
Why not `ExtraRuntimes(nil)`, which does the `Task.IsRunning()` method, and `ExtraRuntimes(Promise.IsRunning(Task.IsRunning)`, which is called before the `Task.IsRunning()` method?
@alalazo can you confirm that everyone will notice this but I think it might make sense to keep the dot at the bottom of the file.
This is not a good pattern - I believe it should be removed.
This is the only change we need to keep track of when this PR changes.
This looks like a wrong field to me. You could just use `'id'` instead. `collection_id` and `collection_id` are all used only when a field is required.
please don't do this, it should be done in a separate PR
Should not be `IndexException` IMO
Maybe it would be better to have "0123" as a message and not a message? Also it should be "message"
AFAIK we use the spellable output spells[spell_id].feedbackableable so a spells[spell_feedbackable") is not always defined.
Should we add a column called `teams_type`, `max_users_path` or something like that?
What does `// fatal error` mean?
why removing the stdlib dependency? I think the other tunersers are no longer relevant.
Not used anymore.
please change `computed` to `pageTitle_pageTitle`
Maybe add a note about how the product's product doesn't exist.
This import is unused, and should be removed.
Is the naming consistent with the rest of the function?
I think you can do `Could encodeDoc(doc, lowercaseFields) (map[string]interface{}, error)` directly instead of `encoderDoc(doc) (map[string]interface{}, lowercaseFields)`
nit: can we make this configurable?
The method name `look` seems very odd. Could you please move it in the next `look` block?
Would it make sense to rename the `JsonPropertyName` to something like `Close`? This way it is not used anywhere and I don't think it makes sense to have a test for the `success` and the `JsonPropertyName` will be false if the deployment is not specified.
Why is this necessary? I don't know what this is doing.
Is this needed?
This should not be in `files`...
I guess it should be `opt_port`
KeyValuePair is not a good practice, it is a good idea to change the default value here to IEnumerable. I think it is more readable to use a generic variable name like `IEnumerable<KeyValuePair>` and use it to get the IDictionary.
Why we're removing the log level? I think a more accurate log level would help. If we're going to use the `info()` we should at least log the `info()` on line 355 instead of the `instanceof`.
Do we need to do this? I'm thinking if we should just be setting `SpecPriorityAlias` and `SpecScale` when the feature is not enabled.
TODO: In such a case I would have put this TODO in the constructor
this definitely shouldn't be removed any more since this is a valid track.
Can we use `&&` from `FactorFactor` to `& Counter`?
I just wanted to ask. We could also just add a `using System.Net.Common` annotation (and remove the `Assembly2` from the settings file) to the safe side.
Can't we move this using to the `Style` definition?
I think it would be better to have an assert and register the result here, to ensure that the code that gets closed, and that the test was still passing. Or perhaps that we could make the behavior better?
30 is a pointer here, it's a pointer so we don't get it anywhere
I think this can just be removed, the rest should start getting removed from the UI.
`?string` is the same as `null` in the `searchableProperties`.
Isn't this a BC break?
This should probably be renamed to `Datadog-tools-Container-ID`
this is a bug fix, is it?
I think we need to update the other files here to include this value to ensure that it gets updated automatically.
So now the processing processing can be removed, right? May be the code below that takes a `DateTime` field and then call `DateTime.created`, with a `re Blockly.Connection.send_()`?
Why is this needed?
Aren't we expecting the proposal to ping?
This is not a valid test, but the only thing I don't know is that `bouncycastle` is used.
Just to understand, are you sure the characters in `error_s` is correct? I'm wondering if we should have a separate PR for this (and also keep the characters in `error_s` for this case).
This needs to be moved to line 152
nit: this import can be removed too.
I think the "ivä" could be more descriptive when it is called.
Do we really want this warning? We should probably move this warning message to the caller and then warn on this.
Probably should crash if bad format string
I am just wondering if this is a breaking change for the user's PR? I don't think this Service was ever used at all. It seems to just be a `ServiceReference`...
Is that correct in this PR? I don't see it being used anywhere.
This is the wrong place to put this. You can set it to `ConfigTLP` and then call `GetTLP` in the constructor.
This should be in a follow up PR
This shouldn't be here. You'll need to make a note that this can't be turned on by passing `None`.
Could we add a `[DisallowNull]` for the new error message?
this if can be changed to a different way
Why change from environment variable here to not use two different variables?
This probably should be moved to the bottom of the file.
It looks like there are some more spaces here. Can you remove them ? The `small></td` is now useless, but the `small Connection` and `small Connection` don't have to know if that's a reasonable utility for the `diff` module
The destroyLinks function does not contain an assertion that the result is not initialized. It means we can't use the `resource` attribute to destroy the Links.
I wonder if we could instead just remove these fields since the only reason the parameter is there is in the `lib/` directory. I don't think that wouldn't matter for the time we call this function.
I would have renamed this to `using`.
The second part of this function looks untested. I don't know if it was a problem in some case but since this is a `length` field it should not.
This shouldn't be changed. The #if TRUE runs in the top-level file that is no longer needed.
Why do we have to do this here instead of making the `NullActivity` method a private method?
I think we want to keep the original URL here, but that is just me.
I think the trim might be useful here
Is `use strict` used at all? Can we remove it from the code?
I think it is safe to remove the `properties` param from the message, it just means that the properties will not be present in the middle of the properties.
can we avoid this if block (and the one above, if)
what do you think of renaming `__init__` to something more generic, like `__getattr__`? We could do it in two classes, in particular, in particular, as for consistency with other classes.
The `>` should be `>` instead of `\` and `\`. `-` should be the same type as `) && contentType !== 'mixed'); `
It's used in the github and should be available only from the repository
> push_front_preference [](start = 4, length = 4) Should it be a bool or an optional (or an integer) instead?
What happens if the `@since` is false?
This was changed to use `ApiMethodTransformer.prototype`, but I didn't want to be able to use it.
This is also used by other tests.
It will be good to use `prometheus.current` here too.
This should be fine to get the number of bytes in the `if`, no?
I think it's better to return `== null` here.
This is the main change. This is because in this case `peer` is not called after `ts`. So in the case of `false`, there's no need to add a label to the `peer` interface (the ``` method is already marked as true).
can we make this `//`
We can probably just remove this service now.
Will we be checking if a new `cygwin_installed?` is set here, or will it be set if `host.cygwin_installed?` is not set? Wouldn't `is_cygwin` only do the first `is_cygwin?` check do the same?
This is not correct, we should be using `*Package()` here because `manifests` is the sequence numbers. The `manifests` method does some buggy things to be used in many places in this file.
This is wrong. The scan task should be in the schema. Also, you should add this to the configuration. It would be better if we could set it to whatever the user passes a file and we will see them with the same name as a file in the schema.
Why is this needed?
CheckErr always returns an error because `errors.CheckErr()` throws an exception if the function doesn't have been called.
I don't think we need to make this one public, because the enum is already in `BaseElement`
I think it would be best to just return `Array` here. We can make it a bit easier to type without an array.
`this.data` is not really defined, can you rename this to `label.data`?
application doesn't have any side effects.
can we fix the indentation?
No need to add these to `DD_APPSEC_close`, they should just be used here.
I don't think this belongs in the API, it's not an error, just an error. You don't need a separate package for it, but I think it'll be useful.
I would put this test in a test file with `anon-user` as it is not needed.
I wonder if we should also add some property `timerIntervalInMilis` to the docs as well.
`role_none` will not be set if they are set or both rules. This is only used by the change below.
why not return the same result instead of the the result?
Is this the same as the previous code?
should the `-1.6.5` be removed from this file as well?
Why are we not TODOing?
Why remove this? It seems to only be used in `spec/develop/server/app.rb`.
How about we just use `r.RemoteAddr.path`?
This is incorrect, `withwith if { ... } `
Just a style change.
Should we also update the "one parameter" as well?
The `Email` is used only once in the `get()` method.
This will fail in some cases as an HTTP server will no longer be present.
This line is not required as HPX::m_hpx_initialized is initialized.
Is this change correct? I was wondering why we didn't do `info.RPCName` before?
We prefer to not have a wildcard import here.
This change means that we don't actually start restart anywhere. Can we start start with more than one restart here?
I believe we should not be handling the cache in the log block.
I don't think you need this. Otherwise, `compiler` will always be ''. We should use `concurrency.environment()`.
Do you think this needs to be a separate `continue`? Or maybe we can just override `args` at the top of the file rather than passing it to `string`. The idea is to not just store the ` inner` and then use this in every `_callFunction`.
I think we should use a variable for this instead, i.e. `PROVIDED_start` or `PROVIDED_start`
What if you just made sure that the `__len__` will only be called when there's an `copy()` function? Or would that be a problem?
This is just a mistake.
I don't like the change. I can see it.
Nit: I think the `ReferenceEquals` could also be moved to a separate method.
This is the only place we use this for when we're on the `Casium` page.
I'm wondering if we should have an `assert` in the class that has a similar code that has the `==` in its `isIncrease` method. Then this method could be called something like `==`. What do you think?
Maybe we should add a method to `channel.New()` in the client? That way users won't need to call `channel.New()` for that.
@mrajwa Could you double check that we have been doing this test? I'm pretty sure the change is the best approach...
I'd probably just remove this line and move it down to `create_slug`
Why was this changed?
Is this used?
This doesn't seem right. You could just use `sland_` here. The function will return false because no one is doing anything about the check.
This should be `[]` not `[]`.
Is this a bug fix or a different bug fix?
Is this a change in behavior?
This looks wrong... `toUp` should be enough
this is the wrong way. It should be nil or nil
should we make it not just read the text as part of the H2O API?
I'm not sure we really want this to be configurable?
Is it worth having one implementation for all configParamss?
What if we called `also` in the `fmt.Sprintf` function?
This needs to be done via the `after_save`.
I think it should be neither Sender or neither Sender
Why are we making a constant that's being ignored here? It seems most of the cases is there anyway.
I think it should be "in to be a number number if a message is thrown."
I am a bit confused by this. Shouldn't it be `DateTime::createFromInterface` instead of `DateTimeInterface`?
I think the original check was not needed.
Can you add a space after `:`?
What is the reason for this change?
This is unrelated to the PR, but it seems like it's not related to this change, but I'd prefer a separate PR to not have these changes. If you want to revert it, please revert the changes to the PR.
why do we need this?
I think this is not really needed. We need an example of the "types" import.
this should probably be `if (item->getIndexQueueUid()) {` since it's a function and it's not a function. (no need to know about the time but it's not an array and you can just do `if (item) { ... }` if you're not going to do that).
This is the main change. This is the "locator" type.
I'm not sure I agree this is what we should do. But then we can keep the same.
@alexander-schranz what's the difference between this and the `$clearSearchIndex` above, so it's not really necessary at all?
Is this debug logging?
Can we just use `Vector<byte>.Count` instead of `any(byte>.Count)` in this file? This way we can make sure `byte>` is static and we don't need static methods on `Vector` if needed.
I guess this can be moved to some utils class since it doesn't actually import anything.
use `digits` instead of `@example` to make sure to update that also
**suggestion (non-blocking):** It's not clear why we need to do `validate_resolve_reference` every time we call the method `check_properties` but not `validate_resolve_reference`
I think these changes are redundant @bryevdv?
I am a little confused by the new test
Do we need this on all connections? If not, can we get rid of this option?
I don't think this function is necessary. `defer & func()` will do the same. I think the best thing you should do is to use `defer func()`.
Same here with leaving leaving it as it is. We should not use the `coll FIL` and `coll FIL`.
Should use an L2020 constant in `rChannel` to make it clear that this is not a channel?
Should this be `@param {string} [options.source] cannot be ~source if it is not loaded?
Please move this to the base class `@JsonProperty`
(style) line over 80 characters
I think it would be better to name it `Date` for consistency with other parts of the upstream thread `int`s
Maybe we should keep the original pointer to make sure it is not `nil`?
" probably not required as `attr_value.required as `attr_value['string'] is None` probably not required as `attr_value['string'] == value` AFAIK, but I'm not sure about this.
I'd put this line inside the `role` method, and then call `link_hovered` inside the `hovered` method. It's just another variable, and I wouldn't call it inside `_now_focused._last_hovered_link`. Also, I think the line should be `hovered_hovered_hovered_link`. (We could also get rid of this line)
this is a bit odd to me... what is the problem here?
I don't think this class is necessary any more?
I think I can remove this
I'm not sure it should be `@type` or `$float` here.
This field does not seem to be used by anything. I think we should remove it.
This is a breaking change - it was just an issue. The new `AccessNode` is the name of the class, so I think it should just be `AbstractJavaNode`, as it is a breaking change.
I think it would be better to make this an abstract class, and add a new one. I think it can be done later in this PR if you have any suggestions.
This is the one that breaks backwards compatibility of this file.
This is no longer necessary. We should have a default value of `TDTWriter`.
Wondering if we should do a proper exception for this.
Can we get the string and not use it directly?
should we be setting this to `long` instead of `second`
Is it worth a `stdout`?
nit: it's not clear to me if the `api` param is not part of the `subscriptionId}/{resourceGroupName}/{id` (not the same as the `subscriptionId}/{resourceGroupName}/{id` param in the `Dynamically`)
Not required to be a fan of `obj` in `optimizer` module.
I'm not sure what it's supposed to do with a loop here -- we have a `.end()` function on a pointer.
If this is a new API, should we remove this line? We are not testing the old state, and not just using the old state.
This is a bit of an odd. What happens if I do `break c.acc == a {` ? Is it correct? I think the idea here is to always use `break` (and then `nil` in the case of `c`?
Why do we need ADIOS_HAVE_PHDF5 ? Is it possible to return `false` ?
I would like to add an expectation why these are plural (a string/value) and a hash string/value
This should be MAX_*, as its a part of "MAX-* file"
Is it not possible to move this down to the top?
UseLane is a good idea to use a VM VM here.
I don't think `iotex-proto` will ever be null. It's not in the package, so should be moved to `CMakeToolchain`
Is there a way to avoid this if-statement?
I think we can move this line to `add_setting :user_color` so that the specs pass the new functionality. I think it's just me and I'm not sure what this is about.
I think you can do `const` instead of hard coded it
I know this is the same as the existing code, but I guess that's the case?
Is this something we can do here or is it something that needs to be updated?
This is a change of behavior, but I think it is better to use a flag for this instead of a flag, and a test for this is more efficient.
`!current_group.groups.each` and `current_group.split_split_split_split_split` are not used anywhere else. The current query should always be `Optional[Optional[dict]` but we want to ensure that it is `Optional[dict]` as an argument to `nodes`, but I think it's fine for most of the time.
I think this should go in the "read_file" above, as the cache is used in other places.
Why are we adding these?
How did this work for the `QueryConverter`?
You can use a separate config interface: `go.uber.org/yarpc/peerlist/v2`
I think this log message needs a message to be logged. Better to be "No telemetry entry for: &Question for: %s"
Why are we using this class class class Windows and we don't use anything else here? The only reason we have to change the class Linux, is we don't want to use `.dll` in the config?
Doesn't this mean that the default value should be false?
This should be `static int int` to match the `jx` prefix.
why is this change required?
Can you make this "allAffectedNodeIDs"? That makes it less likely to happen when it's updated.
This is also used in the `process` key. Is this a problem in the baseclass and why was it not in the `env` key?
Maybe `//////` could be simplified to `// fully_formatted_lines`? It doesn't look like we're just using the fully formatted.
This class is no longer needed.
The parent is a string name so it is more precise to be consistent with what it is.
This should be moved back to the group as well.
This should be ` telemetryEnabled`, since the fix is no longer relevant.
I think that you need to implement an interface. I think it should be `m.Parameters.FirstOrDefault(p => p.Type == PrimaryType.TimeSpan) != null`. I think you'll have to fix the issue.
This is a good thing to check. I think it would be nice if we didn't have to check the context before running.
Can `config.notarize` be set to `true`?
Do we still need `app.SiteLocalSettingsPath`?
This is a duplicate of the other ones we use in `pkg/config`.
this should only return if `config` is nil
Can we put this in a new file instead, so that it's more obvious what it does?
this is going to work for other tests as above we have some sort of check that the ConnectConnection is set
Just noticed that, the default defaults are always valid.
The `Join` suffix is not important here. The `Join` property should not be included in the test - at all, use a `genConfig` and the `genConfig` function for this.
Lint/UselessAssignment: Useless assignment to variable - file_generated.
@pgavlin Do you understand why we need to remove this? Is that an actual change?
I think this is not the right approach...
What's the purpose of this change?
This error should probably be logged after `errors`, and `fmt` will be invoked by `errors`.
Should we make this an columns instead of a particular particular columns? Like `definition: 90`
Doesn't it make sense to return an error and then call `wg.WithContext()` on `errgroup`?
This is not really needed any more? `fragAlignRatio` is not a string value, so the string value is a `IsMinimum`.
Maybe `host.get('localhost')` instead of `return False`?
This test is testing the `@Restricted(FaviconNotNotImplemented);` method
I think this will not work as expected as the last time `reliable.Read` is set.
This `hasArray` method can return null, no need for `if`
This is incorrect. You can use `in StreamReference` directly.
I think it should be `verdaccio/logo` as the other one you are using in the other code.
These were not necessary in the core or in the core package.
This should be a `boolean` statement.
This should be a constant?
I think this is not the correct way to handle the case when `debuggerAddress.Iscdp/` or `debuggerAddress.Iscdp/`. The message here is pretty annoying.
I'm guessing this is an anti-pattern?
Is there a better way to make it clear the actual time it is used?
Line is too long. [83/80]
The two "item" should go inside the conditional expression.
I think the `isConnected` thing should be fine here.
I assume this was moved to the GetddsKeyGetter interface?
Is the line above here correct? This may cause some confusion. The `HiveClient_JNI::deleteInstance` is a boolean
@urso I've been trying to understand why we can't remove `writeConcern` from the PR I think.
I wonder, is this the right thing to do if instead of a String, if a String is not the String, if it doesn't allow anything other than that `destroySender` to be an `ID` object?
Can we put the "Moved" in a constant somewhere? I'm wondering if it's a good thing to do, but it might be better to add an option to the interface like `SecurityGroupHandler` or something like this.
the way I can pass a `PublicLink` object to prevent any of these methods from making it clear that the `fileName` is a `common.IsfileName` object?
I have no idea what this was supposed to happen, and if it was a bug (i'm not sure this is correct, but it looks good). I'd expect it to have a more informative error message (e.g. `req-indexing`)
nit: can you rename it to `get characters`? that's a bit confusing
We need to make sure it's the correct service for ServiceHeader
I think it would be good to keep track of `/fs/venv/dev_called/path.go` if the serviceDirOnHost[0].schema.go`
Why is this change in this PR?
I'm not sure we should raise an exception here, since it is not really specific to the exception and it might not be the case.
This function seems unused?
I think this could be moved to the `else` block as well.
this is weird. you are passing `this.Extensions.ContainsKey("nextMethodName")` to it, but this code is repeated twice in a bunch of other places, right?
I believe this is the only real change I will keep
This is unrelated to this PR. Why is it changed? Why is it changed from a hash instead of in a hash?
Can we remove this `defer` in the `before_save` case?
I don't think we need this file. We already had the same functionality with the old version.
this looks like a function that does nothing (in case it's not before)
The problem with this is that we have to import all the scapy imports.
Maybe we should add a `TODO` here for the update case? Or maybe we could just remove all the information from `update` to `current_file`?
Could it be an opaque string or something like that? I think it's more accurate to say `icmpType` because the type is `int` and `L` is equal.
This code is in `HttpStatusCode.OK`. Is this a breaking change ?
Is it possible for those to happen in the `baseViewportHeight`? If not, we could use the actual `define` helper to avoid any confusion.
I don't think you have an `url` here. The `a` part is the best choice here.
This needs to be an overload for `reporter_class`. We don't want people to use `reporter.info`.
This file needs reverting
Please use `Union` instead of `Union` since the `postOpResourceModels` function can be `null` by default.
These two lines are the same.
Is it possible for these to have a `-1` as a parameter to avoid a change to the next `-1`?
The assert will be printed after the null check check below. I think the assert should be thrown when the error happens, as otherwise the error message is not thrown.
I'd like to have a `UnfinishedExecutions` function to fetch the Flows off the function. This can cause confusion with other options.
Rails/InverseOf: Specify an :inverse_of option.
Please move this to `src/server/client.js`
can this be in another PR?
why not call `Query` like we did for this?
If we're still going to have to pass this on, we might need to use `c.dirtyBcache()` to avoid the need for `c.config` here.
This is a bit unrelated to the PR - can this be done in a followup PR?
why are you usingSECTION("") here?
Could we just use `setMany` here?
is this needed ?
Should this be configurable?
What's the meaning of the `Value`? Can we get the type from the config to this column? I would like to see if this can be changed to `Value` instead of `Value` as the default.
The test is failing because of this change, but the test was not passing yet.
I think we should not check if the file exists anymore.
I think the `ERROR` should be removed.
I wonder if we still have a good reason to use `specifying` at the end of the file?
I think you can remove this?
speech import is unused
This has to be renamed, so that we are not breaking any other options if we can make it `nessie.Context` or `nessie.Context`'s index
i would have passed the value of `taskQueueName` here, but it seems a bit strange to have both the value and the default `MinTaskID`
You can remove the todo, as it is used by some such that some of the other things were using that.
Would it be safer to keep all of these if-clause together in one line?
If it is only for instr_t then we should just check if instr_t is null or not. I'll let the user to avoid this.
@smarterclayton I'm not sure this one is right either. Is there a reason you changed from 0077 to (0777) to (0777) to (0777) so that the error message is correct?
Why change the other way around? The `ByteCount` variable is now just unused and the same as the `ByteCount` parameter.
@cramforce would you mind changing all of these to `!`? Then you can just remove `!` from here and remove `!` from line 269 below.
I would not add this in the `setup.py` file as it's only used in some `build-system/common/server` module.
FileSystemTarget is not used anywhere else, this import should be removed.
Why not just do `(thread_id_t != null);` instead of casting the `(int32_t)`?
This is a bit ugly... can we make it a const.
@jmhooper @smarterclayton do you have a better suggestion on this?
This can just be removed.
I thought you mentioned that the iterator can never be empty, right?
this is the wrong place to do this
This should be `Key(name, password, password, key)`
You could use `self.methods = None` to avoid this specific thing by replacing the `Package Entity`.
Why are these added?
The only thing that would be great! Maybe we need to make it configurable if needed? I'd prefer if you'd do it in a separate issue instead.
Do we need to keep this and keep the test failing because it's no longer supported, so we can keep it as is if we remove it from here?
The `version` here looks wrong.
use a guard clause instead of unless?
Nit: remove useless useless changes
I would prefer to use `fs.sync` here, and `30` is more descriptive.
Why not `W3C_MAXIMIZE_WINDOW`?
This is needed to match what's the default settings we need. The `Ordering::Random` is used to determine whether the source code is enabled or not.
Shouldn't this only be set to nil in case case? This seems redundant?
The issue you made with the timeout of the timeout was that the previous call was only incremented once in the first place. This was previously the issue we did with the timeout, but the previous call was only passing in the original timeout, so it was still the case.
this needs to be done in `IF_ARM`
Shouldn't we use `maxResults` here?
Is this file still needed?
I think this should not be `except`, but it is more of a `assert True` (which is a `except`)
`urlencoded` should start from `url.js` (or similar)
Can this flag be removed from the flag?
I am not sure if this will work as is since this is a change in the test. I think the tests are failing because it's ok now :)
why did you remove the public?
Can we use `err = fmt.Errorf("%s", r)` for logging here, and below?
Nit: For `pre-commit` it'd be nice to avoid the imported at the end, as `--keep-json` will return the `--keep-json` flag and if not, that could be an error.
Should the error message also be logged? If not please use the same error message as the other error message
The `Register._UNSET_NAMESPACE` suffix seems a bit strange to me. What about a constant like `Register._UNSET_NAMESPACE_OF_NAMESPACE`
I would say "Error iterating over item with "+
why not just `minify`?
provider has nothing to do with this PR.
Why the change here?
this isn't used anywhere. It was already a part of the package, so it was a simple package
Is there a reason for using a property?
This should be removed.
I'd keep this line but add a space after it. Thanks!
I think it is better to check if `getAuthenticationPublicKeyFile` is an instance of `warn` (we don't allow for a single `PublicKey.toString()`, we don't have to check if we have any of the `warn`s).
Can we add a link to this and just call the `omitempty` in the `before` section so they are all added in the final namespace?
Please, use the new parameter to indicate the nullability of the `to`, or the `err` of the type checking. This will make it easier to read without any non nullability of `AbstractAbstractClient`s
The namespace doesn't match the code.
I don't know, but the idea here is to add this to `make doc` to the message to `make doc`?
I think `linter` is a little too short and has to be a dependency with `toto`. It's a little confusing because we're only using it for a single file, so I don't see a need for that.
The variable name `constructor` could be changed to `JsonPrinter` or `JsonPrinter.jsonAsDatasetDto` but this is a more clear name.
"If the provided key is none of those"
Is this type name ever used ?
can you also update the following one with `entry[entry]`
It seems that this should be in a separate PR, not here.
This was a bug, right?
This is the one in the `12.25rem` file. Why are we removing the prefix from `/` here. The other way is to use the default value of `font-size` instead of `1.25rem`. The same is for the other `12.25rem` file.
I was wondering why `retrying` and `sendgrid` are changed here. I was not able to change it here but it was added to `pylint.util` that is passing `value` in.
Isn't `Vector ArrayList` always an `Seq` here? Is it necessary for the typecasting a List?
nit: remove this space?
I think this file is not not empty, the copyright header of the copyright header is not empty. The copyright header is empty, so it should be empty.
Why is the `getBitMask` necessary?
AsReadOnly() does not return ReadOnlyPubs and ReadOnlyPubs. It is a little hard to read, but it seems a little odd. Maybe it should be an `#AsReadOnly`?
I think this needs the type hint
I would say "incorrect mode is not supported" here, and in the process, you can remove the "issue" part of this file if it doesn't have `blob-type-header.Open`
why is `initCodeTransformer` a param now?
Please update this to be a member variable with a member variable.
This is not needed, we can just remove the Clang flag altogether.
I think we should just return `summary` here instead
I don't get why this class is necessary. I don't see the point in the PR
I'd prefer if we keep these values to `reasonDomainVerified`, and change this to `str(Object(Error)`.
This is just for clarity and probably not needed in tests.
You can just call this one environment, and you don't want to be able to get the actual error name.
this should be `bool(false)`
Is there a chance we could just do: ``` ```java if (dataManifests == null) { wpManifests { wpManifests = ManifestContent.DATA }
It seems that we need to add a new `cappedNumHits` property to the `Checker` class as this method can either be used in all the other places.
Is antrea checked that this is antrea in our tests?
Can we have a `ActivitySource` attribute instead of repeating it as the default one?
@steveharter - I think this should also be a gas price to the correct data, no?
Should this be `processTestRunAbort`?
The message will never be `Exception` in this case. The exception message should be the Exception, but not the `e` as the other exception message should be the same as the message in `Exception`.
is there some global constant for the theme themes? if not, would be good to have it in the URL too
I don't think this will work for you. We need to support more than hooks and thus.
@QilongTang @QilongTang I made the way to make the change from `zip` to `Reformat`. The extra new `netmask` class can be used in many other places, is it necessary to use `zip` in this file?
nit: move to L33.
The `encode` variable is redundant, since you have used `_` in `cpp-field-case` in `cpp-*`
This is the new error case, we should not be using the file.
the changes in this file are all unrelated to the PRs
It's possible that this is only for non-distributed case as the default `exit` will be 0. Maybe we don't need to use it here?
`the Main actor must a single Env` -> `the Main actor must be single Env`
Should we be using the existing Z and `zk-read` here? This seems a bit redundant to me.
don't you need to change this?
Please move the TODO to alphabetical order
@atm-quentin this is what we really want to do if `checkStockNotEmpty` is set?
There is the `template` word here, is it really necessary?
The non-in code does not seem correct here. It does seem like it will be possible for `required_load_code` to have a non-in code.
This test was testing the problem.
Why is it an array type instead of type? The other part of the type is not really needed anymore.
These two constants are the same, but they are different to the ones in the config file. Should this be `configName`?
why this change?
I'm surprised you didn't use `%q` in the end of this, but the only thing I'm concerned about is that we don't actually have any clue about it.
Is this still needed?
Can you add a similar test for the new `l33` target in `init_exists()`?
This package is a `@return` for `hpl` (you can't really use it for all public methods).
I wonder if we should just use `os.path.join()` instead?
It should be `disolactSegmHead`.
It feels like we should just pass the whole `driver` here, and add a `return` to this one.
I don't know if the strong way would be to change that.
nit: we can probably just make this method `getImageWithID`, and have a method in this method that takes a `getImage`, `getImageWithID` which returns an serialized type of exception.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
we can probably remove this now
nit: you could use braces here
Rails/DynamicFindBy: Use find_by instead of dynamic find_by_blank.
Isn't this the default behavior, or just for the next step?
nit: you can remove this
I would have put it as an error message, because in the error message it should be "error: value"
I don't understand this. This is a good idea. The code should be the same as the above code.
`secrets-ssm-environment-variables` ? Shouldn't the name be `secrets-ssm-environment-variables` ?
I don't think so, I'll have to change all the tests we use. I would go without the old name of the package to be `protobuf`.
I'm pretty sure `this.getParent().getScene()` should go into dialog objects, but in `src/pure/annotations/annotations/auth` it should be registered to avoid the dialog class
Can you change this to "scikit-learn"
Is this not needed anymore?
Why is that removed? I think that we can keep it.
Can it only set the `googlesitekitUserData?` property if the connection isn't found?
This isn't a valid log. The reason is that if you move the exception above, that is it's not the log from the list.
Why did you choose to remove ` Flags defined in those class must be used with caution, and strictly reserved to experimental`?
Nit: please remove single quotes inBufferBuffer
I'm not sure if it's better to add a note that we could use the `key for account` and we could use a `Importedkey for account %s: \"%s\""` in the account.
This should use `\r\n` instead. The code will be easier to understand.
This is not correct, but you can remove the extra lines and remove the logic.
Layout/EmptyLinesAroundAttributeAccessor: Add an empty line after attribute accessor.
The `.match` returns if the `email` field is `None`.
The remoteService is not really part of the first two, right? The current way is not to set the first two, and not for the second two (or whatever it is).
Extra empty line detected at block body beginning.
This is now deprecated, right?
This function is only called in one place, I'd prefer if we renamed it to eslint-disable jsdoc. It's a bit odd since it's very specific. What I'm thinking about this in the future: 1. I am pretty sure if there are any changes like this, and if there are two things there may be other things we need to use in the future to change from eslint-disable jsdoc, as we do for most of the other things we could just use the version number 2. What do you think?
I think we should use `err.NextWithContext()` here, no?
why not just have `GetAddressDetails` and then do this in the `exe.GetBlkOrActResponse` call?
Could you please add a default? The `session.Set` property is always going to be used if needed.
Is this a bug fix?
I think we should also check that the claimJWT is not nil
Please add a license header here.
Is it possible to do a `RecipeReply_Struct` with a `*` instead of a `recipe_id`? If so, we can do that.
This line is not necessary.
If you remove the exception, this exception isn't needed.
should we make sure the controller controller gets passed along as well?
This wouldn't be needed since `CacheChange_t` already uses it in `ments.h`.
this stream can be removed as well?
Nitpick: This one is not in our style, but it's not in our style
Please add the `#if`
Curious, why this change?
It might be worth adding an `Preconditions.checkState` that checks if the function is called `referral_code`, then we'll have to make sure we get a non-trivial `Preconditions.checkState` on it.
do we ever pass `DefaultHttpContext` as the default?
@DanVanAtta Shouldn't these two asserts be removed? Should they have been changed to use assert?
What if I just noticed this correctly? The size is already the actual `MessageDefinition` attribute so the `lru-cache-decorating-method` attribute is not always the same (or some other one)
The album_msid parameter is already renamed, so it's renamed to album_msid.
Can we call this `Add` and just call it `i`?
It seems like this could be `isHiddenWithCSS`
I'd add the `=` to this line, too.
this should happen before `HttpURLConnection.HTTP_BAD_REQUEST`.
I don't think this change is necessary?
This migration doesn't belong here, I'd remove it from here.
why do we need to change this? Is it just a mistake ?
I think we don't need to expose the new module here, it can be removed.
why is this in this PR?
I am assuming this is not needed? Seems like it would just be a warning?
@deads2k why not do this in a `setUp`?
it seems weird to keep these constants up in the `#ifdef wait_hosts_on` block.
What is the difference between this and `ConcurrentDictionary` above? Why is `descriptionTags` a `HeaderTags`?
I think a better name would be `osFamilyStr`
This is a fix. We can't change this since you're using the parent object in this way.
If it's not a request, we should skip the client. It should not be here. The next line should be `if (config.Endpoint != nil && req.Config.Endpoint != nil)`
I think this test is still not right. We should change the `createElement` test to be sure that the error is being raised.
Can we add a TODO to make sure `make fmt` is only called for `init` values? This is the only place where I'm seeing a change from the code base.
Shouldn't `ExpectedCondition.contains(text);` also be `null` for `ExpectedCondition`? The code that is `null` is `null`.
Can you add a link to the new `apitype` tag so that we don't have to update PCI?
I think it's better to use a helper function here
you could also get rid of this
Can you use `Scratch.isNullOrEmpty` to save the actual node from the list?
I don't see why these are being used. Can we just use the constants?
Why we don't just do `OSError` here?
Is this not needed anymore?
is this needed?
Aren't the case that self._last_status is not present on theprogress?
I don't understand the purpose for this method. I am not sure it is actually the case anymore.
How about adding a dollarf and reconfigure the whole thing.
I think this was a typo, should be fixed
It seems `FilelinkType` doesn't have any public APIs for it, and it doesn't need it.
revert this or please fix the doc
I think I'd prefer if this was called "name" instead of "name" and "name" or "name" for all of them.
This will be removed if you have a `FirstN` node (e.g. `irrors_N=None`).
Can the name be renamed to `getParent`.
I know this is already on the `padding` but this has nothing to do with the others, so could just be `padding: nil`...
nit: remove empty line here
Should this really be a `k`/`k`/`k`/`k`/`k`/`k`/`k`/`k`/`k`/`k`/`k`/`k`/`k`/`k`/`k`/`k`/`k`/`/`/`
This is going to import `slow/slow` but it is the `slow` package.
Line is too long. [103/80]
AccountState is a lot of work in python 3.6+. Should we just return the min of the min of the min.1 and use it directly in the code base?
Does this mean we don't have to have a `CONFIG_approval_notice` check for `CONFIG_approval_notice`? We could have a simple util that requires a `CONFIG_approval` to return `nil` if the approval is `false`.
I don't quite like how the "saleor" value is used. In case there's an error, we can use the "find RPC" constant. But I don't have better ideas for the case where this is a little bit of a few things like "deleteing" in a "tracer" - it is not really what we need.
I guess we can change the `icon` field to be `VALUE` instead of `VALUE` as well.
Do we need a migration? Can't we just name it `src/server/auth-server.js`?
this does not look right to me. I'm guessing it's not called anywhere else?
nit: remove
The `return` can probably be removed.
we should rename `toName` to `[]int` to make it clear this is only used for significant compatibility.
It seems this should be used here.
I don't see why this is needed.
this should be `""` right?
This is an example where we want to use `self.record` in the code.
I think this is not the right place for this.
Can you move this to a new constant, then the same as the one used for other regressions?
Why do we need `-c` here? Is it a bug fix, or is it just a bug?
What are these values for? Are they the only use of `run_on_main()`?
I am not sure how to use "common" the key name, because it is an instance method, and is not a big deal. If you don't need to add a `keys`, you could replace the dimension with a boolean
Please, add an issue with `MapRouter()` to the code block.
Why do you need to filter on a `check_action` function instead of calling the function directly? The `get_instance` function is called on a data structure and the `if` statement in the `_if` function does not return an error.
The same problem here. The https is just a `HttpProtocols.Http2`.
I would suggest that it can be `_find_elements(driver, True)` instead of `object` (just making sure that the type doesn't contain a tuple)?
@tnozicka this should be import blank and blank modules
Doesn't this mean that the `isEmpty()` returns a `null`?
Just for my information, are we planning to use the constants for these as well?
I think that we should use the `io.prestosql.plugin.plugin.plugin.plugin_plugin_*` function instead of the `io.prestosql.plugin.plugin.plugin.plugin.plugin_*` function to avoid a specific call.
You don't need to modify the array list if you are in the array array you have the same value as the array array you've created in the function `onViewCreated`
Is it possible to use `-1` instead of `-2`?
This is the only way I could add a `describe(attribute)` property to `Symbol`. It would look cleaner, but I would like it to avoid a `req.parse` and the `Field`.
This test doesn't work anymore? I don't know how to fix this.
Maybe a bit surprising but why does this work? I thought it would return the same object as the controller, but if it were, then we would return an error, and then if it is, then we would return an error, we would return an error.
Can we have a more direct test for this? For now, we need to keep the ` Flag` setting in the `DataflowClient` and pass in `grpc` to the `DataflowClient` table.
I would make this `list` (and then call it `list_to_Q`, maybe something else, like `list_to_Q`).
I am not sure we care about `pathlib` here and below - `pathlib` is a path in Cesium as `encoding_arg` - but `encoding_arg` is the name we're passing in.
recovery is not used anymore, remove.
`chan interface` is a `doneChan` object, so I don't think it can work. It looks like this is a `doneChan` object. It feels like we should be able to close the done channel if we want to close it.
What if we called `defer` instead of `defer` since it's a constant?
Maybe we should keep these for now?
I thought the logic was broken here. The first one is the last one.
This will always trigger if `blobExists == false` in `scipy.js`, and then we will get rid of it. `Info == false` will throw if it is a blobExists.
You're using the same pattern here, but you're not using it anywhere. Is it a problem?
I guess this should be `Object`.
Seems to me like the code was missing.
do we need this special value? I think it will be more obvious that we're passing in the full full segments to the conftest. Because it's not the case anymore (which can be the case for the user to see what is provided with the CAST).
this file should probably be removed
Need this file, no reason to include it
@jaeilepp is this a breaking change for a reason?
This looks like something that should be final.
@KonajuGames - How does the tests work for you?
This should be `mset.mirror != nil {mset.mu.Unlock()}` since `mirror` is not nil, but it should never be nil if the `if` condition is empty
Does this cause any regression?
We need to update the server to be sure we are not not using this
Maybe it should be `has_ ful_lazy` here instead? That way we only get one element with `<%=j render partial: 'proposals/details/activity')`
I would prefer to have it explicitly a single `__version__`
This is the only change that fixes the issue, since `len` returns 0 if it's `nil` (in case someone sets `len(cnb) > 0`. I think it's ok to replace the logic here.
I think the `type` is unnecessary since we already use it in `close()`?
Can you please go in the next line? It's not a big issue, but it is in my mind for a test, and I'd go in another PR, I'm not opposed to adding new lines to this commit, as the test is actually not going to make it so it doesn't have the best idea of not to reconfigure it.
@citibeth This change was not correct, if you want a procComponents.queue_() then you need to use the proc view below.
I think it may be a good idea to name this `free_setting` so if this is not a user-facing capability (and more important).
Maybe it would be nice to have a `str` argument here.
why not use the standard standard `\` prefix?
I believe the lint error is failing because of some weird import statement.
This is wrong. It will be more than an auto-formatter in that case. In this case we can always use it to check for nil and always have no exit if no `stopped`, so that the `n` and `n` is being checked before.
Not related to your change, but why not use `future_chainAddEdges` ?
this seems unused
do you mean "ssm-parameter-store" and not "ssm-parameter-store". Saves an actual class or something like that.
OtlpMetricsExporter() is called from non-OtlpMetricsExporter() method.
This needs to be moved to line 152 as well.
The BeakerPuppet and _index_ entity is the only way we can keep the config, I think
Can you also remove this `dispatcher.beforeClickOn` method and use `dispatcher.afterClickOnWith(true)` ?
Do we still need the `if` here? Why do we only allow `self.id`? If we have the if statement above the else statement below, we don't need it in the `else` statement.
I'd rather move this interface to some other file and make it final.
The same here. We have `datatype` and `multi`.
why do we check if the answer is not present ?
This needs to be split across multiple lines.
These can all be `<%s_PARSE_LIFELEECHCHANCE=` since they are not part of the list anymore
I think the naming should be `allowedOrigins`, `allowedMethods` and `allowedMethods`
Please revert this file.
why change this from table to table here? why not just change the name of the table as it is used in table name?
This will fail when CameraResultType != NULL
please leave this as it was before.
I would prefer a single method in the `mail_to` helper. This method can either be private or private (e.g. `I18n.t('dashboard.show.contact_your_mentor')` or `I18n.t('dashboard.show.STST_mentor')`) or `mail_to`
I don't understand this change. This change is required by the nullability issue.
This test is just testing that the `can safely be reset` expectation is true.
I would prefer to keep these as factory methods (e.g. `FSFS` instead of `FSFS`).
This should be split across multiple lines. The rest of the code is really what this is doing.
You should use `assert isinstance` instead to avoid using `assertEquals()` for all these
This should be reverted
I think this would fit in one line?
I'm not sure about this. I don't know if the `o` should be used.
Is this supposed to be a pointer?
Should this be `constnetwork.port () != system.nodes[1]->network.port`?
I think this should be `tabular.dataverse`.
I'm not quite sure how this fix could have been done. The call site can only be called if the `restore` thread exists. If it's only for the result thread, why is the call site not here at all?
Why is this change needed?
@rhatdan @tnoopovov is this a typo?
I don't think we need an index here, it is actually an error and should be checked outside the loop
This check is redundant as we do in `throw new ...`, we should probably throw an exception in here instead of throwing. I know we are not in this PR but it may be useful for us to do it now.
This line of code is not correct. We cast it to `inputs`. This is a small and a pretty simple function.
Is this the right approach? Or is it really just for readability? Also, do we need a check here that `object_based_api` is not `null`?
This seems like it should be an error, right?
If it's `Enum<T>`, this should probably be `char`.
I am not sure that this should be done via `node.xml` instead, right?
You are using ParamView and no copyrights. Also this interface is only used by ParamView, so I would just add a description to this interface.
`onevent` should go before `stage` (and `nil` in `stage-uuid`) to avoid the double `stage-uuid` case
I think we can just do Duration.io.NewConn, .... That will make it a little more obvious.
I think we need the 100ms here
I wonder if we should add a `non_pending.map(&: [])` here so it doesn't actually make sense for the result?
Had to get this on purpose?
This will change the output of `SIGKILL` for GracefulShutdown(), but it was not yet used. It's an error.
Is this the only key that requires an empty hash? If so, I'd suggest not removing any hash, but just using `_('mobile')` in the hash will make more sense.
Hmmmm, this is a bit unusual here, can we put the list in an array?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I'd put this in a `namespace ...` statement so we can just put this in a `using System` block and avoid the namespace if needed.
nit: can we get rid of this `poS` parameter from `pozParser` to `poM_` in the future?
This seems to be the same as above. I think the `cmdexe` should be `true`?
Why remove this?
This file is not used.
I'm wondering if this should be called "to_xs-12" instead of "to_xs-6".
This function is called only on line 535 and should be called from reloadCache() I think.
should the whole `QueryMol` variable be removed?
Is this what you want? Or should this be the default, and not the default?
Extra empty line detected at method body end.
Should this be removed ?
Maybe it will be better if you pass a `Zero_count` to the model and set an integer value to the model, and pass the parameters to the model and call it without having to change a "count" and pass it to the model directly and use it here?
Can we put this on a finally block, or just inline it in the function?
What's the difference between the str and the rest of the function?
You're not using a mock for this anymore
This was the only place I'm using this. I don't think we should change this.
Wouldn't this make the table table itself not be setting table? That would be a bit more readable.
This check is redundant now.
Better to use Params as the parameter name and make it an optional parameter.
No longer used.
I'd be inclined to remove this, too.
Shouldn't this be a `executionUtils.toJSON(flow.toObject())` instead?
why do you change this? Don't you think this will work for `icon-ico` to `model.icon`?
This is not needed as the exception should be logged in the exception.
I am not entirely sure we should do this as an names of the names? I would like to see the name of the list of names. Is there any better I'm not sure if `names` is the right name?
The default here should be `mapperRICS_MODE_COLUMN_CONF_PREFIX`.
@matt-gardner Can you review the changes in this file if you have your editor?
This can just be removed, no need to import its own dependency
Please put these `else` statements before the `else` blocks.
@bartonjs - I think we should keep the test name, otherwise the test name isn't very helpful. But it should be good to go.
missing parenthesis around the `Args` operator.
Wouldn't it be better to use the helper function?
Do you need to test this?
Should we move this to `NewArgumentServiceTracking`?
It's better to use `&&` here instead of `&` and `&`
Nit, but `go-filecoin-project/types` is a bit weird. We have to use `go-ipfs-files` for `filecoin-prefs-files`.
This can be removed since this is an unrelated change.
`java` is a bit of an anti-pattern, can we move the import to `sun.java` ?
This is the `OnStart` method that will call `Start` on the `ctx` span.
I wonder if we should just make this `cvr.Name`. I'd rather avoid the call and just add all the `UpdateSnapshotInfo` in the name.
@TomSweeney Do we care about `DefaultLogMessageRateLimit`? Should we consider doing the same for `DefaultLogMessage`?
I'm not sure we should assert that the error message is not run correctly.
Overseas -> zverseas
The `reverse_heap` was moved out of here since there was an issue around that that is not needed.
Is `ClientSessionState` always called from `clientSessionState`, so we can remove it from `clientSessionState`? Would be nice if this is the case
why only need to be in `overflowp.client`?
@matt-gardner How did you find such a difference?
Please keep the import here, just as we use them other modules.
How come there was an issue with this?
Can we add a new key here, and move the logic above `WorkloadIdentityStatus()` so it doesn't need `aws.Work` as part of this PR?
Nitpick: we usually use `provoking_vertex_state_ci->provokingVertexLast`
This is a little weird, it does not have anything to do with this PR, I think.
What does this `filters` group actually mean?
I think this test is not needed after the changes in the tests. We'll remove it from the other tests.
I'm surprised there were a few cases where we concat and not concat?
the canonical factory should be used here as well.
@mmaxim could you please describe the reasoning behind this change?
I think we can just remove this and `provider.AccountExists(_address1).Should().BeFalse()`
this should throw exception since otherwise the code won't break
this test case doesn't work any more?
if `interpreters` does not have the same name, maybe we could just make this `interpreters[str]`?
Remove this assert (self->loadstate == OSTREE_SYSROOT_LOAD_STATE_LOADED)
I don't understand this change.
I believe this method is the actual way to get the `meta` from the `meta` from the `get_meta`. If this method is called only in the `meta()` method, it can get called from the `get_meta()` method.
This is not correct, we should be able to pass the context through to `SchemaInfer` and then use that in `SchemaInfer.create` directly. (I know the logic is important.)
You can do `{undefined }` so that the properties are set before the property has the property, but the value of a `nil` does not require the variable.
Since these are the same in the past, we might want to remove these `@unresolved_targets[target.name] = { 'name' => target.name }`
I believe this line will break some of the PEP 257 tests
This is just a small thing: why is the `values` removed?
Is it needed for the new `passesRestrictions` property?
Why the type is changed?
This line is not necessary because the `render` function returns a non-blocking value, but it doesn't have the value passed in.
This one is a public getter.
Why this file change? Is there a reason to use it for the others?
This isn't used.
why does this change? This is the only way to go in a single PR?
I'm not a fan of this. `auto targetFile = folly::stringPrintf("%s/%s", newPath,`
Can we add a new method `fromSnapshotId` and a `snapshotId` in the `buildIds` method to handle it and return null if there is no available available and the `snapshotId` is present in the constructor?
I think `$this->getHelpText` and `$this->getHelpText` can be set to `true` and the `isset` should never be present.
I think you could just delete the `output_stream` variable.
This doesn't seem necessary
Do we want to keep these for testing?
This should be a `Collection`. It's not needed.
I think `PmdRuleTst` class should probably be renamed to `sourceforge.pmd.*` or similar.
This should probably be in `pkg/serializers/install` instead.
I'm not sure I like `memQuotaRatio`... but it's not a big deal though...
is this the only place we want to remove this?
Why not use `Math.32`?
The type hint could be improved to have more contextal types.
Why not use an enum here?
the `Platform string` should be removed from here since we are in the same folder already in the AppRunnerInstanceConfig
I am not sure this is the correct way to fix this. The only difference is we are using `<%= connect.test.options.port %>/test/integration/api/external/`. We should be using the api path as well.
Why is this not `ac.SigningKeys`?
I would not add to the sleep in these tests. We are going to remove the sleep at the top of the file.
shouldn't the second part of that `if` condition be removed from the `elseif` blocks?
`from boto.compat import json, six,`
This is a breaking change, but the `JSON` method still sets the property on the base interface to `JSON`. Could you please elaborate on why this change is needed?
Do we still need this? Is `file` always guaranteed to be `null` by default? Or should we just always have an error?
If you are going to add the extra space before the colon, this will make the code more general, like a `let` statement and a `let` statement?
this change seems unrelated?
I would rename this one to something more descriptive like `assertTestconsitInterface` or something.
This is the wrong place for this.
I believe `cognitive`. The same is for `DefaultContext`. I don't see any reason for us to have it as the last argument.
I think this is a good change and the only place where we should be using it is in the code. I don't think this is a problem, but if it's indeed better I'd prefer using another method `getParent` and `getParent`. I am not sure about how to use this in the code so I'm fine with the change.
What is this? When should it be a namespace?
can we have a `visor` for this?
Can we add a spec for this and use `selectCell` here too?
why not put `ZeroGasPrice` object in parent?
Can we use `const` instead?
Can you add a default for this value `true` to avoid ambiguity?
I would prefer the previous behavior to store the notification for all the other types. This way it can be used directly in the config file and the new configuration can be used to pass the notification and the configuration will be ignored from the configuration. The new behavior will break the old behavior if we don't have to.
This was the only place where I used this, but should it have been moved to the `service/api/v1` package?
This would break if there is a `pre-existing` flag.
`_register` is a little vague. Is the condition necessary here? I thought this was the code that was added added, but was it intentionally left in from the `register_TYPE`?
the new line here was wrong, since the new line is removed in this class
Why are we using `*` here instead of `*`?
I don't think you can remove this because it doesn't do anything.
`@author Clément Fournier}` ?
Maybe it would be better to name it "page_page"
Why does this need to be a public field? Isn't there a default implementation in place and we can just remove that method?
I think we don't need `# `attr_value['required_value'] is not None` (or any any other types of `attr_value['string'] == value`). I think you want to raise an error here.
Should this be `addons` or `addons` instead of `addon`? It would be better to add it into `addons.h`
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
this is a bit of an unrelated change. I am fine to leave it for now, but it might be better to add a `...` variable here to indicate that it is a `null` string.
Is the `Symbol` variable necessary?
why not just `lock.unlock(else);` ?
Does it make sense to get here to avoid warehouse? If not, can we add a TODO.
@normanmaurer - I think this was the reason why this was added here (which is it is a no-op before)
do you really need this? since the action is used in `new` in `newStart()` in `newStart()`, it seems like `this.get('store')` will return a `roles` and then a `roles.roles = roles`.
`uploadmarks` is not needed if the landing is empty. `var role = node.getAttribute('role') !== 'banner';` should work.
this is not right. It would be better to add a new method in the context of the method that does the non-null.
This seems like a breaking change
why did you change this import?
We're not really sure about the "token" message anymore... it is probably better to just say "unless we get an invalid number of segments"
This should be `repo.stored.gradle`
We may want to consider the number of bytes using the `source.iceberg` (i.e. not the number of components) in the future. Would we want to add a `iceberg.doable` property to the `source`?
I assume these are necessary
I think you can remove the `AWS IAM` variable now.
Does this work on all the background?
@lannka I think we'll need a proper flag for compile in the context of the option, as it is already the case. This way it will also be removed from the lower level of compile in the option.
This needs to be `mdmLoginServers != null`, too. If it's not null, the exception could be simplified to catch `mdmLoginServers`
This is an unrelated change, please revert
`debug` is used only in the context of the input, so this will be removed. Is it intentional?
A newline should probably go into a new line.
Maybe we should set the window via `AWS_BOUND_SA_SIGNING_KEY` and make the default set in the AWS AWS mode?
Is it possible to have a dal_backend/primitives/blas.h file here?
This could use `nano::system system::pub_key` and `nano::raw_key`. This is the correct solution (i.e. that we do).
@matt-gardner I think this should be `ignoreUndefined[false]`. I think it should be `false` (or `ignoreUndefined[false)]`.
I think we should catch anything from logout too.
is it ok to call this?
Dont forget about this.
Can we put this into a constant in the test?
Is this still needed because it is now in `/`? (just to understand why this was there in `new`)
why did you remove the `docstore` tag? Are you sure it is the same?
Same as above. We need to add `Report` here.
Why did we change this?
This seems like a reasonable error to me. I think it would be better if we explicitly return the accountn object and not just return the header if the accountn object exists.
Use nested module/class definitions instead of compact style.
I don't think this is the right fix. Can you explain?
Please don't use parentheses around the condition of an if.<br>Use && instead of and.
Maybe we should add the full name?
This test should go in the `testing.T` file as well
I think you should just make `http3` be `ctx.protocol_selector.http3` and then use that variable.
Is `Object.is` a valid value? It will return `false` if we don't get to `false`.
I doubt this is a bug fix. We should probably have this be a separate patch or something.
Can we remove this parameter?
I'm not sure if this should be `static const` - it is a `AtomicInteger.filter` and doesn't work as expected.
This class was moved to RSpec's point and I'm not sure if there is a better way.
Why not just change the signature of createClient to `IssuerAccount` here?
This is probably wrong, the function is already called in `buildCallback`.
This is only used in the `#ifdef` statement.
This is still used by some tests.
we should rename it to `CultureInfo.InvariantCulture`.
This should be `HttpServerErrorStatuses`
I don't see any value in checking for the value "true" is the default. I would expect this value to fail and the default is not specified, but it's also just for the configuration.
What happens now when you don't have null? Should this be `null`?
I'm thinking that it doesn't hurt to call simple_test directly, because we have access to each other, and we should be able to use that method directly in the future and that's not the best way to go.
Maybe this should default to false, since `default_attributes` is a verb.
What is the reason for this change?
Not sure how this is supposed to be.
I think we should not have an `if` here at all, because the `if` can be null.
Why do we still need `schema version` here?
This is not related to the PR, but I wonder if it is possible that the version is not not versionable? I think it would be more appropriate if a version is not versionable then a version with versionable.
`return aria == 'aria-hidden'` (or the node).hasAttribute(aria)
We should probably also check if the saved search is set before calling `click_button 'for_admin').
I guess we can just use _currentProcessMachineName and the _currentProcessId as the field name to be consistent with the other fields. This is how we want to use a different field name, but for some platforms we'll have to change the field name to have _currentProcessMachineName as the field name. But we can consider the field name as we use elsewhere in the `modules.json`. It should make this consistent with how this is used (and also make use of the `process` name for other instances).
This is wrong (we need to pass the database to the `notifySocket` to get the `notifySocket`).
I think this has gotten a bit confusing since you're using ` ITEM_PARSE_COOLDOWNREDUCTION` instead.
This line will cause the line length of the `status` key in place.
The `$id` variable is used for every other request, so it is not necessary to have it on the `generatePath` method.
I think this method can return null.
This is for keeping compatibility with the background background key. Can you remove?
This is a bit weird, as in the default behavior, it should be `<=`. But it's a bit more like `(x, 6)`. What I'm thinking here is that if the value we're going to be different (and then the default), the user will be able to run `<=`. If we're going to use `<=` here then the default will not be `<=` because we are getting `>8` as `> 6`, which is the default.
Is it safe to remove `UpdateProjectSingleSignOnRequest` from `ModelProvider`?
You should not add this to the base class as it is used in base class
I don't think you need to add this repository as per the DB in the DB, you could do `belongs_to :shared: :shared: :shared: :ge == 0` to make the DB more consistent
Is this one needed?
would be better to pass in an array of powershell here
`toLowerCase()` should only be used here, so we can also delete the `role` call from here.
The `KeyError` test now has no meaning here
Maybe rename this to something more descriptive like `Nonce` or something.
This change is not correct, the secondary should be done in this PR
This seems to be a good approach to introduce a `RLock` function which has some performance hit. I guess there is a function we could just do it here.
nit: you can remove this now that you have the unit test for `.de` in this method
@deads2k this will be called on the existing indexers as well right?
we can also use the old constant here
What if we added a service? If we are not using the service, wouldn't that be enough?
Maybe I'm just thinking that it's better to pass `false` instead of `true` to avoid using the code in a follow-on?
This should be private as well.
Just a note for a quick note: it looks like the `compression=on` is a good example for how this fixes the issue.
Metrics/CyclomaticComplexity: Cyclomatic complexity for redis_cipher is too high. [7/6]<br>Metrics/PerceivedComplexity: Perceived complexity for redis_cipher is too high. [7/7]
I'm not sure if this is a good idea. The previous version was `setBackdrops`, but then if it was a user-defined one, then it was the only time it's set. The `getBackdrops` was the only time it was being used is used, so this would be the correct version as it's actually checking whether the result is the same.
Warning is not supported in any other way.
The method seems to not match the code, it is a static variable.
What's the effect? Why not just inline thecast?
I assume this is just for testing?
I don't think you need this
Should this be called `_onNvdaStartupComplete` ?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
What if it's a button? Does it work for any non-kubernetesed header files?
should the library contain `library` instead of `library.yaml`?
I think the indent is correct here - the indent is not correct (and it should be removed from the other two lines)
Maybe it's better to remove it from the list?
Hmm. I think we also need `RetryHandler = 0`.
I wonder if this should just be `registry.Register("service.secret")`
Is this change necessary?
i'm assuming we're changing this from `TestToken` to `OracleAPI`?
should we add one for the user?
Does it break the API?
Is there an advantage of this class that can't be used?
nit: use `.` instead of `.`
Is it worth logging on a switch? If not, just remove the capacity, and remove the return.
Use .empty() instead of .set_code .empty().
nit: you can remove this. If the other functions are created, then you won't need it as well.
Is this still needed in order to write more than once?
can we add a check to make sure the height is set?
I wonder if this should be an `else` block to avoid the NPE if `getKey == null` and we could get rid of the `getKey`.
`AdoNetExcludedTypes.Contains` is called only when `null` is `null` - can we add `null`?
Can we keep the imports and import `go fmt` and `go fmt`?
The fact that we're removing this field in place should be renamed to `stateToStatus` or something like that.
Is this used?
I'd say it's the link that is needed in the PR description. We could add the `Ririren` command that is set to true if it's true.
I'm not sure we should do this. In general, the cleanup() shouldn't be the default state. We should only start using the non-default case where we need to clean up. I think it should be safe to do the check for the cleanup() here. I think if we are going to start doing the check in the next two lines above this, we will get rid of the default state.
@deads2k i'm not sure why this is needed?
I think this should be just low-halfd, also.
this might be confusing when people are using the response, do we have to change this for?
then on line 554
Should `IsIntegrationEnabled` check be in `IsIntegrationEnabled`?
I think it should be an enum
nit (not your fault): this is an example in the original code. I think we should have the type system named "add/add/add"
ChaosImpl is used to see a nil error. Can we get the `i.ChaosImpl = (var _which_ID);` to be able to be set by `i.ChaosImpl` if we have `ck.Chaos`? This is the only place where we have the `ChaosImpl` set in `binaries`, and I think this would break the code if we use it. This way, we would not have to use the original `var _FILL` when we use it.
Is it possible, to keep this method consistent with the other one?
Code Climate says this is not tested.
I think this would be a bit clearer to see whether the return value is `true`.
Can't the `telemetryConfig` be made part of the configuration from `telemetryConfig.FilePath` instead?
Is it ok that this was changed at the end of the test?
I think you should start calling `pubsub` here. Also, why are we using the new API? Can we change the API of the API of the old API?
I would put these at the top of the file, and not in the manifest module.
I removed this because it's used by a few different tests.
Why this change?
just noticed that you are checking for theaddress here, why not just not pass in the function?
nit: can we call delete directly in the list?
should be "CMAKE_SOURCE_DIR"?
This should be `Admin.NewPath` instead.
I think these are actually separate, but I don't think the `SingleFileTimeout` function can be removed.
This should not be in `pkg/api/types.go` since it should already be in `pkg/api-server/api`.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think the previous version had these changes. I think we can remove them.
`!this[kIsMaster]`, is this necessary?
bolt_inventory does not support implementation that is set in tests. Is that intentional?
I guess this would work as intended, but is there a reason why we don't have the `Long` variable in the map instead of a String?
This is the only place where we need a `flux` property.
Should this be checked against `len!==0`? Also, if it is non-nullable it should just not be `!`
`TextView` is a property name, why not use a `DataString.IsNullOrEmpty()` instead?
Why do we need to do this check? Seems like we should at least log and log it?
How come these are just cosmetic changes?
This seems like a good candidate for `Reader` to be `nil` instead of `Reader`, to align with `Reader` and `Reader`.
We might want to make sure that the `handle_call` call is always the right thing to do here. This should be the correct thing to do for this check. We should be able to remove this `verbose` statement. Otherwise, if there is no error.
Can we avoid using `fill` instead of the module?
This should probably be `{`. Otherwise it'll be `nil`, no need to modify it.
`~chai` is a better name.
Why not use the `handleSingle` field directly here?
Add `String#toString()`
This field is getting removed. It should be added to the `_on_services` function.
I thought it was a little hard to understand but if you do something like "public types of pod-sync are deleted" then we should never be able to override the application. Is there any way to prevent it? It might be the case in any case if we want to keep any pod-sync user GC but not the other pod.
This will throw an exception when we don't overwrite any exception anymore. Is this the best place to catch the exception? I'm thinking about the other exception (not a `rollback`) where we can catch it, but if we really care to catch it, it should not be the case anymore.
If you're using the switch, then this will throw an error and we can remove the switch on the switch and do the switch (q items) and the switch. shuts down the switch. That way the code will not get run, which is the same. I think I think we should just use the switch to the switch directly.
nit: we probably shouldn't need to call `equals` here
please update `filter` to use other new ones
Doesn't this need to be a `logEntry`?
Please remove this
I wonder if we should also have a constant for these 2.x?
Can we keep this and make it package private? I can see it is used in other packages.
What are the `System.Collections.Generic` files? Should be a `Set`
I think this should be just `@TwCardsController` since the logic in the controller is always going to be handled by the controller.
How about using `AddFails()` instead?
Please remove this. It will make it easier to read.
This is unrelated to the PR. Can you please explain why this is needed?
Can we use `AZURE_KEYVAULT_AUTH_VIA_CLI environment variable` or something like that?
Can we use sessionManager directly?
I think this is not correct, it's only a connection (and is a connection)
This will cause the output to have a valid output for testing.
why the change of `urlencoded`?
Is it worth putting these as constants in `/apis/__init__.py`?
I would make this `graph` so that it is available in `graph`
Is this right? Can't it be an un-explanation version of deactivating the package?
I'm pretty sure this is the only change to the service's message, but is there any way we can test the EnableForward without logging it?
Style/ClassVars: Replace class var @@ @@ until until until until until until until until until until until until until until until until until until until after after the firstveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveve
`whilewhile(localConnection && localConnection.type != Blockly.OUTPUT_VALUE) {` to get the correct conversion
Is this TODO still necessary?
Looks like a separate change?
The `!FormatCanLoadFromBin(filename)` can be removed. See the `if (filename != nullptr && CheckCanLoadFromBin(filename) != "") { CheckCanLoadFromBin(filename) == "" {` above.
I don't understand the purpose of this change. Was the change to execError related to the change in the change?
>req [](start = 16, length = 7) Should this check instead check if `req` is true? I think a bool and then `req.set_space_name(std::move(name));` is false?
this should be renamed, right?
Is this change right? Is the `util.IsPaused` case only ever used if `FS.Result{}` is `nil`?
should we remove this?
Why is this change necessary? The `instanceDir` and `toAbsolutePath` calls are now not initialized anywhere in the code base.
I think `localFieldPathType.schema` should be an instance of `localFieldPath`.
I would prefer to use `unless concat_ws is not concat`, which is why I left `unless concat_ws or concat` as concat
This was added to prevent the `make update` check from failing.
I'm not sure if this needs to be a WARN or anything.
I think this should be moved into RawDiff and not RawDiff as the input is expected to be able to be implemented.
We don't need to define `NETNET1` for NET461, right? I don't see any changes to `NETNET1` in this file.
Should this be const?
We should probably remove this and put `cert.URIs` below. We will need to remove all the fields of the string so we can remove it entirely.
nit: this should be an empty list.
I think you can remove `mhtml` here now that you've imported `download_path_suggestion` by using `mhtml.downloads` (in this package), then remove `mhtml.downloads` which will remove all the `downloads` from this package.
Is this a typo?
I feel you should not need to define this in the `else if app.config`
This should be added to the server side effect.
Isn't the error always returned if `err` isRetryableWriteError?
Isn't it better to have `.default` as a default? Also maybe we could use `application/default` as a default value?
I'm not sure we want to keep the old name? I feel we should be explicit about it, and we can add an explicit TODO here
I think this is not correct for the backing node.
why is this needed?
It would be better to move this to the UI and not have the same logic as before the new version, like `rankers.18.04`.
I think this should be `stdint.h` since the CV2 code path is not part of CV1.
should this be something like `pkg/config/apiserver/service/yaml-service` ?
We can probably move this to the `individual_steps` in the constructor instead of the `C:\pleter`
@sparrowDom I see that the default version is "api-version".
You can just use the `definePropel` constant directly.
We have some sort of trying to track these from the docs that this isn't an arbitrary browser, so I'm curious if we can have some sort of `B` here?
Can you add a line above?
The goal of this is to get the user from `recordLink` (which is set by default for `OAI` is to provide a value) which means they won't be able to get a "recordLink" link in the same way.
Extra empty line detected at block body end.
@smarterclayton do we want to allow these options to be ignored if they are no longer supported?
I'm not sure we actually need to `item.images` here, since this is used in a few places.
This is a no-op right?
You need to use `[]` here and in other places.
What's a varReference used for?
@wido the api will not work, you need to update the first url in the second line
I don't know if I have any strong opinion about this (in a follow-up PR) - but I'd like to see a unit test for this.
This will fail if it's not a vosely setup or not, so we can get a `.resolve()` instead?
I think you want to remove this `pollError()` instead, and call `pollError()` in the `Rollback rollback()` function instead, to keep the old logic in `Rails` and avoid that.
Why not use "manager_env_prefix"?
remove empty line
If the user wants to use an external library that can be used in `pkg/util/wait`, this will need to be removed.
There should be a typo here: `replace(html, options);`
nit: `isinstance`
`if cfg.model.neck` and `cfg.model.neck.rfp_backbone.get('rfp_backbone', False)` would work.
Line is too long. [84/80]
Can the struct name be `cxxflags`? I don't think it's necessary to have this flag.
This needs to be reverted.
why the use of `"SecretAccessKey"`? why not just have it use `AccessKeyIDRef`?
Should we do the `0` here (and below)?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Do these config properties not contain port-list prefix?
this is not needed, we can rebase if not a property now
I think you can use `assert` instead of `assert`.
This is a small detail that the user will use a version number after it.
I don't have a good suggestion to say, `hash` is a cache folder.
The check is redundant here.
this variable can be removed if no default value is provided
The exception should be handled internally, right?
I think you can move the block to the `else` block, to avoid the `if` statement.
why are you using a hash for this ?
It's probably better to use some more precise name here like `tf_atomic_t.makeflow_failed_flag`.
Do we still need this if `elif` is `duration_ms`?
can you make this function `createVNode(possibleVNode._dom!=null)`?
I don't understand the naming convention of making this an optional argument. Maybe it should be renamed?
Why is this needed?
Why remove this?
this might be too late, but I don't think we need this class.
This is the only place where I'm currently running the listener with the new session or the session is created. I don't have a problem with the old listener though.
why do we need to make sure you're not changing on a node?
Can you add a note that this will not break any existing tests?
"Failed to commit state changes on height %d" or "Failed to commit state changes on height %d"
These are all in the same order, please remove them
Seems like an extra newline is unnecessary.
I'm guessing this name should say "foreign_key"
`authenticationPlugin.plugin.getMetricRegistry()` can be replaced with `initializeMetricsMetrics()`.
Why is Lua not only for Lua and not only for Lua? Is that possible in what we want? If the Lua is a Lua, then we should probably check for that only when we get a Lua and then check for other Lua.
I assume this also works for both cases (blockblock2 and non-blocking)
What if the user already has a `logging.FromContext` in the context?
why the handle is changed?
Why is this different from the `enabled`?
Does this really work? I would expect that the `context` property should already be added to the base context.
This seems to be the only place where the length would be `bytes`?
Is it necessary to add the Display into the `json.json`? Otherwise you'll end up with the `json.json` which is indeed used.
here I'm set details to autocomplete suggest, "suggest" and then "Topics_enabled", "path" are more consistent with the rest of the file.
this import is no longer needed if you remove the import below `gogo/protobuf/proto`, please add the import in `protobuf`
I think that the app and app will have to be removed as well?
This import should be removed
why adding this event?
Perhaps this should be called `UMving_official`.
Is it possible to change these to be `<T>`.
I'm pretty sure you don't want to delete these lines. Is there any chance they can be removed?
Why are we adding these to the end of the file?
should this be `forum.from_or_forum`?
`NM` -> `email`
Is there any benefit to using `member-subscription` and `subscriptions` as default?
optional -> not?
why are these being changed?
Is this line necessary?
I think `options` is a bit confusing here, since I think it's not the case anymore?
Is it possible to get a specific implementation of the API somewhere that the API is being used?
what about `deleteNodeConf` here?
I'm not sure that we actually want this. Doesn't this `variable` variable exist at all?
The `test_parse_cloudtrail_with_botocore` test needs a `test` to test the value of `cloudtrail.com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DescribeTrails` but I am wondering if it would be better to just set `test_parse_cloudtrail_with_botocore` here instead of using `test_show_cloudtrail` everywhere since the test does not have its `cloudtrail` variable.
we can use `dev_delete_ication` here?
This should be a separate PR
I think this should also be added at the beginning
Can you add a spec description about what happens in one cases?
Do we even need to define `KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK` in this case? I'm not sure whether that's the right way for users to override the `HostSpace` below.
i'd also add a check on these examples
The variable $attributes is not defined here
@smarterclayton @deads2k i didn't see any difference between 1 and 2 here?
This import looks unused.
`fieldId` and `sourceId` are the same. This is the only usage in this class
We don't really want any callers to call this method in `on_acked_by_all` because we're now using the same `on_acked_by_all` function. I think in this case we will have to do the same, and then you won't be able to use the same condition from `is_acked_by_all` in each case.
This can be `URI` since `DEFAULT_PATH` is a public API and it will be useful to have a public API that does nothing as well.
Btw, you are going to use the "default", which was the reason for the "default" part.
`all_defaults` is set when the scope is a `defaults` attribute. It will be hard to read when the node is set. I think the new logic could be moved to the `defaults` attribute instead.
nit, I think we can name this `ndeltas int` since it's not a ` base64`.
I think we can still keep the ` gracefully`
Do we really need this? If so, we should close this before merging. Can we just make it an error so we're not seeing any errors in there?
I wonder if it makes sense to run a `qunit` header, but the `qunit` header isn't found in the `qunit` header?
I would move `Errno::ECONNREFUSED` to `shared::ENOTCONN` since we are only using it in the `<!--the-Err-no` module...
this is not right. the `movie` should go in a constant or a constant
I would move this above the `collectVertexProps`, so that it can't be used there.
Can we put this in a try with the `if`?
Rather than pass `Note.CheckpointParentDir` to `_getCheckpointParentDir`.
Maybe rename to `UIA-CharSequence`?
if this was an error we don't want to trigger this, we can simply say `container.GPUIDs`
Nit: We could probably make this `const` for consistency.
I wonder if we need this using-import?
This should probably be `getReadColumnNames(configuration);` (or something else) to distinguish a bit more from the code that will be called in a `case`. Otherwise the code will be considered a lot of code, as it'll have a `getReadColumnNames` function.
The only difference I was expecting the EventHandler to be set to the event after it is done is that it was not updated. It was not used anymore.
This should be `!==` right? This is a bit of an unrelated change.
is 100 an issue with the current IPC?
Why are the basic operations added here? Why is there no `FailureImported EventReason = "Import failure"`?
I don't think we should add the `object_intern` method to the base class. It's not really necessary, but we should be able to remove `rb_define_method` from `init_experimental_rb()`
Should be log.info
Why does the value change here, or is it used anywhere?
Should we just do this if we're sure we are in a thread for whatever reason are we expecting to know the executorManager?
@murrant This is the main change for #1981
If this means that only `six[...]` will use the `*` header, right?
This should never be closed. It's a very small number of bytes.
Should this really be debug?
I'm guessing the call to `parse()` was not being called here?
`std::unique_lock` is always called from a list (which is what you did before). I'm curious why it's changed in a while ago.
I believe this is needed for your `v1` package.
This function is never used, it should not be there.
I'm pretty sure there is no way to get rid of the `beforeEach` function here, but it doesn't seem like a breaking change.
I think we can move this up, just to make sure, that in future we can avoid using `Datasets. Default` to be a relative value.
The reason this test was removed because `TracerProvider` was only testing the `TraceProvider` field. It would be good to rename the `TraceProvider` to `TracerProvider` to indicate it has been changed.
This is actually not being used anywhere. `google.golang.org/grpc` is a better package name.
I'm not sure why we need the `utils.read_file` file here?
why not use a `select()` function?
I don't think there's a need to do this, just use `Collector` instead of `Collector` to prevent misunderstood by @lannka or @mitchellhenke
The changes in this file are not related to the changes in the PR.
can we add a validation to explain why this is needed ?
I think the message should be more descriptive, e.g. `src/develop/server/tests/uppy`.
This test does nothing but does not test that the `WriteAsync` is called. We can't just do it.
I'm not a fan of keeping this. I don't think it is a good idea to put it on the `constants` model.
Should the value be `omitempty`, not `omitempty"`?
The problem with this is that if a target directory is writable, it will be non-nil. Is that correct?
The configuration is `snakebite` (it's basically the `hadoop` value) so we can use it later, in order to pass the `hadoop` version as `snakebite` (or at least a more specific value) in the future.
isn't there a case when content and name is not a list? if not, it will raise an error
Why did you remove the global setting?
This is not used anymore, please remove. The package will be removed from the `glassfish` class and fix it.
This name makes no sense since we're only using this Faker class for the first place.
Can you add an explicit `TODO` to remove the `if(fileInfo.Exists)`?
Is this the only valid fix? Shouldn't the url itself be removed from this?
Do we need these to be `/all`?
@jona-sassenhagen, does this look right? The port may have been added to all platforms?
Does the SELECT_COUNT have a SELECT_COUNT of FROM? If not, can this be "enable FROM", or can it be renamed to "enable FROM FROM", and the "enable FROM %s" are in both the SELECT_COUNT wherever needed?
@cra0zy Can you confirm this is correct? We are able to run our own `V1` version.
Why did you add the phpdoc here to be able to exit the logs?
Why was this change needed? It's only needed to make this change. The `result` is never used, so I removed it.
Is this correct? If the ratio is `0` then it should always be `0`. I think this `0` is the correct fix as well.
This will probably not work. Mask is called in the middle of the IP. Is that the case?
I'm curious why you changed anything here. Maybe it was a good time to change `substitute` to `Substitute` and not `Substitute`?
@fabianofranz @pascher It's not related to this PR, but I think we should just add this to the `_tab` list above to prevent the selected-specific element, not just selected-specific element.
Is it needed to pass the `nil` params here?
This method is unused. I think the method should be renamed as well.
`if focused_tab is not None:`?
This was only used for debugging?
This needs to be moved to the "else" clause as well.
This is a change for a bug fix. The privacyParameters would still be in the if/else block.
I would not do the same thing here. if the node is `base.deleteManifests()` then a collection will be non-null.
maybe just "unless groups" is more consistent?
@mmaxim do you have any idea if this is ok?
The `blockHeight` field still supports `redeem` for the test, so this code should not be deleted.
I was thinking of the alpharea API review we have `crd/v1alpha1`
We should add a note that this value will be used for the pause container and not the user.
I think there will be some better place where we can't really set the default value to 0, as in the case of a specific value we want to check.
It is not possible to just pass in "for-push" as a constant? Or just not return a list?
Shouldn't this be called "TableTable" ?
Should we add `options[:log] = { 'console' => level }` to this block, too?
Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
Is this part of a merge fix or just a typo? `sourceforge.pmd`?
Looks like a typo in the name?
should be "is_unix_path"
this is unrelated?
This should be `disable=False`, no?
In all the typehint `string` and `                    `, are `string`, etc. in all of this typehint `string` and `                    `? I think that is fine, but it's more likely like `int|string` - as all we're adding more information in the typehint, we don't have to maintain compatibility.
Can we move this to the previous line?
This field seems to be unused
why is this removed?
I wonder if we should add some basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic basic
I think we can keep the getter private since the class is only protected by the caller.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Use %w or %W for an array of words.
I would prefer if the assertNotNull had a dependency.
This should probably be `Values[str]` in ` asset_sensor()`
I think there may be an example of an example in the docs that the runner can't see this. Is that intentional?
I don't think this is actually useful. The `without` part is also removed.
I guess this should only be required for full stop. We should not be using `pipeline_definition_sensor` here.
I guess the return value should be `True`?
@agramfort this makes me feel like there's no real benefit I've seen here.
I would rather enable this as a dependency rather than re-assigning this variable.
@alalazo could you please describe this change? Is it not necessary?
Is it worth moving these functions to a function since the function name is being used somewhere else?
The method is never called, so you can remove it from here and remove the `if`
We should keep this method around. The public method is already called from API public.
Do we need this wrapper around?
We could move this check outside the `if...else:` block.
Isn't it better to add a `Runl_e()` to the `init`?
`pendingRequest.configuration.remoteHost = pendingConfiguration.remoteHost;` is never null, the only way to get the remoteHost is to set the `pendingRequest.configuration.remoteHost` when the `pendingConfiguration.remoteHost` is false. I think it should be the empty `remoteRequest.configuration.remoteHost`
Shouldn't this be `== null`?
Please don't use "iotex" in python 3.
The `return` statement is unnecessary as `return strstr(cmd, SET_PARAM_CMD)`
This change is unrelated, but the change was intentional. The problem with the changes here was that if someone went through `services::Status`.
Why is the `false` necessary?
why change this?
Can you also make it available in the `gulp help` folder?
I assume that the type of a Box returns true by default in some cases is `Tukey boxplot`?
We could move this to the top
This is the only one we use for these
I think this one is missing a comma?
Please use `$code = []` for code blocks.
I don't think the `2013` needs to be added here too.
@mmaxim I don't like the fix here. If you want to switch to using `MaxIdleConnections` I think it would be better to just use the new value of each call.
Maybe it's good to add an assert here that `gsuite_id` is a list, and not a list?
Can we change these constants to be const?
@tnozicka I think we need to move `search_console_error` above `ivy.ans` and `ivy.ans`. I'm not sure if this is needed. Think this is a problem because we want to keep a `error` field for `search-console`?
What does this `obj:` mean? What is it supposed to be? It looks like we don't have enough `dataset:` defined elsewhere?
There's no reason to have this in the `email` model, but I think we should just keep this in the `confirm` model for now
Is this needed, or was it a bug?
Why is it clearer here?
We can remove this line if it has changed
`window.__mochaResult__` is set to `true` when it's set.
@wagoodman I think it should be `rwa_number` or `building_number` as in the case of a page?
The default here will change the default value of an empty string.
Maybe we could also have a default of userid? Maybe a userid?
Do we not want to print the error in case someone wants a nil pointer?
It'd be nice to move this to `realmConstructor.Sync.Session`. It's not a big deal, and this will be the source of the app's name, but we could have it there.
Why did we have to add this?
nit: can you change this to "//"? "//" feels a bit confusing to me.
Maybe we should just return `cfg.IP` and return `nil`?
Why is it the other way around, so it's easier to type `bool`?
This is an existing code change that makes me wonder if this is a good change and I'm not 100% certain we are trying to filter the `columnSizes` metrics, but we are not going to add it to the client side. Is there anything we could do to use it in the future?
I think you forgot to remove this function. It will break people's API. You will have to update the API to pass a list if an argument is provided.
Should have an issue for removing this linting.
I'm not seeing the difference between `m_DynType` and `m_publisher` in the code. It can probably be misunderstood with the other `Type_ptr` usage.
@deads2k any idea why this was changed? (I think this change is not needed, so I don't understand why it was here.
Can we move this outside of the loop so we don't have to update the test suite?
This is not a good change, you are adding this method in the API to the API
I am pretty certain this method is not used. Can you explain what is going on here?
I think this is a no-op and not a fan of `64`.
why is this being removed?
This is a breaking change as we don't want to support the old version anymore
Is it intentional to use a `json:"-"`"`? If so, wouldn't it be simpler if it was already part of the json field?
why not just `:ARN as part of the channel
This is an improvement change, I'm not sure if we want to do anything other than this. I think this will make it easier to find a way not to load this for the user, but if we want to make it not to be safe, maybe we could consider moving it somewhere in `saleor/service/spec/core/tests/testtest/tests.go` for example.
It looks like this is the same as `Parameter` in `Completed/install`
This would be better named `DialogResult`.
this needs to be set to `false` by default right?
Can you add a `//TODO` here?
Is there any way we could do this? If we don't use the key to be the same as the argument name, I would like to be explicit.
This will not work for every call to `fs.Fsync`, but I think `dir.Fsync` is a better approach and we need to make sure we don't use this.
I don't think you need to do this - you just want to keep if (elf_hdr->e_machine != "") - which is the default for you - that's not what you want. The default will be false if the DR_HOST_NOT_TARGET is false, otherwise you can use a constant that is set to false in the DR_HOST_ELSE.
I don't think these are necessary, if you remove a `v1/bzz` variable from `fileUploadResource` and use `v1/bzz` as the second argument for `bzz` and a `v1/`
`error.details` and `error.message` are both the same and the same. I believe we need to update the `details` variable in `Class` to be consistent.
$access must be defined at the end of the method
nit: remove empty line
Is this necessary? I thought the only use of this code was to make sure we don't have any of the others.
why this change?
I believe we should call `getBitMask` first.
this seems like something that could fail if you are not using yourself.
I don't think this is correct. The `NewKeeper` function should be used in `service.go`.
Please remove wildcard import, org.apache.solr.store.blob
why do you need this check ?
This is an example of how the `service` attribute will be set to `null` (or at least an empty string). We should either leave it in the `request.service` or leave it in the `request.service` instead.
@jackfrancis I'm not sure I like the idea of this naming. It would be better to have a default `conda/store_max\s.py`, but that would make sense. But I don't have any benefit to having a separate `conda/store_max\s.py`, which would use the functions for the same user as the `conda/store_max\s.py`.
I think you're missing a `== false` here. Also, I think the previous code will be completely wrong, since the `== false` is a no-op.
It looks like it should be private and private, right?
Is it possible for this to go in the concretizer and not have a reconcileInternetGateways? If not, just add it back here.
I don't think this is really required
`This message is not clear enough to me -- if we decide to do something like "Enabling antarget state by ref" or similar we could just get rid of the method. The error message is something to say "CallTarget state ByRef by ref". So the message could be: "This message can be improved by any user who will call `getCallTarget` if it is "Num into it". The message is "Num into the ref". What I'm missing here. It can say "Enabling that we don't use ref".
missing new line here
I'd like to see this in a separate file
Is the reason we're changing the key twice? Shouldn't it be done in a different PR?
I suggest to leave this method unchanged.
I'd rather you don't use it, it's not in our codebase.
This should be `oldVNode` (or `oldVNode._component`) so the second parameter is unnecessary. Also we should be checking if the node's old version is a Suspense, so we'd want a `old` parameter.
This is a bad idea, but the name of the function is probably fine :)
can we use the `time_conditional` function here? i'd prefer a more descriptive name
I'd prefer to keep this one as we have in `MystAddress` but not a separate file (eg: `Myst`.), the same as `Executor`, we don't seem to ever be looking to it as the "rum" file for our custom `Ether_Client` (eg. `Myst-client.org`).
remove these two import statements
`depdep`. I don't think this will work, it will be more obvious to use `DeviceAcquirer`.
I'd prefer a bit more descriptive name to indicate what this is going to say. I think it's a bit too far and I can't find where we could log an error but we'd like to see the `nil` error.
Is there a reason we wouldn't want to change the WordPress dependencies from `isDataZeroForReporting` to `WordWidgetPopularPagesTable` here, but that is not a problem for users?
Did you intentionally not allow `enode` to be added?
I believe `ash.Host` could be a list.
why is the render statement removed from the tests?
This error message needs to be logged at the end of the function.
This was unused import
should this be h.%? I think we need to do a special check for it
`MIN_SAFE_INTEGER` and `MIN_SAFE_INTEGER` are only used to have two arguments. Is this a bug or did you remove the `0` and a `const` here instead of just a warning?
should not this be the same as the _handle_ call?
This change makes it sound like you were missing a try/catch around line 627. I'm not sure about why the function name change is better.
Suggest using a named verb, `not existed Pod` instead of `not existed Pod`.
Why do we want to get the alarm ID from RCC? I think this would work. Also, I see the problem here.
Please do not remove the unused imports
I think it should be `repr`
Do we also need to check the `GetRootNodeForTest` member?
should this be added to the new `debug`?
We could remove the 'nolint' part.
I think we should remove this condition and replace it with `.forceUpdateCollection(collectionName)`
I'd probably prefer if we could use a `info(host)`, if I'm not mistaken.
This should be `global.googlesitekit.setup.authenticated = response.authenticated;`
This needs to be implemented to `axe.ping`, `axe.ping` can be used instead.
We should check if the user is going to have an 'kinesalite' in the test suite. (The `KINESIS_PROVIDER == 'kinesalite'` check here is correct)
I don't see this file being used anywhere. The PR is just to remove the review, you should revert it.
`maxRetryTimes` is not needed anymore.
signedUserName is already a global variable so no need to pass it through as the argument type.
I don't understand this. It's used in the code, but we should have a better implementation for it.
I would also expect this to be set to `None` when it is false, and not an error when using `isinstance`
@kshitaB, this was a bug indeed before. We have to re-create it for now and that we're going to change the part so it is not related to the user code.
` PutHash()` is the proper type, but I didn't see any benefit to using `CombineCache` for the interface API for the `.go` files, it's just a string and makes it easier to grok.
This should probably check for other uses of it.
I'd recommend making this `should` instead of `==`...
@jridgewell - Is this change intended? If so please make sure that you use the `goog:chromeOptions` as well
We should probably consider adding a check that `PluginInfo` is not null here.
Not sure why this is `QMetaType`, but it looks like the type of `QMetaType` can be `convert()` because there's also `value.convert()`.
Wondering if we should just make this a function of the `passing done`?
Style/SymbolArray: Use %i or %I for an array of symbols.
I'd suggest to use `+1` (or `i+1` as the default). That way we don't need to do the right thing in the past.
I'm not sure that this is the actual fix. It seems to me it is only for each call to `NumNonceMap` which is not the root.
This function is not used anymore.
I don't think we should set it to null, as this will break some other setting that will be checked for non-null.
Can you explain why you removed this? I'm assuming this is the only usage of `DatasetFieldType` and it will be the same as `StringOutputInputLevel`.
Is there some sort of difference between "CertificateRequest does not have a Approved condition:" and "CertificateRequest does not exist in the queue? I'm wondering if it is just forcing at least one author that would be helpful.
Why not just use `False`?
This doesn't seem right.
this method should have a default
I don't think it will work here because it's a number, so I would change it
This is a bit unrelated to the PR, and it makes me think it makes sense to have a test for the "severe one" instead of a "getTransactionCountCount", and maybe in the "priv_getTransactionCount" for the "severe one"?
I'm not sure that we should change this, or at least keep the old code in the next PR?
I'm not sure we actually need this? The network is already being a dictionary, but if we're going to get rid of it, I'd prefer to leave it to avoid any extra code.
Also add `update` parameter if `data` contains the last argument.
This was the only time I had in mind.
I wonder if it would be good to have a test that verifies that the parameter parameter is `User-Agent`, or maybe just `User-Agent-fully`?
should this be 1.7?
Maybe we can add a note that this will be removed in #4279 ?
What was this change supposed to do?
You're trying to move this to the top of the file (not a blocker for this PR)
You can remove `params` from here
this will fail to claim with java 8+
Missing space after #.
I think we should be moving this logic to the `CurrentState` struct so it's not part of any view view.
Why this test is no longer needed?
We should probably be consistent about this one with what we do below.
@adriansie, I'll fix the issue to make it work. You should fix the issue with #5323
I'm not sure if this is the right fix.
Is this just `WinRM::Connection.new`?
`get_requests` can be deleted now, right?
Is this needed anymore?
what do you think about just calling `.assignment` on the model model?
`onPreExecute` doesn't look like it's only called in a single thread. Could we rename it to `onPreExecute` ?
I think you can do the `RESTRICT_ACCESS` in the specs too, no?
Why was this moved? I see no reason we are not calling this twice.
The name of this config is `GetConnTrackInterfacer` - shouldn't we check for a return?
Is it possible that we are storing the defaultium explicitly?
This should be a separate function, it is used in the `setIfNewer` method which returns null.
This package is the key of the package, so we should not be getting it as a package for the domain or a package?
nit: I would add "This must be "i.e", if it's not, we should change the name of the function that takes `APPLICATION_ROLES`.
Should we use the dispose variable here?
Can we call this Caffe::set_mode?
what does this do? I'm surprised you don't need an Ember in your test...
@drcrallen are they the only thing where we need to make sure we have the same functionality in place? Or is it something we can make up and allow for now? I would suggest to make this change in the future a little bit more general for now
You'll want to use `api` here instead of `Without_*` since that is what you are using for the new value.
I think this should be a `cstor-volume-grpc` package. In this case we may want to use the global `client` package instead of the file name.
`public static final` import `importimport`
Does this needs a dot here to replace the previous dot with "ctx:" of "sample"? I think it's a bit more readable than me.
Could you add an example here to add the `--system-system-system` file, so that it is only used by the other files, and the other files also have to be updated?
This is not a bit confusing with the rest of the function. It's used in a few places, and I'm not sure if there's anything in the code where the number is not a number. I'm not sure why it was a good idea. But I guess it's better than `number`. @jridgewell
Not sure what `null` means here. We need to be sure this is a list or list of properties for the same rules.
Maybe move it to the same file?
I don't think it's necessary to build the `buildBinaryFor` calls, and use the default in buildBinaryFor method. You could use `buildBinaryFor` to build the type of `log.Handle` and `log.Handle`
InMemoryMetricExporter is not a part of your sense, so the original code was correct. If you want to keep the old name here, it would be better to make the code more explicit.
Do we want to make this change to the keymap? If not, would it make sense to have an assert here?
@lucidd what about `noop`? It looks like it's no longer a project.
should the other way around, if you use getInstanceId from the other cases?
I would just make this `TypeError`, because we want to avoid using `list_compatibility`
> `TrimRowsRows plugin` trimming rows vs TrimRows plugin. When I see the TrimRows plugin I found.
should probably use `key_default_is_extension` here.
Why not just call the constant here?
I think it should be `@deprecated Class`.
Is this needed? I can't see it being used in this PR?
You are missing an exception.
is this just the version version correct ?
I think this is still a little confusing since some people will have to know the "X". I'd suggest adding an array for `MTLD_DEEPBIND`
For this name it is not very clear. Maybe `protoregistry.proto`?
This class contains some internal value.
The `if` statement should be before the closing parenthesis
I think we can change this to `config` now that the new partial is being added.
The `!exMessage.startsWith()` is more readable than just `!exMessage`.
I'm not sure this is the right place for this. I assume we should be using an enum instead of an enum?
Is this the correct way for a user to have a public function?
TODOPort should be removed.
What is the benefit of this? I thought we already had a `depends_updatedChangeSetEmpty` function to return an error. I thought we never never hit the problem because we always hit the call to `blockChangeSetEmpty`.
I don't think we can get rid of this.
why add these? This is the only change I am not sure I follow?
Oops, this was not the bug...
This is not a big deal - but I'm pretty sure `define INCR_BATCH 25` is the correct name here. If it's not a big deal, it's not a big deal. I think this will be a problem for any other code to do, instead of `valgrind.h`
This needs to be changed to `writer = w;` for consistency.
This method is unused now, and should be deleted.
Nice, I think we should be consistent about these.
This if statement is not needed, if `if exp.Target.StressChaos.ContainerName != nil {` will be `nil`
this is an API break, we don't need this
Not related to this PR, but this is still a good thing. I don't think we want to get rid of the `pvc` for that, just want to make sure we're using it in the `pvc` context. We can probably get rid of it.
can we have an enum or something similar? If we're not, we can probably just get the value from there.
can you use `transformer::TYPE` instead of `Domain::TYPE`?
The SelectSubscriptionActivity class does not seem to do anything (e.g. without the `if`). The `startActivity` is not the right one, so it can be `null` (which is a no-op, but it's a no-op).
Can you move this check to a separate file too?
Can we just get this from source from another object?
If PODF is set, PODF should not be set.
This should probably be in Prometheus-src/main/resources.go
`if (timeZone) { timeZone } = Intl.DateTimeFormat().resolvedOptions(); } else Intl.DateTimeFormat().resolvedOptions(); }` We could just use `timeZone` here
`hostpath` is unused. I think we should keep both `sendEventOrIgnore` and `hostName`
This is untested, we should be able to make sure that if we are not going to be using it, we should be able to make the change.
This is a test case. I don't see an issue. Can you fix it?
I think you're missing a return value here
`$normalizedConfiguration['type'] = 'text'`, is this a string?
Shouldn't this be `endsWith(node instanceof ...) node`?
This property is not used. Do we need to add it to BatchExportProcessor?
Can we make the message message go in the `RecreatePipedKeyResponse` method, so that it returns the error message? Otherwise it's the case that it will never be nil. This is probably the best place for this to return an error.
Why do we want to keep the previous level? It's not a special case because we're going to show the data with the message.
Do we want to add this to `refToDecorPiece`?
Please replace `FileCitationEndNote` with `.ibtex()`
I think the `cliquet` should be in the `CONFIG` module instead of the hardcoded `2.6`, and this is the only one that is used for this module.
@agramfort if you change this line, you can also remove the if statement below.
Isn't it a "Ap" field?
`hide caret events` -> `hide caret events`
Why the variable name change? It is better to use `$this->payment_detail`.
`acc` is a special name which might be confusing because it's the name `dict`, so you might not need to change it here. The `dict` is not in `_scike2_acc`. The `dict` is already used by `_scike3_acc` but it's more of a `dict` and I don't think so, so you can use it in both places. So you could use a `dict` here.
I'm thinking it is better to use a different request than the current request (i.e., no `id`)?
I don't understand the purpose of this change. When you're using this, you're still using 'conf' in the other places in this file.
The has method which has cancels the information from the callback. Why not just use "cancel method"?
Since `second` isn't a valid URL, perhaps it would be good to do this as a `describe` so it can be more clear?
precompressed files should be removed now, no? This will cause any confusion with `Benberg`
I would make this a required parameter
Why is this in this annotation?
Can the `@Deprecated` be removed? The keyComparator is deprecated, otherwise the key appears somewhere else.
Please include all the header headers for all the includes/link/etc.
I don't think we need that line anymore.
not sure if 5 is a good idea, but we're not going to want to set a zero value here. The number of changes below are not clear to me. @pjcozzi could you please confirm?
We should keep the quota quota quotaFacet.mergeResponseFromShard method as a static setter.
I'm not sure this is correct. I thought we had some ideas on how to do it.
Do we need an additional `mock_apigateway()` call here? If so, maybe I'd just make `_api_apigateway()` take a `bot.mock_apigateway()`.
I think we should not add these to our library. Instead, we should add in the future if we don't need to.
I think it might be good to add a new one, since it can't be used by other methods.
double scale = "only" double
This should also be changed in the `if`.
why did you change the name of the previous function? it should always return an error and you don't check for the name in the function
The end result should be `null` and not `end` (not a blocker)
`status you`? This is what I meant earlier. It doesn't make much sense to me.
I think these changes are necessary because they were made only the case when there's a `listens_matched_p` set.
Is it worth including a test that covers this case?
To be clear, we should just have a `executiongenproto` variable named `github.com/temporalio/temporal/.gen/proto/execution`.
I think that a more general `copy` would be better here as well. Also, I don't think we can do this in one call but I think it's better to keep the same as `copyqr` (and then just make the copyqr an instance variable in the other block).
why this change?
This could be `>=` to match the code style.
Can we move this check to a method in the if() and add this check inside the if()?
nit: remove the space between the key name and the last two lines
why no if v6IPNet == nil?
This is the reason for the "record" part. I'm confused why this is necessary, but it seems like in some cases the test is still the default (that is, if the ` reachable` is still in the `approved` value), then that is not the case. If the `approved` field is a string, the `details` is not the same as in `.set()`?
This is a single line string. `char*` doesn't sound like an option, so I would be fine with that.
@franckc @kurakarcis @rakanan why are we removing this, instead of removing it?
I think this could be a better name. "Weave of builddate"
Please create a separate issue for these two parameters.
Strange diff : org.springframework.web.bind.annotation.Chunk;
Is this a change in the diff diff to not work? This will cause the next two conditions to fail and will fail if a different approaches to fail.
These variables should be removed and `const` values as they will cause some bugs in the future, but it's still just a question of which ones are being allocated for.
This can be simplified to something like ``No token provided``, no?
isn't this the same as the one above?
Should we use a different type than `if isinstance()`? If not, you may as well raise an error.
`GrpcHandler.Request` is also in `GrpcHandler.activity`. Why is it in `grpcHandler.activity`?
What about using the ` Implementations must be treated as a float or not, if the state is unknown, it cannot be lost`
We could add some more to make sure it's not possible to make the change in `HDF5Reader` for example.
Can we just make this a property of the player rather than its stack? Or should we just check if it's the user provided stack name?
Should we remove this?
Could this be just simple, in the DApp, like other components, like "androidkey store store via store".
can you make it a nil env var and make it a nil env var?
Add empty line above
How would you feel about renaming this test, since the tests are not really testing anything in the test...
nit: line break before `,`
I don't think there is a reason to use `*Reader` instead of `*XXHeaders`. This would simplify the code. It's just that these classes are all over the place, but I am not sure if this is the right thing to do here.
Do we want to keep this in a single place, or just define it in HoodieTable.hive.metadata?
I'm not sure if this will work with the other examples of this. If you want to use one of the cases in the first place, you'll need to set a value at the same time as the first one, then you don't have to set `dnsmadeeasy` for this.
Is it worth checking for this, or just using a different variable in the `init_result`?
This can be `Tags.HttpMethod`, right?
This should be a warning instead of logging
So you want to also update the Authentification version in the builder. I think this is the default behavior (i.e. it was set in the builder but not in the controller)
I would prefer this log message be more helpful, like you did before.
remove empty line
You don't need to include `ipsets` in `core/utils.go`
Do you think it is worth having an interface to define this table at the bottom?
is there a better place to check for the enum ofMAX_RESULTS? or is it a better idea in terms of the global enum?
Is this needed? I don't see it being used anywhere
We can't use `cobuild` in this test. It's not clear what this test does.
Should this be `CRiOS` for consistency? It is not used in this class.
Why is this public?
why dump puppet logs get important?
What is the diff if we just pass in the diff? Can we avoid using the `newVNode.props.multiple` here?
BonusP2StartEpoch is used to determine which epochNum is in the "epochNum <= a.foundationBonusP2EndEpoch" check.
Wouldn't it be easier to do `Droparative_client = "Id";` instead?
This is a little strange. Why only do the `paths := m.GetPaths()` function if `os.GetPaths()` doesn't exist? If you're using `os.GetPaths()` everywhere, maybe it's better to just do `paths := os.GetPaths()` in the `init()` call?
I think this check should be done in `--HidepidDisable` too. If not, please add `isinstance(HidepidDisabled is %v, "HidepidDisable")`
Why is this added? I don't see an error in the `Pruning` package.
Is this file still necessary? It seems unrelated to the PR.
This should be called `prevFolderId_` or `prevFolder__`
Do we want to put these in the same package?
This change is unrelated to the `Update_finalize_comm` code which calls `lbann_comm`.
This isn't really needed, you can simply remove it from the `call` block below.
Is this used by anything?
The `toUpperCamel` should still be the same as `toLowerCamelAndDigits()`.
Can we make this a constant?
This was the bug I found while working on
Why are we adding the random SP here?
Do we need to make sure `GetStatus` is not specified?
` cert.Config.RenewCert(allowPrompts)` should be in `if cert.Config.RenewCert(allowPrompts)` because the renewal lock will be returned from the `fs` and not `fs` (since we are always adding the `fs` function to the `fs` function).
This is still needed, we can remove this
Should this be nil?
Should this be `nil`?
This is a good candidate for `succeeded`.
I think this is a leftover?
We should use the same code to get the daemon client from the `client` (that is what we do with the previous one)
Do you mean `fs.Config.CompareDest` or `fs.Config.copy-dest`? Is it a valid option?
Should we keep error for `err`?
I think this should be `NODE-3405` (or `34.close` on the stream).
this class could be removed now? can you remove it please.
please change `computed` to `variants` or `false`
is it really a return value? I don't see the job id, but why would it be `errorResult`?
we don't even know the 32 is the best way I could check for this, as it's a bit confusing to just say "find(id).name_with(1 << 32)
I'm guessing this is forgotten in the PR?
`_stream_data` is not used in `plot_methods`, can you check if `streaming_data` is a global option and/or just `sig = streaming`? This is not a problem because you have a `sig = streaming` in `plot_methods` and in `plot_streaming_data`, you should use `sig = streaming`.
Why are we passing ContainerMap from `string` when it's an event?
This is a small change as it was. It looks like we were going to remove code that was only there before.
Should this be `<T, T>`?
If we can then make this `public const string SqlCommandIntegrationName = Integration.AdoNet` I don't see its type being used in #18990. WDYT?
Can you change this to `github.com/`? I think we can move it to `pkg/logs`, but the package is not used.
I know we didn't write this, but if the service is not set, I would write an error to ensure that the previous behavior was wrong. I would add an assert to the service if the service is set.
we can use the same code
Why not just using ivar = ivar = ivar ? i i am not sure what it should be here.
The issue is that I don't know about this, but is that because thework is always the first time we get the first time it is?
Line is too long. [87/80]
whats the difference between default value and default value?
I am curious why this attribute is not set.
This was an automatic bug that would have failed because of this. We need an alternative solution.
I'd move this outside of the `#if` block, because it's used in the `--public-public-auth-auth` file that's used by the `--public-auth` file. (just like you did in place).
You could just do `if (view_get_activated(view)) { 0.2, 0.2, 0.2, 1 }` instead.
Shouldn't this be done after the call to `this.cancelFoldersIID_ `?
Can we call this `GlobalGlobalExported Types`, and just use `GlobalGlobalExported Types.getExported`?
This is a bug fix.
why are we using the default value?
This should not be needed - the `Preconditions` class should be removed.
I think this was the only usage of this function, so I don't think it makes much sense to have a `llnl.util.filesystem` or `llnl.util.filesystem` as we already have a `llnl.util.filesystem`
Can you use `std::stringstring` instead?
Why are you removing this?
Hmm, does this need to be updated?
remove this line
I would say why `err` is not an `Error` here
if `self` is `None`, it would be safer to do a `self.empty_list = True` at the end of every request.
I don't think that this function is used anywhere else. I think it should be moved inside the `Inst` method?
I think there are a lot of places where this method is used: - the `if` part should be moved out of the if-statement and we have to check for the `isFieldsInvalid` callback. - I wouldn't set the `try` inside of the `if` statements in the switch block of code for the `if` statements. The `if` statement is used only internally, which should have `if` blocks as well. I'm thinking of a more precise fix: - If the second part of the if-statement is used, then the second part of the if-statement is
I'd add the `list` annotation here
Trailing whitespace detected.
Maybe this should be a warning since the user will see an error during the client?
I'm not sure we actually need this here? `custom template` isn't used outside of the `FormForm`.
I think you can move this to `ubscribe`. You will have to update `vic-machine.js` in the future.
I think the `addLink` function needs to be added before `add/.light`.
I don't think that this is correct. The http2 streaming must be allowed to do it with a client.
The partition data for the file of this task is `@return null`. If it's `@param`.
Is this a `default: repoName` instead?
Should we make this a breaking change so that the client client can always be the allowed header?
This seems like it can be defined as constant in snapshot, not to have to pass the `$strictVariables` variable.
nit: can remove this.
I'm confused because I can see this is the default value of `DEFAULT_RTT_MEASUREMENT_INTERVAL` - is it ok to set it in a different PR?
Is there a reason to not use the `nil` attribute here instead of `nil`?
Should we assert that script is not allowed in parallel?
Why are we changing this? The method name should be called `ReadElementContentAsString`
@mattpap - I see the reason reason has been merged into the `request.getTitle()` method.
i'm not sure it's a good idea to include this message, but the message is not really important now. It is not important to be accurate enough.
@dvoytenko I found this as a tricky change. What was the reason to use `interceptor` instead of `len(i)`? I think it's fine to keep the same here.
@mjkkirschner do you have a use case when you have a DB in a app and an app which has a different name?
`strconv.Itoa()` has a method called `ICome`, but the purpose of this method was to add the parameter to `metrics`
This doesn't appear to be used anywhere. A `alias` method is returning `contains` and the `tree` can be null. So maybe we could do something like `contains(tree, b, b)`?
I'd prefer a more descriptive name like `/cli/auth.rb` which is used for the new tests
`new(heap) char[len2+ 1)` is enough
I don't think there's any point in keeping this.
@hjolivier23 why is the `size() - 1` the only usage of the loop? Looks like it will be less efficient when it should be changed.
I don't think this will work. Luckily, the AppendValue function will return an error if the values was not found. So this could cause any issues. We could probably move this check to Lcomb4a.
What is this change?
No, this is a little weird, maybe "unsafe"?
Can we move it to some config file in `tests/test_config.go`? This is more efficient and less ugly than a simple config file. I'm not sure if it needs to be part of this PR, but we can also go a deprecation warning.
Could the position of `datetime_types` be `null`? It doesn't seem to be used anywhere
can you please add a TODO here?
why is this being changed, if it doesn't work any more?
I was a bit confused about these two changes as the tests were getting the `.to be_true` out of the test -- I think we should probably update the test to check what the block does and what the block does. This seems like it will still catch all the tests we're trying to test.
Please add a `!==_socket.is_socket` check in case the module is not configured or undefined.
Why the method name is not named `datum`?
This was only here before and so it was not needed at all.
from -> do the imports in imports, not importing
I'd prefer to have a helper function for this. I think the `--p2p-enabled` option would be a good name.
I'd suggest a single param. How about "position_legend", "delete_attrs" or something.
I would not add the `trim` here any more.
Is this line needed?
I don't quite get the point of this change. It might be better in the wild to use the global `js-` prefix.
`string=number` here and in `pushemit()`
nit: I would rename the method `org.achTest.artifact`
I'm guessing this should be an `competitive`?
I don't quite see the benefit of having the `primary` in here (and the `callback.add` below) as it's a `use` in the list. Maybe we can keep it in mind to use `callback.add` in a `callback.add`?
I think you mean "ects" here
MessageId is not a signal signal for this concept. It would be nice if we could have a helper method for this.
I think `location.get` is missing from the property id.
Is it possible to move this to `compare/views.js` ?
I think this may be more correct if `col == nullptr`, since that might be a performance regression.
Extra empty line detected at block body beginning.
I'm not sure that this is correct because we are only using `lt;'`, is there any way that we could use it?
@dvoytenko why this change?
This will fail if there is no file
This is not needed in the `if` statement. This is now the default.
does this need to be public ?
I wonder if we should have some sort of function here that just checks if `chooser` is a HTTP outbound.
I don't think it's possible for this to be a message. We have the log message to check for the level before calling the wlr_drm_connector.
I think the change to `setup.nonce <= nonce {`.
What's the idea behind having the default `.data()`?
Not used, can remove
How is this different from the one in the `PublicHeader`?
If the `Character` element is now an enum, it can be null.
Isn't `default boolean isRegularInterface() { return false; }` better?
I believe this was the only place that works
I don't quite understand this line. If it is needed, I'd suggest removing it, and keep it as it is.
How do you know the Status is the same?
The example in the `worker_keystore` path is that this file will only ever be used for the `init` path.
I thought that in the test case it would not be useful to use `test.equal('TEST', options.raw)`, just like checking for `test.equal('raw')`, and if there is no new exception, the test will fail, but will fail for now.
(style) code indent should use tabs where possible
I thought we were doing a bit more things like `:`? I'm not sure why I had these two methods, but if it's not there anyways would I suggest renaming them to `""`?
Why do you need this method?
nitpicking - I don't think the `break;` here is necessary here since its the `Promise`?
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
I don't think this should be here
`db_tests.js` is only for testing purposes, not for tests. It would be nice to be sure that the imports should be sorted.
I think `goog` would be more accurate here for the future.
I would add `@link` for all the `Split`s. But I'm pretty sure this will cause a regression.
nit: unused import.
You should use the `error` definition to reduce nesting, it makes the code harder to read
this line is a leftover - can you remove it?
This is wrong. `loss = F.binary_cross_entropy_with_logits(loss, class_weight, reduction='none')` does not work. `loss = F.binary_cross_entropy_with_logits(loss, class_weight, reduction='none')` should be fine, otherwise we'll have the same problem with the other way around.
Do we need to add this in `testType[testType]`?
This will likely cause issues if SLOT_INIT_TEMPLATE is not set. Shouldn't we use a blank line?
I think we may also need to move this convert() method into a subclass of this method in favor of adding it as the one from `Type#visit`
I'd prefer to see the two `bluebird`s here, but this is one of the other things.
Why is it final?
I think this change has nothing to do with target target target_link. It is not required as part of the current link, and the target_link is not provided, right?
These should not be settings, they should not be commands, but not commands.
Trailing whitespace detected.
I think we should still set a default value here
Should we instead disable it by default?
Is there a reason for this change?
This was only added in the `Arrays.COMMuleData` module which was not used anywhere and not correct
This should be a tuple of `ext_info_ext_bit19`
I don't think you need to add this. This is a very specific error.
This function doesn't seem to be used anywhere in the session file. You could also just use `assert.Len()` in the `config` module to avoid using the `config` function by adding a `ConfigHandler` function that does some logic and has the correct value.
Please add a description to the docs and update the description in the enum values
Can you move this to `tests/models/` and keep the package private (e.g. `os.RE`) ?
Is it necessary for this to be a `__dirname()` instead?
I think this will break the `on_*_external` method, because we'll see that we can't remove the second in the `on_*_external` implementation.
Use the new Ruby 1.9 hash syntax.
This should be ``pygment``
@jcwangxivell any way to set the flag `MaxSubs < 0` without this?
Why is this line removed?
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Redundant `self` detected.
I think we can keep it as `return`, but let's not add the extra retry here
Is there a way to avoid setting `VERSION`?
I would have expected this to have a default value as part of a `ok` if the name key is not set.
This should be done in `fail_if_no_examples`
This is not correct. We should probably not pass `Blockly.FieldVariable.prototype.referencesVariables` as the real property.
Should we use `outout` for this?
Should this maybe be in the same order as the other two?
I would have done it with the `_user_id` attribute, which is the default for `_user_id`, and it's an instance-name-name-Math. You could just have a `_user_id` arg that returns `None` if we're not using `_user` as argument but then we don't have to do it as a string in the `config.py`. It could potentially be a problem with the `_user_id` attribute in the `_source_id` attribute.
This will only work if `os.Exit` is present if `err == nil`.
In general we should make these methods internal, e.g. `1u { 1 }`.
Is it possible to delete the volume status code?
I would put the if and throw new IllegalArgumentException in the else clause. We might add a return type for the else branch to avoid the additional check and throw a `@throws`.
This can be removed.
I think a different name would be better? E.g. the user will pass a custom storage for a different name would help.
Line is too long. [98/80]<br>Space inside { missing.<br>Space inside } missing.
This should also be done in `@shouldRepeat`.
This import is unused.
should we add a space after the `if`?
nit: the URL can be `SQLite3File`, no need to specify it as a path
nit: we can remove this if it's not used anywhere
Don't think this is the fix.
this is wrong. `errors` should go before `errors`
I'm not sure why we didn't write the actual assertion for `Kubernetes_CHECKING_CHECKING_CHECKING_CHECKING_CHECKING_CHECKING_CHECKING_CHECKING`?
@n3nash - this is the line you removed. I see that the `i` value was removed before
Do you need this line?
I'd be tempted to put this on the `r` branch instead, it's not really part of the API.
I don't think this is a good idea. It can happen that the `VUID-VkImageSubresourceRange` is in `VK_IMAGE_ASPECT_PLANE_1_BIT` which can be in `<?>` and not the entire list.
This is more a bit hacky, but it seems to me like the first part of the code is the thing this method is being used in `app/views/__init__.py` which is the default?
this will be removed if libsystemd are disabled by default, so maybe we should just use the default value if libsystemd is defined.
`inferences = self._classificationCompute()` doesn't make much sense to me - just remove the private `inferences` class from the classification.
`methodInitCode` is always called when it's not called, so this will be removed.
Please use `startTs ` to avoid the string concatenation.
`reader` could be a better name, e.g. `reader`
This is probably the reason why we would expect to fail the template if it doesn't exist?
this was the parent class from the parent class and should not be added.
This is going to cause a problem, but I think the `EmberRouteMixin` is used by all instances of `/` in our code base.
Why are you removing an `Workflow` column? I think we're just using `Workflow` at the beginning, and it's the same as we have the `upload_expand` field.
Is it correct that `max_int` returns non-NaN?
I think the default value to "true" was correct here, so we can get rid of this check.
I'm guessing you meant to include this in the PEX, since it's not used anywhere else?
This change is not related to the bugfix.
You have to import `Difficulty Bomb Delay` in this file - it's the same as `Difficulty Bomb Delay`.
@scheibelp I thought these are the only changes I'd rather have been fixing.
Shouldn't the `==` be moved to the if block?
`file_exists` will always be empty if the URL doesn't exist. So please remove it (and replace `vendor/symfony/var-dumper/Resources/dump.php`)
It's really hard to follow all the settings and config files that are not supported by app. This is probably the only place where we want to do this for now but we should do it for other uses of `ddevapp.setConfig()` in this file to ensure that the settings file is not supported in the repo
I think this can be removed now!
This could be moved to where `Dockerfile` is used. I think we should use `os.path.exists("/sys/Dockerfile", True)` to make it clear this is what's happening here.
I think we could just remove this function entirely. The logic below seems good but we should be able to keep a function from the `astroid` and have a function in the function, that makes it really hard to reason about
This is a bit dangerous because you could use `@group_level > 0` and do `if @group_level != @group_level`. It would be simpler if you could just use `@group_level != @group_level`.
Why not just `getAll(this)`? We don't even know if it is available in Spark3.js but it's not in the parent class.
`get_notebook_path` doesn't check anything about the content type, it will return `null`, so maybe that's fine?
I'm not sure this will work as intended, but I'm curious if it is possible to have another PR or not?
Do we have this in tests? Why is it in test?
This should be removed, right? The new value can be used to add a TODO.
Please use `project.build_path`
This should be `if (operationOptions && typeofOptions.fullResponse === 'boolean') {`
nit: `import string import ascii_lowercase`
We already have `.catch(function(err) {  }` in `test.done`, so this line should have been removed.
@michaoi-safara Can you explain me why the removal of this change ?
The `File::class` seems redundant, as you're already doing the `MediaLibrary` class in the `Class Cms\Classes\MediaLibrary` method.
For this and the next line can be `EnableAdminApi string `json:"enableAdminApi,omitempty"` (or even `enableAdminApi`).
I don't think this import is needed, it will be imported here.
This is an example of how we get from the UI when reading the code.
You should just remove the blank line.
I think it would be good to change the test name too, the same thing is for the other `valid_tile_urls` functions
@JeremyKuhne might want to check for null handling. I don't think this is correct.
This one seems off, but the one above is still in a test and this test was not failing.
This was an issue where the test was run in the wrong place, but it does.
(style) externs should be avoided in .c files
Is this intentional?
What about creating an reconcile object with a reference to the reconcile object?
This seems to be missing something, `getClientConfigConfigImportModule` is only used for getClientConfiging...
@juho-jhipster/developers this is the actual test I had to make.
This is the fix, I think we're just relying on the existing `_agreedCapabilities` property name to ensure that it's not available.
I think it should be `+1` instead of `+2`
can you use the `t()` function here instead of using `t()` here?
This should be changed as well.
Wouldn't be better to return `null` here? This would prevent a actionable state that will be returned for the `status` operation.
Can we move this up here too? It looks like it might be useful to be able to use this function.
nit: opinion - why the previous implementation?
This is a little odd. I don't know if it will be useful or not.
It is a good idea to keep the signature here as it is not only used if the update call is not called. It's not obvious how to use a map from the update_state_map method.
This will fail on every OSX, and will make the change in the browser refactoring later on.
This feels like a bugfix. What happens if we have the `log.sequence()` ?
There is not `GCS uploader` that is not really defined.
The length length is never `final`, so it can be `finalName`.
It looks like `peerSettlements` and `slEPpeer` are missing from `settlements`
why is this not `int`?
we should try to avoid using "nocalled import time" in order to avoid import time.
Why did you change this?
This property is going to be used as the default (see `org.apache.commons.lang.StringUtils`), but we don't know if this is the case or if this is going to go down to a different property.
Is this a required change?
DebugTOKEN should be set in the `init` package.
This is an error in the test. We're not seeing some warnings of the warnings here at all - we should probably not want to use something like warnings and just do a `warnings.warn` if it's an error
Should we also add a TODO to catch the exception?
I like how this file reads "button" as it is used for more than 1 usage, not sure if we actually need to support these in a different folder. I don't think we need them in `src/server/server.js`.
There are a bunch of these in a bunch of these that might have been already defined in the `aio` folder, and is there a reason for these?
Why do we change `type!=='function` to `key[0]`? The original code was just doing an if (key[1]==='n' && vnode.props[key] != null) {`
I think `hook` should be plural. It's used in multiple places so it's easier to understand what it actually means to.
I wonder if we should just check if the file exists?
Should this have a migration?
this probably should be `throw new RuntimeException(String.format("Metastore operation failed for %s.%s", database);`
I'm curious about this, why not just do `return isSymbolUsed(Name symbol)`
this is an API break because `url` is already in a local var
I think that you need to also add the recent docs for this.
Why is `undefined` needed here?
Please don't shorten this file.
Is this change intended?
This is not a big error case right? The port will always be a portprober.
I wonder if we should just switch to a more specific type here so that it only shows up in the account?
why are we using this default value?
I guess it's better to use a different approach than this: 1. It's tricky, but it's a `Kidricks` that's not what `is_functions` means. If I see the package-level package name, which is the `park` name, which is the default. 2. We should do the same for `F.is_functions`, since that's what we already present above.
Why are we using `Function`?
It would be better to rename `src/server/link.yml` to `src/server/update.yml` and `src/api/link_server.yml`
`BLACKLIST` is not really a proper name for this, since it's no longer used.
Please add an `elseif` statement.
I think we should change `if (field.nested_flatbuffer != null && nested->type.struct_def == true) {` and then just use `if (field.nested_flatbuffer != null)` here.
There is another error (from Push Descriptor Extension not supported), but this is more accurate...
Is this the only place where the field name is `field`? I thought there would be a `JsonIgnore` method in place in which case the return type can be null here.
Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
I think this is not needed. `from_Series` already has a `b` prefix, and `b` should probably just have a `b` prefix.
This is the previous implementation that was only done for the `PhysicalLocationComponent` instance, right?
This line is not necessary.
@matt-gardner How do you feel about storing the `if` statement in the pool? That way the code will not be able to handle them. But I guess that's not really the right change here, but it wouldn't really be clear to me if you would be able to just have `if` and then remove the `expFeeFactor` as well, as we don't want to make that change, so it doesn't matter.
I don't think this file needs to be part of this PR.
I think this should be in a different commit.
I think the `ignoredEmail` can be removed as we do the same here as the tests in `E-mail`
Could `map()` be called as a result of `RunnableNodes()`, which can be `null` here? I wonder if the `RunnableNodes(role)` could return `null` if the value is not null?
The `super(props);` is now removed. I think it's safe to remove the `thing` from here.
I think the `@Test` field needs a parameter to be removed.
We should check the sort time.
can we put this line in the if block above?
This is not an overload of `IImmutableList`. It seems to be a better name
This should be added to the service type.
I'd suggest moving the `t` to a new line
Why does it use `gpx` if you don't use `on`?
This is removed because it isn't used
I think `this.exporter.Export(batch)` is also wrong.
why did you change the string to details? the assertion is really confusing, because the error message is confusing, as in: "assertIn('id') is a string, not a string, you need to know whether it's a string or not.
`*` appears to be unused to me. If `*` is the only thing that's used by `ar ugugments`, I don't think that's a problem.
The only thing this means if we use a single default, we could use `width.maxWidth = 2` instead of `width.maxWidth[ 2]` in the `width` where the value is "true")
This is not related to the changes in this PR that might change a bit. The changes in this file are not relevant if the changes don't seem related to the PR. The changes look good.
Why did you change the order of the parameters? It looks like the wrong order was removed, or it's wrong. If the `force` was removed, the `force` was removed.
I believe this part can be removed now.
Would you mind adding a link to this issue? Maybe we should consider it a lot of things, to avoid having to do something like "if not appear in October, which will not appear in a plan in October".
Please add the new parameter.
nit: `in` -> `in_on`, `in_in`
Line is too long. [90/80]
This is probably not a good reason to fix it. The user will be able to fix the `/` to use the old version of an API without an explicit deprecation. This means a non-`name` will have to be updated to set the value to `/`. If we're not going on the user's version, we should be able to set a new version on this.
I guess `var` is unnecessary here
Do you want to consider making it `s.Equal(3, 2, t.NumOfCallToPayloads).Equal(2, d.NumOfCallFromPayloads)` ?
We usually don't use wildcard imports.
why did it change from -attach to -attach ?
I think this can be removed completely.
Is it worth adding some sort of `using java.nio.CloseToEmpty(java.lang.ToEmpty).if(e.report(java.lang.IsAny<double>(), It.IsAny<double>())` to make it easier in order to handle the case where the key is null for a timeout?
I'd like to see this change being made so that it's only used in an `if` statement above. The logic in the `list()` call below will fail, even though `self.dao.iter_cai_assets()` is called everytime.
`DEBUG.info` will take a `artifact` instance, not a string.
Is it safe to get rid of `ContributorFact` here?
nit, should we call this `i-amphtml` instead of `var`?
This will throw an un-necessary error because `privacyParametersBuilder` is `null`.
why is this removed?
Please update the doc for all the other checks as well.
nit: include above
Shouldn't we check for `LambdaMethodReference` too?
This should be a public API (see other similar functions in `io.prestosql.spi.util.filesystem`).
nit: maybe call sys.version_info < (3, 3) to keep the same range as sys.version_info = python.3
I'm not sure it's worth adding an assert here.
It is a good idea to make the `id` optional and pass it to the `MakeMdID` object. The other way is to call it `id`?
Is there any reason to have different dependencies from `Word` (which we don't have)? I would like to know if that is a problem, but just wondering...?
I guess the new name of the file should be renamed
I'd like to see this in a separate PR, but this is a much less readable way to do this.
is there a reason for moving this TODO to a list?
Can we just use `--snapshotcling`, if that doesn't work?
This test case is not tested.
@saghul, can you confirm that this is a valid expectation? Are we planning to do that for batch size?
I don't know how it's possible that param method will be called in different ways of creating a new task instance. Could you please add it?
"arguments-out-of-order" is a better name. "Positional arguments are out of order"
The result of `SnackBarHandler.show(coordinatorLayout, getString(no_account_signed_in));` has been changed to `Snackbar.show` in a future PR, but I wonder if we can change both `SnackBarHandler.show` to use something like `showBar` for example?
Please use `toHosts`.
I am curious: why not replace with a `#empty` method?
I don't think we can set it in the `else if` block
Can we put this into the main folder instead?
I think `data store classes` is more clear
Do we need this? We do this in the `if` condition, right?
(style) trailing whitespace
This will also work with other uses of `den_MARK` which can be more obvious when a row is deleted or not
This could probably just be `dependencies = set()` since it's now a `Set()` method.
Hmm, what is the difference between escape and non-safety()?
This doesn't have to be done in other places
I think the function name is a bit misleading. It's more explicit. How about `runtime.unsafe`? `TestCase` or `runtime.count`?
Is this intentional? Or did you remove any of the code?
you can remove this space
Please revert this change (just for the other PR as well)
`log_no_form` (and below) would work here. I'm not sure about adding it, but it is not really a great idea.
This is still used somewhere, right?
nit: could we name this "old" to be "not"?
This change can be reverted.
why do we need this?
This is where things could be changed: 1. There is a `tenacity` constant in the `io.prestosql.spi.2.4_2` 3. That is what I meant earlier, so we'll be consistent. 2. The new test was `tenacity` for `2.7.5` which I would like to show up a more complex value.
I guess we should use the `@param int` annotation here too?
The null check here doesn't seem to be necessary, because the `SyncSync` function has been moved to a separate file.
This will not work. We're using only the full path for any ID (and any other ID) that we can use in this PR as the `.setProfileID( '' );` will do the trick
I think we should keep this test and check for other tests in there and make sure to check for `out`
nit: remove this?. Just use `.id.parse(t.must_render_template)`
Can we avoid having to do metadata check against nil here?
This name is misleading. `unicartMailer.cart_notification_email` is only used in a few places.
import * is not recommended
Nit: I'd call this `createDataReference`, since that is the same name and we should not rely on the `createDataReference`.
@KlausBSautter why did you have to remove it?
I don't understand what we want this to throw. What about something like "throw "Value"?
Doesn't that mean a ` txop_write` call will not show the block every time?
The type is `Params`, not `interface{}`.
It would be nice to add some new constants to the source of the file
We'll need a change here.
Let's remove this and use a `pytest.py` in other files too
Can you use `from builtins import replacements`?
You should be able to just use the `ch.Makeos` helper rather than a default.
Just curious, what is the rationale for this change ? why is this not `Yield()`?
Please use the the default methods in `disabled` so that it can be used instead of this method.
you can drop this space after it's used in `auto space`
should this not be part of the `AbsolutePath` package?
We should still be relying on `connsRespSubj` to pass `auth` to `pants. accConnsEventSubjNew`
@tnozicka this is good for #1717
You can use `\FrameworkBundle\FrameworkBundle\DomainRouter\DomainRouter`
This should be: `if (!added_new && is_merge_or_booted) && is_merge_or_booted` If the deployment is set, it will be used.
This is a no-op change, right?
this is the actual fix, but I think the test can fail (which is wrong), but it doesn't have any unit tests
Shouldn't this be `if agent_is_crawler? || skip_session_tracking?`
Should it always raise an exception? I think `self.data_infos` will raise an error, which is not the case for the test.
This file is no longer covered in GNU General Public License.
`* 2 / 3` might be too short for a long time.
This is not in our codebase.
Please use `List<FieldView> fields fields` to be consistent with other API fields
Please remove the Scorable scorer field from the field. If you need to change it in your IDE, please add a TODO.
I think the line should be removed too
Don't do this without `required` here.
Why do we need a wrapper here? Is this because of the two other `getState()`s are called multiple times?
I am not sure about this one
nit: can we make it a `true`? I think we should be able to just use `true`.
We can now get rid of this. `blockSignerAddress` and `minerAddress` still exists.
I think we should use the same value for 3.6.
@tgamblin I don't think `tm_py` is used anymore.
Maybe we should add a TODO here to remove this?
should we make this string be configurable?
I believe we should be fixing the same protected method and use it everywhere.
Is there a good reason to have this in a test? It's not clear if we are going to want to support this, it's probably better to have it in a `util_util.js` file, and use that in all places in this file.
The param was changed to avoid a `null` check in the param that was removed.
This needs to be removed. The `HAVE_RSEQ` above is called for a different version of the `HAVE_RSEQ` object.
Group with the other stdlib imports
this is an error! the origin doesn't match any other read may be useful
Is this still used?
This is the only place where we want to support the client thread, so we can set this via `dynamo_thread_init_wait_for_event()`. In the future, we should only be calling `dynamo_thread_init()` if we are in place, right?
Do we really want to use this for everyone? I would expect that the name will be a good idea, since the name would be a bit confusing. Maybe we could rename the function and call it `Body_lambda_name`?
The method description looks odd. I would change it to `NewVersion`.
It seems like this is not really needed? The `!workflowservice.PollWorkflowTaskQueueResponse` should be &workflowservice.PollWorkflowTaskQueueResponse, not &couldformat
Should this just be done in an `if client_options[:read].is_a?(Symbol)` check instead? That way there is only one client if `read` is provided.
would we still need this flag? `facingMode` is set in `enabled_preferredMimeType`
Should `haveLayoutEntry` be in `AwareCacheCache::LayoutMap` ?
Why does this change? Svc has nothing to do with this PR.
this change is not necessary, it is not related to the issue.
i think it should be `_, _,`
This test is out_dir from source code. It should be checked in.
Can the C# provided value just be named `""`?
Is it possible for Interop\Container\ContainerInterface to have an Containerop? I think it's better to implement the namespace for Containerop.
Should this use `docroot_path` instead?
This is a public API, I don't see a reason for it public.
This will only work if the context is not the node node (which is what happens for `app.X`), right?
Do we have to worry about other keys? Or should they just be inlined?
Can we remove this? It seems like a change in behavior.
This file shouldn't be here; it should be removed.
This is a good change for the others to the snapshot snapshot. Can it be removed now?
"key1":"value1" is not the exact same thing. Should we use "l"?
I'm not sure this `icons` is really necessary. The `outside` array is an array by default so you should have a constant `icons` and a `nn` array on the object.
Can you add a line in the docstring?
I'm not sure whether we can make this a `Optional<string>` or a `Optional<ID>` because it's not an array and it has some meaning.
is the idea here to use `GetMethod()` rather than passing in a pointer? the `GetMethod()` is not needed anymore?
I don't think that `--normal` is necessary. It is only for the use of `--normal`. I'm not sure why this should not be here or in the other test.
`errno == EAGAIN` should be in the config instead.
NIT (non-blocking): I think this can be simplified to `. hasattr(self, '_keys')` instead.
Why try to catch the bad practice here and in the other places we just wrote it?
we may want to move this check out of the function, so we only need this in the `if (host['ssh'] === port) {`
Why not use package-private functions? I don't have a strong opinion on which internal/there is already a `package.io.*` file
Can you update the doc for all the others?
Nit: It's a bit confusing here, but maybe `column_sdf` could be null or null?
nit: remove this blank line
Why do we need `type` here?
This should be protected.
is integer is an int?
should this be called "set_view" instead?
Nit: remove extra new line
Why is this needed here? We seem to be calling `CopyCopy()` before and we seem to use `ex` in a bunch of other places.
These two conditions are also not necessary since they're in the same namespace
`paste-primary` was the only thing that would be used here. `send_cmd` was only for the rootless `clipboard` which is used for the rootless and is also not the rootless. So, the `clipboard` was the only thing where you've been able to use `send_cmd`.
We should make sure this value is not nil...
This is just a bit confusing because it's not part of the `object` table?
You don't need to change the tradePartner here.
This seems like something that should have been added in the group by, should we have this in the group by instead?
this should be a separate PR
why would you remove the transaction ?
@mmaxim can you change this to `api.SpecSpecNodes(api.SpecSpecNodes(arg, minified))` instead? This way it doesn't have to be a `nodesRegex`
One small thing I'm not sure about this. I think it would be cleaner if we called this `account_map.new_record?` instead to make it clear that we're only calling `account.create` for a user. It's okay if this method doesn't exist, but if it's safe to call out, I'd probably call it `account_map.new_record?` to avoid the need for an `map` check in that case.
Why do we need an `-1f` check?
Why are these strings used here instead of at the start of the loop?
add a new one to make sure this works too
@sparrowDom Could you please check if the time we call `exporterOptions` without the parameter is being used here?
I would make this a `boolean`
I think it would be better to return a `FileUtil` instead of using `readDownloadHelper`. Also, I guess that is what we want to do for `FileUtil.isPreviewAllowed`?
Can't we also remove these?
I think maybe this should be `LOG.info()`
this is the new line that needs to be removed
why not put the other test in the future?
This file is probably not strictly necessary for the tests to pass.
this should be `db.capacity == 0` I think.
`mutex` will always be the lock right? If so maybe we can mark it as empty?
Is this needed?
Please use a different name to avoid the bundle, it will be used only when `dbName` is set to `null`.
I'm not sure if this should go before calling `handleCaretMove` in `_ptx`
I think we can just remove this method entirely.
@nvda/scala, do you remember why you needed this?
I don't think we want this to be here or we can actually just get an error if this is true.
Shouldn't this be a `README.txt`? I would have expected to see what it's being used and I think the error will be fixed.
I don't think you should add a specific function here. Instead, add a framework (nn.Module) function to ensure that it is available to the child child model.
should we add an example of how `nixpkgs` could be present and only do `int` once ?
Please don't remove this as it is just dead code
I would expect this to fail if it is IP IP
I'm not sure how this should be used. Can you file a JIRA and link to the new enum?
I don't like having `secondaryConfig` in the `lastCommitVersion` as the default. I would think we should just remove it.
Line is too long. [83/80]<br>Use the new Ruby 1.9 hash syntax.
nit: It's not a good idea to avoid having to add this block into the `generator->setProcessLOB` function. It might make things clearer to you if it was done somewhere else already. If it's a separate issue, please revert
missing spaces between tags and summary for better readability
Is the `return;` the next line?
Is this include needed?
I don't think it is a good idea to have the cache cache anywhere in our code. It's fine to just have it as a dependency on the `Context` interface.
Is there a way to get rid of this?
This is not correct. We already have the `else` branch.
This should be `Logger.getLogger(WebUtils.class.getName()).error("AzkabanEventReporter.class);`
Can you add a `TODO` check before the if? In case someone wants to make sure that this line only applies to the if block?
`body` -> `resp`
I don't think this is needed
Why do you have to change this?
Why is this not a pointer?
Is it possible to have a `Float` argument for the type of the `context_gpu` object, if that object exists?
Why the change?
Why did you remove the two color attachments?
We should also update the name of the `HeadLess` too, and be consistent with the rest of the PR
I'd rather add `type=False` here to avoid defaulting to true.
Do we need to import that here?
I'm assuming this is the keyhint keyhint.
This one probably breaks the test... but if anyone feels strongly wrong I can live with it.
This is a change in behavior... why not use a reference here?
Do we need to add `--options` here, as now we already set `--options` in the `build()` method?
Is it worth it to check whether the `returns` returns the card?
This is just for consistency with the `outside_projects` method, I don't want to pass in the `outside_projects` method here. If we really do want a separate set, then there will be no need to set it.
The only thing I've been trying to use this method is to copy the Date from the response to `null`, and if so add another one in the future. That is a bit of a mess, I think it could have just been the point that it won't actually copy in the case.
why change this test? To To To To To To To To To To To To To To To To To To To help?
`TaskCPUMemLimit:                     BooleanDefaultEnabled` is set in `false`
Same here, if you set the variable, you will get the variable as well.
Please, add "or modify" in the description
The problem here is that you are not using the `mysqld.sock` fixture. I don't think we should include that in the `mysqld/mysqld.sock.dev` path anymore, so I'd be surprised we didn't have a check for that.
Rails/InverseOf: Specify an :inverse_of option.
`(stream->tunnel == NULL)` is also useless
(style) line over 80 characters
What's wrong with passing 0 here? Why not just use the `other.blockStates()` part?
Why did you remove this?
It's an API method, that was not called `const std::unique_ptr<MMFFAromCollection>`.
Can you check for `version` here?
Can you use uint8_t and use `Pattern.MAX_VALUE` instead of using this method?
This should be GapicProductConfig.create(model, configProto, TargetLanguage.GO);
I think we should probably keep this. The `breakPos` field can be set by `replacement`.
Should probably be in a `*`?
This change does not seem to be related to this feature.
This could be `@param int?`
why not directly using the constructor?
this is wrong
I don't think there's a need to explicitly call this private to `headlines_ID`? The `private` suffix seems to be a little odd.
the heatmap should be used here, and then we have the map in line 246. In theory, it looks like the map is not used anywhere.
why are we changing the string from the names?
I see that the `sns` image is used in many places. Can we leave it here as it was ?
@jona-sassenhagen this was the only place where I needed it.
This file is now getting set in `testdata/enc-too-new.conf` now.
I think we should use `null` in all the other PRs as well
I don't like this, I think we don't need to pass true for everyone.
This function is not required, it's only called when `--tab-buttons=True` (the function is always set by the click-buttons).
Should be `init(GatewaySolverEnabled);`
I guess the `debug` is already on the configure method.
I'm a little confused by this. Can't we just use both?
Should this be renamed to `getBuilderBuilder`? It will be clear when we will use the `Service` method.
This is a bit of a hack I would change the signature of `bp` to something like `get_DA3339_bp`
I think this is a breaking change. The `pkg/util` package should be grouped with the others.
Is this still relevant for future proof?
Why is this necessary? IsolationLevel always always false, when the default is true? It will be enough to just return nil if the default is nil, and if the default is set, this will never be true.
why remove this? Is it because it is not used?
Is this removed from the commit?
Do you think we have an extra whitespace here?
The other way is to make it clear we don't have `read all` on a parent and will read all?
This change looks OK but I'd rather you pass in `LogManager.ThrowExceptions = true` rather than set it to `true` here and then pass it as `true` here, then later later in the `Set` below and `true`.
The `return profile + value` should never return null, right?
If `entry` is null, should we use `this.entrySet` ?
Can we add these to the `user.go` file?
why this? Why isn't this just a separate commit?
The config can be removed as well.
Shouldn't that be set by `custom-elements-es5-adapter.js` ?
Can we rename this to be `WelchWindowFunction` or `BOMWindowWindow`
i'm wondering if this should be `d = corrected.Clock.Duration` and then `d = corrected.Clock`
Should we do `this.get<1>` instead of DrawColour? It's a little bit hard to understand.
You can just use `typeof(int)`, I'd rather use `typeof(int)` instead.
I think it is not correct to print `missing` in the if statement above but the result is not dropped.
This is a little hard to read, but can you replace this with something like `<StringValue>{{ value.value_value }}</StringValue>"`?
Is this needed?
This might be problematic if the source snapshot comes from the source source. This should also take a look at the existing code and the second call to the source method.
Not related to this PR but we should be able to remove this in this PR.
Can it be `default:` instead of `case`? We are not actually creating the default in the `for` loop, and it looks like they are the same.
Is this necessary?
I don't think `# `attr_value['string'] is not None` probably probably not required as `attr_value['string'] == value` would work. I think `attr_value['string'] == value` would work, and if we want to support that, then we can remove `required as `attr_value` from the `attr_value['string']` and `required as `attr_value` would work. But I think it's probably not clear to me what `attr_value['string']` is here, or?
Doing this reader never used. Why not use the `metricReader` reader?
It seems it is better to use `Set#Kill(String)` here?
Why not call this `HttpClientFactory`?
Thanks for the PR! Can you change the indentation to a method on `Builder` and not a single `.{`?
this is wrong. You should be able to remove `env_type` now.
I think this is the only place a test where the error is raised. It should still use the same error condition.
I guess this can go up to 4.x as well, right?
This line is redundant now
Use `changed_attribute` to be consistent with the above.
I think we can just use `GetItemLayoutId` here? It would be clearer if `GetItemLayoutId` was only used once for all the tests.
Can you explain why this needs to be here? It's a private method.
Do we need to handle a case when we're already creating this at the moment?
@bvaradar can you explain why we need this change in the commit title?
I'd call these, `return r->impl->renderbuffer_from_image(expectedl_image);`
The `.on\\` and `.sources\\` aren't used anymore, perhaps we can just put it inside the `.read` table, since it's a static constant in the `.read` table. It's probably better to use something like `.read` and `.system` and `.user` to make it more clear that this is a dictionary rather than a dictionary (the current `.read` attributes are called on the main object). What about just `.read`?
It looks like there is some way to fix this test in this test function, where you could use `is_ll` instead of `===` here.
Can we remove the filter for this field in the test as well?
If we're going to add a state to `ECS_SPOT_INSTANCE_DRAINING_ENABLED` this is the default value for `DRAINING_ENABLED`
This file should be removed as it is now only used in `mne/utils/core`
I think we should just make these conditional based on the implementation of the conditional, otherwise it can be easier to understand if we just use the `TranscodingInfo` instead.
Line is too long. [84/80]
The default is `true` to ensure that the default is `true` when it isn't present (not that it's a problem problem, just asking)
The default value should be lower case, I think.
@nmittler - is this a problem that you're trying to do in multiple places?
Why did you drop the range range?
Please move this to the top of the file, where we use it. In general I would like to move it to the top of the file (and put it in `signer`).
Style/UnneededInterpolation: Prefer `!decl frames.localized?` over `|| false`.
why is this needed?
The kvs size should be changed to `kvs/txn_t` instead of `kvs_txn_t`.
this is wrong. When `check_when_searching` is `scrolling.bar` and `check_check_bar`. If it is a property that has the same set as `_primitive_bar`, then we will have a `check_when_searching` property.
A bit of a nit: could we use `sys.getfilesystemencoding()` here and return the encoding directly, so that we won't need to `decode` if `fs_path` is not a sys.getfilesystemencoding()?
I think we need to remove this interface. It's a very good thing to do though.
This is probably a good reason not to make this change in the committee.
The name `CryptoSm2` is misleading as it is the default in the name of the chain so it might be clearer that this is an empty struct
Why not `load`? This way if you are setting the `load` value in a few lines below, you'll need to add a new method to the method and pass it to the method.
This should be an error if the user doesn't want to know whether it's non-nil or not.
The same is true here, but this is fine.
this is the part I did forgot
Is this a good idea to move this down into the line where it's used?
Can we keep that?
I think I saw this being a little confusing to see it in the code base.
I'd use an enum for this.
can this be removed from the PR?
These are really the only exception I'd expect...
@mramato do you know why you needed to add `--fmt`? I'm surprised that it works with the change in #3333
this might be `<none>`
Why not `TLS`?
Should not this be `volatile`? Why do you need to set the fields directly? I would recommend using the `is` and `isPort` in this case.
@tgamblin do you think we'll need to bump this into a constant in `setup_environment.py` and check if it exists in `setUp_beam()`? Or did you have any issue with that?
What was the purpose of this change ?
you need to do a bool here as you already have a `map[string]bool`
Is this used somewhere? I am not sure if this should be changed afterServer
why are these changes required?
nit: the spacing above is off of the string.
This is a bug, because if any of the `go` calls `run` will be called multiple times, then this should be changed to ` go`
Nit: I think we should remove these.
This is the only place where we call this method. Should this be named something else? (In fact, I'm wondering about this PR, I'm not sure whether it's worth it.)
What does this mean? What about just changing the string? `if just one : "map { tag.tag.rstrip.join(" ")` seems to be the only place where `if` is used. I'm guessing you're trying to avoid a string and only a string?
I think we don't want to be able to use the domain from the closed implementation in the interface, because it can just be `null`.
In order to check that the template is valid, and the data is not valid as far as I can see
The original code had a bunch of changes, so this is not the case anymore.
I think these can be final.
Remove trailing whitespaces.
i'm not sure why this is changing?
use a function like above, not need for this variable, it can be used outside the for loop.
nit: can we use `ImmutableList` here?
this is only used for the one in a few places (as it is not in the same order as above)
Is this a valid package? Looks like you're using core.NewBuildState directly.
Are we sure that is correct?
There should be some sort of "drm" style like other header files.
Hm, not sure how we should do this.
Is the intent here correct?
This is a BC break.
Can you move this up in another PR? I think it's a good place to put it in an if/else block, since it's only used in one place and should be part of the if/else block
The error message can also be improved.
This seems like it should be done when we set `inputPattern` to null.
I think it would be cleaner to have a separate overload with the old and new one for clarity.
This seems like overkill...? Why would we need to wait for this?
`metricNamespace` is a very specific name to me. I think this is the better name for this.
Do we need this?
It's a bit of an improvement to change the behavior of this method to something more general, especially in a few places, maybe a better idea for the future?
Same here, why don't we use the absolute `special_ibl_xfer_tgt`?
Does this overwrite the default `tid` parameter?
Won't this cause some problems?
I'm not sure if this is the right fix. I think it might be better to just check if `node.querySelector` is true and then check if the button is present.
Can you make sure the latest version is the same as before?
I am a bit confused as to why this change is here but is it a no-op? Is it possible to change the condition in `typeof`?
If we're not going to do this, wouldn't it also be easier to just do `--with-approver`?
This is not used anywhere. Please remove
You should make this the default.
We'll need to check the default value here.
Why not use "list" here as well?
We can add a custom node to the source and use that in the future.
This is no longer needed, you could remove it now
I'd like to see this more readable... I'd rather not use "application.net" as it is used below.
why this one is changing? it doesn't make sense to keep it the same as `8` above.
`WithStamp` now uses WithTagID. It's probably best practice to use `WithTagID` in this PR as well.
why change this?
nit: it would be nice to have the F8 version in a separate line that was used here. `'\uE000-\uF8FF' + // Private Use'`
It seems we're not in using any attribute name?
I like how I missed this (and I don't like this), but it is not clear that these lines are actually used. Do you have a look on the code that makes sense to have a `vscode` in the list?
I think we could add a `.Getgapic(language) + "_gapic"`
The go-go import should be removed entirely.
Nit: would make it more explicit that T is the type of the struct
I'm curious about using `== 0` to preserve the current behavior. And I don't see an example of a case that ` snapshot` is non-empty. If it's empty, then I think the default value should be `0`
`if isinstance(dataset, 'num_classes', ...)` would be fine
pin is no longer available in the release notes, so the default should be the assignment
I think `Encrypted` and `SectionSize` are better named `_                          `.
So we only need to handle the MIME type in a single object? Why not just initialize the `r.Attrs()` to a string? Or `return r.r.Attrs().ContentType()`?
Can you explain why this works? It's just a cleanup.
I think the default should be `""`?
How about a constant like `rollback`?
We should try to avoid testing for testing for tests.
This is just to get rid of the revision here
There is a space between `:` and opening parenthesis.
Why is this necessary ?
I'd rather not use `log_path` at the end of `no_window`.
this seems a bit hacky? is there a way to test the right approach? if the `purchaser` is an enum of a `purchaser?`?
`has_fee_estimates` is deprecated, but `has_fee_estimates` is required for `deactivate` files
Would be nice to have some context about this. This should be an `id` to have a default level fields that is true. We could probably just call the `TopLevelCondition` function and return auditLogsSourceCondSet.Manage(s).
I would suggest to add a `required=alloc` parameter to this function.
We should use an interface for these functions that use the same name for the `query` parameter instead of a `Query`. We can change the interface to return `Query`.
I've been wanting to make sure that we are using the wrong metric name for the new API.
Use empty? instead of _added.count == 0.
Do we really want to do this? If so, we could use the settings file for that purpose.
Not sure why we have reset in both cases here, what if we added a new one?
This is an unrelated change that doesn't need to be committed.
Same. No. I know there is some issue with this change.
I guess it's better to move this to the `if (wasDeleted)` check above, since it's done above.
I think that the policy name could be more clear
This function returns nothing to do with the rest of the method. Call and Stop in the web struct. This way you could just use `Start` and have a single name like `Start` on the next.
Can you move this to the top? It's only used in the file.
I'd prefer to see this in `testing` as the default.
I think `row` and `row.Replace()` can be removed from here and below, right?
this is not needed.
Can we just have this in a separate if statement?
Could this be `""`? Also, why are you converting the condition to `""`? I believe that you're just removing the "epoch length" part, but not a `list` part?
I don't know if `plz` is the good. I can't see this change. A lot of the code in this PR is a bit confusing.
I think I would prefer to use old code.
This should also set `mapper` to `null`.
I assume this was for debugging?
The `int32` here doesn't really fix it, so it is unrelated to this PR. I'm a fan of doing this in the past.
I'm not sure what `DECIMAL_LITERAL` means... but it is still used anywhere else, it is just removed from here
Please also update the doc.
I'd suggest moving this test to a separate PR if we can.
Maybe we can just add the `Windows` to `StopProcess` and remove the subtraction?
It seems that the `GetConfig` function should be renamed to `GetDefaultConfig` since there is no reason to keep it.
Can we change this to a test case for `line`?
This will not work, because there are more instances of `ttype`, which might be more confusing and more correct.
I think I'm not familiar with this. For example: `s.Noticef("Server Exiting..", sig)` is not the responsibility of the client to the client and that's why I didn't notice it in the following test. The `defer new server` was not used for the Exiting..
We should log it here, not letting the timeLeftToClaimRefund be zero, or does the timeLeftToClaimRefund happen?
Maybe this should be a helper function?
This should be a tuple.
I think that it will need to be refactored to make sure the implementation wasn't actually registered.
This could be simplified as well, no matter the other code.
Do we need it anymore? Can we do it in a follow up PR?
Why change the order? The pattern of passing a `Long` field should be the default
expect = `d.expect` is probably a typo?
What will happen if there are two different options (i.e., the actual zoneID is not nil), then we won't get that technical debt here
I don't think we'll need to check for `self.prob` and `self.uniform` if `min_ratio` is a `1` (or `int.randint`)
Why do we need to check if v is a dict?
The same is in `pkg/testserver` but in `pkg/testserver`
it would be better to pass in a single line.
Why is `spaceId` not passed to the string?
This can be removed.
**Open to to** num_id**
This is needed to ensure that `DBPDataSource` is always available in a public API (if that was the case before).
is this related to this PR?
Should it not be removed from here?
this will need to be done on the `role.setAuditEnabled` method, right?
I think there is no way to get the Felog to this variable, it is not a concern with the current current system? It seems the code will need to have to be handled by this point. If we can change it to `ExecAgentLogConfig` then we don't want to expose this config to the `seelog.xml` and have it go away in the future.
I wouldn't do it here because of the "manual_wall_time_option != 0" part. Also, if there is no worker_start_time, then this is a manual-time.
So is this always true? I'm thinking `Unwrap` is the proper name.
this import should not be needed anymore
The default value should be `distributed-` not `houseOwnedByAccount`, no?
The unused code is removed.
I don't think this line should be here. The param name is a bit misleading.
why not just remove this?
I don't think you need the extra parentheses here
You need to add it to the `package main` package.
Was this a typo?
@matt-gardner what I have here is `_POSIX_C_SOURCE` in the `LL` header?
We don't want to pass null for `client.getLocalPlayer()` here, so you can get `null` here.
Could you please change from `<=` to `>` ? The `>=` is only used in one line of code. The other is a bit odd to me. It is the same problem as `>= 0`.
This line needs to be removed as well. We can't do any validation without any .ctor.
You are not using `break` in this file.
`StatusContinue` is used by some other StatusContinue, so why is it not set?
Another reason to use `copy-groth-params` here is that if there is a package for a subclass then you don't want to copy Param cache and then use that here.
I wonder what is the reason we're trying to do is introducing a new flag.
Shouldn't it be `*listen*`?
Can we just return `<clang-diagnostic-'>` here?
I'm confused... Why was this changed?
Why not do this for every request?
This feels like a tautology. Why did you change it to `dpl_install_command`? What if the user specifies both in the list?
change message to `run_as` and add a space before the `if`
Can we remove it from the `@private` ?
I think you can just use `Conflict` instead of `journalPausedFromConflict`?
Is it possible that this function will never return false by default?
Why did you make this change?
Why do we need to make an exception when it's a new attribute?
The original version is not the same as the default one? Can it just be the actual name?
I'm surprised this didn't show up when the scope was made and the `tx_begin_read` changed. If it's called, it will be used as the only call to this function.
this should be done in a different PR.
shouldn't it be `if (*(Lng32 *)op_data[1] == 0 || *(*(Lng32 *)op_data[0]) `
I'm not a fan of calling a `while` method here, since it's an integer. It seems like this should just use `< 0` or something like that.
`fullResult` -> `raw`? `fullResult` -> `raw` (or `allowResult`).
I'm not sure if we actually want to add the `security` field to `metrics`?
Is this needed at all? Does it seem useful to have a unit test?
this is a bit of a logic, we might want to use `this->` here
remove unused code
maybe better just return `current` instead of `object`?
I don't see any logic to this code from the view file anywhere else, is it useful to have a different form than just a different approach? (I'm not seeing if we can make it clear that this is a part of the view file.)
I think this test should be done in an `after_args` block since that is where it's going to be called
There should be a check in the `default` method that does the query
I'd prefer to keep this simple and make it clear what is the best name for
Why not use `Objects` and `MoreObjects` directly?
This is a mock so much cleaner!
@agramfort this is a breaking change as it will break the schema that's not present in this case
this is an actual bug?
You should use `api.service.joplin` instead.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I'm not really sure about this. The reason is that if someone is setting these configurations, the "official" configurations will have the same meaning as the "official" configurations, which is not just the one you're trying to use. If there is an issue, we should add them here.
This needs to be moved up into `construct Bucket` so that it's no longer used as blob.Bucket
Why not use a pylint?
I think you want to do this in `buildTarget::membersStats`
I think it's better to leave these as-is, it's a separate PR
Can you add some more to the existing `iframe.configure` call?
I think we need to do this because we can't be sure that the rule can only be present if the name is `long`.
I'd rather this be `Source.Status` everywhere.
Can you add a `protected` to the `Dictionary.GetType().Name` ?
Use the new Ruby 1.9 hash syntax.
should we log/err here too?
Boolean can be null here as well.
Should this be in an if-else?
This should be removed.
Maybe add a `TODO` here to make sure the `Status` is not a `time.Now`?
Line is too long. [81/80]
`json` is unused, this is causing the test failure.
Do you think this should be `multiple addresses()`?
This can (and thus the `@` loading) be `typing` (and the `@`)
shouldn't we be using `pytest-benchmark` here?
This looks like a problem. I think we should not call `h2o_http2_wbuf_buffer_prototype` after this one. The existing code does still call `SCrrush_read.h` in `SCrush_read.h` because that's what the user could use.
It is a long and should be a `spec`
This will be a breaking change. Do we have any other options here?
We can remove the `WebDriverException` class entirely, and put it in the class.
I don't think it is worth making the new field `_value`
What is this used for?
`nullable` can be null in the function name, it should work
IIRC `selectColumns` will fail when running the tests.
Should be protected and protected.
This is still useful when you use the `platform] =~ /cisco-5/` route.
The secret name appears to also be the number of secrets, so this should be the number of secrets, right?
We could remove `slaveOk` from `crit.jit.slave` now since it's not used anymore.
this is not a function, but it's not really a function
why do you remove the `times` here?
remove useless empty line
I think it'd be cleaner to do `dtype=` instead of `bufferSize_as_ulong`
I'm not sure if the previous behavior makes sense here as I'm concerned. The only thing I'd expect is to be able to see if these changes were made and it was more correct in the future.
This should be reverted.
These two lines seem to be repeated 3 times.
Why change this?
remove useless newline
I think you need to check `IsEmpty` here as well.
this is going to be a problem. if a task fails then it will be executed at a null-time state and the task fails. I think it will be useful to have a test that checks whether the function has been initialized before.
This line does not belong to this PR?
I wonder if we should check for a `id` here. I don't think it is a good idea to have `id_id` as a name.
Oh nice, nice. Any thoughts on adding these `build_package`s?
Code Standards: Please remove the space after commas.
Should we also check elementText.contains(text)?
Should probably import this from `github.com/influxdata/plan.js`
I'm guessing these won't be necessary at all?
This should have been changed in #ifdef
This is the only place where we use `diagving` in `instanceType`. I'd rather use `diagving` in the `instance` method.
I think this will be better placed into `TimeLake.utils`. The `customReadReceipt` class is a bit ambiguous, since we don't know if we can set the `ClassAuthButton` to true by default if `TimeLake` is true.
The default 1.4.1 was 0.
This should be done in `errno::get_package()`. This would be an example of what this `===` means.
I think that we should just make a new `th` handler in `inbound`
I'm not sure that this is the right approach. It would be good if we could add a `io.prestosql.spi.GetDoesFoo` (in `io.prestosql.spi.Parameter.Getio`) to add `spring.NetList` to the top level map. I think what I'm trying to do is add `io.prestosql.spi.Name` to the `.TagList` to add the `.TagList()` function, and then we don't care about the `Name` parameter.
What do you think about making it a constant?
How about just `dial(hostName, tlsClientConfig, false)`?
This is a very specific bug fix. Is this going to prevent the CI run?
I don't understand this change. Is it the case that we have invalid request?
I don't understand the purpose of this, can you just make this an enum?
I know it should come from another pull request, but I don't see anything to make it in here. It's not a big deal but it's just a thought.
How do you make sure it's here? Is it used somewhere?
This is used in multiple places. Can you use a better name than 16.5?
I would use `go-mega`, as the other things are the rootless name.
This will break any existing package that uses Am-io/go-ethereum in a future PR.
I think this method should be placed in `org.apache.thrift.transport.TTransportException`
I am not sure this should be `if netloc[:index]` (and it is not an `int`). I don't think that's the case.
this should be changed to debug level.
Is this debug level the same as the one above, or are we sure there is a better way to do it?
We should make this `Filters` to be more specific.
This is not used anywhere, and I think it should be removed. The code should never be CodeOK, but the error will be nil, this should return nil and (NIT) if it is, this should return nil. The status code will be `nil,Status`, and if we are not going to do that, we should return the error from the original function.
What does the null values mean? I thought we never read the default value from the default value of the default value.
I'm assuming that we are doing `getChromePath()` now?
It would be more appropriate to change the name to `name`. It also makes me wonder about the meaning of the name
We could make a default value of `caddy.LogDestination`, `caddy.LogDestination` here.
Can you also delete this import.
Is this still required? It seems to be only used by `object452`?
Is this supposed to be part of `if (_forCompilationIncludeGlobalprefix)`?
@jridgewell I think we should keep the `3kb.` prefix.
>VK_forward_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET [](start = 15, length = 15) Should this check be part of the 'VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-04615' variable?
I'm curious, why do you have a flag for this?
I'm not sure if this is an API or the configuration name. It should be an API or the configuration name. It should be something like `config.configuration.x.open_aire_api_base_url`.
I would have added it for the full `modules/modules`
Please, use the `before_one` helper.
Can we add a warning for that ?
This test was failing because Provisioners were not Provisioners but not Provisioners. The test is failing because the tests are failing.
@marcosrdz was this a typo?
This should be imported at the beginning of the file, and not at the top of the file.
This type is `#getKind()` in a follow-up PR.
Should we use the `type="button"` here?
`VID` should be `0x239A` here, I don't think it will be needed.
This is not really correct. The only place I put here should be `vStringTruncate` because it's already the default.
This may not be the right place for the "connecting" of the message. I'd be fine with removing it.
I think this could use `timestamp != 0`
Is `t.PrivateKey` used in the test? Seems that the `MarshalECPrivateKey` call has been removed from the `Test509` call.
I think this can be removed now
Please don't change the default value, it is not necessary.
Shouldn't this also be `const`?
The `Function` isn't required here.
I'm not sure if this is a reasonable place to put `generate_special` here.
Line is too long. [85/80]
I don't like this change. If the `info` call is needed, the code will be logged in the same function, so it should probably just be `finest`.
This is the fix that should be to not break compatibility with our test. Is this intentional ?
This import can be removed.
same here, we can use `accountActor` instead of `nil`
Is the old code related to the PR?
Please check with @gustavonalle-dev - if this is the correct fix to get the reg spill later.
@mramato do you know why this was removed?
I'm not sure this is a bug. If there's an error, maybe `Y-m-d H:i-dateConverter` wouldn't work for this, and the code will be moved to the `expirationDate` property. What do you say?
just wondering, should we do something similar in `vue` and `production` in `Vue`?
Why did you remove the `float` keyword from the docstring?
This is a bit confusing to me, but we may want to log the path as part of the API.
This method can be removed
This should just be `flb_debug` because if it's a debug message, it could be used instead so the whole function can take advantage of that debug message and just the code.
This was changed to use `rdl.Timestamp`.
why did this change?
this is wrong
Do you also also assert that the object is zero?
nit: could be a `const`
dam i suggested something you didn't add it in the past
This is just removing build time
>maxBoundDescriptorSets [](start = 8, length = 8) Why do we not return 0 for maxBoundDescriptorSets?
Please, add a note that this will not always be null, as it will be a valid user to use and will be able to get rid of an `object` field.
Is this the same behaviour? It seems like the same behaviour is the same as for `isNotView`?
This was not an issue that a bug was fixed, right? This will result in `ReconcileBootstrapData` even if it wasn't a bug in the `ControlRuntimeBootstrap`?
Why this pylint?
This change was not required, right?
I'm curious about this one, do you think it makes sense to have the `key_message` be an optional string for the string (so that we have two cases in the same class?)
@KlausBSautter is this import working on some side effects?
Why are we doing this?
I think we could keep both the fields and the fields.
Please call `std.h` from these two functions. We can't use `std_sending_` for these.
The new code here seems wrong.
We should just add this to `EndEnds`. We need to keep this around for now.
Style/RedundantFreeze: Do not use semicolons to terminate expressions.
Maybe it would be better to not set the seed on the seed element?
`&.` may be more consistent with the rest of the file
This was a bug, but the new test was failing because it was failing because the old code was correct.
You may want to add the `strdup()` function to the end of the string.
I'm a little confused by the `}` in this file. I'm not sure how to fix the problem here.
Why not using a proper proper consumer?
It seems like we could be using a common pattern to make it `nil`? WDYT?
nit: `<div name="pre" toySchema.pre(['save', 'findOneAndUpdate'])`
This is the only change that breaks backwards compatibility.
I'm wondering why these are removed and we are not not having a global state anywhere?
I think this was an improvement before...
Maybe `localtime` should be named `_` rather than `_` to avoid double negation
I think it is fine to leave this in. I'd like to see the ability to move it out.
I wonder if we should use index to do something like `host_cpid`? Would it make sense to use the `host_name` index to do the right thing?
why this change?
This should stay as `role` or `fatal`.
I think it's better to move these test cases, as that way you will be able to fix the test.
I assume we can't remove the field as it is no longer used anywhere and can be removed now.
This is a good thing. If you are going to add the `common` package to `github-com` you won't need it either.
I don't think that this line is intended. It's unrelated to the current test. Can you revert it?
This change is incorrect.
> 10 * 1000 * 1000
Please add a blank line between tags and summary for better readability
`writeLock` was unused here and used below to remove it from the `_connectionId` above.
I think we can move this to the `configconfig` package. It's only used once.
I think you can keep it as it is now that any enter key will send anything and we don't need?
Please use `checkExprDepth` from `group/config.h` instead of `checkExprType`. Also, `filter` should be renamed as well.
Why did this change?
This is just a breaking change, I'm wondering why it wouldn't go to the end of the file. I think the two fields should only be exposed if it was used, which is not really the case.
How about `this.props.editors = ...`
This isn't necessary, but since the first `is` argument is not `undefined`.
This print statement is confusing. It needs to be reverted.
why is this change?
This is unrelated, I'll fix it in a follow-up PR
I am not sure what this method was doing, but it seems that the order of the arguments are being the same as the parameter name. I don't think we can get this method from the bodyInfo. I am not sure what the order is for this method?
Why was this removed?
I think we need a different type for the new type for the `Window` (as it was before, but I think it might be worth adding a TODO)
this seems unrelated
This is good idea, but I don't quite understand why it needs to be the first thing. The second thing, if you are going to use Countries::getNames() to return a string, it would be the same as the last thing that you have in the first place. But I am wondering how we will be doing this later.
Not sure we care about this... we are using the same version for the new version in this case, and I think the new version is just `dict.from_version`
webserver.views.api.MAX_TIME_RANGE , , , , can't you remove the search and the tutorial?
I think the `&` should be removed here, since the function is used above.
I would put the `dependent: &conn_retries` in the variable name since it can be accessed from another module
I think you can use `repr(...)` here instead of `repr(...)`
This is a bit odd. What about we do a `nullable.Zms()`, instead of a class name?
i think this should go into the set of the tests
I think this import should be removed from the `GetNoInteractions` method and the import should be removed from the `GetNoInteractions` method
I think we should add `nit-primitive.logFor` to all methods in `DiscoveryField`.
The `containerMetadataEnabled` is not necessary. It is already a `os.Getenv`. In my mind, I think we should use the global container name which means it should be `containerMetadataEnabled` (and the value of this function could be a `os.Getenv`). I think it would be more readable than `data-containerMetadataEnabled`.
This could probably be moved into `_has_xcb_errors`
Why do we need to set these to default?
This change doesn't seem to be related to the PR?
i would use `6` to avoid duplicating 32-bit tangent (and maybe even more in the future)?
Maybe a `= string.log` with some sort of `log`?
Is there a reason for moving this out of the key key field?
You've forgotten to remove the mock
This if check should be redundant IMO
@jglick-gimenez The relypress bug here is that `mailhost.blackducksoftware.com` was a bug, right?
This `Debug.Assert(!_pinHandle.IsAllocated, "Ad-hoc memory block wasn't unpinned");` so we can keep this.
this is the wrong check. The defaultValue has the same name as before.
I think `Word` and `element` should be `import { map } from 'lodash'` (which is the reason for the error) should be a single string.
this is wrong, I don't see the code in the server. I guess it does nothing.
@bparees this one probably should be reverted now
Why do you need `||`?
So it's not a problem for us to have the actual error handling?
Should we make this `Query` instead?
can we rename this to `auth`?
Nit: `Message` has a value that is not null.
Should we have a test to cover this case in case a new request gets called, or will this cause an error?
Maybe we should also update the test?
This looks like the wrong fix.
this should be done in the `if` statement as well
I think this should be changed to include "algorithms/engines/mt2203/h"
The `preload_zero_count` is a `preload_zero_count` flag which is already set for every single process, so it will be checked in a bit too.
This line is now useless, right?
Can we make this `CharSequence` instead? That will allow for the string to be a variable.
@mitchellhenke can you confirm if this makes sense? The `Create` call is only being used in the code base, so it is removed.
Use the new Ruby 1.9 hash syntax.
You'll need to update the `cluster` case as well.
Can we make this test more verbose?
nit: can we do this before `if a.reGileLBAttachment`?
How is this related to this change?
Is there a reason for this change?
This file has no real change.
I would use a global option, but I think this method would be more useful
I think this should also be renamed.
Ideally this should be a `Iterable[1]` rather than a `List[1]`?
Shouldn't this be `Failure: failure.NewServerFailure(common.FailureReasonSizeExceedsLimit, false)`?
this change is not correct, it should only be here in case of paths
If you're using the same thing here, let's also update the other tests
this is a bug fix?
It would be good to use the translation here too. We could move this into a separate folder.
Can we use `taskPluginID_` here?
I think this condition is actually correct. If you are setting the "*", why not just set the unique key from the `Searcher` instead of setting the key from the `CommonParams`?
Why the change? Is this necessary?
You don't need the variable $exception here.
We have no test for this class?
What does this mean?
Do we need this function as GetParserWithBuiltins returns a new builtins?
Can you explain the difference between `cpuCircuitBreakerThreshold` and `isMemoryCircuitBreakerEnabled`?
I would prefer to have `@RewriteFiles(Set<DataFile> filesToDelete, Set<DeleteFile> mentionedService())`.
I'm confused by this name... Maybe "default_true"?
Should be the category in the `shortcuts`
I think we can remove the snapshot from the context here as it's going to cause a bunch of issues if we are doing a re-assigning. But I don't think we want it to be a context, so this is just to save one or the other.
This code is not related to `HttpHeaders.CONTENT_LENGTH` .... it's not the correct fix for this bug.
This seems odd. Why not check length is -1?
This should probably use a different name. I would suggest renaming it to `assert_image_bundle` or something, as the name doesn't match the code. This is a little less confusing.
do we need to expose it on startup ?
This is another one that's going to pass in an empty string. Can't this just be done by a different PR?
@mariofusco @johanste do you think we can remove this? We are already doing a `/test` in the `externer` folder.
This isn't a good idea. We need to use `double EPS` to get this value from a new one.
Why was this import removed?
why not `*error_code = "VUID-VkCopyDescriptorSet-dstSet-parameter";`
This will probably be `static const` not `""`, right?
we need to update the docstring too
Should we call the `tracesdk` for both?
Shouldn't you return `NullPointerException()`, then?
There are a few more of these where you can use some more general-purpose requirement in `dr_event_destroy`.
I think this needs to be added to the docs.
Hmm, this is not a big deal, but I think it should be `\n` for clarity.
Why is this change needed? The first err was already added to `s.first.Release()`?
why did you change this?
This might not work. `ConcurrentHashMap` is used directly, so there is no `AsyncLocalCompat` instance. You need to add a `ILog` to the `ILog` instance.
Nit: it would be great if we could just make the `formatPrefix` a `changed`
@kennknowles we're not actually using this anymore. I would say we should only be syncing when we can't use it.
I think that we may want to add the `VUID-VkGraphics` to the `element.rb` so it can be used in the `AzureAzureAzureAzureData` module instead of creating the `Sync_configuration_count` module
I assume the order of the arguments to be the same?
This should be a `&&`
`GossipNode` is already set to `backgroundCtx`.
Is this used?
This is a no-op, right?
you're doing that?
Why not just remove the default?
This should be `-E`, no need to explicitly modify the output.
The name `test-event` could be confusing now, e.g. `malicious requests or unknown or unknown/`
I would have done `isset($metadata['associationType'])`, as it is a bit of a test. It wouldn't be better to use `if (!isset($options['multiple'])`.
I'm surprised this didn't get tested.
I think allUsers should be named `allUsers`, right?
Is this supposed to be `--verbose`? I assume we're just setting the flag to `/gClient`?
Shouldn't it be "write" instead?
Align the parameters of a method call if they span more than one line.
Please add a return type on the next line.
Why does the environment variable need to be public? Shouldn't we just use the environment in that case?
is this related to #4393?
I think we should be moving this into master.
Would this work if you have an ` find_by_language` method instead of a `redirect_if_disabled` method on the `request_controller` model?
Should the `SimpleSimple*` be updated to match the doc?
this is a bug, please remove
Use nested module/class definitions instead of compact style.
I think this should be a separate commit
This seems like a bad merge change
Just checking, if it's a utility class that has no `X` in 0.12.6 but is 0.12.6, is it because the library is `Y`? If so, then `_get_screenshot_as_png(plot.state, 0.12.6)` is not `0.12.6`
The PR description was not able to run into a package.
I think there is no need to change this message, but the `ec2.Volume` function is not in the state transition to %q. The user can only be executed with the `ec2.Volume` attribute when the user was not set.
This is unrelated to other changes, but we need to update a separate PR.
I thought we already had a `setup_profiler` attribute in the `build` package but I'm not really sure what that is? Should we be passing `setup_profiler` to `buildCallback`?
I don't think this was needed.
Does the assumption that when a user changes `make build` the `make build` will get deleted, which will be executed when it isn't? I'm not sure we want to keep it.
I'm not sure why `LDR_MODULE_64` was being set here, is that intended?
nit: remove extra new line
Please make sure this is static, and not static.
In general, it seems that attemptsCount is a per-enabled per-attempts Count flag. Maybe use attemptsCount.
shall we move this to the end of the file?
Isn't this supposed to be public?
I'm not sure about this, it is more explicit to have the original text used for the `kernel_main` element.
I don't think we should be using remoteHost.remoteHost as remoteHostIsNonLocal, since we also set it for remoteHost. But if we do, then it would be better to just set it to false.
@jridgewell I am fine with this. It looks like we can get rid of the `isNotEmpty` part and the `isNotEmpty` part.
I think this is wrong. It means that `package_stats` is not a dict.
This seems like it should just be `_auto_indexable_2d = False`. I think I'd prefer to have `_auto_indexable` as default.
I think it's better to keep `<1.8` as it is in `py-param`
I think you can just return `abort()` if it returns `true`
This should probably be changed to `if` now that that is what the caller has (like the rest of the code).
What if the request isn't changed ?
The `gitExeReplacement` flag is probably better here, can you explain why it's there?
@jackfrancis Do we need this here?
Why is both datasets and new differences here? Shouldn't datasets still be in datasets? Also can this be a breaking change in datasets?
Since we are not using the default in Python 3 3 this flag, this would be fine, since it is only about Python 3.
It is not a good idea to add this property to the `MinDataRate`. It is the same as the `MinDataRate` property, so this property must be used directly.
This one is a little strange that we can't get a `receymer` events in `Storagepool` and use it in all the other function. Can't we just use a function in `Mypy.receymer` instead?
@n3nash @se3nash I think this makes it more clear as a "delete servicecomb" or something?
Why does this default to a tensor with a tensor?
This should be set in the test. Otherwise this will be always set.
Should the logging be set to `nil`?
I would use init_weights() to store the state of the init_weights. It doesn't really matter for a user.
`OfOf(..)` must be valid.
Please remove this whole PR.
Space inside { missing.<br>Space inside } missing.
@wangdi1 This is a change in import order. It's not a problem, it will cause the import ordering to fail.
I assume we can't do this in a few places?
@deads2k @stephentoub, is this the right thing to do to set `NodeIPv6Addr`? This looks like it is the case anymore.
nit : a bit nervous: can you change the name of the variable to something like `set_tlsext_host_name` (same for the other uses below).
Why was this necessary?
Is this really needed?
Can we call it `responseWriter`?
Is this a necessary change?
Why are we doing mining successive here?
Why are these imports needed?
I think you can just add these two lines to the `padding: !` above instead of the `#add`
Can we use the same name for everyone?
Why is a `tagLock` necessary?
Why are these calls removed?
This file has an unused import.
should this include "WebServer" or is the included included from the command name?
This needs a JIRA issue.
Why not make translator public ?
Maybe `#Field` or `#PFOOField`?
What about `MailChimpError` ? That way we don't need to expose the client and we could add a method to share the client ?
I don't think this is going to work. We should only set this if `headers == 'text'`.
This should be refactored to use `wLR_DEBUG` if it's going away.
I don't think we need this file anymore. The `base.jsx` file should work as expected to the associated associated UI.
Is this a typo?
I think you should not have to add six from the dashboard
nit: if you are doing this, let's move this block of code to the bottom of the function.
The description says we're using the wrong `Batch`
@lilleyse any reason for this change?
I think you can remove `use` here
@kalefloch why are we passing the `Date` value instead of `this.releaseOrCreateDate`?
@deads2k @kalefranz i guess i don't know why this was necessary?
Can you add a space between the `if` and `in_array` to make it more readable?
@mfojtik, I don't see the benefit of this change. Can you confirm that this will break some users.
This looks like a bug fix to me. Can we remove it?
This should be `Boolean` and not `Collection`.
`keyboard_state` is now an array, which is not a single keyboard. I think it would be more correct if we just pass it to the `State`/`State`/`State`/`State`/`State`/`State`/`lib/seat/`
If the user sets an invalid header then the current user is not a valid header
This should be `cascadeBy` since it was a part of the cascade. Otherwise it should be `@var`
Could we remove this file too?
What is the edit in the `certmanager.k8s.io/edit-in-place` flag? Why not edit in the `tlsmanager.k8s.io/edit-in-place` file?
Not needed, we already return the base object
I don't think it makes much better sense to have this in `AbstractJavaRule`
why did you need this function?
This line is redundant
I think you should also add this #ifdef as it is now unused
I think you can just remove `length` and `getlength` here
I think it should be `Namespace[a, b]` (and similarly in `URL`) instead of `len(manifests)`.
Can we add it to the field above as well?
I think it would be cleaner to have this be `aria-query`
This method is public - please remove it.
should be a single line if
The Code generated by gowire version of theautocompleteire does not exist, so we need to make it more explicit.
Why are we adding the protonode.Cid(), to the other parameters we need to pass to the false?
This will break all storage storage implementations (even the timeout is not supported). I'd recommend using `Timeout#Infinite`.
nit: this is unrelated to current PR?
The reason why git is not using this and you use gitgit in your IDE. I think you can avoid using this in your IDE. We just need to check this on some other IDE. It's just some sort of "using" IDE
I think this change can cause issues, since they're not used by the other tables.
Does this mean it's an implementation detail that this is used for all WP server-side? I'm wondering whether it's worth to just say `the value of `m` here. I don't think it's necessary.
This will break existing code
nit: this is a little confusing... what happens when `headingLength` is 0?
Can we add a TODO for this? `JivaCloneIPHolder`
This is the wrong place for this. The only one that uses the `RestStartSend` is the `onStartSend`. I'm wondering if it is the best approach to just use a custom node with a proper `RestStartSend`.
`actionHash` is unused? It can be deleted
why would the class name change?
can you add this check into the `externalFormat` class instead of doing the `efa.externalFormat`?
I have not tested that the "running" message is also not correct
This test was only running on sms messages, which was only running on sms messages because of the last `/test` tests.
should these be based on `stats_dto`?
Should be able to just test the `fmt.Sprintf`?
I think this should be only `if any.locally mounted volumes == nil` instead of unnamed volume.
`h['puppetlabs/agent/bin:/opt/puppetlabs/bin']` is a better name
No need to change the api.
Oh, this is a good way... this may be a bad merge conflict?
This should be `OSRM_EXTERNAL_MEMORY`, since the other checks are listed there.
removed?
I don't know if there's anything to test with this file or your changes.
Don't need the extra `scale`
We could add an explicit way to set it to true by default.
you should not be passing the value directly to every other generator (e.g. `types.conf`)
Is this actually correct to change a proto in this context? I don't think we should change it from proto. Only we should change it to proto.json and we need to change this to false in `rpc-protobuf-raw-response.yml`
This should be done by `const`
I would call it `self.underlayer`, since it's a list of `--seq`.
This change was here to avoid breaking the build specific error.
I don't see this migration. In `NETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNETNET
Maybe mention `adjustment` in the base class?
This should never use a param. `activeFlows` has a reference to it.
This is a very specific bug fix. We need to add it here to prevent any of the other snapshot options.
We can't do this in our code base. This class is being used for all subclasses of `Start`. The current code will do it, but it can't be removed from the API.
maybe change to a feature to a `torch.add_t`?
I'm not sure it's safe to do this since the only place in this function is in this function.
Remove this newline.
The string literal isn't needed, you should just remove it.
The `FactoryBot` is just used in the `let` and thus is now unused
you can use `asset($uploadsPath)`.url(string) . '/'
I am confused, we should have "builtins" in this case as well? Can we get rid of this `or`?
@tannergooding why do we want to use some kind of function here?
This is probably a bug, if I see 10 minutes in cstorVolumeReplicaCount for those that would use the same map and will be the same as for other cstorVolumeReplicaCount in the same map as for cstorVolumeReplicaCount. I don't think the latter is right.
This looks like a regression.
Please move this to line 156.
Shouldn't this be done when the service's state is not set?
It looks like the `indexed` is used to be zero.
Please revert this file as `!=` is not needed.
I wonder if we should only do this when `x` is not available?
Is this an oversight or was it a typo?
Could you please describe `org.apache.iceberg.StructLike` from `SparkStructLike`?
Is this a false positive? I guess it's not a valid call, and I'm assuming it is a real bug?
is 2015 to 2016 the 2015?
Should we use `HeadHead` instead? (i.e., `Head PipelineSource`)
please update the docstring with ordering of the arguments.
why no need for the variable type here?
All does not appear to be necessary here since CNI is not a version anymore.
I think it's better to add this to the list of imports, to keep things up-to-date in the future if needed.
Just noticed that --enable-insecure-localhost exists --enable-insecure-has-must be also changed toNetworkService.
Can we just pass in the `TaskStatus` in the `Start` instead of introducing `ts`?
I'm not sure if this is the right fix. I would recommend adding some more info.
I think we also want to avoid the `PluginConfig` here
Doesn't this work if `NoError` returns an error?
Maybe we should add this to `Put`.
I think there is a typo here. `err` is a common error so I'd prefer this to be `*ok`, not sure if that's the right thing.
Why? Should this be `value?.Length == 0`?
I think the other places where this is used, could be put directly into the `GroupByAgg` variable
Shouldn't we also add these to `getPageStreamingDescriptorName()`?
This may be a bit of overkill, but I would have just kept the entire entire branch.
How do you know that this method is called from the else? if it is, then you're right to use it to avoid the `else if` branch?
Remove the `/agent` import.
Is this change required as part of this change?
skip for defer?
Should not it be `metaServer`?
I think this file is not needed?
This looks like something that should go before?
What's the impact to this TODO?
nit: I don't think this is correct. The key is for the `and`
I am not sure if that this is a good idea... For example, if the `$pluginPath` is `normalizeIdentifier` it is not `null`.
I would prefer to pass that to the `safeMode` method, to avoid the duplication.
I believe the `getIntoView` could be removed if there is an exception
This should not be in here. They are not being used anymore.
should be a boolean
I think this line needs to be removed as we don't want to be able to have propo match the other non blocking types. The only problem is that this PR is not able to be using propo match with the other things which we want to support, but is there any reason we're using it to have it in the `gocoverutil.go`?
Why do you add this to the `register` method in a followup?
I don't think we need to add `parent` to the function, it will always be a breaking change (i.e. it's a parent for the parent and not a parent)
Use `.user` to skip iteration.
`@out_variant` will be set to `True` in the constructor, so we can keep it consistent.
This is the same SDK client that was created for all subclasses, should we set it to true when it's not `null`?
why not use a regex like `load_title()` ?
remove empty line.
"block_processor_full_size" is a double, and we don't want to show the default 65536" in the name.
We should remove this if we are not sure about it
Is this a bug fix?
Are you sure this is needed? `in_data.name_id` is a `(name_id) `
I am not sure this should be `FPGA_INVALID_PARAM` - it's not a function.
Can you add an issue for this before? The includes includes includes from the libc65656f4a9d8a5e2a8ab4a2a56a3a8d3a56e6b9a4; the new includes includes includes includes includes includes includes includes from the libc7e7e6c7e7b9c2c3b7e
Just curious, why `need_unmap` is `True` and not `unmap`?
I don't think we still have 8chaos now, so this is the only reason to have a second set of 8chaos.
How about adding a `requireNonNull` to the interface for the `acquireTopologyCache`? Seems a bit redundant.
Is there a reason this is needed (and the others)?
What's the reason to cast it here as well?
I'm not sure if I should remove this file.
should be `using null`
This is the wrong solution. The `RAMDevice` was previously being added to the `init` function.
The SVG is LTR, force text to be RTL unless a number or a number.
Maybe we should update this message to mention the AWS Identity Identity, or at least the error message is not raised.
Shouldn't they also be `-1`? Otherwise the original message will be useful in the future.
I think we can keep the name "full_backtrace" here.
Please don't make use of `isort()`, it is deprecated.
It's not clear to me why this change is needed. The mitmproxy library is already the same as the library. It seems to be used only when it's the same.
We can use `<p>` rather than `<p>` here. The problem with `<p>` is that the `<p>` is not a valid `<p>` for all values. We should use it instead.
This import is not used anymore. You can just remove it. Also, we should remove the dependency from `PY310.const` from `__init__`, we should keep it as it's used in `__init__`, and add a new import.
Can you check if there's a error here? It should be the actual error.
This shouldn't be necessary. You're not calling `! te::get_row_count()` twice.
What do you mean for the assertion ?
Shouldn't this be `'vendor/i.` instead of `form.`?
@smarterclayton do you mind making sure I don't have any tests for these changes? I'm not sure how it will work, but if we're writing it, could you make it less likely?
Could you add a `TODO` to remove this line, too?
This method was unused since it is called `virtual` and `input` is created. So I would recommend removing the `<CharSequence>` parameter.
I'm not sure I see this check in my part. What if it's not in `my.mysterium.network API` ?
Please wrap this message with `#include`
We don't need to add CodeFlows to the base class, so we can remove the `AnnotatedCodeLocation` variable and just return the `IList` and put it back in the base class.
I'm a bit confused how these are needed, but I don't see why we can use `os.path.config` directly in this module
I think this should be a `setUp()` too, right?
I'm pretty sure it's safe to not have this constant at all, because it looks like it's the only place in this file.
I'm not sure if this will work correctly, since the `@q` is a `null` dependency in `Search.index`. I'm not sure what `q` means when this is needed.
What is the difference between the two if block and the previous one?
I would use the default value here, since it is a valid value in the code.
This line is incorrect, you can remove the `str` now that it is used with the `Value: ""` in this file.
No longer used.
I guess this will break existing functionality if we are doing the same thing. I would move it to `appErr`.
Is this a change of behaviour?
@saghul, do you mind making a similar change in the commit message?
I'm not sure about this. This change is correct, but I think it can be improved in one way. I think the intent is to use a default `False` if you have a default `nms_cfg` property. It should be `False`.
Can we use the same name for both the `pos` and `s3-specific properties`?
Can we add an enum for all public parameters? Or just inline it?
I think a better approach would be to use a `time.validate(current_search_session, request.validate)`
This is not needed. The path_for will already be called if it isn't used, so the path_for will be called if it doesn't exist.
What do you think about making `REG_##reg_must` a separate function? I don't think there is a way to do this.
I would add a `span_html` here as well
This test was changed to `anotherval` but not the one that I added to the version that was being added in the following test.
Should this be `[]SecurityGroup`?
Could you import this one by `import Person/harvard/core/src/rometools/dataverse/Platform`?
No, we have info in info level. @shunter what happens in the future if we have a specific log statement?
Remove the line break after sql
This change is not correct. The default value is set and not the response.
Would it make sense for this to happen in `Subscriber-Distributed`?
I'm not sure this is the correct choice but this is a bit of a huge fan. I would like to be explicit and see if there are no such file at all. It would probably be better to just use the `_Name` and `_name` as the "Casous" name.
Nit: I would have expected it to be "type parameter constraint Any tag is not a type of Any iso")
why is it not `MDBranch`?
I think this would be a breaking change as it is just an internal class, not an internal class, but it would make it easier to grok when we don't have a `Class`
remove it if there is no reason for this package?
this will error on error when nothing happens.
I am not sure if this should be a public parameter in AMP (see above)
I would prefer to move this line up to a separate method.
@deads2k do we want this change?
I would prefer to have this in a separate PR. I'm pretty sure it's the only one we have here, as it's a separate PR.
We can leave this test as it was
Please don't add more here, it's already in the context context, but it makes the order of the arguments more readable
@smarterclayton should this have been added to the AWS AWS API as well ?
I think this needs reverting since it's the default for the `insertOptions` controller and `insertControllerOptions`, which will be called once per `insertControllerOptions`, so the latter is the only thing that needs to be set in this case.
Please add a `TODO` to get the names.
this should be another way (or do you think we should be a helper function?) as it is done in the 3p classes
I'm not sure what `req.version_ref` means here?
Nit, prefer the ones that come from the previous line.
@chlowell can you explain why this change is needed ? If I am not mistaken, I think it's better to do this in a different pull request than the current pull request.
I wonder if we could set the value in `href` so we don't have to set the value in the `__init__` when the error value is not provided? It would be nice if we could avoid using this for all cases like `href` and `setting` as a field.
I think we need to add an else here to ensure that all partId will be always be the first. This is just for the future, as we'll have to fix this in the future.
`Content-Type` should still be set when calling `ConfigureAwait(false)`. I think the intent is to use a better type than `ContentSegment`.
nit: this should be a single line string.
I don't think this should be in the `https` tag; it's likely more important to have it in the `https` tag.
Which particular particular file name? I thought `2018` and `201` were the same
This should be a public constructor.
You can remove the reference to the `using`
This is not needed, we should remove the test.
We should not rely on the component's `should_component_be_active` method.
We should check if this is set to true or false here.
let's use `sign_in_as(admin)` in this action.
Oddly, there was a conflict between Spack's `-o`, which could potentially potentially cause a lot of confusion.
@bparees this was a bug in the docs. This is a bug. The ` tagKey` is not a `Key`, but it was not a `Key`, so I would recommend `2x` instead.
I think this is only one line of code right?
Maybe `listen_count` should be a `get_listencount_for_user`
`add_transfer` to `format` - I think `transfer` is a better name.
You need to move this to the `_` list.
I don't think `server_command` has a good default value, so I think it should be `server_command = "subsystem"`. Also, `server-server` should not be used at all, so this `server` should be `server-server`.
Why are you changing this?
I think we should return a `latestVersion` value instead of hard coding the error
nit. Add new line at the beginning of the file.
No, you have to do this.
This doesn't work on Windows. We don't want to log the error message here, because it's a warning.
Let's remove this and the other `github.com/projectcalico/felix/external` import as well.
Should this be nil? `SecurityGroupOverrides` is never nil, and `send` is a nil-error.
nit: you have an opportunity for this to be dict(str)
I would say that you can remove this and it's a bit too much, but it's not clear to me that we might want to just pass an `flowIndex` or `stateIndex` in as an argument, and I'm not sure what the best way to do this is :grinning:
I think you forgot to remove this? It's not needed anymore.
We already have an `string` function, that's how it's implemented.
Could you please move the `encode()` call into the `start` method? It's hard to read.
@nmittler - Can you revert those unnecessary changes as these ones are unrelated? We're trying to move them to a different file and not an issue for getting those lines.
This is actually not necessary since there is no `orig_mocks_syntax` argument.
Should it be 2014 or 2014? I am not sure why it is here.
I think we can get rid of this too, it is no longer possible.
@bryevdv, I assume this is a leftover from debugging?
The check for ksql-site.X has `3 * time.Minute`
Should this be one or the other?
can we just use the new one?
do we want to check if the listener is nil here? If not, I think we need to check here.
It might be useful to make this `public` for now
Maybe we want to make sure the value is not null? If so, what is the problem here?
Is the change here still needed? `video` could be renamed to `getProviderReference`
I think we should keep the groupings in a separate file.
why not rename this method?
I think it's not safe for the type here
Isn't `_format_msg` supposed to be called when `msg` is `str`?
I would prefer the type checking
I don't think this belongs in `cstd_linux.hpp`
I would make this a `constantsMock` instead of getting the fetchMock.
The mFolder == null ? mFolder.getName() : null
Do we need to also mention that in the migration suite a migration that has both multipart and multipart datums?
Why are we making the `lower()` functions not needed?
This is called from the `*_dummy_response` case, should it not be called from the `set-Archive` case?
I believe `EnableBlockServiceFallbackToArchiver` should be an alias to `sql-Enable` because `sql-Enable` is the default. I think this makes sense.
Do we need to keep `GetOrCreate` here? I think we do want to avoid creating another `Workspace` in the next block of `rootNode`
Why is this needed?
This is a bit of an unrelated but I don't see any new code that would have gotten in a different patch. Perhaps we could have a different issue?
This is the main change. This means that in the `if` clause this will not be necessary as the `else if` block will be added to the `if` branch.
Please remove this line.
@tannergooding, do we want to say "Only show **not** available in the URL?
I think it's safe to add a label to parse the `container` label, so that we don't have to update it?
Can we make this curse, and add a description of the 'recurse' parameter?
@dvoytenko is the `dvc/env.io/X/raiden.rb` for this change? I think we could be able to use the `clone` here instead of creating a new `dvc/env.io` in your `clone` block and just have a `clone` at `dvc/env.io/X/--local-named.rb` here
Please add a check for `0` here to avoid the NPE
Since `PciIo` and `PConnectorIo` are part of the history (the field is not defined), can we use the same signature and link to the new name?
This is used by other packages, maybe ` />'` is better?
You don't need this variable. If it's an array, you must add it into the `else` branch.
`s svc` -> `TestCase`
is 1004 enough? I don't see any default 1000
Why the difference between `MultiDimensionalMapping.sorted` and `ScanS`. Why? The only difference is that the value of the set of input vars is the sorted value.
Why are all of these methods required?
This should be an if statement.
`os.path.abspath` might be more readable with our styleguide.
This needs to be renamed to `EnablePipedResponse`
This should be `static`.
flushcount seems like a very useful value than an unrecoverable error. Why not just call `rollback.Address()`?
Should the `NullRepository` be part of the object rather than its explicit `assertEquals()` ?
Maybe the interface name should have `""`
I'm not sure this is safe. It's only used in the first place, and it's the same as the first glTF and this is also called in the first glTF.
`addMapping` -> `addUserMapping`
This should be done in a variable, like the rest of the code
It should be `if subs != ""`
We have the ``core`` package anymore.
I'm not sure about these changes, they are necessary. I'm not sure how to test this. If it works, we'll have a good way to test it.
I think it's better to add a default configuration dependency so it will be only needed if the configuration is not present. For example, you want to use the default value of both `Resource Groups Tagging API` and `Resource Groups Tagging API` when reading the configuration from the library.
Nit: remove empty line between assignments.
I'd use `*` here for clarity.
Why do we need this? This is the only usage in the file name.
`include_bad_conf_check_b.conf:10:19: unknown field "monitoring_port"` - this check could be `""`
Is there no way to detect these?
You can use ot_fd_readall_or_mmap (fd, 0) instead of accessing a struct.
@adamjstewart @danrot this is the reason why you moved this stuff into the `menu` class itself.
Is this a change to a public method or the way you did it? (Or did I miss something on my mind?)
Why do we need `IsDone()`?
do we need a return here?
I think we should use an enum instead of the `next` because there is no default value.
why did we remove this?
Why are these `CreateCounter` and `Uninitialized`? Doesn't seem like they should be used.
This will never have nullptr as nullptr.
this is not needed any more? (this will make the tests pass because the m_history is already done in the above block)
This looks like a regression.
The title will always be 'null' if the node is defined, but the user may not want to check.
Is there any way this is a `ParentChildrenSyncTargetHelper`?
this change is not required. It's only for testing purposes. It's not in this patch. You should be using sys.maxsize as default or not.
I'd move these lines to the top, to keep the file-stretchr in order for test-testify the things that you're gonna go back and see
Can we make it a string, like the other types?
Should probably be in the same group as the imports.
Why not just `switch`?
`retry` as the parameter should be `nil`, right?
This should have `runBpfUnitTest(t, "icmp_port_unreachable.c", func(bpfrun face(reN), (bpfrun face.c)`
I would also recommend using `letters_letters` here to avoid the need to explicitly set it to `0.12`.
this import should go up to where it was used
This will always be true because the return value is `true`.
This should be part of a separate PR, but it's not required.
This else can be simplified to if(DependencyDependency_db_db) { ...} else { ...} else { ...} else { ...} else { ...} else if(DependencyDependency_db_db); }
If the value is null, then why not remove it?
Is this field used?
Please add a `ReadPasswordTwice` method for this to go up too.
Can you please make a copy of `dpi` to `dpi`?
Why not just make the function `nil`, since you are using it directly instead of directly accessing it directly in `c`?
GraphType graph_type graph not used?
should be `\item\itemInterface`, same with other Entitys
I don't get the `getPos` function.
Looks like you're missing some parenthesis here (and elsewhere in the file).
should this be `public const int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int
What do you think about renaming this TODO to something more meaningful?
Is this really the only place where metrics is used?
What's the issue with removing this?
We can't use any version of the event handler in this case: `GasType.DefaultModules.ToArray();`
Please add a case for the span to be null.
It is not important that this check is actually reset when the native is not yet reset. The `dcontext->go_native` is used in a different way, but I'm curious why you removed it.
this could go in `#confirm()`
why is this removed?
Should we also be using the `hasStatus` method here?
Is this correct? It looks like you are already using it in the `*` branch.
This seems wrong as `snapshotListCommandHelpText` only allows users to set to the user. In fact, I'm not sure we'll want to add the `--volname` to the hot command as the user doesn't use it. I don't think the `snapshotListCommandHelpText` is actually an option. The `method` command is used to determine that the snapshot contains the service based off the user's snapshot.
Should we move this to `spb` as well?
I don't really get why this is being made
We should keep the message as is. We are not running `parallel` on `server`.
This is a very specific test case for the reason. You probably want to keep the previous `CanEnablePulls` method in the future.
I would prefer this to fail with `gulp dist --package-field`. It is not an error.
We should probably change this to something like `flash.now[:warning]` and make this a bit clearer.
What is this for? This is the parent class, not the parent class, not the parent class.
This test seems unrelated, as it means `phpVersions` is now on the arm64 but doesn't have any value, and that we can just remove the value from the `phpVersions` (and not just use the `Ld`).
I would prefer the name of the field so that the value can be a non-empty string. Then if you add `@Nullable(maxTriangle)` you would then use `getSECTS(maxTriangle)`, we would have to add the field as the default value, which is not the case.
`updateOrderStatus` call was called after the Order is set and then passed around around it.
I think it would make more sense to just use `(Errno::ECONNREFUSED, Errno::ENOTCONN, SocketError)` here (and below) instead of `.Errno` since that's the only way we can easily have it return a `Error` (which is what's the point we had in the `#ifdef` check).
It's not clear to me why we need a different name for this project. For now, I'd just use `project_cache_throttle_percentage`
It's `ListPowerSelectorEntries` but `ListSelectorEntries` is not a good name for the code.
This won't work. This is the only type we want to use for 32-bit number. The only purpose of this is that it is `type UVarint || UVarint`.
Can we make this a `argument`?
You could just put the `NonField` here, it will be easier to see when creating an HTML array.
You may want to add an additional column for the new table as well, if you want to do so
This will allow Windows Sysprep to be false. It's the default for the `TODO`.
The "autoStake" parameter should be renamed to "autoStake"
Why are we returning `\DateTimeInterface` here?
Since we're only sending this to `stack`, maybe we shouldn't rename it as `stack` or something.
If s.Txn is empty here we should not check if s.Txn is empty before we start writing outCh.New
If we're going to be doing this, should we mark the tests as `floor = false` or `floor.create(..)`?
Whoops! I didn't see how randomState.randomBoolean() can be removed from the number of exception handling in _randomState.service_
This seems to be changed in line with the other case of an unsupported check
I don't like this change, it was the only thing that should be to change in the future?
We can now remove the timeout from the timeout, since it is now always the timeout. We can also remove the timeout from the timeout from the timeout from the value of the timeout and add a timeout to the timeout.
@bvaradar This method name is going to change to `_get_api` as well, right? It would also be nice to use a method to return the lambda as a whole, like in the other classes (if possible) to print that.
No need to do a constant like: Allowota.Errno(Trap, Allowota - 5)
Does this need to handle handle a case when `this.appenders.Length == null`?
Can we just pass `int` here, instead of `Client`?
why are these lines changed? Isn't the res res res res res res?
this seems like it should stay in its own PR
I guess the indentation is not right now. Can we use ` PlatformTaskEx` instead?
You don't need to free free, here, as there is no guarantee that it is NULL
This change is not correct. math/rand was left as math/rand and math/rand was left as math/rand
Remove this debug statement
Could this logic be a one-time check with the `getUNF()`?
@franz1981 this was the reason why we're changing the code.
Why are we passing the config here?
I'm not sure if this should actually be a `allowOptionalMappings` since its a `allowValue` by default. If the key does not exist, then we should just set the key to `null`. But this would be a better name. It's more clear that it does the map rather than a `allowallowallowTable` (and maybe we can just make the map rather than a `allowallowTable`).
Need to add this to ` casted castedP_metadata`
I'm not sure that it makes sense to keep these as static methods. It's really annoying to have the 'Export' variable at all if they were.
@deads2k this API was an API break, right?
Shouldn't you check the `if` here and in the case of `if (articleId !== null) {` and `return null; }` after checking the error?
I think `map` is wrong as its only used in the `pre-system/common/config.yml`. Can this be replaced with `return arr != ""`?
This is an API change I was thinking. I was just trying to get away with the `@version` property in the `register` gem.
remove this empty line
Why not just set this once?
Why are we using this in the test as well?
I would prefer if we could use a positive `_negLL` and use a simple String: `_negLL_elihood`.
Why `repr` ?
This was a separate test I did not catch. It looks like this would be testing the root cause. The `finally` was just a bug, which was never checked.
Why not just remove this?
const ?
Doesn't `GroupGroup` need to be called `SinceList`? Can't it be called `development` instead of `CertificateRequest`?
This is just a minor detail but we have to go back and leave this one alone. We'll need to make sure I am not missing anything.
Can we remove this if it's not used anymore?
I'd move this there too, but if it's not used in the code, we should be able to move it down to the `utils.js` package
Style/RedundantSelf: Redundant curly braces around a hash parameter.
Do we really need to import `getResource` now?
I would add the `time` check as well to avoid duplicating the code
I know we've been using the core modules that can be used, but the test should still be run. But the core modules have the same name as the test. The idea here is that we're trying to move the core modules for the test to the unit test. In other words, I think this is a reasonable solution.
Extra empty line detected at block body beginning.
This is the same thing as the "false" check above.
I believe this only works on windows? I am not sure how much `client` is the best way to go, so I'm not sure if the only thing that could be to have to check for the old `deployment` param here will cause problems
Note that `CustomClientAuth Auth `json:"-"` is also part of the client (i.e. use `CustomRouterAuth Auth`).
We should be able to remove the `IMvxFormsViewPresenter` property on `LayoutSupported` and `LayoutSupported` methods and `LayoutSupported` from this file.
Isn't `typeof child=='number` a typo?
Is there no way to check for null here instead? It seems like if `!rawErrorData.containsKey` is null, the `&& rawErrorData.containsKey` returns false because `|| rawErrorData.containsKey` will return `true`
If we do this in the `InitAddress` field, this will still pass when we use `panic`
nit: remove this?
What if the zoom and offset are empty? Are we sure that the default behavior isn't right? If the `fuzzyval` is not set in the ` DAY`? If I understand this correctly, it should probably be a default, right?
Why addAnnotations? Shouldn't it be false after the job is finished?
The `chan map[string]Result` was not being used anywhere.
Are there any changes to this class required? Is the IDE public?
why this change? I don't think its a good idea...
I don't think the Unmarshal needs to be the exact name, the name is a bit misleading. It's probably a bit misleading, as `r.HTTPResponse.UnmarshalXML` does a bit of a hard and could be confusing for users.
These should stay as-is as the `final` field can be removed.
We need to update these copyrights as well.
I think it is safe to use `string.Trim` here, rather than `map[string].Trim`, but `map[string]` may be more efficient.
Why removing this logic? It is never a good thing to do with the new app, right?
I think it would be better to move this check and the `log.info(...)` methods to the `version()` method
I think we can just get rid of this line.
You can use the constant here to avoid the need.
This is a breaking change
I wonder if we should be able to use `get_holdingpen_objects` here. If we do want to keep it in mind, we should not add the dependency to `ast.literal_eval(bwolist)` as it's not a list and we'll have to make sure we have all the changes to `list` in the `list`s.
This pylint disable was added because the bug wasn't being tested.
I think it might make sense to use a `FORSETI_HOME` variable for all these days, and set the default as default. It's a bit too expensive to have a `FORSETI_HOME` parameter in `POLICY_LIBRARY_SYNC`.
I don't know why this is necessary. It looks like we always return early and we're returning a number of orders in a lot of places.
It is better to add the X86 code to the pool map and the X86 code is not written to.
This should use `subprocess.models.vagrantFusion`
this seems unrelated.
It seems a lot of sense to have this in `server/__init__.py` for consistency. We should add a new enum to that constant so that the order of there is the same as the one in `server/__init__.py`
I'm not sure about this but is there a good reason why we don't want to do this if the others are not?
@deads2k @bvaradar I don't think this is good to add more info in the user. The user could have a "new" method that does the user with the cluster-wide `id` in the pool, but is not yet set in the cluster-plugins way.
No wildcard imports. You should use them.
The `tables.lock` is now empty. The `tables.lock` is empty.
`&&` => `&package.json`
This is a nitpick, and should be fixed in a separate PR to a separate PR though.
This is going to happen in a different way, but I think I would be ok with you if the column added a `added` and `colVID` was added, but I think this should be `if (foundBinary && foundUnary == null) {`
To make sure this value is only used from a single-dom header (see `compute_service_account`).
This is a bit weird. What is the goal of the new API? I thought the only purpose of this property was to have a `element_by` attribute?
@adamjstewart @a-scalablecory, is this right? We are going to have `a tabindex="-1"` in the `tabindex` component?
I think you can remove 'IRGBUC2IVF32' from the 'end' block
The `NewSubWorkflowFromFile` method is never called for non-existent versions, so I changed the logic to `NewSubWorkflowFromFile`.
Rails/OutputSafety: Tagging a string as html safe may be a security risk.
better to use dagster_pd.pandas_kernel (and other functions like other files)
We should use `org.sonar.java.search.api.BlockCache.api.BlockCache.Materialize`
`st` here seems to be very unusual, why not just `st.join`?
is it really necessary to add this exception?
Align the parameters of a method call if they span more than one line.
Can you add a short docstring for this? It's not really used anywhere.
Should these be `subscribers`?
I would suggest changing the name.
Hmm, this is a bug. The non-null check should be moved to `if (schemaSummary.getSummary() && existSchema.getInstance().equalsIgnoreCase("development")` right after the else block (or before the if block)
I think you're missing a comma here
I think this import is not needed
This should be in a separate pull request
This should be in a separate pull request
This one is still needed.
I think we could avoid this property in a `Bridge/read`. Also if we do want to keep it as is, we could also add `[NotNullWhen(true)]`.
@buyaa-nishan What's the reason for the new parameter?
Same here, why this change? I think this was not working on purpose.
is there a possibility that both lines are tested?
are these `<p>`s right?
Rails/FindEach: Use find_each instead of dynamic find_each_with_object.
Can we use a mock here instead? I think we may need to do some validation on the UI and that the message is a little bit more descriptive.
I think the first identity of `vidinging Identity Identity.Identity` was a bit of overkill. Maybe `Identity.Info(off, "Fake")`? The second identity may be "iFi is a bit more clear.
I don't think you want to setPropertyID in a propertyID here since it's only called once in the component.
is there a difference between this line and the rest of the code? if addHs should be set to <1> then, it would be good to have that check in the rest of the code.
I think `!==` should be enough for now.
The fact it is not an actual bug, is this the "links.deleted"?
We should avoid this. It can be done in a follow up PR
Can we move the `switch`, so that we don't have a check for it?
Does this mean `wg.Wait()` could be reused?
this is just a bit confusing. I would not expect that we would not want this to work. I'm not sure this is going to cause any issues, but I'm not sure what the point we'll have is to have it a bit more. What do you think?
This should be removed.
@tgamblin Do you have any idea what `func indexByte` is supposed to be?
is it really necessary to have this in a `ifteran.io.quarkus.util.--32`? If I'm reading the code correctly, I'm also not sure about this. If this is a correct change, the only place `PlatformDbType` is the default, so you don't need to change its signature.
Why are you changing this?
Please, avoid extra newlines in this file
I don't see this being used anywhere?
In `&c.srv.logging` we can do `c.debug` as well.
I don't understand why this is being removed. The `GetConfigPath` method is used for the other PR. Can you explain?
Why is this removed? I think we don't want this setting anymore.
import order changed
is this the right place, or why is this change not part of the patch?
I think this needs to be moved after the "else" section, as it will be fixed by the PR.
Do not use semicolons to terminate expressions.
I don't think this should be a `Long`
I think it is better to check for error, as we're not actually doing any validation before and we can also call `log.Error()` here
why this file, this file should be removed
Should call `client.ClientOption` here, then you don't need to pass the client.
It's actually possible we should not have a context manager, but this makes it more clear that we're not actually calling this with the default setting.
Please don't do this change, we only need to use the value if the ref is NULL. The code here is not quite helpful.
I'm not quite sure the compiler will have this value as "proposal of proposal is not 0". Why is the number of proposal correct?
why was this changed?
Why this change, but isn't `:: >=fmt` necessary?
This needs to be initialized in the BKDWriter.VERSION_LOW_CARDINALITY_LEAVES instead.
Is it okay that we're only using it in a few places when we're in the same location? I don't see why we should throw an error if user is specified, otherwise it may be useful.
I think it would be better if you didn't add a `auto *` and `getNumTautomerTransforms` to the enum. It is not a thing and the function is only used to set this if you're not in the array...
This looks like it can be problematic. I'd just drop the `m.Bucketlist` part.
I think we can remove the atom key and use `=== null` here as well. Also, I see there is a bug somewhere that we can remove the "atom" check.
Wait, why are the `Sleep` here?
should be `.decorate()` to align with the above.
`vmLink` is the default.
Is this change necessary? Are we sure the version is not correct?
I'd prefer to move these magic numbers out of here.
do you want to use the download?
I think we should save the entire file in `autosave`, as it is for consistency.
This was the problem, but in general I'm not sure we should keep the old version, but this is where the `identitySourceIds` was being used.
Shouldn't this be `_` in the middle?
This import seems wrong.
I think we need an empty line here
We should use the constructor to reduce the amount of code duplication here.
I think we don't need to check the keymap for the keymap at all?
@bryevdv - is this intentional?
Metrics/LineLength: Line is too long. [83/80]
Can you explain what "records. The file has 3 header lines that contain, when an error is raised" ? The record stream is an integer and a record-based record. The record-based sequence lines should be a sequence id field.
This should be moved to the last line please.
Should we just use a `req` to convert the `state` to `query` instead? This way it will not fail when the query doesn't work with the current `wt","Filter` fixture.
I don't think this is needed, the var name will be the same as the above.
Would it be a regression if you use 16?
This isn't the only place where `_base_` would be used.
this is a test for when you set the value for the value
@smarterclayton should this import be removed ?
Should this be removed?
`indent(2, result.stdout)` could be `nil` here, but `indent(4, result.stderr)` still returns `nil`
This change was correct. The only usage was `PythonSdkType` and `kArbithttps` was the correct way to determine the PythonSdk type.
I'm not sure it's a good idea to put it in a constant here, maybe? I think that is what we are dealing with.
I don't see the name of the file. I'd rather delete it.
This is going to throw an exception when `BoundReference<T>`, and if `nil` is not `null`, we may not need to add it to the base `List<T>`. I think the same in other places can be removed.
Should this be a pointer?
This will be the only place where `sourceToNew` is called, where `elementCount` would be called.
Let's use `c.buildActionMutex.Unlock()` here.
I don't think we need to have a dependency on a user's context, we should just pass in the user's context as part of this API
I would prefer to remove the `=== null`.
This is used for testing purposes, not the `mesh` struct. The type is `2`, so I've added it.
you can just put the whole thing in the `JsonQueryConverter` variable since it's a constant
I think this can be removed as there is some way to do this
I don't see the reason behind these changes.
This doesn't need to be inside the `$this->container->get()` right?
Maybe add an assert.
Why is return true only when there was no event being received?
Can't you use ` AddPeers` instead?
I'd like to see the test setup to see if these changes were really needed.
Is the `IPTableRules` still valid?
This method is now unused and can be removed as it's now being removed.
Is this change intentional?
I think it would be nicer to add `.find;` here to make it easier to grok.
Kind is a bit of a fan of VolumeSnapshot and the same in VolumeSnapshotData throughout the code. Can we rename it to some other VolumeSnapshotData throughout?
Why do you use the interface?
I would add a check like `auto (role.Block::OpenIN_SECONDS(meta.get_child ("blocks") == 'Boolean'` and then use `k` here. In other words, `Boolean.Block_up_SECONDS(meta.Block_up_SECONDS(meta.Block_up_SECONDS));` should work.
Nit: maybe `forEach` is a more intuitive name for this helper.
Is this line needed?
I would prefer the build info as a user to not do this, but I would like to see an explicit build info in the log message.
this should go to `junit-api`.
I'm not sure about this. It might seem cleaner if someone has an error that might have been using this.
Nit: You can revert this unnecessary whitespace change
this is not needed
this doesn't have any effect, right?
I think it would be better to import `import selenium.types as protocol` in `development.py` and `development.options.common` module.
remove this line
This is no longer needed. This method does not need to show the entire `ResourceManagers`, otherwise the new `ResourceResourceManagers` will show the first `ResourceResourceResource` if it's true. If we are going to show the second time the listener is true, then we will show the first time the listener is false, or will show the second time the listener is missing.
I don't think this code is needed -- `run_config["solids"]` does not work, but `run_config["solids"]` does. I think this should be done in one place and the `__main__` method is not called on the `__main__`. Also it would be better to call `Run(run_config["solids"]`, it would return a `-1` error.
These 2 conditions are the same as the old one, maybe we can just remove them?
Is this a bug in master? I would expect that the test case to not include the read-tests.
Is this a bug fix?
Were we not doing this anywhere else now?
Why not close `session`?
This file has already been moved. We'll probably need to update the `go test` in order to make sure this file is not actually used
We can now now use `Bolt::PAL.load_puppet`.
I think it's better to use `symsymsymsymsymsymsymsymsymsymsymsymsymsymsymsymsymsymMatch` to do the same in `ElementElement` method. The method will have to be updated for ` CharSeq padTo`.
Can we call the new config something more generic, i.e. `custom_imports`? That said, I'd prefer `config_type` over `config`.
As far as I can tell, the question is not removed if it's question[:text][0].present?
preload could be a method of the context.
This can be removed, it is now required.
This include is not needed.
There's a typo here.
I guess `window.self.location` should be `KEY`?
why is is WorkspaceWorkspaceNotFoundNotFound is ignored?
I'm not sure about this.exporter.ShutdownAsync() - it was just a mistake before.
I don't really like that with the new version, but I think it will work. The original code only has to be changed by the new version. The first version of `[undefined-variable]` isn't in the second version because the vardel isn't in its `KER` and it doesn't need to be passed in.
Do we really want to call this? Can't it just be the policy?
I'm assuming you are trying to set the environment variable in these tests?
Is false the default value intentional?
@sjenning this change is the one you want for the cleanup?
I'm a bit worried that a `-` is being used to avoid having a newline at the end of the path.
I was thinking this might be a bit clearer. I don't think `BasicCtl` is used anywhere now, so it's just a function that just calls `BasicCtl`.
@deads2k I wonder if we should make this more generalized.
Please use the standard `if` statements
Never seen this private static
Is there any reason for just name it `exc_tb`?
Shouldn't we check that `Number.MAX_SAFE_INTEGER || (2 ** 53)` has been in fact factored out from the `||` loop below?
Why not keep the old code with the new code?
I don't think it should be here (and the line below). So, if you do it in a few other places it should be required, like this in line 918. So, I think you should import it as you can as you do below with the other changes in the file where you need to do that.
Would be nice to have a test that checks whether a ra has been committed to a ra action, and not for this test I think.
Could you add a TODO to add this? I don't see anything related to the problem you were talking about it being broken.
I think you should be able to use `1.0` here, no `fail(Exception)`.
h2O_VECTOR returns a string, so we need to add it to the string. so it should be possible to add it so we only add it for the "h2O" reference.
Is it not needed?
Can you move this `paramhelper` package to `teams`?
Can we please check for other tests that use this method instead?
I am not sure that this needs to be an int?
I would prefer if this was a separate bug, to avoid confusion.
You can use `@group_level = @group_level - 1`, which makes it a bit cleaner
What if this function is called multiple times? I'm not sure this is a good idea...
Can we make this type optional?
I'm curious why these are not public?
This is the only change I'm not convinced. Is this really needed?
Can you change this file back to the new year rather than adding new year ?
I think this should be `allowedOrigins`, and `allowedMethods` only works with `prefect`
This seems dangerous, as it will cause a user to hit the conditions.
Why not do `$runner->Category->Category`? Then you can drop one of these altogether and only use the other if possible
Do we want to check whether the E is defined, or not, or should it only be true if the analytics tracker is not included?
Should we be checking if the exception is null and we throw in the exception here instead of throwing an exception?
Why was this deleted?
Well, `Temation.make_name` should be a property of these.
This does not trim the database, you don't need to do anything other than the preferred. When the goal was to trim the database, the second parameter was not being set.
Should this be `import` instead of `numpy`?
I believe that we could just inline this line. It's a bit confusing with `\_`, but maybe we can just inline it.
Is this method used anywhere in any way? Isn't it better to use the existing `IsRootedPath` method?
The problem of `status` is that the returned value will always be "Init". Should we keep `status` or `Init`?
This function seems to be unused.
Why do u need this?
This should be removed.
Won't it be worth having a `float32` variable in place?
We need to make sure a user has the same user with the new table set of rows, and the new table will be the new table. This is an existing column that will be able to update the old users.
this is not a good idea. You should just use `winPSSVG`
I would say we should not add the kCS environment variables to the `ecs` folder.
Nit: Any reason not to just return outputs, and make that the error message is?
I'd put these fields under a single line.
I think the removal of default value should be `false`
I think this is the only change required for this PR.
Maybe we should log the entire function and log the flag, instead of just deleting it?
"as will be removed in the vestigial output"
What's the difference between 20 and non-places?
Why do we do this here?
@dain is it possible that statistical data structures go first, and functions used in learning algorithms in the statistical data structures go first?
I'm not really sure why you need these subscriber anymore. Can't you just use `events.views`?
This should be `@since default mode`, right?
Should it be `args`?
I don't understand this, this is not a typo.
Isn't this the `proposal` object?
I think we need to check for `Baseline` before setting the `Repository. Otherwise, this can be `true`.
I think this file is not used anymore.
@deads2k I am wondering if that wouldn't work. We can check for `--file-name` in that case.
This is a test that does not work. I am not sure if that's an issue here.
`x64` should not be defined as default. It should only be defined in the `aws/internal/xb64` library.
I think it's best to remove the `mpl_renderer.comms` here and just do it once once.
I think this is the wrong way. There is a test to check that `modname` is empty. I don't get it, but it does not make sense.
Please use Spack's name.
is this needed ?
Just remove this, and put it in `Session`
What is the difference with ``self._input``?
Is it possible to get rid of the metastore constructor?
So, this is the only real change I found in the `*log` that makes `*Status` the verbose hash. I'm not sure what the best approach is, as it's here. We could just remove the `debug` parameter from the `parse_level` method and do it with `parse_level` in the `parse_package` method.
Why do the `address_string` check here instead of the `ffff`?
This should probably say `proxy is proxy`
Isn't it redundant with the other `Collection_type` methods?
Should we add a method like `LoadJJDKPage` for clarity?
If there's more than one normally, then the `WeldCross()` method will be called.
This is a private function, we could probably just use it.
I don't understand why this test was not working. If it was removed, we can test the actual value as a string.
I'm curious why this is needed?
Why is this error not needed?
Should we just say `mapTo` instead of `mapTo`, since it doesn't really matter?
I don't think you're using `go-sqlite3` in the code - it is just a single go-aggregate file - which makes sense for the `go-sqlite3` file a bit easier to grok.
Why did you change the type to `getKeyName` here?
Please update the list of strings as well
nit: remove this and use `constant.ListDeploymentConfigTemplates` instead of the `HasNetConfigTemplates`
This seems like it should have been a link, but should it be a link instead?
Can you add a line break here to avoid the change in `unsigned long long`?
I am not sure about this. It's better to move it to the debug level.
If the node_l does not get the value for a transaction, is this intended?
Is the `Utils::calcUnscaled` needed here?
This is an interesting usage.
This should have a default value. You should be able to use the `Config::Base` to determine it's value.
I'd suggest just calling this "WebDriver-static" (and in the next two places below) for consistency.
This isn't a good idea. Maybe it would be better if we called the endpoint with `clef-signer-endpoint`?
What's the difference between `scss` and `location`?
This is a change in behaviour. Can the ``host`` be removed from ``host`` to ``None`` to avoid a change to ``host`` that is not needed?
I don't think we need to add this here.
This file doesn't make any difference, the `@package` should be `@` (or `@`)
you're using reduners here, `redhat_fips` should go away as well...
I don't understand this change... Why is it not here?
The `UserList` is only used in a single place. It seems like this class should be added to the `Outer` list above.
i'm thinking we should make this an immutable group by default... if we do, we should also have a `default_size` check here
Is it worth moving to a helper?
If you do this on `RetrySettings` and `RetrySettings.RetrySettings` you should be checking for null instead of using something else here. I'm not sure what the best way to do is for the `RetrySettings` class. The reason to avoid it is not using `RetrySettings`
This should be a `Saver` interface.
I would have named these `global` because that can be an issue for other global blocks
is it a good idea to remove the assert?
Another `Dispatcher` bit? (BTW, we're really doing the same kind of thing in the `TChannelDispatcher` and `GRPCDispatcher`) I think this needs to be moved to RPCs.
This log statement seems redundant (more important in a debug statement)
Maybe `parse` as a string? (just curious, it might not be the case, but if it's something else we'd have.)
I would add this to the other components in the constructor. Also, I'm not sure why I need this. The name of the module is a bit confusing.
This will break the API.
You can call `Flush()` from `triple` to `Flush()` here?
It might be a good idea to move this to `complex` so we don't have to add a new field here for now.
I would keep the same check as above, and add a note about why it can't be working on str.
Does this mean that when the test fails, we would need to call `_ = os.RemoveAll(dir)`.
I'd add a TODO to track this message
Is this needed? I thought the only time this method is called with a single argument.
This is probably a good thing to change. The `toMap` is used as `func`.
Do we have to call `localProjectAppNames` here? If yes, we should use the value `localProjectApp`.
`nextHeightWidth.height` could be set as an attribute to the height, and `nextHeightWidth.height.startsWithvg` can be null.
Does this mean that `deploy` can never get a tx?
This is the most reasonable way to go, I would use the existing `||` version instead.
Hrm. I don't think the naming we're using the migrated migrated. We should probably check if the window is passed in and then set it to the `resume` field from it. I think it should be passed in as a option. Thoughts?
What if the current user does this `int.affine_grid_generator` instead of `int.affine_grid_generator`?
I don't see where this is defined?
I think this can be removed
Why is the body set on the `NotFoundException` in this format? Doesn't seem to be the same as the existing `NotFoundException` format.
Why does the request need to change here? If not, why do we need a `wait_for` here?
This is still needed.
We should probably change this to `time.Sleep(namespace.CacheRefreshInterval + time.Second)` or something like that.
Is this a valid path?
Should we make it a `Video`? The `Video` array will be `1e-1e-2` anyway.
nit: add trailing comma
This is not right, I don't see a point of having the `RayResource` parameter here.
I assume these changes are intended to be in a separate PR?
why is this flag moved here?
The topology is null. It may be non-null.
I would have put this above the previous one (which is what I was doing above, as this will change some other package)
If it's changed, it doesn't have a cmd anymore. I will add the `other role` as `this.should` should be `data` instead.
Do we want to add a custom configuration configuration here? Can `serve_static_assets` be used by `CDN` as well?
Why removing this?
Layout/AlignParameters: Align the parameters of a method call if they span more than one line.
Is this error enough? If Instance and error is nil it means "expects error when instance could not be found" is correct. But probably not.
This `Tuple` may be better in some cases
Shouldn't we also remove the `Won` field from the `advanced`?
The "XUnitIntegration()" field needs to be updated to support Vendors. I'll take care of that.
You could use a better wording here. Also, please use a `\` instead of `str` to indicate you're using a string.
**Question:** Should we instead of a corresponding indent here, so that these conditions don't depend on the line above, rather than an indent?
I think we should add the setFlags above the `show` function and add the `Validate` flag.
should this return a `error` rather then check it again?
It'd be better to use the `trait JsonResponseTrait` for the class name. It's a bit odd to pass it into the `CacheableResponseTrait` rather than directly to `traitlessResponseTrait`.
could we add a TODO here for the `xpub` case
I think this should be a group and set `.find_by` if the email exists, otherwise this will raise an `Error` if it doesn't exist?
I know this was not before, but I think we should remove the `CopyActionsToFlow` from `CopyFlow` because it is a nested field to have a `WriteProps`.
Why was `config.XDPEnabled` nil before? Why is it not `nil` instead of `false`?
I wonder why this isn't needed. `qualifiedNameTypeDeclaration` already returns null.
Isn't this constant called before we call the http2AuthorityPseudoHeaders?
Is this change related?
is this the default ?
What exactly is the purpose of this change?
Is there a better idea to do this, as `isRetryDocker()` is only applied to all tests on Travis?
I think that we should just use the `return`
@mfojtik why don't we use the username name here too?
This one is a wrong place for the `test/identityset`.
this is not related to this PR but can you revert ?
There shouldn't be a need to change `QItemSelection` here, it is already there, and it is unfortunately confusing.
Is it necessary for this shared function to be called from multiple threads?
`extensions: ".jsx", ".js"]` ? (And also an empty line after this one) I don't know how long `js` is supposed to work
Nit: import order
Why are these methods removed?
if we're going to use the interface above, I think we could remove the need for the `io` interface too.
I wonder if we could make `*big.Int` an `int` (or maybe use `Getbig` instead of `Size` and only use it on the other `pkg/r/tFake`), so we don't have to use `pkg/r/spec/models.go` instead.
this one doesn't seem like it should be an error?
should we also remove this spec?
This should probably be safe to allow the `label_cb` to return an empty callback callback. It also seems like we should be able to use the `label_cb` callback.
Is there a typo we should use here?
Can we use the min instead of the min?
If you use ``os.path.join()`` here, I'd rather use ``os.path.realpath``. The ``os.path.realpath`` is a ``os.path`` of its definition.
I don't think this is used anymore, is it?
> I will not be configured to CASDefaultCstorPoolLFLFKey = "OPENEBS_IO_INSTALL_DEFAULT_CSTOR_SPARSE_POOL" This is what we want to do in #6270, it will be configured. Otherwise we won't be doing this anyway.
`close()` might be a breaking change.
This line is duplicated.
Why not `use Bolt\Storage\Query\Directive` ?
Let's keep this import sorted (datetime.datetime.From)) and use it everywhere
What's the benefit of changing this field?
I don't think it's necessary for this to be an optional parameter, since it's an optional parameter. In the future we might want to keep the type of a type `Optional` here, but that wouldn't make it more clear.
This is the only one I'd rather not have any test.
why is this deleted now? If we don't have to go through the `working` state we can just pass it in.
We should not have it on the main branch.
nit: could you use a simple `breakpoints` here
I'd just assign this array to a string like `-1`. Otherwise, it's the pattern the number of strings is not the number of strings.
why is this needed?
Why this change? It does not seem necessary to me. The code is already in an `else` block.
I wonder if it makes sense to put this in the if statement as an assert. If the failure is empty, then add a default value to false.
This should be `pip fil` rather than `const getNameDescription(it, this, -1, false)`
I assume you can remove the default value from the passed arg and change the default value to just the `onStartNestedScroll`.
The assert should be inside the `fill_cb)(&subreq->buf->size += inbufs[i].len` if it's not set
Does it make sense to put this at the top of the file? If it is, use the constants.
This does not seem correct. The original code was only used for testing.
I'm wondering why this is necessary?
This is the only thing that should be `true` - which will not cause `right` to be called. Is this something we want to remove?
I think we should only return this if the dir is already set to true.
this file is missing a `@CheckForNull`
Why did you remove this?
why is this change needed, can use `Model := :=Type[id])` ?
should we be able to make it final and return -10 instead of -1?
This is now unused, why not just remove it?
How come it didn't do this?
Can you add this to the `PackageRegistry` folder, as we'll never be able to use it for `S3PackageRegistry`?
Do you know which order this will be used?
Please use something like "requires to get the chained comparison with the string value". It will be more readable if we have more than one line.
Can we make sure this is the new default setting? Like the new default value?
Is it worth logging a proxy at runtime?
Ah, I'm just curious, why there is no `:authority` field in the first place (which I am a bit confused with this one)?
Is the idea here to get a message saying that a container should be returned from the server side? Won't it be `err.Err` to avoid any possible network from the message?
This is the bug fix, I think the error message should be the same, no?
This will only work if `config.option.poppler` is true, in that case, you need to add `mark = false` in the config list, right?
this seems wrong
Is it necessary to change `--logging=TRACE` to false here?
Shouldn't it be `project_number`? I think we don't want to add it to the end of the query.
I think this was a bug
Remove the logging.
This is `logger.NewTestLogger()`?
hashCode is not used
Why the change?
I think you can remove this line because `user_bp` is no longer used, right? It's just to be used outside of lastfmscraper.
Why is this in the `DefaultDefaultDefault`?
We don't need the `native_powershell` method anymore because we can just get it to `native_powershell`
`collection?` should probably just be an `collection?`.
This was just a mistake that wasn't being used elsewhere, can it?
This should import `import p pow powers.pseudo_sampler as Tsert` or the other similar classes, like you did for the other `samplers` import.
I think this import should be moved into the standard library imports. We can use `com/algorand/go-algorand/`
Just checking, do you want to confirm this was the right default?
I think it would be good for these to be removed, right? It looks like you could just get the logic from there.
This is not related to this PR, but it's a bit unrelated to the rest of the PR description.
why move this?
Please don't add new lines like this in this file.
There's no need to lock here, it is only a lock for a block.
There is no reason to have `--volume` return an error. We need to update `typed_volume.py` to return a `fingerprint` that doesn't break.
this change is not right as the zkShardTerms is already defined in the zk leader class right?
I wonder if this should be `AbstractAnyTypeDeclaration`
I think we should leave this file unchanged.
Please remove this
I thought we were removing this from the service?
Can this use `MPI-CUDA` to ensure it doesn't even compile? Or is this not something of your fault?
I guess you need to add the namespace as a parameter?
This is the most reasonable change (I think) to be able to re-introduce the code for `api/main.go` to use the new config file (and then we need to make sure that the new config file is not present on `api/main.go` has already been started).
I don't think it will ever be used anymore in the engine. The engine is not the engine to disable them.
It would be better to use a single boolean, like `ImmutableMap.get(entry.getKey())`
What is the difference between None and the name in self.TYPE_REGISTRY?
I believe that this can be moved to the top level class.
I think it would be nicer to use `Time.service` here rather than `Time.3` since it's not used anywhere in the codebase, as that's the case.
This seems like unnecessary code.
I think we need to use `QDesktopServices.openUrl` here to be consistent with the next line in `get_str()`
Why a single `ctx` here? We are using `4.X` with the same `quit chan` as the key.
I'm surprised we don't even have `MemoryLimit` in here. I don't see any other code that is using an extra `MemoryLimit`
Maybe just `if (r *RouteTable) then err != nil`?
do you still want to have an un-idx in this file?
don't change the doc string.
this file is no longer necessary
I'd prefer a different name for this to work on all platforms and to not use an attribute.
The error is raised by `aws.go ` after this call.
Does this break anything? It should be `new stopped(3, queryTimeout.getShouldExitCallCount())`
format inventoryfile boltdir allow allow to use inventoryfile boltdir for global
This exception is thrown by the caller (the `exception`)
I'm not sure why you moved `Throwable` here, but it's not the only thing that's a problem.
The Dynamic clone should be removed, not the first one.
This appears to have been added because CONTAINER is not deprecated. Is that correct?
This is the only one that I was seeing. I see that the previous code did not set it. If it is the case, then there should be no need to use this.
You are using the `array()` method in this class (it will be the same)
What about `request.getRequestType()`? We could add some property to the `SOLR_REQUEST_TYPE_PARAM` below?
@Kokkos_Core.hpp is the default for Kokkos_Core.hpp that means you need to remove this file from the original version as well.
I think it is not worthwhile we have a queue/health handler that will never be null. If we remove the whole handler for a queue/health, we can use `cb_mq_health`.
The `len(rule.Dst) == 0` check seems to be redundant
This is probably the only place where I'd call it `getParamsHeartbeat` or `getParamsWindow`? I think it should be called `getParamsHeartbeat` since it would only be called if the listener is not created.
This is unrelated to other changes and is unrelated to the PR. Thanks!
Style nit: you can just remove the space between `if` and `xstate_has_extra_fields`
Nit: It's nice that this name doesn't make sense to me
This should be `>= 0`. Otherwise the new `DIFFICULTY_BOUND_DIVISOR` and the `parenticulty` attribute will not be used.
I'd rather we have these as a constant so that it can be removed too, if needed.
I see a bunch of changes in this file which should be kept in the `listens` method. What do you think about having a method that can provide a method and then passing that in to the `listen` method?
This doesn't need to be added to the commit message.
This should be changed. Sorry for the long run
This one also needs to be fixed in #989
`2013`
Maybe we should add a link to the ACME client and let the ACME be set on the top
I don't think we should be changing the default value here, we should be able to just make it `true`, not the default value
I think this was accidentally removed
Is this needed?
@tannergooding this is the real fix for the new one as well.
This import is unnecessary since junit isn't being used by the same thread.
Does this need an assert or does it return an error?
This is a public API and will be removed in future. Is this intentional?
I think we can just inline these variables. Also, can we keep the old name in line with `StoreDir`?
Can't it just be an error?
This class is used in the two places: `baseFeePerGas` and `PerGasPrice` is used in other places where we use it.
This one should be removed.
Why not use a variable here and not use the default value inside a `ksql.getTableScan()`?
You can remove `ReferenceLivedMarshalByRefObject`
This is not needed since thebridge is in the database.
Can we make sure that we are not using the container directly?
We should also say "This call will be ignored for the connection flow control window."
Please keep the original. It was to show to the warning in the UI.
Just curious, why the `push` cast?
I think we can get rid of these then since the rest of the code is repeated below.
I believe that the `return` should be fine, and the `return` shouldn't be necessary for this case.
Shouldn't all these be ID since these are all the way up to the `LeaderID`?
The `git` is unfortunate, but it seems that we don't allow for a git git git git git git git, which I think isn't the case when the first `has_TED` is not the original one.
This is a leftover. Can we use an enum instead?
The `extension` class is redundant, because `fields_desc` has already been released (even more at the end of the `extension` class).
I don't see where the `seed` variable is used in the test code, but the name of this test case seems to be something like `--order- rand:SEED.aded`?
This is the only place where we set client to true, but the client must be true in case we want to keep things the same as we do with `if (mod->is_client == '1')`.
is this the same code as above?
Please avoid wildcard imports. Please revert this import and merge
Can we use a module.exports instead?
This is an actual change, IMO.
should we consider using `if signed_in?` here instead? Also maybe add `signed_in_in` to `script` and `signed_in_Session` since it is used only when `active` is specified?
What about the lower level?
Can we move this to the proper location since the `autoRowSize` is an object of the `AutoRowSize` object?
I think you also want: `consider-using-namedtuple`
We should not have octest.OK here.
Line is too long. [84/80]<br>Put one space between the method name and the first argument.
Do we need to check if the ID is unref, or does it go through the block ID?
I think you can just remove `nameof` and use `value` instead of `location` for the current dictionary. It's not possible that it's not a dictionary, but a dictionary would be a dictionary, as this method will only return a dictionary.
`data` was unused so we can remove it.
this will break if you remove the older version in the database
This seems a bit odd to me. Can you remove it here and the below above? I guess it is not related to this PR.
this is an error error. I think it might be worth checking that `error.err` returns true in this case?
The `train` should be on its own line.
Can this just be `ChainID`?
Were you intentionally doing this in the other PR? It's only needed if `CackException` is set and there are many places, but the `CackException` itself is indeed an issue because there are many different instances of this method. I think the `CackException` is fine.
No need to add `ruamel.yaml` here and below.
Unnecessary empty lines, please?
I think we can use a try with a null `Set`
Just double checking, is `:user` ever equal to `true`?
This is a pretty hard-coded call, why would we want to change the behavior of `!smsg.Signature` for all the other types that work to `block(smsg)`, `block(sigBits)`, etc.? The reason it is that `Input` is the default, which we use is indeed the default, but we have no `api` for that (and `api` is the default).
This was a leftover from an unrelated bug, which was a no-op.
I guess this was causing the bug I have seen in `taint_start`
It's better to move to be `java.util.Map` so that the collection file will fail to avoid confusion.
Why are we using the `count` in the struct?
This should be `TTemplateParamClass`
The second condition is probably better. Also, what is the key ?
Does this need to be part of the target target?
The other arguments in this file are unused and can be removed.
Maybe we should keep logging.debug instead of logging.
If the value is an equal, the value would be an `NullPointerException`
nit: `originalIcebergType` -> `originalIcebergType` (or `_eventcebergType`) (which would be better better than `unboxType` but I don't see how this is used anywhere else)
I'd remove this.
Should these `MongooseError`s be renamed to `isAbsoluteError` since this is the default behavior?
@jridgewell Can we make this consistent with other places?
I'd rather we pass the `CloseableIterable.transform(records)` as a `Data really` so we could wrap the next `CloseableIterable.transform(records, "CloseableIterable", "CloseableIterable", "T")` in the `CloseableIterable` constructor and then wrap the next `Internal` in `Iterable`?
I don't think this is necessary
this else branch is not needed in your code
The name feels odd... it does a bit better, to not use `d.pid`.
I think you can do: `AssemblyOptions.validateParams(this.opts.params)`
Is there any way to change the network name?
Why do we have to add a new block?
i don't understand why this change is required?
`marionette: true` is not the default behavior.
Would it make sense to keep the test name rather than just the explicit name?
I am wondering if we should instead check the `deviceName` attribute here and pass it in to the `if ad.DeviceName != ""`, or at least pass the `deviceName` attribute to the `send` method.
This property is called from the UI, which is not a subclass of it. I would recommend adding a custom property and a custom property that takes an empty string.
why `1` to `0`?
why did this have to be a pointer?
There's a lot of work here.
In other classes, what about `null`? `initializer` is the default and the `null` is null, so it is not the case.
why do you use `ElementType()` here?
nit: why remove from './remove from './remove? why not remove from './remove?
Can we move this to a separate task so we need it in place to avoid this code?
@murrant This was the bug I was about to do in `columncolumncolumncolumn`. I think the bug was not right in this PR, as the `atomic` is a float. But I didn't see any reason why the other changes are not needed in this PR
This needs to be set to `true` to indicate that this won't happen anymore.
` fetchMock from 'fetch-mock'` is a no-op
I'm thinking if we can remove the context.ExpectData check because it's not used at all and it should be removed.
This will need to be reverted.
You should just use `org.jboss.os.environ.find`
I don't think this is going to work. We have some test failures with `map[string])` in the logging level, so we should throw here
@jcotela is this related to the issue?
The variable name `FEATURE_NAME` is `const`. `reports` is `const` for consistency.
This should be handled elsewhere.
I'm not sure we want to use an error here?
We should also be using the enum value here.
Again, no need to pass time here, just use time instead
I think we should use `String.null` here.
I wonder if the name `getUploadedFlowFile` is a bit confusing here... Maybe `getUploadedFlowFile` is a bit more generic for the name and for the name, what is the purpose of this method?
@mitchellhenke would it be better to have one of these in a `dynamicconfig.DurationPropertyFnWithTaskQueueInfo` (or some other other later)?
This should probably return `self.NVDAObjectFromIdentifier`
what is this suffix for?
I believe this was just removing the "addaddons" part. Does not seem related to this pr.
Is the `isSameAs` method method used somewhere else?
This makes sense. The only reason I added is that `CachedThreadPool` is an array of arguments is because it was a `max_threads` which is not a `CachedThreadPool`.
This is just `sum_loss` and `sum` is not specified, but now it's used `none` and it can be `None` if it's not specified. Also, if there is a `is not specified` that is the same as the `else` branch.
I think we can just remove `add_module()` entirely.
Please don't update the variable name $balance. It makes the code harder to review.
I think we should still keep this test, right?
I don't think we should remove the TODO.
I would prefer this, it will be better to use `other.row::program` instead of `if le ByteBuffer::move(other.txt[i])`.
I think this should be imported and not imported.
We can probably remove the `if dask is not None` part.
this is used for a environment in the test function which means we can call the environment in a different way.
Hm, is there another place we can move this config config to the `enable_principal_state_updater_frequency`? It might be a better place to add it.
I think I'd rather see a message like "waitForThumbnailsBeforeUpload: true" or "waitForThumbnailsBeforeUpload: false" (which is the default in the case when the message is set to true), or even better, "waitForThumbnailsBeforeUpload to false" or "waitForThumbnailsBeforeUpload" (with the default option). But I'm guessing the message should be "waitForThumbnailsBeforeUpload: true"? (For my understanding?)
For the future, i think it might be better to have something like this in USERS, that way it doesn't have to be USERS
I think we don't want to keep queue anymore in a case when a queue is not null.
This change seems unrelated.
this is not needed anymore
Should this just be a `PhaseSelector`?
Shouldn't this be `AllowlistedModules` since its not being used in the corresponding `io.prestosql.spi.modules.AllowlistedModules`?
is this necessary?
This import is unused and will be removed.
this looks like a regression, is it really a valid valid value?
I think this is a bit of overkill. I would move it to hybridMountpoint, then use those in the same function.
Use the new Ruby 1.9 hash syntax.
Is this a public variable?
campaignSource struct is a generic, so it should be exported from this struct
we may want to make this constant configurable by default?
Please don't make a constant here.
This doesn't appear to be a problem, but it would be nice if we could just catch the `isNodeProcess` and keep the `segfaultThThreaded` code.
I think it should be disposed. Maybe something like "This object should not be disposed"?
Can you add a docstring to this function?
This method doesn't need to be re-assigned since it's only used in the `before_action` method, so can we remove the `user` helper and remove this method?
This should be a `List[string].Dictionary` or something.
Shouldn't this be the first check to make sure the value is `0`?
Is this method still used?
`Get` -> `CreatableIndex` here, but `CreatableType` can be removed.
This line can be simplified to: if (len == 0) && (memcmp(sourceData, HIVE_DEFAULT_NULL_STRING, len);
I'm not sure we need to do this here. I don't have a strong feeling either way.
I don't know what the `.force` of the `force` is. Should be on the same page (and also on a template_id)
> [](start = 8, length = 1) I'd prefer to have it named `hash_mask, false`.
nit: I think we should keep the original author as the last 2.0
This would break stuff. It is not clear to me what's the intention of this code here.
It would be better to use a constant to create an interface for this, if necessary.
Can you explain why these changes are needed?
The nodeToCIDRs is a bit redundant, it can't just be a pointer and can be returned from here. Also, the nodeToCIDRs should be removed from the config file.
This is the only place where we'd have to check for Gem. This is a different approach.
What's the point of this method? If it's only used for `set_format` it means that the package contains a single package, and the call to `set_format` doesn't match the `format` argument.
This is an example of how the `@see` tag could be used, but I think it could be used in the code base. I think that we should just use an empty type to make it clear the `@see` one is used. We would like to see it all in one place.
I'm not a big fan of adding this new field.
Can't you use the real `isort` here?
I'd suggest to add some info about the backend, as that doesn't make sense
I think `New` and `ListDeploymentChains` are used for both `New` and `ListDeploymentChain` methods in this function.
The error message should be `"failed to %w)"`.
why is this changed?
Is the `ctx` prefix still needed?
What's the use of `FATAL` here?
I think the method name here is a bit misleading.
I think it would also be easier to read if the ScheduledJobType can be an object.
Why not use the default file?
The trList2.get(0) should never have a pumpId - it seems that the trList2.get(0) is a number. So we don't need a separate variable anymore.
we should add a `shortAddressAddressAddress` to reduce the number of seconds between the router and the router.
I think you can remove it if not needed.
prefer a overloaded `\` if you don't use a composer.
I am a bit confused by this. If you do this and `Create.nilkeys` can be nil if it's not nil if it does a `nilkeys` or `nil!` then it'll be nil. And we can just do `if a.Key == nil`
This doesn't need to be annotated as `T` can be removed.
why do we need to change this config? `db.go` seems to have been copied from `lib/src/main.go`
Nitpick: I think this can be simplified to remove it
Why did you change this file?
What do you think about just checking that the result is a string instead of a string? This way we don't have to test that and we can test that the result will never be present
this is no longer needed
It doesn't seem to be used anymore.
It's better not to use an enum that is only for language language.
This file should be changed.
I would prefer that in case it will be called `Sub` or `Sub subscription`.
I wonder if there should be a better way to do this in `serverOptions.setSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingle
This file can be removed if it has a typo
Isn't this a bug fix? Seems unrelated and I assume this is a fix so far and might be a good one to fix!
Should this be a `&1D`?
You'll want to remove the extra lines
Will the echo be false even if it's empty?
This test needs to be updated.
Is this needed because the first condition to get the current one from the `defer`?
@jridgewell any concerns with this change?
I think we should just be setting `gasLimit` here, instead of `Int.Uint64()`.
Seems `PersistBlockLevelInfo` is not used in this function.
Since this is only used once and not on line 435, I would suggest moving this down to a separate file.
`isView` should only be used here. We should probably make it `true` or remove it if necessary.
We have to also add `attr_writer` to the `attr_writer`. We can keep the `attr_writer` model to allow for the `attr_writer` to be present (even though it has to be an object that is set to the first model)
You can just use `var itemType = item.Type;`
I think the best name is `aldeprecated_worksh`
Please make the same change. The `receiveError` function should return `null` on `true` and `undefined`.
grpc -> linter?
`cancel` is never a `context.Background()`. It was a special case that `context.Background()` returns `cancel` object which is wrong. I'm not sure if it is a good idea to call this method directly.
Can you please remove this line?
Openstack is the same as the default "Open" in `config/iface-list.config.
This could be simplified if `\\b` is `2`, but the `2` is the same as `\\b`.
AddDiagnosticSourceInstrumentation<TInstrumentation> instead of TInstrumentation?
Rather than re-implementing the `project.name` helper here, what do you think of checking the typedef to ensure that the bolt-project.yaml is not a string?
Maybe add the `//` to the description?
I would suggest a check that it returns `nodeList.Items == 0`.
I think this should be `created_at` as the name of the table, not the name of a column.
I don't see a reason to remove this?
I would suggest using `sprintf` instead of `pretypedEntity` as deprecated
Is this TODO actually intended?
This can be set to `false`, since it's not used in the tests.
Nit: This field was unused and should be kept.
`ZoneOffset.UTC` can be removed.
This is the main use of the `requirementBase` class that's defined in the base class.
is this needed?
Is this required on purpose?
Wouldn't this change be more specific as the other way around and what if someone wants to set the `AWSEmailProvider`?
Why do we store the password in the middle of the email?
nit: it's preferable to have a constructor that's only used in a single file, so the order of this file is the same as in `/des/preact_KEY/`
If the text returns 0, it seems the value should be `0`. The other one is to return it.
I would have left it as is
Why did this go?
LOG() is now unused?
I think this should be called "delta" to make it easier to find it, or at least in a way that is not a valid service and not something that can cause NPE if a user does not care about this.
This doesn't seem to be a good idea. If you want to be consistent and remove the "if (the table is associated with this ... ) the data will be in the table "
What does `is-ca` mean?
This could be moved to `self.py`, no need to repeat all the `if`s
We could just have a `devElement('script')` and have a `script.javascript` helper function that returns `None` and then we wouldn't need a `javascript.script` in the `script` declaration.
It looks like this could happen after running the tests, and in a few places it doesn't do anything, so we'll still need to be sure that the error will never occur.
I'd prefer to not have this as a separate commit.
You can remove this line as well. We don't need `attr()` anymore, right?
Is this used anywhere?
Do you think it's worth to create a struct in here that it's not needed?
How about just making value_len be a const?
Does it need to be reenabled?
This won't work. `NewNSBuilder` will return a process ID so you can remove the second return, but it will not work when the process is already closed.
nit: maybe name it `VXLANV`
This bit might not be needed, because the default `views` will be the same as the default `views` instead, I don't think it can work here.
Why not using `ref` directly?
I think this is a bug fix. We're just getting rid of this in a later PR.
`config` -> `T (`doing` -> `T (`doing`), it's better for clarity.
This should probably be `"data"`, too, right?
Why is this a `revision` rather than a `revision`?
This can be `_static` since it's internal.
We may need to add a check here that only the one in `Helpers/Helpers.go` is used.
How does does the `conftest.py` ever come from a program?
nit: can we rename this variable to its more readable?
Please use `oldVersion < 1070296` here.
This is the `LogicalType` field?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Lint/ParenthesesAsGroupedExpression: (...) interpreted as grouped expression.
I think `$descriptions` parameter is unnecessary.
This makes sure the user is not empty. This does not prevent metrics from being created. It seems to make sense for this to work.
The `if` is unnecessary here
Why did this change? Shouldn't the tests pass?
Unnecessary spacing detected.<br>Operator ` are not necessary;` should probably be fine.
The naming of this operator is confusing, as it's used in two places.
This file needs updating. The `.Add` file should work without the changes in this file.
I think it's better if we just pass in the `TaskQueue` instance, rather than remove it from the `Default` class, and just return the `TaskQueue`.
Is the constructor constructor ever ever used? Can you use TODO? For instance, AccessListItemForRpc is already declared.
You don't need this function as this is only used by `server.URL` and it's in the same package. I don't think we need the client.
I'm not sure if we should be using the count in the flow process so that we don't need to count it every time.
this should be moved to `_get_setting_types_quickref` I assume it's not necessary
This might be more efficient to just call super(). We can't just use `SGEJobTask` for super().
Could we add a column column column for this table? I find it more readable. It makes sense to add a column for this table.
This is a really good place to fix. Please add a check that this works.
GroupIDType should probably be GroupIDType
>Percentage of the graph (in vertices) to contract [0..1]" [](start = 38, length = 10) Should we be checking `Percentage of the graph (in vertices) to contract [0..1], contract [0..1]"` ?
Please move this to `setNetworkConnection`, and add the same for `private` fields.
Should we be calling this `value` here?
do we have a test for this?
Wouldn't it be better to do `@Disabled` in `ProfileProfileFactory.rb`? Then you can call it `two_to_all_to_string`.
The message being logged as `Header512s`, but it's not a good idea.
This is a breaking change. We're missing a newline for the two lists.
This means that if the output is not running, we won't be able to get the output from args to debug when we don't have multiple GPUs. We should not be adding the output here.
> 0 [](start = 8, length = 17) nit: the `data_id` should be 0 `m_num_labels`
This is not right, `delimiterIndex == -1` can just be set to lowerDomainInResource, but the current logic below also doesn't seem to match `callable`
can this be `rename_column?topics, :trail_map, nil`
The default value of `backend::lang.user.inherit`, is this right? I mean, in this case, I believe the `im` check should be updated, but the `im` call should only be updated with the `Langy`.
i dont like this this, I think we should be using the `bundle.exec` module here since it will be the name of the path, it's an alias for `puppet/bin/bundleb`
Isn't this a BC break?
We could probably make this `err = kv.WriteBatch().WriteBatch(batchForBlock);`
I think this should be `Void.complete()`?
You should use `_x` and `_site_kit_VERSION`.
this is the fix, right?
Why change it?
+1 for moving listener to ProxyListener
The other place I'm not super convinced about it is that we're not doing anything with `time.Now` in the first place - it's not a simple call to the other one. I'm not sure what the problem was, since the rest of the code would be a good time to change `time` to `time.Now()` in a different way than a special case.
Could you explain why the `500 env variable` is needed (or just the ALGOSMALLLAMBDAMSEC)?
This is a breaking change
Nit: "constant" should be "message"
please use a relative import
I think this method will return some errors, I decided not to just remove the assertion that no one has found it
I would suggest using `string[]` instead of `string` (as that's what you're in here)
This should probably be a `Debug.Assert(key != null, $"{nameof(key))` instead of the `Guard.Null(key, null, ...)`
you should add the `TODO` above, so that this doesn't print the file in the `cpp` folder, which will be used by the user to make sure `catch.hpp` is also used once. The `catch.hpp` isn't used at all, and then you need to print the file after the user to be able to handle this.
This is the only place we want to use this. This change is just the default, which means we'll have to use the `TYPE` field in the `ProductImageField`.
We should only set the `ManagedAgentRunning` when the container is not enabled. It should probably be changed to `expected managedAgent container state change event did not match actual event`
I believe this import should be above the `*`, not here since it is part of our existing test.
We should probably add an issue to track track how many users see this. It would be good for a separate PR though.
This should be renamed to `fixtures` (same for the other tests below).
Use a constant somewhere for the string value.
This will need `hid` to match.
It's better to just ignore the error.
You can remove this package as it is not used by `build`. I'll fix it in a follow-up.
I think `getIcon` will always be called, so this should only be called once per icon.
I'm a bit confused about what the package package is used is `golang.org/x/net/context`
This change doesn't seem necessary
Is it worth moving this into a helper method?
This was causing the test failure -- the test failed after it made sure that all the data was created.
LOG_IF should probably be passed into the logger. Is there some reason for adding this to debug level log?
Is this the default behavior?
It's probably better to move this to the `disable` class, instead of having the static import.
I think you could just put this on the previous line. What's the benefit of this? The current code is not really related to any issue. But it's just a nitpick to have a separate PR.
This is not the same as `Current` method, why is this nullable and not as the assert?
What's the reasoning behind this change?
This function is no longer used, I think it's better to be consistent and pass it as a `common` param to `CreateVolumeTarget`.
Why did you remove the `record` clause now?
I'm not sure if this is the correct place to put this. The batchstore will be respected to `b.localstoreCloser`, so if it is the batchstore that's sent into the batchstore's `localstore`, then we can remove all the `service.New` checks.
What is the point of this? Is this a public variable that could be used for a specific config?
why change this?
This will fail on all platforms where a field is created, right?
I'd expect this to only be set if a service is disabled. It is not required to be able to create multiple service.
It's a good idea to use a more specific Exception than the exception, it could be changed to a more general Exception than the actual error
This is also not a typo. "Blocklyly never lost"
why was this class removed?
Does anyone know if that's possible or what's best to keep the hex?
`writeXML` seems unused now.
Isn't this sufficient in the `if`?
This method has no relation with the schema.getfile schema.
Can we call `ErrRequestCancelled` in the error message here?
This was a leftover from the rest of the file. The latter changes the functionality in #6562.
nit: this is going to be a very small thing, could you change it so that we have one function to get the logging and the other one to use?
Can we add a check here if there are any items that are present (as if not, the `--speak` header is empty) and only if this value is present?
@mhoemmen why did you change this?
Do you think we should make it clear what this does?
Why remove this?
Why does the UsedRaises need to be there? Also, why not just do a hash instead of a hash?
if we have a default, then we should have this default to "4.4"
this change is unrelated to the PR but i think it should have been here
The same here. If you remove `firstTimeEmpySubject` from `serverserver` it means the name is already in `serverserver`, the `firstTimeEmpySubject` is a better name. The other name is just `serverserver`.
Should be `transport.go`
You've already added this warning to the queue above, so you should raise an Exception instead of doing an exception. I think the connection will raise an exception and the exception is not.
Why do we need a new method for this? This makes it clear it's not used and is used anywhere else and we should try to avoid adding any additional user parameter and re-enable the existing one.
Is this `_isHidden` always true? I think `_isHidden` would be clearer.
Is this really used?
I think `KeyStoreFile` is not necessary.
I think we should keep this as `console.log`
you don't need the `if` in the else statement :)
Should it be `parse()` instead of malformed?
Shouldn't you just check if self->logIdToSend_ > self->logIdToSend_`
I'm not sure we need this. The reason for the other changes is: 1. We are adding the new `cdLog` value to the adopted clusters and not using this value to avoid all other changes. 2. The old `cdLog` value is only used to check the new values from the adopted clusters, so there's no reason to do it. 3. We could just make sure it's an option to check the new values. 3. We could only use the new values from the adopted values from the adopted clusters, which can only be used in the other flow
I guess the tabbed is unused?
This should probably say `it "when a duplicate formatter exists for the same output target"`
Can't we use a static function here?
This should be moved to the `mContentContent` interface.
I am pretty sure you don't need it. Why do we need this code? `swagger.getPaths()` is a nullable method. `getOperations()` can be null.
Can you remove this test as it's now an unrelated bugfix?
Shouldn't we use `! named here?
I don't believe this is true
If `max_utils ` is changed from json` this function should be changed to `import json`.
I'm curious: is this a different issue now?
This line was not required to prevent preventing the error from trying to run on a user from seeing a "official" error.
The `ethBackend` is not needed, since its a subtleties here. It would only be needed when the first element is in `models.CreateWithAssembly(...)` so that if the function is called it is called.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we should remove flash from the URL and just do `application/......`
The message of is sealed is the {Left}.", but not sealed. Can we just set it to 0. All the contract will be incremented.
Is this change intentional?
The default Cassandra is ` offsets`. Is it possible to remove the default at compile time?
I'd like your editor to use java.util instead
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
It might be good to also test `body.status=bytes`, to ensure that it works with `utf-8`.
you can merge `label=comp.split('.')` and use the `split_id` variable here instead of `label=comp.split`
I don't see an `@SuppressWarnings("unchecked")` annotation defined anywhere.
Why this change? It was changed in 2.6 so it should not need to be configurable by this change.
So it's just a namespace, why do you need to do this in the `Read` section?
just curious, why you changed the hash here?
This isn't necessary, the `dba` tag can be left as is.
I'd expect to have a better message here, like `--hive-with-hive`.
This is not the case, but why did you change it? I don't see a need for the `and` part in the next PR, just wanted to check if this happens (we'll never do it)
The issue I'm not sure about is that the tests pass in this file, but it seems to me the tests were passing in the test. I'm not sure what the best approach is if someone had to do with it though? Maybe that's just a thought.
This should be changed to `if (excessDomChildren > 0) {`
Can you change this to `off` and add the two `s.off` to this function.
Is this change necessary?
This open-web has a similar description in the file. Maybe we should have one or the other, to have the old directory name as well?
We do not want this to work. This is because of the `if` check, as we are not changing the value in the `d.SourceSnapshot != ""`, and if it does, then we're adding `if` check, right?
can you make it explicit `userSchema` and use `empty` here?
Is this necessary since the local debug logs from ip are already closed?
this is not bool
@JeremyKuhne I don't understand why this is required
This is not related to the issue, but it looks like you're not using the `-` in the constructor. Can you make a method for this as a static method of the method?
@bartonjs - Is it possible to try to maintain `except Exception:`? If it's going to be except in `3D descriptors` then it's always going to be `None`. It's fine.
This file should probably be plural. I'd imagine we should probably use `lbann_datadata` here instead of `data`.
This is the only change in this class that is needed because of the `ValueTask` in `Task.cs`.
Do these tests need to handle back porting of `CLIImage`?
Can you add a similar note here to `TableMetadataMetadata.newTableMetadata` as before?
why was this removed? I think it should be a test
I think the debug level should be done before the namespace has been moved to the namespace.
I guess we don't need to touch this in a separate PR...
I think we need to keep the `badContentType` as a global variable. The `badContentType` is a good practice. The `bad` function has a default `None` so we won't have to change the default value.
`throw new enums are nullable so that the result of `quit` is not null when it isn't `command`. The argument is a `base` so it's `base` not `quit`.
@mateuszakpap AFAIK this is the reason for this change
Should `aggregator.push: flux_respond` not just be 0?
I'm confused about this. Why do we need `webpack` here?
I would use a common pattern here, it might be better to use a single TODO to check the output, and pass in the `go` in the `go newSendSchedule` directly.
What will happen if `project` is null?
shouldn't these include the other header files also?
Why `break` here, when it's used as an error?
I think you want the manifest property here to pass the file instead. (It would be good to be consistent with other files that are in a follow-up issue.)
Should we just remove the global global in `ViewerAt`?
I am wondering if we should have something like `PercpuUsageInUsermode` for gcc?
this should not be done in check_user_can_edit_record
Should we set the route for the user provided theCDP page?
@bparees the issue is the span was actually the span that is not null or empty. Is it intentional?
This is a change in the way that #1983 has been merged.
Can we add a spec for the new time and test it?
why is this needed? It doesn't look like it will be called after the check in `pip.py`, so we need this check here.
`getMicroserviceInstance()` is deprecated and should be removed.
Why are all these moved?
Huh, I'd rather have it as `public` because that way, we would not have to change this.
This may be too verbose for a user to get a number of times that may be 1.
Isn't `Stateful` sufficient here? I would expect that `Stateful` should still return a `Map`.
I thought we had a protected override before, but now that it was internal, we would be able to remove it from that method.
Shouldn't these be `self._tcpproxy_no_OF`?
transferred -> transferred
I don't think we should be using the `init` function anymore, because that's why we need to fix the test.
What should this be `users_NUM_SIMD_S`?
Any reason you didn't do that in the dev dictionary?
This can never be null because it is a `@Nullable`.
Ditto. Don't we need to check `-1` in case we're not setting that.
`BackendAuth` isn't used in this file, it's more of a component.
This change fixes the bug as part of this PR. Since we are getting a separate change from `nano::epoch nano::send_block::epoch () const` I think it would be better to do `nano::epoch::send_block::epoch () const`.
this should be `Object` and not `Object.equals`
this is wrong, it can't be set directly
Why is this a pointer?
I'm wondering if there is any risk of having a different flag name. The `sanitize-tchannel` flag will also allow the caller to call `sanitize-tchannel` (e.g. it's not set if the flag is in `sanitize-tchannel`).
Since `API_END` is only used in one place, why not use `0`?
I think the idea here is to only do this if we're not running on the Round table mode. This is the only way we can use it for now, but I don't feel strongly either way. It can't hurt to have any other state which could cause a regression for other components that can be shared across any other contexts that don't have an `DbRound` requested.
I think I would recommend making `c.getTimeFromCluster` a constant for this check.
Please add gitea copyright header to this file
I'd rather do a `prefs.edit().putBoolean(key, true).apply()` instead. I think that this should be in the case of `shouldboarding`.
This one also needs to go into the `else` branch to get this working.
This is a very nice change to this and a few other changes to this file in this PR.
This isn't used anymore and should be removed.
Is this copy still necessary?
>protoingings [](start = 15, length = 6) nit: should the name of this config be "protoing"?
Why are these changes necessary? Can they be removed now?
Do you want to keep the `/` in here?
isn't this going to cause regression?
could you explain why we are not doing the `nil` check here? I don't see anything in the code with the `if manifest.key?('application') {`
What is this line for?
should we make the method static and return false if !getFromBlock().isLatest()?
I don't quite get all of the headers here...
This should be the same as the actualier.
I'm not sure how to test that TestRuleMarkFailure can be reused here (we might want to test this when we run a project with the new TestRuleMarkFailure with the new TestRuleMarkFailure set to true if it is not present)
Can you use an `4` here? In case the length is `4`, `v` wouldn't be `4`? Also, it is `v2`. I see the reason this is `1`, but `v` is `4`. I would prefer `v,7 + 6 + 6.4`, `v`, ...
I think it is not needed here anymore. This method is not public
Why is the visibility changed to `Gettributor`?
Do we need this? pkt will always be pkt when pkt is a seq
We usually avoid wildcard imports. It's a bad idea to not use wildcard imports.
The second space isn't necessary (same below).
Can it be just `include('file_exists')`? It's more readable.
this is not so easy to understand. This is an actual `With`. `action` is not really the name `With.duration`.
This seems like a breaking change as the one we're adding.
I think we should add a default to the `Data` rather than making a private field. Maybe this is better than an overload in the API but that's the pattern I'm not sure.
I believe the return type of the Region is an empty collection.
This is going to be `return` for every request. Do you think it's best to use `case`.
Why do we have to add this file?
I'm not sure that the DirPermissions will be the same as the one we get here.
how about using the wrong `s2` suffix?
This will not work. You can write a function that is supposed to be used to generate a `executResult` with `exes` or whatever you do in the original function.
I would not expose this as a parameter.
You need a period at the end of this sentence.
Why the change?
I'm not sure we should return 0 here?
i guess the api is for the first pass, but the second parameter is for the second parameter
should this be conditional on line 675?
i thought this was a short version, i was thinking that the `cluster` config is the `url.ID` as well.
>> A overall number of proposal is not 0." > 0 means that the proposal is not 0...
can we have a test for this?
nit: log level
Why was this removed?
Do you know why is this needed? I would expect the `result.startAfter` property to have always been set.
should we add a view here?
@wachterjohannes Shouldn't there be an `if ('lightbox' === $params['layout']=='simple')` in `createTask('simple')`, since the other two is already set to `true`?
I would add "in the commit is not allowed" here.
I think 2.7 is still an intuitive name. It might be `<= 2` (the only thing I've been is if I've been doing it). I would just say it is a string literal and not a float (e.g. a string).
The `generators` tag is now identical and should be tested here. I would have expected that the tests are failing. It will be a separate file for some of these tests.
I think this makes the test pass. But if the bools are not zero, we will have a lot of time to override. This could be a lot of work in the past.
This was a bug. The `prefixed_userid` was removed as it is.
Why we need to use the new one for loop in mock?
Nit: move closer to the end of each line.
Why not use `CacheCacheCache` instead?
I'd recommend making a separate class `ISpanContext` for all of these `ISpanContext` and `ISpanContext Empty`, `ISpanContext Empty`, `ResourceSpanContext` and `ResourceSpanContext Empty` that I believe they are not related, so I'd recommend renaming these `ISpanContext` to `ISpanContext`.
I'm surprised we don't do this for NET452 because it's the only way to do it for NET461.
I don't think I should add a description of what this is for.
I'm assuming this doesn't have to becontinue? The logic below seems to work as if we are using `find_instance_group_by_url` instead of `continue`.
This will throw on a single line if `""` is present.
Why are we changing that? I think this should be done in the benchmark, and instead of in the benchmark, we could just use the planeIsMultiplane if the form doesn't exist.
What's the use case for this? I'd say we have some lint rule that reads *all* fields and *all* fields for users. I'm not really happy with having `CachedAccessor` but that's not a problem for users.
I think the right fix is to use the `keybase2` helper
`selectedItem` should not be selected, this should not be selected.
Not directly relevant to your change, but it is still needed since this is the default behavior.
nit: I like `ParameterTypeNames` to be consistent with other uses.
I don't see the purpose of this class. ISpecProvider SpecProvider is a very high level and not a valid implementation; this method should be called `IPathManager` (or something similar)
Nitpick: I would make this test name more generic after `filter`.
The other changes are not related to the fix, but the change should be reverted.
No need for an example.
Is this intentional or should we use `/^^^("{0>, -1} -2}` instead?
We don't want to use cache, let's just add it to the `*` interface.
I think we don't need it anymore, since it is already a copy
This will be moved to `.html` in the `Public.py` file. You can use `.html_html` in `App.py` instead of `.html.html`.
Can you explain why this change is needed ?
Please make the same change in `gulp help`.
I don't see how this is supposed to work for a reason. It seems this is not a valid instance, it just should have to be an instance of the first instance of the list
@wachterjohannes Shouldn't you set `$config` as the default in `beforebefore`?
The variable `""` should be used instead of `const` for consistency.
I think we should also check the template string when it's an "expected template"
It might be better to split this into two separate test classes. The reason that we have one with the other is that it's just a copy of the test. That way we don't need the specific implementation anymore and we can set the specific implementation to the new one that is called in a separate test.
maybe we can move this logic to line 158 instead of `if opt.is_a?(String)`
Is it a different name? We use it at the very least. If it is just a `__` in the `render` model, it will not make sense for this to be an `__` part of the `className`.
How did this work before?
Unit? I think we should not have Unit in any of our tests
Does this need to be configurable?
nit: no need to import the `preact`
Do we need an index on each item? If so, should we use `item_id` instead? Also, I think `cart_item_id` is more of a name, what if someone has `item_id`?
I think this should be `DEFAULT_GITHUB_ENDPOINT`. The default behavior is to set the default value for this value.
I guess we're missing something here in the code
I think it's better to move this test to `Test_ConsumeLine`.
@deads2k I think this makes sense, since we're in this place. If we really want to show the former, we'll probably get a better idea.
Might as well make it explicit `true` and not `count`
you should also check if the revealOrder is 't' as the second argument, no?
why remove this?
Why not just make `return cls._timeout == socket._GLOBAL_DEFAULT_TIMEOUT else cls._timeout)` instead?
why is this needed?
Maybe it's better to use a `replace()` method on `paths.current()`.
same here - use `Loadtranslate`
why is one of these changes?
I think we should move this out of the `create` method since this is used for a lot of other instances, e.g. `generate_merge_config` where we know when it is used or not.
Wouldn't it make sense to make this `free()` instead of `kds` so the other call to `free(kds)`?
Do we really want this? Seems like a pretty generic solution.
why 1.15?
When `$options['lazy']` is not defined, it should probably return an `options` instead of passing ` options`.
Perhaps a more reasonable location here would be to add some of these on the namespace level and use `src/service/tests/namespace.java`
This should have been removed.
This should be split across multiple lines.
I think you want to keep the use of `errors` in `errors.rb`
@wangdi1 this was not correct, because in theory I don't have a good suggestion, because I can't see how this was a bug. For example, we should have the `@mp_impl` variable be used.
Can remove this
This should not be `PathIntf`.
Might want to assert that the pending is 1s.
I think this should be `config_or_item_to_or`
This should probably be removed
this file should not be here
I don't think we use this class to be useTrait.
This is a bit unrelated to the commit that fixed the bug was fixed.
Can't you use `int` instead of `enum`? It's used by `ypy.io/content_type.py`. It should use `import IMHO.util.String()`, not `import enum`
Nit: I wonder why we have both `ENCFAIL` and `ENCFAIL` here, if we can't remove it from the code.
This isn't used.
Wouldn't it be better to remove these? The test still says it is that they will not be loaded in the same package.
What's the use of `call LoggingConfiguration Reload` here? Why do you need to call LogFactory here?
Nice! I would like to keep the old one in place to avoid a PR #6270.
Is this needed? Is it only for testing purposes? If yes, we should keep it.
why is this not a pair? I'd expect it to return an error if the pair is not found.
can you add a space after the `len`?
Is this test still relevant for #1513 or was it just an oversight?
why not dict?
This is wrong. This is now set to `string` to make sure it gets set to `enumerable: false`.
I would use `auto begin = getStartIterator(rxn, type);` to simplify the code a bit. The `const_iterator begin` function is called only in `lib/foo-bar.js`. Also, if you are using `std::vector`, you can just remove `std::vector<std::string>` from it's constructor in `MOL_SPTR_VECT::const_iterator end` and use it in `MOL_SPTR_VECT::const_iterator end = getStartIterator(rxn, type);` in the `get_s.js
`release_ptr` could be `Action_ptr ptr(ptr.release())`, no?
What are these changes supposed to do?
Shouldn't this be `System\Console\Theme`?
I think you need to check that this is not name as a part of the string.
I think it is better to move away from viewTop
I don't think we need to add a new constructor to the `List<>()` here, I think you can just use `List<>()` instead of using multiple `topicToExternalTasks()`
What does this change look for? Can we not just have a `ScriptDTO getScript(List<String> path)`?
Not sure if this should be here. Do we want to always use this.allTypes if we do not have this.allTypes? Or just do we allow this.allTypes?
SimplifiedBasicBlock is a lot more readable and we can use it here.
Please move this one in place.
This method name is a bit confusing, since it's only used to create a differentiate with an spark ID in SparkMicroBatchStreamScan. Do we need the method for the class name?
Can't do this. This is the fix.
This should be fixture
Can you rename the imports in `config-config.go` and `config-config.go`. We need an `config-server.go` to add more things. Also we are not using the same file name everywhere.
I think I missed one, it's more readable to add one.
The name feels weird. I think "writeCharSequence" would be more consistent
This seems like it needs to be a constant, not a string.
remove the empty line
Are we sure we want to also check the context that the timeout is passed in here? Or was this a case?
Please move this to a separate method and add a TODO above
should we use `assert type(j) == dict` here?
This is a bit of a hack. I'm a little concerned about the fact that we're still using `/node` as an extra variable. I'm not sure if there's anything better to do here.
why we need this?
I don't think it's safe to use theabel here.
What about the other `ICICConfig` methods? The value is the value of the `cloudDown` (and the value is not a `AccountFile`).
This link is removed because it doesn't get removed from the base file.
why is these removed?
I think we may need to move this interface to a common place in some way.
I don't think there is a lot of stuff to make it work. Maybe we should just make sure that we have the number of `if err != nil` in `f.s.delete()`?
Please use the `GitHub_up` method on the new Ruby 1.9 hash syntax.
I think you can move this if `upload` is not passed as the second arg.
Is this change required as part of this PR? This will cause OOM in CI due to docker container container bugs.
I don't think we can make this test fail. `waitUntilAllElected` is called only when an `Pipeline` is enabled, not on a specific test.
This seems unrelated. I am not seeing any test issues with the change in the code. I'm pretty sure that the only thing we should be changing is we have now `int` and `MaxBatchSize` (and I'd just be looking for "t".
I wonder if if this should be a separate function or `==` instead of `== = buggyProposalLowestOutput`?
@mateuszchurch I think this is a bug, we should be looking for an empty array.
`alalgorithms: :Assume: :Assume: :Assume: is used on the `searches` action.
If a number prefix is not found, it seems that it should be a private method.
why do we remove this?
should it be `IApiResponse.isposable` ?
I'd suggest to move this logic into the `if` block, to avoid a debug message.
Wondering if this should be moved to the `api_prepare_enable_bulk` file
Why are we removing this check? It seems like we're not doing the actual chunk limit here.
I would use the constant named constant in the function. Also I don't think this will work for you.
Should we make a test for this?
why not put it in the block? I think it makes more sense to put it in both the block and the name.
can `pubSub` be added to the `Blocklistener` interface?
Can you use 100 as the default?
How about `wrapwrapFromnull`?
This is a very small bug fix, but in most of the cases I think it would be better to have the `if` statement there for all.
I think it would be easier if we explicitly had `TestMatch` in the tests. I know that it's ok, but wouldn't it make sense to move this into its own test class. It would be easier to just test the `Match` class and have it be a `Match` class.
We should not be using transport.Message in this case
Can you please explain why this change is not needed? The reason it's because it is the same, but it is the same, not the other changes.
Why this error is logged?
@gartung I'm not sure what the best thing to do here is, I believe the only time we call the `sortOrder.schema()` method is that we have a `io.prestosql.sql.testing.Schema#getNew(table.schema())` method that is called on all of these calls.
This one is used for use method.
I think it can be misleading. You can also use `Message Delivery Semantics` from `gocloud.dev.pubsub#hdr-At_most_once_and_At_least_once_Delivery` to indicate that it will be redelivered.
This is going to give an issue on an empty page. Is that intended?
This should have been wrapped in updating asset_type to allow for regular asset types.
Do we need to call `StateDBAdapterOption{NotFixTopicCopyBugOption()` here? It seems like we should only do the right thing if `AllDBAdapter` is set to `true` if it is `true`.
I am not sure this is correct. It's not a very good idea to have a short element in a number of bytes.
In other places, the H2O-ec2O uses this as well, as it was before we add to H2O-ec2O-ec2O-fixer, but that doesn't really belong in the "mrb" block. I'm not sure how to get the "mrb" here (I'm not a huge fan of having this "mrb" before, and I'm not sure what to do here). I am assuming "require \"acl.rb\"\n"); is a better solution.
(style) line over 80 characters
This should be `final int toTrim = trailingZeros(value);`
Metrics/CyclomaticComplexity: Cyclomatic complexity for RSpec.configuration is too high. [7/6]<br>Metrics/PerceivedComplexity: Perceived complexity for RSpec.configuration is too high. [8/7]
Please rename the property as `updateNotInProgress` or `updateNotazure-types`.
You can just pass the result through as `playTicks`
`1000` is a bit confusing. I'd suggest `1e-6` or `10e-6`.
Should we also handle the case when `config.FlagHermesID` is not set?
Why not `allow SerializeInterval Duration`?
Can this be done in a separate PR, or it's not needed? It looks like the only place it should be here is that the localization file is in a different folder.
@normanmaurer - What about making the `literalSet` be a `Key` instead of `Key` and `Key`? This would also allow users to call `Context` as well.
The formatting at the end seems off. I'd prefer not using the `if not len(lib_path) == 0`, but I'm not sure.
Why did you change the function return?
This looks like an internal property?
I don't understand why the necessary_tasks is necessary to get the prune from the task, but why?
This should be imported below the import order.
This is a bit of an unrelated to the PR and and it makes things easy to get around. It was the only usage of ` ReadPreference.primary `.bypassDocumentValidation`, so I just added the `onLayoutNonHashOf()` to `imdbOf(QueryRunner)` here.
I don't think this method should be nullable, since this method is only called from a default implementation (e.g. `@Nullable`) or `@Nullable` if we're now returning `null`.
I think this is the right solution. The `blockValidatorProvider` is still used as a part of the current code and the method is not set when it does nothing.
This should be removed, right? Otherwise the value will be correct.
I think there might be some better name for edit: `subscribe-with-google-bulk-edit/bulk-edit.js` (we already have it in two different places, so I think it would also make sense to move this to its own PR, just like `subscribe-with-google.js` (or even better, `subscribe-with-google-bulk-edit-testing.js`)
should this be the `span>` tag instead?
Should we make this default true, if it's not set or not?
Why `from __future__ import` at the top of the file?
This will be done if `EXITING_DR` is true. If this is called in multiple threads, then this line should be removed.
Why was this removed?
this is just a small change, should be reverted
Why is this no longer required?
Is this change intended?
This is a regression as it's not an object yet
should this include added to the other C++ standard library?
Why is this `@TaskJob` needed?
You don't need to check that the exact same version is in system.h. If you do not want to do this. If you do, you can use `sys.h` to check the same version, which is not the case with a `mem = 1;` check.
Let's just change it to "change" or "schema" (also the next line).
Do we need to keep the manifest? I think it might be useful to add a method to the snapshot.
any reason why this is 1?
Why are these removed? Can we keep them?
Trailing whitespace detected.
`@var` and `@var string`, could be `@var DownloadInterface[]`.
Can be moved inside the if statement, otherwise, it looks like it is the same as the last line.
I don't see how this `record` could be defined in this case.
@nmittler - Is this a valid test? If not, why is thedownloadProfilePhoto needed?
@jeherve can you rename this to `array<int, string>`
(style) Macros with multiple statements should be enclosed in a do - while loop (style) macros should not use a trailing semicolon
This should be `tab.tab_id`
why is this needed?
It looks like this will need to be checked every time the event is created.
signerFlag.Value() does not have a regex
This is a very nice log message.
If you do this can happen, you need to remove this call. There are already some other places where boost::numeric are actually used, so this can be simplified. The reason to use this is that you need to call `parser::none` in your previous code is to set the extension to `true` on boost::numeric_cast.
This was probably an issue. We're still trying to make sure the bucket does not exist in the S3 view.
Shouldn't there also be a `use_CACHE_ENABLED`?
Why are we removing this?
This is the only line we're using for the `withMapper` method (with a single space).
Maybe a default be application_PATHS or something similar? We don't have a default for application and application, but I guess there are other things in the future.
Why change `return selected[0] < 0` to `return` here?
strict code; use `use` instead.
Is this the correct place to check `os.Setenv`?
Is there a better way to do this? I think it should be `posix='win' not in sys.platform`
the `slack` is the same as the `slack` field above.
What's a reason for this change? The reason this `Controlo ControlPath` is only for fully qualified name, so I'm pretty sure it's only for fully qualified name.
I think `shifted_bearing` can be null.
We should also add a `py-FULL` VERSION.py. If we do the same, we can add a `s` to the `FULL_VERSION` block.
I think it's better to add a field for it, but this should be an enum
I like that we have the same problem as in the other PR, but I wonder if it would make sense to rename `CloudSchedulerSources` to something like "client of an existing `WithSchedulerOrFail` (like in `client.go`).
You should probably check `self.approvals` here, if it is not there
I'm not sure this is the right thing, but I would probably keep `Function` as `List<U>`.
@Scottmitch was this intentional? It looks like it would only trigger the tool if the tool is closed, but also some NPE. It might need to check that the tool was updated in `javaCompile.getToolChain()`
`$name` could be `Uninitializedizers`, but it should be `Uninitializedizers`. The only reason `from fileExists` is to find the file that is passed in is that there are other occurrences of `getDefaultDefaultDefaultDefault` and `getDefaultDefaultDefault` calls in this method.
This is needed to ensure the new `__u8` works as expected in the old version.
Why is this being added?
@dvoytenko, I wonder if this will break the `ApplyApply` of the `writeConcern` call in the `execute` call instead of calling the method in `writeConcernMax`. I think the intent is to not make any difference, but it's a bit simpler.
it would be preferable to use `self.config[:engine].constantize, config.fetch(:joins, []))`
I would keep getting rid of this and have a local storage in `pytest.mark.skipif()` if it's not needed.
`edit` isn't really needed, it is already imported above
`[syslog-prot] incomplete message!`
Should this be `CWMol` instead of `MCS`?
Maybe we could move this method to the end of `RLock()`?
can you add these to the above function?
I think you can remove this method. There is no reason why we are removing the existing function that is called in the original code.
This should be changed to 3.4.1, so the version is the same as the line above.
FYI I would move this method under the `iframes.html`
Is this still needed?
I think we should not be passing in `hybrid()` here as it was here and instead we get rid of it in the `if` block
Is the context in this context not a valid context anymore?
This will be true by default if `argNameVal.length == 1`
It's a bit weird if ($chars[$i + 1] === '\\' || (a) : 1)
This change looks ok. The first call of this method was `env_array`, which only returns if `true`, and is what happened (in the `upcase` method). Is this what you're doing, or is the reason why the previous `env_array` would have thrown an exception?
If the variable is not null, then it's set directly.
I think it'd better not to check the return value if not null ? It would be better to check for null here
RuntimeIOException is no longer used in test, can remove it?
Why does the tmImplementation need to be a tmImplementation? If it's only a warning, why not a warning?
I don't think this is needed, anyways this should be removed. The `ForAdditionalLiveTvOptions` function will only work for the new ID of the ID of the ID of the ID.
Cool! Why not changing the output to ` helpful.info.size`?
nit: I'd call this "onForegroundChange"
should this be replace-partitions?
Thanks for this, can you please move it under `see Selenium::WebDriver::*Bridge`
is there a test where we would want this to return an error?
Can we just make this `if`?
I'm not sure about this - `to_definition` is actually being used, can we remove it?
I don't know if it matters but I don't think it's necessary to test. This test will run if no custom attributes are set, which will stop this test. Could you please check?
Can we make it a static final and use an overload?
I don't think you need this here. This can just use `_autosave`, so if you're doing `name = '_autosave'` you can remove this
I think you can remove `BalanceRecord` and `AccountData` function. We can call `AccountRound` directly.
This was the only thing that is that it was not written to the caller.
This is not a good idea, but I think it is more readable and more clear (I'm also not familiar with how to fix this). If you want to do this in a later PR, please fix this.
Would be good to get rid of these.
Is there a way to make the test pass when the `tectonicClusterID` is not set? (i.e. I'm pretty sure we can use this constant to ensure we don't change it to use it when the file is set to `""`.)
Why does this log message need to be changed? `log.isDebugEnabled()` will always be true even if `log.isDebugEnabled()`, but it is not.
Is that the problem?
Why is the new `codec` deleted?
why not simply mock ?
I think `@Getter` is not required
This isn't used outside the loop.
Why iscrypto? makes it an option for these secrets in a very large function?
Why removing this?
Is this a pointer or a pointer?
What's the benefit of this change? This method returns an error (and the client doesn't need to know for the case that the `-flush` attribute is set). Why is this needed?
Shouldn't this be `!test.mark.qt_log_ignore('QIODevice::read.*: device not open')`?
Line is too long. [89/80]
Could the test use `with` ?
This line is redundant with the one above. If you want to be certain the number of items to be -1
@kroitor since it is for jenkinsci I don't think we should change the name of the package. `hive.openshift.io` so that it doesn't need the package at all.
I think we can remove this and use the new `GetPathPath` methods.
Why do we need to add a `@method` here? It is a string, so it should just be an `int`
This was an issue that was introduced in #6327.
The `retention` is the new version of the column
This is a bit unrelated to the fix.
tpfp_func can be used here, since it's already used in the docstring right?
I don't see how we should return 0. Could we just remove it?
This function seems very generic - how about just adding a function in `newJournalServer(r)`?
So feed isn't null? If it isn't, I'm not sure what happens with this null check
This will allowIncompatibleChanges to be an optional parameter.
This would be much more readable as it is used for a different handler (and we should be able to fix this)
You should be using the new function `structRequest` - this is a function that is passed through to the func func in the `saleor/http/`.
I don't think it's a good idea to include the 95 to the cloud app. I'm fine with this.
This test will fail on Py3. Not sure if there is a good reason to do it.
Since we're changing all of these to ` const` we can just change the `cms::theme.active` to use an `Next` const.
This is also activeClientMap.iterator end = this.
This could potentially be refactored into our own PR: - `Document` is a fresh key, but a collection of the key - `Document` is the fresh key, not `Key`. - It would be a better word to be `Key(Document)`
I'm not sure we want to use an enum here?
Should we use a more explicit message here? This will prevent users from trying to load/todo from being used.
I'm not sure we should handle this here? If not, it would be nice if this would be a good time to add an `if` clause
Can we put them under the `init` format?
Can this just be `.show_img`?
30 is always 0, so why are we setting inputOffset?
`nvcc` has already been updated to use this (e.g. `nv_max_f`).
why is the type annotation changed from `Spec`?
I think we need this check at the very least, as that is not an error.
What is the motivation behind getting rid of the `action` call?
nit: import empty line
is that intentional?
@njhill shouldn't we also change the `instanceof` part of this one? This seems more natural to me...
We'll want to remove this line if it doesn't match the watchable tags.
Can we also handle these in the exception message?
I don't think this is the right place to put the `.tensor()` call here.
I'd put the first argument on a separate line, since that makes it more explicit.
This method seems unnecessary, as all stats related to the file are only created for each stats
I'm thinking this is a bit weird - I would say "if (ann.indexOf('=') { if (idx != -1) { return return return false; } The API would be: return false; if (idx != -1) { return false; } return return true; if (idx != -1) } return false; } return null; if (idx != -1) return false; if (idx != -1) return true, then you would have to check if (ann.indexOf('=') return false; else if (idx != -1) return null
It's probably better to use `item.recording_start` from the name of the variable rather than the function.
This could also just be `Iterable[0]`
This import is unused
@deads2k this is a good thing.
should be `assertEqual(api_response['Some'], 'content')`
This function doesn't seem right to me. The fact that you have a non-alloc pool is a `""` function that is called by the "alloc pool" function. The "alloc data" function is used by both the number and the number of objects.
Why this change? I think I would prefer a simple `StreamedType` instead, as the other classes use `StreamedType#Set()` as it can be used as an enum.
I would add a `# required` check to see if there are any items that we can't use?
This if `metricsConfiguration.isPushEnabled()` is also true for other users (i.e. if we do not want a default value for this case, we should add a default check that the default is `false`)
It seems like we should just check if `num_outs >= self.num_ins`
I would suggest to add a method that can be used in case of `IsLeaf` or `IsExtension` (e.g. `isInvariant`). This would mean the intention is to avoid adding more than 2 versions that don't use anything about the intention.
This is the actual fix.
The peer type is private and intrinsic to the HTTP transport. Can you check if the null check is private and the default does not match any null check?
I have a feeling this should go after the .h as well, in case of changing the code you made to pass a rank to a C++11.
why not use the default `loss_normalizer_momentum`?
I think the more elegant way to get the warning message here is to not block the result and block the block. If you do that, why not just have the single `ioctlsocket` with the new parameter?
Please avoid diff hierarchies.
I think this is not right. We're only making sure the mean and the semantic was missing when a user didn't specify an `tail Probability` in the mean and the subtraction, or when when an `else` block gets added to the mean?
This can also be reworked to use `Addtitle` and the `Add` logic to ensure the error messages are not raised.
This change is a bit unfortunate, but is that something we should probably have done in the `#modifiable` method above?
This function was unused.
nitpick: The description here is not really clear what the problem is about. This change is not needed for the test.
Shouldn't the `version` be `null`? We don't do that in the PR.
Do we want to error out here? If so it might be clearer if we return a nil error, then return nil if the secret is empty (either in the original request), or even better make the `errors.Wrapf` check `error != nil`
I think `#include` here would be better here, since we have `#include_cpu` and `#include_cpu` as part of an actual `#include` which is defined in the `#if`.
This should just be `network-audit-results.json`.
why remove this?
Please don't change the class name.
Should be unit tested with no prefix prefix (even though this is the correct form).
Shouldn't this be a class field rather than an `AtomicAttribute`?
The linter will be removed when it will not be used.
`my dimension` is not a good idea. It should be `html_safe`, not `myEOL`. The user needs to implement org. All, and if so, use a more specific location of the user.
Isn't this a BC break?
can you update the docs to not have this as a dependency?
Can be done separately
I assume these changes is just in a separate PR?
Freeze mutable objects assigned to constants.<br>Tab detected.
I'm surprised it didn't change, but the original one does not allow us to change the `violations` with `1`.
i'm guessing there's no way to do this without any change
Should we just check for `current_user` and `current_user`? Or at least use one more logic here?
This line is too long, it's really long and is long (it's wrong), but the rest of the codebase is a single line string.
Can you use a `filename.lock` instead of a `filename`?
This file can be removed.
I think we can just remove this block altogether. I don't think we want to wait for the client.
No need to check for `<code>` here, it can be accessed without the `<code>`.
@mjkkirschner @joes this should be done in a separate PR. It is possible that it will be used only once for the package itself. I'm not sure why this is here.
This is just a genuine change, but is not really necessary.
Same here, let's keep both.
why is this needed?
The test should be updated to test that only the element is inline.
Can't the arguments be reversed? The `toMillis` and `getLong` have a null value.
I think this was the only place it was used.
I think the `update` could be removed here as it will never be used for the new `update` object.
Shouldn't it be an array?
This might be a good change as it will cause issues. I'm not sure what you think about this change.
`htmlFor` to be more explicit here, I think you should just remove 'label' in the component.
This seems unnecessary, since the "xcursor_theme" should be set to NULL in the first place. The "xcursor_theme" is used by an "information" in the list, I think. The "views" should be called "xcursor_theme_create". The "bare" should be "bare" and "xcursor_theme_create" to be set to NULL if "xcursor_theme".
Please call ` TopicsFilter`
`key` is not `self.keys[0]`. Should it be `key == null or (key != 0) or (key != self.drawn)`?
Does desktop window sometimes come from this being a non-windows value? Isn't that the desktop window?
Is the second `json` still necessary for these deprecations? It's not obvious what we're trying to use in the `VCPULimit` type. But I'm not 100% sure we want to be adding these to the `base` base class.
Maybe I would make it 10 instead of 10?
What is the purpose of this change?
The new error will never be used for the new `v1` struct
@garyrussell, I'm not sure why you didn't add this. It does seem to be necessary to add it before I've been working on it, but it's also not necessary to include it here. I'm not sure if that was intentional.
What's the difference between GenericMeta and GenericAlias?
Same here, if it's not present, should this be `<%= _("You may place them before after after the main sections.") %>` instead?
this is not going to work if reset.reset is an reset. The `reset` is already reset, so we don't want to reset.
@agramfort @agramfort @erwinmombay This change should be done in a separate pull request since the second part was not in the second part and the second part of the second block is still in the second, and it may also be possible to call the new "write-Scalar" in a different way.
I think you don't need this file if you are not using a specific UI
This should be `WithWith(reason, Causes[0].Message)` instead - no?
Can you add a TODO to say that when a sequence number of which the user would see it using it ?
How does it relate to the lower case? Will this happen if the code is not able to be loaded by the conver?
Should be able to use `%` here
This message should be pinned.pin or something.
Is it possible to remove the `isHidden: !1` ?
I think we can remove this method now, right?
I think this is the only change needed here.
I think the previous version was correct.
Nit, we probably could also have this be a constant. I'll do it in a separate PR and get rid of the `__init__` statement.
Shouldn't these have the same permissions as the `SqlServerIntegration` above?
I think this should still be part of the `Spack` package. The `default` field is the way to go. I think this change makes sense. The `default` field is the way to go to the reindex, as it is in the `Spack` package.
This doesn't seem right
You could use `Bolt::Logger.warn` instead of `Bolt::Logger.warn`
`reverse` isn't really needed here, as it's used once.
I suggest using `takesHeapSnapshot` here instead.
why remove the variable here?
I'd recommend to keep both supported and non-static and comparison
Can we get rid of this line as well?
`this->isMerge()` can return true if `getOperatorType() == REL_UNARY_INSERT` is true.
We have an `--old-system/glassfish.gmbal`. It is a good idea to move it out of the package.
Trailing whitespace detected.
Why this one is public?
can you fix the indentation?
Not sure this is the best way of doing this, but we should probably add another one to `mallocs_add`
Maybe we should use a `Task.sessionsession` instead of a `Task.sessionsession`?
This looks like an oversight.
I wonder whether we need the something here?
Why not just have the name `_siteName` as it is?
Do not use parentheses for method calls with no arguments.<br>Put one space between the method name and the first argument.
Can you change the return type to `None` (not `None`)?
Should this be a private key?
I think this one needs be split into two commits.
The `Region` was being used here, so it was removed.
`connected=None` will work, right? I don't see any reason to use `None` for this value.
`debug` should be optional
@jridgewell Is this what you intend? I thought you were talking about it being used elsewhere to make it clearer. This method is used by a class that has a `getNonStreamingMethods` property in the `Method` object.
I would have preferred to not put a `.format` here. It will always be true for a version in a later PR, right?
Is there a specific reason for not using `zeros(shape.size(), 0) `
this isn't new, you should probably just remove the default `--profile=--no-p` option
Could the `src-site-kit` key be null here?
This class should not have a class defined in this file.
I don't see the benefit of making this a publicly-known error. What does the user see?
This should be `destinationPodId` and the `destinationStatus` constant.
nit: this line can be removed
nitpick: I'd prefer to have a `*` version of `Number`.
I know this was the only key that's used by this change but it's just a small typo I think...
This will cause the agent to fail, even if it has no `c.Log.WithField(...)` (which is a agent that will be run as a directory)
Why do we need to set `TraceContext` when we're already passing `RootSpan`?
I am not sure this class is used anywhere else. The ID is not something that can be replaced by "read" module. The ID is used for the ID, and it should be called "CHOICES", and it should be used by the ID and "UNUNUNS" module. What is the purpose of `FileOutputStream`?
Why was this added?
I'm not sure it makes sense to make a copy or something. It's a copy or not. I would prefer that it is a part of the map, rather than an action.
"prohibited_unless" and "This field is prohibited" sounds a lot, "present being present" to me, "prohibited_if".
Why the trace trace here?
I don't think you should be able to run `QUIC_GO_LOG_LEVEL`.
Why use `*virtualDiscDesc.CapacityAllocationUnits` here but not `if` and not `(int64) *virtualDiscDesc.CapacityAllocationUnits != ""`?
Do we have a test for this? I'm not sure if it should be done somewhere else.
why is this test changing? What if we remove `mkString` from `mkString` ?
this code was a very weird change, we have a different behavior. This one is just for the old old data, which is the old data.
This will cause server side copy to be modified.
this is going to be done in the same package as in the scopes.json
I think this can be removed now, we have the same test in the testing
Thanks for the PR @wagoodman for finding this import change in the PR description. Just a suggestion.
This test needs to be reverted since the test is still testing the `[x]` on the test file
We don't need these?
You can merge this with the `if`
I think we can keep it for pytest now, to keep it for pytest as well. We could keep our code brittle though :)
should we rename this to `TagsTags.Run` ?
Does this mean the existing method has to be public? It might just be worth moving out of the `if` statement.
I think that a simple host_host_output can be extracted and deleted.
I believe the `getNodeAttributes` call below is redundant.
Is this a required field?
Is there any reason we would want to have something like `PathInput/topic}/ws/pssPost/pssPost/topic && !s.pssPostHandler`?
Can you use `_props` and `_defaultValue` as well, to reduce duplication?
We have no idea what this test is doing, as we're doing this now
`allowedPostRequest(req)` could be null, no need to check `req.getQueryString()`
this method is only set when the annotation is assigned to the baseclass.
We are not using the `PasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPassword` in these, and we're only removing these because they are used in two places. I think it would be more efficient if these weren't used (because of the `PasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPasswordPassword
Use the new Ruby 1.9 hash syntax.
I think it might be better if we used a default, rather than a string.
`#define PONY_ACTOR_DEFAULT_BATCH` ?
I think we can just put this in a variable and use the variable here (and the function below)
Shouldn't there be a `Buffer.isEmpty()` check?
I think `padding` should be a new field instead of a global.
A few of these will be needed. You could just use the `listen` variable to determine which one is the default.
I think it should be fine to just have `daemonExportFile` in the function, since this is a private member field in `build-system/server.js`
Can this be `@param {ie.ServiceBuilder}` ?
I wonder if we should just make this a global var and not just do this in the `__init__` method?
Can the public type have changed then?
I have the feeling the relay looks like it would be more accurate to say "if relay is relay in relay" or whatever it is, then the relay should not be relay before the relay is set.
why did this get changed again?
Metrics/BlockLength: Block has too many lines. [32/25]
remove empty line
I'd move this to the beginning of this file. It's only called when the bucket is not enabled.
I think the `build` method and `save()` tests for output output should be fine (since the output output should not be changed here, since the `--reporter` should always have the output output at the beginning). It is not the case anymore.
Why does this require multiple releases?
We should probably just pass in `onchainConfig` as an argument.
We've now changed `AutoRest` to `IO` because it's an enum.
Can we just use the `axe` variable here and not the `Array.hash()` methods in this file?
Why is this here?
Why is the complete/kubernetes independent between the two methods?
Can you add this to `createSourceBackend`?
Please keep the alphabetical order.
For backward compatibility with the `Map` field, `MainMenuItem` is a static variable, so this should be a field.
@deads2k do we want to use the "PrivateProfile" constant name here, or is there a better name?
I believe the `ToList()` function calls are not needed
I think we don't actually need this change anymore since we only have one place in the code base.
I think this is not right. The code is not able to handle this right away, which could potentially lead to some weird issues in this case. The `source` value will always be set to nil.
I'd rename this to `GetVolumeStatus`, as it's the type.
I think this should be `ws:\.\/se\/cdp/`
I think you should add the `String.format` on this line
This is an API break - that should not be changed.
Since we are not using `.now`, we could probably just rename `approvals.each` to `now` to be a little more precise.
Is there any reason not to change `apply` here?
I don't like this change as it was in the current version of $TabConfig. Is it really needed?
It would be helpful to include the user as `@SuppressWarnings("user")`
I think this will need a better description of why it is needed. The `setUnsubscribed` function will already return true for this. This is not really a bug, as if you set it here then it will return false.
Ah this is probably a good thing to do. I think it should be better to just use the Sports version for the dashboard.
this should go before the new method
This one doesn't seem to be part of your pull request.
Do not localize these FAILEDs.
I don't understand why we need to define these variables?
I'm wondering if we should use `prefQueueToTo` instead. It's a bit confusing to see what `CURRENTLY_PLAYING_MEDIA` is and what the method is doing, but I think that would be more readable as `CURRENTQueueTo` or something.
I'm not sure what this does, but I feel like we should be more clarifying.
I would not expect `injectionManager` here because the `TriggerManager` is only needed for a transaction.
This flag isn't really "just true" right?
I think this can just `fields['protocol'] = self.tab_url(idx).pos()` and be simplified to that.
This line should be removed.
I do not really like this. I'd prefer if you wouldn't have to do the same thing as the `return digit`.
@saghul @rhatdanan this is the place where we create the `rune` `prefixLength` `prefix_` and `name` `prefixed` names in the first place. It is also used by other parts of the code, so I think it's ok.
Why don't we have an `freeze` here?
I don't think the `jav ?>` package is used, I think its a better idea. Maybe we can add a `.control()` method to `javALManager.jav ?>`.
I don't understand this change. Why do you add the `database` object in chunks? Why do you add it?
@smarterclayton This is the convention.
The other two usages of this class need to be updated.
Why not include the `#include` at the bottom of the list of `_WIN32`?
Is it not used anymore?
I guess this change is ok because mime is the fix for the bug.
Is it safe to remove this file?
Do you think we should add the other one to `objectForPrimaryKey` like we do for normal users?
This seems to be changed in a different PR?
I think this will work with `Caffe::SetDevice` because if `solver_mode` is passed, the app will not be registered. The app will not have a value for those.
Why don't we use `n` here?
@tgamblin Do you have an example of `isinstance`? Could you please explain?
@mramato do we want to handle the error case now?
can we get rid of this?
Shouldn't this be called `workingWorkingDir` ?
I wonder if we should use a constant here. And I am not quite sure why we have this.
let's move to `goimports` then we can keep imports sorted
In general we should use the `Oproblems` class from the IDE instead of the IDE.
nit: no need for this.
This should probably use the task key instead, for example.
why is this import needed?
This should be done after the `#expect` call
> This field is used only when `DB__ROOT` is used in granteeID, so I'm not sure if it is better to change it, or at least not in the other cases, if it is used elsewhere, then it is not used anywhere else so maybe it could be done separately?
Do we want to set the `cFlags` as well?
Shouldn't this just be called `driver_name`?
This is a leftover, no?
I would use the actual ``os.path.join()`` helper here.
I think we should add the `@Entity` helper
Can you change this to a level variable so that it remains in `pkg.errors`?
It's possible that we can get rid of this (and the one that just checks for the link, not the status). It looks like we're adding a default for the error message, and maybe that's more confusing.
What if the method is null?
This can be `[]`
Please don't use `insert` in `pDependencies`; the two lines can't match
I am wondering if it wouldn't be possible to just have the prefix `QUmnt` instead of `HOLExperiment`?
I think it might be better to check here that we have `<amp-ad>` in the constructor.
does this mean that some other flow will end up with the same value from `feature1s` (or similar)?
nit: I think this should be done after ScriptveScripts
This is an unfortunate change.
How to make it a const?
(FWIW) can we move this into the `movd` section?
This seems to be dead code. I see the usage of `bytes_to_escaped_str` in this function. Does this change break any existing code?
why is this change necessary?
Why are these if-def and if-def isn't there?
We should use ImageDirectoryStructureCreator as the container name, not both in the class `ImageDirectoryStructure` and the class name
This change makes sense to me -- we need to move the import to the `if (Flags.AWSAWSCluster.Spec.Tags == nil)` check above as well
I don't get what is the root here.
It's not clear what the purpose of this `initPWMClock` is, is it?
I would rename this to `questions`
Do you know why this change is needed?
Why did the `iFromPeers` change from `ingressRule.From` to `curPeers`?
Why is the `oauth2` needed?
I wonder if `Namespaces` could be a pointer here.
`RelaxedReclaimPurge` is the same as the one in the `env.Flags().empty()` function.
@hackaugusto this is the fix that was breaking the code in the PR
I think it's still useful to keep default values as default (in theory, but also needs a bit of change in the file).
I'm confused, when is the `fetcher` block going to be set to `nil`? What happens here where is the `syncer` block coming from?
this was wrong but the base filename is in the storage format, so why change it? And why change it from other `55` to `pure`?
Does this change need any change?
`currently` -> `entry`, not `entry`
please make `computed` the same as `imaging`
@mfojtik the idea behind this was to move the `reload` statement above the `time_elapsed` and `time_elapsed` into the database.
This is now dead code
Why is this necessary? The menu is set when the user has `hidden` attribute. Is it intentional? Is there some way we could do that in a way that doesn't need to be set?
I'm wondering why you changed this so we can make the execution file configurable and then update the other standard library imports.
Shouldn't we also check for the string? Or is the string a pointer?
I think this check should be inside the if(ev != NULL) and just use the default (flags) of the null.
Why do we need to set this in the types?
"StatusCode to commit ..." - what is the error code?
Why do we need this? Isn't it already in the PID, right?
Should we also keep the `CoreChecks` for the Coreer case?
Why does this one use `public`? Should be ` ContextContext`?
why removing the default here ? The filter object should not be passed along
Does this need to be moved up here? (and in the next `org.jboss.client.core.config.Blocking.metrics.commit.metrics.metrics.Run.metrics.Run.metrics.Run.metrics.NumberConfig` below)
I think this should be moved up before I added a few lines down in the function. Also, I'm not sure if this change is really needed, I think.
It should not be `Counter.Gauge`?
Trailing whitespace detected.
I assume we should not do this for now and let the user know they're trying to get the correct user?
We could probably use `@Internal` here
I'm sure I understand this correctly, we're not using `self.f` anymore?
why not do the rightgroup here?
I think you also need `--reupload` here, `--reupload all fragments`
why are you using the API?
Is it worth adding a check for `mSession` in this `if` check?
This limit is still in 100% of the time it's called from the MB?
Why is this change necessary?
Shouldn't the "ou" message be changed to "Tokyo"?
This is unrelated to the platform checks?
This should be changed to `Twig_Environment_Environment`
remove the empty line
@deads2k would you mind using FloatToStringt here? I thought we were getting a lot of these from a generic json string when a type is given and we don't need a separate `opts.generate_hexfloat_in_json`?
This is a pretty good place to put Manifest interface. Not all Manifest might be defined in the same directory.
`harparser` will be added in the `jetpack-` directory.
Can we move this to a private member var, so that we don't have to duplicate it?
I would prefer to have the same `findElement` as it is.
Is this a BC break?
Since this is a default, if `opts.fee` is `undefined`, is the default `undefined`. If it is an empty string, please check if `opts.fee` is empty.
How does the test fail if `include_file` is present?
This is the only place where I used the URL.
I would not expose this at all as it can be called `ReadVectorSize`. I'm thinking if we want to use the correct type of type here as we'll be removing the `config` field from the `geometries_path` interface and not expose the full type.
This import is unused.
How about changing this function to return a new proto object rather than passing a `cli` to the one from `#EventIdTaskInfo`?
info() is now called twice.
can you also fix the formatting here?
Is it possible to use the existing `ReadAsync` method here? I'd prefer to use `ReadAsync` for all usages. Or am I missing something?
if `spec.Xattr = req.GetXattr()` is true then we should set the `if (string.GetXattr()) > 0` check
Why not simply pass in `nextMedia = callback.getNextInQueue(currentMedia);` as the last argument?
Do you think it would make sense to use the name in the hip_impl::demangle, to avoid it being used in the hip_impl::demangle function as opposed to just the name in the hip_impl::demangle
The formatting feels off here.
I don't think you need to change the semantics of this function. `findAccAWSistististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististististist
This change is unrelated to the PR, but I'll let it break on merge.
The `substring` method can be deleted as well?
Can this be avoided by removing the delegate field from `Close` and having the `delegate` delegate in the same class as `back` and `delegate`?
This change makes no sense as this is a `--build-system --run` option.
Where this is used?
Do we really need to add this?
This was probably an oversight in python3.2, not sure what this means. I'm not sure. This is a problem in the old code, and there are a few things that need it.
I'm curious why we have the `template` partial partial set?
@saghul is this something we want to use? If so, should we use `llnl.util.Dockerfile` to avoid calling these as the `Dockerfile`?
You're missing the `String` parameter here
I think I'd prefer a different name rather than a list...
Are these extra lines needed?
this is a good one... it is still the same as in the other block
I think there is a better way to do this. I'm not sure if we can do that at all. In case we want to add a message for the auth. I guess we should be able to add a password and use it to let it pass. We should not add a password for the auth.
I don't think this will work - the `mqtt` field should go in `stdlib` - so it should only be added to the `mq` field.
please remove all the spaces in this file. It is already in the array
Could this be `type != BoundType.EXTENDS` instead of `String.format("%s is not supported`?
i would use the `Mh` prefix here, i'd expect the `procfh` to be zero-sensitive and this is the default, but that's not really what you wanted.
You need to set `auth_header` to `false` for all headers, to set `django_headers` to `false`. `false` is more concise.
I think we can get rid of `TLSMap` altogether.
Why was this added?
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [98/80]
Oops - I didn't see this before, but can you add a TODO here?
Shouldn't this be `messageBody.IsEmpty && notKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKubeKube
I think a migration is missing here?
I think this is a leftover.
This is an actual bug fix. The tmpInt is not a valid value for the first call to this method.
This is not a new API change, the `true` is the new `false` for the `update` command.
I think this should be `continue` instead of `MPI`
This is the main code.
I don't think you need to do that.
This change is not related to this PR, it just changed the order of the parameters, and is not a good idea to use `mkString` instead of the String
Shouldn't `CertificateRequestReasonApproved` also be `IF`? The Denied indicates that the CertificateRequest has been approved by the signing providers
@bparees this will be better as `!account.isaccount(true)` and `!account.isaccount(true)`
@RiccardoRossi I don't believe this is the right approach. The `ignore_debug` inventory to an image, and this value is not an inventory. It does not seem to be necessary to change this so I'd like to change the behavior for anyone checking.
This should be 'apt-get install -y'
@tmds This is the wrong way (PRIu or game is resolved), right? I am not sure how to get the "12" key from a list of `false` and if I'm reading this right, then the `PRIu` value was chosen.
It might be cleaner to have this in a separate PR.
what is the difference from this line?
Can you add an example of how `win` is called?
this is a BC break
Why is the `@product` annotation needed?
I think we can keep `<string>` here and do the `<string>` on its own line.
Looks like this change is unrelated.
Can we remove the `FrontendConfig`? I don't get what the issue is with.
I don't think this class should be used.
Can you make the history final?
I think this should be in a try-finally block? This will prevent the need to use a `instr_is_scatter`, and if the other methods are used.
Please, remove trailing commas
Why do we need `LBFargateManifest`? It's a little confusing with `m` anyway.
Should we just use the `vpn` package?
I think we should be calling this `bind` or we should take advantage of the `body` field to keep it as is.
This is the main thing that we want to keep in the `try/catch` block. I think it's better to just return directly.
I'm wondering if this is a reasonable place to retry. The output is not explicitly specified, right?
Could add a license header.
This needs to remain `static` as well.
Why is this not `Well-formed`?
Should we also include `ply` in k8s? Also, do we really want to add it to k4 only? It should be able to add that to k4 as long as we are on a user's context for their own or other systems.
Can you please check if this is the default? And why isn't the `MaintenanceMode` a `nil` value? I thought it wouldn't be more accurate.
Is this change required?
What is the reason for using a new API here? We're not checking for a sync sync anymore.
I'd rather see this as a constant so that the error isn't actually logged.
I think a null check is needed.
Layout/TrailingWhitespace: Trailing whitespace detected.
this else block can be simplified as if statement is not required
This should be prefixed with `verbose` so that the value is also used for the same value as the first one.
this should be `int` (or `p`).
Why is the `capabilityFirelensFluentd` being added here?
I'm not sure we need to change this, this is the only usage of push() is the only one that is used.
I don't know that we can use `config.enqueue_member` to do this...
You need to call `pmix_RELEASE_RELEASE()` in the `io.prestosql.plugin.PMIX.hive.gMIX_tiles()` function in `pmix_nspace_caddy_SAFE()` and `pmix_RELEASE_ dark()`. Otherwise we can also remove the call at which point we need to remove the `Admin::last_RELEASE()` function.
Is this a separate issue? I thought it was a separate issue but this seems like it would be better to not just remove it?
This should use `callAction` instead. The method should return a `string, array_*` if the function is already implemented
This should be removed.
`foss` is an `warn` operator, which means `info` could be nil. It'll only happen once, but it looks to me that you can remove this.
Was this a bug?
The previous code is correct, because this method should be called only if a custom custom node is passed in which has the potential to modify.
Do we need this in the finalized index?
This looks like an unrelated change to the fix, but I'll leave it as it is.
This is an API breaking change.
I think `Parse` can be removed if not used
This class doesn't have to be TracerConstants. Also it should not be public static const either Language = "dotnet"`
can you make this a debug level
I'm not sure this is the correct way to do it.
How would you feel about adding a `name` function?
Since you're modifying the `EnableApplication` interface, this is no longer a needed change. It should be fine, as it was before, but I would suggest to remove it.
There are two places where we return `stringtab` and is the `has_}` of a string. `stringtab` should never be an empty string.
why the change to the annotation?
So, you are changing the order of the parameters?
This value will always be `null`. I would expect it to return `null` if the value is `null`.
` BoolParameter(default=True, true, ...)` => `'If true, ...`
I think we should add these to the top of the file and also move them down to the top of the file
why change this? you are still adding new attributes?
The `ncr-layout` layout is meant for the user to show an entry for them being created. Maybe we should change it to `18f-layout` or something like that so that it becomes part of the file can benefit from having to add this `n` layout.
why delete this file?
The `idToPos` property is never used. This method returns an array. `newHashMap()` is already used for the class (the class) and the class does not have to be used.
This is the only change in this file. You might want to check for TryGetValue in a different way (I know it didn't have the original PR) to do it for a single callback.
Shouldn't it be `const std::bind;` rather than `const std::luaScriptInterface::luaGameLoadMap`?
What if the ml has no initial stack? I can't find it.
Is it a pointer to "healthcheck"? I'm assuming that you're just removing a pointer, but not a boolean.
can we use a set as `v1alpha1.StorageClassKey` or something?
Can we just name this `SubnetGatewayIPV4Address`? We're adding `Too4.js` to the `PrivateDNSName` and `SubnetGatewayIPV4Address` below.
It is a little weird to call `find` if it wasn't before.
Do we need a copy of `C`?
I'm assuming this is the fix for the PR
Nit (and other test classes below): this should be `subprocess.test_group_auth`
I'm surprised this didn't get shared roles, because it doesn't actually have a plan. It seems like a good idea to have the shared roles, and this will allow you to do a copy of this call to this method?
Can we keep this in a constant so it's easier to reason about?
Do we really want to log something here? Seems like a function that sets all the fields.
This should be a single line string.
Should it be possible to have an `.to(() -> new GetSessionQueue(...))`? If not, can we fix it?
If you are doing `GetStream(string filePath, FileAccess access = FileAccess.ReadWrite)` then this constructor will be replaced with `return new FileStream(filePath, mode, access)`
I think this import should not be needed, it's already present in the repo and it's not used anymore. The `q hints` object is only used in `lib/bin/shoot.py` (in `pkg/bin/shoot.py`).
Could you add a docblock here, too? :smile: Thank you for the time being :)
The server/function is not in the `src/server` package (and I guess it was just that it doesn't support `src/server/core/v1` because they were not being used in the `src/server/core/v1`
is this change still needed?
This change isn't necessary.
Can you move this to the caller? I wonder if it will be simpler if we would like to use the same name, i.e. `version != null` as the default (like `testing.lang.String.join`)
This looks like a copy/paste bug, and should be rewritten as a `*`
Please remove the extra lines.
I am not sure if this has any value or `copilot-task`
This is a change to `true` in the `<p>` section. This is because the value of the `input` value will never be `null`.
I think this should be `BACK_COMPAT_TO`. Otherwise it will not be set to zero with the value that would be set.
I don't think we need to add it to H2O_COMPRESS_HINT_ENABLE as a variable and we should return from H2O_COMPRESS_HINT_esting. In the case where H2O_dynamic_BINT_ENABLE to save the "OFF" header, there is no need to call it. But for now it is just a single method, and the logic below does not need to know about it to be able to call it without doing anything else.
I'd like not to do that. This is also part of the code that's used in the `if`, which seems to be the only place where we don't create a new instance.
I'd add a similar note about how the function works with `context.issubtype()`.
Why not use the same name `checks`?
I believe this is the actual fix to the existing code, it would be better to have a `KOKKOS_COMPILER_CLANG` in the constructor that checks for `KOKKOS_ARCH_VOLTA70`.
This was fixed in #367.
why are we logging here ?
I think you should just remove `find_by!` now that it's no longer needed.
nit: why not just return if the file was not found in the else?
This can just be `global.googlesitekit's = API`.
Why was this changed?
Maybe `omitempty` is more appropriate?
This is very confusing. I don't think we need to introduce a new `testingTaskBase`, but not a new `testingTaskTaskBase`
@jridgewell Is the idea to defineAspects aspects?
`os.path.dirname()` will work for all os.path, right?
I'm not sure why this is needed? We can't have this on an earlier release. We should have some kind of implementation for it, but if that is not the case then this should be `this.wineEnginesPath()`.
I would suggest to check for all cases like this: `if (endKey === null)`, and add a `break` check to the if so that it will fail without any error.
this needs to be an Network ID
This is the wrong way.
I think this should be just "SalesforceSDKManager.getInstance()", since it's no longer used in the SalesforceSDKManager - I'd suggest keeping it as part of the constant and make this constant more explicit.
Maybe `DEFAULT_REVISION` should be set to `0.0.0` here and in `0.1`?
Nit: I think this is a good idea to explicitly explicitly saying `login` or `help`.
`layout === 'viewer'` and `isNextViewer` should be added to the viewer viewer.focusElement_('noteTextViewer')`
nit: unused import. Please remove
You probably need to update this file as well.
You could just use r.request.URL.Path instead of using the variable. Then if someone calls the API with an empty string, there's no need to use a variable.
I don't know why we should use this, but maybe we should have a better name for this?
I think we should change this to `RetryForever` in the name. The ACMESelfCheckFailurePolicyRetryForever should be a separate variable.
The `ot_gpg_error` is a bad name, we should use `gpg_error_to_gio_error` instead of `ot_gpg_error`
Is it a good idea to use a temp variable instead of a hard key? It would be good to make it a little bit more obvious as to what is going on.
Would be nice to have a test that matches this in the `src/service/server/service/api.go` file and not have it in `src/service/tests/test_client.go` file? This class is used to be in `src/service/server/register.go` and `src/service/api/register.go`
This is the main change that affects `ars.Match.Priority`? `ars.Match.Priority` below. It is not used. I think the idea is that you can just use `findfillPriority(priority uint16)` and use that in the name. `ars` is a bit more readable and more closely, but that's what we have in the code.
I don't think the packged is necessary, we should just change the above to packaged described. If the unresolved is a sub-property value, this change will lead to unexpected side effects.
Please add `@deprecated`.
For backward compatibility, we should also update the `go` and `go_build` APIs to allow them to change from the `registry.go`?
I think this is the correct place to put `btc.testnet` since it will be a special-case for the `Read` field.
let's use `fmt.Sprintf()`, since it does more than one of the packages.
(style) space required before the open parenthesis '('
Can we call this `_target_destroy` instead?
I'm wondering if it makes sense to use `torch.shape` instead of `torch.shape_as_tensor`, and then we can use `torch.shape_as_tensor` instead?
This will be useful for `not nil` if `klog.V(2).Infof("Looking for instance %q",id), error`
Why are we doing this? Should this only be lowercase if no other settings are disabled?
Can we do that instead of just calling `admin_session_required` here?
This should probably return an error.
` PutHash` is a bit odd. Maybe `pre1111` or `pre1111` is more clear.
This one can also be removed from here.
this is wrong, it's not a good idea to have it in another test.
Is there any way to make clear that the user does not have a peer?
@nishantmonu , this change should be reverted since you're only adding the test to a `call` method, right?
This may not work, right? The `secondary_info` variable is used to set the `status` value.
@n3nash @pablolagreca, @nmittler, I wonder if we should keep the `.clear()` method in `AbstractHiveStorageStorage()`, to make it clear if `AbstractHiveStorageStorage()` is not `AbstractHiveStorageStorage`
This should be removed. I am going to suggest to set `self.tmpDir` in the `add_tmpDir` method.
I wonder if it makes sense to include a `-t` value here in the `python` folder instead of just the `!=` so that it's clear what the `<Return>'>` list is.
Not sure if `icmpType` is needed in `src`, but `dstPort` will be used in a more generic way, and should not be used here.
Initialize the property as needed.
Why is this a `ico`?
why do we need a separate set for the case of a lot of items?
`chunks2f megabytes` (which is a bad idea for the `mne` project).
what is the difference between `alt` and `text` above?
I think this is not right. This is the fix in the other PR.
Can be done with the `continue` if we're using it
This could be done in `updateLibrary()`.
I'm surprised you don't have to check the default here, you should use the `@object` constant here. I think this should be `@published`
Can this cause an issue if the target is not a dependency? Or is it the case here?
I think we should also mention that we won't get the error from the subscriber if the `Tracer` is not false.
Nit: this should be `JsonRpcError.PRIVACY_GROUP_DOES_NOT_EXIST`. The `instance` should be `JsonRpcError.PRIVACY_GROUP_DOES_NOT_EXIST`
This function can be removed.
Not used anywhere, remove
Is `create_lambda_function` already defined somewhere?
Is that a typo?
It seems that we need the extra closing parenthesis in this case as well. Could you please add `if (skewFromParent)`?
How about mocking the `spire/api/server` mocking?
This rename seems unrelated, perhaps `RunQuery` is more correct?
What does using type fix?
What's the point of this `if (icon)` block? Do we really need `TODO` on `TODO`?
Do you want to sleep here? It seems a little weird to me but I don't have a good understanding of.
I don't understand why you should use `access` here (in the case of `add_ptr`, it does not return a value, which is the plugin). You should just test with an `hand`.
I think these are superfluous. If we don't have a `*` in `mdJournal.md` then this would be an unflushed script that can be reused.
Let's create a separate PR for this and a JIRA issue, so that this PR is not in this PR. A AMP validation would be to create a new monitor that will pass if the monitor is configured and it should not be ready to call `wlr_drm_backend_monitor_create`
This line is the same as line 147 below
I wonder, what was wrong with this change?
This may have been a bad idea, but is there a reason you removed the previous `unset`?
what do we need to make sure that the caller has the same name as the other one?
Layout/TrailingBlankLines: 2 trailing blank lines detected.
It looks like this is a bug, since we set it on the previous line.
@saghul I see that these are different from what I did before, but I'm not sure what is the right thing to do about this.
It'd be nice if we didn't do this before because we had an infinite loop with an `&`
I'm assuming this will introduce an event if the application application is going to register the other columns. Is that intended? If it is, it means that the other tablet messages will be able to use the tablet tool response. The other option is to make this change in the future.
This is the only one supported, I would prefer using `map[string]string` instead.
This would work, because then we would need to check `props.children.forEach()` on its own but not on the `props.children`.
I think the default should be 'true'
this seems to be unused, is that intentional?
This is just to ensure that `err` is nil. I don't think we should be moving from `nil` to `false` if `nil` is nil. I think that this should be an `if err != nil` check.
The same here.
@Jjagg - I think we should throw away the exception and throw the exception when user specified the String (which is an error and that is not happening). This will avoid that problem though.
I don't see `proposal_attr` used anywhere, please remove it?
I think we should use `missingmissingmissingmissingmissingmissingmissing` for consistency. Also, `missingmissing` and `missingmissing` and `missingmissingmissing` can be used to avoid `Source`.
We should add the `omalStatus` field in the `apimachinery` table as well to make it easier to type when this was specified.
this change isn't needed
Is this a bug fix?
Is `secret is provided` the result? I think `container` is a string and should not have the string.
This is not a good way of saving the `blazer` action, but we want to keep this name consistent
I'm not sure why this was the case. The `AlwaysOffSampler` instance is only ever used by the form, not the client. It should either be removed or renamed to be changed or moved to a separate config file or the user's config file or the form.
What's the purpose of this change? Are the changes to the default behavior intentionally?
I would add a `@since` annotation here.
Should this be renamed to `_tab_index`?
Is this a correct operation with the current `bool` callback? Is there any chance that the correct callback is called on the `bool` callback? Should we do a check for the `on_controller_args` function?
I think in this case it would be better to just use `Blockly.VarDelete` and `Blockly.Events.VarRename` (or similar) since the `VariableModel` and the new `Var`s are now identical. I'm not sure how much of this is supposed to go here.
@deads2k why we public API? It seems to be public API.
Is it type object?
The name `T` is now misleading. I think it's an `Sorter` instead of `T`.
Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
Should this be `nullableable: false`? Or is it only for enum?
There should be no need to specify it is here, just remove it
is this the default?
`self->max_bound >= $i` ? It looks like it is only used once in this case
Why 2014?
What about the `.spec.tail`?
Why not just `return statement.Delete(..)`?
Line is too long. [92/80]<br>Put one space between the method name and the first argument.
Why not keep `time.Minute` as default?
I'd love to see a couple of tests for these, e.g., `!preserve_hosts != 0 &&(?:never != 0`
This will not have to be in the end of the next line.
This should probably have an assert. `console.warn` is not a `calledThrice`.
I think this should be done in `_is_editable_prop()`. Also, I'm not sure if there will be any other way. What do you think?
The rest of this package has a different dependency than the target discovery fields.
The previous description here was wrong, but `basename (cmd)`. I don't think it should be in the `start` function.
nit: we should be able to use a different `void(10)` and use `void(10)` and make sure that the `1` are the same, which is what this was before (and will be the default in the future).
This one is not necessary because we don't have this code in an empty struct.
I'd prefer the name of the method. Also I would suggest `<%_thoughts>`
This field seems to be unused. Please remove it.
I'm not sure about this... I don't think it's necessary to do this in the base class.
I think we should just remove this check and use a default value. This means this will break the flow.
Can we add an entry to this method?
Can we have this as a list of those labels? If so we can add `WelchWindow` as the default for those but this can be a list of those labels.
The argument `folderAdded` should be defined `Added`. I think it's the only one that is more of a `folderAdded` (it doesn't seem like any other parameter is being used).
I think we need to do this before `import rdkit.Chem import rdmolops`
I think it should be called `pxz.wait()`. The `wait` is not a `basic` option, so no need to call it.
Why we change this?
I think we should keep the sortByColumn attribute for consistency.
I am not sure why this is changing. Could you explain?
Revert this change and make it more obvious what this is about
What about making this `!== null`?
In what situation would cv.offsets be a long? And would cv.child be a pointer?
What about 3.x?
If there's an implementation of this being a config, then you should just return the config from the config (preconfigured_peer_a) as the node_l->peers.not_a_peer (endpoint, false);
I would suggest `jwk core-2021` here to make it more obvious as to what this file is.
Why was it removed?
Does this change have any side effects or is the key name different from `initKeyring`?
I think the `Sadmin/Sadmin/a` is not the same as `Sadmin/Sadmin/bManagerFactory/bManagerFactory.c` file.
This can be removed now
Why not `int`?
`c.Data["IsApiToken"]` is always true since it is not a valid user's context. I think we should use `c.Error == c.Data["IsApiToken"]` for consistency
@ejona86 @rathukkaL I'm not sure if `||` would make sense here, but I think `||` here should be kept as the default and the first `||`.
I'm not sure it's a good idea to have it be called once, and then have it be named as `query_account`?
should we rename the conf.HTTPConfig instead of conf.go?
I don't think we should change the behavior here. Instead add an `assert` and the getter name to the carrier interface.
Why are these changes related to these?
I'd suggest adding an `else if` as a default and let's move the `|| null`.
Is there a way to avoid this if?
Do we need an assertion here? I don't think it makes sense if the containing can be serialized.
I think it would probably be clearer to just put the current key as a verb instead, and to avoid having to create the instance of the method in nextPrefix()
this change will cause a regression?
this could go in `pkg/logging/eventing/pkg/eventing/pkg/logging`
Shouldn't this stay `handler`? The span name doesn't seem right here, right?
This is not right, it should be None. In the case of `127.0.0.1.0` we can use `0` instead.
Is it possible to use a non-empty string? Would be good to update the code as well.
This is a change from another environment. Can we set defaulting to `KBFS_DEBUG` or `KBFS_DEBUG` instead
I think we should use `setup.py` or `setup.DEFAULT_time_test`. But that might be the right place for this.
I think this is the right thing to do here. The `default!` can only be returned to `true` and is no longer false.
Please add this field as well.
Could we use `config.val.searchengines[fs]` here instead of hardcoding the string name?
I'm not sure if this was the right move here. Why do we want to remove it?
Might be useful to add some docstring here for `_to_metadata_entries`
This change is not related to your changes... it should be reverted. @matt-gardner
should be removed.
Why not keep this line? A file std::chrono would not require std::chrono.h as a file that doesn't allow you to define it?
The attribute name should reflect that it has a primitive type name as well.
Please remove this include.
nit: let's make this `private`.
What about `|` instead of `StateReader`?
This should be called only when a file is created. The `nifi-` is called by `nifi-setting`. Same for the other similar places in this file.
The reason we need to change to a `diff_res` in its name is because it is a `data` field.
can it be an `if (atom->getAtomicNum() == 0) {`?
This is a change in behavior that means that in the "new" node, we won't get recording events if it's not a true state.
`return !hasVersion();` ? (not sure if I'm missing something)
Is it expected? Should it be `&&`?
why is this no longer needed?
Just remove the breaking change since it was not used and it's not being set here.
How about rename rollbackTraffic to rollbackTraffic_thread?
Since we have the constant for these, I don't think we need this constant at all. We can't have it in a public property for all the public properties.
Is the zkDynamicConfig.getServers() guaranteed to be zkDynamicConfig? I'm not a fan of zkDynamicConfig and other zkDynamicConfig, so maybe we might need to update the zkDynamicConfig's docs to check against the zkDynamicConfig itself.
Can you update the usages to use `< less than `MessagePack`?
is this a typo? if so do we really need to change this?
Should this be put in `build_defs()`? It doesn't seem to make sense to me.
`_MissingPandasLikeIndex` seems to not actually be the right type here. Can we instead remove it?
Do these need to be saner than `subnets`?
I'm not sure how the naming convention is `Ch-east-1`. If you're using it, you should add `apm-issue` to this record instead. If thats the problem, I think it would be better for us to use cn-northwest-1. If it's a part of the AWS AWS value, it would be better to add it here as well.
Is it possible to use a test to test the2799 value? I don't think we should be using it.
The `@activity` is already part of the `activity`, so it should be `@param` (or just `@activity`, and other instances below).
Should this be a bit more descriptive to the user? Maybe as a follow up to make things more clear?
Do we really want to use `Collections.emptyMap()`? It would be better to use the new one here.
These could be put in a separate file if you don't want.
This is a bit scary, I think it would be better to use `getDisabledMetricAttributes()` method, which would be used as default value.
This is an error case so we should remove it
The `this.close` will be called once when the `done` is closed.
I don't think we should define a constant in `fs.rclone` and use it in `testing/spack/admin/config.go` for this. A better name would be to just call these variables and have them on `testing/admin/config.go`.
Why is it necessary that this will only show the neg_prob of the clamp? The neg_prob will not be the correct thing to do here.
I'm not sure this is the right place for the fix. If any exception handling is correct, it is the right one from the AsyncRequestQueue that is not the same as the AsyncAggregatorAggregator. This will prevent a different exception handling in the next step, as it is not needed.
This should be in a try..on the `subsurface->`
Shouldn't we just remove this line?
Why the change? The tests are failing because we have an existing tests now.
Can't this go back to where it was? I'd rather it was a dependency rather than a global state.
This check is never used, and we should throw an exception instead
I think it's okay to add `@Nullable` as an argument. We could also just make it `@throw new Error(message)`
why does it need to be a number? why not a number?
Is there a test for this to be mocked by using `DefaultOAuth2UserService`?
is this a regression?
I don't believe it is necessary to pass the query ID to `table_ID` and pass the properties to it directly. The same goes for the `UUID` class above.
I think the `a` should be a blank.
This change looks unnecessary -- we are now just refactoring the actual error and the changes in this file and the changes in this file? This way they don't have to be included in the code.
This test is not strictly necessary because `BinaryAnnotation` is already being passed.
why `7`? you are already passing in the `theme`
I guess the `value ]` value needs to be changed?
can we add a check for "order" or something similar ?
you can just change initialState to be the initialState, no?
Should this be `Teacher.joins(:video)`? I think it is a bit confusing to have one in `Teacher.joins(:video).update_video()`.
is there a reason for this to be `\r`? If not, then please write `\n` to match the existing naming
Should be able to use an example of atests.
I'd prefer a separate PR to get rid of this.
Do we need to add a link to the baseclass?
why `is nil` here?
I think this is a good candidate for a `build()` method in this file.
`expect_deprecation_with_call_site` returns the correct method, so we're not actually checking for `nil` here.
I'd suggest `write.object-storage.path.enabled.write` which calls this.
This change seems unrelated, I'm not sure what the best thing to do here is - that `ok==false` is.
This can be replaced with `var_type`
Why do you have to change the default to `W3CB` here?
This doesn't look right
This is the change that was made in a previous commit, but I think this should be fixed.
Isn't this function going to be used anywhere?
Do we really need this? I don't think it's used anywhere in the code.
I think you need to revert this.
I think we should add a `Get()` method to `RefreshAndGet()` in `Pantsd` and call out which call it.
Shouldn't you just make optikcontainer && self._optdict != -1, and avoid the if for that case?
Is it possible that a container has a container's name will not be processes?
This will fail in some cases, but the old code will never see it.
Block has too many lines. [30/25]
Would it be useful to also have a `func(String)`, and a `default` here? Or is this something we can use here?
Why is this not using `notebook` anymore? It could be just named `_notebook`...
I don't think we should remove the global namespace here, as we're just ignoring the db here.
This seems to be needed, char *fullpath should be the current name of the form.
I have no idea why this is needed... if you don't do this, you should use v2 to make it consistent
I think it's not necessary to remove this line? `c` is already in its list
Redundant `self` detected.
nit: remove empty line.
This will not happen if there is an exception. The null check here is not needed, it will be thrown in the `_spectra` call.
I think `! ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
Is the name correct? If it's a constant, I guess it's probably not, but should we name it? Or just something like "no name"
This method was only called once during the build step.
I think you can remove this too
This should have probably been written as `ip6_uber_Net6`, right?
This return statement doesn't make sense here as there's only one returnPartly
why do we need to set `tmpOutput` to true?
This test is testing 430 now.
this can be error-prone because `h.h.Write(p)` will always be called. Is that intended?
@chirimoya What do you think of adding another `and` that would be more obvious?
We'll want this to take a factory as an argument to `published` so it can be used for both the factory and the factory directly.
I don't think you need to add a `class` to `makeAttribute`
I think this is a breaking change. I don't think you're making a copy of it.
It should be `! empty($params)` instead of `return`
Why binary and not the default of compressed?
this is a function that does its own `controller`?
The settings in this class don't need to be static, right?
I think this should be `f.metadata['websocket']`. No need to check if there are two separate items.
Maybe use `separator` instead of `separator` since it makes the code harder to debug
why do we need this? Since there's only two instances in `method`, should we just use `method=('model')` here?
this.aggStore.GetMetricPointsAccessor() will do nothing if the setter is called from within a higher level
I think this is a leftover from debugging?
Is the `net/http` in `https.go` still used?
I wonder if we should use a better field than `L39.checkpoint`.
Should we be calling this `.v2` for now? Otherwise we won't be able to get rid of it. @jridgewell
Is this spec going to be checking for `deliveries.clear`? I think the spec is fine, but maybe we should check that the spec is not present on this spec?
nit: this could be a const
This should go before the `if` condition
I wonder if the change can be reverted and there's no need in the `else` clause. I think `lint` is still needed in this context, as the `if` is only being used once, and the code is only ever used once.
I believe `runtime_type` and `DataFrame` should be the default so it should be `true`
I'd prefer to add `selection` in the name, because I don't think there's any reason to keep them, but just for clarity.
Remove newline please.
I'm sure this is a good idea... If we are setting "privacyMode" we need to set "language" to "privacyMode" (we are not doing that anymore).
I don't think we want to keep a copy of the last line.
Is this file still used?
I think we should keep it consistent.
shouldn't this be 200?
Please add a doc fix.
This is the only place where `std::size_t` is used.
This was a nasty bug, since it was a bad test I see
@steveharter do you know why we have to put them into `Simple*` ? Is there some reason for doing this?
This is a good candidate for testing purposes.
`stdbool.h` is probably a valid package name, can you use `stdio.h` ?
`manage[]` or `read[]` ?
This seems like a good change. I don't really get why it was there before. It seems to be a good change, and if so should be done, I'd suggest to leave it out.
I like what this is
Why is the reason why this needs to be public? It looks like the only change here needs to be made in the constructor for consistency.
"attached" -> "move"
I think we can import org.shredzone.flattr4j.model.User from reduxux instead of import. The purpose of `shredzone.flattr4j.model.User` is to avoid a `User` class
RPMs is a string. It would be better to move it to another string.
What is this change for?
I think we should remove the `syncTime` as well.
The `g_value_dup_object` and `value_dup_object` are not used anywhere.
This feels wrong. I think we can call `in.Status.ChaosStatus.Experiment.Phase`, and then use `in.Status.chas` to determine the status. I'd expect `this.Status.ChaosStatus.Experiment.Phase` to be a normal service and not `in.Status.ChaosStatus.Experiment`.
Do we still need this?
Remove this line.
Making this the default setting of `DEFAULT_opt_collapse_project_rule` would be a better name.
This should use ``replace``, not ``Hints``
I would put this in LoadGroupMembersPipeline as the key is not available.
I'm not sure we should change the name here, but not sure how the name is.
I'm wondering if the `System.getSenderNonce` method could be replaced by `System.createSenderNonce`. Then you could use a method `private` and have the `private` take `System.getSenderNonce` method in the interface. Then you won't need to pass `System.getSenderNonce()`.
The line breaks here.
What does this do? It looks like it is only called once.
these changes are probably unrelated, can you add them?
nit: I'd prefer if we could use `[NotNullWhen(true)]`.
nit: a final here, maybe?
The method signature is not used anymore, I assume it doesn't add anything to the `T` in the method?
Please don't make this non-static. It is only used for testing purposes (not that it can cause issues in other API).
I think this can be simplified to TRUE = FALSE;
@deads2k i don't think we need to add a task here. i assume we will be running in a separate state after all tasks are initialized, since we want to know the task is available.
Is there a reason we are not using ConfigKey()? It should only be implemented if the version is already part of the ConfigKey, right?
I think we want a doc here and add a new one to the base module.
`System.Threading.Tasks` is a `ConcurrentSerializer` method, so the whole process will be `ConcurrentSerializer` because there are no fields in the `System.Threading` and `ConcurrentSerializer` and `ConcurrentSerializer`. Also, I'm not sure how to handle `ConcurrentSerializer` and `ConcurrentSerializer` as `ConcurrentSerializer` are needed.
why remove these?
Can you explain why this change is needed? I think it should be fine, but if you really want the test, I'd prefer it if you don't want to show the test.
This change is not required here
@mmaxim can you check if this is the correct error message?
Don't use parentheses around the condition of an if.<br>Line is too long. [96/80]
can you add the endpoints to the top of the file?
`assertEquals` doesn't need to be added to `makeWEB`.
why is the default here?
Can we make this `gsql` and have a `KIEConfig` that has it's defined in the same way as `revision`?
You can also use `fontawesome5_icon_mixin`
This code is only ever executed on the weight, so why is it OK to get the weight from being able to detect the weight here?
This is not the right place to put that into a `addMethodCall` function, you should keep it.
It might make sense to use a temporary modules in the config and a temporary directory in case we need to start up user and a temporary modules in a Puppet user. In particular, the user needs a temporary modules in a Puppet and a temporary directory with a user that has no additional fields and can be used in a different way (or in the future).
I'm curious why it would be `upload` instead of `upload`
I think this should also go back to the other "Dialog".
I'm curious why you need to make this call to trace_flags?
This is a bug fix.
I wonder if `AuthFree` is better (or `GetAuth`)? It might be confusing to have the `Auth` set to `false`.
I'm curious why we have two separate functions here - one of them has one and the other should not be exposed.
Any particular reason to remove this class from `__init__` ?
What is goal of getting params from a page somewhere?
This will need an `ovs` to be added to the service.
This should really be done with the `if` below
On line 164 it should default to `null` here as well.
I don't think we want to be able to keep the interface to be consistent with the other two classes (and, `null`)
so glad we can get rid of this, we don't have a reason to pass it, so the new version is not removed from that function?
This is a little hard to read, but I think it is not a good idea to use a null value as the field is already passed as a `ValueFormatter`. We have a null value for the value.
So it's a breaking change. The only thing I have to pass in `axis` is that it's the default.
These are two separate imports (but not a single space).
This is going to need to update this because it is indeed `task` and `updateTaskKnownStatus`
What happens if span is null? Shouldn't it remain span?
This is a breaking change. It does appear in the same way.
This is an actual bug.
`250` is not supported on all platforms in this file. I would prefer to use a constant for the value of the loop (say, 0) or something like that.
why do we need to catch the exception here? it's not necessary as a filename will already be an error and this is the default one that will be returned
This is a very good solution but why should we be returning nil? I would say we want to return immediately if s is not nil or not?
This is a wrong place for this. The `Em` `sync` values are always `erroredEmails` and `erroredEmails` are both the same. The `tag`/`Em` are used by `erroredEmails` and `String` are just `obj` values.
This is a bug fix.
Since this is a single column, we should use an array of ` Sel` to build the JSON string.
Is this related?
I am not sure what this means -- why would we still skip the old code if the `blockBytes` is not set?
Can this lock be declared inside the body of the lock?
As a heads up, I would just put this check in the `on_mode` method, and use it in the `on_root`.
I think we should use the `Test` method instead of `config`.
Why was the error removed?
Same here -- if this is untrunes, we should also add a `<tr>`
`+ h2o_token_t *token = h2O_MAX_TOKENS;`
I would not change this to match the `.pattern` and the `.name` version here.
is this a bug?
describe is not used anymore, please remove
This should be broken up into two methods: `LOG(ERROR) << "Target checkpoint path`
The parameter should be `get_cfg_var`, not `get_cfg_var`.
I'd remove the new lines and use `resource.Error(s, peer, "successfully connected to peer (inbound)"`
I'm not sure this is what you want. The `DateTimeUtils.setCurrentMillisOffset(0);` test is supposed to be doing so. It seems that the only thing we use is that the `DateTimeUtils` was `setCurrentMillisOffset` is the first thing.
You need to do the `if ( footerText ) {` here.
Maybe add a `TODO` to remove this?
This one is a little hacky?
I think it would be better to name this `caBundle_charset`
This is the wrong place for this. The user can just pass the empty string (like a layout does not need to be set, if no content was specified). I think it would be easier to see the output of a layout, so it would be good to have a test that the user didn't see anything about that.
We need a space after "drive-use-created-date"
Hm. I think we'll need a more descriptive name. How about `-15`?
It might make sense to add the `MasterIndex` parameter to the `Index` function if the current index is not found.
Why? The `Running` variable is used in this function.
You can remove the `.env(:templates)`, and use the `.sort_by` helper method here.
`count` is not supported in IE.
There is something like this: `if defined?(Mongo::QueryCache.cache_table, defined?(QueryCache.cache_table))`
Is there a particular reason you need to put this in an index?
Is there any way we can avoid the `--env-id` flag?
Does a proper `_` not work here?
Why is this change needed?
This file is unused
I'd rather see this field being used as the default.
Is it possible to avoid the `_`?
@stephentoub I'm not sure we want to add a `is_Redeemed` field here, since it's not used anywhere.
This is a very fragile change to me ...
Maybe `info` is needed?
Why do we need this? I don't know how this could be called.
shouldn't `rand` be `math/rand` ? I think it would be better to use `v2.x`
Why not use it in the `hiveive` class rather than use `Environment`?
`pendingRequest.configuration.remoteHost = pendingConfiguration.remoteHost;`
Why are we removing this?
This is the fix I mentioned above. The plugin isn't required, but the plugin doesn't.
Is this a bug fix?
The `op` is being set to the AID on line 408, which is the expected behaviour to be set as the default. The user can't find this message, as this is the default of the AID, but it will be able to find that when the proposal is `null`.
I think it is not enough to use a string.
I think we should use `web.MethodHandler` instead of `postageTopUpHandler` in the `/stamps` module.
Do we still need this `_is_internal_node` method?
What does this change do? I would say it's a bug and should have an issue with a fix to make sure that this change is not part of the bug?
I'm not sure what to do here is, but it should be here too.
I think this change is not correct. The RamUsageTester is not the same as the "dic" part of the "standard" step...
What are the `io.Writer`? Are we planning to get rid of this?
Why is this necessary?
Since `null: false` is used to generate a default, can we set this to true when `false`?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Would it make sense to extract this class from the `Rule` class rather than in the `Rule`?
This should never fail, it's null.
can this not work on error?
What is the reason for this change?
I am not sure we should use "clean_up" for cleanup names and cleanup names. @kargakis what do you think?
This should be added as a separate parameter to the `REDIS_HOST` above. I don't think it's worth the effort to have it here either.
I am a little concerned about these changes. I'd rather you could have another example of what `RESEARCH_PROJECTS` does, or you could make the `RESEARCH_GROUP` as a static instance, so that you're still using `Rootverse` and then just use the `Rootverse` as a property of the parent class.
shouldn't that be in the `username` class of `user`?
this is a public API, not a public API
I'd call this `var` to be consistent with the above `CreateConfig` and `CreateConfig` -- it's better to just use ` ReadConfig` throughout these and just have the same name as the other uses.
In case you're using `//go:build !cgo,`. In fact, why is `!cgo` different from this file? (same for the other change below)
Do not use `raise` to raise an error.
I think the previous argument is unnecessary and the docstring should be updated.
This is the only change we have in mind; can we make this a `protected`?
This seems like a very generic package.
It doesn't look like `binary()` is used anywhere?
We don't use package name anymore?
I don't think we need this particular migration, it's good to merge. `project_name` is a name and we could just set it to `null`.
Should this be set to false by default?
What if the ExternalToolHandler has a different name (null, false, false)? Is there any specific reason not using it at all?
Why not `LocalPrefs` here as well?
If it's a public variable, we shouldn't just be using it at all.
We're gonna need to set this variable in the `HIP_PLATFORM clang` env and let it pass it.
Could you use ``object.join`` instead of ``count`` ?
nit: could you change this to: `js hive`?
I'm not sure we should add this to the `GoQuorum` method
Can we use `Pip(kid.SprintfConfig.PipedSpec)` here instead of calling the event from another cluster?
We should make this a copy and then use that.
I thought the plan was to add the new property to the base class, rather than introducing another constructor.
Do we have a test that has been merged this?
This file is still not in the main file.
@stephentoub do you know which catalogName and catalog somewhere else?
I'm not sure why the `VersionAsString` method should be renamed, since the `3p2` only supports the `3p3` implementation. It's a bit misleading, as I was thinking the name `3p3p3p3p3p3p3p3e. You could just use `5p1` to match the code base.
If this is the only thing that should be called from multiple threads, is there any value in that method that can be passed in and this is an existing function? I'm not sure it will get called for some reason, but this is a good thing and could be helpful to be conservative.
Why is this change needed?
I'd rather use `Transaction`, since we're making it a `sub`, not a `int` for this PR. We could have a helper function to avoid this and have a method that returns a `NullPointerException` for each parameter.
[nit] this newline should be grouped together
Wouldn't `sgToPageForStaleData()` be more clear? Also, `latestDateInReceivedData` seems to be the same than `fs.parse15MinAgo`
The `RejectRequest` here is just the message to the `translateUnboundedRequest`
`web0s` is now a string that can be just a string so it can't be changed. The value should be used instead of `no` as `video/web0s`.
This should be returning `false` for all unfortunately, and should be safe to return `false`.
I don't quite like this variable. I think it should have an array, but it's a separate array.
we have debug function with an explicit debug output for the message, and this is the message, we should be explicit about this.
I would rename this `&& set history` since it is used in other places and only in the other places where we've used the other side of the history.
why does it need to be `@team_page?` here, since it is only used in team_page?
The logic here is not correct. It is possible, when the file was created to start with multiple Next, then the exception is thrown.
Maybe I'm not sure what `hypervisor` is for here?
Please change `setup_requires=['pbr']` to `setuptools` and remove the `setup_requires=['pbr']` call, then it will be set by `setup_requires`
`ENConnectionManager` is not used for other tests
this is wrong, you need to pass the path as argument
I like this name, there may be other places you changed the other functions. `Unwrap` can be used to wrap other methods in `EthAddress`.
Why was this line added?
This is the only change that fixes the problem. I'm just not sure.
you should also have a default, so it should default to `string.js`
Can we use assert here?
Why was the error removed? Isn't the `mTask.` the only function that is being called with a `org.infinispan.client.hotrod.currentEvent(ctx, engine.client, task, c, "")` on line 750?
(This one is wrong.)
I think we also want to keep the `JOB_ID` part and delete the code base.
These two headers should not be in the same order as the last one (e.g. the same for the other two). Please add a note about that
Should this be set to a `Type`? I'm surprised it works for the tests.
`config.sync.fullSynchronization && config.schema === undefined` is always undefined, so you should just replace `fullSynchronized` with `fullClient`
I think we can get rid of this check as well.
Can you add this to the controller/container-status to be consistent with other places?
I don't know why you changed this to a partial. You should move the `java.util.List` to a separate commit
@JeremyKuhne I have changed this class from your editor to keep the old code consistent.
We can now get rid of this test. I am not sure why it is possible.
This is not related to current change, but it was unrelated to the PR.
I'm not sure why `unless excluded_portal_link` is required here?
I think the copyright here is still necessary
why not `!a.beforebefore(props, b.props))`
I think it should be `data.constructor`, since it is a list of data. Also, the `data` is an array, so you don't need to change this line.
This import should not be needed. In theory you can use `org.apache.l4j.MDC`
This is a bit of an unrelated change but I think we should remove it.
This should be a typo I guess
Can be simplified to `import static` and `createMetadataTableInstance`
Should this just be `pylint`?
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
I'm not sure about adding this line.
Is there a way to detect whether the file is set or not (like a bundle does not support remote) or just a bundle? I think that would be a reasonable change to not break.
This will cause the exception, which is very unusual. The problem with this change is that if the exception is raised, `<T>`. I can see this change is just in the original code, but we need to keep in mind that it'll be reworked.
I'd suggest `[DoesNotReturn]` as the name here and `bootstrapMessageDirect` as it's not an obvious operation.
This will likely need a `ReflectionFunction` field, it's already defined in the previous version.
Please move this to the `interfaceModified` method
Just for my own benefit: This should be `InputGONE`.
I don't think I understand why you need this?
Why not `--object-prefix` ?
Why was this removed? `rvm` and `rvm-prefix`.
Is there any point in keeping this around? I think we can simply use one of `self.len` to get the first error.
`gold` should be `static`.
This is also not needed anymore, right?
I don't have to do this. You need to remove this file?
nit: it would be nice if `!==` and `Long` are both lowercase, so I would change it to `!==`. But I don't think this is a problem, but it would mean that we don't have to call `!==` at all when we need to call `!=`.
I believe the `_shared` fixture should also be here? The test shouldn't be here as the test won't be testing anything
Please add a link to the `CLOCK_REALTIME` field in the future and add some information about the value to the service.
`||` isn't needed here, the `||` can be removed
I think it's better to use `const int64_t` here, and just check if the value is non-zero or the other way round :)
So this is actually something that we don't want to use here - we are using a single `nonzero` dataset to get the same behaviour (not something that should go in the database directly)?
Same - the method from the class `Uri` is the same as `HttpMethod`.
`data` is a debug statement, so shouldn't this be `_debug`?
If this creates a copilot directory, why not change the test in the `appapp init creates an copilot/.workspace` case?
Can you please add `trails`?
The new method `SabreEvent` is not used anymore, and the `SabreEvent` can be removed.
This could just be `Stop()`.
I think we should move `accountAccountID` to the top of the file. In case this file is used in more than one file, we should just remove the `account` part.
I think you mean "test" instead of "yamllint"?
Why is the `UnknownCharSet` part required, rather than `break`?
this should be private
What if you have a observations in the action name?
Why does this change?
I think this should be just `examples/cdn/*"`. Otherwise the value is not supported in terms of the bundle.
This is a breaking change as I'm not 100% sure it's safe to remove.
Is there any way to make these magic numbers a bit more general? Or should we just make sure they are the same?
I'm not sure this was the best idea, but we should probably make a new test that takes the value as a global variable instead.
Perhaps we should just make it final. May be `OptionalLong getBaseFeePerGas`
I think in the original review, it's better to keep `pkg/util/resources`, not `pkg/util.go`, as that is a `output.Equal` in the error message.
This has changed because I've been relying on the behavior that was intentionally being done to make a mistake in a different PR.
This needs a couple more test, I think.
It should be a global var rather than a global var.
This is not a good idea because it will cause the script to be not reload. It will only be called if there is an error and there isn't an error if there is an error. I'm assuming it's the reason we are using a script that is not reload here, instead of a new script that is reloading? The reason I don't see a reason to call `load_script` in `get_script`, but this is what the script would be. I don't feel strongly about this though.
Is this public ?
Please add docstring.
I'll be sure that the imports are not in the same folder as the rest of the imports
do we even need to `Retaining` the `unhashable` attribute?
I think this file should be removed (which is actually used for 201uable).
I'm not sure what the best way to handle it here is to keep the 'const' prefix as the parameter to the constructor.
@sparrowDom Shouldn't there be a way to get a warning for user to see if this is still used?
Is it possible to have a single field without a flag?
hierarchicalname already contains name and name? I see it is part of your name, but can we rename it to something like: "hierarchicalname".
I think we need to remove `ingress/#ingress-class` for now. If so please make sure that this isn't in the `kubernetes` module.
I'm not seeing where this change is used, can we put a default value?
isn't it `null` the next line?
Is this one used by anything? I don't see it being used anywhere?
This is a bit odd, but why is it worth logging on `Error` here?
this is actually something we should raise a `find_element` error if the element doesn't exist
I'm wondering whether we need a separate error for `startTime`, similar to `stopTime`. If I am not missing something, it will be a breaking change.
The class should be renamed
@DaanHoogland please review again, this file is not updated in your commit
This was a duplicate of the logic in `scriptK.DEFAULT_attributes`
does it mean we need to update protocol ID in protocol. iotexproject should still be available to protocol ID (which is what we want to go to it)
This seems to be missing the check below.
I think you could move the test into the new method and remove the second `parentProcessId` above.
Does the name/logic make sense now? Or is it only for xattr names?
This test would fail to see what it was trying to test. In any case, the tests are not testing the size of an array. The other tests need to test `kube_fails` should be changed.
remove empty line
This needs updating to remove all the `.build()` calls.
Metrics/CyclomaticComplexity: Cyclomatic complexity for skip_after_action is too high. [7/6]
can you make this change in `AccountNonceMap`?
Shouldn't we use `clientconfig.current_CONFIG()` instead of `clientconfig` and `clientconfig` as well?
We can just add the `if` to this code so that it's clear what a new batch is and then when we try to get a second task from a command-line parameter (or whatever) delete the batch size.
this should be `null !== $acceptedContentTypes)`
I'm not sure if this is a good candidate for the user to see the output in the log statement.
This is just a minor nitpick to make this change in the commit message. Thoughts?
this is already set in constructor, right?
Please avoid using the final version of the test.
Why not use `feval = [feval]`?
Shouldn't there be a corresponding corresponding `tuweni.bytes.Bytes32` here?
@deads2k would you mind adding this to the end of the function `spring.NoWait`?
This is the only place we're modifying this code. We don't want to add a context to the root root page.
I think we can remove this line and change the function signature to something like: `func();`
@stephentoub should this be (0 == 0) instead of 1?
Can we keep the `.open_form` and check the `current_user.subscription`?
I am not sure if we should remove preg_quote from here, because we already have a data type of the file and a match. It's not an error and we should be using a boolean
Isn't this going to fail in the CI? Can't we just use the same configuration here ?
nit: space after `,`
use `assert result` instead of `assert` in the docstring
I think it will cause the parent parent type to be used in this struct. This is the only place a few of these fields should be used in `buildCallback`.
This is a leftover.
Why `go-selinux` is removed?
Is the `DELETE_REQUESTED` part part needed? I thought the error was also introduced in order to pass the `DELETE_IN_PROGRESS` into the `_env` feature.
@kaban improvement I don't think I should have enableartz in the app. I think we should have it either in your default config or it can be set back to false.
This is probably not the right place to handle this, but I don't think we'll have to do it either. I think we want to keep it in one place or use it for now.
nit: rename to ServicePort to reflect the change
@matt-gardner I'm not sure if this is correct. The key is a non-null value or something similar. But we might want to have a different value. Is a reasonable value here?
One small question, what is the `server_port` in this context? Does `port` not exist at all? (it's the only time we pass `port` into this method, but maybe we can have `vements.create_server()`, so maybe even better, we should have some check on that instead of passing it into the `vements` method).
This should be split across multiple lines.
This will always be true when the value is null.
Why are we using the `GetTipSet` function here? We are already using `State` in this package.
Are you sure this works? I think the changes in this file are not being used anymore.
I'm not sure why we are removing the property name, as it's just a list of files, but it's used by the other plugins. Can we make the same prefix prefix as we have other things?
I'm not seeing any errors in the code that error out here.
Can we move this to the BiosLegacy class instead of hardcoding the name of the Windows Windows?
This change is unrelated to the PR.
Why is this defaulted?
This change is still unrelated to this PR, but it was probably for a reason. If I changed this to `event.Content` to take care of `.Content`, I think we want `.8.0.5`.
This is not needed anymore and `RemovedInInvenio23Warning` is removed.
I'm not sure we need to change this
Please put spaces after `test_awilUn loggP_test.py`
This is a bit odd... a typo would be better
shouldn't this be `private` ?
I'm not 100% sure it's a good idea to change the type of 'In the constructor.
If we're in 32-bit environments, we need to use the test_over_two_gb from the test_gb to make sure it's ok to pass in this test. Otherwise, we'd have to test this in a test function in the jenkinsci.h.
Why is this needed?
Do we need `import IntegrityError`?
I'm wondering whether we should not have a `recursive_mutex` function that gets called from an instance of `mutex`. Is that OK?
`init()` or `ReCertManager` are the right thing to do here. `issuerName` is already a property.
I think this import is unused now.
These can be `writeAttribute(xmlw,"source","DVN");`
We need to keep the `CompareCommits` call here, so we can pass in a `state_NULL` or `state_NULL` to that function and make sure we have a non-CompareCommits call.
Should this check for `ctx` instead?
I would suggest a space before the backslash (or whatever you use for the other loading values)
I don't think we should be setting this value directly in the `ConcurrentChain` namespace.
I think it might be useful to add `addRequestId` to other options as well.
This could be moved into a shared shared method if it isn't used.
why did you change the assertion? it seems like we could use the `assertTrue` constant in the test itself?
If it is the same as `++i` as `++++`.
`AppendHistoryNodes()` is only ever used in `AppendHistoryNodes`, can we remove it?
Why do you need a `SPIFFEID` here?
I think the `vpnServer` was only needed for the `umberServer` method to be consistent with the other error conditions
This isn't related to your change, but why is it possible to remove it from the PR?
This should be `x`
We should also add this kind of check to the other day, as it may not be a problem since it will be in a different file
I think you should also add this to the `env.Run`
Is this intended to be a part of the PR?
I think we should make this interface private (and remove the interface for it) and make sure that the code doesn't actually use it.
This code looks correct. You're missing a `Word_tax` variable. And the `workers` below. I don't think there is a better solution. You can do it without adding the `workers` property, if you want to do that.
This is needed for all files in this package
Hmm - is this the intended behaviour? It seems like that should be done in the same way as above...
This should be a "Rpc-Header" attribute, not a part of the name
Seems like this should go before line 1069
I don't think it's the right fix, and it was here to account limits which was wrong (I guess).
I think the `else` can be removed.
@mjkkirschner why do you want to do this if check?
You don't need to escape the square brackets here, you can just use `return`
This is a change in behavior, but it seems like it's a little strange to set the default value of the `llnl.util` message, but still has the `message` message.
is this used somewhere?
Same here about setting this to `PhysicalPlanNode`.
Is this supposed to be bloated in the `bootstrap` folder?
What's the reason for making this change? I don't see any False in the test code
This might be clearer as closed as a parameter.
nit: can we just call it "SessionId"? This way there's no guarantee that the value is not null.
Would be good to have more context in the future. For the future, we can keep the log.
Doesn't this need to be inside the `if !def CartDecorator` block?
why not `// 29`?
This should be a pointer.
I am not sure we need to change this. There is not much benefit to using `log.info` on the code, so why is this necessary?
Why we remove this?
If the `min_count` is undefined, the value should not be `1`. Otherwise, the value should be `2`, not `3`.
Please use `MediaStore.Files.FileColumns` instead of hard coded value.
Does it make sense to use `.` with `<`? Or `.` is required? If it is `A-Za-z_` then the `0-9]*)*\\` is a string, I think it should be `<`
does this really need to be an error if `Retry limit` is a non-empty string?
I think we should just make this a const.
This is going to be the only place where we call a `TimeSpan.FromSeconds(0)` which is `TimeoutAfter`. I believe this is the only place where the listener was `TimeoutAfter`.
I don't think this is right -- we should not use start_pc at all, right?
Could add a space here?
The first `load_time` value is just something which is correct here - `Mock_time` was just a number. I'd like to see the `Mock_time` value in this case.
The `music` class seems to only ever be used as a string, so no need to modify it.
I don't believe this should be `writeCommand.sessionsession = options.session;` so you don't need to add a `getClass`.
Is `60` a good idea to replace `HasValue` with `(EndTime.Value) * 60 / PointsAcrossPeak.Value)`? This should work as well, but I'm not sure if this is something we need, right?
`mLineEdit.setFixedWidth ( 10*fm.horizontalAdvance)`, so the test will still show up without the presence of `mLineEdit.getFixedWidth("a")`
Hmm, is this what you wanted for? `key` and `oltdir` are probably more of a name?
I know the idea here is that the user could use `ruby-` but this will also be the exact same thing as the `ruby-` one.
I know the same code is used in the code, but this would be great. `*temp_int_part` is always 0, but `prec`, so the `0` is `0`.
This sleep is not compatible with the other changes
can we name this "env" or "envSet" instead of "env"?
Why not `if sigpending_t has xstate` and then `ifdef X86` ?
The field $allowedArgs should be allowed or not. The field should be changed to `!` if possible.
Why not just use `get_value`?
The default here is `false`. This should be `null`.
Please remove unnecessary changes to this file.
What is the reason for this change? Is this just a copy/paste error?
The `highType` is used to set both `types.Basic` and `types.Basic` here to avoid any risk of being able to be set by itself.
This is not right. I think that the code should be removed and the file should be removed from the main process and be removed from the main process.
I'd like to use `.copy()` here as the default. This will allow the actual running `contr-` paths to be run with `--root-cache --root`. The `contr-cache`/`contr-cache`/`contr-cache` are only used for a single path, so you don't have to copy the entire `contr-cache`/`contr-cache`.
Does it make sense to have a test for this?
I'm not sure if it would make sense to make this return configurable, as it is never used. If `getComparator` will return null, then we should return `undefined`. Also maybe the null check should be redundant and use `@Nullable` instead. Same for `@Nullable` below. Same for `getComparator`.
You could also add a check for `table.schema()` for the `cluster` method and use that `cluster` instead, but it could be `cluster` in a `cluster` function.
I think we should just remove the default `opt_long`
what is the relation between this and the other two?
Is this not necessary at all? This is not a PEP8 error, but it is likely that the new unit tests are actually using it...
`Colt/inventory` and `Colt/inventory` should be defined.
This should be checked with `t.equals(t._1)`.
You have already defined `emu: true` in order for the `role` to be a no-op.
This is the main fix for adding a TODO?
Should we add a new `ServiceValue` constant here?
I don't see any reason to ignore this.
This has been discussed in the past. `returns has triggered a prefetch and returns that.`
`hidden_hidden` also needs to be updated to reflect that change, it's not needed anymore.
Since we do this in us, do we still need the tests?
We have a more precise name. `_root_` sounds like `id` is the same as id here. I think this `schema` could be extracted to just `VALIDATOR`.
should we change this from "open-file-cost" to "target-file-cost" or something similar, similar?
Do we need it to be in `libunwind.h`?
What is the intent of this change?
You can use `data["server_conn"]["ip_address"]["ip_address"]["address"]`
Not sure why the log is logged.
This is the fix, please.
You should remove the error code. We must also change the `ErrCodeBucketNotFound` to `(1, 0, 0, 0)`.
This test doesn't actually test anything... do we need to check for a `host`?
you should have used `log::time` here? (not used anywhere else so no need to add it)
This is still an API change.
Should we also have a `ConcurrentDictionary` or `ConcurrentConcurrentDictionary` ?
This should be added to `setup-api-utils`.
nit: we could just change the next `Error`
This test was only testing for the `db.tar.gz` file
I think the `node` object should be the same as the `-api` in `node.Create` instead of `node.Create(utils.ID)`
Should the default be true or false ?
Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
I think this line is the right fix.
I think this file needs to be updated to use `test_constants.py` instead of `URL`.
I'm not sure why we need to handle this here...
I am not sure if this change should be reverted - but is it intentional that we can't change the signature?
I'm wondering if we should not do this at all and just return `true`?
Is this necessary? I don't think `Name` needs to be passed.
I think we can also catch the `resp` case with the `body`
Doesn't that work if you call the `loadClassCache` here?
I think "COMMAND" is probably a better name for what is "change".
The issue I noticed is `import org.junit.Test;` being imported here, but this class has been imported from the class. So it should be changed to `import org.junit.Test;`
I believe `scanner_index_id` and `Feature_index_id` are the same, so this is the same as the last update of the PR. The refactoring here will be confusing. If we can remove `renders` from the code base, it should be `renders` and `renders` for consistency
Can this not be removed? I'm going to be fixing some issues. I wonder if there is a better way to do it. I would suggest: - `Model.submit(0, 0, 0)` - `Model.afterClickOn(0, 0, 1, 2)` - `Model.submit(0, 0, 1)` This way we can't call the new method in each call, but then we don't have to call it every time we call the constructor, and you call its method on the next call.
I don't think you should use the `!` here, it's the same as `.gitignore`
I wonder if this change is not needed since `List` and `List<List<String>>` are public.
Why is this test necessary?
I think this should be done for a while now (and a few other places as well).
Same, why do we need an `string` here? If we don't pass `null: false`, we shouldn't be able to add a `null: false`
This wait does not change the behavior. It is only a bug. How about we make it so that we have some more specific wait in the next PR?
Is it expected to be the `empty`?
I'm surprised that `this.struct` is unused? I think it should be `arg`.
I think `preinit` is a better name as `preRead`
Didn't we have an issue to link this?
Could you remove it?
This is a bit confusing to me -- it does not look like it's going to have a reference to it. Why not just `writeResult`?
This won't work. You're only going to be setting `systemctl start cloudsqlproxy` for all routes of items, you can just use `systemctls` for all routes. You don't want the `systemctl` to be the last one.
This should be split across multiple lines.
Won't this throw an error if the image supports supports `javax.ImportWarning`?
How can the value be null?
@JeremyKuhne can you help me understand this change? It was only needed for `ForceTraceWriteLine` and `WriteLine` methods, so it's not used anywhere else.
This is really a bit of a hack... Shouldn't we set the cache size size as a parameter and then set it as a parameter? It seems to be a little out of place.
Do we need sensor sensor?
Should probably make it `disabled` to be consistent with the rest of the files, similar to how other files are used.
I'm not sure this should be a `single` call? What's the use case?
nit: can you make this a global var?
This can use `--network-host-project-id` instead of `--network-host-project-id` since that is the default.
What does this change do?
I think it makes sense to add a `ValidationCategory` property instead of just the `Id`.
It's a bit of a nit, but `map[string]int` would be more efficient since it's a single statement, so it's more clear what we're doing here.
Is this a problem if this isn't working? I'm wondering if the idea behind it is to use the previous behavior. What happens if there is at least one error we don't want to do so?
I'm not sure if this is the right place to do this. I think we should just check `if err == nil` instead if this is true
@adamjstewart Can you explain why this change is needed?
I'm not a fan of using this to be safe. The file should be in the database.
I think this is fine, but it's not needed. The point of this file should be reverted.
can you also update the docstring for `double` in this function.
I don't think we need this change. I think we should just revert the change.
This should be done only once per the `!`
It seems that these are the only case we don't actually need `caseField`. Can we just do a `default:` or similar so we're consistent?
I think we can move this shop to the `zA-workshop` component.
This should be changed to the "failed to" format.
So if we don't need the `INTEGRATIONS` for the `ResponseResponse` we're trying to use here, as in the `if` block above, we're just using `INTEGRATIONS` for each of the other? This would be a reasonable approach if we are making this change.
Doesn't seem right, the path is already `path`
seconds has a different naming convention for randomly selected
`Array` is not used in this PR
@jona86 @jvillalobos to make `MUST` public as well, it doesn't really matter.
Why do we want to check the `Enable`? I think it should be checked against `time.Enable`
I wonder if we should use something like `if "content-type" not in self.headers or not in self.headers`. It may be more clear if we could just include the header name in the boundary that we're expecting. If we don't block all of the boundary we should be able to block in the header.
Can we use the require here?
You could just make `getL_UNLINKED` an `Unreachable` type instead?
This can be replaced by the `gOptionEntry options[] = { GOptionEntry options.get(model_verify, "timeout") }` above.
why not a `try/finally` block?
Why this has moved to `oauth//failure`?
Again, this is a fix for the new fix.
I think we should remove this, we have the same logic for RTL classes.
This should be removed. (and maybe other places below)
In a future PR I like to get the root copy from `LogMessage`. The only thing is that the root field is only used for a single project that's in the `LogMessage`? I don't think it's necessary for this to be the root of the `MessageId` of the `PythonLibrary` that's a `MessageId`, since I don't know for sure the `MessageId` will be used in the root of the project, but it will be good to try to use it.
I'm not sure this change is necessary... It is just `#include <rtps/transport/UDPv4Transport.h>`.
Can't you use the `self.session` variable here instead? It's a private field
Why don't we use the same tag for the final hash?
please use braces for variable declarations
@tnozicka I would call this `userInjectedExpandableRowHeaderColDef` for consistency, but that is a bit odd. But I also see a lot of other uses of `expandableRowHeader` that could use. I think this could be a good way to make it more obvious.
A lot of the other code is doing this. The first line of the cached line should probably be cached, and then the first line of the cached line will have a value that was not a string.
@mattlez, is the `label` label still required if a prohibitedAttrs has the prohibitedAttrs? I'm wondering if it should be "label".
this should have been changed to `if !rcfg.UsingUsingOVM {`
I guess these are the two change in this PR. The same is done in `Start()` and `Start()` methods.
Align the parameters of a method call if they span more than one line.
Wondering if the encryptedInstanceUrl can be null?
why not `ClassOrCmsSignature` ? It's more like `BftExtraDataCodec` which would allow us to have the `bftExtraDataCodec` as the default implementation in the `ClassOrCmsSignature` class.
`Tags` is not used in this file, can we keep it?
I think this is a good idea for us. I think we should have `get_combined_type` and `get_extents` as we do for the `Create`. I'm not sure if it's safe to call this method here.
why is this class not public?
Please remove the extra blank line.
I wonder if this is a good thing to test, and if we are going to use the new `Prefetch` variable here, we should also use the new `PrefetchDatabase` attribute in `NewPrefetch`.
Please remove this empty line
Can this be removed? Seems like a security change in the future and some are not related to the response?
This should be set using `node.lengthOf(results.passes, 0),` for backward compat
this line was added by core, i thought i added HAVE_CONFIG_Hrm should be set by the new one (as well as the existing above).
Is this used?
This is needed to avoid the double-quotes.
I would remove the `vertigo` field and add an explicit `isRemove()` attribute, otherwise that may not be the case.
It seems to me you should use urlstr.lstrip() instead.
This line is unnecessary? We're using a full path of `a.name`.
why is this necessary?
The `-` should be at least 1 minute.
@urso It's nice to have this import at the top of the file (but we never use `org.apache.lucene.store.ByteBuffersIndexOutput`) so the imports are automatically imported at the top. It will be clearer if these imports are not.
This method is a bit of a misnomer, we should pass in a `lockBeforeLock` and `LockID` as a parameter to the `New` in that case.
Is there a reason we are using `JavaParserConstants`?
This is a change in behavior that is being introduced in #2389, but the Gas with the new Gas for the new Gas for now.
I'm not sure what's going on here. We have an issue that it's getting called from another request, and we may want to make sure this won't happen because it would not cause problems when the task doesn't get called. I think the `Collect` should be called as a `Collect`.
This name isn't clear from the name of brokername. I'm not sure if this would be better named named something like broker.
You can simplify this to `return (PlatformDetector.SupportsSharableMutex)` if you're not returning any value
Does this not need a `.toURL()`?
It looks like `encodedError` is now unused now?
Why not just `global.VERDACCIO_API_URL = 'http://localhost/-/verdaccio/'` ?
You might want to call this `Option.builder()`.
This should be `Cartter_CONVENTION` (same as the previous one)
Can we call this by `private getters.getAliasProp()`? I think this could be a bit more specific as `boolean getters.getAliasProp()` but I don't feel strongly
Can you add an option to add this to the `init` below?
Shouldn't these be changed to `results['gt_masks']`?
I'm wondering if updatedInfo should be set on the last update or update needs to be set back to NULL. I think we should set it on the last update when we update.
Shouldn't we check for nil here too (or at least check for empty string)?
I think this `chunk` should be a `map` and the `map[string]` instead of a `chunk` (or a `map[string]`).
@simitt I had a concern here but I'm not sure how it would work with `gofmt -l` which makes it more readable. What is the perf issue you meant to do?
why not use HTML?
Please remove this
const CONNECTION_EVENTS
Can you please revert this file? I'm assuming the usability of this using-import statement is a bug. Just use specific usings.
why are these two string changes necessary?
@deads2k why not just return the result? I don't know which code is correct, but I would expect you to have an error return to see it being returned.
Should this be `NoRegionError()`?
I removed this because this method is not used anymore, so is not required?
This variable is unused. The problem is that the `partition` fields are not renamed to `partitionFields`, the `partition` fields must not be renamed to `partitionFields`. The same for `JsonQueryRunner`.
what's the meaning of this `if`?
Is it necessary to add `padding`?
I'd rather have a `#error` here, it makes more sense to keep this `MongoError` for the `integration`, or add a `#error` value in the `MongoError` and use it in both places.
This should use the same description as for the other `SettingValue`, not `SettingValue`.
Could you please reformat this to use `std::cerr << "----------------------------------"`?
Adding the two parameters: `terms` and `acceptable` are not related.
nit: `replaceResultInFormWithNew` is missing
this is probably the one we wanted? we don't know if this is the case
don't import *
Since we are passing the project_id, can't we just change the `project_number` to just the `Type` and just call `Type`?
I'm not sure this method should be called `defer deadlineTimer` or `X deadlineTimer`.
This seems to be missing something
I think you want to update the test to ensure there are multiple different things. So, this will be an error, right? If I'm reading this, it looks like it should be the `NONBLOCK` flag, not `NONBLOCK`.
I'm not sure if the listener listener will be printed here by the time it was started. I wonder if it would be possible to have all the wlr_touch_point/list_init() and be consistent with the other code that might work.
Line is too long. [82/80]
Can you explain why `PONY_API` is not deprecated and `ip.read_t` is added to the current state?
I think the `Configuration.io` file needs a new function to be part of this package since we'll always use these new volume paths.
Whoops, I thought I made a mistake in the future to avoid these types, since they can't be a `protected`.
Is this dependency intentional?
Can we call this `redirect_to?` or something else?
I believe this can just be `close()`.
this will make sure the changes below are not needed
why did thebox need to be always a pointer?
I'm not sure I like this name. I would suggest using `add_metadata` as a name.
I'm surprised this didn't change, but it wasn't working before because I was looking into it :) Thanks.
why move this here?
is.undefined is no longer used?
example is not used anymore
This test was testing the wrong thing.
I think this is actually correct. You're going to keep UTF8 in place of the product with the current Python.
Do we still need `//`?
I am not 100% sure, but isMemoryCircuitBreakerEnabled a boolean variable already?
We don't need to put the row in the database, so we could just call `team` here. Otherwise you could just have `team: true`
updateParams function as well
I am not sure why we need to change this... the data_encoding is already in original original.
`gitTag` is set in the "init" branch.
Did `mpi.h` include include include `iostream` here?
What's the purpose of this change?
Please remove this line
Not sure this is needed since the test fails without this change?
I think we can remove this line
Is this correct? I see that it is only used once (which is what the default is)
Why remove `RetryTaskV2`?
This import seems unused.
Can you use the `tensor_default` constant here instead?
should be `string`
I would prefer we have the name as a field rather than a field in the constructor
> Also I don't know if we need to do this. If the previous cron job is still running, we should use `$FORSET_cron_runner.lock` instead.
This one isn't used anymore?
why not a `assert`?
`go.opentelemetry.io/api/core` is probably more clear.
What about, `ke_version.yaml`? This will mean we do that.
This can be simplified if you want, you should do a similar change in other PR as well.
This doesn't look correct.
@danrot Do you have any idea why this check is needed?
`deploy_mode` is no longer needed in this file.
I don't think there is a better way.
Why not just delete this?
It looks like these changes are unrelated to your fix, and they're really not part of a bug fix?
This should probably have a ` anticipate` above.
Was there a risk of using `Bool` in here?
Is there a reason to move this to the top of the file?
should we default to 100 now?
Can you add a `map[string]` to the `ctx` and the `key` errors above?
I think there's a lot of harm if we're using the `opts` variable in the if branch.
`get_tab_to_rere()` can move the `tab` call after the `self._tabbed_browser.removeTab()` call
Why return type? This method is called in the loop, so it doesn't need to be returning anything.
What if we added a new method in the top of the file?
I think this would be a good time to change it so we get the error message back out in the user's `GetContent`.
This property is not used anywhere, so why not put it on the `Dictionary` interface?
How does this test fail if the "should" method is not called on an error? Are there any tests that might still fail? If so we should at least be more specific here.
Could this cause any issue? `new DeleteFile[] deletes()` returns null.
It might be nice to have a test that checks that the user has been able to run `Set`, and then we can catch it.
I would rather we check that the message is empty. This would make it easier to not check if there wasn't any script or not.
This should be done as a `LocalWidth()` method.
This change is redundant. All in this test that sets the slice to the logger.
The name `args` is probably misleading. I'd suggest to rename it to `t_args_*`. It's the name we're looking for for this function.
Why the change?
`StatusForbidden` is in the same way that the successful app will be in the same app
no need to use `rankstr`. `rank` is the same as the first parameter in the second line.
I'm confused about this. This code is only used once on `ecsAgent`, and then `ResourceFields` is called after the `ecsAgent`. So, the `ResourceFields` is called in line 298 instead of `NewIOUtil`. So I think this should be a separate PR.
Do we want to use this in `pkg/services/constants.go`?
Can we call this `cancel` to keep the intent consistent?
`@phpstan-param`? Shouldn't it be `string[]`?
Why do you log that error and not not just that error?
I think we can use `tags` (and `limit`) as we do for the `./pants help`, which is how we use this interface for the `dockerfile`.
This is a slightly unusual way of writing the pair, and we should have it in the `ilation.py` file instead of in the `.dilation`.
What's the use case for adding a `setReadonly` method?
This should be in a try block. The C++ C++ C++ are not being changed in C++.
Please, remove this line.
This is incorrect. The `mount ("etc", "etc", "etc", "mount ("etc", "etc", "RKeys")` is the default. You should use `!mount ("etc", "etc", "Input")` and check if it's not a bind mount.
Should not be needed. It is not thread safe.
Same here. Why is this in the `else`, and in the end `raise` the `else` clause?
should be /aws-global
`kill` should be replaced by a dict. We need to consider the `querystring` part of `querystring=dict()` as the second parameter `querystring=dict()` (which is why I had to do with `results_request`).
this was a bug? it does not seem necessary for the code to be removed
Is it necessary to just pass the error as a parameter? Or does that not matter?
Is this a requirement of what the user is trying to do?
I don't think you want to change the description of `IonMobility` to `0.####`, but I wonder if this should be something like `IonMobV0.00`?
I believe this could be just `SchemaedMethodAsyncCallSettings.CancellationToken`
Why is this necessary? I don't think it should be in the `base.secrets` package.
This seems like a wrong upgrade and problematic. We should fix it. If we want a specific upgrade, then we may need to create a new upgrade version for this new upgrade.
We can remove the block block from `BlockCount`
This is not a `flask.flask` package. You can just remove it from the `flask.lock` package.
This seems unrelated?
shouldn't we call `s.idx.BuildIndex(genesisBlk)` here?
I'm not sure this is the right place for this. If there is no valid endpoint, then `yield functools.FormatString` will be always `None`.
Use 2 (not 10) spaces for indenting an expression spanning multiple lines.
Why is this needed?
This is a change in behavior. You can always set this to `nil` on all the `dr_mcontext` objects which are in `dr.mcontext`.
Why is this not a breaking change?
Is there a better way to make it public? I'm wondering if we should have a more specific default for the default (or a required value).
We generally avoid imports. You can use relative import.
@jridgewell I've changed this to `Copyright (C)`.
This will throw NRE if we move `acceptable_exit_codes` to `acceptable_exit_codes`, and put it at the top of the method
I would just do `dataframe.tail().to_markdown()` here.
Is `this.servers.size !== 0` the same as the `@restChat` above?
I'm not sure I like this - if I'm correct it should be an `if`. The same applies to the other similar instances, right?
What's the point of this method, what's a user error and why it's still not a request?
Hmm, can you confirm we have a test for this?
I don't see this change in the API, can it be removed as we are adding stats to the StatisticsServlet?
What does `tail: unrecognized file system...` mean here? I'm wondering what is the difference between `tail` and `image_t`.
why is it changed from `fake-infraid` to `clusterID`?
Better name for `get_node_first_ancestor_of_type` as `attributes` would have been a bit cleaner? IMO we could do `get_node_first_ancestor_of_type` rather than `so`
I don't think this is what you meant @deads2k?
`getons` could just be `kill` and `addons`.
I think it is more natural to use `CreateSharedString` instead of `String` and `CreateSharedString`.
I don't get why this is needed?
Shouldn't this be `#notice` ?
MetricMetric isn't used
Probably not an issue for this PR, but why not just pass the Java Java to dateFormat?
If the enumsspb.WORKFLOW_BACKOFF_TYPE_UNSPECIFIED returns the same error, then we can remove the enumsspb.WORKFLOW_TYPE_CRON_SCHEDULE and enumsspb.sharing_regions_TO_TO_TO_TO_TO_TO_TO_TO
How about using `browser.tizen.Array` instead?
This means that a password will determine the password that exists when the password is in the `sha256` environment variable is set.
This is a bug. The `TelemetryConfigurationDto` is also used by `TelemetryConfiguration`, which could be renamed to `TelemetryConfiguration::APPLICATION_JSON`, and the other `APPLICATION_JSON` is used in the `TelemetryConfiguration` folder.
I have no idea what boost/make_shared is supposed to be. The real convention is that a boost can have both shared and non-const variables, which is why I'd like to understand what is happening here. I think this should be called boost::make_shared instead.
I think we should make this a bit more realistic.
This should be constDelete
We could use `response['ResponseMetadata'] = response['Success!'']`
What does the pain from doing here?
Why remove all the error codes?
Shouldn't this be `JsonRpcUrl? url`?
I think this method name can be called `client_model_slug_model` and `client_model_slug_model` :p
I think the default log can be `debug` if it's not needed.
This doesn't make sense
This function name is a bit confusing. How does it work and why it's not a function?
Is that intentional? I would prefer that we only did this for a single cache if we're not going to be using it.
I'd prefer not to use the test definition here, as in the test suite the value in the test suite are not yet supported by the test. If the test fails in the test and the test fails it would be good to ensure that if the test fails the cluster does not exist and we won't be sure that it doesn't get removed from the test.
This was not a bug, right? (It's a breaking change that should not work correctly, so I'm fine leaving it in)
Remove empty line.
Why is this change required? Are we sure it should always be a valid value?
This is an example of a bug fix. We're just checking the output in `/c` - which we don't actually want to show.
It appears these parameters are used in tests. Is this public?
Should we be using `Email` here as the default? Also maybe a `Kinesis` field is used for the `Email` field so that it isn't a proper type of language
Can't you just change signature to be more specific? Also you don't need `* signature` or `0* signature`
this is not used anywhere?
I wonder if we should just remove the `Query` function altogether?
This is wrong. The `HOST_ARM` define should not be defined, it is not defined.
This would be better if you pass a `ROOTDIR.try-finally` instead of the b.
This include is needed
Is this just a regression?
This isn't the only place in use. This code does not seem correct.
This import should be grouped with the other standard library imports
Shouldn't this be conditional?
"a schemas only existing in service center..."
This change doesn't seem related to this pr ... please revert
Should the default value be `Timeout` to indicate that the `configs` list is expected to be present?
I think you can use `os.path` instead of `\r\n` here
I am pretty sure this will work properly for now. I think `tests` should be prefixed with the tests.
Is it possible to use `self` here?
This is a private method, I would recommend making it as a global var like `api.type(path)`
I think it will cause some issues if the paths paths are no longer paths.
Do we really need to add all that to `gaPropertyID` as separate parameters?
I think you need to do this.status.uploads = temporary.upload
I think you can skip this. You're using the "damcrest" function in there.
DbCapacity is not a DbCapacity, we are not using a DbCapacity
This test fails because there is a reason we were using the hash. It was just about to update the test in your test.
Could you please add a little more specific about what this check is doing? It will always have the same `sudo` as the last line of the file `/parent/Server/`
Is it used to generate these attributes?
This should be `ShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadowShadow`
These are only used in the header files, so can be removed.
Is that needed?
I wonder if we should just call it `error` to make it clear that this is a `error` var?
Is this supposed to be here? This if statement is not needed.
We should be able to simply remove the endpoint_endpoint flag.
This doesn't seem right. You are calling `fill(n, optional, "1")` on each element
This field can be null.
this is still necessary because it would not try to it 'knows' it wouldn't work
Do you need to add a new variant like the other classes?
Might not be needed to do a `.catch()` block
We should probably have some test coverage about this, too, right? :)
why not error?
A test for this is missing the `get_answer` override.
The `repo` function is used only when `r` is being used. We can remove it now because it is always used by `copyCommand`.
Doesn't this break compatibility for all the other types of elements?
This should be a single import.
Layout/MultilineMethodCallBraceLayout: Closing hash brace must be on the line after the last hash element when opening brace is on a separate line from the first hash element.
Please, add the usual version here.
Shouldn't we check the size in `in`?
> "buffer->sqlcode" [](start = 104, length = 10) why not just return the bool?
I think we should add a default value to `AccountMaxVersionPrefix`, then we don't need this value anymore.
Should we move this to the `apinamespace` interface too ?
The exception message is now useless.
Could we just add a `engine.OnceCoroutine() {` method instead of creating an underscore here?
nit: you can use `ryo=false` to get the name of the variable.
@franckc forgot that `MultiDomainHost` was unused. I'm wondering if `MultiDomainHost` would be removed.
Maybe we could make this a `Buffer`?
Should not it be `_variable_message`?
Ah, no strong opinion on this. If this was the case, we should probably move this to the `blacklisted-name` file and just use it in the test. It's important that this fixture is only used once (or at least in the case where in tests we have a few tests) and it would be good to make sure this is a separate PR. It would also be nice to be able to fix this as well.
Why does the return 1 unnecessary?
I'm curious how this works with d_r_avx512_code_in_use?
I think the `v1` here is wrong
What's the reason for this?
@jeherve I made this change as part of this PR because I don't see where it's used.
This seems like a very good change to me. Why not just use `t. top` in `user.go`?
Since we now keep the const at to reduce change from the default value for readability this is going to make the decision of the change and we're not going to be able to make a change in behavior, just a thought.
This test is probably because some other tests use it.
I'm not sure about this - the name is misleading. Maybe `chromeOptions` ? If it's just for clarity, I don't think it is needed to be changed by the version in the next PR.
I would suggest to use `if isinstance(composite_root_resources) or None`, as that is the default value.
Please add `_` to the interface to make it private.
The test here really does not match. It should be on `args.Output()`
What is the rationale behind this change? I don't see the `v2D_v2` function used anywhere else. Maybe we can remove it?
You should rename this interface to `BooleanConstants`.
I don't think we need to use a logger here, this is only needed at build time.
We don't need `TryTryForms` in this file as it is only used in `X-changechange` and not in `X-change`
This is a circular import.
why not use Payment ?
Just `useHasScrolledEffect` and `DashboardEffect` should not be needed since they are already in the constructor
This is an interesting thing to do. If it's just one of the most important providers, then it would be good to add a `sign_token` field to the stack and then just call `sign_auth`. This seems like it could be a little confusing to not have the token value passed in.
This should be a constant
I don't see the point of this change. You can probably just pass `.Get("/foo",", repo.GetArchive)`?
You don't need to add Automatic attributes here, they're just a power of attributes
I'd rather call this `Add`, it should be safe to call `attribute`.
Is this change intentional? If not, we shouldn't be changing the 'same' behavior here because it is not really the same path at all.
I think you need to add this file to `pkg/api/carAtta/utils/pkg/constants.py` for some reason. Also, you need to add this file too.
Should the names use `Async` instead of `useDefaultSources`?
I guess these two functions could just be functioned by one?
Is this a change we can fix?
This change looks unrelated, but it seems like we could leave it off as-is. But now we're going to copy it in, and we're not using `copy` in every place.
I don't think we should name this field something else, but this field seems more clear.
I wonder if we should have another `balance.Int64()` method in the error message and check the error. What we do is is that there is no `balance` object, and then use that function, instead of creating a new error condition.
nit: the `-S` in this file are not necessary at all.
This is just something I don't like, we just need `valueOf`.
This should be done in the top level, not theLayer argument.
This is an interesting bug, and in `TestAccAWSLambda.tasks` it is not an issue in the service API
I don't think it's a good idea to do this at all. It's a tricky bug, and it's not a good solution. This makes no sense, since I don't know what it's used for. Maybe we can add an issue on the error. We can get rid of this, but it feels like it will always be a little bit silly, though.
We don't want any assert here, since `aria-valuemax` is `undefined`?
This should be done inside `validateNoConflictingAppends`.
Group with last group of imports.
Hey @bharatviswa504 for the issue you said: `--IL- Existing --IL- Existing --IL- Existing- Existing-offset` => `--IL- Existing-offset`. It is not a good idea to do this. It looks like I'm going to do some refactoring in a different PR. I would like a `getcircle()` method. `getcircle()` in a different way. Having a `IStart` in a dedicated way that will work in the future, since the `AppSecEnabled` can be initialized as a dependency and it is not
Why do we have an `AtomicLocalFile` function here, when `__init__` needs `self._AtomicLocalFile`?
same here, we can remove the `:`
shouldn't it be the same as in pods and then the value in pods to be the value from the ternary?
Just noticed that we didn't have to specify this for another branch of course, but do we want to maintain a config file for this feature?
This is a very minor cleanup.
Could you make it explicit that the date is on the same line
The response is called after the client has been changed to a `utilHandler`
This may cause a problem when the object is not a connection, but the `mPluginLoader` is passed to it's constructor. Is `mPluginLoader` being used in some cases?
Remove empty line.
If we remove this line, this will break the existing code. This was causing a problem, but I think it would be better to remove the lines that were removed.
Should we make this a `BuildGraph` parameter?
Please annotate the method `toString()`
This class does not contain any exception, and should not be added as a test class
This import should not be necessary, as it is a nested module, so it can be moved outside the `from` block and `from .drbg.hmac_drbg import DRBG`
Not sure what this was supposed to do.
Shouldn't we keep `appType` here as well?
Not sure how this change should be here, but in general, I think this is still a bug.
I'm not familiar with the fact that this is a no-op - but I think we'll have to update `~brain` to `tslslarchive` to make it clear this is a single thread-safe function to get the dening name.
Why the extra newline? It's the most permissive change.
This will be deleted if we still need to add the `mongoErrorContextSymbol`
This is an odd change. The mocking is the one that is a final function in a previous version.
I am wondering if we should say that the value should be renamed to the caller and then the value can still be used (e.g. the id in a higher latency index for this).
This change makes sense because `find_by` will always be empty if `find_by` returns "". But it looks like this will cause multiple problems. But I'm not sure if I'm missing something, just wondering.
nit: newline
This is unrelated to other changes, but the changes are made to this PR.
why change the default value here?
Does this really work for non-zero value types?
Since we've got a circular reference to `try/finally` in `return co()` methods, we'll need to change the error returned by yield.create() below.
@sparrowDom This was the bug as the code was not passing the ExecutionDataGas value from 0 and not just the try-catch. I think it would be good to have a better idea to put it in the try-catch block.
I'm not sure this is the right way. It's going to be `@Deprecated` if that isn't a `legacy` object
This seems like it will be useful when a user doesn't know about the `NetNet` resource.
There are too many spaces in the square brackets. Please revert this file.
why is the spending config? is there a specific reason why this won't be a valid config? if we want to start using the configuration from spending, we won't be able to pass it to GA and make sure the config doesn't have any other default, we just need to do something else?
I don't think it's safe to do this because we are only adding a single function with a single function. I'm not sure it's worth it if this is the only place this is done.
This test is failing on the actual test.
This function name is not quite right?
We could add an `validateProxyUser` property to validate the group, to be consistent with other parameters like `validateProxyUser`.
It's not really necessary if you moved these down there.
@deads2k do you know why this change is necessary ?
Please remove these unless we keep the old style of code
I would keep it as `x -> x`.
This should probably be a private static final constant, otherwise it could be used as the default in the `add_event` field. (It would be nice if you could also add the default value to the `add_event` field instead.)
I'd move this to a separate function, but it doesn't have any effect. We could also just do `if len(password) == 0`
If we remove this line, we won't be able to remove this file from the PR.
Is this a good use-case? Seems like it would be nice to have this in the `start_va_arg()` function.
can we call this `envconfig`?
I'd remove this blank line and the one the next `)` above
I would make this a `else`
I believe the original code was not correct here.
The default `token` is not defined in this case. This should be changed to `token_Parameter`
Should the user explicitly set the new `show`? I think that they are not related to the new `NotAuthorizedError` check
What's the purpose of this? I don't see it being used anywhere, so maybe it's just a single tuple.
This test is failing on the test suite (it wasn't there before) and the test passes to the test case (in that case it was not there) but we don't have to test the `test` case anymore (which I don't see a good reason to change it).
I know you didn't write to the Copyright, but this line isn't part of your pull request.
Why do you need this? Doesn't seem like we need it. Also this should probably be `pylint`.
Should we make the same changes for the other PR as well?
Do we want this error at all, or should we just ignore the error in `env.go`?
I think we should leave these old lines as they are not related to the PR but I think it is better to keep it in one PR.
Removed isn't the right type for the tx txHash, we don't know that it's a thread safe to do.
We can change the name of the config, e.g `githubURLFlag         = "url"`. Also, do we really want to change the name in github.util.github and link to github.util.repoURLFlag?
Metrics/LineLength: Line is too long. [97/80]
I am not sure what you mean. You mean `import` ?
I don't know about the original implementation, but we could just do `aSelection.execute(action)`
Does it matter that the new values are unique?
please put this in the wrong order
this doesn't look right to me? or is it only going to set the value?
Why not set this to 60?
Hmmm. What about `abspath()`? This way it can be hardcoded as files.
The default here should be `Func[bool]`.
This should be `var CircularJSON =ERS(dirs)` (line 148).
I don't think these changes should be here. In general we should be able to use ServiceDefinition to preserve any callers.
`open file bucket: %v` is the same as `open file bucket`, right?
Is this still part of Solr?
You should make sure your new package is in `liblib`, not in `lib`.
This is a very small change, but I think it's better if you use the value of `slots.stream()` and avoid the value of `slots.stream()`.
This should be added for the `BUCKET_VIOLATION` list as well.
I think we need to use a better name to make the `http` package private since this is a common one.
Shouldn't it be `MAX_UPDATES_PER_HOUR 1`?
This variable can be removed because there is noape being passed as argument to the function. The `Reshape` method can also be used by the call to `needs_reshape_` below.
RANDOM_ORDERING is enough since the random random is already being checked here. It should be fine as well
Why is a generic tuple here?
I'd prefer to have the name `string` as the name here.
Wondering if a better way to do this would be to check whether the balance is in the first place.
Can't `@Nullable` return `false` if this fails?
Do we want to warn about that? I think it might make sense to just use `ENGINE-16002 Exception while closing command context: ENGINE-03110 Required admin authenticated group or user` or `ENGINE-16002 Exception` to make sure the exception was still being logged. I think it is better to use `ENGINE-03029 Required admin authenticated group or user` instead of `ENGINE-16002 Exception`.
Is this import still necessary?
This is the only change I would prefer to pass the `config.func` to a method and pass that in in a new param.
So I'm curious why you changed the if branch here (I guess in the case of previous review) ?
This function is a bit confusing to the code from init(). This should be called in init()
This was changed to make it easier to debug. I would keep `-v3` as a dependency of `SNS-resource` as the only use in this file.
I would have made these flag names more descriptive. It would be nice to have "raw" for the flag names to ensure that they are the same
What is the reason for this change?
Same here. We can use `llnl.util.path` for the default config file in Python 3.
why did you change the url here?
nit: this should be `self.floor_thr == 0` rather than `self.floor_thr)[0]`?
These are no longer used.
Need some unit tests for this change, too.
In general, I don't know how the above code works; we're not going to have `MemoryUnlimited`, which is now handled by `MemoryAndSwap`, right?
I think it's better to use `!= props.maxNumberOfFiles !== props.totalFileCount` instead.
It is weird to store the var and only if it is `*`. That would be more consistent with the other `*` and `epochNum` flags in this case.
Is this necessary?
Are these changes required?
The ConnectID param is not set in this file (I think it should be replaced with a connectID).
I assume you can't just remove the `@var` here?
This needs deprecate.
I think we can move the `name libkb.NormalizedUsername` check out of this now, since it's not required after the fix.
Is this line necessary?
I'm wondering the name here makes sense.
What if `tail()` returns a static class field?
This is another place where you need to update the tests
Why is this line removed?
Could you remove the trailing space here?
This should be a `api_class(version=api_version).get()` instead
why not use `height` instead of `id`
This is a change here.
Is there a reason this should be `>0`?
I think `text_font_size` should be a boolean, not an integer.
Where is `m_userDefinedId` used?
I think we can use the `<amp-analytics>` rather than the `<amp-analytics>` here
I'm not sure I like this. It is used anywhere else so can we remove it?
Probably should crash if bad format string
I think this was a bug, since some of the tests pass because the tests pass in `ITM_EQUAL` and `ITM_EQUAL ` is different anyway, so it wouldn't need to be TRUE by default. (same question regarding the other changes in this PR)
I would use `var/pantsd/GetGet(URL::Objects.Get(signed))` here to avoid the DTO part of the API.
Nit: Could '2' be passed as a constant somewhere?
What exactly is the error condition about?
This is a breaking change and can break the code with `return compatsembly;`
I don't think this is the best idea. If the function is only relevant in Python3, this function is now called from 3.11.
I think this should be `&&`
`bool` is `string|false`, right?
I wonder if `employees` is a good idea to test the `""` value. Should we test the default value instead of the value as we're testing for that?
why is the validate method removed?
I don't think there's any point in keeping the `NO CEPT` for it. Another advantage is that `POS` might not be used here.
This is an optimization, we're just not setting any status to `tx`. In this scenario it should just be ` Reader.db.Begin(ctx, "tx", err)` but we don't want to keep all that's actually doing.
Is this related to the PR?
This check is redundant, since the function returns void
Should we add a docstring that Python is deprecated?
I think this `if` block could be removed as it is no longer needed if the `dumpedBody` is not nil.
This should be handled differently.
This could be `antrea-agent:0.0` so we are not sure what to do about these things.
Why are these being removed?
`is SpanContext` doesn't have null, it is redundant
The `Trace` is never used, it can just be removed.
I think we need a more general naming, `by-partition` can be renamed `partition`. The same for `partition` is used in `by-partition`.
This change looks unrelated...
Why are soc and validator required here?
This is wrong, `upload_PASSWORD_REQUIRED` is supposed to be the name of the username, and it was a bit confusing. Maybe `upload_ALREADY_REGISTERED` is better.
Why is this long? ` CommitTree(longNumber)` is the same as `blockNumber`.
This is an API change that fixes the impact of the changes in #5767. I have used the interface `ConnectionAborted` in other PRs to fix it, but I'm not sure that I need to change it.
Please change to a `// import for rc`
This is a breaking change - it's a test for a couple of things.
I'm wondering if it makes sense to have a `STANDARD` parameter in the `check_storage_class_header` method that checks for the `storage_class_header` and the `is_storage_class` object? Or should we do this only if we're using a `no_storage_class`? I'm surprised that it is an alias of `self._storage_class_header=False` and then in that case, we have to check that it is a `dict()`?
Please also update the constants in `org.mule.runtime.module.extension.internal.StringUtils#addPath`
I think the original region is specified by default?
I think you can just use a `Rename#sanitize` instead of using the same name for the same name as before
The function `ApplicationKind` returns a string, so I think the function name should be `Tuple[bool]`. We can probably move this logic there. Also, I think the function `ApplicationKind` is not actually a function that has a default `dict` so it has a default.
can we also add these docs to the Signed and mark as deprecated?
How about using `EC.element_to_be_unclickable` directly to make sure we don't have to `click` it is a number of elements?
The other two calls can be replaced by the actual return value if the `[]byte` is not set.
why do we need this?
Metrics/BlockLength: Block has too many lines. [26/25]
I think we should use `m.Get("/avatar", user.SettingsPost)` instead, but this is the wrong way to fix it.
The file is empty
The app container doesn't match the server, so this shouldn't be necessary.
I wonder if we should not make this an `args`. It is not a global option.
You'll need to undo the changes in this file too. It is a bit scary! (and also an output file in the UI)
Why are you adding this as a public constructor?
You're missing a dep on `configPath`
I think you can use `@pal.enabled` here
Why remove these?
this is the "if we have shutdown shutdown" check, we don't do this here right? If we don't do it, let's just remove it.
I think the second line should be removed
I think we need to remove this
Could be slightly improved to log the logging level.
I don't see any new parameters being changed anywhere.
This looks like it is an optimization, is that the problem is that if the client is trying to create an amp-form, that one is not going to be able to create an amp-form with a single server?
Does the test pass when `env.ServeHTTP` returns an error?
The `t` is not expected to be passed to `Recv`.
Could you use `setup.ctx.Background()` to get the behavior for `setup.simplees`?
I think the `SurfaceKHR` is the most appropriate way to do it. This code can be used as a `ReportUndestroyedObjects`. @pjcozzi Would anyone make a follow up or something to test this?
nitpick: Do you need to update the `MongoDriverError` param from `MongoLayoutError` to `PackageLayoutError`?
I know this is not really part of the API, but could you move it to be in another PR?
I think `ISpanDecorator` is more correct here.
@adamjstewart And this file is in `configurable`, which is wrong with the `configurable` test.
Please add the `linked-` option to these new tables.
This isn't needed since we already have the `options[:page_ranges]` in the `page_ranges.rb` file.
This is the same as #20777
This can be simplified to `pc++ = 0K_stolen + 1` or `pc++ = 0K_stolen + 1` for the same thing.
> Assert.Single [](start = 8, length = 12) How can this work? Assert?.EventSource = Assert.EventSource = Assert.nil?.EventSource
should these be public?
I think this can be simplified to `GetMetricFunction` as well - this will not work for the other two classes as well.
We need a more direct way to do this, to make sure `wait_for_port_open` doesn't have a `validate_path` attribute for `dynamodb` and `endpoint_url` can handle different exceptions.
I don't know if we want this to be an `N2x2` check.
Remove this empty line.
This line and the next one. This line is also used by the `baseFee - feeDelta` which does not contain the `max` parameter.
This should use the constant here.
please fix the unit tests
This looks like a bug
It's not clear why this should be `parseResponse`
These should be removed. No need for separate change.
`this.props.containsKey` can be removed now, right?
maybe we need to remove those information, otherwise 1e-3 is not present by default
why is this removed?
Would be better to use a `@Deprecated` and use it here. The `gobar` annotation is probably a bit more useful here.
Can we keep this private field in BeamDb?
This line seems unnecessary, if it is only used once. Perhaps this line should be moved into self.num_classes instead?
This is a good thing - why not just do `ByteSizeSize` in the function and return a `dict()` and remove the need for a `ByteSize`?
@buchgr should this be `options.ThreadCount = 4`?
Should we be using `blob => blob.type?.length > 0` here instead?
Line is too long. [87/80]
`Properties delete delete the physical device does not support 1.1, device in the `api`
This seems like a bit of an unnecessary job_failed. I suggest using `job_failed_offset` for this variable (to be consistent with how we use it in tests).
We'll always update it when it is 0, right? If it is 0, the progress bar will always update it when it is 0? Or am I just missing something?
Please add this to `cscm` and the other files, to ensure we don't have this in the `module-rng-node`.
Maybe we don't log something here, as it is already logged in line 370.
Please don't use FY16 option.
I think the indentation should be the first line of the right operator in this file as well?
don't you need the `preview::spmd` variable?
This is a pretty small change, let's remove it.
`Sum` should be removed.
This needs to be `@param` or `@aintaint`
Maybe we only need to have a single function if its required?
Should this assert just be `assertEqual`?
I think we should be checking for subprocess here, if there is no shadow shadow for `universal_newlines`
Can you add a summary to explain why this change is needed? The function `GetActiveClusterName` is always called in the same file `Clusters`.
Why are the unit test failing here, rather than passing `@pytest` to it?
I don't think we actually use the default items, we can just use the `ToList` variable.
Trailing whitespace detected.
This doesn't seem necessary
Why is this changed? The client will not be created in any test. I'm not sure if we should change it.
I don't understand the point of this if we have a config option. If the headers are not configured it will be executed and we are adding an additional header to the request, so it would be good to have it in a separate change. This way if the headers are disabled, we will try to reprocess or not.
I would suggest that you only set refresh when `refreshInterval == refreshInterval`.
I think this was a typo
This needs to be a `anta_NAB`.
Is it worth adding a `*` to this format?
Is there a reason for adding this method at the end of `collectLinkLibraries` level? It seems like the only place we're using the `for` loop is to get this action, if the function doesn't exist and we're trying to move it into a different scope.
This should default to "true" instead of being passed to the config
this method is a bit weird. why not do it directly in the constructor?
`info` and `finest` are missing.
You don't need this method.
I think we should be able to keep the name of the method here.
This should be `2`. You may want to use `TRAVIS_GO_VERSION` in the followup PR.
@bryevdv I think I'd like to remove the `else` and just return `nil` if the `RawAddress` is not nil.
This change is not required since `pendingRequest.configuration.remoteHost` is always defined above.
This file needs to be updated as well
Why are you removing these? I see that we have two different ways to include a dependency in the list.
Let's use `*json.*JSONObject.widgets`, as well.
Are these two configs used for the same life life or they they're used in the same way? If so maybe make them `WidgetID.GAUNTLET_MAP` to return a value?
Please remove the space between `'` and `'`
Nit: I don't think that this is going to work. ` RegisterGlobalOption` needs to be passed through the `else` section as it's not going to make any difference.
I guess, this was a bug in `isProtected`?
`click` should probably be a `element_to_be_unclickable` (same for the element).
Why ` GoGapicContext` can be `Object`? The class should be `authentication` or `authenticationauthentication` but we should not be able to use it for everyone.
Use the new Ruby 1.9 hash syntax.
I really do no harm here. Maybe it needs to be `ijs_IJs`?
Do we really need a new test?
I'm not sure it makes the difference. We'll want to add a `Destroy` property to `target`.
I'm curious: what happens when the user-loyalty is set to true?
I think it would be a good idea to make the actual path to the script (e.g. `C:\\Program Files`)? Then you could check for the actual path, and just do it for `environment_script`
I think this is the right place for this. In fact, I don't think we actually want this. There's a slight preference in terms of throwing an exception here since we're already catching the exception here and that `ConfigureAwait(false)`. We can probably just remove this try/catch altogether.
I would have expected that these are internal, but the code is still used in some other options.
I think it's better to use a simple `var` for the test case.
The change should be unqualifiedName
Why do we need to pass the full log file to the validation? I think we're going to pass the full log file through. I am not sure we should add this as a validation on line 408
`The number of elements in the Queue` -> `The number of elements in the element`.
The `enableOpenTelemetryTracing` value needs to be increased. This would then be the case where `enableOpenTelemetryTracer` is called.
The previous version is correct. The previous version is just `wal`.
MakeEnvironmentURL is a little confusing, can we pass the ID as the environment instead of the format?
I think you could use `String.format` instead of `Date` to get rid of all the extra code paths.
This is going to work for all versions of the Beam codebase. The `clazz` package can also be moved into the `FlowFlow` package. This way if we can add a new app/api/server/server/server/server/server.go file, we can add an existing app/api/server.go struct to the new app/server/server/register/application.go file.
Would `SW` make sense here to use `SW<Recv>, the `NoError` instead of `Recv`?
I don't see a reason for this change. The rest LGTM
Why is this removed?
drop the fact that it is Aler?
Shouldn't these have to be `expect(page).to have_content(just_finished_trail.name)`?
This was not a typo.
The name `WriteMetastoreCatalog` is now unused.
nit: you can put this const in a conditional above, similar to the above one.
I think we should be using the `next` method in `AdminRunner.FromAssembly`.
Why do these have to change? The model 2.0 model 1 is no longer the train version of the train version, so if `opts->has_string("no_model1_train")` does that matter, it is always true.
Same here, `Array` or `Windows` for consistency.
this should be in a separate package
How come these changed from the implementation?
Do you plan to use "true" instead to set this value?
What's the use case here?
This will not work. Use the raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw
This should really throw a new IllegalArgumentException if `registry` is null. We want it in a lot of places, but we should either throw a new IllegalArgumentException for that.
Not sure why this is changing. I'm a little bit worried we've been using it for now.
can we be consistent about the naming?
This will be imported from the same module in `__init__` and used in `__init__.py`. Do you have to add it to this PR?
This should be `web_debug`
We'll need to rename this label as it's part of the label label because it's not a labels label. We can change all the labels and a labels labels labels labels
This was a bug. It was missing before.
I would prefer a `* 2` constant, but I'm fine with the fact that `P_char * 1` is not a great idea.
`vidIndex` might not be defined here because of an `schema` at the end of the string. Maybe `vidIndex` should just be called on the `type != SupportedType` and not `type` or `type != SupportedType::TIMESTAMP`? I know it is a string but it's not a big deal
I think `hasBytes` needs to be checked in `EncodeToString`.
Why not use `itlers = "clangsa"`?
@bparees I would prefer `fee := disabled < 21000 {` as we already have the max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max max
@tnozicka this is the only change needed for this PR.
I am a bit concerned about this - the error could be "Access denied is malformed", but since you've removed it, it's not really a part of your change. I'm not entirely sure what the error is about when adding more info.
The wlr version is just a single function, so it's a little confusing.
I am not sure why this import is needed. I think you can import `sql` or `multi_allenalas` and `sql` is the only one that's needed.
can we use `assert cfg.nms.get('type', 'nms', '4'):` here?
I think we still need this `reject` call since the function above is called only on the `ok` level.
Should we make a `validation.IsPost` call here to ensure that we are not not sure we need to do a value for every request?
What is the difference between the mode and the hash?
This is the way we can do this in a future PR. This will allow us to make it a part of the `5` var. The reason is that we don't want to have a higher level attribute that is used when the menu is visible and we could have a very small number of changes, and we want to do that in a future PR, I'm not sure what the right thing to do is here is to have a very good example.
This is the correct way to get the user `onPasscode`, right?
This is a bit confusing to me -- what's the default behavior if nothing is used with `defaultPostWriteInterval`?
Please remove the "if" part
this is not the error code, we want this to go back
I would call this "Msg_NEW_MESSAGE" because it's a variable that is not a user.
This should be removed.
What's the difference between the `orient` and the `AttributeError` here? I think we don't need this, since it only knows about the `L`-parameter-vs-defaulting-filter.
Should be `DisableGit`
This is a logic change. It should be changed to a private method. You can change `@user.org`
Is this really an issue ?
should we use PNSE if `docker` is empty?
I'd suggest adding the second parameter to the constructor, to ensure that the caller can set theInProgress.
why is the function being removed
The `if` statement seems not necessary? `getIdentifier` does not seem to always exist?
You could also use AbsolutePath here.
This isn't used anywhere.
@jmhooper During our design on how to move the data into a function and just call the new function directly
Just wondering, are these two partial changes needed for the `dyn` type?
`oldOpenTelemetryBuilder` is a name name and is not really generic. A `!` would be more readable. A `IDisposable` for this would be more clear.
I think this should default to True.
I think we can leave it as `pandas` by default here, since we're in the old pickle module. That's what we really want to do.
This is not the only place where we use `replace` here - we should use a default `str_replace` to replace its value.
Should the argument type be renamed to `ast_error_frame`? The parameter parameter name is confusing for me.
Would you mind making `close` the same?
You could just use `Class Cms\Class`.
I'm sure this is the correct way to do this. $config will only be called on config.
The SPI should be just the number of bytes to determine the error. Also, I would suggest you change the error in `SPI0_MOSI_PIN` to `0_1_MInstrument` instead, and change it to `0` here.
Wouldn't it make sense to add an `LinkState` class to the base class as well?
Why do you change this? What's the point of having a `traceparentHeader` and a `Traceparent` attribute?
I think the path should be `err` and not `Source` (i.e. `files`), no need to `err`.
@harvard/core/core/core/harvard_iq/dataverse.go - this import is now unused
Is `OUtbounds` still needed?
Is there a reason why you didn't delete this?
this is a duplicate of line 265
Same, use `save` as the input.
sizeof is a good idea. The other way to do it is to make sure it is not a good idea. It could be sizeof, if it's a long.
I think this should be `sourceGroups` or `sourceGroups` to match what we use in other places?
What do you think about using a bit more meaningful name? Do you have a implication for that?
This should be a map.
We could use a variable here (ie: `var _constants = "HEAD")`)
Please add a license header
I would prefer to see this as a separate commit, but I don't know if this is a great way of writing it for the future.
It's not clear to me what this means, why not just call it `TiSession`?
I think it might be a good idea to test whether a user could run with the same name. Maybe something like `save_true`? I would also like a `create_user` or something.
Does this also look like a bug in the test?
is it not enough to add this description to `getNumDocs` ?
Is there a reason a constant in the project file? I would like to avoid it being set up by the user.
Should probably use the same interface for other platforms, e.g. `./lib/`
Nitpick: Can we put the below call `braille.handler.handleCaretMove` below, so that we get rid of all the `` calls in both places?
Should we update the error message as well? `tag_error_response` is an error.
Why is this needed? It looks like this isn't in the wrong place and is used in this file.
We should probably set this to 1.6+ in the future.
Can we throw an exception if the Exception is not an error?
We should probably have a helper for these as well to make sure we don't have other interpreters in the future?
we still use info elsewhere, we should use "info"
Should this be 1.4.0 or is 1.4.0 initialized?
`import { Component, Fragment } from 'lodash'` is more readable than `import { Component, Fragment } from 'etc';`
No intention to convert this to use `flake8` in a future PR?
I think we can move this to the `describe` block, we can just do it in the `user`. This is what the profile is about.
This doesn't work. You should add a `clean_copy` that is already checked by the default, and not in other tests.
We should probably move these to a common function in `testCachedBatch` so they don't have to change in the future. This is just a test I don't see a reason for it
nitpick: I don't think this is right: `showSpeechViewerAtStartup` is not necessarily a `list`
Is `SegmentId $segmentId` used anywhere?
The `--export-fixes` flag will not be used.
I don't quite get the point of this change -- is this an old bug?
how about this instead `if options[:port] = port whether port` is an object, and then we won't need to pass it in as a `port if port`
I think this should be a method on `Util.determineFileType`. We should also be able to just return `Util.determineFileType(file, file.getName());`
I think this needs `or undler` to work, since the cache is always present
Why not just do the same thing as in the other classes?
This should be `<divdiv>*`.
Why is this testing the right thing?
If we want to use a long-time value to use 5 to make it clear what is going on and what it is.
what's the difference between `r.HasHas` and `r.HeaderHeader`?
Can you revert this change? There's a separate PR, which was not working on your PR.
Would you please explain why we wouldn't want to use a `null`? Also this would be a bug.
I assume that when the `Assert.True(true)` is true, there is no assert in `HostHeader`.
should be the other way around, maybe we can add a new constant in the code?
This is a no-op, right?
This change makes no sense. You can change this in the future to make the change in the future more clear.
Why not just use `super('position')`, as it is part of the class?
Could we make this `slots`?
I think we still want to have this in a separate PR.
Is there a reason this isn't `ReBindableHolder`?
why not just pass the pool pool directly?
This seems to be unrelated?
This is not a part of your fix, please remove it,
Is it possible to have the filter on the hash? Or should it go to the hash instead of calling .filter() directly?
This may be a little clearer as-is. How about something like `dynamo_exited_stop_exited = true`? I would recommend renaming `dynamo_stop_exited_stop` to something like "dynamo_stop_exited", or something.
This is now done as a SetTlsCACertificate and its refcounts are used in other ways. It seems to me we are not using it in other ways. I would just remove it as well
I wonder if it would be nice to keep these two lines (and in line with `.timestamp(today + 2) * 1000, ...`). It would be cleaner that way, if these lines are not related to the rest of the PR
This is the main use of the function. I am not sure if that's a good idea to use the new function for everyone...
The `@classmethod` method also seems to be unused
this is the value in the output of the `boolean` function (just like it does), should it be moved to an `if`?
This change seems unrelated to the rest of the PR.
Since this is a property, the "FLAG", the current scope is not the current scope.
This one change does not change anything, but I don't have a strong opinion, though.
I think these two lines are redundant
Can we add a TODO to remove this?
I'm not quite sure how this one is expecting. If so why the one in the first place is the second one not the one?
I'm not sure if we should use this method here, but it might be good to have it either there or in the tests.
Why was this error removed?
This is not a good pattern IMO. There's no real need for it when you make it to use the same interface.
Why `use_depthwise` isn't needed?
is it a problem with the `strstr()` call?
if you're not using `StoreInbox* storeInbox` you should just use `if(storeInbox)`. The current implementation will always be non-null. You could just remove the `if(storeInbox)`.
This seems like a good place for the `BIP39`
`and_return` would mean to use `sys.stdout` instead.
I'm confused by this... I don't have a strong reason for this. We should have a `<%- if-product_as_name %>`.
This method was only used for debugging?
I think this is the only place where the key is set, should that be renamed?
is this a leftover?
We should keep the button button yet, right? We can keep it as is for now.
Does this need to check against `include_r_set_size_zmm_register(inst)`, or do we need to handle the case in the past?
Is MAX_RETRY_LEVEL the value? Why not `isinstance`?
The name `SessionStats` is misleading to me as it can be `KeyError`.
I think the docstring should be updated
Please don't expose whitespace in the original line. The new line should be changed to `<>` if it's not necessary. The new line only applies to `<>`s
We should probably change this to `<see cref="Task"/>/>.`
This should be removed
This should be readonly as there is no need for a node as a node is not a head
I'm not sure we need to make this change. Can we just get rid of the default constructor?
nit: ` Descriptors3D` should be before `ADcmp` below
I see that all the places this `client_` is used are using, so I can remove it
I would prefer to see an explicit sub-trivial comparison comparison.
I think we need to keep this as a hidden parameter.
why changing the parameter name?
I think this is also an actual bug fix?
This is the test.Test3.A value.
Thanks @wagner this was the only place this is used. Can you elaborate why we have both of these changes in our tests?
I'd recommend renaming the `@proposals_data` to something more descriptive like `get_source_data` or something like that
@fowczarek Can you confirm if this change is needed? I'm not seeing any exception with the original code that uses `format` for `node`
Do we want `default:` to be consistent with other types? I guess we don't want that.
"used_version" is the name of this function (it's an API break)
Please add the same information as in the GET_CAST_SINKS method
why is this change necessary?
This should be changed to `if sys.version > "version"`
Since you're using a string to parse, you might want to make it configurable, or make this name more descriptive.
This should not be the best effort
this is the same as the line above, should be after the opening bracket
@jeherve Seems like this should be `exec[app]`
This makes the test fail because it's not a "no" of the service
can you explain what's the meaning of this column?
Remove this file.
Maybe this should be done in `setUp`?
Not for this PR, but wouldn't it be better to use a single quote here? That's what I meant by doing something like `class::GetDefaultDataUi(name: 'n' );`
Maybe `_get_active_counter` or `_toString_counter`?
This needs to be moved to where it was was.
Can you add a TODO here to fix this so that we have an option that would be able to use this value?
Does this not work when you need the manager?
Please remove the `split Size` prefix from the `split Size` method, otherwise they will be called in `split Size` class.
This is just to make sure we don't want to get Python 2 when we try to use Python 3 in Python 3.
Maybe add an `is_tab()` here?
I think this message should not be necessary, since it'll have a "user" key in the user's window. Also, the message will not be logged on the user's window and we'll have to add it.
Is this a conscious change? It seems unrelated to this pr .... is this a path that is not a path?
I'm not sure why the name is different from the `io`?
The `compare(application::getAccounts )` logic can be moved to a common method.
I would call this `6`.
It's good idea to avoid code duplication here, since we have a default implementation now.
This doesn't feel the same as the other way around.
Let's add a `install-user-store` import to this file, to reduce future compatibility with the rest of the code.
I think the condition should be `src_is_bare_or_bare_user && !OSTREE_OBJECT_TYPE_IS_META(objtype))`
Why `len(statusParts) > 0`? We are not storing statusParts[1] as the statusParts[1] in the loop.
"server" could be skipped on particular server
if we change `must_respond_with` to `bad_request` we could also just pass in the `bad_request` param
Shouldn't this throw error?
Does CStorPoolPhase string work? Why do we need CStorPoolPhase?
It's better to use the new variable name here.
What's the purpose for this change ?
Would it be easier to test the whole object here? I don't think that will work on any of the other instances.
i think the other variable name is a bit confusing. i would suggest a name like 'l' or something like that.
The `a` parameter should probably be `int`.
This seems like a mistake.
@cramforce I'm not really sure if this should be in `spack info info`, but if we do for `spack info info info` and we can add it to all of the code. I can also see this is the case when in the code that we're not doing anything with a `spack info info info`.
why is this changing?
@rhtyd, the fact that `updateNodeStatus` is in `Kids/kIO-kIO-update.go`, is that right?
This is the only one used below. Can we remove the err.h file?
What is a pair pair? Why do you need to set the descriptor at all?
This was the only way I did it. The rest of the function call is `InvalidArgument`. The rest of the function was used to pass the type `codes`. The rest of the function has its own `InvalidArgument` method.
You might want to use version as well for the new parameter
It looks like you removed this line and the one above.
Nitpick: "No, *"
why not `nil`?
`array $user of user data`
Do we need this as a test?
Isn't the `Register` for the setter used?
Do we really need this?
I'm not sure why this change is needed, but what if someone tries to build a new instance? I am wondering if it would be better to have a new instance that just call `while winUser.getMessage(msg, 0, 0, 1)` and have `winUser.user32` return `-1`?
Is this something we want to address?
why not just "overwrite" ?
This is the actual change in `userInfo.spec.ts.2xx`.
Is there any advantage in keeping this code to make it easier to read?
@mmaxim should this TODO be removed?
Wonder if we should have a `*string` function for that instead.
Is this used? If not we can remove it.
Not needed, we have tests to ensure we don't get an extra map when the map is actually not found
This was the only place where the code was set.
I think this should be just a single string, not an `isawful`.
We'll need an assertion here for `instance_variable_set` to work as expected, to prevent the need for `instance_metadata` from passing the `PerFilter` as `--no-op` (and also the "default path on those dialog dialog" error).
Should the `PyObject` arg be a `Python`?
It should be `+=` rather than `+`
You're loosing the whole point of this. Shouldn't you just remove the second part?
To avoid calling the message in line 275 `error-standard cron` (and maybe put it into a variable `Sulu\tools`), otherwise it should just be removed.
The setter setter setter should be renamed to `setText`, not `setText`
Why is this change needed?
`some `$` in `p` and `some` at the end of the sentence. Also, the `has timed out` part is not clear enough. It is just an alias but never factored.
If this is needed, you should also add the new `id` option to the `products` key
Can we remove the `nsUploadOnly` as well?
I don't think this will work
I think we can get rid of this `stdlib`, and remove this.
This variable could be simplified by creating a `var` and in the next two `static` block.
I don't think this is used anywhere?
Can you remove the first `el.parentNode.removeChild(el)` call here? And then remove the first `!el.parentNode.removeChild(el)`
This is the same as `unexpected` package. I see that we're trying to get rid of this error code.
Why was this const removed?
This will need updating.
Should this be strict? This looks a bit too awkward, if a value is an empty string, I think it's better to do `lookback: ...` and if so, this doesn't need to be the value of the value
I assume that this is the only case where we actually set the `no-index` as an empty list?
How about `countlyGlobal["member"]`
What if the name of mysql is added as a static field of mysql.class? Shouldn't it be renamed to mysql.class?
Should we do this in an `if` statement?
We could add a check on the `is null` here instead of relying on the `http`. This way if that is the case I would suggest to make it a `NullPointerException`, or maybe just something like `"http://://test.run();` (or some other test case for this)
I'd rather not expose an `episode` as an argument to `more`, but it's really a single key to make it more obvious what a single key we expect.
This isn't the only change. The only usage of the `boxes` is `1000.Port`. The code here is only ever used in the code base.
Won't this be a noop if the stream is actually an empty array? It's the one you added in the `account.bytes.data () != nil`.
The `process_block (block, known_account, total_blocks, block_expected)` was left behind, but it does not seem related to the change.
"parts_num" sounds like a bit more descriptive
This should be `DATETypeTransformer`, `DATEGenerator` can be removed
I think we need to rename this to `tag-matchers` to make it more clear it's a static tag.
I think there's already a default value for v1alpha1 to 1.
We should add a `created` field to keep all the time, since this is the `destroy` field for the whole `destroy` field.
Why is this line needed?
This should really be added as `PublicVolumeCreationDisabled` to the volume as the root volume was set. We should be able to avoid that from being loaded for each other by a new `X: true` block. If a user has to change the default, then the `c.Bool` property should be moved into a `PublicVolumeCreationDisabled` property.
It is not necessary to do this since if `cache_MAX` fails, we don't want to do it here because the `cache_http2_decode_goaway_payload` would have been called before this PR.
Metrics/CyclomaticComplexity: Cyclomatic complexity forexit is too high. [11/6]<br>Line is too long. [81/80]
We can't change the default behavior. I would have made the change here to `remove`, which is the intent. `remove`.
Does this make sense to default to the default?
Can we just change this to `string`?
I think we can remove the `HIP_UNSUPPORTED` list here
This is a bug, I would expect that the null value should be returned to the caller. This should never happen, because we want to know which value it's null.
nit; why are these moved?
This needs to be `using`.
I would use `util.TestCase` here and do a `util.TestCase` inside `traverse`
I don't think that's a good idea to add "empty" at the end of the string.
We already use a bigger `client` region.
I'm a bit confused about this change, it's only used in one place and will be removed in some cases.
Is the `|| rawErrorData.containsKey(STACK_TRACE) == null` needed? It seems it should already be done in `if (rawErrorData.containsKey(STACK_TRACE) && rawErrorData.containsKey(STACK_TRACE) != null)`
We should use `single_partition_from_partition` in all tests, and instead add a `list_to_single_partition` call.
Please remove this. It's not used in this file.
NIT: I don't think we should make this change. In #if DEBUG debug is not needed, we can be sure the behavior in #if DEBUG is wrong.
I think this is the wrong part.
It seems that if I put `doLoggingRule` here, we wouldn't have to be more explicit here. Maybe just make the lock and just do `dodoLoggingRule->Connection(self.lock)`?
It would be nice to have a test case for this (if we're droping the limit), then this should be "not drop".
I'm not sure why we are creating new transcontext here, but if the configuration is set to `context`, we should be able to just set a transcontext in the context instead of having a transcontext in config. That way we don't need that configuration. It might be better to be able to use `config['transports']` in case the module is an URL and the default config is set as well, and just use that as the default.
Should this be a `Mapping`?
Why import?
This method doesn't seem to be used anymore
I wonder if we can use `list(...)` here instead of making `bool` a property?
No need for single quotes here, just `return [stats, base]`
Line is too long. [82/80]
What is the TODO for?
I'm not sure if it would work to disable a warning in `mac.graphql` ?
This is not a pattern, right? Do we need to add an option for that?
this should also include true as the result is not used anywhere
@smarterclayton @hangyatnik this is the reason the sqlite name is not added in the first place (which is not needed) is used in the `constants.go` file.
The loop is really long and can be removed.
I am not convinced about this. If the `void` and `Object` are being used is used, I think it would be better to do it in `serviceRegistry`.
Please put the new config below `Glean.INSTANCE.initialize(...)` on line 774 instead of adding a new Configuration instance.
This looks like a bug. I think we'll want to use log.status from here to get this logging.
The `CHCH` check can go, if it does exist. But, in other words, `mset.mu` is the `if`) because it's a `limitsExceeded` and the `js` is still the correct thing to do.
can you change this to just `UX` in case the value is not `nil` or `false`?
nit: can we move this up to `Url`?
Metrics/LineLength: Line is too long. [88/80]
I think you can just delete this file.
Please avoid extra newlines in a single line.
I don't think we should have a default value, we should use a default value to get the value. If so, please add `api` here.
Why not `1`?
Is it necessary to add this to all `isPublic`s? E.g. `isbuffer()` should be sufficient to just reuse `isPublic`?
is this a bug fix, or was it intentional?
This is wrong. We are not using ``inner_type=config``, which is also an empty string
We can add some config option to ensure we get the config option from local resource.
Why not just `LOG = static`?
I am not a fan of checking the user's `&:to_f` and if so, it can be `&:to_f`
Can we move this into `make lint`?
Should this be done in a follow up PR?
This doesn't throw if `command` is `null`, right? If you have another `serviceNotFoundException` method, then `quit` will throw.
As above, change the option name here as you did it in the `build` method
nit: can we call this `Iterable<OrderedDict[str, collections])` instead of importing `len(OrderedDict[str, collections])`?
This is a breaking change in a test file, please fix. Can you elaborate on why it is ok ?
Should `finishResolution` be `receiveGetAccounts`? Seems a bit too much to pass around the `finishResolution` here.
Why does it need an update?
`if (field.required)` is enough
I think it might make more sense to have the test_id as an argument that uses the method as first argument, and then use the new one as the method that uses the method inside the method.
We need to call `DocClient` every time this function returns. We can use the setter directly to avoid duplicating the code. I'm guessing there's no need for this snippet, it's just a static one that does the right thing.
Curious - Why do you need `Hash.ZERO`? Did you not test PMT hash arguments?
why is this needed?
This looks like a typo
@bvanessen I'm not sure if you have an idea of changing this to the new `reward` field. I think I'd have expected to change the name of the spec as well.
Is there a reason theclass isn't just "Client" (I believe?) and it was not "Client". It's the same and the other ones, but the only thing that we use is that we don't have to reproduce it as a sidekiq API, which is the only way we should change it.
Is this needed?
This isn't the right place for this. A `beforeSILMandatoryOpt` has `sil_module` value to do it.
we might want to keep this as a separate method, since that's what we use for other readability
Might be better to have only the smoothingScore if 0, then make that an `isort` and have it return `false` for all overloads
I'm not sure why this was there, but it's not used for this PR (and not for the `ParentTask` namespace). I think it should be removed and be removed.
I don't think this is used anywhere anymore
I think the s3.ruby are not required to add anything.
In the current implementation, we should probably add a timeout to `slow` in the `junit-test-config.yml` file. As it's being done in the context of our timeout, the `slow. Alert Alert` is going to be used as an exception in the tests.
Why not use `os.path.join(curDestDir,fromPath)` to make the build pass if this is not `os.path`?
why did you need to do this?
This is an unrelated change. Why remove it?
I'm not sure that I like this. Is there a particular reason why I couldn't find a hardcoding of the CMake, and then have the right limit on whether or not to run these tests?
Isn't `create` always called from a defaultFactory?
How about `this.hot.countCols()`?
This is wrong. This is really only -1 which means it will be 0. This check will be redundant if it was before the check on line 167.
Making sure there's no requirement for this table is enough, it should work without a column that has `pg_search_documents` key
I'm guessing this is the one we use for the others?
Should we check for `s.Create(tagr.Address)` here or is that `nil`?
I don't think this is a good idea. In the case of `instanceLogLevelUsage` we are adding the `instance` directory to the `instance` directory, it will be a good place for it to be used as the source file.
I'd suggest to keep both the `tabManager.mobile`.
Nit: `noop` or `noop is managed` for both existing existing existing uses.
this change will cause some problem
`original` is not used anywhere else.
I think it's better just to use: `this lambda will be permanently deleted, this action cannot be undone."`
Is this the correct way to do this?
I'm not sure how much this is doing, but I don't think that would be better in this case.
Why does this need to be added to the new method?
I am not sure why there is a test to verify the problem when a test is run in prod because there are no tests in these two cases. In this case we can also pass through the `addContext()` methods in the test itself. This method is used by a few places. I am not sure that this is an issue with the test, so I don't see how this method will get called.
Should we use the same string for the the old one?
isIE9() now no longer used?
I think this should default to `true` instead, since this is now only passed to `boolean` when there is more than one line.
I do not think we need to check both after `443` and `bserver-1`.
This is a `c.setFirstPingTimer` call which does not set the Ping.
I would not add the new parameter in this file because I don't have any idea how to fix it. The reason is the code is that you're not doing this is the right thing to do, but you're using it in the other file.
This file does not seem to be used anymore
Is this correct? What if we called this `uname` instead of `uname`?
`file` (see below). `plans_path` is a `.files` instance, not a `.files` instance, and I'm surprised this works. Can we use something like `file = `'tasks'` or something similar?
This file has already happened.
Should we also change the name of the metrics?
Please don't modify variable names.
We should probably add some validation to make this clear that the cookie is set
Is this necessary?
Same here, I don't think you need to check for NULL here.
I think you don't need the `and_return` here. It can only be used in the `if` statement.
change to `Action` or `text` for consistency?
What are we doing with GetValueAsData() and GetValueAsData()?
Why do we need the extra param?
This needs an empty line at the bottom (and the one that I'm passing in for the `""` block below as well).
We're not using this value anywhere else. Shouldn't we instead use `object_uri.replace('%2A, renaming renaming to `object_uri.replace('%2A`?
Please remove this.
this could use peerID
@garyrpmanawil Is this a good idea? What about other `rpmDependenciesDirectory`? If I can tell, this change is not needed. The `RpmDependenciesDirectory` is already used in `etc/shadow`. I think it will be more readable if I am not missing any of the `rpm` stuff here.
Shouldn't we use `logo.efikit.efikit.efikit.efikit.efikit. Will need to be revised for this assertion?
@tgamblin This is the only change needed to use this feature.
The last line is too long, can you make it a little shorter?
Is this a fix for a bug fix?
I'm not sure we should use a valid "prometheus" for this, but it's also not a valid" behavior.
This should be a `traceInOp` check, no need to check `c.traceInOp`
This line is too long :(
This is not correct. This should not be `isPluginV2`. You can remove this, as it is already in `isPlugin`.
this change is not related to this PR, but I'm not sure if this line is really required.
I'm not sure this string is actually going to be used anywhere, but it should not be in production code. We are only trying to set this on a single page.
Is this supposed to be a `windows.server()`?
Why does the `id` change its name?
I think `<a>` is not the preferred term for this PR. The CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link is the correct location when you use the device. Instead of calling the new device directly, please call it "<a>Network settings (SSH, SSL, Proxy, ...) { CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link}`.
is this log necessary at all and very least an error?
We should probably have some sort of controller controller for the controller.
I'd say "Chain to OCI the kernel file for it". It's just a suggestion for the OCI field, not an kernel file (and the next one for the OCI, if the string is not a kernel file)
I would use something like `req->res.min_size == 0`
Can the test case be `Stream.range(0, bigNum)`?
Shouldn't this be `info(version())`?
Should we have a check for this? I thought we were going to use the `qt.io` constant?
I think we can just remove the timeout here, since we want a timeout.
I don't see where it would be used. I don't think it makes sense to use a name for it.
Why wouldn't this work? When should this setState() be called when it's called? Or is this something which wouldn't happen?
You could just do `encode!('utf-8', 'UTF-8', invalid: :replace, undef: :replace)` so that you don't have to keep encoding in sync with the first char.
Can you make the condition in case `cfg.DB.IndexDBPath` is not null?
Think we can remove this limit and max_query_limit altogether (e.g. limit)
This can be removed
I think it might be better to move the `feval` to the list so that it's a list of strings.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this should not be here, but the code below doesn't really use it
Why do we need this `result`? It doesn't seem to be used anywhere.
Please revert these changes too.
We should use the default value here.
"duration used as an interval" sounds more natural to me.
This should be `six.text_type` not `utf-8` as the value.
I think we can remove this. This makes no sense.
I think we can avoid this loop, since there is no chance for `len(n)` is a function.
What is the reason for this change? I would expect it to return the object.
This is a bug fix. I think it's safe.
Why was this removed?
Nitpick: Maybe `respBuf` is a better name? Sounds like a duplicate of the test.
Do we need to make sure the file doesn't exist? Is this the case? It seems odd that the file is not actually loaded.
In theory, we need to delete the resources in the root or the project file.
Is there a need to use that here ?
This should be `t('calendar', 'Error saving WebCal-calendar')`
It's probably not necessary to remove the `chromeOptions` prefix now
Why the double underscore?
I think it might be better to have `p.m.Unlock()`. The `MapFull()` method also handles `tDER()` and `tDER()`. I'm not sure if this is the best way, but the current implementation of this method is to replace all the calls to `druid.druid.druid.Extension+()...`. But then this should be `p.m.Unlock()`. In this case we can be more explicit about how `host.Extension+` and `host.Extension+()`, but I don't think it's worth having anyone who knows where it
Why are these checks removed?
What's the difference between selected and selected ?
The same change as above.
why `sanitize=True` ?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I would prefer to see a test that sets this value based on what it's needed in the UI. Maybe a `private final config config file`
I think we should move this to the top, otherwise the class will be created with `/`
I think these two includes are meant to be `src/res/linuxarmicon2/xpm`.
Just noticed that this test is being executed on all platforms and is only on local development.
I like the `from os import 0` here.
I wonder if we can drop `AsyncApplication.info()` and just reuse in a single method.
Should we call it `json:"notification"` instead? Or is it just for consistency?
Is it still useful? If not, can it be done as a `driver_name`? The same question is about the `nameOrHandle` variable.
Layout/SpaceInLambdaLiteral: Do not use spaces between -> and opening brace in lambda literals
Wouldn't be better to add a `bidbidInfo` to the payment channel? It will also be much harder for a future task to read.
Style/MutableConstant: Freeze mutable objects assigned to constants.
this doesn't look right?
@jglick I'm a bit sad that this is only for debugging, but we could be looking for some of the `MKbase#get` method in the interface
This should be a `Port` attribute on the service, not on the server side.
This doesn't look correct. Why can't you just do node.parent.statement(node.parent.statement()) and node.parent.statement()? The code above returns a string that contains the same string (and a string, a string is not a string, but a double string).
I don't think this will work, you should use the default option, not the default
This should be `return sleepTicks` since its no longer a property. (It is not always needed since we have `timerSleep` for the other cases).
This is unrelated to the PR.
I'm wondering why this function is not called in wlr_backend_destroy()
I'm not quite sure what the best approach here. `NewManifest` needs to be the default. We have now the default `NewManifest` that is passed to LoadPlainYAML.
This is the one place where we have the `fromBuilder` `ommersHash` field but I'd like to avoid the `fromBuilder` import from it and instead use that one.
Is the name of the key required now that it's used as a constant?
This should probably be `to_ts =max_ts(time.time())`
Can this be made made grpcStubTypeName only for the constructor? If they are the same then this should just be called for the same reason as the other one.
This is not really really the best place to rename this. It is not used anywhere else. ` TraceConstants`, but for now it is a bit more readable.
Nit: we can probably catch something here like "Unless there's a better way to catch this, I think this is better.
could you explain what is the meaning of 'Model', 'attr', etc. and 'attr', 'attr', 'attr', 'attr', or something along those lines?
we should keep this around around.
I am not sure about this one. `patient` has been already used by `v1.3` and `v2.3`.
why do you need the .config at all?
This method should be renamed to `trustedIssuerAuthenticationManagerResolver`
This line is also not in use in listener.
why not leave it as it was here?
I'd use the `assert` in the `install-os-dev.js` file
@deads2k do you have any ideas on this?
Nit: the name "Expansion" should be "NamesExpansion"
Why does this default to "1"? Shouldn't it be "2" as well?
This one was just about the line that was causing the test failure. The rest of the file is now an improvement.
This change seems wrong. The `AC_CHECK_PROGS` function has 2 arguments: `AC_CHECK_PROGS(YACC, 'bison -y', :)], [AC_MSG_ERROR([bison not found but required])`
You can use `set` here to be consistent with the rest of the tests.
`security_groups` should be None (and be consistent with other parameters)
I don't think `replace` will ever be true, because `relativePath` is not a string (and it would actually be better if we moved to `path#replace`. I believe it should be checked before `path#replace` is called.
The old code still needs to use the old one to avoid weird errors (i.e. it has the actual exception).
I think this may not work properly. We want to be sure if that's the case, but I'm surprised it isn't.
Just making sure, that is the case, we don't want to change the path here anymore?
i believe this should be the first condition
I thought we didn't do this in the test suite?
I would use `log.info(space)` instead, which is why `log` is `null`
Is it necessary that tag is tag supported?
This was a bug before? The new reason I have is that we don't have to make sure the health is not a valid integer at all, and we want to make sure that the scrape() is a subset of the version. This was a breaking change and is not correct. I don't have a problem with @hackaugusto, just a question of if I can confirm that this doesn't break if a new version is in the same manner.
`ICoreLogger` should be `ILogger` and not `ICoreLogger`.
why did you change this?
Indent `end` as deep as `case`.<br>Line is too long. [89/80]
Is this a typo?
Would it be better to put it in the `signedMessage` namespace as well?
Why is this required?
why have these static?
same as above, why is this needed?
I think we need to do this in ` Slash` too
If I'm not wrong, the `ing` should be a `Delete` not a `nil`. You could just have a `Delete` object.
I believe the previous behavior was wrong, but I'm wondering if it should be removed.
Why is "running" removed?
The problem is with 3EndpointID is that the value was used to generate 3.3. So this was not added to the user.
this is wrong right? I don't see cryptoSetupServer anywhere else.
How about using `sles` to include the `sntp` flag instead?
Why is this necessary? Is there an empty case when `None` is passed to `set()`?
I think we should warn or use something like `source.getProperty(key, source.getProperty(key));` here, and use the warning if `source.containsKey()` returns error.
This is a regression, we need to update `args` to include this as a key key
Shouldn't we do the same for the `moment` method in the `ExecutableFlow` method?
I think we should just name the parameter of a method `class` instead of name.
What does this do when it does not?
This function has a different name, I think it's better just to call this `get_screenshot_as_file` rather than the second argument.
I'm not sure we want to return here? Or is the `undefined` case still valid?
Note: this is unrelated to the current PR. I'm just curious, but if we ever want to start setting a "JSON" flag to true, why not use it to generate a `JSON` field?
struct field sound right?
We already know that users will have this method on the `main` action, this is the correct location for the whole `<ReachableFiles>`. It should probably be just a single field that is present.
I think this can be removed as it is a bit confusing
Please remove the empty line here.
I would move this to the `slots` method. This way it can be fixed in a follow-up PR.
I think this should use `MakeBlockService.logginglogging`?
Nice catch, I thought the original intention of this change is to fix the bug, but if the compiler didn't specify a full sentence, it will probably be better to split it up.
why is this %s?
I don't think we should be changing this
Would be nice to rename this to `publicLink` since this can only be public when the object is public.
`json:"ipAddresses, Win_NOT_specs"`?
Are we dropping a `interface` here or is that the only one that uses this interface?
I'm assuming it's not the case yet that the tparts has 1 element?
This should be removed.
This makes a test fail. I don't think we need to decode the promise here, as we only need to decode if there's a non-empty string: - I think we need to decode if there's not such a promise (i.e. it does the promise) - I think we should only set the promise at once. What do you think? @josegar74i
You have to add `!MyResearch/Holds`.
How about if it's `c.kind == ROUTER` instead of `c.kind == GATEWAY`? Then if it's `NULL`, we should probably be explicit here.
nit: `*wf-12-timeout` (or `*wf-workflow-timeout`)
this file is not doing a `type` value? or `type`? If the value is just `type, spy` then it can be an `action` as well, so we can change this to `type = {save, spy}` in line with line 221.
I don't think the value of 64-bit is the correct value here. Also, the value is `4`, `0Gi`, `4Gi`.
Should we rename this to unsupported_property or is unsupported_property from a list to avoid ambiguity?
Since `TaskCPUMemLimit` is an `Taskomitempty`, it would be nice to have one assert that it is not `None`.
This line can be replaced by Object.h
This is the only change that is needed. We should add the new option to the new method.
I'm not sure what the best approach is to do here. If someone does not have a Network Network Network Network Network Network Network Network Network Network Network Network Network Network Network Network Network. If it was a Network Network Network Network.` I don't see it.
Is this a leftover code?
I'm not sure that all the `gcloud-beta-prod` fields are identical.
This seems like a breaking change for us to keep original behavior
isn't `be/flag-by` the same as the default?
Why are we not just using pExternalFormatANDROID->externalFormat == 0 ?
I think we can remove this now, it's not used anywhere
I guess we are missing something but why is this change required ?
I think we need a test for this in order to not work as expected.
This variable is used to set it in 10.0 and the second variable is set to 0.0, and the value to 10% of the free bytes on disk to be used in the disk cache.
So we don't have to create a new env var for these two?
Style/SymbolArray: Use %i or %I for an array of symbols.
This test can't be testing the wrong place. It can probably be changed in a separate PR.
I think we need to use `Accept.addHeader()` to avoid the service service.
I'm not sure if this is correct. It looks better if we check the result of `last_update_ts`. It should probably also be fixed for `if`. It looks like the method can be called with `_update` (or anything else, and if so, then it's just a thought)
Is the listener always a non-empty log statement?
Should these be tied to the `ToProps` key being constructed before the call to `ToTNotAllowed`?
I wonder if we should do something about not storing the files in here. We already have `.dup.criteria` that is not the case that it is actually used.
Should it be done somewhere else?
The logic is a bit misleading since `ok == len(s.clients) <= s.opts` is true because `s.mu.Unlock()` returns true because `len(s.clients) == ok`
`this](auto&& resp` (which I think will work) just because it's an input of the target leader and the runners always have the same type as the leader of the runners. I think we can remove the `if (srcLived_)` part and remove the `itself()` part, and the next line will not be removed and will be fixed in the followup PR
Do we really need this?
I wonder if this needs to be renamed to `NarFin` to match the rest of the PR
`c.Wireguard.EncryptHostTraffic` is a boolean, I think it might be better to remove this if block. Though if we are not going to make it so we only have a boolean.
Is `get()` the same as `maxSegmentsPerCell`? Shouldn't we use the same signature (or at least in `init()`)?
should be lowercase to match
You can't call it twice the `auto_fire` variable.
`MESSAGE_TRADE` will be empty, which is now removed.
This should be changed to `split[1]` instead of `split[1]`
why remove this?
I don't like the name of this. If you need to change anything, it's not necessary.
Why did the cell change in this PR? If you want to make sure this is only the one on the wrong cell, it will never be selected.
The name of this function does not clear anything.
I think you want to add a license header here.
doesn't it make sense to have the `urlencoded` string as a constant? I don't have the idea what this means
This seems to be unused?
Align .all with too many lines.
BuilderForRuntask is set to `false`, so this should be `BuilderForRuntask`
Why did you need to make this change?
Can we call this `!BAD_REQUEST.source`
`o.LameDuckDuration` can also return `nil` if the `time.Second` is empty.
this was the only fix for the bug, not sure why.
I think this is probably better placed in `pkg/api/pkg/constants.go` rather than a new Widget. The idea is that if there are many Widget, we could just move to `pkg/constants.go` where we don't want the full Widget to be in order to have it be available in the user's source. The Widget is not in the list, so it might as well be used in the list.
I'm wondering if we should make a `return` statement in `Base::FAILED` that takes an object, and not a blocker. I think the `meta` would do the right thing.
Is this really the right place to handle this, or is this to ensure the user is not using the server to run in parallel?
This is a private function. I believe it should be an enum.
I don't think this should be true. If it's true, then we should not change the default
the new logic for this is a bit tricky, but it is probably a good idea to keep the old code consistent. Not sure why the code was here
wrong import order
Please remove the additional blank line and add a `#` after this section?
This might be a better way to do this. It's not clear what we want is to do for `applyPreflightCorsResponse` but I guess it's going to be used in other methods. This method would have been called in `applyAllCorsActions`, I think.
this is the only place we need this
why do we need to enforce that all versions are the same?
I assume the code can not be logged if there is no `info` level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level? If not then I'd suggest `finest.info()`
Is it a side-effect or something?
I'm surprised that this works, because `hasher.Write([]byte(suffix)` returns "". I believe it's an error, because it's no longer valid. Maybe it's a good idea to return an error?
This is a change in behavior, we should not be able to use this interface for now, but this should be `ctx context.Context, **authentication**`
I'm not sure we want these out of sync/Read/Bolt/Node::Success.new. What was the plan to do?
Is this used anywhere? If so, why?
why 100?
I think it is worthwhile to move the `HardKiller` inside `stop` and then put it in `Config` so the logic is not related to the commit that it is repeated
You should remove the `achm_format` variable.
this is an API break, we don't need to pass the `./` in.
This layer should be the same as the one above, since it should be able to be changed as well (so we don't actually need to be able to run a response to a single time).
Is there any reason to make this change? It's only in scope of this PR, right?
why is this removed? I think we should be changing the other functionality from the other PR to avoid calling `stderr` twice
I'm not sure if this check is needed here.
Why not just add these calls into the Windows context? There are similar calls in this class.
This isn't a copy of the PR.
The `Filters` is not used anymore. You can just remove `d.Vladpc.Filters` altogether.
This is what I meant in the `strconv.string` file, where is there a way to get the string `encode`?
If we're not using any kind of logging for the logger, we should remove the logger and use `log.Info` instead.
I'm not sure it's a good idea to use a function to store the state, since we don't know how to get the `Rebeat/logic` in the `Dataflow-logic` package.
How about `spec/controllers/dev_error_spec.rb`?
The same here. Just in case the `z-x` package exists.
Please add a TODO
This if check should be redundant IMO
You don't need a return type here?
I would suggest using `if ($this->getDataSource()) {` as an assertion.
why did you change this?
Can you explain what this change is for?
Please remove these unused methods
Since this is a boolean, I wonder if it would be better to use `if (query.selectedInclusively()) {`, `query.selectedInclusively()`, `query.fields[paths[i], FDEVPath` instead.
Would this be easier to use to write `statements`? `Articles []` might also be a bit confusing.
nit: you could just add a name to the name of the module. `original_config.go`
Not a fan of this name. Instead, `DropVXLANPacketsFromWorkloads` should be `DropIPIPPacketsFromWorkloads`.
nit: I think it would be easier to understand what the caller is trying to remove the Nonces in the constructor and not call it in the `io.prestosql.plugin.hive.SCMKids.hive.fs.removeTransaction` method. This is more important as we already know the `writeTransaction` method is called for each call to `setState` that does the right thing.
maybe we need to re-implement this as well since interest is a propagate/catch in the test.
Could you make it a function and use a `bool` here?
Is it needed that the file name is already in the name ?
I'm not sure if we should just return this error? If yes, then let's make sure it's not a valid error.
@jridgewell Is this what we intended to do?
Why not use `final`?
I don't think we need to change `W9021` here. I assume that it should be in the `else` block. The param should only be referenced on the client side and then it should be used in `W1.y`
shouldn't we also be passing `LINQ`?
I'm not sure how these are needed since we're only using `options` at the base class level, not the `options_id`.
I see this is used in the previous if block, but it's not really the best option. It's probably not the case for this role here. I'm not sure that we want this. I'm going to suggest to add a custom role on a different line.
I think `return this.driver()` might not work as expected as the default is set. The method `return this.driver()` already does the right thing. In other words, you need to do `return this.driver()['loadExtension'](path)` in `loadExtension()` to `return this.driver()['loadExtension']`, otherwise we will end up not having to do it in the `return` statement.
The new test doesn't need `flake8.test` and it was failing.
I would prefer if you could also use `hole_destroy`.
It seems that `search_results` is not passed as a parameter, why are you just adding this to the query?
This is a bug fix, but the Beaker test fails to test all Beaker cases. This will be correct. If the Beaker class already happened, it will be `rescue Beaker::DSL::Assertions, Minitest::Assertion =>`.
This can be set to false by default right? I'm assuming that this will become the default
This change isn't related?
I'm confused... why is this 20 timeout now?
This should be a bit more explicit, like `<es>/<Directory>/<Directory>/<Directory>/<Directory>/<Directory>/<Directory>/<Directory>/<Leader>/<Directory>/<Directory>/<Directory>/<Directory>/<T>`
This could potentially result in a lot of specs which can return empty specs in a variable without having to create an instance of `selection_specs` in some cases.
I think it would be better to do something like `it "numeric" to indicate you're using the wrong one. It would be clearer than just the `a_number`.
@lafriks, @rhatdan do you know why you added a content here? What is the reason behind this?
let's make it so that we can set dynamo_exited_synched to false when it's not null.
Why not just call this `if3_1:`?
Long bitmask ->string bitmask
I'd rather this have a `order` constant, not an `order` parameter. Or am I wrong?
Isn't this going to get set a `const char`?
I am not seeing where it will be used. I wonder if we should be able to do some sort of check in a more informative error message here? Or should the link be in the `g3a://'`?
I think you're missing a `pushObject(this.get('config').fetchPrivate())` after the call to `pushObject` (or you'll need to call the `fetch` call) and then use that here.
How is the check needed here?
Is it needed? I don't see any include changes in this file.
Layout/FirstHashElementIndentation: Indent the right brace the same as the first position after the preceding left parenthesis.
The name is a bit misleading because it is going to be the "original" of the app, and it doesn't really matter since it's a twitter!
@maarcingebala Can you please add a TODO in this commit?
I think you forgot to remove the `project` attribute here as well.
Can we put a value in a const somewhere else?
Ah, I missed this, it was not possible to pass the exact res.Body to the method?
is this needed?
nit: this can be `import` instead of `import-peak-boundaries` as that is what is needed for this new config file
I believe we can do this better, but I think you'll have to fix this a while ago.
For example, if we don't have a slot, should we just return `false`?
This is where we use the global constant in our code base. I think it's fine to do this, just a note for a follow-up.
this is for the same file as the other one, we don't need this
It would be better for `config.Pointer` and `config.Pointer` type hints, and then we could just remove all the `config.Pointer` code here.
Can we use `JSON.current_ElementType()` ?
Shouldn't this be moved to the `oldUnmount`?
Please use `0, null` for the `indices`
Maybe update the `source.data.update` to `source.data.Empty`?
You'll need to add `Batch'` to the `configured` model
Please, use `org.apache.commons.lang3.StringUtils#optional`
You should probably have added the "url" here (and the `url()` line above).
This is the `adays` for the `Run` method.
Is there any reason for keeping these?
Please revert this change
Does the previous code change the name of the method? I think it makes sense to keep the method parameter parameter as `OperationDisplayString`
Not a huge deal, but this seems weird.
I think the error message needs to be updated as well?
Isn't this the default environment? It was used to test all the environment, which would then have to be set.
@agoncal we dont need the if check here
nit: no need for `Source` return `false` because you'll always return `true` on the next line
This is no longer used?
is the intent of this check intentionally done to avoid the right summary?
(style) trailing whitespace
why was this test moved down?
You can remove the null check here as its redundant now and you'll see that the null check is removed
Is it possible that no parameter will be created on this property? I don't see an issue with this change, but if so, I think that's just something I'd love to follow.
should we add a return type here for the new method?
Should the return value be added to the function above as well?
What's the purpose of this change? dag_file_exists() should always return an stat?
can this fail if the pipeline is not defined?
is this still necessary ?
What does it mean for `cmsg_data` to be a scalar rather than a length?
I think we should be consistent and call this `ASTAttribute` for consistency. If `out` is the base class and `ASTAttribute` is the new behavior, we should consider the new implementation.
why remove these?
This is a breaking change. Can we use splitTableRegion and then splitTableRegion, or something like that.
I'd prefer to move this into `lib/go` and remove `error-notification` from the `UserMenu.js` file.
@Pearl1594 I would prefer "Failed to download block..."
Why no longer Exception?
@bparees this was a bug, @larsoner
The default is `True` because the default is the default.
remove empty line
This is not really correct, but it's not. Please undo.
Why does this change? It's a separate PR, and it's not a big deal but it is a real holistic one.
Is there any reason to remove this method? Can it be `@deprecated`?
You need this in your PR to be careful with how we are doing this. The key is in `password` and `password` are in the struct, which contains the key and value.
I think we could remove this completely, it's not related to your change but we can do it for now
Is this a typo?
Is there no error returned by `TokenToken`?
If we're going to be logging this, we might as well make it explicit. But I think this can be done by the time we call the logging (or at least log level).
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Do we really need to cast it?
This is the only new thing, I believe you can remove it if this PR is not used.
Maybe we could make `tree` a `VariableTree` object that's been passed in?
I would keep this function, if deleteEvents was not found and deleteEvents was explicitly set (not sure if it's good to check this).
I don't understand the point of this method (and what it does for the plugin name) - is this needed for - could you explain?
@matt-gardner How about renaming this to Solr_IN_STATUS?
`if value.pivot` can be null I think.
Do you need to make it explicit that there are no uses of this method?
This will not work. This is a breaking change and should not be needed. OnTouch queries have the same issue.
Can we call this `UpdateSpan()` instead?
Nit: I think you can use `ImmutableMap`
do we still need `set`?
Please create a separate `createSenderResources` method and use it in the `spec/features/createSenderResources` method.
Why did you rename `dtdg.co/net-runtime-metrics` to `dtdg.co`? I don't think there could be any other way of saving the code.
This should have `<Async>` (the same as ` ForceFlush`) and its corresponding corresponding `<Async>`
so now the test will fail if the test fails?
The "CultureInfo.InvariantCulture" property isn't used in this PR, so I'm not sure if this change is actually necessary or not.
Could we remove this and just use `\`.
do I need to return a different error than the one above, or is it just me or is it just the old one?
You can remove this line as well
@scheibelp This is where we have the fs defined. If we are going to make `errors` be part of a few more instances I think it would be better to just remove this file and just keep the `errors` field as it is.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I'm not sure what this is for. Can we instead do the `erase` method inside the function that returns `null` and return `value`?
I think we need a copy here, otherwise we don't need to do anything in `service_module.exports`.
Shouldn't `scripts=` be `'electrum'`?
I think `driver` should be done after the `name` check
Why this interface is defined as static?
The logic here is weird, I just wanted to call it "executable_text" because the variable name is confusing to me.
This is only a single call.
`Word dependencies` is not defined as an int, please replace it with `'lodash'`. I suggest to keep it as the `Wordorg.mule.runtime.api.amp.lib.opt.element.opt.Wordorg.mule.runtime.util.opt.lib.opt.element.opt.Wordorg.mule.runtime.util.util.opt.Wordorg.util.TestCase` or use `Wordorg.mule.runtime.util.TestCase` instead
This test seems to be unrelated to the PR?
Why do we want to allow this? We should be using the middleware.
I think `hasProperty` should be kept in the past?
Why 6 is not 3?
I don't think this needs to be in the `var` package.
Why did this change?
Line is too long. [87/80]
I think you can remove this.
Maybe use the different function for `pool`?
This test was failing because it was not being used.
Can we also change the history history to use history.io and history.history?
why change the timer?
I think this could be removed as it is only used in other components and not here
it is not used anymore, please remove it
Should we just call it `wallet_password` instead of repeating the same name?
This should not be needed anymore
I don't think this is a good idea. The `default` method is a `default` and `upperCamel` are just a `default`.
Why are we removing the `CanCombineWith`, but not the other way around?
@mfojtik this is the reason why the replicaclass-enabled directory was not defined here?
Does the `go fmt` make use of LibuvFunctions?
Why not `list_base_alloc`?
Add some description about what this is about.
should we move this to APIV1GETetsResponse?
You should use `config_path=dict(section='upstream-status-when-all')` instead
I am a little confused by this line. I'm not sure what the difference between `flattenedTree` and `iframe` would be. I think we could be looking at this, but if we need to get the deprecation warnings, then we would not have to maintain the code that needs to go.
This can be a static final field in ConfigModel, since it is used only when the property is not provided.
I don't think we need this.
I don't think we need a separate import
I am curious why you need to do this?
Please remove the <spawn.h> here. We don't need the <stdio.h>. You should just use the <stdlib.h>
The function signature here is very similar, and could be moved out of the function. I would suggest using the function `return (in *fakeTwoPhaseChaos) IsPaused() bool {`
Would it be worth having the permission to manage that?
This is a lot easier not to read. There's another `options.beforeHandshake` property that will be used for the `kAfter` options
I think we should just use `Apply` instead of `r.inSync` to avoid duplicating the code.
I'm wondering if we should not have this check in the first place. If we're going to be writing to this package, we may as well just have `g.imports[path].length` for all cases. It might have been nice to have it as part of the `if`.
What if we added a second composite rootless `composite_root/root` for this?
nit: new line
Perhaps "the value is a negative `Number` primitive or object. Zero is considered negative."
Should we check that the user is not in the resource?
I see this above just below but not used below.
I think this was unused.
I think this can just be `cpuCircuitBreakerThresholds`.
these changes are necessary for all the changes that are not thread safe. You could remove them for now.
Why this change from calico_nat_dest to 1?
@jhipster/developers this is the best place to fix it. If the main script is not found then please change this to `computeDefaults` to make it more obvious.
algod import is never used
Nit: please move imports before the top
I'm not sure what to do here -- can you confirm that that's the correct way to do it? If yes, I think `pattern` may be a better solution.
this is not thread-safe, you can remove the `if ($container->hasDefinition('sonata.media.cdn.fallback') {`
I don't think this change is necessary. The condition should be checked in `Type[types]`.
Please make sure this is only used in the `init` folder with `init`.
I'm curious why this change.
Use the new Ruby 1.9 hash syntax.
I don't understand how this is being used. Can you explain why this change is needed? I thought it looks like all the `_syncConfig` and `LowestInsertedHeader` both come from a property and the same property were passed, but they are not.
Would this class be better named as `public FakeApp()`.
please add some validation here to indicate you are missing.
This is still used in the other tests, right? Why was this removed?
this will break the full build. I don't think it's worth it here, just checking that it does the `x_range` above and do the `x_range` thing.
I don't think this import is needed
This doesn't seem right. It should always be a `Integer` or `str`.
`long * time.Millisecond` should be enough. The problem is that `Cancellation is not delayed` which is not a smaller number.
Is this used anywhere?
Could we have a default chain for this? It seems like it will only be used in the chain for the password, but not in the chain.
I'd rather have this as an assert, that button and the test fails, if it fails, the button will be displayed in the test
There are a typo here. (I'd remove this from all the other PR.)
I'm not sure what the difference is, but we have a test for the new parameter?
Could we have this constant in `BuildIDOSEnv`? We do not need to create it here, because the BuildIDOSEnv cannot be used directly in the OSX extension.
The started message should take care of that. I don't see a big difference between the started and the end of the function.
This file seems unused
I think this should go to the other `const`
I think this needs more info to what I can expect it's worth.
This should be removed.
I would not use public API.
this test is testing the correct way. Is that intentional?
Can we put this in an else clause? Or should this have an explicit default value, not just in the other block?
This was the only thing I found when `Tracer()` was called. It is not needed because it is the `opentracing-go` file but was not used.
I would use a constant like `assert_eq(kidx, pidx)` which will be called even if there are two other tests that fail when the error handler is generated.
Why is there a reason to change the `String` argument from `experimental`?
Why are these changes required?
I think it would be better if a container was created and then call lock.getEndpoint(ov, container ID) instead of calling lock.lockContainer(...)
I'm not sure we need a more specific method for Exception/search.
do you have a problem with this change? If you are making the number of warnings, you could just change the number of seconds to the number of seconds (which is what it's needed for the `0` number of seconds in your PR) and use the min number of seconds to avoid the number of seconds. This way you can change the number of seconds to the number of seconds (which will make the number of seconds to a number of seconds, but it is not clear that it will be an integer, so this can be an issue and it's not really a problem and it's just not a number of seconds
We're not doing anything about using the API directly. I think we can have another wrapper to have this attribute only if `YAMLTags` is `false`.
@smarterclayton do you have an idea why this change was made to prevent any existing executor service from calling `shutdownNow`?
I thought it would be better to startMetastore class and allow HiveConf to be called? What if someone calls `new TestHiveMetastore()` in a test class?
This protocol is always mandatory in this case.
This might be better in a future PR.
I think the "immediately fail unless value is not zero" is fine.
I'm not familiar with this patch... but I don't think it matters, it is worth it to make a new function.
This is the place where we need to fix the problem. The implementation will have to be done by the code after the `VUIDs` has been done.
This seems like a leftover from the PR?
I'm wondering if this is not a good import since the imports are already validated with java.util.List (or java.util.List) is not used at all.
I'm not sure what this field is doing, is it?
What is the difference between `timeoutControl.BytesWritten` and `maxBufferedBytes`? Is that intentional?
Should we check for these somewhere, if they are only used once?
Please avoid wildcard imports. Please revert
This is a good idea. If the log is not working, we need to log the whole `wlr_log` call at the top of the function.
I don't understand the motivation of having this change.
Line is too long. [95/80]
Why doAnalysis() and not `NamedList<?`?
Standards: Please add a space before braces.
Are all the changes here to `spack infoHandler` just because that's what the `tg` does? I mean, in this particular case, it's not clear what the `https.api` command is used. Would anyone be breaking this?
Do you want to call this like Clump?
The config.ControllerManagerConfigurationSpec is now only accessed from the config interface.
As @jsoriano I think this check can be removed, if we don't have to. If we do, we can make this check required and just use `go . . . . . . . . . . . . .
Are we sure the `this.options` key is still present in this case?
This import should be removed from the file.
I don't think this is necessary. We are setting the `DiskGroup` field in a file that has its own `DiskList`, so you can remove this.
I think it's better to have a named constant here so you don't have to update it again?
So we only call `editor.apply()` twice on all the `commit` calls?
whats the difference between `nil` and `list`?
Missing `import` statement.
Don't test this change if it's not the same as the line below
clip seems to be the same as in `LEGLEGRunner` and `LEGLEGRunner`?
I don't see this change required in this PR.
this code seems to not work?
This should be `unlessColumn->quiet`
I think this was a mistake before.
@liggitt I've been thinking about this (and a bit less clear) `query_args.append('versionId=%s');` might be a bit easier, given `(v, version)` could be a string (if not for `v`, or `v.c`. But I'd be happier with @damencho).
I think it is not possible to have a panic here, but the function is not called on error. This is called when an error is returned, and there are no errors in the client which will not be returned.
Same thing with this, I think it's better to move this to the top, otherwise LGTM
Is `self.name` always a `schema`? Can we just use `self.name` instead of a index?
can you change this to just `HiveScanMode = ''`?
Should we use the `tag` tag here and in other places?
I assume you didn't disable these in the console.
Maybe you could just use `assert` for `assert` or `assert`?
I think this will still have to be dead if we don't do anything about a blurb on top of the slot.
This seems to be the only change in your PR. Is this change related?
I don't like that this is the best way to stub the success color, but if we're not on the success color we'll be writing into a stubs page. What do you think about adding a check to the stubs page? The following code is really not clear that the success color was set and if someone changes it to stubs.
why not use `toCashAddress()`?
Can we use `modeman.leave` here instead of hardcoding it?
I'm not sure if I need to make `ArgumentArgument` the `Stream` interface. If I understand correctly, it might not be necessary to call the `cancel` interface at all. It can be done in a separate PR and it seems like I'm missing something.
Why do you need to check `isEmpty` here? If you pass `true`, then you'll have to pass `isEmpty()`, as it will automatically be called once, and then check if it has no attribute. It would be easier to keep that.
We should change the type of `LITERAL_FIELD` in `getLiteral` to use the value `getDate` directly instead of using the `get` function.
This test can be removed. I think it was already here before. The other tests are just passing by `TestSendResponse`
These two classes were already part of a coreclr, so we should just delete this test from `101POST / 1.1`.
Should we check that the corresponding `divtest` has the same `divtest` key in the test suite?
I don't think these are needed. It's not a problem since it's a user facing error.
I would like to keep this in the `validate` function, but not in the `validate`.
Could be called "BlockChanged" (and "Blockrap-ZZZTypes" or "Blockraprap-ZZZZZZZZZZZZZZ;
I wonder how many users might have used `features_agent` for these
Do we need to add it here too?
Are all of the code paths where all the others will be? If not please add a separate PR to make them consistent. I'd just call it `parseChecks`
`update_policy` is `incoming` in this module, and `update_policy` is defined, so no `incoming` arg should be used. This is a bit confusing. How about `update_policy = "incoming"` or `update_dir(path)`?
You should be able to use `this (applicationDelegate, window)` here and in other places too.
can we just call `selector` here?
Why do `bool isFastSyncTransition = (_blockTree.Head?.Genesis ?? false) && toBeProcessed.Number > 1;`
What about the old name, which is a bit confusing as it is used for other packages?
The # #Resolved needs to be utf-8, not utf-8.
I would move it up so it is only used in the `else` block.
Is the name of this function used?
Please add a trailing comma
shouldn't the name be changed?
Don't we need a prov view check anymore?
You may need to do something similar to what you've done in the other PR.
@gustavonalle I'm not sure it makes sense to put in the context of create_database function?
We have some sort of information about the name in a lot of places. Can you provide more information here?
`validation` and `max`
I think we should remove `@Nullable` here.
Metrics/LineLength: Line is too long. [94/80]
I'd like us to remove this function entirely, and just add a return type to this function.
Would be nice to test the `<String>`.
Instead of this if condition, can you check if the object passed in `model.schema.base.options.strictPopulate == false`?
Why this is needed? When `Builders.Build.A.Block` is blank, this is an internal test.
If ` preserve_backslash`, is it necessary to use `str`?
Is this a breaking change?
What is `setupFile()` here? Does it have to be covered by the rest of the file?
I don't think you have any idea what this line is testing, but if you're writing it in one line I'm fine with it.
I'm not sure why you are adding those imports.
We should probably remove this, it is not used anywhere else.
should be a single `static` property?
This line should be removed.
Isn't this already covered by `versionPath`.
It looks like a violation without a violation here - I'm just wondering if this can cause any issue since `violations_tablename` will be passed to `Lolations_tablename` as a violation?
Could we use `ExerciseWithProgressQuery.new_exercise_ids` here?
can be removed ?
It'd be nice to have something like `compute_max_num_parallel_readers(data_reader->get_num_data(), model, num_parallel_readers);` for this, because this needs to be revisited to be consistent with the word `compute_max_num_parallel_readers`
Please add a space before `,`
I don't love the idea of having two nodes with the same length length. Maybe the same same is for both the old and new length length.
please add this to the other one too
I'm not sure this is correct. You should have `message['message']` as default.
Can we just set the cli-input-yaml flag?
why this change? can't you just do what you have to do?
You can use `import string` here
`getArtistName()` is not used anywhere. I would rename `getTrackName()` to `getConfiguration`.
Can we move this to a new field, after line 162?
Why does this fix the problem if we don't allow `len(country) == 0`?
Could we use QSignalMapper::mapped instead?
Why not just stopGPGAgent?
I am not sure we can use this here. For now it should be `protostuff.runtime.model`
I think we could change this to a `context: { reason: {} }` so that we don't have to explicitly mention that the user's `cancelled` doesn't get updated
Can you use `UTFCatalogCatalog` from `arguments.promotedCatalog` instead?
`data_arr_host` needs to be passed in as a local variable.
You can probably add a `default: `false` here
Can we use the validation error message directly? I think `default` is not really correct, but I think we should use it to ensure we don't care about what the error message is.
It's a little confusing to have a topologyDriver. Will reword as "unable to connect to a peer %s" instead of "unable to connect to a peer %s" or something, as that's what it is doing. I'm not sure it's a good idea to make the topologyDriver more explicit.
I wonder if we should just remove this and move the logic to the `get` call instead of this new one. In that case I'd just delete the `Event` function.
shouldnt it be `!=`?
no need to check this?
@davidjumani do we want to get rid of this? It's not a problem with the existing API - it is still a case of a non-fixed record.
Can you add a `TODO` to the end of this line?
Do we need a check to make sure `_pin` is set?
Should this be `CellHead`?
This looks wrong.
I would use `getReference` as it is used only when a `<=` is missing.
What does `Unless there's a reason, when there is a new app with app with app with app with app with app with app with app with app with app with app with app with app with app with app with app with app with app with app with app will be avoided.
This file should be removed as it's only used in this file
Why did the virtualTree change here?
`mdcache.Delete()` does not make sense, it doesn't, so you can remove the `SetUnmerged()` call.
This check can be removed if it's no longer needed
Is there any reason why I don't want to make the `config` parameter exposed from `Config` instead of creating the `config`? Or does it make sense to use `NewExporter` instead of `config` for it?
You don't need the "currentPlayer" part of the test.
Could this have been `null` by default, if `zip_code` is `True`?
What do you mean by "Checkpoint" is set to agent? Should we be more proactive and more explicit about this?
I would rename the property to `InnerInner_FIRST_TIME_EMPTY`.
@gannka @johanste : if you are using `goldenRetriever`, we could also use `!core.deleteBlobs(fileIDs)).delete()`
This can be simplified
I would prefer to avoid `nil` by default.
Could you add a JIRA to track this?
Layout/TrailingBlankLines: Final newline missing.
why are these tests now public?
"if there's a node named constant or "req"
Please remove this file. It's not being used anywhere.
@DaanHoogland what does this do? Does the `toJSON` format do?
Same as above. The original code is not NULL.
Do you think it is worth it to have an overload as well? I would expect the default to be `false` instead of `true`
We can just use `nameof` here.
Shouldn't this be the actual error if it's `SERCOM0_USART`?
Curious, any reason for this change?
`self._binding_num` already exists, so don't need to declare it again.
I think this test is a little too slow. Could we just remove it?
Why is this needed? It seems like we are already passing the `AssertEx` method.
This should be changed into `registerSchema` as well (and in other places below).
I would suggest to keep these as the top point in the function, as we're adding them.
What's this for?
Why is this line needed?
Isn't it better to put this on the previous line?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think it's worth noting that these record fields are in a static method.
@saghul, are you sure this needs to be removed? It's a change in behavior so it needs to be added to `build` in the constructor.
why we have it here?
I don't think we should do this here
The docstring is really confusing. Maybe `copy_type`, `copy_type`, and `copy_type`, or something like that?
This could simply use `ctx` for other identifys.
Would it make sense to put the code in a constant somewhere, to avoid code duplication?
This should be an error too
I don't understand what this is supposed to do (or at least, a potential NPE) where the `conf` PCAP file exists.
The `sourceNames` property is not used anymore and can be removed.
I'm guessing we should just call this `lvis_v1_instance` instead of `coco_instance.py`.
You don't need to do `<th>hi</th> <td>` here.
Can we use the new version of this property here for now, rather than adding a parameter?
I think this will be useful for users in order to be able to find a instance identity, which would have caught a problem for users.
Shouldn't this be `if (total_instrs == verbose_size(max_bb_instrs) >= 1)`?
Why is this one needed? This was only added when `type types` is not `""`.
I don't think this is correct. `getParentSvg` is an instance of a `Action`, but the base method that is not being called on the base object. The first two methods in this method is a `STDOUT`. The second one has to be called `getParentSvg`. The second time to get the `sStackTrace` from the base `baseVal` and `x` and the first `sStackTrace` are a `STId`. In this case we can only call the function with the base object and pass `null`.
The default config for local devPort is called when the node is not set
Why the change to wit here?
Wouldn't `conf.iface` always be a `_` field?
Why not `LicenseAdmin.register LicensePermission` ?
What about a constant for the `manifest['name']`?
What is the difference between this and line 156?
This looks like it can be defined as a constant and should be refactored with another method
Why not just bool?
$aliases is already defined at line 342 and we should not introduce a new parameter (which is why it is removed as it is not a part of the PR). Is it the case here? What will be the correct way when you use the new parameter with the new parameter ?
This method is not used anymore.
I'm not sure it's a good idea to add this to `NewNew()` instead of `ListEvents`.
I'm not sure we want to keep this test.
I'm a little confused by this. What is `binlog` for?
This can just be `_url_with_form` instead.
Is 10 * time.Second still needed?
shouldnt we make this a zero check? Also the code is not always 0.
Just noticed that `run-as` is now unused, so why remove this?
I think you missed to adjust these two imports?
Was this supposed to be in the same transaction?
Why this change? The text seems to be a duplicate of the ones in the file.
Don't need to have C_scribers_ to be consistent across tags. It's a hardcoded value.
Can we just remove this include?
I wonder if there shouldn't be a `Use_form_form` class for this. You could just use: `Use_form_form`
not needed, we have the test suite below
This is not the same sort of thing that I noticed. I don't know how I feel about this.
`if (component.base || mountAll) component.componentWillMount();`
Please add `TODO`
Can you add a `EXCLUDE_COMMIT_SEALS_AND_ROUND_NUMBER` check here that `EncodingType` and `POST()` is called after `--IF-nodes` is called?
F4024f0a72e7a6c3aa4d6c7e4e9c3a6e5; resolved:0--> What if we moved all of these into a common test file that will fail? I'm not sure we'll let it fail to get the same behavior as we already have a feature flag.
Wouldn't `Debug.AssertProvider` mean the same here instead of passing around the constructor?
In general, you should be able to use `countly.events.views.js`. In this case I think it should be renamed as well.
We can probably use `ax` to avoid `iframes` and use `ax.ax` everywhere
For consistency, we should just use the `self._bump_and_store_timestamp` function.
This can just be `MemoryDiagnoser` because it doesn't do anything in `MemoryInfo.cs`.
`localFieldPath` has a default value, so we don't need the variable.
I think this was not dead code
does it make sense to use the `protobuf` package name rather than the package name? I would use `Lock` instead of `Lock` as we don't want the package name name.
Why do we need both paymentChannelCmd and paymentChannelCmd?
This should also throw an `else` if `input == "true"`
nit: move it to a separate commit
If common.HashLength*2 is 1, then this should be common.hashCode()
This should be done in a separate change - it will cause the flow to be finished in case the parent flow is not finished
This should have a test for this. Another alternative would be to use a different variable name: `NullPointerException`, `mFields`, and the whole thing, `mCharset` (or `mCharset`)
Please add an example here where `ADRename` is called.
You're still using the version string here?
@jona86 @bparees - do you think we should be removing the `debug` method and just use `info` directly?
Is it needed?
`isHydrating` is an unexported variable, I believe it is OK to put this check in a separate function.
What do you think about renaming this to something more generic, like `_` or `___`?
Is there any reason we don't just copy this in theory?
I assume these are the changes that I've been working on and missed. I'll let it be a followup.
Please remove this file.
This will make the "EnableProcessBlockStats" parameter true since this is a part of the next commit?
Can this line be removed? The lint lint is now always the "linter" section right?
This doesn't do anything. The `init` is a reference to a reference to the `*` in `init`.
You can remove this line entirely if you do that.
I think it's better to just use `unsynchronizedStaticMessageDigestRule` to ensure there are only single nodes of `unsynchronizedStaticFormatterRule`s.
I wonder why you would do `Keccak.Zero` instead of `Keccak`?
Can we put a hash somewhere in the hash?
This is not an issue. This has nothing to do with `ColorRed` and `ColorGreen` is the same as before.
So we are now removing the `defer` version at each iteration? Is there a reason for that?
Should we use `.map` here as well?
Just a thought, would this method also be called `printGL` or something on a whole project?
I think this is not the right answer.
This should probably be a verb, not verb
I'm not sure about that, but this is a change in behavior.
This file doesn't seem used?
nit: you can remove the extra lines
Is this a BC break?
if we move the if statement to a separate line
I think we should remove this.
I don't understand the purpose of this change. Why the change?
I guess we should do this for all versions of the same thing as the `IsGCOp` function above. The latter way we can handle this for the other side of time instead, and we can add it back to the other side of the specific things.
I would suggest `getNumber()` for top-level functions
I'd like to see this change in the commit message. I think it can be improved to change the docstrings for the change to `object()`.
I don't think we need this for the mount, since we only check if a mount is in the middle of the error.
I'm wondering if this will help to be in the `config.js` file in `/build/install.go`... but I wonder whether it's okay to not do this as: > If we don't want this to be a specific file in `struct` it will be ignored because of some config.
I'm not sure what the `receiver` is...
I don't think this should be in 10.x?
This doesn't look correct. We already pass ErrUnderpriced to a so many instances of the same value from `0` and now this is not correct. Why is it ok to just check the value for the correct price of a `*` value?
I'm not seeing any references to these imports, is it really needed?
The parameter is being passed in here, but that is not used anywhere.
In general, I think we should use 3 of `cs.dirty.Created()` in order to keep the `is int()` calls to dirty, and check for that here.
This method isn't used anymore, so can remove it.
This import should be removed.
For example, `typeWidth` could be null for this case, I would suggest adding a new type annotation.
I wonder if it makes sense to use the current node and 3rd party reference to determine the encryption structure
I would not change this to use a `llnl.util.c` string. It doesn't mean that it has a single file, but I don't have a strong opinion at this point.
why is this removed?
Does this need to check that `proto > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batching protocol > batch
Can use `run_local_scheduler` from a common function?
I'd use `string errorMessage` here, it's already a string.
This is where we pass the info for each request, not the client.
Shouldn't `const int` be the same as `vmultiplier > min` here?
I'm not sure if the `Organization` here is the right approach. It should say `Organization_parameter` as the type.
this is the change that was needed in master.. but this PR is merged to master..?
I think you can just remove the `MessageReactive` and `MessageSource` altogether?
I am not sure if there's any benefit of keeping this method as a `string` since it's not really the actual string.
Why is the 1.6.3 required? We have no idea why.
This test was never being used.
You can use `WPSEO_BCS_redirect` to prevent the full use of a full name here.
If we do this now, do we really need to add the type of the `DataType` field?
Maybe we should rename file. render method should be "render" or "bokeh" for consistency?
I'm thinking we might want to rename this to `vmvm.New` so that it's not a public interface.
Why are we not using `getResourceType` and `getResourceReference` here ?
This is an unrelated change - but this line change was not committed.
I'm not sure what the best format here is, if the combat parameter `combat` could be non-null.
This was added for nothing now right? I see we're not relying on this, but is there a reason why it wasn't done after we've decided to move it into it? Also, the link is in the `./pants help` file. It doesn't look like it is needed at all.
I think we may still need to import `dager` here.
`getSdk` is used in all places so let's rename it to `getParamsFactory`
I think this may be a good idea, because if the user explicitly set the `nil` value then they would be able to send a nil value to the value. I would suggest to do this in a separate function instead. This way, we can avoid having a non-nil value.
Isn't there a requirement in the DB?
Maybe we should just be using this instead of the serviceged serviceged as well?
Are you intentionally adding this import now?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should we make a `import github.com` folder and use it here?
I'm not sure if this is the correct fix. It doesn't seem to be related to this task. @krwq @wangzysztof arrives in #12746 (I think).
Hmm, why did you need to check for the stream stream here? It seems like it should be the other way around.
Why removing these? `mortbay.util` is deprecated and is never used.
This needs to be added to the CommandOperationV2 interface.
This was a bug before... it was just me a while to figure out why it was done this way :/
Line is too long. [87/80]
Is there a way we could make this a `/* XXX i#3307: unimplemented`?
How does the interface get always an empty string? I don't see this interface being passed by the end of the method.
It'd probably be best to use `bytes.fromhex(pubkey_hex)`.
This will fail. Is it possible to just remove the output?
I would prefer if we used to check here and if the `player->sendTextMessage(MSG_INFO_DESCR, "You can not trade more than 100 items. Otherwise we'll still be able to check for the trade.
What's the reason for this change? Did not see any related changes in this PR or just forgotten in the other pull request.
Wouldn't be better to call this `setScopeListener`?
I think we need to update the refs name to `refs`
I don't get this change - the `mne` ternary operator was using this `mne` because it has the wrong `mne` and I didn't see any obvious improvements.
IMvxChildViewModelCache()() never throws an exception, right?
Could you explain this catch? I'm wondering why you wouldn't just catch `exc_info=True`
This file should be deleted.
I think this line can be removed from line 138
System.out.println can be removed from here and in other places where you use it.
This should be done in a separate commit or something so that all the tests pass. Also should the `enableProxy` flag be moved up from the config?
This line is not related to your change, but I'm not sure if it's the right change.
This is likely to be an actual problem, with `@typescript-eslint/eslint-recommended` (which is what it does).
Shouldn't this be `IdleTimeout`?
this file is not included in this file
These changes are not required. I'd suggest that the code is not required to be in an `else` block that will be sent by it
Please remove this.
I don't see the corresponding options in the PR. Is there something that would be a good reason to use an option to set the options? If not, I don't think we need to set all all keys in the same manner. The idea was to avoid creating an options object as the key is used. I can only find the options for all queries, so we can just add all keys to the group.
This will make the log level a bit cleaner when you just use the lower level pointer, rather than doing the if.
What if the `Reinterpret_cast` call is not `to` at this point?
should be `0`
why is it a map?
Please add a blank line between tags and summary for better readability
Should `billing` be a `@actions` (or anything else)?
> set `suspended: true` during hydration because we want the actual markup in the `pendingSuspensionCount++)` method.
You should use `log.info.debug` instead?
This looks like it is missing a colon.
Can you put this constant in static const? The reason I am not familiar with this constant is to be used anywhere else, but it is a very good thing and it might be good to keep it consistent.
Maybe I'm missing something, but why is this different from `RevisionField`?
Should be reverted
`*` can be replaced with `lat *`.
@nmittler - What's the reason to change this to `account?.Nonce ?? 0`?
This needs `null` check. It's also a no-op.
What about including block size?
wonder why the indent is not on the sentence?
Is the newline here intentional?
The else branch is actually not needed here, if the if statement is not needed.
I am not sure if `--none` is a good name for a parameter.
Would it be better to catch the exception? Also why not have a function of the host?
I don't like this variable.
whats the need for this step?
Could we make the `runCCompiler` call `targ` and `target` parameters passed?
I think `results` can be used directly in `NewFedEventsBundle`.
const const?
you could add this to the other TODO below
No need for `final` here, as this is the only case where the property is `final`.
`to_string` is not used anywhere?
Should also be handled by iptables-save
I'm not sure if this will break if we are not using async_thread on every single page or other asyncWriter, which will break existing page, which may have been the case of multiple instances of a different index that will be sent from the previous one.
`ASTAnnotation` is the preferred name. There is also `lombok.NoArgsConstructor`
This function is now invoked in `LOADLOAD`, so I think it should go to `LOADLOAD`.
We can't change it to Params, and the code below is not "either the correct location for the Params or the ELEVATE_DOCS_WITHOUT_MATCHING_Q"
This is a change in behavior, but is there a better way to fix this?
I don't think this will work with JIRA. It doesn't seem to be a problem, but is it really not?
Why not just ignore `ipPD.antreaSourceStatsElementList`?
Why this change? Isn't it going to be changed after removing `num_simd_saved` from static?
why this change? Is the `2.2.1` necessary to `2.2.1`? It seems it is just 1.
`self._subject` not needed, right?
This file needs to go before merging.
This can just be a `Type`.
update these to be renamed.
@matt-gardner, I think this will be more correct, when when the list is present, the template will be the version that the present value will be the path of the current hash (we can't really be sure if the template should not be present in the hash hash)
NIT: can we call it something like `*ExternalEntityEntity`? It doesn't have a control script, but the control script is still a control script so it's not just just a control.
It should be `gcnArch`.
I'm not really a fan of this, I think it's necessary to add to `MPP` and `MPP` properties.
@matt-gardner How come this is coming from?
I think the term `--verbose` would be a more descriptive name, e.g. `--verbose`, and `--verbose` would be more idiomatic.
Should be .0 so that it is clearer what's the default.
Do we need this as ServiceKey should be named aseconfig.
this can be removed
I think this was also used in `'media`
I like how this is used, but I am wondering if `self.assertEqual()` should be on the bucket. If the first line is still needed, we can get rid of it.
Probably worth adding an explanation in this case to reduce coupling.
i think you can remove this `ftxVersion` function now that we have `NewPoolConfig` in `NewNewAllConfig` which is already set.
So if exp.getAddressDetails returns an error then the result will not fail.
Why change the param name?
I think we should just be looking at the error here, otherwise we'll always get the right error if it's set.
Is the old method still used?
I believe we have no test for "Metric"
can we make this configurable?
This import should go before the last group of imports.
I think we can also include this on the `aws_sdk-s3` component.
this is not correct. It is a property of the object and a boolean.
What about TODOs?
@efiop, is this the only use case that wouldn't happen if there are multiple entities in a map, or just the shared code?
Nit: `return` would be more consistent
I wonder if this should be something other than an else in the first place.
This is wrong: `getMountBySync(player->getSex(), non-blocking));`
should be protected
Could this get triggered in the `getStandards` call?
I think this will actually do the same as `irregular_dims=True`, right? Or is there any reason we need this?
Just checking, it doesn't work without the extra level string. This PR is about testing the output of the hash string. I think we need to do the same here?
Would it make sense to add a space here so thatpadding and theAllocator is not supported after allpx are set?
This include block shouldn't be included in this PR.
I'm thinking the "normal" check was correct here for the menu?
Please add docstring
`clearfix` may return the result ID as an integer, so this may be correct?
This one also does return the wrong thing. You should revert this.
`alwaysOk` is always null, this means that the check is not added to `results`
This isn't right. We should probably use `sched policy`
should be default true?
We also need to check for `self.secure`, right? I see we have two different options, but this is a bit strange in the future.
Why do we need expireTableMetadata?
I would suggest moving this to a `return`, since it'll be called multiple times.
Why is this necessary? You can return receErr directly in the function signature.
This is wrong, `caddytls` will be used only in a single file `Searcherb.`
The `OC.getLocale()` returns the default value, we need to return an empty string and then use `OC.getLocale()` in the context.
I think we're missing a `interface1` here.
It would be nice to have this in the `Rails.toml` file since it has been already added in the `Rails.toml` file.
Shouldn't the first `allocate` here be the last one?
I'm not very happy if the eval would come back to 1 even when this is not true? I can't tell when this happens.
Why are we TODOing here?
This should be done in `pkg/constants/docker.go`
please also add 'debug' in args
Is this used anywhere?
can we avoid the vda1 config for us?
`fstream` is only used by `ios_base::failure`.
This is a breaking change. We'll have to think of a way to throw that. I'm not sure whether there is a better way to prevent the error handling from doing this.
This isn't necessary. You can just use the test `--testing-T`
why are we doing this as a separate thing?
This is the only place where we're using `myId`. I see that you use `myId` in the service and `myId` in both places.
I'm not sure this is the right change.
Should we log the error or log the info?
Please remove this `#include "stdexcept`
Maybe add a docblock for these to the end of the query and to avoid creating a specific `return`s.
I would use `gulp` here. I'm not sure if it's worth it to have it, but it's also a separate PR.
Please put "contact" at the end of the string, otherwise there is a chance we didn't have to update it later.
`with Invenio.ext.assets import Bundle`
There's no need to pass in `CartItemTest` here, because I don't know why it is a public class. It should be a class of `Test`.
What if the cachedUserInfo was present? If there are no cachedID with a present, why? I'm not sure I like the idea of having an cached cachedID in the controller to check if there are more than one cachedID, but if we are not.
forgot to remove this, and add a `generated.uncuncover(generated);`
@nmittler - Is quietState ok here? Would this be better as a check in the notification?
I'm not sure that this is needed?
`repo_private?` and `force_private?` should be defined as nullable, and only if `repo_private?` is set, `force_private?`
GetActiveApp is already an int?
I think that these changes should not be needed
This is just a bug!
I think that the `key` can now be replaced by `TFeature`
should we do this in a try?
`click` is not defined in the `element_to_be_unclickable` method, and I am not sure how the element will be used for it.
Don't worry about using `dataFile` in this class. It's a very broad and could be confusing.
can you remove this?
I would keep the old function name for this new argument.
This import is unnecessary if you're already creating a context in this function. `pkg/core/context` will only work on `pkg/core/context`.
This should be marked `PREFIX_NUTRIMENT_LONG_NAME + "vitamin-k",`
This is not correct but we should not disable it when we get `Treatment`.
This change will break on other refactoring, as it will change the code to use `httpHandler#Deps`.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Space inside } missing.
Please add a `@Nullable` annotation for this. (I see you are not testing for it, but not sure)
What if we called this `shell` instead of `a4a`?
Is it possible to remove the `sarif-1.0.0` prefix since we don't support version string here?
This file is now unused.
I was thinking of a better naming.
nit: rename to `Local`
This exception is not thrown.
Hm, why did this get removed?
The `select` call below does not seem like it should be here, but rather at a point in the PR.
What does this do exactly?
This is now done on the windows module, not on my machine.
It looks like you're just using an int value for `5 * time.Second`.
Please leave this in another PR
Why are we passing the name of the param here?
Just curious about the point of this change. The `Bootstrap` should be `Data` instead. The `Bootstrap` should be passed to the `Data` and `Data` should be set to `Data`.
I don't see how it should be `KeepTraces?`... it should be checked in `SamplingPriority.AutoReject`.
Should this be a `ca.X` file?
no way to do this, just `!procedures_prototype`
This could have a trailing period.
Please add a space after the `%>=` in `lib/`
`messageFrameStack.peekFirst()` will not be null if the operationTracer is null, so the process will not be empty.
This seems to have the same problem. I assume this should be just the `SERCOM`?
Same here, can we use the same indenting as the one above?
This is a breaking change. Please revert, and fix the spacing.
I believe the `implemented` should be kept here, right?
I'd use an enum of `0` here. Otherwise we could also just override a `const` in this function.
why is this removed? This file is no longer used
I think it may be a good idea to use a more descriptive variable names: `showPrintMargin` `code string`.
I think you need the version change
I don't think these are needed for SDF package.
There are no changes on this line.
This does a bit of a nit. It may be better to write a `get_builtin_guid` function that returns the writer and returns `this` (which will be called by the actual stack) instead of creating an `destruct` instance inside each `if (this)` condition inside the `rails_user() { ...} else { ...}`.
How is the `no_window` argument used now?
@deads2k how about we add a `TODO` here?
I'm not sure what the `x` means, it will be an integer? Should we be setting `int` on the `Action`?
@rhatdan @tnozicka this is the right approach. I think we want to default to a `apis.forwarding` instead of `--forwarding`. We can remove this bit. The same applies to other tests in the code.
Why are we only adding the options? If we want to keep them we should just default them to the correct location and not break.
Why not use `!` ?
Is loadingUrl.getHost() needed anymore ?
These can still be converted to `chains::Note` since they do not use the same concept for every single release.
We're not actually using the schema schema here - we have to look into the schema schema when running `createSolrConfig()` and `createSolrConfig()`
This is just a copy of the docstring too.
This should never happen. Instead, use a constant in globber, it should be globchic or globaic, like the other globber.glob()
`config.AWSRegion == ""`
I believe we need to bump this to `_version` too
is it a mistake or was this a separate thing?
Is this intentional? It doesn't seem like we can use the `go` package directly.
I'd probably do something like "unless OrgAdmin or OrgAdmin for this index."
I'm not sure if it would be better to use a different analysis than hard coding it, maybe a different analysis (or something like that).
Please don't use `collection()` as the default.
This file was really dangerous. The only reason we have "this.openqa.selenium.Screenshot for usage and" is in the screenshot output.
Please leave this in the `if`s and remove the empty line.
Shouldn't we be doing `{..}` in all cases? Or just do `replace("Countly", errors)`?
Why change this?
Just `Dict`. And, if ` Iterable` is `None`, this is only used for type checking?
remove empty line
I think this shouldn't be here. The cluster should not be present.
you should avoid using $product->getRef()
I think you can avoid using parentheses for lines 231-1833 and 746.
This is not a global variable.
Nit: this looks like if `NETGetType` is `if` it should be `NETGetType` since it is the other `NETGetType` that can just be deleted in the future.
I don't think this error is necessary, it's just a `return` statement.
These tests are failing because they are in the test suite
how did this get executed?
Is there a way to set this to `/`? I don't see that used anywhere (if we do that).
this will break backward compatibility
Shouldn't we have some default number ?
`ok == nil`, `retry` will be set to `false`, no? Also, `fism` will be set to `true` after the `if` condition.
why do we need `ARM` here?
Use the new Ruby 1.9 hash syntax.
Can be const?
We should do `exportPortal(...)` instead of the array - it's possible for the overloads to be called without a second time.
should we have clone instead of the next `hooks` level?
not sure why bool is removed?
I'm not sure what this is. It seems a bit of a fan of `0.0` and the `5.0` would be more consistent with the rest of the codebase. It would be nice to have a separate migration for the rest of the codebase.
I am curious about how this is used, why does "crash-data-subrow" imply we're using the data object here?
I'm pretty sure I'm fine with this. If the failure is in `failed_files`, I think it would be nice to move into `assertEquals()` in `setting()` so the check doesn't matter as well.
Why not add the event twice?
@kennknowles do you know if this works with a non-nil pool pool?
I think we could default this by default.
`@FunctionalInterface` should not be used. `SampleTransformer` is a `_` in the root of what you are doing in the root of the root of the root of the root of the root.
if not return (char *)
Why not just do `String ?`
Do we need to also add a `#pragma warning disable disable`?
Could this be a function call?
This should probably also be required for the cpp-name case.
This will be removed as well.
Why `npController.networkPolicyListerSynced = alwaysReady` instead?
I'm not sure about having two `autoEncryption.cryptdConnectionString` value in the code. Should it be `win322` and then we are returning a config object and only assign it if it's true for both `mongoClient.s.options`?
Should the switch be removed after you use it? (e.g. it's not a switch before it is called)
This change is incorrect. I don't see a guarantee that the span id is in the SpanContext span. It will always be present.
I think the error message here was a bit confusing. "ejs" is what the message does, and then "semaphore".
This is a generic error, we should use `Array.Errorf()` instead.
Can we move these methods to the bottom of the `Telemetry` class?
Maybe we should add the license header as well.
is this a valid enum?
I don't think it's the best way to go, but this test may change in the future (if you don't want it) to run with an existing test and then run this test (if you do it)
Why not use `assertCDATA` or `Error`?
I'm not a fan of this, but can be simplified to `build.Join` for consistency with the other tests.
Please don't use `==` in this case. It's important that these are valid.
this seems weird to me, why is it not possible to call `errShouldUnload` at all?
This is the main process for query, `Topic.find_by_slug` is probably not needed anymore.
I don't like the name.
what if we moved this into `executionTask.go`?
This should not be `validateFlowExporterConfig`
I'm not 100% sure why it is needed here.
The logic here is to not allow the if or not we are trying to use Qual. I think we should add `if (hasQualifiers) {` after line 533.
why is this removed?
Please add a space between the open parenthesis.
I guess we need to add these to the `Notes` section? Or we need to update the `Notes`?
This could be `$authors = array_filter($authors, function ($a);`
This was not working before. I don't think we should be using this here. This only happens to get raised in UI.
The `keystore` is now removed, and it should only be freed on `*keystore`.
This line is useless, please remove.
I think we should still be calling `Text.standardize`, but this is a bit more of a fix
why change this parameter to false?
Should it be "source" instead of "source"? I think we may not have this concept.
this is a bit scary I think... if I have a different name for "api_quota". maybe we could do this in the future if not set?
This will fail the V8 build I'm not sure if you need to change the default package name to the interface `hyperledger.besu.evm.Contract` or `hyperledger.besu.len( "")`. I think it'll make it impossible to use a single `public static` instance instead of just `precompile`.
Can you also remove the parentheses here?
It's should be alphabetically sorted.
`equal` should be removed.
This line should be moved to `api`.
I'd say we should just have this be `Config?` and then reuse it in the `config` struct (`Options`). I'm not sure we'll be using this as the config struct for this PR, but we might as well just change the config field to something like `config_Options_Options` or something else.
I think this can be imported before the class name, and the class name is changed.
Should we call this `GraphQL` instead of passing it in here?
This is the only place where we should be using it.
why not just remove the old code?
Looks like this should be removed.
I'd rather add a new constructor to avoid code clutter.
This will need to be updated in the next PR.
Could this just be simplified with `(int, error) (int64, error)`?
Can you fix the indentation here ?
`cls` does not sound that it should be an `else` at the top of the file. I would recommend adding an `if` and a `None` after the call sites.
This is still a good use case, but I think a better description would be to make it more readable
I'm not sure what this is testing. We need to check if `listen_host` is in the `function` model (it should be the last list of resources that uses this kind of `localhost` and then if `enable_listen` is not set to `None`), otherwise, we won't be able to handle this.
Please use `isIgnoreSize(true, exact)`
I'm not sure why we remove this bool now ?
What is this error returned here?
Why not just `throw`?
What happened with vurus-wrapper.py in v2? I'm not sure why the file doesn't get read anywhere.
Why not use `mapServices` instead of `ListServices`
No `Package::getName`s in these magic numbers.
Why does this change the behavior change? Are we sure that we still want to support this?
@xblh @jridgewell Is `globalVars.appDir` necessary? It would just be `+=('lib', 'nvdaHelperRemote.dll')`
This should not be `DisableInMem`. Can we just use `How does the struct need to change?
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
The name `obs` was used for a name change, it is used for a different name, and the test was wrong.
If we are only using this exception, then we can still try to catch this specific exception here instead. This is the reason the exception is thrown in `try` (I think).
I don't like this part.
Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
nit: I think we also need to make this a const
This update is already covered by the `update_all` method above
can you add a check that the request is empty and the user doesn't see it?
Is this change required?
What happens if the previous logic is not initialized? I'd expect to be able to see this in a different way.
@nmittler - Is this an API change? I can't remember if it's intentional...
why is it `org.joda.time.Period`? I guess it's not used?
I don't really like this name. I think it's the proper description.
This seems to be missing a `char`
This looks to be unused
why not just use a `TODO` here?
I don't understand. Why do we need this change?
I don't think this belongs in this PR, but I'm not sure it's worth it in the PR.
Layout/ExtraSpacing: Unnecessary spacing detected.<br>Layout/SpaceBeforeFirstArg: Put one space between the method name and the first argument.
Can we call this `streamHandle` to match the other call site still? Otherwise we might be able to call the `Handle` on a different line.
We have a default options, we should not be using `cursorState` as default options. We should either either add a new options or add a options as default.
why change this?
This might be missing the `bucket` variable above, but `a-z0-9][-_.a-z0-9]*)` will be removed.
The `ApiModel` for the Java Java months of the `Client` package is not in a ApiModel, it's no longer a good practice to add the link to it.
should we remove this?
Maybe we should call this `containerized` for consistency, as we'll have some other flow that need it.
Is role an role of role correct here or does that mean the role is not running on Windows?
Shouldn't this be `booleanBooleanAsBoolean` ?
I'm not sure why we're removing these.
Why do we allow for node to be non-null?
this is the `SvidPath` part of the code. It will be helpful to define multiple projects (which may have been the exact same blog data)
Shouldn't this be `string?.ToString()`?
I'm not sure how we should be doing this, the `lower()` is just forcing all the implementations.
We might want to move this to the `BadObject` file, as that's the default we want.
Isn't the TBB_INTERFACE_VERSION already set on line 475?
I think it should be a bit more specific (and not a part of the explanation), maybe just `# put the <p>`
please remove the trailing slash
Align the parameters of a method call if they span more than one line.
I believe there might be other uses of `curTagCount` which use the `Metric<String, String>`
I think the previous one should be renamed the `none` value, not the current one.
This is an unrelated change, you can remove it.
this is the same logic as `StandardCharsets.log('foo')`
This seems like an odd place to make a copy of the list, but I'm not sure that's correct. I think it makes more sense to do it for the `DataContainer` section since that is what we're dealing with.
Not for this PR, but we should probably just rename a function or something.
This can be a single `rootId`.
This is one space missing
Why not use a list of `Fee` and the `return` ?
I don't know if it's a good idea to make this type specific, but I'm wondering if it's worth making it a constant for the default value. It might make it easier not to add in `lib/constants.go` if we're going to have to.
I am curious - what is the difference between `v3` and `<v3`?
This line is not necessary
I'm wondering how we will be doing this in the `client.core.time.Now()`?
I am not sure about this. I think it may be a good change. I think `--rpc-require-chainid-in-txs` and `--79-in-txs` would be more clear, to say something like `config.compute_version` which could potentially lead to bugs in the future. I would rather say `config.compute_version` instead, and let's use that to make sure we have the same effect.
