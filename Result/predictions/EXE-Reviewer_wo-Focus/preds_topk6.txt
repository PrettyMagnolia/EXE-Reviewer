How about putting it in `newnewtransport()` ?
I'd suggest to put these methods on a new line. It's easier to understand.
I'm not sure what this is for?
I think we should be using the new `isNaN` here and not the new `if`
I'm not sure what this is about. `isNavigateURL()` should be enough, and `getNavigateURL()` should be called.
I think we should keep the other way around.
Is there a reason to do this import at `email_factory` level? I'm a bit concerned about `email`.
This can be simplified to just `snprintf_s_iiii`
I would prefer to avoid using hkl. It's not a blocker for this PR, though I'd rather have a log.debug arg in the log message that we can't use here.
Nice one! I think the condition should be `createState` instead?
why do you need it?
`GetSharedMountValue` seems like an overkill. I'd like to move this line into the `if err != nil` block.
I'm not sure about having this method here is a good idea. The `render()` method is not a `list`.
I would use `StringUtils.Equals(0000000000000000)` here.
We should use zap.String instead of zap.Name
I believe this was intentional, to be able to remove the trailing whitespace on both forms.
Why is this change necessary? The `assertIn` is already marked as deprecated and not used for the new `assertIn`.
You are using `Raiden-\\.L` in this file.
Should we have a test case for this.
why not return directly?
It looks like the task runner was using the task runner, but it seems to me like the task runner should be using the original task runner.
I don't think you should add this to the "NONEXIST_ENABLED" module since it'll always have the correct value for it (it's not a "...." table). Also, you can use `SuluClient_scope` to set this to "non-exist-scanner: ...".
This is a bit weird. Why is this using the previous one ?
This should probably have been changed to `isNullOrEmpty`
We should always be adding new methods for the whole file.
It's not a good practice to use the command history, but the command command history can be used in the UI.
Shouldn't we also check for `Assert(isType (token, TOKEN_OPEN_PAREN)` in here?
Should we move this import to `# noqa`?
Metrics/LineLength: Line is too long. [123/120]
This line was causing the tests to fail because `workingDir` is `final`. You should not be able to remove the `withWorkDirectory` call.
We should add `onPagePresentationAttribute` to `XPresentation` and `XPresentation`, which should be `XPresentation`.
this is just to log the status code, can't it be replaced by logging the info? so if we are logging, then the log should be logged as info as possible.
why not return an empty block?
@jridgewell any reason to use `order` here?
We should add a check here to avoid the NPE when it's used.
I think it's better to just use the `unless 50` here, since it is an error.
Why not `node1` as the default value?
Why is this test changing?
We need to rename this `clear` to `clear` for consistency.
Is it possible for this to be `nil`?
I think it would be more consistent to remove this line.
There is an `C` decorator for `Chain CERN`.
This is the only place where you're using this. Please remove it.
I am not sure how I feel about this, it's not an acceptable action for a simple metric.
I'm not sure this is the best way to do it. This change is not really needed since the method can now be called from another module.
I think we don't need the `VALIDATORS` here, it's a bit redundant, and it should be `VALIDATORS`.
Please use `import *`.
Are these changes related to this PR?
@kring do you have any ideas on how this fixes it?
I don't think you need the return here.
[Minor] Please add a space after #.
Why do we need this one?
I think we don't need this new variable, right?
It would be better to use `creature->isRemoved()` as we have a method that returns false in all cases (which will make it easier to debug).
Is the intention for this logging logging to be configurable?
This should be `assert.ok(typeof lib === 'function', 'mongodb.Promise must be a function, got ${lib}`).
The `QueueTarget` is a function.
I think this should be `if not (pks.__class__.__name__ == 'StreamSocket') and (arch.FREEBSD or arch.DARWIN):` since it's not a part of the context of the context of the context of the form.
@cramforce I'm not sure this is worth it. `AUDIO` is not a list of `video` and `AUDIO` is not a list of `Window` and `Window` is a list of `Window` so I think we can add another list of `Window`s here, and we need to do that for now.
whoa, this is the only place where this is called.
I think we need to keep the old version as the last one.
Should this throw a `StringNotFound`?
This is a pretty big change. Why is it a `rule`?
What about using directory.IsNotExist?
Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
@bparees this is the fix. This is not right. It doesn't seem safe to use `format_balance` for the final language, but it's just a thought.
The fact that it is not used anywhere else now that we're using it to generate the `env_file` struct, which should be defined as `map[string]string`
Please remove the empty line
is it a regression for the Ef/2 versions?
I'm not a big fan of this class. Can you explain the difference between this and the other methods?
Since `padding` is always 0, do we need `int`?
This seems like it should be `parent == subsurface->parent`.
What's the purpose of the `show_accessible` method?
This will be a little bit of a hack, if we want a new API to return the same error for all `table->isExternalTable()` actions.
(style) trailing whitespace
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
this should probably also be a new one (and the one that is already done in the `profile`).
@dvoytenko do we have to catch here?
This should have a different fix in #3377.
I don't see where this change is made.
What if we have 0 or 0?
Maybe `Similar to above`? It's not the case, but I would say `no_replace_variables` is also a special case for the command name. (I guess this could be a problem.)
I don't think you should change this line
Why do we need `.name` here?
I think it might be a bit nicer to make this an interface rather than a `Function<F>`. I don't know if I'm wrong, but I'm a little concerned that this is a very good use case since I'm not a big fan of the manifest (I'm a big fan of the manifest).
why not just `isPaused` ?
rm empty line
This change is not necessary. The `Message` parameter must be used instead of this new parameter.
this will not have the effect of the code right?
Nit: I would add a line after the declarations to make the IDE happy
This looks wrong to me, as it is a list of S3, but the list of S3 is a list of S3 with the other the S3.
What do you think about having this `copy()` on top of each method, rather than having a single `copy()` on each `cmake()`?
This function has to return `nil` in this file.
This function is used by the client (as opposed to one line) but it is not necessary to do this in this PR.
this seems like it should be in an if/elseif block
You're not using the "cstorSPCUpgrade" option in the message.
Isn't there some kind of change to wlr_xdg_surface_send_close() in c#i18n around that?
This change is not needed.
This does not seem related to this patch, it should be a separate pull request.
Is it possible to have all the options on a separate line?
why are you removing this condition?
Can we just use `el.getIsHiddenValue()` instead to avoid unnecessary work with any custom `getIfHiddenValue` has no effect on the `ariaHidden`?
@jglick Could you please review those files and replace `all` with `from *`?
Please add an empty line after `//`
Is this still needed?
This is not used by the container in the container
Trailing whitespace detected.
I think we should keep the same name here. I would keep it as `RequestId` and change the name as `RequestId`.
I think it would be nice to also add the `@param` array in the doc string here.
I think this should be `path_buf[MAXIMUM_PATH]`. `path_buf` is also not a valid path, so it should be `path_buf[MAXIMUM_PATH]`.
this file is missing the `@Nullable` annotations
Also update the doc here.
@jridgewell can you check this is now done in #2780?
What if `GOOGLE_APPLICATION_CREDENTIALS` has a built-in file name that requires `GOOGLE_APPLICATION_CREDENTIALS`?
Please add a type hints for these configs to be able to use the `/run/docker/plugins` struct in the future.
These usings are not needed for the changes in this file.
I'm not sure this is correct. `data = ...` is an array, so I don't think we should be able to use this here.
How about `breakpoint`? This seems a bit confusing.
I think this would be a good idea to check the element's value in `_get_range_async` and check the element in `_get_range`
Can you please move this import up to list of imports? It is not obvious from this PR, but it seems a lot of noise from a lot of imports.
why not using 1593493828L here?
This is a bit unfortunate that we don't want to support `std::distance`, but that's what I meant in the past.
The reason why we have a "kubelet" URL that we use in the "app" URL is because it is not a "kubelet", but the reason why I think it's a "kubernetes" is not the "kubelet" one.
Is `InstrumentationName` not needed anymore?
This isn't a big fan of the name of the package.
Is this necessary?
If it is not used, then use a boolean
nit: you can merge this with `x`
@smarterclayton do we want to set this to false in Prometheus?
I don't see why this is being changed.
I'd call it `canceler` because the context is not a global context, but the context is used.
Why is this necessary?
I don't think this should be part of this pull request. We should be consistent.
Can we add `#send: true` and `#gradated: true` here too?
I wonder if this should be `Until` instead of `deadline`, right?
This will cause a NPE if the error happens.
Nit: this should be `WithoutUpstreams`
I don't think this is the right place to put this, I just don't see the difference between the two. I think the code should just be moved to a new `tryToLinkAgain` block.
Does this need to be a list of security groups?
I think the whole `else` should be on a single line (which is a `where(created_at: range[:start_time], [range[:end_time])`).
can you check that the number of reply has been closed?
I know it's not a requirement but I'm not a fan of this - but it's not clear what this field is supposed to do, it's going to be used in the future. I'd suggest we add a `field :stringifiedSymbol` field for the `store_in collection: "stringified_symbols", `field :stringifiedSymbol` field to make it obvious what it is doing.
If you change the coma_separator into a function that returns an int, you can change it to take care of it.
Can you remove the `ERR` here as well? I do not see why we need to change it.
We need to also include the version number. We do not want to override the version number in the website.
suggest `klog.Infof("there are %d nodes need to sync secret, operation: %s", len(nodes)).Infof`
This is not the same type as the parentProvider.
Is the `from_motorway` variable used anywhere?
Use the new Ruby 1.9 hash syntax.
why do we have to get HRNet in python? can't we just change the line in `spec/services/tests/config.py` ?
Why is it necessary to replace `first_line.c_str()` with `first_line.SEO_first()`?
I'm not sure if we should be using FPGA_DISCRETE_DEVICEID here. It seems like we should check if FPGA_DISCRETE_DEVICEID is true and if not, we should check if needed.
I don't think this will work for you. The `Restoring` snapshot of the `snapshot_name` snapshot of the same snapshot.
I'm not sure if it's the right thing to do here. The `bb.fromBytes` function returns false if there are no sizes in the same file.
This will not work for any of the cases that we don't use `!` in this PR, but I think it's ok to remove all the `UserPreferences` checks, since we only do the `!` checks for `!` and the `!` checks for any reason. The same here is for `getAutoDownloadReport()` method.
This will need some more semantics. `c.ic.req.Features` is always `nil`
@jaeilepp This will be a temporary method. I don't think we should change the method signature of this function.
We need a new `Fatal` here.
I think you want to use `np.diff`. If `data` is `True`, then `data` is not `True` and `data` is an `convolve`
why is this changed?
This should be a part of the `create_message` method so the action doesn't have an `create_message` method.
Same here about the defaults (e.g. "3d}:{column}:", "3d}:{column}:", "3d}:{column}:", "3d}:{column}:)"
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why not `Pool.Lease()` in `Update`? The block should already be set when it was assigned.
This looks like it is not related to your PR.
What's the reason why this change ?
I'm not sure if this is a right change, it should be incorrent or malicious. The current block may not be a problem. I am wondering if we can have some sort of pulls with the same address, but I'm guessing this should also be a copy?
Is this include needed?
Is this used?
Just checking, the previous code was correct here. If `members` was `None`, then `members` was `true`, and `false` was not `true` before. The previous code was only broken if `len(m.externalNodeCIDRs...)` was `false`. If that is the case, I think `externalNodeCIDRs` was `false` (which means the code does not work with the previous version).
I'm not sure if there's a better way to test this, but if you're going to check for `n` then you could test it by using `fs.save()`. It's easier to read and test it in another test.
shouldn't we keep the testlessID = "spiffe://example.org/spire/agent/test/id" as "work: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "format: "
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
this should throw an exception if not set
These 3 3 lines are no longer needed because they were moved to `DynamoViewModel` and the type changed to `DynamoViewModel` and `DynamoViewModel` and `DynamoViewModel`.
I'm not sure about this one. It's a very handy API change.
I would suggest to use the `jet-rest` name here instead. The reason for the changes to both versions is that `jet-rest` is the default, which will be used in the code that is not in `build-system/jet-rest.txt`.
Import packages with wildcard is not recommended. Please revert them.
Line is too long. [86/80]
this was changed by the way we are using the `uidmap`, but I guess it's not a typo.
If this is called multiple times, why is it necessary to specify the name of the fields here (I know it's not part of the code, but is it not possible to have the name of the test case?)
We should use a better name for this than `Login`.
I think the name " isReverted" is misleading, it's a bit confusing since I think that's a bit more clear.
Do we need a separate `testFile` call for this?
This could potentially break the `found` field from the `else` branch.
Shouldn't the type be `readPreference === 'string'`? It's not used in this PR.
The name `allEvents                  ` isn't clear to me. What do you think of `defaultAnalysisQueryTimeout`?
Shouldn't it be `os.path.join("thrift_files_dir, "py", auth_thrift])`?
Why does this need to be added to the `createAttribute` method?
These fields aren't needed since they are already in the base class
Was this not used?
can this fit on the previous line?
This test fails because `assertIn` isn't called before.
Lint/UriEscapeUnescape: URI_helpers is ignored on windows. Looks like it doesn't need to be on mobile.
It should be a separate class (not a big deal)
I think this could be done via a context manager.
Can you please explain the reasoning for these?
I would suggest to add a new constant in PARAM_OVERRIDE_FILE
I think the `*exec.Cmd` is already a valid variable and not used anywhere.
I would move these files under `//trafodion/...`
Should we use the `path.Combine` here as well?
Why is the `v2` package not available in any place?
Do we need to include `the_generate` in the response?
The previous code was wrong here. The code was correct, I think it would be better to just pass the `str` as an argument to `sprintf()` so that it doesn't get triggered by the `error` itself.
I'm wondering if we can move this to `if err != nil` then? I don't see a need to do that in the loop below. If we are using this in a few places, we may be able to just get rid of `if err != nil` check.
Is ARM_32 used anywhere?
I'd prefer to see this (and maybe the code that is not actually using it) to prevent the usage from working on the remote machine. It would be a bit better if it could be moved to a helper.
Can you add a doc note to update the doc block to explain this change? It seems like we should fix that.
We can probably just make this a constant.
Could you add a summary that this is a breaking change for all of these files? I don't think they are necessary.
This is not needed.
We should add a message to the docs.
Should we also add it to `Upgrade-Insecure-Requests`?
I think this can be removed now, right?
The way this is implemented, we should just add `// returns <release>...`
I would prefer to see `DestPorts` and `DestPorts` arguments for the same thing, but I wouldn't expect it to change the implementation of `DestPorts`.
isn't it ok to remove the `toString()` call in `callbackContext`?
This will still work for `z-index` too, because the test will fail on Windows because the editor should never be executed.
this is wrong as we already have a `?:` and not a `?` check above
this is an error code?
This doesn't need to be a string.
I think this is a good candidate for `&`
I think it would be better to use the `.AFServer()` here. That way the test will fail with `r`s in the file that is the actual file
remove this line
I thought that was a separate history, but it was a bit worried that the rest of the logic was much nicer than just having a `/session` in the past, and it was a good thing to do. What do you think?
from .core import OrderedDict
We can change the variable name now, so that it can just be `Highlight NPCs on-screen`
this is wrong. it's a loop on the next line
Doesn't this mean that it's a separate issue for a proposal?
rm empty line
why is this in init() method?
Might be worth adding an additional check here, or add an `assert` to the controller block
This should have `test_data` as a separate key
I think it's better to make it more specific that it's a list of `RetryName`. It's better to add `BrokerSystemNamespace` as a list of `RetryName`. It's not clear what we're doing in this PR.
I think we can remove `python3` from here, since we don't have to worry about `rb` here.
We need to do this for this change as well.
why are you changing this?
this import is unused
nit: this import is unnecessary.
It seems like we're not using classification here?
This is a bit odd, we can just make the `imgimg className="googlesitekit-publisher-win__small-image" alt="" src={ smallImage }` attribute on the empty string instead.
nit: can we avoid star imports?
I'd move this to a new file, it's not related to the others.
I would prefer `location_factory` for consistency with other packages.
The `ERROR: Engine bass class` types aren't referenced in this function.
`Number(value) < 0` is a bit misleading. I think `value == 275761` should be fine.
I am not sure if this is correct. The `createFromData` method should be used in this class. The `load` method should not be called in `createFromData`.
This is not correct. The `Cloud` field needs to exist before the `Cloud` field.
Why are we not using the mocked registry for registered events?
Can you explain why this change is required?
I think we need to set the swap before calling `L, (L, -4)`.
I'm curious if this is the case for a user?
This should be moved to `attr_reader.h`, no need to resolve files in the path_resolver.
@vigned This was causing problems with the new logic for `contains`.
This variable is unused now.
this is also used in the tests, should be removed from the file
Please check whether the rest of the call to `hipErrorInvalidValue` is valid, or if the rest of the function call fails, then if the rest of the function call fails, then call `ptr==NULL` in `hip_status`.
I don't think we need a newions for these.
We should do it in a separate PR, but we should do this in a follow up PR
Should we set this default to false in the new app level?
We could add `@Deprecated` annotation here, too
This should also be `HttpServerErrorCodes`
Nit: please update the `UC_larpected.yaml()` calls, this is used for the other parameters.
I would prefer a `req.getParams()` method here.
this is wrong.. the root directory is not a directory but got the archive..
@jridgewell any reason we could simplify this if statement?
I'm not 100% sure if this is the right way to go. I would think of it `name` and `exists` if it's the right way to do it.
I'm wondering if this should just be `return year` instead.
Why is that line deleted?
@jridgewell Is this what we want? I thought we were going to allow for that to be the default for some reason?
why not just return protocolContext;
Why is the `path` still necessary?
We should remove the `model` param from the request here, right?
This test fails if `os.Chmod` returns non-zero value. You don't need to check for the `file.Name()` here.
I'm not sure if this is right, but it is probably worth noting that we're using a cache to create the config object.
Is this a bug fix? I think we should change the default behavior in the changelog.
This is a bug, right?
this should use relative imports, not relative to the test
Shouldn't we also test if the environment variable has been changed to `Close?` and test if it has been updated to reflect the new behavior?
This line is causing the test to fail, I think. This will cause problems when you return an error.
Why did you change the signature of `pyarrow` to `pyarrow` here?
You don't need the brackets :)
This is an unrelated change that breaks the flake8 tests.
I think we don't need `sdkapi.HistogramInstrumentKind`, the number is not available at all.
I'm not sure why this is needed. I am not sure if the transaction shouldn't be in the number of bytes, but if so I would like to use this in the number of bytes, instead of in the number of bytes, then we should make sure the transaction doesn't get set. Also the transaction is in the number of bytes, so we could be able to get a number of bytes in the transaction. It's a bit of a hack anyway so it should be in the number of bytes and then if we really need to.
I'm pretty sure this should be `Black` rather than `Rails`.
Are we going to have to change this to `resources` for consistency?
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [125/80]
Is this needed?
why not use the existing one instead of the existing one?
I think this should use `logging.openqa.selenium` to avoid duplication
Was this just for the sake of line breaks?
why not directly expose the diskLimitTimeout in the diskLimitTimeout?
`tealLogicSigSize` doesn't have `tealLogicSigSize` as the default (and `tealLogicSigSize`) and doesn't need the same
is this used anywhere?
The same thing is the one that is used by the new code
It would be good to make time.Hour a constant so that it is a constant.
Can we have this in a followup optimization?
nitpick: can you please fix the indentation (or similar) spaces after `,`
I am not sure how I feel about this, I would expect a lot of things to be called in the `cltest_server` module
Do we need any new tests for this?
Is it possible that bytes == null? Shouldn't it be `== null`?
Just curious: Why is this being added here?
Nit: I'd prefer to keep this line and use `GetAwaiter().GetResult()` to avoid the `WriteAsync` call.
Use && instead of and.
I don't think that is the right place for this. I'd be tempted to create a `approver_email_address` method which is called for each column and then have a single column that is passed in to the client, but I'm not sure how to do it here.
Is this necessary? If the format is different, the interface is different. If the format is different, the interface is different.
This method is not used anymore.
Just remove the `' in 2D` and use ` forceRDKit`. It doesn't seem related to the rest of the PR.
Please add an explicit return `this`
I'm not sure how this relates to the API change?
Should we log an error if there is an error?
This method is unused, right?
Why did you change this?
This is not used anywhere, can remove it?
I would just put this logic into the `try/except` block.
this is not needed if `if !ok || ! !ok || !ok`
I think this is wrong because the `Attributes` is `nil` in the context of the `MetaWithRemoteSpanContext`
Is this change needed?
Please move this to `application.config` module
`ValueError` is no longer the right choice, right?
the problem with this is that it is not doing anything useful for a user to read and allow a limit to wait for a mcontext to be filled.
Shouldn't we be using the constants? This is a bit scary, as we are using the constants for the `ecs` and not the other packages.
I would use a different name, e.g. `ipsecESPOverhead_test.ipsec`
I'm confused, the namespace is the `Metrics` and not `Fail`. I think you're missing a `const` here.
Is it possible that we don't want these files to go through API?
This is a change I was thinking that we should just make it a bool.
why is this required?
Can be done to make sure that the `--searchableFields` is not set as a string here.
is it necessary for this error to be logged by the client? I don't think this is necessary
The `assertThat` call here should be kept to avoid the `assertThat`s that are already closed
This should probably be `plugins = plugins.getConfig("api").offline_mode;`
Shouldn't this be called `if d.parent != nil && d.parent != nil && d.name`?
Is this an API break?
This will be removed in #5763 (and will probably be removed in #5763). If the user wants to run the `watch?v=9J2OjH8Ao_A` file and will use `watch?v=9J2OjH8Ao_A` in the `<MM>=` version.
This is not a python python package, right?
If this is a node then we could use it here
This is the only way I need is to keep the function `_CleanFpInfoAttr_` and not the function. I would suggest to call it `_CleanFpInfo` or `__eq__`
nit: you can use the std::string function
does this need to be `name`?
we need to use the constant for the whole model.
It looks like this was just removed.
We should be able to remove this now right?
This is the fix.
It's not clear from the original state that the consensus settings is being created, but it seems like a good idea. It might be worth noting that the consensus settings is being ignored for a different PR.
I don't know what this was doing..
why is this changing?
This should be `HELLO_DEFAULT`.
Hmm, I wonder if we should change these two lines to be more clear?
Did you mean to also mention this in the changelog?
I think the `klog.V(4) == 0` should be removed.
This doesn't need a pointer anymore?
@michaelandre this is the right approach. The `if` check is already there.
I think this was intentional, since it was not used anywhere and is unfortunate to remove it in the PR.
So this is the wrong place for this?
Please remove this empty line
I think this was the only usage of the prod environment where we're going to remove the old release and the new one which is not used anymore
I think the same is for all uses of this config, I think this is not the way to go about this, but I don't see a reason why it is being used.
This line is a bit long.
We should also have a `#if NETSTANDARD1_3` check here that `GetCancelledZeroTask` is defined.
This seems like it should be an error. If a code re-reviewing image will be used for some other cleanup I would expect to see that this is a problem.
I am not sure this is necessary. I don't think the `this->wallets.queue_work_regeneration` should be a block, since you are already doing that here
This should be `string`
I think the `SimulateExecution` should be added to the `ExecuteContractRead` function, so we should probably update the `SimulateExecution` method above to be consistent.
Can this use `NewBlockDataVersion`? If we want to return a value, we should return an empty struct here. If we want to return an empty struct here we can use a `ResultResult`?
why are these no longer needed?
What is the motivation for this change? I think this is a little confusing since the previous code did not catch this.
do we have a test for this?
What's the thinking behind this? Is there a way to get the process from the client?
It looks like there should be some way to set this to `true` for some reason, but I'd like to be extra conservative about whether to make sure the default value of `QUILT_USE_TQDM` is present.
You'll have to go with `expect(parser.parse_args(args).to be === {:hosts_file_=>nil, :type=>"git"` in a bunch of places
This can be removed.
why was this removed?
I don't think we need this. We should use it from the interface.
It should be Request, as well.
Hmm, this is a bug. If it is indeed used, it might be worth checking for a constant somewhere that is indeed always going to be used.
I think we should use `.Openebs()` instead of `.V2.Openebs().V1alpha1().CStorPoolInstances()`. This way we don't have to update these functions when we're using a single function.
why do we need to set it to default?
I think we should just add a `defer` here.
nit: remove extra lines
There's a matching `_reflect` that was previously deprecated, so I don't see why.
I don't understand the purpose of this map. The `string` type should be `osconfig_not_supported` instead of `true` to keep the value the same, since it doesn't have `true` and `not_supported`
This is not right. We should only do this if `SyndTypeUtils.enclosureTypeValid(type)` returns false.
I think we should move this logic to line 398. It's not necessary to do this.
This seems like a bad thing to do - we're trying to make sure we're not running into sigstack.ss_sp in the request request, right?
This looks like a great idea. Why is the new method still needed?
Please remove the `id` attribute from this line.
Is this really needed? It seems to be an error in `pkg/index-runtime.yml` (and I think I saw in the `pkg/index-runtime.yml` file) is not needed for `ssize_t bytes_read` as it is not an error and is not an error.
this will be removed as the register function will always be called
This file should be removed
nit: I think you can remove `fileSchema` altogether now.
Use safe navigation (&.) instead of checking if an object exists before calling the method.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This should be `UrTorypt`
I would keep this here, but I think we should keep the `log_file` field in `start_error_message` and `log_file` methods in `start_error_message` to make sure that the user doesn't have to explicitly create an instance.
We should be able to remove this `createUpdateHook(repoPath)` condition in the previous line.
why do we need to do this?
This will only work for stress testing if we're not going to use it for stress testing anymore, since the stress testing doesn't exist on the main branch.
There is no `release` prefix in this method.
why did you change this?
Can't this return `None`?
I think it would be better to use a default here instead of an enum.
Shouldn't it be in the timeout timeout?
Do we have to keep it in line with line 567?
nit: this should be a line rather than a line.
This is a breaking change. I think it would be better to have an option on `server` and then reuse `server.StageStatus` here.
Why change this to `-1234`?
This interface is not necessary if we are already calling it from the base class.
I think this should also be renamed `clientset.Clientset`, since it is the only place it is used in other places.
`go/models/go` is the preferred import.
Nit: please move the lib to the top of the file.
I think the new `deleteSecret` call can be removed now since the method is now in a transaction.
This name shouldn't be in this PR?
This is not a good example of how the v1alpha1 package works. It is used in `pkg/api/errors`, so I would move it to `s/sigs/k8s/apimachinery/pkg/api/errors`
The value `doUseSearchKey_(FALSE)` should be the same as the first `computedNumOfActivePartiions_(-1)` call.
I don't think you need to use objreg here, just do `import qutescheme`
I don't see this being used anywhere, are we sure we don't want to be passing it in in the test?
Is this a typo or should it be a constant?
This test is testing a bad idea. The `getReferenceUrl` method does not have a `123456` parameter, so the `getReference` method does not have a default implementation. It should probably be renamed to something like `$this->assertEquals`.
This seems like it might be a little odd to have a return type annotation for an empty string. Is there anything that is being used somewhere?
`StringLower` is never necessary since you're changing the name.
This is a bug fix. The problem is that the ip will be the same in all the data in the list. This is why I moved to the end of the list to avoid a problem. I'm pretty sure that we should just be getting a problem here and let the ip see that the ip can only be set for every single row.
This is not needed, right?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Does this need an `filter` argument?
I think this check is unnecessary, since we have no option to create a new instance.
Why do we need this?
We can't coexist with ToAddresses directly, but the `validate` method is now the `validate` method, so we can remove this `validate`.
Please use `toServer_auto_False` instead.
I think we need to update the SDK to use Console exporter for the source, as it is now not required by the `EnableOpenTelemetry` interface, and we need to update the SDK to use the SDK to ensure that this change only works on the source.
This is the line that was missing in this file
I'm guessing you can just return the `client.CloudBackupGroupCreate` and then do the service directly?
@dvoytenko is this ok? It's not clear what is going on here.
this could be an `array_values()` call, since there is already an array_merge
This will need to be fixed in this PR.
Curious, why is this needed? Are you using the list of strings as the last parameter?
The problem with this is that if a user specifies a "real" status, the test will fail (which means that we will be running in an `WIP` environment variable and `--help` status will be executed and will be executed) but it will fail in some cases. What do you think of having to make sure that the user specifies `--help` status is not available?
I'm surprised this isn't the original field.
This is the part where the test is failing.
This is the main code for this function. You can use a `with-q.String()` instead of the block retrieval.
is this change intended to be reverted?
I wonder if this should be `RESOURCE_NAME_INSTANCES` rather than `context.verify`?
why not make this change?
I would suggest `collectAllprojects()` for consistency.
Please rename this to `data-*`.
This should be removed, it is from the wpcapy import *
I'd move this import to `main` class, and put it into `test_pytest.py`
Why are you changing this?
This is the main place that we should have a `nil` in the context of the credential object.
This is the only thing I'm concerned about
Please remove color_type. If anyone else is using it, it will automatically be used by all other changes to it.
Not sure what this is testing, but it seems like the import is required for this PR.
invert the condition
I think the check is already done inside the conditional block above.
This isn't used anywhere.
remove empty line
I think we can remove the need for `@wordpress/default` and the next one.
`wn.log.base()` could be nil if not set.
The `boosting_type` value is not used in the context of the `rgf`.
This seems like a bugfix.
This is an example of how `--SO3` works. I am wondering if we should add it to all of these to the code. It would be great if we could have a dedicated function in `Store.js` and then call it `AcidBasePair` to make sure it's not actually used at all.
Should we add this import to `mne/utils/fixtures/constants.py` too?
@mfojtik this is the best place to put the featureset.LongDomainFeatureSet. It should be featureset.OnlySAN, since that's how the certificate is created.
This isn't needed because the new `xz` file was removed, and we don't need to support it in the app.
Please don't remove it, just add your own freezing.
Can you please also add the full version to the newer versions?
Why was this added?
We should not have any new dependency on these objects, but we should be able to do that for now.
Why is this secondaries passed to the constructor?
I think the changes in this file are not needed.
This change looks good. Can we have more precise `pullRequestTitle` or something to change it to something like that?
Really minor, but it's just me, I don't think we need to include it in this commit.
I think we should also remove this and `jhipster-babel` functions.
I think this is a wrong test. I can see how it can be, but it is not related to the current implementation of the PR and I don't think the latter is worth it.
Why do we need to remove the `webkitGetAsEntryApi` block?
This was the only real change that wasn't needed.
Just for my understanding, is it possible to get rid of the `require.EqualError` check here instead of using `require.EqualError()`.
Should this return sourceId instead?
I'm not sure this change makes sense in the first place - I think the code should be kept in `componentField`, not `componentField<String, SchemaField>`.
This is the wrong place for this.
Do you really want this? If you want it in the core, why not just put it in the file?
`FakeFS.activate` should be renamed to `should_receive`.
`stats` seems a bit confusing. What is the stats?
I wonder if there is any need to keep this around. The only reason we're doing this is to set the frequent count once, and the previous code is in the same place.
Why not using a separate file `HttpMethod`?
I think this is not needed anymore?
Style/SymbolArray: Use %i or %I for an array of symbols.
This file is being removed from the PR
This is an unrelated change.
I am not a fan of this change (and why the "execution" changed in this file). It's probably not worth it.
keep_detector might not be exposed at this stage?
This is not the same as the `names` below, right?
I'm not sure what the best way to do this is. The `time.Time` is to be more generic than this.
This also doesn't show favicons in pixels. Is that what we want?
Nit: `new back().save();`
This is an API change. It should be `any.elements_located`
This should be `DEFAULT_on` and should not be here
Can you please add a TODO to remove these lines? Thanks
Prefer single-quoted strings when you don't need string interpolation or special symbols.
` 2019` should go away from the previous commit
This would be a better fix than just the `map(string)` check.
I would call this `NeverOption`
We could add this check to the `treeButtonClick` method as well.
This was not being used.
Why is this necessary?
This is not a public interface, we should be using it as a `GetRawUrl` instead
Nit: `return store.Put(cfg.SynchronizableEntitiesPrefix, []byte{}, err)`
This could be simplified to `if err != ""` since this is a `dockerfile path` and we need to pass in a`name`, otherwise it will return `nil`, which will return `nil` in the case of the `if`.
@citizen428 @johanste this was the only concern with the change, and I was thinking about this line (and it was the reason I had to add it for my own small concern) - I'd like to make this more readable and have it go on the next commit.
This is not a good way to do this. It might make sense to have a test case when the event is being used. If you want to do a test for a different thing, I would suggest to create a function to get the event and use it here.
I think the convention is to use `profiling_enabled` here.
maybe we should check if `forward_agent` is set in `lib/common.py` ?
I think it's probably best to move the `removeensusCurrentVersion` to `removeensusCurrent`
Should we also check for location oracle on the external machine?
this is wrong, it was a separate bug
If `id == current_user.id` then `sign_out` will do the right thing here. This is the case where `id` is `nil`, right? Should we be consistent and return the right thing here?
Should be `object, bool`
You can use `siteInfo.AddRow()` directly, so it's safe to use it.
@agramfort I think the new line is not needed here as it's an internal type?
I am not sure how to get the second argument name. It's probably fine to just put the 'onImageRampup' in 'onImageRampup' in that class.
I would suggest `if err != nil` as it is only used by `else` statements and the error messages are `nil` by `else` statements.
Should we just do a `run` or a `run_test` check here as well?
This should be the first param.
Is this needed?
this could be a single statement
I think the `map` value should be used instead.
Why do we need to set this? It looks like it would just call `default:false` in the `new` struct, which would allow for us to use the existing `public` struct for this struct instead of just having to pass `default:false`.
I'm not a huge fan of the naming, I'd rather see a method `info` or `info.info` and have a single `info._info` method that takes a parameter.
Is this needed?
this could be a `:param path:` then it should not depend on `driver`
Why are we removing the `Level` class here?
Is this something that you need on with the python 2.1 only?
Not sure how I would like to return a `return code;` here.
This should be a log.info (as it was on the first part of the previous line)
I would have put "the" part here as well.
Lint/UselessAssignment: Useless assignment to variable - current_id.
This error message was confusing, why do we need to check the err here? I guess we can just ignore that.
Can you remove thephyr actions from the PR?
This was the only place it's needed.
I think `pkg_pton` is redundant here because `socket.AF_INET6` is already included in `pkg_pton`
Not sure I like it, but I don't think this is a good idea. The `childElement` object is already initialized to `null` (which I think it could be `null` here).
Shouldn't this be an array of strings?
I'm assuming `MakePublicS3SessionForDownload()` is the default for `MakePublicS3()`?
this file should be removed in favor of importing this file.
Maybe log error message here? "Detected dialect: %s", toReturn.dialect)
Why not just use a bool?
The gcerrors.Code does not need to be an uninitialized process.
@deads2k i'm not 100% sure this is the right way to write to this, but if we do it then we don't want anyone to write this value in the core. Will this result in a different value of payment information?
This is the main place where the error message is raised. This is used in the other places where the error was being logged.
I don't understand this change. Is it a typo? It should never be called.
Do we need this?
can we do this for all cases?
Why is this needed? I think this is a bug, but if this is a bug in the code we should probably add a log to the function as well.
This should still be added to `pwrd` class.
This is not needed.
I don't understand this change, is this change needed? (It looks like the `from` argument is a `list` method?)
why not `@Nullable`?
you can just use `.to_string` here.
Is the idea to define this method only if the class is public?
I don't think this will work, because this is not exactly the same behavior as the `assert`. It's the case that `getPromise` returns a non-function, but the function is not expected to return an invoked, so you should probably assert that here and below.
@jridgewell This is where we can't do it. If you want to add an attribute for the category, you can't just do a `name = categoryNames[i]`
I think we should be using `serviceDeploymentCondition` rather than `Deployment`
I think we can get rid of this condition.
Here the same as before. The same is true in that case.
I'd prefer to keep the `assert` around, but it's not really a useful exception.
I would just return this error.
Should we add `@private` tag?
Just to be sure, can we just pass `time.Since(start)` as a variable?
this isn't necessary. `assert @tester.fictional_character_name.match(/\w+/)` will work for you
I think you want to use <msg> Is there any need to call it with a variable here?
I think this needs to be `dialerNum.n(last.DB, func(), error)`.
Should we use `javax.annotation.SimpleParamView.ProofProof` here?
You can use `compiler_target.json_info.json` here and everywhere in the `gulp dist --no-json-specific` module.
I think the naming is confusing. I'd be in favor of `Error` or `Err` because it's not really a big deal, but it's more consistent with the name of the API.
is this a bug fix?
Should we be calling `get_plan_info` instead of `plan.first`?
I would use the global functions in `teams.rb` to avoid potential confusion about how to use it for other nodes.
I'm not sure why this is necessary. I don't think the other `@CommandLine.Option` should be in a single `@CommandLine.Option`.
Why are these added?
Should we update the key type to use `type_meta`?
Is `final` the same as the Fieldng call?
Please don't use `VectorVector_NAME_LENGHT`. The `Vector_NAME_LENGHT` parameter is used for the strlen field.
Shouldn't we have a test for it?
This is the reason for changing `coreV1` to `v1beta1` in order for tests.
I'm not sure if it is worth it to have an `_` variable here.
Why not just `new PasswordData(password, String.valueOf(passwordModificationTime.getTime())`?
I don't understand the logic here. Can you explain ?
Should this be removed?
Nit: can you add a space before the `%`?
What is this? Is it being used for?
this method should be renamed to `PricingGroup` to be more clear.
Should we be logging this message even if the failure is successful? It seems to be the only place where the log message could be logged.
Just noticed the error in the `if` here are not quite helpful.
Should this say "The above logic is furtherAddress, depending on the src-generated underscores"?
Can you move this package name into package-storageTarget package.go file?
Why do we need a separate entry for this?
@steveharter, @stuartwdouglas thoughts on renaming this `Syswow64Sys32` to ` syswow64Sys64`. I don't think it's a good idea to use `Sys32` as an argument for the `Syswow64` (or similarly as `.SYSTEM`) but it's the same as `.SYSTEMX86` (which you can use).
why is this changed?
can you fix all occurrences of a flux Table to avoid a huge performance hit?
Maybe it should be handled in `type`?
I don't think we can do this.
Is this the only place where we create a taskIP that we need to create it?
This is a good candidate for using `Interceptor` as it's a class member, not an array of `Interceptor`.
Can we put a default value of 0 in order to avoid the confusion here?
Why are we converting to `io.annotation` instead of `.annotation`, we should just use `sys.annotation`, instead of using the `io.default` here.
The <msg> The `Metric` argument is unused and can be removed.
Can we add an issue about this in the future?
We need to make sure that the history of tests are in the draining mode.
We could add a TODO to remove this?
This was the only usage of `pkg/ C++/data_shared.rb` that I'm not sure we need to do this now, but I'm pretty sure it makes sense to keep `pkg/ C++/data_shared.rb` for now (and keep the old code for `pkg/ C++/data_shared.rb`).
I don't think this is a valid solution. `The actual call will still be closed when `backoff` is `nil`.
I think the "hu.FairbankBlockHeight" is more appropriate here.
I think the `i18n` can be removed now since the `embedded` is not in `app/services/__init__.py`
nit: add new line after commas
Hmm, this is a bit hard to follow. Is there some way to check the return code that we can do in here?
I think it should be minQueryLength: 0.0
I would just do `|:` instead of the `if(((ndc)` here.
This is the same as for the `generatorInterface` method, we need to add the `isProductIds` argument to `ScrNode`.
Should we also be adding a new argument for `suffix(arg, name, FNM_PERIOD)`? It will be hard to see when this happens.
rm empty line
This seems like a good thing to do. Why is this change necessary?
Why is the target.SteadyStateDependencies not the original one?
Am wondering if we should always always have `plan.present?` for the `has_active_subscription?`?
Why remove this line?
Why are we changing the default? The config is a `c.config.Namespaces.AlertmanagerConfigAllowList` so that we can get rid of the `runtime-` from the config file.
This should be the one line. Same below.
This isn't really necessary. It's already a dict with some dict.
Why is `omitempty` needed? I'd rather not add a new `omitempty` field.
Can I ask why `return in_dWebService.func(s.Image.Image)`, but I think it is not enough to add more instances like this, because it's not a boolean, so I think it might be better if we ever add more functions like this to the other service in `base` and `base`.
This file is not used anymore.
Shouldn't this be `uint32` instead of `uint16`?
This should be reverted.
This is the main use of `setupNotification`. The `getAll` function is already called in the `callback.setupNotification(false)` method. I think it is safe to remove it.
This will change the value of `partition` to `Type`. It's more clear to me that we have two different values. I suggest `String` and `File stream`?
if we are going to add ReportStat then please add ReportStat for the future.
I think it is better to include the header as it's no longer a dependency, it is more clear to use it here.
Should the default value be 0? I.e. it's not the same as the default, or the value should be zero.
This is not the same as `req.Do().Unmarshal(policy)` right above. This is a bug.
`link_to edit_subscription_path` doesn't have a `path` parameter, so it doesn't need to be a `path`
This is the one you're using, not the "spec"
I'm not sure how I fear the idea about having a single database migration in this module, but I'd prefer not to have this in the `Symbol.lock` module since it will be used in production anyway.
Should we update `wp/v2/users/me` to allow for `wp/v2/v2`?
This will only work on windows, but not on windows. Is this something you want to do? If not we need to do this, but we should check if `if (string.IsNullOrEmpty(xForwardedFor))`
should this be something that was made before?
This is wrong. Why don't we just use the `GONE` value in the context here?
This should be `validateMemoryBreakerThreshold()` (or `validate(memoryCircuitBreakers)`)
Is this needed for boost::system/make_linux?
@garyrussell I'm not a fan of this. Why do we have to specify it?
This is a bug in the project. We are not using the API. I don't know why we have both methods for the server and the server. We need to have this as a separate commit.
Why do we need the special case for a contract? The `LoggingAssembly` is not the contract itself so this should be a different contract.
should this be `DepositToRewardingFund` ?
I think we should also remove `width: null` and `width: null` in order to remove these now that these are the same
`prime-aside-links` -> `prime-aside-links`
I would have added a "new" import here as well. This is a small change, and is not a "not" behavior, so I'd be in favor of "new" here.
this does not allow_None=True?
Should this also be removed if `ClientK3s-controller` is set?
this was added automatically by my PR
These need to be public
nitpicking: you can merge these 2 blank lines above as `#include <GraphMolol/MolTransforms/MolTransforms.h>`.
Why is this not `Optional.of`?
nit: I believe this is the reason why the `super()` is not being called from the previous `ReadRead` method
I don't think you need to change this since you are already already using `BaseTracer` in the `BaseTracer`
Should this and the next line be removed?
We need to make this configurable.
Should this be `get_current_user_records_that_can_be_displayed`?
Can we make the set here take a set or make the set ID and set it to `nil` instead of having to pass in the set?
this can be just `!obj.focusRedirect`. It will be easier to read if you have a `!obj.focusRedirect`
Please remove the empty line
Why change it?
Why not just remove `config.SQLBase`?
I'd rather we make this a debug message.
Can you please move this to the top of the file?
Why do you need this warning? I think it's not clear what we are testing.
can we add a log here?
Layout/SpaceBeforeBlockBraces: Space missing to the left of {.<br>Layout/SpaceInsideBlockBraces: Space missing inside }.
Is this going to prevent the check for `item.getType()`? Or am i missing something?
`Authorization` should be used here
It seems this should be outside the ifdef, since the path doesn't contain the same string.
How can we find this more informative?
This change is incorrect. It was not working before. We should have used `short` instead of `cloud_utils` here.
I think this would be more appropriate for `ws_listener.clean_subscription_count (subscription);`
Oh, this is a bad API change. Is that correct? If so, we should probably change the default behavior to `/....` so that we can verify the behavior on `/....` if we want to use the default behavior.
Why not disable automatic detection?
I guess we can remove this method now?
I'm wondering if we need to add `if (gridCol.colDef.enableCellEditOnFocus === true)` to avoid this kind of thing.
This is a better place to put `InstallerFilter` under `planFilter` as it's a parameter. `canCache` should be `@Nullable`.
It's not clear to me that these are the most useful. How about `input_type = VALUES(start_time)`?
I don't think this should be an `Assert` or an `Assert` thing. It should be an `Assert`, but that's the cause for the `setAqrEnabled` calls.
Why is this needed?
Nitpick (not related to this PR): I would use if (!!non-blocking) { if (!isFunction(beforeChangeResult)) {`
I'd prefer to keep this line, but not to have the wording in the next line
This looks like it's the only change to me. Why do we need to return the status? What if `libcontainer.InitContinueSignal` is `nil`?
why are we dropping the `if err` condition?
Maybe also check that `is_valid_commonname` is not None?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this is the main method that takes the transaction hash as parameter. I don't think it should be called in the constructor. Also, I think it should be called `getTransactionLocation()` instead
I don't understand the purpose of this change, it seems to me that there are some problems with this.
This is wrong. Why do we need this?
Use the new hash syntax `&nbsp;`
Why is this needed?
Shouldn't the `di` here be part of the `cart_id` too?
remove the `_dbmField` line?
Style/EmptyMethod: Put empty method definitions on a single line.
This should probably be a `return b.Read(buf[:]byte)`
Why can't you use a custom visibility ?
This is going to break the site-json script in `package.json` and `package.json` files. We only need to do a site-json for the `build` package and `build-system-react` files.
I guess it's not necessary to use "RETURNVALUE" here because I think the `computeMessage` should be enough, right?
`1.1.0` is never used?
Not sure how this fix is. If you're going to do this, let's remove it for now.
This is not the default, since it is a global setting in `fee`.
We can now delete ` warm-up` now that we don't need the ` warm-up` option.
The same thing here, can we make the `const std::string &`
how is this related to the other changes?
Can we move this down into the `newController()` method?
This is a BC break. Please remove.
Maybe we could just call the `nextPageTokenName` and use `Encoder.json` here?
Shouldn't the `profile#show` be a `show`? Or is this a `/profile#update` file?
let's use `when 'guide'` as a string to avoid potential conflicts with other issues.
"may be" (not "may be" but "may" would be "really" (or "may be".
Can we call this `expect_authed_to_has_video` to make it clear this is not being used?
This will break the code. I think it is better to have a method called `setSavePassword(WebSettings.LOAD_DEFAULT)` or similar.
Nit: `encryptencrypt` is not supported in IE.
We should keep this assert. If not then we should assert that it is not null.
Is there a reason this was moved up here?
It looks like `noDuplicates` is only used in `build-system/utils` and not in `build-system/utils`. Should it be in `build-system/utils`? I don't see a use-case here
I think this line and the next one is redundant.
Can we change `json` to `res.getDataset()`? It seems to me that the `SessionId` is not used anywhere else.
What about `orderPath`? I think the `order` is not sufficient.
I'm curious why we did not change the original implementation?
These usings should go into the system - they should be moved to be alphabetical order.
I'm not sure what you wanted to do. If you need it then it is the interface, then you can just make sure that `void Startup(object hint)` is not passed into the interface.
@bryevdv, I think we need to keep track of what is needed here.
I think it's better to move these lines into the `local/unit` module, and add a few lines at the same place.
This import is now unused
@mfojtik this should be `armor === 2`. The `armor === 2` from `float32` is already defined in the `float64` function.
I'd recommend renaming this to `log4j`. It's more readable to be `log4j`
Maybe we can rename this to `GetSessionConfig` and rename it `SessionCreationConfig`?
I think this should be a `-` (a property that should be passed through a function to the `-`).
@liggitt I noticed that we are not creating new routes in a view model for these methods. I would move this to the controller and put them in there as an env variable.
I think we don't need this catch statement here because the test was already in the test path.
we don't need this line, we are not using it anywhere else - just use `felix.getType(...)`
I would rather use `continue` in the type hint.
I don't think we need these headers anymore.
@philippjfr is this change correct for the `.update(**leg_spec)` above?
I think you could just return `nil` here.
Is there a reason why we can't just have `WinePrefixContainer` always just a `container`?
This should be a single boolean.
why are we doing this in this function?
This was removed.
I don't know if this is correct or not.
so this is just to run the path from the current current process?
Can we remove the null check?
@benzonico How do we know that `role` is a string, but `list` can be true?
Important. Please fix.
Do we ever want to call `AddView` directly?
why not import xrange directly?
This is a bit of an odd place to put the type in the next line
Why is this in the first place? It's used in other places as well.
Why did you change this?
Why this change? It looks like the old code was removed.
Use the new Ruby 1.9 hash syntax.
I'm pretty sure this is a good way to get this response. I think we should be using `Object.IsDatabase` as a simple RequestFactory instance.
If we are going to be cleaner then we don't need the cache anymore.
Should we have a test for this?
Please revert this change
This should be `dest = "#{host['dist']`
Style/Next: Use the lambda method for multiline lambdas.
Please use `isInputExpr` to check for nullptr here.
nit: can't we have an explicit name for this `AppInStage`?
Is this correct? I don't see `of` being used
Does this make sense? `j.jServer.shutdown` can be `context.Background()`?
Probably should use the enum directly
Nitpick: Can we rename this to `msgInboundDispatcherNotRunning`? Then we wouldn't want this to be called `msgInboundDispatcherNotForm`.
Can't we have an upper bound of `transfer_ctu_path` and use it here?
This is a breaking change for us. It's probably worth checking for `config-path` and `Secret path`.
This condition will be very slow if we use `working` and the `working` attributes
I think it would be more useful to use `.set(Program)` here to make sure we don't run the tests in the same process
I don't understand why we have `value` here, but `value` does not return a `true` value (e.g. `value == Binary`)
This should be reverted.
I'm not sure why this works, but it looks like it was a typo. :)
Can we keep this and just use the ` STORE_NAME` parameter? That way the `useSelect` variable can be more consistent with all the other methods in this file.
If there's no error here, should we have a constant for string, instead of a string?
I think you're missing a `_to_not` after the `else` statement here, because `submit_declining_NT_subscriber` is already defined there
This should be a constant.
This exception is thrown by `from.length()`. The same goes for the `else` branch below.
It's probably not an issue, but this works for now, so I would rather do `params = type('obj', (object,), {'installDir' : resource_filename("nupic","")` and remove the extra spaces here.
Why is this change necessary?
Is it not possible to use a property? If not, please use `Stop.getgoal()` instead
I'm wondering if we should just return the whole `key` in this case? It seems it would be better to just have this check only for `data.size != p1->data.bo.size`.
Why is the default value not `true`?
I don't think we need to expose `errors` here since this is a `nil`, and we can keep it in the code for `github.com/filecoin-project/go-filecoin/Acl`
The docstring says this is correct
Is the license header still needed?
Nit: We don't want to include an extraContext.h here.
What about the interface interface? The name is misleading. It's very confusing. How about `IAutomaticTracer.cs` or `ICommonTracer.cs`?
Can you please explain why this change?
This should be defined as static final String CUSTOM_CREDENTIAL_NAME = true.
Shouldn't this be checking if `err == null && !isEnabled || {} == null`?
I don't think we need this check here.
Why do we need to use a constructor with an empty `Set<string>`?
this will fail on every request, should we make it `begin`?
I would add the condition here as well.
Can we have a test for this?
You need to add the config back here
Line is too long. [83/80]
This import seems unused.
This should be in the same line as the else block above.
This should also be in the _on_fullscreen_requested function.
Is this TODO still necessary?
this is a bug, we don't need to add the "ACT"
Should we rename this to `SecretTargetLogDriver`?
We can use the `vString` from the `vString` to `length`.
Is this TODO still needed?
Please rename this to `mConfirmMenuDiscard`
What about using `!is_string()` instead? It seems like it would be clearer to use `!is_string($media->getBinaryContent())`.
Use `Context#addons` to simplify the code.
Where is this coming from? I see this is called from the main thread, but I guess there's an error in the middle of a method called "AfterShortDelay" and the "AfterFunc" is called from the main thread.
Why is this a pointer? Is this an Optional?
I think this should be in the `with` block.
`$attributes['class']` is always true, so you can change this to `true`
Using the false type of optOpEnum here will prevent the current user's type of the false type of the map. This is an easy change IMO to understand why you added false type of the map.
Is this not needed anymore?
This is a good place to put this into a helper, I don't think we want a whole `train_page` module since it's used in a few places.
What does this `err = s.IPSetLocker.Unlock(ipset.Name)` return?
The `naturalComparator` has been moved back to its own `requireNonNull`.
We should not be able to get rid of the `filteredPackages` now that all packages have been added.
This does not seem like it will work without this line.
Why do you need to do this line?
Could we just pass in `bundle_client.`.
`allOutputs` can be undefined if there is no exec or not.
Can you use `new MetricsConfigBuilder()`, instead of calling `metricsConfig` twice.
Isn't `readPreference` the same as `primary` ?
I'd really like to put this into a method on the same line.
Is this import still required?
I would prefer if you didn't write the code to `cur_path = cur_path.gsub(/\//,'\\')` but it's a bit simpler to do the same thing as before, since the other changes are just a thoughts...
For consistency, we should change this to something like `pos: :pos: : :pos: :pos:`
Maybe we should update this doc?
Why not add_undo to `Args`?
this should probably be `marshalers.PushBackNamed({{ $.API.ProtocolPackage,}.BuildHandler)`
Do we want to make it a little more verbose, or should we have an overload of the keyboard navigation that will be used?
I think we should use `newProps.checked` here instead of `checked` as the default value.
Why is this being changed?
`default` and `download-directory` are the same, not the same thing.
Maybe we should have this `RowKey rowKey` instead of `RowKey rowKey()`?
The reason this was changed is because PJ_LOG_ERROR was changed before it was used. This is a test of this PR, and if the code was not being logged, it was not being used.
What's the purpose of this change? It's not obvious from this PR, as it's not really part of the PR yet.
why change this?
I don't like this, can you revert it, too?
`anger.info()` could also have `anger.finest()` return value, so the name should be `info`
Why are we returning an empty singleton alert?
Why is this needed?
This doesn't appear to be true. It's not clear to me that it's only in the code.
The `omp_get_max_threads()` call is useless here. `omp_get_max_threads()` will return the empty string.
I think it is better to just make the deployment configuration and provide the shas for vendored APIs.
I don't think you need to do this. It's just a single element, not a number.
Is this file still needed?
why are these two separate key values?
@deads2k i'm not sure what the best way is to go. i'll go. i'm not sure if this is a good idea.
Can you remove this `break` statement?
I'd prefer to have this as a separate method and just use `return inbounds { ... }` to avoid code duplication.
This doesn't seem like a correct way to get this.
Does this work with `input_shape`? Does it have an ` input_img_shape` variable?
This should stay as `private`.
same as above. Can you please also fix the indentation?
nit: can we call this `allocateType` or something? `metType`?
This is an API break.
The PR description is `import molecule.utilities as utilities` now.
Why does this work? I don't think this needs to be added to the `<M>`, so this should not be required.
This should also be added with the other imports
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
I think this should be a bit more specific, e.g. `git grep grep grep grep grep --force` and `git grep grep --force`
The `//` file should be removed from the `build-system/common.js` file. (I don't think there's any need to add it, as it will do the same for it.)
This should be reverted.
Why did you remove this file?
This is a pretty close question of a `resource.Initialize`. Can we just use an empty string instead of a string? Then you can just add it to the end.
I think we can move it to the `homogen_table_builder` scope.
Does this mean the `.Pagination` will never be empty? If we need to do a `.read()` then this will never be true.
Shouldn't you just set the function to `loadOf(foo, nil)`?
TIL about `.new`! :stuck_out_tongue_closed_eyes:
Should we remove the namespace from the dal list?
I don't think the <msg> Much safer is needed. the `if` should be `if self['is_cygwin'] == true` since it's not `else`
You should not need pipeWriter here. You can just do this in a try block, and you can remove the pipeWriter variable from the `var writer = new BufferWriter<PipeWriter>(pipeWriter);` below.
Style/RedundantReturn: Redundant return detected.
`InternalSafeName` is used only once, can we name it `HumanReadableName`?
I would move this line up here, since this PR is already merged into this PR and the others below it.
Why the order of the order?
I am surprised this didn't change, the `MongoError` was being handled on the `Error` level, but it was previously being changed to a `Error` instead of `e`. It would be better to keep this change in the first place.
This is the only place where we use `IsThreadAgnostic` is called. I'm not sure what the correct way to do this is is. If this is the case, we could use `IsThreadAgnostic`.
This is the only place where you need `transform` here.
Is the original code correct?
You should remove the `Error` here.
Should we have `return general general general general general general general dependency here? `return general general general dependency` (or something similar) is not the expected behavior for Python 3.6
You should add this condition to the procCodeA before the state of the procCodeB, which isn't really what this actually meant to.
It would be great if this was just a one-liner to avoid a potential NPE check.
I'm not sure how this works. Shouldn't the `AllowAdditionalRoles` be logged somewhere else?
Why is this removed?
Why was this added? I'm not sure it's a good idea to have this in the `javax-store` directory. The `_` prefix is for `spack spec --update-to-lib` files.
The `isNull()` method is called only from the method `private static final`.
I think we should just remove the field.
I think it is more reasonable if we used a lower-case for the lower.
Please put this in a local var. It's not clear why we need both table and validated before loading them.
this looks like a typo
Why is there a reason for this import?
Why did you add this?
Can't you just put this in the constructor?
Can you add a note here about using a different config.all() that is a little bit confusing to me. Maybe "client of a production user"? That way it would be clearer if you think that's more appropriate to have a user.
nit: rename 'gocloud.dev/secrets/vault' to 'gocloud.dev/secrets/vault')
not sure if it's needed to make this an option.
we should also remove this empty line
remove unused imports
This should be `if err != nil && err != nil`.
I think this is the main fix for Razor's PR.
This is the only line changed in this file.
why is this necessary?
`final` on new line.
@danrot this is the reason for the change, as we did for the `createNamedBuilder()` call below.
The name of this method is misleading.
I don't think this is necessary. The test code will run on a non-defaulting system.
@fabianofranz did you intend to use a constant here? (not necessarily in this PR)
I don't think this is a problem because it is not used in the code, and this code is still used in the tests, so we could remove this function and just call `setOnContent(connectionManager, server)`.
In the future, we should probably use `gasPriceUnitIOTX` to determine whether or not it's a IOTX or not.
It's not immediately clear what this function does - how about passing in `time.Duration` to `Func` instead?
remove this line
I think this should be synchronized, otherwise it may be synchronized.
Put one space between the method name and the first argument.
This should be `Este`. This is not a very good idea.
This seems like it should be in `__main__` rather than `__main__`.
why is this deleted?
This is not needed.
As discussed, you can use `if trail.complete?` here
I think we need to make sure the EC2 Metadata is an unbounded state, right?
should we add the new fields to the user? I know this is the only usage of this PR but we should probably add them back to the new one
This is the change I was working on the CI running on my machine with `osrm` being the `auth` option. The fix is to use the CH-only data in the service's `osrm`. The fix doesn't have to be a problem because it was a problem and is still not an issue, right?
This method should be public.
Is it always `0` and not `0._component`? If so, we can remove the `isinstance` check.
This is a breaking change. We should just use the same state twice in the same way.
Why is this necessary?
This is the only place where we check that `arguments` is defined. If it is a boolean, it should be `arguments.get('Type')`.
Can this be `if __name__ == "__main__":` ?
Is this needed ?
nitpick: maybe move to the beginning of the string so that it's easier to read
@clebertsuconic This is the only one I'm missing in the convention of having a single instance of AccountWidget.
Why are we changing this to `#if !NETCOREAPP#endAPP`?
Could you change these constants to match the other getters?
Can we rename these tests to be more descriptive?
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [98/80]
"I think the first sentence is "false" - that's what we should do in the production enviroments
I think we don't need this.
The test here doesn't have a `DisableMetricsSession` attribute, which is no longer necessary, as this function is now called `server.StartMetricsSession`. Is there a reason this is different from `StartMetricsSession`?
Why do you need this?
We could also make this a `provisionFailed2` instead of hard coded
This is a good change for the future. I would prefer to not do this in a separate pull request and have it in a separate pull request.
(hardcoded current size to 2 pointer)
I'm not sure how it would work, but I think it's better not to use `r.filter_ref()` here.
I think that the other `pkgsToRebuild`s should be included for this new test as well, not as a part of this PR
Should this be moved to the `FieldField`?
I think this is the only usage of `update` to make it more obvious what the user should use.
Nit: I think it would be cleaner if we move the imports into `go.uber`.
Can we just make it a `fn` and use that here instead of just `getAmpDoc()`? It's also not really necessary to make this work. The same goes for the other `getAmpDoc()` calls.
Why not `fields.com/upcase/trail-title-cards/default.jpg`?
This is the only place where `Deflate` is used is when `Deflate`.
Why do we need this change?
Why did you remove this?
I'm wondering if we should not return the array directly here.
I would call it global_configs
I am confused why these are needed. Are they added in another PR instead of just the version?
Is the name still accurate?
this canSeeInvisibility is not necessary.
Why can't we just do `!string.IsNullOrEmpty(newValue)`?
Maybe we can make this a `NotImplementedError`?
`!config.node.peering_port` is a little hard for a boolean, why not have it be `_params.network.default_node_port`?
@tgamblin Should we add this here too?
I think we need to add the check for `if` here.
The roleText logic should be always 's' and not roleText
You can use `dcontext_t *dcontext` to get the thread's value.
nit: remove extra empty line
Isn't the error returned by `KeyAlgorithm`? I guess it's not used anywhere.
Is this the correct way to fix this ? I think we should do this for both cases, and forgot about the "subscribeonandroid.com from feed URL in order to subscribe to the actual feed URL" and should not be the actual feed URL.
nit: `std::string` is a bit confusing since `_string` is a `dict`, and `_string_t` is a `dict`
@michael0zy do you know why this change is needed?
Why is this import removed? I don't see any usage of this import here.
I think we don't need to `Header` here since `Native_Header` is not a part of the codebase.
Why did this change? Is it because the format string is not a number of elements, right?
This is not needed if the `BravoMetricsService` already handles it.
Why not keep the old ` BftConfigOptions`?
This can be deleted.
This is a bit of a smell. Why are we doing this in a separate pull request?
This is a change in the behavior, and it seems to me that the `argSpec` has the check for `OptionSpec` as well, and the `argSpec` is a no-op for `OptionSpec`, and `argSpec` could be the default.
Can you use `0` instead of `0`?
Is there a reason why you didn't just add `sync`? It seems like it was only done for `reflect` and it was not used anywhere.
I think it's better to keep the new space after the comma. Otherwise, it looks like the one below it's newline.
Why do we need to display the author here? I don't see the reason to display the node if it is not. Is it worth adding the `showSubjectInMessageHeader()` call below as a method of the display?
This should probably be `DefaultSampler:       AlwaysSample()`
We need to be able to use `U641.Deployment{}{} = generateDeploymentStrategicPatch(...)` here.
why did you remove the logging level? this should be a debug statement.
nit: move this to L7474, so that it's easier to read
This class should be removed as well as the interface to throw exception.
@cra0zy I just wanted to make sure I understand why this was here before.. I'm going to check that the intention was to have a different `_pendingEffects` field in the list of errors. I think that was the case that we need to catch in a different exception than a different type of exception?
Why not directly remove it?
Why are these being changed?
I think you should also add `extend FriendlyId` to the FriendlyId
Why not just use `config.Triple` here?
This doesn't seem necessary since we are not testing the func in the test. Isn't it sufficient to just return a err here?
This is not needed anymore.
I think it makes more sense to have this as a `*topologyv1.SearchTopologyResponse` and `Resources: resources` to be nil (and the same for the `SearchTopology` package) and just call `topology.SearchTopology(t)` and then only do it once.
I think the order of the arguments is unnecessary.
Is this part of the code or did it break anything?
nit: remove empty line
Maybe include the interface as well as the name as `BlockHeight`?
The `Status OptimizerUtils` is now unused, can you remove it?
It's a good idea to make sure we are not getting the correct place to do this. It's also a good idea to test that the next Query output is in a place.
nit: I think it might be better to return null instead of returning null
Why not just `canBeSet`?
Can we make this a global setting? We don't use it in the codebase so I think it's easier to create a new `app_id` field, but it's not clear why it is necessary.
@jridgewell not sure this change is the right fix. It seems it is to use `seo` as a name for this new parameter, or `seo_not_seo`.
you don't need to make a copy here
Would be good to have an API change here as well to make it clear that we have no other APIs.
Why was this removed?
This is a breaking change for a while ago. It is not a problem because this is a private static field which will make it into an `const int`.
this is wrong, if you want to make this error message more explicit, then you can make sure you don't do it in non-debugdebug mode
I think that it would be better to just delete the `putState` call and delete it in the `putState` call.
Sorry, I don't know why. This test is testing the case where you want to test the content of the response.
@kargakis do you know what's the difference between the two?
This is the only change that is still working, and I'm pretty sure we have a good reason to make this change to the next one. I think it would be better to have it as a `@example` or something like that, and to avoid having to change this to `super`
Do you need `+` here?
What if `datetime.utcfromtimestamp` is not `None` here? Should we be doing `datetime.utcfromtimestamp(from_ts)` instead?
This is the only change that affects this file. I would expect it to work without the number of `TM_process_req_requestregioninfo ENTRY` to be a string.
I think this would be clearer with the other `score float32`s
This is a bit of an odd place where we have a single environment variable, but I would have expected the same problem with the `HeaderMD.Get` method
Why is this include being removed?
I think this file can be removed from the PR
I don't think we should be using `quoted` here. I think we should make it `String text + "\n'`.
Please remove the extra space after the comma.
shouldn't this be `ListMyRepos`?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
What does this change do?
This should have been a static field and not a private one. It is used as a private static method, and we don't need to pass it through.
Isn't the first ifdef redundant?
why do we have to add this?
I'm wondering if we should have an empty set of tests for this new `tag`, `exclude` and `null` if `false` is true. Maybe a test for `*null` is appropriate, so we should have the same `exclude` attribute.
This should probably be in the `TestUtils` for the `GetAppendPair` as well, but I think that should be fine to use it in the future.
I'm not sure this is right. The only case where you have `getWorldType()` is being called is the only place where the `getVar` method is called. The `getVar` method is called in `getVar` which is a `boolean`. If you want to check `WorldType` then you don't need `boolean` in the `getVar`.
Is this needed?
I'm not sure why these are being removed.
`r'[A-Z]:` should be fine.
It would be nice to have these methods on the `authenticationService` class. It is not necessary for the case where these values would be used.
`proc` should be at the top of the function.
I don't understand the motivation to add `libkb.cobra` here. I would prefer to have a global constant somewhere.
Should this be a static variable?
I guess it is missing its name, it is not necessary to name the projectIdVariableName class
Why not just add an extra variable for this purpose?
This can be `final`.
Why do we need to pass finalizedHeader here? I mean, what happens if I remove the last parameter ofHeadBlockHash? Is it possible to keep the same value as it was before?
does this need to be in the `scratch`?
This is probably not right, we should have a `index_scols` property in the module, so the module should not have a `index` attribute, right? This will avoid having to do a `column_scols = None` in the `index_scols` attribute.
Why is JSONValue being used as a local type of the function instead of being able to access it from the function?
This should be done in the constructor as well.
This is not the only usage that's in `ChannelImplementation`.
I think this should be a wrapper to make this more generic.
This is a good example of why this is not just `(currentSortOrder == values values[i] || currentSortOrder == null)`, as it's a long-term pattern for a long-term case (which is why I'm not too familiar with how this would work for some reasons).
Is there a reason for keeping this variable in OMNIPOD_POD_ALERTS_UPDATED?
why this change ?
nit, this can be refactored by a method that returns a string and returns a string.
Is `toAvroName` necessary or should it be used instead?
Since this is a list of columns, can you make the hash a constant for it's own field and use the same logic in `parallel_flow`?
This is a bugfix - the task doesn't need the full name, it just doesn't really have any validation for a task name.
This is a change I guess...
(style) code indent should use tabs where possible
@adios2/engine/hdf5/HDF5ReaderP.h Can we remove `adios2/engine/hdf5/HDF5ReaderP.h` as well? I think we can just use `adadios2/engine/hdf5/HDF5ReaderP.h`
Is this change necessary?
I think `c.leaf.remote != nil` is enough for now.
I think we should be using the old agent version here
I'd rather not have "hey, before you start this..." since it's a bit confusing. "prerequisite" is a "hey, before you start this..." :)
This should be `/test/DB.go`
Is this a typo? `Charset` => `CharsetCharset`
It might be better to use `log.Infof` here instead of hardcoding `log.get("trie account integrity", "key", fmt.Sprintf("%x", k)`
Can you please explain this change? It is used by both methods, not `Node` and `Node`.
@team_plans should be updated as part of `plans_withpl`
I don't see this special treatment.
This is a bug, we should just always check if `chit->isValid()` is true. If the goal is to not check if `ChangeForReader_t` is enabled and if it is not, the test is still failing, and we should still fail to return if `ChangeForReader_t` is enabled.
nit: I think this is a good change.
This method was not being used in the PR
This is not necessary. You can delete this line.
Can you also check if the API is an `(data, _internal) > 0`?
Can we have this as a method on the `ResourceResource` method that calls the `ResourceDir` instance?
Why not just initialize the param like `SecurityProtocolType.Tls11 + SecurityProtocolType.Tls12 | Tls13`?
@fmassa Should we keep the old version?
Do you need to add this logging in this debug log?
This was just me wonders.
This is the only change required.
Is `BrokerConditionReady` used anywhere else, or can we remove it from here?
Remove unused code.
I'd say that in doc.go, we should be consistent about it: - If it is not a TLS, we can make it a `CheckIn doc, (again, p, etc) - If we want to support TLS, we can support TLS in doc.go, and not support TLS
I'm surprised that this isn't the responsibility of the `err`. Is it worth it to avoid the response response's name change?
This is not a part of the fix.
This is not the right place to add this new flag. It should be moved to the database.
This is not a good way to get rid of a "last mildly-common" type of `AsspNetCoreInstrumentation` in the ASP.NET Core instrumentation here.
These changes are probably unrelated to the rest of this PR.
I don't think the `XLANPort` is needed.
Please avoid using individual imports.
I don't see any tests that rely on the `StatusFinder` API. Do we need to use it here?
I think the other PR is to use `FPGA_IFC_DFL` instead of `sto-b WITH-DF` here.
I would make this a helper method in `ValidateSignature` and make this a `ValidateSignature` method.
@jackfrancis I think we need a new version for this. I can add that as a follow-up PR
I think we want this to be an an `filter` label instead of `maxrequestbody`?
I believe `errors.Errorf` should be the same as `errors.Errorf` (and the same in `errors.Errorf`). What's the use case for the error message?
Question: should we use `debug` here, if `reportBox` is set?
This is not a service account. The installer is running in cloudshell but not a Service account.
`my_string` is not a optional var, so you don't need to pass it every time it is passed.
I wonder how many of these are included in the tests? Is there any way we can have the same logic for `HT210176`?
Is this needed? I don't see a need to repeat this.
I think this is a bug in the docs. We have the `getField()` method already.
Why do you need to change the signature of this function? I see that it's only used in the `checkSpaceExist` function.
Nit: this could just be `rpc.go`
I think we can remove the extra spaces
These import changes seem unrelated to your IDE.
is this going to work on all platforms or just the ones that are known at the end?
This is a bit confusing, the `sigValidator` call should be moved to `PowerTableView`.
I think it's better to do `glog.Errorf` and `glog.Infof("Failed to update openebs.io/csp-disk-hash value: %v", err)` here, because it would be the case that `glog.Errorf()` is a `err`.
I'm not sure we need to expose that anymore. The reason is that it is fixed when the `IEqualityComparer` itself is `IEqualityComparer`.
If the execution was already finished, then the execution was already finished. If we need to update it we should keep the log.
Is it possible to add these new dependencies?
where isSymlink }} used?
This needs updating to be removed.
This will never work. We don't need to add `RayNativeNativePanel` anymore.
This should probably be an array of `assertEquals`.
Is there any way we can test this functionality?
Can we move it to a separate method for consistency?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This should use `sort.Strings`.
`repo.ListUserRepos` should be `/orgs/:org/repos`.
This is a good idea. The code in my local copy will never trigger a addrs, which is now always set to true and will not be executed and we will not see it as the first call to the method. We can't remove the code in this PR, because the previous code will always be reached.
I'm not sure this is a good idea. If `DEFAULT_JSON_USE_QUOTES` is the name that's not the best name for this parameter. If this is the best option, then this should be `Settings.is_reference(DEFAULT_JSON_USE)`.
Doesn't this need a check in `sampled`?
I think the whole `administerable_by?` is not needed
I'm not sure this is the best approach. Maybe we should add an additional `time.Minute` constant to this var?
You should be able to use the ` posNext` from the previous if.
This check needs to be added to the stock check for the DAG, not the stock check
is this used anywhere?
Layout/TrailingWhitespace: Trailing whitespace detected.
nit: don't put a `Mockx` prefix at the bottom of the file
Would it make sense to have this assert in `ArgumentOutOfRangeException`?
I would suggest using `config->http_proxy = NULL` here.
We should probably add an assert here if `$settings['height']` is not null.
I would prefer a constant here, too.
I would move this line up with `splitSize = Long.parseLong(options.get(TableProperties.METADATA_SPLIT_SIZE));`
Is this still needed?
I think you want to add this to `compute_service_account` and set to "" to make sure that when creating a new node, you will have to update it and add a check for `compute_service_account`
I don't think the API is needed for the API.
Why not throw an exception here? I mean, it's not possible that the exception was in the first place.
`positional` doesn't seem to be used in `Clientigi` anymore
@mfojtik this line should be indented.
nitpick: this should go up to the `__main__` file
Why is this a string, can't it be `defaultProfile.Spec.EgressRules`?
Is the old version correct?
Shouldn't this logic be inside the if block, or is there some sort of if-statement?
keep_alive as options?
I think this should be `Integer` instead of `int` because it's an interface.
`test((test) - original)` seems like it can be a `*test`
This is a bit of overkill. We should be consistent.
Is it needed here?
can we also include a GUARD_PAGE_EXCEPTION in the execution tried.
Why is this not `ClassificationBundle\Model\CategoryInterface`?
why change this from `List` to `List`?
@adamjstewart Is there a chance that the user specifies a file name with an internal state? I'm not sure what the best way to do it is.
I'm guessing this was a bug?
This is a breaking change as it is not related to the rest of the PR.
This is a breaking change as it is used in the previous commit
This is a very generic struct, can this be an optional field?
I don't think you need the `--args` flag here.
I think this can be simplified to `if (!$rootCategory) ? $rootCategory->getId() : null;`
This is not the best part. The previous code used this method which is not used.
Please use the pyramid imports, otherwise this will break other modules.
Please don't change this.
nit: this could be combined with the other "inline" imports, like other imports
Why does this need `false`? I don't see `true` anywhere else.
You can use `isinstance` here to make this consistent with other functions that use it.
This will need a deprecation cycle if `deactivated_on` is `nil`, right?
here I'm a little confused by what this is for and why. I'm not sure what the right answer is. I'm not sure what the right answer is
`from .options import Options`
We could also set the value to the default value in `aws/Changing/common`
Can we remove this line?
This line should be before the text, not before the type definition.
This can also just be `instr_get_opcode` and `instr` as well. The other option is `instr`.
`({0}", (totalRecordCount ? startIndex + 1 : 0) + "-" + recordsEnd`
`assert_eq` is the correct thing. `assert_processor` does not match `assert_fill` function.
Shouldn't be in scope of this PR
I don't understand what this is doing. Why is that change?
`getUrlFromRouteCache` is used by `getUrlFromRouteCache` in the `getUrl()` method. It is used by `getUrlFromRouteCache` and can be deleted.
`row` should be `null`
This is the only error I found on, we should probably check the error is returned here.
I'm surprised this doesn't get called before this PR.
@cra0zy do you know why we were dropping this test? I think it's okay to test that no regions is no longer required
Do we want the `.take` here instead of the `# NOTE`? I think the block of this code is redundant and should be fine.
Why are these unused?
This should be `Cartesian3`, not `Cartesian3`.
Extra empty line detected at body beginning.
This is an API break. It is not a good practice to set the default value here.
Why are we changing this behavior? It seems like the `rule.FromScheme` is a `nil` check and we're doing some tests.
This was a mistake before
if we're not handling any resource we should log this, we should log it.
We should keep this because it's a `@bdd.given` statement
Is this needed? Are the generated models still there?
Should this be `couldcould be simplified?
you can just do `copy_topo`
@cvializ I'm not sure how to do this, since we have the same `unistall_sw.js` file in `src/config.yml`, the `src/config.yml` file is already defined in the `src/config.yml` file.
why this change? we don't know that we are not testing anything in the Node API.
Shouldn't this be `plz`?
This file will be removed after the file is removed.
I'd rename this to `quilt-registry`.
@smarterclayton do we need to remove these lines?
This will need a new callback
I'm not sure if this is safe to change. If the browser is in session, it should not be the same as the browser itself.
I'm not sure if this should be here or if it was `currentCulture = 'zh-tw'`
I think this should be moved up, too.
Line is too long. [92/80]
Can we just use `NodeSelector` here?
This is a good change. We should also make the v1beta1.InnerObject *go.InnerObjectWithSelector from the v1GroupId.
I think it might be better to do a test to verify the context.
The naming of this is a little confusing. Do we need it? If so, maybe we should just name it `add_window_BE` or something?
`separate.lastValue` is used in a lot of places. Should we be doing the same in `torch.jit.annotations.ignore`? It might make sense to be consistent with the rest of the code.
I would put the command line in `configfs` and add `...modulepath` to `configfs`.
Could you add this as a field in `libbeat/src/main/java/io/inject_ROOT.go`?
This is a bit of an unrelated change, but I'd like to see a test for that. I'm not sure if there is a good reason to have this code at all, but I think it's better to just do this in the `FirstOrCreate` function, since the code can't use that as a static variable.
I think this is not correct. The intent is if you have the 1 second time, then you don't care about that and you'll see that it's not correct.
why not use `.String()`?
The fact that `HeaderRestart` and `ButtonRestart` were only used to be a global object that was created with all the others and it's not a global one.
We should be able to remove these now that they are in the same class.
Why are these needed?
@mhoemmen can you confirm the types are the same? (I'm assuming this is necessary but not sure)
Is this file still necessary?
I think it would be better to move this up into the if() below, to avoid code duplication.
What's the reasoning behind the `?` here?
I don't see the difference between `sda1` and `X` here
why is this removed?
I think it would be better if you could change the order of values to `*x` and set it to a `None` rather than `*x`.
why do we need a field here ?
I think this is the only line where you've used `self._next_progress` instead of `next_progress` since this is a class method.
We don't have to include `v1alpha1` in the list here, so this should be `v1alpha1` in the list.
are we sure the other options are same?
I've been using `SUGGESTION` for this, but I think we should keep that as is.
I'm not sure if I care, but I'm not sure we need to change the `noext` variable here.
I'm not sure if this is the right fix, but I guess this should be `True`
What's this change for?
Why are we not going to allow quality matches if we want to allow quality matches?
Why is this an cfg?
Should we also add this to the `src/server/server/aria-label/aria-hidden.js` file, if the file doesn't have a `label` key or `String`?
Should we also set `--force-propagate` to `0.2.0` here?
This should be an instance of `beforeAutofill`.
Maybe we can move this to `execution_plan.intermediates_manager`? It's a little confusing to have the module in the `@Internal` namespace.
This should be `element.str`.
This is a debug log, but if we have a message in the logs, we should log that the datastore is never assigned, then we should log it as if the datastore is in the config or not.
@deads2k @sjenning do we need to move this to `NewArgumentClient`?
I think this could be moved to `COPILOT_ENVIRONMENT_NAME` now.
I don't think this is necessary
I'm not sure that this change is really needed, it seems that the user can't use a default value (since they can't be long)
why is this file added?
@waf2k Can we make the default `scipy` in `libddwaf.js` instead of `rules_file_path`? This is the way we're calling it for every file we need to create a new file, right?
Why is this being changed?
I don't understand the need for the console process here, but if we are not connected to anything at the start, then we should probably return something with the user.
This makes me wonder why it's a good idea to have to make sure the `data` is also defined on the `data` object, not just on the `data`.
I think that `remainingMinutes` is the correct way to go.
Shouldn't it be `new_config`?
Should we use `str` here?
This looks like a function that does not belong to the `libkb` class
Is this change needed?
This doesn't really work. This change is not needed.
A new version of this file has been removed because of an extra search.
I would have used `[NotNullWhen(true)]`, but I'm not sure it really matters
This import should also be grouped with the other std packages.
What's the point of this name?
Why is there an explicit `atpair` not `memcpy`?
@smarterclayton I'm wondering if this should be something like `host.Host` or `host.id`
I am confused by this one. Is this the case that `startOf` returns true for some reason?
can we move this into `getClass().getClass().getSimple()` ?
Is this change intentional?
Can you also change this to `keys`?
I think this is fine for now, but I think we can keep the `other er` for the `accepted_if` and `other er`.
Should we also update this to `LICENSE-2.0` (also in the other PR)
I don't see the point of having a single call to `Samples.HttpMessageHandler-http-client.cs`. Can you use a function for that?
Is there a way to check for the OP? If so, we should check the OP and return `true` when we add new OP.
This seems like a bad idea to me, if `HOSTS` is not defined, then `HOSTS` will be defined and not `HOSTS` will have to be a `inspect` and `HOSTSS` should be `HOSTS`.
`Arrays.getFragmentPagerAdapter` should be removed. Same for `ProductFragmentPagerAdapter`.
This is the new fix.
Should we log something here?
Should be `const std::`
why the number of values? why is the number of values used?
this is not the same as the other classes. It will be better to have this method in the same package as `GetValueTask<(Keccak?, AddTxResult?)> SendTransaction(Transaction tx, TxHandlingOptions)`
I think you can do a `SetTimeTime(namePiece.SetTimeTime);` to replace the value of the function, and do the check in `namePiece`
Why was this line changed?
Is this still needed? Or should we be more strict on the user-defined helm and not on the client side.
Do you need to add this as the last parameter to `openshift.openshift.io`?
`nocov` shouldn't be in this same file, so shouldn't be in this file.
I think it would be better to keep this, since it is now a bit more likely to break the `aws-sdk-s3` case.
Why is this needed?
Use the new Ruby 1.9 hash syntax.
This doesn't look necessary. The `toolbox_` can just set the `this.toolbox_.position();`
Why do you need to keep the property? I think we need to keep it, but if it's not possible to add `isAlwaysTrueOrFalse` to `getOREORETypeForSequence`, I'd suggest removing it
Why do we need it for both `plugins` and `STATUS_MAP` ?
This should be a single image, not a image
Do we have a test case for this?
This seems like it should be `NewPolicyRule`. Also I'd suggest adding `NpNamespace` as a parameter.
Why don't we want to remove it from the cache?
Maybe we don't even need this block?
I don't think the code should be part of the `Subscript` object, since the code is not really part of a public API.
@strib This is the fix that I'm going to change. It looks like we need some kind of test here.
i wonder why we are not using this in the directiveOrder
I'm a bit confused about the `_POSIX_*` stuff here. Why not `_XOPEN_SOURCE 200809L`?
Is it worth doing the same change in `loopBody` ?
Is there a reason why there is no `FLAGS_meta_client_retry_times` in both cases?
I'd prefer to avoid adding `list_success` everywhere, as it's used in other places, and it makes this more readable. But if we have a lot of tests, we should use that here.
why do we need this TODO?
This is a bit weird, why are we making the `Dynamic` static?
I don't think we need this here, it seems like the only way that a single `BalancePrefix` can be used in the context of a single statement, but I'm not sure if we should have a separate function like this. Maybe we could make sure we don't have a good way to tell which the user is doing it?
`s3control_stubber` -> `s3 adjustber`
@agramfort this is the only thing you need to add is that you can do here.
you can omit `limit` now
This is going to break the `instance_method` method in this class, which I've seen in the past :D
Shouldn't this be something like `Chaos`?
I think we should be consistent and use `self.register` here, since `cp65001` is a list of `None` (not a valid list)
I'd like to see an explicit `OpenTelemetrySdkEventSource.Log.MetricInstrumentIgnored()` method that takes an argument to `OpenTelemetrySdkEventSource.Log` as the default argument for `Metric:`
I think we can just set this to `null` in `onUp`.
I don't think you need the `model` here.
Please rename to something more generic.
Why did you remove the `Failed because:`?
If the backend's invalid blockNum does not need to be synchronized with the blockNum since it is synchronized to the backend's invalid blockNum.
Why is there a better name for this var?
The headers are now deprecated, so no need to include it here.
I think we should use `for range.Stop()` in the future.
Why not just call this `get ALWAYS_UPDATE()`?
I'm confused by this being `clang-format off`
Shouldn't this stay `*` and not `*`? I know it's not a big deal but it's still a test, so maybe we should just keep it as `*`.
Can we use `@VisibleForTesting` here?
I'm not sure if this is the right place to put this check. Is there any way to check if the user is using wire and not wire? Or are there any concerns about that? If not, I'm thinking if this would break something, but wouldn't it break something?
Let's remove this file.
Do we need to use this? It's only used in tests and doesn't have to be included in tests.
We can't just use XSP_SZ here as you're just calling XSP_SZ directly
Can we have this only when `systemConfig.getApiTermsOfUse()` is called?
this could go in `ConfigurationChanged`
This can be simplified to: `AbstractAbstractAbstractAbstractSearch::fetch(FALSE, FALSE, TRUE);`
@Spaceman1984 is this a problem with the rest of the code?
Just curious, why the change to `#`, not `#`,?
why do we need it?
This should be removed, right?
Is this safe?
Can we add a warning in the error message?
This is an improvement, I would expect a `writeDiskBlockCacheFraction` method to return the `float64` and then the `type` value will be `nil`.
I'm not sure if this is correct. I think it's ok to have a `*` as the default, but we might be able to just change it to something like `addr.ByteString()`. It's probably not worth doing.
This is a change in behavior, but if you're going to do this, you should update the `Set_by_user` text in `cart`, to match the other `cart`s.
I'd like to see a test case for this, but I would have expected this to be a different type of thing to do
This is a very minor thing to be doing. It's not a big deal, but maybe a good candidate for a constant.
remove useless newline
Does it make sense to set this in the window.isFullScreen?
This will create a new `firefox` instance if the node is in an `browser.firefox`. This code will be called in an `browser` class, which is not needed anymore.
why this change?
why is this needed ?
This will fail for `Map.cancel` because it was already closed in `dieBase`. I think we need to make sure this will be a `Map.cancel` or `if (request.connection.destroy())` in a new `dieBase`, since we are already here in the if block below.
use `skip_links` helper
Shouldn't this be a `find_targets()`?
I don't understand this. It is not needed.
What's the thinking behind removing the `name`? Is it a real thing that we should use here? I'm not sure if it's worth adding an `int` to `String()` as a way to make sure it's not valid.
This should be `int32`.
why change this?
I'm wondering if this should be in the `profile.json`?
I think it is more accurate that the headers are not in the "if not in" folder, and the header header is not in the "if not" folder?
It's fine to get rid of this `!` part. I'm not sure if we should be doing something like this. It seems like we're going to be adding an extra check here for a `case` statement.
Why is this needed, it is already added to `setHidden`?
This is the actual change I made.
you can just do `render template: 'accounts/disabled'` here.
probably need an assertion to ensure that min_x is not NULL as well
Why is this in `Exceeded MaxAckPending` in `sendErr` but not the `Exceeded MaxAckPending`?
This is the main change that fixes this bug.
Trailing whitespace detected.
we should also add this to the changelog
I think `# NOQA` is still used in the `code-config`. Maybe `code-config` should be removed?
Should this be *config.EgressConfig?
why is this removed?
why is this change needed?
I don't think this needs to be a module-level test, it's not a test.
Shouldn't `wireguard.cali` also be a `conflicts` here?
This should be split into two lines.
We can't just use `errTLFJournalEnabled` here.
I'd probably just remove this timeout since it's not a timeout.
I would move the metadata to a separate map, then do this in a separate PR.
I'm not sure this will work with the `num_levels` argument.
This should be a try/catch, not a string.
I don't think you need to pass `create_no_window` in the constructor.
is there any plan to store the `.sum` on the same page as the `.sum` on the model?
Why not using `form-group clear-fix` instead of removing it?
This is the same, we don't support `causalConsistency`.
No, can you please avoid star imports? It's not a big deal but just asking to understand what the usage of import statement is.
should we add some docs to show the event if we're not doing anything with the current v1 api?
This is a bit of an unrelated thing. I think `Namespace` is the right choice here, and it is what we want here.
Why removing `array)$`. The same is true for `allTabs`
Why are we returning 0 here?
This field is not used and can be removed.
- is not allowed in imports.
why did the function get here?
This could use `org.mule.module.extension.extension.extension.module.extension.extension.extension.extension.internal.extension.Path`
@smarterclayton should this be "openbsd" or "openbsd"?
this seems unrelated... it would also be nice to have it here
I think you should be able to remove this. We have `--verbose=0.2` now.
shouldnt it be `NHe2`?
This doesn't seem to have a good idea to me. Maybe we should just call the class_=(np.ndarray, list.Boolean?
This should be removed.
this is a change in behavior... this is not related to the fix but I don't think this makes a difference.
I wonder if this should be named `--Standardcredit=False` instead?
I think this will work for both `/` and `/`, but we can't do that for both.
This seems to be the only place it's being used. Is that intentional?
I'm not sure what you're trying to do here... I think it's better to have the default be `bool` instead, to have it default to `int32_t rowCount`.
Is there a way to make this configurable? It seems to me we should always call `w.WriteHeader(http.StatusNoContent)` and then we should not call `w.WriteHeader(http.StatusNoContent)` in the `createErrorFunc` method.
I think this should be a different condition, as `HttpMatch != nil`
I think we should also include `user: ['observers']` in these cases, since they have a default `user` set to `true` when they are `false`, which would make this a bit easier to read.
I think it might be better to use `ConfigSpec.getfilesystemSpec()` instead of `ConfigSpec.getfilesystemSpec()`
The value of this var is never used, right? Just curious
This is the fix for #4331.
@strib I'm curious what this is doing for the server, is this supposed to be `ctx.Done()`?
I don't think you can do this, you need to do this for other reasons.
The errorDialog is closed in `System#registerPath` method, which should be removed.
I don't think it makes sense to include the ResourceChanged at all, instead of the variant. It's not a problem, but it's not a problem. I think it makes more sense to have the type checking in `config` as the module name. The new `on_resource_changed` method can be used by the `config.add_subscriber()` method.
I would put the `unsigned req_done` declaration under `std::fill_done`. I'd suggest we rename this to `std::fill_done` and make this `unsigned res_done` for consistency with other parts of the code.
can you explain this change?
Do you need this new class?
Can we add a ` angular angular` to the `assert` in this folder too please?
This should have an `continue` in the if block
I'm not sure why we need this here
This is a little odd... what about an `MetricBuilder`? Should we do the same for `Meter.Name + metric.Name` and then just pass that to `MetricType` and `MetricType`, so we don't need to pass the metric in the constructor?
Can you move this outside the scope of this PR, since it's in the `if`?
i wouldn't add a new `memcpy` check to avoid NPE
This should probably be `user.update_attributes(first_name: user_data['last_name'])`
@bparees this will break the API. We should be able to get rid of the `CreateTime`.
This is the default value for keeping `1` in the `if`. It's not used anywhere else in this file. You can just do `watt.times.sjoin(seconds == 0)`
It seems we should keep this in sync with the other table file. Should we keep the old one?
Why are these not in the `v2d-PROP` package?
I think this needs to go in the public API to ensure we are not using it in the implementation as well.
can this be removed now?
I would move this line down to the `for` loop, it's probably a better way of writing it.
What is the `Window` here? Is it the correct way to do this without having to do this?
Why this is not used in the code?
why is this test changed?
nit: add trailing comma
This doesn't look right to me. If the value `language` is `transportProtocol`, the `language` value will be `null` and the `instanceof` value will always be `null`.
This should just be called _messages_ as well. (I don't know the concern.)
I don't really like that that's a deal-breaker. Can you remove this and use a local var to get the same entity?
I don't see any related changes to this PR?
why do you need this change?
I'm not sure how this will work if we are going to be doing this. Is that ok?
Doesn't look like this will need to be a list of files. I think we'll need to use the existing `status` as the name here.
This will cause a memory pressure to be complete?
The engine should be updated to use the `user_key` variable.
nit: remove the extra space.
@cra0zy - How does the consumer port default to the raw datumer and the proxyPort field get removed? If it's the most recent one, then we can get rid of it.
I'm not sure if it would be a good idea to add these to the `sdkAuthConfig` below.
Can we add a new constructor like this? It seems like we're using a default value of `ITaskItem` and it's not a subclass of `ITaskItem`, which is a very generic `get` in the `TaskItem` class.
We should probably use `type =>` here as well
I'm not sure this is the right place to do this. The `CreateRepo` function should return an error.
We could also add a `omitempty` field like `App<AuthPath>` to this type.
This is not the same as `visiRanges.removeToVisibleRanges()` (or just `if is not (textInfos.POSITION_FIRSTVISIBLE)`)
Should the default be `false`?
Use the `expand_path` helper here, so you can use `settings.close?` instead.
Should we use a table here and pass it to `buildValidDataFileDF`?
I think we can get this log from logging. It is not necessary to log at debug level, but it would make sense to move it in the `if (metadataLocation)` block, and then log at debug level.
We have to keep this import up one line with the other shadowing imports in the last import.
What about a `_statsd?.Send()`? I don't see it.
Shouldn't the `.io` also be included somewhere?
Can we use the RpcApi.QUORUM constant instead of RpcApi.QUORUM?
why do we want to use the checkCoinbase bool here instead?
This is a breaking change for the API.
@josegar74 I think you need to move this to `KOKKOS_TOOLS_INDEPENDENT_BUILD`
`&&` should be tested only when `ex_save` is not `guid_save`.
remove this line.
I would prefer to see a new `borg.mule.runtime.runtime.runtime.runtime.runtime.runtime.util.runtime.util.runtime.runtime.util.runtime.platform.util.runtime.util.runtime.platform.util` to be more specific.
Doesn't `core.plugins.acquirer[0].mocks.uninstall.mock.calls.length` work?
This was not needed before and it looks like it was already here.
Why do this change? It doesn't look like a `BlockHeight` and doesn't use a `TypeType` type for anything.
Would this still be useful for the caller to know that it is not exists?
It seems that this variable is unused. Can we remove it?
Why not return kvb.store.Filter directly?
Is it worth caching the behaviour from the PR with `de.danoeh.antennapod.core.glide.BlurTransformation`?
remove useless note. this is causing Travis failure
is there a reason this is not in use by the old version of the package?
can we make it public and create_no_window=False?
Can you also add this to the other key query, e.g. `~` and `~`
Why is `handlers` not required?
@jsoriano I am not sure if we should remove this line
This file is not needed.
Why not make this a `FullCertChainPath`?
I don't think there's a need to define this in `_selected_DATA`.
How about: `"Create"`
Do we want this to be a `List` error?
I would prefer to have an enum for it. I'm not sure if this is a good idea.
The namespace is not necessary
I'm not sure this is correct. You have to use a single `<>()` method which is not supported, and you have to check that the value is 1 or 2.
I think we should add these magic numbers to the new filename.
it is not related to this PR, but the PR doesn't change the functionality in this PR.
The above is `subst[tv] == f` and `subst[f] == f`
I would not add the check here for `wxLang.Language` but it is not actually necessary.
Do we need the `.to_sym` here? I think it is enough to just copy a string from the `.to_sym` to `.nil?` in order for the `.to_sym` to handle the case where the `.to_sym` would be a string.
This is a bit weird, why we would not use `goog:chromeOptions` directly?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is this the right thing to do here?
I think it would be more readable to check `manifest.content() < ManifestContent.DATA` here.
Use the new Ruby 1.9 hash syntax.
Line is too long. [86/80]
Should the other threads be public (as well as the other config), for consistency? Also, should we make this `GrpcStreamingDetailView`?
This will need a `if (!tmpStream)` condition.
Shouldn't the variable be reused in DataWriter::remove_all_changes?
Why did you change the variable name? It's not really obvious that it's used.
I think you can remove the `GroupMembers`
This is not a valid string. It's not a problem, but it's just for a different type.
I don't think we should set a default value in this context. We can set it to some meaningful name. I'd rather set it in the context of setting it here and then pass in the `APP_CREDENTIALS_FILE`
Is there a reason for adding the check to the numpy function instead of adding a new line?
nit: why not just `map[string]`?
I think you can use `consent.matproj` to test the `OUTCAR*"` and `MP_API_KEY`.
Block has too many lines. [29/25]
What about using a single return type here?
can we use `Configxec` here and elsewhere?
Why are we not setting instanceID twice here?
Is this needed in this PR?
I think we can get rid of this `HOST` field entirely.
Is this TODO still needed?
These fields are unused.
I think we should not call this function `insightfilestore`.
Is this change related to this PR ?
Does this need to be done?
I think you can revert this change too.
shouldn't the `\n` be on the next line?
I don't think this is the proper way to do this. This change isn't actually required.
This should be in `get_basename()`, right?
This seems wrong. The first condition should be `while (c1 == c2) - c2`
There are multiple places where `tf-system` is used, but this is not a good change. Can you add a TODO here about that?
I think we can remove `r.URL.Path` here too
I don't think this is correct
I'm curious why this class was added to pass an error. I think the error code should be added to the `ErrorListener` class, but I don't know if this is a problem.
Do we know how this would happen? I think the previous version of the `JsonType` should be `resourceDefinition.ResourceType` and `resourceDefinition.ResourceType` can be removed.
can you use the `ChainID` constant here and in other places in this PR?
Why not keep the `@see` annotation?
Why add the `violation` arg here?
we need to add `#definedefine(texture)`.
I think this is the right place to put a `Bound_msid`? I think it would be more clear to call this `TryTry` instead of `TryTry`.
The `char` variable should not be needed.
This file is not being created.
This seems unrelated to this PR?
I think it would be better to use a `time.Duration` here, rather than having a single `time.Duration`.
@larsoner this is a little confusing to me - can you check if there are any places where we would need to handle this?
Why not use `*length`?
What is `duration_cast<std::chrono::microseconds>(max_blocking_time_point - std::chrono::steady_clock::now());` supposed to be the same as the `chrono` argument?
(style) do not initialise globals to long
The test was not working before, but it was here before because it was a test. I am surprised that the test was not run.
This import is unused and can be removed.
We need to add the `.drilldown` attribute to the interface, so that it can be used in all places. This will also be used by the interface in all places.
Please remove unused import :)
@deads2k I don't know what the best approach here is. I think this should be added to the `Model` package (or maybe not).
>> [](start = 5, length = 6) nit: can you remove the `!=` part of the condition
Maybe make this `configMaps := duplicateManifests(configMaps, suffix)` and use the new `mne` function in the API instead?
I think you can also remove the `@throws` here and the `@return` statement above
nit: I would call this `MetricStartCommand` to make it clear that this is an interface and not something that makes the API more clear.
Should we just call this `clear` instead?
I would prefer if we didn't add the conflict at all, but we could just make this `return nil` instead.
This should be `@context`.
I'd prefer to use `settings.getInputInput` instead of calling it.
The `merge` method includes all the components in the `Create` method. It seems that `with tgt.close()` is called twice.
Why not use ` whose whose whosei.ExpiresAt`?
Is this a typo? It looks like this is just something we're trying to get in the PR.
Can you make `countes` a constant?
Why is it necessary to use self.best and self._size < 0?
Please add `enableInfiniteTimeout` to the doc block
This was incorrect before and I'm not sure it was intentional, but I was not able to find a way to do this now that it is a string
I'm not sure if it's the correct approach to do this, but I'm a little confused about why we have a `""` in the `""`.
Line is too long. [92/80]
This looks like a typo.
`more_vert` is already in `ValidateVisualCards` so I changed it as it was.
Please update the docstring to reflect the new behavior.
I don't understand why this is being moved. It looks like both `SerialNumber` and `Since` are defined in `app/services`.
Can you please add a TODO here that this is an API breaking change to the code?
This one is not related to the PR, but we should probably remove it from the one in the PR.
Can we remove this?
This should be a separate PR, but I'm not sure what's going on here
I think this is a bug fix, we should fix it. We'll have to update this to use a different location
I think we need to make these configuration variables as they are used only in the `AbstractCode` class.
nit: you can use the `LookUpIndexProcessorProcessor::init` helper method to get rid of the `UNUSED` interface and remove the `LookUpIndexProcessor::process` call
We should add a case when `i+1` or `i+2` is not present. It seems to do that in the past, rather than having to add this to the user. We could add a case when `i+2` is present.
nit: no need to check for nil
This can just be avoided if you just do `desul::init_lock_arrays() + 1`
Why removing the `if`?
Why not `2.2.3`?
I think this is a bug fix.
This will fail on Windows, right? I think it's worth checking if the return value is "focused" (as opposed to some fallback in the error message) instead of checking if the return value is "focused".
This line is now unused, right?
Is it correct if the plural endpoint exists? Or is it the case where `utf-8` is not a valid value?
I think you need to move this up to the top of the file and move this check to a separate method.
I would put the variable in a constant. It would be nice for the future to be explicit about it.
Why was this removed?
Why is this not -1?
Should this be moved to another method?
nit: maybe `accountaccount` or `account does not exist` or `account does not exist`
The other way around this is to add windows, and pass them to `api/api/etc.go`
Is this an error or a bug? If this is a problem, it will be hard to tell which paths are actually using, but I guess it is a bug.
I think you should also check `getQuery` and `getModificationDateFieldName`
this is a little bit hacky - the compiler can't figure it out if the value is not a list
@bryevdv, why not make it an `if (Flags: append(Flags(), []cli.Flag)`?
I don't see this flag being used anywhere. Can we remove it?
I'm a bit concerned about these two configs and the others are different, and not the actual actual ones. If you have some other standards and this is the best way to go
why do we need to setHours twice ?
This import should be grouped with the other imports.
Can you add an empty line here to make sure the order of `:` is not used in this file? The `typing` function is a bit of an unwind by the order that it has the `typing` as an argument, it is a list of `typing` and it's not a dictionary.
You could also delete this line
Why did you change the parameter of `urc` to `uc` instead of `$urc`?
I think it should be `int32` here, as well.
remove empty line
This is not necessary.
I thought we would need to make this private, as it's only used for debugging purposes of logging.
I would prefer to have this set as `products_attributes` instead of `saleor.each do |product|` since it looks like it will only be used once when `products_attributes` is set. It would be nice if we could also add an additional field to `change` after `and`. It would also make sense to add a `*` in the `spec/views/order/products_attributes.rb` which would be a good job to have a unique set in that case.
This should have a single `""` parameter to avoid confusion.
I'd make the `updated_at` class static so that it can be replaced by cope with the paper-trail or similar at some point in the future to make this more readable
This is going to throw if it is null or empty. You can use `File.Join` here.
I am surprised this works with the next run, but it seems to me that `encodeEncoder.encode` could fail.
It seems like this import should be moved outside the `from astroid import brain_dataclasses` module
Is there anything better to do this?
The other `backend`s have this `backend` variable and it looks like it would have been nice to get rid of this one.
why change the class name? `AbstractNode` is a bit confusing.
why not `a Plan for countable plan`?
Isn't `send_connection` already in the method? If not, can we use the method `send_connection` here?
This change looks good. Can you fix? The original code below also works for us with the next version of the code.
We could make this private.
In the line above this line you need to check that it is not an enum
The `function` can be removed because this function is a public API that is used for a reason.
Please change to useInView as well.
Let's add an example of a more explicit message like this: `BlockHeight: "test", []*Log{testLog}, {nil}`, `char`, `char` and `char`
this is an API break. It should be a different fix.
Why are we removing `T` and not `value`?
Is it possible to move the logic from `Timestamp` to `TimestampConfig`, and then just have `Metadata` always the last map?
This change seems unrelated, but it's a separate commit that should be reverted.
Maybe use a common pattern to make the transition, so we don't have a way for the "always" case to handle it?
I don't think it's worth doing this here, since the `ResourceName` is in `libkb.InterQueue.WebSpan`.
I think we need to keep this. The domain can still pass if any domain has been configured.
nit: `isAwsSdk` is a bit confusing now. How about `ec2/`?
I don't understand why we're not using the "info" log message here.
@jmhooper I think it is cleaner to move this logic inside the `if` block since it makes it clear it's not a blocker.
If you're using a flag for this, you must also add a `num_and_record_num_in_record` property to the next line to `num_and_record`
I'd prefer `match` to match the service name here, to match the response.
`self.kwargs` is too generic for `get`, but `self.options` is the default. Should we keep it as is? (I know this is not your fault.)
Why is this a separate method from a different class?
This is the only real change in this file. I would not introduce it to a new method.
Why do we need to change this?
Why the change?
I think you should add the new dependency on the `[3.9.0], 1;`
I think this is a bit confusing. What do you think about making this `h jsonHandler2`?
Is there any reason to make this configurable? I'm not seeing how to make it configurable.
This is not a valid request. The code that needs `compare*` is used.
I don't think the `_objectStart` function is needed here, since this is already called by `_sharedStringMap`.
I think the only time this function is used is when the handler is used is not the handler anymore, but I think that's the right place for this. I'd like to have this here to be consistent with how it works.
I'm not seeing this change?
Do we want to keep track of whether or not `true` is true or false?
I'm not sure this is the right fix since `Index` may change between two conditions. I'm not sure if `key` is the right one to use here but it is not the same as `List[str, str, str]`.
I don't understand why the change here?
Should we update `atconsistency` to include `linked-vm` ?
The `account` here looks to be redundant here, since it is already being a constant.
I think it might be better to move this to `ArgumentArgumentWith FULLException`, so that it's not in `ArgumentArgumentWith FULLException`, and then it's in `ArgumentArgumentWith FULLException` to make it easier to read when using the `ArgumentArgumentWith FULLException`, and the `ArgumentArgumentParseException` would be better.
I would probably rename this to `transpiles` to match the other specs.
if we have no nodeKey then should we remove this struct?
This interface was only used in the interface and not moved.
why not make `_` an optional context here?
This can be a `int(1)` if you want.
This line will probably cause flake8 to fail. I'm pretty sure this line line wasn't there in the wrong place.
This was removed as the plan was not working
`Region` and `env` seem to be identical to the `RegistryURL` API. Is that intentional?
This should only be used in the build.
This doesn't seem right. The expectation is that it doesn't check the color's type, but it can't check for the color's type.
I don't think this should be part of this PR, is it?
This is the main fix. I don't see any related changes to this PR in master.
Is there a reason we are using this to be configurable? If not, I think it's fine to use `conf/server/server/bundle/client` instead.
Can you add a TODO here to remove this code?
This needs to be added to the Beam docs, not to add the new field to the docs.
What about the `.ClientConfig{}`? Is the scope a common enough that `HistoryArchiverScope` is going to be used in other places?
should this be `obj.last_export` instead?
`Application.exercises` is a partial class for the messages. Please make sure we're not working on this page. You should probably add a partial class here as well.
I think we should use a `-1` here instead of `context.Background`. This would allow us to use `-2` for this.
This was incorrect, it was a duplicate.
Shouldn't we replace the old `quic` part too?
why do you change this?
I'm not sure what the problem is, I think this is not true, right?
What is this change supposed to do?
`StringUtils.join()`?
Is it possible to add this back to master?
Shouldn't we have a check for `SecureRandom.GetBytes` here?
Can you update the description to mention this change is a bit vague?
Why is this being removed?
I would also change the default value here, because it's a property of a property, not a parameter of the name of the default value.
Cgroup needs to be added if the name is a parent. The name is not a parent. And also we should probably name it as a parent.
can you add this to `<%= t '.header` please
This is a test I was thinking.
Shouldn't this be `final` ?
this is needed for your patch? or it doesn't seem right?
I would use `@Nullable` instead of `equals`, unless there's a good reason to use a default value
This is now an actual bugfix
I don't think you need to change this test, since it's not a test case.
`brave` will use `brave` for all subclasses, so maybe this should be `brave`?
We could also do `CreateEnvironment(&env)` here.
This seems like something that should be a boolean.
Is it a good idea to use beehive.Send(),msg.Route:{%v}",message.Header,message.Router? It seems like we don't need the msg.
add `,` to the below.
There is no need for these.
Why do we need this file?
Why is this include needed?
This is a bit of a hack. If `slot` is `null`, then the filter will not be `null` (which is `null`). It's not a problem if the max session limit is `null` but it's `null` (not `!null`, so we can't use the `isSupporting` method).
I would not expect the use of tlf type in the types. We have the same code that calls tlfTypeToPath and it seems to be a bit more like "unknown TLF" but we can probably remove this.
Why do we need this notification now?
@samouri This is a bit unrelated, but I would prefer it not to use the \id\EntityManager directly.
if flagBIT and flagSep can return null, this should be checked before flagSep
This is a little hard to read. I would recommend using `opts_.scoped_enums || !opts_.scoped_enums && !const Type&type`
I don't think we should be changing the signature of `getRoles` here.
I don't understand the idea of the idea of the `@private` but is there a chance that it's not there?
I think we should add a `TODO` for this.
Does the label contain a `name` field in the validate? Or am I missing something?
This is a pretty tricky thing to do, but I'm not sure if it makes sense to do a snapshot and not create a snapshot.
Is there a need to mention in the license header here?
This test was just a bad idea, but the reason for the test is that `message` and `1` would be a `null`. I'm not sure if it is worth it.
This doesn't seem right to me. I would have expected this to be called `TextText` but I think it may be a good idea to be extra thousands.
why not just `getVersion()`?
Is it worth adding `/*lib-package-json` to the version as well, given that this is only for testing purposes in this file (e.g. a local file)?
This should be `Map.trim()`.
I think it is still a reasonable idea to have a test case that checks that the verbs is not running.
@caitp @erwinmombay @cramforce should we use `list-exception` or is `off` available?
Use nested module/class definitions instead of compact style.
The `Streams` and `Kafka_api_calls` are both both `APICalls `long` and `APICalls`. Can we rename `Kafka_api_calls` to `Kafka_api_calls`?
I wonder if we could have this return a new `storeServiceAccount` instead. It would be good to have the test pass. It's probably not worth it.
I think the null check for null is needed when `_issueLogJsonWriter.WriteConfigurationNotifications` should be null?
I don't know if there's a problem with the `get_clear()` call...
This test is not really testing what we want. It's not just testing the building child, and the building code should be changed if we remove that `building` parameter from the base class.
I think this is the only change required here. The only change in this PR is the only one I did not noticed.
This should be removed.
can we move this to auto * have to do this?
This is not needed since `onFocus` is already set in `init()`
How can the args get routetable with the `bhTarget`?
I'm pretty sure this is going to be a problem with the `any` input in the `PUT` model, but the `any` input in `_` is the correct location for the `PUT` parameter. I don't see any reason to change this to `PORT_S3` because the `PORT_S3` is the same. I would just remove the `else` here.
@jdkdvoytenko @korycins is there any way to test this? I think it's better not to use a string like `@TestCase`?
I don't think we want to do this. <msg> I'm surprised the check is on the update code, but the test has the same problem with it.
Is this needed?
This is now wrong.
Should it be the first one in case there is an error or a number?
I am not sure about this one, but I am a bit concerned that there are other places in this file where we need a single one, but I don't think this change should be here
Why remove this?
Shouldn't there be a `Exception` here?
Hm, why do we need this? I thought this was a long time ago and it was a long time ago that I'm worried we're going to get rid of it.
Shouldn't this take `UpdateService` to pass the `Service`?
no copyright here too
Should this be a field instead?
Can you fix your editor to use `this` to reduce nesting?
remove this?
nit: can you avoid the lambda ? `java.nio.charset.StandardCharsets` -> `java.nio.InputStream`
Would it make sense to add a new implementation of `MakePullSubscription` to this `if err` block?
We should only do this if `_this.getValue` returns true. It's not an integer, and we should only do this if `!_this.getValue(path)` if `path === '_id` is true.
Is the `isNaN` check intentional?
does it make sense to put a custom transport transport string in the form?
This doesn't seem right, since this is a public method
Does this need to be `true`?
Should this have just been `UpdateNameMapping` instead? Seems like we should either rename it or rename it.
why do you need the 0?
What is the difference between `_interface` and `hashmap`?
@dvoytenko I think this will be more efficient if you do a `Array.Reverse(bytes)` call.
@kring do you think this change is correct? Is there some test coverage for it?
What if the collection is not Looper? Should it be Looper?
why do we need this?
I'd like to see this in the test, but it seems like this is a change to the user.
I would make this a method `administerable_by?`.
@kennknowles I think it would be better to just use the `temp_000_000` and let the `SOCKETSearchLimit` use it in the `DynamoCore.java` file.
nit: I don't know why this extra line is removed.
Let's make this a `try` statement?
Why is this added?
I'm not sure if it makes sense to have this in a separate PR.
We don't need this line anymore
I think this should be `bool synthetic_value = false` and then you don't need the return value anymore.
What is the idea behind passing a dict(cfg)? What is the reason for this?
I think you need this line
Shouldn't we also have to call `AddAttributes` here?
nit, I think we need to pass nil to the `v` param to prevent the readability of the loop.
This should be added to the `IFeatureCollection<IFeatureCollection>`
Should we use `nameof()` instead of `nameof()` here?
nit: this should probably be `ZkStateReader.readConfigName`
I would have expected a `NULL` to be null, as it's the main thing that is used by `tlsFileFile`. It would avoid having to have the `NULL` as a default value. If this is a null, then we could use `tlsFileFile.addFile()`
Wouldn't it be easier to just use ArrayInitializationVerbosenessRuleTest ?
`inspect` has no meaning, `unless val.is_a?(Hash)` would do a `inspect = normalize_log(inspect)`
The test here is not the expected behavior. It should have been updated to use the new version of `tf.IntegrationTest(t *testing.T)` instead of `tf.IntegrationTest(t *testing.T)`.
Do we still need the `!!` here?
This is the actual fix for the test, but is it really a good place to explicitly call the `world_comm_ptr` function?
I'm not sure I like this name. `User.last` is a good name for this, and it is a bit confusing with `user` (and a bit of a name). What I would like to see in the `user` for the `User` object (i.e. `user`). It's not a good idea to use the `user` name, and we could use the `last` name, but this would have been a bit more confusing. I would think that the `user` object is something like `User.user`
remove this line
@dvoytenko do you know why these were added here?
We should change `has('unlink')` to `has('unlink')` to `has('unlink')`.
We should probably check if we have an `if` branch here.
If the intention was to change the message to be empty (that's how this works). I think the intention was to change the `||` to `|| `List`, and then the `getId()` can be removed.
I'm not sure why this is needed.
No need to add the plugin here, it is already done above on line 262.
I would call this `ErigonImpl`, because that's the name we use for all other components.
This is a change from the previous version, we should keep `setOsConfig(resp.PatchPolicies)` to `setPatchPolicies(resp.C)` and remove the `setOsConfig` line altogether and just use `setPatchPolicies(resp.C)` here.
`cborStore` is the same as `OnlineStore` in `cborStore`. The only reason we use `cborStore` is to be able to use it.
Does it make sense to move this method into `_delete_temporary_files`, since it is not used in the file?
should we have a test for this ?
Why not just `bool feat_is_unconstrained`?
`apply` can be passed as a param to this function. This function should have `apply_process` which is a no-op if the function returns an instance of `process`.
Can we call this node roleTagValue directly?
I don't think we should have a "hey" wording here.
What's the reasoning behind these changes?
Can you please also add `py2exe` and `NVDAObjects.IAccessible` here too?
No need for these changes - these files should be in the database.
I think in the future it would be better if we could just call the manifest on the manifest itself rather than doing the check for both of them
@benzonico I don't think we need to do this. I think we should be able to remove `version_config` and `Product_HASH_CONFIG_KEYS`.
You can do this in `#if !NETCORE` now.
I think you could move this import into the `open_exceptions` class.
why use `All` and `rejected`? I see no reason to create a new field for the existing field.
Why not just check the file and the others?
why was this deleted?
This option isn't used anymore.
This should be reverted, right?
This is a very nice change. It was a bit unrelated to the PR.
Please use `os.path.join` to reduce the amount of things.
This one is wrong... the original code is correct. The code is still using `this.permissions.length`.
You can use `Map<...>` here.
Isn't it redundant to check for managed identity?
I think it would be better if we could use `cloneURL` here.
Can you use `Config.format` here?
I think we should be consistent and use the `tests/path.com` syntax for the `tests/unit/tests/test_ts.go` file.
I'm curious why you changed the name of the constructor to `tracer` but not `Tracer.Instance`?
This is a very minor cleanup... but I don't think it's necessary to create the trainer object here.
Not sure why this was changed.
We could move this `DeleteFiles` call into `gopts`.
Is it needed here?
This will need to be `final`, as the existing `final` parameter has to be `final`.
Should this be `@private`?
why 10 minutes? this is fine
Is there a reason for this change?
can you try to use `t` instead of `.added_to_github_repo` here?
what is this import for?
Why are you not using the version in the package?
This is not related to our current API change, but I'm not sure how to handle stats was sent.
This was the only place where we need to add this copyright year
Isn't this going to throw a null exception if the `null` is empty? If we don't have any exception to the null, we should use a `null` value.
Will this error always be present?
I think the name here should be "final name".
should we add an extra pointer here?
Just to confirm: Is it possible to have an index in a file that contains this file?
Why is this required?
This is probably wrong. It is not used, you can use the same `isinstance` function in the `FPGA_INVALID_PARAM`. You will get a warning on line 468, which is not what is causing it to get used.
I think this is what we want.
This is a `@Deprecated` for the next frame, and it is used in a different one, not in this PR.
@spooktheducks this should be `--local`, and the user should have `--local` set to the `--local` option, as this should be an "and" option to be used to specify the default as `--local`.
Please, make it a `using tables;`
This is the fix, but it is not related to this PR, I just removed it from the PR, and it was just a mistake.
@liggitt any idea why the conanfile was removed here?
Can you rename it to something more meaningful, like `appFlagDescription_ROOT`?
This is actually not correct. The idea that the file will be the correct file if we do not need the original version, as it was before.
I think you can remove the `name` variable.
`topscope_vars` could be declared as a member variable (e.g. `topscope_vars._merge(plan_vars)`).
This doesn't appear to be used anywhere?
I'm not sure this is the right word to do. I think this could be a bit more helpful than a CNP.
I'm not sure this is a good idea. The user should have a check on the `pending_restart` and then we don't know what the `cart` should have.
This is the only place where we could use a custom FD view. I think this is the most appropriate solution.
Would this work if the `\d+/.test` returns `\b`?
I wonder if there's a way to make the error message more specific?
This will fail, but I wonder if this will be an issue for the `.discard` case in case `REREStream` is not None or not.
@scalablecory, is there a reason we don't want to make the `t.tagStr` always set to the `""` value?
This is the default for the `80:80` value.
This is a bug fix, but I think I'm missing something.
I think we should have some sort of "Metadata" here to make it less clear what this is.
This will be done in the same PR as this is done in the same patch.
It is not a big deal. But if we are removing the field, we should not introduce `math` to `math.js` as well as we have it in other places as well.
This will need to be a local variable in the std::move().
I don't see this used anywhere, can you check why it is necessary?
This is wrong. It's an error. It is a warning in the `totalTimeout`, not a `totalTimeout`.
Is it possible to have this as a string in the set? Or should we allow for a string here?
I think we can remove this line.
this change looks good, we can fix it later.
`Undo` -> `Undo`
>fastToTime(remaining_time) [](start = 8, length = 10) nit: I would rename the method to something like: `to_entity_to_entity`
Shouldn't `protoConfig` also be set with `protoFile` ? This would mean a `TestVersion` would be created by `protoConfig`.
should also be "0".
Should this constant be in `Concat.read_connection`?
Is this the case where `configuration` is null?
@agaspardcilia can you double check the logic here?
nit: if you remove this TODO, then it should be `if (qbftConfigOptions.getValidatorContractAddress() != null) {`
can we call it "public const int TracerTimeout = -32016;
Unfortunately we're using this, I wonder if the `integration-update.txt` file is still needed, since we're using it as a directory to avoid the module name.
This is not a correct type for context, but a function named `pluginname` is a better name.
Can you update the changelog to update the doc?
If we want to keep the `CpuMax` as a dependency we can just use it as a dependency.
I wouldn't do that. If I specify it in the first place, we need to run `s = None`. I'd rather have a `getattr(self, 'yank_text', 'yank_text'):`.
this should be removed (as it's a debug function)
Just for testing?
These changes are not related to the PR but it seems to be a breaking change.
This should probably be an `Task` not an `Task.LocalChapter` object.
I don't think it's a good idea to add the `displayResources` field to the `saleor/displayResources/displayResources`. It would make sense to add a `displayResources` property to this list to the future to avoid the future change. I think that we should also consider moving `saleor/displayResources` to `saleor/Show raw resources` and add `saleor/displayResources.json` and move the `a gathered.json` to `a gathered`, since there's a lot more places in the future.
This change looks unnecessary to me.
Why not use the `time.DurationFromSeconds(1)` here?
Why is that change in this PR?
Why is it necessary to set this.s.options.ignoreUndefined directly?
It is not safe to do anything with logger.Sugar. The logger.DB() is the same.
Does this not work? I'm not sure that we need to do anything to do it now.
Is this a typo?
I'm not sure we need to make `public X509Certificate2 ClientCertificate { get; set; }` here.
The package name is misleading. It's a `gendoc-x` but `gendoc-rst`. The same is for `ci.`
This is the only place where we're using `Ready` in the test. I'd like to avoid the `kind` calls to `l` if we're not logging anything here.
Should be a const or a const.
This is unrelated to other changes in this file, but should be reverted to the original version.
This should have an option that has the same effect, but I think it is better to check for both atoi and atoi if it is 0.
Just remove the `AWS IAM` parameter from the function?
Please add a JIRA issue to track fixing.
I think the ` isUndefined` should be conditional on `Object`, `any`, `any` or `isInteger` and `readable` should be on the same line.
Should this be a `buildports` instead of an enum? It looks like we have a lot of things in `Transports`, but maybe it's worth mentioning that the API is still in place.
I think we can remove this file
This class is only used in the `RequestRequest` package for the source. I think we should be able to remove it.
Is this needed? Are you sure we don't want the file name anymore?
why this check?
This shouldn't be here. Also I think it should be `Supported_TypeClass = [RESOURCE, IAM_POLICY, GCS_POLICY]`
Is this a "pin" timeout?
We should probably add an issue to track what it was before.
Maybe also add a TODO to make sure `Metric` is invalid and we will never be aware of that
I'd prefer the code that checks against the current assembly, rather than having it as a dependency in the cache file. That way, we don't have to worry about the cache file being stored in the extension path.
Is there a reason why we're not using `SYSLOG_INTERNAL_WARNING_ONCE` on this line?
I'd rather we do this for all cases that have a `directConnection` property, but it wouldn't be better to have it in the constructor.
We could have used `int64.histogram` instead of `int64.histogram`
Can we get rid of this method?
I don't think this is correct.
Could you please update the doc and test if you are testing theLogs variable?
I'm not sure if we should do this. If we have `propagateDeadlineToChildren` and `ValidateFunc` the `ValidateFunc` will have a node deadline that we will have to.
This is a test I would expect.
I think this will break some code. You will need to do this with a 0, Math.min(0, Math.max(String)
I'm not sure if it makes sense to have the `IEnumerator`, `IEnumerator_TYPE_NONE` and `IEnumerator_TYPE_NONE` as a special class, instead of an array. The only thing I would expect is `IEnumerator` but is not really a special class.
I'm not a fan of this, the usage is a bit confusing, and the method name is used to return a string that is a list of'))
if mask.dtype is np.bool, it should be always Encode: `mask = np.array(mask, dtype=bool)`
Remove empty line.
Why do we need this? I would think the network is the "port".
The server will also need to add to `json: CMake` for this, since it can be a pointer.
Why not make this function a local variable and return in that case?
Why did you get a const here?
Please use the actual class name, `besu-plugin.data`
I think this should be `Connection.prototype.syncIndexes()`
Should this be `update_existing_accounts` instead of `update_existing_accounts`?
Why do you need to change the special handling for conntrack table anymore?
`then` can be removed here as well
This import is unused.
This is already done inside the if block (it is not a good idea).
The `.aming()` is a bit confusing here. I would have made the `name` arg match the return value to `selected_file`.
If the user tries to read the duplicate names, we should not wait for it to happen, and not be modified. If we need to do this, we should do the same for the user's duplicate names.
This was the only place where we need to do it, but the new `row.Trim()` can be removed
Why is this necessary? I don't see any usage of backups, why is it only for the backups?
Shouldn't this be called `SCAllowedAllowed` or `SCAllowedAllowedAllowed`? (I don't see why we need the extra `SCAllowedAllowed`
It's not necessary to check that the `file` and `127s` are the same.
It is not that important, but we should fix it for the TODO
This should not be part of this PR, but I would expect that we can move this to the other `env.env` file.
I think it's better to make this take a struct and not take the whole object.
why do we need the else here?
Why does the tag need to be changed to "StatusFilter"?
I think this should be `NotImplemented`
Why not simply use searcher.getCore().getCoreContainer() in core?
I think we should add a default implementation in `src/services/config.yml` and use that here, rather than in `*` (with new code)
This is a breaking change for the tests. The `gofmt` change is not required. The `StressChaos.ContainerNames` function returns `false`.
Would it be possible to have this as a static utility class and just call it `DocIdSetIteratorIterator` instead of a static class?
We should log the logger.debug.
Why did you remove these tests?
Maybe `default='update'`?
This is a little hard to follow. Maybe "This can contain 255 characters or less. If you do a product that has a product that should contain 255 characters or less.
Is the `e` flag used somewhere?
Should this have a `custom_options` arg?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This change is not related to the change. The function name is a bit misleading.
WPCS: I don't see this being used anywhere?
can you add a file as `// note note that this file can be removed
I think the `quote.Length - 2` is too generic. Can we just use `String.EndsWith(quote)`?
should be done after the test.close()
Is this still necessary?
Why not `jServer.MakeFBOsForExistingJournals`? This should be called `MakeDiskBlockCacheIfNotExists`.
I don't think it's worth it, but I'm pretty sure it's just the "Copyright 2017" change.
I think we should use `boost::format`.
Shouldn't we include the roleText variable in the general general user?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is this needed?
Can we have a test to cover this case?
What is a logger?
I think this should be `IdentifyForChat`
I don't think this should be part of the API. The only reason we need to implement is the `please use `org.mule.runtime.runtime` when the user wants to include their own VS files.
could we rename `defer resp.StatusCode == http.StatusNotFound` to make it clearer?
Do you need to change any of these any more? I don't know which is the best for this.
The `typeName` and `addCallName` need to be passed in to the `CallName` method as well?
I don't see this change used?
Should we do the same for each element in `_shared_type`?
Please use _testPath.cs
This should be `defer udpConn.Close()`
I think it should be an enum in Library and not a new instance.
I think this is still not needed, right?
This is not needed. The VkQueueTypeArray[] already happened in the function name.
Is this related to this patch or is it just for testing?
`variant` is not supported in IE. I think we should keep the variant as variant as variant as possible.
Can this be removed?
I am still curious why `aURL` was not `null` here and it does not exist in the `fetchStore` itself. It is used in the `fetchStore` class which is `null` check and is in `aURL`.
Should be minSequenceNumber = 0L
I'm not sure about this change, is there any reason to use `replace(...)` instead of `replace(...)`, since this has the original version?
Can we make it private and set it to a value here, in case it's not used.
Style/RedundantReturn: Redundant return detected.
I don't think you need this. We can just return a boolean.
This should be made internal and not a DVC configuration.
This seems to be a bug in `sn.Username`?
This is a change in behavior for the same data as the "Invalid Public key" case, and it doesn't make sense for the "default" case
We should not allow `role` to be set in the axe.commons.aria.getRolesByType('landmark');`. I think the same applies to the above `var` below.
Please remove the final variable and do the `updatePreviews = false;`. Also, `localConnection.type == Blockly.OUTPUT_VALUE` below.
This is the same as `NSSelector` I think.
I would have expected to be set to True. In order to not have the same set to True.
I don't think these are actually required for SarifLog.
Use `admin_index?` here to avoid unnecessary indentation issues in the model, I think.
Why is this line needed? The previous one is a bit more efficient and is a single line at the end of the line.
@saghul, this is what I meant by @steveisvest, I'm not sure what the correct thing to do is. It seems we have a good use for the `long` here and not an integer...
This is probably better off of `assert`.
Which import is needed here?
I think this is a breaking change. Please remove it.
nit: This should be moved into the line above to make the line happy.
I believe this change is not needed any more?
Does it work on Windows if we do the assert on DR_HOST_NOT_TARGET ? This looks like something we need to check in this code.
Why is the import changed here?
I think this could be a `enum` with `null: false`
we should probably make this a separate function and return an error
I think it would be good to make this consistent with the rest of the file
@mjkkirschner I think this change is not correct, but I am pretty sure it is safe to do.
should we add a `:team_id` column?
I think it would be more consistent and use the other names to make the naming consistent.
@jenachoi change the behaviour here as it seems the only thing that could break if this fails. This is probably ok for now, but the `loaded experiment` is a little confusing because it's not in the `newattr`.
This is the most important change that will break the old behavior of `node.form.version` in the build.
Style nit: I'd prefer a single line at least here (to be consistent with the rest of the file), that's a nitpick, and you could use a single line after all the ones below.
I don't see where it's used.
Why not `PYPY_VERSION`?
Why not make the secret in `config.secret_key_base`?
Why is this needed?
I don't think it's necessary for this code to check if the CA is in the first place. The `if` condition should be moved out of the if statement.
Is there a reason you added the `handler_registered` parameter here?
Block has too many lines. [30/25]
`regexp` is a string, not a string, so you should use `checked` instead
Lint/AmbiguousBlockAssociation: Parenthesize the param [true]
I don't understand why the old `Provider` is needed, it is not a public API.
Why did you change this?
Move these header to `push/md5.h` as `push_configuration.py`
This is good, but it seems to me it's a bit of a nit picky, so we should probably change the name for the variable to `elements`
I'm wondering if this should also be `IsEffectInSpell(spell_id, SE_Charm)`.
I think this could have been a separate commit (and I just noticed that this is a bugfix) but I'm curious why it's here.
can we make this `GetReceiverAddress` instead?
We can remove `controllerStatusOk` from here and pass it as an argument to the `volumeStatusOK` in `volumeStatusOK`.
This is a different file, not a part of a PR, but a minor version of the changes are unrelated to the PR, and the changes in this file are not related to this PR.
Did this just make it a `nil` or should it be an `internal`?
Metrics/BlockLength: Block has too many lines. [30/25]
Should this be a `switch`? Or should we have a `switch`?
I don't see how this is used anywhere.
Why removing the `getName()` call?
This doesn't seem related to this PR, but it seems like it is just a `EOM` that we're passing in.
Please use the existing constants instead of the new constants.
We should remove this, it's not needed anymore. Please revert.
These should probably be `time.Second` and not `maxRTOTimeout` right? Also, I think it's better to use `time.Millisecond` instead of `time.Second` since this is the default.
Why are we using diskAttachment struct here? I'd rather not add new diskAttachment struct here, as it is not used anywhere in some cases
nit: this line can be removed
Why do we need to check for `argparse.NamespacePaths` here as well? Isn't the logic to use configs.NamespacePaths?
Do you have any idea why we have to make this a file instead of just a hard coded value?
This should probably return the type of `(JObject) projectJsonRoot["dependencies"]`
I think this should be an error instead of an error. We could probably also say that the correct message is something like `Histogram is not supplied as a tuple`
this seems like an unrelated change, could it just be removed?
`MinimumDataRate MinimumDataRate` will always be received. I think we should add `MinimumDataRate MinimumDataRate` to `NodeModel.NodeModel.DataRate` instead of adding a property to the property.
this is probably a bug, we don't need to re-define this
This should be done in a separate PR.
I would move this to the top of the file.
Please, use the same name as the default, and use `memcpy`.
I would not add `assertEquals` into `assertEqual`.
`throw new SessionNotFoundException("Session ID is null. Using WebDriver after calling quit()?");`
I think this should be moved to `NewPipeline` instead, and then you can get `err != nil` and remove `NewPipeline`.
why remove it?
I'm not sure if it is better to put `sizeof(X)_maxFrameSize` around here, since you're using `null` below.
Is this a bug fix?
I think this is a bit vague. I think we should try to keep track of whether we want to fetch the request, and have the fetch fetch call the request in order to call fetch.
@mhoemmen Can you try to avoid this change? It's probably better to have the tests pass and then we can remove it
`BATCH_SIZE_MAP` is not used anywhere, so this should be `INVALID_PARAMETER_VALUE_EXCEPTION`.
We should also set setPriority(100)` here. Also, I believe the idea of the `Coal bag` and `AllPriority(90)` is that this call will fail, because of the "Coal bag".
I think we can keep this and add the constructor to the interface.
i don't like to have this in my last review, but can you add a link to the doc string so we can use `pkg/vv2/klogr` directly instead?
We have `options/api/constants.py` for the new values that are used in the project so they can just use it.
Why is this being changed in this PR?
This is the only usage of the `ALL_DATA_FILES` table in the test class.
need to add the new entry for this. See other files.
Do we really want to print out a attrname? I mean, I see that in the response_name, not response_name?
I think we could make this a global constant, so it's clear that this is a value in the test suite.
Please let me know if this import is needed.
should we also make this change on the system?
This is an actual bug, should be `debug` instead of `finest`
I'm wondering why this change was added. The reason for this is that we are not using any of them to use the exact same version of the API and they are not used anywhere else in this PR.
You don't need this line, just don't put it inside the function.
Should this be a `progressindicator` class?
Is the `ssize` import still needed here?
is it worth logging a warning here instead of just logging it?
I'd say that this is not a bit hacky, but if the streams is not a async streams, the whole of it will be useful to know if the streams is a async streams. So I would say that the doc is a bit more useful.
I'd probably want to know if there's a good reason to not change the signature of `Kubernetes.get()` to `except ...` or even better.
I think the rest of these changes are in this PR.
I think it would be better to add a `TODO` here (and in line 218 for the same reason as you added).
We need to add this method to `unsolved()` in the code to avoid this duplication and make the code simpler, and the code should only be made when the method is being used as a public method (which will be used for other code).
why remove this
This is the only usage of our code in `Time.current_block`. I'd prefer if we can remove this method. `block.current_block` will only be used if `block.current_block.current_block.current_block`.
Can't this just be `async function`?
It seems like this should be an unnecessary version that's in a separate PR?
why is this change needed? is it only when `stages` is set?
Is this a change in behavior? Is it because `spc.recorder.Event()` returns `c.isAutoSpc()`?
This isn't a good idea, but I think we need to think of it to be consistent with what we do for the `id context` context.
It is not a good idea to use a list of strings in the array. I think it should be a list of strings.
`stage_with_dcn=(None, fallback_on_head=2)`, and the fallback_on_stride would work.
I'm not sure this is really necessary. `WPCOMOM<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.<ore_>.>.
Why have the `Client` be used instead of the actual client?
It is not obvious to me that this is the only place where the `/products/25-ios-on-rails` flag exists. Can we fix it to use the old `/products/25-text-ases-beta` flag?
@jcotela It looks like we're missing a `*` here, but not sure how to deal with this.
This should be `opts`.
should this be a `after_reader`?
This is an example of how it works. It looks like a function that returns the values in `history_depth` and it looks like a function that returns the values in the list.
The error is thrown here because the error is already logged below.
why is this change necessary?
Use the new hash syntax, relative to the start of the line where the left curly brace is.
@deads2k i'm not sure why we need to indicate here
I think it would be good to check that the version is the same as the dataVersionValue, since this is the same as the `task.json` file (which is not the case)
This should be a `log.url.isDebugEnabled()` instead of an `int` (which I think would be more readable if we didn't catch it).
Is it possible to remove this code? It looks like it will be a no-op if the `san` is provided.
this is the only place where wlr_surface_state_release_buffer was used?
should this TODO go away, or should it be at the moment?
`message.warning` may be more clear
Does this need to be re-executing? Isn't it only for context manager?
@QilongTang @jridgewell not sure if there is a better way to write this.
I think we don't want to make this change, but I think `ErrNotFound` is still used by the `TagUidFunc`.
We need to check `offlineMode` when loading the hostname config, so that it is available.
The `toString()` check should not be necessary because the method `getOutput()` returns null.
I wonder if we should use a different variable for user and not a user-specific variable. Is it possible to have a `account` param in the `@title`? Or maybe even better, `update_user_settings`?
Can we call this `uploadSession` instead?
I would suggest a different name. `separate_addons_delet`
Can you change this to `verify_object_fields(Object.keys(dict).length),`
@lilleyse this is probably what I was thinking. I'm wondering if we can just do `if !validNetworkMode(container.HostConfig)` so we can avoid checking `!validNetworkMode(container.HostConfig)`?
Do you know why this was here before, or did you get a test for it?
Is there a possibility of "if we are supplied with header fields already present" somewhere?
I don't know if we should change this, but I think it would be better if we can keep this here, since the rest is just for testing purposes.
Please rename this to '('
You can use this constant directly in the `else` branch. Also, there is a slight logic change that is needed since you are already setting this to `List`.
Please keep all the changes in this file, and keep the changes in this file.
I don't think the right approach is to do this. The previous code was to avoid the `reportArgs`. This is not the case, because the value of this method is `flag_reportArgs`. The code is not the same, and we don't want to be aware of that in this loop, and we don't want it to be called on `flag_reportArgs`. This will be the only case where `flag_reportArgs` is used in that function.
Why the double underscore for that?
What's going on here? Why don't you just use `int` here?
Are we sure we don't need this any more? It's only used for #{@checkout, right?
This is not correct.
Why is this needed?
@wido This change means that the former will never get executed. This is where the former is sent. If this is not the right place to put it.
Nice catch, but can you put those input options in a separate PR?
These should be moved to `appJob`
This would be a good place to put a code path in `setTrustedHosts()` to avoid the `isset()` calls.
This is not a good idea. This should be a separate PR to fix it. We should also fix the other test code to check if the user has an `PAController` that has a `PAController` as they can.
This is a bit confusing, maybe just say `makecourse`?
Nitpick: I would call this `extra`
This should be the name `Url`
@MathieuAA/sassenhagen we are going to need to support the `SiteKind` type of `DeviceAppServices` as well.
Why did you change this?
Why is this needed? It's not a property anymore.
why not log the debug level?
This should be `use += llvm_link_static ifneq (true, false) or false`
Please put this on the next line
why this is removed?
Same thing here, we should import from `distributed` from `distributed.jit`
remove empty line
`config.conf["update"]` is not the default value for the user-defined `config.conf["update"]`, so this is fine.
`--same-Mutable"` (and `-y`).
I don't know what is `ip` here. Can we use the `Rex` class here and pass that `self.re.search(f.server_conn.ip_address[0]`?
Is this really necessary?
I think there's a better way to test this (at least the generating mode is still running) to see how to handle generating.
I think we want this import
Shouldn't this be `Powerableableableable`?
Why is this needed? I wouldn't expect this to be a separate function.
Does this test still fail if the test was failing because the testing data fails?
I think we could move the `break` block to the top of the function.
This should be `obj.name == obj.value`
just curious, why is this needed?
I'm not sure we should add this method to `isEth66Compatible`... if that is not the case then we can remove the method altogether.
I'm not sure if this is correct. The new test is testing the first time the file is loaded.
This error isn't very useful.
Does this change belong in a separate pull request?
why not pass in `next` directly, to avoid calling the function every time it's called?
should we remove it or add a warning?
I would suggest moving this import into the `from astroid.__pkginfo__ import version as astroid_version` module since it's used in the `_version` module.
This is a leftover from the PR.
We can avoid variable names here, as it is a bit of a hack. We can avoid this change and just do this in a separate PR, but it's not a problem, since `contains` is only called once and not once. I would recommend adding `contains` as an arg, and `contains` is not a big deal.
I don't know how I missed this, but why is this not using Lob_Append_Or_Error instead of Lob_Append_Or_Create? The idea here is that Lob_Append_Or_Create is only used for the same result, not for the Lob_Append_Or_Error. I don't have a strong opinion on it, but it seems to me that I would not expect this check to be here. This seems to make it clear that this is the case, and we could have a better way to get the Lob_Pcontrib_Pcontrib_
could this be an explicit `debug`?
I'm pretty sure this will cause the SNI hostname to be set when the SNI hostname is set. I think it's worth adding an ifdef to the new code here. I am not quite sure if this is the right place to add it.
this is not the right place to update the test.
The method `setB` is used to throw an exception, but the method is not used. It will be more consistent.
Why is this change needed? I don't see it being used in this PR.
is this used?
Does it make sense to get this from the `Interceptors` method? I don't think that it matters here, but I think this can be improved.
Can you remove this? It is already a global, not strictly needed
Nit: it's a bit strange if the default value was `1` or `2. it does not match the code. It should be `2. it expects broker configmap mounted at "/var/run/cloud-run-events',broker/targets`
You should be able to use the "local" error if you're using the key `local` or `local.Eventf`
I think this should be in separate commit
@dvoytenko can you confirm this is not correct as it's a public API, but I don't have a hard time to figure out how to get to this.
this seems like a bug fix.
Can this be const_cast?
why do you need to do this?
Nit: This should be a bit more descriptive. Maybe "use the short-udent constant".
Is the idea to reduce the analytics, if we want to reduce it, or does it only reduce garbage when it happens? If so, is it okay for now to reduce it?
Maybe we should just call this `actualNode`, since we're now returning `hasAttr`
We should move the `os <msg> path` to the `os.path` module, it seems that the `CommonBase` can be used in the `__init__` module (from `os.path.abspath`).
I would make this `map(PrimeNumbers::factorization)`, because it's not really a good idea to use the `map` key for the smallestStepsNeeded.
Shouldn't we just remove this class entirely ?
What's this catch?
Why not move the import of the `k8s.io/...` imports into the `/api` package?
Can you please rename `private` to `protected` to indicate the meaning of this `private`?
Would you mind adding the IPv4 address in the message as well?
Line is too long. [105/80]
nit: import below
This field should be renamed as well.
why these are changed?
If we're going to do this, do we need to set `values` here?
I think we could add a more generic name for this. The name makes it sound like it's a `Execution stopped` or `Execution stopped-drop` and not a `Execution stopped` so that it can be confused with a `derive` or `Execution stopped-drop`
I am a bit surprised we didn't have a valid `status_id` field in the `resourceAwsAP_SNAPSHOT` property...
I'm not sure this is the best way to do this. I'm just wondering if we can just have `height_path(@purchase)` at this point, instead of adding an additional transport.
Isn't it better to do this in a different PR than in the `boolean`? If we do, we may have to create a new `boolean` value for this, which would be a good idea for us to have it in a separate PR, and in the future we would need to add a `boolean`.
This should probably be updated to use `a jdk` instead of `a jdk`
I'm not sure what this does, but if we do, we should not need to add `@SuppressWarnings` here
This is the change that affects us when the sample key was deleted in the previous version.
Please rename to `ConcurrentHashMap` or `ConcurrentHashMap.getMap`, and change the type to `ConcurrentHashMap`.
The `title` method is a `linkuralSort` method. Is the `titleNaturalSort` method correct?
This is a little confusing to me. If we're going to make sure that the deferred type is not `nil` then we should check for `err` here and not raise an error if `err` is the right error.
If this is a test that can't be updated then you can change the tests as well
won't `! Explore libp2p bitswap` work?
I'm not sure if this is the correct name.
This is not related to the PR. The other changes in the test should be reverted.
Should this be `default_domain` instead of `ENIType`?
why is this change?
Add @since to follow up PRs, we can add an annotation on this class to avoid code duplication.
Why not just pass in the function?
The last two lines are superfluous.
This is not correct, `declare(strict_types=1);` will do the right thing. `declare(strict_types=1);` is already in the `if (declare(strict_types) && !__construct(string $message, \Throwable $previous))`
why is this a pointer?
This is a new API change, but I don't think this is necessary.
Can this function be called `NewGRPCOptions`?
I think this is fine, but I would say that `require.Equal(t,, individual)` would be a bit nicer.
I think this is what we want here. The `key` key is used to be the same key as the payment channel. If we don't want to stop reading the `_` key, then we could just use the `key` field here. The `key` key will not work with `key`.
I think we should probably be using `str.name()`, as this is only used for testing, right?
I'm not sure if we should do this here. What if the user doesn't have a `s3.Error == "BucketAlreadyOwnedByYou"` (e.g., if we're going to have to wait for potential failure later)? If we're going to do this we should add a `s3.Error` check in `s3.:%.Code` so that it's easier to just check that it's not a `s3.Error` check?
this should also be a `java-chassis`.
Could you please revert this?
This is a little confusing. Why is ROUTER needed?
why are you removing this?
why change this?
this is the only thing I'm worried about, but it seems like the most important information is to have an array of values that can be used with the default values. I am not really sure what the right value is for it.
Is the `lastBlock.HeaderByHeight` not needed anymore?
why is this changed?
This is a leftover ...
I don't think this is the right fix for this. The problem is that we have to change this in this test in a future PR. The problem is that `pytest.fixture` is only for the `TestFlow` package that we don't want to fix in the tests that don't have `None`. We should be able to remove the check in the `TestFlow` package.
Should this be a warning?
I guess we need to call this one `StoreSingleton`?
This is the only place where this could be used is. I'm pretty sure you're doing this.
Is this still needed?
This is the only place where `sender_gcpbroker` is used, and we should probably add it to the `*` branch.
This is a good change, we have a unit test for this.
I think it would be cleaner to use an empty list instead of a list
Should this be `get_INSTALLED_to_py`? It would allow us to avoid `get_INSTALLED_to_py` and `get_DT_INSTALLED_to_py`
I don't think you can do that anymore. You can just do `return #{format_caller(example.location)}")` without the `location`.
I see this was used for testing, but it seems like it's not used anywhere
Do we need to do anything else if graphicsPipelineCI.pInputAssemblyState has been set to false?
nit: rename to ` CleanWebpackPlugin`.
We need a new `detectStale` property in the base class.
This test is failing because we want the `assertAlmostEqual`.
This is a no-op, right? The fact that `heaviestTipSetCh` is a boolean, not a `heaviestTipSetCh`? The `hea` is a `SetCh` object, so I'd like to have it as a `time.{}` so that `heaviestTipSetCh` is a `SetCh` object.
The `AWS IAM` was left here already so I removed it.
In the case of a log message, this log message will not be printed. But if the message is printed, the log message will be printed as something that is in the middle of the failure.
why not just `err`?
@danrot is there a reason for this change?
Can you move this back to L1833?
What happens if we make the UvPipeCount private?
I would use logical-value for this.
I think it's good idea to have the logging statement at least one test that fails, because the logging is not wired up if we want a new logging.
Can we use a `convertSocketFactory` instead of `String`?
I'm not sure why this is here. I don't see it in my PR.
remove the empty line
This should be grouped with the other std packages
This should actually use DR_REG_NZCV, because we don't have the DR_REG_CNTVCT_EL. You can also use `reg == DR_REG_FPSR`.
the default segwit is 1, so no need to use it in this branch.
I'm not sure we should set the default value for this method. Is the method still being called by the caller?
We need to add this to all of the files.
I'd prefer to see this as a separate sentence, if it's a magic field.
why is this not an old struct?
Just curious, are these changes required?
It seems like we should have an option to keep the `junit-config`, as we're here to add the `junit-config` flag to all of them.
Isn't the `is` needed?
Should this be readonly?
This should be called `List`
I'm not sure that this is correct, the content_for :landing_page_back_link will always be the same as the "title" page as the page.
This is the only thing I don't like about isDestroyed here. Shouldn't we only send when `isDestroyed` is set? (i.e. if `this.splashWindow` is not set, then if `this.this.splashWindow` is set, we will not need to set `close` here.
Not sure we want to support these changes, but I think we might as well do it in `zfs-config.ini` since we have a lot of new functionality we have in the future.
is it really necessary to log it?
This is a bit odd, as `setTimeout` returns a non-null string. Should we do the same for `offerings` ?
can you move this to the top of the file? (and the other ones below)
should this be `anomalyScore`?
"TheThe concrete API will take" -> "the shutdown API will be"
this could also use `NG_RETURN_IF_ERROR`.
can you change the log to include a message? i.e. `gotChan := make(chan []*pubsub.Message) + "openshift-api-Message", "")`
To me this is wrong I think we should change the current user as well for now
This import is unused. Please remove it.
Shouldn't this use `concurrent` instead of the `concurrent` one?
Would be better if this condition was `[0]`
The name `adult_musical` is misleading here, since you can't do `copy_copy_copy_musical` without a name
This is not right, the check should be `use_args['_noop'] = false`
I don't think we should remove this.
@adamjstewart And here you are adding `headers=403`, I think it is better to put the `headers=403` in the `@Form` method in order for this test to fail. This is why you are adding the `assert` in `_edited_bucket` to the `assert` in the `else` clause.
Why is this necessary? `c._nextState = assign({}, c._nextState)` is already `nextState==null`.
Can we also add a description about the description of the description?
We can add a check to see if there is an explicit port for that?
This is a breaking change. The `Provider` is a breaking change to the API as well.
do we need to add this to the docs? If we do, maybe we could add it to the `pdf` component?
can you add the migration migration here too please?
Use && instead of and.
This should be `ISetupBuilder>`.
Why not final?
why not move this to protocol.Dock?
Why is this necessary?
this should be done in `onStartTrackingTouch`.
This should probably be a warning.
Nit: I don't think it's necessary to change these tests, they are only used in `pkg/install.go`.
I think we don't need the `java.variant.variant.variant` module. We can just import the `java.variant.variant` class and remove `java.variant` class altogether
Why do we want to do this?
This is a bit confusing, as this is a very generic class.
I'm pretty sure the whole whole thing that's still passing here is a little confusing to me - the whole `thirty_day_commit_count` call would be fine. But the `thirty_day_commit_count` call would still be necessary.
@Scottmitch why is this needed?
I guess this should be `input_size() < splitInfoSize * 2`, since the next line is also wrong.
This logic should be moved inside the if block, right?
So, we have no other engine in the engine?
Should we use `except Exception` here too?
Should we add `i` to `i` in this PR?
I think we also need to add this to `GROUP_USERS` and `GROUP_MEMBERS`.
what if we added a `\` here instead of `\`?
I would make it package-private, as you can tell from the PR to not introduce it
I'm not sure this is the right choice, but it seems to me that this should be a string rather than a string. I'm not sure if it should be a string, since it's just an idea to use the exact same string as `self.created_at.year` and not `self.created_at.month`, as we're not using that string.
nit: `// test_generate_build_file(path, 'data')`
This is not a good idea. The `wait` method should be called in `onExecutionEventListener`.
This change looks good, but I think a better solution would be to use `--force`, `--force` and `--force` to allow for the required error.
Same here, if record is present, we should check for a record.frozen? If there's a record, we should check the key is not provided.
Forgot to remove the extra spaces here and below
@jsoriano Can you review this change from the previous commit?
can we use sys.stdin.read() in the next line ?
Can you add this check to the other similar code in this file as well?
Should we set both `-enabled` and `-enabled`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I'm not sure I like the idea of having a single `publishTargetDataverse` as a `ResponseLoader`. Can we just use `publishTargetDataverse.then()`?
This will not work, if the `OpenSSLCertificate` list is empty. You need to keep the `!OpenSSLCertificate|string` case for both, and the `name` list.
We should probably add an explicit check here for `getlensFluentbit` to avoid an unnecessary `static` and `static` action.
Nit: move this import under the `github.com/aws/...` block (and the other `case` imports) to the `aws` directory.
@stephentoub do we have any concerns with this change?
This is a change from the previous behavior, but I guess this should be a different fix.
The intention is to make `the int` a const, and use that instead of a const
@strib I'm wondering why we need a long-termterm for the XNA test case?
Is there an alternative way to avoid calling the "MissingAuthorization" class?
I would have put these fields as constants in the class class and make it internal, e.g. `Jelps();` and `Jelps = _psbb.slice()`, so that you don't have to escape the class.
This import is out of scope of this PR.
Do you know what this means? We're not doing anything with this, so maybe `status` is better?
I'd like to avoid using `key` as a prefix for type names. It seems like we're using `NewKeyStore` for these fields.
why is this a constant?
I believe that `zip` is not a valid `long`?
no need to import SocksClientLayer
can we put the `_pre_extended_syscall_sigmasks` into `handle_pre_extended_syscall_sigmasks`? that seems to be a bit confusing. How do you feel about just having the `pre_extended_syscall_sigmasks()` function return different values?
Can you change the description to: > The list is sorted by default in ascending order.
You need an `mode` here, too.
If you're using a NULL-like response, you should not need an error. This should just be `break` if you're already doing the `d_map` check.
We don't need to pass `AccountID` here.
I think this should be `blockblock.type.isShadow()`
This should probably be a bit confusing since we have a `cmake doc` that is used for a `patch` and `patch` to return an `nil`.
We should add `NoHeaderSupport` to the field names as well.
Isn't this an error if error is `nil`?
Unit name of the asset to look up, "unit" could be a little more meaningful.
do we need to add any new information to these?
is this the right way to do this? I thought it was already there?
Should be WATERMARK_FIELD_NAME_DEFAULT + 1?
Is there any difference between `// ResolvedReadersMap` and `KeyReadersMap`?
I'm not sure if this will work for non-null checks, but the `example` package has no option. Is it a typo?
`tls_start.context.client.sni` is always `None` but `tls_start.context.client.sni` is `None`.
this is an error, not a warning
Can you please add a note that `name = name.replace(" ", "")` is also incorrect here, I think.
This is not a pointer anymore, right?
should we use `topology.connect()` here ?
I wouldn't test that we don't have this model yet!
Why did this change?
This can be refactored to use the `HandleTest` method in `BuildInternal` as well. I'd prefer not to pass in the method.
Why this change? Is it a bug?
I think that this is still useful to show up when `thespec/support` is set to `false`. It looks to me like we are doing this in an earlier version of C#. I'm not sure what's going on here though.
Can you add a new line after this one, so that this is consistent across the code?
I would prefer to have the `config` as a default. This is a breaking change for a simple config config, and not a separate config config.
I would keep the import as `pkg/storage/application/` (or at least add a `.` at the end)
I think this should not be necessary. The wp-json_encode function should always return an array.
This method will return an empty array if the inbound is not a `Transport` transport.
why not using the string name here?
Should this be a warning rather than an error?
This is a very nice cleanup. But the name is a bit misleading. Maybe `validateAllError`?
The `Metrics` is a subclass of `Feels like an interface, so we should use `Feels like a interface for the `Metrics` instead of `Feels like a interface.
Does this mean there's no assertion that we can get the `signedVote`?
This is the fix for the tests, we should use a more descriptive name like 'on' or 'on' instead.
You should probably check the `files` variable, otherwise we don't need to check for the path in the `Oncloud` path
This will return 0 if -10 is not provided (as the default case will be 0)
We should add this to `handshakeEvent` and `maybeResetTimer` as the last thing that is actually used.
If the compiler had an issue with that file, it was not changed to use the correct compiler, but not sure why the compiler has changed.
I think you can use `StringUtils.isNullOrEmpty()`
Is it possible that vNode.actualNode is set to false?
Why can't it be `continue`?
I would just make it `include` and make it an `inspect` if it's not there.
why is it necessary to have this in a `filters`?
This should be a single `PERM`, not a `PERM`, not `PERM`.
this will break if you are on a non-path string
this is not the first part of the PR, but i'm not sure what the best way to go about it is.
This is wrong. This should be the first thing, not the first thing.
I think this should be `vertical` since it's a global setting
Why is this file changed?
Just remove these.
why use `cuda` here? I would expect `gpu_ids` to fail, or is it not `create_create_range`?
I think this should be `serialized.build()`, right?
What is the purpose of this change?
If the test is still running in `libkb-test-carsee-util`, this will not work.
The std::endl isn't supported in C++11.
I'm not sure this is going to work, because we want to have a `MarshalIndent` as a string, and the `bootstrapConfig` parameter will always return `nil` if there is no `Marshal-state` file.
I think we should make this configurable. For example, if we want to skip security group rules, we can add `IngressRules` to the security group role.
This is not a good way to make this change. It is not really a way to get the IDE. It is still used by the IDE. I'd recommend moving it to `gofmt`, but not to add a new method to the public class.
This was an error in the previous PR.
I believe you meant to use `isWorldStateAvailable`.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
you're not doing familiar with the `type_as(x)` here.
I believe this should be `swiper/swiper-bundle.css`
why remove this?
Why is this needed?
I am not sure why we do this. It's not really a problem, but if we really care if the thread thread is an undesirable thread, then we would need to call `!is_thread_id() == tid`, but that would be the case.
I don't really like this change; I think you can use `formatProductCount`. You can use a directory that's passed in to the `/.json` instead.
The value of the `Type` is not a `String`?
This command should be moved into the `vol` package.
I think the original code should be `header`
It's not immediately clear what this means.
This is a bug fix. We're using the `time.Duration()` method on this line, which is now useless.
Why do we need to check for opts here?
I'd remove this, it doesn't seem to have anything to do with the others, but we should keep the original original behavior
Why is this variable not needed?
Can you add the `uuid` import below the group above?
I don't get it's the `(pkt, "type)` check here. The `(pkt, "type: types)` is always zero, which will have to be a `(pkt, "type=name)`.
I'm a little confused about this change. The import in the static constant is not used and it is not used.
Do we still need this new property? If it is, can we just use `application/stata-13`?
can be replaced by `ecr0`
If you want to delete the `-` here, you should remove the `-` prefix from the string.
Should this be nullable and `!`?
This should be in a separate PR, but I don't think we want to expose it in the user.
is there a test we can verify that we don't need it anymore?
Shouldn't it be `request.taskStore.GetTasks(request.MaxTaskID, MaxTaskID: %v vs %v)` instead?
This change is not needed.
Why not keep the `CreatePath` method as well?
I don't think this should be a global constant.
`s/Authorization/...` ? I mean, you don't need to add it in all cases. Also, I think it makes sense to use `Authorization` as well in this file.
I'm not sure about this change... I think the only time I've used `@new` was a good idea...
this is a regression, it's an easy way to get rid of the Base_rand
Is there a reason to use `type: 'Primary'` instead of hardcoding a constant?
We can move this line to the `url.py` file
It looks like the config was added to pass the config in to the `getConfig()` call, as it is already handled by the `getConfig` call.
Is this going to be a problem for `o.MaxPending`? If not, please remove the need for the change to `var/max_payload`.
Is this being called by Rubocop? It looks like it's only used in `pkg/api/v0.go`.
Why do we want to pass the `--match` here if we don't have a attachStdin param now?
Nit - should be capitalized
Shouldn't it be _ancestorComponent?
I'd rather have this be an instance variable instead of a `null`?
@michaelkuhn Do you remember if this is the right thing to do with `gquicVersion0`?
It seems to me that `repr` and `net` were missing some useful errors. What's the reasoning behind the `repr`?
This is the main place where we can put the `runs_free` argument after we've added the second parameter of this method. I'm not sure how to do it, but I'm pretty sure it's OK to do this now.
@ruflin I'm a bit concerned about this. The `fetchTag` block below will only be called when the user has the protocol, and it seems to be the actual problem. Do you want to add a check to the "fetchTag" of this? Is there an issue you could say, or is there a reason to change the default to an empty string? I'm not sure about the change here.
Should probably remove the `$param_name` too?
I'd prefer a `*` here instead of a `*`
This is not right. We have a test with `type = DRM_MAJOR || strcmp(type, "gone") != 0` which we should probably return an empty array.
This isn't necessary since the only use of this is to print the action, and that is a bit of an odd solution.
Should this package be indented?
The more I think about removing the `GuidPrefix_t guidP` call. Is that correct?
I'd prefer to have this as a separate sentence (and a separate sentence) to make it a little easier to grok, but I would also prefer a more descriptive name like 'get_cb' or something like that
Is this change intentional?
Indent the first parameter one step more than the previous line.
should we make this configurable?
I don't think we need to add an entry in these two classes.
This should be in `common.js`
I think this should be `MakeNewRepo()`.
This is actually a good time to make sure that the only caller of this is using `options.readPreference`. I would have thought `options.readPreference = options.readPreference;` would only be used when `options.readPreference` is set.
@deads2k this was causing the failure to fail. I don't know if it's possible to do this though, but it seems like the answer should be to not change.
I'm not sure if it matters much, but I'm wondering if we could have an "if/if" somewhere here, and then say that the user could see that it's not.
Line is too long. [97/80]<br>Use the new Ruby 1.9 hash syntax.
The result is simulated to miss its deadline if (rp->rr_sim_misses_deadline) return false;
Is this check needed?
Can we have a log message for this? Or is it too strict?
Shouldn't we also check for error if there's a `config` header?
I'm not sure if this is the right place to do this. This works for now. The `stopWalkComplete()`. The code is not very helpful for the `stopEventWalk` but it does not have any impact on the `stopWalkComplete` anymore, and I think it's not the right place to do it.
Do we need to do something like `key` or `nil`?
I don't think this default should be `false`
(style) trailing whitespace
Shouldn't this be a partitions in the network?
I don't think we should be changing this. We should be able to introduce a new `static` property for the `DataLoader` class.
why is this needed?
I'm not sure if we want to use `size_t` for this.
why don't we use crapBUS as we do with SIGBUS ?
We don't have this in the `FeedFile` class, so I would just rename this method.
Please rename to `TimeSpec`
This is a bit of a hacky but I think the only place where you could check `!` in the `!` block could be helpful.
should we call this `ServiceName`.
Why was this added?
This isn't necessary, you can use `LOG(new                                                                ).left()` instead.
Can this be `True`?
Why not just use `if (!service) {` ?
This should be in a separate sentence.
is that a BC break?
can we move this into the `command-history` module? it would make it easier in future to read
hmmm... this is a bit hard to read...
Should the options be passed to the function?
Import packages with wildcard is not recommended. Please remove them.
Should we just remove the check for rootless and rootless container?
`integral_columns` sounds a bit weird to me. If it is `aggregates changed to operate` it will not be `aggregates changed` or anything, which is not the same as `aggregates` in `aggregates `_aggregates`, which is `aggregates`
Is this needed?
I think we should pass in the image and pass the registrationToken to the function and pass it to the function. We should pass in the image as the param instead of the param param.
I think we can make this a constant. `UA` should have a default value that is used for `UA`.
This should be 8.
so we only test for retry job, so we should test that the job is not known at any time?
Please, add a `before` attribute to the page, the `status-header-container` attribute will be `nil`
Why did you remove this line?
If we're going to save models from models, maybe this should be `container < models.length`.
It's probably not worth it to just make this `final`. This is a bit confusing since you are already returning `break` and `break` when you don't use this variable.
I don't think this line is necessary?
this is the fix, right?
nit: this looks a bit strange. I would just remove it.
Does that mean that stderr must be nil?
I think you mean `true` here.
is this a leftover?
This is not really necessary. The regular sampling will not be the maximal at all.
I would have used the `clickPreference(MTheme);` instead of `clickPreference` here.
@bparees this will need to be inlined, as the `getFlagsForDeployment` will be used by `deployment.ClusterName` (or any other deployment).
Why is this needed?
I don't think we can add this.inputShapes_ here, as we will not be doing the same thing in all other places.
I don't think this is the right approach. The docker-compose required will set the default to `false` if `- notation` is not set.
What about the `File file` variable?
Nit: we shouldn't be passing in the `Result{}` here.
`score_thr` should be `None`, right?
This should be a button, not a button. Also, I'm not a fan of "main" in the page's page page.
Why are we adding this for every displayname?
This method is not used anymore
I don't see where `RTL` is set.
I know this is a test, but can we make it `POSTPOSTPOSTPOSTPOSTPOSTId/window/minimize`? (And also remove the `maximize` and `maximize` below.)
We need to add `ModuleSettings` as a parameter to `SettingsLegacy` so that we don't have to add it here any more.
Why do we need a new enum?
I think this needs to be a `default`
I don't think we need this file anymore, as it's not being used.
I think we're better off putting a retry on the 800+ lines here, so it's easier to read and see what the lines of the lines were, and it looks like that's what the lines are.
This is the only change needed here. `InitializeLayout` is a `protected override void ...`. The `base.InitializeLayout()` will not be called.
Isn't the `overlayText` variable already checked in `stateTitle`?
Use of `s.IsHidden` instead of `s.IsHidden` (see line 147).
I know this is not new, but it's not clear what the use of this name is for. It would be nice to have this as a name for something like `Enable` rather than `to`.
The `__getitem__` method needs to use `@unittest.skip`.
This should be a `case` so that the compiler can be set on a non-zero name.
I am not sure this is the best way to go
This is a bit weird, `mkdtemp` will always be `-` if `!qutebrowser-prefix-`
This should use the `C:\Package` type as well
There's a lot of these changes, should we rename `addItem` to `ScreenPosition` or something similar?
Extra empty line detected at body beginning.
Shouldn't we use the `receivable` attribute here? I don't think it's safe to do this since `put ("receivable", "other"), in which case, `response_l.put ("receivable", "other"), in which case it should be the same.
I would suggest using `*` over an empty list here (and in `validate`).
I don't understand how this check is being split off by the `gulp help`. I can't find a way to get this version.
Doesn't seem like a big deal either way.
Just a question, do we have to update this? This is a breaking change.
The ad is not fully safe, but the ad is a little bit annoying...
Please use `String#Equals(String, StringComparison)`
This should be just `final`.
Maybe `OperationOperation:`?
We could have used `params[:header] = response_headers.items()` instead.
Is this still needed?
This was added in #2732, to avoid this file.
Is this file included in the host.h, file included in the host.h file?
This change looks like it should be reverted.
I don't think the conduit node is necessary here.
We could have used `continue` here too.
This should be `long`.
not sure if this is correct, but it seems like if this is a regression it will be fixed by mistake.
I don't think there's anything useful to do with this. It's just a simple call to `get_exp` that's passed by value to `mins` and it is a `model` function that has to be passed in. I would recommend to avoid using a function that takes `model` or `model_token` that returns a tuple (which doesn't really help with a function).
I'd prefer to use `AbstractRememberMeServices` instead of `AbstractRememberMeServices` to avoid any extra code duplication.
why did you remove this? It is not necessary to change the behaviour.
`LOGGER` could be used here.
I think we can drop the script here. We should only keep it for the script.
This is the wrong check.
`String()` can also be a map, not a map.
Why this condition is changed?
maybe `Unknown_separate_suffix` is more clear?
@jsoriano Is this a typo?
This is the fix. The test is failing because this is the `if` statement above.
Since `HTTPSchemeHTTP` is a string in this file, I think it should be an `WorkspaceModel` instead of an empty string.
This interface is not needed.
Do we need to add LogManager here?
nit: you could use `std::vector<KV>,>,` or `std::move` instead
this can be simplified to just `tables.removeIf(TiDBInfo::isView);`
This is a change from another commit, and I'm a bit concerned that the `ErrorHandler` import should have been removed, but it's a different commit (which is why the `render` was removed)
this will need to be a breaking change.
I'm curious how does this need to be `@executable`?
This will need to be added for #15203.
I think we can get rid of this `done` since it doesn't seem to need to be a part of the component component.
This is the same code as before?
Was this a change in behavior?
Could you add a type hints for this?
This looks like a typo, please remove.
This should be `/v2/`
@deads2k any reason this was changed?
This class was used to not include the `Files` in the `Configuration` class.
Is this not the correct term?
This test has been updated as part of the PR. I think it's fine to remove.
Should this be a debug mode?
Is there a better way to get this buffer from nbb?
Is this file meant to be part of this PR?
I don't think this needs to be a list; otherwise this would break the API for each `cmdhistory` folder.
I don't think this should be removed.
This will cause issues when you try `github.com/gogits/gogs/setting` and then you need to add it back
It's good idea to return an error here, but the return is the result of this function. I think it will return an error.
should be `zdb_REdns`?
you should be able to just do this, right?
I'm not sure if we should do this. This is a breaking change and should change the behavior. What is the reasoning behind it?
This is going to be hard to understand. Is there any way to test the updated updated order?
This should be done in `TexturesingTargetTypeNoEncap` and in `TexturesingTargetType`
This was just a one-liner that I've seen in the past I was trying to figure out where the method is actually used. I'm wondering if `ncrDispatcher.new` is still used in this file?
>(((((()) [](start = 8, length = 5) How does this check apply?
I would prefer to use the strings here, since you're using strings in the default config.
This should be removed, since it's the only place where the value is set.
@QilongTang do you know why we have both `KWindowSystem::forceActiveWindow` and `xcb_flush` in these cases?
Should this stay as we're not using Class1?
I would suggest to move this to the other group, and then in the group below `pkg/errors/golang`. The API calls `go.go` in `pkg/errors/golang.go`.
Why did you move this?
Use the new Ruby 1.9 hash syntax.
@mmaxim this was the problem I've seen in the past
@lilleyse this is probably not correct. The code above is only needed if the target is a `string`, right?
why remove this?
can you move this up with `github.com/chaos-mesh/_current_ext`
I think we should move this above the `ApplyToWorkflow` call above as it does the same as the `UpdateAllInstanceNoExternalIP` call.
Is this change required?
@jadarsie do we need to change this in this PR as well?
I am surprised the `Back Exporter` was added in the first place. It was added in the `delete` function which is now handled in the other place.
I think it should be in both the case and the previous `if`
Should we keep the old name? I think it's more readable if it was used in the method.
Can we add an example here to explain what this means?
Can we just call the `dict` function directly?
shouldn't it be `/`
I don't think this needs to be part of `r.epmm.RemoveEndPointMark()` since it's not used anywhere in the codebase
why is this necessary?
This is not a real thing but it's probably better to be consistent with the rest of the code
It looks like this should be `Console.var()` instead of `JsonKey()` because the `JsonKey` is not set on the `ReadKey`.
I'm confused why we have to set the min twice now, but not everyone.
The logic is correct here, because the value should be None by default and the value should be None. I think it should be set to 0 in both cases (e.g., in the case of the field in ('id', 'collection_id', 'collection_id')
You could use `print()` here to avoid code duplication.
What is this for?
I think this could be `0/2.0`
Can we keep the same for the new "feedbackable" text, and just use that here instead of the one for each new one?
What is this column doing? I think we need to add some info about the `default` and the default value to `false` to make sure we don't have a good default value?
This is a bad example of what we want.
I think we should just remove the last import of the imports.
Is there a way to make it work with `nupic.support`? If so, it seems like we should have a test that indicates the new value of the new `nupic` value.
Is this needed?
can we also change the test name to `net.ipv4.conf.eth20.rp_filter=2` to match the other tests?
I think this is a mistake and should be removed
I think we could add a return here to avoid adding an `id` argument to this function.
The default `d[:doc driver.Document, lowercaseFields}` is just the lowercase name. It can be misleading. The default `d[:doc]` in the lowercase name is `d[:doc]` not `d[:doc]`.
This change looks good to me but I think it would be better if it were `context.getTaskAttemptWrapper()`, but that's how it was done with a specific exception type.
Won't this fail if `lane_data.back()` fails?
Since this is only used by the `DontNode` property I would recommend adding a new method `DontNode` to all of the methods to be able to use the new methods. I'd suggest to have it here as well.
I think the `fulTransactionProcessorFactory` and the `fulTransactionProcessorProcessor` settings are identical, but I think `fulTransactionProcessorFactory` and `fulTransactionProcessor`. I think the `fulTransactionProcessor` should be moved down to a new instance.
do we need this in the constructor or can it be an instance variable?
Why is this necessary?
`assert` doesn't seem to be used
I think IEnumerable will be better than having this `IEnumerable`, so I do not think it makes sense to have this `IDictionary` publicly in `KeyValuePair`?
We should also log the docker image in the docker log if there is no docker image being created.
This is the only change that will work for the user. The only reason I'm not seeing is that we have to do this in any place, and I'm not sure how to do it. I think it is better to have it in the `SpecPriorityAlias` class, or if this is just for some reason.
The current description was lost, but now I am fine with it.
Why is this 0.1f }, removed?
I think the idea here is to have a method that returns "long" (as it is already used above). We could also use `return ...` in the other places.
Do we need the #ifdef here? (and the #else below)
Is `IOS.Views` necessary?
This should be a `ponyint_messageq_destroy()` call instead. The `ref_FREE()` method is already called in `b->q()`. So this change will break if you're doing this, and you'll get one more time.
I'm not sure we should be using these changes now?
Is it possible for the latter to handle the `/PlatformStrategy` case? If it's not, I'd suggest `||...` or `||||...` to be more explicit and change `/etc/` to `||...`, as it's the default for `/etc/` (and not the default)
$strictTextSearchFields is not used, it should be added to the `appliedFilters` class instead
I think the `--build` option should be added here.
This would be a breaking change, right? I can imagine someone else can do it for us to start using the DApp console.
Should we assert that `error_str` is not set as a result of an `_shared` here?
It's a little strange to me that these should be part of `X-Content-Type-Options` right?
Why is this removed?
The reason this test was changed because the test was failing.
This could be `cmd.Kill()`.
This class is unused, can you remove it?
The `decode` method here is for consistency. It is not possible to have the `UTF-8` in `Read`.
@kring I've added this file, I don't know how to test this...
Can we just import the `../../src`?
We should use `Päivä` and `pluginPrefix` instead.
You need to use `is deprecated` here
Can you use `String.format` ?
as this is only used in the UI, can we add another one to `Namespace` to show it properly?
This should be `DeviceName *[]string`.
I don't think we need to keep the properties at all, since we don't use it elsewhere (as we are only setting the properties).
Shouldn't we make this configurable?
Can we remove this line?
I think it would make sense to add this into `malloc.go`
This will never get called for every test. You can test for a bunch of other tests.
`KubernetesDownloadURL ` is used to remove the `/` part.
why do we need this here? can we make it clear the imports is not imports?
Why did you remove the cast from here, instead of removing it?
This can be reverted.
Should this be `servers_certs`?
The `RTPSDomain` is only called in the `Attributes`. Can you please add it back?
You probably want to add the `for` to the `isAlpha` to the next `if (var scan == 0)`.
Should this be marked as private?
This should be done in the `if (this.handler.SupportsNullActivity)` block as there is no need to call `this.handler.SupportsNullActivity` below.
I would add an `on` method to it already, and let it return a warning.
I'm not sure we need to add array_pop() here. Can you check?
Why are these whitespace changes?
This is the same change as line 135.
I'd say we can remove this line.
why do we need this in this PR?
If you're touching this line, should we do it at `is populateMetadataSettings` ?
this is not the root cause of this problem, it is not needed anymore.
you should add this in `after_front_preference`
@bryevdv , I think the change is not needed here.
Why is this being removed?
I wouldn't put it in the `else` block, it's not a big deal, but just to keep things consistent
Please add a license header here.
Do we need to update this?
I would prefer this as `false` (which I think it's the default)
This is a good idea to be specific.
I would use the standard `md#standard-definitions` function.
Why did this get removed?
you mean "cygwin is not installed on #{host}" if the node has changed to "cygwin", right?
I think the old version is better?
I don't see any value using this, can you remove it?
I'd like a better name for the flag to be consistent with the other places we have, like the other `name:"debug_tools"` and `name:"debug_tools"`
This is the change I was looking to be testing. I'm assuming you are adding a new error to the `FileExists` function, and this code is going to be used for testing, and it's ok not to do this in this PR but I'm not sure it's worth having it here since the `FileExists` function returns a `default` function for `ddev`.
Please add `//` to the doc.
you don't need the `[]` here.
This doesn't look correct.
Should this error message match the error message?
This should be `id` and not `null` (and should be `null`), and then you should be able to make a `@static` for this.
@smarterclayton now I am not sure if it is the best place to put it here. It will allow us to have a more explicit `class `store` for example `class` and `class` for it. I'm not sure what the best thing to do to do is is to make this more explicit and add it to the docs for it.
This class is missing a `@Internal`.
I'd rather use `assertNotNull` here.
Is the new `timerIntervalInMilis` needed?
This administrator does not belong to any rules. If the user is using the user rules should be a copy of the user, it can be a copy of the user, not a copy of the user.
Can we use an feedFilter instead of feedItemFilter?
Is this needed ? The keyconf.KeyConfigParser should already be passed in.
This was removed in #932
"... during the merge"?
This has a default config, so can probably just be removed.
Should this be the `r.RemoteAddr` variable?
Shouldn't we use the same logic for the other cases?
This should be `f'Invalid flipping direction "{direction` (which is more of a `f` not `Invalid flipping direction direction "{direction)`)
"Error reloading permissions file"
I think we should be able to remove this `Email` condition from the `try-except` block.
It is possible to have this in a new test, instead of this change we can move this into a helper, so we can make it consistent.
Should we add this to `m_hpx_initialized` too?
`len(info.RPCName) == 0` is better than `len(info.RPCAddress) == 0`
remove extra blank line.
why change to false?
Should we add an example here to make sure that the cache will be listening for analysis results?
The `DEFAULTS` is `undefined` (which I think is not an issue) but I think this change is not needed.
I'm not sure if there's a good reason to always do this, but I think it makes sense to move this logic into the `if` block (line 207) so it's fine to avoid introducing a new `if` branch in the `else` block.
I would make this a constant. If it's only used in one place, then I think it would be more useful if you could just pass the config in a constant.
@mikedoaylor this might be better done in the `_safe_call` for clarity.
Can we change this to use `JavadocComment`? This way you don't have to change any existing users.
I'm not sure this is worth it - the name is confusing for people who have been "zal" - but if we have a name of the key name, then it is just `zal` - it's more clear that this name name is "zal".
What's the difference between `PeptideSettings` and `Settings` here?
This looks like the wrong place for this.
I'd like to use a `Collection.of` instead of `tax.QuoteValue(defaultValue)` here, but I don't know how this is.
why do we need this?
I think this is a breaking change.
I'm not sure this is correct. I think we have a non-standard `slug_matches?` check now but we should probably be consistent and do `@user.admin?` instead of `@user.admin?`
please add some description to explain why " taken out when we add smarter column selection" sounds very neaty for me.
I'd probably just do `caddytls.InternalIssuer` here.
This looks wrong. I think it should be `options = {};`
Who calls `features`?
why was this removed?
I believe this is the actual fix, but it is better to be consistent in all places where this PR is merged, and then we don't need to fix it.
I don't think you need this. It should just be `caseSensitiveQuery = boolean.toString(30)`
Should this return a context instead?
I think the blank line should be kept for `text/json` too, and the following line should be kept.
This should be a constant.
nit: remove the parens around the `log.Info`
I'm not seeing where this function is used?
can you add the env vars to the description of this function
I don't think it's safe to use this, but it's just a note for this, so I'm not sure what this is for, so I just wanted to check it.
Should the span context be updated too?
`exflow.getFlowDefinitionId()` is the correct value, not the `[0]`
@alalazo Is there a reason why `DateTimeInterface` can't be a `DateTimeInterface` property of `post_self`, i.e. `DateTimeInterface` and `DateTimeInterface` can be `null`?
Is this a change in behavior that we should remove?
i think the `.id_reverse` should be `'alpha-reverse'` here
I think you can use `arc.target > 0` here
Maybe this should use `ENV.fetch("DISCOURSE_SSO_SECRET", "true")` instead of `fetch`
why do we need it?
why are we doing this?
This should probably be in `accountIndexQueueByItem(Item $item)`
This is a bit of a nit - but we're missing a space before the `[]` here, and we should be consistent.
I would not add this to the other `#ifdef KOKKOS_ENABLE_CUDA` in this file. The other files are also used by any other file.
Why not using a boolean? It seems like it would be more consistent with other naming.
can we use `dumpConfig().Sdump(keys)` to check for the key keys?
Can we make this `_vectorSpan` and `_index` to avoid any misleading field name?
why do you need this?
The result of this function is a little misleading.
Is there a better way to do this without having to print the plugins? It is only used when we have the module files in the `if path.start_commit` block, and we need both in `delete()` and `create()` where we need to print the plugins.
It doesn't work, either this is the correct place to move.
please don't change this file, it will cause a regression
This probably needs a migration.
Is this a breaking change?
Is the old `minerCreate` still used?
this is wrong, `rChannel != nil` should only be returned from `LoadOrStore`
Can we also add this to the `pb`?
I'd prefer if it was a separate property rather than an enum, but it seems like a good candidate for some sort of specific class to be used as a name. It might be better to just have the type `conservation_conditions_fr` or some other name.
this function is now static so it should be static
We don't use a `ContentMD5`. I think this is fine.
Shouldn't this block be in the previous block?
I think we should just delete this and `attr_value` entirely
I'm not sure what this line does, it seems it should be `tabbed_browser.link()` instead of `link_hovered`
Do you need to add the `SQL` action here?
These are all in the `System.Collections.Generic` namespace, so I don't know why we need them.
This should probably use a `changeMetricsCsi` helper method
This change is unrelated to this PR, but the changes in the PR are not related to this PR.
What's the reason for removing this? I'm wondering if we could make this package private and revert the change to the other pull request.
`IdJavaAccessNode` is only for ASTMethodDeclarator. It's not a thing that should do here.
Why not just use a `@` and use `Player player` directly? The API is a `public` class.
This is the fix.
I'm not sure how this change is related, I can reverted it.
I don't think you need the `C` or `B` in the code. It is already checked in the `BC`
This should be `from scapy.compat import *`
I would make this `is millisecond`.
We can't do this. You can write `chomp` or `result.stdout.chomp`
is there an issue with this change?
Please keep this alphabetically sorted.
I don't know if there's a need to repeat the components at all, because this is a copy of the logic that is used by the `c_num_separator_`
Why is this not needed?
This is a bit confusing, why is this being removed? If it's just for the other changes I would expect.
This is a bit of an overkill.
This should be reversed
@cramforce I'm curious, is this the intention here to not use the `34` in the list anymore?
Should be `DateDate`, right?
can't we use `leader.type` here too?
I don't understand this new import.
This is a bit odd: `#if defined(X86_64) == 0`
Is it possible to put the `failure_color` in the `clean_all` call instead of the `clean_all_when_everything_filtered`?
Nit: `getSiteInfo()` should be on the next line.
I think we need to do this for the `-Wfloat-equal`.
nit: "IsMSIEnvironment struct, this will be loaded by MSI for authentication, this will be loaded by time you call SignedURL. If you're using MSI for authentication, this will be loaded by the time you call SignedURL. If you're using MSI for authentication, this will be loaded lazily the first time you call SignedURL.
This is wrong. The size size is a bool (so it should default to nullptr). The size size was a bool, and the current size was not a bool by default. The size size was the default, but the size was a bool, which is never zero.
Metrics/LineLength: Line is too long. [83/80]
Do we want to make this change to the "UNASSIGNED-cache-file-error"?
I think the `OpenTelemetry.Tests` is the same as the `OpenTelemetry.Instrumentation.AspNetCore`, so I don't think there's a need to add the namespace to the list
I believe this can be `Constructor`
why is this interface being added?
We need to check this against bootstrap ID as well as we do in the debug level.
Should we have this as an option to allow `-` and `-1`?
This code is duplicated
It's probably best if we just change the type to `input` in a later PR, but I wonder if we need to make `input_input` a public static var.
I think this will be better as ` Rename `getEntityException` (same below)
I don't think it is a good idea to give the wrong user here. We can't change the TLF root and just do a user.
why remove this line?
We're going to have to update the `fully_formatted_lines` method in this file too.
I don't know if we can do this, but I don't see how this is used? Can we be more strict on what the class creates the `CompletableFuture` class?
What are the sequence of the generated rule?
Can you move this into the main PR
What's the purpose of this change?
Can you please fix the indentation (not a big deal)
I don't think this is right. This check should only be in `createTag` and not here, since the `createTag` is the only one that uses `context.Context`
Not sure about this. What's the purpose of this?
Why is there a test case that has this check?
can you move this to the `pkg/config.go` file so that it can be re-used?
Can this error be logged?
nit: `/* eslint new-cap: ['error', 'capIsNew': false]` is a bit simpler.
What is this error returned by `c.closeConnection(ProtocolViolation)`? It seems a little strange that `c.New` returns a copy of the account, and `.closeConnection(ProtocolViolation)` is always the same.
You should be able to do `default *testing.T` instead of `compute_service_account` here.
How about just `setup.json`?
Do we want to keep the special condition here? Or was this a regression?
Nitpick: I would prefer to have the variable named `StatusCodeToStatusCode` (and then use it as `Code`) instead of `StatusCodeToStatusCode` in the code.
What does it do?
can you remove these 2 changes from this file? I think it's a leftover.
moved to another file
I think we need a migration for this, and it's a bit confusing to me: - Why do we need to add a default column? - I don't think we need to add a default column here
I think this function should return an error. The `err` is used only in the context of this function. We should probably make the change in this function to return error as part of the `timeout` function in `build-system/api` package.
What about `fragsizeIsMinimum` (we don't have a name in the class)?
Shouldn't this be a loopback IP?
Please move this method under `setServletPath`. This is a breaking change in behavior as the method is called for all tests (it is also used in `setUp()`).
You can't do this in `BuildFunction`
Is there a reason to use a `convertObject` for the ` connecting()` function here?
I'm not sure what to do about the number of those. I would have left it for now as we have two of those, as they will use `<see>` for example. Also, if we really want to keep the number of those, it would be a breaking change, as the API won't work.
I think we can get rid of this `/` now.
@jsoriano Is this the right thing to do if the default `enableAddons: true`? Or do we need to add `enableAddons = tc.inputApp` to `lib/zdb/zdb`?
The "Date" property is a bit weird, it should be "Date: "min", not "Path `{PATH}`
Is it possible to have a `select` statement on a line break before? Or is it because of the function definition?
Isn't this a breaking change?
why change this?
Should this warning message be logged as a warning somewhere?
you can remove extra_controller_params because it is not used anymore
I think the whole idea should be to not use the existing property instead.
This looks like an odd code. Is it possible to remove `HandleBlockPropose` and `HandleensusMsg`?
@sparrowDom This needs some clones to see the key in the file.
I guess this isn't used, just wanted to be able to remove it?
Do we need to keep the old one? (Or do we only need to keep the old one if it's not required?)
Why is this necessary?
I'm not sure what the meaning of `Source` is here, but I think that we're trying to avoid `BuildManager` on the list of fields, and that's how we're using them to generate the list. We could just use a single `BuildManager` to avoid this.
I think it's better to have a test case for this, since it's only used by other tests, so that it would be clearer if you think that's better.
Should we keep the old index ?
Is this the same thing as the one in `@module` and `@module`?
Do we have a lot of service-Respond-Service somewhere that can be added to the service-Header service?
Can this check be inside `Oobra.CommandPath` if it's not supported?
Is this used?
I'm not sure how much of the `path` variable name is. Is `path` a better name?
You can drop these too.
Why are the changes to this file needed?
Should this be "nextMethodName" ?
why is this removed?
This file is now unused?
I think this is a bit of a nitpick, but could we move the error out of the `select` check?
why not import with `@param`?
Please use `std::int64_t`.
Please remove this import.
just use `lambda_cwd == 'save_file'`. `equals()` is not enough, it's a bit confusing since we are not really testing what we expect and what we expect.
can we call this something other than `_`? just to clarify that it's more clear what the type of the `src` is, and that it's more clear to what the type of the value is for.
I'm not sure we should remove this part?
I think this should be outside the scope of this PR, as we will break people who are using `ao` to create new `baseViewportHeight`
Why is this change needed?
I am not sure why you would use `Type` here but not `from_name`
nit: I'd keep the blank line here (and in other files below).
This is not a resource, it is a post, so it's a special case that we should never get the union.
Are you sure that you need to change it back to an empty ResourceInstance ? I'm not sure what you're trying to do here.
I think you could just change the variable to `-1`
nit: `kiExpressionException` should be sufficient to have `Integer` as the param.
I think this was accidentally removed. It was a mistake and it was not used before.
These aren't needed anymore, they are actually required for the `config` command.
This file is not used.
Use doctestest instead of doctestest
Why are you using both `Query` and `Send` here rather than in `Send`?
The `VersionCachesWithoutShutdown` is already reset. It is a private method in `VersionVersion.cs`.
If this is only called from a single thread, then you should make it `nil`
This is wrong, the `githHub` will be created by the `UpdateDative` page.
I think this should be `dynamic-cert-regenerate`
This is not the right approach for the test, since this will only happen when `nil` is `undefined`.
I'd rather you do `CWD` and then `Map` here and in the other `if os.Getwd()` calls `Getwd`
I'd prefer a separate commit (and a separate PR), but I'd like to see the FIXME being resolved in `Backend                   ` and not just in the `oneof()` function, I believe the new FIXME should be added to the new column and not the new column.
`headTipSetAndState` can return `nil` if it's not `nil` here.
I think the check on line 380 should be moved up to the `if` block above
Shouldn't the `result.allow_output` be in the `result` block? Or are there any cases where `result.raw_output` is set to `--hosts centos6-64` (or whatever the `result.allow_output` would have been set to `--hosts centos6`)?
I think you can get rid of this `if` statement now that it's always `nil`.
I'm not sure how to get this.
This was a bug, not a user-facing compiler
Shouldn't we also add these to the `Catalog.setConf` below? Or do we need them now?
Why are we removing these lines?
Lets use `ecs` here. Also the list of `ecs` is `np`
Is this a typo?
The original code is not really correct, but I would expect that the existing code is not actually needed.
I am not sure if there is any better way to do this.
Could this function be a static field and directly use it? It would be good to be consistent with the other methods.
I'm not sure this will work, since we have a test that checks whether it works correctly.
I'm not sure if this package is needed. Maybe it is still used in the context of the package package?
this import is not needed. it will be imported from the `if logging.map(logger.isDebugEnabled())` block above
This can be reworked to: `!= x64 */`
>clrstack -i is unsupported on this target.\n\n" - is unsupported on this target.\n"? I think you need to fix the error message.
How about adding a constant for "DAGSTER_HOME must be absolute path."?
Isn't this redundant?
I'm not sure how to test here is this...
this method should be in a `@Then`.
I think we can move this to the `Exists` package since that is the only case where `k` is called.
I think this should be an optional argument instead of an optional argument to `LoadLoadram` I think.
These are all of our code base. We're using `user` as as a parameter for now, so we can make sure that it is only used in `pkg/api/types/constants.py`, which is the default for the `add` package.
can we make this a constant?
`replace` was removed as well.
Can you move this to the beginning of the file?
The more I think about this, it seems like it would be clearer to use a helper function in the UI, but it's a bit clearer to me that it would be better if there's a `is_entity`, but it's more common to use that helper.
I think the `List` can be `null` here.
This should be in another PR.
The `B3cMinimizeWindow` should have a constant defined for the `bokeh_Noop_MINIMIZE` and not the value for all values.
Why are we returning here?
If the listener is never null, we should return the stack.
I don't know if it is possible but if it is the right place to do this then it's not needed.
We have the option `set_stolen_reg` which does the same thing. This is why I have done that.
The `for` clause should be updated to reflect that `request` is the same as `maxResults=500`.
We should do the same for this one as well (see #ifdef enableCOREAPP)
This shouldn't be part of this PR, since this is only used in `pytest/config.py` (for now)
should we make this constant so it can be retypeed?
I think this should be `--ignore-chromium` (or should we rename it to `--target-using`) and call it `--target-using`.
The changes in this file are not related to the fix since the tests are failing because of this change.
This was removed because it was already added to the interface
Is this change necessary? If not, we should use `error.log` here.
What about `--keep-namespaces`? It's not clear from the name of this PR but it seems more clear.
I'm not sure about this. I think `server.Query()` might be better.
I am a bit confused by that this is the best way to fix this. What is the difference between `UNSET_NAMESPACE` and `UNSET_NAMESPACE`?
This is a bit confusing to people. What is the issue about this?
Why are we adding this?
This is a breaking change, but I'm pretty sure this is the right place for this.
The change is not necessary, as it will break existing users.
This import should be `errors.go`
I'm not sure what to do about these. Can we do something similar to the other files?
Note to self: this is a breaking change to the default behavior.
Why did you add this?
Can you check `node.jsonRpcConfiguration().getAuthenticationPublicKeyFile()` if it's null?
Why is this needed?
nit: you can merge both lines above as `?equals(to)`
why did this change?
The default value will be `1.X.X` if `amazonlinux2-x86_64-standard:3.1` if no build is found.
It is not safe to use `.toto` rather than `.toto` since the `toto` file can be included in the `.json` file (which should only be included in the `.json` file). You can also replace `.json` with `.toto` and `.json` by `.file_state`.
Why not use the `JsonPrinter` from `JsonBase`, which is not the default?
`@return A self reference`
Can we put this interface in diskBlockCacheVerifyVerify?
I think you need to remove these `type`s.
I think you can remove this, since the `Vroding` is already being initialized in the `Vroding`
We should probably have some log message here that it's not clear to me that this is a "EADDR" value that's actually not a warning and not an error
Why not just add this to the base class ?
Please revert these two imports.
I'm not sure this is correct. It is just a list of `null`s.
Isn't this redundant ?
The copyright year on the copyright year is redundant, the copyright year should be on a new line.
Why do we need this? I'm wondering if the `Connection` field is only needed in this place.
I think we could remove `AsReadOnly` here
"new version of the collection" -> "new version of the collection".
I'm guessing the original code was correct. The purpose of `blob.Bucket` is a bit more of an `*blob.Bucket` and the `*blob.Bucket` must be the default? It's probably fine to keep it, just in case we need a change.
Why not just use `InitCodeTransformer`?
I'm not sure this is the correct way to go. I'm sure it's worth adding the new field here, but it's probably fine to add it to your use case.
I think we should just leave out the `failure` arg here, it should be fine.
I think this would be more readable if `SUMMARY` was called before `teams` and `teams` was called.
Should this be using this one, i.e: `MvxLog Instance { get; } = Mvx.Resolve<IMvxLog Instance>().GetLogFor("Mvx"))`
Is `PresentError` still needed? Seems unrelated to the rest of the PR?
Why did you change this for 3.25 to 20.0? The other version of the 3.25 has to be 20.0, so it doesn't have to be 20.0.
Please make this a global parameter.
We need to disable this in a previous PR, as it is used by tests.
Is there a reason we need to do this in `deleteManifests`?
I think `TOTAL_HITS_THRESHOLD` may be too large, maybe you could change it to be `cappedNumHitsThresholdChecker()` instead of the whole class?
Can we use the new external external API for this, so we could add a `TODO` to make sure that these are not in a `install` package?
This extension method should only be used on <see cref="Activity"/> instances that were created on the login.
This is the same as `JSON.go` (line 145) - is that intentional?
This is the complete change.
I think we should just be catching the exception here instead of using the catch block in case the `e` is not a problem.
We could also have a method like `customize_theme` that returns a boolean. This way we can make sure we don't break compatibility with the `customize_theme` method. This is because we don't have an extra `<customize>` that we need to use.
Could you please also add a link to the docs? Thanks
Line is too long. [82/80]
should this be const, what's the difference?
I would prefer a "consent" option, not "unchanged".
This is the change that avoids setting the "unlocked" flag.
This was a bad idea. It would be better to have a static import for each test.
why not "deny"?
"thethethethe actor must have a create constructor which takes a single Env."
Is there a reason this is added to the `core-admin-read` as well?
I don't think this is right. `Resolver` is always returned, right?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Can we move this check to the "init" method?
I would make this `void run_unroll(int, int, int)`
Please add a `_x` prefix to this list.
This test was failing because of an old bug, right? Shouldn't the test be failing?
Is this actually needed?
this is not used in this PR
I would use `.isEqual()` instead of `.string()`.
This doesn't have the `%q` prefix, so I think the `&` should be fine.
Why is this removed?
This line is the only change required.
You should also mention `considerRuleRuleViolation`
can we add this to the `if not os.path.join('-I') > '-I'`?
no whitespace between rolact_head and YolactSegmHead
I think we can just make it a local variable.
I think we should add a space after this block to be sure the message is not displayed.
This looks like something that can be moved to the `Node` class
Nice, I hadn't noticed this before. This was added because we were already doing `./`.
should we use `:not_ferrer` here or is this the default for everyone?
Is this necessary? It seems to me that the value would never be empty.
Rails/Present: Use if org_id.present? instead of unless org_id.present?.
This seems unrelated to the PR?
This is only used in the `compute_engine` module, so it should be in `src/utils/auth.compute_engine`.
The `value` is a tuple, not a string. It should be `str`.
This should be done in another commit
Can you make sure `capabilitySecretEnvSSM                     ` is set to true only if the name is true? I'd rather have this flag as `capabilityPublicM` since it is the same as `registerSSM`.
Please use `github.com/gogo/protobuf/jsonpb`
Not sure what the right answer is. Why should we only do this if we're not using the dialog here?
I think we can remove `@param` from here.
I think we should remove the reference to the listener here, otherwise we can't do anything about this
This test is no longer needed because the `completionview.completion_item_focus` was removed.
I don't understand that. Is there a way to avoid this warning?
This function should have a name `log_utils.register()` that is called from the `warn` module. It should also be renamed as well.
Why the comma is removed?
can we use the external packages in the test files instead of hardcoding this?
(Pre-existing) And also, why should we keep the key as "Imported key for account %s: \"%s\"""?
Is this used anywhere?
I wonder if this is still the case that we should remove the `ChainHeaders` field?
Rails/InverseOf: Specify an :inverse_of option.
These are not part of the scope of the PR.
Is the trailing slash for `|%` correct?
If we're not going to check this, can we remove the `set` here and reuse it in the `ssh/run`?
I think you should be able to use the new `resourcetags` class here as well.
Nit: please move this to `Http2.js`
I wonder if we should make this a function in `serviceManager`. We should probably have some sort of flag if the error is not found.
Do we still need the additional `.GetAddressDetails()` function here? (I guess that's just me.) I'd expect this call to fail, because we can't rely upon `.GetAddressDetails()` in the code, but we should probably add an explicit `else if` here.
Maybe we should create an API call `NewSessionWithOptions.session` for this, and create an API call `NewSessionWithOptions` on it? We can also move the API API docs to `NewSessionWithOptions` and call `NewSessionWithOptions.session` in `NewSessionSession`
Does it make sense to move it in the if block?
why do we have sameClaim? what was the plan to do if there was no change to send a pointer to a cluster?
Why are these constants needed?
This should not be done for the other PR, but it should be done in a separate patch
is there any chance the index can be not empty?
What does `Error` stand for?
This spec doesn't use the `.compact` option.
@larsoner can we add a similar check to the other APIs?
This was a typo I think.
Can you revert these changes?
Please remove `eme_require__` and `webpack_require__`.
Can't you just do `elif callable(x)` instead to get the expected output from the `call` list?
We should rename this field so that the struct can be very specific and more specific.
I think this is fine for now, but we should just make this the default for the "HttpContextIntegration" case. The reason this isn't going to change is that we can only use the "HttpContext" property.
`assert arrayLength > 0` is the same as `arrayLength == 0`. I would prefer that we remove the line entirely.
I'm not sure if we care about the fact that we have to do this, but maybe we shouldn't allow a lot of of these to be used in a more general places where we can make the code more general.
why `get('release_msid'),` is copied over from the if statement?
How would the function define define the path type?
Is it possible to have a test for `isHiddenWithCSS` that will throw an exception if `vNode` is null?
I'm not sure this is the correct location for the package. It seems to me that we don't care about it in the code, but I think it's better to have it in a separate package.
nit: can we change the error message so that the error message is clearer?
This doesn't seem to be a problem because we don't want it to be an object in the `show` block. I'm not sure if this will work for all users.
I don't think we can do this since we'll have an example in the dashboard.
is the 8760 defined somewhere else ?
I'm not sure what's going on here, but it seems like it will be useful for other platforms if the settings are already in a different file.
don't use relative import, please remove.
I guess this change is correct?
This is wrong. It will be removed if we have a particular test.
is this the same as in `Core_forge`?
Please consider renaming the parameter `kvp.Value` to `GetDictionary` and assign it to `kvp.Key`. This way we have `.IsNullOrEmpty(kvp.Key)`.
This is not necessary, we are just storing the osFamily type in the context.
This is a breaking change, right? I'd like to see the `emplace_back` in the `case_prefer_send` function, as it's a static method and it's a static function, but it doesn't have to be a public API. I would just call this method `src_queue_family`.
What does this do? I think it would be better to have a test for it.
We need to keep the test cases so that we can verify that no one is in our test cases (which is what it's actually doing)
Why not just use this function in `libmatch`?
This is the only change required?
Do you need to add this field to `WireWireWire`? I'd expect it to be `json:"deviceID"`
`pattern.append("("")` can be replaced with `org.apache.hadoop.execName.endsWith(".exe"));`
Please don't use spaces in the lines above.
I would put this right after `getComputedStyle` call above.
why not using "applicationName"?
I think it's safe to remove save from the end of line here, since they are not used anywhere else. Maybe it's worth adding a try-except here?
I think the message here should be the same in the start pulling, which is not what it does.
Is this needed?
I'm not sure that this is the right fix. The "progress" is the right test (i.e. it can change the test), but the "progress" check is not set.
I would suggest to put a default Integer sortOrderId() in `pkg/api/client.go` and make this an `Optional`.
Should we make it a plain `Set`?
why was this removed?
Is there a reason to expose this `public` to the base class?
Maybe say `{@RectRect}` instead of `{@Rect}`?
Shouldn't this use `IReadOnlyILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILILIL
why not remove the `is not needed? I think it's a bug in this file.
Should we have a more explicit name? `LibraryService_StreamShelvesClient`?
Why do we need the `padding` param here?
This might need to be `private const const const`.
is this a BC break?
Can you make this a private function?
We should use `Time` here as well for consistency with other tests
Why pass the key here?
Is there any particular reason to have this method be renamed? I don't think we need it in the `call_approval_notice?` method.
What's the intention to set this to 0 (i.e. set it to 0) rather than set the timeout?
Is the convention we use URI icon from an extension? I'm guessing this is a new convention, but we need to consider it to be explicit.
Should this be `positional-args`, since the value is set to `false`?
Should this return `Cuda`?
Why are we removing this?
I'm not sure about this. It is a good idea to keep this here, but I guess that's a good change.
For consistency, we should use `%w` instead of `%int` here.
Should this be `const SectorSize uint64`
We can probably remove these empty lines.
Typo: "ViewerRoleAsDefault"
what if record_get_field_value fails ?
The method signature should not be necessary, because `@was_static` already returns `None`
I think the wording should be renamed to `Azkaban-Flow-Version.properties`
Is the idea here that `bin.BASH` is still `bin.ZFS` (since `_c` is only set once)?
I'm a bit confused by the rest of the code, as I can see this is used in `__init__`, why do we need this? Is there some way to make it more clear that we can use this method in this PR?
I think we should make a new function that accepts dimensionFilters as a parameter.
why do we have this constant?
Please use the hook hook instead of adding additional validation to the hook hook.
We can move this to the next line. The only reason we have is that the `LocalProtocols.Add()` method is used for Rusting is to set `LocalProtocols.Add()` in the `notifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotifynotify
Do not prefix visibility visibility with `class`
I don't know if you are working on this, but can you fix the code for this, please?
This can be `final` since the `newArrayList()` method returns `false`.
You don't need these lines, just check if they are in args.
We could have done a `mtx` and `sync.RWMutex{}`, and then `sync.Mutex` will automatically get a `null` `mtx` for each call
`state` could be `null`
I'd use `\n` here.
Layout/TrailingWhitespace: Trailing whitespace detected.
why are we changing this?
this is a bug fix
I don't think we can get theGRPC                              here. We can't remove it.
nit: "The first sentence "should" -> "should"
`write_text` isn't used in this function.
I think we can remove this line.
This is the only change that will break existing tests. The change here will cause the `doneChan = make(chan)` call to `doneChan`.
This error is not a contract binding. It's a contract's initial contract's configuration, so we don't want to be a big deal.
Can you explain the reason for the `template` here?
Why not use R.style.SalesforceSDK_Dialog directly?
This will break some of the code in a few places. I would just make the code consistent.
Should be `&&` here
We should rename this file `mdc-menu.mdc-surface-example`
I'm not sure this change is a good idea. The previous behavior for the headers is not the headers itself, so it should be a separate PR.
@pgavlin I'm not sure if this is the right term to do it, but I think it is worthwhile to not have a specific CAST flag.
Is there a test we can write for this?
why is this include needed?
Should we just use the `pkg/logs` package here?
Is it possible for `*ptr` to return `nullptr`? It seems like `of_raw` should be checked in the `type`.
I don't think we need to change the signature of this test.
I don't see a reason why this was added. This is the only change required?
This seems like a good idea. The `next->opaque` and `next->opaque` are only used in this method, so I don't think we need to set it every time.
This needs to be a better fix
I think it would be more readable to use `window.c2.activityCardController.update` rather than remove the `.update`
I think it's good <msg> I think we need an `from google.cloud import __version__` at the top of the file
Can you also add this to the function in the `if len(cnb) > 0 {`? It looks like it's the only one we can reuse, and we don't know if there's any reason to keep it around.
This is the only change that will break the `Object` interface.
Should we do this before `go fmt.manage()`?
I'm not sure this is the right fix
Is this needed?
This should be `None`
Why is this necessary?
This is only used when I run the test locally, so you can just remove it
Should the `break` be moved up here? The `created` is already checked in `transaction_auto` above, right?
I'm curious why this change was made to prevent the new version in a non-zero value?
We use `rulefmt` to be consistent with other package types, so this will be `rule`.
Do we want this in an env var? If so, I'd expect it to be called with an env var to indicate which type is preferred.
This was a typo I believe.
this is probably dead code now, no?
I think the rest of the file should be removed from here.
I think we should move this method to `afterClickOn` as it will not work.
I thought you wanted to avoid using `self.system_approver_emails` in this string?
We should remove the deprecated annotation here.
This is not a big deal. I think it would be better to just use a `::*/.value` here, and then we could remove the entire interface, which would be `::*/.value` and just use the default value for it.
I think we should set this to false in the controller's `workflow = instantiated.ForceCleanupOnError` so it is not clear what is being set in the `dvc.order` block.
Why is this necessary?
Please rename these to something like "manaleechance" and "manaleechamount"
Why does this pass? Is this the only place where `GET` is being used in the `openshift.resources` file?
Please remove the trailing comma, it's not used in this file
Why are these needed? I would keep these as it was before but not in the PR.
This is not correct. It will be `BASE64NOMETADATA` even if the first one is not `BASE64`
Layout/AlignParameters: Align the parameters of a method call if they span more than one line.
I'm not sure about this change, is there anything in the `dashboard.show.contact_your_mentor` file?
can you explain this change?
Should we do this in `after_build_methods`? `can safely be reset` seems redundant
Remove empty line.
This is wrong, we should not have a `!== true` flag for `target.Outputs() == 1`, right?
This test doesn't test for a specific `call` and `call` tests?
Isn't this a breaking change? Why are all these `current()` needed?
I'm assuming you've added a check here, but it's ok for the `isset($file_contents, $end_pos, 2) === '::')` check?
Please put the `typeof(String, StringComparison)` in the method `AbstractDatabase` and `AbstractDatabaseDatabase`
Is there any reason to use this?
>anMessageMessage::array<nano::endpoint, 8> target [](start = 15, length = 4) nit: I'd prefer to have a test function that checks the condition to be sure there is no target itself (e.g. the target itself is a bit more than just the type of the function)
I think this is still going to be a bit more verbose, maybe worth adding it as a method to the permission that is going on, and then adding the `if` inside the `if` block to the condition.
Why do we need this assert? If it's `!Type.IsNullOrEmpty()` we could check for that.
This is not the actual change, but it seems like it's actually the same, right?
I don't think it's safe to do this. I think the `emailCache` is right for this, but it's probably not worth it.
You could add `index = %d("step.length-1] == "'")` to be safe.
This should be removed now.
This name seems odd to me, it's not a requirement.
Is `generate_object_based_api` guaranteed to be an input argument? Or is this a constant defined somewhere?
I think this is not the only change required for this PR.
@nmittler - This is a mistake, but I'm not sure why `where T` was being passed here. It was `where`, but `where T` was not passed in.
Why is this in an `__init__`? I would have expected that it is only called once.
Why do you need a license header here?
this should be `github.com/google/uuid/hook`
This is not correct as we have a `time.Duration(i)*p.pingConfig.Interval < p.pingConfig.Timeout)` call, but I'm pretty sure it is safe to do that now, and if there is an issue we should have a `time.Duration(i)*p.pingConfig.Timeout)`, we will have the same value as a `time.Duration`
Is there a way we can make this a `make_unwritable` function?
I wonder if we need `Dispatcher.on_approver_removal` on the column itself?
Nit: I'd put this in a single line.
@jadarsie - I'm not sure this was intentional. `SIGKILL` was used in the test, so it was only used by the tests in `SIGControl`.
Is it worth having a single option for these?
I'm not sure about the idea of the `from_params` function here. In fact, this function doesn't need to be called.
Redundant `self` detected.
Why is this needed?
This is the only real change I need to be aware of.
This should be `service_query_command = msi_opts['PUPPET_AGENT_STARTUP_MODE']` not `end_query`. The `end_query_command` is not always present at all, so you can just remove the `if` and `end_query_command = msi_opts['PUPPET_AGENT_STARTUP_MODE']` line altogether.
Does it still work if you use `run` on `Caret`?
Why do we need this class?
I don't know how I missed this, but if we add a `aria-active` option, then I think it would be better to move this to the view file.
This check seems redundant now. I think it is not necessary to do anything, but I think the check in `copyTableWithRowId()` should be fine, and if you don't want it in the code it should be moved up to the `copyTableInfo` method as well.
should this be changed to `ROMol` and not `res`?
You should check `fname = fname.startswith('/')` here. And if `os.path.join('os.path.dirname(__file__)`, then `os.path.join` won't be deleted. Also, the `os.path.dirname` will return `None`.
Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.
I guess we don't need this?
I don't really understand the purpose of this change, but I would just make it a default in the _count_ (i.e., a default from `zero_count`)?
Is `Issuer` the best way to do it? We could do `a.Name == issuer` instead of `a.Issuer == issuer` and then check if the value exists. That would avoid the need to be `Issuer.Name == issuer`
How about we put this at the top level `build` method.
I don't think this should be the default, it should be the same as `github.com/aws/amazon-ecs-cli-v2/mocks`
this is an error and should have a copy
Why does this need to be a property? If you want to add the same name, it could just be `this(TableOperations ops, Table table, String name)`
Can we use `not 0. Model.model.types.modelName` to avoid this problem?
Why is this error needed?
This should be renamed.
I'd put an `if` here too, since it's a one-line one.
This looks like an unrelated bug fix.
I think you should be able to just do `DirectX.icoico` and remove the `iconImageSource: computed('model.icon') || '/favicon.ico';`
Why do we need this? It looks like it's only used in the `_testing` package.
Shouldn't this be `column_index`?
this should probably be `write.metadata.metrics.column`
Why the last one?
why is derived_from here and not just regular regular expressions?
This seems to be a leftover from the previous version. Why is this not an `err`, but if it's a `err`?
I'm not sure we should remove this, but I think it would be a good idea to keep this in sync with the other services.
I think it should be possible to return a list of elements, so that the type of the anchors are inside of `valid_flags`
Shouldn't we have a mockBatchResponse? Or is that the `status` key in the `Profile`?
I think this is the one place you can remove the "on purpose" check.
What is the purpose of this change?
It is really weird that `o` is a nil-only node, this will be an empty list of `o`, and this case will never be zero. I'm not sure if this is a good idea to check if the o will be null or not (for some reason the nil checks in this function will be ignored) and the return value of `o.get("o")` is zero-able and we can check if the nil-default value was not zero-end.
I would move the file to `ipfs-files` so that it can be used in more detail (and also in the `testtest` package)
Since we're not using this package for the `RetryAfter` model you should use the `After` package instead
Please remove the unused import.
Can you please explain the reason for this? This is the only change I'm not sure.
This is probably wrong. The caller should be able to call `klog.Status.Capacity` and then call `GetAndUpdateSnapshotInfo` on the error.
We should remove this method.
I'd rather have this assert.
why not using the key name here?
Just remove the trailing white space.
why is this needed ?
Do we need this check?
this should have default set to true. It should default to false if needed (which is true) or set to true.
this line is not needed
The `if tab.data.viewing_source.get_sub('alpha', 'alpha', 'alpha', 'alpha', 'alpha', 'alpha', 'alpha', 'alpha', 'alpha', ' num' ) {` is redundant with `tab = self._current_widget()`
Is this needed?
I'm not familiar with this code - is `provokingVertexMode` still a valid feature? If I understand correctly, I think this is the right one. If I want to be sure I understand correctly, this is a problem.
This file has a similar test for `_kdf` (and `_kdf`) so I removed it here, too.
Missing space around string interpolation detected.
`fromSLocore import *`
The stack should be done in the `child` array instead of here.
I would put it in `core.util.InterruptedInterrupted`
@pgavlin, do you know what is the benefit of using `id` here?
Should this be `provider.AccountExists(_address1)).Should()`?
This should not be a warning, as it may have an NPE
I think this one could be more confusing to read the content of `dtype` (and similarly in `dtype`)
This needs a better name. `interpreters` is only for testing, and is not just for testing.
I don't know what the `assert` function is used for.
@wachterjohannes Shouldn't this test be in the `testGalleryMediaGalleryhasmediaAction`?
I think we can move this method to the base class `get_meta` method. We don't want to have it on `UserDecorator` module.
@Scottmitch do you want to remove this line ?
Should this be in the same file?
I think we need to keep this method in `delete_target`
I would suggest to use a set instead of an empty list here.
I don't think we should keep this here - we don't know how much of it could be, but we should probably keep this as is.
Is this needed?
I think you're good to make this change.
Should be able to remove `isArray` here.
@mmaximus This is the fix.
This one isn't necessary, it's used in all contexts.
You don't need to import the directory here (no reason to use the directory for v8s)
why not `filter`?
Can you remove debug print and use std::stringPrintf("%s/%s instead of std::string?
We don't have a null check here, is there a way to do this without having to pass a null snapshot ids?
Why this change? Isn't it better to have `helpText` always return the same thing as `getHelpText`?
I don't think there's any need to change this since it's already in the base classes
we should also have this on the `belongs_to` model because it's not a valid index.
Maybe we should check for `C02021` here, if `linter.enable("C0202")` is a linter?
This is the only change that is needed to support support for `DeleteMustHaveEmptyRequestBody` and `DeleteMustOr20`.
This class contains methods and properties that are used to generate them.
@wordpress ->wordpress
can we also update the typehint for `numStreams`?
I'm curious why the change here is needed?
Is there a reason not to use a single expectation for this, like `src/server/__init__.py`?
I would have put all the fields in this file and have them all all be in `info.py` and `info.txt`.
Remove the AtomicInteger() call here and add a more explicit error to the caller?
Do we want to make sure the type is not empty? I think we have to do it in a separate PR.
the `api` folder is missing here
This is not a resource's `config.config.defaultes()`?
FYI I have not seen the `send()` here.
I think there is a reason why you're not just using `$this_class_name` here.
`if OrderedDict:` is the preferred style
We should add a `SetValue` property to the JSON settings.
Is there an option to use `s.bzzFileDownloadHandler` for the default setting? I think we could have a test case for `GET` to ensure the value isn't available.
Isn't it a global var?
this was just a mistake, and I don't see anything in the world where we're actually using this?
These are not really part of the PR.
@jmhooper @smarterclayton can you check that these are in the same package?
You need to use `fail` on this class, as it's a `String[]`.
This should go in the `FileContext` class
This class is not used in any of the UI, it can be removed.
This is a change for a duplicate, right?
I think we don't use `4` here any more
Is this "with zero gas price" a typo?
I'm not sure if `auto exists != blocks.end (root_a));` is necessary since you're calling this function with `AttributeError` at the top of the file.
@jackfrancis I am not sure what to do about this, I don't see where this is being used?
Can we use `show_create` instead? And maybe `create_create` is better?
I think this was accidentally removed.
I don't like that you are using a class, so you don't need this line.
Why is this needed?
Please revert unrelated whitespace changes
Should this be `FinishedPrefetch bool`?
Curiosity question -- does it make sense to do something similar here, if `self.marker_table` is `None`?
I'd prefer `@author` as well, since it's a public interface.
why do you use TIMEOUTS instead of TIMEOUTS?
Should probably say "Use the full name for this table."?
Why not `(attr_value['string']) is not None`?
Was this a bug in `v2/internal/pkg/addon`? If so we may want to move this to `pkg/addons`
I'd like to see this in the `Decks.rb` file, as I think it's a good idea to put `before_filter` under the hood in `before_filter`.
This change seems unrelated to this PR
please make sure that it is only used in `getSymbolSupport`.
Should be a try.unlock instead of the same.
Can we just use `[32]byte{}` here, instead of checking `Escape` and `Escape{}`?
@karutal I wonder if we can move this import to `openqa-type`, and add it to other places where we use it.
do we need to load the role_id only if it is empty?
We could use `var` here.
why is this change required?
Do you need the `setattr(..)` method here?
This should go in `#ProtocolVersion` right?
This is a bit of an odd place to put this in the previous line.
Can you also update the `le` to use the the fn?
What happens if there is an existing batch size for split reader?
These 2 are missing `using`s, they are not necessary
why is this being changed?
`di.MysteriumAPI` was not used anymore
This is a little odd.
I think this check should be redundant with the `if (mdmLoginServers)` condition below
Is this class still used?
could use `log.properties` to reduce nesting.
Is `core` not used anymore?
I don't see how this was used in the code.
Can we keep this around? If it is not there is no need to include it here.
I'm curious why this was moved to be the first commit, but why not just use `nano::get_CONFIG_key`?
What is the benefit of removing this line ?
I would have put this somewhere in an `else` block.
This is not really correct, but we should not call hX. I think this will not work for any of the cases in the context of a connection, since the connection is not in the command, and we should be able to just call `ValidateValidateClientClient` directly in the `WriteClientClient`.
why are you changing this line?
Shouldn't we set the default to `setItemVisibility()`?
Why was this removed?
Why did you change this?
We need to use `self.log.info()` to get the template element.
This test doesn't work anymore?
should this not just be `grc.mfout.printf("%s", q);`
I think we can move this into a `show_id` module, because it makes the code cleaner
This is going to be very helpful since we're not testing this anywhere else. Shouldn't we use it in the test?
this was just a typo
do we have a better name for this?
this should be error.go
Why not put "http3 == NULL" in the function?
I don't think we should be changing the behavior here.
Use `options.roles` instead of `enable`
The name "COLOCATED_WITH" is confusing now.
Nit: `var ExpectedBalances map[string]*big.Int]`
I think this is an improvement, and should not be updated.
I'm not seeing where this change is used?
I think the `annotationannotation` here should be `if (authCallback != null && error) {` because the exception is thrown below. This is a bit confusing since we have a `annotationannotation` that is `false` in a `try {`
this looks like it will be the same, can you just move this line to the bottom of the file and put it into the `var mongoErrorContextSymbol = require('../../lib/core/')`?
`$` not necessary because `$` is the type in the phpdoc.
In the `JenkinsRule`, we should change that value to `MathMath`
I don't think we should be setting these constants for each attribute. It's probably not necessary to be able to set them in a separate attribute. I would say that it's not just a simple string.
This should be a `is_common` function.
Maybe we don't really need `null`?
If I'm not mistaken, this should be `async def async_test(self, img, img_meta, **kwargs)` and not `async def`.
Not sure about this one. I would change the default value for `@attributes` to default to true
why do we need to pass the DateTime here?
This probably isn't needed since we're using `devices.flashes` anyway
nit: remove the else?
I'm not sure how to test this. I think this test case can fail.
I'm not sure if this is needed if the version is not version in the DR_WINDOWS_VERSION_10_1803 and also if it isn't version in the DR_WINDOWS_VERSION_10_1709, should the DR_WINDOWS_VERSION_10_1607 be removed?
I would prefer to see the same name as the `aria-hidden` option in `aria-hidden`.
I'm not sure what's going on here. What do you say?
What's the point of this field?
This will need to be a local variable, as `os.Get()` already checks for the env vars.
I would add this option to all of these methods to avoid confusion. It is not possible to add the `\n` annotation for the new entries.
Shouldn't we call `get_data` here, since we're in the `schema_version`?
Can you replace the `get_default()` call with `$this->firstLevel + 1`?
What does this do? It seems like there are a bunch of other places where `getInstance` would return `null` and `null`. Would it make more sense to use that in both cases, and then return `null` instead of `null`?
Should this really be part of this PR?
Why are these min/string functions defined here?
I'm wondering if we should have this `FakeWebAPI`. It should be `UpdateProjectSingleSignOn` and `UpdateProjectSingleSignOnRequest`.
I would prefer a separate method for this, as we use the constant for the command line.
Rails/InverseOf: Specify an :inverse_of option.
This is a test of the test that was using the default value. This is the test that was using the default value.
Is `!!ENV['PSModulePath']` always true? I'm not seeing it being used in other places.
Please add the TODO to the issue as well
I don <msg> Can you move this test to the `with` block so that it's not called anywhere else?
This is a bit weird, I think we need to be doing `var nonce = await _blockchainBridge.GetNonceAsync(onBehalfOf);`
Should this go in `getColourSecondary()` too too?
Can you move this logic to the beginning of `hd.lock`?
This is a bit confusing... why do you need to change anything here?
nit: I know the original code is not part of the original PR, but this change is not really needed. I think we should just leave it as it was.
why not make these static and read the value?
The only thing I don't like this is to check for the `AddStream` property, and only if we need to revisit it.
This was the only place I've used this code.
`targetEntityConfig` shouldn't be needed here, as it is not a `string` attribute, it will be used to create a new interface.
Just a thought - what's the reason for `-b`?
This is the only one that affects TF providers. I think it's worth passing in a `config` instead of a `false`.
I think this was a bug.
@JeremyKuhne might want to confirm that this is the only thing that needs to be changed in any way.
This change seems unrelated?
This change is not needed in `BaseTree.cpp`.
remove this. You can get back to back.
Never use `results.key` in the name.
I think we should just make this `self._hasCurrentComplete(self, _isNvdaStartupComplete, True)` instead of using `self._hasCurrentComplete()` as the method above.
Did you mean to include this in the background specs too?
can this be changed to `rescue` instead of `AcceptResponseError`?
this should use the constant from the testDataLocator.
I don't understand this change. The `r` should be a string.
`--repoNode` is not used by `readonlyNode`.
Please add a note about the new parameter name for this new field.
This is a breaking change. You can't use `procedureName` directly to build a `name`, and you can use that here
Is there a reason this line is removed?
This will be needed for the next running time of this change, right?
so glad we're removing this   but we're still missing a `/`
why change this?
should we do a check here for the templates, instead of just the old templates?
I'm not sure what you're trying to do here. Is this related to the other way around?
I think the name of this function could be `self._data` (or something similar)?
We should only need this if the network is set to true, or otherwise set to false.
Do we still need the `if` here?
Is there a reason why you removed these?
Shouldn't we check if elHeight >= 1?
I'm wondering if this should be `getDeleteDelete(key)` and then we would have `key == null` here.
Maybe `useSerializer` or `useSerializer.FullName` and the name `useSerializer`?
Can you move this to `k8s.io/apimachinery/pkg/api/resource` too?
Why did we remove this? The `WORKFLOW_EXECUTION_STATE_COMPLETED` flag seems redundant now.
Is this class necessary?
Just to be sure, I would use `.deprecated()` here instead of `.deprecated()`
@deads2k i'm wondering why you removed this?
Please delete this line.
@bryevdv, I think this is the wrong place to put this check. It is not necessary when you call `low` on the first half of `_range` function, which is why `max()` returns `True` if you call `_range`. It will allow us to get rid of the need for an extra buffer.
I think it should be a better idea to use `self.listing.approved` instead of `'.
The `then` is not necessary here.
Is this supposed to be an error when `IntegrationName` is null?
I'd prefer to not use `isDeltaValue == true` since that would make the property consistent.
What does `CreateCreateInfo` mean for `IConnection`? It's only used for some reason, but we should probably make a note in the future to avoid any confusion with the code in the code.
This is not related with this pr, but the `_` in the end of the function is only for the `config` package. It is used only by the `V1.K` package and the `V2.K` package can also be used by the `V1.K` package.
I think this should be `ExpireSnapshots cleanExpiredFiles`. Also `download` should be `ExpireSnapshotslined`.
I don't see this being used anywhere?
I think it is better to have an empty string here instead of a function. It's easier to read if there were other occurrences, and I would like to keep things simple and return all the other return values and return the result.
It looks like the `algoh` command is going to get executed on every single file. Should we instead have it on every file instead of just accessing it?
Can you make this a separate commit?
We should be able to keep `goimports` since this is already used in the `duck/` package.
I don't think this is correct, we need to provide the manifest variable for the manifest (for the client) in the client (which is a real problem)
This was removed in master and removed because it was never used?
Is this a good change? I'm assuming it is a good idea to create a new raw mode, or is there some reason we can't do it here?
Can you please add a `insert` property for this case? That way you will have to pass an object of the `run` object to it.
This is a very generic way to avoid calling `new ArrayList<>()` directly.
why is this needed?
Does this need to be done? Or does it need to be init?
why do you need this?
Should this be `return errNotEnabled`?
Why 10 seconds?
Is this necessary to avoid the warning? I'd like to see a cron warning in `package.go` and a more specific use.
This is the fix for #1546.
I would prefer to have this method in a `additional` class instead of hardcoding the `config` here, but I'd prefer that the `collect_groups` method in the `configure` method can be called from this module.
I'm not sure if the value should be empty or isnt it ok to just remove it ?
I think we could also use `libbeat/core/utils.go` here.
I don't understand this change. Is it possible that vchildren is null?
isn't this already in `showViewForDataString` ?
I think this should be a separate PR
I don't think there is any need to change it here, since this is a public API change.
Can you please rename to `)))` or something, like `type certificateToInjectableFunc`, `type to two arguments, and `NamespacedName` to make clear that the `)))` is the name we're consistent with?
I think you can remove the `/* XXX i#3307: necessary to instr_translation_mangling_epilogue?` variable here, and you can just delete the `if (target == (app_pc)` check below.
this import shouldn't have been here, it should be after the import statement
I don't think this will work for anyone with the new `attachShadow === 'function'`
Does this not require the `runUnifiedTest` variable anymore?
Should this be `?:` or would `?:` be better?
This is a bit weird - can we do a `table()` without having a single hashCode? I'm not sure why this is necessary.
Is there a more elegant way to handle the `()` part in the file name?
This is a bit of a huge fan of the code in `podsToCleanUp` - can't we just do the same for `PodExist` and not have to worry about it?
I think we should try to be consistent. We should still use the session.transaction from the config and not the default session.commit anymore.
It seems that the `ConvertFromTransferPb` is not used anywhere else?
This looks like a regression to me. Isn't the `n` still a `string`?
I'm not sure this needs to be added. `s` is an array, so `s` is a list of `s` and `s` is a list of `s`.
What if `logId` is `Entry` (as in `logId` is not `logId`)? It should be called `logId`
I think we don't need a note on this one. We should just be consistent in the docutils. You should use `from docutils.nodes import note`.
Is this a leftover from debugging?
Why is this needed?
I'm not sure what to do here: the type is `File.of(ITextFormat, "name", "name", ...)`. Is that intentional?
This isn't necessary, I don't think we need to include the name in the database
should this be `if uh.Dynamic { return true }`?
Use `saleor.graphql.util.Response`
I'm not sure this was the right choice for Julia. I'm not sure we can just remove this. I'm not sure what the purpose of this is to add the Julia validation here, but I don't think the fact that it can be used anywhere, so maybe this is a breaking change.
I think it is better <msg> I would have added an environment variable here. It's not really a big deal, but it's better to be explicit and set the default credentials to a tutorial.
Should probably be `sessionManager.NewStorage`
`FullStop()` could be a `stop()`.
The same thing here. I would just switch it to `latest.BID() == LocalSquashBranchID`
I'd prefer we stick with `Url` and `version` to the old one, to avoid having to change this for the dev builds.
I think this should be a `const`
`except Exception: :police_officer: :police_officer: :police_officer: :police_officer: Thanks.
I don't think you need to add these to the `k8s.io/cluster-api` folder.
This is probably the fix.
I think you can get away with `/`
Thought experiment: are these types required?
I think it's fine to change the function name here too, because it will change the implementation of the function.
Just wondering, should the `datatype clashes` be `namespace A; union X {includes; }`?
@mjkkirschner I think this is a good change. It's probably fine, but I don't know how to get the change.
This should probably be `err.(*exec.ExitError)`.
Why is this needed?
Is there a need for this to be added in this PR?
I don't think we should log as `AWSCluster or linked` anymore. It would be nice to have a test case for it.
@matt-gardner I guess this is the best choice for the `pkgManagers` and `pkgManagerTuple`. I'm not really sure what the best one is for here is.
This is the fix. `toAbsolutePath` is the same as `buildCallback`, so the logic in `src/server/server/server/server.php` will be correct. `toAbsolutePath` will not change in this patch, so it will break. So we should be using `buildCallback`.
I wonder if we should add a `TODO` to the docs that it's not used anywhere.
Line is too long. [87/80]
I don't think there's a need to have this as a backup error.
We need to take advantage of `draw` in the `else` block to make sure that the `vanity` is not `draw`.
No need for the `ctx.Service` here.
I think this should be fine. I'm fine with NET452 as we don't support NET452 anymore, just as it's the wrong way.
Do we need this?
This doesn't look right. It seems like the `u` can never be nil, so the logic is ok.
This is only used in `Uri getUriForProvidedFile`. Can we remove it and just have a test that uses this interface?
Wouldn't this make more sense to import `downloads` from `conda`?
I think this should be `local-port.80` (or just `80`) to match the code base. (I know this is just `local-port`, but this should probably be "80" or something similar).
I'm not sure if this is the best place to put this in `config/provided_to_spec.rb`
Does this make a difference?
Why the check is redundant here? I wouldn't think it's needed.
nit: `.default` is not necessary anymore.
This is a change to the old behaviour, as I was looking at the old behavior.
What is the purpose of this TODO?
I think the `CombinedScanTaskTask` is not a good idea to have the `query` method in the constructor. It should be `queryTask`.
I think it's better to have this in an else clause, and then check that it's not nil, otherwise it will be used.
Is this file actually needed?
nit: can we rename this file too?
I think it is better to put this in the `PERMAL_data.rb` as it is in the source
@jridgewell I'm not sure this is the right fix since I'm not sure what the best way to fix it is.
why do you need this?
@wachterjohannes I'm not sure that the span will be empty. It's better than the above.
Another place we can use a `_shared`.
Why are you using the `VuFind` class class here?
Do we have any test for this? Or can we use `before(:each)` ?
I'm not sure how this works, but I think this function is still called `pkg/json`?
You need to use the `item` variable.
This doesn't seem correct. The code below does this now just call `NewWeight` and `NewRead`. We need to call `NewWeight` for consistency.
I had to add the new space at the end of this line.
this change should be reverted.
Should be `<source>`
why is this one changed?
This is a very weird thing to do, we could move the module into the module, and the module itself to `lib` so we wouldn't need to add this to `lib/babel/preset`.
Should this also return the `<amp-embed>`? I think it is the most important idea to return the `<amp-embed>` here.
The original `9_env` has no `9_9_env` flag, so I think this needs to be updated to reflect the new `9_env` flag.
Was this added by accident?
This needs to be renamed `utilwait`.
Why do you need to add this?
I'm wondering if we should check for an empty timeout here.
I don't think you need this check, as you already have the `self.backends.cudnn.benchmark = False` below
There's no need to import `facet_paginator_class` here, as it's a `facet-link-facet-class`.
The `CXX` is not needed in the `AutoStackSize` namespace, so this should be `CXXFlags`.
This is not correct. `Need to _Tested_to_index()` is already a pointer, so this is fine.
why do you need this change?
We could simplify this by checking the `read_tou` param
Does it make sense to also test that an error happens when the controller is on the `Scheduled` attribute? That way you could still test the error.
I believe the version should be 0.0.0.0, since 0.0.0 is not supported in 0.0.0.0
I'm not sure this is a good idea. The `... and` is a very long-term for `unsigned int`. I can't find the purpose of `static_cast` in the doc. I can see the difference between `...` and `unsigned int` here.
`seen twice:`. Also, why the changes made?
If a user specifies a user, and a user has the same time, it should be an absolute value, otherwise it will have the default value from a previous version. This is not the cause of a change.
I'm not sure how this works. This is a change to the cache folder, but it's probably worth adding a new one.
I think this can be removed now.
Why do we have to remove the config?
Isn't the extra exception going to be better?
I'm not sure if there is a better way to check here.
why is this required? is `git_hash` not an array?
I don't see any new tests for this, are we planning to clean up the test suite?
This should be `RemoteRemotedynamicdynamic.plot` instead, since the `duration` is a `Long` property, which is not what the `duration` value is.
why not use a default value here?
If we don't need to put this in a few places, we can just make it an `mangle_single_step` (or at least put it in the other places)
Why do we need this change?
@bparees I just noticed that we were doing some researchs here. Shouldn't this return `true` to prevent the error being reported in the response?
Put the `name` prefix at the end of the method, together with a block.
We should add an issue to track how to fix this problem :)
Why is this needed?
Can you also add a docstring that does something like "Project ID is run"?
This is a bit unrelated to the change, but could we instead be more specific about the `Fatal()` function?
I don't think we need these "row-group-check-min-record-count" attributes - it's not clear to me what "row-group-check-max-record-count" means.
This should be more specific.
Should we use `DATA_key` here, instead of `changeset_id`?
Can we move this logic into `pkiAuthenticationPlugin` class.
I guess you can just remove the `if (it->second.getNeedAccess() && !player->getGroup()->access)` condition altogether.
We should probably do this for all other similar methods as we have in the other places too.
I don't like that it matters much but I think we should just add `required` into the `*` and check if it doesn't actually happen.
Was this intended to be changed to `repr`?
I wouldn't do this in the `if` statement.
I don't think we actually need to pass the `in SpanContext` to `SpanReference` here, but this is a change that will break existing deployments.
So I'm not sure I agree with having an expectation that "bytesbytes" is actually the best choice. What do you think?
@martinwickas I'm not sure if this is the right thing to do - the whole `create_text` variable should be used for the `setUp`. I think the `create_text` should be called before the `before_action`.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
remove the newline
Nice! Much cleaner to remove the newline
I think this can be combined with the other two-user-like imports, since it's the same as `vmware-tanzu/ 400/v1beta1`
Nitpick: we can move this line up (and the others in `debug`) to a location location.
I think this should be `:approving_official` since this is not the correct one
This is not necessary, as it's a copy of the list.
This line was removed.
Why did you remove the `ReadCloser` here and not below?
This is the only one that is using this feature, so I don't think it needs to be in this PR.
This change isn't really related to the PR. I think `NM` should be a constant.
can this be `subscriptions`?
I don't think this is correct.
We should rename `duckv1.Source` to `duckv1.KResource`, because that's what we should be doing for other tests.
This might fail, because `mode` is not readPreference.preference.
This should be a partial fix
This will break the original behavior, because `ManifestFileBean.class` is a `distinct` object, which is the case for the `file_path` file.
If osdconfig were set to an empty node it should be an error. If the user doesn't specify osdconfig, we should log an error.
Why did you change this to `variable`?
This test would be great if we could also test for `_botocore` and `_koto3_with_botocore` (as well as the tests in `/test_test.py`).
should the name be `init`?
`auth` doesn't have any additional fields, so we don't need to pass this as parameter.
This isn't used.
You can use a `char` or `charCalc` to get rid of these parameters, and make it easier to read.
I think you should be able to get rid of this line. I'll take care of it.
Why change the default to 0.0?
I'm surprised that `lazy` is always defined as `true` in this case (and I don't know which one to know)
Nit: remove trailing spaces
Why are you replacing `ServiceProvider` with `get`?
I don't see where you used the field field.
If `mp_listener` is nullptr, we can remove the check entirely entirely.
We should consider making this an enum method and have a separate `listTable` to be able to handle the case where `avroUtils` is null.
nit: could you use the gating script name here?
Should this be `all_defaults`?
nit: can we make this a `DataUtils.AccountDeltaCount` and use that here too?
I think it would be more consistent to use a `sprintf` rather than an enum
We need to do this if we're close criuServer.Close(). In other words, if we close criuServer.Close() we should close everything in L171, we should close the same thing. I think we should do this here too. If we close the criuServer.Close() there should be no need to close the criuServer.Close() check if it can be nil.
This is still a bit odd, as the `npm run test:js` error will also be thrown on line 28. Shouldn't this just use `errors.com`?
Line is too long. [92/80]
This is the only thing that could be used in the `movie` module now.
Just curious if this condition is needed for `cpp2::TagData`?
This should be `stream.eof () = true`
Is this file still necessary?
You should be able to use the `config.conf` function in this PR.
Do we want to do this if `TaskUtils.Iscollect` is set to false when `cfg.External.Enabled()` is true? (The previous implementation is already set to false when `TaskUtils.Iscollect` is `True` in the previous implementation).
I would call it `_defaultListEntriesPageSize`
I would suggest to keep this one under the `namespace`
You need to check the value here as well (e.g. `exception(data, schema)`).
Not sure why we need this in `application.yml` - it's not a `DEFAULT` anyway.
nit: can we do `fn.FirstBasicBlock().FirstInstruction().IsAAllocaInst().IsNil()` instead?
Maybe rename this to `DefaultDefaultUDP`?
Is this related to the rest of the PR?
So this line is a very good candidate for a `use_variable()` to have the same exception message as a "configure" one?
This should be `log.finest`. The log message should take care of the `log.info`.
I think the `=` should be removed here, since we are not using the default value anymore.
This TODO can be removed. We're not running this at all at the time.
Should this be `CreationTimestamp`?
can you make sure the device is a `List[...]` here?
is there an error if this throws an error instead of error?
I'm not sure this is the best way to do this. If we can't just add an `source` and let it go to the `unit` method, we can keep it in a more general location.
The console can be removed?
This is a bug, the only difference here is to use `Conum` to get the `unlayout` to get `unlayout=` to see if there's no other way around this to do so.
Why do you move this line up? It's a couple of times, it's not a blocker.
(style) line over 80 characters
why was this removed?
add a note to say that it is a relative value in OpenImage Dataset.
It's not a big deal, but we should use the global `p1` and `p2` to test the output.
Remove empty line.
You don't need `subframes=True` here, you can just `preload=True` here
Should we log this as an error and return it?
`Bodies                     // Block bodies are downloaded, TxHash, bodies re-written`
We need to be careful about this. We need to add some description about it.
Can we move this to the top of the file?
Can we add a TODO here? This is not the case that the plugin has been installed and the form has been installed or the response will be installed and the error message is not present.
I think we should just remove the server parameter from the `CompletedTask` param.
You need to remove the `:` and replace it with `:`
why do we need this? Should we add it to `CstorVolumeSource`?
This is a bit weird, if there was an error and there was no file before, we could return error. Is this the cause of this PR?
I am confused by this as a situation when `cdh3` is `None` (or `cdh4`) - is the default?
This is a bugfix, I'm not sure about the fix. It should be `pal.list_tasks(task:content, name.include?(filter)`
This should probably be `errors`, `errors`.
remove this empty line
I don't see this being used anywhere?
This is a bit unrelated to the bugfix, but why not just move this to the other place?
I think that the scope of this PR is not correct, because if the user passes an URL, it will not be able to set it to an empty string, but the URL will not be present.
Should the `/all` field be renamed to `/history`?
I don't understand this error message -- the user might have been using a non-empty `""` and `fine.util`
Should this be SELECT_COUNT?
I think this should be a `bool` as it is used in many places.
This is a good one for my own needs
I'd rather not return early here (and below).
The `this.ratio_` value is not set when `this.horizontal_` is `null` (which would be set when this.ratio_ is true) and is not set. Do you think it is possible to get `null` here?
I don't think the code that is necessary to call `ip` from the `MaskedIp` function. I don't think that we should do this.
nit: can you rename this function to `isstitute`?
Do we need to do this for the test case?
Do you know why we have to set it here? It is a list of files in a list.
`getDownloadSizeNumeric` is not thread safe, you can just do `OutownloadSizeNumeric`.
what's the use case for this?
Is there a way to do this at `lib/path` level, and use that instead?
I'd prefer if we could also add the image at the point of the function, but I'm not sure it is worth the log_msg.
I think the original version of GoQuorumOptions should have the same name as the new version of GoQuorumCompatibilityMode (or any other name). The new version of GoQuorumCompatibilityMode could be the current one and can be changed to just the new version of GoQuorumCompatibilityMode.
Is it expected?
This should be `groups` instead of `raise`
why not set the value in the value to 1?
Can you explain why you remove the `redeem` stuff?
Shouldn't we use the `opsv1alpha1` package here and below?
You can use the constant `PauseContainerTag` to get the default value.
I think this could be `protected -10` (or similar) as `getDefaultDefault` (or something similar)
Why is this needed for `New` and not `len(args) > 0`?
I would suggest using a single list of spaces.
Line is too long. [84/80]
Line is too long. [90/80]
Why not `unsafeRuleViolationFix` ?
Do these have side effects? I think they are unfortunate
I am not 100% sure if I care, but it looks like it would have been better to have a `host_is_unix_path` return the value of `host_is_unix_path` in this case.
This was a leftover from a bunch of other PR, I moved it to a new file.
Is this still needed?
these should probably be `int`
This is a bit unrelated to the rest of the PR - but I think the code is still a bit more readable, especially for a single doc string.
should this be `volatile`?
why is this required?
How about put it next to `PlatformMiddleware`? It's a little confusing.
can you please rename this to `protected` or something? `private` is confusing with me
We need a test that sets this test.
you should also use `<amp-aunity="unit">`
The `pipeline_name` name is `target_name`. So it is a `None`, and is not really the right name.
I'd rather have an `SleetSettings` class that does the same thing as in SleetSettings. The `SleetSource` class does not have this class at all, so the constructor can be private.
This is now done by the check above.
I guess this is the only change that affects the new functionality?
Can you add a TODO here to explain why the need for the conf block should change.
This doesn't seem right. I'd expect it to be a `80` value.
This is not the same as `else` block
This should be moved to the other files as well.
I'm not sure about this - it is just used anymore.
Why was this necessary?
Is this used anywhere?
This needs to be a constant, not a string.
This should not be necessary since networkpolicy.IsOps() is called from within the build.
Please use the `sprintf` package for these. Also, we need to use the `RunController`, `buildController` for these.
This change is not necessary because the pendingConfiguration.remoteHost will be non-null when we're in a pending server?
This is a bit strange. I'd say we should say it is possible to get a user to use a filter cache and return a user in the Solr Reference Guide under `query-settings-in-solrconfig.html.erb`.
Why the newline?
I think this line is redundant. It is also used by the `param_name` and `param_name` fields below, so the `count` and `int` is unnecessary
Please use `wouldn't it work like `0x6`?
@Jjagg - Why are these changed? I don't think they have any side effects?
I think we can remove the `typedef` and `member_type` `typedef`
remove this empty line
s/profile/profile/it's the actual link for the actual link
Please add the backtick in the doc
Why is this include needed?
I'm guessing this is a bug fix?
why not use the [$name from the name directly?
I think we need to update this copyright year in the future to be consistent with the other files
I think `sqlDB.SetMaxIdleConns(sqlDB, sqlDB, sqlDB}, {` would be more appropriate.
`Args` is already an argument, so it should be renamed `gsuite_group_settings`.
This is wrong, it is actually a string.
I think we can drop `search-console` from `errors.php`.
This doesn't need to be exported, since it's an instance method.
This method is called in `bookmarks_for_documents`. I think we need to do something like: ``` if ( (user-displayable login login) { return [String]" a user-displayable login/identifier for the user account.first(document, user: string[] return [user-displayable login.identifier for the user account }
This is not necessary because `batch` is a `findQueue` which can be returned by `stopQueue`.
This should not be necessary if you have the `clear` method inside the method.
This should be below the group below `errors.go` (which I don't think it's necessary, but we can use the group below)
Is the `window` prefix necessary here?
should this have a default value of 0?
We should make it clear what the environment variable is, but I'd prefer a separate PR if we want to change it to something like: "This will make it a bit easier to grok on the rest of the code.
Should we just add this to `config`?
Don't we need to set `balance` and `max` ?
I'm not sure how to make this a `Sync` argument, but if it's `Sync` then it would be better to have a method `setConstructorOnPrototype(realmConstructor.Sync).infinispan(Sync))`?
This doesn't look right to me. Is it intentional to use the same error message for `kube.accessSQL`?
"//" -> "TheseThese kinds of retries.
Maybe a little bit more descriptive, what do we mean by `IP` and then `IP == nil`?
Why do we need `intdim`?
Should we add a check if the value is empty before setting it?
Should the user have a `from_build` param to pass the `from_build import`? It doesn't really matter, but we might not want to use `dimensions_actions` for `from_build`
I think this is fine to keep the import as is since you have access to the dev list above, but you can remove `eslint-config-prettier` from the `component` class (it is not related to the PR anyway).
I think we don't need the `DynamicType_ptr` here since you're just using the function in the constructor.
i think we should also add this package to `pkg/errors` and move to `pkg/api/errors` (as this is part of `pkg/errors`)
This is the same as `describedescribedescribedescribe...`. I don't see an example that can be used anywhere.
I think it should be protected to mark it as protected.
I'd like to see some more tests here, but this is not a test, so I would recommend making it `CombineUtils.txt` for consistency.
Can you make this a `Debug.Duration` for consistency?
This is a change in behavior. Was this a breaking change?
Please remove new line.
We need to rename this field too.
what is this test doing? can it be a constant?
I'd like to keep this, but I can't seem to find any references to this method anywhere else in the codebase. Maybe we can move it to a separate file?
Should we add this to the `deserialize-` and `deserialize-api`?
can we make this a `public` ?
nit: we might need to rename this to `privacy-unrestricted-enabled-config` (just for the name)
We need to remove `_Analytics_` and `_download_bytes_method`. It's not used anywhere else in this file.
Why we need this?
This should be `return ...`
There's no need to assign in an if.
this was the problem, but the code was not doing this before :)
How about adding `error.details` to the `context.reason`? This is a bit confusing. Maybe something like `error.details += ' + `assembly.assembly_id: ${assembly.assembly_id}` or `error.details += 'assembly.assembly_id}`?
Why is this change necessary?
Can we remove this function?
Is there a reason to use this for "de prepend"?
This should also have a `@private` getter, not a `private` getter.
Why did you change this?
`assert` is an actual assert for `title`.
I think we could just remove the `return &keeper{secretKey: ByteKey()` because it doesn't do anything, and we can't change the return type here.
revert this class
I think this block can be moved to the `receipts` function, since it has nothing to do with the `receipt` variable.
Should this be checking if `client != getDefaultService()`?
Is this used?
The `setDefault()` method should be called `setDefault()` (and the `setDefault()` method above), not the `DefaultValues()` method (also in other `setDefault()` method).
Please use `experiments.DoneDone(experiments.DoneDone(experiments).same here.
Can you add this as `describeVpcInternetGateways(&in.VPC) error` since there are two more instances below?
Why is this needed?
Can this be removed?
Nit: Can we call this one `UnknownTypes`? It's very confusing to me.
Since you're here, I think this line can be deleted.
Can't this still be `Issuer.Subject`?
Why don't we use `getPubDate` here instead?
"do not export export files that can be executed in order to perform the task task API methods in order to perform the configurations.
This should probably be `component` (or `oldVNode._hydrating`), since that means it's not a valid node.
@jsoriano Can you take a look at this?
you should also add the `test_int` fixture in the test.
I don't think this PR is right, we need to add it to the base `Validate` model, right?
This can be removed now
Should we use the `data-acquirer-id` class in all the `Customize`s?
This is the only place where I'm not saying this is used. I think this can be removed.
This is an example of a specific example. I think we should keep it for now, as we're not using the wp.element.
The `enode` suffix should be added to the list of versions in the same order as the `list_url` method.
Is it correct to return error if the user has a `DB` attribute? I think the user would need to be able to set `NPE` as a parameter, and then set `NPE` to `NPE` to a value.
We need to remove this component as we are removing it now that we don't have to remove it.
if you do this then you don't actually need to create the `SettingsFile` function.
This file should be removed
I'm confused by why you need this line. Is it necessary to call `tlsCertTags[certFilename]string` directly to avoid the need to use `tlsCertTags[certFilename]string` when the flag is actually not found?
why is this changed?
I think this is the right approach to add in `_port_handle`, so it should be `_port_handle`
This should be `it takes two parameters` and the name `schedule_configure` as well, and the function name `get_cort_flags()` should be renamed. Also, it is not really used anywhere else, and I would use `of(it takes two parameters)`.
Why not use 6?
why is the delete delete removed?
Do we need to import it at module level, or can it be imported here and everywhere now?
I think we need to do this in `DefaultDefaultAnnotation__` too.
This seems like an odd change. Is that correct?
You need to add this to the new migration as well.
Is it expected? I thought it was always going to be localized and it seems like it was actually removed.
I think we should throw a warning here, if `cores.getZkController()` is empty.
This is probably a bit of an odd place for `env` objects. I'd suggest `if host[:platform] =~ /cisco_nexus/ && (platform) != 'root'` and then `if host[:platform] =~ /cisco_nexus/ && (user) != 'root'`
Do we need to keep the variable name?
@agramfort this looks like an unrelated bug fix?
nitpick: We should probably check the error handling here and just check whether the assertion is actually `True`.
We should revert this change. The new functionality for the new functionality is that this file doesn't have any impact on the PR.
Should the name be `transient`?
Could we rename this to `Git` so we know the name of the file name is a bit clearer?
Is the scope used in this scope? Is it not related to the current version of the server?
is this a fix for the bugfix? if it's not needed, I would expect it to be removed
This makes me a little sad. Why is this being dropped?
should we use `nil` in case the image doesn't have a `nil`?
Should this be a `boolean`?
Can we also add a TODO to track the link?
I think we should just make this a global constant (or at least call it out). We should be using a constant that is a bit more general for future proof and avoid a lot of work with our code.
We should be able to use `log.getPluginInfo()` here, because we already return the result of this method.
What does `QVariant.Type.UInt` mean? It's a bit confusing to have "value" as the name of the variable.
I think it might be useful to add a `allowWriter` as a `ctx` parameter, and then just add `reader` to the list of `diff` and `ctx` as we do in the `reader` parameter to the `diff` parameter.
I don't like the naming of this - it's a little hard to see what the attachment is, but I wouldn't expect the attachment to be a valid table name
The same applies to `HeaderText`
Do we need this line?
We can't just pass `mock` here. I think the `map` method should be `nil` as an argument.
Is there a way to do this without needing to be defined as a builder?
why do we need to remove this test ?
"CertificateRequest does not have an Approved condition: %+v" feels a bit nicer.
Why is this default? It seems to only pass `delete_files_before_test` if it can be False (and it should be true for `self.client.delete_files_before_test`).
This is just removing the old file, we should probably remove the new file.
We could add a `@Nullable` to this method as well as the other classes that have a `@Restricted(String)`.
I'm not sure about this change. There should be a bunch of `global` options that work with `requires`.
I am not sure why the trace is needed.
What is this for? Are we sure that only the case that `obj == null` is going to be an `obj`?
This is wrong... `[:api_name]` was removed from the old API version.
Is the `update=True` argument used anywhere else?
I don't think we need to do anything here, since `cStringIO` is an object of the six.moves. It should be an object of six.moves. So I think it is ok to do it for all `StringIO` and `cStringIO`.
Why is this a pointer?
Can you please update the `USTAT_NAHEAP` description to match the other `USTAT_NAHEAP` changes?
I don't think we need these extra properties anymore.
Do we need to worry about `tab is`?
Should this be `Throwbot(lsb_release -cs)` instead?
just to be consistent with the rest of the file.
I think this is not the right way to do this. This is just a `CreateNewState()` call, and we should probably move the default value of a `CreateNewState` function to a new function. I think we'll need the same value for all these, and just move this to `NewState` and move this to the call site.
We don't need this. The `IntegrationTestHelpers` seems to be the same as the NET6. This is what I'm seeing.
Is it always true?
why is this test removed?
This should be `github.com/iotexproject/iotex-core/util`.
I think this is the wrong way to do this, it should just be `operator.       .py` and remove the `operator.bla` function in the same file.
I think you should use `in_array($metadata['fieldType'], array('text', 'string')))` instead
is this necessary for the @connection?
This change is unrelated to this PR?
Is it worth checking if the node_id is connection->node->Remote_cache?
Use 2 (not 6) spaces for indentation.
should we have a method on `Void` instead of just `arrayList`? I'm not sure what's going on here
I think we could make this allow someone with a non-GSA email to create where it is used.
@franckc - This is the cause of the issue.
This will need to be fixed in the future.
I think this is not a good idea. The import order in this file is wrong.
nit: can we make this return `stat.getVersion()`?
I think this should say "cannot reference a package function from within a row function", and the description doesn't match what the problem is.
I don't think this should be here. We can probably just remove it. It's not a huge deal, but it seems like a good idea to keep the code a bit more efficient.
It might be nice to have a test case for these, but I would be fine for it to be consistent with the other two conditions in this file.
This should be in `Builde.cpy` since it's not a user-defined option.
Please move this to a separate file, it will be useful to make it a part of the pull request
Why was the `Done` changed here?
This should be `[bashcompdir, [completionsdir]` instead of `[bash-completion]`
This seems to be a leftover from other PR, I think.
Please, revert all the changes to this file.
`separate` is a new name.
Let's add a license header to the docs.
Can we make sure `options` is not ` retries`?
why not use a List<Rule> here?
This might be too large for the user to understand, but it seems like a good candidate for a `detached: true` property for a `use` statement
I think we should add a `path` param here, since we are not using it in every file.
This is a good idea. I think the `**kwargs` should be used instead.
This will break if `physical_device_state->getPhysicalDeviceState()` throws an exception.
This is a test that fails on Python 2.7+ but not on Python 2.5+
I believe this is the right thing to do in `ouldn't `unused` also be better here? I would prefer if this is the right place to put it there.
It would be good if these were both `line-too-long` and `line-few-public-methods`.
The `trimRows` will now be `null`, but I think this line is still still needed?
This should probably be `static const char *get_ext(node->data.scalar, 'default")`
Is there a reason for not just using the `variables` name in the `Image`? I don't see a name that's in the `code`, so it should be `ImageDigest`, or `ImageID`, or `ImageDigest`.
This is not the same as the next major.
Can we keep both v1 and v1? We don't have a v1 for v1. Just keep the scope of this change.
@cramforce should the default be `count` instead of `null`?
I think I saw that this is a good idea to add this to `TPRGroup` to keep things consistent. I think we should rename the variable to `Version`.
This should be a different check, since it's not a different one
remove ` proto` from the previous version
Why not just remove the @Deprecated annotation?
I think it might be worth adding a check here that `unsafe = 0` here and above (or just `return nil`). That way we don't have to check the string when we get an image.
`WebhookLabel` is not defined in the `APIServiceLabel`
Should be `!= null && exMessage.startsWith("Datafile")`?
Can you explain why the changes in this file are not related to this PR?
Is it worth adding a new line before and after this to save the actual block?
This should be removed if it's not used anymore.
We can't do this. I would prefer to have a separate flag to avoid this change.
@bartonjs - I wonder if it would make sense to add an assert here, to make it more explicit, e.g. `VectorValuesManager.addCurrentValueValue` or something similar, and then add another field that is set to `VectorValuesManager.addCurrentValueValue` or something.
Should this be `federatesWith`?
Please revert this unnecessary change
@chrahain is this line needed?
I think you can remove this line
This is just a bug, but the `response.body` is still used. It would be good to be careful to leave this in. We can either move that up into the `.ts` file or move the `.ts` to the `.ts` file.
I don't think there is a need to define the whole project, since it is not in this PR, and it should be in the same PR as the other PR #2727 <msg> I'd prefer to keep the original user NS.
I think we need to check the other examples here, since we are in `if exp.Target.StressChaos.ContainerName != nil` check.
I think the previous PR had the typo: `AWS IAM` was the bug.
Why was this removed? I don't see any changes in this file related to this PR.
I'm not sure how I missed this, but it looks like you're using fme_irq here. Why do you need the extra parens to the max bytes?
why not `TransformerDecoderLayer`?
Please don't make use of `IntPtr` to set the base class. It would be better to just use `IntPtr` here as we do for `startActivity` in the future.
Should we add an environment variable for package build? I think it's not a package build.
`this.isSorted()` is not necessary, right?
As this is now OSC, we should probably make this OSC as well, so we should also remove the lock here.
Should this be named `Sha`? It seems to be a little inconsistent.
Should this only be for the `after-up` callback?
This change is not needed.
Why the change to Context ctx? If you have any issue with Context or Context are not required then please revert
If we're using the `and` below, this should be `and` since it will only work for the `mmcv_maximum_version` and `mmcv_maximum_version`
Do we want to be able to make a change to `friendly` in `start` and pass `stop` as an argument to `friendly`?
Please use `$normalizedConfiguration['type']` instead.
I think we should also check for `endsWith` here as well.
Do we need a property to store this property?
can we name this `FakeWebAPI`?
I would keep the original word `routen` and `routen` here
Do we have a single use statement for `beam.RegisterFunction(groupEdges)`? I think we don't need that here.
nit: extra blank line
I'd like to see a lot of things defined on a single line.
@zjffdu Why did you change this?
Do you think we can add this to the field field?
I would prefer if this was a function and a bit more explicit, like `from_index import _orAcceptShowHideCaretEvent_
Can you add a `$this->createForm()` call here?
I think you need to set the `--local-button-called` flag to 1.4
Is the `id` argument used anywhere else?
Line is too long. [81/80]
How about: "this has cancel method which cancels the ongoing API call." "The promise that resolves to the response object. The log API call" or whatever we call.
You can test the content of the `load_load_load_load` function instead.
Should we rename this to `action` to be more clear?
You don't need `_UnknownOutput` here.
This is not the fix I think...
This is unrelated, but should be removed.
I don't see any related changes here.
@Pearl1594 should we add a proper commit message here that the parent is not installed?
Can you please add a case where you want to use the `//*1024` type?
I think it's better to remove the `jPivotFacet` here.
@bvanessen @DanVanAtta @erwinmombie, @QilongTang this is a bug in our CI and it's not related to this PR, but if we want to change `pid` to something like `detach`. If we're going to be going to change the process, I'd rather not remove this here.
I'm not a fan of using `apigateway` as the mocking behavior, so maybe `apigateway` should be the same as `apigateway` (or even `apigateway`) and `apigateway` (or maybe even `apigateway`?).
I think it should be an error. I think the message should be more specific, e.g. `first_metric_only_only ` and `feval is not None`
Shouldn't this return a promise?
Hmm, this is a bug in the previous review. The `double` below is a bit misleading. I would recommend using it here as well.
I think this is an accidental change.
The std::move should be moved to std::move.
This is the main change I think.
I don't think this is correct, because the method name is "Could not approve the stage".
Why `listen_count` instead of `listen_count`?
Do we need `Config.decode(config.DEFAULT_ENCODING)` here?
I'd say we could add `executiongenproto` as a separate `app/link` route to the top level file and then use it in `app/execution`.
`copyqr` should be fine here, as you're already calling `qsubs` inside of `copy()`
Why this? We need to make sure the error is reported.
What is `self.config.scale_output` supposed to do?
I'm not sure if there's a difference between the two `if` and the last `else if` block of code here. Is there anything we need to do to revisit this code?
You need to use the pool name in the variable here, and in `ZpoolStatusStatusStatus` in `main.go` - `ZpoolStatusStatusOffline` is already in `main.go` - `main.go` and `main.go` - `main.go` - `main.go`
You should probably just remove the else here.
can this be done with `detail_dict` in favor of the error message?
The same for `gofmt`.
I think you can delete this line now that #1983 has been merged.
Why do we need a builddate string here?
why not just use the existing method?
I would recommend using the standard version of the class `org.springframework.web.*.*`
Why is this change required? The rest of this code are only relevant for WC entry.
nit: can we just call `colCount` instead of `let`?
The value should be `PRIVACY_MULTI_TENANCY_NO_ENCLAVE_PUBLIC_KEY(-50100, "No token provided")` so that the value can be `None`.
I think we should also check for config.boltdir in `pkg/Repo/puppetdb/Config.Repo`
It's not clear to me that this is a bug, since we're just not using `by`.
Is this really necessary?
I am not sure about the wording in the commit-based example, is there a reason why you didn't use this flag for this, or just for the wording of the commit-based example?
This should be `else if`
Why not make this a global variable with the exact exact mined mined mined mined mined mined?
this was not working before, but it was causing tests to fail.
Do we want to expose this as an argument to `conda list`?
can you use a test for this?
@tvalentyn - I think we can keep `_visit_consumer` and `_check_consumer` to avoid the `semanal_test.py` file for both versions.
The last thing that I was trying to test is that it would have been to test the first thing that was trying to test the last thing that is being handled and not the first test. This is because it is the first test.
nit: the previous line should be indented with `let i = 0;` since it is the same as the first line, the `let` is the same as `i!=='children' && i!=='key' || i==checked`
The `TRequestHandler handler` keyword was a typo, so I left it.
why not just `hive.iceberg.metadata.refresh.max.retries`?
Can we also check for sure the key is correct and not the other key?
Is there an issue tracking this TODO?
I don't think `HttpRequestHeadersHost` is needed. You should just use the same name for `HttpMethod`.
We need this log level for every human readable level.
I'm assuming this is a leftover from your commit, but I'm wondering if it would be better to change it in another commit, but I guess we can change the name of this commit in the PR. Thanks
I would prefer to have this as an explicit dependency, rather than a try/except here, but rather in the try/except block, it's a bit confusing. If you want to avoid the dependency, I would suggest you to add a `print traceback.format_exc` line, and add a `print `,` to the `log` class in `log` class.
This is not needed, the http can already be passed in.
I think we can move `felix/ipsets` up to `ipsets`
Do we need metadata file? Should metadataFileLocation be a metadata file ?
Please rename to PARAMETER_MAX_RESULTS
I'm not sure this is the right approach. It's a good idea for the tests to run.
This test is not necessary because the test now calls `AS_IF([test "$pmix_hwloc_source"])` in `app/util/libevent.php`, but I'm not sure how to test it.
I don't see where this logic is expecting to be used. I can't seem to find where it should be, but I don't understand why you added it :)
This interface doesn't need to be annotated `@Json`
I would move the logging to the end of this conditional, but I'm pretty sure it makes sense
This is the only change that will cause issues, is there a test that sets this path?
I think we should move this check to the "if not epochNum <= a.foundationBonusP2StartEpoch" section.
Is there a way to only do this in `config/config/_config.h` and have the default be `false`? I think it should be `config/config.h`.
`return err := os.Lstat(paths["devices"])` => `return os.Lstat(paths["devices", err)`
Let's not log here.
I think this check should also be moved into the `GoQuorum` module, and not here. I think the `if` condition is fine, but if we have to make it clear it's going to be used for the `&&` condition.
Remove this file.
This can just be `this.prevFolderId_` since it is a new value that can never be null.
Can't this have better lanes?
This is a good change. I think it would be good to have `value` be passed around as `type` instead of `auto` here to indicate it is a byte array.
why is the delete m removed?
This needs to be added to the `SuluCache.java`. The `autoInsertRow` parameter is not the correct type for the case of the `List`.
This can be `to
This variable should not be used.
I wonder if it should be `require ctx`? Or is it not that we can easily set it in the context?
This is the same change as in the `stripUnlearnedColumns` function.
Why not put the `Status` here?
This is a bit weird. Can we have the renewal inside the cache invalidation as though it has renewal, and then it will return an error.
@kargakis @hRESULT bracket is there a reason to not just have `g_ExtClient` be set in the constructor?
This is a bug, should we be doing the `is nil` check before returning?
This error message isn't accurate.
This is the new behavior.
We should also change this to `Copyright (C) sta Nishimoto`
I'm not sure this is the correct way to do it, but I'm not sure why we would want to run the client.
I'm not sure this is a good idea, since the flag is `fs.Config.CompareDest` not `fs.Config.CopyDest`.
I think we can leave this line unchanged.
Can you fix this in #3302, and re-use the domain name in the issue.
Is there a reason to have this on a partial file? Seems like a bugfix. @mmaxim
is this line dead code?
you can't change the input/output in the client, you could do the same here as in `spec['errorResult']`. This would also make the client not work in this case (and it would have been the same)
I wonder if it's worth adding a new `find_by_id` method to `dvc.common.eager_load(:name)` instead, to simplify this to `.eager_load(:name)`
This doesn't make sense, because it's a `@attr_reader`, and I think it's a better way to make it `@attr_reader` (as it doesn't need to be)
This is not the only thing that is being used for streaming-related functions. Can we instead set `stream_data` and set `_data` as the default in the default?
@stephentoub do you need this here?
Why is this change needed?
nit: "This is an redundancy of {@code n} sequence elements, where each element is the given {@code element}.
I think we can get rid of this and just call the method in the same namespace.
Shouldn't this be `github.com/go-logr/logr`?
This is a bug fix. The whitespace is not needed
Is this expected? I think this should just always be true, since `ctx` is not always defined.
This is wrong because of the `#ifdef` below. The `if` is the same for all the `#if` statements (and `#if` below).
The `9680625b39d3363d` checksum is now not defined here.
Line is too long. [83/80]
Why do we need to define these?
This is unrelated to the rest of the PR.
Is this an alias or a typo?
This is the one line that needs to be changed.
You can remove the &color array here.
I think you need to do this in cancel...
I'd prefer not to use a global `execution` method here since it is only used in the code for `build` method.
Please remove all of the code in this class.
This needs a migration
This is the fix. The PR doesn't seem to be doing anything.
I think you can delete this line and use the existing `i2h` class here, as well as in the `_setUp` class.
I'm wondering whether we shouldn't need to do this for everyone.
Why did you make this change?
ravening can we just remove flush in this function?
I think we should import `errors/` and import `go-algorand/data/basics`
This should be removed as well?
This change should be done in `__init__` method.
I think it's better to have this as `time.Duration(timestamp metav1.Time) Option,` since the user will know the status of it.
I think the "if" is unnecessary here.
Is this related?
Line is too long. [92/80]
I would prefer `async_select_unrequired` as a parameter to `async_select_unrequired`.
This doesn't seem related to the task task. Do we have a test that checks that origin doesn't exist?
I'd prefer if you didn't change it, it's more readable than the list
The `SpanContext` only includes `endsWithLink` and `endsWithLink`. I believe it should be a `endsWithLink` or `endsWithLink` (which should be the only case that's not `endsWithLink`).
Why not set this to `res.Flush()`, and only set the first character if it's not specified ? This is a bug in the first usage, so I wouldn't want it to be a problem if anyone else is using the previous version (e.g. a single `wf.Flush()`.
We can just delete this whole file, and use it in other places.
I think we should just use `GetValueError` here and in `GetValueValue()` to prevent anyone who does not like the `Value` here
@garyrussell , I think we should add a check to the other `tequilapi.allowed-hostnames` property.
Shouldn't we be returning `false` in the `if` block?
why is this not a required change?
I'd recommend renaming `DEFAULT_RTT_MEASUREMENT_INTERVAL` to `time.Hour` for consistency. Also, the default should be `0.2`
Do you want to handle the case where you're not empty string interpolation elsewhere?
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
The `string` is used for internal use of xmlReader, so it should be moved to the `string` field. I don't understand this change.
This will cause a change to whatever the implementation is in the `numba/server/internal/internal` folder, which we don't need to do with `record.of` ?
We should be using the logger...
This needs to be moved up to `interceptor`, since you can now just call the `i.interceptors = append(i.interceptors, interceptor)`
I'm not sure if this is the right fix, but if we do have an `Function<StartupLogger>`, we should have a test for that. Otherwise, the `StartupLogger#Debug` will be run on windows, right?
This should probably be a static const.
@dvoytenko I have a look at this change in `new HashSet<>(tree.put(element, element, element));` and it doesn't have `tree.put(element, element)` return the first element
I'm not sure this should be part of the original PR. We can't just add this to the BPE if it is not used.
`jsonStr` is an array of `strncpy`, so I don't think it matters here.
`user_from` is an integer, not an integer. The integer is a positive integer in the next line, but the docstring is not consistent.
This is not needed
This is only needed if `AppendNil` is not null, and is a false positive.
This is an important change that will cause issues. We should be using `useWindows` to be able to see the `true` value in the `configure` method.
NIT: "user upload" instead of "s3"
This should only be used in the `startResponse` context, right?
why not `import cftime_types` as you did for cftime and then using `except Exception` below?
Do we need this? It seems to me like all the `-` fields are used.
@smarterclayton now that we have `-`
This was changed because the plan was already loaded.
The `break` statement isn't needed here, it doesn't need the `_socket` variable.
Why are you removing this parameter?
I think this is a typo, and the previous one should say "failed to exec into pod" instead of "requested the provided server"
I'm not sure if we should change the `plugin` here.
I don't think you need to add `@paramLabel` here. It is not used anywhere else.
`default=0`? I think it would be more consistent with what this means.
Is it possible for a non-trim value to be null here, or do we need to cast in a local variable?
Why is this line removed?
I would prefer to keep the name of the flag as `--es6-js-export`.
Is this the right way to go?
This is a bit of a hack, but I don't know what you're doing here. Maybe "com.google.orgname.artifact.name".
nit: `default DocIdSetIterator iterator()` is not needed, you can remove it altogether.
The fact that `issuerConfig.usesHttpsJwk()` is not called on primary list, we should just call it `_set_usesHttpsJwk()`.
I think we should also delete this line.
I think you can just use `msg.MessageId != nil` here.
I don't think this `dispatch` shouldn't be necessary.
This should be ` Twilio.compare`
Why is this needed?
should we add the `UNSUBSCRIBE_SECRET_BASE` constant somewhere?
I'm not sure about this change. We are going to have to add the `<` field to the `<` model as the last parameter for the last parameter.
Why change this from maxSelects to 2?
Block has too many lines. [30/25]
How about using `DefaultStateValueMaxLength` instead of `DefaultStateStateState`?
This is an API break. I think it might make sense to make this `true` by default to allow the input itself.
Is it possible for this peer to be provided?
why not using the "else" for this function?
This change is not needed.
This should be done in the `else` block above.
Could you rename this to `tls_insecure`?
I would just change the name of `customcustom`
This seems like an unrelated change?
Could you add `class="isInterface"` here, to avoid confusion on how this annotation works, please?
This seems unrelated.
This CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE seems to be missing a test case?
If we have more than one event, we can have more than one event. If we do this, we shouldn't need to wait until the user is merged.
@sahbi-ktifa Can you please also do the same for `leakedInsecureKey` ?
The `done` is only used in a single place.
This will need to be set in the `else` statement.
` All()` is a snapshot in a list, the `libbeat.h` needs to be in the `libbeat.h`
Shouldn't this be `@param string $uuid`
The term should be a `project_` instead of a `VLOG()`. The `VLOG` is a boolean, so the `project_` can be removed.
Use the new Ruby 1.9 hash syntax.
I'm not sure how I feel about `Handler` here. Is it a typo?
I don't think we need to add this to this PR since it's not being used anywhere else.
I would suggest to use `str( __( 'Search Traffic Summary for X22' )` instead.
I think this can be removed
I'm not sure we should make this `Disposable`, since we don't have to do it for the other package
I think `success_https` should be the same as `tsts`, not `success_error`.
I think you can get rid of this change as it's not being used in this PR.
better to extend `loss_for_transitive` to be `loss`
this will break all tests because there's not an issue with this, so I don't see any new code in this PR.
Please remove the length, just use the length.
I'd like to see a lot of code paths with this method to avoid unnecessary complications of code duplication.
This looks like something that should be final.
This can be simplified to `Path.error("Error in preparing flow execution {}", flow.getPath());`
I think these are the same changes, and the changes in this file are only necessary if the link has changed.
I think we could have a test that checks that the preceeding index is expected and the utterance from the DB.
Also change the order here.
This could be `bool` if you wanted.
I would add ` disable= arguments-renamed` to the end.
Does this actually fix your bug? I think the `var` below is still necessary.
This is not a good idea, we don't need to change this any more.
You're missing a space here.
We can add a note about this in `pkg/api/extension.go` as well.
I would rather have a test function in the test file that returns 10 and pass it as an argument to `assertassert` so that the test will fail if it fails.
Can we rename this to "prefQueueSortOrder"?
How do you feel about removing `os.Args()` here?
Please remove this line
I think it is more readable to use `external_failure` rather than hard-coding in the `@Restricted(run.py)` here, since that's what we use in every other place.
Use the new Ruby 1.9 hash syntax.
I think we can move this to `_show_source_pygment` now that it's only used by `show_source_pygment`.
Is there a max subscriptions specified by zero?
This isn't right -- you're just removing it because you're not checking for any type of FPGA_INVALID_PARAM. I wouldn't expect that the code to be repeated in the future, because it was a bit more efficient than just doing a call to the FPGA_INVALID_PARAM to get all the code from a code in it. This is a problem and I don't know which one to do, so I wouldn't expect this is the right place to change.
I'm not sure if this is the right thing to do, but it seems like we're just using the `cart` to determine whether or not this is the right place to put this check. I don't see any benefit to change the `cart` to `string` if there's an `id` or `string` or not.
This is a bit odd - we are calling the Ready twice here, so that we are calling a constant somewhere. If we want to get the Ready twice the whole function could be helpful, and maybe maybe just make the whole function return an int.
How about using `2.18.0`?
Since we are using this name, can we name it at the top of the file? I think that would be a bit more future proof and would be easier to follow
Do we want to use the `@world.fail_if_no_examples` constant here, since it was done in `example_groups` and now that we're in the other places?
I would suggest to use a variable name for this, e.g. "Cleaning references"
nit, we should be using `globalVirtualMAC` instead of `globalVirtualMAC`, because it is a subclass of `load()`
I'd prefer to have this flag a lot more meaningful. The `exclude-too-few-public-methods` flag is a bit confusing to me (and I'd expect it to be used as an option to be the names of the name rather than the names) but this is not a huge deal. I would recommend adding it to the `exclude-too-few-public-methods` option to add some more to the names.
This should be `config['vm_name'] = utilities.format_instance_name(instance['name'], None)`
The other way around it is to wait for a better console to run this. We're trying to move away from this console to the service.
What's the purpose of these changes?
shouldn't it be: "Namespace|ELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELEL Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use Use
`metric variable must not be null`
Why the double underscore?
Please use an overload instead of an `count`
Line is too long. [91/80]
I'd like to see the same pattern as before: `shouldRepeat = UserPreferences.getShouldRepeatEpisode();`
mholt imports go away
This is a bit of a hack, but I'm not sure it's actually necessary to test for the `extensions` case. I think the first condition would be a bit more efficient.
This is wrong. The variable is `-db`. This is a very specific thing to do (it's the same thing as the others), and we could just use the value of the default.
We should make the `Http2ExperimentSwitch` public in the `AppContext` class.
I think this should be `MIN_data` not `MIN_value`.
why change this?
This error isn't really correct.
This is now done inside of `DefaultAutoAutoRunner`, so I don't have a strong opinion about this, and it makes more sense to remove it.
Why do you need to add this to `onWriteStalledCh, writeUnstallCh, ctxStall`?
Can we keep this as `--no-cache-tests`?
I don't think the `skip |= LogError` is needed here.
I don't think this is right, you should add `.to_s` as an argument to `COALESCE`.
I would move this to the `systemdsystemgeneratordir` function.
I wonder how this should be in C++11... Would it be possible for this to be a list of 2-bit commands that were passed in?
Shouldn't this have the same result as the one above?
Could we use " startTs" instead of "startTs" as this is already done in the startTs object?
I don't think you need to do this. The `width` variable is always a width.
@agaspardcilia can you confirm that `...template_export?` is an unused variable? Is there any reason why it's been there in the first place?
I think this will not work. The goal of this is to get a lot of memory, and the default is not set, so the new code will not work.
Why is this needed?
I would prefer to have this be a separate migration since it's a little inconsistent and not a big deal, but just wanted to make sure I'm not mistaken.
This should be `contour =APIours([0, 1, 0, 0], [3, 4, 8, 5, 0.5), (0.5, 0.5, 0.5),`
This was a bug I found in the previous commit.
Does the `.use_channel` require this change? If not, why not move this up to `.use_channel`?
I'm a bit surprised this isn't needed.
This is not the actual way to do this. This PR is not doing anything useful, but is not.
I'm assuming you've made this change in this PR.
This line is a little too long
Is there a reason to use a file_exists here rather than on a directory which is not in use?
This would probably just be removed.
better to be using pretty_list in the name of this method?
It seems a bit unfortunate that this could be a `/opt/code/localstack/` directory. Should we just always do that check in `prod/code/localstack`?
`is_being_called` -> `is_being_called_id`?
I don't understand this change: `@group_level = 0` I don't get the reasoning. `group_level` was a valid value and it wasn't being set, but the value was `None`.
This is an example of a situation where it could be used and we should be able to fix it in a future PR
I am not sure if this will break anything. I think that we should not be using `get_notebook_data` here.
You could add `processor_chain` and `search_builder_class` to the docstring, to be consistent with the `monitor` key
I would not set this to 10.10 since this is a test failure, and the test is still running in 10.10. We can just set default to 10.10.
I think this might be too much for a user to see.
You don't need to copy this line. The project.getProjectDir().getName(path) is always a directory. That's why we use that directory, so it is not a valid directory
Can we just do `||` instead of checking if the result is `true`?
This can just be imported if not imported.
I believe we should probably add an `else` here to prevent the `catch` from being executed.
Should be "empty"
why do we need to add the `class` prefix here?
@andyzhangx this should also be `enableAdminApi`
can you import sleep from env first, so that it's not a big deal, or at least the line below?
This is a little confusing. If we set the DyingAndDoneExportDoneExportDone, how is this the latest version? Is it worth having one call to get the latest version? If we do, how do we set the DyingAndDoneExportDone?
Please add the "u2" prefix to `u2` and `u2122`.
you can also use a single string to get the `auto result_1` and then you can do it in the `auto result_1`
I think the message should be "===============", not "===============".
This test was using the `_up` parameter.
why remove this
(style) line over 80 characters
Please revert unrelated changes.
can we change the type of `ReconcileHiveConfig` to `ReconcileHiveConfig`?
I'd move this to the top, as I don't know if there is any other way around, but this is the one we want.
I think we should move this to `chai/../../tools/`
What is the use of the original code for adding the new version?
The `o.sseq` is not used here.
Can you update `C:\liesUtils` to include `C:\liesUtils`?
It seems like this logic should be moved into the if-condition above.
I think `status: 'actionable').first.user.email_address` can be a string.
This should probably be `def _assert_result`?
Should we have an enum for the same name as the other one?
We shouldn't log if an error happens. The environment variable is defined in the test suite. The log message should be `"."`
(style) trailing whitespace
Since this is a `Filed`, we need a `Failed` prefix as well. I'd suggest to move `Failed` as a try/finally of `Read`.
I think the `sequence.DEFAULT_LOCKTIME_SEQNUMBER` should be removed here since we are already setting the value.
This should not be in `InvalidDataFormatError`, since we only use data_format for errors where it is used for errors where data_format is not valid.
`JaxiveFactory.toString(...)` is a bit weird. I would use a `get` method that returns a boolean and then call that from the `JaxiveFactory.toString(...)`
why are these changed?
This is the only change that affects the value from `CreatePriceOracle` to `CreateAppApp`. I think we can keep `CreateOracle`.
I'd prefer we use relative imports for imports instead of relative imports (which is not really needed)
I think we should remove the check in `isNonLER()`
@michael0zy do we know that this is a "pick" ?
Should we add a `||` check here for `configParams`?
Does this need to be `bool`? It looks a bit redundant
This should be `warnings.warn`
Please remove redundant `SetId`
This is not a good example. It's not clear why the code was here and I would expect it to be used in a separate file but the other way around is to remove it, and add a `six` to the `GoogleComponents` file.
@adamjstewart Is it okay for this to be `ifdef X86`?
Can we use `key[]?!` to be more accurate here?
We don't want to use `is` here, so `finalize_hooks` can be accessed via plot.handles.""" (since it is not possible for the column).
We need to do this check in `playingBackGroundColor`, to reduce nesting, to avoid duplicating code.
Whoops, missing a comma after the last item of an columns.
Please add a `//` or even `__format` here to show what the input argument is and why.
This is already part of the API, I think we should just make this method `getUsed(Name, suffix)`
I'm assuming this is a bug in the code?
We should make sure that all the other commands take a `DEBUG_text` that we do is use in python 2.7 (I think we should be able to remove `DEBUG_text`). If we do this in the future, we should add the `DEBUG` to the `try` block to avoid this redundant warning.
`keys` seems to be a bug fix, can we not just write `val1.keys !== undefined` ?
remove this file
`.alias` doesn't do this for the `.mean` case, but you're missing a `.mean` here
`assert` is a better name?
I think we should also change the name of the EffectiveAddr to "EffectiveAddr" and not change the EffectiveAddr.
The rank of the context is "selectCastSink"
I would move this import to the top of the file.
Can't we remove the `ContainerInterface` class entirely?
I think we could have this constant in the `ACEStateDescriptor` method and reuse that method in `ACEStateDescriptor`. I'm not a fan of this, but I'm not a fan of having a single `StateDescriptor` that is a single method that can be used here.
I think this should be `.find_attribute(None)` instead.
This can be simplified to `this.db.loadExtension(path, (error) => {...}` instead.
Use a guard clause instead of wrapping the code inside a conditional expression.
Can we just return nullptr?
Why do you change the field name?
This one is a bit odd - if `<br>` is not a string, we can use a pointer instead.
is this a test that was not working before?
Shouldn't this be `PhysicalLocation`
I'm not sure about this. If I read this correctly the `eps` was used in some cases, it's probably not necessary to change it.
This is an actual bug that is being skipped in the loop. The problem is that this is not a loop anymore, right? If it is a loop, we might as well get a warning message and use that to be returned.
hmm, this is a little weird, why do we have this in `current_user`?
This should be `getState` to match the other methods in this class.
This needs to be a valid name, not a valid-mail object.
nit: this can be replaced with `jetpack.ext.role.env`
I wonder if we should just delete the `constructor` call?
I think it's good for testing.
Is there a specific reason why we wouldn't want to include the sort in this context here?
I think this will break all modules, and should be removed.
Can't we simply return `List<Func<Span, bool>` instead (as well as `List<Transform<Span>>`)? That would mean that we don't need a new type of `List<Func<Span, bool>` for the default value.
Maybe we should rename it to `Running` to make it clear it's not intuitive in the future?
Nit: The original link is still valid, not entirely sure what the best practices is for it
Line is too long. [95/80]
Please remove this empty line.
What is the reason for this?
can we change the test name to reflect the new behavior in `_create_permissions_can_be_added_on_collections`
Why not just removing the arugments?
I would use a constant here, not a pointer.
Can you also update the `.toLowerCase()` method to reflect the new `searchTerm` annotations?
(style) externs should be avoided in .c files
Why change the variable name to `WARNING`?
"subov" -> "subov" ?
I'm not sure about the `params` here.
I wouldn't expect this to be in the test as a result of the `in_split_into_nhot` call, but I wouldn't expect it to be there, as it is a test for the result of a test.
Could you also change this to `mode. Readers`?
I think we should be calling the method `GetPause()` because it is not called in other places. The "Register" function does not return a "Register" object, so we shouldn't need to set `error()`, which is not what we do for the "configure" case.
I don't think we should be using `NextAlreadyDefined`, since this is a public API.
Why is this changed?
Can't you just import the path from the package.utils instead?
I don't think we want this here. The code will be more readable and we should be able to make sure we don't get a message.
Was this not doing anything useful now?
I am wondering if we should make ` may want to have an `InvalidHelper` for this case (i.e. `statsd.Verify`), or just have that be called `InvalidHelper` (e.g., `statsd.Verify`).
hmmm... so here we know that the order is different from the old data?
@jackfrancis should the `linux.info` method be moved to `Create`? (same for other places)
you can use `find_by_sql` to get the `sql` element.
Should probably be `addpid` here, since we only use it in the other places.
The `null` should be wrapped in `final` instead.
why was this removed?
I'd prefer not to use the constant here.
why are we using C++11?
Why is this a pointer now? It should be `OptionalOrElseMethodInvocation` and `PreferSafeSpec`?
The `FileData` parameter is unused now.
This can be combined with the other changes in this file.
This needs to be done in a separate PR.
can we pass the md ID here, so it can't be set by the head.getCreateCreateServer(). It's also not the actual policy (in the case of the head, it should be the actual port).
nit: not a requirement.
I am not sure about this change...
This is a bit confusing, since the ReadStop is in-active. Is it a good idea to allow for a read-only value in the `_Dispose`? I think that's a little confusing.
It would be nice if there was a good reason for not to create a local repo, rather than have it be done in a later patch.
It's better for us to move this to the `vol`, since the name of the module is too much.
I would not do that, but I think this is an interesting test that doesn't work.
This test is failing because it was not working before. I would expect a `default!` to get called and a `not_to raise_error` call before it starts. I'm not seeing any issue in that particular test and didn't catch it.
Can we add the check here as well?
`Attributes` sounds a little bit too vague. Maybe `Attributes` or `arguments-out-of-order` would be more appropriate here?
`SnackBarHandler.show` is the same as `baseackbar`
I'm curious why you needed `host.has(host.size() - 3)` here and everywhere else. I'm not sure what you have changed here.
Can you make sure this is not only needed if you have a new amp-animation in the `@example` tag?
We could probably move this logic into `if packageName == "" && packageName == nil` block.
This needs to be added to `pkg/apis/meta/v1` since `apimachinery` is not being used anywhere else.
Please use a single model here instead of the count count.
I don't understand what this is
You can use `[E]`, not `[E]` here.
This doesn't really belong here, but I don't think it's necessary to change it for now.
I would call this something like `get_dependent_headers_debug`, and maybe just `return dependencies`. That way you don't have to do `LOG.debug(...)`
I'm not sure if this will work for other commands. I think this is a good candidate for a long time to run on a long time ago
I'm not sure if this should be `Accountable NULL_ACCOUNTABLE = () -> 0`
I'm pretty sure this can't be `func svcOutputDebugString(str, u32, size uint64) uint64`
This is not needed anymore.
you can use `%(` rather than `%(`
Can we make these magic numbers and use them here? Otherwise, we will have to cast them to a constant.
@jona-sassenhen I think you can get rid of `UNIQUE_VIOLATION` here. The same goes for `blah`, `blah` and `blah` in both cases.
This should be changed to use `TEST_BAD_ANC`.
Can we just have this take the name of the variable?
I would use an empty list here instead of an empty.
please add the default, it should be `is_visible`.
Are the changes here intentional? The new `tenacity` argument is only used by the `ManagerImpl`, and it is now only supported by other Python3. Can we remove it?
why this change? It's not necessary
`encClientSecret` can be null here
I'm not sure what the best way to do this is. If the selection selection is still the getProfiles, then we need to pass an instance of getProfiles, then the `setPropertyID` of the `dispatch` to the `PropertyID` will be set to `0`. I'm not 100% sure if the current logic is better in this case.
I'm curious why this was changed?
What do you think about `.id` and the `.must_render_template`? This way we can do the test for the next time we create a new `must_respond_with` method and then use the test for the `must_render_template` method in `must_render_must_topic`.
Why is this needed?
Can we rename this to `cart_notification_email` and add a new method for `unicartMailer` ?
Please don't use wildcard import.
nit: could you move this to a `const afterChange = jasmine.createSpy();` block?
I would remove this line. We don't need this anymore.
Maybe use nbits instead?
I don't like this change. The `unit-generated` is indeed used by the `tx_begin_read` function. Can it be made a separate function in the `unit-generated` module?
This should be a submit{}.
This should be a public static class, not just the class.
I think the `ALL_FEATURES` should be moved inside `LICENSEABLE_FEATURES`.
This file should probably be imported at the top of the file.
This needs to be moved to `tests/v1` as well.
Why are you setting this to `TARGET_NAMESPACE`?
Why did this get removed?
`messageConfigs` is a method named `DiscoGapicMethodConfig`, so the default name `messageConfigs` is not the name.
I'm not sure that this is the right fix. I'm going to change the space to space in the next line.
I don't think this is a good idea since we have a regex for the default. We should probably be consistent and just set the default to the default `packages` model and set the default to `true`.
This change is no longer needed, as `options` is already in `accConnsEventSubjOld`
Why not just use `config.config` here and above?
You can use `NANopsys` here to get the class `NANops`
This should be `is_merge_or_booted` I think.
We should avoid this. We should either have to do the same in `pushNode.attr`.
Hmmm, this class was deprecated. I was not able to go to the old `BftTransactions` class and I was getting a bit surprised by the new class.
I think you can remove the `unless` operator here as well.
There's an error here in `_load_annotations()` that will throw an error if `self.load_end(self.data_path)` returns `0.3.16` if it returns `1.8.16`, then it's not the case anymore.
why is this changed?
This is a little odd. Can't we just always return false for the validators? If that isn't, then we can just return false.
Is this not used anymore?
Could you add a docstring explaining this change?
`protected Scorable leaf collector` -> `protected Scorable scorer` ?
@chamikaramj Should the 1.0 / 1000 be the only thing we need to do here? I'm not sure how I feel about this.
You can't do that by default, this way you can't do this. You can do that by passing `None` instead to the `:class_name` in `tearlin` which you're using
This looks like it could be a separate commit.
This was the bug. The uuid is not being used anywhere anymore.
I think that this is a bug, we should just make a default `true` to make sure `--PrivilegedCapable` is always true
@saghul, this was not doing anything before?
This is not right, you need `*`.
I think you want to remove this
This should be a constant.
should we add serviceAccountName through all of these fields as well?
should this be a `Number`?
I'm not sure how I feel about this `if` - `result.local` will not be used anywhere else - `result.local` can be used for the local key in that case - `result.local` can also be used for the `<no>` too.
I think you can remove this line.
Please add a blank line between the #ifdef and the #else in the #else below.
This import is now unused.
How does the dashboard path come from? Should we allow the Service to be a practice?
These values were changed to DatabaseKey, not Databasename
(style) line over 80 characters
I think it would make more sense to add a `get_lambda_name_from_arn` function to `arn.py` and `attributes.pop` methods that call `clean_arn_attributes` and `clean_arn_attributes` in the config file. That would make this more robust and easier to read if you could do this.
Should be a pointer here
Is this the right place to put this check? If I'm understanding this right, then I'd suggest checking it in the `if resp == nil {` block above and return here.
I would prefer a `include_*`. It will make it easier to read and understand what the behavior is if it fails.
I think we should rename this to something more meaningful, because otherwise it will be easier to read when the user doesn't use the state and it can be improved.
Doesn't this need to be `const` for the key type?
Huh? This change isn't really relevant, but isn't this supposed to be an enum type?
Why do we need this change?
Can we use a `resource.Executions` here instead of a `resource.ClassifyActions`?
How does it test only support 1?
why are these being removed? I don't see why it has it.
Can we remove the `appendInterface`? It is used only once in `appendInterface`.
I don't think this line has any realiculticult since we're testing the original version of the test.
This is not used anymore.
Could we just use the var name here?
Is this still a typo?
shouldn't this be the same as in `Builder`?
@jcotela What do u think of this? I don't see where you add it
I don't know if it's a good idea to remove this check.
This is a breaking change. You might as well make this a global flag.
Missing comma after addTabIcons
Can you put this method in function instead?
Why this file is public? We don't have the same type as the one above.
Does this mean that when `stackFrame.GetMethod() != null` it will throw `?`?
Why are we removing the `_up"></i` clause here?
Can you add a `TODO` to remove the need for this to be a valid value?
why not use a different helper?
@smarterclayton I think you should check if these are actually set by the user in the database, but if they want to check for the other things, I think we should do that in the user and do a `Time.info()`
Align the parameters of a method call if they span more than one line.
I don't think this file is needed.
Shouldn't the type include `use` as well?
shouldn't we use `.format` here too?
This is not necessary if the default config does not exist
Why not just define this `module_class`? Then we don't need to pass in the constructor for `type`, because it's the constructor and the final result.
If the order is empty, we should probably also make a copy and paste from the test in `deleteUserService`
I don't think we need this function anymore. We don't do anything with it yet (I think we can do that).
I am wondering if this is needed for the users to set this in the `Licenses` environment as well, since it doesn't exist yet in the database yet
Please revert changes to the reviewer.
Would it be a good idea to add a new assertion for this call to test the case where the new field is actually empty?
This is a no-op change, and I'm not sure it is a good idea to put it back.
I'm not sure this is the right way to go. I don't think it matters for the second half of a file, but it seems to me that there are no requests in `quteproc` (and there are some places in this file). I'd rather not use `q.send_cmd` here. I'm not 100% sure that this is a valid option.
Can this have a name like "openvenvenvenv"?
Why is this removed?
`s/s/s/s/with-if/`
This needs to be `go get -u github.com/xeipuuv/gojsonschema`.
this could be simplified by using the `return`, otherwise we will not need the leading
This check is duplicated code.
@michaelkuhn would you mind adding the same newline?
We should only be using `create` if the account account is available.
I'm wondering why the intent of this code is here?
@ktrzcinx Why do we need to check Program Files here?
We should add this to the `menu` key in the `except` section so that it is consistent with the rest of the codebase.
Wouldn't it be better to use the metricReaderOptions directly here?
@alopresto this should be added in a separate PR.
I think you should remove the extra lines in this file and move the else below it so that you can use the standard pattern for the other one
@smarterclayton now that we have the method config for method name, so I think we could change the method name of this method. It is still possible that the method name is not in the method name.
I'd probably be happier if this fails at least, but I would think it is worth having the logging statement in debug level.
I think it's better to remove this once the user is running
I'd suggest removing the `legacyProto` import from the name of the test.
We already have `helper ButtonHelper` so I would add this to the `helper_reader` method below.
I think this needs a unit test where the capacity is not in the db
Didn't you mean `const` here?
This should be done in the try..catch block as well
This makes it impossible to get rid of the `bundle.containsKey` check.
This should be put in the base class.
what's the use case for `String` here?
I am curious: is the use of `self.baseNVDACommandline` to be a f-strings?
ThisThis is a breaking change. This is now done by the `unused` check.
@deads2k any reason to store this in the ECSIPAMPluginName class? I don't think this is the right place to change it.
This function is no longer needed?
`-E` is a better name
Remove this newline?
"Parsing passed IP" or "Parsing passed IP"
Shouldn't this be renamed to the other `Copy` method?
I think we should remove the `fields.json` here as well.
Use the new Ruby 1.9 hash syntax.
this will not be needed anymore
This is not just a function, it should be "reduce"
I think the message here should be more clear about the port being loaded.
Please remove the `#include` here and add the extra `#include` below.
This file should be removed
I think you should add this to the `as_value()` function as it is a bit of an unusual way to make it a `@Request`.
Could add a space before the brackets
should be `Exception`
`parentDom.lastChild` is always non-null, so we should just always use it.
this is probably too expensive for all users, can we move it to the `try` block?
Should be `json:"encryption"`?
What are the defaults for these changes?
Line longer than 80 columns
Since this creates a `clustering` component, I'm wondering if it would make sense to add a `task::clustering` component to `const descriptor_base<task::clustering>`. It's easier to see what the `clustering` component would be.
Technically, this doesn't need to be changed.
This test doesn't seem related to this patch, but it seems to me it should be using a different layouts, and not an internal class?
I think the code is not in the description of this property.
for each item, it would be a little clearer to have `parallel_scheduling_processes` default to True and then use that value. <msg> it is a bit of a nit, but I think we should change the default for `parallel_scheduling_processes` to `parallel_scheduling`. I also think that's how the `default=False` is for the `parallel_scheduling_processes`.
This could use just `service_suppress_dto` (and maybe maybe it's better to use `github.com/mysterium/node/identity`) to be more specific.
The key_string here is not the key_string.
Remove extra newline
This is a small change from a API that has been removed. Can we make it a little shorter and use it in the code?
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
This doesn't need to be updated.
Unnecessary spacing detected.<br>Put one space between the method name and the first argument.
you can use `ClassUtils.isNotEmpty`
This is the one place where we have an `NLA_HDRLEN` flag?
Can we use a mock here?
I don't think this is necessary. `create_level` will only be called once per user, and the user can call `set` and not here.
Please add `.or modify` to all caps and add `/or modify` to the end.
This is not right. It will apply to all of the `mysqld` classes, which will also apply to all the `mysqld.sock >& /dev/null` attributes.
Rails/InverseOf: Specify an :inverse_of option.
Can we use `destroydestroy_tunnel` here instead, or is there any reason to not use it?
Is it not possible to use `ntype:bool` instead of `ntype:string`? It doesn't look like it will be a `nt` part of the message.
This is just a small change in behavior. It looks like the fix here is to remove the comma from the last line of the `if` statement above.
Why is this deleted?
Shouldn't it be `new MMFFAromCollection(nullptr)` ?
Why do we need this check at all?
@Scottmitch do we need to add this to the "API" PR ?
We should be able to use `test-google.example.myproto.v2` here instead of `google.example.myproto.v1`.
Can we use String.format here?
@benzonico I guess it should be here?
this is not needed if 0.5 is already the default, but the value is set to `0.25` so you can just remove this. This breaks the value in the first place.
This is not a valid type of type `Type\Union`, right?
Please keep the use of `$item->getProduct()` and `$item->getQuantity()` methods.
this is unused, right?
This is an example of why we use `test_name` instead of `test_test` to keep the name consistent across all variations and have to do the following. I think this is the only place it's needed for the test, and this is a good place to put the code to make sure there is a way to test it and we're not testing what it's needed.
hmm, does this mean that the torch.zeros_like can be removed?
I think we should add `value` to the interface to make it work.
Why remove this?
Can we remove this line?
This was just a typo and should be fine.
Is this hook hooked up in the middle of a change to `id`?
this is the main change, we have the tr_mul value in all cases.
Does this need to be `false`?
@jakexksks are you sure we need to add this to the `Cache.new` namespace?
This is the only time that could be called from `AppAlgorithmFactory`, but it's a bit confusing... Maybe `AppAlgorithmFactory` is better? It's not a big deal.
What is this for?
Should this return `null`?
This can be removed now, since this will break some existing users.
Should we add an import here to the group of the package?
How is this related to this PR?
This is actually not a good idea, as it should be set to the empty string.
I'm not sure about this. Why is it not public/non-tailRoot?
Is this still needed?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
We should not be using the error message anymore
This is not the right fix, but it was added to ensure that `LogManager` is not `true` in the first place.
I think this should be removed?
What is the purpose of this line?
is the ] required?
The `//` should just be deleted, since it's now the only one that's being used for the test.
This should not be part of the API, as this class is only used once.
can we make it available in both `<custom-elements-es5-adapter.js` and `<custom-elements-es5-adapter.js` ?
HammingWindowFunction does not have to do anything here.
This change is not necessary. It's an existing test function and it was already in the previous commit.
I think you can remove this `r` now.
This is an interesting one. We should be able to remove it.
"line to parser"
Was this a bug? `value.string_value }}` does not exist in the code, and `value.string_value }}` does. `value.string_value }}` is not the same as the data, so `value.string_value }}` is the same as the data.
Should this have a `elastic.SetSniff(false)` in the test function that checks the content and returns an error?
@mraible is there a case where there is already snapshot that was "" and there was no snapshot cause that was not working before?
Do you think that this is correct?
I'd rather have `default` return a `default` (and then just `return` here) rather than having the default `default` return a `close()` and then we don't have to close the `close` on the `default` case.
Shouldn't this be in a `setEPINTENCLR` instead? Seems like it is not used outside of the `if` block?
I would prefer to have `attr_value['string']` be a string here.
You could just remove the `MetricReader.CollectMetric` variable from the constructor.
Why not use a `// Try shutting down gracefully`?
This should be `IHttpClientFactoryExporterOptions` to prevent `IHttpClientFactoryExporter`.
Is it possible to add a `common.common` tag for the `Env` ?
These changes seem unrelated to the PR.
Maybe this is not needed anymore?
Is `QFileSystemWatcher` necessary? We already have `/QFileSystemWatcher.py` in this file.
What is this? Why are we only setting `wp_register_script` once when we have multiple threads?
Should it be attribute_changed??
this should be a `TryTemplateSelector.GetItemLayoutId` not an `tra` here
This should probably be a classmethod, not just a class instance.
I'd suggest adding a more meaningful name, "IPIPPacketsFromWorkloads" to the top of the component and then using it.
Why is this not part of the designer. I'm not sure if it's worth changing it.
This is the only one where I need a single function to get the same image from the CSP image.
This should be `super` if it can't be a hash.
This is an API change and so it makes sense to add an extra `array()` method to this class.
why is this needed?
I'd like to get these in the `dvc_}-}-` file if you don't want to run this code in your test file.
Why do you need it here?
I'm wondering whether this should also handle session.TranscodingInfo.IsVideoDirect, which is not what we want.I know, it's the only case where the session.TranscodingInfo.IsAudioDirect is the default, so it's the default of session.TranscodingInfo.IsVideoDirect. Do we need this check?
This could potentially cause a problem if a `-iid` is `a4a` or `a4a` but the `a44a` does not have multiple FILEs
I don't know what it actually mean, but it is probably better to have a test case for that.
I think this is the wrong solution.
I think this could be a bit more specific with the problem, maybe we could move this into a helper method? If so, we could just use the static helper method to avoid the try catch and try try catch in the block block block in order to avoid this problem in order to avoid this problem
please revert this change.
do we need a new `signer` tag here?
This is not needed anymore.
This will need to be a `data-` (as it is used below)
I don't think the type of function is needed
It seems like we don't really need a new option for `when_searching` anymore?
What about making this an unwind constant instead?
I think it is not a good idea to expose this interface as a separate interface, since it will break existing users of the same `HttpHeadersHandler` interface.
This is the only change that affects the tests. I think this should be `[NotNull]` instead of `OutOut`
@wido This was causing the tests to fail. This was just a thought I hadn't noticed. This was a bug in the code that was not able to see the "sm2" in `pkg/api/server/client.go` and I didn't see a reason to do it in my tests
I don't understand this change. Why did you remove this?
This was a bug in the first place. The only place it is used is in the code base but I think this is the correct way to check.
Why the the 4adc7f4f?
The `if` here should be removed because `pnInterface` is already null.
I'm not sure if this is the best place to put it. The idea here is that the `adt_spec` should be `None` instead of `adt_spec.EmptyValue` (or the same for `ctx.allowSideEffects`)
Don't you mean for this?
Should be in the changelog. It is a bit odd for me to have the same `T.Helper()` method on line 675.
@drcrallen is there a way to specify a `time.Now` that will be used by some of the new values?
Is it not used anymore?
Can you remove this extra space?
This seems to be an unrelated change?
This line is unnecessary now that `--no-show` flag is run on a previous machine.
Is there a reason for this variable to be set on judgement?
Since this is a static instance of the mailPort object, it should be a static instance.
@tgamblin I don't think we need to add `python-daemon<3.0` for the dependency `python-daemon<2.0` to the install folder.
This is the wrong place for this.
If we're not relying on this variable, we could just use `bool` instead of a hard-coded string. It might be worth checking if the type was already in place for that.
If you do this then you should remove the `NumServices` line, and remove the `pid_NAME` above and below.
@smarterclayton do we need to also check the other tests?
I would move this to the `form` method and use it in the `form.html` file.
Can't you use an `clean` here, since the `run` method has the go-value extension?
why is this removed?
I think we need to ensure the method is only called by the `active` model and not the `@deactivated_on`.
Can you try to add `required: true` to `tags:start` as well?
Why is this necessary?
why are you removing this?
This function is used in `LoadStateTree` now but it is used in the `chainStore` and `GetTipSetAndState` method. It is also used in the `Read` function, so I think it is better to be consistent.
This is just a small thing. I would have thought we'd be able to get rid of the `typeof(int))` field and have it use the `typeof(IntClass)` attribute instead of using it.
I think this was a typo.
this will be `writeTransaction` right? why do we need `wallet_store::base::transaction` ?
@stevegsa do you think this should be called axe.utils.getNodeFromTree(el); ?
This can be a static final.
why did you change this? this seems not needed
Can you please move the default value to after line 162?
nit: this looks wrong to me, the imports are not needed.
why use wlr_drm_interface iface_legacy instead of wlr_drm_drm_interface iface_atomic?
Shouldn't be >= and >= here as well as the check above.
why did you remove these lines?
The `Test_FailOver` calls are now unused, so I removed it.
I don't see any tests for this use case.
This can be replaced by `!mol.getPropIfPresent(key, res)`
Please remove these lines.
This is a bit weird: the name isn't very descriptive (and the one above), but it's not clear what "public" is here, it's not. I think it's better to be consistent with the name `setContainsComment()` method.
I think this is missing a `default` error
I would prefer to see the metricNamespace here, rather than passing it in.
This will not work for anyone who has been able to use this feature. We can't do a similar thing for the `configs` method, so we can remove the property and use `nextPageTokenName` directly.
I think we should be able to use a constant here.
I'm wondering if this is a good change. But I'm not 100% sure if the code is correct. It is not possible to have a function called the "unlinked_tgt" (or something similar) when you're doing the same.
Why is this required?
I think we should be able to use `userDomainPrefix` instead of `USER_DOMAIN` (since it's not the case where we want a user-defined string).
This doesn't appear to be a test case as `querySelectorAll` will return true.
Line is too long. [82/80]
Another option is to use ` 50` instead of `==` to reduce nesting.
I'm not a big fan of this style, I think it should be renamed to something else.
I think it would be clearer if we add this method to the `COUNTER` field of the `private` field.
I think it's fine to use the same value here as in the other files, as it's not used anymore, as there is no guarantee that ` fieldValue` is `0.x`.
We need to make sure that it's not default in the validator but not default in the default validator
This should be changed to `'1'}` as it's not used.
I think we can remove `dashboard`, `enabled` and just use `pageDashboard` directly, because we're trying to get rid of `pageDashboard`.
This is the only change required - is this a file or is it just for debugging?
If I understand correctly, this method is going to be called once per account, which is why the account isn't set to true. It seems to be the same as the account, but I think it's better to make the account a bit more specific.
It seems we don't want to use the new `type` on the next line (I think it makes more sense for this to be an empty struct). Is there a specific reason why we're not using `type` directly here?
I'm wondering if we should keep the correct way around for the `select` case, to avoid having a copy of the dataItem. That way the code won't be able to get the correct dataItem.
What do you think about adding a new param to `TxPool.Finish` to avoid having to pass it through to `TxPool.New()`?
I think you're actually using this for debugging.
There are more similar places in the codebase where it should be moved to where it was used?
I don't know that it matters, but I'd suggest to use `comms`.
I'd rather have an explicit check that the path is not found in the first place
remove this line
This is probably a good place to put this into a new PR. I can revert this as a separate PR.
I don't see where `SetInMemoryNumber()` is called, it is called.
please add assert**or**or**or**
Please revert this, it is not compatible with the version number.
I think the old name was misleading.
I'm not sure why this is `List`
I'm not sure if `io.junit.jUnitDependencies` is the right way for us to check this. I'm not sure it makes sense to check the `jUnitDependencies` as it is, but it's not really the case anymore.
Isn't this change necessary?
why would it not be here?
I would not add the `crypto.Signature` here, it would be better to add it in the `Signature` module
I'm pretty sure this will break the change. If you do, you can just do `return perr := ...` here.
should we do this in an else clause?
The test is still a bad idea, but this should be a different thread.
you should probably change the default value for this argument to False. It's not the case, but it's a little strange that `create_no_window` is always the default, so I think we should just change the default value from `true` if `create_no_window` is not provided.
can you make sure this is only ever used for requester?)
I think we should add some details to the error message.
Is it worth it to avoid calling `GetTopLevelCondition()` twice in the `else` case?
If we're going to use `memory.Allocator` here, we should also have `execute.AccountCache` as `memory.Inignore`.
Why not use `_path` instead of `countQuery` directly?
(style) line over 80 characters
@benhalpern I've added `.count == 0` to `def empty?`.
this should not be a warning. This should be handled automatically by the settings file, not in settings. This should not be a part of your PR.
there is a `patch` param in here that should be `patch:reset`.
This should go after `src/core/src/core/util`, right?
This is the fix. This will cause problem when we run a single thread in a large large large large large large large large large large large large large.
I think you should remove this line, it's not used anywhere
Why not use the volume names directly in the function `klog.V(2).Infof("uses cstorvolume policy for volume configuration")` instead?
I think you can delete this function and replace all `o outbound` variables with `return`
lets move to `pkg/apis/utils/`
Never use `assert.Panics(Config)` as the `nil` check can be removed.
Should we make these methods optional? I would think that we should just do `newSlice = (newSlice, e.g. `"""`
I'd prefer to see a `str` method here.
I wouldn't expect a default value to be the default here, as it's a default? I'm not sure what is going on here, but if the default is a default, it should be the default. I think that is ok, but I'm ok with this.
This should be called `org.infinispan.util.ota.api.Series.Os.org.infinispan.util.ota.cloud.cloud.cloud.TOOLTestCase` I would expect it to be called for every invocation, which is a bit weird. <msg> This is the only place I'm missing.
I think we should be using a TODO here, because this is a TODO.
I don't think we should start with these messages. We're using it in the same folder. It's probably better to use a `root_record_type` function instead.
I think it should be `toList().zipWith((mapper, "mapper is null)`
why did you change this?
I would prefer a separate patch here. We don't want to have a test that sets this anyway, and we will have to fix it.
I don't think we want this change
this will need to be grouped with the other stdlib imports
Why not just delete the call to `_useNonZeroGasPrice`?
I guess I'm not a big fan of this. If it's only used for a few bytes, it should be in `pkg/Stop/constants` or `pkg/Stop.constants`.
I'm not sure about the change here - but it seems that the `VPNConfig` doesn't have a partial that has a different name. I think it's a good practice to name this function, because we're just keeping it as `user` and `user` would be `VPNConfig`.
I think we should use `@Test` here, as in the line above it would fail (and maybe even more)
Is it expected?
I think this should be `trapped %q`.
Shouldn't it be a pointer?
it is not necessary to compute machine sets, right?
This is not the mouse settings. This is a boolean.
I think it might make sense to also make the constructor a bit more descriptive of what this is and what you are doing.
I would have expected to check for bondsToCut as well.
This isn't a good name, but it might just be confusing to have a `chartType` attribute as a type of some sort.
Should not be part of your PR.
This seems a little unrelated... but I'm wondering if we can just have `const expect = name('chai')` or something like that.
This should be `if a.zoneID == &zoneID`, otherwise it will crash.
This is an interesting change that will break someone from using image as an image image. I would suggest you update the test as well.
I think this may have some side effect, as long as the default value is `0`, but the `core` value is `True`. We'll need to make sure that all commands use this attribute are equal to `int`.
Is there any way that this test is only implemented in the tests?
Same thing here, let's just call ` lock` instead of `lock`.
I think the other `switch` should be the last `if`
I'd call this `reader` or some other `builder`, `reader`, etc. to have the same `reader.get()` function.
This will need `<p>` since `coupon_id` is the only one that's the path we need to do here.
Please rename `public` to `public`.
This is the only change I see. The `_log` above seems a little out of place for a log. I would suggest to remove the log-specific log-based `LogError` as it is already done in the `Error`.
Please use the global parameters `bv` for this.
Can you please add a TODO here to remove the code?
can we add a default setting for this?
The worker_start_time_option does not support the current time. I don't see the time being set to expire at some time.
Should this be a `Notwrap` instead? I think it would be a good idea to have a function that does this.
I don't see how this is used, it seems to only be used in the import order for `kubeedge.pkg/common/log`.
You should set `HOUSE_zfs_BY_ACCOUNT` to true, otherwise it will not be used.
Is there a reason to remove the `ClassificationBundle\Model\ContextInterface` class here and not have a `ClassificationBundle\Model`.
I think we should also have <msg> use `const` to avoid unnecessary `const`s.
This was the only place where I was thinking we should keep this. This is what I'm doing when I was looking at the code where I was thinking we should throw a `List<bool>` in the `List<bool> PushItemsToFeedAsync` call and then keep it as it was. I think this might be a problem for now, but I can't recall if the issue was the issue that I've removed from it.
This change is not related to this PR, but I am curious if it's just a bug in the future?
I'd like to see this used in a separate PR, but I don't know if it's a great idea to test this :-)
Is this not needed anymore?
@simitt, I'm not sure why we need to keep track of the `_POSIX_C_SOURCE 200809L` here.
`client.getLocalPlayer()` can be null if `renderLocation` is not null, and the condition is not invoked.
Is there a reason for keeping both null and non-null value?
I think we could just remove the `if` condition altogether, and just add a `Value` as the value in `Detected-Locale` as well.
@Michaelkuhui is this change correct? It seems the `if` statement is not needed, and is already checked in the if statement above.
I'd prefer this to be `w.Flush()`. I think it's okay for now, but I don't feel strongly either way
Just wondering if we want to expose these to the `copy-groth-params.sh` file?
Why does the volume exit need to be a volume for this?
We have an `ON` flag for this. It seems to be a breaking change to add it to all other users.
We could check that report.metadata.get("analyzer", {}).get("name") == "clang-diagnostic-'" so the flag will be set to 0.1
if `min_alpha` is `None`, this may cause issues, but the `min_alpha` will always be `null` if `min_ drops` is `undefined`. Is that right?
This should be `Bytes()`
@benhalpern Do you know why this has been here and not the other tests?
Add a space after the colon.
This should be `Object`
Can we use a simple `1 << iota` here?
This is the only change that affects TF TF.
This is the same change that avoids calling the `multi` parameter.
Shouldn't we check for the classification is disabled at least? Or should it always be disabled?
convention is to use the `ChainChainFailsafeIn` and `ChainChainChainChainChainFailsafeIn` to be consistent with other things
Is this a typo?
I would prefer to see the global flag being set to true instead of global.
Isn't `Spacing` better?
can we use the min / 2 here instead of the max size?
I don't see any value in the docs or in the docs
Why is the new config needed?
nit: `config.update(options)` should be indented to reflect its usage.
shouldn't this be called `auto_fire = false`?
It's not necessary to leave this file untouched.
I don't like this method name. What's the difference between `object` and `current`?
I'd prefer to use `value` instead of `value` here.
I am not sure this is correct. It should not matter, if this happens, it should be a separate test.
These calls to `created_at DESC` are probably unused, so I removed them.
I don't think we need this here since the import is imported in `.py` file.
Please revert this and change all the imports to `Objects` to be consistent with other imports.
We can't just import persistence directly
This should probably be `return this.get('_id') === doc.get('_id');` instead.
This looks like it should be `machineset %v' produced by annotations:\nexpected: %v'`
Shouldn't this be in the process.argv.find(arg) as well? If so, could we move it in some way, or should it be in a separate PR?
@jsoriano Can you take a look? We don't have this on the previous commit.
We should be able to get rid of `WPCOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOMOM
Lets not put it in `blob.Bucket`
Nit: this can be `type='p'`
We should use `__CLASS__` for the `Effect` method in the future.
also here, we're not using the "compiler" name for the video.
This is no longer needed
@JeremyKuhne @JukkaLuartwstppr Why is this needed?
Can you make `KResource` a `Source` and make it `duckv1.KResource`, so it should not need the type conversion for that.
I'm wondering about this being `[value]`? I don't think this is a good idea.
Use the new Ruby 1.9 hash syntax.
Is there a reason we need to do this?
Why do we need both ( and ()?
I think you could also do this on `self.w3c:`.
Can we rename this to `HttpConfiguration`? It's not a big deal, but I guess it's a separate issue.
Should it be `startTime.Now()` and `endTime`?
it looks like `response.code` could potentially return an `after` if `response.code` is nil
`import json` as `@SuppressWarnings("unused")` is used only in `main`
We should probably add a TODO about that before we merge this.
I would put the full name: `missing-class-docstring.context.get-generated`, `missing-function-docstring`, `add-name-in-module`
Just a note to make sure I understand this change. Is this what we want?
Can you explain why the h2o is needed here?
Should this be `NestedField SORT_ORDER_ID`?
I would suggest to use a different name than `MakeStateDelta`.
This class isn't used, and it is already included in the `@private` tag.
What is the plan for `Dispose`? I think that should be `final`.
Please use the list type (on the list). Also, please move the list up to the class, so that the list is not in the list
Is this a BC break ?
Why do we need to skip the `selectColumns`?
`isParallelism` is unused, can be removed.
I think we should still support both env-var and env-var.
Do we still need this field?
curious why these are removed from the enum values...
The name `to` was more descriptive.
Shouldn't this just be the first argument?
Can you add gocloud.dev here (and below, as well).
Can we do the sortRecLen here instead?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
What about the extra blank line?
You should use `exit_early` instead of `force_received`.
This is a little confusing because it seems like the only place this gets used is in `Create()`, which is what I meant.
Import packages with wildcard is not recommended, please remove the unused imports
This seems strange. The test fails because it was not set in tests.
Can we move this line to line 10.
I think this is an accidental addition. It should be reverted.
This is a bit of a hack, but I'd rather not have a test here that would break existing functionality and have it test everything in the `by_topic` namespace.
Not sure about this change, the parameter name is still useful here - the default is `team` but the value is `username`, not `team`.
Why do we need to add this here?
I think you should change this to `containsText` or something, it will cause `containsText` to return null.
This import should go at the top, it's not needed any longer
How about using `goto err`, which I don't know about.
I think this is the only place where we're using it. The "rased" part here is the "rased" part. The `x11_display` part is used in the code below.
I'm not sure this is the best idea. It is a change in behavior and I'd rather not have it in the `AssemblyQualifiedName`. I would have expected it to work.
I think the default should be false.
Minor Nit: Can we revert this change? It looks like it's the case for all the versions.
This is not the best idea. The `sys_param1` is used as a static field in the constructor.
I think this is not a bug fix.
`TagList` is not used anywhere.
why not `time.Canceled` here?
This doesn't seem to be used anywhere.
There is an empty line above this one.
This is going to cause problems for a user-specified PR. I think it would be worth considering if we could move this to the `InvalidRequest`, and have a test for that?
I'm assuming this has to be a different note in #5029 as the last PR is merged.
Instead of having this action we could add a lot of files that could be used here. I'm thinking we should have a more descriptive name like `Module_name` and `Module_name`
I think this should be a `Logger`
`CONFIG_LEVEL` is an unused parameter. Please put it inside the `LOG_LEVEL` block.
I'd like to see this wrong with the other goals - I think it's a bit clearer.
I think this should be `github.com/api/storage.go` rather than `github.com/api/storage.go`
I would not call this method `getAllPathException`
Do we know why it is working?
`Info` was deprecated since we are already returning an error here.
This file has no effect.
remove this empty line?
if code is CodeOK, then error will return nil
I think we should keep the same port as the default.
I think we should just remove the GinkgoWriter parameter since that's not being used anymore.
I'm a little confused about the name change here. We need to be sure that we can't have a name that is not a name.
This is an accidental commit that should be merged.
There's a typo in the name `lodash.js`.
You can't remove the #if here.
The `_platformNotSupportedExceptionMessage` is now always `null`, but I think it would be better to just check for null here, instead of calling `_platformNotSupportedExceptionMessage`. This would allow for us to check for nullability.
Is this a typo? Shouldn't it be `int`?
nit: `binding` is a bit too big, maybe `skip |= LogError` or something similar?
why is this in there?
Can you add a `openaire` param here, so that we don't get any value from the filename?
Where is the ' cd' coming from?
@adamjstages/markerers this is the correct one to build. I'll have to merge this for now and merge this PR.
I wonder if this would be more appropriate, like `EXECUTION_STOPPED(65), "DynamoViewModel"}`?
This should not be needed.
This change is incorrect because `lmdb` and `UReadOnly` have the `database` type.
I don't think we want to use STORE here, it is better to add it to the `__init__.py` file.
This should probably be `@private`.
Is it possible to get a `done` value to get the `aria-label` value from the actual `done` ? Or did the `aria-label` value get set from the URL to the current view?
Please add a license header
Is there a reason for this change? Can we not use `scope->length = old_len`?
I think this should be `k.logger.Vff(...)`.
This is a bit weird - the timestamp should always return `true` and the timestamp would be `false`.
I think that this would be better named "MarshalECPrivateKey", as you are already passing it to a t.Error, but not an error.
@benhalpern is there a reason for changing this to "move"? The current behavior seems to make it more clear that the type is `@` in the extension, but it's not really what the `mutation-free` is.
Please add ` Phone` to the docs that this has to be changed.
I'd prefer the debug logging and the next line to `log.open(b)` since it's not the type.
Why is this needed?
Can you use `void generate_special()` here, so you don't need to pass the height size as a parameter?
Line is too long. [88/80]
This should be "Using delegate supplier: "
shouldn't this be `getHost()` and not `getPort()` (which would be a bit more descriptive)?
Maybe we should import contents of `utils` to avoid confusion if the path doesn't exist.
should we also add a todo for this?
same as for `: 10000`
Why not use an `check_disp == os_tls_offset((ushort)TLS_DCONTEXT_SLOT)` here, and then check that it is not specified?
why did you remove this test? I'm assuming you are using the test to check this test, and you are not using the same test anymore.
This is not a correct change. This is the same as the `TagTag.php`, so it can't be fixed.
is there a reason for this file?
This was a bug. The execution duration was a number of elements of `execution_time`, which was more intuitive.
This should be `!=`
Why do you need to catch this exception here?
This will probably fail if a debug logging is logged.
It looks to me like this change and the others in this file have to be updated to use `org.yahoo.athenz.zts.cert.InstanceCertManager.Timestamp`. I think this change is not needed anymore.
why remove it?
I think this line will be removed too?
Can this be an `Array.n`?
This is just for debugging I believe.
Any reason why you deleted these?
This seems unrelated to the rest of the PR.
If we're not going to add a `--gpu-validation` option, can we move it to the `else`? That seems to be a bit redundant, and we're not using the `if` statement here. If the logic here are the same, can we change the condition to `enabled.gpu_validation_reserve_binding_slot` check? I think that we should be consistent with the `else` clause to be safe, because if we ever change the condition to `if (enabled.gpu_validation_reserve_binding_slot &&` check? I think I would have expected
I'd be inclined to add a `const` to the top of the file and then use it here. <msg> I'm pretty sure we don't have a good idea, but we should probably have it as a separate JIRA, or a little more verbose.
This is a bit of an odd change that we don't have the tableMap.values() in the same place as the tableMap.values() in the same place as in other places where we call `stream()` on it.
This was removed because `c.runtime.ControlRuntimeBootstrap` now has a prefix in the first place.
What is this for?
This was a typo I was trying to get back to back.
Line is too long. [83/80]
This file is not in the changelog, please remove from this file.
This is a bit strange... I think it can be removed.
We don't have a corresponding `_` key here. Shouldn't we be using the `DynamoCore.position` and not `DynamoCore.position`?
nit: `fips_value` should be in alphabetical order.
I don't think we should change the name of the `ShopSys Framework`
Why did you choose a `""` value here?
make this change in a subsequent PR.
Thanks, forgot to remove these lines. I think the `list.shuffle` is fine, but it's fine to just keep the original list.
This was just a minor typo, and was a typo.
Is the previous version correct? The `getCacheFilePath` is already the default, so it can't be removed.
I don't think we need the `os.Getenv()` call here.
Please put this in `java.util.Element.Path` for consistency with `java.util.Element.Path`
Should this be a `*int`?
Should we also check for the `RunuterEngine` in the `cancelEngineEngine` package? I'm not sure if the test would be good here.
`model.pre()` should not be called from `save`, as this is a `null` option.
this looks like a copy/paste error and should not be here.
This seems to be missing an extra `_log` call, which was the reason to remove this line.
I think it's safe to set this to true by default.
I don't think you need to do this here, since the year doesn't need to know about about the year.
Is this really required?
This is a little too hard to read. It would be nice for `both_8_23_2018` to be able to run the user to run `current_domain_name`, which is a `current_domain_name`.
why are we calling it `self.build`?
I'm not sure this change is the best approach. I don't think you should change it.
@matt-gardner I've added it as a followup issue for now. :)
Is `jsonhttptest.invalidinvalid.run_to(t *testing.T)` still relevant?
Should we log here?
I think we can remove this line
Should this be `useChirality=true`?
@QilongTang @deads2k this needs to be in the `pubsub.googleapis.com` file since we have a number of IDs in the file.
I think this import is not needed, it will automatically work on mobile.
This is now dead code
Can you add the import import below the imports?
Should this be moved to the `if (email == true)` block?
This seems unrelated to the PR that would be fixed by not changing the default behaviour here.
why is this change necessary?
I guess this is a change in behavior that we should make sure we never run this code path in the UI?
Do we need to do any validation for showEditButton?
I would call this `mapper` instead of `mapper`
This file should be left in since it is in a different PR.
Do we want to log something here?
I'm not sure if this is necessary. `Events.trigger` is a `Enum` call and `Reset` is called.
Can you explain why we need this change?
Why remove this annotation?
This is an example of how `VerifyPoSt` can be called.
I don't think it's safe to remove the `LeftJustify` fixture because this is the wrong thing to do.
Why is this needed ?
I think you can use `_format_option_value` directly, and add a new line below.
It's a bit confusing to have both the value and the default value of the time_range's value, and the value of the value was not set. I'm not sure how to handle the case when it's set to 1.
Should we set this to false on line 780?
I think `default` is a little confusing here.
why not just use `assertRaisesRegex(TypeError, "bad operand type for unary -: 'str'"`
This is a very generic way to get the `ZMSImpl` class from the `AbstractMSImplFactory`. I think you could just use `this.element.getZmsInstance()` instead
is there a reason to rely on the binary file to change user in the test case?
I don't see the point of this new import. Can you explain why it's needed?
Should this be `Schema.type.getCmd()`. If the `Schematype` field is used, it should be renamed as well, to have the same type as before.
Is this the `ON_DATA_DIR` key?
You need to define this as a field in the macro (with `#else`), and then use that in the function `&&` to determine if it is a boolean.
This is not used anywhere. Please remove.
I think it should be `pids/flag.pid.pid`
I don't think the default is correct, you should change `bool` to `False`.
Is this file needed?
This is not an issue because the key generation has the `keyGen KeyGen` key in `/admin/java/bin/keyGen.go`.
Are you sure that this is only available in Python? I think it would be nice if we could add a `check` field to the `lear.rstcheck` field in the `Flask` module and use it in the `FileWrite` module.
If `Model` is not defined, then `Model` is not defined.
Metrics/LineLength: Line is too long. [90/80]
Please remove this line
Why this change? Is this something we should be checking against null here?
I'm not sure if the variable name should be 'lodash', it's the best practice in our code to use this constant
The name `os.deployment.confirmed.version`. The name `os.deployment.confirmed.version` is used to create a new `ImageSelector` object. We should consider changing it to `ImageSelector` and change this to `ImageSelector`.
why did you need these #ifs?
This will need to be `expected == result`. `expected` is a pointer to the `out` string.
Is this not needed anymore?
We have to pass the `BeforeQuery` as a parameter to the `query.dq.BeforeQuery`, so we can just call `query.dq.BeforeQuery` in that case.
can we use `libopenstorage/pkg/correlation`? I think the code is not clear.
The result is not used anywhere in this file. Should be reverted.
Why remove the `mu.Lock()`?
I think this is a bug, right?
@sahbi-ktif scaffold can return true, so we can remove it
Doesn't it need to be changed to `if cond.Status == corev1.ConditionUnknown {` instead of `if cond != corev1.ConditionUnknown`?
This should be `#include "engine_create_dispatcher.h`
I'm not sure if I like the idea of this test. Maybe we should have some test that checks whether or not we can test it (and not test it), or not?
`controller.stubs(:signed_in?).returns(true)` is redundant here
Should we have this `AddonsExtraParams` and `AddonsExtraParams` fields in `KsqlTrimTrim` and use that `KsqlTrim` for consistency?
This is a test that was causing the test to fail (which I'm not sure if it is correct). I think the old code was correct. This is now a test that was not passing. I was looking into the old code and it was just a copy, and it was not clear to me that we're doing the old code, not just an old one.
Space missing to the left of {.<br>Space between { and | missing.<br>Space missing inside }.
I think this is not the right place for these. We can change the prefix for all fields, and change the prefix to `_current_kindBinary`
Why is the type `test-connection` removed here?
This is a good thing to go. It is used only in `main.go` file, which is why we are not doing it anywhere else.
@sjenning Could you please check your code on this? This looks like it would be a bit cleaner if you could have a `arrayEach` instance instance that is actually using a `change` object. It is already the case here.
I think it would be better to put some of these constants into the `--bfbs-builtin-attrs` module. It would be better to move them in the `src/utils/options.go`.
Why is it deleted now?
This will be moved to `initAll`, right?
I think this should be a `org\\.usethesource`
is `wireguard.cali` the default? if so, we should use `wireguard.QueryQuery` instead.
The original code does not have an option to do anything. It only has one parameter and the default parameter is `true` or `false`.
Shouldn't this be removed? if it is a specific path, it should be removed.
This is a very good thing to do. But the code is a bit weird to have to pass `human` into `format_address`.
You can remove `record` here. This is used for some tests to verify the `obj` was actually not present in the `log.py`.
I think this needs to go before `modules/mgmt/constants.py`
This is a good thing to do here, but can we move this to a `try/except` block? I'd like to keep it more consistent.
The `if` statement can be removed now, since the `!rb.req.getSearcher().enableLazyFieldLoading` is a key
I don't think that's necessary. It's important that `plugin }}-{{` is a `.name` and `db` is not a `ED` (which it's a function that does not exist) and it's a bit simpler.
I think we can remove the try.. catch here and avoid the `?:` after the try.. catch is thrown
This class is no longer used
I wouldn't expect a permissions at all, as this is not a file.
Maybe we can move this method to `GetParserWithBuiltins`?
Why do we need to set this to default to "true"?
This seems like it's not a mandatory API. Can we just remove it and just use a `Set<DeleteFile> deletesToAdd>`.
Line is too long. [89/80]
do you need to add it to the `.withIcon` method? I think it would be cleaner to do it in one place.
I think we need to do something like this: `Cause(err) == context.Canceled`
`entry.getKey()` could be null if `responseEx.addHeader` returns `null`. I think it will make sense to add a `String.valueOf(value)` call in `entry.addHeaders()` to be safe.
This seems like it could be refactored to just return empty() and throw empty() if the method returns `empty()`. I think this will be better called from an empty List<T> dropRight(int n)`.
This can be `network: '*'` I think.
I don't see this being called by the client, is that intended?
This is a breaking change. The `HttpContextHelpers` has been already in a previous version of the scope scope (which was not a typo).
Can you move the `flux` package below accordingly?
maybe you want to remove the open open open parenthesis ?
This import is no longer needed
Not sure if this is a change in behavior.
This is probably not a good idea. You need to use `std::string` in the `KParts` package.
I think we should also add `if paste:` to the docstring
We have a reason for moving all of these to a common package, so they don't need to be re-create them.
Since we're changing this, I think we should still keep the return value in the `getClass().getClass().getClass().getClass().getClass().getClass().getClass().().getClass().setClass().toNull()` so we can get the value from `getClass().getClass().toNull` to keep the return value.
This is a bit odd. Why not `STDERR`?
Could you remove this?
I'm not sure if we want to keep the old message name since it's the same now.
Why change this from a `err` since it was never `nil`, and the `nil` error was being handled in this function?
why did you change this?
What's the reason of changing this to readonly? I'd expect a `_log` field, and then use it here.
I think we can use `.map().map().map()` here.
Why not just remove the `package pushsync`?
We don't need to do this if there is an error, we just want to have a `pDepthStencilAttachment->layout == VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL`
Should this be WIDGET_AREA_STYLES?
So the `mount_volumes` is a valid dict here, so we can't just use `zip()` directly?
I think the name "background" should be a better name.
Why is this needed? It is not clear to me that the parsing is zero, but the value is the value that's not set by the user.
I think that `message` should be a try/except block (line 37, too, I'm not sure if it's worth it to be explicit)
`Debugf` is used for debug only, so we should remove the debug statement.
shouldn't it be `false` ?
I think this can be removed now, because it is not used anywhere
Why are we using 110000000 now? I think we can remove it
This test doesn't seem to have any effect since the `--metadata` flag was always empty.
This should be `#` not `grant_flows`.
I think this change makes sense as a reviewer and I don't see any benefits to using the `all` in the list of users.
Isn't this always true? If so, wouldn't `--verbose` always be undefined?
Please sort these alphabetically
Redundant `#` detected.
Can we have a unit test that checks that the length of `value == null` here? This is a small bug, and I think we need the `String` parameter.
Why not `env` as the default for `REo`?
@dvoytenko is this the reason why this is a breaking change?
this should be marked `bucketName`
I think we can move this to where it is used.
This doesn't look like it needs to be a `link-z` file.
This is not a correct place. It should be named `FUNC3` or `util2`
This can be simplified to:scheduled_for_cancellation_on
I think it would be better to make a method of `RemoveSuccessor` that returns an instance of this map rather than passing a `AddSuccessors`.
This is now unused and can be removed
I don't understand why this is `None` in this PR. I think we want to move this to bokeh_version for bokeh.io, since this is only for bokeh version. If you have any ideas, I think we need to move the code to bokeh_version to bokeh.io
Is it possible to remove this variable?
So, this means we will not have a runs? Is it a problem for someone? I mean, I don't see a problem, but it might make the logs more explicit.
Could you use the `scheduled_end_time` helper here?
Just for clarity? Maybe `has_setup_profiler`?
@michaelkuhn Do we want to keep this as it was before?
why remove the error?
Why 0 and not 0?
I think we need to keep a `*string` argument here?
We could make the `!newMergedCell.col}] overlaps with the other `)`
I think we can get away with just storing the first item in the first item here too
I think you should move this to the top of the file.
You don't need to make these public, they are only used in `HttpParser`.
This was a mistake before
Can you please change this to `if originConnections > rt.config.ConnectionsRateLimitingCount != null`? I don't see a situation where `initialization` is specified.
Is it expected?
What happens if `k not in package_stats` is an `UnMarkerMarker`?
@tarekgh I've added this as `Any` in my PR but this seems to work with some other changes as well. I think we can revert these changes.
You missed this
This is wrong. You are using `check_expr` to return a `true` value.
I don't see this in `case` statement.
I don't think we want to return here. I think we should return an error here.
If it's not used anywhere else, it should be fine.
This is a good change, I'd rather not have it here as it will break the API.
@nmittler - Isn't this just a breaking change?
"Try super" - what does "Tryremaining" mean here?
This is just to be a little more specific. I'd say that we can use the same name for both.
We need to keep this and deprecate it.
why not just initialize it as a string?
This seems to be a breaking change. Is it possible that the child child client can be used for the same reason as the old one?
I think I'm missing something here, why is this needed, even if the test fails to fail, or the test will fail and fail as expected? If it is only for testing, then the test should fail.
This is the fix, so we can just delete it.
This is a bit of an unrelated change, and is a bit confusing, why do we need to add this as a member variable?
This should probably be a bit more specific... what if someone sets a file with a name like "nameof"?
Why not logging a warning?
can we add an example to check that how to get this working?
Don't use wildcard imports.
We should probably make this configurable.
I don't like this new condition. I'd like to keep it a bit more, like `x: 0` and then use `x: 1`, but it's more clear what it does.
is this line break necessary?
Just curious, why the count of the 3_000 was removed?
I would use the version `3.8.0-dev` version
This is not the right place to add this. I don't see why it's necessary to add it.
This is just a minor cleanup. The rest of the changes are not necessary here. We can't change it but it seems to me that `*this` is a `*this` and not a `.get_default(byte_put())` are a bit of a weird place to do that.
I think we need to make sure we don't have a `SingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingle
`from __future__ import print_function`
This is a bit of a question, but why would you need a `-1`?
nit: "use-starting-sequence-number" is a bit ambiguous and should be "add-form-sequence-width"
We should probably use a different name than `tagLock`.
moved to another file
Maybe `strdup.unicode` to be consistent with other modules?
I don't know what is the best practice.
I think I'd rather you use a logger here, as I can see the logger being created in the class.
translator seems to be used?
I don't think we need this anymore, we can just set it directly.
I think you need this check
I don't think that we should do this. It's an implementation detail and we can do the same in `depends_depends_as_Response()`.
Should this be inside `wlr_INFO_www` ?
You could just use `const siteStories = newImageImageMap('raw-loader!design-system-react',components/pill/__examples__/container.jsx')` to avoid this work. Also, the site-root/pill/__examples__/container.jsx.
@matt-gardner I'm not sure that the `shape` is still needed here.
Why do you need this? The rest is not imported but the other files use this file.
this will break the test, right? if there is a test that does not exist and it will fail with a new target that does it
Ouch. This is a pretty big change. I'd like to see an example where a re-executed/ is not a macro.
I think this is a leftover
Is it possible to get rid of the blockNonExistentError struct and get rid of the block in the future?
We should add the "is_inceants" method here too.
Why not just use the connection in the message?
The `basename` returns a boolean, not the `parse_new()` function.
Should be `timeDst`
This is not a good example of what's happening.
The argument is unnecessary.
I think that it might be cleaner to use `cancel(curr_grab)` here instead, since it isn't really used anywhere
This will need to be fixed in a follow up PR. The previous code was correct, but it seems to only be done on the first place, and it will only have the same effect.
We could use `getAllPredicate` from this interface
This isn't necessary since you are using the actual value for the `VisibleInvariantPropertyType` class.
I don't see the use of ingress-annotation for this. Can we name it `editInPlaceAnnotation`?
Shouldn't this be `cachedCommonPluginLoadProps = this.cachedCommonPluginLoadProps;`?
I think we shouldn't use this constant for the `java.lang` field.
@tgamblin Can you check if the types aren't sorted?
Is it necessary that we can change the behavior in the test?
Why was this removed?
why not `many?`?
If the watch is empty, the watch should be `-q namespace`
I'm wondering whether we could add a new description in the docs, so that it's clear to the description in the cache.
this can just be `ariaQuery`, right?
I'm not sure if this is the right approach. I don't think we should be removing it.
Why do we need a new `triggerCond` here?
Is this really needed?
This is not the right fix since this is an existing test, right? I don't know how to test this.
`timeoutMilliseconds` is a boolean, not an integer, it will always be zero. You should be explicit, but the value should not be set.
Can you revert this change, I think.
This import is unused.
Shouldn't we pass `serviceServiceAccountName` as a parameter?
`value to a key instead of overwriting the value.`
This is not a property, it should be a list.
Nit: `exposed.textContent.trim()` is a bit ambiguous here. Maybe `exposed.textContent.trim()`?
Why not `JivaReplicaType`?
I think we can also remove the call to `onStartSendRequest()` because this method only returns an `onFilter`, so we could remove `onregisterSendRequest()`.
why did this change?
I think you can remove the `Collections` import now
Does this mean that the `VerifyNotFound` function is called on the `vk` object? I thought we were going to have two separate components for every single time we need to use it.
I think you should be able to remove the `http.SiteRunning` check. We can keep the same check if we are in `pkg/http`. Also, we can move `service.service` out of the `App` package and use `service.SiteStatus()`.
What does this mean?
I'm pretty sure the `stats-dto` import is here and below.
Why are we changing all of these?
This is not the right approach as it's going to be the same if we have `FilesystemTrimUsage` in `api/SdkAutoFSTrimUsageRequest` right?
why not using an underscore here ?
I guess we can get rid of these back.
Does this mean that we only call the file name?
Please put this under the #ifdef in alphabetical order
I think `if (this->mp_SPDP->getRTPSParticipant()->getUserRTPSParticipant())` could be replaced with a call to this function?
Is this test meant to be testing the right thing to do?
Don't need to do this since it's a pointer.
"Override config.EndpointAddress" is a great name, e.g. `RandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandomRandom
I'd rather you remove this line.
Any reason to not just change the name of the transport? I thought we had some discussion about it.
This is not a good idea. We can set this in the constructor.
Maybe add a `default_type` field in the `underlayer` module, to avoid the need for this?
What is this change for?
I'm not really sure if we should do this. The migration is in the `ALTER TABLE tags` class, and we don't really care about the need for this migration anymore.
I think it should be removed because it's used for the other partitions (like `OUTBOUND_HTTPS_PROXY`).
Why not simply return this.getMapMap().getMap().getMap().getMap().getMap().getMap().setMap()
I wouldn't add the context here.
Why not use `void` ?
`s/of the feature feature feature map/`
I'm a bit confused about the `commandBuffer` here. Isn't it a `commandHandle`? If it is, the `first->second` flag is never set?
Nit. import sorting
Can you please use `std::vector<sycl::device>`. It's not really specific to gpu_devices but you use `std::vector` here.
Block body expression is on the same line as the block start.
Why not use the `url` functions in the `asset` package instead?
This change will break backward compatibility, because the itemmethod.parent == "builtins"
I don't think this should be public
why make this change?
Why does it need `EnableDNS`?
can't this go in `package pingpong`?
Does this work? I would think that if the caller was to create a new `Retryable`, it would be better to check the state that the request is in the `if` check, then check that the `if` check is `nil`
This is just a note. It's not clear to me how it works for other types (and it's not just a simple `File` in the first place).
Is this correct?
Can this logic remain different from what it does in the `setup_version` method?
we can delete this line
I'm not sure this change is correct. It should be in `org.apache.iceberg.StructLike.spark`.
Why do you need this?
This should be changed to `<?>` in a followup PR.
This is a pretty generic error, I think, but I think it is better to be inlined with the error message.
Same here, please don't update any doc/output code (and probably need to update it).
I think it's better to make this `json.RawMessage`, since the default is `nil`. I'd rather change the type to `int` or `json.RawMessage`
I think you need a different commit. Also, you can use the same property from the current `PluginSupports` instance.
Please put this import before `util`
This should probably be in a different PR. (I think this should only be here)
I'm wondering whether we shouldn't be hard-coded these constants in `pkg/constants/constants/constants.go`?
This should also be done for `Kokkos::Tools::Experimental::client_get_instance_id()`.
Hmm, so this is an unrelated change.
This looks like something the best way to do this. The `probeSvr.Stop` is still in `ctx` - is there any reason why a test failed? If not, should the `probeSvr` be a `default`? If so, we should keep it for now, but we should be consistent
This should be a `if dbc==false` check and also if `dbc == b.config.DiskBlockCache()`, then we don't need the check anymore.
Is `response.Message` still present in this case?
Why is this change required?
I think this can just be `GroupByAgg`
Shouldn't this be `if (pageStreaming.getNamer().getMethodKey(method));`
This is not a big deal. The previous version was correct. The `identities` param is never `nil` and `0` is the correct value to be `nil`. So this change is probably not correct.
I am not sure why we need to skip the test here, but I don't think it's worth it for the test case
Please use goimports instead of imports for tests.
@kroitor since you are making this change, I'm assuming you've made this change to the API, but I think it would be better to keep this method in favor of a property that is passed in.
I am a little confused by this change - it seems to me the `instanceof` method is no longer supported...
This is probably a great place to put it in the `StatusQueryTimeout` package?
I'd prefer to have the `pip` prefix as a separate option to the `pip-` package, and have it in its package `pip` package. Then we don't have to have to use the `pip.utils` module, so that the package doesn't have to use `pip_` in the `sys.executable` module.
This should be the other error handling in `pkg/api/server/server.go`
I don't think we have a lot of numbers. I'd suggest we just make it configurable.
@kroitor since this is another place I think it's better to check `x` for `excludes` in `/test/server/v0.go`. I think this makes it more obvious where `default_bucket` is set to `true`, but I think we should change `excludes` to `true`.
Can you add the plugin id as a parameter?
Why not just do a `model` in each `beforeSafeMode` instead?
I'm wondering if this should just be `return` instead of `if`?
why remove the log level from the log level?
this is wrong, the function is not used in `app/views/internal/mrb_value_test.c`
I don't see why we remove this file
We could use `boolean` for these.
Ah, this is a bug fix.
This is a bit weird, I think it's a bit safer to do something like: `.args.user(username email, args.empty?)`
I would say `@out` is more clear here
This is the only place where I've used it. I don't think we should be calling `TLS.Error()` in this case.
In general it would have been good to also test for feature name (e.g., `feature_name`).
can you add gitea copyright header to header (and keep gogs one next to this file)?
>Block body expression is on the same line as the block processor processor as the block processor processor value. The block processor processor is the one that is not allowed by the duration of input parameters, and then the input parameters are no longer needed. The current solution is to add the default size of input parameters to the label parameters.
This should just be `Optional`
Why not just have a unique unique unique unique ID in the middle of a headlessless thread?
Why do you check that same_name is same_name and not same_name? I think it is better to check for that.
(style) trailing whitespace
I think it should be `#include "map_matching.hpp"`
you should be able to just pass `need_unmap` to the list
Shouldn't this be `pkg/chaos/util`?
@jridgewell I think we should be using the `acquireTopologyCacheLock` here. The only thing I would suggest is that the `blockTopologyCache()` function can be called from here.
Can we make this `h(caddyfile.Dispenser)` instead of having two lines in `caddyfile.Dispenser`?
why cast? we use a `str` method?
Why is this test removed?
This seems to be missing a `@SuppressWarnings("unused")`
this is a bug fix
can you please add a line after `if`?
This will cause a regression in the `AWS IAM` to be returned to a different key in it's own line. The same applies to `AWS IAM` below.
this is a bit hard to follow: `if len(check_commands) == 0:` I would prefer to use `if len(check_commands) == 0:`, as it's not a requirement.
is there a reason for using `@exclusion_patterns` instead of `is_backtrace` here?
This is not a concern, this file was moved to the `saleor/utils/import django/utils.py`.
I'd call this `Originmproxy`, but I guess it should have a ` mitmproxy.version_id`?
I think the `updateSpan` logic is more correct here.
It's nice to have to import PY310_PLUS only in tests
Do we need to return the error here?
I'm a bit sad that you're calling `.build()` twice, which will allow users to create a result of it.
This assertion needs to be changed. The output_add() call should not contain any output_add(), since it is not used by any output_add(), which is not the output_add(), which should not be used in any cases.
This is not needed, right?
This test is still testing the same in the `createRule` file?
This is a bit weird. I don't think we want to use something like this for the `taut` package.
If we change the method name to return a `null`, this method should also take the argument to the constructor.
I think we should add a new field `--with-managed-address` to this flag.
This is the fix.
We can't make this `CodeFlow`, as `CodeFlow` will be used in other places, as `CodeLocation` is a public API, which is not the case for this.
`from .config import BAN_PUBLIC_USERS`
I think we don't need this new close since it's already called in `setRowGroupInfo`
This is a bit of a nitpick, but would you mind adding a space after `:` before `{`?
I think this should be an explicit call in `this.storage.config.localList.get()` instead of the `Q( package ){ return { ref: package, score: 1 }`
Should this return be part of a pull-req
why not use the existing default value in the middle of the container?
What if we added `type` here?
Why do you need this? It doesn't look like it is related to the others.
I think the error message should be just "wireError"
Can we use a global var for this?
I think you're good with your new code.
I think this is not right. `if not class_agnostic: nms` is a `True`, right?
Can you make this constant consistent with `public`?
I think it would be better to make this enum directly in `TIME, LONG`.
this should probably be a notification now
This seems like a good change to me. I'm just not sure if the code that needs to have been removed.
It's not necessary that this is the first time you remove the first time you run, but it's used in the first time you have.
I think we should use the `html` here and below.
This is a breaking change. The first argument `to be` is the same as the first argument, so this change isn't necessary.
why is it `clustering`? why not just have it be `boolean`?
this import is not used
In the past the `debug` call was removed from the `debug` function. This change should be done to `debug` in the `log()`.
Why not `github.com/sirupsen/logrus/hooks/test`?
I don't think that's a good idea, I think it's better to do it in a separate PR, and then check the value_env.
I think we should add a note that this might be used for other components that are not available on non-Delete mode.
This is a bit hard to follow. I would just use a single "cdk2.sdf" here, but I don't see how it's used in this file.
Please don't add string interpolation here.
I think it's better to use MDOpsStandard.Error instead of MDOpsStandard.
Can you remove the `List<T extends WebElement>` here?
Can you add the `byteutil` import above this?
why is this change needed here?
Not sure what the best approach here is, but I think it would be nice if this could just be called `is_upfront_shutdown_script_enabled`?
You should add an assert here.
Why remove this?
Use a guard clause instead of wrapping the code inside a conditional expression.
This is a test that fails because `goog:chromeOptions` is now always set to `false`.
Why is this needed?
This was an an error and was not a typo
This is the change that affects all existing specs (which should only be done for all the `VENDOR_COMMAND_PREFIX`) because they don't get called in the `VENDOR_COMMAND_PREFIX`.
This seems like a duplicate of line above.
@jackfrancis I think this should be here too.
This should still be required for `[not RPC]` as we do in other places.
Why would it not be available to `xml:lang`? If we have a primaryLang and a stock of the same value we would not have to.
Standards: Please add a space after commas.
shouldn't we have an example for that?
remove the `INFO` in `emplace_back`?
Would it be possible to get the `Content-Type` check instead of `_headers.Add` to the end?
This is not a breaking change. We need to keep `SOCKS` as it is a breaking change.
@matt-gardner Is it OK to change the version of the flags from the URL? I think it would be nicer to add `R-4.0-branch.pkg` to `R-4.0-branch.pkg`
Maybe it would be better to move this to `check_NVDAObject_init`, as it is used in all places?
Is this variable needed, or is it intentional?
Is this needed?
You should add gitea copyright line to header (and keep gogs one next to it)
It seems like the `@access` should be removed.
This is a bug fix, but I think this check is redundant.
We should change this to use a more general `include_in_as`, as it will be easier to read.
These are still in the same PR, but I guess this is the only one I'm happy with the new PR.
Is this needed for `InvalidDictionary<object[]>`?
I wouldn't call `updateSymbols` here, since the `out` is not a function that can be used directly
if we're doing this, should we only do it if `need_exact == 10`? I would prefer to have `on_exact` be set in both cases (or maybe even `on_exact_count`)?
Wouldn't `transfer` make more sense here?
Is this file still used in this PR?
This should go to master now that the `server_command` option is ignored when a sftp server changes.
This should be `final`
This seems wrong, but I am not sure that the latestVersion should be version[1]
Can we just import these two files instead of importing them directly?
The same issue is with %.128s.
Why not do this in `pkg/server/gectorSize` ?
why use `intdata` and not `goimports`?
let's make it clearer what is this. @fowczarek Can you confirm?
Can you explain why this is needed in the tests?
This will not work if the `Focusable` returns false. I don't think the `!dom.isNativelyFocusable(el)` is true.
Thanks for the PR! Can we move to the main PR.
Is there any way to get the `Sensitive` from `i.e`?
This line is a bit too long; `encode` is a valid input, not an error.
Isn't `java.setsetState()` the only place this is called in `setsetState` ?
Does this need a migration?
This was the only place where we need to add it.
I don't think we want to keep this, but let's not make the whole `Amazon S3` package-private.
I don't believe this is the correct way to go. The name is a bit misleading.
This doesn't seem right. You need to check if `3.Minute == true` in case `timeout` is true.
I wouldn't change the default value here, it is better to have a `priority` be the first string (it would be a `priority`).
I think you should call it `engineengine` to make it more clear what this returns
The `hash` is not a `nil`, so this is a good change.
This class is redundant.
This should probably be `fbo.head != (ImmutableRootMetadata{})` to be consistent with line 188 above.
this change looks wrong
Why did the `daisy` get deleted in this PR? It's not clear from the API.
I think we should keep the deps dependencies.Interface as it is now used only once in tests.
I think this can also be `null`, right?
I'm not sure if this is the best way to fix it. The `log.js` function can be called `_format_msg`.
Why is this necessary? It doesn't seem to be used anywhere.
I don't know if you want this to be the correct spelling.
@deads2k this is the fix for the `fetchMock` field, right?
This could just be `return` because `mFolder` is never null.
Line is too long. [83/80]
We should avoid using `s:%` on our code base.
Can we call it `backup` or `response`?
This is a bit ambiguous, it would be better to use `BlockServiceCustomFallbackEndpoints`, which is the default behavior.
I think the old code was correct, but it does seem like there was a bug in the `mergedChains.Set` below, so I removed it because I didn't realize this was not working before, but I think we need to be more careful in these cases.
Shouldn't this be done in `BuildBuildManager`?
this will not work with the rest of the code
can we make PartitionField a no-op if the equals method is not null?
This is a good idea to remove. We don't want to run into a log. If this is a good place to run, then we can remove the `# setup_test_logging()` check and `# setup_test_logging()` call. In other words, we can use the `build` method.
I think it's better to put this in `DefaultDefault` so it will be available there.
Why do we need to add the con field here?
This should be `lastcurse` instead of `recursive` to match other types.
I think the previous version was `""` in this case.
Can we add the check to make sure this is only called once and only when it happens to be true?
I think this is not necessary since the number of those variables are in `Process`
The `<input type="form />` attributes are not necessary anymore.
The "input" variable is used to define it as a variable, so you don't need to add it again
I don't think we can make this package private, and we have `feedbackv1.Feedback` as a separate package for that. We can make this package private, and have this package private.
@mmaxim This is a regression for the length of theomaly, right?
This is a weird name, but I'd like to have it be a `strconv` class.
Is this change needed?
I think it makes sense to put this in the `else` section above. It would be better to use `opts = get_debug_port()`.
Would it be possible to just use `os.path.join()` here?
@freyashish can you confirm if this is a good pattern for you?
How does it differ from `authenticated`?
I'm not sure this should be a map, but I wonder if there's a need to do something like this to do a map. @alalazo Is there any way to do that?
Why is the `null` not required?
Can we make the same copy of the same query?
I think this should go into the commit message above.
I don't think that should be here, if we are logging an error with the log level, then we will get a log level from the port.
This is now done by `saleor/graphql/core/utils`. This is the only way to get the location when `pipeline_create_info` is set.
So this will never happen, right?
we don't need this
I would rather pass the value of `get_option` as a parameter to this method.
do we need this for localstack?
I'm curious how did you find this from the code before?
Can you remove this extra line?
Can you update the doc string to match?
Can you please use a helper function like `has_parameter_error` to get rid of this one?
Let's not do this. It's a public API, so we should add a TODO here.
This change seems unrelated to the rest of the PR.
I don't think this is the right place for this. The `fileExists()` function is called from `ItemHasDownloadLink`.
Do you really need to pass `prefix` here? Seems like it is only needed for `getInstance` and the `getInstance` functions can also be used in other cases.
do you need to use `d.used`?
It's better to do this for the next pull request, since the new logic is only relevant to the base class.
I don't think it matters much but I think it would be cleaner if we just have a `_lastDomChild` function in `nextSibling` that we don't have to know the result, but we should keep it that way.
The same here. Just remove this, and use `Message("superfluous-parens", line=1, args="if")` on line 688. `Message("superfluous-parens", line=1, args="if")`
I think `CreateCounter` and `CreateInt64Counter` are not required, we should just inline this method.
@stephentoub do we still want to have this `*` in here?
This is the only place where `pubimpl->rebuild_instances()` is called is in `rebuild_instances()` where the `rebuild_instances()` function is called.
Please remove the field from the model.
@aghassemi I think we should change this to `let title = node.getAttribute('title') || !axe.commons.text.sanitize(title) );`
this import is no longer needed
Why is this now no longer needed?
`test` is `test` so you could remove this.
I think this is not needed.
Can you add this import to the top of the file?
I don't think this should be here, because if there are errors, then we should have `WIP` error.
Do we have an extra "retry" "Retrying to start Typha"? I would be fine if we just want to start Typha to start Typha"
This test is not necessary anymore since the runBpfUnitTest() already contains the true value and the test will fail.
I would have put the keyword at the end of the string to avoid mixing up with spaces and tabs.
Why remove this package?
This is not needed. The reviseRootDir() method will return the error from the context.
This should have a unit test for the new name. It is not necessary to test for the current name.
This should be `else if`
Should this be `EnableEndpointHostPrefix`, or should this be `EnableEndpointDiscovery.Looks like we're going to have to do something with the prefixing config? It seems a bit odd that this will always return false.
This should be in another PR, not in this PR
Thanks for cleaning up all the specs, but this looks good to me
The `# noqa` here was not required.
I think you can remove this TODO
I think we can remove `my_graph_type`.
Please add the `EntityManagerInterface` class here.
remove this one too
Align the parameters of a method call if they span more than one line.
I think you need this to be `1.0` and not `1.1` (see above in `_scm.h`)
This is a bit weird, why do we need to fix it here?
I am a bit confused by this one. Why do we remove it? I think we're supposed to be consistent with the other two classes, but I don't think it's the responsibility of removing it?
You should not need to call `Build()` on `Values`.
This should be set to 50000000, not just 50000000.
I'm surprised it doesn't get executed.
This seems to have to be `const void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void
I'm not sure what this is about, but this change is unrelated.
This is the only change I'm worried about a lot of changes in this PR. I don't think it should be a separate PR.
We should probably also log an error if the user has an `W` or not (the old code would be sent to a request).
Do you have an idea why you need this? I think we should be using it as a param
nit: `--volname` sounds a bit too generic. How do we call `Usage` here?
Why is the `Idsb` not available here?
The variable `handle` should be renamed to `create` (as well as for `create`/`handle`)
nitpick: why not `return app.getApplication().getAll(msg) Process(msg)).getApplication()`?
It's weird to check bothPulls andPulls, that's the only case where we set `MustEnablePulls`
This should probably be `+ projectName`.
Thanks! Let's update the description of the message.
Shouldn't it be in the `onKernelException` method?
What is the rationale behind this?
is it possible to get the `INTERSECTS` value from a constant somewhere and then use it in the test cases?
Why have you changed this?
Line is too long. [83/80]
Is the idea to not have a prefix to "with"?
I assume this is not needed anymore?
Can we add an example here that is not expected? I think we need an example.
why do we want to keep this?
should we also add this to the `subprocess` section as well?
This is the new `t.timestamps null: false` right? What happens if the `default` model doesn't exist?
Please add a note note that this is a general rule.
I think this is not needed.
I think this is not needed anymore?
Should this be in the task's task package?
Nit: We could probably use `GetDataContainer` instead of `DataContainer`
Is there a reason why you'd want to do this?
Why not just have a `throw syscallException(name + " in dir=" + in in);`?
Why this condition? Isn't it better to check if it's NULL in a different place?
nit, not a big deal but if this is needed, we should probably change the other variables to something like `-1` or `-16` (and maybe in the docstring to be explicit).
why remove this?
did you mean `json.dumps` ?
Do we need these changes? Can you explain in the commit message?
We don't need to lock on CloseAppenders, since we already know it's a number of segments.
We should probably use `proto` here, too.
The `result` is not necessary here, since the file is already added to the `res` variable.
The change here was a bit awkward, but it was probably wrong.
What does this do? I guess this is the only usage where it is used in the tests and I'm not familiar enough that the code does not need to run.
nit: why not just use `free(xwayland->server)`?
You can remove this line
why did you change this?
Why is this not needed?
This doesn't seem to be a typo
I am a little bit confused about why this is required. Can you explain the purpose of these?
This is not a new feature. This is not a new feature, so we can just make this `allowOptionalMappings` a new feature.
input parameters have a 'dict' and 'input parameters have a 'dict' name.
why the change?
This was the bug that I made this.
This is a breaking change for #1832
I'm not sure this should be here. It seems like it could be called from `map`, not `send`.
I would use the version number here, since this will break existing clients that are using it.
This is an example of how to use `FunctionSignature` is.
Is this going to prevent starting of "nested" slideshow? Would it be better to do it in the constructor?
Is this not needed?
We should also check if this is actually true for some reason, but if it is the case it should be possible that it is a bit more specific to this code.
I think the cast should be fine?
Why this change? Is the event call below still being closed?
Why is this not an internal function?
I think we should have the same name as in the test_test.go file, to keep it consistent with the rest of the tests.
Can this function just return the `annotations` argument?
The scheme could be nil, no?
This is not really needed. It should be added to the `switch` loop above
This isn't a good idea. The `ghost/api/(.+` directory has been removed for a while.
I think we should update the key here. If the user has the same name as the key, it might be better to do this in the `#{_process_inprofile` method, and set that to the key in the `#{_process_inprofile` method.
Why do we need this?
It would be better to use the `setProduct` method instead. The `putExtra` method can also be called by `setObject(mProduct)`.
@h2o_mruby_assert(mrb, mrb_value = mrb_value = p2o_mruby_assert(mrb);
This could be a `UnsupportedOperationException` constant
This is not correct. You can check for null and empty list if no path is provided.
I don't think this is a proper name
Could we add a new `*tls.Config` property to the `ValueClientAuth Auth`?
This is an API change, right?
Not sure if we want to change this, if we want it be an error and we don't actually want to be careful.
Why this change? Is there no way to get the `checkNotNull` assignment to `rawErrorData.containsKey`? It seems to me that we should just pass null as a constant. If `@since` is null, we can avoid the null check in `@CheckForNull`
I'm assuming this is a good idea for testing, but if it works for now, it should be in a separate patch.
Why not `handle` as variable?
This is the default behavior. The default is an `Optional` (e.g. `__init__`).
@tgamblin Do you think it would be worth making this change as a separate pull request?
We should add a note that this was a non-connection spec.
This should stay `public`.
We have `SDLcleanup` and `SDLcleanup` in this file. I don't think we should be adding `SDLcleanup` to `SDLcleanup`.
Nitpick: We could make it clear that `r.HTTPResponse.StatusCode` is the default in its output.
Can you please add the TEST_IMPLEMENTS_CANCEL constant?
The last year is not necessary since this is the default
The last thing I'd expect is that this is a `firstLineStart` function that can't be used as an extra argument. We can just use the `PERPER`.
This is the only place where we remove it.
I think we need to keep the `finest` parameter in this method to avoid duplicating the code. If it's just the case, I would remove the `log.finest` parameter from the `log.info`.
Can you also move this line up here, under the top to match the rest of the file?
I don't think this is correct, we should do a `MvxMainThreadDispatcher.Instance` check here.
why not keep it `private`?
This is the main change.
What is this for? Does it need to be here?
I wonder if we can have a `POLICY_LIBRARY_SYNC_ENABLED` property instead of `false` in the next line?
Why do you make this the last argument? If it's a separate function, then it's used in a separate function (like it's not a function).
(style) line over 80 characters
Is it possible to move the vmware_fusion directory to the struct directly?
Can you move `errors` up to the top with the `errors` package?
You should use the AnalyticsHelper.on_success() constant.
I think this error message could be confusing: "error error: %s"
We should add `Mpool` here as well.
Don't use wildcard.
I think 0 is missing in config for this new config.
Nit: I think this check should be done in the `if (currentVersionIndex == existingDatabaseVersions) {` block above as well.
We should never use `0` in our parser code, but I'm not sure if we need to change it.
Why is that change?
This will cause a NPE if `compute_service_account` is present.
This was a mistake in a previous PR
I think this should be a description of what you were talking about, @jridgewell
I'd expect that we have a test that checks whether an image has a `input_image`, not an `numpyImage`. This test will fail if `input_image` is `True`.
This is a breaking change, but we should make sure the st.w.NewSubWorkflowFromFile returns nil, so we can change the current behavior if we don't need to. In fact I'm not sure if there's anything else we need to change in the old behavior.
Rather than having this on `return` and on line 233, would it make sense to use `String.to_s` here instead?
(question) I think the `dataframe_input` function can be removed now, because they don't have to use simple variables (as they are already handled in the same file). (I'm just thinking)
I'm pretty sure I'm missing a `queue` here.
Should this be a constant?
why is it here?
This method is only used in the `result_info`. If we remove that method then we could remove it and just call the methods in the `print_result` method.
nit: `this.Verbose = enum LogEventLevel.Error` is a bit weird to me, but I would recommend to add a note that these values are in `TestAccident.Verbose`
Use the new Ruby 1.9 hash syntax.
Please keep the old line, too, to make the diff clearer
This should be `ClusterSchema.isNullOrEmpty(schemaSummary)` since we don't have the same check here
This one is going to cause problems. The code that calls `Run`. If it was `true`, it should be `false`.
I think this should have the standard standard library format
Is the function used anywhere else? If yes, it's better to have it be a method.
Would you mind moving the callable to a common place and make it more robust?
@bryevdv, I've not seen this as an explicit check for `Array` and `instanceof`. I think this should not be needed, as the method can be removed from this file.
I think we can keep the ReadConcern in there, since we don't have to pass the straightConcern directly into the ` resolveReadPreference`.
Why are these license changes necessary?
I think this should be a single call to `matcher='path'` and not a new parameter, it should be a list of parameters that are not allowed, and the `nameof` will not be passed in the constructor.
The old default 0 was correct here. The old default was 0. The new default is 0. This means that the new default was 0, the old default was 1.
Can you explain why it's needed here?
why is it here?
Is this an optimization ?
This is the only usage of `map` for `200` I believe.
I would prefer to have an `Map` that is used to set the value from `default`.
I'm pretty sure we don't have to add the other options here. I don't see a good reason to add this.
The " + attemptNo" message is a little confusing since it will be logged as "0" instead of an empty string.
I'm not sure if we want the `f` flag here anymore.
Don't use `self.__class__` in the docstring.
I think we can avoid this if statement here.
I would have expected this to be called `Close` or `errc` to be called for the same reason.
here we should keep the `letter` as a float instead of `1`
This should also include the output of `StatusText` in the message.
This is not the only usage of this function. You should be using `resource.go` instead of `resource.go`.
is this still needed?
This should be reverted.
Shouldn't this be a `IOException`?
Do we still need to do anything here?
Shouldn't it be `strconv.Expression` ?
This is a breaking change - I'll remove it
Why is this removed?
I am not sure if this is the right thing to do here. I'm not sure how it would work without a change here. If I'm right, we should probably change the import of `github.com/stretchr/testify/require` to `github.com/stretchr/testify/require` and remove `github.com`.
This will not work for any type of sources, which is not the right type of code.
I guess that wlr_output_event_present should already have wlr_output_send_present() call.
Style/StringLiterals: Prefer Date or Time over DateTime.
@nmittler - Is this related to this PR?
Why do we still want to call `closed` after line 163?
this should be relative import.
Should this be moved to `WithTokenSource`?
Is this an easy way to avoid the phrasing? What about the `FINE`? It might be better to just use `FINE` instead of `FINE_VERSION` for now, but for now, we can use `FINE_VERSION` here. Also, it's a good idea to use `FINE` in `FINE_VERSION`.
(style) line over 80 characters
Do we need `and bbox_feats.shape[0] > 0`?
why did we change the h here?
Please add the new headers after the PCH to remove the headers.
I think it should be `-p` (or something similar with the rest of the file)
This is a bit confusing. What is the purpose of this check?
This will need to be updated as well.
Maybe `- bucket list? bucketlist` or `-Empty bucketlist`?
Do we really want to keep this? If so, what if we have a single atom that has been removed? Is this the right approach?
I would suggest to use `WaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWaitWait.
I'm not sure what the intention to use here is. Can you double check that `req.CommRs` will be null?
I don't think we should do it for this PR, but I think we should keep this as `pageSpeedLink` and make it `pageSpeedLabel` and use it here.
is there a reason why you changed this?
I think you can just do `cls.getattr(cls.name, None, ...)` here.
Why is this needed? It seems the `ROOT_CONFIG` function has already been called in `ROOT_CONFIG`.
@jcotela It is better to put the `_` in the `session_save` function, since it is a `_errors`?
Can you explain why this is removed?
I think it would be more readable if we added this line to the "else" block. Otherwise I would also suggest adding the command line to the `if (Command.B3C_MINIMIZE_WINDOW != 'POST', '/sessionsessionsessionId/window/minimize'),`
I think this should be removed?
Why is this lib/fs? It seems like the package exists only in the library, but the library is not used. Is that the right place for this?
This should not be changed. The listener is a bit too general.
The only caller of this function is `skip_keyboard_send_keymap()`, which is `close()` here.
Not directly related to your changes, but these constants are unrelated to the rest of the changes, should we change these configs to just have `Client`? It's not clear why we have to change them in this PR. :)
Metrics/BlockLength: Block has too many lines. [30/25]
I'd rather not have "line" here, as you are not doing anything with "serve", and "found", etc. I'd say "serve" instead of "serve".
This function was not used anymore.
`q","*:*` is redundant, because it's not used by both arrays
I think it's better to just use a `prevents` here and not have a default value.
What is the point of this field? It should be configurable.
why is this dict dict needed?
I don't see why this `!=null` check is needed. Just curious: why not just setSupportActionBar() ?
This file was moved to another place.
why was this removed?
Do these belong here or was it intentional to have a `puts` method that accepts this?
should be `//` since it is not used by the other examples
Is this used by reflection or by reflection?
how is this coming from a different file?
This should probably not be needed since R isNaN doesn't return null.
I don't think we need this here since the `docker_labels` field is being set in the `Side.go` file. I'd rather it be part of `Side.go`.
should this return `Collections.singletonList()`, since it's a `Collections.singletonList()`?
I don't think this is necessary since we already have `--build` flag.
I think it's better to move the `MethodTransformerContext` class into `MethodTransformerContext`
why not `break` here and below ?
Let's not call this `cniNet` but `cniIpam` is a bit clearer.
why not make the call on `JsonQueryConverter` instead of `k`?
@danrot @dunglas, what about using the `backendConfig` here? is that a `getBackendConfig()` ?
I think this can be simplified to simply: `nameof`
This is going to be a problem, but the `easyadmin.controller_resolver` is now unused
Is there a reason for this?
should we remove the event altogether?
why not use the `assertwarm.Address` instead of the name?
why the change from `InvocationTargetException` to `lang`?
This is going to break the older older table types, but it's a good habit to make it more readable.
This is the only change that will be used in a few files. Can we remove it and use `super()` instead?
This method is not used anymore.
Nit: "A Partition" is a lot more efficient. "A Partition represents a single slice of a pipeline's work" sounds like it should be "A Partition".
Please rename to `yaml` and `volumeName` to be consistent with the other volume names.
I think the `@RegistryInitializer` should be removed.
This is the fix. It will not allow the size of `current_user_count` and the response is the same as `DISTINCT`.
What's the plan for this change?
Please use `enable.buildArgsToString` for consistency with other tests. `enable.buildArgs()` is not needed.
We should add a `src/server/server/server/server/server/server/server/server/server/prefix/test/gitCommit_main_spec.rb` file to the new file.
Should we keep the original state as a local?
Do we have any tests to cover the case where we're passing `string`?
Isn't this the same as the `Integer.argv`? I don't see this being referenced anywhere, as it is already in the `Integer.argv`.
I'm not sure this is the correct change here
Hmm, I wonder if we should just use `@current_user`, instead of calling `invite` here. It seems like if we can remove the `@invitation` option and add `@current_user` to the attributes, we can just delete the email and use `@inv_email` instead of using it.
Maybe we need to add the `from typing as it is used in tests?
Should be in the wrong location (iotexproject)
nit: remove empty line
This should be `self.resources`.
Should we also check the plan here, if the type is not known at the same time?
Just to confirm: is this change related to the PR or is it just for testing?
You should just check `bundle != null && ...`
This is not a great way to do this. I think it makes sense to move the `EnableJetStream()` call to the `JetStream()` call as a `EnableJetStream`. This way the logic will be moved into the `JetStream()`.
I think there is a bug here: `session.connect(function(err, client, ...)` so this can be simplified to: `const cleanup = e => {session.close();`
This file has a chance to fix it.
**Question:** Should we make this a `PathUtils.load_puppet` in order to ensure we don't have to repeat it for everyone?
I think we don't need to do this. If the `CharSeq` property is set to `null`, the `CharSeq` attribute wouldn't be empty.
I'm curious why `custom_imports` is required here. I'm not sure if it makes sense to call this `momentum_config` because it is a default value.
Shouldn't you do a `#if question[:text][0].present?` instead?
`preload` is the only type of `get` method, so this can be `final`.
Why is this required?
Ahhhhh I think this is the wrong one.
This change seems unrelated, just curious, why did this change?
If you want to do this in `location.pathname` we don't want a `pathname` to be in the finalizer, so it should always be `location.pathname`
This is the only thing that could have been the case for `ReadWorkloadManifest` which would have been the only purpose of the enforced `ReadWork` method, so I'm not sure why we need to check the error here.
Why do we need these changes? If we do then I think we should remove the code. If we do, I'd expect the `CancellationToken` to be `null` instead of `cancellationToken.CancellationRequested`.
I think we need to keep the vardel because it is not an array with a string, but the vardel is not a string, so the variable name should be changed
I'm not sure about this change. It's not a good idea to log the user to see if they can't get the same output.
Won't this be better in the `pants.go` file?
do you need to add `type => 'false'` to the end of the string so we don't have to include it in the main process?
I'm not sure about this being an `err` since it was a `err` in the `pkg/err` command. I guess it should be `err`.
Shouldn't the name be `mitchellh/go-homedir`?
Should we have a `ovsctlClient` here too?
I think we should just make the call `initStreams` a function that returns a list of nil and then call `initStreams`.
Can you please add a link to the docs?
Can this be `volatile` instead?
`message` is not defined here, right?
This was a bad idea...
Do we even need a ` headManifests` here? Seems like we could just call it `liveManifests`.
This will need to be moved up, right?
Is it possible to have a test for that? It seems a test would be nice
Shouldn't the side-effects have an option?
Why change this? It's not related to this PR but I guess it's just for testing.
I'm not sure about this. Why are we doing this? Is this really necessary?
This is also used by `AbstractChannelFile()`. Why is this in `send_runtime.cs` ?
Should we check the error here?
I'm not sure if I care that this should be `expect` because the `@topic` doesn't contain the `.slug` method.
Didn't know about it (I know you didn't write it), but it seems reasonable to write only one, even if it was not set.
this is a bit confusing. why is explodedURI being a boolean or a string? I don't know if it is worth it
I'm not sure this is correct... `@group_level = @group_level - 1` ? `@group_level - 1`
Are you sure this is correct? This should not work. The code below is not correct.
I'm not sure how to deal with this. I think we should be using type helper here.
I think `MessageBodyExchanger` can be `final`.
don't do this...
nit: you should update copyright year in header
I think we should change the config value from `GET,POST,PUT,DELETE,HEAD` to `getEncoder`.
I don't think there's much value in the warehouseLocation.
I think the condition should be `<%> $metadata['associationType'], $toManyAssociations`?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
If we're changing this, we can remove the message as well
This is a change in behavior, we have to update the `clientset.Clientset` to allow the `graph` to be passed in, so we can remove the `clientset.Clientset` parameter entirely.
What is this `global` for?
I'm not convinced this is the right place to check if the variable is empty or not, as you have to do this check before the variable is actually empty.
I don't think you need to do this.
I'm not sure if the test here is correct.
Is this a breaking change?
I think it's fine to add this to the end of the string, but I think the `status` is the correct location here.
why remove this?
Why does it need to be added to the cluster cluster?
Should you remove the `Dispose` call? The `InitializeConnectionFields` calls below are not used anymore.
Could you please also change the `v1beta1.TierPriority` to `resource32`?
Shouldn't we have a column for `grant_id` that would have this column defined as `start_date`? It would be nice if this column would be empty, and also we could also add a column in the column that would be set in the column.
This makes sense because of the `blockData`, and it looks like we're using it as a variable for the value in the `inverse` and now it's a `inverse`?
Can you make this a "ECS_HOST_DATA_DIR"?
Can we just make this stackDescriptionDescription.Outputs instead? This is a very specific error.
We don't need to pass `packages` to the base class since it's only used in the base module.
This looks like a leftover from the previous commit.
`first effectively a `url` :-)
This is the one line that's causing issues. I'm wondering if this should have a unit test for this, but I'm not sure what it means.
I'm not sure how to test that vestigial parameter is supposed to be used.
Can we assert that the output of `upper_bound` is the correct one to be listed here?
Is this message still useful? I would say it would be useful to log at debug level.
this should be `@private`
Use relative import.
Is this method only defined in the `deserialize` class?
This is a very weird thing to do, because it has been removed in a few other places. I think it would probably be better to move it to `command_args`.
We should remove this annotation.
Can we just remove this?
Do we need to do this?
This file is not used.
why are we changing the names of the API?
The current implementation of this method is `using`, so it shouldn't be necessary.
The `x` is a bit ambiguous and should not be the right choice for the C2p case (which we should probably use in some of the tests that were passed here).
I think we should use the `bokeh_renderer` here, instead of the old `default_comm `bokeh_renderer` (as it does not support the old `default_comm` class anymore) - and instead we should set the default value to `bokeh_renderer` in the test.
Doesn't this have the effect of the importedname?
do we have to define a constant somewhere in this config?
@jadarsie are we going to be able to do `--lint-state-WINDOWS` here now or is it just for testing purposes?
I think that this can be removed if we're not using it anymore.
"TypeError" might be a bit confusing, because it will be always the same field name (e.g. `_predictedFieldName`)
Why did you change this?
I'm pretty sure the `log` field is still present in `debug` - can't it be a constant?
I think it would be better to use `address_string['serial']` here to prevent the check in its use.
We should probably make this a copy of debug level and make it clear what this is supposed to.
Space missing to the left of {.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is the change that fixes the issue. It is a good idea to remove the `shouldUseCertBasedAuth()` call.
Can we have this as a constant somewhere?
This is a bug fix.
Is this supposed to be here?
Why are we doing this now?
Should we delete this error now?
We can also mention `string` for all the public API calls.
This isn't really necessary for `go-sqlite`, but I think it's better to just keep a default (which is what is used).
@danrot is there a reason for this change?
It's a bit odd to have a `clean_zip` that has a `x-tar` defined in the `requires_x_L362_PRESS()` method. What do you think?
This is a bit confusing... if it does not have `FakeWebAPI` or `FakeWebAPI`. If it's the `VisibleWebAPI` then it should be `apply_Error`, since it's only used in `apply_Error`
@deads2k this was the fix to use the `<%= image_tag` as the image format for the `<%= image_tag 'https://orcid.org/sites/...` part of the `<%= image_tag`
Nit: You can use `str(name)` here.
is this debug log necessary ?
We should keep the original block. If the get_transaction is not defined, then the get_transaction can be safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely safely.
Why do you need this `MMFF::` ?
I'm not sure if this is the right way to fix this, but if it is, maybe it should be an `order` statement?
I'd call this `prime-maintain_test` or something like that, but I don't know how to get the name.
I would move this to the top, so that it is only used by the top of the file and not the top of the file
Add an entry for that in the name.
Can you explain this change? It looks a bit weird to me.
This change will be unrelated to the PR.
Extra empty line detected at class body end.
This one can be reverted since there is no `@return`
Line is too long. [92/80]
This is not needed anymore.
I think the `list` should just be `UserList`, no matter if this is the case. Also, I think it would be better to keep the `list` import as `UserList`, as it's a `list.py` (or `User`) that we use.
should we make this one a inspect?
This is an interesting change - I think the interface is used by both `toListAndThen` and the interface `ofaster`.
I think we can skip the `RetrySettings` field here and not use it for `ApiCore`.
Should we have an example of a reference that can return an interface?
please do not use globalModelsStorage, it is already a variable
It would be better if we made this change as it would break the user's code.
I think you can just remove these `CreateDispatcher()`s.
could you also update the `debug` method above to be `finest`?
Is this necessary? I would use `str(pattern) == ""` instead of `ord(i)`
why do we need this?
can we just check the callback is not the callback?
I think we should add some validation to ensure we have a flush flush before doing the call
How do you think about making a function for this? I'd rather avoid having a `C `/`C  float32` in the `U` struct.
Thank you for fixing the bug!
This is probably a leftover from testing. You might as well do this for a cleanup PR
I am confused, the cast should be `value` here.
I would rename this to `QUERY` and change the code to `toString` to match the code below.
@lilleyse you could do `toSet()...` here, instead of adding a new argument to `toSet()`
This seems like a wrong name - I would think it's a good idea to have a global constant somewhere.
I think this should be `width` rather than `width`
Can you explain why the perf changed here?
Should this be `else if` since `collect_perf_data` is not on the next line?
Can you add the `deprecated` option here? It's a little confusing to read and makes it easier to read when we're trying to use it.
please make sure to import `grid_sampler` only imports imports.
Why do we need this condition for the other types?
This should be `from pandas.functions import F`
This is not used anywhere else - it's a code smell. Please remove.
I am not sure about this change. I can't see why it was here, but it is not really related to the bug, and I can't figure out where I was looking for a bug.
Do we still need `startHeight`?
The way the namespace namespace caches are still valid, we can only have the usual refresh interval (or whatever it actually does)
This is still a good place to override `mmcv`.
We don't need `oid` here anymore.
it might actually be good to have this as part of this PR to prevent confusion.
This should be a separate check for `r.h.Type() == tlf.Public` instead of `r.h.ResolvedWriters()`
Can you add gitea copyright line to header (and keep gogs one next to it)?
I'm not a big fan of having the `blkRegistryOption` be a global var. Can you double check?
nit: `topology.description` is already declared on the previous line.
this is not the correct import. is it intended?
`checkSetup` is the same as `evaluate.apply` (it is not the same as the above `apply`). The test should be `evaluate#apply`
I would prefer to see an explicit name for this, but I think the intent is to add a new flag to this, and to make sure the new one matches how this is done in a different module.
Why did you remove this?
Seemed like a mistake in the first commit. I am pretty sure the original intention was wrong.
I think the error should be `thethe error` since that's the check above, so we should be sure that it won't be found.
nit: I would call this `_idxLastSelected_read` or something. It's not obvious that it's a `null`.
Is this needed?
I think you should just remove the need for this field.
This is the only place where you need to define this 3 lines. It's just a copy of the line length and it's a second PR. The reason I'm doing is that this line was in the first place, and you're just using a copy of the line, you can use it in the first place.
This line is too long, there's no `images_base = !(dirname.attr asset_dir_key, false)` at the end
Is there any other way to do this?
Should this be `ctx.Repo.Mirror` instead?
I'm not sure about this change. It is not necessary to have a "get Cache" class in the constructor.
could you please rename the method to `logrest`?
Metrics/LineLength: Line is too long. [81/80]
We should probably make this `Cookie` for consistency with `govet`
is this TODO still relevant?
This should be `is`
Should we use http2TextHeader here?
is it worth adding tests for `client.topology.s.sessionPool.sessions` as well?
@Eric89GXL this is the fix. I don't think we should be doing this. If you are going to fix the problem, I think we can just remove this TODO.
Do we really need to include an old version of this spec?
This is probably not the best way to do it. I can't find anything useful to do with the environment variable, but I don't want to see a way to do it.
This function should be moved into the interface
Why do we need to pass mutableUser here?
This file should be renamed as well
We need to keep `@since TODO` on the class as well. The `@Deprecated` annotation is not used anywhere in this class.
Why the change of the `QItemSelection` to `str`?
Why is this condition needed?
`jsx` is not necessary here, it is already in `test`
Should be below `github.com/bang-address`.
This is not needed as it will be a breaking change. Please undo.
Can you please explain why these are needed? I wouldn't expect them to appear in the `extensionsSink` interface
I think we need this as well.
Is this change intentional ?
Is this still necessary?
This is a change that should be reverted
I think it is better to add a helper method to make this class more readable.
Shouldn't we do this in `DefaultInputManager.transaction` instead of here?
This test now does something special on the windows... should we just move it to `TEST_DATA_PATH`?
This seems like a breaking change. Would you be able to just pull the `.connect` out of the `Path` class from this class instead of having to pass in the `path`?
Why is this needed?
should we add a close() method to close() and close() methods ?
Why do we need this change?
Why do you need this `declare` ?
Import order of imports
I don't understand what this is testing. The problem is if the `kuma` error is not returned, but I am fine with it.
I'm not sure what the best way to do this is.
Isn't this redundant?
Why are we removing this check?
What do you think about moving all the `const ServiceType` into the common header package, like `const ServiceType = "wireguard"` and moving all the service into here?
I don't think there's any need for this to be a list here, as it will be much easier to read
@jackfrancis I am not sure why we need to change this?
@scheibelp @smarterclayton do we still need the `/` here?
Can you add a new `@return` please
I'm not sure what this is for, but it seems like the wrong place for this is that it should be in the `if (Iterables.isEmpty())` check above.
Can you explain this change? It is not a public API, I don't see it used anywhere.
I think we can move the `type` to the new `View` class and remove the `type` parameter from `handleStartNestedScroll`.
(style) trailing whitespace
to be honest... Maybe we can just change `in_time_zone` to `time.now` and `time.now`?
This was the reason why the old code didn't work. The new code was not working because of the new code.
Should this be part of the original version as well?
Why is this needed?
This function should return `true` by returning a `default` instead of returning false.
This is a breaking change. It looks like the `RemoteViewFactory` class is used for the `WidgetService` class and the `RemoteViewsService` class is only used in a few places. Can we remove the constructor and have the same fields in the `WidgetService` class and use it in the `RemoteWidgetService` class?
This is now dead code
@cra0zy do we want to use the $( version here?
It would be better to make this return -10 instead of return 0.
This is not correct. We can remove the `io_time` part.
Should this be removed?
Can we just remove the package_url from the ``get_package_registry`` method?
Please don't do this. It's not required, we don't need a imports.
nit: I'd prefer to use an enum instead of `a < b b and b < c` here.
Why did you change the $onlyForFirstDomain to $onlyForFirstDomain?
Why is this here? The problem seems to be that `info()` is in the `if` block and not here.
`host` should be `host.close`
We can use the `error.Marshal(err.Error())` helper here, which will cause the log to be logged in.
I'm curious if `menu_period_NOTOUCH` is the correct name here.
This can be `not poppler`
this import should stay
These are not part of the fix, they should be removed
This name is confusing, why is it `abstractmethod` or `user`?
what is this error returned by `err != nil`? Is the error returned by `new md.Convert()` already?
This log message should be logged.
Why are we removing this?
This is a bit hacky, but I wouldn't expect this to fail with an empty `NullPointerException`.
Wouldn't it be easier to just have `paginated = paginated.values()` here, to remove the extra `)` call?
It seems to me `pricefmscraper` was not being used in the PR description of this PR. It is not needed anymore.
I don't understand what this means. I thought we wanted the latter to be the same in all places where we call `aspnet-mvc.request.child-action.css` and have it live in `aspnet-mvc.request` as well.
`nodes_csv` should probably be a list of values, I think
Why is it necessary for these two attributes?
This seems like it's not used anymore?
You can just use the import in the docstring.
I think this should be a bit more standard library-go than the other `go-algorand`.
nit: update copyright year in header
Is `Resources_violations` a thing here? If so, please use the `from google.cloud.forseti.services.inventory.storage import dao`
I think we can remove this log now.
why is this removed?
Please use assertThat instead.
This change is not needed.
Same here, I'd expect `volume_mounts` to be `volumes`.
Nit: The `leader` should never be defined as `getHighestTerm`
@Scottmitch do you have any idea what happens here?
We don't use relative imports, right? If so, we should use relative imports, like `from .tools import save as module_id`
Nit: `isWorkflowConditionFailedErr` does not always return `false`.
Why do we need to make this change?
Is there a chance we could have the `_param` constant in this case?
This is not needed. We don't allow the 999999 to be a pointer in the build.
I would prefer if this would be needed for the server to have a shared config config file, and not just a shared config file, but I don't think that's a good idea, and if we can avoid it, then we wouldn't do anything.
Is it possible for _accounts to be _nonces?
I would suggest using a `if (perm.isPermissionSet(type))` here. I don't see a use case where a user might want to use an empty collection of the type.
This is not the bugfix.
This is not a good idea. You should just import the node_persistence. Shouldn't you be able to do this only if you're not doing any of yours. This is what we want.
Metrics/LineLength: Line is too long. [98/80]
This is a good example of why we should not log an error.
is it really necessary to keep the URL as string?
Is the `key` argument used in this function?
Do we want a special counter here?
Should this be named `Route-auto`? Or is the resync flag being used in the log4j build that contains all installs?
can we call this `Entity` instead of `idx` ?
Please remove the #define remote version (and the one in `build-system/tests/constants.py`).
This is a bit confusing to me, how does the differentiate between the two?
I think this is not the right place for this. It should have an `proto` attribute to avoid an extra `Object`
This is the only change that affects TF TF and I don't think this should be removed.
Can you test that this is a test case?
Style/RescueStandardError: Avoid rescuing without specifying an error class.
Should we add `[DoesNotReturn]`?
I'm not sure if we should log an error here... or is it ok?
If `callback` is passed to `input` (or `input.clone` in) and `input.clone` can be passed in (or `input`) to it.
Please revert unnecessary formatting changes to separate PR from separate PRs.
I'd rather not have the 41 in this case, because the `IotxAddressLength defines` and `IotxAddressLength` are used in the code base.
this is a good idea to me, can't it be a separate fix for `a` ?
Why do we need to set `contextHeaders` to `0`?
I would suggest moving this line out to the top of the file (if you are already there)
This will be a change in behavior, I'm not sure why this is necessary.
why do you remove this?
I think this interface is not used anywhere.
This is the fix for an unrelated error.
I think this is the wrong place for this.
Why does this need to be public?
This is not the case for the number of difficulty.
Why the `fileblob://myvar.txt?bucket=fileblob:///foo/bar&decoder=string` ?
isn't it weird that this would have been called multiple times?
We could just use `N` in the docstring.
can you make it a version?
this should probably be removed
I think this might be too short.
We should probably add this to the `appendStatusStatus` struct.
The new value should be minified.
I think this is better named `LocationArray`. `objectid` is more appropriate here and more clearly in the other file, but maybe `objectid` is better.
remove unused imports
Is this related to the PR? I think it should be renamed as well.
This should be `import static junit.framework.TestCase.assertTrue`.
I don't know how to get the attribute name, but it seems like it should be an error rather than a hard-coded value.
This is the only change that fixes the issue. It is also possible to return the value of `null`, and we can use `internal` as the return value here.
Should we rename this to "MaxMemory" ?
Shouldn't this be removed?
@deads2k do we need to keep baseFeePerGas and baseFeePerGas for most other cases?
Can you make the rotation2 interface private and use the same interface?
why not `PartitionPerSplit` as default?
NIT: We can probably drop this one.
I'm not sure if this method is needed. `send_command` always returns `options`. If you want to check, then you'll want to print an empty list of params (or `options`) otherwise it may be useful.
Why is it necessary to set `--fmt-timeout` now?
Do we want to also mention `AllowConnectionWindowIncrease func` on the page `sess Session`?
Why not keep the `new_ncr_proposal_path` here?
No, it is a list, not a list (same for the other one)
I'd be in favor of just doing this with the new `switch` below.
I think it is more readable if we just return `value`, but I think it's not clear why we don't do that.
Why do we want to change the type name? Where is it used for?
Line is too long. [111/80]
I don't believe this should be a pointer in the test.
I think you can use `extension_condition` instead.
I'm not sure this is the right approach. This should be a separate sentence.
I would prefer if the sample code is more verbose than `*`.
why do we need a separate separate separate here?
Import packages with wildcard import. Keep two separate imports.
Was this a typo?
This test doesn't seem like it should be in this PR.
I don't think this is necessary, since it is already in signed_in?
I think it would be good to add this to the `pkg/errors.go` as well
Shouldn't this be `[` rather than `[`autoRowSize]`?
This is the fix. The pylint disable was not correct.
Does it make sense to also print the value of `extraceptor` in `gocloud.dev/blob`. It's probably not an issue here. I'm not sure if this is a bug, but I'm not sure if there is a better way to handle this here.
Final newline missing.
nitpick: maybe rename this to `UnrefToFinalResOp` or something.
@jvillalpinel - I'm not sure this is correct: if we have a `GET_ELEMENT_RECT` flag, then `get_defaults_to_json` will be `True`, right?
This is an API break. It's not an API break. If it's a tuple of a tuple it would be useful (it's in a tuple with a tuple).
Shouldn't it be `GET`?
nitpick: this is a great error to check whether the child isn't available
I'm not sure why these two lines are necessary, since `hash` and `hashCode` are used in `pkg/api/vcr`/`pkg/api/vcr`
This is a bit ambiguous, we should not use the dict. If we can use the dict to determine the behaviour, we can add it to the ``test`` and then use it to generate the dict.
Can we just call it `chainID` or something?
I'm not sure what the difference was here is, but is the flow still present in the log level? If that happens, we can't log it and log it at all, so the message is not clear.
Why this is here, but it seems more reasonable to me than just removing it?
Just noticed this - I would prefer to see a method that returns the plan, not the openFileCost and not the openFileCost.
should we log it as a warning?
Align the elements of an array literal if they span more than one line.
should this be `Signature`?
This is not a good way. It's a good practice to use a specific one, but if you want to use it in other modules, you will get a nice error message if necessary.
Why do we change the `parent_nodes` attribute to a `*`?
Is this a good change?
What was this doing before? The reason for this is to have a `long` argument, but not `0` because of the new argument argument.
I'm a bit concerned that this is the fix to `_variable_atomic_type` because `__len__` is a string, but it seems like it may just be used here?
You should use `empty($newConfig['Captcha'][$key])` here.
We can remove the `*string` here since we already have `internetGatewayID` already
This is a breaking change, and should be reverted.
could we update `create` to use the short version?
I would use `warn` instead of `selection` as the second argument.
This is not used, it's not used.
Is it worth doing this in a separate PR?
Why is this test needed to not work with the `program` tests?
Why is it needed?
I wonder if it would be better to use calling `SpuriousousTypeSet` in the `new InternalRecordWrapper` method instead.
Should this be globalize.translate('LabelHardwareEncoding', globalize.translateglobalglobal).
We should be using this in the event handler for the existing `else` statements
The `path` is not used.
Should this be a `validateParams` function?
Why don't we use the `*` in the `connect` package?
Line is too long. [85/80]
This is a bit weird... Can you explain? Why do we have a different name for the empty string?
We need a new({ for this, because the new({ may return false if there is a marionette.
This is a test change, but we are still testing that the chain is not passed.
What's the thinking behind passing a function here instead of a property?
This is just for testing, right?
why are we changing it to 0?
why is this changed?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
I think we don't need these `null` fields anymore. Can we keep the `initializer` parameter?
I think we should add `type Vector interface {` to `raise` so that users will see it in other models.
why remove from './remove? is it not needed?
@tnozicka this change means it is indeed the last step in the memory limits and we need to update it here.
why is this st.strategy?) now?
Nit: I'd rather not have this be a `const` and then use it to get the output from it.
Why are we not using this? I don't see any new apiFetch in this PR
Why is this being removed? Is this a bug, or should it be removed?
I think the first one was wrong.
nit: I think `yield Movie.deleteMany({}` makes more sense here.
@smarterclayton do we have an example for `klog.Warningf`?
Why are we adding this in `app/policy.rb` file?
Doesn't this need `var FEATURE_NAME = 'reports";`?
Is this really a good idea? I'm assuming `unix.Signal` is always `True`, and if so we should be sure.
This is an unrelated change. Do you think it's worth having a single `process.env.MONGODB_URI` as a name of the entire API as well (as well as `error`)?
lets make sure the device isn't available in the UI UI
is this safe with the logging?
this is a bug
Please remove the sample sample.
Should this be `UpdateAckInterval`?
I'm not sure if this is a good idea. I don't think we should do that. If I want to keep this, I would say that we should not do it for anyone.
this is very unusual. Can we put the command first in `appliances` and make it clear that the command is in there?
I don't think we should remove these lines.
Does the previous implementation need to be updated to reflect the new behavior? It would be better to have a test for that
why did this change?
It is not possible to use `bool` as the loss of the reduction, because `loss` is not None`
if we change the "writes" of `dilation=dilation` we don't have to change the "writes" of `saleor/writes/writes/writes` to `dilation_all`
The second parameter must be changed, so that it must not be used.
I'm not sure what this is supposed to do, is it really worth changing to use kdf['a'].plot(...) directly?
I would keep the same behavior as for `go` since it's not a valid build.
This is a change from `other.Spec` to `other.valueCount`. I would not change anything, but it's a bit confusing to have a `if (other.valueCount)` be a `if (byte i = 0; i < VARS_PER_TASK; ++i)` and it's a `get_queue_element()` that returns a string.
I would prefer a more general rule than a blocker (if you want to have this in a separate module, e.g. `mne/utils/_node_classes`)
why not keep the prefix as `is True`?
I'm not sure if this is a good idea. I'm not sure what the best way to check is is here.
Is this constant used anywhere?
I'd prefer to have this logic within a `defaultOptions.lazy` rather than `DestroyDestroy` since it is the default.
This should be a separate test
Is there a good reason why you removed this check? I think this should be in another PR and not in the future.
@bzz Sorry for the fix. I didn't realize I didn't have to do it now, but I'm going to be concerned about it.
Why don't we use the constants here? If the code is not in the code then this function should return an empty list.
The new `PodPhaseSelectors` field doesn't seem to be used in this file.
This needs to be done for each `json:"allowlisted_modules"` since it's not a string.
I think this is not really necessary.
This import should be removed.
I think this could be a `find_exe` property.
Nit: `return hybridMountpoint`. This is also a bit confusing if `cgroups2 path` is empty, and if it is `len(subsystem)== 0`, `cgroups2` is empty, the first argument is empty.
We should probably make this a separate change to make sure the transport isn't going to be an array or a list of transport fields.
Is there a reason this change is made in this PR?
This doesn't seem like a safe choice, but we could consider renaming it to `campaignSource`
Please add a `@Nullable` annotation for this.
I don't think we should require this to be an object here. I think the code below will be more readable and we can avoid that.
Why not just remove this block?
What about a different type of error message?
Can you explain why this test is necessary?
This should be `welcomeMailer.welcome_notification`
I don't think there is a good reason for not having these two separate functions. It seems to me that we don't have to manually set the token in the string. I think we should just use the string here.
I think we should use `NONE_on_missing` here.
why is this deprecated?
why is it necessary to check for the `GetEx`?
This is the fix.
Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
I don't think this is the right fix. The `:id` should be the default, right?
Please do not reformat the code. You have to do this for you, and it will be easier to keep.
Why does this change?
This is the only change that will make the file fail. I'm wondering if this is actually needed at all and not really needed?
why not just using a single row?
@caitp This is an improvement. Shouldn't the type be `isort`?
shouldn't this be here too ?
Why is `x` here, instead of `0` (or maybe `0_64`?) - is this a problem?
This is not strictly necessary. The ``set_format`` method should already have a package defined package.
Hmm, why is this needed?
Shouldn't this be a class constant ?
Extra empty line detected at class body beginning.
Do we need to specify backend now? If not, can we use `backend` or `backend_id`?
I think we should add a TODO here to remove all the `ListDeploymentChains` calls altogether, and have all of them return `true` in this method, to be sure that all of this functions are actually used.
this looks unrelated?
Just curious, how was this test changed before?
Why are we returning an error?
Is this really needed?
`handle` is a string too. We shouldn't need to add it in the parameter.
I think this could have been moved into `m,` like we have in `m.BackendServiceConfig.Image`.
Hm, I think this line is a great change in behavior... I think it's better to keep it as `tpb/"`. Then we would have to change this everywhere `vendor` is called.
Should this check be outside the loop?
need to remove lazy line
Is the `RequirementsMetCondition` the correct type here? Can we rename the variable to `_`?
I think this change was not correct, if `s.new` was the only one that is being used, we'll have to update `s.new` as well.
I think it is better to check for nil here.
I think the `CancellationToken` parameter is redundant.
I don't like the name of the provider. Why is it a pointer?
Please also remove `github.com/influxdata/flux/ast` from `libbeat.c`
Can you add a space after `//` ?
We probably want to test this now
This should be reverted.
Shouldn't this use `TiSession getSession()`?
Why not name it `addSampleImportTransformer`? It is a bit confusing and makes sense to me to just name it something like `addSampleImportTransformer` or something like that
Please revert the changes in this file.
Should this be `ServiceAccount.cluster.json` ?
@dvoytenko is this the right place to put this line? It is not used anymore
I don't think we can remove it from the code.
This is not necessary. You can just inline this function in `init()`
This is a leftover from the previous pull request.
Is this change necessary?
Shouldn't it be `cmd` for consistency?
`assert headers[Host", count=2]` is a bit vague.
Is this a debugging code? I think it's better not to have `node.AddNewBlock` as the default argument here.
This change should be in `title=1.05` instead.
why are we removing this?
I think we need some kind of test here to make sure we have all the data being run in `Admin.go` and some are not supported, but I think it might be useful to have some sort of test cases in `Admin.go` for this. We need to be consistent and have a separate test case for the `this.SealedEnvelope` for this.
can we make this a dict of the same number?
Let's keep both `isView()`.
Why not put this in the `init()`? That's a very generic method and could make things more readable and clear what it's doing.
you can remove this line
I'd call this `exec_bundle_ Repeat` because `exec` is a string and doesn't need to be a string. It's a string.
Should we use `fetchGetURLChannels` to get the `URL` from the `getURLChannels`?
Nit: I'd prefer if these two import can be removed. It's already in the googlecloudprofiler, so you can import it from `cloudprofiler` to be `type` by moving them to `util` in the module.
`cancel` was declared within this method and goes out of scope at the end of the method, so I removed it.
This was a bug I found on my machine
why not use the new config here instead of the new one?
This change seems unnecessary.
This should probably be `where TInstrumentation == null`
This test doesn't test the `project` class itself -- is that what we want?
Is this still used?
I'm not sure this is the best solution. The user will see an old TODO with it, so we will need to check if there is a way to get the latter label from the logs.
I think we also need to add this to the index file. I think this is fine too, just curious.
Please revert this change. The other classes have changed the names of the metrics
This doesn't look like it is being removed. Is there a reason for adding `@trigger_error` to this method?
What is it? It's not clear how `codeMessageLimit` is used to configure.
This is a test change, we shouldn't test that the old test was testing this test before.
I think we can remove `IsWindows` from `Windows`, it will be a breaking change
I think you should use a constant here, it's easier to read.
This has no effect. Isn't it?
This was a bit confusing. If the `this.struct` was `nil`, then the switch will be `nil`.
This file should be removed.
I guess we don't actually need the `ValidateSEmailProvider` here since it isn't a user-facing setting? (I know the code is not using it as a `boolean` but it's a `set`)
shouldn't this be `email` and `skip`?
Please make this a constant.
this is the main change. can we make it so it doesn't have to be a separate patch?
I'm not sure if it is worth mentioning the fact that this line is being removed.
There are a few more calls to this method. Should we keep both branches?
please remove the log4j test case as well
`bufferSpan` is a better name, `TYPESpan` or `TYPESpan`. I think this method can be used to avoid the correct size of the `TYPESpan`
nit: not related to this PR, but we should not expose a variable name. We can have it as a constant, so it can be improved. It's not obvious why it's a function.
I'm wondering how to handle this case. Is this intended ?
Is this used anywhere?
You don't need this - it's always used in the file (which I don't have the `script` object, it's used everywhere in the file)
I think we still need to runLoop when the loop is on line 435, and the loop is on line 433
I'm not sure what the best way to check is is here. The next time the weights was created is created and this can happen, but the next time this is being called is created, this code is not written. I'm not sure how this is used. The code was not working correctly and it would need to be done to the next time this code is written, but the code was not working before.
Shouldn't this stay as the `attr` argument instead of a new method?
Should be able to get away from using `Error == true` here and then just use `if additional; err != nil {`
This is not the default.
I'm not sure why you remove the h2o_header_flags_t from the other PR.
Why is this not needed anymore?
Why not `processBuilder := bpm.DefaultProcessBuilder("sh", "-c", fmt.Sprintf("ls %s.chaos.bak", DNSServerConfFile, DNSServerConfFile).SetContext("ctx", processBuilder)`?
I think we should use this constant to make it more specific to `Maint` rather than `MaintP`.
Can you make this a `void` please?
I am not sure how to test this, but I think we should have an overload with a `String` for the name. Maybe `isSolved` or similar?
I think this is the only line that's needed.
I don't know how I could write this, but it's a bit hard to reason about. Maybe `config` could be a little more descriptive and `Error` is a bit confusing. Maybe `config` or `Error`?
We need an additional space between `:` and `:`
Should the `BackIdentifier` type be renamed to `ValidateOC` or something?
This should be `private`.
The `timeout` is used to determine whether or not the options should be the default (i.e., not the options), but it's not really an option, just to make it work.
why is this necessary?
I think it should be better to have a test or something to cover this case. I'm not sure if we care about it though, though.
We should be able to use a constant for the value here. It should be a constant.
This should be declared in a different PR.
These `should` method changes are not necessary, they are only used in the `purchases` model
here the block can be `nil`, not `0`.
I think this should be `object[]` not `object[]`
I think we can get the same error from the `timerNoUserLatency` instance directly, because the `userLatencyDuration` is a user-defined by the user-defined by the user-defined by the user-defined by the user-defined by the user-defined by the `time.Duration`. It seems that we don't have to pass the `*` instance, so this function can just call `time.Duration`. This will make the call `getDuration` to that function, and we can't have a `time.Duration` in the `init()` method.
Why not `parse_date`?
Why did you remove this?
when_org_changes is set to the default if the user wants to put the DB DB first, then we can remove the old one
Probably duplicated code here
If I recall correctly, this is not a required import.
Does this need to be a taskQueue? I'm not sure what the intention here is to use the enumspb.TASK_QUEUE_KIND_NORMAL is.
`AccessList` is not null because `AccessList` is already null, so it's not null.
Since we don't do this, can we have a separate function for each `list` that returns a `list`?
@mrajwa504 This is the only place where we use the flow flow for the PAL flow, is it possible to use the flow flow?
Can you explain this one?
Is it expected?
can you update this back? I think it's unnecessary
I'd call this `is_connection_complete` because it makes no sense to call `is_connection_complete`, then we don't need `const` here.
Wasn't sure about this. We have some sort of type design for other commands that don't have `int` or `int` in the rest of the code.
> If my strategy suddenly." is "in vertices" a fine word in my contract?
The GET_CAST_ISSUE_MESSAGE needs to be a GET_CASTING value for this flag.
I don't think we have any harm. What about using `Dictionary<string, object>` for the `Dictionary<string, object>`?
is this related to the PR?
@benhalpern Do you know why we have this before ? I think we should keep it as it was and add it as it was. It seems like the question is what is happening when you're not doing anything related to `session[:coupon] = coupon.code[:[:[:[:[:id])`, and it is a little bit more closely to me.
If you use the same indents below, please use tabs instead of spaces here and in the next line.
Why do we remove it ?
I think the code below is now incorrect.
It seems that we are adding `assert`s that it's not used anywhere?
I think it would be cleaner if we named this lowerDomainInResource()
I don't think we need to do this, we already have `to_html` which is a string.
What's the purpose of these changes? Is it worth having two elements, one for each call site (since they're all related to the same order?)
this change is needed, it's already done in the changelog
Should this use `strings.ContainsRune(allowed, r rune)` for these two cases just for clarity?
Is this the right place to put this call?
I think this check is redundant now?
Could we use `_` instead?
Why is this needed? If not, please make it explicit.
I would prefer the line length limit as the last two lines. This is not a big deal, but it might make the line a little clearer.
Please don't add this. We don't need to import `ProxyListener` from the `os.path.join` file.
This should not have been a valid value to store, you could use a simple `time.Now()`.
I would use a more descriptive name than `AgreementFilterTimeoutPeriod0`, since it is used to test the other timeout values.
This is a bit confusing, since we have a `-f` option, but the `-` option can be omitted.
Can you please move this up a bit to a separate method? This is a bit odd.
This should be `from boto.compat import six`.
Line is too long. [81/80]
why do you need to change this line?
Why is that needed?
The `//` file should be removed.
I'm curious how the previous code did not complain about this one. The new code is only used to set the `NUTRITION` field when you have the `ProductImageField.PACKAGING` field in the `ProductImage3D_paths`. Can we do this as an `Array#Array#Array#Array` instead? It would be easier to read if we can do that.
Can the error message match `containerEvent`?
Import order order with wildcard imports. Please revert your IDE settings.
I'm wondering if it might make more sense to give a default value for `bearer_token_file` to set this property instead of just setting it to `""` if it is `None`?
I think this should be `api_fixtures = []`
I think the indent is off here
why was this changed?
How about `s.CreateBucketInput`?
This file should be removed.
this is a bit weird, why not just have a list of values for the same format string?
Can you please move this up with `context` so that the code is only called from one place (with the `kms`)
@fmassa What does this change do?
Do we need these changes? I think it's safe to call this `all`
Why do we need to use `sys.stderr.write(data)` here?
If there is no actual actual error for std::string, should this be a constant?
I think this should be `self.collection`, `self.bucket` and `self.collection` as well.
This file needs to be reverted.
I think it would be better to keep this in a variable rather than expose a variable. `ctaLinkExternal` makes it a bit more readable.
This is not the same as `[_index]` above, but I don't see where this is needed.
@annando, is this a bug fix? I would think it would be nice to have a template with no template with other packages, not just "according to the template"
Is this something that could be done in the test for a reason?
Why are we testing the same functionality? I don't think that's a problem.
Why is this removed?
I'd suggest we set the default in ConfigModel as parameter. This is the default for ConfigUtil, but it should have been a separate thread.
What's the error code that actually changed? I'm not convinced it's just a warning that we're not testing this.
This should be `static` (and similarly `@private`)
I wonder if this should also be a part of `else if`?
Why the change to `JSONException`?
this should be a `break` statement and should be removed as the `case Blockly.INPUT_VALUE` below should be removed.
Please remove the annotation.
This one probably should use 2 spaces, otherwise it will work with 2 spaces.
I don't think you should add this. We should add `P` to the public API and make it non-empty.
Is this used anywhere?
This should be `return` instead of `this.fileSchema` (same for below).
I'd prefer to have the `startConnection` as a local variable and have it return the whole.
Why did you change this?
@michaelandre do we want to keep this?
I don't think this should be here or in the `self.isError` case.
Is there a good reason we can't just remove this line?
Can this be removed?
This is not correct, we can ignore this, but we can ignore the whole `subdir` file.
I'm not sure if it matters much, but this change makes me think that we should remove the extra `bytes` parameter from the `numTermDeletes.set()` function altogether. I'm not familiar with it yet.
fields could be prefixed with `'required_with:password|`
why not use `then(keys => keys.join(''))).join()`?
I'm not sure about this, is that going to make it clear that the STATE_FIRST_TIME_EMPTY_SUBJECT is used in the same way as the other two methods (e.g. `public static final String STATE_FIRST_TIME_EMPTY_SUBJECT = "firstTimeEmpySubject";`).
Should this be a `relative`?
This is used only when the exception is raised.
Why do we need that in the `expands` module? I think that we can just call it in the `lineedit` module.
Why is this change necessary? The caller already has an `isHidden` field that does its own type, so we can use that instead.
If this is just one place where we set it for all tests, why not use ` assigns_CSPROJ_TEMPLATE_FILENAME` ?
nit: I would prefer to keep these fields as deprecated in a separate PR to make the API consistent and change the name to `ionClientWhitelistFile` or something like that.
Is this change needed?
I think we should change this to `is_array_format`
this will not work for me. I will try to get some unit tests for this
This should be just an experiment if the lock is not set.
Can you add a todo to set `cdLog.WithError(err).Error("Error updating Provisioned status condition")`
Is there a reason to have a `background=True` defaulting to `True` here?
I think it's better to have this as a separate sentence, and then we can test for the duplicate formatter exists in the first place.
Is this needed anymore?
I think the old name `apply()` is not clear here
nit: `//` is a bit ambiguous to me, it might be nice to have a test that checks if the path is null.
is this not a BC break?
@rhymes I have the brief docstring for this but I have not seen it in the PR yet.
Why do we need to specify `cache.Controller`?
is this import necessary?
We should add this to the `spec/approval_steps` file so that it can be removed.
Why was it removed? I'm pretty sure the `std::lock_guard` can't be used anywhere.
I'm wondering if `Etherbase` is a good idea to be explicit here but I'm not sure whether it's better to have a function that does the `base.nil` and use it here?
I think this should be `self.spec['work'].13`
I think it might be good to also include the `--font-*` option in the repo.
Why is the `Left}."` not needed here?
I'm not very familiar with the code, but I don't think this is needed anymore since we have two separate methods, and I think we should be using `Microsoft.Rest.Azure.IResource` as `Microsoft.Rest.azure.IResource` and `Microsoft.Rest.bzure.IResource` and not `Microsoft.Rest.azure.IResource`.
I would have used a "Cassandra tls verify server hostname" here instead of a "Cassandra tls" (and a "if the host is not set"), otherwise we don't know what to do with the "if the host is set".
I don't think you need this.
I don't think we can do this since disable.exit_code is not always specified. The log will fail if the user wants to create the iptables on a non-supported platform, but the log will be executed.
Are there any cases where `body` would be `bytes`?
Do I understand correctly that `tooling` is not a boolean here? Should we set it to `True`? Or should we only send the `tooling`? If so, why not just make the `.split` a global field and call it `True`?
Can you rename `Element` to ` ContextT`?
`$media->getContext()` is called twice here, because we need to keep it as a string.
This should probably be the first line.
Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
I wonder if we should just add `ddev.new('ddev', 'a')` in the `Ha` package?
I don't understand the purpose of `hive` in this PR. Why not `uri`?
This is the fix for all content variables, but I don't know why it was `None` (or any other options)
This should be handled by the `VenafiPickupIDAnnotationKey` module.
Nit: `index` is a bit simpler here, since it's a `port` anyway.
Can you please add a space after the comma?
Dont forget to remove this - it will cause some unrelated changes in the PR.
This will likely break a lot of code. I think we should try to move things out of the main folder.
This is the same as the old code. I think you can do `if d.SourceSnapshot == ""`, and you can do `if d.SourceSnapshot != nil` instead.
`user schema` will be called with `user.diffIndexes`. I think it would be more readable.
If this is a directory, then we should be able to use `DEFINE_string` here. I think we should use `stringNode` here, as the default is `true` and not `stringNode`.
I'd be tempted to move this to outside of the `getCustomData()`.
Why make this `public`?
can we call this `GetDeleteDeleteDelete`?
`if (m(m)` should be removed (which I think is what it was before?)
I think you're missing an understanding here.
I don't see any point in adding `CompletedTask` as an argument to `subprocess.Completed` in this function because it seems a very small pattern that it's in the constructor.
This is wrong. The `CLIImage` is already `nil` if `cd.Status.Installed == true` and `nil == nil`
Can you please add a `@Deprecated` after this change?
this was removed from the old node.
We should log this message as well.
Can you add a `extutil` field to this file so that it doesn't break anything?
This is a bit of a nitpick. What's the reason to make this a single call site instead of just a single call like `getURLNoParamsURL.String()`? I think it's better to make it clear that this is only used by the server, and it's the only way it's safe to remove.
Is this change intended? If not then it should be `throw new SessionNotFoundException("Session ID is null. Using WebDriver after calling quit()?");`
Why are the old versions needed?
I would suggest to use `is_scipy_error(h, msg, rc > 0)`.
We need to keep the old code and import code for the new code
Why do we need to newSchedule here?
I don't think this will ever cause NPE. The `project == null` check will fail if `x` is `null`.
Use `#include`s here.
Why not name the height as "Conf height"?
I don't think you need the `--false` assignment here, it should be `--false`.
This is a breaking change, but we should probably make the change in `lib/lib.yml`, too.
It's not immediately obvious that this is the actual way the DB is to update the `MakeUsermode` setting.
I think this is not the right thing. If the user is trying to create a new rec, the check should not be necessary.
shouldn't this be `~ExecuteCDP` or `~cdp`?
Should this just call `Tags.SetTag(Tags.Language, (ValidateOperationName, serviceName: serviceName)`?
I think it would be good to add a `.replace('CEST$", "+02:00");` with a simple timezone that does the same thing
Could we change this to be `Time` or even `Time`?
maybe we don't need to do this if we are just doing the `is_DEDEDEDEDE` above.
This was the one that was removed.
This was added to ensure it is only for debugging.
I think this needs to be `public`.
You need to do a similar change in #6040, as you did in #6040.
shouldn't we use the same exporter for each node?
should the old method signature be internal?
The test fails because `tcp_stream_modify` is not set in `scripts/tcp_stream_modify` and the test fails with `/tcp_stream_modify.py`
@franckc for the removal of the transfer. This should have been a separate change for the transfer to be changed in this PR.
I think the original version was correct here, but I think it's not worth it.
why not using MCTX_NUM_SIMD_SLOTS?
Why is this necessary?
This should be a static constant.
Can you explain how this works? It's not clear why the path is needed, why not use `===` on it?
This should use `Facades\BackendAuth`, otherwise we'll need to update the shoudl do the same with `BackendAuth`.
why is nano::send_block::epoch() not needed?
nit: `let cb_` is only used for webviewApiPromises_, so `let` is better
I don't see a reason for these two fields and not just a single class. Can't we just keep these fields the same and just use a `String` for them?
why not using an enum value here instead of an enum value?
Why is it necessary to return an error if it is not a `yarpc.InjectClients()`?
I think that you can get rid of the `API_BEGIN` function here and below.
Why not just `var/varvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvarvar
I think we need to check the id here.
Is there any reason to keep these changes?
This should not be necessary, as it will always be true.
This is not needed.
This is the main code I'm not sure about. I'm not a fan of adding a new method to `IsZero()` so I think this could be simplified to a `return nil` statement.
Should this return `true`?
@deads2k i'm not sure how this line works, if `inputPlan.Roots` is `nil`, then it will fail when there is a root in `nodeStack := make(inputPlan.Results()))`. I think that would make more sense to just do `for root := range inputPlan.Roots`
This looks like something that should be removed.
This sounds like an optimization. Why do you need a explicit `8080`?
Why not `const ndkPath = process.env["ANDROID_NDK_HOME"]` ?
is it possible to get rid of `if (calculatedStepSpeed < 0) {` and remove the `if (calculatedStepSpeed <= 0) {` block?
I'm not sure if it matters much, but I wonder if the manifest should be an `@` instead of `nil` if it's not the case?
Is there any way to make this else a bit more specific?
Can we rename `hasFromBlock` to `isLatest()`? It seems to have a more generic name for this.
Why do we need to include the header header here?
This should probably be conditional on the type `org_letters`, as it's an internal one. You'll also need to update `ncr_organization`.
please use the new VerifyTestClassNamingConvention, see above
can we use one of these for backward?
this was the only usage change I found. I've been thinking of the PR to fix this.
This is an API break. It's a separate PR.
why not use `metadata["seq"] = pkt[TCP].seq"]`? It is a little confusing to read the code in both places, and I'd like to see the `seq` field on the type, and have both read the type and read the order.
Please avoid using `import *`.
Space inside { missing.<br>Space inside } missing.
Please use `if` as the second condition instead of `if`. The condition is fine, but you can do `include '../../release.inc' if` is true.
@mhoemmen this is the fix.
This change is not related to this PR, please revert
We should probably have some sort of implementation of this method that does the same for other properties, as they are not really doing anything else, and it's not really what it does. This is just to be clear, I think.
This should be a property of the region-specific functions
I think we need a better way to do this in an unexported PR.
Please update copyright year in header
It looks like the `if dir != ""` above was added in the `else` above and is redundant now, so we can delete it.
We should keep both the `8510644963469898` and `948683`. The `85106449634` method is the same as `x1.94868`.
I don't think it would work, but I think the `exes` should be a `const` at this point.
This could be `out := ...` if we do not need to change anything.
Is this a good change? It seems like it could be a bit simpler if the `context` could be a `context.Instance` or a `context.Instance` that would be the first one and we don't want that.
Could you please use `Span addEvent(String key, timestamp)`?
this is just a nit, and should be done with a better return value (i.e. the return value will not be 0), so it should probably return 0 here as well.
Why is this needed?
Why not just call `retry` in the `isComplexMessage` function instead of calling this twice?
I would have added a check in `Cluster.jelch` here, as the default is `ClusterIf nil`, so I wouldn't expect it to be the same as the `ServiceSource.ClusterClient.cs`.
Do we need this? It's not enough to raise.
I think you should remove the line if you want.
I would log it here.
I think this is not correct. We are not using the `profile.setter` anymore.
I think `result.initialize` is not used anywhere, since this is a local variable.
This method should also take precedence over the entire signed page
I wonder if we should just make this `if` to avoid the `if`s?
Shouldn't this be `default`?
@mjkkirschner @korycins I'm not sure what to do about the change here, but this line is not correct. I would have expected the python version version to be `[0, 6]`.
I think you can remove the whole `generators` import.
This seems like it should be a separate commit, not a separate PR.
Style nitpick: we can also replace this by `&&` in `_private_install_url`.
I think we don't need the `mockDBcache` anymore, right?
I think you could import the root `github.com/jetstack/cert-manager/pkg/webhook/server/util` directly from `pkg/webhook`, and remove the `pkg/server/util` import altogether.
Why did you change this?
`traceId: 0, serviceName: null`, right?
Can this be removed now? (I don't understand the purpose of this PR if it is touched)
Should we be doing this now?
Shouldn't this be inside the `if not backend.get('group') == backend.get('group'))` check above?
Please use ` Platformd.Materialize` to make it a bit clearer to read
This is wrong as it is not possible for the format to be created, but I'm not sure it is the right place for the defaults, so if the format is created it should not be created. If this is an error and we should not do it for any other time
Is this needed?
This is a really unusual change, please revert
It might be better to move `R.id.share_file` into the `selectedItem` object
This is just for testing, but I guess the `volume` argument is unused now
Do not include the definition of this. You should use the private constructor. If you are not going to use it, just use the property.
This doesn't seem necessary. It is used in the other PR, but it seems a little strange to add the new `chainCopyCopy` class.
This is an API break. I would just return `false` if we don't have to.
The condition should be `if (!pFS_RESOLVE_LOCAL) pname->service == 0`.
I don't know the answer to: can you, but why don't you set it as default?
Is there any reason why you didn't use `^\w+\.` and not `^\w+/` like the other changes?
This isn't used, right? If not, please add it to the changelog.
I would make a `order` function in `build-system/utils/test-system-on-config.js`.
`html_files` will be used in `dir` by default. You can just use `html.format` here.
This change is not required since the application my-app is the one that is used for the application my-app.
This should not be here. You should add `// +build avr esp nrf sam sifive stm32 k210 nxp,!mimxrt1062` to the `mimxrt1062`
I think you can get rid of this `auto atom: atoms()` now, right?
I would prefer to see this as a global property in the `getConfig`
You can't change this, but this is a really big change.
I think this will be an expensive fix, right? The caller should do that.
Nit: `IsOnMainThread` isn't really used anywhere?
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Can you add a description about what this "if" means, say, in the future "if there are a few more instances of the same name, it's not clear what "if there are a specific name is"?
This change doesn't make sense. The `quilt` package is already used by the `de**` fixture so we shouldn't change it here.
This is a breaking change, but it doesn't appear to be used.
Should we add some docs about `timestamp`? I'm not sure if that is the right name.
I think it's better to remove this file from `options.ts`. If you want to keep the `options._catchError` below, it should not be here.
This is the only place where we create a custom `updated_at` namespace, but is this a problem?
we should also make the validation in a separate PR, but I think we can make this configurable
We should add `task-cpu-mem-limit` to the task task and then let it update the task task.
Can you make test cases like this one more specific?
Is this change related to the bug that we are not using `WaitForCacheSync` anymore?
What's the purpose of these constants?
I think the check here is still wrong?
I'm not a big fan of having this "artist" flag. I don't really like this part in general.
This is a bug fix
This is the main change that will be incorrect.
Why are you making a `Bounds.parse()` call here?
Do we need to get globalization from the container?
This is the main change. The default value of `false` should be `true` to set the value to `false` to prevent the NPE.
I think we should use Puppetfilefile here
This is the same code as above. The `global` is only used when `kds` is passed to `global` (the `KafkaSizeX` is true).
you should only need this if `config` is true
The `CCEututRegistry` value was changed to `-1.0` but the `CCEutRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryMKdF7e9e2e3e8e8; however this was just a mistake. The `CCEutRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistryRegistry provider.
Why not `!empty()` ?
Can we also delete these test files?
I think you could use `.sort.freeze` here, too.
Please add Gitea copyright to header of this line.
@tgamblin How do we know that this is the correct/:/ version?
Is there a specific reason to make this assert configurable?
Does this patch apply to all versions of the lint?
Does the consumerf need to be updated?
Can we make this more readable if we added `only pending` to `send_notification`?
I don't think we should set the `config` to the default anymore.
why not only `time.Sleep(1 * time.Second)`?
This test was only working with `mode_manager` in this test (which was not working before). The `mode_manager` was removed and the new test was not being removed.
Although this is correct, let's remove it.
This should be `of cref="TracerFactory"/>`
I'm not sure if I like this. It will be better to have `pants.util` and not `pants.util`, so we can get rid of it.
@t3on I think we should just leave this as-is.
I guess you don't need `getTrue()` anymore?
This is a breaking change. I don't see a specific reason for it.
Do you know why this was there in the first place before?
why are these tests different than the previous one?
Not really sure how I feel about the message being set to `true` here. Should we be explicit about the `send`?
Why do we need `*args`? It's not a `reflect` but it's a `reflect`.
This one isn't correct. You have to pass `_tcslen` into the `_dr_nlen` function which calls `_tcslen` which does not work. You can call `_dr_nlen()` directly in the `_tcslen` method.
I'm not sure why this test is passing, now it's not working correctly.
do we need these changes?
I'm not sure what you meant by this. I think it should just be `isinstance(..., inputs)` and not `Object.defineProperty(vnode, '_original', vnode, ...)`.
Why did we remove the `auto begin` argument? The variable name doesn't match the variable name, which is the same as `RDKit::MOL_SPTR_VECT::const_iterator begin`
I think it is better to keep the `pending_ptr` action, as it's an action.
I know it is not entirely clear but what happens if `key.ToStringSlice()` returns a `default` (or any of the type) but `ToStringSlice()` returns a bool?
I think you need an extra spaces here
Please remove this line.
this should be -this.viewTop - etc.
Is there a reason for using `CoreHelper.transform()` to avoid any confusion?
I don't think this should be part of the API, it should be in the `else` block
Shouldn't this be `this.enabledTypes.some`?
I'm not sure what's going on here. Is this because `plifiedBasicBlock` is a `Path`?
I think we should just add the `ProtoElement elem` property to this method and the other method methods.
I'm not sure if it is still required, but I am not convinced that we should be using this method. It is not used anywhere in this class. But this class is used in the `if` statement. I am not sure if it is possible to fix it in the future.
why not to return the collection of the local typeConverter ?
This test is not needed, if you use `#createElement` it will return `false`.
I'd prefer to avoid a import import from this import.
I don't think this change is correct. It is not ahout.
I think the `byte` is wrong.
I think you should add `params: params`.
Nit: no spacing changes
This is a no-op, we should be using the `common` command that has a value in a context. I'd like to keep it in sync with the others.
Please add `@SuppressWarnings("unused")` to the interface
Maybe it is a good idea to do it in a separate PR, but we can also check for 'self.fetch("/options", {"anticache": True)"
I think it makes more sense to put this in the `configure` method. It is the only place it gets used is in the `configure`. The reason is that we have `configure` in the `dartfmt` function.
This file doesn't need to be removed
I'm wondering if it would be better to add these to the `header` package.
@deads2k @mmaxim could it be `azureDNS` and `azureCache`? It looks like the interface is not actually used in this PR.
It's probably best to remove the "Sign" part, as it's not a link to the form of the page, and not just a link in the link, so we can't just remove this "Sign" part.
Why was this removed?
We should add this into the `addLogger` interface as well, and add a description to `MakeLoggerForceEnableDebug` that is actually a public interface.
I would rather return an error here since we have the same error in `handle_Usage` method, but that's not a big deal. Also, if you prefer to add a `TODO` that will be fixed, you can add a `TestAccpod.dubbo.dubbo.dubbo.dubbo.dubbo.dubbo.s3.c` and then call `handle_Usage` to `TestAccpod.dubbo.c` and `TestAccpod.dubbo.s3.c`. I'm not sure if this is worth
Use the new Ruby 1.9 hash syntax.
I would just put this in the `step_body` method, since that's where the last step was.
nit: move `stepFuncsArray_` to the bottom of the file.
Can we use a `kv.get()` method?
Do you have any concerns with the default value of "internal"? If not, why not just have it use a different value of "internal"?
nit: can we put this TODO in the `lib/constants` package?
As we discussed, this should be `this.spec.fields()` (or maybe `build()` method)
I think we may not need this anymore as the searches has a searches and not a searches.
You should just be using a `@param`.
I guess we need to keep `cancel()` here as well.
It's a good idea to be readonly here, as it is not a property. This class returns an instance of `HttpWebResponse` object which is not used anywhere else.
I don't understand this change.
I think this should be in the `SCANNER_OUTPUT_CSV_FMT` file, not in the `SCANNER_OUTPUT` file.
I don't like the name of the variable. We're not using it anywhere else in the code, but it looks like we're not using it anywhere else in the code.
This will not be a problem, since `product->getRingInfo()->numBondRings(pBond->getIdx())` will always be true for the PCollection handler.
Is this related to the PR?
The data for struct and node still have the `Read` data. I'm not sure why we need to include it here, but I guess it should have been a separate file?
I would suggest using `BlocklistenerCancel chan` as its own function instead of repeating repeating it as a separate function.
should we remove this?
who will use `ThreadAgnostic`?
I think you can just remove the first line.
This should be in a separate PR, I'll open a separate PR to merge and fix this in a PR.
I think we should be using the yo version here. We should probably be using a different transport than the one in `checkState`, which is not what we are testing for the bugfix
@agramfort I noticed that you are removing this line.
This was the only place I can see. I think it's safe to remove.
why do we need to revert this?
Although this is a correct change, please write it as `use Thelia\Model\Hook;`
I wonder why this was added to support the file system, but it doesn't have to be included in the file itself?
Please keep this warning.
This should be renamed to `google.b.bigquery.Dataset`
Nit: `stateDB` should be a constant, so we can use `opt.get` instead of `opt.get`
I don't understand the purpose of this line, since it's not really doing anything, and just do it for the `-1` case.
I'm not sure if this test should be here?
I'd prefer to remove this line.
nit: this is a bit of overkill, but is there anything that could potentially be a bit more descriptive about what the value is?
this is not right. It should be `RSpec.configuration`. The `example_group_block` should be a config object, not a string.
Shouldn't this be an enum?
Is this a typo fix?
This isn't right, you should use `DEFINE_int64()` here.
It seems like there's a potential problem with this. Is there a specific reason this is not using the new `Hermes` option?
We need a `PullInterval` here as the `Converter` type will already have `pull_interval`.
I think you could use it as an api implementation, it could be done in another PR.
When will this be true?
Is this necessary to make this a `find_lib_path()` call?
this should probably be in a different PR.
I wonder if this should be called "camunda-integration" or "camunda-function"?
`if removed and ret'` should be added in `setup_grp_grp_ROOT`
This is not a problem.
Is this a bit of code where we could set `primary` and not `readPreference`? If not, wouldn't we have a better solution to set `primary` as the default?
should be added in `java.util.DefaultToken`
This will not work. I think this is the main code that is passing in a list of validatorsForPreviousBlock.
This should be in a try-finally block, as we are only checking that theopts is zero and not zero.
Can we move this down to the `modules-subscribe` folder?
I'm a bit surprised this isn't being called.
I think you need to add `--en-max`, `--requires`, `--build`.
I don't like this. I think it's better to put the original original files at the top of `#ifdef _future_ of `print_function` block.
I don't think this needs to be there since you are here. Also, you can remove the extra `@deprecated_detach()`.
@cra0zy is this not needed anymore?
@michaelkuhn should we use the default here?
Are these changes necessary?
This is the fix, but the issue with the line below is that we are not testing for a `hasContentVirtual` anymore.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
please add it back in #include "movement.h" #include "globalevent.h" #include "movement.h" #include "globalevent.h" #include "weapons.h" #include "movement.h" #include "scheduler.h" #include "globalevent.h"
why are we adding this?
I'd like to see some more in the codebase.
Isn't this a breaking API change? Shouldn't the one below still pass in a new function?
"... the specified sequence number for the new manifest......"
Line is too long. [91/90]
@chirimoya What do you think of this change?
I think this would fit better in the `@guidance_presenter` variable
This should be removed.
Why do we need both config and config?
How is this change related to the issue?
nit: I would put this on one line
This should probably be `@param string[] $matches` to be consistent with the other type.
Is this change intended?
I'd use `isinstance` here, to reduce the number of logs.
This is a change of behavior, because `e.Append` is a nil pointer, so I'm not sure if we can make this change. I think it should be fine to just return a `e` here.
@adamjstewart Do you have any concern here with gamepad?
Why are we using the `with` here, since we have it already?
I think we can remove this line
This is not a valid approach. Why not just call boost::numeric::bad_numeric_cast?
This will be removed if there's an `planner` folder.
this line does not seem necessary
Why do we need the `DependencyName` variable here?
What's the purpose of this?
I am not sure how this is going to work. I'm not sure if we can do it for a while.
Can we just change it to "columnSelected"?
this seems to be the same as the file in `classtool.txt`. Can you explain?
What's the reasoning behind this line?
I don't understand this change. Why is it necessary to call `sys.platform` here?
I think we should be able to remove this. It's a good change, we should probably make a copy of `config.Overrides` in the `config.Filter` and have it take care of it.
why change this?
This is an unrelated change, but should be made to the same commit.
I think the `s` is not needed here. It should be `deprecateds`
can you change this to rowPosition to rowPosition
This is the only place where we need to delete the client. We can't just delete the client.
@mfojtik this method can be simplified to: `User.add_delete_approver(email, [price, ...])`
This should also be in the `Iterable.java` implementation, otherwise `Iterable.java` will be invoked in the same order as in the other classes.
`Image.synchronized()`, the variable name should be `Image.synchronized()`.
This is the only change that needs to be reverted.
I'm surprised that this is actually not needed here.
This file should be removed
Does the tests not run on operations at all? It doesn't look like there was an error.
why pass it in instead of pass it in?
Is this not needed anymore?
Why did you change this?
It's a good idea to have an option to disable the log log here, as this is an output message and not the user. If it's not the case, I would suggest just making the warning message more descriptive. It's not really the case, I would suggest to use `[syslog-prot] incomplete message! (Enable trace log to see the message.)"`. I'm also not sure if this is the best way to go.
Maybe `C:\ach` or `C:\ach`?
why are we adding this function? why not just move it to the `RLock`?
Could you move the `forEach` block into a method and call it `SetSignature`?
Shouldn't this be `if(client == null)` ?
"used" -> "used".
Layout/LineLength: Line is too long. [82/80]
Let's remove the TODO here and just delete all `TestClient` calls below.
This is the same as `showAuthenticate()` on line 39, not on line 39, and will be removed. I'm not sure if we should be doing this here but I am fine with this.
Does this change mean you can just remove the error from `err`?
The `ArgsParser()` call should be changed to `isUp()` instead of `isUp()`
This is a bit of a hack. I'll update the test.
This is just an optimization, I don't think it matters much but I think the `upcase` block of code is right?
If there are two methods we should just make this a local, e.g. `variableOptions = variableOptions || {}`.
nit: I think we can drop the field name as it is not really an error.
Can you please explain why is this change needed?
I think you want to check that `ValueError` is `0`, right? That's what I did in #9343
This is the one that was removed.
why did you change this?
nit: `UIAHandler.handler.onForegroundChange` -> `UIAHandler.handler.onForegroundChange`. It's a bit odd to have the same logic in `setForegroundObject()`. I'm not sure if this is the best solution.
We should probably add some sort of "replace-partitions" stuff to this flag as well.
> [](start = 37, length = 1) I think this is the new behavior we should have in the `OSSBridge` branch.
Not a big deal, but this should be `_activate_user(id=payload['id']).with_for_update()`
Should this logic remain in a `if` block?
I think this should be `get_index` instead of `input_def`
Remove this TODO.
Should this and/or other components use this constant?
I would move this logic out of the function, so that it doesn't work in other places.
This will not work. We only need to do this if `BalanceRecord` is not present.
Why not just have the return type check in the call site (i.e. `wait_for_at_least_entries()`) ?
`e.IsDBVersionEnabled()` should be called here as well, no need for the variable?
Is this what we want? I thought that we had already set this to -1 for all languages?
Please use the constant `format` to preserve our standard `timeout`
I don't think this log should be in the log message, we are going to log the auth ID.
can you add the rule?
Is it possible the topBlock to be empty at this point?
can you please add a `getSolvedJavaLangObject()` function that does the same thing with the one in `getRoot()`?
I think this variable should be renamed to `RemoteMethodMethod` to make it clear what the caller does.
I'm not sure we need to use `.clip` here. We can use `allow_by_video` if it's not provided.
Why did you change this line?
I'm not sure how this works. This is a test case.
This is a breaking change - is this a breaking change as part of this PR?
@mfojtik why is this being changed? It seems to be only the case that the only time this could be used is is the only place where the code is being used is when the code was moved?
This is a good test, but I think you can use a `pytest.fixture` function in the tests.
this is not needed anymore
why not just `__getitem__`?
This will be removed in a few other places.
I don't think you need to define anything here?
Can we keep the `Initialize nullable` attribute and just use `value(Initialize sys)`?
`getExcludeCode()` is called inside `getExclude()` because it is called from `getExcludeCode()` and is called from `src/graphql/src/core/utils/utils.js`
You need to do `lib/TestCase`. You have to pass `nodeNS` to this function and then do it in the `TestCase`
Is it not needed anymore?
I think this check is too much work to understand and see if the `conform_to_schema` above can be removed too. If the code is right, I can change the `conform` to be something like `isinstance(arg, "conform")`.
Which functionality is here? It seems it would be better to have a default value here?
We should probably add a new line after the return type to make sure this is not needed.
I think we could just use the `TestCase` helper here.
I don't know what this means. What happens if the container isn't `null`?
We should add a `pendingUpdate` field to the `parentName` and add a `parentName` field to avoid duplicating the code since this is a separate instance of a method that takes a `parentName` and returns a `Node`
Don't use string interpolation detected.
Why is the function added here?
Avoid multi-line chains of class and ternary operators.
I think it would be more readable to test the result of `CheckCreateGenOfFixedValues`
We should be able to get rid of `kw::theme` and `kw::Open.Open::theme`, as this is a `const` statement.
Why not just call `ClientMap_.end()` here, since we don't do the same for all the calls to `ClientMap_.end()`?
I think it's not clear how you're passing in the `Key()` function. Could you explain why it's not doing that, instead of returning directly from the `Key()` function?
We should be setting this to 7 here, otherwise we won't be able to run `Unimplemented ErrorCode` twice.
I think we should remove this method now.
Can we avoid using a different `load_items` function here?
Can we move this to core.go?
I think we need to make sure the `show_img` is `-1` (or any other name) that is the same as `-1` in the torch.imread. I think that's fine, but I think we should just make it `-2` or `4` instead of `-2` so that this can be `-2` or `4` (and then use `-1` to get this).
I think we need to keep the old behaviour, otherwise we don't do anything with the old behaviour.
was this supposed to be `["["["["["/../test_common.cpp EXCLUDE_HIP_PLATFORM"]`?
@wmvanvliet @kalefranz i'm not sure if this change is necessary since LUN0 Storage is used for the source of the LUN0 Storage (which was already added in the LUN0)
This should be a debug line, otherwise it will fail on every iteration of the client.
Metrics/LineLength: Line is too long. [97/80]
I don't think this import is necessary, it should be added to `chaos-mesh`.
is this going to work for any reason? if this is a breaking change, we should also update the docstring accordingly
Was it intended to pass the wrong wrong object? I think this should be `volume.CloudMigrateDriver =volume.CommandLineDriver;`
I think this is the correct form for `to_not_to_True`
I think you also need to catch `Exception` as you're already exposing it in the previous `InternalLogger.Warn`
Looks like the indentation is missing here and the following `if` statement can be removed.
I think we can use `Ray.variable` here to avoid the duplication of the `err`s
`@return a copy of this data file.`
Ah, this is a pretty good example of a difference in this case. It's better to use a set of `Function` to get the size of the object.
Can the parent class be changed to `sprintf()` and `recording_start`?
@alalazo should be `Item::Lost` here
`StringUtils.isBlank()` ?
nit: remove newline.
I think we should remove the `assertIsInstance` call and assert that the error is returned.
shouldn't you be checking the error code here?
Do not see why you need this? I don't know if it's the case, but if you don't want to use the `[...]` class, please fix.
This is not the same as the one above.
We can't just do this. We need to add it to `metricsConfiguration.getProtocol()` because it is not necessarily true.
If we're doing this, do we want to also raise an error if end_level >= 1?
nit. You have to use `sizeof` in this file.
Nit: I think we should probably use `fmt.Fprintf(w, "bad request: %v", r)` here.
I don't think we need to change any of the other services in this file. Can we make it configurable and return an HTTP transport?
don't change the param type here, just use `data` to be consistent with the rest of the `rankNum`
can you update the description?
Why do we need this? The other two lines are already included in the function.
Import packages with wildcard is not recommended. Could you please check it?
I am not familiar with the `end` operator in the code base. I think it's better to keep this as an optional parameter to a `if not 'python'`.
Is this TODO intentional? Or do we need to do it for all the `opnd_get_base_aligned` calls?
Why is `copy` removed?
Is this a BC break?
I'd rename this var to something more meaningful, e.g. `config.clean_api_capability('revert, 1.x/revert.html)`.
Can the `version` be passed in instead of `setValue()` here? I would expect that we have `dependencyVersion` as an argument to `dependencyObject`, but it seems to me that this is the only case that we need to do is actually using a `String` method.
I think we should be able to use `SecretId = ...` here and in all other places in this file. We should probably have a `Secret` function that checks whether the secret is present, or not.
@mhoemmen this seems to be an unrelated bugfix?
This looks good. I would suggest a different code block.
We need to do this before merging.
this is a change in behavior, is it intended for tests to use a different class name?
Looks like the indentation is missing here
I would suggest to call this `isParallelism()` or `isParallelism()`.
please add a google google google headers, it will have to be updated to add the "NotImplemented" google headers to the service
The current_user.org.feedback_email_msg.html_safe because it's not an array of strings, so the plan doesn't need it any more.
this will need to be indented with the "enabled" option.
I wonder if we can make this configurable, and add a new method to it. @jcotela @kalefowczarek Can you confirm?
I'm not sure about this, it seems like the idea of having the `initialized` in the `initialized`, is there any reason this check could be moved outside of the `if` statement instead of the `initialized` block?
i think you can just remove this line
maybe we can make this string a constant so it's clear that `server_error` is not called when it's used, and we can use that in the future.
Is there a reason we are not using `violations` here, or can we just change it to `count`?
This seems like a bad idea. Why is it necessary to set it in 10 seconds instead?
This should be `find_or_create_by` I think.
We should use a constant for this value, it should be " INTEGER DEFAULT -1".
Maybe we don't need this and we don't do any validation for the route permissions? Or do we need this check somewhere in the client?
This file is already in the `Copyright_addons_packages` package.
This is only used for testing, right?
Please use `String#Equals(String, StringComparison)`
Can we add a license header here?
This doesn't seem right to me. I would say that you want to be able to get the `Optional` annotation from the `getExtendedTypes()` and the `getExtendedTypes()` implementation. I'd say that this should only be the case for a single field, since it's the only instance that is being used.
This should go to the next line.
Was this a typo?
nit: use `assert.isTrue(axe.commons.dom.visuallyContains(target, target.parentNode);` for this test.
@sureshanaparti could this break compatibility?
Could you add a `strerror` to the `subprocess_pid_get()` call here too? It's possible that we have a `OPENSSL_subprocess_create()` in `OPENSSL_subprocess_create()` in both `OPENSSL_subprocess_create()` and `OPENSSL_subprocess_create()` calls, but it's not really related to this patch.
why not move to `id="optin"`?
Can you remove the identity usage from this class?
You can use `is_tab` instead of `isinstance` here
It'd be nice to have this as a constant in the component that we could do.
This should be `free(desktop->views)` and `wlr_list_free(desktop->views);`
I'd consider making `LogEntry entry` a `boolean` instead of `Bloom`, since it is only used for one `get(BloomStructRef)`
This is an example of a better way of saving the keys of the keys.
I think we don't need to check both the `if _isUIAWindowHelper` and `if _isUIAWindowHelper` checks
can this be configurable?
The number of supported Tier names is number of supported T :)
Shouldn't we use `SuppressInstrumentation.Begin` directly, so that we don't have to use it here?
We should also update the ec2Svc interface too, right?
Is this still needed?
Do you need this?
I know this is not your change, but I think it's better to make it a "latest" method, so it's more clear what that variable is
Does this mean we have an explicit call on `reset_reporter`?
I think it's better to use it in `writeVersionScalar` as it is done in `io.prestosql.plugin.hive.lib.hive.transport.hive.util.hive.hive.Hive.util.hive.hive.Hive.Hive.hive.hive.hive.Hive.hive.Hive.hive.hive.hive.hive.hive.hive.Hive.hive.hive.hive.Hive.hive.hive.Hive
I would have used this interface to be consistent with the others.
Do we want to log the error?
nitpick: `boolean` is unnecessary since you have two distinct compactions.
This should be done in an `if (`. Also, why is this a separate PR that's used by the `if` block?
Use the new Ruby 1.9 hash syntax.
I think the "Are you sure you want to close a pinned tab" should be fine
this is wrong as we have `#chkIsAdmin`, the user will never see the value of the page
Is this still needed? If it isn't, I would expect the method to return a new instance rather than a new class.
How about adding a TODO with sche?
Why the change to 1?
This line should be moved into the `__count()` block (and the corresponding code in the `before_filter_count`) as well, to be consistent.
I don't think this is right, the `event.Service` should be removed from the `SqlServerIntegration` class.
I don't see the `////` part in our code. Are you sure there is a way we can test for it?
why do you need this?
This check was removed because the check is already deprecated.
I think the `TestCase` method should have a return type of `cerns`.
Please add the other plugin constants in this file.
Why do you need to change this?
I don't think you need this, you can just remove it
This is not the fix, just the real fix should be to fix the issue, as it is the one that is not a fixed limit.
Why is this change necessary? I don't see any new style in this block of code.
This file should not be included in any other file.
I'm not sure if there's any benefit to using factory here... I think we should just stick with the factory as the last argument in the `before_action` method.
Nit: I wonder if we should just make this a constant. It's a little more obvious what's happening here.
I think this is the right fix, we should just check the actual PCollection as well.
Isn't it better to call the wrong thing here?
I think it would be good to include `UseOrCreate` and `UseOrCreate` as well, since it is not a type of type `type Handler`.
shouldn't this also be `time_t *`
@deads2k this should probably be `opts.DockerfilePath == ""` and be fixed to fix.
Should this be a `service` struct?
this should be an index, not a boolean
What about this `if filename:` instead?
Is this still required in the `kubepods` list?
I think this should also be a warning. The user could use the constant `get_if` and get the wrong value here.
Can we call the function in `service` for clarity?
I'm a bit concerned by this being called `connected`. Could you make this a private variable and call it `connected_id`, or something, so that it's clear that it is called by other parts?
`create_no_window` is the default argument.
Why not just call `getNonStreamingMethods` directly?
`six.add_disable_index()`, as it's only used in one scope.
Could be simplified to `Dims zeros(X.size(), 0);`
Do we need to clean up the `.to_i` in an `export` or can we just use `export` as an arg here? Or do we need to set `.to_i` to an empty string?
This should be `adsense` not `adsense`.
I would suggest we use the name of the stock method instead, like `getMode().getMode().getName()`
This should be done in `realmConstructor.Sync.setFeatureToken(string)`.
I think we should be more specific about these fields, e.g. `destinationClusterIP`.
I don't see why we are using this.
Is there any specific reason why this is not just `Objects.requireNonNull(elements, "elements is null");`?
I think this would be more useful to have here `<div class="row past-pr">`
I'd rather not use the os.Stat here since it's a hard dependency.
This is a bug fix. It is missing a `InternalContext`
Is this needed?
Is there some reason we don't need this struct?
I'd prefer `duration.GetAttributeAttribute()` instead.
If we add a new field with a `prohibited_if` field then this field may be removed. I am not sure why it is here.
Shouldn't it be `npl` rather than `npl`?
Is there any reason to keep this?
Nit: `byte` and `allocationUnits` are all lowercase and less readable.
This is not needed, `ok` should be used instead.
is this a bug fix?
I think we should add `location.top` to the list as well, to make it clear it's not a valid one.
I think this check should be done in a separate commit
I think this is not the right place for this, since it will have the `ScopeOfflineAccess` field already.
I'm not really sure if we need to test this now since I was looking for `deliveries.clear`.
why change this?
is this supposed to be a single file?
is it necessary that `session Network Virtualization Encapsulation `GENEVE` is `planner- Http-quiz`?
This is the only thing that affects this class I don't see a need for the `instance_exec`. I'm pretty sure it makes sense to put a `_on_method` call inside `save` method.
Why this change?
I'm not sure if we need to make these public.
Please add a link to this file and use it in the test.
Shouldn't this be checking for the condition in the `else` branch? I think the `if` should be removed as well
Here we are using axe.utils.getNodeAttributes() which is not the name of axe.utils.getNodeAttributes() which would be better in axe
this should be a `SetPlaybackSpeed` (or `volatile`)?
I think this will make the tests pass on browser. I don't think there is any need to add this.
`this.shouldComponentUpdate` is only used in this function, not here. `this.shouldComponentUpdate = function (_props, _state, _context !== context)` will be better.
Is the original version still necessary? It seems like a test class has a typo.
Does the `!=` check for the allowedPostRequest?
This is not the only change required for this PR, we should be consistent and consistent.
why do we need it? I would have expected it to work
Layer between this and the below method
Please add a description to this field.
It looks like this value is no longer used, can be removed.
This is a very minor thing, but I think I would like to see that we are going to be setting the name here, but I think it makes more sense to just set it to 0 to the default value.
Shouldn't this be a `Collections.emptyMap()`?
I think we could use `<div>;` here, instead of `padding`
This should be a private field in `init()`
I think we need to check this against save-export-ok. I would suggest `f.Close()` as well.
Should this return a new location? I think it is a little confusing that there will be no service for it, but if there is a `setIeService` method we can just return the `ServiceBuilder` instance of `getBuilder`
It's not a bad idea to have these in the log messages in the build process, but we don't need the `Media.Workload` method
This should be `pocccccccc-e2e-6f6f6c5c5f5c6b5a6e2e7a5c6e7e7b5e5f2f4a4e2e2e4e3f7d2d3d3f5e5e2c3f5de2e6b6e5c5c7b6b5e2e3b5e4e8a7c5e8f4f4e3e2e7e2e2e
This seems to be the main bug that it's in a test.
Please revert this change. We are already throwing an error in the config file, so this should not be needed.
You could just use `@cancellation.user` here.
This is not the right place to put this import.
I'm not sure this needs to be here.
Is there a specific reason for not using `expect(distributed).to eql()`? I think the original version of `example`, `message` is too much for the user than the original version, and this is fine.
Why do you remove this version?
why did you add this?
I think this is the correct change.
We should probably move this above `createNode`, so that it can only be used in the places where we need to call `createNode`
This file should not be included in this PR.
The peer may be required in the logs.
Why not just use `DefaultBackendFactory`?
Please update the name of this class too
This should be `setter` not `MenuItem[]`.
I think it might be good to have a test case for this, too.
This is not a part of the fix, right?
How is this change related?
This could be a helper function.
This is going to be a little strange. Why is this being added to volumeStatusOK instead of just the volumeStatusOK?
I think it's better if you make `||` the debuggerAddress, and then you check if `!=`
The message is a bit misleading. Maybe it's an error, and not a message. If it's just a string, you could use `action_for_replace` to specify `True`.
Should we use a `Paragraphgh` instead of a `Paragraphgh`?
Is this necessary? Shouldn't we use `.first` here?
Should be "method raher than square brackets"?
Do you really need to make this protected? I would expect it to have a protected class defined somewhere
This is just a little bit of overkill, but I'd probably just call it `user_id` to match the other `User` methods.
What is this? It seems to be an unsubscribed value?
I would use `sports.name` rather than `sports.name`
Why are we logging this twice here?
The `auto` should be defined at the top of the file, as it is not used by the header in the file.
I'm not sure if we should add these to the `Unfortunateate`, `Unfortunateateate. Having the `convertToLoad` and `convertUser`, `FAILED_TO_LOAD` are not really the best way to handle the `Unfortunateate` class. I think we should just be able to use the `convertUnateate` and `Untoateate`.
this should not be needed, you don't need the explicit `prefix`
If this is a duplicate, should we also add a different name?
Why are you using the `Integer` type here?
Please remove the TODO
This property is never used. You can also remove the `PropertiesTagsNormalizationFixEnabled` field.
I think you should use the global variable here.
Why not `import util`?
The `while(digit)`. Isn't this a bit unrelated to the rest of the PR?
Should this use `models. ONEpose()` here?
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
I would add a license header here.
@smarterclayton do these have to go through API review, too?
Can we have this constant in the `azkaban.rm` class? It is used only from the module, so it can be removed in the future! Thanks!
I would keep this using. We don't want to keep track of the other changes to the `Configuration` list.
This needs to use an include include to check the use of an ifdef.
I think it is not necessary to delete the file here, it is not really related to the issue
@harikrishna-patnala What is this change for? If you remove `ResourceModel.isSupportedImageMimeType(mime)` from the previous block it is okay.
@bparees are we still using this? I'd remove it, as it is not used anywhere.
Can we add a `typeof == 'function'` check?
I'd rather see a word before the change. I think we need to be sure that all space at the end are the same.
Just to confirm: What happens if the input is an array?
please add py-LONG for the sanity checks on this.
I think this will be easier to follow the same pattern.
This is the only change to the executor address address.
Probably should be `setupLog.Error` here instead of `setupLog.Error`.
I'm curious if there was an impact of this line in #6029?
this is an unrelated fix
Should be in alphabetical order here
What if a `FAILED` property is added to the list of introduced dependencies?
I think you need to do a similar change in `MetricsConfig.utils.forTable`
I think we don't need the `step_key` variable here. It should only be used for retry values.
why do you need this?
@stevegsa just wanted to confirm I'm missing something... but why would we need to do it for `updateTaskENIDependencies(task)`?
Why do we need to set this to `DB__ROOT`?
This seems like a good idea to give more context to the user. I would say that we can set `cFlags = append(cFlags, f)`
This will fail when the last one is not configured?
Missing space before "hared"
`asing_data_converter.generate_ancestors_for_org` is a bit confusing, how about just storing the name in the test function?
I think this should be a constant somewhere, since there is no network in this file.
why is this changed?
Do we need a separate key for this?
I think it might be better to just have a method called `CompositeType.IsResponse` and have it return false. That's not the case for the `client.Exceptions`.
Please add `@type {number|undefined|undefined }`
I don't think we want to use `.data()` here.
Is there another way we don't support it?
What about calling ev.target.checked instead?
This test is testing `true` as the name of the test interface. We are going to keep it consistent with the other tests as long as we're consistent.
Is this needed because of the `spec['sys.exit']`?
If you add an empty line in the names, you can just pass `internal._Value = None`
I think you can use <msg> Not sure why it is needed, but I think you can use `EXPECT_EQ (ledger_walker.walked_blocks.empty (), 1)` and then use it in the other places.
I think this is a leftover from what I meant by `do_shlex_of_this`
This doesn't make sense - this doesn't make sense for the spec, right?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
You should just have an if. Also, you can use a helper function that takes the "heading" and then you don't need to have a non-h55 if you're doing that.
We should use use the use statement here.
I don't see this being called anywhere.
This file should be reverted too.
This seems a little out of place for `initPWMClocks()` - could you move the declaration to be before `initPathC()` and `initPathC()`?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
whats the point of this?
Should this have been a const or a constant?
The `.MaxUri` call shouldn't be needed here, since it's not an internal test.
Maybe a `return` here too?
`RelaxedReclaimPurge` is used to generate a purge in the param. `nodeId` is not a purge in the param.
why not using the `London`?
This change doesn't seem to be related to this pr ... please revert
why not use chain.NewSyncer directly?
why did this need to change?
Please change to "id" and "200"
I think this is a leftover from the previous commit.
Please use `ignore` instead of `ignore`.
I think we can just remove this and the other one as well, we don't need to touch this file
How do we get this back?
This is not a change in behavior.
I would prefer to not have the standard library available. (Or maybe it would be more useful to have this info as `ec2.temporal/.gen`)
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
This is the only change required here. This code is a bit confusing. Why is there some `ev` in `new_ev()`?
I don't think the "Periodic" part of the name is right. The purpose of the default metric type is `MetricReaderOptions.`
"in the time server tries to commit" is confusing. How does this happen?
This should be in the same PR as the others.
Is this necessary? It seems like this would be a change in order to use the `[0]` in a more general-friendly-friendly step, and if it's not, then we would get into this. I'm not sure if this is a good idea though. I'd like the `State::GetDescriptorPoolState::DescriptorSet()` method. The only thing we're calling this is that if a `State::DescriptorSet` is going to be used here.
This class should stay stay private, otherwise you'll need to re-enable it.
Don't remove it.
nit: you can use `Config.validateProperties(schema)` in the other places.
I don't think we should do this. It is not really required if the device is visible devices. If it is visible devices then there should be a loop on the same line.
Is it necessary to add `zpoolListRequestRejectCounter` to `zpoolStateUnknown`?
Nit: I think `code.match(/` might be clearer than `....$/`.
I'm not sure if `find_by(user_id: approval.id)` is the right place to do this... I think the `id` should be left as is, and the `@token` should just be `@token` if you're trying to get a `find_by` from the method
Can we keep this private and expose the private getter?
I think we need to make sure we have an `window` window in our test suite. Otherwise we will have two separate window and one for each call.
why is this a goAzureMappings? it's not a go anymore right?
I don't think we should be changing `--reupload` because we don't want a server already to be enabled by the user.
@smarterclayton do we want to also specify what this field is about?
Why does this condition check need to be done on `mSession.hasDisplay()`? If so, could we just make the `mSession.getDisplay()` check in `setActive()`.
Is this needed ?
Why do you want to remove this?
This was a bit confusing. I'm a bit confused by the change in the codebase.
This is a bit odd, we have to update form-and-errors in the `else` section. Should we remove it for now since we're in `enable_path` now?
Is this not needed?
We should be using `api` here.
I think this check is not needed.
why are we using a string here?
I think this might be a bit more helpful for a user to do.
`global.basefolder` should be added only when it's used.
@kring @dvoytenko is this still needed?
>pkt @marek-safar do we know what will happen in this case?
Why do we need to change this?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
why not just saySyncString is the time we first successfully applied all (selector)syncsets to a cluster. And also remove it from the machine?
This will break any existing `VerifyFingerprint` package.
This is an unrelated change that will cause lint errors.
I see that you've changed the return value to a function in the function, but the function in the function returns an error.
could we log it?
@tannergooding is this a bug?
This isn't correct, but I think it's good to use `ReadAsync` directly, which is the correct type for it.
Can you add a `TODO` here to avoid duplicating the code?
This should be `nextMedia = callback.getNextInQueue(currentMedia, callback.setPosition(0);`
Can this be `nullptr`?
You should be able to use the new `o General Public` package here.
This doesn't look correct. You can call `findUp` directly, but you can call `virtualNode.actualNode` directly.
This is unrelated to the change that fixes the bug, and it wasn't being done in my last PR.
Can we use the `substring` constant here?
We can remove the field.
This should be a `logger.info` since the second `skip_msg` will be set to `nil` even though it'll never be `nil`.
Remove empty line?
This should be `Disassemblers`
This is no longer used?
@jmhooper are you OK with this change? This is a breaking change, as the question is a lot more general than this.
such as your application is 18, not 18, but the application is 18. I'm curious why you did a "Which Dockerfile would you like to use for building your application's container image."
Why are we calling this `setOptions` now?
@Pearl1594 I think we want to make these `@since TODO`
I'd prefer to keep the Reader here, but I can't think of any better name.
I think we should keep this, otherwise it would be a little clearer if the `num_bbs` is not set.
nit: move this block down with the `LOG.info()` call?
@mmaxim This should be changed to `k1`.
@Selda901 Isn't there a reason we're using the the `Article` of the `ShopBundle` here instead of the `Article` of the `Article`?
This is an interesting change I would say. I'm not sure if we should change the message to something like `type.format("%s in Saleor.describe()`.
Isn't this the default?
I think this is the right place for this, but I think that the user will need to use something like g.auth_header. I'll create a PR and update the code to make sure they are not happening correctly.
This line is a bit long.
I wouldn't expect this to be a global setting. I think it should be an internal list of packages, and not the other way around.
I think this should be `deliver_now` since this is a boolean
This is a bit ambiguous. If you're going to pass the wrong value, then it's not needed.
What about a different check in `messageBody.IsEmpty && !messageBody.IsEmpty`?
I think this can be removed now, the `count` can now be `count`
This was the bug I found. The changes in this file are just because the order of the `sig_alg` key is in `_tls_hash_sig` but not in the `sig_alg` file.
Is there a reason for this to be 0?
We don't need to set entity here anymore
This is not needed.
Is there a better way to do this?
nit: rename the license to be more descriptive.
I think this should be a `@Nullable`.
These kinds of constants in the source are not a big deal, because they are only used in the `DOUBLE_` package, so it's better not to use the standard `DOUBLE_` package.
I'd suggest using `return undefined;` on line 659 for consistency.
I'm not sure this is correct. I don't think we'll be wanting to make it configurable, but I think the `attr_accessor` should be a valid `nil` for the default case. I think we should just remove the default `false` and `attr_accessor` in the `init()` method instead.
I think we can simplify this if statement because there are no entries in the `pkg/system/puppet` module
The commit message has been merged upstream.
why do we need to check for the input here, when `phOpen` is an empty string?
This is a very large point of view. I would say it would be more useful to return nil here.
This is just a small refactoring I guess. We can probably get rid of the `sys` check altogether now.
Extra empty line detected at body beginning.
Why do you need this here?
Is this file meant to be in the Dclosed package?
It looks like these changes are unrelated and made sense to me but I'm not sure. If these changes are unrelated, then these changes might break the test.
We need to do this in a separate PR if we can. This will cause the problem when it does not work.
This seems like a good change. Why is it not needed anymore?
Can we do a check here that `current` is null ?
Do we need to add `instr_is_scatter` check above? It is already used in `instr`.
I think this is the right place to put the `transport` param. I think we should probably be using the same variable here.
Why do we need to name it?
Please remove empty line
I don't think we need the `body` argument here, since we don't have to catch any error message anymore
Why are we removing this?
`Make_display_type` only accept retry if `--build-system/server/v1/...` was `true` but the other ones that were made `Make_display_type` were `false`.
I'm not sure this is a good idea, but it might be nice to add the new interface to the interface.
Why is this being removed?
Why not just move to `txcache.Verified`?
This is the only version that works with the other `ply` packages, so I would suggest to add `ply` to our `Kaitaistruct` and `KLackuct` to `ply`, then we can keep the `ply` and `ply` as the default. We can add an example here to add `ply` and `ply` to `Kaitaistruct` to `KAFAF` and `KAF` to `KAF` to `KAF`.
Is this a typo?
> [](start = 16, length = 1) nit: this should be `&& Bond::STEREOZ`
Are you sure this is the correct version?
Why not just return `sseq`? Then it is a good idea to check for `sseq < o.asflr, osseq` and then check for nil and then check for nil.
I don't think this is right. We're going to have a `engineTools` property.
What does this do, and why is it not just "Your profile is updated" ?
This is the fix. The check for `nullptr` is not needed, since the default value was set when it happens to be a `_features_found`.
This should be split across multiple lines.
Why do you use the `id` here instead of an array?
Does this matter for the `push` method in `_shared.jvm.Attribute`?
Add a docstring.
I'm not sure about the idea, but I think the name `repository` is not a good name here.
I guess you can remove these lines.
Why does this need to be public?
This method is not really needed, as it already does the phpdoc.
I am not sure how to test the test case, it would mean that you can't disable this test in the future :+1:
I don't understand how this condition fixes the issue. I don't know how to set `[is_false, 'no', 0])` and it seems the first condition will be true.
I think this is a little strange...
If this fails, it will throw an error. Is that possible?
I think it is better to use the same name `to packs` and have it `to packPlacklist` as the parameter
can't you use a const here?
This class is unused and can be removed.
This is the only change that affects TF 2.1.2.x.
What is this for? I don't think we need this file.
This is just to be able to run into a race condition where `UpdateDeviceStatusBuffer` is being executed.
This is not a good example of how it should be set. Why did we need this change?
Was this a bug?
I think we want this method to be unique. Not a big deal though.
Isn't this supposed to be `str(only)`?
You can delete this line
should we change the function name too, i.e. `Attachment_v2_none` and `Attachment_v2_none`?
Should we add an explicit link to the service?
It would be nice to make a more descriptive name, e.g. `save_summary_data` or something, like `save_summary_data` or something.
is there a reason for this change?
Is there a reason why you removed this line?
Can you explain why these changes are needed? I'm not sure what they mean by this
This is not the right place for this. It is not used anywhere.
I would suggest to use a static import of CaseInsensitiveMap here instead of an explicit `new CaseInsensitiveMap<>()`
This seems like it would be more robust to add the `if` and return `true` if it returns a `null`?
This should be done in all the other PR too.
What does it represent? Is there no URL?
This will cause the build to fail. This will not work if someone sets a path to a path to a path to a path.
nit : this can be one function
We should add `Subnet` here as well.
A bit of a nit, but this is a bug fix that I fixed.
`Translation.aysaysays` is `why not `equalise_cubes.try`?
Should we just do a `err = utils.SignHTTPRequest(request, cs.AgentConfig.AWSRegion, ServiceName, cs.CredentialProvider, err)` instead of passing the error? (or at least have the return on line 118?)
I think it's worth mentioning why this check was removed.
should this be shared_values?
I would rather have a `handle_signed cert` that is not used in the chain anymore, and it's only used in one place.
I would have expected the size to be the block size in the future.
I would make the first `lile` part part part part part of the `FormForm` package and then call it with the `FormForm` on the `FormForm` package. The first part will be more clear.
I would prefer the new one.
If we're using the old API, maybe we should add a `@Nullable` for this parameter to the constructor?
This should be `os.path.join`
This is the only place where `$ `$header` isn't being used.
i think this is the main change
Style nit: This conditional should be on its own line.
Why not use `@private` from version to indicate it is not supported?
@cramforce is it possible to add the version to the packageImplementationVersion instead?
I'm not sure if it makes sense to keep this, but it looks like this is not part of the PR.
This test is testing the same as above and will be deleted.
Do you think "copilot-task" is better than "copilot-task"?
I'm not sure that we should use `this._prevValue` in the `this` model here since the value will be visible to the user.
Not sure if it's necessary to change the description here. I think it would be nicer to just have a `options` argument for the `2021` and then use that to change the behavior.
I think you should be using `==` for the function `replace` instead of `replace`.
`We're're in minimal mode`?
This is a bit of a weird name. I think we need to add a TODO to say that this is a very common use case.
Same as above. This should be `CatchBlockLogException`.
This should also be done in the `KOKKOS_ARCH_VOLTA70`.
Just to be safe. You need to change `modelzoo` to `torchvision` in the future.
This is not needed. `len(args) > 3 && above == len(args) > 3`
I don't think this belongs in the `super.update_trails.find_by` method.
You can move the `if repo.IsPrivate` inside a `try/catch` block. This way, we don't have to check `daemonExportFile` after it was already initialized, so we can get the old unit tests and remove this block.
Why not just use `api.googlesitekit.api`?
I'm not sure why the imageIO needs it, but this change seems unrelated.
Can we have a `Cluster` field that contains both the `Tags` and `Tags` fields?
This can be removed.
Is this used anywhere?
I think we can remove the `os.path.join(...)` part here and in the other files below
This should probably stay private, since we don't need it in the interface.
This looks like a merge error.
Why is this needed in the config?
We have `OpenTelemetrySdkEventSource.Log.DroppedExportProcessorItems(nameof(BatchExportProcessor<T>), typeof(T).Name, this.droppedCount);` in `OpenTelemetrySdkEventSource.Log.DroppedExportProcessorItems` which is the default for the "droppedCount" method. Should we call `DroppedExportProcessorItems` here?
This is not used anywhere, right?
I think this should be a constant. It's a number of values, so we should be consistent.
do we really need this setJwt any more? should we set the loginOptions itself also?
Can you use `!==` instead of `==` ?
This import is unused.
Missing space after #.
I think it would be better to use an enum here, rather than pass the ID.
This is an unrelated change.
I would prefer a separate param for this, `Certificate` should be a bit more generic.
Is there a reason why we can't just make this a `import` error?
Is there a reason why this is not `private_key `?
Should we make it clear the `IntegrationTests` is the one in the file system?
This should be `filter` and then `filterPriority`. The current behavior is to allow `priority` to be the same as `priority`, but I guess it is still `priority`, and if so we should be able to use the same naming convention for `priority`, and we can make this a bit more clearer.
These changes seem unrelated to the rest of the PR?
This is a very good idea to change it in `make-dir` to `make-dir`. It's the same thing as the rest of the codebase.
Is this a breaking change?
@jona-sassenhagen I'm not sure about this change. I think this is the right fix.
Can you also change the name of the file?
I'm pretty sure it's worth noting that this method can be called in the same way that the timespec is in the actual times.
Can you add this to the docstring so that it's clear what's going on here?
nit: we can move this to the top of the file.
This is a bit weird. I would just say "this method does not have an instance id", not "this instance id", not "this does not have an instance id"
I think it would be good to have a test with this option, but we can also add `verified: true` to `userInputState`, as the `verified` parameter has the same result.
Layout/TrailingWhitespace: Trailing whitespace detected.
Why are we setting these two lines? Shouldn't they be in the same line?
I don't think we should be returning `nil` here.
should this have been updated to include the fields in the constructor?
Is it worth adding an option to the constructor? If not we should add an option to the constructor, as it's not used anywhere.
Please add a space between `//` and `//`.
This can be replaced by the test function in `test_next_test.js`
I don't see a point of this, but is there a particular reason for that?
I'm not sure we should do this. If the cache was not being created, we should do the cache and not create the queue. If it isn't, the cache would be a good idea.
I think that this is still not a good idea to test the original model's original model's behavior. We should test that it is not a different model. I think that's better than having to check for `assertEqual`
`select-follow` needs to be an `int` type of `select-follow` (or a `t`), so it can be fixed by a follow up PR.
Is it possible for the C++ device to be 0?
I would call it ` RequestBodyTimeout`
you can get rid of this variable now that it does not exist in blog.
Do we want to make sure the `orderedBootstrapContainer` is undefined?
@fmarcosrdz did you find it useful to say "in general" or "does it mean that you don't want to run "megabytes"?
Can you please rename `!!label` to `textContent`? It's not a boolean, but a bit of a huge thing.
Please use `$options["tax_engine"]` instead.
I don't think we should add this to `ReadFile` in `pkg/configurable`, since that is how we handle it in `pkg/configurable`, and we don't want to add it in any case. We should just be sure that if the `cfg.ConfigTemplate != ""` and if we're going to get the value from `ReadFile` we'll end up with a value.
why is this here?
Since this is an array, I think it might be better to check the other `@object.published` methods instead to be consistent with the others (and other for example `if (@object.blank || @object.blank?)`).
@gianm this was the bug I fixed
Is this still needed?
Does this change anything? I thought we had issues with the `OFFCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST` in a way that's a public API.
This is a very minor thing. The type of the file is a `Type` so we don't need to be `Vectorized`.
Why is this needed? The function is not being called on the loop, so you don't need to call `abort()` twice.
nitpick, but I think this is a great name. Maybe `test_add_lambda_permission`?
This one also needs to be added to `config` as well.
I think this should be `!` instead of `skewFromParent`.
Shouldn't you use `entry/v1`? It looks like you're not using this anywhere, but if we're doing `entry/v1` then you can remove the need to add `entry/v1` as well.
I think this method can be called `getService` instead.
I think this line can be removed.
Thanks for the contribution! The `i` is still the correct way to fix it.
Trailing whitespace detected.
This is not a valid spec, it should be a valid spec.
This is a bit weird, it will return a map, but the list may not have the map. Is that what we want?
why is this in currency?
Should this be `tab#toString` instead?
It's fine to make sure we have a controller in the controller that the controller doesn't need the email anymore.
Here's another name, but `wlr_xwaywayland_start_display()` might be more descriptive.
why change this? (and why it is not clear in `src/test/`)
On the previous PR I'm curious about the extra whitespace here...moved to the `actionable` assignment and then doing `emails/numbers/icon-number-" + (step.position - 1).to_s + "-pending.png` to `emails/numbers/icon-number-*`, and then doing the `return` after the step.
nit: can we just inline this block? `RestConst.REST_INVOCATION_CONTEXT` is only used in a few places where we need to make the `RestConst.REST_PRODUCER_INVOCATION` call
Should we use the `UseJson.IsJsonPath` check here?
This needs to be reverted.
The name is misleading as it's used when the function is actually used
why do we need this method? I think that it is not used anywhere.
is it safe to set the `string=True` value?
Again, I think you mean "--mode=release" ?
Should this be a `@RequiresEngineConfiguration` ?
I think we should add this to the debug log message as well.
This will be removed if the maxSpinCount is 50000
I think we should have this return `StringString(argName, " must be greater than 0");` instead?
We're not going to need the `.find` here since we already have `.display_name`
@drcrallen are you sure that your key isn't correct ? I am assuming it will be used to get the key key from the key of the key.
Can you change this to use `CACertificate` instead of `CACertificate`? It's easier to find and easier to maintain in the future.
this looks like a bug fix
Does this mean that this will be a breaking change to your branch?
Shouldn't this check also be done with the `name` check?
Would it be worth adding an additional check to `/lib/blazer` to make sure the API is being used in the same way as the `/lib/blazer` namespace?
What is going on here? Why is it needed?
Should this be `var replacement = repl.Replace(ruleValues)-1])` ?
I don't see where it is used...
I think this should also be a `tabwidget.TabWidget`.
Why do you need this function? It looks like it's only called in one place.
I would move this above the "VarRename" block below so it can be removed.
why do we need this?
The Variable objects is always guaranteed to be a particular driver if they are always always a particular driver, so maybe this is better to be more specific?
This is a bit of a weird thing to do, but it seems like it's still used by some other `DocComparatorComparator` and could be moved to some common `DocComparatorComparator`. Is there a reason we're not using `T`?
I'm not sure if this is needed or not.
Why does this need to be `enumerable`?
Maybe we should add a `TODO:` here for the reason?
I see, that you are using the new version here, so we should be consistent and use this in all places. We can make sure there are no changes to the new version at this point.
This is a little strange. Why don't you use `int` ?
`C ApplicationRewriteCERN` was the only usage for `ChainCERN` and not `ChainCERN`
We should do the same for all blockPt.
Do the admv1beta1.Delete implement that?
Why does this need to be a separate column, to make this an attribute of OpenStruct, etc.?
Why change this to `minimumTaskCleanupWaitDuration = 1 * time.Minute`?
Line is too long. [84/80]
Is there any reason to keep the original one around?
why did this change?
Is there a better name than `is_content`?
The change looks good, but I don't see a huge deal of the point of this.
The `init()` function is used only in the `arg` module, so you can remove this line.
nit: can we rename this to `plusMinutes`? It's a bit odd to name it `plusDate` for consistency and I'd be in favor of having one of the `DynamoViewModel` method for consistency.
can we add a log message here too?
I'd like to avoid this being a `@return`
Is it `environmentFiles` for some kind of type index?
Can you add a `render_by` helper method that takes a `trail` as parameter? It would seem more natural to me. Maybe `render_by` or something more clearer?
@Pearl1594 do we need the `submitFlow` here, or does the `getFlowId` need to be re-used?
The `UpdateTableCapacity` call was only here, so I moved it to `DescribeTable`. The new `UpdateTableCapacity` call was only called on the `go` so the error message can't be removed.
How about adding a new one for the `WelchWindowFunction`?
@zjffdu Why do you need this?
This one should be alphabetically sorted
Is this the only place that could be used in this PR?
why not `*logging`?
I don't think we should do this here. It is a no-op, and I don't think this is an improvement
`undefined` can be removed.
why not make this `resolutionOp = op` and remove `GCOp` as opposed to `resolutionOp`?
`v` could be null, right?
what's the point of this change?
Can we use `id.Substring(1)` here?
Can this logic go above? I'm not sure we need to check `not_a_peer (endpoint, false)` here
It is not necessary to call `Dispose` when creating the copyright year (see the file system).
These 2 imports should go in the next line, and then in the next line it will be removed
This will always be true, even if there is no metric in the view view, it will be possible to get the parent's session part and then delete the parent's session part.
Please remove this extra line
shouldn't this be `format(source[0], 'html'` ?
Line too long. [95/80]
I'm not sure this is correct. `IsLogged` is only used for `c.Data`, so maybe this can be moved into `functionToken()`?
We should probably have a `validateSyncFromSource` function that returns `True` if there is a value that has `True` and `typing`
Why not `cmd/account` ?
This is the `StatusConfig` function that is used for a few lines later, so we should be doing a `New` here instead.
Is it an activity context?
I don't know how to do this, but I think we should keep the `imports` import
I would use a boolean here instead of `==` for the first line.
How about making this a `class` method instead of a `null`?
Nit: I'd call this "only non-empty fields"
I think it would be better if we could add a default value to the key in favor of a new key in case someone uses a different value.
Why not use an if.empty() instead? The code below is a bit too long and we need to check the length.
Can we move this import to the top of the file? We don't have the code that's being added to the group below.
Is there a reason for not just passing `operation string` to the span?
I think the original value of `ip` was wrong. The `127.0.0.1` is still a string. The value in `IPField` does not have it, but the value for `sourceip`.
We can't change this line. The `instanceof` attribute must be set in SearchAttributes, right?
I think this should just be `journalEnv != ""`?
It's not the case that restarting restart is expected to be the services.
You can do the `expect(object.numeric?).to eq(false)` check before checking the `true` here.
Isn't this already built in the build unit?
I think we should move this to `config.val` instead, and have the config in `close_base_url` outside this function.
I think this is wrong
`MaterializationOrObservation` is not required here, can we remove it?
I think you can just `sorted` without `./`
This shouldn't be here, it's not a package, right?
This is the only place where we need to add it to the list of files.
Please use PropertyMetaModel instead of PropertyMetaModel.
Is it worthwhile that the `netHashTables.hpp` header is in `netHashTables.h`?
This class is unused and needs to be removed.
We should probably be using LoadStateReader in LoadAccount
Isn't this redundant, since the localCache has been initialized to `unordered_map<HostAddr, std::vector<PartitionID>>`?
This is not correct, we are not testing what we expect.
I'm assuming this is a good idea to add the new parameter for this to be set in the base class?
Just curious, why the `== false` was not being set here?
Nit: this method can return `false` by default and in `Object#isVersion()`.
Is there a reason why this wouldn't change?
This should probably be a separate PR.
This seems odd. Can we call it `vm.createTag()`?
This is going to break some calls.
Please use a better name than "public static Guid"
This will break on older client. I think you can change `h.clientPort` to `2181.2`.
I don't think these changes are needed. It looks like the `IPathPack` usages are not needed.
I'm not sure how to test this.
I'm not sure this is the right place for this, but it seems like it should be a `resource.IsABuildFile` function that returns this function. I think you should return a `resource.IsABuildFile` instead, and then use that function in the `IsBuildDefFile`.
I think we should revert this file.
Do you think you should put this in a new constant?
Do you want to change this to `region`? If not maybe change to `region-east-1`, we can use `beforeregion` to align with the `json:"region,omitempty"`
Is there a reason why these test was failing? It seems like we're not checking the test in place to verify that the test was not running.
do we need these new fields anymore?
This was the only one that affects "having" above (and "delete") in the `RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
Can you also make it `Collections.emptyMap()`?
@mfojtik this change is correct. We should not change the type of `repo` in the `@Nullable` tag as it will have the type update in the `repo` tag.
`isMetricAttributeDisabled` is called only in `equals()`.
Why not kill kill on some hosts?
This is an API break. If you need to close a second time, I'd suggest moving it to a separate `done()` method and move it to the `client` class.
Was this used somewhere?
You could also just make this `if (2 - prob)`.
You can use `overflowQueue.getEntity` here.
This was the main issue, but the original issue was the `prev` was the correct fix.
`with blank line.` is a leftover from other places
I think we can have a `FakeID(1,AsUserOrTeam)` function instead of passing the function directly, and we want to make sure we don't have a way for the tests to pass.
this should not be changed, but I don't see a reason why it should be changed.
We don't need to call `setTime` anymore?
If the message is not found, then it should be closed before the message is closed
This is a good use case, but it is fine to use a timestamp here.
Please remove this
why change the size of the committee?
I think this is a better name. It is better if you move this to the top of the file.
Should the word "a" be "a"?
Why do you change the default value for less_precise?
This test is a bit of an odd place to run `BinaryAnnotation` and not `BinaryNames_mergesAnnotation` -- could you move it into the `positionBinaryAnnotation` method so it's not used?
Why are these changed?
This should probably be `The`
I'd rather we have a `with` statement here and add a TODO at the bottom of this `if` statement.
why is this not a global variable anymore? is it because we don't want to import from other initialState?
`joins(:video)` will need to call the `videos`.
should this be regexp.MustCompile(`(Encoded authorization failure message: true )].i
Should this and below just be `UnitTestDocTests.py`?
Do we want to make sure this works properly on all systems?
I think you can remove this function now. It's not used outside the `tagName`
This seems like a very odd place to call this. If it's the case, we should be checking for `nil`. I'd suggest moving this into an if block below and just do `return upstream.Start()`.
This seems to be missing something but it seems not used?
What's the rational behind that file?
Should we add a TODO to remove this?
I think this should be `ongs.String()`?
Is this a typo? It looks like you are trying to close `exe_ctx` here
Why did you choose these two lines?
I would use `.equals(RpcMethod.PRIV_DISTRIBUTE_RAW_TRANSACTION.getMethodName()))` instead.
It's not clear why it is needed here, but why does it need to change the first check?
We should probably be setting the names here, not just `// +]*]*]*]*`
`$clones` is unused, please remove
I wonder if we should have a `issueEngineUtilLogger` class for this instead of `ProcessEngineConfigurationImpl`?
should we call it cache to make it a pointer?
We should do this in `pip install` too, to make sure we don't need to catch it here anymore.
Shouldn't we check if status == Stopped?
Hey @bvaradar Do you have a test case for this?
Use the new Ruby 1.9 hash syntax.
Need to remove this `if not isinstance(self, series: 'ks.Series'):`
This should be removed.
I'm not sure about this. I think it should be removed.
Why do you change from input_library_bounds_by_iterator to input_library_bounds_by_iterator? This is a change in behavior.
Is it worth having a constant for the main thread? Or is it just a thought for this change?
Why is this removed?
I'm not sure this is going to work, since it's only used in one place (see the method signature).
Does this need to be Perf_Timer? Or did we need to make this package private?
This is very weird and not a big deal. If the `Open` case is `null`, why do we want to log an exception here?
This is the same code as in `wsc.connection`, not sure if we need the message.
I don't think we need this. The `file` class is already used in this class.
This is not necessary as we are returning private
This is the most important change I don't think we should change the name of the ` MachineNameLayoutRenderer` for this.
@mfojtik this line needs to be `ip6 = iter(ip6).next()`
> returnPartly [](start = 28, length = 7) I don't think this function is really needed? #Closed
This is the only change that will cause issues with `path.Join(tmpDir, output)`)` right?
Why was this changed?
I think this is the right place to do this? We don't want the change in this PR.
@caitp @cicdw I'm not sure why you added the `sw_vers -productVersion 2>/dev/null` part here, but the `spec.sw_vers -f2` part is needed.
We have this on Time.zone which is not the case. It's the case that we're still using Time.zone.today. It's not the case, so I just wanted to make sure we're not using all we're in the specs.
I don't think this will work with the `DOCS` field. I think it would be better to have a `TimeParams` that calls `jit` would work, so we wouldn't need to pass `null` to `makeCS` as the only way to get the `makeCS` value.
Isn't this a valid pattern? I'm assuming this is the only place it's needed in the `substitutionPatternName`? If we want to have it there already?
You can remove the `?:` from the `if` block.
You can't change this. This is a bit confusing, as this is a binary binary.
I don't think it should be the right default here. It seems we don't need to have a default value, so it will still be the same as in the `clusterRegionGetter`.
I think this should be removed from the `JsonSerializer` constructor and the `_serializer` field in `_componentSource`.
This is the `if` statement, I think it's better to move it to the top of the file.
This is a very minor thing, but I'd prefer to keep this line as `separator = "#{(separator, '-') * 80}"` since the `:` is the first element of `separator = '-'` and then use that if necessary. (The `#include: '-'`)
This is not needed anymore?
The `GetMetricPoints` is a public interface and should not be a public API. We need the method `GetMetricPointsAccessor()` which is a public API. We can use `Get` to be more consistent with the API and call `Get`
Should it be a string?
might want to remove spaces from the newline.
We can use the `CheckForNull` method instead. That way the common code can be called with a `CheckForNull` method.
Did you mean to change this back?
wow! Looks like you only need to test this case in `deliveries.first`, and if so please add one before `expect`
If you use a different approach, it's fine to use the standard value here
It would be nice to avoid the com.sun.org.glassfish.gmbal.ManagedObject.
I think this would be more efficient to just change to `:`
Should it be runtime_type?
Can't you just return `True` instead?
Can you please also remove the empty line here?
shouldn't we keep it as an old key?
this change is unrelated?
The correct name is `[assembly: System.Security.SecurityCritical]` (the name `[assembly: System.Security.SubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSub
Can we move this to `pkg/apis/meta/v1` and put it on the same line.
we should also add a checkstyle rule for 200, so that we have the 200 in a test suite
@Teckler -> ACE or ACE with Hability (this is a bit hacky, but is there any reason why these two were moved to `@author`? I'm not sure what this method does...
can this be `const auto edges_per_second << " node/sec` ?
I think this is a good idea to remove the checkstyle case. It's a little too much, because the check for `fbo.config.Mode()` is only called once.
I think this can be removed?
Should we have a better description here?
This is causing the CI failure to fail, since it's not working correctly, I'll fix this.
@danrot @chirimoya @wachterjohannes Could you confirm that this is necessary?
@bartonjs, do you think we should add this option to the list of these servers? I think we may want to move these disconnected to the disconnected.
This should not be the fix.
Can you explain why this change is made public?
this should say something like 'This field is reeds aangeheg.', not the field.
This should be `shredzone.flattr4j.model.User`
It looks like this line has a trailing whitespace, please remove it.
This test is failing on older companies, but I think that's not what we want.
Why do we need this property? Isn't it enough to add the property?
I'm not sure this is correct
@jimisa this is the right place to put this? I think the `ValidateFunc` should be used instead?
why are we adding those two in a lot of other tests?
@bparees do you have any idea why we have both `ComponentResourceManagerManager` and `ComponentResourceManager`? Is that a intended behavior?
Nit: `DEFINE_bool(opt_collapse_project_rule, true, "")` is unnecessary here
Shouldn't this be `self.arg.replace('{}', self._filename)`?
Should we set this to `GROUP_CHUNK_SIZE`.
I don't think the right way to fix this is to use a SQL_id. It's not clear from the purpose of this one. It seems it is a bit strange to have to store an enum and then use an `_GET` for it.
Wouldn't it be better to use a `determineNonce` method here, instead of a hard-coded string value?
I don't think we can remove this line.
Can we just initialize it to `boolean`?
@matt-gardner Is this correct? It seems like we need a version of 0.0.1 for 1.0?
This is not the method name. It is a little bit confusing. Maybe `hasResourceNameParameter` or something similar?
I don't think this is the right approach. It should be a `getMaxFeePerGas().get().getAsBigInteger()` method.
why don't you remove this line?
This is not used anywhere, please remove.
I don't think we should do this. The "isClosed" part looks good, but it's probably a bit odd that this is an anti-pattern.
why not just `AddStateChangeEvent` since we're in an `Allocator`?
Could this have a problem with `interface{}`?
I don't understand this change. It's actually used in this PR.
This interface seems to be redundant.
I would keep the old function and pass it in to the `timeBasedRotation` here.
I think this file should move to the top of the file
Please add a `const` here
`performGen` is a `JOBS`, but this may cause the exception to be thrown.
Use the new Ruby 1.9 hash syntax.
Can you use a strict validation for the new schema?
This test is testing the new behavior. I would keep it.
This is the wrong approach.
Can we make this configurable?
We need to add this to `fontawesome5_icon_mixin`, since that is where it is used.
I am confused as to why we are not using weight_(1) here, and in other places we do not want people to use weight_(1) as well.
Can you also add a `validate` method to this function?
`execute()` doesn't have a `get` method, so this will be removed.
The ` upload` import looks a bit off here, so this line is no longer needed. (It might have to be fixed in this patch).
can you please also change this in ` vector_ logrus...` to ` vector_ logrus...`?
Shouldn't this be in a separate commit?
Can you please explain how many such messages are done, e.g. "either a single node of `%ld'.", kv.second.getInt() * 1000" ?
I don't think this belongs in the `Class AuthFree` class. We should just make it a `AuthFree` object and have it return a `AuthFree` object.
why not just call the context on the call to `eventstreamapi.InputWriter`?
<!--new_thread; commit:3b5b3c3c3e2; resolved:0--> I'm not sure about this change, but it seems like we are changing the test class here...
Line is too long. [86/80]
Can we also add the "new", since that's the default value?
you are adding a second argument here, it is already implemented by the `is_key_exists()`
NIT: `is` nullable?
Do not use wsAppManager. It will make the file system happy.
Why was the `Client` removed?
Why is this necessary?
Please don't add ` axis=0`, just like this one.
I think you'll need to remove this import now that `CreateInput` has been added to this commit.
whats the reason to use `debug`?
This would have an issue if span was null, which will be null. This should have been the case, as in the case of the span was `null`.
Why do we need the external package here?
This is a bit weird, why do we need this?
Please add a `TODO(attemptRm, attemptTimeout);`
Should we log something here?
I'm not sure why this check is necessary. The test now includes `s.running` and `s.eventsEnabled()` will always return false.
I don't think this change is correct. The new functionality is a new object, so you need to update the `escapeExpression` below to work on the next line.
Why not do this check in assign({}, s = assign({}, s); in line with the above if statement?
I think the version number is wrong here. The version should be removed from the `date1` and not from the `report=True`.
Is there some kind of difference here that this block can be replaced?
Why did you remove this TODO?
There is a `std::lock_guard` in `Lock::COMCOMis.cpp`.
This will fail in some cases in case `!usertypes.KeyMode.passthrough` is `restore`
This test is a bit of a weird test (see the test above)? If I'm not mistaken, this test is not doing anything. I don't think it is necessary (it's not related to this PR).
Shouldn't the class be renamed as well?
This ` dom_id` is not needed in the `esc_record` method.
Why is h2o__tokens different than the other i?
I think this should remain remain. We have some sort of standard library version of the format, not just the format of the format, which would be more consistent with other stuff.
this is not needed, right?
This is not really necessary. `s/cltest/...` and `s/utils/...` should be deprecated.
Shouldn't this logic be inside the `if` statement?
I think this should be a separate commit
Would it make sense to log the connected info here?
Is the `DateTimeUtils#setCurrentMillisOffset` call necessary? If so, we should set this to `null` and use it here.
This was not used by your PR, but I didn't notice this before. If the footerText was empty, then it looks like there was a bug here. If the footerText was empty, it was empty. If the footerText was empty, then this was removed.
Shouldn't this be an enum?
You can revert this change
Does this need to be a pointer?
I'm not sure this is a good idea. If the user didn't specify the layout, it's probably best to put it inside the constructor.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
Do you know what this means?
this is a bug fix. We should just remove the explicit `idx` part and use it here.
nit: I don't think this will work with an `afterEach` call. I don't think we want this in the `else` block.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
Why not keep the size of 0 here and use the other count?
I don't think this is the right change.
we can also add a `add_reference :plans` like the `funder_id` is done by the `add_reference` model which is not used?
Do we need this?
Again, why is this change needed?
This is a good idea but I'm not a huge fan of the rest of the code, but it doesn't look like it will cause problems for now.
This is a bit of an unnecessary import but I think it's a better idea to keep the import.
I think you need to update the type as well.
What if I change the dblock into multiple threads?
We could also remove the TODO.
We don't want this spec for the request. The problem is that we have an `_check_to_end` error which is actually happening in the specs, but that seems like it should be `_check_to_end`
Not needed, we're logging the whole `log` statement in `log.properties`.
this could be `volatile` if you don't have a `use` statement.
It looks like `cov` is now `covInterface`.
It looks like the `EnvironmentType` is only used in the use statement. Can we remove it?
This is an unrelated change. It should just be reverted if it isn't needed.
Why is this removed?
Why is this change required?
Can we use a dedicated function for this?
I think we should change this test.
this is the place whereas it comes from
@jridgewell I'm a little confused by the fix. I think it'd be better to use the `accepts` in our test case. It would be nice to have a test for the case where we have `s.gateway modeForbidEndpointHandler`
`file` is a `dict` so this is an unfortunate change.
This change will break existing tests, but I wonder if we should revert this change as it was before.
This looks like a bugfix for the logIdAndTerm class
Line is too long. [82/80]
What is this? Is `init` a normal behavior change?
I'm wondering if ` component_count` should be a `list<Float>` instead of `auto arr_means`?
I think we should put this on one line instead of two separate lines
should this be `format(..)`?
Why are we using this in this class?
I guess this can cause NPE in some cases?
This is a little confusing to me. Why not call `Update` directly?
Oh nice catch. This will make sure we run a timeout on the client side and I don't have a better idea.
It's better to use an `LogWorkflow` helper in the `LogWorkflow` module.
@jadarsie what's the use of `listenbrainz` in here?
I would prefer a separate commit for this and a separate fix.
I think the naming is a little confusing for me. What do you feel about `username.any`? It should be something like: `@bridge.hasAlert("username.anyableableable: username, password: username, password: username, password: username, password: username, password: username, password: username, password: username, password: username, password: username, password: username, password: username)`.
`put` should be enough, to avoid `put` being passed in.
Maybe we should create the source config to ensure we are not actually running into the remote config?
I don't think it is needed here
It looks like the `driver.post_to raise_error` returns an error. Why not use `not_to raise_error` here ?
if this is numeric_only it should be numeric_only=True?
What about creating a separate class for this field? I think it is more readable and more easily in the future, I'd rather avoid using an `AtomicInteger` class to have it more easily easily easily.
I'd prefer to not add this to the public API. The only place it's needed is to use this interface. It would make the diff more readable.
why do you need this? you can add a type to the type in the string.
remove empty line?
This is the new column that will not have a column that has a default, so should probably be `null: false`
We shouldn't need to do this here since there's no `Artifact` property.
I'm wondering if we could have a method for that to return the dataset. That way we wouldn't have to check whether the file is created. This is a very handy thing but I don't think it is worth adding a new file.
Why is this in `__init__` file instead of the `RemovePrefs` file? I don't think it makes sense to keep it in this PR.
The previous logic here was correct, but it doesn't have to do anything to do with it. It's possible the `gcc.skip` function is actually being set to `pin-mongos`. The problem here does not seem to be that we are not running it at all in your test.
@mikedoanv @jaeilepp could you please check this one as well?
This is a bit confusing. Why is this needed? Does the `BaseMessage` still work for Python 2? Isn't it better to have a `BaseMessage.get` method?
Can we just add the `jsdom` to the `variable` package?
Shouldn't this be true only when the chain is true?
@rhtyd I am not convinced we need the second check here. I would suggest: if we have `visibleRepoName != ""` then `visibleRepoName != ""` would be better here.
I think the original version of this file should be included in the `config` package.
Why do we need an `internal` here? I don't see a need for this property.
This will be set in the build system, but will not work. This will cause the preview failure to happen. The caller will need to set this to true when the preview does not exist in the build system but in the case of running it in the build system. In this case we will need to set it to true.
This is a leftover from our current version of testing...
I think you meant `fullTableName =`
This is the debug log.
I think this should happen in `isOpen()`, not here.
This needs to be updated.
Is it possible to get some kind of data here, since `t` is a string, and not a string? If so, please make `t` a constant, so that `Write` will return the string.
This should be `pkg/util/byteutil`
It looks like the sgv was already imported before the open parenthesis. Is that intended?
Is this going to cause issues for the non-Python filesystems?
You can use `tizen- ||` instead of `mne` here.
This seems to be the wrong place to fix it. You could just check for both ! !
This needs to be done by the `@visibleForTesting` annotation as well.
This was a typo in the code.
I think the check in `statsd` is a bit redundant with the check above.
moved this to `@team_page?`
Why not throw an IOException here?
Unused method argument - snapshot_name. If it's necessary, use _ or _create as an argument name to indicate that it won't be used. You can also write as single quotes if you don't care about it.
We need to avoid `setuptools` here.
Why is this struct changed?
This should be `self.base_class_path = self.base_class_path + self.base_class_path], []`
I think it should be `EthAddress.Bytes(m *EthAddress)`
Is it worth doing this in a separate PR?
I don't think these changes are needed.
I think it would be cleaner to just use 'underscore' here, since it is only used in the code.
You can use `self.app.get('/')`, no need for variable name
Why not `continue`?
Can this be made `char * hiveTableName`?
Is this still needed?
I'm not sure about this one, but it seems that we can't just use the "resize" type of a config option. Maybe we can use something like "resize_image_enabled", and "resize_image_bad", or similar.
I wonder if we should make this a little more specific, e.g. "The type of this object depends on the event of the server attributes or not."?
It looks like these lines are the same as the first `if` condition conditionals, but the `!config.sync.fullSynchronized` checks for `fullSynchronization` and `fullSynchronization` checks for `true` (`false`) is the same as `!config.sync.fullSynchronized !== undefined` (here and above).
SealedSecretEncryption was set to nil in my opinion, right?
is this related to this PR?
nit: this is a bit strange, and could just be `@SuppressWarnings("unused")`
I believe we should not be using wildcard imports. We don't have to use wildcard imports
This was probably a bad typo IMO - we can just delete the test and just call `tf.FunctionalTest(t)` - which is the only test that checks for functional tests.
This line can be removed.
The excluded_portal_link is a bit confusing to me, as it's a bit confusing to me, as we're not actually using it as it is used in the `./` file for this file. I think it makes more sense to put the above `not in` and just use the "where excluded" as the default "if-in" in the `if-in` clause.
We probably want to make the copyright here
why is this needed? if user has already already added a `string`, so can't do it.
This should be `return data`
Can you revert this change? I think it should be initialized in a test
Nit: "has a set" -> "has a docblock"
This is not a `Task` method, it should be removed.
I think this can be removed now.
What's the reason for this change?
Layout/MultilineMethodCallIndentation: Align . has too many lines. [28/100]<br>Layout/TrailingWhitespace: Trailing whitespace detected.
I'm not sure about the situation where this is called, if I am not mistaken, this will not be an issue, because this is why the "new" behavior is being returned
Nit: I'd put this check inside `file.isRemote`
I would prefer if these were `Some`s instead of `catch(Exception ex)` because it doesn't seem like an unnecessary variable.
I don't think this is the correct place for this. We should do it for all of the other PoSt, but not the other PoSt.
As far as I understand, this is not a concern. If we're going to have any concerns with the new settings, we should not use any settings as the default. I think it would be better to have a separate separate `ReflectionParameter::getType` property in each iteration.
This method is not called. It is called by `getClosedBy`, which does not return the correct thing. I think this method is not called anywhere else in the codebase.
I think it might make more sense to use a `GONE` instead of `GONE` here to avoid an extra extra `not sure if it would make sense to have a `GONE` method, that is the case here.
This is a very minor thing, but it might be nice to be able to add a new `TODO` to this TODO.
Does this need to be `--object-prefix`?
@ruflin @ruflin I noticed that this is not a part of `default` but it was used in the main build system.
I think this should be `l = len(pay)`
Why did you change this back?
Why are we removing this? Is that what we want?
Shouldn't this be `@cleberts]`?
I'd be tempted if this is a bit of an overkill, but I'm not sure how to do it.
This should be `const TEST_STORE_NAME = 'test/'`. Also, should we be consistent and have `const` here?
Can we make this string a constant in `CLOCK_REALTIME_call`? This is a little confusing since we have the same name as `CLOCK_THREAD_CPUTIME_ID` in the file.
I don't know if this change is correct. If the user doesn't specify a block then `uniformBufferStandardLayout` should be `Alias` and the next block will be `Alias`
There's no `#else if` below. `#endif` below should be fine, or at least `#if defined(__APPLE__)` here.
I think the docstring should be updated too
Hm. Why is this needed? I'd expect it to be a span based on the span based on the uri itself.
this is not the correct error code, we are not going to actually remove the data. We need to make sure that every data is an error.
This should be `Expect("./copilot/.workspace")`
Do we know for sure that there are other types that contain the same source? I don't think we need the `Trail` attribute here since this is only needed in the `Event` namespace.
nit: I think we should just call this `show_NANOS` instead of using it.
Nit, please use `http.Stop()`
Let's remove the const and remove all the `controlCallback` annotations from `URLManager` below, as they are not used in other cases.
`ansible` and `ansible_api` were added to `devel` but not from `devel`.
can you please extract this as a separate commit?
Did you mean to keep the `_pendingRequests` private?
This is a bit confusing to me, as we are not using `find_by` in the `User` model. If we're not going to use the `User` method here, we should do the same in `find_by`, and use the `User` from `find_by` instead.
why is this test changing?
shouldnt this just be `bundle`?
These seem to be redundant, since they're only used in the `StructLayout` case.
The previous behavior was wrong, because the previous code was not doing anything, and it was only done once.
This is the fix that was here before.
why are these required?
I think this will cause a problem, we'll need to add a note to this change in the future.
This was a bug
@adirectRawBlock isn't the default here.
This was changed to only be used for debugging. I was going to keep it for now and make the pattern more readable.
We could make this function to add reload_scripts() and call reload_script() only if there are two methods.
I don't think you are intending to use this?
Please remove this file.
`from concurrent.futures import ThreadPoolExecutor, TimeoutError` is a bit confusing, how about using it in `heartbeat`?
Can you explain why this is necessary?
Why the license header?
Is `shader.words` still needed here?
is there a reason to use `upperBounds` here and in the `dbdb.sh.Type` case? I would expect this to not work as expected. We can use `fromParquetPrimitive(field.type(), stats.genericGetMax()));`
This might be a bit of an interesting thing to just do it for each call.
This seems like the wrong value to be a part of the function. Should I just name it "hierarchical_name"?
I don't like this. I would suggest moving it to `IngressClass` and re-use it in `build-system/common.js`.
I don't think you need the `request.reply` variable here.
Why was this changed?
We don't need to do this anymore.
We don't want to error on error, because it is in `Create()`.
isn't this an `driver.not_to raise_error(...)` ?
I'd probably move this line to after line 165 (which is too long)
Why did we remove this class?
@smarterclayton can you confirm this is the fix
there should probably be a check in the test that verifies the full path of the install was released.
Nit: I think the line above this import should be `errors.go`
Why are we calling this here? We have to pass a value to `KILL` in the constructor to get the event handler.
I am not sure if the test will pass, but is it possible to have the test case with no-optional response?
Why not `XattrValue []byte`?
If you are going to use the `strcmp` API here, you should use `assert(0, int)` instead.
Nit: no need to import `protocol/`
Why is this removed?
@rhymes @johansteele I'm not sure what's going on here, is it possible to make `deprecation_deprecate discard_flash_if_xhr` a default, or is this a special case for it?
Do we need to pass this in as an argument? I mean maybe it's an error if we do not want to know if it's set or not.
We don't want to have a default config in the schema, so let's make sure it's only one config.
It's a bit odd to have this in a loop, but it seems like it could be a `session.Map()` instead.
This is a pretty generic class. It's an API change. It might make sense to use the same name as in the other places where the `acceptedHeaderTypes` is used. The `acceptedHeaderTypes` is used, and the `integration` parameter is used.
Well, we are not going to use `.Dst` on the message because the message is the one that is in the first place. We should use `.Dst` to check the message.
Is this a bug fix?
`context` is not a boolean, so we can remove this line.
I think the order here is wrong.
I think this should happen after `if callable(feval):`
This is an unrelated change I guess.
is it possible to have a struct and time a struct here?
Why is this not a pointer?
Is the change to `string`'s type?
This is not right. It's just a case that `listenSocket_ >= 0` is a `None` for `|| 0`
do we have to update the view? if I am writing it back then we could update the page as well
Standards: Can you please add a space after the `if`?
This is a wrong import. The `StaticJavaParser` import should now be `[` (though we don't want to use it as a separate issue), we can just use `java.util` to import the `[` (i.e. no `java.util.utils.TestUtils.assertEqualsNoEol`) and use it here as the other `[`s as well.
Won't this package still be in the package?
why not just `result = execute_pipeline(...)...`?
Is `zvolWorkers` a better name? I'm thinking that this should be a `*ZvolWorkers = ...`
This should be a namespace, I think.
Is this needed?
Can you also add a `:type` after the comma ? Thank you!
@benhalpern Do you know why we need a `true` here?
I think this is still not correct because we want to be able to determine the message in the message.
should this go somewhere else? I don't see a use case for it
If this will return null, we will throw exception if a non-null value is not a null
`curl_retries` is not a name of the service. It's better to use a name of the service in the name
This could be in a `finally` block, in which case you could use the `finally` block to be sure that it will return true.
We should have a "compression_hint" flag here.
why the `basebase.GetTipSetStateRoot` method call and not only the parent?
I think this should be removed and not removed.
I'm wondering why we have to have `azkaban-k8s-secret` as a constant in `azkaban-core`
We should add `OnGCE` to `removal.py`.
This needs to be moved to the Bios-NULL table, as the bios-free partition is not supported by Bios, as the Bios_grub will have to be added to Ahoy.
Can you use the `ImmutableManifests` type?
Why not `Tools.ContainsKey(toolName)` ?
This is a regression from the previous PR. This change should have been reverted.
I think you can remove this line
why we need both `self.close` and `self.none`.
The `fetch` method is not used anymore.
Can you revert the spacing change?
Why are these being removed?
Please remove 'iter' from here.
This doesn't look right to me. It's a `-1` bit (it is the `-`). The rest of the file are not the same.
Shouldn't this be `using bundle.getRequestStreaming(context.getMethod()))` ?
can we make this relative in alphabetical order?
I would just remove this line since it isn't being used
I think this needs to use the interface too?
nit: `io` is unused.
@tgamblin @tgamblin Do you have any thoughts on making this change? It seems that the `source","DVN` is not always true.
This function will need to be renamed, to `s.rest.Repositories.CompareCommits` - I think it's not necessary to add this method to `CompareCommitsViaComparison`, and if the name is used, the function is used in `lib/v3.go`.
It seems that you can get rid of `errs` since you are always passing a `DataContainer` field. This will simplify things if you want.
Can we make this configurable and have it be 10 instead of 10?
This change was not needed, the new default was `false` (which is now the default).
Let's remove these now that `v1.X.ID.v2` is now unused.
I think this can be a static constant, and a bit better to be specific, since it's the default.
I believe the idea here was to use sw as the test.
This will fail, if you have a default, you need to use a default.
I think this will always be false, right?
Does this make sense in the `log.Error` call, if it is already in place to be handled by `log.Error`?
Should we be returning an error here for the case when it throws an error?
I think you should just check if the mocha is empty.
Please use `.encode()`
This is a bit weird. How about `Save(1)`?
@mfojtik why not just `ClusterInstallCompletedClusterDeploymentCondition`? It would be nice to have a test that checks the default value
I don't know if that's the correct place to put this.
Why are we not modifying this one?
This file doesn't appear to be used
`provider` is a `provider` object. I think the `provider` folder has a `goconfig` object.
Why do we need this check?
I would prefer to have this in a different PR. We can't change it if necessary.
`protocol` was unused now?
I think it would be better to move this check outside the for loop below, so it's clear that it's the default value.
This is a little hard to read. I don't think it is worth adding a default argument if you're already doing that.
This is a bit weird. Can this be `opts.fee == 0 || opts.feeSat == 0`? If the `feeSat` is 0 then it would be better to use the default value for the `givenFeeSat` value.
It's not necessary to add a method `rwm` to the `else` block.
The fact that `messageTimeout` is a number of seconds, is this what we want?
I don't think we should be using this here since it's not in a global state.
`text` is nullable
@bparees are you OK with this change? It doesn't seem related to this change, just wondering why not have `boot.bootstrap` return `true` and not the other one?
hol, why are we change this for False?
I'm a bit confused by the name here, I think it would be better to use `c <-chan struct{}` instead of `c <-chanClient` here, since it would be more readable than just `db.metrics.SubscribePull.Inc()` (or something similar?)
This is wrong. The `libbeat/unit/unit_test.go` file is not being used.
We should not use `log.info`. I know this is not your fault, but this is a breaking change.
This line should be indented with whitespace.
Why not use the `namespace` field directly? This is used in many places.
This is a change in behavior, I think we should probably just be calling `newWorkingSet()`.
This should be `debug` for the next line.
I think we don't need the `Converter{}` call?
(style) line over 80 characters
This is wrong.
This should be removed.
This is a bit scary, but I'd say we want the limit exceeded for a lot. Maybe something like "Retry limit exceeded for (the name of the limit is not in a single row, then it can be a little more descriptive. Maybe something like `RetryLimitExceeded_type_from_flow_to_secret` or something?
I'm not sure if the server should include the http path as is and not the url. Is that the case?
Should the assert still be here? I mean, if we are going to get a message, we shouldn't use a `TimeoutAfter` field.
The DYNAMO_OPTION should have failed as well, but the DYNAMO_ duplicated code doesn't really make sense.
Is it expected? If so, should we make it clear that this is a "and then" setting?
You can't change this to `#show_time[Float]...` because it is not a number of seconds. It is a little too verbose to have an actual query that the first time in a string is not `#show_time` but the first time of that string is `#show_time = info[:api]`
This is going to cause issues, but we need to ensure that we don't have to remove it for now.
Do we have a view here? Seems like we could use something like `createUserError` to determine if the session is set.
This will fail on older browsers
This is a bit weird... Maybe this should be a separate PR?
This is a breaking change as the default of `cd` is the default of `false` (which is the default). I think the fact that we have a bunch of `Customize` methods in the code is `boltdir_type`, but I guess this is what we want, but the default is `boltdir_type`, which I think is what we want here.
You should use the `tab.fetch` here instead of the env variable
can't this be 0?
this should not happen, because a lot of other tests are passing
Should we do a `with execa` and then have it explicitly the script?
This should be `ALIGN_FORWARD`, `Kind_ALIGN_max`, and `Kind_max`
I'm not sure if this is an improvement. It seems the only way this code would be to change this line so that when we change the default configuration we need to change in the future we can change the `@taskArgs` to `Get-Command "#{remote_path}"`
This doesn't look right. It is used anywhere, so I think it would be better if you just put the `.data()` call on the left side (and the rest of the `.data()` calls in `_get_value()`).
The `title` parameter does not seem to be used for anything else.
This is not used
Nit: I'd prefer the error message more descriptive: `if os.Stat(awsCredentialsPath) > 0`
This is now the wrong place to put the `Underlying` call, right?
I don't think we need this. We don't use this, it can just be `@private`
I'm not sure why we need a `.basename()` here?
The `to_replace` is not used anymore, so you don't need to add it here.
Can you please add `@Override` annotation?
Is this going to work? If we want to do this, we can move it into the `setAll(table.schema)` call to `setAll(table.properties).properties()`
This will be a little bit confusing, if the previous version of `opts.java_primitive_has_method = true` then the above `else if` below will be falsey, and the following `else if` below will never be true.
Can we rename this file to `StackName`.
This should probably also include the `default` as well to make sure it's not working correctly
Block has too many lines. [26/25]
I think this should be `Objects.equals(key, string)`
Do we still need this?
This should only be used if `form_layout=False` is a `File`.
This should be a constant.
this will not work for now. `realpath()` is called in `realpath_template()` and `realpath_exists()`
This is a bug fix? Can you fix it?
I think this is the correct term for `horizontal` to be an `GlobalGlobal`?
I think these changes are unrelated to the rest of the changes.
Please don't do that here.
I'm not sure if this is a good idea. Maybe `read.split.open-file-cost` should be an enum?
Do we need the `PKG_CHECK_MODULES` call?
Why not do this. It's better to do a property in `JsonSerializer.GetTypeInfo().DeclaredProperties`?
These are all the changes in this file, they are not really necessary
why the logger?
This is a bit of a hack, but it is just an optimization for the parameter types to be empty. Can we just call it `ModelType` instead of `RealPath`?
Can we just change the name of the parameter and use it `NotFound` to make the name consistent.
This is a nitpick, but should we use `generic_install_dmg` instead to reduce the amount of memory?
Maybe `verbose` is better, since it's more likely to be called `handle_time_Sleep`.
Why was this made public?
This field is not used anywhere?
why is this not the error?
Nit: we can use `getinteractive('ChangeStream', 'function')`
Please use `2.2.2` to build the directory with the same name as we use elsewhere.
Why not just make this a regular regular api?
Could we use `ServiceNameMappings` here, or just `EDIT.ToDictionary`?
The name `target` is always `remote_features`. So it should be `config` instead of `remote_features`?
This is a test, should not be needed.
why did you change it?
Can we add a more explicit message here to say that this will be true for everyone in this case?
Why not use the path path?
if (errorRowCount < cond->getOptionalInteger(0)) {
Is this used anywhere?
This should be a try-catch and not a try-catch.
This seems like a wrong place for this feature as the default behavior is to get the right behaviour of the page.
`@param theKey Either {@link Keys#SHIFT}, {@link Keys#COMMAND}.`
I think you need to revert the change here as well.
I think this is a good idea, but can't remember how it was, it's probably worth considering the `canner_index_id` value. I'm also not sure why this is needed
This is an API change that will create a `createOn` in the future, so you need a unit test for `element.submit()`
Can we have a test for this?
`public ImmutableList` should be `List`.
Why not put this on one line?
As I said earlier, I'm curious if this is a good way to get the same issue with a simple `GITHUB_ACCESS_TOKEN` as a name. What do you think about just using a `get` here? Then you could have the same `get` as a name that makes it sound like you could have a more robust name. I would suggest using something like 'get', `get` or something. In other words, I would call the name `get` and `get`
should this be an index?
I don't think this belongs in the container. The container should be the same as before, but it's not too bad. The log message might be useful to be more specific and more specific.
What is the idea behind this change ?
I would prefer a `concurrent` annotation to be more explicit about the type.
Is this needed?
should this be `var?tmp` or `tmpostree-deltaobj-XXXXXX`? Or is this something we should be using?
Isn't this still needed?
This should be a `using System::move_` instead
I don't think this is needed.
How about "reuse" instead?
I'd prefer a more specific name here, `test_task_history` or something. I don't know what it was supposed to do.
Can we make this configurable?
@jcotela is this what you want? I'm assuming it's a test, right?
This needs to be initialized in the `/* dcache_line_size`, right?
I think that this import is now unused.
Should this be a `@VisibleForTesting` or should the `@Deprecated` package be renamed too?
what if we use a refresh API here?
If we use the `_score` for these, should we just rename `custom_precision` to `custom_recall` instead of just `custom_precision`?
This should be `--network-host-project-id`
Why is this needed, it seems like the `setSourceDataAtCell` function is only called from `formulas`.
This is a bit unusual. What is the difference between the two?
Can you add a note that the `map[string]int` is always a string?
Why is this necessary? Is the version being added somewhere else?
Could we make this a function? We're not really testing that it's actually being used?
This should go in `GET_SESSION_LOGS` and then move the `getCanvasUrl` to `HOVAS_URL`.
@adamjstewart Is there a reason this needs to go?
I don't think this include should be here
`self.build` should be an object, so we can use the same object.
@nmittler - How is this exception coming from? I don't know how it is, but would it be better to have this exception message in the `if (copied != length)` case rather than in the `if` statement?
Style/MutableConstant: Freeze mutable objects assigned to constants.<br>Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
What does this do? Does it need to be lowercase? I'd rather have it be `config.Newf()`
I think it is a bit weird that you have the form `h3` and then the `h3`. Can you add this to the `h3`? It's a bit confusing to have it in the view.
We should probably add an explicit dependency for this, as well as `command-min` is set to `true` in the `command` list.
Does the tracerFrameworkDirectory have any effect on the tracer? If yes, why do we have both `assembly` and `assembly_INTEGRATIONS`?
what is the purpose of this line? `path` can be removed?
I wonder if we could have an option to run this with a different error (e.g. `--stress-test LIMIT` or something). It's probably best not to have a `-d` flag, but I don't know if it would work.
I'm guessing it should be `@param array array because of the multivalued`?
I think we should use a constant for the table here, not a hardcoded string.
Why is this needed?
Is this a bug fix? I think we need to do this in a later PR.
Can we do this in a `TestWrongNonce`?
This is just a case where you can do `while (true)` right?
Should it be 'verify'?
why not make this function return an error instead of returning a error?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
you could remove the `notification_important` part
Why did you remove this line?
This can be just `partition` I think, but I think it makes more sense to put it in `SuluOptions`?
Should we use the same separator as the message?
>#include <fastrtps/transport/shared_mem/test_SharedMemTransportDescriptor.h> [](start = 8, length = 10) nit: move the line to the declaration of the declaration
maybe we could have an assert here that `self._data-address` is not None?
This is what I was saying: > The value being used to node is that the manifest will be called last and this will throw an error if the Address is set to false. The assumption will be called last and this will return nil. I think that should be called on the `split` check, but I'm not sure if this is correct. The only case I'm not convinced about the user's point of this check.
why the variable?
is there a better way?
Why does this change? Is it intended?
Can we put this inside the `grid` section?
I'm not sure if this is an issue or if it should be done or not.
Should we make a `location` parameter to indicate it is a string?
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
This is the fix. It looks like you are not doing anything with this PR.
I think it's better to make the getter getter as the name, and the other `BftExtraDataCodec` is not very specific to `DefaultHash`.
This method should now return a `SupportedException` (or `SupportedException`).
this is not a function. It should default to `None`
nit: this is an API change. You can move to line 121.
Do we want a test to make sure it has been run?
We should have used `block.isDebugEnabled()` to avoid the need when `block.isDebugEnabled()` is called.
Why do you need the `get_class` call?
I think the `CanonicalHeaderKey` config has to be set directly in the first place. We need to make sure the `LowerCaseHeaderMaps` is not empty.
@jmhooper @mheon I'm not sure why this change is needed.
Why did you remove this?
is there a use case where a user might want to use this function and not use it?
Can you use a `isinstance` check here?
Do you have any ideas for making sure to add a `vertigo` attribute in the `vertigo`?
This should use `path.toString()` instead
This is a change in behavior, but is unrelated to this PR?
this is the main change. you could just change this line to: `if fullfillment_error: ['John Doe']`
I'm wondering whether this shouldn't be an `now`. I'm not sure what the best practice is for this, and it seems like the `like` would be a good idea.
How about `*`? `EM` seems to be a good use case for `*`.
We should probably use an lock here instead of a lock here.
We can remove this class as it's no longer used.
I don't think the new Guid has any side effects, so can't you just remove it?
This isn't needed.
Can we have more than one name? `azkaban.flow.kafka`?
Is this necessary?
Shouldn't we have a `.replaceAll()` here?
We don't need these now, right?
Why are we not using the `localhost` prefix here?
Can we use `//` here?
I think this should be more explicit, e.g. `Sexperiments.DD_CONVENTION`?
why this change?
I think it would be better to add a field to the `losc` as we do in `build/go` and just call it in `build/go`
how about `gt_masks`?
It would be good to check if there is an empty value in the `OwnerEmail` and then do `info.Description = updatedInfo.GetOwnerEmail()`. I think we should do it only in the `info.Description` case.
The previous implementation looks like an error. Is there a reason we don't just return the `int` value, and not return the `int` at all?
We already have a default value in the error message. We need to change it to `GET`
This was a bug in the previous version.
Same thing applies as in `FormForm`
Why not `if (!file_exists($carousel->getUploadDir() . DS . $carousel->getFile())) {`?
This should be done in the `error` folder instead of in `error`
I think this is the wrong place for this one. I think we should remove `DISTINCT` from `DISTINCT` as it's no longer needed for `ExtensionMethods`.
@smarterclayton do you think this is the right fix?
We can't just do `s.address.Put(..., addr)` here, but let's do the same for the `s.address.Status(...)` call.
nit: I think the name of `BaseEndpointResolverError` is misleading since this is the same as `BaseEndpointResolverError` I think...
This was added to ensure the user doesn't specify the number of arguments, but the configuration was created as part of the public ID so it was not used anywhere.
Why not using an empty map here instead of an empty map ?
`self.service_account_key_path` is a `None`, so `self.config_filename` should work, no need to check it.
I'm not a huge fan of this. I think you'll be able to do some sort of thing in the past
I think you can remove this. `serverLacksFeature` is not used anymore.
We should probably have this as a separate `valid_values` option. What do you think?
I think you can remove this line.
Can you please create the `addressOffset` parameter for the else clause? Thanks.
Why not use the existing `submitOnSuccess` value?
The `:doc` tag does not match the `:doc` tag.
Why was this removed?
Equals type annotations for `project_number`?
Shouldn't we have some sort of `defer` here?
Why do we have to change `DELETE` here? The current code already has `POST` and the current implementation was `DELETE`.
I think the `sizeof(X),` bit here are unnecessary, because the `flags` argument is the default for the `Files_log_errno`, and the `Files_log_errno()` calls it with a default, and that doesn't need to be changed.
Is there a way to avoid using `touch_point_destroy` here?
Do we need to do the same change in this PR?
just curious, why do we have both `PONY_API` and `PONY_API` in this file?
I think the regex is `#RectRect` - I don't think you can do that here.
Can we make this `MarshalAs`, and remove the `submitsubmitable` getter for now.
I don't like this name. I think we should have `lint` in `process/build/build.py`
I would put this method in `before_action` since it's not a valid index and it's not an object
Please rename this field to `FeedItemPlayed`. The other two methods do it automatically.
It seems that this is only a one-liner, do we need to make sure that it's not on a cttl?
why remove this?
this should be $codebase->project_analyzer
This is a breaking change. Why was this made private?
I would prefer `// import errors` to `...:` rather than `:`
why not use `that.is.empty`?
we don't need these changes. don't we use them everywhere?
I'm not sure this is correct. The number of bytes should only be 2 or 3, so we should be able to remove the `l_digits:` from the `assert`s, not just 2 or 3 (or even 2) and have 1 or 1. The size of the `assert`s.
What's the purpose of this change?
I'd rather not introduce a new method for this.
This is not used.
We should consider moving this into a migration. It's not a huge deal but I would add an index for `null: false` and make it a column in the table.
I don't think that we should do this. `logParamsMutex.Lock()` should be the same as `logParamsMutex.Unlock()` in `removeParams`
The data_encoding is a required parameter to allow the original data.
I think this should be a separate PR, since it's indeed a test.
why was this removed?
I'm not sure if `Privatefs` is needed here, if `basefs` is not set, then `basefs` is set.
This is the only place where the `KOKKOS_ENABLE_PROFILING` is used. I'm not sure if that's a good idea. I'm not sure if this should be removed.
Should we make this package private?
@martinwicke Should this be `Http2Array.instanceinstance` ?
Why is this needed?
This is a very minor thing, but I'm not sure why I wanted to add this to the `RetryTask` interface. The reasoning is that this function isn't called is called in `ReadRetryReplication`.
Can we remove this annotation?
Same, this needs to be `None`.
This is not right. It should be `string|null`
I think this should be set to the default value of `actualactualTimeout`.
This looks like something that should be `[bin/flock]`.
This line needs a failing "tpush" to be removed.
Doesn't this need to be a valid enum type?
I think we should move these magic numbers to the `go.opentelemetry.io/api/trace` file
I think it's good to have a test for this, but I think that would be much easier to type `getattr`, `setattrattr` would be a better name than `getattr`.
@maarcingebala What is the purpose of this change? Is it possible to move away from `self.column_labels` to `self.data_spark_columns`, or do we need to move `self._column_labels` into `index_spark_columns`?
better to use `index` in variable doc.
@dantleech are you sure this isn't an `Error`?
This is now a leftover from the docs
why this code is not used?
I'm not sure how much I feel about this, I don't think we should be using it anywhere.
These two need to use the same cache, not the final one.
please revert this unnecessary change
This should be `ByteArray` (and not `UInt32Array`)
Please don't remove this file.
Maybe this can be set by `promise.amount` or `promise.currency` and `promise.amount` as well?
I'm wondering if we should just add controller to the controller. Or add controller.Controllers?
I'm not sure why we need the `opts.prefix_size` check here
why is this needed? I don't see a point in using it in the `tabBar` method
`return` is redundant because it is a boolean
I think we can keep the "new" arg here, because the path will never be passed as a path, but this will not work for you.
We need to add the `errors.IsClose` function here so that we don't get errors like the error when the client is actually empty.
I think it's not clear what this means and how it should be.
Does this need to be in `lib/common/constants.js`?
nit: this will be a breaking change
Why not just call `FetchAgedQueuedExecutableFlows.FETCH_FLOWS_QUEUED_FOR_LONG_TIME`? `FetchAgedQueuedExecutableFlows.RandomWith(FetchAgedQueuedExecutableFlows.FETCH_FLOWS_QUEUED_FOR_LONG_TIME)`
I don't think this is right. It's possible that we're not going to change the way the first time the ci is run (even if the first time it fails the first time the ci is found)
I believe the `||` should be `!=`
Should probably be "Error in response handler: %s, data: %s"
I'd like the name to be consistent with previous, I'd like to see a more specific name for this function.
Why is this needed?
I think we should move this check to the `else` block.
(style) please, no space before tabs
I don't understand why you're using the `dockerClient` from the DOM here. Can you explain the purpose of this?
This change will make it easier to read without `outbounds`.
I think the processor interface is a bit redundant here, I think. It looks like it will never have a `cancel` instance.
Why not just `phpstan-param array<string, class-string>`?
I'm not sure what this is for, but I don't see why this is needed. The issue is that the code in the `SubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSub
We should not expose the `tags` here.
do we need this in the constructor?
I don't think the `ReadonlyPaths` flag is necessary here, since it's a string.
I would prefer to keep track of this and keep the original pointer. I think it's more clear that it's just a pointer, so that we don't have to change this.
Why not import the ec3 sdk here?
This is a bit of a nitpicky, but I would keep the `return;` and then use the `return;` below.
This doesn't look like it should return a `List`.
What do you think about adding a `else` clause to the class, so that it doesn't have to be there?
Can you add some description here to show your best is to address the intent here?
Shouldn't we have a default value here?
The issue seems to be that it was not fixed by this PR, and that's why we did it. I think this may be useful in this PR.
Is this a good candidate for storing the `StoreSingleton{}` as a constant?
I think we should also add the new filter in `HalfHermitianToReal`
This needs a type annotation
This is actually the main change I'm not sure. The only usage of `PagedOptionalArrayMethod` is if we're going to have to do this now. The `PagedMethodAsyncCallSettings` extension has to be updated to handle it.
Is there a reason to make this configurable?
Why not use the ability?
Nitpick: we can get rid of this `if (*block.Block, []*types.SignedMessage, []*types.SignedMessage, error)` since there are no other places that don't return a `nil`
The `is 000lock` is a file, so `lock` is a file name. I'll update the `gzlock` to match.
Seems reasonable for all of the time that we return the same object, and then we should also check for the value of `objp`
I think this should be `s.idx.BuildIndex(genesisBlk)`
I would add a similar check to the configtypes.LengthList below.
Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
this is wrong... `container` was not being set in this place.
This is a change to the size of sizeof(). The size is wrong. I'd use sizeof().
Do we need this annotation?
Should the CLI flag also be named `NatNodePortRanges`?
imports are not needed in this file.
I'd prefer a different approach than a blank line before this one.
Line is too long. [88/80]
This is a bit odd, maybe we can just make the value a string?
this.servers.size !== 1 is very confusing. I would just change this to `if (serverType === inclusiveType.Standalone && this.servers.size !== 1) {`
This should be in another PR.
This is the only change I suggested above.
This was the bug that we have been doing before.
Is this a typo?
We need to use `savannah.gnu.org.git` here and below.
Can you update the docs for this new argument to match the new argument name?
This function should return an empty list.
Is it worth doing a logging check?
i think you can just delete this line
This is wrong. The `CreateString` call does not have to be added to the list of `Create`, so it doesn't need to be checked here.
Why was this added?
I'm pretty sure that's the right fix. The `trace` is not a `log`, so I think it's ok to just `debug` here. It's just the same thing as `trace`, but I think it's probably better to remove the `debug` flag from this PR
I think the `id` is not needed since the `rename` method already has a `RUN` method.
I think this should be `clone() ? m.isValid() : moment.locale()`
nit: Can't we remove this line?
I think it's better to use `keyCode && browser.tizen` rather than `keyCode && browser.tizen`
Should the `url` be used here as well?
This is not a big deal, but if you want to keep it a `Path` then you can add `@Produces(MediaType.APPLICATION_JSON)` and then do it in the `Object` below.
This is not related to this PR. The `const` in the middle of this line should be kept as `const` in this PR.
It seems like the `@Nullable` annotation is only used for the `ClientChannelChannel` annotation above, so I think it should be renamed as well.
Can we also update the method name in the interface as well?
This is incorrect. `settings.element.ResponseMetadata` is not a zero response.
If it is only used for `getClass` (as well as `Saddy.Resource`), then I think this may cause problems as well.
why remove this?
please add another parameter `IJsonRpcUrl` to maintain consistency with other methods
I wonder how many users could want this? What about `/foo/bar`?
This should be a debug message
This seems to be the same code as in `filter_server.go` (see the other classes in this file), and the same `filter_server.go` file will be removed.
I think this should be an array, otherwise it won't be used.
Why is this being changed?
`now` is not a `""`, so this is the right place for the `now`
Can we rename this to `__cadence_sys`? I would rename `__temporal_sys` to be more meaningful and name the prefix as `cad_tem_path`
remove empty line
We can't use `IstanbulBlockNumber` anymore. `IstanbulBlockNumber` is more clear.
Is this really necessary? I don't see any use of "-c in the command.
Why not public?
This should actually be `DEFAULT_DEFAULT_NAME`.
Should we make this default 0, and just default value 0?
I would prefer `git grep warehouse` to make it clear what the best package is. It's only used for one of the files and the other may be useful in some other file
I wonder whether we should add a `Query.Validate()` method on this interface to allow users to get the correct `p` response.
This is the only place where this check is used for the `X86` header I would have expected this to be a `HOST_ARM` header.
Is there a specific reason why this was here and the scrubbedRootDir is not the same as the scrubbedRootDir and scrubbedRootDir is the same?
Please move this to the bottom of the file, to separate files
why are we not storing this in an int?
I think this check should be done in `Resources.GetScans_The_data_file__0__` and not in `Resources.GetScans_The_data_file__0`
Why are these new constants?
This should probably be a debug level instead of an debug level.
The formatting here should be 2 spaces, not tabs
Should this be also changed?
This is a new API change, we should not use a flag in the `configs` class.
The "Model Content" format is a bit confusing, maybe "The URL is a list of 2" ?
We can remove this line too :)
The config name isn't very helpful, as this is used in many other places, I'm assuming it isn't helpful to use "selfserve"?
Should we keep this as an explicit link?
This is the only usage of `manager` in terms of the `manager.PathExists`.
what is the purpose of this property? I would expect it to be `internalAMPContainerID`
I'm not sure why this is needed. The only thing I don't see is the `status` variable.
This is the only change needed here.
Should we make this a string. Or do we need a string that is not a valid value?
I believe this test should be merged, but it's not really necessary to change the test.
Hmmm, I guess you could just put the service as a parameter? This is a bit confusing and I think I'd be fine just to make it more obvious.
Is this used anywhere?
This is unrelated but it was just about to be better to not use `when_poll` as it was already used in the `var/var/state-for-Media-side-level`.
Nit: please move this to the top of the file.
Can you please add `status: 200` to the `code` page so that the page will be automatically cleaned up on the `Status` page?
I think this is fine, but I don't know for sure.
I think we also want to call this on the `GrpcGapicRetryMapping`
(style) trailing whitespace
This is the main point of this PR: it is a little confusing that the Tree containing {@code n, T element {@code element}.
This field should be named "2018ID" (to be consistent with the rest of the codebase).
last_week is already a blocker for this spec, can we just use something like: `expect(next_week).not_to be_upcoming`
Can you change the `isinstance(rampup, numeric_types)` to be `if not isinstance(hold, numeric_types):`.
nit: `// Ignore` is not needed anymore.
Seems like this should be an optional parameter to `startSession`.
This seems like it would be a good change. I don't see it anywhere in the code but it seems like there's a typo in the name.
This test was failing because the `IO_result` is not a string, not a string that's not a string. We should keep it as is, but that doesn't seem right.
I don't think we need to copy this. The `timeout` is used in `repo.go` and I'm not sure if that is necessary.
Should be `SinceSinceSince` is used in other places now, maybe we should just change the `var` param and change it to `""`?
Why is it not part of this PR?
Is this still necessary?
Why are you removing the extra line here?
I think we should probably make this `if` for consistency.
(style) code indent should use tabs where possible (style) please, no space before tabs
I think this should be `AccountMaxVersionPrefix = []byte("vp.")`. It's a little strange.
We can remove this line now that it isn't used anywhere.
This should be `exc_message=error_msg` as it's a user error and it's not a user error.
Is this used somewhere?
shouldn't the default be `false`?
Should be `[LoaderOptimization.MultiDomainHost]` here.
Should we make this an error if it's not an attribute?
This will fail if `log` is `None`. I'll merge this with a fix in my next PR, but let me know if you think.
This test is not necessary. `blacklisted-name` has already been added to the python `./pants help --no-cache.js` tests.
why did you remove this?
(style) trailing whitespace
@deads2k do you remember what the best way to fix this is to have an `EdgeNodes`?
Should this also set the `a` prefix?
I think we need to keep these as `# toolbars to Ruby` and update the `ruby-example` to `ruby-example`.
I don't think the `top` bit is necessary here.
The protocol version used to communicate with Cassandra cluster seems to make things more clear.
Should this be removed completely? I'm assuming it's not used anymore, and I'd like to keep it as simple as possible.
Is this the correct default?
Nit: You can move the `if` condition under `in_stockstockstock`
This is just for testing only.
This change is not necessary. We are not actually using it anywhere else in this PR.
i would have thought this was changed in this PR but it was not related to this PR, so would be great if you could rename `cuMemcpy*` to `cuMem...`
This interface is used by both of these fields and should be renamed. I would recommend adding a new method to `installCache` to add a new interface and rename the `imageType` to something that can be used for the new name and the other `installCache` methods to something similar.
This should probably be a different file. It's probably not the case that the file is not loaded.
shouldn't this be `note`?
is this import still used?
It's not necessary to change this line.
nit: update copyright year in header
We can't just pass `g.token_str` through to `refresh` below, so you don't need `token`.
NIT: `(1 << 20)`?
Should not be necessary if you use the `repo.ListBranches` function (which will return the correct user's repo object)
I don't understand why you have this. You have to update the docstrings for the class names.
Should we check for null before setting `a => a.Key`?
Can you add a `TODO(dispatchFilter, "github")` to this behavior so you can use the same path when `org.apache.dubbo.dubbo.dubbo-zegu.dubbo.dubbo.dubbo.dubbo.dubbo.dubbo.dubbo-zegu.dubbo.dubbo.dubbo.dubbo-zegu.dubbo-zegu.dubbo.dubbo.dubbo.dubbo-zegu.
This should be `export * from './setupRerender` and then `export * from './setupRerender`
This should be `useDefaultSources` or not.
There is a typo in `$`
Why does this change? The `init` method has been called by `init` and the `init` method in this file, which should be called with `init`.
`subject` could be passed as parameter.
Whilst unlikely, I'm curious, why `KMS` is the default?
I think you can pass in the `balance` param here.
can we make this package-private and make it available to `map[string]` ?
This is not used.
Sorry, not a fan of having a single pointer here. I think that the pool_param value could be to be the current user, and not the pool pool pool name.
This will not work, you will remove any space between the if and the if
I'm pretty sure this is the actual error.
Can you also check that the target is a valid value for the `aria-valuenow` and not the other target names?
Would it be worth moving this method into `connection_optimizer.go`?
remove empty line
Is the idea here that we can't just use the `Span.close()` method? I think it would make sense to add a `close` method to this method in the `BaseSpan` method.
I think it would be good to have this in `__init__` instead of `self`, and add the extra `super` call in `get_dir_tmp` that takes a `full()` argument.
why are these removed?
Please update the doc string to reflect this.
nit: could we just use `vm.InRange` instead?
This was the only time where you're using this, the `first_digit` flag was already in the `second_digit`. This change is not needed because of the current code below, and it looks a bit of a hack anyway.
I don't see where the test was working but was removed?
Is this used by this?
Why is this needed?
I think this is still useful.
It looks like we don't have any effect on the list of empty strings.
`patch` is only used in the `src` package for the use case. We can remove the `src/core` package entirely from the `BuildState` package.
why are we adding an virtual param here and not for the other `BlockHeader header` methods?
Please use a more specific class names for this class
This is not used anymore.
`checkArgument` is only used in a single method, so it is not necessary for the case when it is not found.
The `ddev` is now unused, right?
why need this? DevnetConfig is already defined as Devnet struct
This is a change in behavior. Is there any chance that the resulting user will still need to change the other?
Is this defaulting to 0027 ?
I'd keep this line as it was.
I'm not sure if this change is the best idea. If we want to keep the list, it would be good to make a `wait_for_at_least_entries` call and have to check for a `lck`.
nit: can we name this `Game caching` for clarity?
The same here. Just return `True`?
I'm a bit sad that this import is not used anymore. I would say that it should be removed.
I think you should remove the `MaxMaxMaxMaxMaxMaxMax` too, it is not used anywhere else
I think it's fine to just set the zero data in the constructor to avoid the `this.setState` call.
Is this correct? If not, we should remove it.
Why are we setting the ` err` here, rather than setting it to `undefined`?
Should we add an assert here that the intrinsicGas == 0 and the execution is not empty?
Remove this `@group legacy` above.
Why does the error need to be raised?
These are all in one branch, I think.
Why do we need to add it to config?
This is a bit confusing, since `num_refs_` may return 1. Should we call `num_refs_` first?
I think we don't need `true` here, since we already store the default value in `false`.
This function should be renamed to casSnapshot.
`user` -> `worker`
Please revert this file.
This seems to be an oversight, can we not just pass the `Cache.TTLDuration` directly, to pass the function and pass `s.Cache.TTLDuration()` directly? Or is there a reason that this is only for `connection`?
Please revert the changes to this file.
Btw, I would prefer to have a separate function to generate the value of the object and then raise it with the backslash.
These names don't need to be private, since they're in the same namespace.
Can we use `fmt.Fprintln(os.Stderr, "Your password contains leading/trailing whitespace - in previous versions of rclone this was stripped")`
This will be a breaking change, but will it work?
I think it is better not to call `conda list_changed`.
Is this still needed?
Is there a reason this field is not in alphabetical order here?
@franckc @jridgewell Is this a typo or a regression? If so maybe it is worthwhile to check for approval, and if it doesn't, then use `raw.Form`? I'd suggest to use `raw.Form`.
why use `go mod` here?
I think that it would be more consistent to use `type` instead of `token` (or `Hadoop delegation token`)?
Unnecessary spacing detected.
What do you think about using the `NamedTuple` class to indicate which version it is used for?
I'd use an enum instead of "has been specified multiple times."
It was wrong before
I think you should add this to `# pylint: disable`.
I don't think this is correct, if you have a non-default path in a `CustomAWSVPCHostValue` will be used by the `CustomAWSVPCHostValue` which is used to set the default one.
Could you please create an app.Setenv from server.Config to server.Setocat?
For consistency, you can use `allow_non_existent`.
This is a little bit hacky. What happens if `txMessageipts[i]` is false? Can we be looking at the txHash?
I don't see this used anywhere.
Is it possible to get rid of the plan plan since we are in production?
why do you need it as np?
This can be simplified by adding a method that returns a text, but the `ACTION_COPY` can be omitted.
I believe this was the bug, @dengemann
Why not use the `Attribute` prefix in this file? This will prevent any confusion for users.
This is a breaking change, we should be able to use `ctx.User` here instead
This should be in the wrong location.
Why not `libbeat.lib`? I would think the latter is more natural than `libbeat.lib`, but it's just a question.
Isn't `ControlPlaneLoadBalancerScheme ClassicELBScheme` supposed to be the one in `libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/libbeat/BBBScheme`. Is that OK? It's just a note.
Is there a reason you'd use this? It doesn't seem like we're trying to get away from this file but it seems like we would need a lot of code to make it more clear to me.
Do we need the `JsonName` property? It's not really used anywhere else.
This is a little odd, but I'd probably just call it `err`.
Is this still required, or is it a version compatible ?
Is there a way to specify the full namespace?
If the count is not initialised then the count should be an empty string.
remove this line.
I think we need this change. We can probably get rid of the `public string[]` as the `s` is already being used by the `http://*:80/"`.
I'm not sure about this. The `ACCOUNT LOCK` flag is really used for a specific environment, not for the whole `*string` flag. The `ACCOUNT LOCK` option is not guaranteed to have a value in the `*string` value.
I'm not sure how to handle the case where the `labels` is used, but this isn't needed.
I think the `list.size` variable should be removed here and in `zipped` should be `list.any`, right?
Not sure if it is a good idea to change this to: >Backend\\\\\\\\\\ApacheSolrDocument. If you don't want to change it, you should update the doc.
Is there a reason we need this type? We're trying to avoid having to pass it through to the `sourceToRawConfig` class.
Can we add a TODO about this so we can get rid of this line if we are using `testtest.Balance`?
This is not needed, since `writer` is the writers from `DynamoViewModel`, right?
" License or to of the following permissions:" is a bit confusing. Maybe "ENGINE-16002 Exception while closing command context: ENGINE-03110 Required admin authenticated group or user or any of the following permissions:" is a good idea.
Please use star imports
We should test if we're not testing this in the test.
I'm not a big fan of this name... `Base::::` is not necessarily an `12` operation. What do you think?
I think it makes sense to call this `walletCreateCmd` and then create a `walletListCmd`.
I think `# trouble` may be better here.
A better way to write is if you want to change the test.
` getRequestBodyVarName` is a `Map` method.
please fix typo "Line is longer than 120 characters.
This is the wrong place for the `itemdetails.html` variable
I think this should be removed, it's a different error.
Why was there a reason you moved from `k8s.io/api/corev1alpha1` to `k8s.io/lib/api/v1alpha1`?
Why is this import changed?
The memory update is never nil if `MemoryUnlimited` is empty.
I'm not sure how to do this, is there a way to do this?
why not using a pointer like this?
This is not a bug, it should be a new object
Why does this need to be added?
I think this is the only change that makes sense in the file.
Should we use a protected type instead? It might be better to just have it as a `@var` and then just have it as a `@var`
I don't think you want to remove this, you can just remove it.
why not just pass the `opTimeout` to the config?
Do we want to stick to execution.GasLimit here?
This is a bit of overkill, but I think the wording should not be part of this PR.
This is not a iterator, but a query is always passed
why the change from scratch to scratch_grouping? what is it supposed to do in the list? I'm not sure how to use it in the list.
This is a no-op. It's not used anywhere in this PR
I think we should have an example of this.
I don't think this is the right fix. It's not an issue but we may want to move the `orElse` logic out of the `orElse` call.
Is this change required?
This line is too long.
We should make sure to set `LOOKBACK` is set by default and set to 10 here in `pkg/main/main.go`.
why not `style['text_baseline'] = ...`?
Shouldn't we call this `m_userDefinedId`?
Please use `node.getAttribute('id')` to make it work for the same reason as `element.id = node.getAttribute('id')`
This should be removed.
It would be better to use `.format`
I think the `cancel` is redundant here, since it's the only usage of TRUE in this function.
@t3on How come we're using `NumericConstant` and `identifier` here instead of `ETPACK`? Would this be a problem if I have to go to `identifier`, or if not, I'm not sure we care about that in the code.
I'm not sure why this is needed. The purpose of the test was to change the test.
It looks like we're changing the test case to check `testnet` instead of `beta`
This is an actual change, and is not required.
This argument is a lot of noise, we should change it in the API
Could be changed to `(strcmp(topic->name, val.via.str.ptr) != 0 &&`
What if there is no such a value in config.ini?
Is it worth caching this value from another file instead of passing it to it?
this is an error and should not be removed.
if this is not defined and then you don't need to add it here
The `tx` variable is already a list, so we should be able to remove the TODO.
is this a BC break?
This check is not necessary because `previlege` is `false`, and `is_not_t uid` can't be set by the `pipRequest` check.
why not just return notifyObjectDeletion in notifyObjectDeletion?
This should use the `LogDebugWithHTTPBody` function instead.
do we need the `tag` suffix for the attributes too?
Can you check that these are actually testing the wrong thing?
I believe the `id` property was removed in this PR, and the `id` was removed in the other one, but this was added by mistake.
Should there be a test for that?
I think this was a mistake before; @dvoytenko can you confirm?
I would suggest `setUp` and `setUp` to be consistent with the other properties, `setUp` and `setUp` (and `setUp`).
This will cause NPE.
I'm pretty sure it is still needed in the past, but I would prefer to remove this file, it is not needed.
I would move these constants to the top of the file.
why is this required?
I don't see the point for the new parameter, the `listenerException` is used in the implementation of the `ConnectionAbortedException`, so maybe `ConnectionAbortedException` is better
Can we move this line to `NewFs` since it's used everytime we use this function?
I think we need to add some code for this?
You could check for the `STANDARD` class in the `version-header` case.
Please use `timeouts` for consistency with other commands.
I think it is a bit weird to have a constant somewhere. It is used for the value of the region. It is a bit confusing for the user to have one. I'm not sure what to do about this - is it possible to have the right value here (or just have it return the value)?
can we use `String.getName` for the `if` here and below?
nit: `return -1, false` (same goes for the `return` operator below)
Should not we have an explicit way to write this value to the user?
We should probably make it clear that the name of the function is going to do the trick.
Why remove this?
can you use `INFO` as the parameter for this method instead? I think this is the only one that uses `EmitEvent`
This is not necessary, this will be a bug fix.
should not be read-only
This is a bit weird, maybe we should just have a `cancel` function that is called in a `try catch`?
This is not needed anymore since it was added to `app_name`
It should be `flag` not `flag`.
this will break some code
Why is this necessary?
@deads2k @kargakis, please check if this is correct.
why did you do this? I don't think this should be here, since we're not using the `case` statement in there.
These are not part of your change, but I am surprised that the old logic didn't break anything, so it should be in the old commit.
You can delete this line.
Maybe rename this to "threshold" so the repo name isn't clear
why is this needed?
This may have been a bug in the log output. I'm wondering if the log output should be a warning rather than the log output, but this should also be something like `logger.info()` to get the `finest` error.
why do we still need to specify64? I'm assuming this doesn't need to change in this PR
nit: can we rename this to `isStatusFailed` or `isStatusLED_FINISHING`?
I'm not sure how to make this change. I think this code should be renamed to reflect that the change is not related to the fix, and we should be using `TestCase` here. It would be better if we can keep this as it was.
The `require.NoError` calls are only needed if `nil` is `nil`. If it's only `nil`, then the error message should be `nil`.
This was the main change.
I think it is better if you add a `return skip;` after line 152 (which will be the case where it is not used)
This is a little weird. Why is this needed?
I wonder if we should keep this import at `api/resource` level.
Shouldn't it use `ISpanDecorator`?
Just wondering, did you mean to remove this line?
It's not obvious to me why the "Increase verbosity" is added here.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we should use the new constructor instead
This needs a space at the end of the sentence. `if (LINKSTUB_DIRECT(l_flags)) {`
Why did you remove the assert assert here?
Please also add "Use `dataLocation` to the docs, as this will break existing code when running `data`.
This method is not used
Does this mean there's no "scm" file in the endpoint name?
I think the old code should be in X64_format_raw, as you are only using X64_format_format_format.
This one is wrong, just remove the unused code.
why 0?
(style) do not initialise statics to statics as input is not tested
this import should be removed, not removed
This is now a pointer?
This can be reverted.
Can we rename these to be more specific? This is just a cleanup commit.
Do we have a test for this?
`time_backward += timer.since_last_check()` should work. Same for the other `time_naive_forward` above.
Why are we sure this is the correct exception type?
Please use `ImmutableMap` instead of `ImmutableMap.Input` and change the constructor to `ImmutableList`
This is a bit unrelated to the change, can be reverted?
This is not necessary, since we don't have `num_classes` in the `__init__` function.
Is there a reason you don't call `AfterSend`?
This isn't a test, we can't change the default from libuv to libuv. The test failed because the test is being called in the tests.
Don't we need `type` on this line?
Isn't this going to break some of the tests? What about the new code below?
I don't know if we can get rid of the `*` and have it be a `*` instead. It would be nice to have a `[namespace]` on it, but I would prefer if you didn't want to keep the old logic and use this to `[namespace]` on the next line.
What about making an `job_failed` variable here for consistency with other code?
This could be `!i` instead of `..` since `progress` is an attribute, not an attribute. Also, I think it is a good idea to check this in the property name.
I'd suggest using the standard C++11-specific C++11 header instead.
Why not just log the warning?
This file is not used anywhere.
Do we need to make a "get a" version that is passed to the "configure" version?
For consistency, I'd prefer not to use the constant name `spmd` as the default value. This way we don't have to make use of `typeapi::` everywhere, which is more readable.
@hustodemon this might be a good thing, but it might be nice to have a `where` here to get the type and return `List[key]`
I think this should be `0x10 0b00010000: Histogram` since you are in `Gem.html.erb` and `Gem.html.erb`. I think it would be easier to read and just use `0x70 0b01110000: Histogram` here.
It's probably better to keep all the `@return`s in the `return` tag, and have it only take the last one.
This is not needed. `self.__apply_mult_override` returns `None`, so it can be called once in the user's `self.__apply_mult_override` callback
Can you test that the result of `self.assertEqual(amount, mock)`, `self.assertEqual` is the same as `self.assertEqual`? This way we can check for other tests and we'll have to test that `self.assertEqual` is the same
I think we can move this down to the `env` package
I think that this can still be null.
This is a regression I would say.
This should be `List<bool>`
why do you need this? It will only work for the `products` field.
I would have added it as a result of a variable to make it more readable. If you do that, you could add a method to set a constant in the format string.
Shouldn't this type be `errorMessage`?
I don't see where is the default number of headers being used. I don't see the same headers being used here.
Do we need both `UpdateTime` and refreshes at all? I think it would be easier to just have one refreshes.
Remove this line
This seems to be a duplicate of line 130 above. It would be good to have a test for this and the next line that checks the unit test.
You don't need to add this to the website, please.
This should be `import.second`.
I don't think you need to check for the default config.
I don't think this is the right place for this method. I'm not sure we need a new API.
I think this should use `Task.contains()`
Why is this in `std::unordered_map`? Why is it necessary?
This should also have a "HttpWebRequestInstrumentationOptions" attribute in the constructor as well.
Can we just delete this line?
I'd prefer to avoid using `WorkingSet` here, because it is not clear that the block is not represented differently.
Why is this change needed?
Why don't you do the same for `import lodash from 'lodash'`?
Why is this needed?
Are these imports not used?
These are the same as the one in `GAUNTLET_TIMER_GROUP_ID`.
Align it with the new Ruby 1.9.
I don't quite get why this is needed.
This will break if a `focusObject` is `nil`.
Is this something we can remove?
I think we need to keep this method to ensure the `Element` is only used to create the Object in the constructor and remove `Element` altogether.
Use the new Ruby 1.9 hash syntax.
@matt-peters, @johanste : this test fails with the testStemming() call above.
@deads2k @tnozicka this is the bug that we need to change?
Please add a space after the comma.
Can we change the "visitor-loyalty" to "users.user", to make it clearer?
This should be `environment_script`
Why not throw an exception here, rather then catching `Task.GetAsync` and throw an exception in the exception message?
I am not sure if we need to change this to `10Fields`?
you can remove these now that we have the same `_np.max()` method in `start_test.rb`
This will not work if I pass `field` as the first argument. The first argument is a float, which is not the correct name.
This is a bit confusing as I think it should be a part of the `log-file-path` flag.
I would not expect a new method to return a `List<T>` if you do the same.
This is a breaking change, but is the `TracerProvider` needed?
Why is that necessary?
Maybe we should just make the environment variable `URL` and use it in `s3p/dependency/`? We could just have one function `URL` and have it return a string `URL`.
This is not correct, you can use `String.format` instead.
We need some sort of new struct to avoid the need for a new struct, just for future reference.
The new `NotNil` calls are not necessary.
remove empty line
Why do you have to change the implementation? It seems like it should be just a wrapper.
Can this be moved to a common place where we use this function?
why are you using `not_to have_content` here?
can you do the same for both the old and new data types?
This is not needed anymore.
please add a space after the concatenation and avoid the space between `,` and the second parameter
This will fail on Windows...
I think you're going to have to add this in `ckpt_dir`, as it is the actual option to use the `ckpt_dir` option.
Can we add an issue to track fixing this?
Nit: should we go further and use `TestConcurrentCommand_UnmarshalJSON` here?
Please make this `elif` statement more verbose (and keep the `#!/bin/bash`)
I'm not sure how to test this. If you are going to pass this in, please move it to the `kubernetesVersion` package.
Missing space after #.
This is an example of an example that will throw an exception, whereas the above check is being thrown and the above check isn't it?
This should have been a separate commit, but the issue is that if `registry == null` it should be a `Debug.Assert`?
You have the default `--UsageReporting-Enabled` property. It should not be used here.
I'm not sure if we need to set it for all versions of 0.3.1 or just set it for all versions.
Do you have to make sure `FILEIDENTIFIER_LENGTH` is set to 4?
We should also have `web_debug_ --> xweb_port` and `web_port_ --> x`
Line is too long. [82/80]<br>Use the new Ruby 1.9 hash syntax.
I think we need a helper here
`string.replace(escape_char, escape_char * 2)` is a little confusing since this function returns a boolean, and is called `string.replace_`
Since you're here, you should use `schema->getFieldType(i).type != SupportedType::INT && !schema->getFieldType(i).type != SupportedType::TIMESTAMP)` instead. The same below.
I think we can just call `err` and remove this error. I would just call it `err` to make it clear the error is returned
I wonder, what does this do?
Is there a reason why we wouldn't always want to print the fee here? I don't see the reason for that (or even better) because it was always set to the default gas price.
Why this check?
I think we should use the new version here and let the user know the version?
Is there a reason you don't just return `output->format`?
Could you remove the pandas_wraps?
can you use a more accurate message here? e.g. `np.nms`
This is now dead code
Why is it `NoError` now?
You can change this to `ui.message(_("Focus mode")` and remove the extra `ui.message(_("Browse mode")` line below.
@mjkkirschner @mmaxim this is the fix. It will only be needed in the next step of the menu item. It will be a lot more difficult to read.
What was the rationale for removing this method entirely?
I'm not sure if this is right... I'm not sure it's the best way to do this...
Use the new Ruby 1.9 hash syntax.
This is a bit scary. I don't think we should be using this. We'll probably want to remove this.
@bvanessen @jridgewell not sure what this is for?
Why the map?
`Clean` can be `)` if there are any.
Why is this necessary? It looks like this is only used in the `initGit` which is used by the `initGit` function.
You could also use the recipient.active? here.
I would use `prop('disabled', nightShift)` to be more clear.
@benzonico what if we made this a bit more generic? I think it is worth checking if `host.name` contains both the value and the value of `host.name`
This should just be `useCallback(` since the function has the same name as a new argument.
Should this be `func (c *CStorPoolController) destroy(csp *apis.CStorPoolInstance) error {`?
This is a breaking change.
I'd like to see a test for this. The `else` statement can be removed.
I would prefer a separate prefix, as it's a little bit confusing. It makes the code more readable if we use something like `DynamoCore.h`.
I think we should also return here if we do not want to log the block, since we're returning early here.
If it's a connection then it wouldn't be better to use it in the constructor.
@jridgewell Is there another PR we can fix here?
you could pass `addtransaction=None` to this function and call it `nocheck`, `nocheck_start` and call that function in the constructor.
I'm not sure about the point of having to import `finally` at every time. Is this a good thing?
Shouldn't that be the same as `\n`?
(style) line over 80 characters
This file can be removed since it is a public static class.
I don't think we need `class` here.
this change was unrelated...
how about creating a new struct for these values?
What's the TODO doing here?
Is this a breaking change?
This is a little strange, I'm not sure we should add this as a `fmt.Sprintf()` method to this method, because I don't see any benefit to this in this module. I would rather do it as a `path` or `fmt.Sprintf` in the `.go` file, and then use it here to call `.cb()` on a file `fmt.Errorf` in the `.cb` or `
I think this was accidentally removed.
I think you're missing a comma after the last item of the last item.
Is it worth adding a `proposal_notification.view_request_cta` constant somewhere else? It seems that the action should be in `proposal_notification.view_request_cta` and `proposal_notification.proposal_notification.view_request_cta` rather than in `proposal_notification.view_request_cta`
This is not used, and can be removed
The `customer` should be `nil`, so I don't think this is the right solution. We're using `begin.message` here.
Why do we need to sizeof("65535"), or just a single "sprintf(port, "%d)"?
We should probably change the name of the `DestinationGroups` to `sourceGroup` (or similar) `DestinationGroups` to match other names.
I'd prefer to have the option to provide the text from `ignore_flags` and to make it clear that it's not used anywhere.
Why did you change the version?
This should not be necessary. The `HEAD` is a `config` and we can't be sure it is a `config`.
Shouldn't this package still be in SessionTest?
I am not sure about this change. It seems like it could be used in other places. Can we just change it to `debug`?
Shouldn't this be TiSession?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
The name `new ClearSessionQueue(tracer, this)` is misleading.
This method name is not very descriptive. How about something like `Suggestion: In the index including`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is the main place where we use labels map[string]
We should not need this method, as the code is repeated in a separate function and that is a private method, so that we don't need it here
Can't we just check that the tags are based on the topic exists and that they are based on that? This is because the validation of the topic exists but the tags pass without that.
should be `const`
Please add pylintrc.
Should we also check for error here?
Why are we doing this?
This may be wrong, but I don't think we should log the warning. I don't think we should do that.
This is not the right place to change. We should also change the test to match the test, and also change `cssutils` to `None` if it's not needed.
nit: can you make this variable final?
This should be `elif` not `context` since it's a new one.
We have a better way of including this spec, but I don't feel strongly about that
I would change to `CLIENT_RANDOM` here to `SERVER_HANDSHAKE_TRAFFIC_SECRET` so the config is not part of the PR.
why we need this line?
@bartonjs, are there any potential concerns with this line?
You could add `\DateTime $dateTime = null` to the `modTrimTrimInfo` in this class.
I think this line is redundant.
This was changed to a `SERv1.BlockDevices`, but it doesn't have been here since the `SERv1` and `panic` import is now `metav1` and `panic`, and the other two is the same.
This is the fix.
If this method is only used in the tests, can we just remove this method?
this is a little confusing, as we are already passing in a `use_directory_cache?` method, and it seems like the method should be `bundler` and not `use_directory_cache?`.
Does this work when using `this.SupportsAllocation`? It's not the case that the other call sites use this method. If you don't want to do it, please use `this.createdAllocation` instead.
Nit: "If you are going to do this for a single row, can you add "If `device_string`?
can you make the test a constant so that it doesn't test the right thing (as is done in the same way)?
Do we want this in the core, or do we need it in the core now?
I'm assuming we can't use this for the other code, but it seems like this will be a good idea if we should just do `if len(r.ContentLength) > 0`
Why is this change necessary?
I think the `U` is a little too generic and is probably a good idea to add a new type to `JaegerTag`?
Which issue does this fix anything?
should we add a description of the key here?
This should be moved into `removeChild`.
`for key in dictionary".'`?
these should be `DateTime`
I guess the previous implementation had an issue with this. The idea is that the count count is not zero and the user is not zero. The idea here is that the count count would be zero (so we would be more strict about it)?
This is not needed, it's not needed anymore.
We can use the `RecyclerAdapterBindableHolder` interface here instead of the `MvxViewHolderBinded` interface
I'm not sure if this is the correct approach. The function is a `PathList` but not a `PathList`, so the function is a `Path`. So the function should be renamed to have a `PathInfo` in the function.
The error message below says it should be `The value from "$schema` not `name`.
I think this should be the actual import.
Can this be `filter`?
I don't think it's necessary to put the ` dynamo_exited_synched` check here.
Should we call `set ksort` here?
There was no reason to change these 3 lines - they are not related to the PR, but it is probably better to change them to `else`
I think this will be called by the `return "unknown"` condition.
This is a breaking change, it's not a real purpose.
This should be `if ($isRenderedAsSwitch && ! !empty($field) && false === $this->isNestedProperty($field))` instead of `if ($isRenderedAsSwitch && !empty($field) && false === $this->isBoolean($field) && false === $this->isNestedProperty($field) && false === $this->isNestedProperty($field))`, because the method will always contain the value of the `false`.
This file was not being removed, right?
I think the scope is not a scope. We are going to be very careful about that in a followup.
Can you remove these lines? The first page is the first page and the second should be the last page.
RecyclerView can be removed now.
Could these be `static` rather than `static`?
Hi @stephentoub thanks for this change. This PR also affects the changes in this patch. I am not sure about the change here. If you need a change in the PR, please reformatting with @bparees to fix your pull request, please revert.
Can you please make this a local variable and return `Collections.emptyMap()` instead?
is this being removed?
Please don't use import from imports.
Can we just change the default for `use_depthwise` to `True`?
Is there a way to do this without `Instances`? I don't feel like it's enough...
I don't see where we should be calling `getWeight()` in this case. Can you explain why we need the cast?
I think we need an `API.prototype.importAllFromMnemonic` here
I'm not sure what this is supposed to do?
It might make sense to move this block to `cart-comments-container` (as the other `include_comments_files` method has some weird meaning).
I'm assuming this is the only usage of `send`, but the `send()` function can now be renamed to `void close()`, and we can remove it entirely.
Should this be in the `if` block too? I don't understand what is going on with the `ProxyURL`
This was the only place where we use this method is inside the history service, which was used in place for where we need to use it.
`icon` is not a `phone` value, so we should remove it.
Why the newline?
Shouldn't this be a constant?
is it worth adding a newbidbid to the list of elements here? if so, can we move some of the data back to the top of the elements?
Please update `list` to `encoding_type`.
Please revert this change. This file should be updated to match the other files.
I think this should be `Node or a API for processing.`
`!local.Label.merge` ?
This is not used.
I don't think this is the right solution. I don't think we need the lock here since it is a big deal, but I think we can just make the `reader` a `reader`. This can be a bit more concise.
Please update the doc for the `ring3D`
Why are we not using the API directly?
do we still need this?
Why did `SetApplicationError` overwrite the `err error` field?
This is an API break, we could move it to the `?` method
`log.finest` is used only in one place, so the `log.info` is used in the logging. I think it is better to move the `log.finest` call to `log.addNewSessionRequest` and `log.addNewSessionRequest` and move the `log.addNewSessionRequest` call into `log.addNewSessionRequest` ? It would avoid the need to call `log.addNewSessionRequest` in the `log.add`.
You can probably use `_test3_a = _o.Test3.B;`.
I'm not sure about this change. The controllers can be a singleton. The controllers can be a singleton if it doesn't exist, but I'm not sure it makes sense.
Is it OK to remove this entirely? I think it should be enough to just ignore a simple `redirect_to` field. I think it's probably not necessary to add a note about it since it will be useful in a future PR.
Trailing whitespace detected.
I'd rather have an `true` as a separate argument to this method and then provide a default value for that argument to `true`, which would allow you to create a new default value and raise an error.
This will fail on windows.
Could this be used in an GET_CAST_ISSUE_MESSAGE = true if ... else ... else ... else ... else ... else ... else ... else ... else ... ? ... else ... else ... else ... else ... else ... else ... ... else ... else ... else ... else ... else ... else ... else ... else ... else ... else ... else ... else ... else ... else ... else ... else ... else ... else ...
If the node is empty, the node name is not the right place for this.
Can this have a default value, too, too?
The log message needs to be updated
This is the default. You need to check `self.execute(Command.PRINT_PAGE, options)['value']`.
Are you sure that conn->req.input is not supported by default?
This is a regression I think
is it worth moving to a separate PR?
This is not needed.
Remove the activate data store.
I think this should be `true` to be more explicit.
Extra empty line detected at class body end.
This is not the right place for this. You can use `sig[0], 127:` instead.
Should it be `BytesAmount`? It would seem that the only caller can call this method, and we need to add it back in.
I'm not sure if we should be using this here. I think it is more convenient for the recordings to be top 1000. It is not the best way to fix this.
I'm curious if this is a good idea. Why wouldn't we want to do `view.flows.resolve '%s'"`? I guess we don't want to have a "resolve".
This would be a great idea for the future. The rest of the logic is good to go. Maybe we could have the same logic in `io.prestosql.testtest.utils.StringUtils` for `io.prestosql.plugin.StringUtils` (or `io.prestosql.plugin.StringUtils`).
This is just to be able to run `os.makedirs(path)`, I think this is better than `if isinstance(path)`.
This is going to be a very large call, why don't you use `Optional.cur_tab` instead of `Mixin` here?
This is a very good candidate for a user to get from `configureSessionTimeout()` in the same file.
This is a bit of a hack, as `None` can't be used.
Is this a valid connection?
I think we should check for `( select )` instead.
What does this do?
Do we need to check that the chunk was previously set?
@deads2k do we need to check whether the `validate` is set to true?
Nit: move these lines into `Update` package.
Does that work? This seems to be a change to `GVariant_BARE`? Shouldn't we be checking if `src_repo->mode` is set to `false` instead?
Why do we need to check statusParts?
I wonder if it would be better to have a test with the new `SkipOnServers []string // if the test needs to be skipped on particular server`
this is a bug fix
This seems like a bad idea. Why do we need the `@foo` here? Shouldn't we use the `unsafe` here?
Does this mean we have a CStorPoolPhase always need to be set to whatever CStorVolumeReplica is? Is it possible to have CStorPool always there?
Can you use the same variable name as the stock variable instead of the default?
Why is this change to `int` not being used?
Is this change necessary ?
Can you also add control here to get rid of control cgroup.Control
This is a change in behavior, right?
This should be removed. The `predicate` is used for a `@SuppressWarnings`, so I would just remove the `@Deprecated` annotation.
This isn't a good idea, as there isn't one in our CI and I'm sure it isn't a good reason for it
Can you add a page on what we want? I don't think we should add an explicit executor
if it was the case then it should be `!test.error.rule.New` and `...test.error.New`
@michaelkuhn Do you want this include in all the other places where it is used?
This looks like the only thing that's passing the map here is if it's empty (and not on line 339).
why is there a `NotFound` member variable being used in this method?
why we need this?
should we add a note to `api.OpenTopic` to the URL opener?
I think you could remove the "and it must adhere to the structure described in:"
I would like to have this as a separate commit for a while and a small change.
@daniel-beck I think we should be consistent about this one. I am a bit concerned about it.
@matt-gardner this is why we are making `-0` 0? It seems like it's an oversight to me.
We should not have the `X.recyclerview` namespace as these attributes are only needed in `DroidX` namespace
I'm a bit concerned about this. If we are going the user to be able to override the config name for the config name, we could just add the validation to this property and have an additional property to the `config` class to be able to set the property name in the future.
This is not the right way to check for a warning and it will be useful if the user explicitly passed a non-zero value. If you need a warning, it would be good to check if there are more than one thing that could be updated.
What happens when `t` is nil? Is that ok?
I think you should use the constant here and in the other modules too.
We have the `Assert(s.is2xxSuccessful(), ...)` in `this.onStatus` which does the same thing as in `test-system/api/internal/config.md`. I believe it is possible to get the correct `onStatus` from the `register` object, which is the default for the `register`, `onStatus` method, and then we don't want to have the `onStatus` implementation that does the right thing. This way it wouldn't need to do anything.
Are these two changes related to this patch? I thought we wanted to keep the term prefix around and remove all the references to the same Class, but just to be safe.
@michaelkuhnn , this is a breaking change, as the `tricks` package is not a valid node name (as it is inappropriate for the `tricks` package) and the `tricks` fixture is not available.
This is a little weird to me, the check should be in `mode` not `num::info`.
should be `zms.notification_service_factory_class`
this method is not public?
If `cidSet` is nil, the input field won't be used.
This is the only test where the error message is being logged. Is there something we can do here?
Use the new Ruby 1.9 hash syntax.
Please annotate the `char fmt[]`
I don't think this needs to change, `--target-chanel` will not work.
We should remove this line.
(question) Does this mean we can always skip the last 2nd string? I'm guessing you just want to make sure you are going to check this in the first place and not break if it's not set.
@jackhorton is there a reason you didn't remove this? This is the `if` part of the PR.
`index.equals()` is not the same. This check should be done in `dictionary/index.js`
I don't think this is the right approach. It should say "use _then_ wait, and use _then_ wait for this this is factored."
I think this should be removed, because we don't want it in the controller, right?
nit: can we put the brackets around the `if`?
I would use `if (image_view_)`.
This looks a little strange. Can you add `__tracebackhide__ = False` to the `root` method and set this to `True`?
I'm not sure what you're going on here. I'm just wondering if there is any better way to do it here. I am not sure what you're trying to do here is.
I think this is wrong, I think it should be `Locale.list(languages)`
Is this needed anymore?
Is this the correct way to do it, or can we just return the error instead of returning error?
Can we just delete these?
The wording is misleading, it's the "tty"
Please use `@namesLookback`. Also, you can use the same name for the parameter: `namesLookback = true`
I think it's better to move this to a new file.
This can be simplified to `if` and not `else: {` since there is one value in the `if`.
This is not related to the fix, but should be handled in `com.mysql.jdbc.Driver.forName()`
`open_or_create_by!` shouldn't be needed here as well?
This should be `parsedAddress.Scheme.Equals`
do I understand the name "products" might be confusing, maybe "p-convert" ?
This is a good idea. I don't understand what the `FrontendServiceName` does and why it is a `.FrontendServiceName`?
nit: I would use `std::lock_guard<>` here, rather than `nano::random_pool`. It would be easier to understand if you can find a way to make it more explicit and more readable.
Why removing the extra lines here ?
This should be "The default number of space can be created"
Can't just be final
Just for my understanding, what is the purpose of this change?
This should be in the group below.
Isn't this what you have for yourself to do?
what's the reason for these imports? Are they added to the end of the list?
This will cause `PublicVolumeCreationEnabled` to be set by the user, right?
just curious: what does "max" mean here? I'm not sure if this is a correct value.
So, I'm not sure I see the `exit_code` variable... Do we want to make sure that all callers to have a exit with 0? If so, would we want to make it clear the actual message and exit_code not have 1 message?
Can we remove the `id` argument from the `RequestId`? We can probably remove it from the interface.
Does this need a different name? I think it should only be used in the table name
is this an option option? or was it just a typo?
why did you change this?
I think it would be more readable to return `null` here
The name feels wrong to me, it's a bit confusing to understand what's happening, like the other two, and the one in the other.
If the transition CE is not calculated the node node node is null, then the host host doesn't exist. So the host host is not empty.
The `frame`, is this a bug fix?
should we make a check here for `forced_empty_list`?
Do you want to add this to this?
This is not related with this PR, but I don't think we need to remove this.
Why is this needed?
why are we doing this?
You should add the container container container to the docs above this one.
I don't see this flag being used anywhere?
I think it's more common to have this `username` attribute, and `must` and `accept` here.
This needs to be renamed. You can just delete the `SetLoggingRulesThreadSafe()` call.
s/should/should we also check if the dict is empty?
This isn't quite right to me. We should probably be looking for the "transports" package in the `if` statement and not just "enabled" package here, but I'm not sure if there's a better way of doing it now.
This is not needed if you remove the `type:` from `Any`
I don't think this is a good idea. You can simply use it to determine if the value is in an object.
This method doesn't seem to return anything.
This seems like it would be a good idea, since `GetNumAtoms` can only be used in a single place, but it would be nice to have the same logic as `range` in the `if` statement.
The `float64` is always undefined, as `float64` is always `float64`.
This is a change in behavior for a while, but I'd like to keep it simple, as I'm unsure.
This is not the same PR as the previous code.
@sayden Any idea where this is supposed to work? It doesn't look like the `date` is actually being passed to the `date`?
Is there a reason why we don't want to use `blackfriday.Markdown` here?
Can you explain why this change has made?
Should it be `sqlite` instead of `sqlite`? It's used in both places so we have a bit more general purpose, I think.
this seems to be an implementation detail, why not make it `uint` and `import`?
This is now unused now.
I think you can also remove 'BUILD_TYPE' now
We should not log errors when `err == nil`
This should have `mset.mu.RLock()` so it gets called every time the object was found.
This is not used by other code changes.
I don't think this is right, the only thing that is adding is not clear.
Hm, I don't think it's necessary to include `orcid` in the `position` method, since it was previously used by the `IdentifierScheme.find_by` method.
Those empty lines are causing the CI failure. I would recommend to move these two imports to the top of the file (not only the ones you have in this file).
I would recommend using a static import for all the others, to make sure it's only used in one place and not the other
This should probably be changed to `if (project) throw a `Long` instead of `when`
This is the main use of the existing "if (refer) `PicovrSDK.SetEyeBufferSize()` method above.
Would this be better as separate commit?
nit: it is a bit weird to have a mapping of rule hashes. Maybe `ReadReadprimitive<FullRules>`, `ReadReadprimitive<hashFullRules>`, or `ReadReadprimitive<Readprimitive<hashFullRules>`, and maybe we should just call it `ReadReadprimitive` instead?
I think it's better to use `is_builtin=True` here and let the `type_attributes` be consistent and do `is_builtin=False`.
This is not really necessary if you use the `deleteRecursive` method to get `version` from the `config.factory` file.
Can we use `StringUtils.format` here?
can we do this in `server_version.rst` so it doesn't work for other services?
Can you add a `TODO` to remove this line?
This is not necessary if you are not using it anywhere in the code, but you are not using it anywhere in every day
`createsince` is a `createsince` (and it would be good to use `createsince` in the `createsince` method as well).
Metrics/LineLength: Line is too long. [132/120]
I would call this "import text".
is this a breaking change?
Is there a reason we wouldn't want to do this in the `validateContainers`?
Please add the `server_conn` parameter to the docstring.
I think you can remove the else here.
We can use a `User.last` object instead of a valid variable here
Do we need to call it `_getSampleCode()` to avoid the need for the code documentation?
I don't see a reason to have this info in the past - but I guess it's ok to get away from this. I think this is the only change that affects the `Hash.ZERO` package and we have to do the same thing for the `_onCommit`.
I don't think this is necessary, the error output should be logged if the user does not exist or not.
Isn't this needed?
Can you remove this? It is used only for the new use case.
Are you sure this is the right approach?
Why do we need this? I think it would be a little better to have a single exception message.
This is only needed in `remove_transaction`. If the build passes, then the build passes will be run once.
I don't think you meant to do this here, you'll need to update the test to check whether the spec is empty, then you need to do this for the new `teacher` variable.
this should return an int?
Hmmm, why is it needed to change this one?
This should be reverted
I think we should add a license header here
@scheibelp I think this is fine, but I don't think it makes sense in the context of 15000.
It looks like this is not a big deal, but I think it would be a bit easier to read to do the same here as in `addons` (or similar) and have a more `addons.get` that would be better than `import addonHandler.getActive(current)`.
Just curious, why not use `\n` rather than `\n`?
why not just `nextRowPos`?
@jcotela is there a reason you kept these? I'm not a huge fan of "openebs:livenessProbe"?
Is there a reason why you're not logging the entire CommandLine object here?
Why this line. `this.hot.countCols(), this.hot.countSourceCols()`, and not `this.hot.count **max**`?
I think the check for -1 is redundant here
Use the new Ruby 1.9 hash syntax.<br>Use 2 (not 1) spaces for indentation.<br>Line is too long. [82/80]
Can you add the import to the top?
The error is logged here, but I don't feel strongly either way.
Isn't this going to be true in the case of an invalid directory? Or is this a breaking change?
Can you update to use `.jit.annotations.TODO`
I think you can just return `IsManaged(..)`
why are you keeping both `api_sig` and `api_key` ?
I would prefer to keep the old version in the `keyMapping`
This is not correct, but `wx.OK` is only used for the confirmation dialog, so `wx.OK` is not actually the case here.
This is a little weird. Can it be `OpenAPSPlugin` instead of `OpenAPSPlugin`?
Is it possible to get a modules from `Router.Source`? Or is it just forcing this to be `CHMessagelayer.GetResourceName(*msg)`?
Please use applicationVersion for this
Why not `addContext`?
I think it's better to move it to `AppendFormat` and use the `string` method in all places.
@cra0zy do you know why this was changed? I'm not sure if it is correct.
I think you should pass the parameter to `result` and not `result = false`.
I don't know how I would like to know what the key does. Is there a way to make thebserver-0.kbfs.keybase.io andbserver-1.kbfs.keybase.io are the other way to fix it?
This is a bit of a hack, but I don't understand why the getter is called when the user is received.
This one was not being used
Why are you removing this?
you could use: `sh.echo` :stuck_out_tongue_closed_eyes:
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
remove unused imports
Please put the `// +optional` on the `json` section above.
Sorry, I was just wondering why you didn't do this before. The reason for the change is the `Peer` and `Peers` was the original `t` was the name of it.
We can remove this entire block.
I would just say the last block is `Nexcloud` and remove `Next` altogether. I think we'll have to change the default value in the future
`update*/` is already validated in `TEST(DR_ALLOC_COMMIT_ONLY, flags)`
`end` at 7, 4 is not aligned with `.and_return` at 3, 11
The text.decode('mbcs') should be just a list of characters in the conditional.
Why remove the line?
i think we should use `api` here instead of `networkMode`
The `SimpleLiteral` is already defined below.
Do we need this here? I think the pattern is correct, but the `.replace` function is only used in one place.
I would prefer to not call `transformer` here, because it is already `Optional()`.
`peerID` is an `byte` object that is a peer function, so I think the `peerID` should be the same as the first line.
`rpm` is not used at all. It is used twice.
We should also have `sac` in the docstring and in the other places we have `rfp_inplanes` and `rfp_inplanes`.
BPF is set in BPF mode, but BPF disabled?
Remove extra line break.
Why do you remove this?
I don't think it would be good to remove this. It is the most likely to break a user.
This should probably use `traceInOp(fmt.Sprintf(pm.rply, c.pa.size)`.
Is there a reason why `skip_fwd_prepare` was set to 1?
Why are we converting this to a struct?
Why is this removed?
This can be `private`
Should we add a `func Run(server *Server)` call here?
nit: this is a test where the new field is created, but the new field is not enabled.
Is it possible to get the config file from the CoreMessages class ? I don't know if I need to do anything about that
The connection may be too short. Please check.
This seems like the wrong place for this one.
Is this supposed to be an error?
Using an `min_size` will always result in 100 if not set.
This assertion is not necessary. We can just pass the `Stream.empty()` directly into the `isEqualTo(3)` method
This will not work with any change in the PR.
@agramfort This file was added to fix the bug.
I think you can remove this.
I think this is the wrong way to get the enum value from the server.
This should be `allowNewUpload`.
I'm not sure this should be `encode!` or is the actual string always going to be the first string?
I think this is wrong now, but it is not used anywhere.
why did you remove this limit? I don't know if you need it
Whoops - missing newline?
This should be `Should accept two parameters: at the end of the line, and then set it to the string ``"None"``.
Why do we need the `.iterf` here?
This is another bug, I fixed in this PR.
The reason this is because it is used in an environment variable, is there any reason to not just remove it?
nit: update copyright year in header
I think the `String` should be on a new line here, otherwise we will be able to get the `defaultEnum` from the map
I would have put this in the docURL too.
Is there a reason we use pytest for the good reason to compare against `utf-8`?
Redundant self detected.
Is there an option to use a set of length here?
nit: I think this could be private and moved to `VolatileObject`.
This is unrelated to this PR - but we should remove the commitQueue altogether.
I think you should just return `err` if there is no error. The reason is that if there is no error, we can't get the error message from the message.
The length of this test was failing because of some test cases that need to be updated to reflect what's done in the tests. The test is failing because the `paddle` test was failing because of a `err` being `nil`.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
This error message should be updated to "The resources in %q have been deleted"
This could be `@Nullable`.
I guess this will break all the users of the controllers, since the "Could not save WebCal-calendar" might have been defined in the UI.
This seems like a bug. I'd prefer it to be a `try/catch` or at least a `finally` block.
I think we should also check for the warning message here.
I wonder if this should be called _only_ for all platforms that are being used to call this, instead of using `fmt.Extension+` for all platforms?
The enum type is only used in the enum. I think it should be renamed to be `V2`.
`selectAll` should go away from `rfcrfc`.
This should be `!test.nodes().Format("15:04:05.000")`
This was just a mistake before, and should be fixed in a separate PR
Rails/InverseOf: Specify an :inverse_of option.
You can use `string.Equals("true", StringComparison.OrdinalIgnoreCase)` here.
Should this be named similar to `_security_button_simple` instead of `_security_button`?
I don't see any reason for this file. It's probably okay, but we should just make sure that the module has not been registered in any other files.
@mjkkirschner do we need this change?
`my_package1` doesn't have to be a package. It's a `as_string` method and doesn't have to have a package. It's not the same as the `_ImportFrom`. It should be a `_ImportFrom` method.
I think we could just use `using System.declareNamespace(pmd-" + language.getTerseName(), "java:" + functionsClass.getName());` here.
why not a small client type?
The name makes me think that it's a little confusing to read when this is a non-null value. It's a bit confusing. I'm not sure how I feel about this. I think we should keep the pattern a bit better.
Rails/InverseOf: Specify an :inverse_of option.
I don't see the `root` in any of the code base. Do we need to do this?
This will fail on standalone Selenium server, right? If so, should we make this `GET_CANVAS_URL` for the standalone Selenium server?
why change the test to make more sense?
How do these two changes make sense?
Do we need this? It's not an array, right? Or maybe just make a constant?
`self._visited_lines.get(line, _visited_lines).get(line, _visited_lines.get(line, _visited_lines)`. I'm not sure if we want to keep the same code as for `if not isinstance(node.parent, nodes.Module):`, or if we should do the same here, we could just do a `if not isinstance(node.parent, nodes.Module) and node.parent_statement(future=True)` in the `if not not ... else`.
`Image.sil.find_by('serve_id', mb_id')` might be cleaner.
Why is this removed now?
This should not be in the `unset` method.
Is this change required? The backend is just a small function that takes an backend object that does not exist at all?
nit: can we have a helper function for it? It's used by the tests, so it's easier to read and understand.
Why did we change this?
I am a little bit confused about why we use `if not instantiating two `if` blocks here and below. I'd suggest to use `if` as an arg and use `if !defined(`.
can be simplified by `has_time()`, `int()` is also needed here.
should be final as well
Why is this final?
I think we don't need this extra field here. It should be an internal state, no?
Why do we need the `Model` here?
`rt optimizer hook for distributed training` -> `Parse training`
I don't think you need the `//` here
As we discussed, I would have expected the import of this to import `Node` and then do `Edge = import_string`.
We should add the consequence of this constructor.
Use `begin()` instead of `begin()` to indicate it won't be an array of `begin()`
There are still 2 bytes in the `Read` function that have been deprecated. Can you explain? I'd suggest adding the new parameter to the new `blockDownloadDuration` field and then adding a new field to `int32` and have `int64` in the `java` and then using `int32` in the `Read` field instead of `int32`.
nit: remove the `testTimeout` arg and put in `initStoryshots` block.
The original code had been using `u.ctx.MaxUploadParts` for the code below. I guess this was the intended change.
I think the `common` is not needed, these should be `common.json`
Can you make this a `--rpc-allow-unprotected-txs`, since it's a `default`?
there's not much need to introduce this to the docstring, it can be fixed in this PR.
@larsoner can you take a look at this?
I'd say 'explain the 'explain' here, because the key file will be the first letter of the config.
I don't see a security_group_ids parameter used anywhere else in this PR. I would rather see it as a parameter.
I think you can use the `replaceAll` function directly.
Why do you need a G-HttpException here?
This is the one I did not catch it.
Shouldn't we also use Math.random() for theimal?
Can you explain this change? Isn't the scope of this pr of this patch just to ensure the gJobMgr that is created?
I would have put a boolean here, and have an if statement that passes in a condition to the `else if`
This can be simplified to `gold_shared_ptr<HostManager::hostManagers_` since the method is only called once.
The default should be `router-expose` to keep it more explicit.
I think this is a leftover from debugging...but we should be able to make the tests pass
Please add a changelog entry
why are we changing this?
Line is too long. [103/80]
I'm confused, I'm just changing the test. If we do this, then we should have a test that has the new correctness of `MolToSmarts` in `ProductTemplate` to return `true` (and we do this as well).
This is not an optional field.
I think we can remove this field entirely, as it's already a public field.
@bartonjs, are we changing this?
Does this really require a non-standard variable? If so, should we rename it like `_IF_X86_64`?
You can remove this line.
Is this an old bug fix?
Is this change correct? It looks like it was done in the same PR as the original commit.
I'd prefer `App not running locally. Try `ddev start` as an integer. It seems that we should be checking for `serviceId`.
Can we change the type from `api.ENI` to `defaults.task.task`?
This seems like a good candidate for a new `mutex sync.RWMutex` property.
@Vikorozco can you explain why the old code was there before?
I'd rather not do a `None` here, it's not really doing anything else. I would have expected `exch == True` to return the correct value.
`key` is always `false` right? I guess we can just remove `containsKey` from this line and let the user know what they're doing?
we should rename the `etcd-snapshot` to `update` and `update` to indicate the default behavior is "save" or "update"
Why are we returning the ArrayList instead of the current one?
I'm not sure why this is needed - if the app is not enabled, then the app is not enabled.
This will need to return `nil`
We don't need a full paths anymore, right?
@mikedoan , it might be good to have an `isNetworkError` function that accepts `xhr` as a parameter, so we know that it is not a part of the list.
We're missing something, what is this doing in terms of `Umask`?
why are these changed?
Do you think we should add a default implementation to the metadataLocation? We could also do something like "isn't implement removeFiles with metadataender" and just add the `getReachableFiles` option to the metadata location.
I would add it to the other PR, if possible
Can remove the package private import
This method name isn't very descriptive. How about `getCapability`?
can you please explain this change?
Nit: please add braces to this condition
does the `%s` format contain the exact same thing here? I would expect that if someone calls this, they can use ` fmt.Sprintf()`
I don't believe this will work. We'll need to fix this in a followup PR.
I'd like for clarity to make this configurable, but it's not a big deal for now.
Please use the `string` field for IP addresses
It might be better to move this after `CreateDeploymentWithomapifForm` so that it can be done in a single place.
I think we should use `strings.Split` here and in `t =parts[1]`.
this variable should not be called on startMs. It should not be called directly on startMs.
`f_ok_proto_negotiated` is not used in other places.
Don't you need to include the `Holds` key in the list above?
The `c.typeString()` can be replaced with `skipFlushOnClose` now.
Why do you call it `libbeat/task.go`?
nit: can we rename this file to reflect the new argument?
Please use the same name as the other constants.
does this mean that if the user passes a number of your application, it will fail to compute the dataset?
You should be able to remove the original assert. The value is a TaskNetwork object, so it should be a separate thread.
nit: move this line to the beginning of file so that we don't need the interface.
Why we need both `duration` and `renewBefore`?
we can remove this, it is no longer used
This should be `storeSamples`, not `storeTranscriptions`.
Do we have a test that verifies that it has been added to `make reset`?
This doesn't seem related to the API changes, but I am not seeing it anywhere else in the codebase, it's just for the `TagContext` interface.
Is this change needed? It seems to be missing a comma in between two lines.
This is just a typo, but it's probably better to make the function static as `isExternalFormatConversion`.
This is a leftover.
Is this import correct?
Is this used?
nit: can we have a default with the default?
I wonder if we want to keep this, or at least move it to a constant in `lib/cli/server/cli.go`?
should this be part of the model?
Why was this test deleted?
nit: remove this line
This is probably fine, but I think you can just do `if (last_update_ts is not None)` instead of using a function to avoid checking if `last_update_ts` is not None.
why was this deleted?
should we change the name here to `objectId?` for consistent names in `v2_id`?
Line is too long. [81/80]
Why not `for (auto& usm_mem : m_indirectKernelMem)` ?
The `!= c.typ == CLIENT` check is redundant.
I guess we should throw an error here because the target leader is not in the _without_ the src_ itself.
This needs to be added to the `FeatureConfig featureConfig`.
Can't see this being used anywhere else.
@cclauss - Is this a typo? `EncryptHostTraffic` should not be set on Windows.
you need an extra space here?
shouldn't this be `id:id`?
This should be done for every single call to `auto_fire` instead.
This is the only change that affects TF codegen. I think you could do the same thing in this patch.
Can't we do this for a similar case? This will allow for a non-Detection task to have a specific implementation of this list as well.
Why is this removed? If we don't have anyone with it, then I'd suggest that we remove this line.
Just to confirm, is this the only place where we're using this?
The `keyDownUp` block should be changed to just `keyDownUp`
Please make sure the key is not set, that will be set in `LoadCommit` instead.
Is this interface required?
Do we need this? Can't we use the constant?
Is this still used?
I think `test_diary_comment_count` is too cumbersome to have a name change. `test_diary_comment_count` might be better.
this is an API break. You can call the task.Values() before each pass.
I think this should import at `create` level and not at `[]*it]` as the `[]*it]` attribute is never used.
Please make this a try catch.
Should this be a log?
Why not just do `(this_name in this_name in the decoder decoder)`?
Let's just call it `is_local_to_site` instead of `is_local_to_site`.
I'm not sure what's going on here.
Why is this a pointer?
Why is this needed?
isn't it better to do `if (true)` in the previous line?
How about: `self.readflow` (or similar)?
Why this import is needed here?
What is the `numba.core.core.utils.core.--dry-core` flag for this case?
Should this be a `applyPreflightCorsResponse` call instead?
this is a warning.
Why is this needed? The `pants.Channel` is already added by the `pants.ChannelFrequency.package.Channel` which is used by both `deprecated_fields` and `deprecated_fields`.
This should be a warning. We should be looking at this and see if the message should not be logged. Also, I think the message should be logged at the last point.
I guess this is still a bugfix, but I would like to see the changes in this file in a separate patch, and not a big deal, if you're going to make a change in the future to make the code consistent.
This is the only real change I'm concerned about. It's not the exact same thing as `nil` - which is what we want.
Why not pass the `Directory` as an interface?
This seems like not a boolean variable, and I'd rather not have a boolean parameter.
I think this should be `_runnable_index_for`
should be a pointer.
I think the original `stop()` is still necessary, as it will be destroyed automatically.
Is there a way to check the content of the C++ code that is actually used?
Can we remove this?
This doesn't seem right. We need to handle it in an array.
I think we need to check if `self.nvda.pyw` is None or not.
Why remove this?
It's a bit odd to have an error message that gets raised here (and in the next line, if there's no error message). I think it's better to return a nil error. This will allow us to make it more useful to make sure the member is not a member of trust domain. That's probably not an option.
I'm not sure about this. There is a way to get this from the `dockerClient`, but it seems to work that way. I think this is fine too - maybe it is better to have a test with a test case for this.
`s/s/s/ c/fixfixer/s/`
How about: `FiltersFilters = yarpc.Filters{`
This is a little confusing, but why is this change needed?
Should we also add an extra `uri` parameter?
Can we use the `count.ComputeMinTealVersion` function in this case?
Should be able to remove this check.
This is not needed. You can simply remove `@shard` from `db/user` (it's not a big deal, though).
What's the effect behind changing the default value?
I think the original logic is wrong here, it should be `!True(explicitIonMobility)`.
niiiice, you can use `os.path.splitext`.
You can use `$this->router->fromRoute()` instead :)
`resnet/Hive/` should be `resnet/Hive/`
Why is this a separate change from another pull request?
@bparees do you mind fixing the cleanup and adding the fix to the end in this PR? It would be good to have a look at the code for it
I'm not sure what the right test would be. I don't think this is right. `isPathInFields` is a valid path, and `userProvidedFields` is false, but `isPathInFields` returns false, which is what is expected to return. `getPathInFields` will be false if the user's user's user's project has found the case.
Should be `statements[]`
Maybe `namespace` should be added?
I believe it's good to have the flags flags defined in the `Resources.sdk` package, and add them all to the `Resources.sdk` package to avoid the conflict.
Wouldn't it make sense to add a flag to the `addSmallerNonces` method?
I would suggest using `defer nc2.Close` instead, to make it clear it's the same as `Sleep`?
can you please add more detail here, and change the description to `init(true)` ?
Is there a way to make the property public (and use this constant)? I think it would make more sense to have a property on the `version`, and then use the `version` to set the value to `True`, to avoid having to add a public value.
Why is this not `json.dumps`?
This is a bit odd - we need to add a `dictionaries` annotation to the constructor and have the methods return something like `stemmer = new Stemmer(loadDictionary(...))` to ensure that the API will be used as a member member (which could be the default value).
Why is a `Set()` instead of `final`?
This should be `useless-type-doc-config` IMO.
@danrot is the idea here. I would recommend adding an enum here to the constructor.
This is the only change that is needed.
you should add some `role_data` check in this function
This method is used in a few places, and I think it would be better if we just pass in `selectExtension` and `selectselectselectExtension` to the method.
Is this a bug fix? This will break the build.
`(+6)` is the right choice here.
I'd say `Deprecation.warn(self, "user_params", etc)` here.
Should we do it in the early_assertion case? I think we should try to avoid the check for the error.
I think this should be `activity.ActivityTraceFlagsFlagsFlags`.
I'm wondering if we should just always return the value from config. Right now we don't want to set value for all sync packages, and it's not needed.
@saghul, @tarekgh can you explain why you changed from 20 to 20?
This file is only used in `load_tests`, so please revert.
This is the only change that affects the `select` call, and it makes it sound like a boolean value. I would prefer to avoid that, but I would also suggest to do the following: `select(zip(selection_specs='DynamicMap], **select)`
Can we add an assertion about this? The `renders numeric` event was created in the `""` and I tried to figure out why.
I think the `else` can be removed now since the value is now set directly in the `request` module.
Please don't make changes in the code like this - this will make it easier to parse to `static bool bool` for all of the other ` dynamo_exited_synched`s
I don't see this #if (I doubt it is).
Why is the default value required here?
Why do we need this change?
This will not work for Python and Python. You should also test the output in the test.
Metrics/LineLength: Line is too long. [82/80]
`fetchPrivate` is an alias, so you can just do `fetch = true`
I'm not sure if it would be possible to have two cases: - `ClientAuth != tls` - AClientCert - `K1.ClientAuth = tls.ClientCert && false` - `ClientCerts != nil` - `StringSliceEqual(cfg1.ClientCerts, cfg2.ClientCerts)` - `ClientAuth != nil`
This file has been moved to the `fastdds` namespace, right?
Metrics/LineLength: Line is too long. [132/120]
What if you made a method `original_twitter_digits_path` return the response (which is then called in the `before_twitter_digits_path` value)? This way we won't have to worry about the need to change for that, since the `before` value is the one that will be called in an app.
This doesn't work. You can call `dma_h` from the `res` variable here.
Layout/SpaceAfterComma: Space missing after comma.
Is this a typo? `child_process` should be `readline` not `child_process`.
This was changed in this pull request. The previous version was correct in the past.
I think this should use the default `args.length > 0`.
This field is already in the field `LockmassTolerance`, so you should remove it.
Should we use R.string instead of R.plurals.download_report_content?
`includesUtils.isSupporting(caps)` is also used in other places.
You should be able to use the `2016.zone` from the config file, otherwise the value will be used to set the default value in the database.
What is this for? I don't see it used anywhere
This is the main change, right?
The `topic` suffix is probably wrong (see `deprecated`) in the original `setUp`, so this is fine.
I think we can remove the `!isUnmount()` check
@kroitor since you've added `indices` here, can you please update the `tid` one too (and there's no guarantee that `indices` is empty)?
is there a reason for not doing this check?
I think you can drop this and add new `updated_at` methods
is this a string or a string that's not a boolean?
This is not a valid fix.
It is better to add this flag to `current_user.go` and `current_user.go` as well.
The enum should be the `RPC` object
Please add `@Nullable` annotation.
This was a typo, we were checking for the method name, but the method name was still being `method.MethodGroup.Name`.
Why not 1e-3 *0.4 ?
I don't understand this change, I don't think it's an improvement.
Is this still needed if we are going to check that the output does not contain any of the environment in the tests?
nit: use `String.indexOf(';')`.
Can we remove the `ValidateSignature` method altogether?
I don't know if this is a change from the original, but it might be a good idea to add `this.searchEnabled = searchEnabled` to `this.searchEnabled` as well
Is there a case where `filterExpressions` would be null, but `size() > 0` would be more appropriate?
I think we should add some group numbers for these.
Why is this being removed?
Is there a reason we can't return here?
Can you also update the docstring?
Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
The set should be before `proc_set_num_simd_saved(void)` and before `proc_set_num_simd_saved(int num))`
could you please replace `hash_table_firstkey(d->completed_files)` with `new(d->completed_files, &name) / ...`
Can't we change this to `test GSSLevel`? It's not clear from the PR.
What is this for? Is it used for anything else?
how about putting these length blocks into a function?
I'm not sure if we should do that. It should be an `int` attribute.
I would remove this extra param.
This will throw a `KeyError`.
I think this should be `import ErrorNotification from './legacy-notifications/error-notification'`
We should not log the metric at all if we don't log the metric at all. This seems like a bad idea.
I think this change is unnecessary because `ivacyGroupId() == null`.
This file is still in `binary_from_average`
Is this needed? I don't see the integration tests for this, just curiosity?
Why did it need this?
@jvillalobosyatnik this is the fix to the other changes in this file.
Please use `const int dilation_w * (const int & dilation_w)`.
This will cause a problem for the `T` parameter.
`**` is not a actual private key, right?
Is there a constant we can use? If yes, we can remove this.
Doesn't this need to be here if the `type->is_set()` method returns false for some reason?
I'm not sure if we want to make this change, but I think we should add a log statement to `WaitForStart` in the future.
Can we make the log level conditional?
I don't see where this is being used.
We should add some more magic numbers here
Can we remove this variable and just call this variable `FallbackSources`?
I think this is the right fix. The `matcher.matches` was used to call the method on the `Jaddle.anyMatch` method, but I'm not really sure if there is a better way. I'm not sure if there is a better way to do this, but I am not sure if it is worth it to do it.
I don't think you need this anymore.
I'm curious about why we need to set the plugin in `getPluginEnabled`
You can make this a constant
Lint/AmbiguousBlockAssociation: Parenthesize the param [call-zA-Z is not on the line after the # of the # of the block.
I think the plan returns here is just to make the `copy_by` call just to be safe? I think it should be the plan in the first place
This won't be called if you have a single instance of `hideOnTouchOutside`.
I don't think we need this. The previous behavior of `ities.Span`, `ities.Span.SetException` isn't used.
This doesn't need to be final.
Isn't this supposed to be " ApplicationScheduler"? If so, is this the right place to change it?
I think we should add some specific information here.
This change should be reverted. It's causing the test failure.
nit, but I think this is a little weird to have a default value that is `public Task ForceFlush()`. Can we rename this to `public`?
I don't see why this works. I don't see why you removed it.
I'd use `System#SetProperty` instead of `System#Property`.
Can we keep the old name for consistency? I think it would be more robust to keep it as a property. It's not a blocker for this PR, but we can also make it a const.
This was not the only usage of this method. I don't see any other place in this PR, but I don't see anything in the past.
I think this test should be testing the same thing as the test method in `CreateMdc`
This package is now empty, right?
why not keep the previous version? I assume it was just a mistake?
I think it should be better to just return attackedSet
@salesforce/design-system-react/components/carousel/__examples__/default.jsx
It looks weird to me that we should not use the `scripts` key here, it's not used in the `<electrum>` tag.
I see a lot of code paths, but I can't see where the variable is being used. Can we have a look at what is going on here?
nit: rename `TransferFormat transferFormat` to `DefaultFormat`.
this is an API break. `GET` is a new ticket (which I think is) not a valid operation.
why not just use a hardcoded string, instead of a hardcoded string
Please don't nest imports like this. It's an example of a specific import (which is a single import) that is a single file.
can we also add a `get_global_operations` helper method that returns the object?
I guess you need a `m.Get("/commits/:commitId", v1.ForkRepo)` here.
Should the response be in a constant somewhere?
why change this?
Shouldn't we call this function `HeadEvents()`?
I think `classifier.getPartitionIdPerPattern()` should work, as we don't have a `assert` in the `getPartitionIdList` method.
If it's only used on one place, can you use `.expand_path()` instead of doing the `.exist?`?
I think the wording should be "management.azure.com". The only reason this should be an LCD is is if we have the `management.azure.com` file in the `pkg/defaults/internal/constants` package.
Why are we calling this here? `MessagePool` is only for `pool`, so we don't need it in `client/v1/client.go`?
Do we need to keep track of the old and new fields? The old one is just a non-nil, so maybe we don't need the old one.
Just noticed that there are two changes in this file. Should we set `--storage-strict-json` in a test that does not use `--storage-strict-json` in `setUp`?
is this change intended to be backported?
Is this really required? It looks like it is only used to be deleted in the first place.
is this a BC break?
why are all config added here? I don't see any changes necessary
This should not be needed.
I don't think we want to have lowerCamel in lowerCamel, the service can't be lowerCamel. We have to introduce a constant to avoid the need to introduce a public method.
I think this change is not needed.
This is the only place where I've used this.
I'm not a fan of having `Transport` here. Why would `Libuv` ever be null?
Should be 20 instead?
This will fail if we're not using Java-form, right?
I don't see this referenced anywhere else in the code, but if we don't add it, it's not used.
We can add another property to the list of tasks, i.e., `upstream-status-when-all` can be set to the default value by default.
@deads2k do we need to add flattenedTree to the list here?
This is going to be a breaking change for a long run. It is also an old issue in the code and is not a problem. I'd recommend adding a new method to the config object that is being used in another PR, but that seems a little strange.
why this is a hard error? can this be an error? why not just have an error message be logged and not the user?
We don't need these imports.
I wonder if `if (isNonNullableReturnType && !(isNonNullableReturnType)) {` should be better than `if (isNonNullableReturnType && !(is MessagesableReturnType))` for better readability
Please remove all the blank lines.
I think that this should be moved to `spec/services/api_test_spec.rb`.
This is a breaking API change, and I think this is not the correct place to add this one.
Why does this condition need to be changed?
what's the purpose of this change?
This is the fix, but the `==` should not be needed
I think we should try to avoid renaming here. `composite_root` is very likely that a user should use the current state to a resource.
this seems to be the wrong place to delete it
"file" is not considered negative. It should be "file" or "file"?
This is not right - we want to keep track of the entire remote user, right?
I think we should do a similar check for `vn.Path` below, otherwise it will crash if v2 is not empty.
This import is unused.
Can you remove the "circuitBreaker/cpuCircuitBreakerEnabled" prefix?
So, if the ` SubmitBcc` is empty, we can set the singleBcc mapper directly.
I think we can remove these.
This file should be removed.
Please move this import to the top of the file.
This should have been removed.
I don't believe this is the correct place to change. The previous code was probably wrong, but I don't know if it is a good idea to change it.
The fallback should be `replacereplacereplace` (also below).
I think this will be easier to read if `types == 0` is `nil`.
Please update the changelog
Why this test removed?
It seems that this property should be only used in the corresponding case?
This is actually incorrect. It would be nice if there was some default value before it was 0 (which was the case before).
I am not sure why this was here.
please revert this unnecessary change, it will not work for other changes
I think it's better to just delete this file. The other way round is to use a file name and only use this.
Why do you change it from 0 to 0?
This was a bug, should not be removed
How about: `if isinstance(wavelength, int, float):`
I think we should probably make this configurable, but it would make the intent more clear.
Please remove empty line
why default to true?
Can we make this string translatable?
If we're not using the existing `OPSZ_half_16_vex32_evex64`, then you should just define `OPSZ_silent_16_vex64` as the second argument.
Is this related to the change, or does it make sense to add a default value to the `vString` field?
This is not needed. I would just call this name `BUILDIDOS`
I think you should use the constant for this to be more specific and log the answer to the log.
This import seems unused.
I wonder if it makes sense to move this to `window.getDependencies` and then just have it on the `applyToWindow` interface? That way the code won't be able to determine if this would fail (or if it should be a separate file).
I think this is going to be a problem if the disk cache has been closed, right? I think it would be better to do it in an `after` block instead of relying on the right `op`.
It's probably worth putting a static import in `start()`
We should also add the `parseArgs()` method here to make sure that the method returns both a and an enum.
Why the consensus version change?
I would prefer `rule: handlers.Copy()` if it is not used
I think I'd remove this. It's not used anywhere, but if you wanted to keep it, let's just remove it.
Why are we not just asserting something about the hashable type?
Shouldn't these be `String.valueOf(String, String)`?
I'd prefer `false` as we do for the `DISTINCT` class instead of `date` here.
Why is the container being removed here?
Please add a link in the changelog as well.
I think it would be clearer if you have to set the interval in `maxPeerInactivityDuration` and `maxPeerMonitorInterval` to `""` so that we don't need to have the value set here.
This is the only change in this file. Can you explain @mikedouba ?
This will cause the server to stop. If this was the only place this was being used.
Do we need to create a test to create this test?
This is a bit confusing to me. Why do we need to set protocol.StateReader to true? Shouldn't this just be a constant?
This will not work with anyone using `sys.path.join()`.
Thanks. The test was correct. The error handling here was not zero, but I didn't noticed that `immediately fail` is zero.
I think it would be better to have this be `if el is True or el is True`, then if el is None: ... and el is not None ...
How does it relate to a "not supported" problem?
This is not needed any more.
Please don't use star imports. You can use star imports in your IDE to get your IDE in the IDE
Can you add this to the `utils` class? I know it's not part of the PR, but just to be sure: * If we do want to have it here we can just add it to all the other changes to this file. * The only thing we can use is to make the code more readable and add the static field. * Can we remove the annotation and add the static field to the static class?
I would prefer to see the other methods in this file (e.g., for example `StartTimingWrite`)
We should not support it yet, I think.
nit: can we avoid use of `*` in imports?
Please add `wlr_log()` before `create()`.
why not leave these lines here?
This is the one that we need to fix, right?
This is a breaking change. I think this is the only change that makes sense to me.
I think we should use the `*` interface since we don't have the full name anymore.
Is it intentional that this is only a part of the old "tg" flag?
@saghul is this still necessary?
Why remove this field?
What's the purpose of this check?
I think we should add an option here to prevent calling `mq.select` from being called.
This import seems unnecessary.
Is this change necessary?
This is the main change that affects us when the user doesn't specify metrics, and the `spackHandler` will be the `Handler` by itself. We should probably update the `travel` type to something like `isHandlerHandler`
I am not sure if this is correct or if it's just for debugging?
nit: it's not clear what the `ErrorMessage` value means in the second line
Why are we removing the import here?
why this change?
you can just use `clmin`
This looks like something we need to do in this PR. Is it really necessary to call `Set` on this function?
I would suggest to move this to the `getClassForNamespace($ns)`, to make it more readable, it's a bit clearer.
@adamjstewart Isn't this the right place for the original? I'm not sure if this is the right place for this?
why do we need this? is it a hard-coded constant?
Since the `is` method is called from the `version_id`, I think this is not the correct way to handle this.
This is the same change as #6180
this isn't needed right?
I think this line needs `.update()`
nit: you can use `hiveScanMode = STATECommon::getDefaultLong(HIVE_SCAN_SPECIAL_MODE);`
Should this be `item` or `context`?
please make these package-private, no need to include "some author" in the position list and also include "some author".
This is the main thing that needs to be added in the `except webelem.Error as e`, as the default value is `None`.
Why remove this empty line?
why is this default needed? the options are optional.
You should also check that `color_enabled?)` has been called in the DB (as it will always be an empty string).
I think you need to also `toCashAddress().replace('bitcoincash:', '');` in the `Abstractcoincash` method. This can be simplified by checking the `coin` argument.
`in [usertypes.KeyMode.hint, usertypes.KeyMode.insert, rebuild=True)` would be more consistent
I think this is a bug in `Headers`?
I wouldn't add that `setUp` would do the same as this.
Seems like an unrelated change?
This is a good candidate for using `sendResponse` in `sendX509SVIDResponse`.
I think this may have been intentionally removed since the new `--strict-of-package` is not used in this PR.
Is this the only place that uses this test will fail?
This should be `True` because `_auto_indexable_1d` can be undefined. It is not really a good name to me.
This is an error. Is that what you want? I'm assuming that it's the case that the error should probably be that the debug output is not the same as `rContext.logger.Warningf` (same for `rContext` below)
why is the new param called `destroydestroy` now?
If you're using the `features` key here, why not make this a set of changes in `set_config.py` and do the `features` key in the config file instead of the `configure` key? That way you don't have to make the code easier to read.
I'm not 100% sure what you wanted to call here, but I'd rather have this method use the default config class in the middle of the method.
Do we need this line? I thought `event.com.Interesting.Interesting.Interesting.Interesting.Interesting.Interesting.Interesting.Interesting.Interesting.Interesting.ramram.ramram.ramram.ramram.ramram.ramram.ramram.ramram#ramram#ramram#ramram#ramram#ramram#ramram#ramram#ramram#ramram#ramram#ramram#ramram#ram#ramramram#ramram#ramram#ramram#ramramram#ramram
Why `incoming` is optional here and in `set_dir`? Is this a separate API change that is necessary, or is it a separate API change?
We have no idea how to get this from the previous PR. I think we should keep the old name.
Is the `props` still necessary?
I think this is a very weird change. Can we make the check for `isFastSyncTransition = (_blockTree.Head?.Header == _blockTree.Genesis) && ...`
I don't think we can do this here. It is in use by default, as this is now an internal API change.
This file should be removed
I think it would be more consistent to have `IEC_104_IANA_PORT` here.
I would have put these in the `docker` folder since these are not related to the same file.
Why is this needed? It's only a NULL filename.
I think we should keep these constants as `left_MICROSERVICE`, and rename them to `target_MICROSERVICE` to make the same sense.
The test here was a mistake.
this is wrong. You have to check the first element of the `BasicTimeChecker_1` in the `else` branch, not the last element of the method in `BasicTimeChecker.getCronExpression`. I guess that's the only thing that needs this to be done.
I would move this to `os.path.join`
Would it make sense to make it more generic and say `testing` to indicate it's present on error?
I don't think you need to do that, because it will be present to the AMP API and it will be able to use the validation sets without having to add `--set` argument if you want.
Is this class still needed? I think the `DeviceRotation` and `Devicees` are still being used.
`+` should be passed through`
Why the getAlgorithm function and getAlgorithm are never used?
I think this interface is a bit ambiguous. I would expect that the `root` method is `private` for the exact same reason.
I think this will work with all options options in `strictPopulate` and others, since they are optional options.
The same thing here. This test should not have been written, and I'm not sure if this test is correct.
We should make this a string. It's not really what we're using.
Does this mean the `--allow` flag can be used in all cases?
Can we use `MetadataFile` to avoid duplicating the code?
Can you also add `file_hash` to the docstring?
This should go after the other group imports.
This should probably be in a `if (stream == null)` instead of just being nullable
Please remove the old constructor.
is this change intended?
I'd prefer if we didn't use the `getElementIterable` here, but we can also do this for now.
I think this should be `violations_tablename`, since we don't need `off` anymore.
I think we need a new_exercise_ids.by_by_token(user) in the same spec as the one in `repository`. This is not necessary, and I think this makes the code much clearer and will be a bit simpler.
I don't think we need this line.
why is this not a conditionals?
Why is `unexpectedAlertBehavior` being added twice?
Wondering if this is the right test to address. The "split1cheo2y9w" part should be used instead of "split1a2y9w" part.
Is this still valid? Or is it?
I'm a bit confused about what this line is, if we just have an empty message? I don't understand why there is the first message?
This is probably a better idea.
This can be `final` because we don't need to do the `Exception` any more.
Is there a reason to use a `.` prefix here, instead of a `Isolation`? We can probably remove `@Deprecated`. I think we should use something to do with this.
Please annotate the class name to `getTrackName`.
I'm not sure if this is correct but we should probably check if this is the right thing to do, but this seems like it wouldn't matter if it's just the case.
Is there any way to check for error code when `Unknown` is undefined?
I'm a bit confused by this change, why is the `taskToButton()` needed?
Can you use `defer stopGPGAgent(installChroot)` instead?
This is not needed any more, it should be fixed
Looks like this method doesn't need to be private, since `reason` is only used in a single place.
Would it not be more readable to put this in the `amp-story` module?
Why is this needed?
I think this should be `ADD_color`.
The message is confusing, the message should be "Slf4jLogsafeArgs"
We should be moving the `err` check out of the `s.Address` block and then just `s.Logger.Debugf` in `s.cache.map`.
I'm surprised we didn't have an `empty` for the compression, but it might make sense to have the `empty` be a `SetValue` type?
Just noticed the `--filename-suffix` flag flag was added automatically for the command line flags, so I'm not sure if it would be better to keep the `--filename-ext` flag in the help output.
I think we may want to add a note about this. If the problem is with the `redhat-4` event, the problem is with an error, but the error is not the same as the above.
Why are you removing this class from `ChannelBinaryBatchReader` ? It's not used by this class in `ChannelBinaryBatchReader`
I'm confused by this name. I would rename it to `WebsiteErrorDocumentPathKey`.
@mikeshultz did you consider this change? It doesn't seem like it's the right default. I'm assuming that `pin` is a `None` but I'd like to have it as a `None` and if it isn't then `pin`. The `pin` would be set to `None` instead of a `None` (which is not an issue), and we don't have to pass it to `None`.
Should this also be `sendCommandForDownloadChromeHeadLess`?
Let's use `use` and `cache.rules` as its faster.
should we use the `_categoryElectronics` interface?
we should not have to do this, we should use ' whoever has no default value for this
This was added by mistake in #2714.
This line is not needed, as the `axe._tree[0], nodes[index]]` is an `undefined`, which is the default.
The actual fix for this is to remove the old "merged" version from the cache. The old "merged" version will be written into the cache.
I think this could use a `FileHelper.CombinePath(source)` instead of this.
This was the only place it was used. I'm not sure what this does.
You don't need these.
We could probably add a `:total:` after this one.
I think we can remove this file, it's not used anywhere
Please, fix the indentation here and in the next one.
I think the `log` should be a `log.error()`
You need to do something here if it is the first parameter.
This will fail on error, and will fail on error due to this change.
nit: I'd rather just delete this TODO, since it is not necessary for the next PR
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Do we want to keep the old key name?
Can you also move this to `utils/kubernetes/pkg/util/slice`?
Remove empty newline
This will not work for `Object.keys`, but I think we should change it to `Object.getPrototypeOf(this)`
It's a good time to change the way this is done to be able to make a call to `lobGlobals` instead of `LobGlobals` directly. This way it's not a big deal, but if I'm mistaken, this is a great way to avoid this being a bit of an unfortunate to do anything.
It might make sense to add a `Length` attribute here to show that it is in the other PR.
I think I added this part because it was not used in the code, and it wasn't used anywhere.
I think it is still useful to keep the original version as the default. The default is `1,0, 1` and `2,0`
This will need to be fixed in the previous PR.
This code is now in `emplace_back`.
Why does this need to be a `@EventType`?
Is this needed?
Why is this necessary?
Just to double check: is this a regression in the tests?
Is there a reason why we don't use `go on line expectedStatus` here?
Why do we need a new test case here?
I'm not sure that this is correct... I think you can put it under the `./pants lint`, but you'll see the problem with this.
this is not needed, we can assert here
This is a breaking change to the UI.
nit: this can be combined into its own method.
This is not the only place where we need this. We can just use the same name to make it more explicit and make it clear that we are going to use it everywhere else
Does it make sense to use `.getPublicCalendar` here instead of the one in the constructor?
I'm not sure about this - it's a breaking change (I don't think it's necessary to add `Series` method on the class).
I think it would be nice to have the check inside the function, e.g. `GetCurrentIdentifyFromWork()`
You can use the load method from the constructor to avoid the needing to use it.
This seems like the wrong thing. Why not just return the feature gate value instead?
Should this be part of the function as well?
I think this should also be `public`.
I think you can delete this line now that #1983 has been merged.
I am a bit confused, this is a copy of the list of elements.
We should also be using this in the `AspnetRouteTemplateResourceNamesEnabled`.
I don't think we should do this in any of the task metadata. I'm not sure if there is a better way to do this.
The condition should be `- 1` to make sure the condition is not correct, as `- 1` isn't the default.
Why is this being removed?
Can we have a test for this?
Shouldn't this be `NatNode`?
Don't need the `auto wit` variable.
Why do you need to create the network_name?
Putting the validation in the `URL()` method here instead.
Why do we need to change `name` to be `lower`?
@nmittler - Is it OK to test this?
`random()` should be nullable, otherwise the exception is not thrown
I'm not sure how this could work. I don't think we need this in the middle of the doc.
I'm not sure about this. The join will be always non-string if it's not set, which is a boolean return. I think you need to check that.
This is a bit unrelated, could you remove the reference to the `false`?
@bvanessen I don't know if there is any better way to do this in this PR. I think it would be nice if the latter were a function to return a `resourceEvents` object, rather than a `nil` object.
Can we make this test package private? It's not really important to be used in this test
Is this change needed?
I think you need to use open_url() instead of hard coding it
should we add a warning about 10 seconds?
This is actually a bug fix. I think the `if ( isAmountInt <= 0) {` check should be fine.
why are we doing this now? I think it's okay for both
This looks wrong.
Redundant `self` detected.
Is this intended? I think you're just using the generic options to pass in a `[0-9]{3]` so this will be the one from there.
Use a single string with a capital letter.
@michaelkuhn should this be `Cuda_Error.cpp` instead?
This is the same change I mentioned above.
I think you should remove this import
I see you are not using this anywhere in this code. Why not just have this be an object-wide var?
This is a bug. We can use `constructor.getDerivedStateFromProps === 'undefined'` instead. I think this is the best practice.
nit: `x` -> `x_`
The `EXCLUDE_CMS` isn't used here.
Line is too long. [89/80]
What is the benefit of using `TracerProvider` here? It looks like it is only being used in the schema, right?
This is the only change required required here.
Can you please put this right before `iframes=true` so it is easier to read?
Please add the key "bump_and_store_timestamp" to the key "bump" as well.
Why are these two removed?
I'd rather have this be a constant somewhere, but rather than a bit more general code than an if/else block below.
please keep this as it was.
I think this line should be removed
Can you please also add a `paych` dependency to the `paych`?
please use the `else` branch above
Can we remove the methods for `getClass()` and `getInstance`?
What if we have a `paramLength*2` value?
This change seems to be unrelated.
Please update the description to be "UTF8"
Should we add this to the `private const` package?
Just to double check that `o` was a number in the first place.
could use `debug.info()`
Why is `DEBUG` not separate from `DEBUG`?
`replaceNode` is not a boolean
Nit: Can this use a `Union(0)` rather than a `hasNamespaceImports`? (I think it would be easier to read if we had a `GenNamespaceImports(0)` around the `GenNamespaceImports` above). The `python` and `python` are only used in `testing` and `local` (or even more) so it's easier to understand.
Can we use `addTree` here?
Can't you just `return ok`? We're not actually using `return ok` in the doc.
I'd rather move this to `Reference` class, that way the `Reference` module wouldn't be used any more.
This is an API break, we don't want this to be `EnableProcessBlockStats` anymore.
It's a good idea to move this line to the top of the file, and then move it down there.
We can't just do this in the `if` statement.
This feature is not used anymore, right?
This is an API change. It looks like you are not using this class anywhere else, and you don't need it. It's not an API break.
Why is this needed? I thought you were making it public.
Why not just use `new double[] {0, 0 } },` directly in the static class ?
`string` is a bit confusing, maybe `string won't be a value here and then `ColorColorBlue`? `string` is a bit more common in `ColorRed` and `string` can be used for more complex objects.
This is a little weird. I don't think we have any benefit from having this check here. The `BlockCache` will be `nil` if the file does not exist
Should `methods` be mentioned somewhere?
I'm not sure about this - it looks like it is just used in the `master` class.
I think you could also set `config.force_ssl` above.
I would use an `invokeMember` here to avoid having to create an instance of `verb.install`.
I removed these since they were deprecated.
I think this is still a bit of a no-op. I think it should not be needed for this PR.
I think `project` and `select` can be dropped as `@Nullable`.
This should be `.` on the other strings too. Also, I think this should be `REST instanceof` instead of `Optimized`.
In order to not send a `newAccount` field as it may be a `Account` field in order to be able to set it to null, in order to be able to set it to `null` in order to be able to pass the `newAccount` field and not the `Account` field. In other words, the order order in order to pass the order and not the order. We should not send the order order in order in order to avoid the current behavior.
Is it worth adding a new method for `log.index` to save one usage? I'm not sure what the best practice is to remove `log.index` in a way that we should use in other places.
why is this needed?
I think the code should go away, but I don't think there is an issue with that.
If this is a tag, then it could potentially be accessed via `UNION ALL` or `UNION ALL` (which is the thing I don't feel like it is a tag).
Remove the whitespace changes
@deads2k do you want to add this check here to ensure that the mount is not in the mount?
I'm not sure if we need the `help` flag here. We can use it to generate the `help` flag if we're already on it.
Why change this line?
Should we use the `s3` here, to be consistent with how we are using it?
If we change this to return 0, then we don't need this return value anymore.
I know this is a little bit of a fan of "new" but we should probably call it "base".
I think the type cast should be unnecessary, it's a `type`, not a `type`, right?
I'm not 100% sure this change is correct, but we're going to have to change the `3` to `2` so that it's clear that it's `-1`, which is not the case anymore.
Although it doesn't make sense to use `Module` in this list to avoid accidentally skipping them
I think this should be removed, it's not a blocker for this PR.
This could return a `Strings.isNullOrEmpty(() -> typeWidth)`
Why did you change the default value of `EncryptedReferenceSize` here?
I wonder if this should also be `ifeq ($llvm_version),7.0.2)`.
Why remove this?
Isn't this going to work?
I think we should use `args` for the `run` method instead of the `run`.
This is the only change that affects all dotnet/net/net.js tests.
Why is this change needed?
@tgamblin Do we know what the impact of this change is?
This change is not related to the changes in this PR, but it's a separate commit for the bugfix. Please revert it.
Why did you change this?
Is there any reason we can't remove the old constructor?
This is an API change that is not related to this pr ... please revert
This should be `<=2.2.0, <2.2.1`
I don't see where this is coming from?
Please fix the indentation here. Also, you don't need the `=` at all for the new line.
Is this used?
this is a bit confusing, as this is a bit hard to read. I think a more descriptive name would be `bokeh_config` (or something similar)
Do you think we should use ErrOverflow as a name here? Also, I think this should be used instead of ErrOverflow.
Looks like this should be part of the previous commit
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is a change from NOROR. We should be able to get rid of this.
@DanielVF why not remove this ?
why is it needed here?
What is the reason of having this method public?
I think we can remove this check and just use `v := values.NewCheck(flux.SemanticType(t.ColMeta[idx])])` for the key value.
I don't think this is the right place for this. We should be able to remove the requirement for that.
`decay` need `iam` too
I think this may cause some issues with other issues. I'd like us to move this to `java.lang.org`
You can add this to the `updated_at` namespace as well.
Is there a reason why you couldn't just do `goimports`?
Is the 100 part of the `current_user` prefix intentional?
@tgamblin I noticed that you have to check the stream->getCtx()->_defaultStream. Can you check it's an error?
why is this not required?
We should add an explicit command for this and the command that will be returned.
why is this needed?
Line is too long. [81/80]
This seems like an unrelated bug fix.
This doesn't seem like a good pattern for the interface interface.
why not using `for pubkey in bytes.fromhex(pubkey)`?
We can't do this because of the error.
Why do we need the `!g_events` check here? I don't think we should have it in the `internal` loop.
This isn't a good use case, but I don't know if it's safe for this to be changed.
I'm not sure this change is necessary. We can't make the interface `Scope` as a parameter.
I wonder if we can just make the `let` a `let i` instead of an `let`?
Line is too long. [90/80]
This can be simplified to just `ViewModelInstanceRequest`.
I'd rather see a more descriptive exception here.
I think we need to add some code here to make sure we don't run into code that will be executed automatically automatically.
remove empty line
I don't think this test is needed. It will have the same problem when it's not used
This is an example of a bugfix. This should not be needed.
I guess you're missing an indentation level?
this will break the build failures in CI?
shouldn't this be a `AttackTimeout`
Remove unused import
The `ont` should be in `pending_confirmation_height` as well as `version`
I think this import is unused.
I wonder if we should just return `allCategoryButton.setOnAction(event -> getControl().getOnAllCategorySelection().run());` if we can set it to null?
I don't think there is a need for this, the disk have changed. reloading certificate should be an error. I think we should be using that as the key key, and then if we do, we can set the error.
That's weird. Why do we need to cast it?
I'd like to see these constants on a single location. It's a little hard to know what is being done.
we need to keep the old name. We need a separate config for the same config.
Should we add an explicit return type to the method instead of a subclass of the getter?
Why not `undefined` or `undefined` as we're using `all`?
I think this should only happen if `wasHydrating && !c._hydrating);`
This should be in `os.path.exists`.
why is this changed?
I would have used `const` here.
This seems like it should be `c.RevisionOn` instead of `rev` since we do the same in the code.
I'm not sure if this is needed any longer - if the project is still being performed then you can remove this.
This is not strictly needed, as we only do the bool values when we don't need it.
This is the only change that makes sense, but I think this should also be a `nonce` parameter. We should be able to use it here, but I think this might be better as an `Annotation` instead of `nonce` (or an `Annotation`).
@danrot are these tests for the new file?
I think it is ok to have a small range here.
` bag bag` and ` bag Management` are identical. Do you think this should be in a different PR or in another PR?
Does this mean we have a test that checks that the file does not exist anymore?
I think we need to do something similar here. We should not do that for a followup. This is a leftover from an earlier commit.
Can we make a `none` parameter for this?
Should be able to handle the `host.getHost()` case here?
Is this really necessary?
I think this is a leftover from debugging
I'd prefer if you moved this outside of the `if` block.
Is this change related to this PR or should it be done in master branch to handle it properly?
Should this be `var BatchKey = batchKey`?
This looks strange to me, can't the code be done in `initelyMatches`?
You can't do this, you need to check that the stream is an array of `TaskWriter` by the caller. I would rather see a check that the index of `InternalRow` is `final TaskWriter`.
I think `getIP()` is a bit ambiguous, it should not be necessary to call `.c_str()`.
this looks like a bad test, please make sure you don't do this
Should this be in a new commit?
I think there's a better way to do this. `io.quarkus.unq.NoArgsConstructor` is better.
I'd prefer `interceptor.interceptors = append(i.interceptors, interceptor)`
It's not obvious to me why it was here before, but it seems like we're just removing the import from `DISTINCT`?
I would not set the "s" on the "gbs" and "gbs" packages if they are set.
This is not needed, it will be removed.
`cpInput` should be `nil`, right?
Why is this needed?
I would prefer to keep the old version consistent.
Line is too long. [81/80]
This was unused.
this is a change in behavior. we don't need to do this for an invalid target.
Please, add the new parameter `output_fields.py` to this file.
I know it's an implementation detail, but I think the `let` should be renamed to `after_update`.
can we name it "PodPod".
Please remove it. You are not using the same in the list.
I would say that "keyword from settings" to table "keyword from settings" and "keyword from" to table "keyword from" and "Endpoint".
I don't think it will work here, if I set `HOUSE_OWNED_BY_ACCOUNT`, the default is `false` and `HOUSE_zEP_server_concurrent_BY_ACCOUNT`, so this will be a different thing.
I'm not 100% sure if this is correct or not. I would recommend adding some more logic to the code base.
I think it would be better to make this a constant.
This should not be needed since the internal internal internal class is public.
I think you can get the exact exact exact output output from `existing_pkg`.
I don't think we want to do these changes in the future, since these methods should only be used in the ` setDefaultSettings`, not the `BytesSettings`.
This test was failing because we are now passing the full length of SUPPORTED_RETENTION_RES_TYPES. It's still the same right?
I don't think this is right. What is it trying to do?
This should be in the same way as `cspcObj` is used in both places.
Do we have a test case for this somewhere?
We need to keep the config here for now, so we can make sure that we only need this event once.
Why do you remove it from the main?
I would add a method to `get compileId` to add the other methods in this method to add the public methods.
This class can be removed now.
Should we make this a `long_CHECK_CHECK = False` and set it as the default to `True`?
I'm not sure we want to use "fscommon" for "ui" here.
This needs to be removed.
Can you check if `$solrConfiguration` is not null or false, so you can check if it exists or not?
is there a reason why we wouldn't expect this to be done?
I'm curious why this is the "Using delegate supplier" change?
This line is too long (and I'm fine with this one) but it seems like we should be using `self.create_message()` to be safe. (Or maybe a separate PR that would be for future readers.)
This seems like it should be in the `mne` block.
This is the fix for this, so it should be moved to the next line.
shouldn't you also add the `protected` and `protected Map<String, Integer> eligibleTemplatesForAutoUpdate = null;` above to be consistent with the one above
I'm confused. Why do we need this function?
In this case, `replace_dims` could be None (and `replace_dims` also be set to None)
I think this can be removed.
I'm pretty sure this is correct. The default is `2`, so it is not zero.
The commit message must include the files of the files in the standard library, not the ones that are not needed.
Should we also set `Pulumi up` for the `Pulumi up` case?
Do we use `get_root_logger`?
`_select` is the `clearfix` option you should use a `_select` instead.
Same here. I don't think there's any need to suppress it.
nit: please move this check in the if-else-statement to be more explicit: `if (isAllHealthy() && !isAllHealthy(results)) {` Also the `if (isAllHealthy(results)) {` should be sufficient
Why is this being added?
What's the purpose of this `_to_current` function?
I think the globalVars.appArgs.secure should be the other way around?
We don't need this method.
This should be called `NewResource` or something.
Shouldn't it also check for nil?
Should we use `go test-event.go` instead of `acme`?
I think the `_Game` prefix is redundant, it should be `_getLocale()`
It is a good idea to have a constant for this. You can use the constant for `daal::algorithms::adaboost::quality_metric_set`
It's not a good idea to put this in a function like `user_login_id`
This is not right. The function is already called in a non-static function so this is fine.
This looks like a regression. Isn't the "rc == 0" case redundant?
Should we keep this?
I don't like the `""` here but it seems like it's not a slice, but if it's `""`.
I think this is a leftover from debugging.
I think the `_platformNotSupportedExceptionMessage` should be `static` (and then `_platformNotSupportedExceptionMessage` is not needed).
Is this not the rootless bug that you are doing here?
Isn't this the only place that is used in `src/travis/core.h`? Or does it need to be `#include <fstream>`?
nit: `throw new Error(`No extension support for ${path} in react-native-sqlite-storage)`, so the error message should be more helpful.
Is this really needed?
@mmaxim this was added to prevent us from working on this.
Should this be `Init`?
This is actually a `applyRef` call, right? Is it possible to avoid calling `removeNode` directly?
I think this error should be reported in the `pkg/api/test_gme_fips-client.go` file instead of this one.
Is this a backwards compat? If so, should we be more specific here?
I think this should stay as `export`.
I think it would be better to move all the `const load_plugins = require('../lib/plugin-loader').load_plugins;` below to `const load_plugins;` and remove all the `load_plugins` below.
Please add a comma at the end of the string.
Move this line under the `.. note::` section?
It's not obvious to me why we need to add `ProductDataFactoryInterface` here.
why do we need to add it to the cache if it's a cached cache?
This line can be removed.
Can we use `K9.getQuietTimeNotificationEnabled()` instead of `isQuietTime` ?
@jommyClausner did you find this? This is a pretty ugly change...
This is just a thought, but it's a little weird that we're not doing a custom key key here (as it's the one we're doing). But we should probably be using `source_host` every time.
This is a good idea, but should be `Failed to GetActiveApp err`
This is not a docker element, so it can be removed.
@stephentoub should we have a constant for this?
I wonder why `Add ConnectionFeatures()` is called twice. Not the other way around.
We should remove this code block from here.
Can we also add a `WebDriverWait` method that takes the `uncME` as an argument in the `rails-button`?
This should return appender as its own field, not field like its own
Nit: The date is used in the test, not the date.
why did you remove this? It looks like you are only using this function.
This should be `beehiveContext`, not `core.context`.
We should add a `@ProductNutritionFactsData` field here to reduce the size of the `view` model.
Shouldn't the `TreatmentsPlugin.getPlugin()` be called here?
Is this a test case for the new transport?
Why do you need this? I don't think we need any title at all.
Why not just use `getClass().replaceFirst("^AST", "")`?
I'm not sure if this is correct but I think this is fine as well, since we already use `this.setBy` and `removeBy` methods in the target layer
@danrot @chirimoya @danielbach thoughts on this change? I am not sure what the best solution is here is.
What's the reasoning behind this change?
This test was only testing the tests that was working before (and was not working before) so I just added the test.
This is not needed since the input is already closed
This should be a `toString()`.
Please revert the whitespace changes.
How about adding `selectAll` to `Element.setOnMouseClicked()` ?
You can use `addons` here to make it clear this is a boolean.
This is a different header than the other files.
Can we have more than one test?
NIT: we could move this to L207 and return in L207.
why is this change necessary?
As we discussed, the `Data` attribute can be used by the `dXNlci1kYXRhCg=="` interface.
I'd prefer to have `samplingPirority` return a boolean and then use `DebugEnabled` everywhere, to avoid unnecessary relying on the `this` loop.
@lafriks did you want to change this value?
This is incorrect, we should probably just remove the code.
This is the same as `arg` above, but the same as other tests use it.
Why are we using an enum here?
Why are these changes necessary? It seems to me that the operation id isn't being used?
This is now being used to set the `SERCOM0_SPI` array.
I don't think this is going to work, as we have an image with `DynamoCore_url` and `DynamoCore_url`. I think this should be `DynamoCore_url` instead.
If dask is nil, we should probably add `for arr in arrays` to the stack().
Can we move this method into the constructor, since we are not adding an extra map.
I don't see where these are coming from?
remove the leading space
@alexander-schranz are we using this as an option for code identifiers?
it is not the case for 3s, and we want to be sure that 3s will not be nil?
This is a bugfix.
Metrics/LineLength: Line is too long. [82/80]
This method is called for a "supersuper" query. We should only log it once.
I'd prefer `create_no_window` here.
I'm not sure how I feel about this. I think this should be `Match:13` instead, since the method `MediaMatch` is not used anywhere else.
Isn't this going to give the proper proper `func Max` calls, if it isn't? (I guess it's the only caller of this function)
whats with the naming conventions?
I think this should be "custom" or "opCustom Custom framework". The description is fine.
I think we should do `LOG(INFO) << "storaged misses clusterId";` instead.
Should this be `bridge.getConfig().getString("server.url")`?
> When I had a `cookie.RecordRecord` I think this is what I wanted.
Is it better to keep this?
I don't think the other link is necessary, we can drop this file from the license.
If we are not going to support paddle.fluid as globber.glob(rootPath, include include,Symlinks, d) - so I think the error message needs to be updated as well.
Maybe we should create an issue to add a new default here, so it will be re-used if we can use the default setting.
@jackfrancis Is this change ok? I'm not sure if we really need the version here.
this is a breaking API change, it is not a public API
why is this removed?
Metrics/LineLength: Line is too long. [83/80]
We should add `isIgnoreIncrementalAnalysis()` method to the `org.apache.dubbo.common.lang3.StringUtils#is{ConditionalUtils#is{ConditionalUtils#is{ConditionalUtils#is{ConditionalUtils#is{nifi-main-rpc-rpc-check-org.apache.commons.lang3.StringUtils#is{nifi-api-main-check-check-org.apache.hadoop.hdds3#is{{`
Just curious, what's the motivation for this change?
This file doesn't need to be updated, you can revert
Why is this removed? Isn't this a bit of an existing bug?
Does it make sense to use `replace` here instead of `Countly`?
Are these changes supposed to be in?
Please add trailing comma.
Nit: should go above this line
can you please move this into `pkg/api/shared/constants.go` and use `localCluster`, to keep it consistent
If we have to provide an example of an `int` of the `setRef` that we will get to, we will have to do this.
This seems like a good candidate for `body` and `body` here. If the user passes `None` or `body` in the first place, the second argument is `None`.
I think we should also add this to the other class as well to avoid having to change these constants.
This looks like it should be `#if NET45 || NET46` since the ifdef is not defined below.
Is this TODO still needed? I thought it was just a mistake, no?
this is not needed anymore.
I don't think you want this to be `gpu_use_dp`.
Maybe we should move this to `/SCAPY_ROOT_DIR`? This way it won't be able to use it.
This is a little bit of an overkill, but I think it's better to do `model.getServiceConfig() == 0`.
I'm confused by the "is not found" part. What do you think about "HMB Sync"?
I would have expected this to be `default!ok`.
This is a breaking API change I think - it is good practice to keep the existing behavior for now and to have the same behavior as the API. We should not expose the API as a new API, it's not a real purpose of this PR.
Can we remove the old page_params method completely? I'm not sure if it's a huge deal either way
I would use std::string_size instead
nit: `The actual name of the Fragment` should be `withEach`
I think `this.hooks` will always be the first element, so this will not be the last element, right?
is there any reason to keep this around?
What is the point of this statement?
Do we really want to use this for all the fields?
This test was failing on windows, but was not sure what was the problem here...
I would have put a `TODO` on the `spc.Name`
This should only be done if the pool is stripe pool or not pool.
Let's add a `*testing.T` param to the `tags` package.
This doesn't work with SampleTransformer.create() call.
You need to return `Object` if the value of `unsigned char digest[CHIRP_DIGEST_MAX];`
I'm not sure we really need the timestamp timestamp here. We can't use the timestamp from the request.
I'm assuming this is a breaking change for COW.
Use `get_default_participant` from context to avoid code duplication
This is the default, right?
This is the same line as `\r`, right? Can you add it as a constant?
Why was this changed?
I don't think the `else if` can be removed.
I would use `os_clone_post` here and in `manager_clone`.
Same here, we need a new span id here.
How about "A already been defined by queue"?
Is this change required because we don't want it to be an error?
I would prefer a `public const` to keep all of these as internal.
Is this file still needed?
Is this related to the change?
can you please add a bit more details here to make it more explicit what this is testing?
I would prefer to avoid the `ILogger` interface here.
Why is it necessary to change the config name? I'm wondering if we should have a better home for it.
You can now do this in `target`. Otherwise the target is not yet defined.
I would suggest using `isNotEmpty` here, which is not the case, since the check is expected to show the result.
I would not do this as this is a controller, but not a controller and not a controller
Wouldn't this be better as a local variable `is_svd` for consistency?
It seems like it would be worth adding some cleanupCredentialsID to the taskCredentialsID as a separate operation that would get called for cleanupCredentials and that cleanupCredentials has been created.
I am not sure if we want to do this here. I think we should be using the `validate` method to avoid the passing args.
Maybe we can add `URLMetricsInterval` as `URLClient` or `URLClientConfig` here, so we can remove `URL` altogether from `ClientClientClient` and `ClientClientClientClientClientClientClientClientClientClientClientClientClientClientClientClientClient
The condition should be: if (hasQualifiers) { if (hasQualifiers) }
Shouldn't it be `getLifeTimeInQueue`?
This should be in a separate pull request.
Do I need to keep this for the other PR?
I think this is a wrong place for this function.
Is this something we should do? It seems to me the only thing that happens if this happens, we can always create a windowHandle and get an error if the desktop is not present.
This was the only change required because the key was not present. I don't see any new code using it anymore, so I removed it.
Why was this change made?
I think you can remove the log.error altogether.
Should we add a `default: false`?
I would not set this to the output, it's not a problem and we have an image, so we have to add another one.
I think it's not necessary to get the notifier version here. We can't just add the config to the `api_quota` key.
This file is unused.
I'm not sure about this change - it seems to me that we are using a different config for the `items` (which is the same) - but I don't see how the `iteritems` can be used. I can't see a reason, just thinking about this being a bit more than a small change. It's not clear to me that we are trying to make it work for the `items` case (i.e. it is a `items`). If we don't need to change that, I'll let you do a `iteritems` to be the same.
no need for scapy?
@mfojtik this is the fix
I don't think this is used. We should be consistent across the codebase in the codebase.
I'm not sure how to make this change. I think it would be better to add another `default` value here as it is used in all places, e.g. `Options:port`. Then, you can keep the `CustomBasedFactory` and `GetValue` and then use that here as well.
This can be `from pyramid import httpexceptions`
This is a breaking change. I think it's better to make this an `ActiveRecord.Tags.Measured`
This is a bug in my branch.
I assume we can remove the `id` parameter from `iType`?
This should probably be a `@private` statement (and then `@param` above).
Shouldn't this have an `Function` in the constructor?
I think it would be a good idea to have one and one in two places: `if config_parser.has_option('MESSAGES CONTROL', 'disable')):` (ie. not all other instances) and one in two places (which is the default value for example).
We can remove the history message since it's an history message
Why do you have to cast it to int to float here?
It's not immediately clear to me why this is changing behavior. We should probably use `.items()` instead of `.items()` to match the rest of the code. The `else if` in the case of an `else` branch.
I don't think we need this change. I'm not sure we need to remove it now since we're not doing this now.
I would suggest a different name for the full name (which is not useful for the user), e.g. `127.0.0.1`
This method doesn't return anything anymore
why not just `setLastPosition(getPosition())`
What is this change for? It seems it's only necessary for this change?
I think it's safe to remove this `index` block. I'm not sure if it's worth changing here, but maybe it's better to just remove this `LOG(FATAL)` call?
We should only do this if we have a `PYTHONPATH`.
I wonder if we should have a test for this?
do you need this?
Do we need to keep track of this for now, or is it just for a reason?
What's the reason for the `spec['appDir']`? Seems like it's just a nitpicking, but it's not clear from the name of the PR that it is just a question (it looks like `os.path.join(globalVars.appDir, "lib"`)
why is it needed?
let's also change the `:user_create_EMAIL` to `:additional_info` in the `additional_name`
I think this is a little confusing to read, as I'm not a huge fan of the `apply_name` method.
nit: I'd remove the `except` part and just do `except KeyError as its value.get('message', None)`. Otherwise you can remove the `except` entirely
The root cause is to be uninitialized. This file is no longer used.
Style/EmptyMethod: Put empty method definitions on a single line.
I think this should also be error.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this should be handled in the `tests/exception` package.
Should this be `uti.Derived()`?
This should be a `final`.
What's the reason for the purity of purity?
shouldnt it be "java.time.Period" ?
Is it possible to add the `object` annotation?
You can just return `c` if the type does not contain `char`, but this is an API break.
Why is it needed? I think we can keep the `go` prefix for now.
Can you explain what's going on here? Isn't the intent to test the case where the service is not `nil`?
is this a bug?
You could move this to the top of the file, it's probably not needed.
maybe we can add a `static` description for these spec methods?
Why is this a global setting? This is a no-op, right?
Could we use the interface `cursorState_command` here?
Is this not right?
Isn't this supposed to be `::+1`?
Why are you using ApiModel here instead of just having a constructor constructor which is never called?
Why did this go up? The user has an existing source and the user was able to override it.
I am not sure how to call this `POD_FAILED`. I don't think we should be going to have a crazy way to call `POD_FAILED` before doing something like that.
Shouldn't we check if the role is set to false in the DB?
Why is this a boolean?
@stephentoub do we want to remove this from the API and change the one below?
Can you explain why this change is needed?
This is a change in behaviour, but is this a mistake?
NIT: seems like it would be better to do `string s = (string) always return null;` instead of `string`
Why is this line necessary? It's the `strconv` of the `list()` call below, right?
I think the previous solution was correct, `marker trait` and `marker trait` are the main `Object` so I think this would be better.
Why is this one needed?
Could you add a `TODO` for the error message?
can you remove this log line?
Use a guard clause instead of wrapping the code inside a conditional expression.
Should the word "domain tag" be updated to reflect the new behavior here?
Is there some chance you can just do `c.AddOptions(OptionFile("dh", "none")` and use the function `setFlag` to get the string from the string?
@wachterjohannes Is this the correct way to fix this?
I'm not a fan of the logging. Maybe we should just have an logging function in `uppy.error`?
What is the point of these changes? I think the original idea was to create a new interface for this.
This should be `return err`
`let` should be `let` as well.
I think we should be dropping the `|| 1` check here
I think we can remove the 'though' part from this PR.
I think we can have an example here for these fields.
typo in the original
I would suggest we use `phoenicis.configuration.localisation.tr` here, instead.
Should we also check for `rand` here?
Can we just make this "protectedTransactionsAllowed" and set that instead of passing the default?
