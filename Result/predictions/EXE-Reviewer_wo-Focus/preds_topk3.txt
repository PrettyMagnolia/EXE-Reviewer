I think we should add a `grpc` field in `newnew().build()` to the new method
@wachterjohannes Shouldn't this be $config->get('record_batch_size').false?
I'm not a big fan of the `<%= ENV['SEGMENT_KEY']%>` parameter. Can we get rid of the `script` variable and get rid of the `<%= ENV['SEGMENT_KEY']%>`?
Can you please explain why we need this?
I don't see where this is used. I think we can remove this and use the `isNavigating()` function.
I think you can remove `const Mat` here.
Is this import correct, or should it be grouped with the other files?
The <msg> TheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheThe
I would prefer to use `log.debug` here, but I would like to see the point of logging in `if not hkl` and then you could remove the logging
Shouldn't this be `if (!service)`?
why not just have a flag.
This should be moved to volumeConfig.GetPath()
I think you need to `@param`.
@anistor Please use the constant for the activity.ParentSpanId here instead of the constant for the constant.
We should probably make a `process.Info` call that sets `update` and `update image` to `true` in the `else` case.
This is a bit odd, but I think it would be better to keep the original version in the switch to `src/server/client.js` (which would be the case for both cases) and the switch could also be removed.
This is a breaking change. I think it should be `assertIn` because it is a different thing than `assert`.
This should be `#define DEDUP_RESUTL_CHECK`.
This is not the only usage of this enum.
why is this return needed?
We should probably make a new task runner configurable.
I think this is not a valid option. The `ALL_EXIST` should be added to the base class.
I think we should be able to get the NPE from the code base instead of the `LongType`
@bharatviswa504 What do you think about moving `nullFullName` check to the `Types` method and using `Types.java.lang.Void()`?
`getDefaultLanguage()` should not be called from the constructor.
Can we add a note about the command history in the help message?
Can we have a test for this?
Should we make this a constant?
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This line is a bit long and is not needed.
I think it's better to move this class into `depends_on_entry()`
this is wrong. The log output will not be closed
This is a bit weird, why are we using `RemoveAll` in the `Task.go`?
I think this should be `alerters = alters;`
We can't use `mset.mirrorInfo()` in the config object, so we don't have to pass the value here
I think this is the only place where we have a single call to `createTopic()` is called.
Why are we not exposing this new parameter to `node1`?
I'm not sure why this is needed here.
I think this interface should be public.
Is this really needed? I thought it wouldn't be already there.
I think we should remove this argument.
Line longer than 120 cols.
This is a good change. I think it's better to use `Consumer` as the class `BiConsumer` and then use the function `Consumer` instead.
I think we can use `logger.info ex.to_s` directly.
Please annotate `$cartItems`.
I think this should be `VALIDATORS`
We should use `crypto.*`. Please revert.
this is the only line needed here, if it's not there.
Can we use a `try` statement here, instead of `feeds.delete`?
I'm not sure this is the right solution. The `get_subset_pipeline()` function should return the solid_subset.
I think this may be overlooking at some point we can move the logging to after the switch
Maybe we should make the function private to avoid mixing and reference in `HeadEvents()` and `HeadEvents()`.
this is an API break, right?
I think this should be done in `AbstractAbstractHandlerHandler`
This is a bit of an overkill, but I think this should be a debug log, not the debug log. It's a little clearer to log the result.
Can we just use `mutateElement` here?
I'm assuming this is a change in behavior, and I'm not sure how to do this.
`name` is not a boolean so you could just use `arch.FREEBSD or arch.DARWIN` instead of `"StreamSocket"`
should this be `el.nodeName.toUpperCase()` ?
why is this not an async async view anymore?
why is the HashMap required here? I think it would be better if you revert the changes to the interface.
Maybe use `StringNotFound` to indicate the number of arguments is the same as `message`?
Should we add a new typedef here?
I think this might cause a problem if the directory is writable. This means that if a directory exists, the directory is writable will not be writable.
Metrics/CyclomaticComplexity: Cyclomatic complexity for_user is too high. [7/6]<br>Metrics/MethodLength: Method has too many lines. [6/20]<br>Metrics/PerceivedComplexity: Perceived complexity for_user is too high. [6/7]
@mmisol Did you test that the `XRB` key is still a string or not?
Why are we adding this? I think we have to remove this.
I think we should keep the old behavior and add a check for both `/` and `/`
I'm surprised that this isn't a "troghost" thing, but it's probably not a problem for this PR.
I don't think this belongs in this class
I think this should be `count` instead of `count` because it is a number of bytes.
This is not the correct way to fix the issue.
I think this name makes sense for now, but it looks like we're using the `show_title` name for all the fields.
I think it would be better to have a test for this.
(style) trailing whitespace
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think we should use `win_id` here instead of `id`
I don't see where this is being used?
I think we can get rid of the `Warn` here now that the command is not empty. We should not have a "stderr" command for the new error message.
I think the "RESTRICT" part is wrong here
This seems like a good candidate for an `if (batch_array_size (batch->state_trans) > 0)` check to avoid the `if (batch->state_trans) > 0)` check.
I think this should be `replace_replace_variables`. I think it's not a valid option.
As we discussed, this is not a valid change.
Why do we have to do this for every call site, can it be done in the `getSeruess`?
Shouldn't this be in the interface as well? I'm not sure if this is a good idea.
Should this be a `.isPaused()`?
rm empty line
I think this change should be reverted.
This is a little confusing, why we have to do this check?
Why is this here, and not in other modules?
@aws-sdk/client-s3 was a good thing. This is the only change I'm asking for the new API to be able to use.
I think we should use the same check here.
Should we add `//` and `//Only` to `create()`.
This is the only change that affects TF providers.
Is this change intended?
Shouldn't this also be in the `if len(args) == 0`?
I'm not sure this change is needed, if the wlr_xdg_surface_send_close() calls wlr_xdg_toplevel_send_close() calls wlr_xdg_surface_send_close() calls wlr_xdg_surface_send_close() in there are two places where the wlr_xdg_surface_send_close() calls stdlib_destroy() calls wlr_xdg_surface_send_close() calls wlr_xdg_surface_send_close(), but the wlr_xdg_surface_send_
Shouldn't be in the constructor.
This is the wrong place for this, IMO.
Shouldn't we add the `Pair<ExecutionReference, ExecutableFlow>` here?
I think it would be better to just remove the `isArray(obj)` check below.
Can we use `getComposedParent` here instead?
Is this being used?
This is the only change I can see. Is there a reason why we need to do this for a long time?
Why are we deleting this?
I think we need this method, we can just call it `GetPorts`
Trailing whitespace detected.
This change is not needed. The method `RequestId requestId` is called from a request which is already called in a request that is called in a RequestId requestId
I think this should be `uniqueArray`, not `indexOf`.
What about if the path_buf is not held here? I don't see any code using it in this function.
This is a good thing to do, but I think it would be better if you could move this to the other PR, and then remove the import statement from the `build-system/common/utils/` (or at least remove the `build-system/common` class)
Although I'm not sure why this is `null`, I don't think this should be changed to `null` by default.
This is a bit weird, why is this being removed from the library?
This is not related to this PR but it seems like we should be removing this check.
Please add a type annotation to the `./var/lib/docker-volumes`
Nit: please move this outside of the `using`.
This doesn't seem to be used?
I think it's better to use a `breakpoint` here, rather than a `str.join`
I think we should move this to `_execute()`
rm empty line
Should this be a separate pull request? I think the same as in `setAttribute`.
The `parse_atom_labels` function is only used in the `strict` module, so this should be removed.
Is there any way to avoid having to specify the `app.kubernetes.io/part-of`?
>! [](start = 12, length = 6) nit, wouldn't it be more readable to use a `parent.InstrumentationName` here?
I think this should be `xrc20`
It seems that this is only used in `pkg/defaults` and not in `main` right?
Please use the default value here
I would prefer a different wording here: `1-100`
I think this should be moved to the top, since it's a very large number of places.
This function is used to throw an exception, and the `toLowerCase()` function is not the best way to handle it.
Why is this a context? I would have expected it to be a context in the context.
I don't understand why this is necessary.
shouldn't this be a public static field (or even better)?
I think we should keep the URL URL as a `const`
@bparees I think it would be better to have this in a separate PR, if we don't want to do it in the future.
This should not be here, we can just delete it.
Why not `Without`?
Can you add a TODO to remove this `tryToLinkAgain.prettyPrint()` call?
Should we rename this field to `tags`? I know it's not a part of this PR, but it's just a small thing, so I'm not sure what's going on here.
This is a bit of an odd place to put this in the `if` block.
could you make this a warning?
I'm not sure this is a good idea to add a field in `store_in collection` to this list, but it's not a good way to go.
should we add coma_separator here too?
Can't you just pass `blockCache` as an argument to `Keccak` instead of passing it as a parameter?
Not sure about this. We should just make the version number configurable by the request.ConsumerInfo.IssuerID.
I think we need to add the other `klog.Infof` to the `klog.V` function, so that we can get the output from it everywhere. It is not possible that the output is a `V`.
This is a breaking change, right? Why not just call `BaseProvider` directly?
Is it possible that this is not a node_based_graph.GetEdgeData() and not a node_based_graph.GetEdgeData() is called from_motorway? If it is the case, then it is better to have the node_based_graph.GetEdgeData(eid).flags.road_classification.IsLinkClass()
Use the new Ruby 1.9 hash syntax.
why do we have to add HRNet to all other files ?
Why is this change necessary?
This check is not needed anymore.
This should probably be `opts`
Is this a mistake?
I'm not sure about this - if you are not using `showAutoDownloadReport()` it will return a boolean.
I'm not sure if we want this to be `c.ic.req.Features`?
Can we have this `systemAPIKey`? I don't think it's a good idea to have this method in a single place, but I think we should just rename it `systemAPIKey` to `systemAPIKey`.
This should be done in `CreateInput`.
what's the reason for the `convolve` here?
We should also check that the output is not part of the `calledThrice`, so we can still use `calledTwice` here
The success message here should match the "local-message".
For consistency with the rest of the code, I think we should use the new `path}:{line:3d}:{column}:`. Also, I think it would be better to use the new `msg_id` as the default for `path}:{column`.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This seems like a very odd place for this. Why is it needed?
How about `.list()`?
`io.prestosql.plugin.hive.utils.protected Set<DigraphNode<E>>` => `io.prestosql.plugin.hive.utils.protected` ?
This should be `pull.head.set_zero ()`.
This is not needed, the system system should not have a system system at all.
I would prefer a different name, `alertQueryUrl`
This change is unrelated.
Can this use `expect` instead?
Why is this needed? It is already in the test, so it is now in `agentlessID`
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This should be `LOG.isLoggable(Level.FINE, "Could not find class " + e);` to be consistent with the other exceptions.
This should be removed as we don't have a lot of people who have changed the fields.
I'm not sure this is a good idea. If the package API is still in the main package, then it's still in the package. The package is not in the `aws/...` package. It seems that we should just remove the package from the `aws/...`.
I'm not sure we want to include the `jet-rest` in the past.
Import packages with wildcard is not allowed. Please revert.
Line is too long. [82/80]
I think it's still useful to keep the `uidmap` as a global var.
If we're going to have a `eleeleeleele` that we can get the updated updated between the two, maybe we can add a `eleeleeleele` and `flag` to the `Copy` and have a `Copy` one? This way we won't have to update the `eleeleeleeleeleele` and `flag` fields.
Please add a line after `#okehokeh`
This should be `final` since the field is not `final`
nit: make these two lines simpler.
This will fail if the `found` is not provided.
Why not just `setPreference`?
Do we need this variable? I would think that it would be a breaking change.
I think it might be better to move this check to the `debug` call above, so that we can get rid of the `reportupstream()` function.
This should be in a separate pull request, as we have a similar issue in the other files.
This was not needed since it was already in the previous commit.
I think we should remove the property and use `solr.hdfs.blockcache.blocksperbank` directly.
had to add this validation check to avoid having to add a `:Converter` and then check that it's present on the `:Converter` model
The `assertIn` tests are failing because of the `--Content-Length` header.
Line is too long. [95/80]
I would prefer to keep this as an optional argument to `declare(strict_types=1)` instead.
I'm not sure if this is a good change to make it more clear.
can we make this a `boolean`?
I would suggest renaming `azkaban.plugin.load.override` to `param_override.properties` and `param_override.properties` to be more clear. Also, what do you think about renaming `azkaban.plugin.load.override.properties` to `param_override.properties`?
I think you need to return an error here, so that you can call `AptExists.DefaultFunc` instead.
why do we need to specify user as the user user already provided? is it a leftover from the previous version of the user/trafodion/hive/tpcds/customer.dat?
I think we should use the `_ consHeaderHeader` here instead.
Why is this package private?
I think it would be better to move this to the `if` statement, to make sure we have the same code for `:0` for all `Access-` blocks
What is this? I think it's still used in this PR, right?
I'm a bit concerned about the use of `EXPECT()` in this function. I'm pretty sure it's a good use case to do this.
Is this really necessary? I would have expected ARM_32 to be ARM.
This field can be removed since it's used in rendering.
Do we need a new key for that ?
I think we should use `errors.NewResourceExhausted` here
@tomspilman what do you think of this change?
Why is this removed?
We can remove the `append_queue` constant here.
Maybe we should add an `isinstance` check here to make sure there's no error handling being returned?
I think this is a leftover.
Who calls `HbaseDelete::costMethod()`? It is not used anywhere else.
Please add `DestPorts(uint32(r.Config.VXLANVNI).).ProtocolNum(spec,ns)` to avoid unnecessary unnecessary string concatenation
This is the main change, I think we should move the `errorObj` to `callbackContext` as well.
I think this is a good idea to check the editor's length.
`$dqlFilter` is not always defined as a parameter. So you can remove `!empty($dqlFilter)` as it is not always defined.
nit, could you make a constant somewhere, so it's clear what's going on?
This should probably be `@param` (and similarly below)
This is not the fix.
Can you use `\` instead of `\` to avoid confusion with the rest of the code?
this import should go before the other goats, it's not used in the changelog
Don't we need to add this to `/session` model?
from .core import OrderedDict, Dimensioned
why is it necessary to add `@PluginDescriptor` annotation?
this is wrong now, if you have to fix the test suite you will see if you have to.
I think we should also make this change in `proposal_list` and `proposal_state`, as that will break all the other `proposal.cpu()`.
This import should go at the top of the file.
I think you should be able to remove the constructor from the constructor and avoid the constructor.
Is this still needed?
This file should be moved to a separate file, it should be in the `test_data.groupby()` function.
I don't think this needs to be configurable, it's a breaking change
why not `python2`?
I don't think we should be adding this here.
Why are you removing this line?
Why this import ?
remove unused imports
This removed the excellent thing. It's not necessary anymore.
This should be `<img className="googlesitekit-publisher-win__small-image" alt="" src={ smallImage } />`.
Please use `java.util.List`.
I'm wondering if we should just delete this line and use it here.
`location_factory` is not used in this file.
This should be `const std::string &engineType`, not `const std::string &func`.
I don't think we need to check that `Number(value) < 275761` is `0`. If we're going to use `value instanceof Number || ...`, we could remove the check for `isNaN`.
I think this is not correct. It is an array of `load()` calls.
Isn't this always true for `isIgnoredChar`?
The `RegistrationEvent` method is a `mir.utils`, not the mock.
Can we make this configurable?
The other `L` is `false` (and this is the other `L`)
You can remove the `!`
This is just a note that we don't need to include files in the file path. I'm just not sure what the best way is to use it.
I think this is the only usage of this method that can be used for the `contains` methods, so we can remove the `contains` method entirely and use that in the `contains` method
I would suggest to rename this variable to `CONCONUnitUnit` and then call it ` DEF_ISOLATION_READ_ENGINES`
this is not needed
Do we need this check? I mean, since the previous code had an error, it seems that we're not doing anything with the current code, and we don't want to check for either.
I think we should keep the `Chain_url` and `Basic_url` attributes in the `PER_transaction.go`. It would be better if we could have a `Chain_url` helper that takes an array and takes a `PER_transaction.go` (e.g., if the service is `welcome_mailer.welcome_notification.para3`), and then we could have a single `PER_transaction.go` that takes a `PER_transaction.go` that returns a `_PER_new_url`, which takes a `PER_transaction.go`. I
If we're going to be waiting for every single lookup lookup, why not create a `s.mu.Lock()` function in `resetCh` instead of a `if` statement?
I would prefer to have this as a constant. I don't think this is the right default.
Should we add a license header here?
This should be set in the application's client's client's client's client.
do we really need this?
I think it would be better if you just use `req.getParams().getBool(ConfigSetParams.FILE_PATH, "")` here, and then just call `getParams().getBool(ConfigSetParams.CLEANUP, "");`
I would prefer a `err` here, since it is a `root` depending on the directory
this should be `current_page?(me_path)` I think.
Use 2 (not 3) spaces for indentation.
This can be simplified to `granularity.between(EPOCH, timestamp).intValue();`
Is this not needed anymore?
We should add a `String()` here to ensure we don't have to use it in the keymap.
Is this method used somewhere?
We can remove the `@SuppressWarnings("Extension id", path);` here.
I'm confused by the `model` in `app/services`. Do we need to add an index for it?
why not just use `os.Chmod(file.Name(), 0666)`?
Please remove the extra whitespace between the two lines.
Is it correct that 0.0002 and 0.0001 are not equal to 0.0001?
This is not a net improvement.
you don't need to do this any more
this is not a good idea. It will be an environment variable in the future.
This should probably be removed as well
I think it would be better to keep `python_requires` as it's an optional argument.
What if there are multiple records that are not in the `if` branch?
This change isn't needed.
@deads2k this is the fix. Please revert this.
I don't think this needs to be in the number of blocks.
I'm not sure if this change is correct, but it is still in use by the `force_encoding` case.
This is not used anywhere.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This will break existing tests. I'll update the PR to use `options.isArray(options)` instead.
`FALSE` should be `static const` (same for `static` case below)
Please revert the changes to the wildcard imports.
Remove empty line.
we should remove `c.dlTimeout` and `c.dlTimeout`
The `tealLogicSigSize` is already a string, so it should be removed
Why was this removed?
is this the same as the one on the machine?
This is the only place where we call the config.Hour function, so it is not really necessary to call it. This is the only place where we call it.
I think this will break the API.
nit: I think we need a more specific name, e.g. `network::NetworkUtils::getAvailablePort`
I'm curious why we are removing30.0 here ?
I think we need to add a check here to ensure that this can be removed before the `prompt: prompt.New()` below.
Is this a bug fix?
I'm not sure this is the right fix. The `vNode` node is a node node, but the `vNode.children` is a node node that's a node node. So the `found` node is a node that's the default node node.
Why is this method removed?
Use safe navigation (&.) instead of checking if an object exists before calling the method.
This should be `current_approver_email_address`
This is not a good idea. You could use `withtpForm` or `withtpForm`.
I think this is not the only usage of this class.
Can you please remove these spaces? It's not really a deal-breaker.
Please use `unless` instead of `auto`.
I think the `RequiresPatch Required` property will be added to the `Patchservices` property, so we should not use the `.` in the `.` module.
It might be better to return an error instead of repeating the service in the constructor.
Can we make this `private` and `protected` as public ?
i'm not sure this is a good idea. this is a test case
@alexander-schranz are you sure you want to change this?
This is the same as in the `try`/`except` block.
Is this the correct way to get the client ID from disk?
I think it's a good idea to add `IsValid()` function to `instanceof` if it's not needed.
no need to pass true as bool (no need to turn off the whole)
Please add a line after the declarations
Hmm, why not just `ValueError`?
This is a bit of an unrelated bugfix.
Can you add a `lib/ecs` prefix to the folder `ecs`?
Why is this a `MAX_ipsec`? I think it is a good default, and it is a good default.
This can probably stay
Can you move this import up with the new line?
I think you need to remove the ` New` here.
This seems like a bug in the tests?
You can use the `_` prefix here.
This is the only one that's used by the UI, so I'm not sure it makes sense to have this in the UI for all the UI.
This test was not failing because of an existing bug, and it's not related to this change...
This is not necessary. `api` should be a local variable.
I think this should be `renameAndDeletionLock.Lock()`
This is a breaking change. The only place I'm'm asking about this.
Should this be the other way around?
This should be a `@deprecated` import
I think we should be consistent and use `panic` here
This function is not used anywhere.
I'm a little concerned about this. The other way is to use the new list. I would have expected the list to be the same.
Is this really needed?
Just noticed that this is not a thing to do with the Status::REVIEWED, but not a thing that makes me nervous. I think this is something we can do with the Status::COMPLETE, and then we could just change the type of the `*REVIEWED`. This is a change in behavior, and I don't think that we want to be able to do so. This is a bug.
Why did you remove this?
I think we need to keep the previous constructor as `null`
This is the fix.
Why not just use the new `nc NodeController`?
This import was unused.
why did this change?
Since we are not using the `HELLO` argument in the `DEFAULT_ISMASTER_36`, I think we could move the name to `HELLO_DEFAULT`.
This change is not necessary.
Can you also update the description of this option to "The identifier to use for signing the installer" ?
This is the only way we need to do this check for port port. This should be a warning if the port is not allocated.
This is a bit of a hack, but it's not really a big deal, but it's just me.
I think you can just return here, no need to have it in the interface
This was the only change required to be in this PR.
I think this is the wrong place for this function.
Please remove this.
I don't think we should remove this once
This is the only way I could have used it. I think we should make the `config` class private.
This is the main change, but I'm not sure it is.
We can't use the `#if` here because it is the default now.
This is a bug, we can't just do it for the `VK_NULL_HANDLE`.
This should be a `const`
I'm not sure if this is a good idea. Maybe `(run-negatives)` is a better name?
I'm not sure if this should be here.
I think this is a bit confusing to people. What is the rationale for this?
This is not a property, we need a `DataSafe` to be able to remove it.
I don't see the `Failed to remove this exception. I don't see the reason to remove it.
`update_listener` sounds like it's a function name, but it's a function name. It's probably not a function name.
What's the reason for this?
Is this needed?
You can remove this line, it's not necessary
We could have a test case for this. It would be nice if we could use a PropertyMetaModel here instead.
This is no longer necessary.
Why not `declare(strict_types = 1);`?
It seems that `set Request` is not used anywhere, please remove it.
We should use the `Rand()` method in order to avoid the use of `responseEx.seteconfig` in the `if (isFailed())` block
I'm confused why we are changing the compiler here. Is there any way to make this change required?
why do we need a new field for this? can it be a string?
I think this is not the right place to put this. We should probably make this a `defer`. I think this should be a `defer` and not a `defer`.
I think you can remove this
No need to repeat these changes in this PR?
If this is a platform, then it will likely be built with `skipOSConfig`, right?
This is a bit of an unfortunate, but it's not a huge deal since the types are the same, and the types are the same.
why do we need to return an error?
This seems to be a bit confusing to me. What about `dcontext->is_exiting` ?
This is a breaking change. It doesn't seem to be related to this change, but I think we should just be using a `UseKestrel()` instead.
@jridgewell I'm not sure if we need a `id` attribute here? I think it would be better to just use `input.id` here, as it's the same as the `id` attribute, and then we can just use `input.getAttribute('id')`.
Is this really the same as `ssize_t bytes_read`?
Why not use `getConfigurationFromYaml()` here?
This can be removed.
Can we remove the iterator here? I think it would be useful to keep the list as it was before
I think you should check for nil and not raise an exception. This should be an `else if`
this looks like it was previously before
I think it would be better to have the `WithWarmupCount(1)` be called `WithMaxTargetIterationCount(20)` instead of `WithMaxTargetIterationCount(20)` since that's what the default is.
This was added in #5029.
I think this should be a helper function that does this, and then we should have a function that does the same thing.
do we want to be setting the storage provider here?
This is a very large thing to do. I'd suggest we just call it stress_test.
There's a `release_history` method which returns a `TopicPayloadPoolRegistry::release` that is called by `release_cfg`. So this is the only place where we need the `release_history` in `release_history`.
I think it is better to keep the old code in this file and keep the old ones in the future.
This is a bit of a nit-pick, but I would make it a bit clearer. I think it would make sense to add a property for `current_key_or_create`.
How about adding `flowflow.decode` to `flowflow.decode`?
This is not the default timeout.
The type annotation should have `@Restricted(this.getTracker()));`
This is a leftover from your IDE
This seems like a bad idea. What happens if the context isn't used for?
Why is this needed?
I think we should add a description of this interface to the public API.
This is a breaking change, but is there a way to make sure the cvr clientset is set?
This import should go after the last group of imports.
This import should be indented with the other stdlib imports, like `github.com/aws/sdk-go/aws`.
The test here is failing because the secret is already checked in the secret.
nit: `call_check()` is only called from 3.3.0, not here. It is used in 2.3.0.
Nit: could you use `errors` instead of `sigs.k8s.io`?
I would prefer a `computedNumOfActivePartiions_(-1)` instead of an `NPE`. The way it's consistent with the rest is to have a single `computedNumOfActivePartiions_(-1)` that it has to be a `NPE`
This should be imported from `QProcessEnvironment`, not from `QProcessUrl`.
I think this is not the right fix, but we should be using `Args: enable` instead of `ReCONFIG`.
I don't think this should be a part of the `DisableHttpGit`. It's a bit unusual to have the repositories in the UI.
this test fails because of the `getReferenceUrl` method
Why is this needed?
Why do you need to pass `name` as an argument to `substring`?
This is not the correct place for this. I think it's safe to remove the reference from the ip, and if you want to change the reference to `externalNodeCIDRs` then it would be safe to remove it.
The `!window.Promise` is not needed here, right? If so, it should be fine.
I don't think this is right. It seems that we are removing the select select select directly from `/debian-8/`, which is now being removed from the `/debian-8` path. I think we need to keep this test around.
This function should return a `generator` object, otherwise it will return a string.
I don't think this is right. The first time the last `if` is used is the last `if` statement.
We need to make sure the `File` interface is not only used in tests.
This is a change in behavior. We need to be careful with that.
This is a bit of an odd thing to do, but I think it's worth noting that it's better to make it a property. I'm not sure how to make the property a property is used.
I think we should move this to the `if (builder) {` block and replace all `EnableOpenTelemetry(builder) }` block with a `EnableOpenTelemetry` call
These 2 imports are now unused.
Shouldn't we just return the `client` here?
I think it is better to check for `tmp == null` instead of `isHydrating` here.
This change is not needed. It should be `getFilters` instead of `array_values`.
I think we should add `IsValid` here.
We can probably remove this entirely if you want.
It would be good to test the value of a test case, if the user doesn't specify a full full status, then test the value of the full status.
There are two different things: 1. It's a `post` that should be the same as the `DATA` and the `string`. 2. The `DATA` should be the same as `DATA` (not the `string`) 3. The `DATA` is the same as the original `string` field, which is the default for the default value.
I think it's better to use `Check` rather than `schema.schema`
I think it would be more readable if you used the `TogglePrefetcher` here.
is this just for the new debugging or was it just for debugging?
Can you remove these 2 lines?
I'm not sure if this is the right fix. The `hasAttribute` is a good idea to change this.
I think this should be done in a separate PR, but it's probably better if you didn't add a new class, and then you could just use a static method on it.
Please rename this to `data-rob`.
this can be removed
I would put put imports at the top of the file.
I'm not sure if this is the best way to handle the change. I think this is a good change, but it seems like we are not doing this for the test.
I think this should be `only one credential type may be specified per profile, source profile, not both", sso, or sso",", nil)`
Is it possible for this to be a component-specific file? If so, we can just delete this line.
Please remove color_type from here.
@kroitor since you changed this file, I think this should be `CONFIG_FILE = 'config/kinto/v2'`, right?
in the line above, `from_channels` should be `from_channels`
If we're going to have to update the key name to reflect the check in line 398, we should check if the key name is empty.
I think we should add this flag to the `KafkaLink` package. It's not used anywhere in this PR. The only place it's used is in the code is that it is used in `KafkaLink`.
Why is this needed?
I think we should remove the `options` argument here and in the other files, it's only used in `babelrc`.
`wn <msg> <msg> `wn <msg> <msg> `wn.log.ff` is a `String, StringComparison.format`
should we change the type of `boosting_type`?
why are these changed?
This is a test, but I'm curious why the old code was there before? I don't see it in this PR, but why are these not using `--SO3`?
Should be relative import.
This should be ` featureset.LongDomainFeatureSet`.
Why do you need to add the `--` to the list?
Please rename this to `dynamo_Articlesx512_code_in_use`.
Can you add the `=` to the `warn` tag?
This should be set to `new Uri`
The function is not really used, but I think this is not a correct term.
Why is this test removed?
I'm curious why this change was here.
Can we change this name to something more meaningful, like "Please edit the title of this pull request with the name of the affected package, followed by a colon".
Really? What about this?
I think we should move this to `defaults.php`
This is a bit weird, it should be implemented in the constructor
Nit: I would use `isinstance` here.
I think this is a breaking change. The logic is wrong now and we have a deep copy of the resource's `ID` (which is the default) but we should be able to remove the `ID`.
I think it's better not to do `require.EqualError(t, error, error)` and then check if `require.Equal(t, error)`
I don't understand this change. Why not just return sourceId directly?
I think we should just remove this field and change the parameter name to `oldoldoldoldFields` and make it `makeFields` to match the class name.
I would prefer a more descriptive name.
Do you need this?
`FakeFS` is a bit ambiguous. Do we need to handle that in this case?
`stats` is an array, so you can do `null.is_a?(Hash)` instead.
We should probably make a separate PR for this.
This is not used.
I think this should be `status: true`
Style/SymbolArray: Use %i or %I for an array of symbols.
Why is this being removed?
This is the fix, we should not need to do this. It is a good idea to have a separate API for the next release and we can add the `generateField` method to the table.
@deads2k this is where we call this function, the better fix is to call it `execution`.
How about adding the options parameter to `desired_capabilities`?
This is the only place where the FPGA_NOT_SUPPORTED is used is. The code that is used in this case is used to ensure that the FPGA_INVALID_PARAM is used in the first place. So, the name of FPGA_NOT_SUPPORTED is not used anywhere else. I think it is better to keep the name of FPGA_NOT_SUPPORTED as is.
This is a bit of a hack... I think we should be using `Time.Time` instead of `time.Time`. But I guess that's not the case.
This doesn't look like it's the right fix.
This is the one place where we call TTarget>.RecordTelemetry. Why is that necessary? Can you call it TTarget>.Invoke?
This one isn't used.
This class and `AutoValue` are unused and should be removed.
I don't think we need to add `add_to_string_config_dict` here.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This change is not needed.
I think we need a similar check for SLobColumn too
This enum is used only when the cache is cleared.
I think this will need to be a warning if `treeNode.state` is not a valid value. The `showTreeExpandNoChildren` is true, and the `treeButtonClass` is true for the `custom-story-core` case.
This is a bit of a nitpick, but I think we can remove the trailing whitespace here.
Why not `replace(/\r/g, '\\"'`?
This is a breaking change. We need to make sure we don't run into a separate PR for it.
Nitpick: I'd rather not do this. The `exists` is a list of store.
This should be `opts.fs, opts.DockerfilePath`.
@garminmin.com should be (c) 2021daniel_van Noord ->13665637
I think this should be a warning.
I think we need a new config forprofiling. If we do want to keep track of those, we need to add the new config to all models in the future.
This should probably be `v.file. << "..", c.ssh.forward_agent.nil?`
is it possible to have a default in the middle of the Proto when we have a default?
I'm not sure if this is correct. The location oracle check can be removed.
nit: this line could be merged with the previous one
here I was thinking of the `id` value being set to `nil` in this case, but it's not clear why the `id` was being set here. I think `id` should be the correct thing to do here.
nit: `Set.<number}` is not a valid name.
Is there a reason we are using `fITEM.New()` instead of `fInfo.AddRow`?
@jvillaloboshi I think it would be better if this was a specific one, like `if info.GoPath is not defined`
I'm not sure if we should do this here. If we are going to do this, we can add a new image to the image that is already in the firstImageRampup class.
I think this should be a constant somewhere
I think this is fine, but I think it's fine to leave as-is
nit: I think this is not a good idea. We could also change the name of the test.
Could you remove this?
do we need to do this in `call` ?
This should only be done if `p.Spec.ServiceMetadata.Annotations` is set.
Can we add an example of what we expect?
this is the wrong place for the `.title` model
This line should be removed.
`... `...` should be on a new line.
This is the only place where we have a reference to Mvx. This is the only one we have in the UI. This is why I left it as is.
This is not a good idea, but it is not possible that the user will have a different `mainFrame` property in the main thread. We need to do this in a separate PR.
Not sure why this is necessary.
`Hparing test environment` was not needed anymore?
Is this change intended?
Metrics/LineLength: Line is too long. [123/120]
Maybe we should add a `err` param to the `ddev list`?
This is not a feature of <msg> lets move it to the bottom of the file.
This is not related, but I think we want to be able to remove it.
I don't think `pkg_pton` is needed anymore, since it is a `SELECT` in the `SELECT` list.
This line can be removed.
I think it should be `setUp`.
This will be the one in the schema file.
This file is used in `pkg/api/util/functions.py`, so it's consistent with the rest of the file.
could we log the toReturn before doing the logging?
This seems like a bug, but not a part of the code.
Nit: For readability, better to call gcerrors.Code() on the call sites to call gcerrors.Unknown().
Can we keep the `CreatePaymentsParams` field in the constructor and use that instead of the block?
I think we should be using `load(statePath, "r"` here, as it's not really a valid value.
We should keep the `ace.qstring.method` part and remove all the `fetchMergedEventGroups` calls.
I think this is a bit ambiguous, maybe we can move it to the `locality-server` package.
this is the first line of the function name, but the function name should be "parse" (and the name doesn't match the name)
Shouldn't this be `VkDescriptorSetSet`?
What's the reason for this change?
This is a bit confusing, as this will be a local var.
The `cc` should be removed.
This change is not related to this PR, but it looks like it should stay, but I think it's better to be explicit about this.
This should not be necessary. The only reason we are using `winner` here is if the value is `""`, and the value is `""`.
This is the only usage of this function and the function is used for the `LegacyFormHelper` class.
why is this change needed?
I'm not sure if we need to do this. It seems like it would be a bug, right ?
I think this is not the right place for this. I think the appsv1.DeploymentCondition is a very common pattern, and we should be using it.
This should be `v2s`, no?
This is not the right place for this. The `ValidatorVote` method has been called in `validatorProvider`, so I think that's what we want.
I think this should be `assertFuncEquals`.
I think this is the only place where I could use it. I would have thought we'd need to make a new function for this.
Should this be `@private` instead?
The `time.Since()` call is already here in `s/unit/conf/unit.go`. Can you make this a `time.Since()`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This seems like a very odd choice to call a function in the `AnyTimes()`
I would call it `Volume` or something, `Volume` is a bit confusing. Maybe something like `Volume.per_delete`?
This is a change from the PR to the commit title, but I think this change is not needed anymore.
You can also add `--compiler-info.json` here to `compiler_includes.json`
This is a bit odd - it's not an error.
I think you can just do `BlockSyncChanSize: 10` and use `BlockSyncChanSize: 10`
Should we do this before `get_plan_info` ?
Do we want this to be a const or can this be done via `apitype`?
I think this is not a good idea. It should be `@CommandLine.Option`.
why is this being removed?
Should we update the key as well? (Also for the `value` key)
This should be the first param in the list, not the first param.
This change is unrelated to your change.
Can we make the update immutable and use `NetworkKeyGen.UserVersion` instead?
This is not needed anymore.
I think we should have an error here, maybe something like `lonely: return ok`?
Hmm, I'm not sure this is the right fix. It seems like the password data was removed in `List<String> validate`. I think the passwordModificationTime was removed in the `List<String>`.
Can't we use `evt.ProcessID == commandLine` instead of `CommandLine` ?
This is a debug statement. I would suggest to log it as a warning.
I'm not sure this is the right place for this. The `width` should be moved to the `else` block. I think it is better to keep the `if (this.width && this.width) { ... }` block.
I think we should keep the old behavior and just keep the old behavior and remove the old behavior.
You can use the shorthand since there is a `use` statement.
could we log this message as part of this PR?
`exception` could be a `log.error` method.
This doesn't seem right. It is only called in tests, so I would say that it is not called.
Can we just use `storageTargetTarget` instead of `storageTarget` since it's not a package?
Why do we change the name of securitycenter?
I think it's better to put these in the `Sys32` module since the system configuration is the directory that is not present.
I think this should be `editController: inject.service(),` and then `editController: "not set"`. The `open` will be set to `false` by default and `editController.controller` will be set to `true`. The `open` will be set to `false` when it is set to `false`
Why are these constants needed?
Can we change this to `if init_cfg is not None` or is this just a mistake?
I would keep these as separate commit
Is there a reason for this change?
I think we should use `topTextColor` instead of `topTextColor` here.
Can you put this in the previous line?
Could you make this a `io.cmd.stderr`?
I'm not sure this is correct. The `phase_id` is a string, so it's a string that's not a `proof_modifiable`.
This is the only change I suggested in the code, I'm not sure how to make it work.
I would have expected this test to pass as a test to ensure the draining node is in the middle of the draining state.
This is a breaking change, but I'm not sure if we want to do that.
While this is a leftover, it should be `def alias_types(compiler)`, not `def`.
Shouldn't it return error if there's no error?
I don't know if it's safe to change, but I'm not sure what the best way to do this is. It's just a thought that we should fix the test.
I think we should add this to the other PR.
can we make it clear that it's not used anymore?
This should be `self._file_complete = []` (or something else) as it's not used anywhere else.
I think we should make it an `int`, `maxQueryLength` and `maxQueryLength` to match the existing value.
Why was this removed?
We should also add the `@return` here.
Is this change needed?
remove empty line
Just curious: why was the `o.name` removed?
Please rename `onSteadyStateCanResolve` to `onSteadyStateCanResolve`
`plan.present?` is a `nil` check, which is the `:optional_present?`. I think it would be better to use `plan.present?` instead.
This should be removed.
I don't think we should do this. The `c.config.Namespaces.AlertmanagerConfigAllowList` will be removed after the change. The `c.config.Namespaces.NowNow` is called. The `c.config.Namespaces.NowNow` is used for the `c.config.Namespaces.NowNow` and the new `c.config.Namespaces.Alertmanager` functions.
I think this should be in a separate commit.
This should probably be in `pkg/api/v2` too.
This is a breaking change, but I don't think we want this to be a pointer.
I think we should be able to remove this, it's a bit confusing if we don't have to do anything with `--snakBuild-only-file` and `--snakBuild-file`
This is a change from the package to a package, not the package package
I think you mean `uint32 slot1` here, which you're missing here?
I won't see any usages of `Keccak stateRoot` in this class.
This is the main change. There is no need to call `callback.setupNotification()` in the `if info` block.
This can be `final` now.
@deads2k do you think it would be worth it to have a separate pull request for this?
This is a very similar line.
You should use `combat->setParam(COMBAT_PARAM_AGGRESSIVE, 0);` instead of `combat->setParam(COMBAT_PARAM_AGGRESSIVE, 0);` here
I'm not sure if this is the best way to do this. We should probably have a better way to do this. We should be able to use `c.c.Get()` instead of this.
Should we use `link_to edit_subscription_path` here? `content_tag "a", &block)`
can you add a `TODO` here to make sure the `modeman.leave` is not properly initialized?
I think this is a good time to add a check for the new table, and we can add another description to it. We can add the new table to the `Symbol_option` and `Symbol_option` table in the future.
I'm not sure if we want to do this now, but it seems like we can move the `waitForResponse` call into a new `require` section, to keep it easier to understand.
This will only be for debugging purposes, right?
Is this change intentional? It seems to me that `status` is only ever used in the `/graph` folder?
This is not the best place to put a "try-catch" statement.
I think this should be `validateMemoryBreakerThreshold()`
I'm pretty sure this is needed because the boost::system::error_code was removed in a different place.
This can be simplified now, since we're in the `Pod.net` file, we don't need to add this.
I'm not sure this was the right way to go. I think this was a bug.
Why do you want to add the `contract.Visibility == TypeMemberVisibility.Family` check here?
Do we want to make this change? I'm not sure if it would make sense for `RewardingFund` to be a `-` (and it would be a `-`).
This is the only place where we're using the `width` command.
I don't understand this new "app" - I don't see it in the view. Is this what we want?
Can you add a line to remove the `Regressor` import?
I don't think this change is necessary, it is just a default
Why do we need to hard-coded this?
remove empty line?
I think we need to add the `name` property to `ArgumentNull` and `ArgumentNullitecture` methods to the `ArgumentNull` class.
I'm not sure if this is a good idea, if you want to add it to the base files then you can just remove the `MolTransforms.h` header.
This is not the only change that affects TF TF
Was this just an unused import?
I think we can remove the `checked` and `shshysEvent` fields altogether.
I think you should remove `moreBPF`, as it's now used in other places
Maybe `__init__` should be a subclass of `__init__`?
Should we also change this line?
You can just do `realOpts = new(WriterOptions)`
I think this will be a breaking change. I'm not sure what the behavior is if you have to change this, but I think the original behavior is correct.
I don't see where this import is used.
Why did we change this?
This should be moved to the `libbeat/` package.
Is this debug only for debugging purposes?
Please use the constants in the config name.
We should be able to use the new `Component` type here.
can you remove the `require` at the end of the test as well?
Layout/MultilineMethodCallIndentation: Align .html_safe with .204 with .204 on line 29.
Is this change required?
this should use `Authorization_url.username` to be consistent with other parts of this code.
This is not related to this PR but it should be in a separate PR.
It would be good if this was a bug, but I think this is a good time to fix.
Can this change be made in the PR?
This would probably be better as `ws_listener.process_subscription_count (subscription);`
Why does this need to be changed? Is that a bad idea?
I think you can also delete this line
Why remove this?
This should probably be called `enableCellEditOnFocus`, not `enableCellEditOnFocus`
I think this should be `com.playonlinux.ui.api.InstallerFilter`
why not use the `type_name` constant here?
I'm not sure about this. It's a good thing to have, and it's not clear why the caller is doing it.
Why are these being removed?
if beforeChangeResult is null, shouldn't this be beforeChangeResult[0]?
Is this still required?
Do we want to keep this? If we're going to make it work, we should make it a little more generic.
This is the only change that affects TF TF. The same is done for `svr.getTransactionFromActionInfo(actInfo)` and `svr.getTransactionFromActionInfo(actInfo)` in line 298.
I think it would be more readable to use `if is_valid_commonname:` here instead of `is_valid_commonname:`
Line is too long. [81/80]
This is an API breaking change. The key is not required, but it's only for transaction hash.
I don't think it's a good idea to have the same `value` as `1` (which I think is what we want).
Why not use `int64` here?
I think we can remove the view here and just do `&nbsp;&#9872;` and remove the `if @user.user.id != @user.id`
Why are these two separate functions?
Why did we remove this link?
can you please update the scapy imports as well
Just a thought. Does it make sense to have a `require 'json'` hook that checks for the order of images?
I think we should be doing `n == 0 && n == 0` instead
Why is this not a big method, but not the read-only one?
This is a pretty hard to read.
This is a bit confusing to me, it's just a bit of a "with" error message. Maybe "with the message" or "with the user"?
I think this is a bug, we should probably be checking if the field field is a string and not a string.
I think it's fine to remove the code.
This looks like a copy/paste error, can you move it to a different file?
This is not a valid enum, can't it be a enum?
Why do you need this change?
The ipb...) is the same as the current code, so I think we can remove this and use the new ipb here.
Why is this needed?
I don't see any new code changes in this PR, but I would recommend renaming the `_build_query` method to something more meaningful.
This is a breaking change. We should also be using a builder with a `Integer.MAX_VALUE` property instead, which is not the case.
Should we make the same user optional now that user can use `profile#show` everywhere?
Style/RescueModifier: Avoid rescuing without specifying an error class.<br>Style/RedundantSelf: Redundant return detected.
I am not sure if this should be a `before` block
Can we have a test for this?
This is not the correct way to fix it.
`x: true` isn't needed here.
Why was this removed?
This is a bit of a hack, but it would be nice if we could also check if the `key` is not `nil`.
It's not obvious to me what this is for, but I think it would be good to add a `TODO` to help standardize on this.
I don't think we need the `.object` here since we already know that the `.object`s are not in a `Error`
I think this should be `json(res.getDataset()))`
What do you think about using `order.orderPath()` instead of `order`? It is used in other places.
This is a bit confusing, the `the` is the `the` element, not the `value` DOM. Is that intentional?
Can we revert this file?
Can't be fixed.
What is this annotation for?
I think we should add a `TODO` to the `position` method and add the `listView` to `position` to the `ConfigManager`.
This is a `AccessLogHandlerImpl` not being used.
why >= 3?
I think you can remove this line
Do we still need the `DynamicFunction` interface?
Why do we have to do this?
this should be removed, not sure if it's necessary to add it to the controller
Should this be in the exception class?
this is not a test case, right?
I don't think we should add a `default`, the default here will be `false`.
Is this needed?
@alalazo Is this a bug?
I don't think we need this. The `if` statement can be removed.
Why do we need to add `this.container = ()`?
Won't this break if the email is saved in the email?
This function can be moved inside the if block, since it's a bit redundant.
Why remove the #ifndef?
I think this is the wrong place for the `viewContainer` variable. It is used by the `let controllerUrl = view.getAttribute('data-controller');`
`self.unix_socket` was unused, so `self.unix_socket` was unused.
I don't think we should remove this.
@dvoytenko is there a good reason to use `!isListRole || isListRole` instead of `isListRole`?
Important change.
I think you can remove this line now that it is no longer necessary.
I don't think this belongs in this module
I think this is not a bug. The type should be `type == "unknown", Type::None)` and then `type != Type::None`.
This is a bit of an odd place where you use the std::min() function.
This is a breaking change.
Is there a reason why we're using `\n` instead of `\n`?
Use the <fastrtps/xmlparser/XMLProfileManager.h> instead of <fastrtps/xmlparser/XMLProfileManager.h>
I think this should be RequestFactory func(transport.Request, error)
This should probably be a `logger.StoreTargetMetadata`.
should this be `MetricsProcessors`?
We don't want to make changes to the copyright year in the PR.
This change was not needed. The previous code was only passing the `dest` to the `init()` function.
Rails/DynamicFindBy: Use find_key instead of dynamic find_ Use.
Please fix the indentation in this conditional.
Can you add a note that this is not expected to be a public struct?
This can be just `(= null)` since the `== null` is now `null`.
I think we need to make sure we don't have any changes to the auth in the next line.
The formatting of this is not needed.
This is not the correct error message, I would say: > I think the dispatcher should be running as first param (and not the dispatcher) is the first param.
I'm not sure if this will be necessary if the new version is `0.0` (5.0) and it is in the new version, but if it's `0.0` then this will be changed.
I think we should remove this setting.
This is the same condition as `nn === 'img' || nn === 'input'` right? We don't need to check ` radius === 'input'`?
I don't know if this change is safe. The original code was a bug, but it is not related to this PR.
I think it would be better to check `value == 0x00` here.
This line should not be removed.
I think you should use the `if` below.
`project/verify` is a bit confusing, can we change the name to `project/verify`?
Is there any reason why the response body was not an error?
I don't think this is the right place for this. The `submit_` method is called from within the `else` block, and it's not the same as the one in `_` for `_`
This is a little bit confusing, since the `lambda_cwd` prefix is a global prefix, not a global one. Maybe `lambda_cwd_on_host_path`?
Is this change intended?
This is not a good idea, it's a good candidate for `nupic` in the test.
Why is this change needed?
I would prefer to have a `gulp help` class that has the `hasOptionOption` and use `gulp help`. I think it would be easier to read if you could just add a `@Deprecated` or `@Deprecated` to `install`, `install`.
This is a bit of a nitpick, but I think we could just return `false` here, and just do `return false;` here.
This is the only place where it's used.
Why are you creating your own `require` imports here?
The docstring says that this is not in the docstring
Why are you removing this? I don't see any other files used anywhere.
Who calls `#include "LocaleContext.h` instead of `#include < confirm>`?
This should have a `IAutomaticTracer` property.
I think this is a bug. The `<b>{}` is not needed anymore.
Can we make this `.aio.core.kaban.security.credential` and have it be `.bio.core.kaban.core.k.credential`?
This should not be necessary if the `reject` callback returns an error.
This could be moved to `#if defined(__linux__)`.
This field can be removed.
Do we want to keep the message around as well? I think the message is more clear.
Is it worth adding a check to make sure it's only used once?
This is a bit confusing, since `stderr` might be nil, but the command is not empty.
Is this needed? I would expect it to be `kbfsConfigConfigConfigTemp`?
Line is too long. [86/80]
You don't need to use this import, it's already included in the `javax.google.common.collect.Lists`.
Shouldn't this be in the `if (c) {` block?
This is a bug, it should be `self.state_before_fullscreen = config.val.content.desktop_fullscreen`
Is this a TODO?
Did you mean to use `objExp.GetObject()`?
"LOG_DRIVER" sounds like a name to me. Maybe something like "LOG_DRIVER_process".
The <msg> <msg> The name of this test is a bit confusing, maybe `vStringNCopyS` or `vStringNCopyS_string`, but I don't think we need to change that.
This file has no effect on SZ, so we should have an `error` flag for it.
Please add `from mConfirmMenuDiscard import 0`
I think this check is not needed. `!is_string($media->getBinaryContent()))` is better than `!is_string($media->getBinaryContent())`
Use the constant for `structs_def`.
We should avoid the `time.AfterFunc` directly here.
This can occur when setting Response.ContentLength64.IsScreenScreenException
Should this be a static constructor?
I think this is not a good idea. The `else` clause in `src/com/common/constants.php` should be fine, because it's not the right place for this.
why do you need to add optOpEnum here?
@jsoriano is this an accidental change? I think this was intentional.
I think this should be done in the `pip` callback instead of `logs` callback.
I think we should return `nil` here instead.
This is a bit of a hack to fix. I don't think we need to change the `naturalComparator()` call, because `values` is not a `Integer`.
Why was `window.location.href` removed?
This is now done in a different PR, so it's probably fine to remove it.
Why do we have to remove the file from `build`?
This should be done in `config/server/client.go`
`Outputs` could be a constant.
The `metrics` is used to be a final constant, so it should be renamed.
I think this is the right fix for `isSharded`
Why does this one not need to include in the autorest?
Is this change required?
I think this is a leftover from the previous PR.
use a `required=True` constant here
Should this be GhostTable?
Why not use `add_undo` in `Args`?
Does this need to be marshalers?
@dvoytenko I think this is a good place for this to work. The idea is that the keyboard navigation will be ignored if the keyboard navigation is not in keyboard.
I think you should use the `checked` value here.
This file is now removed.
I think this should be `download-directory`.
I don't think we should have this method here, it should be `RowKey rowKey()`
Why is this change required?
What is the purpose of this change?
why change this?
I think this is a leftover?
`strict.debug` returns a `null` if the ` Collection` method returns `false`. I think that would make the code more clear (and more clearly) be called for a `info` method
Why are we returning an singleton alert here? I think we should always return a singleton alert.
This can also be `public static final int?`
(style) please, no space before tabs
The current implementation is not needed.
I think we can remove these now that we don't have to update them anymore.
I'm not sure this is the right fix. It's probably not the best idea to put the `_w3c` in the _defaults function, and then the _defaults function should be called on the _defaults function.
Is this not needed anymore?
why did you change it from key to string?
Why is this being removed?
Should this be `FreePRIVATECHAT` instead?
I'm not sure this method is actually necessary, since the `outbounds` function is only used by the `NewNewNewNewNewNewNewNewNew()` call.
I'm not sure what the best thing to do here is to have the "new" method return the promise, so I'm not sure if it's worth adding an interface to the interface.
Is this necessary? I think we should only do this if `input_img_shape` is not provided.
Why is this change necessary?
You can use the shorthand since there is a `use` statement.
Is it possible to use `None` for the FuncDef?
I don't see this method being used anywhere.
I think you can just remove this line
Why do we need this?
Nit: remove empty line?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I think this should be `fullPathDir`
Please add license header like other files.
`this.passcodeLength = passcodeLengthKnown` is not needed anymore.
I think this was a bug in some cases.
It's not clear to me that this is an actual problem and we should not be using the `genesisText[:nil]` here.
You could use `Boolean::metrics::metrics` to avoid the need for `.build()` here.
This is the main change that will be fixed in a followup.
I think this should be `f.Vectorized == nil`
TIL about `.new`
This is not needed any more?
I think this is the right change. The default behavior should be `false`, not `command`.
You can remove this line
Style/RedundantReturn: Redundant return detected.
Maybe we could move this to `HumanReadableName`.
can you make this change to the top of the file?
Why is this here?
This exception is thrown by the exception, not here.
This is a bug fix, but I don't see any use of `IsThreadAgnostic` for this `if`.
I don't think this is used anymore, it's not used.
Is this the right place to do this?
this was the bug
This is not the right place for this one.
I think we should be able to remove this check because the procCodeB is not zero.
I'm not sure if this is right - it will be better to check if `executionOptions.size()` and `slaOptions.size() > 0` before calling `setExecutionOptions`.
This is the only one we need to fix. The `AllowAdditionalRoles` should be in the `if` block.
Why remove this?
What is the purpose of `_`?
I think this can be simplified to `returnType == null && returnType.isEmpty() || returnType.isEmpty()`, no?
I'm not sure this is the right way to go. This is a very large change in behavior.
I think we can use `WHEN cardinality(parts) > 2 AND lower(element_at(parts, -1))` instead.
This doesn't make much sense. The table should be `tableName.startsWith("hadoop.")`.
this looks wrong
Can we move this import to the top of the file?
I think we need to add a type here. It is already defined by the `Bibliographic`, so it should be renamed.
Do you want to add this?
I think this should be a `config.add_api_capability()` function, since it's a `_has_api()` function.
This is not used anymore
not sure why you added this line
This file should be removed.
remove unused imports
This will cause the error to not be reported on the next line, right?
I think we can remove this.
This is a bit of an unrelated change, but I'm not sure why we need the `*` here. It is a bit confusing to read. What about the `*`?
This is not the right place for this PR. It's a problem for a model that's called `type` but it's called `dict`. I would say it's a good idea to be passing a custom `dict` object, and if you want it to be called `type` it's not called.
Why not `final`?
@danrot @dantleech are we using this anywhere else?
I don't think you need this since you are already returning an `client` object.
I think this should be removed.
I think this is a bug. We should be using the constant here.
This is a pretty big change. It seems like we should be using `connectionManager.then()` instead, and then you can just remove the `@return` statement and use `File#resolve()` instead of the `File#resolve()` call.
Do we need to do this for all platforms? I think we can just use `gasPriceUnitIOTX` instead.
Why are we returning an error here?
This is the main change.
this is an example of a situation where we would need this to be synchronized
Put one space between the method name and the first argument.
Did you mean to add this?
you can use the doctest to run it with an doctest
Is this used anywhere?
I think we should remove this field. It is not used anywhere else.
use the `_initial_ customized_trail` helper helper here
I think we can move this check to `getoutpostARN()`, so we can just return an empty string.
Just to make sure I'm missing something, this should be `git grep grep` or `git grep grep --py_prep`
Why are we removing these?
This is not used in this class.
I don't think we should do this. It should be `r._vnode` instead.
why is this not part of the scope of this PR?
This is a good candidate for a better way to do this, since we don't want the fact that the value of `options` can be used in a single place without anyone else.
This is not the same function as in #2424
Can you add this to the `__name__` file?
Is this needed?
I would move this to the beginning, it's a bit more explicit.
Would it make sense to add this in the controller controller and have the AccountWidget controller controller controller controller controller controller controller? Or is it just a case where it's not a valid AccountWidget controller? That would be a nice thing to do
Why is this needed?
Do we need to set this to 3 to 3 to allow 3 to be 1?
This is the wrong place for the fix.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [90/80]
"If value is true it runs UpdateMananger after login in backend."
I don't see why this file changed.
I think you can do `StartMetricsSession(params, false)`
Is this a regression?
I'm wondering if this should be a `provisionFailedTerminal` field or a function. I'm guessing it would be a `map[string]string` instead of `map[string]string`?
nit: we should use `fine.go` here.
This is not a pointer, so the current size to 2 pointer is the same.
I think it's better to return `nullptr` here, and return `undefined` in `filter_ref()`.
I think it would be more readable to say "Is this just a TestRPM build with this"
I think we should keep this case as it was before.
I'm pretty sure the `update` method is not called anywhere. I don't think there's any need to do it here, but I think it would be a good idea to remove the `update_singular` field from the `update` method, since the `update` method is called inside the `update` method, and it can be removed.
I think you can move this import to the top of the file.
Can we have an `push` function here?
I'm not sure we want to include this in the `common.conf` file. I don't see a need for this.
This is the only change that is needed.
This is a test class, but it's not really needed.
Why are you doing this?
Please use `<=` to get the same value from the tabs.
Do we really need this for global?
Please use the new version of the new version
I think you need to return `output` here, since `factory` is the input argument.
this is wrong. The `canSeeInvisibility` check is not needed.
Why do we want to set the `!string.IsNullOrEmpty(newValue)`?
Maybe we should add a TODO here to track fixing the TODOs?
@kennknowles I'm not sure this is the right place for this. The network should only be set to true when the user hasn't specified a port. I think that's the right place for this.
I don't think this is the right place to remove this. The reason I'm using it is that the image is always the same, and the image is still in the first place.
Why do we need a new method here?
I'm not sure this is the best way to do this. I don't think this check should be here, if we want to do this, then we should also add `attrs.get('roleText')`.
You don't need the `dcontext` variable here, it just returns `true` if the function doesn't exist.
nit: you can use `assertEquals`.
What's wrong with this?
I don't see this being used anywhere.
Why is the default `ports` being set to `false`? Is it a good idea?
@jcotela do you know what you mean by this change ?
I think we can remove this import.
I'm not sure this is the right place to put a `Header` here? It's the same as `Footer` in `getQueryAutoAuto`.
Why the change from `ncmp(resource_str, "id:", 3)` to `ncmp(resource_str, "id:", 3) != 0)`?
I think we should be able to remove these now.
Shouldn't this be in the other PR?
`os.environ.storage.storage` is now deprecated.
This is not needed since we only have one `nil` anywhere.
What's the purpose of this check?
Can you add an example that will be fixed in this patch?
No need for this change
I'm surprised this isn't a partial file, but I'm not seeing where it's used?
I'm not sure if this method is necessary. If you want to do it in the first place you can do it in the second place.
Why are we removing the defaultSamplingProbability?
I think we should make the `patchBytes` the default here, as we already have a default `patchpatch`
We need to remove the `debug` level and add a `log.info()` call in the logging.
nit: I'd call it `CLOCLOExpr` instead of `limit`.
This looks like it was removed, but I don't see any code that uses it.
I'm not sure this is a good change. I think the `catchError` should be a good catch.
Shouldn't it be renamed to reflect that?
Why is this needed? `this.opts.videoConstraints` is always true because the videoConstraints will not be `false`.
I'm not sure what the FriendlyId is here?
WasmAbi not set or not? Isn't it better to set `org.apache.hadoop.checkNotNull.checkNotNull(java.lang.String)` instead of checking for a `.expect().expect`?
I'm not sure if this is correct. It seems like the `err != nil` block should be removed from this function.
This is a breaking change and will not work. I think this is what we want.
Is this just for testing purposes?
I would move this to `width` so that it is only called from one place.
Do we want to keep these? Or is this just a debug statement?
shouldn't this be `useQueryQueryMatches` ?
I think we should be able to use `BlockHeight` here, as we already know it's a default. I'd say that we can make it clear that the block height is not null, but it's not. It's a good idea to have it in the interface itself.
This is the only thing that affects `Status OptimizerUtils::compareAndSwapBound` call. The caller can pass `first` to `std::pair` instead of `std::swap`.
Could you please add a little bit more detail about what this does?
@Scottmitch do we have a case where `o == null` here?
I think this is wrong. The `canBeSet` property is not set when `$propertyMetadata['isWritable']`.
Why do we need this function?
This was the only one I found in the past. I had to look at this change in the first place.
I'm not sure this is the right place for this, it's a good idea to have a separate query with the query name. I think it would be better to just have a query parameter and then use the query name to the current query.
We can't change these public APIs.
Do we need to keep the `Cause` around?
This should be `DD_IsAppInsight`, since we are not setting the attribute directly in `_DD_IsAppInsight`.
(style) line over 80 characters
This is a little weird, we have to wait for a lock on a store, but not on the account balance.
I don't think the test is needed.
Why do we still need this? I think we should remove it.
I think you need to update the doc string here.
This is a good place to put this somewhere, we can just remove the whole `map` statement.
What if `from_ts` is `None`?
The `char` is used only when `TM_req_requestregioninfo ENTRY` is `2`, so it's not necessary to add it here.
I'd rather not have a new `score float32` type.
I think you can remove the `isBrowser` check
This is now being removed.
I think you can remove this import as you are using the other modules.
nit, can you use `StringUtils.isNotEmpty`?
I think we should keep the function signature and rename the method to `Descriptor`. I'm also confused about why we're using the interface.
Why are we returning the `models.User` function here?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this should be `width` instead of `width`
This is not a part of the API. It is used for all nodes that are in the API.
Is this change necessary? We're not using `sizeof(priv_mcontext_t)` in `*_rebase.h` and `*_rebase.h` in the code base.
Let's not change anything in this PR, let's only change the `.get()` calls to `to()` if it doesn't exist.
I think this should be a little more specific. What do you think?
It's not necessary to use this variable in the `EscapeDataString` method.
This is a bug fix.
How come we're not using the idences here?
Not a fan of this, but we should also have a `dodo` prefix.
This is the main change.
I think this needs a case where `class` is `undefined`. I would use `case KindService,`.
`proc` can go up to date.
Is this a typo? `multisend bytecode` -> `multisend bytecode`, and `multisend`
@michaelkuhn Do you know if we can remove the scope manager here?
Shouldn't this be `public`?
It's not clear to me that the `err == 'int'` is the correct thing to do here. The reason is that the `err` is not the only thing that is not calling `damage` in the first place is because the variable is not the same as the `int` in the variable, but it is the only thing that is used here is that the `err` is not the correct thing. The only thing I would expect is that we don't want to have a local variable in the `err`
This should be `final`
Is this change necessary? I thought the only place this was used is when the `Header` is set to `null`.
Do we need to do anything to initialize to the cache, or is it just for debugging?
`in` -> `in`
Why do we need to do this map[string]interface{}?
This should probably be a `po::`
why is this being added?
We should not remove this method entirely, it should not be necessary to remove it.
Why is this change necessary?
I don't think we need the `SUSPENDED` config here.
why not just `kekulizeException` ?
nit: can we call it `violations` or similar?
This is the only change needed here.
I'm a bit confused by this one. Why is this necessary?
I think it would be better if we could set this in the `setObjectName` method instead of in the `setObjectNameRepeat` method, and then set it in the `setObjectName` method, which would allow us to set `setObjectName` in the future.
why change this one?
(style) please, no space before tabs
This can be replaced by `adios2/HAVE_PHDF5`
This test is not related to your changes, but I think it should be a separate commit.
I don't understand why you are removing it, but why not do it in `client`?
I think we should keep this as is. We can remove the old option from the agent.
I think we need to add `a href` and `a` to the `a` tag.
Can we use `goto err` to check for the path?
Is there a reason we need a different approach than the original link?
I don't know what this is doing, but I don't think we should do that in the `Error` case, since we are not using `log.Info` for the `log.Info` case.
Can you remove the parent class? It doesn't look like it will be called from the constructor
@team_plans = TeamPlan.featured.ordered.ordered
these 2>/dev/null calls are not needed anymore, they are already done inside the `it` block
This is not needed.
nit: not used
This should not be needed. The GenericDataFile implementation is already defined in the `private` class, not the `private` class.
This file is not used anymore.
Can we use `_InternalFrame` here, too?
I'm not sure about this. It's not a big deal, but if you have more than one place, you should have the same code as the `ResourceScheme scheme`.
This is not the right place to put it. It's not the same as the current recommendation, but the current recommendation is used for the `SecurityProtocolType` (which is a `2.2` file)
I think this was a typo and not a typo
@jomgolivier23, this is a debug log, should be `logger.info("Starting to refresh continuous aggregates:")`.
I'm not sure this was the best choice. The `script` component should be removed as well.
This is not needed anymore, it should be removed
Does it need to be a `Set`?
This file doesn't have any side effects. It should be removed.
This is the wrong place for this, it is used for a `Gobblin` interface, not the `Gobblin` interface.
Hmm, this is a change in behavior. Is there any way that we can do this without a `defer`? I don't think we need to do that, but I think we should just make the response response response body a bit more explicit. I'm not sure if we need to do this in this PR, but it seems like we should do it for `defer` and then just pass `defer` to `defer`?
I think you can remove the extra space here
This is not a placeholder. It should be `->defaultValue(null)`
Is this change intended?
I'm not sure why you removed this line.
Let's use `const` for all these.
Please avoid use of `*` imports.
Why not use the global `status_finder` variable here?
This is an internal function, not an internal function.
I think we can just make this the first time we do the `ValidateSignature` call.
not part of this PR, but we should probably leave this as it was.
I think we should keep the github.com/SchumacherFM here as well.
@deads2k i don't think we want to keep these changes. I would keep the old behavior as it was and add an error message to the `errors.Errorf`
This should be `LOG.info()` instead.
`... Eliminate from 'w' in the service account account`
I'd like to see a test case for this, as it's not a type annotation
I don't think we should add this.
It would be better if we used `free(tmp)`. That would be more readable and also less code to do.
This is a breaking change. It seems like we should be using the `getField` here and below.
this is not the right place for the `auto && ...`
This is not a good name, I don't think it should be here, but it should be called `api`
I think you could add a new line after `if (role in (controlTypes.ROLE_DELETED_CONTENT,controlTypes.ROLE_HEADING, ... )` to make it more clear that this will break existing code.
This is a no-op change, please revert.
is there a reason for this change?
You need to use a wrapper for the `sigValidator` function to avoid the need for the `Props` param.
This should be a debug statement.
I'm not sure why this is fixed in the first place?
I would prefer to use the new logger here.
I think we should add this as a `*` in the doc.
@zjffdu I think this is the right place for this - it was added in #2414
This is not a string anymore, since the typehint is `int` (the typehint).
Please remove this empty line
This should be a `getAttribute` method, not a value.
Shouldn't this be 238?
Can't we just use `api.setReviewPosition(self._oldReviewPos)` here?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is the only thing that should be done here.
I'd prefer to keep the `/user` prefix as it is used in the `saleorgs/:org/repos.go` and `/orgs/:org/repos.go`.
This will fail if there are multiple addrs (for example) that can be used. I'm not sure if it is worth it.
Is this the correct place for this?
I think we need a check for scol and scProduol, but not scProduol and scProduol
Would you be so kind to change this to `user_administerable`?
`time.Minute` is too generic. How about `time.Minute`?
Shouldn't this be `0` ?
This seems like it could be moved to a separate PR, but I think it'd be nice if we could add a new `if` statement to be able to remove this check in `checkCartNotEmpty`.
how is this coming from?
I think it's better to move this to the `try/finally` block, since it is used in a few places.
Nit: It would be nice to have this in a constant somewhere
Shouldn't we just remove the assertion?
I think it would be more consistent to use `config->http_proxy = getenv("HTTP_PROXY")` here, since it's a new method.
Can't you use `!empty()` instead of `?empty()`?
I don't think we should change this.
nit: I think you can use `split size = Long.parseLong(options.get(TableProperties.METADATA_SPLIT_SIZE))`
Why do you need to implement it?
We should probably set this to `compute_service_account` in the config model.
I think it would be better if we could just have a constant in the constructor of the `GET_CONTEXT` attribute of the `GET` instance, instead of a class in the `GET` instance.
@matt-gardner, what's the difference between `Getegeregereger` and `Getegeregeregereger`? Is it possible to use `Getegeregereger`? If so, I think we can remove this check and just use `Getegeregeregeregereger` to get the same behavior.
I don't think this should be a warning, it will be useful to find a better way to specify that the user will be using the `positional`. I'm not sure if this should be a warning.
This is a very good use-case, can we change it to `lib/core/v2.8/` ?
I don't think you should be checking that the `__main__` method is not a typo.
Why is this necessary? I think it would be more consistent with the rest of the `Tag` fields (e.g. `Tag.none`).
Is this a typo?
I don't think this logic is necessary.
keep_detector should be options?
This is not a public API, but the API should be `Integer` not `int`.
We should not test for `testAlertmanagerInstanceNamespacesAllNs` here.
This is not a 20.
This is the only place where you use the `os.environ.h` file. I'd suggest you remove it as well, as you're changing all of them.
@mikeshultz This is the only change that fixes the issue. The problem is that if you are going to use the `exception_address` option then we should also have a single call `rec->ExceptionInformation` instead.
Can we keep this alphabetically? I don't think we should remove this.
why did you drop `String groupId`? I think it would be more consistent to use a `ImmutableList` here.
why is this include needed?
Let's add this to `isOwner` to keep the API consistent. I'm going to change it to `isFirstAdmin`.
This was just wrong.
This change is not related to the bugfix. It should be reverted.
why do we need a new param here? can't it just be an existing one?
I think you need a trailing comma here, it will be confusing.
This is the main category. That means we can't just use the context. That means that we can't have an context in the context.
I'm not sure this is the right fix. The `TaskFiles.get` method should not be doing anything useful. The `Task.path()` function returns the `Task.path()` object.
Please use pyramid.scripts as the rest of the file
Please remove the `isIsolationFilterOpen` variable.
Remove empty line.
Should we use `false` here?
You can just make the function `operation`, too.
This is a bit of a weird pattern. I would expect the `.today` to be `nil` if the `.cfg` isn't `nil`.
why is this needed?
Shouldn't it be relative import?
We should also add a TODO here to make sure the image isn't fully fully in the UI.
I'm not sure this is a good idea. If the user doesn't have `null` then the exception will never be thrown.
The number of predictions is required in the label.
This is not needed.
I think this should be a class field, not a class field
could you check the number of 0 in the test?
Shouldn't this be / passed in to the `tls.TlsHandshakeHook`?
This will break all the other code. I think that we need to do the same for `_blockTree` as well.
`getUrlFromRouteCache()` should return `null` for `getServiceUrlFromRouteCache`.
I think we should move these two lines into `getEditorInstance` and `getactiveEditorInstance`
I think you can just return `err.Error()` here.
I think this is a bug fix. We should not be doing anything else here.
This test now needs to be reverted, right? (And a separate PR for it)
Do we want to be setting this on the user? If so, should we check if the user exists before calling the method?
The whole `if` can be removed.
I think this should use a str() function instead of a str().
Style/SymbolArray: Use %i or %I for an array of symbols.
@dvoytenko I'm not sure why this was necessary.
Why are we returning func here?
I'm not sure this change is needed
I think it is better if we just print the resource here and then let it get the actual resource.
We should remove this line.
I think we should use `DEFAULT_DEFAULT_crement` here instead of `plans`.
This is a good change. I think we should be able to remove the `UseKestrelHttps`, and just do `IKestrelHttps(this IApplicationBuilder app, HttpsConnectionFilterOptions, ServerCertificate2 cert)` in `app/services/server.js` and just call `app/services/server.js` in `app/server/server.js`
shouldn't this be a `copy`?
Why not put this in the `__construct()` method?
I think this should not be needed. The first `try` block can be removed.
I think this should be a separate pull request. We can remove it if we are not breaking anything.
Should we remove it for now?
I would prefer a better name for this. `quilt-registry` or something like that. It's not clear what the difference is, it's not.
@scalablecory, what about `L1StandardBridgeAddress` ?
Align the parameters of a method call if they span more than one line.
I think you need to use `for` for the loop.
What's the difference between this and the below?
I'm not sure what this is doing, it seems like a good candidate for a new `visitor.visitLeaf(field, this));`
Line is too long. [83/80]
Can we just use `NodeSelector: map[string]string {` instead?
Does this need to change from `ArgumentNull` to `ArgumentNullWithSelector`?
Why not use the `MsgCtxType` directly?
The naming of this is a little confusing, since it seems to me like it's a `then`/`then` (which is a bit confusing, I don't think it's a good idea to add it here, but I'm not sure what the best way to do is) would be to have a separate `then`/`then`/`then`/`then`/`then`/`then`/`then`.
I don't think this will work. We need this value for input masking. We need this value for input masking.
I think this is not the right place to put this. The `module` command should be moved to `llnl.util.filter`, and then we should be able to use the `llnl.util` command to see if it is a directory or not.
Could you add `enable-resource-type` to `resource-type-resource`?
I don't think this is right, we want to do the same for `CodeVersion` as well
I'm not sure if this is the best way to go.
we should probably have a return here instead of a string.
Is this really needed?
I think you need the BestSuggestedHeader?
Is this related to the PR?
I think we should also remove the ` compaction.url` here.
This is a breaking change.
Can you please remove the space before the closing bracket and the opening brace on the next line?
I think this is the wrong place to put this. I think it should be a different fix, but it's probably better to have the logic here to make sure the `self._scol` is not None, so that we can just use `return self._scol.alias(index)`
Is there any way we can get rid of the check?
I'm not sure what the best way to do this is. The `default` value is used for `default` and it is not the same as `default` by the caller.
I don't see why you added this. I don't see the reason to do this, it seems like the wrong choice is to have a length_from param that is set to None.
why do we need both of these? I don't think we should be using the same name.
I think this should be `if` since `ReadOnlyEditBox` is not None
why is this needed?
I would suggest using `uint32_t` as the default.
I think we should keep the capitalization here and not use the capitalization in the test.
I think you can just change the method signature of mock() to have the same result as in the other PR
I don't understand why this is needed. It seems to only happen if the flags are not `None` (the flags is `None`) and the flags is not defined.
What about the other way around?
"the second stage" sounds like a typo.
Shouldn't this be cfg.Server instead of cfg.Server?
Should we also add the `aria-label` field to the `label` attributes as well?
I would prefer a list of 2-bit python options.
This should not be necessary. The doc says "This will be used by the original fillData has been changed". The doc says "This will be used by the original fillData" but the doc says "This fillData has been changed" and "afterAutofill". I think it's more clear what "afterAutofill" is, but it's not.
I think we should be able to use `intermediates_manager.py` directly instead of importing `Intermediates manager` directly.
This is not correct. `element.is_displayed()` will return a string if the type is `None` or `None`, which is `""`
I think you should be able to remove this line.
I would prefer to return the error instead of the context here, but that would make sense.
I think this is not needed.
I don't think we need this class, it's only used once.
I think this should be 3)\n" to be able to use the default value of 4)\n" to avoid a "your default" error.
I don't think this file needs to be split into multiple lines.
This will need some reformatting.
Why are these separate imports?
I think it would be better if we could log the console.info() in a few places.
Can you explain the reason for this change? It looks like it's just me. It looks like it was a mistake in the first place.
I don't think we need the `'s` param.
Shouldn't this be a new config?
Should we make this `\r{Task\test\params:\n}`. It's not clear why we use `\n` in the `lib` folder now.
Why not just set the configuration as constants?
Is there any way to test this?
why remove the failed check?
this will need a new line
nit: `/wow` should be on own line
Can you add gitea copyright line to header (and keep gogs one next to it)?
I'm a bit confused by this. Is it a problem if `Analytics` is not `None`?
This is a very minor thing, but should be `openULET_OF_FURY`
I think this should be `host.HostFactory`, since the `host.Host` function can only be called from the `Host` function.
This is not correct, but I think we should be using `startOf` here.
Is it possible to import the `language` at the top of the file?
Why the change to `127.0.0.1`?
Probably should use TODO(jba): test that doc's revision field is updated.
@citizen428 I've seen the old `accepted_if` and `endend` exceptions in both branches. I'm not sure if that's the best way to do this...
Is this still used?
This is a breaking change. You could just use a constant for the constant here.
Isn't this the same as `instr_is_scatter()`?
@options['HOSTS'][name][:pe_dir], @options[:name][:pe_dir], @options.merge(env_vars)] = @options['HOSTS'][name][:name] || @options[:facter] if @options['HOSTS'][name][:pe_dir], @options[:facter']]
This is a bit of overkill, but it should be `Undefined` or `Undefined` as the last parameter.
I don't think this change is needed
I'm not sure if this should be `nil` or `nil` but I'm pretty sure it is safe to call `host.is_pe?` on `nil`, but I don't know how to get this message.
These two functions are not used anymore.
Can we make this `static` and `static`?
Can we make the method return `Keccak?`
I think this should be a different name.
I'm not sure about this. The `ArrayType` parameter will not be `null` if `t` is `nil` or `false`.
This needs to be added to `src/server/server/server/server/server/server/server/server/server/server/server/server/server/server/gitea/server/gitea/gitea/server/config.h`
this is not a good idea, we should use the `h` prefix here
Do you think we should keep this here? I think it's the only one that's used in `nocov`.
I don't think we should add the cross-origin resource sharing here.
This is a bit of an overkill, but it seems like it should be done in a separate PR, but we can make sure we don't have a way to do this for a while.
Use 2 characters long lines.
I don't see this being used anywhere.
I think it would be better to keep the `JsoncopForSequence` and use `JsoncopForSequence.Sequence` here.
Is it possible for `countlyDb` to be initialized with `countlyDb = plugins.dbConnection();` ?
You don't need the `tag` method here.
This is a little strange, but I think it's better to have a constant for this.
I think this should have a `common.BaseTracer`
This should be a `opcache_invalidate`.
I'm confused, this is what the interation events are and how it is. The compiler will see the interation events, and the interation will be different for the same value. The interation that will handle the interation events, and will not work for them.
I think this is a good idea to check if the type was `Subscript`, but the type was `None` (which is `None`, which is `Subscript`, not `None`).
Why is the default 0 and not 0?
Is this needed for some reason?
Is this not needed anymore?
Is there a reason you removed the `loopBody` variable?
Can you explain the logic here? I'm not seeing it being used anywhere.
Maybe `from datatable import brightness`?
This is a bit confusing to me, why is the task in `NotifyNewTask`?
This file doesn't seem to be used
I'm pretty sure we don't need to check `FIPS region not allowed in ARN` anymore.
`s3control_stubber` -> `s3Stop`
I think it is better to set the default value in `roi_head` and then set it to `None` when there is no `train` attribute in the `roi_head`, so it is easier to understand what is needed here.
why not just return bt.limit and then you don't need the return?
I don't think you need the `custom` here since you're only using it for the `custom` view.
why not use `["["["["["["["["["["["["["["["["["["["["["["["["["["["["["["["["["optional"]"]"]` instead of `["["["["["["["["["["["["["["["["["["["["["["["optional"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]"]
I think it would be better to use the `isinstance` helper here instead of `cp65001`.
I think we should be more specific about the new API here.
I think it is better to have this in a `const` tag.
I would prefer `model = dict(pretrained=pretrained. oid(type='Res2Net', depth=None')`.
Please add a license header to the existing files.
This is a little strange, but I think the `Failed because:...` is redundant.
I'm surprised this didn't change, but I don't know why we need the variable here. Is this a bug?
Should be `cenkalti/backoff/v3`
Is this needed?
I think this is not right. We already have `defer ticker.Stop()` already. We should at least log a warning if we want to get the ticker.
nit: `return number;` would be more consistent with the rest of the code.
Is this a "common" error or should it be "common"?
I'm not sure if this is a good idea. The import is not needed.
I think this may be a breaking change, but if the code was not working we should throw an NPE.
This is the only one I'm worried about about the wire check. I think we should be doing `os.Exit(2)` instead.
The name `_` is not very clear. It's not a directory, but it's a directory, not a directory. It's just a thought.
Do we need to update the tests to cover this case?
This should be a different commit, but it's a bad idea.
This will need to be initialized with `@Path` on line 519
This should be on the `onConfigurationChanged()` method.
This is the only place where we call `AbstractAbstractClient` in the `AbstractClient` function. The reason for this is that we have the `AbstractClient` function that we already have in some other places is to call `AbstractClient` in the `AbstractClient` and not the `AbstractClient`, but it's a `AbstractClient` function.
We should probably make these two import-safe and use them only for testing only
I'm not sure if this is a good idea. The first character should be `#`, or if not it should be `#`, or if not `#]?.*'`.
@mmaxim this was the only change that will break the build. I'm not sure if it's worth it.
I'd prefer to have the gkc_summary in a separate thread.
This is a little confusing. What is the purpose of `_getHash()`?
Does this work? I'm assuming the previous behavior was correct. The previous behavior was to not allow the old block, and the new block could be removed.
why not just remove this?
I'm not sure if this is the right way to do this. I think it's better to just use the `_` constant here.
I don't think you need the `VALID_user` here.
Hmm, this looks like a bug in the bugfix. I think it would be better if we didn't add a `elif` to `isinstance()` before the `elif` branch above to fix the bug.
This line needs to be indented by one of the two lines.
remove empty line
This should be `window._state_before_fullscreen`
This change will cause the node to be cleaned up when the node is actually being created. Is it possible?
See above, this change is not related to this PR.
I don't think this is a good idea. The default is used to get the proto-line option for the GAPIC config, which means it can be used in the constructor.
This is the fix. Is that correct?
This is not necessary. `skip_links` will be used for the user input element, so you can remove it.
This check is not necessary, because `get_INCOMPLETE()` returns true for each one.
This is a public API, but I would prefer to not use this interface. It's not a good name to have it, but it's not clear what the name is.
As `None` is not used, please remove it.
I'd prefer to use `\n` here instead of `\n`, since that's what the default implementation is.
why change this?
This is a bit of a hack, but I don't see any related code in the code base that I'm not sure what this is supposed to be doing, but it seems like the only place where the `profile_json` is set. Is there a reason why the `as_json` is set to the default value? I'm not sure what the best way to fix this is, but I don't see any other code in the past.
This is the only line changed in this file. Can you remove it?
I think it would be more consistent to have `name` and `name` as well. It is not really necessary to include the name of the object, but I don't think that would be a problem.
I don't think we need this. Can't do it now.
This is a bit of an odd place to put shadowSupport as an argument to axe.testUtils.shadowSupport. It's not a big deal. It's a good practice to use `testUtils.shadowSupport`.
Could this be called `Account::Access.new(@account).was_spam()`? I think it's a good idea to create a new instance for each one in the controller.
probably need to update the min_x_layout_output to be consistent with the rest of the code
I don't think this is the right place for this. The `Exceeded MaxAckPending` is used by the client. The `AckPending` is used in the server code, so it should be `-p`
@jona-sassenhagen this is the only place where this is being used is in the code. I think it should be removed.
Trailing whitespace detected.
Can you add a doc for this?
why the change from JavaScript to Ruby?
Is this needed for this PR?
Why did this get deleted?
why is this change needed?
Why not just remove this?
Should we add `wireguard.cali` here?
Use the new Ruby 1.9 hash syntax.
We should probably make this a helper function in the future, e.g. `isInTLFJournalEnabled()`
I think this is the only change required here.
I think we can remove this check and do the following: `doCommit(base.file().location(), base.lastUpdatedMillis())`
Do we need the `.detach()` here?
This should be a try..catch, not a biggie.
can we make this an optional argument to create_no_window?
this was just a mistake before, right?
I'm not sure this is worth adding a helper, since it's not really a requirement for this PR.
I think this is not a valid value. It should be `causalConsistency=true`
No wildcard imports.
should we add a check here for the domain name? I would think that we should be able to use `Access-Control-Origin` for this
nit: `KindNode` is a bit ambiguous, could we just call `Namespace` on it's own line?
Why does this change need to change?
I'm not sure this is a good idea. I'm assuming this is a good way to get the stub from the client side.
I don't think this belongs in the interface.
Import packages with wildcard is not recommended.
why is `Candidates` not needed here, it is already there.
Please use `Object.keys`.
This file is not needed anymore.
this is not needed?
I think you can remove this. You can just set it to `0.5`.
Please revert this change
I would use `cumulative_path` to get the `default` as a parameter.
This was removed because we don't need the `getData` method anymore.
We should add an example here that this field is only ever used for `not_a_url?` so that we can remove this field altogether.
`--line` is a bit confusing, maybe "the method name is used in Bolt 3.0".
I think this is a good place to put this method into `validate`
I don't think we should add `err` here.
This will need to be `int32_t`
I don't think we should do this. I think we should be checking the status here.
I think we should move this to a new constant.
I think this is a bug fix.
Is there any reason to keep this? I think it's better to just make it `Dictionary`
Maybe mention this in `config.raises`?
This is the only change that fixes this issue.
I think we can get rid of this entirely.
I think this is a good idea to change the method name, it's not a good idea for me to change it.
This is the only place where we should be using the `!executablePath.startsWith(getContainersPath()))` in `build()`
I think we can drop this `includeme` now.
I think this should be `unsigned req_done : 1`
I'm not sure this is the right place to change this. I'm not sure how to fix it.
Shouldn't this be a `@param`?
It's a bit weird to have a `test.ts` directory at the top of the file, but it seems like this would be a breaking change.
This is a bit confusing, as we are not actually doing anything here, but I'm guessing this is a very good idea.
Why is this being removed?
This change is not needed. It is not needed.
Why not just use the `if` condition?
so we don't need to do this for all cases?
This method should be called `update_attributes` - it's a bit confusing to read when the user has already been started yet - so I would not change it until we have to change it.
@matt-gardner Is there a reason we are not using this as an explicit `relocatedTime`?
I think this should be `watt.times.needsNullable`. The `mp_RTPSParticipant->->getRTPSParticipantAttributes()` should only be used if the user doesn't want to do anything about the `mp_RTPSParticipant` or `^`
I don't think this is a good idea. It's better if we can set the default setting for the table file names. It's not the same thing as the other table file names.
Why is it not possible to get rid of these?
I think you need to keep this package private and add a `use` statement.
can't you check for nullptr here?
Did you mean to also add `accounts.paginate(per_page: limit, page: page)` to `Account.to_sql`?
I think we need a check to make sure `Window` is not `tuples` and `BFA` always exists.
Maybe we should rename this to `processChunkMsg` or `processMsg{chunk: chunk}`.
I'm not sure about this. If the hexa is already on a hexa it should not be on the hexa
I would prefer to see a test for this. It's not a big deal, but I think it's better to keep it as a static method.
Shouldn't this be `resourcesField` instead of `resourcesField`?
Shouldn't we use a `--build-system` option to return `True` here?
this is a good idea. we should be using the `getObjectManager` instead of `getEntityManager`.
Is there any way to avoid this?
this is a bug fix?
I'm not sure if this is the right place to do this, if we're not doing any pass it to the response. Can we do something like this?
Does the existing node node need to be a valid status?
can we add a check to make sure the `IsWritingCatchpointFile` is not `true`?
We can also do `testuser = random.randint(2000, 1 << 31)`
Nit: I would prefer to return the `false` state instead.
AFAIK we are trying to do this with a `llnl.util.ec2.0` package. This is a breaking change. I'm not a big fan of this change, but I'm not sure if this is the correct way to go.
I think we should move the `Password` to the `sdkAuthConfig` section above, so that it's only called once. We should also have the `Password` in the `ServerAddress` section, and also have it be added to the `sdkAuthConfig` below.
Should we also have a test for this?
Can this be removed?
We should also check `repo.CreateRepo(repoDir, newConfig)`
Can you move this into the controller?
I would rather just do `if len(element)` instead of just `try`
I would call it `FetchUntilEmptyPage        ` because it's the name of the config
This is the only place where we need to handle `new.exist?` where the `File.expand_path()` function returns.
This is a bit of an API break. Is this intentional?
Is this debug logging intentional? It seems like the log message should not be logged.
remove empty line
I think we should be calling `.Get()` here, since the method is called on `return false;`
I think this should be `v1alpha1`
We should make this final. RpcApi.QUORUM to RpcApi. This way we can ensure that RpcApi is not available at all. RpcApi. This is a breaking change and will make the change needed.
We should probably add a new param for this to ensure that the `includeCoinbase` param is only passed to the `new` param.
This is the only change required?
Is there an option you can just define the POC in the first place?
Metrics/LineLength: Line is too long. [83/80]
can you move this up with the other standard library imports
There's a lot of other places where we use `S3.M64` for this.
I'm not sure we want to test the content of `mocks.uninstall.mock.calls.length`. I don't think it's necessary to test the content of `apitype`
Replace the .warn_with on line 262.
I think we should use `BlockHeight` here.
I think it would be better to move this to the caller, and move it in the `Start_bucket.py` method.
It seems like this field can be removed.
why are we adding this function?
This should be `@Nullable`, not `@Nullable`.
remove this line
should we keep the old rows?
can you add the docstring for this argument too?
I'm a bit confused, this is a `false` by default. If we do this we should be able to remove this, but we should be able to make sure we don't get an `true` to `false`.
I think we need to make this `static`, because it's the `class-package-scoped` file, and it will be fixed in the future.
@jridgewell This is not correct. The `doc` variable should be used here.
Why is this change required?
Why is this needed?
I think it would be more consistent to have the prefix `SERVER_TIME_F` as well.
This looks like a bug, but the `Cause` was never invoked before?
Do we need to call `// FakeIDByte`?
We should add `DeviceControllerModuleName` to these constants.
This is wrong. The namespace is already in the namespace so you don't need to change the namespace.
This should be a single line string.
This seems to be missing the `sdk` prefix.
it's not a big deal, but it's worth noting that this is the correct way to go about it.
This looks like a bug in the tests.
It's not clear to me why it is implemented. I don't know why it is not enough. It seems like it should be removed.
Do we want to add a `.to_sym` method here? Or is it that we don't need the `.to_sym` method?
I'm not sure if this is the right approach. The user should have this flag in the constructor and should not use it in the constructor.
I'm not sure about this one, is it possible to use a `Object` instead?
nit: I would have expected this to be a constant.
We could also check that the file is not a manifest, if there is no manifest, it will be always the same.
Style/UnneededInterpolation: Prefer single-quoted strings when you don't need string interpolation or special symbols.
is it possible to remove the `_and_continue` list here?
This is a bit odd - you could just call the grpcStreamingDescriptors() directly in the constructor, to avoid creating a new method.
This is the fix. This should not be done.
Should this be moved to DataWriter::remove_all_changes?
Please use `org.infinispan.commons.lang3.StringUtils#isNotEmpty` instead.
nitpick: "your resources are used"
I think we can use `service.name.type.triplea.resource.type` instead of `service.name.triplea.resource.type`
This is the wrong place for this TODO.
I'm not sure this is a good idea. The user can't use numpy.getReal64().
This may be a bit confusing, since the `shared_from_this` may be a bit more generic. How do you know about `this_l`?
I think it would be good to have a more general `try/except` block in `os.environ.py`.
Block has too many lines. [29/25]
This is not correct, but I think it is ok to return here.
We don't have to duplicate this line.
Why is this not an `instanceID`?
This is not the only change required.
I think this should be `localhost`?
@Override needs to be updated
These fields should be in the `ValidateProcessor` fields.
We have a common package that we use `insightfilestore` to avoid the need for the package.
I'm not a huge fan of this change, but it seems like we can just make the `ex` a `before_round` method return an int. I think it's better to be explicit and just use `ex` or something.
This should be done in the `qtbot.add_widget()` method.
Why are we changing this?
should this be `\` ?
This should be `maintainer=URL` (same for the other file).
This should be a `basename()` function.
This is not right. It will allow for a regular Java strings to be used for any other time. The regular Java strings should only be used in regular Java strings.
I would use the `since` and `CatalogCatalog`. It is not a good idea for users to know what is being used for.
this is a bit weird. why do we have to check if the path exists before calling `getattr(r.URL.Path, "/")`?
I think we can just remove the whole try block now, since it's no longer used.
Why not just use `ErrorListener` here instead of `ErrorListener`?
I think you should remove `JsonType` and use `JsonStringEnum`.
This can be a little confusing. It's the only place where `chainID` can be used. I'm thinking we can just set it to `nil` in `error.Trace()` and use that in `BlockchainID`. It's a bit confusing since the `chainID` is used in the default setting, but we can just call `chainID` directly.
We should be able to remove this one.
Shouldn't this be `'violation.get('resource_name', ''),`?
I'm curious, what is this supposed to do?
I think this would be better named "artist_msid" as well, and then you wouldn't have to copy the "data" here.
This is not the right way to fix this.
@jcotela is this line still needed?
This is a good change, but it's probably fine to leave it here.
why is this needed?
@larsoner can you confirm this is the correct way to handle the `error`?
Why not use `*` and `gcsblob.OpenBucket`?
I'm not sure if this is the right fix. The only reason it is to have the first timeout, but it is not the same as the second parameter.
(style) do not initialise globals to false
I would say "with_nms is ' \n is 'ean PAAHead does not support test-time augmentation"
I don't think we need to import plugins anymore, the whole file is already loaded in the invenio module
We need to update the settings to use the new constant here.
Please don't change this file. It should be imported after the imports.
This should be `EnableAdminAPI`
`WeakStorageType` should not be used here.
Maybe we can just make this `configMaps := duplicateManifests(configMaps, suffix)`
Why not `@throws`?
nit, can we keep this as `private` since we have the same `StartCommand` instance in `customStartCommand`.
This will be called in the `set_type` call, right? If there is no loss weight for the Softmax internal layer, it will be removed.
I think we should return `false` here.
This seems like a bug in the previous PR.
I don't understand why this is here. I'm not sure why it is here.
I'm not sure if it makes sense to test the first time.
I'm not sure if this is the correct way to go.
This is not needed.
I don't think this is the right place to do this. The first time you get the zeroes, you get the zeroes, but the first time you get the `Zupbupbupbupc` from the zeroes. It seems that this is the correct time to fix the first time you get.
I think you need a return in the return value.
Should we also add the other ones to the `EnableInfiniteTimeout` flag for this new task?
This is not correct. The `ti` type should only be changed if the `-1` is not set.
The `stages-enabled` is a `Service` option.
Line is too long. [81/80]
Looks like this is not a global file. Should we be using the `cabal` package?
I'm not sure this change is what I wanted to do in the original PR. I am not sure how to test it.
Please add docstring for this new parameter.
Should this also be `else`?
Why not just `tool` here?
This test no longer applies, right?
Can we remove this?
`v.Set` returns `null` if the type is not `nil`, so why do we need to check for `v.Set` here instead of just `return nil` ?
We need to keep this around as well as the other `retrievalAPI`s
I'm not sure if `a-` is the right thing here.
Nit: I would call this `LookUpIndexProcessor`.
This is the most important part of the code that is used for this case. The current code is only used for the user-defined event, and it is not the case for the user-defined event, and it should be the case for the user-defined event. So I think it is better to just do the check in `ParameterParameter.CreatePodchaosScheduler` instead, and only do a check in the event, and then do a check that the event is not the case.
why remove this?
This is the only place where we call this. I don't think we should do this for the `init_lock_arrays` function.
The `if` here looks weird. Can you please add a `if`?
Why is this not `-10`?
Not related but why are these config options hidden?
This is the fix for #11993.
why is wlr_gles2_get_texture() removed here?
Is this a change in behavior?
This should be `_clear_types` not `_clear_types` (not `_clear_types`)
You don't need to include trailing whitespaces.
The change in this commit is not related to the fix.
I think this is the wrong check for `UNUSED_PARAM` since it will always return -1 when `adapter != NULL`
This is not needed.
nit: `address != null ? createAccount(address) : account`
This should stay
This is the fix, but the `continue` variable was not doing anything useful in the code.
This is not the only line changed in the old code.
Unnecessary spacing detected.
This is the same as `Flags: append(Flags(), []cli.Flag)`, so this should be `Flags: append(Flags, []cli.Flag{`
I think you can do @proposal.currently_awaiting_approvers.any? { @proposal.currently_awaiting_approvers.include? @user
These two are not needed anymore
So this is a bug fix?
This import should go after the group below.
nit: `import typing as List`
You can revert this change. We can revert the change to the original PR.
why did you change this?
I think this should be a separate PR.
I'm curious why this class was removed.
This should be removed
Should this stay in `AbstractRemainTimeUpdateEvent` ?
I think it would be cleaner to add a `id` field to the index and avoid duplicating field in the controller.
This is a no-op, because the index is `""` and the value in the `list` function can be removed.
I'm not sure if this is the right place for this. I don't think this belongs in `self.updated_at`
This will throw a `Join` if `appExe` is not `null`
Is it possible to use encodeServiceName in a finally block ?
It's not obvious to me that we should only do this if `brain import brain_dataclasses` is `True`?
This should be done in the `if (!_corruptedRequest)` block.
The name `backend` is confusing because it was a list of `backend` (or anything that's a list of values). Maybe `backend.get('resourceGroup')` or `backend.get('resourceGroup'))` or something like that?
Why do we need to abstract these? I don't see any usage of `AbstractNode` in this PR.
why not countable plan here?
I think we should be using the `is_` check here, since it is the same as the `send_connection` function.
I think it's better to keep the original name, but I don't see a reason for this change.
This class is not used, it is already included in this class
I would suggest to use a custom enum class here, instead of the class definition.
This seems like a good change. I think it's better to have a `cls` attribute that takes a `Exception` as a `Exception` to avoid a `Exception`.
I don't think you need to import `useInView` here.
I'm not sure we want to keep this, but I think it would make more sense to have the default here, as we do for the `BlockHeight` field.
This should be a `self->logIdToSend_`.
Why is the `instanceof` needed here?
Can we just call this backup?
Is this used anywhere?
I think we need to close the `Consistently` here, as the `Close` will return the result of the loop.
This is the only usage of DecorateWebSpan in this PR, right? Can we make this private and just have a private constructor? I think we should be able to remove it from the other classes and not have a default implementation for this.
I'm not sure why we have this call here?
nit: `when /ec2/`
I think we should be using `LOG.info()` here.
We can't use `self.observation.proposal` because we can't use it directly, so it's a bit confusing.
Missing a tab here
the error is not correct. It should match the service name received as `yarpcerrors.cluster_parts`
I would prefer to keep the "protocol" prefix here as well.
Why is this being made public instead of having a separate method for this?
This is a bit odd - the `_memoryLimit` is `false`.
Why do you need the change? The `v1.65.0.0` change is not needed.
Why not use `ctxUser.DisplayName()`?
I think this can just be removed.
Should this be `if !h jsonHandler2 && !ulongHandler2)`?
Do we have any tests that can pass?
nit: should we have this on `options.compareStartDate`, too?
I'm not sure about the `Clear` call. It's a good idea to call the function here.
I think we can move the handler to the logger as we are not using it outside the handler.
Remove the print
Can you please explain why this change is needed?
I think we should be using `else` here
I'm pretty sure we're going to have to update the test suite here. I'm assuming the change is ok, but I don't see a benefit of having a hardcoded name.
Shouldn't we use `article.shape#show` instead?
The `TransportUri` should also be the default, right?
I don't think we need this.
I don't think you need the `.to_stdout` here
@mmaxim this was the only change needed in favor of `SessionStats`
I'm not sure this is the right fix. It's a good thing to be adding it to the viewController, but I don't think it's worth it to make the change here.
This is a little confusing to me, as we are not doing anything useful now. Maybe we should just have `linked(exp.Shutdown(...)` here.
This is an API break. It's an API break and should be changed in a follow-up PR.
Should we also return here?
This was a bug, we can remove it.
I'm not sure about this. If we want to expose the URL to the app, we should also expose the URL from the config.
I think you should import these two import lines
This doesn't check for any color type.
I think this is not true. The bytes in this case should be removed. The bytes in this case will be true for the given time, so the bytes in this case should be removed.
This is the only place where the prefix is actually used, so I would just call it `_shared` or something like that.
nit: I'd prefer to use `conf/server/server.conf` for consistency with other places.
You should also check if the length is not null, as you're not using it in the if statement
This will need to be added to the `mne-config` folder.
I'm not sure this is the correct place for metrics.HistoryArchiverScope. I would expect the same value to be a `null`?
I think this is a bit of overkill.
You can remove this `template` now that you have the "progress" element in the `esc_remaining` already. It's used for both `template` and `progress` in `esc_remaining`.
Can you use a more specific name for this context.Background?
Why is this one changing?
I'm not sure if we should make sure that the `quic` property is present in the test suite.
why change the test?
This is the wrong thing to do. The `expand_path` is not a file, so it can be a file that can be removed.
I think this should be `(this.keyFilePath = Optional.of(keyFilePath))`
I'm not sure if it's worth adding a new `setAll(table.schema(), "table.properties());` call here.
Is there a way to avoid the file from MIT license?
This is a change of behavior. It is not necessary to have a `byte[]` attribute.
@jsoriano Is this what we want? I'm not sure if it is worth it.
Why did you remove this?
I think the indentation is wrong here.
Is this the same concept that we need?
can you add `<%= t '.header %>` here? `<%= raw textilize(section_teacher.teacher, 92, tag_teachers)`
This is the only change that will cause the `prepareDismax()` to be executed, so it should not be in the `getSearchHandler` method.
This is the only change that is needed for SputnikTest.
Why do you need to create these configs here? The cache key for the cache key is already in `settings.get_app_settings()`, so it should be in `settings.set_app_settings()`
What's the purpose of this change?
@kennknowles do you know if this is the best place for this?
Seems like a bug in this test.
This is not correct. It will fail if the build fails.
Does this need to be a separate `Run!"`?
This should be moved to the next line, not after `is_allocated_mem`.
I don't understand what this means. Why don't we just return here and not raise a message?
add a default of 0 to 1 of the session.
Why is this needed?
Why do we need this file?
Why is this needed? The reason this is because it's already being done for the other CTA, and the CTA are not used in this file.
This is a little hard to read - the first `filter` call is not the same as `slot.getSession() != null` on line 6. I think the first `&&` call will be removed.
I think this should be `switch.default`
Why not just make `proposal_notification_email` an alias for it and use the `keys_for_approver_removed`?
Why not use a `@var` here?
is this change intended?
I don't think you need to put this in the `internal` package.
Why is this a string and not a string like in the `@return`?
This is a bit of an unrelated change, but I think it would be better to have this in `__init__` and instead have the `@private` as a private method in `remove_deprecation` method.
Can we move this to the `/lib/constants.js` file and remove the file from the path?
This should be moved to the `if not_found` block
This is not the right place for this, but it is a bit of a hack. I'd like to see an issue with the snapshot name. I'd suggest to use a different name for this.
Why not using the full full name?
This test is testing the `trace` instance of the `message` parameter, not the `message` field.
This should be `type(as_index)` instead of `type(as_index)`.
Why not just use the `count` function in this class?
Is this needed?
I'm wondering if we should use a `Map` here instead of `trim`?
This will break some of the errors in a few few places, if that is the case, then we should add a TODO to remove it in a follow-up.
Why is this needed? I would expect it to be `import/pip/_off`
Use nested module/class definitions instead of compact style.
Can you add a `ClusterInfo` field to the `KinesisServerServer` struct?
This is a good place for this to be a different name. I don't think we need the parameter here.
Why do we need this if it is already checked?
This is the main change that will cause problems.
I think it's better if you explicitly test `building` the same way it was before, but it's still in the same file
Is `s.dao.Get` called twice in this PR or is there a need for it?
This is a bit of a mistake, is there any particular reason why this is not a separate commit?
can we use the `Blue` class here instead of the descriptor class?
This doesn't look like it's going to work. `onFocus` will return `true` if `false` is true.
This should not be necessary if the `bhTarget` is not a `TypeNoEncap`.
I'm not sure if this is the best way to do this is. The `if` statement above should be removed from the `if` statement.
I think it's not a good idea to add this property to the base class. We could also just have the `isJavaVersion` property return `true` by default.
The return value of the result is always a pointer, not a pointer. This value should be zero, not a pointer, right?
This should be in alphabetical order, not in the list.
This import should be removed.
If the error is not supported by folderBranchOps, then it will be the same as the original folderBranchOps.
I don't see any value in this test class. Can you explain?
Why remove this?
This is not the right fix.
Was this broken before or did you intend to change it back?
Why is this necessary?
Usually we have a single space between "line" and " line".
"... error" sounds weird. I'm not sure it should be.
Can we use `typeof window === "object"` here instead?
The name of this function is `Unit` or something.
nit: this is not needed. You can remove this.
how is this related to the previous commit?
You can do `var pType = typeof _this.getValue(path) || (path === '_id' || (!_this.getValue(path))`
I think you should be able to just use the `tabIndex` variable here.
this should be `body[:sty] = transport.ssh'` instead of `body[:sty]`
`$autoEndOnErrors` is not used in this method and can be removed.
@deads2k do we need this?
This is a breaking change. It's not a huge deal, but a bug in the next PR.
Shouldn't we use `IpcEnv()->getAllConnections()->waitOnAll(0)`?
Is there a reason why we wouldn't have to do `hashmap`?
This is a bug fix, right?
This seems to be a change in behavior, right?
Well, I'm not convinced this is the right way to check this, but I'm not sure what the right thing to do is when the collection is not a collection of a collection.
@jvillalobos to deflake this file should not be used anymore.
This should be `context`.
This should probably use `@plan.administerable_by?` instead.
This is a breaking change, right?
nit: can we rename this to `line 55`?
I think this should be `undefined`.
Do we have any mechanism to set this to "LO"?
I think you need to remove this line.
This is probably OK for now, but we should probably check for `page_command` here, and check for `options[:page_ranges]` for both `**options` and `options[:page_ranges` for the `=` case.
I think this is a bug, it should be fixed in a follow up.
What does this mean for `cfg.pretty_text`?
I think this is the only place where we use this. Can we keep it as it is and use the same variable? It is used in the `VoucherInterval` function.
Shouldn't this be a `span.IsResource`?
I think this needs to be moved into the `else` clause, since it is now used by `GetRollupContext`
I'm not sure if we should do this. What is the difference in this class?
Shouldn't this be `nameof(isset($newConfig['Site']['generator'], 'text_text_type');`?
I think we should use `getClusterStateReader().getCollection(collection)` instead of `getZkStateReader().getCollection(collection).getConfigName();` to avoid duplicating the code
Is there any way we can handle the nullability of the snapshot that is not null?
This class isn't used. You can remove it.
This should probably be `inspect` instead of `count`, since we don't want to have any other message in the future.
This is the only change that fixes the issue.
Shouldn't we check if the previous data is in a previous block?
I think it would be better to use `world_comm_ptr` here, since it's a local variable.
Why does this need to be User.last, otherwise it may be a non-useruser, and not a `user`?
Remove empty line
`UnusedVariable` is a valid value for `Unused` in the `Process` method, so it's not a big deal.
Can we use `!== null` instead of false here?
This should probably be `!= null;`
@mjkkirschner Is this an accidental change?
Is there any reason for this change?
I would use a `try catch`
I think we need a better way to do this. It's not clear what the error is and how it's done in the changelog.
This is the only place where `setOsConfig()` is called.
I don't think this is the right way to do this. The problem is that we have the block in `10e`, which is not the case.
I think you can just do `return None`
This is a breaking change. I think it is not enough to add `@Nullable` to `OperationGenerator` as it is.
Use `Config` instead, since you're using a `bool` to avoid the double negative conditions.
`apply` is not necessary. `process` should already be passed as a param. `apply_process` will do the right thing.
Do we need to make sure this doesn't break anything?
I'd say this is a bit confusing. How about something like "The list of list of list is supposed to be used for unique values to least unique".
We should probably move this to the `UserWebEngineProfile` module
I don't think this is the right fix.
do we need these in alphabetical order?
This is a bit of a hack, I'd rather see a check for the manifest here
@joelgrus why we have a default here? I would think we should set this to `true` in the `config` model.
You can just do `ConsoleForegroundColor = ConsoleColor.White;` instead of using `ConsoleColor.White;`
This is a bit weird, can't it just be a `client.ecs`?
can we use `All` instead of `All`?
This file should not be removed.
why is this removed?
What is this change doing?
I don't see any usages of this property.
Why do you need this?
I think we need to update this to use `requirements.txt`, as we already have a dependency on `requirements.txt`
I don't understand what is the difference between `getGrantor()` and `getGrantor()`?
I think we should use `Map` instead of `Map<ElectionContext>` to avoid the `synchronized`
Maybe we should add a default value for this field?
this is a bug fix. It's not a problem, but it's a problem, so it's not a problem
I think this should be done in the `api-api-v2-api` module instead, since the API already has a `--domain-filter=s` flag.
This is not necessary, the `--etc-hosts` flag should be added to `tests/unit/config` package.
I think we can just pass in `Tracer.Instance` here and pass the filename directly.
This is not correct. You are using the actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual actual XX. The actual actual actual XX in the first place is to avoid the actual actual actual actual actual XX.
Here the block is a `auto existing` but the block is a `auto` (the block argument).
We can remove `DeleteFiles` entirely.
What's the rational behind this change?
I don't think this will work. This is an existing bug. You'll need to update the default value to 0. This will make the default value `true`.
We should also update `Platformimap` to `resource.UNDERimap`.
why 10?
Is this used?
I'm not sure this is correct. I'm not sure if it is worth it.
I don't think this is needed
This package name is misleading, it's only used in the package.
I'm not sure if we should change stats was here, or if it should be "not stats"?
Can this just be removed?
I think this is not needed. `Path.Empty` should be enough.
I don't like the idea of this, but I'm pretty sure it's a good idea to use `/admin/v1.0` in the error message.
I think we should be consistent with the naming and name.
Do we want to keep track of the `-convert-array-to-key`?
Just to confirm, is there a reason we are using `.rb` in this file?
should we add a null check on `rpcStreamingType grpcStreamingType` to ensure we don't have a null check on `rpcStreamingType grpcConfig`?
This is not the same as the one below. The same is used for `FPGA_INVALID_PARAM`.
I would say that this is a `default orgs` in the `Function` section.
Why are you returning an empty list?
I think it would be better to use the same name as the user provided `--Avrodes`.
@jridgewell I think this test should be `sql("show tables")`
Why do you need to cast to `c ==Present`?
you should also set `routes.ProviderAKS && c.RouteSource == "WorkloadIPs"`
Please rename to `appFlagDescription`
This should be reverted.
Why is this changing?
Line is too long. [92/80]
This is a breaking change. It's not related to this PR, but we can remove it.
I don't think this is the right place to put this, but I don't see a need to create it.
I'm not sure we need the `.ls` here, since we only need to check for it in the past?
I think we should probably add a `.to_h` check to make sure the hash doesn't match and if they are not present.
I would use regex-based function
This should be a warning.
I think this should be `states.get()` instead of `states.get()`
I'm not sure we need to make changes here - the tests are failing because the tests are failing because the `t.SplitN` returns `nil` for `nil` and `stop` returns `nil`.
why the rename?
I'm assuming this is the bugfix?
Why is this type NodeMetadata?
This is the only change that affects TF TF. I don't think this change should be here.
It looks like this was added to the `json` list?
This is not a key. It is not used in this case, but it should be removed.
why do we need this function?
`this` is not needed anymore. `if (err.code)` should not be set.
This should be a `String()` function, not a string.
This was a bad idea to log the full error.
Layout/MultilineMethodCallIndentation: Align .to with .test_example on line 29.
I don't think we need the `ClusterIdentity` struct anymore.
This should be a single line string.
Should we setAssignedProtoFile to null here?
This is a bit confusing. What is the `SERIES_DEFAULT_NAME` for?
I don't see why we need the read-only in the config.
This doesn't feel right. The rest LGTM.
@wachterjohannes Shouldn't this be a `User.find_by(email::user_name).nil?` instead?
This is a bugfix.
This should be added to the existing config for the new endpoint.
These changes are not related to the PR but it seems a bit of a hack.
I think you can just use `name, ok` here
Can you move this file to the top of the file?
This is a bit weird, why do we need a new method here?
I think you should add the `instance` parameter here.
I think you want to remove debug print
why is this being deleted?
This seems wrong. The `Duration` field is `nil` in the test suite. Is it intentional that this value is `nil`?
Do not use parentheses for method calls with no arguments.
This isn't a good idea. It might be better to have a name that makes it clear what this is.
Can we rename `migrationCleanupLimit` to something more clear?
Why do we use timestamp.TimeNowPtrUtcAddSeconds?
Why was this removed?
This doesn't seem right. The `options` variable is used in `pushUndefined`, but I think we need to keep it as is. We can remove the variable.
This is a bugfix for the logger?
I'm confused by this change. Why is this removed?
Why not `t := txgroup[0].Txn`?
I think this property should be renamed to `public X509Certificate2 ClientCertificate;`
Is this used anywhere?
I'm not seeing where we're using this?
Shouldn't we use the partitions from the test suite?
This doesn't seem right. It's the same as the one below, but it's just a copy of the test, so I don't think it's necessary to change.
I wouldn't make this check for the `world_repop` check. I think the check is redundant here.
is it really necessary to keep this?
This is not a big change, but the implementation of the `uninitialized` method is not a big deal, but I'm not sure if it is a good idea to add a `@Nullable` to the interface.
I'm not sure about this change. I think ` isUndefined` should be a constant somewhere.
Shouldn't we throw an exception if the transport is destroyed?
This is not needed anymore
This is not a boolean. It's not the name of the request.
Why are we changing this? The `CRLF` is used in `const` below, which is why I left it as part of `CRLF` below.
should this be a warning instead of a warning?
This is a bit weird - `Supported_TypeClass` is a list, not a list. It's not a list of `service`s but it's a list of `service`s.
Should we add a check for other checks as well?
@dvoytenko I think this is the right fix.
I think this could be a bit more specific, `MetricMetric` and `OpenTelemetrySdkEventSource.Log` and `OpenTelemetrySdkEventSource.Log`
This is a bit weird, why do we want to load the dir dir when the assembly is already loaded?
Is this related to this PR?
I think we should also check the value for the `directConnection` and `directconnection` here.
We should probably have some tests for this.
should we also add a `SetProcessorToState` method to `SetSetProcessorToState()` ?
I think it's better to change the type to `site site` in `site` rather than ` Core site`
This is the fix, right?
Can this check be done in the `TextureError` block?
Is it possible to keep this test in sync with the `-`?
You should be able to use the byte[] variable instead of the byte[]
I think this should be `add_type` instead of `IEnumerator` since we are no longer testing this.
This is a good change. The default implementation of `getQueryFactory` is a very generic name.
please add additional check in `mask_check_mask` above
This import should be `address`
I think this should be a warning rather than a warning, since it is a number of logs.
why is this needed?
I think you can use `R.string.listAll(SendProduct.class)` here.
please add brackets
I'm pretty sure this class is used for the header header in a few places, and it seems to be used in the UI. I'm not sure if this class is used outside the header header.
I don't think this is necessary since `Connection.prototype.syncIndexes()` is deprecated.
Why is it needed here?
Why do you change this to true?
This is a very good use case, but I'd prefer a different approach than the other approach.
This is a change in behavior. Please let me know if I'm missing something.
I would prefer to have this in an `if ($this->request->query->has('property')) {` block instead of in the `if ($this->request->query->get('newValue')`.
This is a bit of an odd thing. Maybe we should just use `pip install` to get the `pip install` and `pip.name`?
I think we should add an example here to ensure that this is not an error.
Is there a reason this was added? I'm wondering if we should just not have it in the constructor.
Can we just remove this? It's not used anywhere else.
I don't think this will work, because we don't have any other code using `SCSCM` and `SCM`
`file` is a string.
If you want to make it a warning, it will be a bit easier to understand if it's not a non-empty string.
Why not use the `spec.Tool`?
I think this should be `sampleHeight *types.BlockHeight`.
why is this needed?
Can you explain why this isn't the right place for this to be overridden?
I would suggest to add the type hint about the parameter name.
I'm not sure if we should use the same name for `getCoreContainer()`
this should be configurable, right?
This seems like an odd choice to do.
I don't think we should be using this method here. We can just use the real real real descriptor by default.
Is this debug log necessary?
Is the PHP 5.2 change necessary? Can you make it configurable?
Maybe `max_retrials` or `max_retrials`?
@jona-sassenhagen this is the main place where we have a product that should contain 255 characters or less are allowed.
This is a bug fix.
I'm not sure what to do here is, but I think we need to make sure we're not breaking anyone using `custom_options` as a personal key. In other words, `custom_options_type` will be `None` and `default` is `0` and `0` is `1`, which is the case.
I'm wondering if this is a good place for this. Maybe it's worth moving it to a constant.
Why was this function moved?
Why this one has `@proposal`?
Why are you using a mocking file? I'd rather you use the full path.
This is the only change I've seen in the past. I don't see a good reason to go back and fix it.
Why was this needed?
why did we change this?
This is not needed, the function is already called by the `MakeDiskBlockCacheIfNotExists`
This should be `Copyright 2017`, right?
I would make `boost` an `flow` parameter to `flow` and make it a `link_settings`.
I think we need to add this to the docstring, and say that if the roleText variable is not set, then we should add it to the docstring.
This should be `sh.export` instead.
Is this needed?
Can you add some validation to the `wait` field?
Shouldn't this be `continue`?
Why do we need this?
This is a bit of a hack, but I think we should be using `import_mpi4py()` instead of the `if`. Also, I'd rather have a `try-catch` check here, as it's not really a `bool`.
Nit: This is a bit weird, we have to block block on the next line (and the next line) to make the `Close()` call a `defer resp.Error` block on line 221.
Do we really want this to be `IConnectionLifetimeNotificationFeature`?
The original `addCallName` method is used in a few places, so it should be removed
I think this should be `NABoolean isFirstBatch = true;`
I'm not sure this is the correct way to do this. I think it would be better to have an `const char*` in the constructor and have it return the same value.
Is this change related to the PR?
This is the only change that affects the `common` and `common` calls.
Can you please add `private enum LibraryDetailsPanels`
I think you can remove the `const char *name` here, since it's not used anywhere else in the code.
This is the only one where you're using this function. The function should probably be renamed `VK_QUEUE_GRAPHICS_BIT`. I'm not sure if we should be using this here.
Can you add this to `i.Workflow.DefaultTimeout` instead of this?
`variant` is not supported in IE. Consider split into multiple lines.
Can you add an example here, say, `.map(split_path)`?
I don't think this is right, it's not a valid value.
I'm not sure if we should make minSequenceNumber the default, and make minSequenceNumber the default.
Shouldn't be able to remove the empty line here?
This is not necessary.
The data['config']['transport'] was never used.
This is a good candidate for the `SignKeyId` parameter.
I think this should be `IsEip12`, since we don't have any of the other setting.
This was moved to line 121.
This is a bit of a hack I think, but I think it's worth it to just make the string a constant.
Shouldn't this also be true for axe.commons.aria.toLowerCase() !== 'form'?
Why not do this check?
This is a bit confusing. What about a `ResponseSelector`? It would be nice if it could be `PodSelector` or `PodSelector` or `NSSelector` would be a `ResponseSelector`?
I would suggest to use `if sample-r.minRTT >= ackDelay {` instead of `if sample-r.minRTT >= ackDelay {`
I don't think this is a good idea. This is just a test case for this.
I think this needs to be a guard clause, since it's only used by admin admin
Please use `TEST_F(BadPonyTest, DefaultArgScope))` instead.
@mjkkirschner Is this an API change that breaks the API changes?
If you're using `assert.NoError` here, you can use `assert.Error` directly.
why is this changed? I think we can remove this
I'm a little confused by this change. Why is it necessary to change it?
I think it is better to use the `init` method here.
Is it possible to remove this?
Is it possible to have this in a DR_HOST_NOT_TARGET function?
Should be "github.com/sonm-io/core/proto"
I think we can also add `:changesets` to the `null: false` and `:changesets` to the end of the migration, since they are not in `add_` but they are not in the same table.
This could just be `return err`.
This is a breaking change.
I think this is not needed. We should be able to remove this in a followup PR.
I think we can get rid of this column entirely, can we just add it back to `team_id` and add it back in?
I think it would be better to add these constants in `Properties` and `Properties.hive.enabled` to the list of service names.
This is now dead code now.
I'm curious, why the policies are set in the first place?
`username` is a bit ambiguous, I think it's more efficient to have a method `name`, which does the username.
This is a bugfix
This should be `0.3`
This feels like it should be a `config` constant.
This is the only place where we use this property.
I'm not sure if this is the best place to remove this, but it seems like it's not related to this change.
I think this is the wrong place for these to go into a `if (handler_registered != NULL)`
Block has too many lines. [32/25]
I think you should remove this
Lint/RescueStandardError: Avoid rescuing without specifying an error class.
I think it would be better to have the `Provider` interface as well. It would be better to be able to use the new `Provider` interface.
This is not the right way to fix this issue. The `NAV_DRAWER_TAGS` check is already being removed.
do we need to include these include?
`class visibility_of_any_elements_located(object)` is not used anywhere.
this check should be done in `CastToClient()->SendSpellBarEnable`
I'm not sure this is the best way to do this. In particular, if the default is `True`, then the `invocation_id` should be `None`, right? If it is `None` then `task` will be `True`
why not just use `GetReceiverAddress`?
This is a very weird thing to do, I'm not sure what the best way to fix this is.
I don't think the `--rst` flag is necessary, because this flag is not a valid value.
Do we want to keep this? The old code looks good to me.
I think we can remove `Functional.recover_Functional` now that we're not doing anything about the whole file.
This is the main change. The PR says "this was a switch" but the switch was not being closed, so the switch was not being closed. The PR was only here to get the switch from the switch. This was the problem that I found. The PR was only doing that, so it was not able to get the switch from the switch, so the target was not closed.
I'm not sure if this is the right place to put here, since it's not a thread-safe lock.
Why did you remove the `getName` call here?
I would use the `.gpg` constant here.
Please rename these constants. They are not really used.
why is this import needed?
Do you need to set this to self? It's used only once in `*uid.1.0`
This should also have a `mode` field, right?
Please revert this file.
This is a bug fix. This is the fix.
I'm wondering if we should keep the original original one and make it a local var instead of a hardcoding name for this?
This method should be `aborate_frameworks`.
I think this is a bit confusing to people. What is the behavior behind this?
this is wrong, we should not add this to the `beforeNamespace`
This property is not in use.
I think you need to use R_AS_INT() here
I would suggest to move this to a separate line, to be a bit more readable with the code base.
I think this should be `-ce`
I would prefer a separate method name for this parameter, `Default_match_cost` or something.
I think it would be better to test the headers at the end instead of using the headers here.
`GET_ALL_SESSIONS` was unused, and should be removed.
Why do we need to wait until user is logged?
why is this being removed?
This is the fix.
Why not just use `blockSize` and use `20 *1024` in the `test` method?
In the current implementation, we have to pass `self.fetch` to the fetch, so we can pass it to the fetch.
should this be called `extrapense` or `field`?
I think this should be a constant in `foo/bar`
We should not use `whenPriority` here. If it's not, it should be set.
I think this is not needed.
We should not be able to use `v2` anymore. We should probably also move the `klogr` import below `pkg/runtime/schema`.
We could add a `options.close()` method that calls the `regionUnknown` and `regionUnknown`.
Why is this being changed?
This is a bit confusing. I would have expected a test for this.
Please add docs for these.
Maybe I missed something, but why don't we have a response_name?
I would use a set here, a set is done in the `LOCKTIME_THRESHOLD_BN` instance
Please avoid wildcard imports.
This is a little hard to read, but I think it's fine to leave this in.
This should be `log.finest`
@tgamblin @mjkkirschner Is this the right way to go away? I don't see any other way around the `USER_PRINCIPAL ` and `USER_PRINCIPAL ` `
You can use the URL object.
This should be `progressindicator`, right? `onInstall` shouldn't be there.
This is not used anywhere, is it?
This doesn't appear to be a bug fix.
I think it's not a good idea to include "that's the `ncessarily` in the doc.
I think it's safe to remove the attachment validation from the copy copy, since it is not used in the middle of the copy.
I think this is causing the MacOS build to fail. We'll need to move this up so that the `IList<T>` is in `Namespace`.
Is there a reason to have this be an object instead of an object? It seems like we should just have it in a `with` method, and then use that instead of a `&&` in the `&&` block.
I don't think this is needed
@chlowell do you have a better suggestion of why you removed the config here?
should we make it configurable?
I'm wondering whether the `async function` should be renamed to `await`, or even just `await`?
this is a bit weird, maybe it should be "return"?
why is this change necessary?
This function is not really used anywhere. I would remove it if it is only used once.
Is there a reason we need Close type?
Why is the `HeurekaBundle` class not available on all routes ?
This is not the only way we can do the same thing.
I think the `TODO: no)]` is needed for the `TODO: no` case.
I don't think you need to pass the client here?
Is it possible that the pipeline pipeline options are not in the same file as the last one?
why is this needed?
This is not right. The `opts` check is done twice, so the `opts` check should be moved inside `function`.
This can also use `show_user` directly.
This is a change in behavior. This should only be done in the `history_depth` list if the package was created.
The `Fatalf` should be removed here.
is the removal of `t.root.lookupPath(buffer[:1], cidr)` necessary here?
Use the new hash syntax ` "( "(table style="text-align: { ...}"`
Should this also be `enableLogging`?
I would prefer if these options are set in a separate function, like `llnl.util.w` instead of `llnl.util.w`.
I think this is a leftover.
I think this should be `.ReplaceAll(tc.input, "<empty>")`
The commit title should not start with commit message.
Can we have a TODO in here that the transactionIndex have been ignored?
I'm pretty sure this is a good place to put it in a `try/except` block, but I think it's better to be consistent with the rest of the code base
Does it make sense to move this check to the top of the file, so that we can remove this check?
Is there a reason why you moved this to the previous `if`?
Is there any way to make these error messages more readable?
We should not need to do this - it's a hostname, and it's not an admin specific config.
I'm not sure about this change. The `toString()` call will be removed when it's a string.
Just noticed the `update_user` method here was added to pass the `user` parameter to `update_user`? I don't think it makes sense to have it here.
This should be a `upload` instead of a `uploadSession`
I think this is too much for a lot of people who might want to make a copy of the test. I would suggest adding a new line before `model = dict(` to make it easier to read and make the code easier to read.
Do we want to also check for `dict.length`?
I think it's better to move this check to the `if` check, since it's only used in one place. It's better to move the check to `NetworkMode`.
This was a leftover from previous refactoring.
why do we need to specify the block value? is it not enough for the user to specify the block value?
I think this is not needed.
this is a little hard to read - can't we just change it to a constant?
You can remove this method entirely if you are already reading it from here.
I think this is the right fix.
I'm not sure if this is the best place to put it.
Why did you remove this?
The error is already closed.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is an API change, right?
Why are you setting this here? I wouldn't expect this to happen.
I'm not sure if this is a good idea, but I think we should be doing this in the first place.
suggest renaming it as `cpu_example_input` to match the name.
@mfojtik why do we need the `appName`?
This is not a valid APP_URL.
This is a good thing to do, but I'm not sure why the original code was wrong.
This should be `enable.equal`
Can we have this in a separate PR?
I don't think this will work. The `Health check failed on` is the same as the `repoPath`.
I don't think this is needed
This change is not necessary, since the v1_test is only used once in the tests.
We should add a space before `it` and `it`
I am not sure about this. The `trace` call is used in the previous version, which is why it's not.
I think we can just make the `else` in `else` and do the same thing here
I think it would be more consistent to put this into `Time-adjusted Derivative`
why this change?
I would use `typing.distributed`. It is not obvious from the purpose of this import.
Please don't remove changes from this file.
This is a bit weird, I think the above two lines are missing.
Please add `--fmt- extrem"` to this flag, as you're using it in the `-spec` command.
`self.re.search(f.server_conn.ip_address[0]` would be a better name.
I think this is a breaking change. It's not clear why we need to change the type of `DateTime` to `DateTime` in this PR.
I don't think we should do this. If the generating should be zero, the generating should be zero.
Nit: remove empty line
I think it is a bit confusing to have a `public` and `based` methods here. Maybe `skip_ triangle **/_packLevel`?
I think we need to do this now, because we don't have a `require` statement in the `RootMetadataOrBust` method.
Just to double check: The test fails without the `docroot` because `www/html` was removed from the test, and now `www/html/docroot` was removed from the test.
this function does not return null. It is not used anywhere
This is a good example of how the `NVDAObject` event is created.
This code block is duplicated in #ifdef OPENSSL_NO_DEFAULT_controller.rb
I'm wondering if we should have a better unit test for this.
I don't think we should be using this in this PR - it seems like the spec spec uses the new `reset_all` class, and the `example.reset_all` class, which is the one that is not found.
This should probably be a `errerr.Wrapf` check.
Why did you change this?
I think this should be `indexGen.next()` since it is not a function anymore.
should be the first line of the wite lock
We don't need to use the version here, it is already present in the `call` below.
Please revert this change.
I think we need to do this in `contains` as well.
This is a bit odd - we have to do a `UpdateUpdateUpdateUpdate` check for the `UpdateUpdateUpdate` and `UpdateUpdateUpdate` check for both `UpdateUpdateUpdate` and `UpdateUpdateUpdate` if they are set to `false`.
This should be `LOG.info`
I think we should remove the #if defined altogether.
I think this is not correct. It is a private method.
This is a bit of an overkill, but I think it would be good to have a method that returns a boolean, and then call `saveRecordsToSmartStore` if the method is called, then a call that calls `saveRecordsToSmartStore()` and a call that returns a boolean.
Why is this needed?
This is not the only place where we use the new `getParent` method. It is used in other places. I don't see any usage of this method in `getResultType`, which is a bit of a code smell.
It's not clear to me what the purpose does here. I'm not sure if we should be doing this.
I don't think we should do that. It seems like we don't need to do this. It seems like we should do the same for everyone.
Nit: can you add a space after the colon after the colon?
This could be an `Eventf` if the input is not `s.scope.Cluster`.
Why do we need to get the whole whole node node?
@cramforce I'm not sure if we need to remove this, or is this just to be removed in a followup?
this seems like a bug, if you remove it and you do `errors.Wrap(errors.tripleal.errors.tripleal.errors.tripleal.errors.tripleal.errors.Dispose(errors.tripleal.errors.tripleal.errors.Dispose(errors.tripleal.errors.Dispose(errors.tripleal).errors.Wrap(errors.tripleal.errors.errors.NewCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmdCmd
I don't think you need this anymore.
I think this is not a good example of what you want. You can just do `os.path.join(path.realpath(__file__))`
I don't think you need the `IF_ARM` call here.
I don't think this is necessary. The `@Memoized` below will do the same.
This will break existing users. This will not work for any existing users. We need to think about how we can work with the change.
I think we should use the new filename here
I would use `map(PrimeNumbers::factorization)` here.
This file should be removed as well
@mjkkirschner is this change correct?
Can you use the standard library imports, please?
Why is this private?
This should be `error` instead of `warning`
Line is too long. [81/80]
This import was unused.
Why is this removed from the PR?
why are these needed?
This seems to have been a bug in the previous code. Is there any reason to do it here?
Can we add an example here to the event handler?
I think this is a bug, if `HEAP_SNAPSHOT` is a valid url, then the data is not available.
This will break on Windows, right? We need to keep it in the middle of `p` (which is what it is for)
Is there a reason why this method is called `updateInvocationHandler`? It seems like it would be better to have the method be called for the `updateInvocationHandler` method.
This is a separate PR, but it's not a big deal either way. The jdk build script is not a part of a specific jdk build script and the next one is not the jdk build script.
I think we should be using a new API here instead of a new API.
Is this related?
Please use `ConcurrentHashMap` instead.
I'm not sure we need to do this. I think the original version of this is correct.
This error message should be: "let us run basic::defer + config_flags" if not found.
This was a breaking change for test purposes.
I'm not sure if this will work. The `p2p bitswap` flag is correct.
I think the `_x` is missing here
Why is this needed now?
Does this need a migration?
This is not correct. It should be core/functional/ WDYT?
Can we make this `@since 4.2`?
Can we just disable `inconsistent-return-statements` here?
`|` instead of `|` can be removed as well
What do you think about using `declare(strict_types=1);` here?
why is this needed?
I think this should be removed as it's not used anywhere.
I think it's a little strange to have a `set` here, but I don't know if there is a better place for it to be called.
I think we should just use `testDefault` here, as we do in other places.
This is the only change required?
I think this is the only place where we use this.
The `else if` is not necessary since we're using it in the `if` block below.
I think we can also use `java-chassis.java`.
nit: can you revert this change?
I think this should be `return nil`
why is this needed?
why change it?
nitpick: can you change the code to "If this field names, the field names are never used."
This is not right. It will be in the wrong direction.
why not use the `ZkNodeProps` here?
Can you also change `dt.rbind(4)` to `datatable.rbind(4)`?
This was the only change I found in the PR description.
I would use the `is` prefix here.
Why not use the ctor here and pass the ctor to the ctor?
This is the only change required.
why not `v1alpha1.SchemeGroupVersion.WithKind`?
@martinstead of having this function, I think it would be better to add a `sender_gcpbroker_gcp` flag to `sender_gcpbroker` so that it can be called once per namespace.
This change is not related to this issue, but it should be reverted.
I think this test should be moved to `self.assertEqual`.
This should be `get_INSTALLED_to_py`
I'm not a huge fan of this one. It looks like it would have been better to have a `_to_slowest_examples` method that takes the `example` as parameter and then you can use that to get rid of it.
Why the change here?
I'm not a big fan of this. Why do we need to set it to the graphicsPipelineCI object if it's a different state? Is it a different state of the graphicsPipelineCI object, or can it be set by the pipeline pipeline?
nit: ` CleanWebpackPlugin` is a bit ambiguous to me, and could be a bit more specific, maybe `join_assets.js`?
Can we keep this as `final` since it is now being used elsewhere? It seems to be a separate PR.
This is not correct. The test is already passing the `self.assertAlmostEqual()` to this test.
This is the only change that affects TF providers. I think we should keep this.
is this on purpose?
Maybe log the stack trace?
I think we should use `err = hex.DecodeString(args[2]))` to avoid this error.
@danrot @dunglas, this is the only change I would have expected.
This is a bit weird - why not just remove the `google.com` line?
This should be in the same PR as the other internal methods in this file.
I think this would be better as `[UnsupportedOSPlatform("browser")]` (or similar) for `[UnsupportedOSPlatform("browser")]`
Which case does the `float` have to be the same type as `self._worker_result_handler`?
Why not use `new ProxySettings(false)`?
I think this is a little bit over-complicated. If you're going to do this, it's better to move the if statement to the top of the class.
remove the empty line
This import should be grouped with the other standard library imports.
This should be removed.
I don't think we should be using this variable here.
I think this method should be renamed to `rbQValueTo`.
I think this is a good idea. I think we should be using `0` and `0-2` here.
I'm not sure this is the best approach. If you're going to make it a good idea to make it a little more robust, I'd rather not have this be a `*` in the `RuntimeError` class.
We need to keep the old field in the `ParentWeightNum` struct, otherwise we will have to update it later.
I think it is still useful to keep the `require.Len()` here.
I don't think you need this anymore. The new one is only to use the new one.
This doesn't need to do it now
I'm not sure this is a good idea. The `IHeadersCollection` is a `IHeadersCollection` and not a `IHeadersCollection` is an `IHeadersCollection`, so it is not really a `IHeadersCollection`. I'm pretty sure this will be an `IHeadersCollection` or something. I don't think this is a good thing to do.
remove this empty line
I'm not sure this is the best way to go.
`this.splashWindow.close()` is called inside of `this.splashWindow` which is called when `this.splashWindow.close()` is called. This should not be necessary if we are not doing an `if (this.splashWindow && !this.splashWindow.isDestroyed) {`.
is this going to cause issues?
is it worth logging against against the debug output?
I'm pretty sure this is the best option. It's probably worth adding a `location` field to the GitHub repository as well, since it's not being used anywhere else.
can you move this up so it's not part of the PR?
I'm not convinced about this change. I would expect that it's a `Collection` metric, and then we don't want it to have a `Collection` metric.
"TheThe service returns no messages" -> "TheThe shutdown API will take the shutdown"
I'm not sure if it is worth adding an additional check to make sure `matchClause->pathSize() > 1` is true.
I think this should be a function in the `route.Message`.
To be consistent with other methods we use `_amount` to avoid potential conflicts with other methods that do not have to be changed. This is a breaking change.
Please remove this line
I think this should be `concurrent` instead of `concurrent`
I don't think we need to do a similar check for other functions like `hipResourceTypeLinear == pResDesc->resType`, just in case we have a different `pTexDesc->store_map` method.
I think we can use the Faker module here
`use_args['_noop'] = true` is redundant here.
Remove empty line.
I don't know why this was here.
I don't understand this condition. Is it a bug fix?
This will work for all extensions that have `max_results_admin_api` defined in `max_admin_api_calls_per_day`. You can use `max_results_admin_api_calls_per_day` instead.
Shouldn't we also add an `ClusterMembershipPort` field to the `APIPort`?
What is the reason for this change?
Is it expected?
I think this can also be `db_schema_version2`
Use && instead of and.
I don't think this is the right place for this. The ` LoadConfiguration` method is called from `LoadConfigurationBuilder`.
Why is the `public` needed?
I would suggest to use a constant for this.
Should this be `_readInputContinuation`? I think it is more clear what the intention is, but I don't know what it does if it is actually.
Shouldn't it be in the original state?
can you add a `elif` statement here too?
I don't think this change is necessary, it is unrelated to your changes, and I don't think it matters much, but I think the changes here are necessary. I think it would be more consistent to move this closer to the top of the file.
Can we rename this class `harvard.iq` to `harvard.iq` ?
I think this could be a static field in `WhenAll`
Should this use the initializedClasses class instead?
Line is too long. [81/80]
I think this is not the right place for this method. It's used for the current method.
I'm not sure if this is a good idea. Can you explain why it is necessary to set the result of the result size?
I don't know if this is the best way to go.
This change is not needed.
Should we log the warning here?
Is there a reason we are not just doing this? I'm assuming it's not doing anything useful to have?
nit: remove this extra line
This doesn't work with `\n` as a `\r`, but `\r`, and `\r`, is a bit confusing with `\r`, and is a `\n` not a `\r`.
I would prefer to see the name of the method.
I'm not 100% sure this is the right way to check if it is a public method or not.
You don't need to check for the `mydir` variable here, it will be `None`.
Do we need to call `synchronized (thread)` here?
This should be a single `monitor` with a single `monitor` that is used in many places. Also, I think we should change the `unauthenticated` method to use `monitor` and change `monitor` to `monitor` instead.
This is a bit weird, we could have an `if record.frozen?` here, but that's the only one that's passing the `cache_column` as a record.
I think this should be int64
I think it would be nice if the URL could also be changed in the `soft` method to reflect the new version of the URL.
You can remove this line
I don't think this is correct. The `else` block can be removed.
can we call this `batchReadsSparkSessionConf` ?
this is not needed. RSpec is already in RSpec
nit: use `publishTargetDataverse.then()`, which is the default.
This change is not needed. It will be hard to parse.
why is this function needed?
I think it's a bit of a nit, but I would prefer to keep this line.
@kargakis @danawilheon is this a breaking change? I'm not sure if we should be using this.
This is not the right fix. The `a` key is a string, so I think it should be `[]` instead of `a`.
This can be `static const`
I'm not sure we want to keep this for now, but it's not too familiar with how we're doing this. I think we should just make it configurable by default and use the same value for the TThreadPoolServer.
This field should be only available to the new `MissingAdminRole` class and should be moved to `MissingAuthorization` class.
I don't think we need the options to expose the options. I think it is better to have a different options than to have it be named `public` and then have it be `public`. It is not used in the public API and I don't think it is a good idea to have it as a private method.
nit: remove the extra lines
We don't want this to be in an earlier PR, but I don't think it's necessary to make it work for the `accountID` command. We need to make sure we have `errors.use` as well as the `status` command.
I would prefer to use the keyos here instead of the keyos.
Let's not add this to the public API. We should probably make this a constant.
I think it would be better to have a `zip` field here, and then do `php.zip = [...]` on it.
no need to import SocksClientLayer
can we put this in a `try/finally` block, so that we can remove it from the same line?
I would prefer to keep this, `List<Long>` and `List<Long>> splitOffsets()`.
Can we add an entry to the doc block and use `dvc/json` instead?
(style) line over 80 characters
I think we should be able to remove this from the API. We should only import this once in `lib/plugins/config.js`
I think we can just make this str1, because we don't have to pass `block.type == 'argument_reporter_string_number'` in the `block.type` method.
I think we should remove the `if` here and remove the `port` variable.
I'd rather see the `*` here and below. I think we should have a `*` here and not `*`.
I'm not sure this is the right way to do this. I think it would be a good idea to move the defer to the end of the method.
UnitUnitName is a string. Should we use it here?
do we need to check for `keybase` here?
This is a breaking change, but it is not related to this PR, but it seems like it would be nice to have a test for this.
Should we make this `field`?
why not `#definedefinedefinedefinedefinedefinedefine`?
I think it's better to move this check to line 147 and then just use `example.com.utils.null` when there are no other connectionString
@bparees I think we should change `tls_start.context.client.sni` and `tls_start.context.client.sni` to a `None` and avoid the needing to change `tls_start.context.client.sni` here.
this is not a bug, but should not be changed
This line should not be here.
I think we should keep the `[i]` as the default, and add the `[i]` as the input.
The `if (topology)` clause should be changed to just `if (topology) { ... }`
I'm pretty sure this works, but I'd expect the tests to fail if the stub fails.
What is the purpose of this change?
Should this be `OnOptions`?
@dvoytenko: I think this is what we want to handle here?
@agramfort : this is the only change I'm not sure if this is the correct version.
This is the only place where the table is used.
Why are we changing this?
I don't think we need this, it's already in the `test-test-api` folder
I think this should probably use wp_json_encode() to avoid the confusion.
Why not just `Transport`?
does this mean that the `ComputerName $(hostname` will be created for the new command?
Should this be `logger.Printf("[%v] %v", testCase.Name, fmt.Sprintf("Error running cmd: %v", err))`? Or is this something that we're trying to figure out?
Do we want to add this to `////`?
I'm not sure this is a good name. It's not a big deal but it's a good idea to have this as a separate instance, and it's not really a good idea to go.
Why are we passing the result here? I don't see it being used anywhere
This is a change of behavior, right? This change is a bit of a bug.
I think it would be good for the latter to use the path as well, but I don't know what you mean.
This should probably return -1.
We need this to be done for each request, not just the `handshakeEvent` object.
See above about `std::unique_ptr` and `kind` here.
Should this be part of the pull-req?
Is this change intentional?
Why not just return `mAccount != null`?
I think it would be better to check for the manifest here instead of doing it in the manifest
Is there a reason we need the `Exclude` argument here, rather than the `long`? If it's not, we could use `long` as a default.
I think we should be consistent and use the Referer version here.
this is not related to your PR, but I am not a huge fan of this.
`list_form_binary` is a better name for this.
why not use `setParameter('text', keys).then(keys => keys.join(''))`
This should probably be `user.getvertical()` instead of `-vertical`
This file is no longer relevant.
This file is not needed anymore.
why `model.gpu_ids is not None`?
I think this should be done for `serialized.build()`. The reason I'm not familiar with it is that `serialized.info` is called when `serialized.build()` is called, but not when `serialized.build()` is called.
What is this for?
If you use the `defaultExistsPolicy.OverwriteIfNewer` you can use `defaultExistsPolicy.OverwriteIfNewer`.
This should be in `#ifdef OPENSSL_services`
I think this is the only place where we need the "\t field.
We should use `typing.IngressRules` here, since we have `typing` and `typing` fields in this struct.
This is a breaking change, but the method name is internal. It should be `static` or `public`.
style nit, "line" is not consistent with the rest of the code
I think we should use a `get` here.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
you can use `self <msg> float = x.float()` directly
I think this can be removed now, it is not used anymore
Why do we need to check err before returning?
I don't see where this used? I think it should be in the group below.
I think this should be `!=`
Can we use `logProductCount` in the context here?
The type is not made smaller by using a String string.
I'm not sure if we really need to add this here. It seems like it should be a `vol`, and the snapshot is a bit of a `snapshotrevertHelpText` flag. What do you think about just adding a `\` method to the `\` method, and using that flag to the `\` flag instead of the `\` to avoid the extra call?
Is this a change in behavior?
This is not the right place for this variable. You should be able to set it directly.
I think this is the wrong place to change. We should change this to be `time.Duration(waitTimeoutMillis)` and make it clear that `time.Millisecond` is only used once. We can remove the `time.Duration` function.
I think we should use `opts!==FORCE_RENDER || !==FORCE_RENDER` here.
I don't think this is needed.
you should add this to the docstring
Should not be needed.
The previous version is not the right one. The `(pkt, "type")` is not the right one, so it's not the right one.
I think the `Logger` should be `javax.apache.log4j.Logger`.
"application/x-stata" is a little confusing since it is a very small term to the user.
why did you change the import order?
@gianm this is the only change that affects the version.
This is not related to this change, but I think it should be `[NotNullWhen(true)]`.
This is not needed.
I think we should keep this and just set the types of the types.
We should probably add an option to `logger.GetTasks` so that we can get rid of this.
This is the only change that will break the pool_alloc_size() call.
Why not just remove this?
should this be `isLongrunningReturnValue` to be consistent with `isLongrunningOperation`?
Should this be a `Authorization64`, or should we just use the `Authorization`?
I think you can remove the `@at` here
this is a bug, we don't want the Base.rand() anymore
Is there any reason why this is `fillWidth`?
We can probably just move the plugins.getConfig to `api` instead of the plugins. It's better to move the plugins inside the `versionInfo` class and move the plugins inside `version.get()`.
I'm not a fan of adding the `.getConfig()` method here as it's used only once in a few places. Why not using the `.getConfig()` method directly?
@deads2k i'm not sure about this change. This is not correct, if this is a bug, I'd suggest adding a check to `lame` that the `max_payload` will not be a valid `Read`.
Should we make this configurable? I don't see it being used anywhere
Why do we have to pass attachStdin to the constructor?
Nit: could you move this to `V/v1alpha1/`?
This should probably use `_ancestorComponent = ancestorComponent`.
I think this is a good change.
I think we can remove this.
Why is this one removed?
You can use `runs_run?` instead of `first_runs_free`
@mfojtik @smarterclayton do we need to check that `ProposalPayloadTag` is nil?
This is the only place where we need to keep this.
We can remove the version number here and in the other version `support` package, it's not a big deal, but we should use a version number.
We should also check for `type != 0`, as we are now returning `type`.
I'm not sure if it's worth having one more context for this but it seems like this is going to be a separate PR?
We should probably move this to the other package.
This is a no-op, but no-op is no longer used
I think this should be `already`
Is this needed?
Indent the first parameter one step more than the previous line.
I think we should have this field in the `MetricsManager`, not the ` isInitialized`.
I don't think this is the correct place for this.
I don't think we should add this option here. We should add the `js/fileupload.js` file in the `addCss` folder.
Should the old repo dir be wrapped into a function?
You can remove the variable declaration entirely if you are already using `options.readPreference`.
I'm not sure if this should be `.BlockNumber / 2`
This is not the same as the `T` function. The same is for the `matchingEngineSuite` above.
Line is too long. [105/80]<br>Space inside { missing.<br>Space inside } missing.
How about using `return (rp->rr_sim_misses_deadline)`?
Is there a reason we are not returning 0 here?
I think we should log this message as well.
This will need a deprecation cycle for `config_ssl` as well, right?
I think we need to keep the `stopWalkComplete()` here as well.
I think this will be more readable as `key` will be the key of the root chunk.
I don't think we should set this to default to true, as the default is true. We can set this flag only if the default is true, and we don't want to set the default in the default.
This is a bugfix, but I'm curious why this is a "Feed"?
Why not just pass a `rootPath.path()` here?
I think we can remove this and use it directly instead of using it.
This is a bit odd - we should have `dir.Join` here as well.
This line is not necessary.
I think this should be a single line string. The latter should be the latter, right?
This is the main point of view.
Please use Integer instead of int.
This should be `!tx.Type == TxType.AccessList && !releaseSpec.IsEip2930Enabled`
This is a breaking change. We need to make sure that the `ServiceName` is never used.
I'm not sure if this is the right fix, if the config does not exist in the state machine, the `BPFEnabled` will be set to `true` if the user specifies `XDPEnabled` or `XDPAllowGeneric`
This doesn't look like it's related to the PR. Could you please remove it?
I would say "hardcoded" instead of "hardcoded" here
This is a bit confusing to me, as the `service` can be `null` if the default is `false`.
Please add a link to the issue here, to make sure that the `consider-using`-exit supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports supports
is this change necessary?
I think this is a bit confusing. Maybe use `command-history` or `command-tmpdir`? It would be more clear to have the test `objreg` as the name.
Make it pickle_protocol() and pickle.DEFAULT_PROTOCOL are the same
I think this should be moved to the other `testing.T` package, as this is not a random port
Import packages with wildcard is not recommended. Could you please check it? Thanks
I think we can remove this check.
If we add a `integral_columns` field to the `aggregates` table we should just say "aggregates changed to operate on a single columnm." (I think this will be a bit more robust to me)
I'm curious, why is this needed?
This should be a `RegisterContainerInstanceArn`.
I think you need to make this a constant.
Is this used?
You can remove `put` here
This looks unrelated to the feature of the PR. I think it would be better if we remove it from the PR. Thanks!
This line is not needed
I'm not sure if we should do this here...
Is this change related to `dvc repro`? I think it would be better to use `recursive.Mode` instead. (It's a bit more efficient to use a `dvc repro` in the `dvc repro`).
I'm not sure this is the right place for this - if you have a "torchI_irq" flag, you don't need to know about the "torchI_irq" flag.
This is the fix. I think it should be `if (q == null && fcontext.base.size())`
I don't think this import is used.
This should be moved to stderr, not stderr.
This should be in `now.No509Expired`, I think.
This should be changed to reflect the new import
I would prefer to keep this around, as it's a little confusing.
This is the fix, but I think the line below this is wrong
Does this need a check to ensure we are not actually checking the cluster?
Is there a reason we are not using `await` here?
This should be in a try catch, not a warning. It should be in the final result.
I don't think this is the right way to go. I don't think we need to change this. The `-` prefix is already in the docker-compose version of the docker-compose version.
@JeremyKuhne might be a good place to catch this in a future PR. This change is not related to your PR. I think it's worth noting that this is not the only change that will be breaking for the PR.
Why not use `Result{}{}` here instead of `Result{}`?
`score_thr` is a better name.
This is a bit of a mistake.
I think you can use `.replace(/\s+/g, '-').replace(/[^\w\-]+/g, '')` instead of `.replace(/s+/g`
This method is not used anywhere else.
I'm not sure this is the correct solution.
I don't see the value being removed in the previous line.
I don't think we should add the `SettingsLegacy` parameter at all if it's not used anymore.
Why do you need this?
This is the only change that affects this PR.
Please add trailing comma.
Should we also be passing `devnull` here?
This was a bug in the code that was not being removed.
Do we need to check whether the `overlayText` and `lines` is nil?
why do you have to change this?
I think this is not needed.
I don't think we can do this. It's a good idea to add a `@unittest` annotation to this method.
I don't think we should be using the `SPCName` here since we're not doing anything else here, just to be sure we don't want to use it in the future.
@matt-gardner Is there a better way to do this? I think we need a view here.
This change is unrelated.
Please use the global path from the directory.
There are a few other places that use this interface.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Should this be `response_l.put ("receivable", balance.second.convert_to<std::string>`?
We can just do `return nil`, otherwise we don't have to pass `None` here.
I think this should be done for a different PR.
this change should not be here.
Does this change the behavior of the package?
The ad_name should be the same as the above.
I think this can be removed, since it is used by other metricbeat.
This should be implemented in `JenkinsRule` instead of `JenkinsRule` right?
I don't think it makes sense to add the `Operation not supported` field to the API
We should add a note that this is not a header in response_headers.items() so that if we don't want to be aware of it.
Why was the #if being removed?
This is a bit odd, why is it OK to remove it?
Is this include needed?
I'm not sure about this change, it is not related to the change, but I think it's fine for now.
Please check the conduit node.get_local_thread_id() to be here and check the other errors.
Should this logic be moved to `getVarVarWithoutInitializer`?
I would prefer to see this as a separate commit
I think this should be `f.kara.kara.kara.kara.kara.kara.q`?
why not just `mins is None`?
I don't think we need the `key` variable here, since it's already inside the `if`.
Doesn't this mean that the previous implementation will be removed in the future?
@kingjr is this what you want?
I think you can remove this line
Does this need a check?
This change is not related to the fix, but it should be in a separate pull request.
Shouldn't this be `||`?
maybe include a `Indentation.OnError` as well?
I think you can delete the whole file.
what if block_hosts.length > 0 is false?
I don't think we need this. We can use the `HTTPScheme` property directly.
This should be `public`
Where is the LogManager used here?
I don't understand this. It is a test.
Is this method still called from other tables?
I think we should remove the `ErrorHandler` part from the `DashboardDetailsApp`.
I think this will break the API.
this is an anti-pattern, right? why do we need a new `executable` here?
This doesn't need to be a part of the list anymore.
I think you can use `aria-controls`
`continue` is not necessary, it is already in `pglob.gl_pathv[i]`, so this is not needed.
The default value of `true` is false, so this should be true.
`assertEquals()` should be called here?
nitpicking: I would have used `ALL_EXIST` instead of `==`
I think we should be able to use the `name` function in `getSameIP` and `getClass` here. We should use a more meaningful name for this to be configurable.
@deads2k this is the new API change, right?
This should be `@InputFiles`
Is there a way to do this without having to match the snapshot?
I think this should be `System.IO`
I think this is a good place to put this flag. I would just put it in the `handle` method. It's a bit more general and easier to understand.
What's the difference between nbb.capacity() and nbb.put().
Is this file related to the change, or did it just get removed?
What is the difference between `cmdhistory.py` and `editor.py`?
This should be removed.
This is not a part of the package.
This is not needed.
I think this is not the right place for the if. It is used in the else block.
This is the only change that affects TF TF, so it's not really worth doing anything.
This should be a docstring.
I think you can use `@todo` here
How about adding a `--public-binary` function to the `env` package?
I'm a bit sad that this should be a `-` rather than a `#`.
This is not right, if the node is in the core, the node is in the node.
I don't think we need to do that.
This should not be needed if the `PlaybackPreferences` is `null`
Is this necessary for this patch?
Why are we adding this? I think we don't want to have it in the interface.
remove empty line.
Why are we changing this?
Use the new Ruby 1.9 hash syntax.
@jcotela It is not needed here, you can just remove the `anomaly` line from the `ananomaly` module
@lilleyse you have to check if this is the right target, but I think you should check if `Pex_tree` is a `target` and not just `typeof target === 'string'` here.
@michaelkuhn Do you have any idea how this was supposed to be used?
can you move this up to line 262
Why are we doing this?
nit: can you change this line to `Throwable`? (and the same below.)
@deads2k i'm not sure if this is a good solution, but i think it's better to just have it in the main package, and let the user use it to generate a different package for the package.
This was a bug, it's not related to the PR
What if we change the behavior of `KINESIS_PROVIDER` to `kinesalite` in the future?
Why do we change the type of `dateFormat`?
Can you please add a backfilling rule to this?
Can you explain why we need to do this? It seems like the only time we call `dict_index`, and the `ignore_index` will be a bool.
is this change intended?
@smarterclayton do we want to remove this?
If we're going to be using this, we can probably just move it in `tests/constants/server/tests/test_server.go` and just use it in the `tests/constants/server/tests.go`
This file has no effect on Python 2.7, so it's not necessary to change this file.
Should we be calling `Console.ReadKey()` here?
why not createLogBuffer to 0? or createLogBuffer(2)
`float(value, int)` is enough, because the value is `float(value, int)`
this is not the best place for this. if you remove it
Why not use a `declare` statement instead of `declare(strict_types=1)`?
I think this should be `message-id` instead of `C0301`
why is this needed?
Is this necessary? `max_users` is an array of the `null` and it looks like we're passing a string as an argument to this argument.
Why is this not set in the test? Is this the place where we set the `infraID`?
I don't think we should be using the new API.
@matt-gardner Is this what you wanted? I'm not sure how this is used.
No `bokeh.util` in this file.
@michaelkuhn @smarterclayton do we need to override it here? I don't think it matters for the user to set it, but I guess it's fine for now.
nit: can we remove the `Objects`? I see that `openqa.selenium.remote.http.Objects` is used in a few places.
It would be nice if this was a bug.
The `lowercase` is a bit confusing. How about `doc driver.Document.copy`?
This should be the same as `NewFileForCommitLocation`.
What is this? Isn't it supposed to be the new behavior of the existing behavior?
I don't think this is a good idea. It should be made a separate PR.
Can you please create a new instance variable for this and use `List<T>` for the key?
Could you please add a `TODO` to remove this?
This will need to be `self._files.clear()` as well.
I think this should also be handled in `connect()`
I'm not sure why this is necessary, the `IDictionary` and `KeyValuePair` are not used in the `IDictionary`.
why do we have to log the docker?
This isn't a good place for a `SpecPriorityAlias` to be a `SpecScale`, so I wouldn't expect it to be a `Spec` object.
The `Debug.Assert` annotation is now unused.
Why is the test removed?
I don't know if it's safe to have this. I don't have a strong opinion, but I think we can do this.
I think this is a leftover from the previous pull request.
I think this needs to be `using MvvmCross.Platform.Ios.Presenters.ID;`
This is a very minor, but the function name is misleading.
Why is this' warnings necessary?
I think we can remove this method now that #1983 has been merged.
this should not be necessary, as it's not used in the `src/server/v1` package
@smarterclayton I think this was the only one I was talking about, so I just wanted to check my understanding.
Do we need this for tests?
Which check does this assert need to be?
Should this be `X-Content-Type-Options`?
I think you can delete this line now that you have the check for the connection before doing it.
why this test is needed?
I think we should keep this in `verify_mysteriumClient` as well.
this file was moved to the end of the file
@tgamblin Do you know what the "UTF-8" means for some reason?
I don't think this is needed.
This should not be needed. You are already setting the array in the `js` folder, so you can remove it.
i'm not sure what the best way to test this, can you explain?
I think you need to remove the `component.componentWillMount` parameter as well?
Can we use `KDICES_QUERY_path` here?
I think this is not the right place for this. I'm not sure what this is doing.
why change this?
I think this should be `CasP` instead of `CasP`
I'm not sure this is the right solution, we should be using a different solution in the middle of the 10 model. I would suggest using `CODE_EXP_MINUTES = 10` instead.
Nit, we should probably have a separate PR for this to work, but we should probably remove this line (and other files below)
I think this should be `can't unmarshal count` or `can't unmarshal count`
why do we need this?
does this work for all versions of `apt-key.gpg`?
whats with this?
Here, it was missing
This is a good idea. The type of `array` should be the type of the `resourceResourceLinks`, not the type of `is_array`.
I think we should add a new `local_certs` field to the `AutoHTTPS` and `AutoHTTPS`, as it will be used for the other `ClientClient` and `ClientClient`, as this field will be used by other `ClientClient`.
Is there a reason to make this `RTPSDomain` and `RTPSParticipantAttributes`? I'm not sure what the best way to do is to make this `RTPSDomain`.
I'm not sure if this is a good idea, since it's a long time to get the size of the scan, and it's not the size of the count.
I'm wondering if it wouldn't be better to have this be `internal` rather than `internal`?
This is the main change.
I'm not sure why this is necessary. The current URL is already present on a non-proposal page.
why did you remove the `?` and not use `?` here?
I think we should keep this here since the code is still in `bin/env` now.
This log message is not accurate. We are going to log the logging.
I'm not sure if it is a good idea to add this message here, but I'm not sure what the problem is. I think this should be done in a follow-up PR.
I don't think we need to define this in `setattr`.
Why is this needed?
can you move this closer to the top, so that we can use the path path here?
This is a bit of a hack, I think it's worth it to make a helper function for this, since it's a separate method.
I think we can remove `rewriteNot` from `buildCallback` and `rewriteNot` methods.
This file should be removed.
I think this is not the right place for this, but I think it would be better if we made it a bit more specific and more explicit, like `settings.get('flush_endpoint_enabled'))` or something. I think it would make more sense to move this logic to `config.add_api_capability_enabled` and then just do it in the `config.add_api_capability`
Please add a license header like `1000: "Number of currently running tasks"`.
I don't think this will work. The `clazz` version is still used in this function. The `clazz` version is only used in `main.py` file. I think it's better to remove this line. The `-pantsd` file should be used in `main.py` file, which is why I changed it to `llnl.util.__init__.py` file.
Can we add a TODO here that this is really going to be used in the future?
This is a bit hard to read. I think it's better to move it to the `done` interface.
I don't think we should be using this package, but we can't change it. It's probably not a big deal, but it is not a problem.
I'm not sure if this was the best way to fix this...
Should this message be updated? `host.cygwin_is_cygwin_installed?`
nit: can you add `@param`?
This should be removed.
I'm not sure about this - I think the name "Command" might be clearer.
This is the only change that affects the error.
Should we make this `private`?
I think we need to remove the `@param` here.
This is not the right place for this. `label` is not a `data`. The `type` label should always be `None`, right? So the `type` value is not a `data` field. The `data` field is a `data` field.
Maybe we should log the status here?
This is not needed.
This should be added to the description of the DTO, not the DTO.
Why is this class needed?
Do we need to test the output of the Realm.User as well?
This constant should be in the same class as in `loadbalance.stats`. It should be in the same module.
"This administrator does not belong to any rules." "This administrator does not belong to any rules." "This administrator does not belong to any rules" sounds like it should be "This administrator does not belong to any rules."
This should be a different class than the `EPISODES_PER_PAGE`
This line can be merged with the one below.
This should be removed as well
The change is not needed.
I think this was accidentally removed
Is this a change in behavior, or should it be a different remote remote? I would expect this is a different remote.
I don't think this should be part of the if block, it is not necessary
This is a change from `Invalid flipping direction direction "{direction` to `Invalid flipping direction "{direction`
This change isn't really needed.
This is a bit weird, we have to do a `Email` check on line 786 above.
This is a bit weird, I think it should be possible to have a `panic` check in the `app/lib` file.
Should this default to false?
`len(info.RPCAddress) == 0` is more accurate, we should check if it's empty.
I don't know why we need this, but I'm guessing it's a good idea to have this class be a `oauth2` package?
why not using the default value of `false`?
This should be done in the same PR as the patch has the cache being created.
I don't think this is correct, but `gcc` can be `null` if there are no tests.
Can you move this to the top of this file?
is this going to be used somewhere?
I think it's safe to just remove this line
I'm assuming this was for debugging...
I'm not sure why we have a default here.
nit: I don't think this is needed, we have a single `XmlConfigureEquals` method in `XmlConfigureEquals`.
This looks like a duplicate line.
I would rather use a `Collection<X>` here. I would rather have a `Collection<X>` and use `X` instead.
Why not return an error?
I think we should use a constant for the result.
I think we should probably check for the case that `slug_matches?` is nil here.
This is not a fix, right?
It's a little confusing that this is the `caddytls.InternalIssuer`. The `caddytls.CustomCertSelectionPolicy` is not a caddytls, but `caddytls.InternalIssuer` is not a `WriteIssuer`.
This will cause a NPE if the user does not specify a `options` attribute.
This is not the right place to put this.
why was this removed?
Remove this line.
nit: rename to `caseSensitiveQuery`.
This is a little strange. I would expect this function to return a `err` instead of an error.
Is it worth having a blank line after this change?
Why is this needed?
Nit: `using resource updates` and `using resource updates`?
Why use `path.Sprintf`?
I don't know how to get it, but it seems like we're missing an `ariaCurrent` parameter here. I think it's ok to just do `ariaCurrent = attrs.get("IAccessible2::attribute_current", "None", "IAccessible2::attribute_current", "None", ...)`.
This is not a great change, because the previous version of this PR was a bit confusing. The new code is `delete` and not `given` so it doesn't matter for the old error messages. The new error message is a bit confusing.
I think you can just delete the span context here.
`getFlowDefinitionId()` can return null, so no need to change it in the message.
Please make sure that `DateTimeInterface` is always a string.
Is there a reason for removing this?
It's not clear to me what the purpose of `alpha-reverse` is for here. It's a bit confusing to have `target` a `target` that is a string, so it should be `'...`
I think this should be `arc.target > Integer.MAX_VALUE` (or something similar)
Maybe it's worth to check if the service is empty and if it doesn't exist, we can just do `ENV.fetch("DISCOURSE_SSO_SECRET",),`
why we need this?
This should be `cluster-api/api/v1alpha3`.
I don't think we need this here. We should be able to do this in `updateIndexQueueByItem()` and `updateIndexQueueUid()`.
This is a bit confusing, because we don't have to store the `str` type in the type here.
Use `.cuda` here and in `lib/zfs-python.h`
`protected` instead of `protected`.
`dumpConfig().Sdump(keys)` is a bit ambiguous. I think it would be more readable if we used `dumpConfig()` instead of `dumpConfig().Sdump(...)`
This is not a static field, so it is a static member.
Why not just `if sqlalchemy is not None`?
The result of this function is a little confusing. What do you think about adding a bool arg to the DataflowRunner that uses the digits?
Just curious why you moved the global scope to print_plugin_list()?
I don't see where this change is needed.
please revert back to the new line
What do you think about renaming this string "single_user" or something like that to make the string less clearer?
Hmm... this is a change in behavior... I think this is not a big deal, but it's a little unfortunate to have this return a `defer func()` function, so it's a little confusing to read.
This is the wrong file
We need to move this logic into `LoadOrStore`.
This should be in `db` and `source` as well. (And in `username`, it's not a `db`.)
Should this be a part of the UI UI? This is a bit confusing.
I'm wondering why we need this now?
Is this used anywhere?
Shouldn't we also check for v1?
I think this is not correct. We should probably just use `attr_value.getattr('attr_value['string']==None)`.
Should this be named `_now_focused`, since it is only used in the `tabbed_browser`?
why is it necessary to store the `invitation` class in the controller?
This file should be removed.
Do we need to make this configurable?
`float` is redundant here
I don't think we need this change, since it's only used in one place.
Why do we need to add an `AccessNode`?
This should be a private constructor
Can we remove this change?
Is there a reason to remove the throw() call here?
I'm not a big fan of this, I don't see a reason for this change.
This is a str() function. You don't need to use it in this PR.
I think this should be `final`
I'm not sure if this is the right place to put this. I think it's worth having a check in the function for `chomp` instead, and then we should be using `result.stdout`.
I don't see any references for this change in this PR.
Please add `from mmdet.utils import Registry`
The same problem here, if `auto` is not initialized, the `start_` should be initialized before calling `get_scala_components` and not `start_start_`.
I think this should be done in the `nextState` method.
This is not the right fix, but I don't see any other code using it.
This should be `API: this version didn't compile with`
Another `.to have` on the test.
why do we need to add these two lines?
I think you can remove this and just use the `HTTP/1.0`, it is the same as `HTTP/1.1`.
I'm not sure if we should do this. The `!= false` check seems to be redundant.
This file was removed because it was removed in #5769.
This is not needed.
We need to configure the own success/pending/failure colors in the controller.
I think we should just return siteInfo[ propName ] instead.
The `-Wfloat-equal` suffix is not necessary.
"If you're using MSI for authentication, this will be loaded lazily the first time you call SignedURL." "If you're using MSI for authentication, this will be loaded lazily the first time you call SignedURL." "If you're using MSI for authentication, this will be loaded by the first time you call SignedURL."
This is not correct. The `dp_bits` variable is always defined at the beginning of the function, so the `if (bitsSet)` block can be simplified to `if (bitsSet == nullptr)` and then `if (bitsSet == nullptr)`
What is this method doing? Why not just do it in the `remove_target` method instead?
Do we need to make the cache more specific?
@tgamblin Do we have any idea how to do this?
This should be `[UnsupportedOSPlatform("browser")]`
This should be `go.uber.org/yarpc/peer/peerlist/v2`
This should be log statement.
Should this be `System.Interop.soso`?
This is the fix for 10701, but I think 10601 is the only time I see that I'm getting the test locally.
This should be `const int`
Why this change? It looks like the `getNullPath(serviceProvider)` is never called.
I think it's more clear that this is used for the TLF root, but the current user is visible to the TLF root.
Please remove the extra blank line
We can probably remove `fully_formatted_lines` altogether since it's only used in one place.
This is a bit weird. Why is this needed? I would expect the class to return the root root, and the name is the root of the snippet resources.
I think this should be `PolicyNamespace` and `PolicyNamespacePolicyName`
This import should be moved to `pkg/api/errors`
`telemetryInitialized` is a bit ambiguous, can we just use a telemetryInitialized instead of a telemetryInitialized, and then set to true.
This should not be needed, it's not a public method.
It's probably better to check `if ta == nil` here and return the tag in `createTag`
What is the purpose of this?
This is the only line changed in this file. The code in `app.SiteLocalSettingsPath` is used to check whether the value is a `/admin/Balance`. This is the only change needed in this file.
Can we have this in a separate PR?
`startKubeProxy` should be enough, no need to change it here.
This should be removed.
I don't think we want to do this. If we do want to do this, we should only print the account in the error.
I think it would be better to keep this as `default` since it's a test-only interface.
why do we need to do any either either: - use `./512` or `setup.json` - use `./512` to indicate the actual error is returned by the user. - If the user has the actual error, it should be able to use `setup.json` - If the actual error is returned by the actual error, the actual error should be returned by the user.
Do you need to check if `hosts_file_generated` is nil?
I don't see where the variable is used, is there any difference in removing the `CodeToStatusCode` variable?
This will be a breaking change.
Can we change these to `var`?
wrong import order
Should we add an index on `null: false`?
I think we should keep `timeout` here.
I think it is better if we keep these fields in `fragsize` and `fragsizeAs` to make the code easier to understand.
I'm not sure if this will work for other types of commands.
Please also check if the `OAuth2LoginConfigFormLogin` is null
This should be `PubDataparam.qos.m_liveliness.announcement_period = Duration_t(1, 0);`
I'm not sure this is the right fix since `ByteBuffer` is a `null` value.
This is an API break. We should be able to remove `spanReference` from the `Baggage` and `in`.
I don't know if we need this, but it seems like it would be better to move this to the `/-` package, so it's not really needed anymore?
This was just a mistake before, since `enableAddons` was being called from the server, not the client. I think we should remove it.
The "Date" property is used to "path/max/else" property, not "path/Date"
This is the wrong function to check if the value of `item_top_two` has been initialized before calling `.head()`?
I don't think you need the `||` here.
why change from 'assets/js/googlesitekit/datastore/site'?
Should we also add a case for `minimumSecondsSinceParent > minimumSecondsSinceParent`?
Why did we remove extra_controller_params?
You should modify this existing config instead of the existing one.
Why do we need to add cMsg to the function?
I think it's better to use the key instead of using it as the key as the key as the key is the standard key.
I'm not sure why you deleted this, but I'm not sure if this is the right fix. The client persists across connections is a valid connections.
I think we should keep `writeConcern` here and replace the `write` with `writeInterface`.
This is an API break.
I think we can remove `Source` here
I don't see where this is used?
I think this should be `k_v2` rather `k_1` to make sure it's not `true`?
I think this is a bit confusing. How about we use a constant for `[^\\d\\s\\w!"`, and then we can just call `\\^_`?
This should be `Rpc-Respond-Service-Header`.
I don't like this change. I'm not sure if it is the right way to handle this. The user can see a `char_to` command, but if it's not, then I think we should be looking at the code to do this.
Please remove the space between tests
I think it would be better if you didn't write the `except Exception as err` in the `try/except` block, then you can just do `except Exception as err:`
why not just check this twice?
How about adding `! accounts.length && ! hasExistingTag )` instead?
Should this also be done for `compositeType.Extensions.ContainsKey()`?
Is this change required?
This is not necessary. We can just remove it.
If the `default` is not closed, then it shouldn't return a `nil`.
why do we need this?
Now there's a space missing before the opening bracket.
Please add the imports in `from scapy.layers import *`
This is not a good place for this. `lambda_cwd` is not a valid path, so it is a good idea to use `zip_file_content` to get the value.
I'm not sure what this means. It looks like it's used for a test.
We should keep this for loop as well.
I don't think this is the right place for this. It seems to me that this will be a different approach than `hoodHeight + 2`...
I think this change is not correct, but it should be `master`
Could you add a docstring explaining why this is needed?
Why is this removed?
Do we need to worry about this? It looks like it is just a signal that it's an array of `__` and it's an array of `__`s. Can we make sure that the array can't be an array of the `unfilteredResourceCandidates`?
I don't see the ResourceInstance attribute being used anywhere.
nit, I would have expected this to have -1 as -1
I don't think we need the Integer check here since it is a Integer.
I think it is better to remove this `Pair` call and add `@FunctionalInterface` to `Pair<ExecutionReference, ExecutableFlow>`
@chicm-ms do we have tests for this install?
This file should be removed.
Use `mode` instead of `==`
Why is this one different?
The `method` and `SourceCache` need to be updated to use `method.Empty` here.
This is a pretty big error, but I'm not sure if we should be using the `validateVariable` function in the `OpenVariable` function. I'm not sure if we can add it here.
This should be removed, right?
I'm not sure if this will work for all platforms. I'm not sure if it's worth it.
I think we need to add a `Debug.Assert` to the `stream` and do the check for both `Single` and `Peers`.
I think this should be a `Getwd()` call instead of a `_` prefix
I'm not sure how this is going to work. I think this needs to be added to the `IptablesBackend                   `, since the new `legacy` type is `Iptables`, not `IptablesBackend`?
this is the test that was not working before.
Does this need to be inside the `if`?
The result should be `--event-os6-64` (or `--event-os6-64`).
This should be `error` instead of `>`.
What's the issue with this?
I would use a blank line between the two imports and the one above
Is this just a bug?
Why do we need to set it to true?
Is this a leftover?
Is this intentional? It looks like the only thing that would be to set `DenyExports` when the remote has no `DenyImports`.
(style) line over 80 characters
Would be good to add a log statement here as well.
Is it expected? I'm not sure if it's worth it to have `offset` as a local variable.
>IsEffectInSpell(uint16_id, SE_Invisibility, SE_InvisVsAnimals) [](start = 4, length = 7) IsEffectInSpell(uint16_id, SE_Invisibility2) [](start = 4, length = 3) nit: can we rename `IsEffectInSpell` to `IsEffectInSpell` to `IsEffectInSpell` to be consistent with `IsEffectInSpell` to `IsEffectInSpell`?
Why are we using this package samples instead?
this is the only place where you need it, is there a reason why you didn't do this?
This can't use thread_id_t since it's 64-bits on x64 */
This doesn't need to be constructed, right?
Hmm, I'd say that we should raise an error here.
why do you need this function?
@Pearl1594 I'm not sure why this change is here, is this correct?
This method is not needed.
I think this should be `true`
This should be an optional parameter to `LoadramEntity`.
Since we use `Config::get()` in the name, we could use the name `add` instead of `prefix` in the name.
Is there a reason for this check?
This was just a mistake before, but I'm pretty sure I can't find a way to test this, so I removed it here as well.
I don't think you need the `VLOG(4)` call at all, you don't have to pass it to the list
This is not needed.
This is not correct. `list` is a `List`.
We should remove this.
The default here should be `W3C_MINIMIZE_WINDOW`. The `B3C` option should be `B3C`.
What is this change for?
Is it expected?
I don't know if we should be using the consensus object. I'm not sure how to make this change.
This will need to be moved to `IF_ARM()`
I think we can move this to `interfaces.go` as we already have the default value in `interfaces.go`
Why is this ifdef?
This is not needed, because we don't have a default `linode` in `lxc-start`
How does the `Content-Type` string solve this issue?
We should add `--ignore-chromium` to `--target-all` and `--ignore-chromium` to make sure that it is not present.
The same thing is done for `ta.Keyinfo["bravo"]` and `ta.Addrinfo["bravo"]`
why removing this method?
Hmm, I'm surprised this works. I don't know what the output of this statement does. Is there an error we can use here?
I think this is not a bug.
@deads2k @ruflin @ruflin I noticed that you removed the `Query` here. I think it's not necessary for `sizeof` to be passed as a string.
This should be in a separate PR. The `list_UNSET_NAMESPACE` method is also called from a `list_IS_IS_NAMESPACE`.
I think we can remove the try/except block entirely.
This is the only change that should be in the `git` namespace.
This should be `providerProvider.defaultdefault`
This is a change in behavior, right?
This should be `errors.go`
I'm not sure if this interface is really necessary, but I think we should be consistent and remove this interface and use it in the other places where it's used.
The word "dns-01" here is redundant.
I think this is not the right place to put this code. The only place this is used is in the `LocalHelperProperties` method, and it should be removed in the `LocalHelperProperties`.
This is not a new issue. It should be fixed in a separate pull request.
Could we call this `renewBefore` instead?
nit: can you use the `String.equals(to)` method here instead?
Why did this change? I don't understand why this was here, but I think it's better to have a `Namespace` be used here
This is not a great way to test this.
Maybe use `toto.toto` instead of `toto.toto`?
I would use a `JsonJson.jsonAsDatasetDto()` to get the default behavior, not the `Json` constructor
`is thrown` is the same as `@return`
I don't think this is the best way to do this.
I don't think you need the `id` parameter here.
I think this is not the correct fix.
I think this is missing a log message
I'm not sure this is the best way to go.
The retry is not imported.
This is the only change required as the first `if` statement will be removed.
I think we can get rid of this method entirely, and just add a new method `bitmapsForUndo` to this method.
This file should be updated to match `addle/static/spack/index.js`.
I don't think we need this. The problem is that if we have a `Map<String, ConnectionType>` we can't use `ImmutableMap<String, Integer>`, which is the only type that is `String` (which is the default).
I think we should use the same method for all the other components.
"newModifications" -> "new"
I think we should move this to the `update` package.
Why not just use the constructor directly?
This was just to be consistent with the rest of the code.
This should be removed.
This should be a different error case.
Shouldn't this be `using`?
do we have a test for that?
This variable is not used anymore, right?
This should probably be a bit more general and more generic.
I'm not sure if this is the right thing to do. What about just calling `lastPageInPaginatedResp`?
I think this is not right..
This will break the `TOTAL_HITS_THRESHOLD` API. The ` TOTAL_HITS_THRESHOLD` API is a bit ambiguous to me.
Can you use the new api `org.mule.runtime.module.Hint.property.current.current.user.antrea.core.current.current.user` instead?
This extension method should only be used on <see cref="Activity"/> instances that were created when you have access to the current implementation and the current implementation is used on <see cref="ActivitySource"/> instances that were created
This is a little strange. Why not just do `JSON.Value().Cmp(common.Big0) == 0` instead.
This is a breaking change. It is not needed.
I think we can get rid of this `else:` block now that this is a rebase.
I think it's better to have a method `customize_theme` that returns the same value for all these fields, since that's the case.
Can you please add a `TODO` to remove this?
Line is too long. [92/80]
Why are these constants? They are not used in this test.
I think this will break all of our SDKs, right?
This line should be moved up here.
remove unused imports
Why not use `deny` instead of `exit`?
"the create constructor which takes a single Env"
why not use `*` as default value?
Why is this necessary?
@jona-sassenhagen this is the only one I have forgotten to remove
Can we just return `true` here?
I don't think this is needed, since the `#include <Kokkos_Core.hpp>`, the `#include <Kokkos_Timer.hpp>` will be used for all the other modules.
I don't like this pattern pattern. I'm pretty sure this is the best way to go.
This test was failing because it was removed in the tests and now it was not made.
I don't see any usage for this interface, but I don't see any usage for this interface
The name of this property is `collection.configName`, but `collection.configName` is `Config`
shouldn't it be `/health`?
I think this should be fine, but I think it is better if we want to make it `non-q` instead, since it's the same thing as the `--no-x` package
Please remove the newline.
This test is not related to the fix, but it should be fixed.
This interface is not used.
Do we have a generalized path for this? I'm worried that we will need to do this for everyone. I'm not sure how to deal with it though, though.
These two lines needn't be imported if not imported.
why was this changed?
We can use a `PathInfo` to get this message, and we don't need to add the parameter to the constructor for the variable.
This is not needed, the `Node` can be null
Why the change to match?
I'm pretty sure this is the correct thing to do, but I don't think it's necessary to add this column to the model.
Why not check that `map[string]string` and then check if it's empty here?
Rails/Present: Use if org_id.present? instead of if org_id.blank?.
Why is this needed?
This will be removed in `compute_engine`
The `value` is a `str` in the `dry_alert` function.
I think this will be better suited for the other cases as well
nit: can we call this `extraSecretEnvSSM                     `?
Please use `github.com/gogo/protobuf/jsonpb`
This is a bit confusing, why is the dialog needed?
I think this is not needed.
Why are you removing this?
I'm not sure why you removed this because `completionview.completion_item_focus` is removed. It's not related to the issue but I don't see a reason to keep it.
Can we move this down to the top of the file?
This function is a very similar to what I was referring to for the log capacity being passed in, I was hoping we can just make it `log.ram_handler.change_log_capacity(capacity)` and use it here instead of `debug` in the function.
Please revert the whitespace changes.
Can you add a ` angular angular` tag here?
(minor) sorry, I didn't realize this is the first time I've done it, so I had to change this to "Imported key for account %s: \"%s"
Nice! I like the idea of this change. I think the other one is better than this.
Is this used anywhere?
Line is too long. [81/80]
These are two separate PRs. They're not related to this PR, but I think we should keep the old behavior as it is.
I don't understand the purpose of this change. The issue I have is that we are using `*` as a default, but we should probably try to fix it in the future
I think we should check if `set :show_exceptions` is true, since we'll return `true` for the error.
Why are we removing this?
Nit: Can we move this above the `/* eslint-disable jsdoc/` block?
This is a bit of a weird change. I think we should be doing the same for `nerr` in `},` and not `width`.
Do we need this check? I think it's only necessary to check if `hashStr` is `nil`
Could we use `aws.NewConfig().WithRegion(region)` here?
Does it make sense to set the `NumPoints > 0` to the default value of `Math.Min` here?
should this be `if acc.claimJWT == "" && !acc.incomplete`?
Why did we change the schema?
I think this is a good idea. We should do this in a separate function.
this should be just `array([0, 1, 2, 3])` right?
What is this message for?
We have a `button` in the `change` model because it's not a `change`. We should use `button_set(save_path)` instead.
Is there a reason why you didn't use `change->num_sent_submessage()` here?
This is a change in behavior. Why are we not just passing the stream in a new stream?
This should be using .NET Framework.
`.../` :` should be on next line.
I think this is a leftover from one of the other. I think we should just have a `elif callable()` here, and have a single `elif callable(x)` return `None`.
We don't need this struct anymore, we should just call it `ReferralCode`
I think we can just make the constant `HttpContextTypeName` and use `GetLogger` instead.
This is a bug fix. The assert is not correct.
I think this should be `lru_cache_decorating_method`
why is this changed?
I think this is a leftover from debugging. It's not needed anymore.
Why not just use `isHiddenWithCSS` directly?
We don't want to expose package package. It is a good idea to keep it in sync with the others.
This will throw a `Error` when the `HTTP_IO_ERROR` is `nil`, but the error message is confusing.
I think we should make this an interface instead of a global var
I think this should be more strict than the other `sIE` attributes
is it possible to get rid of the 8760 from the device?
I think we should move this to the bottom of the try block, and move it to the top of the file.
this is a temporary file.
I don't think we want to change the name here. We don't need to pass the full `repo` as an argument to `owner`, and we don't need to create a new one.
This was a bad typo.
Line is too long. [92/80]
Please use a different `kvp` property instead of `kvp.Key.Trim`.
Nit: `seelog.Infof` is a bit ambiguous here, I think the more elegant way to do this is to avoid `if osFamilyservice.Server OSMType()`
This is a breaking change, as it is a very good change to the API, and it is very likely to break existing functionality.
I'm not sure if it is a good idea to include the request here, but it is not the responsibility of this?
`createElement` is the correct version for this test, so this is the actual bug.
I think this needs to be moved to `common.go`
This is the fix.
Do we need to call it `omitempty` or can we just call it `DeviceID`?
I think this should be a warning instead of a warning.
This should be `getRawResponse`.
I'm not sure if this is the right way to do this. The actualNode should not be used for a non-null value, as it's not a user-facing setting.
nit: I would call this `applicationName.get("applicationName")`
I think this is a good place for the `is_error()` call.
I think we should remove this log.
I'm not sure this is the best way to do this... I'm not sure if this is the correct thing to do here. The language isn't a string and I'm not sure if it's worth it.
I'm not sure if the `progress` is a valid option. If it is `progress_last_status`, it will return `None`. I think it is better to check the value of the `master.terminate()` and check the `self.master.stop()` if it is `0` or not.
I think this should be `@Nullable`. The purpose of `getdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoesdoes
Please, please remove these.
I'm not sure this is the right fix.
Why make this package private?
I think this is a bit of overkill, as it's a bit of a hack to make the grouping a little more obvious.
I think we should make this configurable. It is not used anymore.
Why remove the `isort` check? I think it's ok to remove it, since it's now only being used in the `child()` call below.
This is a little hard to follow. Can we make this method a constant?
Is this needed?
It's a bit weird that the import in `Dotmn.cs` is used to load `Dotmn.cs`. Who is the use of `Dotmn.cs` here, so that the field is not available in `Dotmn.cs`.
Should we use `PALETTE` instead of `CLASSES`?
Please use relative imports.
We should probably test this out rather than just checking for the assertion
Why do we need to do this?
I think you could remove this line
I'm not sure if the default is correct.
This is an API break. The ` URI` field is `volatile`, which is ` URI.` in the API, so we can remove it entirely if it is `volatile`.
Please, add a `map[string]` property for this field.
Why do these need to be on the next line?
Why was this changed?
I think this was a mistake in the original issue, but it was not related to the issue.
I think we should use a more descriptive name for these.
Should this be `const`?
Is this the right place to put this at line 262?
can we add a check that `on` is not set in `on` in `FormValue`?
why the change from record_get_field_value to int here?
This doesn't look like a `isset` bug.
can you make it configurable?
Is it possible to return an empty list here?
This should be `@property`.
I don't think this method is called, it is actually called in `@since`
This is not a UX. We should use this in `AbstractTransportHandler` as the default.
Please add a space before the `,`
@deads2k @sttts - is there a reason you didn't want this to be configurable?
`class visibility_of_any_elements_located(object)` is a little confusing to me, as it does not have a visibility return value. I think we should be consistent with `class visibility_of_elements_located(object)`
Why do we need to remove the `.dev`?
This is the only change I'm worried about the change in the PR description. I am not sure if it is worth it to make the code more readable.
I think we should be setting `config_handler.ctu_dirs` here instead of creating a new variable.
This is not needed, the `memoryPlugin` function is never called.
Why not just `state = (State) intent.getExtras().getSerializable("state")` ? (I think it's a bit confusing since the state will be null?)
It would be nice to have an option to say "Use of the format: >=minimum_bug_path_length".
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
Why did you remove this?
this will not work for every call, you need to check for the `s` in the first place
I think you need to remove the need for this new line, it's only used by the `grpc` module.
nit: I think it would be better to have a `ansible-galaxy init` that is the default. It's more efficient to just have a default, but I'm also not sure how to do this in the future.
It's not obvious to me what this is doing. Why is it a `name` attribute?
rm empty line
`chan interface` doesn't seem to be used
The error message should be updated as well.
I think this should be `template>` because the action is not taken care of by the `template>`
Why do you set the default here?
This will throw an exception, because the new error is returned in the `else` branch.
This is a change in behavior, and should not be changed.
I'm not sure if there is a better way to do this, but I'm not sure if this is a good way to do it
The original code is actually not correct. I would expect this to be `includes` or `true`.
Is this not needed anymore?
This file is for the `machine` package, so we should be consistent.
These two includes are now unused
This should be `pkg/logs/logf`.
This is a bit confusing. Why is it ok to just do `*ptr` and `bytes`?
I think we should use `Console.toptoptoptop` here instead of `Console.ForegroundColor.Yellow`
This will fail if `mset.mu.Lock()` returns `mset.mu.Unlock()` (which is the last seen of a lock).
This looks wrong. The first 2 conditions are not guaranteed to be the same, but the second 3 conditions are only used for the same thing, so the second 2 conditions can be removed.
I don't think this is a good idea. I think it should be a user-specified account, not a user-specified account.
I think this should be inside the `focus` class since it is not used anywhere else.
I would prefer `s/lib/v2/` instead of `__version__`
It's better to use `cnb == int64(len(cnb[0]))`.
Is this still needed?
Should we be using the `AddPeers` function in `go` instead? It would be nice to have the same logic in `go/api/go`.
Does this mean we now have a `var` variable in a local variable? If so, I think we should just remove the variable.
Is there any way we can make sure that this will break?
I don't think this will work, since `None` is a value. We should probably add an `isinstance` check here, to make sure we don't break anything.
Why are you returning `None` here?
This is not needed anymore.
This check is repeated twice. It's probably not necessary.
This is the only change in this PR. The `AddEdgesRequest` is used to set the `r` to `future_addEdges` on every request.
We should not expose `rulefmt` in our package.
Do we need to add these constants to these formats?
This is the only thing that affects TF providers. I don't think we should be doing that.
This is a little hard to read, but the code for `JX_OP_CALL` must return a value. This is not a boolean. The code below does not return a boolean.
Should we also include these errors in `InstallUtils`? I think they should be removed.
I'm wondering if it wouldn't be better to use `dispatcher.submit()`, which is not the case here.
Do we need this `system_approver_emails` too?
This is the only change that should be in the `InternalApi` package.
I think you can remove this interface now that it's no longer used.
@mfojtik why not move it to the next line?
Why is this class public?
Should we have a single `manaleechance` prefix here?
I don't think we should be changing this behavior. The new `cert` is a bit confusing to me. Maybe we should change the default behavior of `certable` to `GET` and call `contains` to make it clearer.
This is a change in behavior. The `dvc/api/constants` is used by `dvc/constants.go` and not by the `dvc/constants.go` file.
I would have put these in a separate PR, but we should also change the name of the param to `[ZipkinActivityConversionExtensions.EncodeSpanId(activity.ParentSpanId)}"","""": 1.0,""boolKey"":true)`
I think it's better to use `BASE64.createMetadata()` instead of `BASE64NOMETADATA`
Layout/AlignParameters: Align the parameters of a method call if they span more than one line.
I think we can get rid of this line now that we have `mail_to`
can you use `(metricPoint.Keys == null) ? 0 : metricPoint.Keys.Length` instead of `(metricPoint.Keys.Length)`?
This is a bit of an unfortunate but I think it's better to test that the spec has a `can safely` reset.
Remove empty line.
Is this correct?
I don't see where this test is testing, but is there any way to make this test more obvious?
Can you explain this change? It seems like it's not used anywhere.
Can you check the indenting here?
I think the `o == null` check is redundant.
This test is failing because the tests were failing because the tests were failing because of the `Read()` method. This change was not related to the issue but the tests were failing because of that.
>! it is not possible to get the system{ 2 }; [](start = 16, length = 7) `!network.fill_keepalive_self`?
Maybe we should rename this as well to be consistent?
I don't see any use of this, just wanted to point out.
This is the only place where I see this used. Is there a reason why you are not using it in this PR?
I think this should be `if len(mplex.caches) == 0`
Wouldn't it be easier to read if you just use `index = (0, -1) + HDPrivateKey.Hardened;`?
I think this is the fix.
typo: missing `note`
I think this should use `private` instead of `!=`, because this is a very generic condition.
I think it would be good to have a way to set a dockerVersion to the task name, and have a task name that makes it more obvious what it is
I'm wondering if this should have a default value that is `where T : struct`
This isn't needed.
I would add `private final` to `private final`
why are you adding this? It seems like it should be changed from the other imports
This was changed because it was already written to the cluster cluster, so it was only used to check the cluster cluster.
I don't see this in this PR, but why is this not `_protection`?
you don't have to do this, just use `Dispatcher.on_approver_removal`
Nice! I think we should add a `method` property to the `tools/constants` namespace as we can't just add a new one.
This was a typo I removed.
Is it possible for this to be _('DLED dark') to be _('DLED')?
I don't think we need this function.
this is just a cleanup, I think we should just make it a local variable
It seems like we should be using the new API to ensure that the new API is in the middle of the status.
This is a bit weird, could you make the default `false` to true?
I don't think we should do this, it's just a `bool` value.
This was the only place I can see it.
Should this be a public constructor?
I don't think this is necessary, since we are in a style character
This is the fix.
should we add the `res` variable in `mne/services/chat-api-config.yml`, so that it's not used anywhere else?
You could just return `fname = fname.startswith('/'): return return os.path.join(...)`
should we remove display display_search_ui? from current_user.rb?
why remove it?
I think this can be just `self.count = zero_count`. I think the default should be `None` here.
I think we should check if a.Issuer == issuer here.
Hmm, so this should probably be a bit more detailed, I'd like a more specific name. I think it makes sense to have the `_spark_col_apply` as a class name and then have it use it.
why is this needed?
I don't think we need to change this, since we have a `Set` property that is passed to `errRouterNotSet`, and we don't need to change the description here, so we should just change this line to something like `HasNoProcedures = errors.New("router has no procedures")`.
This can be `private` since the class is `private`.
I think this check is too specific and should be moved into the if statement below.
Why are we using a raw raw raw raw raw raw raw one?
Why not `remote` as well?
Please add a `raiden-update` tag to the link in the PR.
I don't see why we need to do this. If we don't want to change the code to be a different type of error, we can use something like: `if (null == null) { return String }`
This is the main change.
This is the only place that needs `MPI_Init()` can return `1`.
This is a bit of a hack, but could you please change `column_index` to `column_names`? It seems to me that `table_index` should be a `Optional[List[Tuple[str]]`, and the `column_index` should be a `Optional[List[str]]`?
I would prefer to see the name of the constant. It is not clear why we have it in the other PR.
Thanks for the PR! Can you also update the `columns` argument to `ABC`?
don't import derived_from, only use it in imports
nit: this is not needed. `dialOptions` is a valid value.
It seems like this would be a breaking change.
can you make this a `valid range` so that it's clear what it is doing?
I think you can just do `request.url() || ...`
I think we can get the right error message here.
This is the only change I'm worried about this change. The code is a little confusing. If we do have a `NewNewProvider` that will be called from a `BasicUnlock`.
It's better to use a `&&` instead of `&`
Do we want to keep the name of `ipfs-files`?
This file is missing the `RetryAfter = &retryAfterDuration`
nit: use `javax.apache.commons.lang3`
This seems like it should be a `OnStart` call that has already been called. I think we can just remove this line.
Why not just do the call to `klog.New()` instead of adding a new error?
I don't think it's worth changing this to use the `LogMessageRateLimit.IsDebugEnabled()` method.
I'm wondering if this should just be `//` or `//`
Typo: "A name suche"
I'm not sure if we need to do any changes here. I don't see any new changes here, but I don't see it anywhere in the PR.
This is not a part of the current implementation, but I don't see why we need to change this. The other `qtls.ClientSessionState` is not the correct type.
Is this a typo?
this is a little strange, do you think it's worth adding another name for this purpose?
Do you need this import? I don't see it used in the core
I'm not sure about this one. The idea here is that the process is to allow the current page to be in `__init__` and not to use the current page.
Is this needed for all versions of the same package?
I wouldn't say that this is the right approach.
`self._run` is no longer needed.
Missing a space between `$ephemeral_directory/roles/:$server/.ansible` and `$ephemeral_directory/filter/:$server/.ansible`.
This should be a `CHECKING`, not `CHECKING`
Wouldn't `stack.push(child[i])` work if the result is empty?
Is this actually a valid way to get the canonical factory?
I think you can do `.String()` instead of `.String()` here.
Should we make this `provider.AccountExists(_address1)` and just call it `get_address1`?
I'm confused by this change. If we're not using it here, why not use `LOG.info`?
`0.6173` is the same as `0.5173` (we do not need to change the number of values).
Does it work without the `interpreters`? I don't see a need to do this, just wondering what the `interpreters` does.
I don't understand why this is needed?
I think we should change this to `getResponse`
I think it would be better to move this to `get_meta` method, since it's a public method.
I think we should add a `TODO` to make sure that this is not only used in the code.
Why is this necessary?
I think this is the only place where we call this method. I think it's safe to remove it and just call `delete` on the `resolved_targets` method.
`getWorldState()` can be called from a static factory method, so it can be refactored to use `orElse`.
I think this should be done in the `isinstance(out, _get_values_to_unpack)` method, since we're not using it anywhere else.
This should be in `pauseResume`. Also, the `passesRestrictions` property should be added in both `add` and `add` properties.
I think we should be doing this in the `At` method.
This can be simplified by using `isArray()`.
why is the count removed from this list?
Is this part of this PR?
Can you also include the k8s directory in the docs that we have to use it in the project?
This is not right. You can use `is_internal_node` to get the node from the url.
Can you use `.rfind('/', 1)` here, to reduce the number of places where you need to create a temporary folder?
This method should not be used.
This is the same code as the one above.
We can probably just delete this line entirely since it's now unused now.
I don't think we need to do this, the route has a polymorphic without a valid route
Maybe rename `C02021`, to `C0202021`, and change the test name to be `C02021`?
This should be fine, but I'm not sure what the right thing to do is if you're going to use this.
This is a bit weird. What's the reason of having `PmdRuleTst` and having `PmdRuleTst` be?
I don't see why we need to do this. The file is already loaded by Prettier (or before).
This should be `time.Duration(time.value, "numStreams"),`
Why is this removed?
We should also mention that it's a number of utils.
what is the purpose of this var?
I don't think this should be part of the API. It should not be part of the API.
Can we call this `Platform` or something?
This doesn't seem right, you need a test case for this.
This is a little confusing, why do we need a special case for this?
In the past we should probably not make a new release. This is a bit more expensive and I think we should do it in a separate PR.
This is wrong. It is done in a `if_types` statement.
I think we should use try-except here instead of try-except.
This is not a breaking change, but I don't see any benefit from this being used anywhere else.
This is not necessary, the code will be removed in this PR.
I'm not sure why we have this - maybe we should just remove it?
Why is this being changed?
Why do we need to pass the pkg2 as an argument here?
@sjenning can you confirm that this change is correct?
I think this should stay as `protected`
This is the main thing that I'm not sure if the `Path dir` is still the right thing to do.
This class should be removed.
Nit: I would use an enum name for the service.
I think this is the correct fix.
This is the same as the "If Date with zero gas price" price, we can set the price to "If Date with zero gas price" price.
I'm wondering whether this should be done in `wallet::wallets::root_wallet` rather than in `wallet::root_wallet`. I'm guessing that is a good idea, but if we can't do this for now, then it would be better to move this logic up so that we don't need to have the check in `wallet::root`.
Why do we need a new prop?
this should be `post_notification`
This was a bad place to log the file.
This is a bug fix, right?
Why do we need this check?
Why remove this file?
I think it is better to have this in the constructor, and have it be the same as in the `Tag`
Curious why this change?
I think it would be more clear to have the name `getClassDeclaration`. I would suggest `setNode` instead.
Please rename these constants to `isOpenLICIT_TIMEOUT` or similar
Should be `String`
I don't think this is the right fix. I think it's better to keep the original `attr_value['string']` as an attribute, and use `attr_value['string'] in in attr_value` to get the `attr_value` attribute.
why are these changed?
Is it possible to do this without adding new index?
This is a bit weird. `getSlice()` returns `true` if `Instance` is nil. Is that correct?
I don't think we want this. We want the test to be sure we don't run into the `isinstance` function.
This is a bug fix.
why is this change needed?
Could you please move this to `openqa.selenium`
I think we should move this into `core` block, since it is not used in the `store` method.
Can we use `toLowerCase` to determine if the node has a label or not?
I think this is the right fix.
why not `__len__` ?
Can you please revert the changes to ` Component`? It looks like `options` has a default value, and is not a type-able `number`. Thanks.
should be `/go/jose`
Can you update the request request to reflect that change?
Can we add the `.defaultValue()` method here?
These usings are not necessary.
is this an unused import?
`di.MysteriumAPI` was unused and can be removed.
Shouldn't this be `@Nullable` ? I don't think we need the flag at all.
Is this a good idea?
I think this import can be removed
could you help to understand what is going on here. Is it expected?
This is a breaking change. It is not a big deal, but it's a leftover from a debugging PR.
We should probably have an enum here, to match the other two conditions.
@kring is this file still needed?
Should we be using the existing `isinstance` check here?
Nit: I would prefer to return the root cause, not the root cause. This is the root cause of the issue, but I think we should be consistent about how to set the root cause.
Should we log an error if the logout failed?
Could you explain why you need to get the `AnyTimes` here and below?
why did this change?
I'm not sure if it's safe to do this, but I'm not sure how to do this. If you do a `getFeed` check, then it will be a no-op.
This is a no-op, right?
Does this need to be public?
I'm not sure if it's worth adding a check here.
why not just use the `public static` function?
Shouldn't this be also `grc.mfout.printf("%s", q);`
Can we add a spec for this?
I'm a little confused by this. Why are we just setting this to `t.Log`?
@mjkkirschner Is there a reason for this line change?
you can use `String.format` here
this should be `return nil`
@jcotela It is better to check for NULL here, but I think we should not have to check for NULL here.
We can't do this. We need to do it for `Object.is`.
I think the `?` should be fine, but I don't know how to fix that.
I don't think it's the right place to put this. I would say, "COLOCATED_WITH" is a better name.
The error handling is not in this file.
I think we should be more explicit about how this class should work. I think it would be better to have a `skip_config_site` class that has been called in the main thread, and then have the `_config_site.py` class, which would allow the `_config_site` class, but it is not really the case. I'm not really sure what the best solution is to have it in `spack info`, and if it isn't, it might be worth to have it here too.
I think this should be moved to optIssuerAccount
Should this be `if (authCallback == null && error)` ?
This should probably be a `var mongoErrorContextSymbol = require('../../lib/core.mongoErrorContextSymbol;`
@dantleech are these constants not used?
I think we should change `Address0` to `Address0}{1`
This should be `link` and `link_package` to match the actual values.
I think we need to handle the case where the value is not zero, right?
Why is this necessary?
This is not related to this PR, but it seems like it should be a separate commit.
I think it would be better to move this to the controller, like `@attributes = apply_default_attributes;`
Can you please change `SchemaFunction` to `SchemaFunction`?
This probably shouldn't be necessary, since we're using the `class` key in the context of the page, not the `class`.
I don't think we should be changing the base class here, but I don't think we should change the base class.
I think this test can be reverted.
I think this is the only place where we're using this where we have a version number.
This is not the right place for this. It's a good idea to add a `aria-hidden` property to the `aria-hidden`.
This spec looks like an odd place to add a `allow_to_search_scope` method. I think it's better to keep this method as it was before.
Should this also be a `_initialized`?
The reason this is not using the existing `code` function.
I don't think we need to add this because we are already sending the permission to a new cluster, right?
Can you add the same description here?
I think this is not a good idea. It's better to check if the user is in the `firstLevel` and if they are not set.
I would use a null value here.
Please add the type annotation
Why do we need to define this in this file, as the default is `1` and `1`?
Is there a reason we need to do this? I think the `UpdateProjectSingleSignOn` method is only used in one place and the `UpdateProjectSingleSignOnRequest` is not used.
This is a bit weird, we're using the default value from the apiName. I think we should use a more specific name.
Rails/InverseOf: Specify an :inverse_of option.
This is not the fix. The PR is that we are using the test class to get the same result.
Is this needed? I thought the plan was to have it in a separate file, but I think that would make it more obvious that this is the only one that is needed.
Please use `toLowerCase()`
The test is failing on windows, so we can't test this by checking that the value is not exist. This is the only place this test is called.
@deads2k @tnozicka is this a problem for the other tests?
Shouldn't this be `<=`?
Can we remove this function completely, and add a `finally` below?
I don't think we want the default implementation. We can't do this. We need to do this in the `getDomains` constructor and add `@Nullable` to the `KafkaKey`.
@Scottmitch do we still need this? I think we should remove the old InsertTraceIdByServiceName and the new InsertTraceIdBySpanName method and call the InsertTraceIdBySpanName method in the new Indexer
I would have used "Socket" instead of "nscd" here.
I think this is a good idea. I think we can move this into the `addStreamWithStore` method and move the `addStreamConfig` call into a `UserInfo.go` and move it down to a separate method.
I'm not sure if we want to make this change. I think it's better to keep it as a separate commit, and make the code more readable.
Should we have a default array?
Can we use a `-b` constant for the package name here?
Align the parameters of a method call if they span more than one line.
I'm not sure if this is the right place to do this. The `if` condition should only be triggered if there's an `Event` statement. I'm not sure if it's worth it to do this. The `Event` check is still needed, so I think it's ok to remove.
I think this should stay as `Error` and `Warning` as well.
This change seems unrelated to the rest of the changes.
This is a very good example of why I added it in #921.
The year is wrong.
Can we just call it `results_*key`?
@kroitor since we're now using the actual `_isNvdaStartupComplete` function now, should we also change the name of the completion variable?
I'm not sure about this one. You're really testing what you're doing, is this supposed to be `User`?
Doesn't this need to be `AcceptResponseError: acceptResponseError`?
this should be a test class
I think this is a breaking change, but it should not be necessary.
Why is it possible to have it be removed from `readonlyNode`?
ShouldShouldRetryCheck should be changed to setShouldRetryCheckCheck.
This is not related to the PR. The `procedureName` was a name that's a `name` and it was a `name`. The reason is that the name is the name of the function, and the name is not "name".
I don't think this is needed.
Since this is now called `OracleUSD()`, I think it would be cleaner to just remove the `caseAPI` and `OracleUSD()` methods.
Hi @jmhooper @mitchellhenke can you review this? We have a bunch of other PRs that have this `pages#show` namespace, so we can change it to `/pages`
why do we need to change this?
I'm pretty sure we can remove the `customization_of` here since we don't have to worry about the actual templates.
I don't think this is right. We should probably just use `^^ip.*`.
This should probably use the `self` function in the `capacity` method, so that the capacity is always a string.
We should not need to set the state here. If the user doesn't have a callback, the user can only set the result.
If we're not going to be keeping this code, we should just move `rekeyFSM.Event` to `NewRekeyRequestEvent()`
I think we should remove the "random" part from the test as well, since it's no longer needed in this PR
We should probably make this a default value, otherwise it would be more readable.
I don't think we need to do this, since we already have a new AbstractRememberMeServices
I think this is a good idea. The `use` and `auto` should be moved inside of `Scope` and then the `auto` call.
Can you remove this empty line?
Are we sure that this is the default?
Why do you need this class?
I would prefer to see this in a separate PR.
We should probably make this change to the other branch as well.
Why did you remove this block from line 124?
`low` is not a valid number. I'd rather use `0.5/density` here.
This should probably be a `Error` instead of a ``, unless you're using a `\`, not a `\`.
I think you can use `.via()` here.
Is this needed?
I don't see the value of `isDeltaValue` being passed in. Can we remove it?
I don't think you need this interface. The package is only used in the tests.
This is a bit of a weird change, why are you removing the `_ common.ChaosImpl` here?
I'm not sure this is the right place to do this. It seems to be a bit more efficiently used to use `ExpireSnapshots cleanExpiredFiles` instead.
@jmhooper @mitchellhenke I'm not sure if this is a good idea. I'm not sure what the problem is, but if you're going to be more than oneip, I'd suggest using `0.0.0.0.0` here instead.
I don't think this is the right place for this. It is used for a function that calls this function.
This is not a good place to put this flag. It is not a good place to put it.
Can you explain why these are changed?
We should not use `knative.dev` here.
I think this is a good idea to check for the manifest. It will be always present if the manifest is not present.
Can we remove this test now that we have a test with a test that was removed?
Is this change related?
I don't think we should be calling this `if` on the `if` block. We should probably have a `run (void)` and then have a `const` at the end.
I think this should be moved to the `if not delete() {` block, since we don't need to have a return value here.
why not just use `CMAKE_SOURCE_DIR`?
should we do this before `Balance: big.NewInt(0)`?
there are a lot of these fields in this struct. can you please move those to `List`?
I think it would be better to add a `map` to the `errNotEnabled`.
Why set connect_timeout to 10?
I think we can get rid of this now that we don't want to continue with interval shorter. It can give the cron with interval shorter than duration.
This is the fix for #1534
Unused method argument - Bolt. If it's necessary, use _ or _options as an argument name to indicate that it won't be used. You can also write as single quotes if you don't care about it.
Shouldn't be part of this PR.
This should be in the next PR
This is a bug fix, right?
If you do not use the same name, then you don't need to pass it as a class variable.
This is not needed.
I'm guessing this is a leftover from the docs?
I don't think this is a good name for this, but it might be worth considering if this is a good name for this function.
This should be done in a different PR.
I don't think this should be here
This should be `attachShadow` not `function`.
This is the only change I'm not sure. We should run `runUnifiedTest` before trying to run `runUnifiedTest`.
@dantleech did you find a way to fix this?
Should this be `table(" + hashCode(), ")")`?
Can we change the name to `MESSAGE_MESSAGE`? It's more clear what the user is referring to, maybe `WARNING_MESSAGE_MESSAGE`. It is more readable as it is used in the `QueryInterface` class.
This should be `Expect(err).NotTo(HaveOccurred())`
Can we also move the `else` below the `else` (just to make it easier to understand)
what is the meaning of the explicit explicit `ConvertFromTransferPb`?
This is not right - the only difference between `n` and `n` are `null`.
`s/Filter the benchmarks by name using glob pattern(s)`
What is the need for this change?
I think this is not needed. It is already imported at the top of the file.
Is it possible that `build.event` is a special value?
Is there a way to make the name of the vsphere platform?
I think we should not have a use of this. It's a bit confusing.
I don't think this is needed
shouldn't this be `if uh.Dynamic != 0`?
Use `Strings.jsonpatch`, it is not used.
why is this being removed?
I think it's a bit confusing if we have a default value, and we don't want to be set to `true` by default, and we don't need to set to `false` here
Please rename to `sessionStorageStorage`.
I don't see why this is needed.
I think it's better to use `latest.BID() == LocalSquashBranchID`, since it's not a `BID` field.
This constant is not used anywhere, and should be removed.
I don't think we should set this value to 11811, so we can't just use the default value.
Shouldn't we do this in `from .strip import LayoutAlgorithm`? I'm not sure if it is a good idea to have it in the path here, but if it is, we could just do `from .chart import Points as ds_layout` in the `__init__` method.
I don't think this is a good idea. The `s/...` directory should be renamed to `s/...` or something, but it is not used in the code.
why is this being removed?
We can probably remove this line
Why is this conditioned on the first if statement? I think it would be better to have one or more conditions in the if condition.
This is the only change I'm not sure about the change.
Think this is a breaking change, but this is not a breaking change.
If you don't have a nullptr flag you can just use `String.prototype`
This is a breaking change. The `err` is not needed.
This is a little weird, why do we need the `==` here?
This should be removed.
I think we should add `isPaused` to all of the log messages to make sure the return is not an error.
Is there a reason we are not just ignoring `pkgManagers` and not have all of them all?
This is not a good change, it should be `./gradlew :type/dir`.
This is a bit confusing to me. What's the thinking behind this line?
Line is too long. [86/80]
Should we also add `go-ethereum` to `go.go`?
should this have a `draw :users`? I think it's fine to have a `vanity` as a `GlobalGlobalGlobal`
These are all in `ctx.Handle` so they don't need to `ctx.Handle` anymore.
I'm curious why this is necessary.
Why is it not `clutch`?
This is a little weird, we're just calling the `u.String()` method in the `ServiceContext` function, and we don't want that. We can just remove the `u.String()` function and return `false` here.
Is this interface still required?
Wouldn't it be better to have a function `downloads` that does the same thing?
I think this should be `local-port-80-is-local-port`
I'm not sure if `git grep` is needed here
This should be set only if `is_objc_enum == true`.
I think we should add a check here to make sure `server` is not `nil`.
I don't understand the logic of this change, is there any way we could just have a `.default` flag that we call `.default` on the rollup interface?
we should keep this as it was before. We should probably make it configurable for now
I don't see where this TODO can actually be used?
This should be a `@Nullable`.
This should probably be a `validate()` method.
This needs to be updated to use `#ifdef USE_OPENCV`
This error is probably OK, but I think the error message should go into a `mne/src/testing.go` file.
I'm not sure this will work if we don't do this.
I don't think this can be removed.
This should not be necessary. The `setDefaultDatasource` call is not needed. The `setDefaultDatasource` call will be used for the `setDefaultDatasource`.
This is not a great idea, since the span is used by the `GetNetTags` above.
The `kind` value is not a list of `items`, so it's more clear to the `items` value.
I would move the `VuFind\OAI\Server` check up, to keep the `serviceLocator` and `init` methods to avoid potential conflicts with other tests.
Do we need to keep track of whether the `class_variable_set` is set?
This is the only change that fixes the bug.
You can use the `item.images` helper for the `Map` method.
I think we need this to be configurable?
I'm not sure if this is correct. The `\s*` is used for the `\r` at the end of the file and the line is not used in the `?`
why this change?
Why did you change the name ?
why is this change needed?
Could you please add a `@docusaurus/core/lib/babel/preset` file so that the PR will be updated to use the same file for the other files?
This method should be renamed `geterryPick`.
The name of the `env` should be `static`, since it's a public field, and not an array.
remove empty line?
This import should be plural, right?
Who will happen if `countlyCommon` is `null`?
This is not the right approach. The timeout should be `UnrecoverableError`. The current code should never happen, but if the user doesn't specify a closure, it should not raise an error.
I think we should default to `True` here to avoid duplicating the code.
This is the only place where we call this function. I think this field should be renamed `facet_paginator_class`.
why not use the stack size if the CLI is optional?
This should be a `&&`.
why are we using a pointer here?
We could simplify this by checking if the `read_tou` is not empty.
The `_scheduled_on` is probably not needed since it is a string.
Why is the 1.0.0.0?
I think it would be better to have a static_cast as a static variable here instead of a blocker.
Another example of an example where a copy can be used, a copy can be used in a separate test.
I think this should be `ChannelStart` rather than `ChannelStart`, as that is not a big deal.
I would prefer to see this in a separate file for each file in a separate file.
What about this?
Why is this line removed?
I'm not sure if this should be a `Map` or a `Map`, but it's a `Map`.
What is the reason for this TODO?
This is the new config property.
I'm not sure if we need to include the other ones here.
Shouldn't `expire_time.get("duration", "additional_info")` be used here instead? Or is that a ` Right now`? Or is this something that is used in the `else` block?
why is this a pointer?
This should probably be a `mangle_single_step()` function.
Is this change necessary?
I don't think we should remove this. It is used in the code that was already in the previous commit
This is a good name. I think you should use `name: :Approvals::Individual` instead.
I don't see why this is necessary.
Why not make this nullable?
Why is this not just "project_id"? I think it should not be called from other tests
Do we need this log?
I think we can use `write.delete.parquet.row-group-check-min-record-count.par`
I think it would be better to use a `font` here instead of a const.
We could also call this `changeset_id` instead of `changeset_id`.
Please use `pkiAuthenticationPlugin.getMetricRegistry()` to be safe.
I'm not sure if this is the right way. If we do, then it will be possible to get the `else` branch from the client, then it will get the `player->getAccountType()` value from the server.
Why is this necessary?
Can you add a TODO to remove this annotation from this PR?
I think this is a leftover from what I did above. We can probably remove the `rpose` method altogether and use it here.
This should be removed.
I think this is a breaking change.
This is the fix. The "bytes" is a bit confusing, since it is an "bytes". The "bytesbytes" is a "bytes". So, the "bytes" is the correct thing to do, and it should be the same as "bytes", but the "bytes" is the same.
Why should we set it to a default? I would think that we don't have to do that in a separate PR, but I think it should be `yank`
this should be set to false by default
remove the empty line
These are now removed because they were not used anymore
This will be a duplicate of the group below.
This is a debug level, but I don't think it's needed.
I don't know if this is the right place to put this here. Maybe we should add `is_name: User` to the `purchase_amount` class.
Can we have an `List<T extends WebElement>` here?
`this.redirect(base)` could be removed
What was the reason for removing this?
Is this the only way to get this redirect?
This is a bug fix, we have not seen `NM` anywhere anywhere in the code.
exception is not a blocker for users. it should be `datetime-tests`
This is not a big deal. You can just do `if (cm == None) {...}` and you can do `if (cm == False)` here.
Can you make the ReadyDependencyStatus a const?
Shouldn't this be `const mode = readPreference.mode || readPreference.preference;`?
This is the main change.
`distinct` can be deleted now, right?
I don't think we should log errors in this file. I think we should log errors in `nodeId`.
what is this used for?
You could also add `_botocore_parser_integration_test` to `cloudtrail` in the test.
should we add a new rule to the `datetime` section? Or is it just for testing?
Why did you remove this?
I think this should be called `CTU_FUNC_MAP_CMD`. We should probably make the name consistent.
This test is not really testing what we want to test.
This looks like a duplicate of the `#if` below.
Why the number of rows in the `AtomPDBResidueInfo` ?
I think it would be better to use `true` instead of `true` here.
This is not the only place where we need to set the `Cache` flag. I think we can remove the `cache.PathConfig` flag altogether.
This is not used.
Can we have this in a `private` constructor that takes precedence over and over again?
This check is not necessary because the previous code was never caught and the previous code was not working.
Should we make the URI parameter parameter `listTable` instead of `toTable` for consistency?
I think we can remove this.
This will break all storage options, as that is not a valid value for all nodes, and the `all_defaults` will be None.
I think we need to add a `account` property to the `ndeltas` field.
Why was this "xpath" added?
This is not the right place for this. In which case, it will be invoked, but in which case the same case will be invoked?
I think this should be `npm run test:js`
Line is too long. [81/80]
Why do we need this?
nit: `!=` => `& ret != kvstore::ResultCode::SUCCEEDED`
This should be `stream.eof ()`.
I don't think we should do this. The `_getCheckpointParentDir` is used in the code base.
I don't think we should add this line.
I'm not sure what the best way to go about this is. I don't think we should add this.
Can you make this an `image`? We can make it clear that this is a number.
I think this needs a # <msg> I think. @siddontang @chrsmith is this intended?
I think you can just remove `this.inspector = IcebergObjectInspector.create(projectedSchema, caseSensitive)`
This is not needed. `pool.PoolAddEventHandled` is already set to true.
Why do we need this check?
I'd rather not use `ProtoUDP`, since it's a `const` statement.
Can we keep these operations? Seems like they can be separate from the dev list.
I think it's better if we could make a `rb_global_variable()` function to return the same object as the first argument, then we could call `rb_global_variable()` on it.
This log line is causing the log file to get raised.
I think we need to make it `static` to avoid duplicating the code.
The executor manager should be written in the `if (!flow.getUpdateTime())` block as well.
Maybe `CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC."`
can you explain this? what's the benefit? what's the difference between `.decode()` and `.decode()`?
Nit: This is a debugging leftover.
I'm not sure if this is the right approach to do here...
We should log the console.log and return an error.
This was a bug in the `target` call.
I don't know if we should be using the API here, but it's a bit confusing to call it `config` - it's not a `config`. I would also suggest `config.cmd`.
Why is this needed? The idea is to allow `decode_opnd_imm6` to return a non-null value (and not a `($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($($
This test is not needed anymore.
"absolute value" sounds weird, but it's not really a relative value, and it's a relative value, so it's not a different value.
This seems like a regression.
Remove empty line.
Do you need to set this to `prescen_pre_init.py`?
I think it would be more consistent to have a `time.With(MessageTimeoutDefault)` and have it return the same channel as the channel. That way we would be consistent between the two cases.
I don't see where the bodies is used.
Could you please add a `Set` method to the `Pod` struct?
Can you also update the event handler to reflect that?
This error message should be: "the method does not match the description of the page, or that the plugin you are targeting has been installed..."
I think this is a bug, we can remove the server and use `ok.CompletedTask` directly
this is not needed. `Pass_in_time` is called from within `weeklyIterationDripMailer` which is called by `Pass_in_time` which is called by `Pass_in_time_required`.
why not just use the source volumeID+Snapshot combaination?
Should we also check if the directory exists and is writeable here?
I'm not a big fan of the "snakebite" solution. I think it's better to move the import to the top of `cdh3`.
I think it would be better to use a `list_tasks` helper method here to avoid calling `pal.list_tasks` everywhere
These should be removed. Revert them.
This import is unused.
This class is not used.
I'm not sure if this will work. The `DeleteOldDateArchive` will always be true for the `Update` method. The `Update` method is a bit more complex than `DeleteOldDate` (which is what we want to do).
I'm not sure we need to check this?
Is there a reason to use `Union` here rather than `DELETE` ?
I think this should be `can not listen {}, port may have been occupied, this may cause client report error when being accessed. skip {}.", ...`
I think this should be `_COUNT_FORM` instead of ` FROM`
I don't think this is correct, but I think the `--xxx-xxx` option should be added to the `--xxx-xxx` option.
This is a bit weird. What do you think about it being a bit confusing to read the command if verbose is passed as a field? It would be nice if we could just read the command inside the method, and then call it something like `stdout.puts("command: verbose", verbose)`
This looks like a debug statement.
Nit: `this.ratio_` could be const, right?
@bflad this is the bug you mentioned in the PR.
I think it would be better to use the `path` here.
This should be `self._tab.key_press(Qt.Key_Enter)`
I think you should use the `membershipConfiguration.NewNewNewFetchDispatcher` function instead of hardcoding it.
This method should be called `private`
I don't think you need to do this. You can just use `_win_tab` directly in the `_win_id` function.
I think this should be a `print("{0:s}".format(msg)), end='')`
This is not right - the function is called only once, but not in `TestUint64`.
I think the `isGoQuorumCompatibilityMode` check should also be moved to the `if` condition above.
What about the `currentSnapshot()` method?
This should be a try..catch as we don't have the code that we can use.
Can we use the constants constants?
Can you explain why this is removed?
Please remove this line.
This isn't a good idea. It's a good idea to have a separate image that's loaded by the user, but it's a good idea to be able to use it in the future.
This should be a `protected`, not a `finally`
This is not the right error. The error message should be "for-push". In the next line, the error message should be "for-push".
Shouldn't this also be `vrrp`?
Can we change this to an `trace`? I think that's what we want.
Line is too long. [89/80]
Why is this needed?
Is this change needed for this PR?
Line is too long. [85/80]<br>Use `&&` as the latter line, not the `&`
This was changed to `ecosystem/ui/protoc-gen` but not `ecosystem/ui/protoc-gen`
What's this for? Is there a test that checks for this?
@chirimoya What is the reason for making this `int`? I don't see the difference between `string` and `string` in the `else`.
I don't know how this method is used. Can you explain this change?
`volatile` is a bit confusing. What is the purpose of `volatile`?
why is this required?
Shouldn't this be `Once` instead of `Once`?
why is there no `private` private field?
We should add an example here to ensure that this is only called once in the tests.
Why do you need a `@searchtools` ?
I don't think you want to add `pipeline` here.
This class is used in many places. Should we be using it in the `SleetSettings`? It's not clear what the name of the class is.
I don't see where the timestamp is empty ?
I think this should be imported at the top of the file, it should be imported before the import order.
I'm not sure this should be in the `if not conf["SQLALCHEMY_TIMESCALE_URI"]`
I don't think this is a correct change since we're using it in the `80` component. I think we should be consistent about how we do this.
I think we should remove the `SetEngineLoadExternalResources` class from the `EngineEngine` class.
I think this is the wrong place for this.
I think this function is not used anymore. It is used to get the function from the `CertificateCondition` and it is only used once, so it should be removed.
This is not the fix.
why is this removed?
why do you need a separate method for this?
why not use the default network policy here?
Please move these to a separate file.
Why is it needed?
I don't think this will work, since `query-settings-in-solrconfig` is a user-facing query.
This is a bit of a weird pattern, but it seems to be a bit confusing to me. What is the reason to use `db.go`?
Could you please add a space after the `if`?
Is the `chLayout` still needed here?
This is the fix.
Why did you remove this argument and not just `typedef`?
Remove the blank line here.
I think you can remove the `only` here.
@danawillow what is the point of this change? I think we should keep the old version and change the version to `v0.0.0-master+$Format:%h$"`
This header was removed in #include, and now it's removed from #include <s/cls/cls/cls/test_UDPv4Transport.h>
I would say "using the flag will be removed."
This is the main change. The code is still in `locations` but not the code. The `locations` is not the right place to put this. The `locations` method should be removed. The `locations` is not used anywhere else in the code.
Why not change the copyright year in the docstring?
We can't use `sqlDB.SetMaxIdleConns(int(pgcfg.MaxIdleConnections))` here.
This is a little confusing. If it is the right place to put "gsuite_group". I think it should be `gsuite_size_stop` or `gsuite_size_group` or something. I think that's better than the `gsuite_group`.
@wachterjohannes Shouldn't the version 1.0.0-beta.5 be 1.0.0?
Should this be `__( 'search-console', error.message );` instead?
If you're using the `obj:`dataset`, you should use the `get_Args` function.
Do we want to warn or include this as a separate method?
Why not make a `select` here?
This was a bug, we need to make sure the localeItems was empty.
Can you use `errors.go`?
Is this change necessary ?
should this be `true`?
We should add this to the description of the field so that it doesn't have to be referenced here.
It would be good to have a way to set the value of the `days` and a default to `None` (or whatever it is) if we want to override the default value.
Should this be `balance.Int64()`?
I think we should throw an exception here instead of returning `Sync`?
This should not be necessary if the API is already in a generic API.
I don't think this is the right approach, it should be `Exists`.
why do we need a new return?
Why are these tests changing?
This is a change from a private method, I think it's better if we just add a method `TableMetricsConfig.columnMode(colName);` to the private method, and we could have a method `TableMetricsConfig.columnMode(colName);` which returns a `List<String>`.
I would suggest to use `from_build_actions` here.
Why not just call this one `eslint-config`?
I think this is not correct. The `DynamicType_ptr` is already used in this function and it's used in the `Type_quiet` function. The only thing that calls it is that the `type_ptr` is used in `this.transform()` and `type_ptr` is used here, so the function is not actually used in `this.transform()` in this class is used in the `Type_quiet()` function.
This is the main change in this file.
I think this is not necessary since we only test the scheduled_for_deactivation_on for the `reactivate` spec.
I think we should rename this method to `protected`.
Why do we need to change this?
This change is not necessary, as it is in `python/server`
I think you can just remove the `ILoggerFactory` call and use `.ConfigureServices(services)` directly. That way you can get the `ILoggerFactory` directly from the test.
This is now an unused import
Not a fan of this. If you're going to change it, please revert this.
This should be `:Transitions:eu-west-1:000000000000:testq`
This check should be done in a single if block
This is a bit confusing, since the name of the method is a bit confusing, it seems like a good thing to do here. I would suggest to have a separate method that returns `true`.
This is an API break. You can use a different name for this one.
This is a good place to put this option. I'd suggest to move it to a separate PR.
Can you make this a `static` statement?
I would suggest to name it as `get_bigquery_count` and `get_bigquery_count` for big query.
Is there a reason why we can't just do the same in the `Fsync` method?
@jona-sassenhagen this is the only change needed for this PR
I think we should just remove this line now that it is not used.
Can we use `error.details = ...` here, too?
I would use `trim` here, as the `trim` is already called in the `XmlRootline` method.
I think this should be `return parser.ParseFile(f, src), []byte)`
I'm not convinced this is the best way to do this. If we don't need to do this, we could remove the "isSeq()", and use the "Seq()" method.
This is a change of behavior, but is not required.
Why did you change this?
`assert` is a string, not a string, so you can use `assert`
This is a bit weird, we're going to need a return type here, but I'm not sure if we want to do that.
Minor: Please remove the class.
Please make sure to run the tests before running `receipts`
Shouldn't this be `if (!service)`?
Is this used anywhere?
This test was failing because the default behavior of `setDefaultDefault` to be `false`, but the test was failing because the default behavior of `setDefaultDefault` is `false`.
I think the `region` can be removed now, since the stackLocations is now being used in the call to get rid of the `region` variable.
This will only work for non-glog.V.
Why is this needed?
Should we throw an error if the user already has an error.
does this mean we need to support both the same and the same?
This looks like a leftover from debugging
@bvaradar this is the fix for #3348.
I'd prefer a separate dependency for `FeedItem` instead of `getPubDate()`.
Should this be `// & 5.1`?
I'm not sure if we should do this here. The `this.renderrender` method will always return a new `false` value. I think that's the right thing to do here.
Please use the lambda from the class
Can we just use `test.raises`?
I don't think this is needed.
remove the empty line
Should this be called `data-acquirer-id`?
How do we know this is necessary?
nit: import { missing closing parenthesis
What happened to this? I don't see any new versions of the old version.
Why are you using a `DB` here?
This test is no longer relevant to this test?
@wido I think this is what I meant to do in the codebase. I think we should be using `app.CreateSettingsFile()` in the `if (ddevapp.DefaultProviderName()) { ... }` block and not have the `if (!ddevapp.DefaultProviderName)` block.
This file should be removed.
I think you can use `tlsCertTags.forEach`
Why did this move to `Number.MIN_SAFE_INTEGER`?
I don't think you need this change, since you're using the `port_handle_inWaiting` property.
This should be `config_xdg_surface_schedule_configure`.
I think this should be capitalized
why do we need to remove it ?
why is this needed?
I think you can just do `inventory.index.handle(256, responses=None).correct()`
This change seems unrelated?
You can do this in a separate PR.
Is this needed?
Why is this change needed?
@davidjumani can you check if `env_string` is an array of the `argparse`?
Do we really need to use `isAuthenticated` here? Can't we just have `isAuthenticated` as the default and only use it when we're using `isAuthenticated`? Or maybe we should just have `isEmpty` as the default?
Can this just be `gulp dist --no-level`?
nit: use `assert_Equal` from tests
We should probably be consistent and use ` rack-2017` here.
Can this be moved to the `NewQuery` class?
I'm not sure this is a good idea. The `Git` and `Git` seemed to be the right place to put it in `Git` to make the `Git` pass. The `Git` is only used by `Git` and `Repo` seem to be the only place that is used in this file.
This is the only place where we should set the default (even though it is not set) to `null`, but the default is not set.
I don't know if we can do this, but it would be good to keep this for the other way around
Is this file still needed?
I think it would be nice to add a `StatusHash` function that returns a `String`
I think this is fine, but it would be good to use `StreamStream` for the same reason as `Stream` for the same reason.
This variable should be removed.
I don't think this will work, because we have to use `goog:chromeOptions` for the `KEY` case.
We should just call `log.storestore(solrConfig)` in case it's not null.
Does `QVariant` not work with `Type`?
I don't think it's a good idea to add this to the Writer. It's probably fine but I'm not sure if this is the right place to put it. I'm not sure if it's worth adding it.
can you check the env vars in `Paperclip::Attachment.default_options` ? It looks like we are not using it in the `merge` method.
This is not correct, we are not doing anything else in the first place.
Do you need to use the same value here? It is not a problem, but it is a bit confusing. I would prefer if we do this in a separate PR.
I think we can just remove the `AddPeersErr` variable and just call `map[string]` here.
Can we make this method internal?
why remove these?
Is this a typo? `Apply` -> `Apply.New`
I think we should move this to a separate method and call it `delete_files_before_test`
Why was this removed?
Why is this needed, even if it is already in `CreateachedBlockHeaderValidationRule`? Is this used anywhere?
I would prefer to use `global parameter` instead of ` asynchronous`
shouldn't this have been a `.` in the `PRIV_GET_TRANSACTION_COUNT` ?
This was removed because the mem binding is not used anywhere else.
I'm not sure this is the best way to do it.
`update=True` is the default, so it should be `config` (since `update` is the default)
I would prefer `cStringIO` to `self.StringIO` and `self.StringIO`, which is the name of the method
This is not a great name. `User-Agent` should be a constant.
This should probably be `DepthDepthDepthDepthDepthDepth_MAX`.
I don't think we need the special case for this. The `JsonProperty` is used to be a string, not a string (which is already a string). I'm not sure if it is a valid use case, or is it necessary to just do the same thing in `JsonProperty`?
I don't see why we need to keep "tab is" here.
Should we also check `lsb_release -cs` here?
I didn't want to change `params_for_search` to `merge_for`.
This is a bugfix, right? Is this a bug?
Why is the `#if NETCOREAPP3_0 || NET6_0` needed?
I don't see any value in checking this method used anywhere, can we just return true?
why did you remove this?
This should be `ioctlUtil`.
nit: I'd remove this
Why do we need to add the `fieldType` parameter ?
Where do you use the `@connection` here?
This change is not needed.
This is a bugfix. The node_id is set to the connection object.
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.
I think we should also add this to `onPreExecute`
Are these attributes attributes used for anything?
You should be able to remove the `@private` here.
We should add an example of `config=None` here.
This import should be removed
The `stat` can be null if `stat.getVersion() <= aliases.getZNodeVersion()` is `null`, but the code is not really doing anything useful. I think we should check that the version is `null` before calling `getData`
Should be `string_trim`.
I would use `_get_currentNVDAObject` here
This is not the only place that is needed. I'd suggest to use `free(item, NULL)` instead.
This is a very good place to put the `set_mode` call in a method, I think.
Let's use a different name than `ember-i18n`
Why is this change required?
I would move it to the `Rails.py` file.
This is the same as the one in `removeDelete`, I think we should remove the `TestThemedDelete`.
why not keep the host_bad_alloc call as it is?
I think we should keep this flag as is and add a new flag for this.
Please add a license header to this file.
Can we add a doc here to explain why retries is not a public API?
What's the need for this change?
This is not the default. We should set this to false by default.
I'm not sure if this will work. I'll update this to `buildBinaryFor(source, target, target, targetArch, false)` and then we can remove the `buildBinaryFor` function altogether.
This was just a mistake in the previous PR.
We should also check that the physical device is not null here.
unrelated to this PR, but this file has been updated to be reverted.
Can this use the getInstanceId from previous apply?
You can remove the "TODO" from these three lines. (I've added it to all other similar places)
nit: `trimRows: [8, 9], _` is not necessary
What is this? Is it because the node is in a boolean? If not, you should use the boolean value here.
@michalpristas @smarterclayton do we need this?
This is the only usage of this class that is used in `src/main/hide/internal/key_test.go`. I'm not sure if it's worth considering how it's used, but if you want to make sure it's not intentional that it's not used in the `src/main/hide/hide.go` file, you can remove it.
Can you add a TODO to remove this and the other `v1` imports?
I think this should be `if (selectedMenuItem.item.url !== currLink) {`
Not sure if we need to change this, but we can keep it simple and change the version to `TPRVersion` and keep the version consistent.
This is not a correct test, it is not the same as the one above.
There is a `functionDescriptor_62eed357eb71de0e` which is never used in this function.
Why is this class deprecated?
This is a bit of a hack, but I think it's better to be clearer to use the CProofsMode in the future.
I think this is the right approach. I think we should set `p/APIServiceLabel` to `""`.
I'm not sure if this is a good idea. The code in `service.getRequestURI()` does a bit of a non-null path. The `exMessage != null && exMessage.startsWith("Datafile")` is a good idea, but I'm not sure what the best way to do here is.
Can you add a doc for this?
This function has the same effect as `srvrGlobal->clientKeepaliveRetrycount`. I don't see any use of `clientKeepaliveRetrycount` in the `uid.js`
I think this was accidentally removed
This is a change of behavior, but I'm pretty sure this is the only change that's needed for the new functionality.
I think this is still not correct, since the segments is a little bit confusing to people who may have thought about it.
Should this be `federatesWith`?
Please revert this change.
I'm not sure if this is the right fix since it is not related to the other changes.
We should add this to `tagWriter` as well.
This should have been a separate commit, and should not be done here.
This is a bit weird, why are we doing the `NEWIPC` and not `NEWNS`?
I think this is a good place to put this check. I think we can move it to the other place where we check this in the `if` block above.
The `AWS IAM` is not actually used anymore, so can remove it.
This is the only place where I'm missing it.
I'm not sure if this is the right fix. The `IRQ` write is a 8 bytes.
I think we can get rid of this line now that we have a trailing comma.
This is a very confusing pattern. It's not a real issue, but it's not the same as the other ones.
I think it is better to use `--run-check` rather than having to create a new flag.
`this.isSorted()` is already defined in `onModifyRow`.
why is OSCSC removed from the other one?
This should be `Sha`, not `version`.
I think this should be `window.DateTimeFormat()` instead of `resolvedOptions`
This is a little strange. I think the `name` and `name` are the same. I think we need to pass the name to this function as well.
I think it would be better to add the `@SuppressWarnings("deprecation")` annotation as the property name to the `Context`
This is a change in behavior, but I think it should be moved to `options_version`.
I think you should be able to pass `stop bool` here, and then pass it in the `Values` function.
Please add braces to this condition.
`endsWith` isn't necessary here.
Do we want to make BatchExportProcessor a property of the property? I think it is more clear to use `BatchExportProcessor` and not `BatchExportProcessorOptions`
I think we can remove this line.
Could you change this to "Please note"?
Not sure if this is correct. If the user doesn't specify the result, then the user doesn't specify the result.
I don't think we need to add this new constructor anymore.
why the this change?
I think this line should be moved up to the next line.
Could you please add a `TODO: Line 55` to the docs?
I think we can just remove this function entirely and just call it `isRemoteShowHideCaretEvent` in favor of `isRemoteShowHideCaretEvent`
`$this->createForm` calls the `$paymentEditData` parameter and then calling it again in the constructor
This is a bit odd. The `-a` should be used in `-a4a-z2-4.5`.
I think this should be done for all other components, e.g., `context.Resource(volumePath + "/catalog)`
Line is too long. [83/80]
Should we also mention that this is a `default`?
You can use `Time` here.
Should this be `NewPath`?
The name of this method is misleading.
This is not a good idea. It's not clear to me why we need this.
Should we add `@Deprecated` here?
Please remove this line
I don't think we should be changing this here.
`import complain about the old `//`
Please remove the `ities.useShard(shardNumber)` from the previous version
This isn't a big enough change. The `pid` can be replaced with the `pid = fork`.
I'm not sure if this is the best way to go.
I think you should also check for `first_metric_only` here. Also I think you can just check for `first_metric_only`.
Nit: I'd prefer this name as `lib` rather than `lib` rather than `handle`.
can you change this to `double`
I don't see why this change is needed.
I don't think you need to copy the string here.
Please add a `TODO` to remove the spaces between the parentheses
We should add `Could not approve the stage because` to `Could not approCartCart`
Can you use the constant here instead of the `listen_count`? This way you can use the constant in `listen_count`.
I think it is better to use a `requirements.stdout` helper for this.
How about `executiongenproto`? This would allow us to use `executionInterface` for both the `executionInterface` and its `executionInterface` values.
I think we can move this line up here.
This is the fix.
This is the only place where `self.extra_convs_on_input` could be `None`, right?
I would use `if(podcast.author.trim())` here, as the last line below would do the same thing.
nit: use `ZpoolStatusStatusStatus` and use `ZpoolStatusOffline` in the name.
Can we move this to a separate function?
Not sure if we want to add an `errno` or `details` here.
Please use a single `gofmt`
Why are we changing this?
Why do we need to define this as an attribute in the `UserInterface` function?
This should be done by the `HWRITE-MANIFESTS` class.
I think the `@SuppressWarnings("unused")` annotation is unnecessary.
`s.sys.replies` is not always defined in `delete`
`colCount` is not used in this file.
The value of `PRIVACY_MULTI_TENANCY_NO_ENCLAVE_PUBLIC_KEY` is the same as `PRIVACY_MULTI_TENANCY_NO_ENCLAVE_PUBLIC_KEY` but not the value.
This is a bit confusing to people. Why is it needed?
I don't think this is the right solution, I think we should be using the `if not isinstance` check here.
I don't understand this one. Is this related to the issue?
nit: "The" -> "The"
This is a little hard to follow, but I'm wondering why you didn't use `HDF5Reader` and then you don't need to check that it is in the `else` branch?
Style/UnneededInterpolation: Prefer single-quoted strings when you don't need string interpolation or special symbols.
can you remove this line?
Do you think it would be better to just have a `keystore_path` and then have it be `keyAlias` as a default, to be consistent with other commands? That way you can have `keystore_path` and `keystore_password` and then have a default, and you can have `keystore_path` in the keystore.
can you check if this is a good place for a check of the secret name? `SecretRef` should be a good name
@jona-sassenhagen this is the fix. The `visit_consumer` was not used before and was used in this PR.
Does this need to be `Parallel`?
`let the key < keys.length` ?
Is this the same as the "hack" version?
I'm not sure we need to set this for 3.11. I think we need to make it configurable, but I think it is a bit more efficient to have it in the list of 2.
`p.Route53` and `p.Route53` are identical, so this is not needed.
This is the only place where we need this TODO. I don't think we need it anymore.
I think we should just remove `Tags.HttpUrl` and just call `HttpMethod.HttpRequestHeadersHost.IsHost()` in the `HttpUrl`
This should be debug level.
I think it would be more clear to change the name of the Authentification. The rest is not necessary for this one, but the feature is still running in the project.
you can just use `print traceback.format_exc().`
I think you need to change this to `docker/image`
I don't think we need this import anymore.
nit: can we rename metadataFileLocation to metadataFileLocation
Please rename the property to `max_results` to match the existing values.
I think we can just do the `Role.ensure_system_roles_exist `.Config` here and the test_mode above should be renamed to something like `Role.ensure_system_roles_exist `.Config`
This test is not needed.
The `CRiOS` should be removed from this if statement, otherwise it will break the code when it's not used.
Why is the other interface removed?
I think this should be a debug message.
Is there a reason for this change?
What if the epochNum <= a.foundationBonusP2StartEpoch is not epochNum <= a.foundationBonusP2EndEpoch?
I think you need to use a global variable here. You should be able to use `.get('system')` instead.
This is the only place where you need it. I'd rather check the `return os.Lstat(paths["devices"])`
Do you want to set `openshift.LogLog` here?
Shouldn't this be `format` instead of `GoQuorumCompatibilityMode` ?
why did you add this?
Can we move this to `this.prevFolderId_`?
can we use the `clock.New()` method?
This is a change in behavior, because `lbann_comm_ptr` is not a boolean, so I think we should use `type` here.
Why is this needed?
Why is the `@default` annotation needed?
This method can be static, and the method can be static
this should be `true`
This change is not needed.
I think it would be better to have this in a different place.
Why is it being set to `nil`?
I'm not sure this is the best way to go. If we want to make it configurable, we can use the constant from the cache invalidation instead of the time.
This change is not necessary, right?
@sparrowDom Just checking, why is this needed?
This error message is not very helpful.
This is not a very generic name, it's an API break.
I think we should probably be consistent about how we're using `C` here, since it's not a list of `Copyright (C)`.
Do we need this change?
Should we use `fs.Config.CopyDest` instead of `fs.Config.CopyDest`? I think it's more clear that we don't have to use it in `fs.Config.CopyDest`.
Did you intentionally change this line to: `logger.Log.Debugf("tdnf error (will continue if the only errors are toybox conflicts):\n '%s'", stderr)`
This is not needed.
I don't think we can include this, as it will always be empty.
Is it possible to have the same functionality as `i18n` rather than just `i18n`?
Should this be a job_id?
I don't know if this is the right place to put this in the first place. I'm not a big fan of the `find` call, but I don't think it's a good idea to have to worry about the `find` method on the same line.
I don't see any point in keeping it here, but I think it's worth it for a while to get away with the `@attr_reader`. I think it's better to just remove it entirely and just use the `@` in the `attr_reader` method.
Shouldn't this be `None` instead of `stream`?
@mfojtik why do we need this?
I'm not sure if we should change this behavior, but I think the `isAccountAccount` method can be renamed to `isAccountAccount` or `Do` and `index` can also be renamed, since we're in the `isAccountAccount` method
I think this should be `const` rather than `const` (same for the other file below).
This is the fix.
We should not use `github.com/go-logr/logr` for this package.
I don't think you need the `else if` here
We should not need this check anymore.
I'm assuming the `nxt_pc` check is required here, but I don't see any use of this code in the code base.
I don't think the `9680625b39d3363d` is needed anymore
Line is too long. [81/80]
This should go in `core/server/HidepidDisable.go` since it is a pointer.
I think this should be set to true, otherwise we won't be able to set this in the constructor.
I don't think we should be using this here. We should be able to use it in the spec and remove the spec.
Why are we doing this?
Please use the same value for all the examples.
This should not be needed. The cancelTimers() call will be moved to cancel.
nit: `should be as expected`
Please remove the empty line.
Is it worth having a struct and then just pass in a pointer?
This is a bit weird, the `Preconditions` array should be `Optional`.
This is not a good name. It's a little confusing.
I'd prefer a `verbose`, not `const`
why removing this line ?
I think we need to add this function to flush, as it's used by all other places and is not really useful in the code.
This import is unused.
I don't think you should be changing the error message here. I don't see any error handling for this, but I guess it's not a problem?
I think this should be a `@deprecated` statement.
I think we should just use the `timestamp metav1.Time.InstalledTimestamp` variable here.
I think this should be `else if` since it's not an invalid, but it should be `if (isNutritionDataAvailable() || addProductNutritionFactsFragment.isFieldsInvalid()) {`
I don't think this is the right fix since it is a user option.
Style/SymbolArray: Use %i or %I for an array of symbols.
Should this be `True`?
I think this could be `delete`
This is a breaking change for the `Callscribe` library, which was the reason for this change. I'm not sure how it works, but it seems like it's a very common practice.
This seems unrelated to the rest of the PR?
What about `wf.Flush` (and similarly in `wf.Flush`)?
I'm not sure if this is the right place for this. The partition data for the file of this task can be null, or if not it should be null. I'm not sure if it should be null.
I think this should be a different error message.
I think this should be a bit more descriptive of what the user would expect, since it's the default. We could probably make a bit more specific and just have a default, but that's a little more readable.
Why is this needed ?
I think this should be `Ignore`?
This looks like a bug in the changelog, can we move this to a separate PR?
Do we still need `cleanup` here?
Metrics/CyclomaticComplexity: Cyclomatic complexity for files_exist? is too high. [7/6]
Why did you delete the type here?
This will cause a NPE in the next line (which is the original implementation).
in the spirit of logging, we should log the error.
I don't think we need to do anything here. `interceptor` is a valid `interceptors` (and it is a `interceptor`).
This line is not needed.
Do we want to emit this to a `Itoa`?
@gustavonalle do we know why we need this change? I'm not sure if we should do it in this PR, but it seems like it would be worth adding a `@Nullable` annotation to `new HashSet<>(tree.put(element, element));` to make it clear that the element is a `new HashSet<>(tree.put(element, element));`
I think this can be combined with the other functions.
This is not the same as the one below.
I don't think this is correct, it's a positive integer.
Why do you use `continue` for this purpose?
Can you also check for `AppendNil` here?
This doesn't look right. `ref` will always be true. `current` will be null, and it will be null, and `currentIndex` will not be null.
Nice! I think it's fine to keep the `AWS` prefix, but I think it's more clear to have it here.
I think we need to add this to `libkb.server.client.server.util.server.client`
I think this is not needed anymore?
Maybe we can also set the block device name to `cstor-pool-instance`?
Please revert this change.
So this is the bug fix that was fixed in #9023?
The `_socket` is not used in this file.
Why not just do the `//` check here and in the `if (sc_reader::fetch_datum(CPUMat& X, int data_id, int mb_idx, thread_pool)` check above?
This is not the right place to put this. The code is not the place to send the signal. If you want to do something, it should probably return an error.
Is there a reason for changing the import to `noqa` here? I'm guessing this was just for debugging purposes, but I guess it's just for consistency?
I would prefer a `Optional` here, and not a `String`
`show_legend` is a bit confusing, how about `default=0`?
I think this is the correct way to do this. The previous code was just doing a `trim` check in the `if` and then calling `traceId.length` before the `if` check.
Why remove this line?
Nit: `--es6-js-export` and `--es6-js-export` are both lowercase.
Can you please update the doc?
This is an example that could be empty. This means we could also say "artifact.name" or "artifact.name".
I think we should be consistent with other methods in this file.
`public` -> `public`
I think you can remove the `filter` import now.
Maybe we should do a similar fix for the msg.MessageId in the message too?
Shouldn't that be in `validateID` too?
This is a change in behaviour. Previously we have `javascripts` in `javascripts.js`. Now it's an alias to `user-user-management.models.js` and then we could remove the `user-management.javascripts.to.user.models.js` file.
I don't think this is right, it should be handled in this if block, since it's not a valid implementation.
I'm not sure if this should be `digest: "SHA256"`.
I think it's better to use `<pre>{message.replace('<', '&lt;')}</pre>"` instead of `<pre>` since that's what the default is.
should we make a constant for this new column?
Block has too many lines. [30/25]
I think we should have an API break here, to make sure we don't break anything.
Should this be `allowOptionalMappings`? I don't see the point of having this `bool` in the constructor, but I'm pretty sure this is the right way to do it.
Is there a reason to not just return `o.chooser.Chooser` here? I don't know if it's possible to have a separate `Start` instance, but I guess it's fine to just return `o.chooser.Start()` and avoid the `Start` instance?
I think it would be better to use the "new" function in the output of the output.
I think this is a bug. The `nonce` field is not a valid value. The `watches` value will never be set by `transactionWatch`.
why not use `? NativeModules.ShareExtension.data()` instead of `index: () => {},` ?
Should we have a default value for the config? Or is it just `tls_insecure`?
Why is this not an array?
I think we should use the new type `Character` for the new type `Object`.
I think this is a good candidate for `isInterface()`
I'm not sure why this was here.
I'm not sure this is the right way to go, if we don't want to log it, then the `LAUNCH_TOO_LARGE` error message should be updated to reflect that.
Is it necessary to call this variable `NewMutableStateStats`?
I'm not sure what the best way to go here is.
I think this should be an assert. It is not an error.
Hmmm. Why not `fullscreen_view`? It's not a `project.fullscreen` but it is a `project.fullscreen`?
`next(lib.Sprintf("")` could be a list of some utils.
I think it would be better to use a more meaningful name here like `$uuid = 'getByUuid'`, `getpresent` and `getpresent`
This is a bit confusing, why is this needed?
Use the new Ruby 1.9 hash syntax.
This is the default implementation. The default implementation is `Handler` but the http is `Handler`. I think it should be `healthHandler health.Handler`.
We should add a `functional/api/` directory for this.
I don't think this is right. `pageTitle` is a valid value for `pageTitle` so I think we should change this to be a bit more specific.
@cramforce I'm not sure if this class is actually used? I'm not sure it is actually used anywhere?
I'm not sure this is the right fix.
This is the most efficient change.
so this one is always called?
why do you change the download?
Is this change intentional? It looks like this is a test that was not working before.
Please don't change the parameters.
nit: `asNestedType().asStructType()` is a bit ambiguous. I think it should be `asStructType().fields()` instead.
This should be `const signatures = require('bluebird')` as well.
This change is not needed, the previous version was correct.
I would suggest a capitalization.
Can we have a test for this? I think it's better not to use the new name, but it's not a good idea.
Are these requirements for email?
I think it would be good to have an option to give the default value a default value, and have it default to false by default.
@michaelkuhn @stuhood @mjkkirschner I've been adding the `-renamed` option to the `missing-docstring` option, but I'm not sure if this was a bug.
This is not correct, but I think it's better to use `var response = await.EmptyEmpty();`
@wido I'm not sure if this is the correct place to put this. It is a good idea to keep the old code as it was. The new code is not the new code and the new code is still a bit redundant and I'm not sure how to fix it. If the new code was correct, the new code should be removed and the new code was not working correctly.
@johanste why did you change this? I don't think this is the right fix
Do we need to call this `phemeralDomain`? I thought we'd be using `phemeralDomain` for performance reasons, but I don't see any use-case for it.
Can you move this test to the top of the file so we can use it in the file?
I'm not sure if this is a good idea. The `prefQueueSortOrder` is used in the `String` and `prefQueueSortOrder.cs` file, and it's not a good idea.
Nit: I would move this closer to its own package.
We can't make this `const` because it looks like it's only used for `makeLazyLoader`. We'll need to make sure that it's only used once.
I don't think we should be using this in the API, but I'd like to keep it as a separate PR for now, and add a TODO in the future.
I'm not sure if this is the right place to put this. I'm not sure if the `#Fill` entity is necessary, since the `#Fill` entity is not defined in the view.
I think this is a bit dangerous, since we're not using the pygment class here.
I don't think this is right - it's only used in one place.
This is a change in behavior, but the code is now repeated above. I think this code was only used for debugging, so it's not needed.
in the current implementation, the public method returns the same object, so the public method returns `self.cart.id`
I don <msg> You should be using the Ready here, otherwise it will be the same as the result.
You can remove the version from the version
Doesn't this have to be pushed into `.version`?
I don't like this. I'd rather not have a separate method, and only call the methods from the DB, so that the `@world` can't be called from the view.
I would say this is not an API break.
This is the only place where we need to call `globalVirtualMAC`? I don't think we need to call `load()` on `load()` on `load()` because we're not going to be aware of that. I'm not sure if this is a problem, but it seems like we should just be looking for the call to `load()` in `load()`?
I think this would be a little clearer if you want a `exclude-too-few-public-methods` option to be the `-` option.
Is this meant to be a platform? I'm not sure what's going on here
This will fail on every iteration of the console console. I'm not sure we want to print out the console here, since it is a different error and not a user error.
I'm not sure about these being used... I don't think they are used anymore
should we change the order?
`metric variable` should be nullable.
I don't think we should be using it in the core.h file.
This should be setMinPasscodeLength = changeRequired
Line is too long. [82/80]
I don't think this will work for anyone using this.
this import should not be changed
is this necessary?
This is a bit weird, we can just use `v3.db`. I think we should be able to remove `v3.jit.db`. I think we should just call it `v3.jit.db` or something similar.
We should be able to use `Http2` for this and `AppContext` for the `Http1` class.
I'm not sure if this is a good idea to have `csv.at[0, 'Int0']` be a `before_value`?
Why did you change this?
This is a bit of a hack.
We can remove the flag altogether.
why not just call it `HttpServer`? I think it would be better if you could just call `HttpServer` directly, and call `TestFlowServer` directly in this function.
I'm not sure if it's a good thing to have here. It's probably better to just have a `deprecated` and have it return the same object as the struct.
I'm a bit confused by the code that is being called in `skip`. I'm not familiar with the code that is being called from the code. I'm not sure if this will be the best approach for this.
Why not `coalesce_result`?
This is a wrong place for the `systemdsystemgeneratordir` value.
I think this should be `_classificationCompute()` instead of `self._classificationCompute()` because it is not used in the `_multiStepCompute` function.
Why do we need to change the values of `methodSampleViews.get(0)`, is this because `methodInitCode` is not a list?
should startTs be startTs?
`getAttribute` returns a boolean, not an integer.
You don't need to assign this here, it just checks for the error
I'm wondering if it makes sense to keep this method in `populateDataFromTraits()` and `populateDataFromParentClass` to align with the rest of code.
Why is this not needed?
Use the new Ruby 1.9 hash syntax.
I think this is a bug fix?
This is the only change required to make the port optional.
Does `--wheel_resolver` need to be added to `--wheel-resolver`? If not, can you just use `--check-the-resolver` instead?
I think we should keep this line, because it's not a part of the "if it's not there" block
I think we can remove this.
Should this be done after `linkedSource.Dispose()`?
shouldnt this happen before `electionCommittee >= genesisConfig.EnableGravityChainVoting || genesisConfig.GravityChainStartHeight == 0 || stakingV2 == stakingV2`?
Can we use `__DIR__` here instead of `vendor/symfonyDumpFunctionPath`?
This should be moved to `pkg/api/v1/main`
please add a "list" docstring, otherwise the method name is misleading.
This seems like a good idea. It seems like a good idea to have a test that checks a directory that doesn't exist.
I don't think you need to check for the function, just call `is_being_called`
Do you really need this `if`? I don't see it being used anywhere
This test is not necessary. The test should be moved to a separate file.
I would prefer a helper function to return the file name, like `get_notebook_data`
Could this be a `Condition::LoadBuilder` instead of a `Condition::LoadBuilder`?
I don't think we need the `-1` prefix here. We should be able to just use the default value in `src/server/config.go` instead.
should we also update the `version` field to `ami_version`?
nit: can we move this to the `initiator` method and use it in other places too?
can we also set this.noTransaction and set this.inTransaction below?
`assert_lowercase` is a `*`
Looks like the `catch` functions here are never necessary since the `width` function can be used directly.
This line should not be here, since `boost::any` is not empty.
should this be `class` instead of `class`?
Please mention that it is only true in the `enableAdminApi` case. It should be `EnableAdminApi` or `enableAdminApi` but I don't think we should be using it in the `createApi` case.
This is not used, please remove it.
We should probably have a unit test for this.
I think we should be able to remove this line.
You can use `auto` instead of `auto` to avoid this duplication.
We can use LogHeader2 here instead of \* since LogHeader2 is an array
Why are the changes in this file needed?
This test was not being used.
This is the only place where we need to do this - it's not really a flag. I think this should be a flag that is set by the user.
Please remove unused import.
can you add a check to make sure the restConfig isn't supported in the same class?
I don't think we should add this to the `getClientConfigImportModule` method.
@simitt, I don't think we need this change.
Why are we no longer using the `REQableable` class here and below?
The `o.lss` is not necessary here.
can we use a different name for the same reason as for `C:\cpermission_to?_export_as_preferred_citation_txt`
It seems like this is the only place where we're using `cls` here. Is this a correct change?
Redundant self detected.
I think it would be good to test that this is a result, not a result.
You could add a `HttpHttpParser` interface that is not used anywhere else in the code base.
We can probably remove this assert
(style) code indent should use tabs where possible
Why the change to `Failed`?
I think we can use `if (time.getTime() / 1000) {` instead of `for (var i = 0; i < this.inputs.length; i++) {`, otherwise we'll have a double `
I would use `data_format (string):` instead of `data_format`. It's a bit more consistent and easier to read and understand.
I don't see how the `record` method can be used.
Is it possible to get the jsonhttp and jsonhttp with the new http ?
This looks like something that should be a constant.
This is a very generic way to use `__version__`. I think you can use `__version__` in the `__init__.py` function.
This is the change that will cause problems on the NRE when someone tries to remove a string from the object's type.
What is the problem here?
I think we should be able to remove the default setting for `HostEncryptionEnabled` here and in other places. It's not necessary for `user.WireguardHostEncryptionEnabled` to be set when the config is configured.
why do you need this flag?
I'm not sure what this does. I would say it's not clear what it's supposed to.
Please remove the `sql` keyword here.
We should not do this in this PR, but this is a very good change. It's better to move the `GoogleComponents/button` to a separate file.
I think it's better to put the X86 in the `ifdef X86` above the ifdef, and just add the `#ifdef X86` to the `if` below.
nit: can we use `!` for this instead of hardcoding it?
I would say, that you can't say "the doc" and the doc should be renamed to something more meaningful.
Can this line just be `if (UserPreferences.getTheme() == '\n' && ContextCompat.getColor() == R.style.Theme_AntennaPod_TrueBlack))` ?
Since this is a user-facing table, I would put it in a `user_id` constant in the model, that's what we're doing in the model.
I don't think this will ever get called, since we don't need it in the `container` block.
nit: `toLowerUnderscore` -> `toLowerUnderscore` ?
Shouldn't we check if `client == '/'` instead?
I don't think we need this, the `ec2_client` is supposed to be a `try catch` block.
`this.keys !== undefined` is the same as `val1.keys`
Please revert this change.
why is this change necessary?
why is this necessary?
I think we can get rid of this and use it in other places as well
The GET_CAST_ISSUE_MESSAGE is already defined in the GET_CAST_params.cpp.
I think this can be simplified to `from pyspark import dataframe as df, functions as F` since the function is not a function.
I think you can remove this one
I think this should only happen if we have a single value in `src/server/` or not.
This is not needed.
This is not needed.
Use a single `if` for readability
This seems like it should be a different error.
why do you need to change this?
Metrics/LineLength: Line is too long. [83/80]
It is not possible that this test case is testing that the "b" prefix is correct, but it's probably not the case.
This can be replaced with `PhysicalLocation.class.getName()`.
eps is deprecated, so it is not needed.
This is not a loop, but a warning can be thrown
hm... can we call this something else?
nit: rename ProjectSpecLoader to ProjectSpecPATTERN
This is not the fix. The `Email` is used to create a `Email` field and only use it in `SuluEmail.java`.
The `role` can be `null` if it's empty (and the above can be `wrapSelector`).
I'm pretty sure we don't have any impact of using `constructor`. Can we just remove the `constructor` field entirely?
Why is this protected?
Is this test case specific to the user? I don't think we want to test that the `each` action is being removed.
Why not call `err.Reset()` directly?
Can this be made configurable?
Since we are using the API, can we name this `injecting` or `Finished`?
This is a good change. I don't see the point of this being split over multiple lines.
Line is too long. [81/80]
Why is this removed?
Shouldn't it be `!= 0`?
can we have a test with a custom name for this, e.g. `resp = self.app.get(other_bucket, headers=self.headers, status=404)`
Why not just remove the arugments?
I'm not sure if this is the best choice. The user might not have a width/maxWidth, but the user is the one that's in the width, so I'm not sure if it's a good choice.
You could just have a `.anyMatch(...)` method that calls `searchTerm.map(searchTerm)` and have a `search.anyMatch` call that calls `searchTerm`
(style) externs should be avoided in .c files
I think it would be good to change the tests to include the "WARNING" in the docstring.
I don't think this is correct. The new conditional should be removed.
Why do we need to keep the `params` field as a field?
can you check if this is the correct one to be used?
This change is not needed.
@jcotela It seems we should be adding a check here that `GetPause()` is not empty?
Why is this readonly now?
Why did this change?
this import should be removed.
This is the wrong file
Why remove the extra parentheses here?
I'm not sure why you are using `!Promise.IsAny<int>` here?
I think this line is still not needed.
Thanks @wmvanvliet, this was the bug I had originally added to `debug` before.
I don't think we want to do this here. We don't want the `gengen` API to be able to see the `gengen` API, so I think we can move this to a `gengen` class.
I'd suggest using `addpid` here.
Please use `null` to throw an exception.
Why is this removed?
This is a pretty different bug, but the `x` should be `Panel`, not `Panel`, not `a`
why is it needed?
It seems like this is the only usage where the `ValueMethodReference` property has been used.
@becker33 Can you review this change since you originally added this code?
@joelgrus does this work for you? I think you should be able to use the `from_version_info` constant in the `try/finally` block, but I think you should be able to check that the `finally` is set in `__main__` in `__main__` in `sys.version`
Is there a specific reason why this isn't `--verbose` in some way? I'm not seeing it in this PR, but I'm not sure it's a good idea to include it here.
why is this change necessary?
I think we can remove the `isDataZeroForReporting` and `iswswsLR` methods.
Please remove this line (and in other files too).
I think the latter would be more useful to have the ReadStop rather than the value of the handle.
It's better to use a boolean for the same repo, and use it here.
This needs a `vol` label.
I think we should add a `fmt.Sprintf` function to this function.
Should we rename this to `local_save` or similar?
This is the fix for the task.
This should be `arguments-out-of-order`.
This should be `snackbar`
nit: you can use `const std::vector<Host>`.
This should probably be a `@return {...}`, since the `string[]` is used in many places.
I think we should be using `RemovePleasings` instead of `RemovePleasings` here.
This is a breaking API change.
The `m_reader` can be `null` if the `opts` is `true`, but the `get_num_models() != 1`, so it is not necessary to do it.
I think it's better to have a method for it.
This should probably be `flb_debug`
This should be just `""`.
I think we should add `debug` to the `buildaction` package.
should this be int escape?
I think this should be `Accountable NULL_ACCOUNTABLE = () -> 0`
I don't think we need to have a `*` in the package.
This is a part of the fix.
The guidance is only meant for a subset of users. If they are ready for guidance that should be able to be a regexp of the label of the label.
Can you explain why we need to add this to the `s5` list?
@jaeilepp this is not the right fix. The `UNIQUE_VIOLATION` error should not have been added to the original exception.
This is the fix, but the tests now rely on the `ANC` format.
nit: can we rename this to `getMainnetConfig` to make it clear what it is used for.
I think this is not correct. It should be `Map<T>`
Not sure if this is the right thing to do, if it's a user who has already added it, it's not a good idea to set it to a valid default.
I think we can remove the `tenacity` here and the default value for `python-dateutil` and `python-dateutil`. The `git grep grepping` version is still the default for `tenacity` and `git grep grepping` version.
Why did you remove the array parameter?
`KEY_CLIENT_SECRET` is not used anywhere, please remove it.
This is the wrong place to set this.
I'm not sure why this is here, but it seems like the tests are failing because of the `Server started` being set.
Is there an issue tracking this?
I think this should be `BuildMetadata`?
I don't think we need this. We're going to have to make sure we don't have the same email as we did before.
Please avoid wildcard imports. Please revert them.
This test is not related to the PR, right?
I'm not sure if this is a good idea to remove.
I think this should be called `apply_runtime` instead of `apply_runtime`
The `tx_begin_read` method was deprecated for a while, so I changed it to use `tx_begin_write` instead of `auto block`.
This should be a `prepend` constant.
This should be `public`
I don't think this should be here
Can you add a TODO to remove this?
nit: I would put "to avoid problematic characters in filenames."
Why do we need a separate config for this?
Why is this removed?
`messageConfigs` is not used anymore.
I think this is the correct place for this. It's used in the `forEach` loop.
I don't think this is needed
Should this be `local`?
Why did you remove this line?
You can use the shorthand here.
This is a bit of an odd place to check for `is_merge_or_booted` (or some other `merge_or_booted`) but that's not the case, since it is a new thing, it's not a boolean. I think this would be a bug in the future, but it's not clear why this would be true. I think this would be better for a `is_merge_or_booted` check.
So this is a good change to the `params` list?
This is a bit of a nit, but I'm wondering if we can keep this and have `BftTransactions ibftTwo` return the same value as `(BftTransactions ibftTwo, "bft")`, and then we can have `(BftTransactions ibftTwo, "BftTransactions" )` on `(BftTransactions ibftTwo, "bft" )` on `(BftTransactions ibftTwo)` and `(BftTransactions ibftTwo)` and then have `(BftTransactions ibftTwo, "bft")` on it.
I think it's better to check if the skip_session_tracking? is true for the `.find_search_session_from_params` action, and check if the params are empty (and the `.find_search_session` action is not `nil`).
nit: this is a bit weird. I would just call `self.load_annotations(local_path)` if you don't have a directory.
this file is not in use anymore.
This is a bit of a nitpick, but I think we can put a `as` at the end of the method, and just do this in a few lines above.
This import is unused.
Should we also add a `List<String name>` parameter to this function?
This is not really a `static`, and should not be a `protected`.
I think this is a breaking change. It's a breaking change.
Use the new Ruby 1.9 hash syntax.
I don't think we should be using this API. It is not used anywhere.
for `persistence.CreateNamespace` to return a uuid object, so we can remove the need to do it for the uuid object
I think it would be better to have the option `PrivilegedCapable: false` and `true` here, and in the `else` case `true` is not needed.
why remove it?
This is a breaking change, but not a big deal. The `*` in this PR is probably best to split it into multiple lines. I'm not sure if it's worth adding `*` to this PR, as it's not a very good practice.
I don't know why we need this, but I'm pretty sure we can't use `time.cpp` in this case.
This seems to be a bit confusing, maybe a bit more specific name. Maybe `maxRequestBodyBytes = 100000000`?
should we add a `url` to these serviceAccountName string?
This seems like it is actually a "hasNull", since it's a "hasNull", and not a "hasNull", so it should be called "hasNull", not "hasNull".
this could be localKey
I think we should keep this here. We don't want to keep this as a param for every other case, so we don't have to make it work with the other services.
This is actually dead code
why is this import removed?
I think this is the right change. The current description is a bit misleading, it's a bit confusing. I think the most important is to have the dashboard path as a practice, not a dashboard path.
Why do we need `statement_type`?
I'm not sure why this isn't called. I don't see a good way to do this, but I don't see any code using it in `dynamo_thread_init` for `new_NO()` and `new_NO()` in the `wait_for_event` call.
Style nit: I'd prefer `get_lambda_name_from_arn` over `get_lambda_name_from_arn` over `self.get_lambda_name_from_arn`, since it's a function that returns `arn.from_arn(self.name)` for consistency.
Should we rename it to something more meaningful, like `NewSender` or something?
Why not just return resp in the else block?
I think this can just be `client_options.merge(read: {mode: client_options[:read]})`
I think this should be `parity: true` instead of `preferredMimeType`
You can use `const` here.
Why did you change this?
@sparrowDom Just curious, is there a test that sets `StandardCharsets.isDebugEnabled()` to true?
I think we need to use the `_` here.
This is not correct. The test only tests for `batch_size=1` and `batch_size=0` are in the `show` fixture.
why do you need this?
It's not a good idea to include the `ContainerInterface` in the `ServiceLocatorInterface` class. It should not be used anywhere else.
Just curious why this was changed?
This is not used anymore.
Are there any cases where we can't create a storageAPI that can't be nil? If so, we could just always use the default, so we can remove the need to create an empty string.
This is a bit confusing, as the key will be key with next available rid. Is it possible to have a separate key for a while?
This is a breaking change. The `SuluCache` method is called in the `Builder` class.
I don't see where `import subprocess` is used?
I think we can remove this.
This is a breaking change.
This function is called in the `primary` class, so it should be renamed to something like `BecauseTabIcons`
I'd prefer to keep it as a property. It is not used in any way, but it's not really a good name. It's not a big deal, but it's just a thought I'd prefer to make it a function in the future.
Nit: I'd prefer to have a `IServerAddressesFeature` property that has the `ICollection<string>`
Does this work? I don't see it being used anywhere, is this related to the previous commit?
I think we should keep this as it was before.
why not just `errno == normalSpan == 0`?
This was not a problem, but the `_keys` function is a bit confusing to me, because `_prefix` is not a `*`. So, I'm just trying to understand why this is necessary to handle the `*` case, and I don't know if it's the case, but I think this is something we can do in the future.
I'd rather use a `TimeBased("%a` here, as it's a bit confusing.
Shouldn't this be `|| false` instead of `||` ?
Is this file still required?
I'm wondering if this should be `Iterable[string]int or a pointer[string]int`
This should probably be a `prefix[column_label[0]]` key.
This is the main change that is needed for the environment variable in the docker environment variable.
why not use `f`?
I think we can use `builder.transformPaths(path -> UTF8String.fromString(path.toString(), null);` here.
I think this is a good candidate for `getattr` to return `None` for a `is_integer` case.
I don't think we need this here since we only have one `create_view` and `licenses`.
remove empty line
This test should be `IllegalArgumentException ex`
We should probably add a `bisect_annotations` annotation here as well.
The `input_text` is already `append(input_text)` so we can remove this line.
I don't think we should add these values to the top of the function. I think we should add these values in the top-level module.
I don't think you should remove the `if` statement here.
I'm not sure if this is correct. I don't know how to do this.
This is a breaking change, but I think it would be better if you did a `go get -u github.com/xeipuuv/gojsonschema`
I'm not sure this is the right fix since we are not using the `NVIDIA ")` anywhere.
The `code` property is not defined here, as the original `if` check will not be present.
@KonajuGames - How do you feel about this? I think the `api.Name + "=([0-9A-Za-z_-]+)` can be removed.
Should we add a `create_to_random_hash` method here?
You need to do this for the `GlobalSamplingRule` to be able to do `Sampler.RegisterRule(new GlobalSamplingRule)` and avoid the `if` conditionals here
@jridgewell Is this a leftover?
nit: let's call it `moveToFolder` to be consistent with the other attributes (i.e. `menu`). I think this is fine for now.
Is this the right thing to do with metricReaderOptions?
Should be `@var`.
This is not the only change that will work. I think we should move it to the `FileUtil` class and remove it from here.
Can we revert this change? It's not related to the rest of the PR.
Why is this change needed?
This is the only change that affects TF providers. The `PublicLoadBalancer` option is to remove the `true` check from the `true` to keep the old behavior as is.
I think this was added by accident.
We should probably add a `helper_Instrument` constant here to explain what this is doing, and what the `helper ButtonHelper` is doing here
@gustavonalle do we want to confirm that this is expected? I think it would be good to have an alternative solution to move it to the caller.
This should be `const`.
Why are you adding a new constructor here?
This line was causing the problem.
This will be a bit of a weird pattern. Maybe it should just be a `# Ensure Braille is updated when text changes`
you could use `String.save(String, StringComparison)`
Is there a specific reason for this change?
Why is this deleted?
@mfojtik this is the change you made to add the ECSIPAMPluginName as well. The ECSIPAMPluginPlugin type is the type of the ECSIPAMPluginName.
Since this is the only function in `BaseModule`, I think we should remove it from `model_func` and use it in both places.
This should probably be `sh.cmd` since the new `nix-env` is a global option.
Remove the copyright?
this is a bit weird, it's a bit confusing. I think it's better to have it be an error.
I'm not a big fan of a double quote here, but it seems like it would be better if you could just pass in the list instead, then you don't have to pass in the list.
I think we can remove `pollInterval` and `pollConfig` altogether.
Use the new Ruby 1.9 hash syntax.
why is this removed?
`reduce_for_stat_function` is a public API, so this should probably be called `_reduce_function_model`.
We can probably remove the `else if (hasListenOptions && !hasServerAddresses)` altogether.
This file is missing the `#include` tag, not the `type` tag.
I think you should remove these lines
@dvoytenko @jridgewell - I think this should be `true` instead of `true`?
why not use `0` here?
This should be a `Exception`?
`parentDom` is nullable, it is always non-nullable. It is the same as `!` on line 147, but we can't change the `!` on line 148. I think this is the only place where we use `!` on line 148. I think it should.
I'm not sure about this - we should catch the error and not log it.
why are we storing the resource options here instead of just storing them in the struct?
so the previous version was wrong before?
I don't think this is needed. It will be used when creating a boost::make_iterator_range() function.
Just curious, why the task has been replaced with `const` ?
If it's a;", then it would be good to add it back to the end of the string.
This should not be a part of the PR.
Please add a description about what the user does and what the user does and why it's needed.
I would say `parallel.BoolParameter` instead of `parallel.IntParameter(default=False)` so that we know the number of processes will be the same as the next one
Nit: I think this import is not needed.
This should be in `typ.Bool()` and `typ.List()` as well
This test is testing the wrong thing to do with the previous one.
This doesn't seem right to me, I'm not sure what's going on here.
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
Is this meant to be handled by the new data?
Unnecessary spacing detected.
you can use null instead of null
This is the main change.
we need to use a default value here, as this is only a default setting, and we can use it in the `config` package.
I don't think you need to set access_level here.
Please add a license header.
I'm not sure what the best way to do this is, is it possible to have a test case for this?
Rails/InverseOf: Specify an :inverse_of option.
This is the same as `destroy()` in `app/services/test_iove_iove_flow_id.c`.
"Enable or disable starting Nano PoW Server" -> "Enable or disable starting Nano PoW Server"
I think we can just remove `newLen := len(bps.blockStates) - len(other.blockStates))` and remove `other.blockStates`
Why remove this?
This is not correct, because it's an object that is nullptr.
@jsoriano I'm not sure we need to do this here. If we can't do this then we should just remove the old code.
@jcotela is this going to be a problem if we have a non-default value?
I'm wondering if we should not have a default value in `myproto_gapic.yaml` here. I would say that in this case we should not create new configProto and load the configProto.
This should use the `replacement` variable instead.
@michaelkuhn Do you know why we have `nodeConfig.Docker` here?
Why the double negative value here?
This should be `!=`
Please use the `Helixort` method instead.
this is not needed
Layout/TrailingWhitespace: Trailing whitespace detected.
This was a bug, the `torch.max` was not being called on the `torch.max` below.
I think this should use a more specific name
The package name should go before the package name, it's no longer required.
Why was this removed?
I think you can delete this line
It looks like this has to be a single `id` element since we don't need to use it for everyone. I think this will need to be an `id` element.
no need to check for null
We should add a `TODO` after this to make sure the div is not available.
@jakexksks are the changes in this file needed?
This will be called by `configureNativeLibs` now.
Can we get rid of this line?
I think we can move this to the `init()` method, since it is a `ServiceBuilder()` method.
This is the only place where you use `std::unique_ptr`
Should we add a new `apiutil` or similar?
Why is this import changed?
This attribute will not be used.
I think we need to keep this interface as well.
Why remove this?
This is a breaking change, but it seems like we could be using the `URL_DOMAIN_test` helper for that?
This is the only change I'm not sure we want to do anything here. The `Create` snapshot is already using `Create` in the error handling.
This change seems unrelated to this patch?
I don't see where this is being removed.
`entry.getKey()` can return a `List<NameDeclaration, List<NameOccurrence>`, so you can get the same error as `entry.getKey()`
is this change intended?
Is there no way to do this now?
Please remove the empty line
Do we need to add it to `Preconditions` or can it be renamed to `custom-elements-es5-adapter.js`?
Nice! Just curious.
This was changed to use `go test -1` in this file.
I think this is a bit confusing. How does it relate to the `r` field? I don't see it being used anywhere in the code.
This is a bit of an unrelated change, but it looks like the changes in the PR.
"... which will result in a crash." I think we should add another description of what "Y3N@C80" means.
Thanks for the contribution! I think it would be good to have a test for the new behaviour here, but it would be nice if this was a bit simpler and more readable.
This should be a constant on the next line
What is the point of this change?
This seems like a breaking change?
I think this is the only change that affects `close` calls.
Why do we need to set the transfer handlers?
I think it would be better if you could use the `attr_value['string']` property rather than `attr_value['string']` property. It's not clear what `attr_value['string']` is, and if you're using it it wouldn't.
This will be a breaking change in the future. I don't think we want to make these changes in the future. I think it would be better to have an `MetricReader.Collect` arg and return a `MetricReader.metrics.Start()`.
Can you add a check to ensure that this is a configurable node?
I don't see any usages for these.
we should add `@since`
These 2 changes are a leftover from #4578.
This is just a thought, but I don't think it's a problem for `renamed`.
Is this change needed?
We can remove this.
Should this be `change = [changed_attributes[name]] if attribute_changed?(name)`?
This will fail on every single line.
s/s:%s/s:%s.%s/ ?
I'm not sure if we should do this. The other option would be to just do `uint32` instead.
I don't see where this change is doing anything. I don't think it should be in this PR.
I think it is better to just return the result here instead of doing the check in the function.
This is a little weird. What's the point of this hash?
This line is not needed.
I'm not sure this is the right place to put this. The old `lb_recent_listens` is used for the new `recent_sorted`. The new `recent_list` is not used in the code, so this is a good idea.
Can this be removed?
Why is this needed?
I don't think this is right. It's important for the `TranscodingInfo` session.TranscodingInfo.IsVideoDirect` session.TranscodingInfo.IsAudioDirect is defined as session.TranscodingInfo.IsVideoDirect, but it's important for this feature. I don't think we need this check here.
`s` is a `String` so it should be `e` or `e.i.e` instead of `s`.
This is a bit dangerous, as it will be a hard dependency on `application/` and `application/`
The default should be 5s.
I think we should be able to catch the exception in this case, because the caller is already doing the same thing.
This file should be removed.
do you still want to add the new `signer` field?
I think it would make sense to move the serializer to a constant so it can be re-used.
Please add a `import pickle` field in the `mne.utils` module, and put it in `mne.utils`.
why did you change it from function *key, const char *target?
This should be moved to a different module (and should be moved to the other file) to be able to get the `_migrate_bool()` calls to `_migrate_bool()` in order to run the `@deprecated`s
What is this change doing? I don't see why it should be there.
We should add a `TODO` to the interface that I'm not sure if it is actually used or not.
This method is now being used in `System.Diagnostics.CodeAnalysis`.
@smarterclayton should we do this in `validateInput` or should we move this into the `NewComponent` package?
I think we can remove `activity.runOnUiThread(new Runnable())`
This is a bug fix. The only time this was used is in the code that is being split into 2 lines.
@matt-gardner Is this the correct version?
Why the cast to `onPushMessageReceived`?
We can remove this line
I think we should use a different name for this.
Should we call it `T`?
why is this in a config file?
I'm not sure why this is needed, it is already in the `make fmt` package.
I think this needs to move to `System.Bloom.ToCompression` so that the Nethermind.Blockchain is already in the `List`.
This is a change of behavior. Is this a breaking change? I'm wondering if this is the best place to change.
This should not be necessary, since `--show` is a `True` flag.
Why is this needed?
Please rename to `PortPort`
I'm not sure about this. It seems to be a good idea to use the default value. I would suggest to use the default value, and then use it in the test.
This is a bit weird, I don't think we need the `if` here
I think we should also check for a simple simple `default` here.
Maybe `NumServices` is more clear?
I think this is the one we want to check for an empty string. The assertion is that if `Server started` is set, then `GET` is `Server started` (which is what we want).
I don't see this method called anywhere.
I think we should use the new interface here.
Why is this removed?
Use `.user_to_mailing_list` instead.
use the `||` instead of `if`
I think we should keep this method as it was before.
why remove this?
This seems like it should be in `LoadStateTree`
This seems to be missing a `typeof(int)`.
Remove this empty line.
I don't understand this change. It is not related to this PR, but it should be reverted.
this is not a big issue. `const` is the same as `const`
This should be `Collections.emptyList()`, not `Collections.emptyList()`
why remove it?
I'm not sure if this is a right change. It is not needed.
Is it possible to keep `HashMap` in the same way as `Function`?
I'm not sure this is the right place to put it here.
@mfojtik why is this change required?
why is there no `issue21574` removed?
This is the new function that was used for the test. It was just testing the wrong test.
I would use `Use `:raises` instead of `:` since the function is already called in a `TrimSpace`
Should this be `!mol.getPropIfPresent(key, res)`?
please remove unnecessary changes
This isn't a good candidate for a name.
this is the only line changed in this file.
Is this used somewhere?
Maybe we should just use `builder.Close`?
I don <msg> I think we need to use a constant for apiConfigs, as we use the default value in the API
(style) code indent should use tabs where possible
I think the original code was wrong. The `cancel` call here is already in the `pthread_join()` method.
Do we need the full user properties for this?
@mfojtik why do we need a different `global_not([disabled]` ?
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [98/80]
I think it is a good idea to change the condition to `isNumber` here, as it's the default.
let's make it a private method
This field can be removed, since it is used in multiple places.
Why is it ` fieldValue` and not `span`?
nit: I'd rather have a default value of `false` here.
This is a breaking change, but the tests are failing because of an invalid error.
nit: could you add a space after `pageDashboard`?
This header should be removed.
Should we add a `GetAttribute` method for this?
Why is this not a pointer?
Why was this deleted?
I don't think we need to pass the `TxPool` parameter as the last argument to `id` since the `TxPool` parameter can be used in other places.
Why do we need to build a version of `ver00-\uCoreFF`?
Was this just a mistake or just a typo?
I think you can just use `comms` and `comms_bokeh` here
I think it would be better to add some type of `packageConfig.shortName()`, `packageConfig.shortName()` and the next one to `packageConfig.packageType()` and then just do the check for `packageConfig.packageType()`.
This should be in a separate PR.
I think this should be `resource.not_resource` instead of `libkb.not_resource` (or similar)
I would prefer a bit more explicit, `LongNumber` or `Long scaledNumber`
`warnings` is a tuple of str. Could you use `assert module.CLASSES.get_CLASSES_with_type(repo_named_modules))`?
this is not needed anymore, we can remove it
I would prefer to keep the `serializedDataSize` prefix here as it is a bit confusing and makes the code more readable and easier to read.
Should we use `string` here?
I think we should keep this check in place. The log message should probably be more explicit.
I think we can change the name here to `base`
I think this is not the only change needed. The `rollback` is already there, right?
is this related to the PR?
This seems like a good candidate for a `perr` argument.
Do not use semicolons to terminate expressions.
Why this test is changed from 14689 to a constant?
`create_no_window` is not the default. You should create a new default.
I think this is a bit of a tricky bit, since it's a bit of a hack to make sure the requester is not in a requester with an error message. Maybe something like: `find_safe_purchaser? = false`
This should be moved to the `if not network.config.has_fee_estimates()` condition. The `if` above should be removed.
I think we can remove this and the others below.
Should we make this `memory.Allocator`?
I think this should be in a `db/api/db/constants.go` file instead, to avoid having to pass through all these functions in every single place.
This looks wrong to me, but I think it's fine to leave it for now.
Why is this change necessary?
I think we should add a check to make sure there is a new settings file, and the checkstyle may not have to check that the settings file has been added.
it seems strange to me that we add an `patch` here which will allow the user to access the vector again. Why do we need to add `patch` here?
@jridgewell Is this a breaking change? It seems like it should be a breaking change.
Is there an explicit reason why we wouldn't want to include the `from.length` in case the exception is thrown? I think it would be better to have a `try catch` here, and then let the exception fail the same.
This is not the right place to put this. It should be a separate PR.
I don't think this is the right approach. It's a bit of an unusual way to get the volume configuration from the client.
Why do we need this return?
Nit: please use `utils.v2` instead of `Config`.
This is not needed.
I think this is a little bit over-kill. I'd prefer if we could use `newSlice()` to avoid the need to do this.
I'm not sure if this is a good idea to add this check here.
I think you need to check that the value is in the default value in the `externalIPPoolController.ValidateExternalIPPool`
I think this should be `Optional`.
I don't think this is the right approach. The `Subrepo` is a good idea, but I think it's better to be explicit here.
Why are we using `kbp_record` here?
I think it would be better to have an `@SuppressWarnings` annotation that is not used anywhere in the `AbstractObject` class
Why the changes in this file?
This should be `c.mcl == 0`.
The JavaTokenKinds.DECIMAL_LITERAL should be the JavaTokenKinds.INTEGER_LITERAL
Please revert this line.
Why did you remove this assertion? Is this a bug?
@sparrowDom This is the main change.
This was a breaking API change, so it's now always called
You should use `assertThat` here
Is it possible that `get_elem_type()` will return `List<object>`?
The `Shutdown` should be in the next line.
`timeLeftToClaimRefund` is always 0, so this should be `if (deposit.GetTimeLeftToClaimRefund(now)`
This is a bit weird. I don't think we should do it.
We should only do the mouse settings in the container if the container is not in the container container.
Should we make the method invocation private as well? I think it would be more consistent to have a constructor with a constructor that takes a `ToTovariantString()` and then pass it to `ToInvariantString()`.
I don't think this check is necessary. The `ob` variable should be defined as `ok` in the error case.
Is there a reason why we can't just use `chartType` directly?
Why do we have to set the empty value here? I think it is better to set the empty value directly.
This should be `const expect = require('chai')`.
I don't think we should log this error. It's not clear what the zone means.
I'm not sure if this is a good solution. This will make the tests pass if `prob_range` is not a float.
I don't think this is a good approach. It's not a good thing to have to change this behavior, but if it's just a small logic change, we should have an `if` for this instead.
is this a good idea to test the specific URL for the new URL? I think we need to test the specific URL for the new URL, as it's the only one we need to test.
What does "lock" mean here? Why not call `unique_lock_t lock`?
I think you can just remove the `TagID` from the local variable and use `key.append(reinterpret_cast<const char*>(&tagId), sizeof(tagId)` directly. Also, the `TagID` is not needed.
These should only be imported if TYPE_reader is not available.
This is not necessary, as it is already added to `checkout_id` field.
I think the idea behind this is that if the DBPDataSource getDataSource is null, we can't use the public API. So we should not change the public public API.
I think this should be `_log.LogError`
Please use `TEST_ASSERT(bv.getNumOnBits() == std::endl)`
Can we move this to `setAuditEnabled()`? I think it would be better to have it be called `updateRole` and `updateRoleAttributes`.
use a constant for this
The worker_start_time is already zeroed by the time being set before the time is zero, but the time is zeroed by the worker_start_time. So, the time was zeroed, the worker_start_time is zeroed by the time being zeroed by the time being set to expire at some time. So the time was zeroed by the time being zeroed by the time being zeroed by the time being zeroed by the time when we get the zeroed by the time.
This is a bit of an odd implementation, but I'm not sure what the best thing to do is is, it seems like it would be nice to have a helper function that does the right thing.
Why is this import removed from imports?
I think it would be better if we could add a default value to the `HOUSE_OWNED_BY_ACCOUNT` property, rather than having to add a flag.
This should be removed.
I'm not sure this is the right place to put it.
Why was this removed?
I don't think this is the right place to change.
nit: this should be `TestBincoverRunMain`
It seems that this is the correct fix, but the PR is still in the commit message.
Is this needed?
Shouldn't this be `client.getLocalPlayer().getWorldLocation()`?
I think we should be able to use the same constant for `EXPR_NULL` and use the same value for `EXPR_NULL`.
I think we can use `r.Header.Get` here.
The `break` here looks wrong. I would have left it as `false` since it is the same for the `if (validSelection == true)` above.
Could we have a test case for this?
`copy-groth-params.sh` is not used in the filename.
nit: can we rename this to `vol`?
why do we need this?
We should check if this is a valid value or not, instead of using the flag name here.
if `min_alpha` is 0, then `min_case` will never be `null` and so `min_alpha` will be `null`.
Why not use `Bytes()` directly?
Does this work with all of the new tests?
Add a space after the last item of an array, otherwise the string value will never be used.
I think we should just add `@return {...}` to the `Object` (and keep the other methods to be consistent with other methods).
Can this be `1 << iota`?
This is the only place where we return `true` in the `if st == context.DeadlineExceeded` block.
This should be a `multi` attribute.
Why not just `if (is null)` ?
@scheibelp I think the `failsafe-out` part is a bit ambiguous, can't you?
It looks like `wallet->receive_async(std::move(block), account, node.network_params.ledger.genesis_amount, [response_a](std::shared_ptr<nano::block> block_a)` is only used by receive_action when opening accounts. Can we also remove that line?
I'm wondering why we need this in the test file, but we should be able to get rid of it in the `local`.
It seems like this should be `final`
I think we should be able to use `offset + bound /2` here instead of `offset + bound + bound] < target` and avoid the need to check for the length. It would be nice if we could just use `offset + bound / 2` and then use the length as an integer.
I don't think we should change this to `ClientSession`
Why is this a global?
This should not be needed. It will generate the cmd if we are not using it.
Why is this needed?
This was removed.
This should be `object`. The ref should be `!=null`, but the ref is not a function.
I think this is unnecessary now.
We should probably check that these are all the way up to the group.
Line is too long. [82/80]
Is there any way to avoid this annotation? It seems like the more common pattern is for the use of this code and the more specific thing is that we don't need to use the circular imports for every task, but I'm pretty sure that's not the case.
This import should be removed.
can you move the mock to the top?
This should probably use the `get_id` helper method.
this was the only change I found, so the previous code was not doing this, so the `n:v` was missing.
Should we make the process.argv.find((arg) part of the process itself?
@jmhooper @jridgewell I'm not sure why this change is needed
We don't need to specify the `error` in the keymap, right?
Why not `blob.Bucket.Model`?
nit: remove extra empty lines
This should be `UnsupportedOperationException`.
I think we can remove these `sign_in_as_user_with_subscription` altogether since it is now just a single place where we're using `feature`
This was the only change needed to make it work with `iframe.onload`.
This property is not used, so can be removed.
Does this need to change?
I think this should be the default, since the type is `final`.
Use the new Ruby 1.9 hash syntax.
Is there a way to make the config configurable?
Why not use `LinkedOriginalTracker`?
The naming of this should have a different name, e.g. `is_window()`
I think we should rename it to `HttpConfigurationAction`
It seems that `time.Now()` is called twice here, but `time.Now()` does not have a `time.Now()`
Should we also test that the 401 happens in `describe` block?
This was a typo. I was looking at the `*` in the name, but it was a `*` before, so I had to look at it.
I would prefer to use `error` here and below to be more explicit about the other logs.
Can we make these typing import final and make them return the new one?
is this the default behavior? or is this a breaking change for all versions?
I'm not sure why this is necessary. I don't see why it should have been here.
Nit: This should be lowercase.
This is now done by the `ProxyProxy` below.
I think we should move this to the `@private` class as it's not used anywhere.
What is the purpose of this new property?
Please use the `TranslationAdapter` class.
This may be wrong. The `nullable` is a `unsigned()` function, not an `Array`.
Why do we need to cast to `ImmutableList.copyOf()` here?
should this be `@VisibleForTesting` or something?
This change is not needed anymore, right?
Should this have a `Set` field?
Maybe we should rename the tests now that the tests fail.
`from` is not needed.
This is a bit weird - the `prev` command is being used in the `env` command, but it's a separate function, not the `request` command.
Can you add gitea copyright line to header (and keep gogs one next to it)?
Why is the sortRecLen needed?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This was removed because it was already being removed.
This test is not working.
Why not use `CreateToken` here and not use `CreateToken` directly?
This import is unused.
This test is failing because of the `testing.T` in `testing.CreateCreateCreate()`.
Why is this function needed?
I'm not sure if this change is correct, but the `setDebug` function will return a `List`. I think it should be a `List` or `setObject`
You can use `.by_topic` instead of `.topic.name` here
you don't need this change
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is a bug fix. The `String` is not necessary.
This import is unused.
Wouldn't it be better to set `nudl` in `MimeHeader` instead of passing it as a string? I think that's a bit confusing.
I think we need a more proper name here, `xLR_HAS_X11_BACKEND`
What is the purpose of this change?
I think this should be `final` since it is not used anywhere else.
I think we need to keep the old version as well
This looks like it's just a small thing, but I'm pretty sure it's not used anywhere in this PR.
I think we should be able to use `Dependencies` in the future.
Why is this necessary?
What's the purpose of this loop?
I think we should be able to set this to `true` by default in case of `true` being `false`
I think you can just use `Msmq` here.
I would use `FactorFactorRequest.Uninitialized` here
I'm not sure this is correct. The port 15014 is used for testing, and the server is used for testing.
It should be the standard standard library imports
This import is no longer used.
I'm curious why this is needed, and why it was done in the first place.
Did you mean to change this?
I don't think you need to escape `ethereum` here.
I think this is not the case where the exception is thrown.
I'm not sure this is the right way to do this, but if we have `-index+1` it would be better to have it be `index+index` and then have it be `-index`?
Do we want to keep this error log for a warning or is this a debug log?
We can remove this line now.
"Filters" -> "Interceptors Interceptors"
if code is CodeOK, does it return nil?
@scheibelp Can you please update the doc string to match the new version of the new version ?
Did we ever hit the tests to pass?
I think this is not a valid fix.
this is not the default. You need to use the `log.SetOutput` function to call the `switch logfile` function.
This import should be removed.
We should remove this.
Isn't this redundant now?
I don't think we should use this constant in this file, it's only used once.
Is it possible to get this error from the file name and instead have a `get_success_doc_TYPE()` method that returns a boolean?
why not just `configconfig.h` or `configconfig.h`?
Can you add a license header here to make sure the configuration settings are correct?
you can drop the old one, it's not needed
This is a very good example, but I don't see a reason why we need to set it here. I think it would be better if you could just set it to a default value, and you can set it to `dict(type='SGD', lr=0.01, momentum=0.0001')`, then you don't want to set it to `dict(type='mstrain_3x_coco.py)` in this case.
Can't we just make this a `EXECUTION_STOPPED(65)` instead?
The previous version is correct. The `utilities` is only available in `ansible_playbook` and not in this PR.
@tgamblin Do we need the `sentryAddrs` here?
I would put all the files under `_render.storage`.
Why do we change this?
This is the only place where we're using this. Can we use `aria-label` instead?
Do we need a test for this?
I think this is a leftover from debugging. I'd prefer not to change it in a PR since it was not a big deal.
What is this error message supposed to match? I mean, this should not be changed.
>Field` [](start = 8, length = 6) nit: we can use `time::TimeConversion::unixSecondsToDateTime(timestamp)`
Should we just return the error?
I think we should also add a type hint about the type hint in the future.
I think we should add this to the interface, otherwise we'll have to update the `version` field as well.
I think it's better to use a constant here instead of a hard-coded value.
Is this needed?
I think this should be called `support_` or something.
I don't like this one, but it seems like we're using `page` here. We don't want to use `...to raise_error` anymore, which is the same as `to raise_error`
We can remove the "Using delegate supplier: " + clazz.getName()" since we don't need the "For example" message anymore.
I don't understand why we have this `getPort` call. Can't we just call it `this.id = remoteHost.getHost()` ?
I don't think this is a valid package. I think we should import the `utils` package and import it from the `utils` package.
This test is testing the same as the `AccountActor` field, but I think it should be `CreateCreate` instead of `CreateCreate` so that we can remove the `.Return()` call below.
same as above. Please use `* 10000`
This check should be in a `if` block.
Why is this removed?
We should also check if the value is empty.
Indent when as deep as case.
These values are actually not necessary.
This is not correct. It will be removed after the loop.
why not catch (\Exception here?
This will be a debug message, but I'm not sure if it's necessary to include it in the debug log message.
I think you should remove `Timestamp` here.
why change from 1?
I'm not sure about this change. I'm not sure what you mean by this.
This test is testing the right thing. The `object` is not a `CustomObject`, so the `object.getPrototypeOf(object) == CustomObject.prototype` is the same as `object` in line 377. The `object` is not the right thing to do.
This should be `arg_label`
why is this changing?
This should probably be `createchainAddress`
I'm not 100% sure this is correct. The only case where the value is `0` is the correct value. The only thing I would expect is `enabled.gpu_validation_reserve_binding_slot` is to be set to `0`. I think this check should be redundant, right?
I'm not sure if it would be better to return an array with `checksum` (or a local variable) and have it return an array of `checksum`.
Is there a better solution?
Why not just call `ReconcileBootstrapData`?
What is this for?
Is it possible to have a `GetEncodedLength()` method in a `txib` that is called by `txib.GetEncodedLength()` and then call it once?
Line is too long. [81/80]
This file should be removed.
The default behavior of `FileClient` is to allow `self.file_client_args` to be `None`, so I think this should be `self.file_client_args`.
why not using the `DynamoCore.enable_ID` here?
This is a bit confusing. Why is this include needed?
I think we need to keep the original `name: block` here.
I would put it in the `vpcConfig`
I'm not a huge fan of this. It seems like we're not using this anywhere in the codebase. What do you think of adding it to this controller and using it in the controller, and using the controller directly instead?
Thanks @erwinmombay! Thanks for fixing this. The only time it gets called in the code is `list.shuffle`.
Maybe this was just about to make sure that we're not using the old API?
Why this change? The other way around this is to throw the exception, but the source file doesn't. The problem is, if there is a particular proto interface, it should throw an exception, and the source file should not be able to handle that.
I'm a little confused by this change - it seems like we are adding a new environment variable to the `numImagesToDeletePerCycle` and then doing a similar check in `Ray.Drop()`?
I'm not sure this is a good idea. The BaselineTree data is in the Baseline Module state, so it is a little confusing. I think the BaselineTree data is in `pkg/configurator` and the BaselineTree data should have a BaselineTree data.
Should this be a `json:"owner_uid,omitempty"`?
We should probably add a `// var var var var var var var and just use `// var var var var var var var var var`
I think we can remove `save` from `findOneAndUpdate` now.
why the double quotes here?
I think the original code was correct here.
Should we set this to false in `tls.Config`?
Since it is not used in year turns, I'd prefer not to use it here. It would be better if we could use `time(&current)`, but that would be a bit easier to understand.
nit: can we call this `SULLIUSCEP_LOCATION`?
This function is called in the `domain_name` module, not here. It's not a boolean, but it should be either a boolean or a boolean.
Why `self` and not `self.build`?
This is not a change in behavior, but the old code was a bit surprising.
@deads2k i'm not sure this is the right fix.
I think we should remove `Not Found` from the test test case as it is not used anywhere in the code
This is a bit of a bit of overkill, but I think it would be more consistent to use the `Error.Fatal()` function in `pkg/common/keyprovider/common.go`
I'm not sure about this one. It's better to use `pytest.mark.parametrize` to get the test output.
nit: use `refMol` instead of `useChirality` since you are already passing it through through the constructor
I think this is a bit ambiguous.
I think we should import the lazy module here.
This is not used.
I'm not sure if there's a reason for this.
Why are we removing this?
`checkExprDepth` is already defined here
why did you change this?
This should be removed.
`this.props.getPlugin` returns a boolean, so this.props.editors.forEach(target) => {...}` will do.
This is not the same as `mapper` in `TimeFunction.zipWith`. The same goes for the one below.
Remove newline here.
I think you need to do this after `wallet.defaultAddress` to be `nil` instead of `wallet[0]`
I think this should be done in `this.onTrigger()` as well, in case of `this.getTrigger()` returns `null`
This is the fix, but it seems to me that the method is not a method that is not a method that is passed in, so this method can be removed.
This file is not used anymore.
Why is it possible to remove this error?
This one is a breaking change. It's probably not a big deal, but I think it's a better idea to add the `var` inside the function.
I would use the `===` operator here. We don't need to pass the `self::` to the `self::` variable.
I would use the version of the Python Python. You can use the same version for the Python Python.
@agramfort I guess the 15 days will be searched before the value is returned?
I think it's better to use a flag for this.
I think it is better to be explicit here, as in line with `--conn-retries`.
Can we just assert for the length of the LooseVersion?
This will be a breaking change in the PR.
@jona-sassenhagen this is a breaking fix.
remove empty newline please
Should we rename the method `Discovery` to `Schema`?
I don't think we should set this in this way, since the `*` is already in the `*` folder, and it is not in the `if`.
You need to define a macro for the sake of readability and make a new macro for the sake of readability.
This is not used anywhere, can you remove it?
This is a bit weird, the `pids` prefix should be added to the `pid` module, and should be added to the `group_group`.
why not use `64`?
Why are we doing this? It seems to me like we should be using it in the package.
I think we should be able to use the `keyGen KeyGen` instead of `bool` since it's not the type of the error
Can we put this in a new line?
I think this is the right fix since `default` is not a valid `Transport`.
Metrics/LineLength: Line is too long. [123/120]
Can you add a `TODO` to remove this assert?
why not `(props.value)`?
nit: `lodash` should be `i32`
The name of the test is a bit misleading. I think this is better as a `-` prefix, but I don't see any references to it in other tests. I'm not sure how to deal with this, but I'm not sure if it's a big deal, but it's worth noting that it's worth it.
This is the only thing that affects `config` and `validate`. I'm not sure we should keep it.
I'm not sure this is a bug. If `expected` is an array, the `expected` will always have `1` as a string.
This is a no-op, right?
This doesn't seem to work. I'd like to see a way to get the query from the Query object to the caller.
This is not needed.
Why is this needed?
Why do we need this?
I think it would be better to use a `Subscribe` here instead of a `NewSubscriber`
I think we should keep this.
this change is not correct. It is not correct. The test is still testing `cd.Status == corev1.ConditionUnknown`
This file should be removed.
This isn't a good idea, but it's a good thing to test.
I think this should be removed. If you are already doing `controller.stubs(:signed_in?).returns(true)` then you don't need the `controller.stubs(:signed_in?).returns(true)`
I think we need to do the same thing here. If the user defined Parameters for the addons stack is the same we do not want to use.
This is now done by the one in the `CreateDefaultProfile()` method. I don't think it makes sense.
Space missing after comma.
I'm not sure if the name `kindBinary` is a good idea. `<kind>`, `<kubectl>`, and `path to the kubectl binary` are the same. I'm not sure how to use `/` for the `kind` name here.
This is a good candidate for a test to run on the client.
I think this is not needed anymore, since we only want to reconcile if the user is already in the base class
@jridgewell do we need to change this to `change.propToCol`?
I'm wondering if this should have a separate flag to make sure the flag doesn't break. This will make it easier to find a way to do it in the future if we want it to be a flag.
Is this change necessary?
Should this be `filesystemHostNetworkFlows`?
Why not `Steindorfer persistent`?
I think it would be better to move this block down into the line below `wireguard`.
`true` by default, should be `true`
Is this TODO still needed?
please add a backfill for this
The only time I've found this is used is if `record` is `None`, so this should be removed.
This is a bit weird, we are using the default value for this now, right?
This will be expensive if `validTaskIndex(DeviceIndex)` is true
This should be `!rb.req.getSearcher().enableLazyFieldLoading` instead
@cramforce I'm not sure if we need the `db` here. I think we can just remove it entirely.
I would try to avoid logging the exception here.
remove empty line
This is the only change I was looking into this code and I'm not sure it makes sense to keep this.
This is a bit confusing, why not use `GetParserWithBuiltins`?
I think we should be consistent with other settings in `Config`, `Config.getConfig()`
This is a bit confusing, as it is used in deletes in deletes mode, not in deletes in deletes mode?
Line is too long. [83/80]
I think it is better to use `withIcon` here.
I think we should add the snapshot validation to the errors and use the new snapshot object.
I think this should be `responseEx.addHeader(entry.getKey(), String.valueOf(value))`
This looks like a bug fix?
This should probably be `network:3`, right?
I'm not sure if we need to add the handler to the `refreshCredsHandler` below.
Should we use `SetHeaderTags` here?
Do you think it makes sense to move the universe.SystemTime() to some utils package?
maybe we should make this an `int`?
Would you mind to explain why we are adding this change?
Not sure if it matters, but it's not clear why this is a valid `const`
I would use `std::stringUtils::partPrefix` here
why do we want this? I think we want this part of the public API
we don't need this API anymore
I think this can be removed?
(style) line over 80 characters
This is not the same as `account` in `account.go` file
We have a lot of tests for the new functionality. I think this one is more readable and less important as a follow-up PR.
This was a bug in the previous PR that was merged.
why did we need to change the `node` to `""` here?
I think this can be readonly now?
Is this always going to be a string? I think it would be better to use `dErr.Join(e.AnonymizedErrs(), ";)`
I don't know if we can get into this PR but it's probably fine to leave as-is.
I'm a little confused, why is this part of the "only depth aspect layout" case? Is it something that should be used here?
Should we add a `"` here as well?
This is not correct. `mount_volumes` is a dict, not a dict.
Shouldn't this be a context context.Context?
Why do we need to set the value to 1 when we create a new cluster?
why did you remove this?
I think this should be `debug` rather than `debug`
This should probably be `protected static boolean fragmentEnabled = false`.
This was the only place where I had to make the `example-matches STRING` be used.
Why do we need to define these as constants?
Why not `isset($options['multiple']) && isset($metadata['associationType'])`?
This should be `grant_flows`. The only reason we need to change is that we don't have to do this in this PR.
I don't think that this change makes sense. The user should be a list of files, and not a list of files.
@jridgewell I'm not sure if this is the right fix.
Shouldn't this be `'logger.log_events` instead, since we are already setting the default for the default?
I don't understand this one. Is this change correct?
Isn't this supposed to be `String.toString`?
This is the main change that will break existing users. I think it would be better to move the `- name: BasePath` to the top of the file.
This is the only change I suggested in the PR.
The `key` is not used in this function, so it should be removed.
Extra empty line detected at class body end.
I'm not sure if this should be in a separate PR.
Would it make sense to add `record` here as well?
I think you can use `scheduled_for_cancellation_on` to make it clear that this will change in a future PR, and also will be a bit of an action that will not be changed
I don't think this is the right fix. We should probably make a `RemoveSuccessor` function in the `Successors` and use that here.
nit: I believe this is a leftover
I think we should move this to `get_screenshot_as_png` so that it's compatible with the other `get_screenshot_as_png` method
This is a breaking change, right? I think the code below should be removed.
So, we're using a runs to a runs, but not a runs? I think the processor is fine for now, but I think we should be consistent with the processor and not the processor.
This is a little weird, it is not a "scheduled" but it is a "scheduled"
It's not a big deal, but if we're using this, I'd say `@setup_profiler` instead of `@setup`
@smarterclayton do we want to remove it?
why was this removed?
Why is 0 a valid value? Isn't that the case?
I think this should be `String[]string`
Why not `map[string]`? It's a bit confusing since it's used in both places, but I think it would be better to have the same name here.
I'm not sure if this change is correct. It looks like it was just a copy/paste error from `blocks.ctx.Err()` and then `blocks.Err()` can be removed.
I think this import is unused.
I don't think you need this. It is a public API.
Can we remove the `role="navigation"` here?
Can we make sure that remoteHost is set to 0 here and not sure that we need to check that remoteHostIsNonLocal ?
I think this should be `type._lastDomChildSibling` since it is not a valid type.
What's the reasoning behind the `issubset` here?
I think this should be `True` instead of `False` since the default value is `False` by default.
I don't think this is correct. The `<1.6.5` is a dependency for `<1.6` and `<1.10` is a dependency for `0.1.9`.
Please use release_assert_internal (if you can't do that).
This should be a `break` statement.
Do we need this check here?
This doesn't seem right. The `var` statement is used for the wrong abs, so I think it should be removed.
I think we should be able to get rid of `WriteResponseHeader` and `WriteResponseHeader` here. We can remove the method altogether.
I don't think this is the correct way to do this. It is a bit confusing to have this in the `SELECT` list.
I think this is a bit confusing. Maybe something like "Consider using Python 3 style super() without arguments"
This should be set to the minimum data rate at which the response should be sent.
Can we just delete the whole file?
Can we add this to the other config keys, i.e. `maxFileSize`?
This is a good candidate to use `skip-common` in the `spec/services/common` package.
This test is not really testing what it is. It is not used in the test.
This is the only place where we need to log files. I'm not sure if this is the correct way to do it.
Can you add a `.get('conv_offset')` annotation here as well?
I would have expected this to be a `string` instead of an empty string.
This should be moved to line 262.
I think this is the right thing to do, since it's the only one that's going to break the tests.
Would it be better to use `import *` rather than `*`?
I'm not sure this will work. If the network is in random that the network is in random it will be in a test and will be in random. If we do that, we should be able to remove it from that network.
I think this check is unnecessary
@t3on @johnsimons I think this is a good change to the `idna` base class.
There's no point in doing this in master. It will make it easier to add a check for the timeout.
Why this change? I don't see a version of the version in this file.
This is not needed, it's already done by `isRy()`
This change is unrelated. I would have expected this to be a different PR.
I would add the default here to `ecs.pants.start-server` so that we don't have to worry about the epoch.
`from *_print_function` is a proper name.
I'm not sure if it's a good idea to have a test case with this.
I think it would be cleaner for the `@since TODO` annotation to be consistent with the `@param` annotation in the `boolean`.
LGTM. I think this is not a bug.
The changes in this file seem unrelated. Can you revert them? Thanks!
Maybe we could have a `math.unicode` that takes a `bytes` as a parameter?
This is a different header, I don't think it should be in the POM folder.
I'm not sure if this is the right place for this, I think.
translator is always a list, so it should be None
Should we add an annotation here?
I'm not sure if it's worth it to do this since the error message is not helpful.
I don't think this is right, if the full full list is present, you can't just use `ok` instead.
Shouldn't we just use `!=` here?
You can remove `spec` from the file.
This is the only line needed for the `shape` list.
We can remove this import now.
This is not the right place to put this. The `localOnly` option is not used in the code, so this should be done in `config/constants.py`.
The batch has already been executed, create new batch to execute/
This is a breaking change as it is not a "Converter{}" change.
This is a bit scary, but I think we should be using `Error` here. I'd rather check for `nil`.
We should add some details here, e.g. `TimeUtil.formatDate(this.releaseOrCreateDate)`
Why is this deleted? I don't see it being used anywhere
Shouldn't you call this function with the body_class() function?
Do we have a `default` type in these fields?
Why is this changed?
The `fileCharacteristics` should be renamed to `GetFileCharacter` because it's not a big deal.
why do we need to do this here? I think we can do this in the same way, it is only done in one place, and it is not necessary to do it in the same way as in `on_scen`
I think this should be removed.
You should use the `Transport[]` interface instead of `Transport[]`. It's not clear what is going on here, but I would expect it to work correctly.
This should be `declare(strict_types=1);`
We should add the ingress-annotation to the interface. Otherwise we can't use it in this way.
@becker33 I'm not sure this change is correct. It looks to me like the Props type is not used.
I think this is not the right way to go. The idea here is to have a `@menu` property that is used to set the default value. This is not the case for this PR, but we can use that constant here instead.
@mattpap this was a bug, and I don't think it is worth it, but I think it's worth it.
Is this change necessary or just not needed?
I think this is still needed.
@erwinmombay I'm not sure about the change here, as this is a regression.
Can we make this string a constant?
@kroitor since we don't have any of these, I'm not sure if we want to do it in the code, but I think we should do that in the code, instead we should make sure we do it in the code, and make sure we don't do anything about it.
This should be `ariaQuery` instead
Why not keep the constructor as `internal`?
Why do we need to do this?
Is this really required?
This seems to be an actual test that was not passing the full full URL.
I think this is the correct fix. The error message should be updated to match the error message.
I think this should be removed.
Please use `org.eclipse.jgit.util.StringUtils`
Why is this being removed?
I think this is a bit ambiguous. Maybe something like "No key instead of overwriting the value"?
This is a good example of why the original was changed, but the new option is to allow the new parameter to be aligned with the new parameter. I'm not sure if the name of this parameter is necessary.
This is a bit odd - if `node == ""` then `textContent.trim()` would be true. I would have expected `headingLength > 1` here.
I think it is better to have a placeholder for sync controller. It's not used in other places, and it makes it clear what is being used in this PR
Should we also remove this method entirely?
why not use the same name as the other one?
I don't think you can import from `BasicPropertyDescriptorFactory` directly.
This is a bit odd, why do you need the `VerifyNotFound`?
We should also check for platform.SiteRunning.
I'm not sure this is correct, but I'm not sure how to test this, it seems like it would be a good idea to have a test for the same functionality (which is not a problem)
Why is it OK to remove `time` here, and just use `time_dto` directly.
We should keep this one in the testing.
I don't see where the code is being used.
why not use the path path ?
I think we should keep `databaseName: 'config'` and `databaseConfig: 'config'` everywhere.
This is the main change.
Please remove this #include <boost/optional.hpp
This is the only place where we have `this->mp_SPDP->getRTPSParticipant()` return value. Is there a reason we can't just return the value?
This test is testing the wrong thing, right? I don't see a corresponding change in the test - is this a change that will be fixed?
There is a lot of these in here where the file was removed.
I think we should be able to use the `update` module here.
Why do we have a default here?
It looks like the indentation here is wrong. The indentation looks wrong.
I don't think this should be here. We should not be using the `LocalUpdateGraphGraph` interface in the `LocalUpdateGraphGraph` interface, as it's a `LocalLocalUpdateGraphGraph` interface, not a `LocalUpdateGraphGraph`. It's a little hard to see how to use it. It's a good idea to have it here.
I think this should be a separate change
What is this? Why not just call the class directly?
I don't think this is the right place for this migration, it should be in the migration.
I think this could have been moved into the `OUTBOUND_HTTPS_PROXY` module.
Is this method used anywhere?
I think this should just be `err != nil`.
We don't want this to be in the `Task` package.
How does it handle feature objects?
This is the fix.
This should be in the wrong package.
Is it possible to return a `std::vector<sycl::device>`?
Block body expression is on the same line as the block start.
I don't think we should be using the `url` here.
This is a bug fix. The `is not in` should be `frame()` instead.
I think you should be able to get rid of this and just do `static PushToBlobFeed()`.
I'm not sure this is the right fix.
This seems to be a breaking change?
The `package pingpong` and ` measures RTT` are not used in the code base, so it is not needed.
@smarterclayton now that `r.v1` is only available to the `aws.IsReaderSeekable` call and not the `Retryable` call.
It would be good to have some sort of flag to have a flag to make it more obvious to what this is.
Is this a bug fix?
Do we need to check whether the version is in `setup.py`?
The `AWS IAM` should be `IAM`, right?
I don't think this import is required
I think this should be `IsPossibleDynamicType`?
This is a wrong file.
I would rather not have a log message here, since it will be handled in the head call
I don't think this is a good idea, but should be `__init__` for the default value
The new `json` is a pointer.
I think this is not needed, we can remove the `cni_version.PluginSupports` call.
Please use a full list of imports.
@kring do you think this will work for you? I think it's not necessary, right?
Can we have `GetStatusEndStatus` return type as `PENDING` so that we can have the `GetStatus` case as well?
Can we use the `.get()` function here instead of creating a new class for this function?
Can you please also change the type name to `PluginsConfigs`?
I'm curious why we have this here?
Can we add a note about the issue here?
I don't think we want this change. It looks like we have some test coverage for `Message` and `ZeroAddress` in the code.
I think this should be `&&`
I think this should be in the new commit.
I think we need a test to ensure we don't have to pass it as a parameter.
Why the intent here to make sure that `len(identities) == 0` is 0?
I'm wondering if we should just make the internal Group the values of `klog.V(2).Infof("Creating new internal Group %s with selector %s", newGroup.Selector.NormalizedName)`
Can we move these imports to the top, then just before other go imports?
Why is the `Accepted` removed?
Do we still need to expose `skip`?
I think this should be done via `MetaServer`, since we don't need it any more.
This file is not in `pip` but the `pip` package is used in `sys.executable`.
This is the fix for the error in the file that was causing the error to be logged.
Can we just make this configurable?
I think the old code was wrong here, because `excludes` is not a valid default, but `excludes` is the default, not the default, and the default setting is `true`. I think this is the correct behavior here.
I think it's better to use the `if` statement instead of the hard-coded `null` here.
@dantleech Why do we need to set this here?
I think we should log the user error here.
This was a bug in the previous version. The previous version was a `os.path.Path`. The `./pants help --LOG --local/unit/unit/test/lib.c` which was not used in the code that was removed.
I'm wondering why you did this. Is this a bug?
I'm curious, why is the package private?
I don't think we should have a KafkaAvroEventReporter here. It should be the same as the other fields.
can you make it so that the list is not fully in `self.config.prefix`, i.e. `self.config.prefix` is not the case anymore? I think this should just be `ListElement(self.connection, name, self.item_marker)`?
`return` should be enough, because `args.each { |arg| user_hash[:"#{arg}"] = send(arg) }`
I would prefer `<p>` as `<p>`.
I'm not sure what the right answer is here. It is, it should be `TLS` or `TLS = False`
This is a breaking change, and should be reverted.
can you add a newline after this line?
>Block body expression is on the same line as the block processor processor value, can you put it on the same line?
This is not needed.
I don't know why it was written, but why not just check for nil here?
I think it's better to put this in a function like `ivim` to reduce the amount of places where this function is used.
(style) code indent should use tabs where possible
This file is already included in this file.
what is this default for?
why was this removed?
This is the main use of `acquireTopologyCacheLock` as the name is `startTopologyCache` but I don't see the point of the `blockTopologyCache()` being the same.
Can you make this `h.Dispenser` instead?
why do we need cast here?
Why is this test removed? I don't think it's necessary to remove
This is not a bug, but is a bug fix?
this should probably be `Set` rather than `List`
I think this is the right approach. We don't need this check anymore, since `instanceof` is a number of characters.
The `AWS IAM` is not needed, we can remove it
What if `len(check_commands) == 1` ?
I'm not sure if this is the best way to go about this. If we're going to make the `@exclusion_patterns.present?` check, we can just make the `@exclusion_patterns.any?` check in `exclusion_pattern?` so that it's not a `@exclusion_patterns`
(style) line over 80 characters
This should be `remproxy.version`.
We should probably add an example here for all the `updateSpan` APIs.
We should be able to import the values from `pip install` from `utils.py` and `utils.py` to make this more obvious.
I think this should return nil. The user will return nil on error. The user should not have this set.
This is not necessary, we should just use `Object::homogen_table_builder{}`
Is this not needed anymore?
We need to do this as well. The linter will complain about that.
I think this test is not correct, since we are not testing the wrong thing.
I don't think this is right. The function doesn't allow for this to be called from the `R0124` command.
@mikeshultz did you find any way to make the virtual method internal?
We should add some validation for the error message.
this is not needed, as it's a var and not an var
Please use `CodeFlow` as the name to make it clear this is the only purpose of the API.
I don't think this change should be here
I think this is a bit confusing to me. If the reader is a subset of the underlying node, then the node will be called with an ` close()` method.
This is the main change. I don't think this is a problem for the `getAccounts` method.
Can we use `this.storage.config.localList.get()`?
is this needed?
this is a bit hacky to me - it's a bad idea.
What's the reasoning behind this change?
I would have put the type in the `KUBERNETES` method, and add a link to the `post()` method.
The wireError is not being expired. Do we want this?
I think this is not the right place for this test. We should probably make the test configurable by default.
This is a breaking change.
I think you should also check `if not class_agnostic:`.
Can this be `Integer.MAX_VALUE` instead?
I think the `TIME` is not needed here
I think we can remove the `@next_document` variable now that the user will see it being added.
This is the only change I found that we need a test where the `p` is used, and it is a no-op, so I added it.
This is the only place where we need the `DR_REG_##reg` is used.
use `<%= "wards"`
This is the fix.
We should probably make this a `*` in order to make sure it's not intentional
@daniel-becker Is this a typo or a typo?
could you please add a log message about the log message?
I think this is a bit of a hack, but it seems like it should be moved down to `github.com/sirupsen/logrus/hooks/test`.
I'm not sure if this is the right fix. If we do want to change this, we can add a `TODO(name_env)` check to ensure the value is set.
Shouldn't this be `//` instead of `//`?
Why is this import needed?
(style) space required before the open parenthesis '('
I think it is better to use a name that makes it clear what this is
I don't see the need to change here, since the `List` and `List<T extends WebElement>` are not supposed to be used in the `List` method, so this is not really the only place where `List<T extends WebElement>` would be used.
This is a breaking change, it should have been added to the PR
This is the only change that affects buf.WriteTo.
Could this be `is_upfront_shutdown_script_enabled`?
Can this just be `self.title()`?
I don't think this is the right change.
This is a little hard to follow. The `vers` is used for the ruby_version and the corresponding `rvm_version` and `rvm_rvm_version` methods.
This test now worked because the chrome is not set.
I don't think we should store this in URIxRewriteCtxKey, as it will be used for other languages, and it will be used in other languages.
why remove the second half of `scheduledOutputFormatCombinedPEMKey`?
This is the only change required to the server.
This is a bit of an odd name, but I don't think it makes sense to have the name in it.
Do we need to do something if ` filter.ByBanned != nil`?
Doesn't this need to be a call to `get_git_info_sha()`?
Can we have a default value for this. This will be used in many places in our codebase. We can move it to another place and make it easier to change.
Standards: Please add a space after commas.
I think this should go inside `appRouter.location.href`.
I think it would be better to use the logging message to check the error message.
Won't this break if there are multiple instances of the same type?
I'm not sure this should be `SOCKS` - if `Proxy` is `null`, the `SOCKS`, `Type.SOCKS` will not be the best way to fix it. It will also make it a `null` value for the `Proxy.Type` and `Proxy.Type.SOCKS`, and we will be able to use `null` here.
I think we can remove the `r_url` from the library.
This file doesn't need to be updated.
This looks unrelated to the PR. Please remove it.
What is the difference between `MvxPlugin` and `MvxPlugin`?
Is there a reason we need this? I think it's not a good idea to have it in a separate file.
Shouldn't we be returning `true` here? It seems like it should be a `default` value?
Shouldn't this be `execute(_writeConcern, options, callback)` instead?
I don't think it's worth adding a new column to this spec.
OO is now always available, so this change should be reverted.
nit: this should be `volatile`
Isn't it better to have a method for the `out`?
You should be able to use `have_exact` here, as it's a `list_or_exact` (or `False` in `request.args`).
For consistency, we should also change the default value to `True`.
Let's remove the `_shared` import here.
I think it's a bit weird to have this as a default, but I think it would be better if you would use `Default: default` and `server_command` as default.
This is not needed.
I think this is not the right place for this. The latest version is not in the latest version, and we can just do that in the first place.
These are not needed since they are already in the module.
The same thing is the "Backoff ended for %.128s" check.
This should be removed as well
I think this should be `intdataplane`, `goimports` and `goimports` (and `goimports`).
I don't think we need this. Can we just make the set by the `gSpec.NetworkSpec.gSpec` as the default?
I think this will be too slow for a `model` field.
I think this should be moved to `insertedIntoFocusOrder`
Thanks @jeffier-ms @jeffen's sorry for the extra whitespace changes, I missed it in a separate PR. :)
Is there a reason to use `unwrap` as a local var? It would be more clear to me.
This change looks good. I would use `encode_type` instead of `encode` to get the same behavior as `encode` and `encode` are the same.
Is there a reason we can't just use `java.trimTrailingWhitespace()` here?
Is this a typo?
Why do you need to register the 2014CERN here?
I don't know if it's a good idea to include this in the `aws` module.
use a `Http1` constant for all the classes
We need to add the `timeout.timeout` to `timeout` as well to prevent the open source.
What if the `chained_prio_struct` is `1`, then `1.0f` and `2.0f`?
I would prefer to have this be an optional param instead of a transaction. It's a bit confusing to have it be a struct, but I'm not sure it's a good idea.
We should only do this if `this.BlockHeaderByHeight` is set.
This class does not need to be annotated with `StandardsPoliceCompileModule`.
I think this should be `fbo.head.Lock(lState)` instead of `fbo.log.CDebugf(ctx, "Head was already set, aborting", "")`, otherwise it will fail when you call the function.
Can you explain why this change is required?
Why did this go up to the import import?
I think we need to keep these three lines underneath.
I think this should be a separate PR.
I think we should add some description about this, because it's not really part of the public API, but I think it's a good idea to make it more clear that this is the case for rendering.
why did you remove this?
Use `#ifdef` as you use below
I think we should add a spec for this new column.
Please check `!=` instead of `mFolder`
Use the new Ruby 1.9 hash syntax.
This change is not necessary because the `InterceptorInterceptor` calls `resourceteam` twice, and `team` calls `resourceInterceptor`.
It seems that we only need to do this if `ique` is not `ique`?
Maybe we can move this to `EnableBlockServiceFallbackToArchiver` and make it a field?
I'm not sure this was a good idea to add it to the `rootNode` function.
This is not a valid use case.
this is a bit weird. I think the original code should be called `getLength` instead of `getRawDataSize`
I think this is a bug, because `other == null || !...` would be more appropriate.
This is a change of behavior. I don't think we want to run this on a test failure.
Maybe we can call `Default` as well?
We can probably remove this too, but I don't see any usage of it being used anywhere.
This is the new default, so I would say "this is the listing".
Do we want to keep this, as well as in the `clone` method?
This message is not really helpful. I would say "No meter was used for debugging" instead of "No meter was not found"
Why do you change it from `define`? The `define` is only used in `in` in `Makefile` and `Makefile` in this class
The `get` method should be renamed to `get` method.
This is the main code.
Is it possible that the feedback was already in the main thread?
This is a bit of a bug fix. I would just change the first opening bracket to `2.3` and then change the first opening bracket to `3.2`.
This should probably be `self.enabled` since we are not using it anymore.
Is this change intended to be reverted?
This is a regression I am not convinced. It should only be done in `cls`.
What about `os.path.join(os.path.abspath(entry['directory'])` ?
I think you should add a method to `NewPiped` to make sure that the method is only called in `NewNewPip`
It seems like we are missing some naming here.
I'm not sure if the variable variable should be in this PR, but it's a little confusing since it's used as a map.
why was this change made?
why the double timeStamp?
why did you change this?
I don't think we should log an error here anymore. If the user has a log with an error is invalid then the user will log the logs.
This is a change in behavior. Why not use the location_map.size() here?
It's not necessary to check if the length is empty, right?
can you move this file into the `go.opentelemetry.io/api/registry` package?
I would prefer a constant for this. It's not clear from the name.
I don't think the API should be used here.
I think this is a bit of an odd choice, but it's not a big deal.
This is a bit of an overkill, but it should be `/* eslint-enable no-unused-expressions */`
Can we keep this in a separate file?
Why did you move this check out of the `if` block? It seems like the `else if` block can be removed.
Let's not add these to the `Matrix` model since it will be used for every other types.
This is the only change required to `fd` is the `fd_data`.
This will fail on any of the server side, as the media is not available on a thread.
I'm not sure if this is the right fix.
This seems a bit strange. Is it because of the atomic object?
Is this a typo?
I don't think we should add the `_lastDomChild` to this method. I think it should be fine to just add it to the constructor.
We need to be careful about this, I think.
I'm confused by this. When I set `ksqlsql.CreateCounter` to `true`.
This is not the right fix.
I'm wondering if this is the right place to do this. I'm not sure if it is worth it.
why is this needed?
@matt-gardner I'm not sure if `axe.commons.text.sanitize` will be true here, but it's not a valid node.
Why is this change needed? It seems to me it should be removed from this commit.
This should not be changed. The logic here is that you are using the `list()` function to pass `False` as a parameter to `list()` (or a `list()`) and the `list()` call will be the wrong value. The `list()` call will be a `list()` function which is the same for `list()` and `list()` (the `list()` function is called) and not a `list()` function.
can you add `tf.IntegrationTest(t)` to remove this line?
nit: remove empty line
Remove empty line?
I think this should be the actual error.
This is a debug log.
I think this would be more clear if the test fails due to `Test*`
The `-` prefix is not necessary here, since it's the same for all of the commands, but it's not really necessary to use the `-` prefix.
Should this be `errors`?
We need to make sure the `context` is not `nil`, right?
Can we change the name to `SingleSingleOperationsWithLongRunningExtension`
This is a bit of a hack, but I think we should be using the same `serial` parameter instead.
Should we also support the prefix for this?
@dvoytenko I think you meant `pullImageTimeout` here.
Why is this changed?
Why did this change?
I think we can move this check to `CloseSend`
I think this should be `auto` since it's not a property of the `GraphType` class
Missing @var \Doctrine\ORM\EntityRepository
This isn't used anywhere, please remove it
Align the parameters of a method call if they span more than one line.
I think this should be an `AtomicInteger` instead of ` 1024` (and similarly in the other places in the PR).
I don't think this TODO is intended.
I'm not sure if this is the right place for this, but it seems like we can just remove the `Stream` here.
I think you should remove the `.Build()` here and below
This should be removed as well
I think we need to make this change as it's a bit confusing to the user to see if the exception is not valid.
This seems wrong.
I think this is a bug fix.
I think we can remove this line.
This is a little weird. I think we should just return the response here and not return the response.
Can we use `toLowerCase()` instead?
I don't think this needs to be a module-level module, because it is a module-level module.
why is this change?
`handle` is a string so you can remove it.
This was the only place where we need this.
Can we add a check for `MustEnablePulls` in `ctx.Handle`?
Shouldn't we also add ` projectName` to the project?
Should we add an assert here that `flash.now` is not `flash.now` ?
Should be `[inheritdoc]`
It seems like this could happen in a `test-generated` context, which is not what we want. I'd rather not do this in a `test-generated` context.
Is it possible to get a query from the `INTERSECTS` to `queryRelation.INTERSECTS`?
Why do we want to error out if there's no error here?
Style/MutableConstant: Freeze mutable objects assigned to constants.
I think this should be `[UnsupportedOSPlatform("browser")]`
I don't think we need this. We need a new function to return an error.
This file doesn't seem to be used anywhere.
I would just call it "pygment"
use a view instead, we could add a view to this as well
should we make this a constant?
This is a bit confusing, the `use_dict` function is only used for `sysprepWindows` and the `sysprep` flag, so I think it should be `use_dict` (or something similar).
Why not `zero` ?
This class doesn't have to be renamed.
I'm not sure this is a good solution, but if we're going to go through this task we should just make sure that the task isn't in the task task but not the task in `cloudformation`
Can we add a TODO here about this?
I think this should be `padding: 0`, right?
Why not use `throw randomState.nextBoolean()`?
I'm not sure if this change is correct, the original code was not working before. I'm not 100% sure if this is a correct fix, but it seems like it was just a bug. The only thing this was here is that the previous code was not doing that.
@agramfort this should be fine, but I think it's fine to just use the `-2` here.
this was a bug, right? we're now removing it
I think you can remove `json.dumps` from `json.dumps`
can you make this a const?
can you make the call sites more descriptive?
I think we can remove `proto` here as well.
Nit, I'd probably make these `result && "bad file file file file size` (or something like that) as the return type is `file_size`.
Why did we drop the report if it's not an error now?
This is the main change. I think it's better to use the constructor instead of a specific one. The only way I would expect it is to be able to use this is that the `Microsoft` class is in `pkg/api/__init__.py` and not have it in the class itself. This is because of the `Microsoft.Naming` class itself, and the class is in `pkg/api/types.go`, and that's where it is used.
Does it make sense to move this line down into the `free()` call below?
You can remove this line
why this import?
I think you need to check for null before calling `getUNF()`.
This is the only change that will break existing tests, but I don't see any references to this file at all.
Do we need to add `@token_file` to `environment`?
I think this should be `allowOptionalMappings` instead of `allowOptionalMappings`.
input parameters should be optional
This is not a good idea. The `inventory` method is not a `DefaultFormat`. The `DefaultFormat` method is a `DefaultFormat`, but the method is a `DefaultFormat`. The `DefaultFormat` method is a `DefaultFormat` method.
What is this change doing? Does it mean for the time being?
Shouldn't we use `getById` here?
This should probably be `map`
I don't think we need to add the version here, it will be hard to parse, and it's not a blocker.
Shouldn't we have a `FunctionSignature` function in the `history-go-filecoin-project` package? It seems like it should be a `const` package.
We don't need to do this here. The validation is not done in the `state` class, so we don't need to do anything about it.
I think we should be using `*Processes` here. We should not be using `*Processes` as the name of this function.
Can you please add a similar check to `_TYPE` in `lib/common/common.go`?
Should we check for NULL before returning? Or is it not needed?
Is there a reason why we don't just remove the `catch` below?
The `file_exists` function has a `const TCHAR *fn` parameter.
Why is it needed?
this function is used in a few places so I would just inline it. (I'm not sure if it is worth it, though, as it is a bit hard to understand)
I think it would be cleaner if the scheme was added in the _scheme_ but not here.
I think this should be `switch ($orderby['Date created'])`
`ghost/api/(.+` should be `/ghost/or` as well.
I don't think this should be here. The new `#{_correct_name` method is called for a user-provided data, so you should not need to update it here.
@jackhorton Is there a better way of getting the exception from `VisibleException`?
It seems that this is not the right place to do this. Why not make this `state.setProduct` and set it directly?
I'm not sure if this is the right place to do this, but I'm not sure if the `mrb` and `mrb_value` will work.
I don't like this name, I think it should be ` HighVoltage::PagesController` or something.
should this return `false` instead of `true`?
Should this be `ApplicationApplicationID`? I think it's the proper name
I think we should use the new API here.
We should be able to use `PlatformViews.IsNullOrEmpty()` instead. It would be better to use `PlatformHost.IsNullOrEmpty()` instead of `PlatformHost.IsNullOrEmpty()`
I don't think we need this change. We can just do `child = "isn't child!==true"`
Is it possible to get `@FunctionalInterface` from this if block to avoid the NPE?
This is a bit of an overkill. I think we want to make the same code a little more descriptive.
`handle` is not used in the context. You can remove `parent` entirely.
Why is this needed?
@jcotela It's better to add the `true` to `argparse.jvm.max` and avoid the `true` check.
This was an error and it was a typo.
Why are we not using List anymore? I don't see it used anywhere
I think we can remove this method entirely.
This is a bit of a nit, but I would have expected the `failed decoding EC2 Query response` to be a `err`.
should this be TEST_IMPLEMENTS_DELETE and TEST_IMPLEMENTS_CANCEL?
Should this be removed from `apuhun.github.io/`?
I think this should use `string` instead, since it's a bit more common use case.
This is a bit of a hack, but I don't think it's a good idea to remove.
`rest.info()` should be `finest.info`
I'm not sure why this is necessary. I think we should just have `token = self.getToken()` here, and then we should not call `self.getToken()` twice.
Why do you have to change this? It's not a big deal, but it would be good to have it in a single place
This is an API break. The constructor doesn't seem to have any side effects.
I'm confused by the `["Need action"]` in this function. Why do we need it?
This should be `violation_data.ApiExecutionError`
I'm wondering if this should also be `POLICY_LIBRARY_SYNC_ENABLED`
Why do you need to use a different name? I'd prefer the same name as the other one.
We can't do that. You can just do `LOG(THREAD, LOG_INTERP, 3, "Detected AVX-512 code in use\n");`
I don't think we should be using this method anywhere in this context, it's not really necessary to use it in other places.
This import seems to be unnecessary, it will break existing users who have to write a "errors" package
You could just use the AnalyticsHelper here instead of hard coding it.
This is the main change. The `ctx` is a bit ambiguous, but the `Err` method is used to return `nil` in the context. I think this is the only change that makes sense to me.
this will create some problems if it's not initialized
No imports, please.
I think we should keep this as `IptablesLockTimeoutSecs` and change the value from `IptablesLockTimeoutSecs` to `IptablesLockTimeoutSecs`
nit: `error` -> `error`
Do we have a case when we are actually not read the file?
This change is not related to the issue, but I think the previous version was correct.
I don't understand what this is doing. Should we set it to `compute_service_account_obj.go` ?
We don't need this change, as the default page is not `Gemed`.
This is a bug in the PR
I'm not a fan of this name, but this is not a big deal, but it's not clear what the difference is.
Is this change intentional?
Do we need to use `unless` here?
why not just add the sources into ` '$'` ?
why not use a constant here?
this is not needed anymore
This is not used anywhere.
This method is called in a transaction, not in a transaction.
Why do we need this enum?
Use the new Ruby 1.9 hash syntax.
This file doesn't have to be included in this PR.
This is a breaking change to the API review, but I think this change should be reverted
@bryevdv, I think you should add `options.runPoolDescribe()` here, to keep track of what is needed.
This should be `github.com/mattn/go-sqlite3`.
This is a bit weird. What happens if the user is not a 1000000?
Would it be worth to give an example of a better name for this than `Comparing bare callable`?
Please remove the blank lines. It's not needed.
I think you should be able to remove this in the constructor. It will be easier for the user to see if there is any change in your branch.
Why not `// Copyright (c) Microsoft. All rights reserved. See Licensed under the MIT license.`
I would prefer `matcher='path'`, but this is the main change.
Why did you change the default value here?
Can you add a `name` field to the description?
I think this is a bug fix?
Is it possible that the event listener is not available?
I'm not sure if this is the right choice to do, but I think it is better to have the log level be a function that returns a string. It is a bit confusing to have the log level as a string and the log level is not the right of the method.
Should we set the `default` here?
There's no need to use `m->updatePropertyCache(strict);` in the function.
Why not use `this.node.getAttempt()` directly?
We should add an `f` option here as well.
I think this should be `self.__class__.__name__` and not `self.__class__.__name__`, since the only thing that would be that you can't just call `getlayer(self, cls)`
Shouldn't we check for `http.Flush` before calling this?
I'm not sure about this one. If the package does not exist, it should not be an error.
This change should be changed to the other way around.
This should be removed as well
can you add a `// note -1 if c is not present in the byte slice.`
why did you add this?
I guess this is not a bug, but it should be reverted.
This is not a good example of how the `IOException` table has to be. It would be better to have this as `io.IOException` and `io.IOException` as a static variable.
This is a bit of a hack, but I would prefer if the `FolderBranch` is not a `FolderBranch`.
@mmaxim this line is the one in the `if (c.trace == 0) {` line above. The `if` is the same as `if` below.
Does it make sense to move the file in `pkg/AppApp` to a shared folder then that can be removed?
why remove the ` OutputArgumentProcessor()` call?
This test was failing on purpose, but it was only added in the `vcr` folder, not used.
The `delete` is not used anymore?
I think this line is not needed.
might make sense to rename this to `annualized_payment` or something more clear?
Why do we need to keep it? I think it would be more readable to use the default value for the default value
I think we should also be checking the error here and not the other way around, since we are not doing any error. We should do this for all cases, and then check if the error is logged and not just the caller.
why not use the xrange in this file, and import xrange directly?
Why do we need a `opts.TokenSource` here?
Is it expected? I thought we were just doing this with QtWebEngine?
This should be a warning, it should be a warning.
to avoid this warning. `and bbox_feats.shape[0] > 0` is mean that `semantic_feats.shape[0] > 0`, `semantic_feat` is never zero.
Why did you change this?
This should probably be `#include "force.h"`, but not `force.h`.
I think this is the only change required here, but it seems like the function is only called in the constructor and only in the function that is being used.
This check can be removed.
Why do we need to remove the res from the list?
I'm not sure if it makes a difference if bucketlist is non-null, but if we do, it might make sense to have a bucket list, and then give the user the bucket list with no address, and give it a default, so we wouldn't need to do it for the same element.
This is not right. The first part of the condition should be false if atom->getAtomicNum() == -1 is true. The second part should be true if the condition is false, or is not the right part of the condition?
I'm not sure how to test this, but it looks like the `Wait()` function is used to check if the chain contains `nil`, so maybe it should be an error.
I don't think we should be changing this here. We should be using the `flattened` variable instead of `zero()`.
Please add the `NotImplemented` parameter to this function.
I think it's better to use an `_` rather than an `else`. It makes the code more readable.
Shouldn't it be a `cls` here?
Why are we using this function? I don't see it in the code.
I'm not sure what the best way to go about this is, but it seems like this should be `sess.manager`?
This is not needed anymore, the `StateContext` was removed from this class and it was already added in the `StartSourceIds` method.
I think we can also delete the `maximize` below.
remove `switch`?
This import should be grouped with the other std packages.
This is not a valid listener, but the listener should be set as a new instance.
I think we should have a method `close()` that returns the keymap here and return it in the `else` case.
I think you should also update the config key to reflect the new config.
Block has too many lines. [29/25]
I'm not sure this is the right approach. I think we should be checking for a special indicator that is a `(line 1), type (line 3), and a special indicator (line 3), for those fields that is required. I think the `line` is not the right choice, and the ` line is the right choice.
unrelated to your change, but I don't see any usage of this function.
I would have expected this to be `assertThat("01", h.query(req("q","*:*", "wt","velocity",VelocityResponseWriter.TEMPLATE,"foreach")).trim()`
I'm not sure if it's worth adding this in a way that we don't want to go through to the `prevent` API, since it's not a `prevent` API and I'm not sure what's the right default here
I think this should be configurable.
why not put this on the previous line?
I'm wondering why this should have `!= null`?
This import is now removed, right?
This is the only one that was removed in this PR?
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.<br>Line is too long. [90/80]
I think this is the only place where you're using this. I'm not sure if we can make this change.
This should be an `int` (or `int`).
I think this is a breaking change. The key is still in the UI. The `showDeleteAttachment` method is not called anywhere else, so it should be called `showDeleteAttachment` or `showDeleteAttachment`.
I think this can be private, because the public method is not called from R isNaN
why not just use the default value of `docker_labels`?
The problem with this is that `Collections.emptyList()` is also called from `Collections.emptyList()`.
This will be a bit simpler if the buildAction method is called `buildActions` and the `resourceAws` function return the result of `resourceAws()`.
This is not a good example of what is being done here.
This looks like a bug, because `render()` does not return a post that is not called.
Should be `cniNet, cniIpam`?
I think this is the only change that affects the API, but I think it is not necessary to make this change in the first place.
This should be `getBackendConfig()` instead, since this method will be called for each other.
I don't think this is right. We should be using the `*` syntax in this case.
This should be done for all instances of the same config (easyadmin.controller_resolver)
This is a bit confusing. Why is the `__call__` method needed here, since it's not a `repr` key?
Why is this not an event?
I think this should also be ` AddPeers`
This is a change of behavior. I don't think it's a good idea to import the `InvocationTargetException` object here.
This is a change in behavior, but I think we need to move the struct struct to the struct.
Is this a `JsonRpcMethod` class needed?
Can we replace `GetMeterProvider` with `GetMeterOption`. This method is called by `Meter(name)`
I think that this is a bit confusing. I think it would be better to use a `numba.IsNull` or something like that, since it's a `numba.IsNull` that would be a bit more useful for the job.
The `Name` is a generic name, so it's more clear to me what this is doing.
Why is this needed?
This is a bit confusing to me, as it's a `auto &` (not a `auto &` but the `auto &` part is a bit confusing. Maybe it's worth to have a `ASSERT_EQ (size_count > 0), and then just have `ASSERT_TRUE` that returns the value.
It seems to me that `testSuite` and `testSuites` are only relevant to `for` loop.
I think you can remove this. It's not needed for this PR, but you can use `--build-channels` instead.
I think we should be calling this `gitCommit` because it will be set to `nil`.
Should this be `ecsManagerManager.class`?
I think the `RemoteUserCtxKey` is not necessary here, since we are not using the "-" variable in the context here.
Why not `http://`?
I think we should keep the return value here.
I'm not sure about this. It looks like `@current_user` is only used in one place and is a good place to add this.
Do you need to import `AnyKey`?
Nit: newline for indentation
Why remove this line?
I'm not convinced this is the best place to put this. For example, if `self._solid_config` is a `dict` and `attr-defined`, then `self._solid_config` is a `dict` (or `attr-defined`) then it would be `None`.
I think it's better to use `updateupdate` instead of `redirect`. It's more clear what's happening in the code to use it.
why is this needed?
Why is this required?
Does this need to check for the `EnableJetStream`?
I'm not sure if it's safe to do this here, but if there is a way to do it it would be better to do it in a separate PR, and then do a `session.session.close()` on the same line as the one below.
moved to another file
I think this is the right place for this, but I'm pretty sure this is needed for the test.
I think this would be better as `@Nullable`
I think it should be `cfg.get('momentum_config', optimizer.log_config)`
You should use `%=` here
`preload` has to be `final`, so I would not rename this method to `protected IndexInput openInput(name, IOContext, preload, IOContext context)`.
Can we put this into `ImageConfig`?
This should be removed as well.
This is an unrelated change, but this is a bug fix.
We should probably move this to `location` class as it's a `pathname` method, and then just call `pathname`.
This is a bit weird, we need to check the result of the the `ReadWorkloadManifest` instead of the result of the `readWorkloadManifest`.
Why is this change needed, now that we are not re-assigning the event?
@jridgewell Is this change intended?
Do we need to change this to `log.Info`?
Should this have a corresponding `_` or `pulumi up`?
do you really need to add `type` attribute here, just to be sure?
This is the fix, right?
I think we should be using the new `go-homedir` function instead of `homedir`.
This function should be removed as well
I'm not sure if we should do this here.
This should be `declare(strict_types=1);`.
Can this be moved to the `NamedNamed`?
`message stack cls_name` is unused.
This is a change from `Number.MAX_SAFE_INTEGER` to ` Number.MAX_SAFE_INTEGER` to avoid the fact that the value is `1` here. I'm not sure if we can avoid this change.
This is a breaking change, we should probably be using a function for headManifests.
This is the same as line 156, and `import docker.utils as kwargs_from_env` is the same as `import docker.utils` (which is the main thing I guess), and is the main problem.
Why not make a method on `SealedEnvelope`, and call `action.SealedEnvelope` directly?
This TODO can be removed.
The change is not needed here. It is not necessary to change the test. The change here is just for the test case.
I think this is not needed. `SO_REUSE` is already defined in the `structstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstructstruct
This is a breaking change. The `AbstractChannelContext` has a similar change in `AbstractChannelContext` and `AbstractChannelContext`, which was a bug in the `AbstractChannelContext`. The only reason this was needed to change is that the `AbstractChannelContext` was a `@Deprecated`.
Should we check if there are no fields in the zones?
What is this test testing?
This is a breaking change. The `--help` flag was not being used, and it was previously fixed in the first place.
What is this change doing?
@TommyClausner this is the fix. The `@group_level` variable should be `@group_level = @group_level + 1`
I'm not sure this is the right fix. The caller can do `self.utils.utils.utils.utils.utils.bytes(value_type)`.
nit: I'd rather not use type annotations here.
This field was never used, since it is now always called.
I think you can remove the whole `@UnresolvedImport` annotation here, since you are already passing in the `zero` annotation.
Could you please revert the year?
I think it should be `DefaultGivenGiven`
I think it would be cleaner to check `isValidateNamespace(namespace)`
I would like to avoid the `in_array()` calls to `data-use-js-widget` here.
This is a good place to make it more readable, but I'm a bit concerned about the other changes here. Maybe we can move this to the `branding` class, and rename this to `_local_to_shared`?
I think you can use a `InternalLogger.Error()` here instead of `exception`
This was a bug, the `clientset` is not used in the `clientset.Clientset`
Do we need to set `global.` on the global attribute?
You don't need to check if the $this->mainConfig->Record->preferredMarcField does not exist anymore.
How about just `np.numpy()`?
I'm not sure if this is a good idea to add the `v(.+` option to the `^v` option.
This is not a valid path, but it is a valid path, so we can just use `Path.GetCurrentDirectory()` instead.
I think this should be "Init" instead of "status" since it's the type of the string
What is this? I think it's not the best practice to add it.
Why not use the constant `testClusterDeploymentWithoutRegionLabel`? It's not clear why we have to check the values in `TestClusterDeploymentWithoutRegion`
I think this should go in the `InitializeConnectionFields` package since it's no longer a `Set<string>`
Please change to `v1beta1.TierPriority`. The latter is a bit confusing.
we need a migration to add this column to the index
This was a bit scary, but I think the previous version was correct. I think we can just use `blockData` here and let it use `display: true` for now and we don't need to do this for every single time.
I think we can remove this, since it's already in the test file
Just to be sure: this is only used for debugging purposes, right?
I think it would be better to keep these alphabetically sorted.
I think we should keep the old version as the default here.
Looks good but I don't know if we can remove this file, just wondering if we can keep this for backward compatibility...
Can we remove this line?
Maybe it is worth to mention this in `if not used and is not used` block above?
I would have used `lower_bound()` instead of `bst.upper_bound()` to make it more clear what is the difference between the s32 and places of the s13.
This will be a warning if the logging is enabled. I think it would be helpful to log the logging.
I don't think you need the `@file` at all, it is not really used anywhere.
This should be imported at the top. It is used only in the file system.
I think we should also check for `defaultMode` and `16` here and below.
Does it make sense to put lint before line 153 and add a line line 153 so that it can be removed?
I don't see this method used anywhere?
why is this necessary? I don't see it used anywhere
Shouldn't this be `BucketBucketBucketBucketForaintextAbsoluteUri`?
This is not needed.
Why is it a string?
I think it's better to use the `using` statement here instead.
The new tests should use `games.Program.version:reverse` and `games.Program.version:reverse` should be the new tests
I don't see where this is used?
Is this line intentional? It looks like `[0] = node.as_string().startswith('from .', 'from .')`.
I think we should add some description about what this is for.
I don't think this is the right way to go. We need to set this to `true` to avoid the `APPVEYOR_AGENTS` flag. The `APPVEYOR_AGENTS` flag was already in the config.
I think it should be `POSTPOSTPOSTPOST', '/sessionsessionId/window/minimize`
The output should be `Expected predicted` instead of `predictedFieldName`
why is this 10? why don't we use `metastore.start()` here?
Would it be possible to get the `.copy` case here instead of the `le.le.ing.warn`?
I'm not sure what the best way to check is, is there a way to check the result of the first item in the address?
This should be done by the `info` method.
This is the same as the default for `image`.
This is not needed anymore.
I think this should be `type and it's children`
This is the only place where we use it, but is there a reason why it is here?
Is this still needed?
This is a little strange, because the type of `numba.createRuntimeCall` is the same as `numba.Wptr` in `numba.Wptr` (which is the same as `numba.Wptr`), so the type of `numba.Wptr` and the type of `numba.Wptr` is the same as the `numba.Wptr` and is the type of `numba.Wptr` (which we're not doing). So the type of `numba.Wptr` should only be used in `numba.W
This is an important change, but I think it's still useful to have `ApplicationError` return `true` here.
This property name is not in Javascript. Reading, I would say, "The" is not the correct property name.
This is the only one I'm guessing. The `go-sqlite3` package is used for `mattn/go-sqlite3`, so I'm fine with it.
@danrot this is where I think we want a `table` to be used, but not the "max" of the entity. I'm not sure if this is the right place to do this.
It's a little confusing to have a `git grep string`. `x-tar` is not supported in IE.
Is there an advantage to using a `FakeWebAPI`?
@deads2k this was the fix to use the "Create or connect" as the "boolean" would be more appropriate.
Nit: I think you can just use % for `strconv. read` here
I'm not sure if this should be debug or debug?
I think the original block was removed.
Use `MMFF::` instead of casting
Should we have a `order` field of `levs` as well?
We should use the `prime-maintain` constant in the database
This should be a try-catch, not a try-catch.
I think this should be `clef-signer-endpoint`
scss)$ --> '<rootDir>/node_modules/identity-obj-proxy',
This is not the right place for this, since it is not the `REMOTE_EXCLUDE_LOCAL` property.
Metrics/LineLength: Line is too long. [123/120]
I think we should keep the `@package` annotation for the version as well. It's not a blocker, but it's not a blocker
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is a no-op because of the `auto*` below.
I think we should remove this class. We don't use it in the code, but I don't see where it was used.
I know this isn't new code but it seems like there's no way to make this an an assert, but it's not a huge deal since it's the case. I'd just put this on the previous line.
Why was this removed?
shouldn't we also add this to the "RetrySettings" module ?
I think we can get rid of this interface and just pass the `id` as a `id` interface.
I'm a little confused by this change. If you're using it in the global `globalModelsStorage` I think it's best to do this in a separate PR.
I think we should be able to get rid of the `childType#isAssignableFrom()` check here. We don't need to pass `isAssignableFrom` here since we are already doing `child.getClass() == targetType`.
The name `_CreateDispatcher` doesn't seem to be used anywhere. It is used in the code, but I think it is better to remove it.
This should be a warning, not an error.
Is there a reason to use `str` instead of `str(pattern)`?
this is wrong. The default is `false`
I think it's better to check for the first element of `self.s.currentDoc`, and check that the callback is not null.
I think we should be using flush here, because if flush is enabled we should set flush in the first place.
It's not clear what this is for, but what is it doing?
Thanks for the fix. I think we should add a check for `ValueError` and `ValueError[0]`. I think it would be more readable and consistent.
I don't think we should do this...
this should be a separate PR
Is there a reason we need to return `null` here?
nit: can you change the typehint to `toList()`?
I'm not sure why we are removing this. It's not used anywhere else.
I'm not sure this is correct. The connected connected connected connected at connected time will have the connected connected at connected time. I am not sure if it is worth it.
I think this was a bug. The only time this is called the txids will be the last tx when the number of rows is 1. This is a change that will be reverted.
I think you should use the new conditional `collect_perf_data] =~ /aggressive/` instead of the `%d` one
It looks like the changes in this PR are only necessary in this PR, are they necessary?
why did this need to be added here?
This should be in a single if statement
This is not needed anymore.
This is not the right way to go, since `quic-go` can only be used for `qpack`.
I think we can move this line to the `vol.wait_for` block, since it is used in `write_write_id` method.
This is a little weird, I'd expect a `bs.buf.startHeight` to be set to `false`.
I'm not sure if this is correct or not. If the namespace is built with the usual refresh, the usual refresh interval will be sure if the namespace is built with interval interval.
This should be `mmcv_name`
`opus` is not in IE11, right?
I think you can remove this.
This is the cause of the public key in the config file, but it seems like we should have an option for that case.
Why not init to work?
We need to keep the old name, but keep the old name.
nit: can we move this function into `exports`?
this should be unused
@sparrowDom Just a note, we can probably remove the assertion as well, and just check if the role is a parent doesn't exist.
I'm not sure if this is the right default. The `serve_static_assets` prefix is to set `serve_static_cache_control` to `true` by default, and if it is the default, we should remove it.
why did you remove the whole method ?
Layout/AlignArguments: Align the elements of a hash literal if they span more than one line.
I don't think this error message could be misleading.
I think this should be a different name. `_idxLastSelected`
Why are we removing `Login` from `won`?
I think this is the only place where you use it.
I think we should add a `default` to the `Tag` to the `Provider` package.
This is the fix. The `!` should be kept in a separate commit.
I think we can drop these two lines
Shouldn't this be `ctx.Handle(500, "RefreshRepositoryMirror", err)`?
I would not add this to the interface as it's a public method.
why not use `LOG.finest` ?
Line is too long. [81/80]
We should also remove `Indentation` from `Indentation` in this PR.
Do we need to check if the config is set?
I think it would be better to use a `AbstractJavaAccessTypeDeclaration` here instead. It would also be nice to have a check that all values in `AbstractJavaAccessTypeDeclaration` are actually passed to the constructor.
Let's not change the default value here, it's a valid path.
is there a test we can write to verify this is a valid event?
I think we should check the zero-index here, if the zero-index isn't zero-code.
Why are we using the new-language version here?
I don't think we should do this. We should be able to remove this, it will be a bit easier to debug.
why remove the need for the installation?
Why is it necessary to use the username here?
Why did this need to change?
I think it's better to just remove this `@Deprecated` annotation.
Why is this changed?
I don't think this is the right place to put a lock here. The lock is a lock in a lock in the first place and then it will be checked if the lock is indeed moved.
Do we need `jsx` here?
Nit: remove empty line
This is not a good idea. The constructor is not called in the constructor, so it's probably not necessary to keep this.
I think this is a little too big.
I'd prefer to have the type `Price` here and in the `go test.go` file.
this spec doesn't use the `commands` argument, right?
This test now worked on, because we have a `http_client: http` which does this. I think we should remove the assertion that the new functionality is not used anywhere else.
This should also be a single line string.
I think you can get this from here too
This should be removed.
Why not use the absolute path?
This is not a good idea. The `connect` class has been removed.
"the ENV key" -> "the ENV key"
shouldn't we close close here?
Why not use `first_intersection_data.name_id = EMPTY_NAMEID.empty()` instead of the `name_table.GetNameForID(id).to_string()`.
I think this should be `super`.
`is_` is not used anymore, right?
This should probably be ` subpath`
I would prefer to have this as an optional argument to avoid having to pass it in.
This is a test that was failing on the CI. The test was not passing a `source.getPageSource` so it doesn't work properly.
I don't think we need this. It is used anywhere in the code.
Why is this needed?
I think it would be better to have this be a separate function to get the value from the state instead of using it directly.
why not use `rjust(2)` here?
Is this really needed anymore ?
This is a pretty tricky thing, because it's not going to be a string.
I think you can remove this `if` statement.
Should this be a `""` to match `""` in `std::string Container::getName()`.
I would prefer to have this as a separate commit
I'm not sure if this is a good idea. If we are using `subreq->buf` to handle the error, then we should not be able to handle the error. If you want to do a `subreq->buf` to avoid any error, then we don't need to check for it, and if the error is not present, then we can use `sub2o_reserve` to handle it.
"US & Canada" is a great way to do this (I can't find it in the UI).
Here the reasoning behind the `[:style]` is because of the `params` at the end of the line (which is what I was thinking about it).
I think this was the bug
Is this necessary?
nit: I would move this method under `go/` (and only keep the `switch`).
This class is not used anywhere.
This is a bit odd, if the config is `config.s3` and if it is not `None`, then it should be `config.s3 = config.s3` and then the config.s3 should be `config.s3` (or maybe even `s3`)?
This change does not make sense, since the tests are using the `id` variable instead of the `body`.
I think it would be better to return -10 here.
I don't think we need the `.value` here since we already use `.io_time` in the `arg.arg`
This error is not a great idea. This change should not be done.
I think we could move these outside of `get_package_registry` and `get_package_registry` to the top level `torch.jit.annotations`
Please add a license header.
This is a bit odd. I would have expected the word "in the default" and not just "simplify chained comparison".
We should make sure that this field is not only available in the `@inc`, not the "2" section.
This should be `info()` instead of `finest` right?
You should use `host` instead of `host` here
I think we need to do this for the user to see if the message was wrong.
This should be done by `flb_plg_error()` in `lua_pushmsgpack()`
This is a good example, I think it's better to use `--poppler` in the test. It's not clear what the difference is here (I assume this is a test case, but it's a bit confusing in the future).
Remove empty line.
These are the only changes in this PR, but I don't see any references to this file in this PR.
I would add `@abc.abstractmethod` as well.
I'm not sure if we should change the return type of the method. I don't think we want to return errors here.
This should be `log.finest` instead of `log.info`.
Why is this needed?
I think we should have a constant for this.
Do you mean to change this?
You can remove this line.
Please rename this to `aspnet-mvc.request.child-action`.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we need this `if @purchaseable.collection?` and `@video.page.purchaseable.collection?`
Is this still necessary?
You can remove the import here
Nice! I think we should have a separate PR to move this import into the `go` directory.
@tgamblin Do you have any idea why you added this?
I think we should remove this line
I think we need to keep this in one place.
I don't think this is correct. It's not used anymore.
Is this still needed?
This line is a bit odd; it is a `push_back` not a `lazy_pull`. It is a `lazy_pulls` that is already a `lazy_pulls`.
The `volume_mounts` and `volumes` are also deprecated, and I'm not sure if it's worth it.
I think you can remove `leader.getState()` here and below, too, and use `leader.getName()` in `getHighestTerm()`
@mjkkirschner Is this a bug fix?
Is it possible to move this to the top of the file?
Why are we removing the `go fmt`?
Is this change necessary?
The `#ifdef` should be removed here.
I'm not sure this is the correct way for us to use the new API. I think this should be an interface that we need to use for the new API and not use the new API.
This should be `!== 0` instead of `== 0`, right?
I would have expected this to be a single `role`. I don't know if it's possible to have a `role`.
This is an implementation detail of the public API, not an implementation detail of the public API. I would suggest to have an `if (perm.isPermissionSet(type)) {` block on this line instead.
What is this change?
This is not a correct change, it should be removed.
`end` at 7, 4 is not aligned with `.vars`.
I don't think this is a good idea. The user can see what they are, so it's fine.
This is a bit weird. I think it should be `None` or `None` (or something similar).
This is a bit of an overkill, but I don't think this is a right change. The `key` is not used anywhere, so I think it's ok.
Can you use `min` for this?
Can we just make it `false` instead?
Is there a reason to have this default to `idx`? Seems like it's not being used elsewhere.
We should probably be doing this for all files in the Spack-devdev, too.
shouldnt it be `With --genesis-file`?
nit: `return proto;`?
This seems like something that should be done in the past, not in the app.go
@Scottmitch do we need to assertEquals here?
Style/MutableConstant: Freeze mutable objects assigned to constants.
You don't need to explain the reasoning behind this property.
This is a change in behavior that is not correct. The bodyConverter is still in the response response.
This function is not being used anymore.
Please revert this unnecessary whitespace change.
I'd suggest to use `IotxAddressLength = 41` here.
this is the new fix. This change does not make sense for now
Why do we need a `getRequest` here?
@krztofwolski I don't think this is the correct place for this.
This is the fix. The problem is that the new `gulp check` and the new `qid_health` flag was being used to fix the new `gulp check` case, which was the bug, and I'm not sure why the new code was doing the right fix. So, I'm not sure how this was doing. I think this is correct. The new code was only passing the new `gulp check` and `gulp check` was not passing the new `gulp check`, which is the problem. The problem was that the new `gulp check` was being removed from
why is this change required?
I think we need to add `IConnectionHeartbeatTickFeature` as a property of the interface. It can just be `IConnectionHeartbeat<DateTimeOffset, object> action, object state`.
`f"{mode is not an allowed option for normalization` ?
This is a bit of an unrelated change, but the rest of the PR.
This class does not contain tests, so it should be renamed as well.
This is a bit of a weird pattern, but the parenticulty is not needed.
I think it would be better to use `OpenBucket_path` here instead of `OpenVariable` since there are more than one file that would be passed in.
I think we should check for the min_ts and not just set in the call to `fetch_listens`.
This is a breaking change that is a breaking change
why this is not a valid image version
This change is not needed.
Could you please add a license header to the docstrings?
Should we rename `ISRG Root CA` to `fullyEE`?
Is there any way to avoid using `cold_start`?
This is a bit of a hack, but I think we should be able to remove `type: E501` and `not: E501`.
I think we can remove `TimeToLive` from the static constant here and use the static constant in `getTimeToLive()` in the other class.
I think we should just change the name to `Release`
I think this can be removed?
I'm not sure if this is a good idea. I think the clustersync controller should be added to the `cs: csBuilder.Build()` instead of `o.shouldHibernate` as a nested method.
This is a breaking change. It is just a breaking change in the PR, right?
This should be `StoreDir`
I don't think we should add this TODO anymore.
Thanks @wanderingstan   Can we get the same behaviour in the `baseFeePerGas` constructor?
Can you remove this `@author` annotation?
I think you can use `String.format` here
Nit: We usually use the style of ` LongLivedMarshalByRefObject` in this file.
I think this should be done in `Admin::forward.yml` and `Admin::forward.yml`.
Why remove the context in the context?
This should be `sess Session_`
I'm not sure if we want to show to NCR people in the link?
This is not a valid Batch object, it is always the same. It is not the case in this case, but I'm not sure if it is a good idea to have a Batch object, but it doesn't seem right to me.
Can we just return error? I think that we can return errors.New(errUnknownTransactionType)
I think this is wrong. It should not be necessary. You can't use `\r\s`, `\s` and `\s` in both places.
why is this required now?
Metrics/LineLength: Line is too long. [123/120]
I don't think this is a good idea, it's probably worth adding a new function to the `DefaultCertificateRenewalTIme` function.
this should probably be called `extension_condition`
I don't think this is the right solution. The `order` is a `rand` object that is the seed. It's a `rand` object, but it's a `Type` object that is a `Type`, not a `rand`.
This seems to be unused.
This is the same as above.
Import packages with wildcard is not recommended. Could you please check it?
@mmaxim this is what I was thinking about
Can you move this import up to the top of the file?
I think it's better to put the `script` on the next line, since it's the only one that's needed.
The only thing I'd like to see here is that if the closest is not the closest, the `peerAddr swarm.Address` and the `peerpeerpeer.Address` would have been returned. I think that's fine, but I'm not sure how to deal with this.
I don't understand what you mean by "md#autoRowSize" ?
We should not disable the warning.
nit: remove the 2 spaces for indentation.
Style/MutableConstant: Freeze mutable objects assigned to constants.
nit: `to store store store`
I'm wondering if this is a bug in the tests?
`raise NotImplementedError` is a bit confusing. What do you think about just using `__call__` for `__call__` and `__call__` for the `message` method?
Why do we have both `GET` and `POST`?
nit: rename this to `GetToReadonlyNodeError`.
Should we return `nil` if `err` is nil, so we don't need the `else if` condition here?
The `test` should be removed.
Is this necessary?
We could probably remove the debug level and log it here.
please also add a blank line after the declarations.
I would suggest `Preconditions.checkArgument(splitSize, split size, splitSize, openFileCost, ...)`
This will throw an NPE if the fallback is not phoenicis.
I think this is a breaking change.
We should probably make this a separate function in `utils.go` and then use that in the other `utils.go`.
This should be imported after `typing` (which is what I did before, it is now)
This is not the right fix. The `parent_nodes` property should have a value of `null` and the value of `null` is not defined.
I think this is a leftover from previous refactoring, but this is not a big deal
Is this supposed to be a version number?
This is the main change. The `_method_call` call is removed in the code.
I would use a `Captcha` constant, not a `recaptcha`.
Should we also add a note about `internetGatewayID` here?
I think it's not a big deal but I think this is fine, since it is not an internal class, and it makes sense to have this as a static field, and then have a static field that is not a static field.
could you update the log message to mention this is a debug message?
I think this should be a test case. We should consider a different fix.
Should this be `final`?
We can remove the *storage.ObjectHandle here too
Why is this test changing?
Please add `TODO: false` to the `if bundle == null ? true : bundle.getBoolean(IS_GLOBAL_STORE, false)`
I think this should also take a copy of the records in the next line, as it is a new one.
Should we also add this to `transaction.connect`?
Can you please move this to a new line?
The `path` argument is not needed here.
I think we don't need to do this.opts.params here.
This is a bit weird, maybe just use `nil`?
Line is too long. [83/80]
This should not have been here as it will break some code.
Rails/Present: Use if (!ref) instead of unless (!ref)`.
I don't see this function used anywhere?
I think it's better to move this to the beginning of the function, so that we don't have to change the logic there.
I'm not sure if this should be public?
Why not set to 0?
who is this change?
why is this being removed?
I think it's not a good idea to have a constructor parameter for `initializer`. It is used by both `null` and `null` values.
I don't think you need to add this interface. It's used only in the `Close` package.
why remove from './remove?
We should make sure that memory limits are the same as memory limits (and we'll be using memory limits in the future).
This is a bug fix
Why not use the existing function?
Could you please add a `TODO` here?
This is a very minor thing, but the original code is not clear to me. If the context is null then it should be a different message, but it should be an error.
Although this is correct, I'd say that `~!]?` should be on the same line as `~!`.
This test was failing on purpose. I was looking at this code and it looks like the tests are passing, but it seems like this test is not testing anything.
why not use `klog.Warningf("message: %s process successfully")`?
do we need this in `app/meta/tag_meta` or `app/visual_website_optimizer`?
I think that this is not the correct name. It is not a property.
Why not just use `firstStatus.firstStatus` here?
This is a breaking change. The `localURI` above already has `error`, so I wouldn't change it here.
I don't think this is the right approach. The key is used for the plugin resource.
this change is unrelated.
What is the reason to change this to a `string`, and change this to a `string`. I don't think it makes sense to change this to a `string` class, and then use the `string` parameter to indicate that it is not the same as the default value.
Please don't add new methods to uploadFlowFile, they can't be used anywhere.
This is the wrong place for this. The `UpdateAckInterval` should also be kept in `EXdlChannel`.
This is the same logic as the one below. It seems that we should just return the deepest object here.
can you make this a `float_to_current` instead of `\AptKeys`?
This is not the only place where you've got an `Unsuresure what this is doing. I think this is the correct fix. I'm not sure why you removed it.
I think you could use a temp variable here.
this is just to be able to get the `CachedThreadPoolExecutor` instance directly.
Should we do `boolbool` here, or is there a reason to do `bool` here?
to be removed, it is not used
$balance must be $finesListSort[$key]["amount"] here ?
I think you should use a different name for this, it's a good idea for users to know which version this is the case.
I think this can be removed.
this is not needed, it should be a local variable
I'm not sure why this was necessary. It was only added in the first place. I don't see the reason why this was added, but if it was already in the first place, it was not used in the first place.
why did you remove this?
I think you can remove this line
should we make this `30` and make it `30` ?
Do we want to set `waitForThumbnailsBeforeUpload`? I think we want to set `waitForThumbnailsBeforeUpload` to `true` to keep it consistent with the rest of the code.
Is this used anywhere?
Is this a bug fix?
this is a change in behavior, right?
Why not just `getCacheTable` ?
What's the rationale for this change?
I think we need to keep this in a follow up change.
I don't think you need the `list<array>', 'input' ...`
I think we should remove this import.
I think we need to add this as well. I think we should do it only if there is a execName.
This is not correct. `cgroups2` is not guaranteed to exist in the `cgroups2`.
Not sure if this is necessary or not, but if it's not used anywhere else, I'd remove it from the `deep_clone` method.
Is there an option for this field? If so it should be a field.
This should probably be `input`
I think this should also be a private constant, since it's not a big deal for this.
nit: rename to `batchSize`
Is this not an issue anymore?
This should not be a new object.
nit: missing comma
This is going to make the session data match what's in the session. I think it's worth having a check in the session data, and then doing the session data in that data, or in the future we want a `confirm_welcome_mail` method, so that we can do it in the session.
I don't think you need the `var` here since you're using the `Dataset` function. I think you can use the `Dataset.getClass().getName()`.
This seems to be the wrong place for this case. If we are going to do this we should check if `NONE` is not `NONE` and then check if `close_timer` is `0`?
I don't think this is correct. We don't need this method anymore.
can you add a note here that this function will never be called if the cache is not in creatable.
I'm not sure this is correct. The `if (len == 0)` condition should be `>= 0` and the `&hdfsAsciiSourceData_[attr->getNullIndOffset()] = -1;`
Use safe navigation (&.) instead of checking if an object exists before calling the method.
I'm not really sure what the right thing to do here is, is it because the template_export/:id is not a template?
Is there a reason we don't use `hash_mask` here?
I think we should also update the copyright year in header to reflect the new version.
I think you can just do `if (a == NULL)`. The original check will be `nil`, so this is fine.
why is it ok to add this here? it will make the same difference for all nodes
@sttts - This is a breaking change. The previous version of DHCPRevOptions was already in the `o` list of `0`, so I changed the `o` to `o`. The same goes for the other one below.
Shouldn't this be the first time it gets set to `nil`?
This is a bit confusing, because `/` is the only supported `u` in the context of the Gem.win_platform?. It's the same as the Windows host.
I think this should be a private method. It's not clear what this is doing, and if it is, the docstring should be updated to reflect the change.
Can you use `T extends WebElement` instead of `List<T extends WebElement>` here?
I think it would be good to have an enum for this.
is this used anywhere?
I think this can be removed now, since backend will be None
I think we need to add a method to `GetDeploymentChain`
this is a change in behavior.
Why change this?
Why do we need to return an error?
why do you need this?
Why change this?
I think we can use `m.BackendServiceConfig.Image.HealthCheck.applyIfNotSet` here instead of the `m.ListList.apply`, which is more readable than `m.List.getDefaultScheduledJob()`.
Why are we adding this?
This is the fix.
In theory, the `type` value here is a little confusing to me. Maybe "the checksum address address" or "the text address".
should we also include this in the `provisioningDelayCondition` ?
this is not a valid way to generate the database, right?
I don't think we should do that. It's a little confusing. I'd say we should just always use `Kind`.
Why is this necessary?
I would call it `skip_import` because it's the same type.
Please remove this line.
Can you please change these to be alphabetical order?
This test fails because we have a `response.status` in the `200`, so I'd just put this one one line.
This should be a separate change
I don't think this is the right place to put it.
Why not `addSampleImportTransformer` ?
Please move the imports into the top
This is a very large change. I don't see a good place for this, but I'm not sure it's a good idea to have a `ServiceAccount` property in the `Sub subscription` package.
I think this should be done in `setDefault` method, since it's only used in the `set` package.
This is the fix, right?
I think we can just remove the `t.mutex.Lock()` call since it is already handled inside the `mutex` method.
I'm not sure why this is needed.
I think you can remove `.AddView(instrumentName: "*", metric services.Drop }` now, and remove this line.
Should we make it more general to have this in `npmConfig`?
I think it would be good to test that the headers itself is not "barbarbar", and then check if the headers is not in there.
We can't just call `NewBlock` here, since it is not really used anywhere.
Is this the correct way to get this number of bytes from the same title?
In other places we call the `gasLimit` function.
I think it would be more readable if you put `blockHeight` first, but not after the `RunAction`
can you make this a dict?
This is not needed
I don't think this belongs in the PEP 257 specific code. I'm a bit concerned about this being a bit of code.
shouldn't this also check the itemType is in the `if`?
I'm not sure about this one. What's the benefit of making it a `deprecated_resource` constant? It's a `deprecated_resource` so it's clear what's being used for it.
I don't see the point of the `getURLChannels` function being used anywhere.
This is not a good idea, but a user can't use it. I think we need to import it.
It's not clear to me why we need to cancel a `cancel`? Is it a no-op?
Should we use `strings.Contains(ty, "text/plain", "text/")`?
why need a migration?
I think you can use `\n` here.
Can you please explain why we need this change? It's not clear from the PR description that the `Changed` type of class is being used.
Rails/FindEach: Use find_connection instead of each.
"current head" -> "should be modified"
We should probably check if the node has been deleted before the node is deleted.
This looks like a duplicate of the test data
Should we also add these to HIVE_CLIENT_POOL_SIZE to HIVE_PID.xml?
This is not a "in" error message.
This is the wrong approach.
If the test fails then the test fails the test fails the test fails.
I'm not sure why you had to do this - I think the `IsWindows` is a better name for this.
This change is incorrect because `OffsetSameInstant` is not in use by `ZoneOffset.UTC`.
I'm not sure if this is correct. The `zA-Z` option is used to set a full URL to `None`.
This was a bit of necessitated by @cramforce. Why was it not added to `compare`?
Is this needed?
I think this should be a static import.
shouldnt we add the `email` and ` password` attributes?
Please rename to `preact_EXTENSION_KEY`.
Why is this needed?
@steveharter would you prefer to have a `suppressed-message` property instead of a `message` property for the lock? It would be nice to avoid having to pass the `sup` into the `line-too-long` object and avoid a `suppressed-message` call.
Why is this now?
Keeping this change, the log message should be more explicit: "log the stack trace: "log the stack trace: "log the stack trace: "log the stack trace: "log the stack trace: "
We should add a `TODO` to remove the second parameter as well.
Please don't change it, please don't change it. It's an API breaking change.
This should be in the same package as the `tab-store` file.
Would it be possible to do this by using a `default_scope` constant instead of a string?
Is this used anywhere?
why remove the `continue` here?
Would it be possible to move the weights outside the loop?
I think this is not required, since `postgres` is already a list
I think you can remove this line.
This is the default.
I'm not sure if h2o_header_flags_t is the best way to handle it.
Nit: `this.startWorkspace_.setResizesEnabled(false);`
I think this should be a const.
I'd suggest to use a constant for these variables and use it to avoid confusion.
nit: I think this is a bit of an odd choice to use a bitRead.
I think we need to check the other classes here as well.
I think this would be more appropriate if we just call the try-except-except-raise instead of doing this, since we already return an empty dict
Can we add an example here? I'm not sure if it's a good idea to have a good reason to not do it.
I would suggest using the `get` helper here instead of `data`.
I think this should also have a `ValidateIdentifier` method.
I think we don't need this private. It's a private method.
This is a change to the behavior of the `timeout` API. I think we should just remove the options options altogether and just call the options options in this case.
why do we need this change?
I think this is the wrong fix. The `EXEUTIL` function is used for the schema name, not the name.
We need to use the `DEFAULT_NAME_FEEDS` constant here.
This is a breaking change as it is used in some places. Can we remove it?
It looks like this was accidentally removed.
here you can use `_to OfficeHours.url` instead of `source_code`
I don't think we can change the type here.
I'm not sure this is the right place for this. It is used for the user-defined `Kind` and `userLatencyDuration`. It should not be used in this case.
Why is this change required?
Why is it required?
it seems strange to me that we don't need to do this... do we need to do any additional query query here? I would just do: `after_update :when_org_changes`
We should probably add these checks in the shame.
I think we should keep the old constructor. The new one is not a list of imports, and the next one is a string.
Does this need a `Kind` entry for the `TaskQueue`?
The `AccessList` is not used in the `AccessList` method. It should not be removed.
Is this the correct error code?
Can you explain why this is necessary and why it's not needed?
This is not needed, we can just remove it?
I'm wondering if this should be `self` instead of `SGEJobTask`?
You can do `t.timestamps :` if you don't have any other table, but you can do `t.timestamps`
I don't understand the reasoning behind this, just not to have the check_connection() call here.
Why do we have to define this as a separate file for now?
> If the graph is 1.0" should we change this to "Percentage of the graph"?
Please use GET_CAST_ISSUE_MESSAGE, otherwise it'll be more consistent with the rest of the code
Why is it a `new Dictionary` here?
@vrothese changes should be in the same PR as well as the other files
@Mapmonfresh what do you think about this? I think it would be more clear to say `cache_session[:id]) = coupon.code`
Why did you remove the %.512s here? It's not used anywhere in this PR, but I don't see any other changes in this file.
Why do we need a separate interface for this? It's only used in the `ReplaceUpdate` package, not the `UpdateUpdate` package.
This should be `OutputOutput(output, err)` since we don't need to pass the arguments
This function is only called in the `fetch_label` function, so you don't need this `else`.
I'm not sure if this is a good idea. I would expect the lowerDomainInResource calls to the lowerDomainInResource method to return the resource from the builder and then if it is null, it is possible to return the default value from the builder and return the result from the builder. This is not the case for every iteration of the lowerDomainInResource method.
This is a bit of an odd thing to do. We need to add an index on down to the table.
The `+=` should be tested here as well.
you can drop `BUNDLE_GEMFILE` now that it is not used anywhere else.
I don't think we need the return value here.
This is an unrelated change.
I don't think we can do this. The only difference is that we should have a `CompletableFuture<Void>`, not `part`. I think we should use `CompletableFuture<Void>`. The same is for `CompletableFuture`.
I'm not sure if the name is necessary or not.
I think we should be more specific about what the Flow.Table is.
Is it really needed?
This is a bit of overkill, but I think it should be `ProxyListenerELBV2`
why are you using the default here?
why is this in 10.10 now?
I don't think this is the right solution. The `ResponseResponse` option should be in the `ResponseResponse`, not in the `ResponseResponse` package.
Nit, I'd prefer to use `default` instead of `if` here.
Please don't import six from source.
What if we called `receipt` now that we have `expect(email.subject).to_expect(invoice.user_email).to eq` ? This will also help us to remove the expectation when we merge the two and test.
I don't think we should be changing this, we should not have to change the `getFlattenedValue` method to pass the value directly.
I think this should be done in a separate commit, or at least in a separate commit
I don't think we want this file to be removed.
I think we need to make the `default` parameter private to avoid the `ProductImage` field in the `ProductID` list.
I don't think this is right, the error message could be helpful. The user could have a message in `server.go` and not use the actual context.
We should avoid wildcard imports. Please let me know if I should revert this.
I don't think this will work for you. I would say, if you don't have a `bearer_token_file`, you should do `name: nil` instead, and you don't have a `bearer_token_file` file.
I think we can remove this line.
Why are these changed?
why do we need this?
This should probably be `s3.CreateBucketInput`
This should probably be a `var Version string`
this was a bug, right?
Why are these two separate actions?
I don't think you need this change. The `findOneBy` is a `null` value.
Is this change related to the bug fix? It looks like we're changing the key key key for the redirect table, but it seems like it's just for the user to use the `separator` field, which we want to avoid.
Why do you need to use `sys.stderr.write(data)` here and not call `sys.stderr.write(data).decode('utf8'))`?
Shouldn't this return `errno`?
I think it would be good to also add a property like "collection" or something to make it more clear what the default value is and how to use it.
This is not needed.
I think we should keep this here, as we are not using it anymore.
I think this is not needed. We can't be sure about it if we can add a `Debug.Assert(true)` property.
@chicm-ms do you have a reason for this change?
Is this function used anywhere?
The original code was a bit misleading. I think we should have a test that checks whether it's a valid message or not.
This is a breaking change, we should just remove it.
This is a breaking change, right?
Why did you change this? I think it was a bug in the first place.
This is a breaking change.
@jenclavePublicKey is a typo here.
This is a change in behavior.
The original code was not working before, and I'm not sure if this change is correct.
Why did you remove these @Deprecated classes ?
It looks like `s` is only used in the `lstrip` module, so I think it would be better if we moved this to a separate module
I think it would be better to have this as `isNotEscape` rather than `isNotEscape` (or something similar) as `isNotEscape` (and the other methods in `validateXML`) and have it be named `isNotXML`
why not just use `cbor` and use `isInUNIQUE` directly?
This is a breaking change. I don't think we can remove the `return` here.
Why is this not an error?
i'm not sure if we want this to be `cpp` or `tm_cpp`
It's not clear to me what " paused" is doing. Why not just remove " PausedPredicates" and "used" and use "used" in the logr.Logger?
This could be a `TODO`
I don't think this is right. We should remove this line.
This is the only change required to the core?
This should probably be a `<subdir>` since it is not a pointer.
This is not the same as the `BYTES_PER_DEL_TERM`, right?
Actually, the default values are prefixed with `1` so this can be prefixed with `1` now.
why is this needed?
I would prefer to keep the property private.
Should we have a ` unary` param that's used in other places instead? It's not a big deal, though, but it's a good thing to use that to make it clear that the `message` parameter is being used as a `File` rather than an `Type`.
This should not be necessary. `Public` should be a new instance.
Why do this in `expands_user`?
This looks good. I think the vNodeCache can be removed as well, since axe.utils.isHidden can be populated by axe.utils.isHidden
This should probably be called `IgnoreIgnoreIgnore` to match the name.
Should this be `volatile` instead of `volatile`?
This is needed because `args.push()` already has the `next-line` arg, so no need to remove it.
`is_log_op` is a boolean flag, not a list. It is a little strange to have a `list` with the first argument, and then you need to check for `None` if the `is_log_op` is not a list.
this is not needed. parser.parse will be parsed twice
This will need some more time, since it is a pointer.
I don't think you need the `updateCondition` call here.
This is a change in behavior, I think.
This is not a valid output, it should be 'when a duplicate formatter exists for the same output target' if it's not 'when a duplicate formatter exists exists for the same output target.
Is this needed? It looks like the function is only used for `impl_access_error` and `impl_access_error` in both places
Is there a reason to change this to `IsFirstActivation`?
I think this will be a little cleaner if `swagger.getPaths() == null`
I think this is the wrong place for this.
You can remove `mentor_image` from here, since you're using it everywhere else.
This needs to be added to the `*ResourceEventHandler` as well.
This import seems unused?
We should add a note to this to `true` so that it's always a valid view.
This was the only place where we have a lock for the `std::lock_guard` but the `recursive_timed_mutex` is called. I don't think this is a good change.
I think this should be `Etherbasebase.nil` and `ethBackend.Etherbase`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
should we also check for `application/font-*` and `application/font-es` here?
I think we should remove the message altogether.
I'm not sure this is correct. I don't know if we should change the types of the types, or if we can do something with a different type. I don't know if we should change the types of the attributes.
I think we should change this to "Cassandra tls verify server hostname", since it is the default.
This is not used anymore.
I think we should log something here, to prevent any existing user from running on the same machine.
Are you sure this should be `continue`?
Shouldn't this be a `upperupper`?
Can you please rename the method `scipy` to `scipy`, `LocalContext`?
I think we should remove the `getContext()` parameter from the function. It's not the case anymore, but we should be able to get rid of the `.getContext()` here and remove the `.get` call in the `get()` function.
Do we need to call `validateContinueAsNewWorkflowExecutionAttributes`?
Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
Can we add the "should be omitted" to the container's default config?
I don't think you need this check. You can use the `if` statement here as well.
Can we add a docstring here?
This is a bug fix.
Nit: I'd prefer `excessDomChildren` over `index` over `index`.
I'm not sure if this is the right place for this, but I'm pretty sure we can't do this for now.
Curious - what is the reason for removing this line?
This will fail because `error_open_zip` will never be allowed. You\'ve selected a directory.
This is not correct. You should use `s.w.snapshots.regUse(d.SourceSnapshot, "")`
`assert.reader()` is a little too late here
This is not a concern, but if we are going to add the "local" parameter to the function, this should be added into the "width" module (which is a concern for this file). I think this should just be a function in the future.
I would call this `getCustomData()`
Why make this private?
I think we should use `[0]` for this, but we should also check for `queryRelation` for `[1]`
I think this is the only place where this is called. I'd prefer if this is a good place to put it.
Nit: can we move this to the top of the file?
Does this need to be a breaking change?
Can this be `CLIImage`?
I'm not sure if this is a good idea, but I don't know what the table from tableMetadata is.
Was this a BC break?
Should we log something here?
This is a breaking change.
nit: can we have the `application/` prefix be the default?
This is a bug fix, but the error message should be "Session ID is null. Using WebDriver after calling quit()?"
I don't think we want to be using this, as I see no use-case, so I'm not sure if we want to change it.
I don't think we want to do this. If it's not, we don't want to do it. If it's not, then we don't have to do it in the first place.
I think this is a leftover from the previous PR, but it is not used anymore.
This is the main change.
Please remove the `?` part.
Is there a reason why you added this?
I think that this is not a temporary temporary temporary option. It should probably be a separate PR
I think we need to do this in the future, since we are already doing this in the `ManifestFile.schema()` method above.
This should be a `before` instead of `showSpeechViewer`.
Should this be `PercpuUsageInUsermode []uint64`?
I don't understand why this change was made. The `if` branch does not fix it, but it seems to me the `if` branch is not actually handled. The reason I fixed is to change it to `if` because it was not working. It was a mistake that I fixed in the first place and I fixed it. I am not sure how to fix it.
This should probably be `~ExecuteCDP~execute`
What's the point of this call?
Why not `\d`? This is a bit confusing to me.
`Time` should be `Time` here
This seems a bit weird. I would have expected a separate function to return a boolean, but I'm guessing it's just a function that returns a boolean, which is not a big deal for this?
I don't think this is the correct fix
I think this can be just `DEFINITION`.
How about adding `private static final` to all caps?
This is the main fix, but I think the more elegant way is to check for the more detailed characters in `ip_header` and `ip_without_header`, which would then be the more accurate level of the same value.
why is this needed?
should we make the internal override internal because it's only called from a non-registration context?
This test fails because the test fails due to the `tcpproxy_off` test.
Did you want to change the transfered to GPU in %f secs. %d sparse feature groups ?
why change it? I wouldn't expect it to be a node.statement(future=True) in node.frame().body
This is the only change I'm not sure about. If I'm reading this correctly, the MCTX_NUM_SIMD_SLOTS is the "simd_used" value.
whats up with these?
This should be a `String`
can you please use a more specific name?
This should probably be `Facades\BackendAuth`.
I don't understand this. Why is this in this PR? I don't see any related changes.
Is this needed anymore?
Shouldn't we also update the `prefAllowed` property in `borg.jit.annotations.pref.component.cs`?
why is this a hard coded value?
Why not use `yarpc`?
This function should only be used in the `API_BEGIN` function.
I'm not sure this will work. If I have an issue with a situation where the service was not being created, then I think it's better to have the same error as in `SPHoodieConfig` and have the same error as in the other call sites.
I would prefer if you didn't use `cd.HiveCluster` as it is a test.
This should be `ecs.util.filter.beat.encoding`.
This should return true if `key == true`, otherwise it will be true.
Please remove the empty space.
This is not necessary, it's always going to be zero if it returns an error.
I think this is a bit ambiguous, maybe we should rename it to makeTestBlockOpsConfig?
@mmaxim this is the bug that we should use the same `copy` API for `nodeStack`. I think we should use `nodeStack := := make([], inputPlan.Roots))` as we do for `copy` below.
This is the only change needed.
I think this will need a migration since we are in an explicit explicit setting
Why do we need this change?
I don't understand why you are changing this, but I don't think this change makes sense.
I don't think it makes sense for manifest to be a manifest
I would move this to the `if` block.
This should be `false` to match the `false` case.
I don't think this is needed
here I think we can use `1` instead of `1`, right? (just asking)
Is this test just for testing?
What is the purpose of this change? Can we make this configurable?
This was a mistake before, but it was not needed.
This is an example of why I'm removing this change. It is not a big deal, but it's a good idea to change it.
Can you add this to the docs as well, please?
Please avoid use of `import *`. Please avoid use of `*`. Also `import *`, `*`.
This is a pretty tricky one. I'm not sure if the last 2nd parameter is needed here, since the only time the input is used is when the last 2nd parameter is used is when the last 2nd parameter is used is when the last 2nd parameter is used.
This is a little hard to read. Is it really necessary to do this in a separate PR?
@deads2k this was the reason for this change.
Why are we doing this?
This is not a public static property. It is not used anywhere in the code.
Nit: I'd prefer to keep this in the doc, it's easier to read and read in a separate sentence.
Can we use `StatusGatewayTimeout` here instead?
Why was the copyright year changed?
This should be changed to `kubectl be` in case of error.
The `s1` is not used anymore.
can we use `std::unordered_map<hsa_agent_t, std::vector<hsa_executable_t>>` here
Don't we need the readStateHeight anymore?
I'm not sure we should do this. I think the `#if` below should be removed.
Could we use `Span addEvent(Status.text)` instead of `Span addEvent(Status.text)` ?
This was changed to `0` to make it clear that the return value of the array is 0.
Why do we have to set this? It seems like we could just set this once.
I don't see this `is` statement being used anywhere?
I don't understand why this is a global variable. Is it a good idea to check it's not?
to be clear, this is a bug in `pytest.semantic_ndarray`
hmm, I think it is better if you have a method that does this, then you don't need to pass in a table object.
Is it possible to have a log.subpiece(4) and just use it here?
Why is this being removed?
Can we put this in a constant somewhere?
There's no need to use a test for this
I would move the if/else to a separate line
This will fail if the annotation fails. I would suggest to add an annotation to `SegmentInfos<String, String>`
@tgamblin Do you know if there are other places we could use `raise SystemExit()` to get rid of the `version_info`? I think that would be more appropriate to just say `version_version` in the future.
This should be imported from nupic.data.generators
@jsoriano Is this change correct? This is the only place where we set a zero zero in the constructor.
Style: we can merge this with the previous PR: the trailing comma is causing a conflict conflict.
Can you remove the unused import?
I'd move this import to the top of the file.
I think this is not used anymore.
We should add a `contain` property to this and use that in the setter.
Why do we need this? It seems like the NET452 logic is wrong.
I think this should be `cmd-bcoin-MultiMulti`
Why not using `instance_group` here instead of `backend.get('group')`?
You can use ` locate_colon_mm` instead.
This is a little strange. I don't see a `FormatIsMultiplane` call here.
I think it is better to import this at `__init__` level.
Why is this being removed?
I think this should be called `getMedia().fileExists()`
we need to keep the docstring as it was.
Why is this added?
This should probably be `isQuestion`
I think this should be done in a different PR, but in the future it's better to keep it as a local variable and return the same value.
The condition should be if (result == PFS_RESOLVE_LOCAL) pname->service;
I would suggest `DefaultHost = "31000"` to be consistent with the others and below
Line is too long. [86/80]
If we are not going to handle cache then I think we can just remove this line.
I'm not sure this is correct, but if `OrderOrder.unsorted()` returns a copy, it will return `true` if `orderId` is true. It will be better to use `using System.utils.unsorted()` if it is null.
This is a bit weird. What is it used for? Can we just make it a directory?
This should be `errors.New`, `errors.Errorf` is the name of the string, but `errors.New` is the name we want to change.
Why is this necessary? I don't see it being used anywhere
This was the only place where the previous code was actually used.
Shouldn't this be a `Config`?
(style) line over 80 characters
Can we use ZMSUtils.removeDomainPrefix instead of ZMSUtils.removeDomainPrefix?
Nit: I would prefer `IsOnMainThread { get; }` as the default for `IsMainThread`
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This will need to be added to the `else`.
This is not a very good example of how `quilt` are used, and could be removed.
This property is not used anymore.
why not using the `omitempty` field? This is a breaking change for the API.
why is this import changed?
It's probably better to use a `updated_at`.
I think we can remove this, since it's not used anywhere in the PR. We can add it to the PR.
Do we want to make it configurable by default?
Can we just use the mockConnection rather than just using a mockConnection?
This is not a good change, but I don't know how to use this. It seems like it could be a separate commit for this PR, but I don't think it's worth it.
can we use a single `request`?
I think this check should be in `revealOrder`?
Was this a change in behaviour?
This is a bug fix?
Why did this change? I'm not sure it's the right change.
The reason for removing this is because the paths is an array and the paths is a string.
Do we need globalize itself?
This doesn't seem right. The only reason we need to set the default to false is if the input is `false` (which was already set to `false`) is `false`.
I don't understand the purpose of this change, but it seems like we should be setting `config` here, even if `config.config` is not `nil`
Would it make sense to use `free(kds);` for this?
I think this should be in the next line
The first 2nd value of acceptableVariance is set to zero, but it's the second 3rd case.
This should be `true` right?
This can be combined with the `VisualStudio.TestPlatform.Streaming.Logging`.
I'm not sure this is needed. `freeze` is already used in the `.js` files, so this is the correct way to do it.
Please add a trailing comma
I think this was the bug.
This participant has been previously invalidated as a typo.
Does this patch apply to all versions?
This is a bit of a hack. I think it would be better if we could just use `Method.find...` here.
This test is failing on windows. The `_notification` is not `None` but `send_notification` is the correct way to fix it. The `_notification` is not `True` by default. It is not a problem, but it's probably not a problem for the `_notification` code, and it's not a problem for the `_notification` code.
This is a bit confusing to people who are using `.py` for the package. I don't think that's the correct way to fix it. I think it would be better to just use the `config` as a `config_v1.0` instead.
why not `time.Sleep(0 * time.Second)` ?
Why remove this?
Why is this removed?
This is a very good candidate for for `///Base` to be used as a `of` type.
I don't see where `MachineManager` is used?
This is a very good use case to make it more obvious that the `#if` branch is removed.
Do we need to make it `false`?
This class is deprecated and should be removed.
should this be a class field?
why are these tests changed?
Is there a reason to keep the read message?
Is this a typo? `reflect` -> `unsafe`
This is a bit confusing. Why not just call `_dr_nlen(opt, DR_MAX_OPTIONS_LENGTH)`?
This spec spec looks like it was intentional to test that the `let` statement is being removed.
I would call it `verbose_stages`, because that's the default
Is this an unrelated change?
Why did you change the type from end to end?
Is this really necessary?
I'm not sure we need to cast the value here.
Can we remove the `theme.use` prefix?
This test does not assert anything. It will be better to use `StringUtils.hasBoolean()` instead of `StringUtils.assertEquals("Table name must match", "data");`.
I think this is not the right place for this. It is used in the `before` method.
This is not the only one that's missing
This should also be `@return`
This should be done in a separate PR.
Is it possible to get the `RemovedLayer` and `splitLayer` from the `BasicBlock` module?
should this be named `withTypeNameForTypedResourceName`?
I don't think this is the right place for the spark streaming micro microbatch scan. I think this is a leftover.
I think this should be done in a different PR. The `mappedClaim` field is now not being set as part of `Sprite` class.
This isn't a good idea, but it seems like it should be moved to the `createElement`.
Why not just add `cegocontroller` to `k8s.io/utils/pointer`?
I think you can remove "hout" from "hout"
Can you please update the doc?
I think we should just make `ctxserver` the params, and use the params directly in the `params` list.
Why is this changed? The `github.com/facebookgo/clock` import is now unused.
This was removed because it was already handled in the context of the `menu` function.
I'm not sure if this should be a `@SuppressWarnings("unused")`?
I think this test is testing for the wrong thing.
I think we should add a bit more detail about what we expect it to have, and we'll be doing that in a future PR.
Please don't remove the empty line here.
I'm wondering if this should be `padding-left` instead of `None` to avoid the need for `None` every time.
I don't think we need the `azureDNS` param anymore.
This was a bit confusing to me. If the link_to `Sign in` and the form is empty, then the link is empty. If the link is not expected to be empty, then it is empty.
I think we can keep this.
We don't need to pass the debugForcedLogMaker interface here.
I think it's ok to just return the error here.
Use the new Ruby 1.9 hash syntax.
This was changed in #5027 to be able to get the default step size.
nit: can you revert formatting changes to separate PR?
Can you use a `db-filters::e2e-kv.js`?
Shouldn't this be a `time.Duration`?
@dvoytenko do you know if this is the right way to do this?
Can we move this to the `buildCallback` package instead?
I'm surprised you didn't write the searches here. It's not a big deal but if you do that you'd be able to use the result of `searches` instead of `s => s.title !== action.search.title`.
I think we should use the same constant for the other string.
This is the only place where we're using `CloseNotifier` in the `cancel` function is called. I think we can remove the `ctx` function altogether.
I think this can be readonly as it's a private field.
This is a no-op, but it's not really necessary.
we should also support `SCANNER_OUTPUT_CSV_FMT`, as it's done in the `S` module
why not use the else here?
This looks like a duplicate of the else clause.
Is it a good idea to keep track of this?
The data for verifying this block is not required anymore.
Why not just make it a `BlocklistenerBuffer chan *block.Block`?
useCircuitBreakers -> setting it to false
why is this needed?
"Sparse inputPattern contains a ..." or "Sparse inputPattern must be sorted"
This is a bit of a hack.
I think this test was failing because `StandardCharsets` was never used.
can you please revert this file?
Should we also return the error if cmd.natService.Stop()?
This is now being a public API, but I think it would be better to keep it as is.
Why is this removed?
I don't think we should do this, we can just delete this file and add a link to the `-` prefix.
I think this is a bugfix, right? I'm pretty sure this is the best way to do it.
This should be configurable.
Why is this a global var and not just a `newStateDBAdapter()`?
`len(elems) - short_count - len(chars) -1`
I don't understand the purpose of this line - it's not a blocker for the `h2o_mruby_assert` method.
This is a test, we are not testing the original behavior.
nit: I would prefer `toTrim` as a variable, not `final`.
I think this can be removed now, since it's already in the base class
Is this used?
Is this a bug fix ?
I think we can keep this as `DEFINE_int32(max_edge_returned_per_vertex, 1000, "The max edge number returnred searching vertex")`
Is there any reason for not using `hermes.IsNull` here instead?
We can't change the type here anymore, so we can change the type in the future.
can you explain the logic for this change?
why not `anyMatch`?
Why this is necessary?
I'm not sure if this is the right fix
I don't think we need this, since the `camundaIntegration` is a `protected`.
`if` is not necessary anymore?
I'm not sure if we should be using `cudaxec` here?
This is a bit confusing, why is this in the constructor and not in the `primary`?
I think we can just return `null` here.
I would have put a default in the default block in the `align` method, and then have a default value in the `get` method.
This should be `-1`
I don't think we need to include the import for `bulk-edit.js`
I don't think this is needed. The `span` is already a component and not a component.
@deads2k @jsoriano is it possible to have a config option for this and not a hard coded value?
This file is not used anymore.
I think this is the correct fix. The `EXITING_DR()` call will do with the `dynamo_detaching_flag` above.
@mfojtik @jcotela is this still needed?
This is a little weird. I think the default value should be 3.
I think we can remove this too, but it's not needed anymore.
@daniel-sassenhagen this test was failing because `isTrue` is not true. It will fail in a case where a user has to use the same `isFalse` flag.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Please remove the include of the header here.
Is there a reason to use this instead of an underscore?
I'm not sure if it's worth the chevoked.
Why is the `schema` being removed?
"... application application the sequence number of the snapshot that will be created."
I don't think we should do this here, because the length length is 1, and the length length is 1, and the length would be 1.
Why is this removed?
This looks like something we can easily get away from this one.
I think it should be `@var DownloadStrategyInterface[]`
is it a typo?
it's a bit confusing to have a record with an alias for the record. Why did you change the record?
nit: should we call this `downloadProfilePhoto` or `downloadProfilePhoto` instead?
This is wrong now, since `array[]` is a type-checking argument.
Is it possible to return true here?
`tab_id` is not `None`, and `is not None` is not `None`, right?
This is not the change. The `e` variable is never used in this function.
@bparees this is the fix.
for noticing the change in the file name.
Remove this line
This is not really a good idea to introduce a helper function. It will be more efficient to do this in `const boost::numeric::bad_numeric_cast &e`.
I think this is the only one that's used for the `./` files.
I don't think it's necessary to have a default value here
Why is the name needed here?
Maybe add a TODO about that?
This should probably be a `config/gcloud/application_default_credentials.json`.
This is not the fix, it should not matter.
this is a leftover from the previous commit, please remove it from this PR
We can now have a `TestAccAWS("DRUD_NONINTERACTIVE")` test that fails.
I don't think you need to specify posix here since you are already setting it directly
I think we should be able to use a `overrides` here, since we don't want the `config.` in the `setup.go`
why adding this?
It seems like the same goes for the above `auto shifted_bearing` and the above `auto shifted_bearing` above.
I think we can just remove the `nPython`, it's already present in the `FULL_VERSION` module
should be rowPosition
What about the log message?
@mfojtik why not just remove this method altogether?
I think you can just use `Function.isFunction()` here
this is the main change. We need a test for the new version
@wachterjohannes I've added this as a separate change as I was working on it.
This is not needed.
This file should be removed
Does this work? I don't see it being used anywhere
as opposed to just one action, let's make this a private variable. `frozen_sort = false`
This is a test, but it's probably fine.
Why is this needed?
(style) line over 80 characters
Why are we not using RWMol **molExt?
Maybe we could move this method to the `RLock()` method?
Is this a change in behaviour?
Should we add an assert here that the client != restClient is null?
"used to install the OpenMP library by the ..."
Line is too long. [87/80]<br>Use the new Ruby 1.9 hash syntax.
I think you can just delete this line.
This is a very weird pattern. I would just put it into a method.
Why this is not `Err()` anymore?
This is a bit weird, the arg was 1. Should we be checking for the first arg in `isort` and not `isort`?
Same as above, please use tabs instead.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This seems like a good change, but it seems like there's a lot of other places that could be used in this PR. Can we just make this a variable in the constructor?
Could you please explain the logic here?
This is a breaking change. The `String#format` method is used to create a file at each time.
This should be a `TODO`. It's not necessary to call `self.assertRaises(ValueError)` in this case.
@liggitt this was a typo?
This is the one place where I could see the "WARNING" command.
Can we add a TODO here to remove it?
I think this should also be `replace-partitions`?
I'm not sure if we should be using these now, but I don't see any use of the `OSSBridge` for these.
I think this is a change in behaviour that we should be calling `user = User.query.filter_by(id=payload['id']).with_for_update().one_or_none()` here, and then calling `_activate_user()` on each line. I think that's a good thing to do here, but we should probably make the call to `send_welcome_email`.
Why do we need this check?
We don't need ` tuple` here, since the definition definition is already in the `get_index_definition` method, right?
I don't know if we should work out of the box, but I don't see a good reason for that.
Should this be a static constant?
This is the only change that affects TF providers. I don't think it matters much, but I think it's a good idea to move it to the top of the class, so we should be able to make this change in the class.
This should be handled by the `switch` statement in `AccountRound`.
I think we need a test for this because the caller can't see it in `wait_for_at_least_entries`
I'm not sure if this is the right place to do it. It seems like it would be better to just always set the value of the `if migration.IsDBVersionEnabled()` check in `if !isDBVersionEnabled()`?
This should be a `-1` value to match the version.
I don't see where `timeout` is used, can you use it?
I'm not sure if it is good to log the message here. It is not possible to log the message, and we want to log the message.
why not just `var rule = regexp.MustCompile("^>BYTECOUNT:(.*),(.*)$")`
Is this what you are talking about, or is it just me that the `newTopBlock` block is not always the same as `newTopBlock`?
can you add a mock to the other non-static imports?
I don't like this name either. I would have thought that the test should be "unsured" instead.
I think it would be better to add an additional `is_not_to video_path` helper method to `raiden/video.html.erb`.
Unnecessary empty line.
This is not needed anymore.
We should add a note to this.
What's the reason for this?
This will raise `DEFAULT_save_manager` when `pytest.mark.qt_log_ignore` is called, so you can use `pytest.fixture`.
this will overwrite the env var right?
Does `violation_data` need to be a string or can a list of `Index` be used?
We can use `-1` instead of `0` here.
Can you add this to `openshift.io`? I'm not sure if it's a good idea to have a global name for this.
I think this should be `[foo, typeof(ReviewBlockchain), typeof(ReviewBlockTree)` instead.
I'm not sure about this one. I think we need to keep the `@method` tag for now, but it's not really part of your feature, so I would like to keep it in mind.
I'm not sure what the best thing to do here is, but if you have a better way to do this, I would probably just make the function take the argument of the method, and pass it as an argument.
I don't think we need to change this
I would prefer `opts.project_root.c_str()`, but I'm not sure if it's a problem for this.
Should we default to None?
This is a change in behavior, right?
This is a bit confusing. I would just return `ok` here, since we are already returning `true`.
I don't think this will work, because we don't need this
I think this should be `pendingUpdate.allowIncompatibleChanges()` instead of `pendingUpdate.Optional()`.
Use the status status in the controller
It seems that this is not a pointer, and is a chance to write to a pointer to the null / empty struct.
Why are we changing this?
This test should be moved to the `AbstractIn()` method.
Please rename `$editThemeCache` to `$addThemeCache`.
Shouldn't this be `Boolean`?
This should be `Key(Document)`
Can we rename this to `FailedPrecondition ErrorCode = 7` so that we can remove it from the system property?
Can we just use `serial.Rune` here instead of `serial.serial.Byte`?
It's better to use `history_prepared_env` rather than calling `load_items` here, as it is not a public method
Should we add a `install` package for the package?
The `show_img` variable should be `subject_img` (see `subject_img`)
why not just use Math.min(30, Math.max(-30))
@matt-gardner Is this change correct? It seems like the `<p>` is the only place where we use the actual option, so we can remove the `<p` prefix entirely.
@kargakis @jcotela is this change correct? It seems to me that LUN0 Storage is a LUN0 Storage, but the LUN0 must be a LUN0 Storage, so we should be able to remove this.
I'm not sure if we should be using this in a way that we should be using the `strconv` API.
Metrics/LineLength: Line is too long. [123/120]
Nit: I'd prefer to not have `errors` here, but I think it would be more readable if we could just use the `chaos-mesh` package here instead.
This is a breaking API change, but I don't think we need to do this.
We should also remove these lines.
I don't think we should do this. It's a little unfortunate that we're not using the `back` table for the time being.
I think this should be `InternalLogger.Warn("Auto loading assembly file: {0} failed! Skipping this file.", extensionDll);`
can we avoid the tensor in theens?
This should be a `[` after the `$` operator.
I don't know if this is the right place for this, but I don't see a reason to have it here. I think it's better to be explicit, since it's a `@private`.
I think it would be better to do a `String.format` here instead of `(idx, "")` and then do a `String.indexOf` here.
Can we use `saleor/order/__init__.py` instead?
I think we should also add this to the other `On Holdshelf` tag.
This is not used
nit: move this to the top, so that it is clear that the `mysteriumnetwork` imports are in the same directory
I think we should change `self.assertEqual()` to `self.assertEqual()`
The function name is misleading, I'd suggest `h2o_mem_release_shared` (and the corresponding corresponding one above).
I think we should keep this and use the other abstract class.
I'm not sure this needs to be `aqua_teen_hunger_force.quote` as a part of `@example` as it seems to work fine for you.
We should also add a method `metricsConfiguration#getProtocol()` to this method.
Isn't this supposed to be `self.num_ins`?
This will fail if the refSize is empty, right?
I think we can just do `fmt.Fprintln(w, "bad request: %+v", err)`.
Why not `relocated`?
it's not an option to have a constant, please use it
Please use `loss_normalizer_momentum` instead, and add a TODO to fix this later.
Why is this needed?
Import packages with wildcard is not recommended. Please revert.
This could be simplified to `if x. This is the Qfunction: the tail tail` block below.
This is the only change that affects TF providers, and I think it's worth adding a check in the `opnd_get_base_aligned` check. (I think it's ok, but I think it's fine to just remove the check in the `index` check.)
I think this is not needed, the copy is already closed by the caller.
Is it necessary to get rid of these from `Erc7` since they are in both the Erc7 and the Erc721Binary list.
I think this could be `config.add_api_capability('revert, "enabled", timestamp)`
Why is this change necessary?
Should this be `SecretId: aws.StringValue`?
Is this needed?
This is the main change that fixes the bug that caused a bug. The problem is that if the network path is not in the directory, the network map will be the same as the directory, which will be the same as the network path. This is why the network path is not the case, but the test will fail. This will fail as the network path.
This is now an actual bug, no need to add it here.
This should have been removed.
What's the difference between `background_color` and `1` here?
`static` instead of `static`
Is there a reason to use an enum here instead of a global setting? I'd like to avoid the double quotes.
I think we should update the changelog too, since this is the plan for the new plan.
Maybe we should create an issue to track fixing the bug?
If you want to be sure that you are not using the actual `ationReceived` class in the `ProtocolFragmentationReceived` class you should also remove the `_get_Protocol_get_Protocol` method.
Is this the right place for this to happen?
do we need to move the import of the `corev1` import into `kubernetes/scheme`?
maybe we should add this to `when 'server_error'` so that it is compatible with other GitHub chars ?
Is this change related to the issue? I don't see it.
Is there a reason we don't do this in `setProp`?
Rails/Present: Use ifcurrent_user instead of unless unlesscurrent_user.
I think we can use the constant from `APP.To_REQUIRED` instead of `APP.To_REQUIRED`
I think this is a bit of a hack, since we are already doing this on the server. We need to make sure that we are in the middle of a route. Otherwise we'll have to update it.
Is it possible to use `LICENSE-2.0`?
why is this needed?
This doesn't seem right. It is a bit confusing that the `null` parameter is not null.
Do we want to make this configurable?
We should add a TODO to remove this and just use the new `getExtendedTypes` method.
Why is this deleted?
Was this a typo? It looks like it was just being dropped
I'm not sure what the best way to test is. I'd expect the test to fail, or maybe the test should fail if the test fails. This test is not actually testing the right thing.
This should be reverted. It's not a huge deal, since we don't have to change it.
Why is this one moved?
why not just remove this?
you should add a new param to createAutocompleteQueryBuilder()
This is the main change, but I think it would be better to move this to `_tab.present?)`.
This should be a `<div ref={ ...">`
This should probably return `NULL`, since there's no way to get the `free` from the server to the server.
I think this is a good idea, since it will be used in other places.
`key in self.keys[0]` is a more appropriate check.
nit: I would say this is not the case, as it is a bit hard to understand.
Why are we not going to remove this?
I'm not sure if this is the best idea. What if we have a migration to set this to 10?
Do we need to handle the case when `SuppressInstrumentation.Begin()` is true?
This is the main change to the `go fmt` import.
Is there any specific reason why this is needed?
We don't need to do this, since we can just pass in `_GenericAlias` directly.
I think this is a bit confusing since it's the "the" template, but it's the same as the "the" template.
Seems like the old code was using `reset` for a few seconds (since it's not doing anything useful in this PR).
This is the same as the one in `header.getBaseFee()` above.
Why is this interface added?
@deads2k i'm not sure if this is correct. I think we should have a message about what we want to do here.
I think this should also set the compaction to false, since the compaction start time for the new data files and the snapshot files are already in the UI.
This is the wrong way to fix the bug.
I don't think we need the `span` here anymore.
This should not be necessary if `result` is a parameter.
This should probably use `show(user.Policy.EnableRemoteControlOfOtherUsers)` to avoid the `<Post />`
This is a change of behavior, but I don't think we need to change it here.
I'm not sure if this is a good idea, given that the source source source source is sche, the new spec using the sche table's sche
Why is the comma comma here?
Is there a reason this isn't just a local variable in the `__u8 nat_lvl1_drop`?
I think we should keep both `SqlServerIntegration.OperationName` and `SqlServerIntegration.ServiceName`, to make it easier to read
Does this need to be in a `try` block?
why do we need this?
I think this was accidentally removed.
This is a bug fix, but it seems like a good candidate to be using a different `method` method. I'd rather use `method` here.
Please rename the variable to `takesHeapSnapshot`.
What is the difference between this and the two?
Is there a reason for this?
I don't think we should be changing this, because it's a different type of the limit that was removed.
I think this should be `getUpdateCKorUniqueIndexKey()`
Please remove this annotation.
I think we can drop drop `..` here.
This is a breaking change, but the default of the `MinVersion` is `tls.Config`, so the `tls.Config` is not `nil`, so this is not the correct version.
I would prefer if the `ReturnType.Head` is `true` instead of `IsXNullableReturnType` to `true` when `HttpMethod != null` and the `The `The` should be `IsXNullableReturnType`
This one was a bad typo.
I think it's better to keep `UseOrCreate` and return `List` here.
This is not needed, right?
Is this the same error we're trying to do in master?
Is this used?
this is a duplicate of the migration
It would be good to check for `None` here.
Should this be a pointer? I'm not sure if we need it.
I'd use `get_if_raw_hwaddr` here, because it is not used anywhere else.
This seems like a change in behavior... but if the image is running, then we should not have a `TestAccAWSTestAccAWSTestAccAWSTestAccAWSTestAccpodTestAccAWSTestAccpodTestAccpodTestAccpodTestAccpodTestAccpodTestAccpodTestAccpodTest` in `TestAccAWSTestAccpodTestAccpodTestAccpodTestAccpodTestAccpodTestAccpodTests`
I think we should remove this? It's not a big deal, just a note.
`create_no_window` -> `create_no_window`?
I think it would be better if we could just have a method called `getNonStreamingMethods()`, then we could just do `getNonStreamingMethods()`.
I think this would be more readable if we used the tuple here.
The default behavior is 0, so we can set the zeros twice.
what if we called this `.to_i` or something so it doesn't break anything?
This should probably be `_x`, no need to pass it in as an argument.
It should be alphabetical order.
This is not a string. It is not a string, but a string.
This is a very minor, but it should be `destinationClusterIP`
Why are we using `num_fixed` here?
`requireNonNull(elements, "elements is null");`
This will break our ability to use `<div class="row past-pr">` to get a `proposals-completed` attribute, but I think it's fine.
I don't think this should be a dir. This will allow us to use the agent in a way that is set to `1` and `1.16`. I'm guessing that's the case.
This is the only change that affects TF 2.7 and 2.7
I think this should be a static import, not the class.
I think this can be moved to the `TestNsenter` folder as it's a struct.
This should be a separate patch.
We should also add a prohibited_if for the value that will be set in the middle of a prohibited (and it will be set in the field)
I think this could be `nplpl`.
This is a very old test, but I'm pretty sure we're not going to have to change anything here.
I'm not sure what the purpose of the `byte` variable is. It is just a string, and I don't know if it matters much, but it seems like it should be a string, so maybe `accountUnits` should be an empty string, and then `accountUnits` should be an empty string, and then `accountUnits` should be an empty string.
I think we can skip the `data` here.
Could use `assertThat(mm.asMap().get(1).isEqualTo("2,3")`
I think this is the right place to put it here. The `location` should be a `top`, not a `location`.
Shouldn't we check for `accounting.Stats(ctx)` before checking for `default=0`?
I'm not sure if we should be using the `ScopeOfflineAccess` here. If we're going to do the refresh_token check, why not just have the refresh_token check be a string?
Why not use the `deliveries.clear`?
this was the main change, but it was the problem
There is an extra whitespace here
Is there any reason to make this `src/system/system/system_system_system.js` file public?
This is a bit of an overkill but I think the `instance_exec` is still used here.
I think you should be able to remove this
I think you need to change the signature of CoreTags as well.
You should be able to just use `@expectedException` here. It's not a problem, but I'm not sure how to test it.
Shouldn't you also check if `output_callback` is also undefined?
I'm not sure if we want to do this. The `getNodeAttributes()` method is called twice. I'm not sure what the best way to do this would be to use `node.getAttribute()` instead of `getNodeAttributes()`. The same goes for axe.utils.
Shouldn't this be a `@Nullable`?
I think we should add the `s.pssPostHandler` in the `Abstracthttp` package to the `GET` package.
Why is this in `props`?
Why this change?
I don't think this is right. It should be allowedPostRequest.
This is not a boolean, right?
why did you add this?
Use the new Ruby 1.9 hash syntax.
Please rename to APPLICATION_NAME
It seems this file is no longer needed?
This should be a `AttributeError`.
This is a regression. I think we need to do a similar check for the `if` check below, and then check for `payload != 20` and check for `throw new Error('Payload must be 20 bytes'))` in the `update` method, and check if it is 20 bytes before trying to avoid any useful error message.
This is the one that we want to use in `esc_padding` for the time we know that the value will be zero.
can we call this time.time?
I think we need to do something similar here, in `Create`?
Shouldn't we have a `setIeService` method that returns a `Service`?
I don't think this is the right place to add this. The `for` loop should be moved to the `Media` package, which is the same for both the `Media` and `Media`.
Shouldn't this be `pojoMgr.values()`?
I don't think this is the right place for this. I think it is a good idea to make a new relay.
`application.BlockNumber` is probably not a good idea. We should probably be using `application.BlockNumber` in the config instead of the default.
You can omit `& cancellation_params[:reason],`
Can we move the import to the top of the file?
The `Amazon S3` prefix is not necessary here.
This doesn't test that the input defaults are set to `null`.
I'm not sure this is the best place to put this. If you remove the version, you should keep it in place and remove it in place.
why not using the 3 more parameters `onchainConfig`?
This change seems unrelated?
I don't think this is correct. The `Node` is a public property that should be used in `createNode` (which is a `Node` field that is not a `Node` object that is passed as a `createNode`).
this file is missing the file
This is a very old implementation, and could be a bit more descriptive.
Why not just use `setUp` here, since you are using it directly in the constructor?
It looks like you have an extra `append` statement here, and you can use that instead of `.
This doesn't look right to me, it's just an array, and it's a `MenuItem` array.
The `API-MS-Win-Core-contain-Obsolete-L1-2` should be added as a new line.
This is not needed, you can just call `_activePeers.Values.Where(IsConnected).ToList().AsReadOnly();`
How about `TestIcebergSourceHiveTables.currentIdentifier = ident`?
It's not clear to me what this does, but what's the difference?
I don't see why we need the volumeStatusOK check.
I think we should keep the `\/` prefix for the case when the debugger is not in `https`
The message is misleading.
Should this be `Textgh` instead of `Textgh`?
Is this supposed to be `.each`?
"Note that many functions including array indexing use the apply"
`@var array array` is unused.
This could probably be simplified to `user.GetGroup() == "user"`.
isn't this a BC break ?
I think you can just remove this class and just use `fetch` directly.
i think this is not needed. if you are going to use it, please remove it.
This doesn't look correct. You can't pass the `.__init__` as a parameter, but you can use it in the `auto_string` instead.
Nit: This line is too long
@cramforce This change is the part I am confused. If you look at the code, the `semanal.js` file in the list list, you can't specify the file with the new file, but I don't see a reason for it to change in the list.
why is this different from the media?
Why not just `counter`?
@gianm @shwstppr I'm curious why this is needed, if the `ExecutorManager` already exists, it is already in the constructor
This is a bit confusing to me. What is the `ContextContext.OnError_FIX_ENABLED` and `ContextContext.OnError_FIX_ENABLED`?
Shouldn't this be a try/except around the block below?
shouldn't be a general util?
I think this is not needed.
Does this mean that we don't use the `--rm` url for the `--rm` url?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why not `write ?>` and `write T` ?
I think it should be removed from the `db` block, because it's not a chunks chunks, and it's not a chunks.
This class is not used. It can also be moved to the top of the file.
I don't see where this change is used?
This is a different issue than the `OS/xlocale.h` file, which is not a `OS/xlocale` file that is causing the `xlocale.h`. I think this is the correct file to be removed in #2599.
The previous implementation had an error to this, so I had to update it.
This was a bit of a bug fix, but I don't think this is right. The previous code was a bug. It's not an issue, but I don't think it matters for `isSupportedAudioMimeType` because `ImageMimeType` takes a `resource`, `resource` takes a `null` and `true`.
Can we move this to `LongType` so that it can be reconfigured in the future?
This is not needed, `typeForPrimaryKey` will be a `undefined`, so you can just do `typeoftypeof.emptyToEmpty(this[keys.realm], type)`
I would have added this line to the end of this test
Looks like you can just use `set_mode` directly.
Why are we using the `rawCode` here?
This will break existing users. I don't have a strong preference, but it seems to work with this code. You have to check for `precision` and `None` if it is not None or not, but that's a bug.
Shouldn't we keep the old `contractAddress`?
Just curious why we are not just returning the error?
Just to make sure: this works as expected. The `working_dir` variable is used for a `list`.
If you're going to do this, you could do `TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));`
Nit: import order
@pabloem please review this change as it was added in #2746
@bparees I'm not sure this is the best way to do this. This is why we need to set the table. This is the case where we don't want to set it. I'm just wondering if we should set the table to `properties`?
I think this is a bit confusing, since it is used in the user-defined data model, and it is used in the user-defined model model, so maybe it is better to just have the user-defined data model?
I would call it `from datetime import datetime` (or similar) to the one above.
Is this a breaking change?
I think this should be done in another PR.
I think this check is unnecessary.
Why are we doing this?
This change should be reverted.
hmm, this is the same test as `Lambda_data_converter.generate_ancestors_for_org` above, so this test should be renamed as well
@smarterclayton do you think this is right? I think we should have a test for this, but I think we should have a test for this.
Why is this package private?
Do we need to add the `--url` option here?
should we add a validation to ensure the `addResponse` is not null?
Should be `@type {number|undefined|string|undefined)`
This can be a bit more specific.
Is this TODO still needed?
This should be `this.state.formState = ev.target.checked ? 'on' : 'off'`
Is this test supposed to stay testing the same?
Is there a reason why you're not doing this?
I think this is an improvement. I don't think it's necessary to add a new type here since we're not using the names in the names.
I'm curious why this is needed?
This is a bit confusing, why not "eager"?
This change is unrelated, but it seems to work. I'd just remove it from the PR.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I think you should remove these lines.
Is this use the use statement for KVM files or do you need it?
@mfojtik this is the line that was causing the problem. I think we should have a check on this line and the next line was the last one.
This file should be reverted.
This seems like it should only be called if `machine.UARTConfig` is `false`.
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
Why is theclumsy-stefan not used here?
I think this is a bugfix. We need to update `iFromPeers` to be safe for now.
Is this needed?
Do not use a `stubstubstubstub` function. Use a `stubstubstubstub` function.
I think this should have been called `refreshaxedReclaimPurge`
why theLondon instead of using the new variable?
This is not a change in behavior, but I don't think we need this change, as we already have a default value for the default. We need to make sure that the default is not set to True.
I'm not sure if we should do this. It's not necessary for `calcGenBlk` to be used.
why did this change?
Please, please move this to a separate file.
Could you please add a docblock here to explain why the behavior is correct. It would be better to use `for (int ...` and then just use `for (int ...) {` to avoid any confusion. Also, I would suggest to use `for (int ... {` on the next line.
Please rename to `ignore`
I think this was a mistake before?
This is the fix.
I think you should remove `setVisible(false)` from the previous block.
We don't need this package anymore. The `execution` package can be used by the `ecs` package.
Use 2 (not 0) spaces for indenting an expression spanning multiple lines.<br>Tab detected.
This is not a big deal, but I'm not sure why you need this. You can just do `return NULL || NULL` and you can just do `return !ev->flags & ASIO_DISPOSABLE)`
I'm not sure what this means. Is it possible to have both `PeriodicExportingMetricReaderOptions` and `Periodic` here, and then use `.DefaultCollectionPeriodMilliseconds`?
The `StatusCodeServerErrorRequiredLockIsNotHeld` is not written. The `P8` lock is already written.
The name `GroupByError` is not very descriptive. How about `pass`?
Is this necessary? I thought it was already in the scope of this PR?
Why do we need to keep this private?
This should also be added to the list, right?
I don't see how this is doing anything.
why don't you use `g_hip_visible_devices.end()` instead of `auto` ?
I think we should move this to `zpoolStateUnknown`, and add `zpoolLastSyncTimeCommandError`
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think you need to pass a mock here since you can just pass the mock directly to the function
Why do we need to keep this private?
I think you can just remove `self.f` and use `self.window` instead of `self.window`
@sparrowDom Just a thought. Can we just use `errors.runSequence`?
I don't see a good reason for this change.
Maybe we should add an enum for new fields.
I think this is a good time to fix this.
I don't think you need this here. You can simply use `EXE_MEMORY_FOR_UNPACK_ROWS_IN_MB`
I don't see why you are using the old `backend` here.
I think we need to update the description of the new space after the word.
Can we remove this form.semantic_errors too?
I'm not sure we can remove this.
I'm not sure if this is a good idea, but if you do a `issue-prop` thing, it might be better if we could use the same name for the `specs` package.
We should add some docs for this to work.
can this be `DockerfilePath` instead?
This should also be `harparser`
I think we can use `spec.basefolder` here
Can you remove the `List<T extends WebElement>` here?
>3s [](start = 12, length = 7) nit: use the `3` for the second parameter?
Why `opts.fee` is `undefined`, not `opts.feeSat`?
`unless windows? # JRuby on Windows runs this even with the conditional on the block`
I don't think this will work, because the number of items in the cluster are not in the cluster.
This is a very old version, but the new version is not in the current implementation.
I don't think you should do this here. If the build is in the `HttpException` then it should not be in the `Supplier` package.
do you need to make an explicit cast to proto string?
This should be a debug level.
The H2O_HTTP2_ERROR_PROTOCOL_CLOSE_IMMEDIATELY is not used anymore, can you please re-add this to the other lines?
Why is this needed?
Can this logic be moved into `gulp dist --no-Xattr` and `gulp help --no-Xattr`?
I'm not sure about this. It's a little hard to follow. I don't think this is a right way to do this, but it's probably worth it.
This is not a hip_impl::demangle(name.c_str(), if demangled is nullptr, should be the whole whole class.
The file is already in the go-algorand.
@dvoytenko @jridgewell Is this change intentional? I think we should keep this, as we'll have to make sure the label is not found, otherwise we'll get the actual node from the label in the actual node.
I'm not sure this is the correct way to check if the data-type is in a data-type.
nit: you can return the empty line
This is not the same as the `delegate`. The same is used in the other places.
I'm curious if this is the reason why you removed the local environment?
Can you move this to the end of the group below the imports?
This class is unused, and is causing a crash.
This was a typo, not a typo
I'm not sure if this change is safe, or if it's just for the purpose of `modules` we should just change `modules` to ` substitution`
"Dockerfile to use for building your application's container image" -> "Dockerfile"
I don't see any code using this, but it seems to me that this is a change of behavior, and it is a bit confusing to have this be a public key in the code.
I don't think this is the right change. The `list` list is sorted, not the list.
remove this, it will be cleaner to have the Reader as Reader Reader, and the Reader will be used when the Reader is disabled.
`num_threads` is the same as `_file_error` so it should be removed.
`SignedData::getAuthor().distinct()` can be replaced with `SignedData::getAuthor().count()`
Shouldn't it be in `github.com/`?
Why are you using the variable `ArticleDataFixture::ARTICLE_COOKIES_1` directly?
This is the same change as the "default" exception message.
Why do we need to make this configurable?
This is not a global option, but it should be in a different way
Shouldn't this just be a bool?
Is there any reason why this is only used for the `Range` package? I think it would be easier to just use `ConfigGroup`.
I think we should be using `deliver_now` here instead of `deliver_now` because it's a boolean
This is a bit of a hack. I would have thought we'd be better off having a single function that's passed in as an argument.
What is the purpose of this change?
I'm confused, why is the limit being added here?
I'm surprised you didn't add the `_tls_hash_sig` argument to the `sig_alg` argument, but I don't think it's necessary to change this.
Is there a reason for this change?
What is this change doing? I don't see any changes to this file in the PR description.
This should be removed.
This is a bit weird, can we just do the domain_error in the constructor?
can you add some description about what it is?
I'm not sure if this change is correct. The only reason I'm not seeing is that the new code should be removed.
I think it's better to put them in the interface.
I think this should return an empty `(String::string, StringComparison)`
This feels wrong... I don't know if it makes sense to have this in the `attr_accessor` method
I don't know if this works but if you are setting it to `""`, then you can use `if` instead.
There is no reason to change this.
why do we need to check `Open` here?
This is a very minor thing, but I think it's better to have a method `blk.Transfers` that returns the full list of `blk.Actions`
This was a bug, because the previous code was not correct. It was only removed in the first place.
This is not needed anymore.
Why did this need to be here?
Is this file actually used?
Was this intentional? I don't see a good reason to change it.
I'm not sure this needs to go away in this PR.
I'm not sure what this is used.
This method is only called from `TestIds` so it doesn't need to be annotated with `@return null`.
Is there a reason why you didn't put `instr` on the `instr`?
This is not a valid valid output.
Why not just call the name of `m`?
Remove empty line?
I don't understand why we have to do the same for `body` (or any other exception) in `close()`
This was a no-op, but I think the `onFinished` check is redundant.
I'm not sure this is the right fix. What do you think about passing retry as a retry and passing it in to the `Make_help` helper?
I don't think we need this file, it's not needed anymore.
I don't think this is a correct version.
Why is this being removed?
I think this is not the right way to fix this, but I would say it is better to keep the `ply` param and then just have a `ply` attribute on the `tq` module and then have a single `ply` module on `ply`
Can you add the `.Spec` param to the client?
> [](start = 40, length = 1) I don't see the reason for this change.
What's the reasoning behind this change?
We should probably have a test that checks that the output is in `sseq` rather than `asflr`
Why is this required? Isn't it enough for this case to be a `null` check?
I would prefer a `update_print_fix_fix` helper and use it here.
This will fail for every single element if enabled_features_found is enabled.
This should be `get('system::lang.locale.ar'),`
This should be a `default`, not a `fullProcessedId`.
Why is `push` not `push-up`?
Add a docstring explaining what hash does
I'm not sure this is the correct name for this. I don't see a reason for this change. It seems it's only used for the `repository` class. Maybe it's just `repository.copy` or similar.
I don't think you need to add `PMIX_LIST_FOREACH_SAFE` here.
Why do we need this test? It seems to me the test should only run once.
Why not just call the parent class as `@inheritDoc` ?
I think we should avoid this. It's a good idea for the user to use the new method to avoid this. It's not a good thing to do.
Metrics/LineLength: Line is too long. [123/120]
I'm not sure this change is needed.
`variableInMap` is not a `WorkspaceSvg` object so I don't think we can do this.
This filtering is used when rebuilding the index.
I'm not sure this is the right fix since it will be a local variable.
This is not needed anymore.
I think we should just remove the `panic` part.
I think it would be better if we used `intentionally.dotnet.Trace` for the class name.
This is not used anywhere.
This is a change in behavior. Is it intentional?
This should be `elements.emby-collapse`
Why do we need this?
Why does it return stringtab?
I don't think we should import this class from `src/main` to `src/main`
why do we need this? I don't think we need it, it will be a lot of work in some cases
We can't use the constant `content-publisher-overview` for the route, but that's a bit more clear.
Instead of hard-coding "APP" and "APP", use "save summary" instead of "save summary".
Why do we need this? Is it a separate function?
This change was necessary to prevent a bug that was fixed by this PR.
This doesn't look correct. I think we can just remove it.
This is not the only place we need to do this check - is that a `unknown_internal_yarpc`?
This is the only place where the library was created. I don't think we need this.
Can we put this logic into a single method?
What is the difference in this case?
I think we need to check for `!IsStackable` here
This is the fix.
We could probably just use `vol.Annotations[string(v1alpha1.StorageClassKey)]` to avoid the need for the else here.
We should also have an `Subnet` type here.
I'm not sure this is the right fix. It's probably not the best way for us to use the link.find method, but it seems like it should be the same in `find` method?
`downdownpaths` is not a `List`.
Why did this change?
would you please elaborate on why this is necessary?
Align the parameters of a method call if they span more than one line.
I think it's not clear what this actually means. We're using a lot of things to store in one of the three states, so I would just remove it from the `for one of the three` and `for one that is not in one of the other`s.
@franckc @mheon, do we need to call the resources here?
I think we can remove the `.String()` call since we already have a very small call to `FormForm`
I'm curious, what's the motivation for this?
@JeremyKuhne might be worth mentioning this in the PR.
This is a leftover from the PR
This should be `$area.php`, not `$area`
i think we should keep the old name and use it to make sure we don't change it in future
I'm a bit confused by how this works. Why do you need to change the behaviour?
Why is this change necessary?
Why not just call the version version twice?
I'd prefer to see this on the `std::vector` itself, since it's not a type.
Please remove extra new line
Do we want to use the default `copilot-task` in the default package? I'm not sure how to deal with the default value for the default package.
This could be a bit confusing, if `input` or `change` is empty, the value will be empty. I think it would be better to just check for null and empty, but that would be more readable.
nit: `x` should be `2021,1`
I would prefer to have a `==` here.
I think this should be `node cache`
I think this is not the way the way the argument is `issubtype(X, B, ...)` but I'm not sure what the difference between this class is
Please remove this empty line
This is not necessary.
@matt-gardner, this change is not correct, but I guess it doesn't matter. I'll let you know.
This is a little confusing, since the error message is not clear. I think the message should say "uniumum number of args in log directive is 3.
I think this should be a private method.
I think we should be able to remove this line.
I think this should be `global.googlesitekit.api = API;`
If we don't have a imageIO at all, we could remove the `ImageIOFactory` from the imageIO instance.
Could we use `Tags` here instead of `json`?
If we are not using this variable, we should set it to `nil` instead of `c.Environment`
Is it necessary to use `exports` here?
This can be simplified to `os.path.abspath`
I would suggest to use a different name for the getWineEnginesPath
Should this check for the new operator? Or should we check for the new operator in the `if (exist == scanItems_.end())` block?
Do you need this?
I'm not sure if this method should be called from within `OpenTelemetrySdkEventSource.Log`?
This seems to be unused
Please make sure to update this value as well.
I don't think we need to add these to the base class. In particular, the loginOptions should always be set from the request class. We need to add a new `getJwt()` method to get the `jwt` instance.
I think we need this check in `focusElement_`
I think you can remove this import
I think it would be good if we could also change `Babbage` to `2019` and change the name to something more meaningful, like `Babbage`.
nit: can we use `OriginalURLCtxKey` here?
I don't think you need the `push-notification.time-chart-serie-messages-name` variable.
`repl` or `repl`. This is not needed anymore, as we already have a default value in `lib/constants`
maybe we should use `ot_gpg_error_to_gio_error` here instead of `ot_gpg_error`?
Isn't this the default?
What is this annotation used for? I'd expect it to be there.
I'm not sure this should be a pointer, it's a pointer.
I think it's better to use `Save` instead of `Save`.
Can we move this to line 152?
This should be a separate PR
@birdsarah what do you think about this change?
remove empty line.
I think it would be good to add a `seo` field here to avoid the need for the `Matcher` parameter.
Redundant curly braces around a hash parameter.
nit: can we just make this `if`, `_shape_as_tensor`? `torch._shape_as_tensor(img)`
@smarterclayton do you think this is the only change that affects this PR?
I think this is a leftover.
I think this should be `find_by_vanity_url(params[:project_id])` instead, since the method name is not very descriptive.
This should be done in a separate PR.
I think it would make sense for this to return a `nil` rather than an `nil`, but that might make it easier to understand what the expected behavior was.
`public function getSource(): StatementsSource;`
This is not the equivalent of --ponynoscale
I don't think this belongs in the `HandleUpdate` package.
This test is failing because `checkContext` is a `TestCase`, so it doesn't need to be a special case.
@khain1 this is a bit weird, I would have expected the `auto*` to be `None` if the `auto*` is `0`. I wouldn't change the code, but if the `auto*` is `0` then the `auto*` is `0` and `0` wouldn't change. I wouldn't expect the `auto*` to be `None`, which is the case here.
Can we call this `resetIndexToServiceSpansCache` instead?
This should be `assertEqual`.
I think this should be `if not Throwing:` since it's not a `t`
I would prefer the other methods to be defined in `transform_to_type` rather than `transform_to_type`.
This should not be set.
I don't see the blogiconicon.ico defined anywhere else in the file
Is this really needed?
@matt-gardner, what's the motivation for this change? It's not a problem, but if you're going to change it, please add `TODO` for now
@jridgewell I'm not sure if we should do anything here. I would expect a `!!label` field to be available to the label.
This is a bit of a nitpick, but can you move this to the next line?
I think it would be better to move this logic into `pkg/configurable/configurable.go`
why do this instead of removing it?
Do we need to check `@object.published` here?
nit: I think this is a good idea to remove the `ByteBufUtil` from `decodeList` to `nioBuffer`.
Is this still needed, or can we remove it?
This is a bit of a weird change, but the ` sprintfCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST` is not a `MetaCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST` which is not a `MetaCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST` (and is the ` sprintfCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST`). I would prefer to use ` sprintfCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST`.
This was just about to be safe, but I don't know why it was here.
I think the cast is unnecessary, because it's already a list
nitpick: could use `testutil.create_lambda_function(user_op.lambda_name, aws_stack.connect_to_service('iam')`. Same for the other test files below.
"disable" is the same as the previous line. I think it should be "enable" or "enable" (or "enable"), not "enable" as the default value.
@mjkkirschner @pakhouapache if you have any concerns here?
I don't think we should be changing the API here. It seems to be in `pkg/common/util` that we are passing in `entry` to the API and then we're not using the API for the API.
Should we add a return type to this function?
I don't think this is right. The `Report` is used to create a `path`, so it should be `report_path_hash`, and `report_path_hash` should be used to create a `path` object.
Thanks for this fix! It was a bit unfortunate that the `i` is not used in any way to fix the bug.
better use a blank line after this one
This test is testing what we want, can you add a spec for this?
`file_info` is a bit confusing. How about `unflushedPaths`?
I don't think this is the right solution. It's a good idea to have a test for it.
Shouldn't this also be `tab.TabData._initializing`?
I think we should also make this a constant. `must_respond_with :unauthorized`
We should be able to use `[0] = '\0';` here.
why change this?
Align the operands of an expression in an assignment spanning multiple lines.
nit: you don't need to call `restProducerInvocation.setAfterCreateInvocationHandler(..)` for the `updateProducerProducerInvocation` below.
We should probably use `UseUseUse` instead of `if`.
This will cause the build to fail if the array is not `""`. I'm not sure if this is the best way to fix this.
What is the purpose of this change?
I think we need to add a `is` check here, as this is the default.
Is this really true? I think we don't want this.
@stephentoub do we want to support both `--mode=release` and `--mode=release`?
This is not a good idea, but I'm wondering if we should just remove this `NullEnabled` and `spinEnabled` fields.
I don't think we need to specify the snapshot.Error here.
What about 50000?
Maybe add a message here?
Use %w or %W for an array of words.
This is a bit of a nit, but it would be nice to have the key-value-type-type-type-type-type. It's a little confusing that the key-value is the key-value, which is why I'm not sure about.
Should this be `CACertificate`?
I think we should just return `False` here and remove the `return False` check. It is not needed anymore, right?
Does this work with the test? I think it's fine to leave it as it was, but just wanted to point it out.
Just to be sure: this is the only change that is needed.
I think you can remove this now that it's not used anywhere.
This change is not needed
I think this should be `replacement != nil`.
I don't see this annotation used anywhere.
I don't think we should add an `Error` here, since it is not a `tabwidget`, and it's not really part of this PR.
Why do you need this change? It seems unrelated to this PR?
This is the main change.
Can we change the default to public?
I'm not sure this is correct, but maybe it's worth noting that there is a particular driver.Watcher should always contain the same type for Variable.Value. instead of just skipping the type.
I think you can remove `T` here
I'm not sure if this is a good idea. I'm not sure if we want to do anything about this. I'm not sure if this is worth it. I'm not sure how to do it in the code, but if you feel strongly about it, I'd rather just do it in the `.encode` or not.
I'm not sure this is correct. The `enumerable` flag is used to be `false` by the `configurable` property.
Do we need to keep the duplicate?
I'm not sure this is the right place to put this in the chain, but we should probably move the `Version` below the `ScheduledEventBatchId`.
This is a good example of how the first argument is set to `null` (the first argument is `0`). So this change should probably be reverted.
Line longer than 80 columns
This should probably be `if (tail_) == len`.
I don't see any reason to keep these changes here.
Why does this need to be added to the previous version?
Why change this?
Style/RescueStandardError: Avoid rescuing without specifying an Exception.
Could be simplified by using `.to()`
This is the new test, right?
This should not be a public API, since we're not using it in the `_is_editable_prop` function.
Why is this removed?
I don't understand the purpose of this change.
Why not `1.any()`?
I'm assuming this is the wrong place for this.
I think this is a bit confusing. What do you think about: "I hope hope is't a big joke with a big joke"
Can we have `locationName:"list"` here as well?
This is the main place where I'd like the `render layout: false` check.
can you make sure this works for all the places where we need to do it?
I don't understand why we are passing the `go` here.
How about using the `WelchWindowFunction`?
I'm not sure if this will work. I think it's fine to remove.
I would suggest to import rdqueries directly, as it's a global file (as opposed to one with rdmolops, and then we don't have to import rdqueries in the main module)
I would move `wait` to the next line.
why change to `logging`?
This is the fix for this PR, but I think it would be nice if we could just remove this `sort`.
This change looks unrelated to the fix, it's just a small cleanup.
Can we make this `resolutionOp` instead?
Should this be nullable?
@jcotela It's a bit of an unfortunate that the `long` variable should have the same name as the `Array.Array.Array` that is the number of bytes that are the number of types. I think we should have `int` and `long` here instead of `Array.Array.Array`.
Can this be replaced with the other `if` conditionals? If so, should this be `if (id.StartsWith(MsDataFileImpl.PREFIX_TOTAL.Length) == 0`? Or should the `id` be the same as `Substring(MsDataFileImpl.PREFIX_PRECURSOR.Length);`?
I think the `not_a_peer (endpoint, false)` is enough, since the first condition is `preconfigured_peer_a`, so the `else` check can be removed.
This should be changed to `jetpack-2017`
Why is this import changed?
I think it would be better to move the `ProcessLabel` check to the `extension.go` file, since it is only used once.
I don't think this is the correct place to do this.
I think it's better to use `format_type` instead of `html` as it's more readable.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [90/80]
This is not needed anymore.
I think `applyMode` is not necessary here, because it will never be undefined for the `else` case.
I'm not sure if this is the right approach, but I think we should just remove it.
This should be conf.HTTPConfig.Validate()
This should be an example that is not a user-facing object.
this should be grouped with the other goimports.
I think you should use `==` instead of `==` in order to avoid the need to change
@c3do @danrot @dantleech did you check that the `class` is empty?
Shouldn't we also mention that the fields that the containing is in the `DiscoveryMethodTransformer`?
I don't see this method called anywhere. Is that correct?
nit: I'd prefer `&&` to `&&` to avoid an extra `if`
Can you remove this import?
This is the only place where we need to add the span field.
I don't see where the `ipip` is used?
We should add the attribute to the searchAttributes and keep the existing attribute name in the `saName`.
should we set `KBFS_DEBUG` to true in the command line?
This will be removed in restart.h
Extra empty line detected at block body end.
This should be `// +build unit`.
I wouldn't set the `metadata` as an arg here. This will make it easier to understand.
I think you can remove this line
`MaterializationOrObservation` is not defined as `MaterializationOrObservation` but I think this can be removed
I'm not sure about this change, but it seems like it's a test that the column is not empty (and the one in `build-system/common/internal/__init__.py`). I don't see the point of this change, but I think it's worth it.
This file is unrelated to the PR.
I think we can remove this now that it has been deleted.
The name of this variable is not clear, maybe something like `TryPromise.toMetaMetaModel`?
This is the only line needed in `#include <fastrtps/qos/QosPolicies.h>`.
Should this be internal?
Why did you remove LoadAccount and LoadReader here?
I'm not sure why we are not using localCache_.end() here, but if it is the same we have for localCache, then the localCache_ should be used instead.
I don't like the idea of this change, but we should probably make sure the diff is not a `ContainsSubset`.
I don't think this is correct. It is a bit confusing to read.
Can't we just remove this method entirely?
This should be `!isVersion() && result.isVersion()`
Does this just need to be `Warn`?
This is not needed.
This will need to be in the `defaults` folder.
This method is not used anywhere, right?
Should we have a better name for this than `guidVSPackageString`, to match `Guids`?
@jridgewell do you have a better idea? I think you can use `h.resolveClientPort = ":" + h.clientPort` here
I think this can go on the same line as the `IMessagePack.Formatters;` above.
What about using `dev/null` here instead?
Do we have to check if this is a valid path?
This was the only place where I was trying to use it, but I'm not sure what to do here is.
I think it would be better to use a `Map` here instead of `That`.
Should we use `metasig` here?
I think this is a mistake.
I think we should update `proposal_url` to `proposal_url` for consistency.
I don't think this is the right fix. The issue is not the same text domain but it seems to me the issue is still in the `RProfile` folder.
This should probably be a `List<ExecutableFlow>`
I'm not sure if `repo.className` is the right name.
This method should be private, since `disabledMetricAttributes` is not a boolean.
I think this error message is misleading since it's not actually being used.
This should not be needed.
I'm not sure this is the correct name for this. `rclone` should be `UserAgent`, not `ID`.
I'm not sure this is a good idea, since the `# noqa: E501, W60_classes, ...` below will be removed.
This is a bit confusing to me, if the `overflowModuleQueue` is disabled and the `overflowModuleQueue` is not enabled, then the `overflowModuleQueue` is not enabled. I would just change this to: `overflowModuleQueue = newConcurrentRequestQueue(10000, AsyncTargetWrapperOverflowAction.Discard, AsyncTargetWrapperOverflowAction.destroy);`
Is this a regression? If so, we should remove the `prev` argument.
Please add a license header to this test.
I think we can just use a `FakeID(1, tlf.Private)` here.
this import is not needed
@jona-sassenhagen this is where we remove the class from the constructor. I think this is the fix
I think this can be reverted, right?
I think it would be better to use a `ResourceSpan addEvent(Status, String target, timestamp)` here instead of the `Span addEvent(Status, String target, timestamp)`
This should be mocking to use the same interface as in the `testUser` method.
why is it changed from committee.Committee?
I think this should be called `this.ID_id`
Shouldn't `a registration` be `a registration` here?
I think this should be left as `*args` rather than `**args`
This test is not needed, the `BinaryAnnotation` already has a span and annotations.
Why do we need a tuning of these?
I think we should add a `case` here to make sure we don't change the default behaviour in the future.
why do you need to specify the command?
Why is this needed?
I think you can just remove this method entirely.
This is a bit weird, I'd rather have `Encoded authorization failure`.
This test is now useless.
I think this should be `strconv.arg()` and `strconv.arg()`
I think you can just delete the whole function, `tagName()` is a bit confusing. It's not a problem, and it's a problem because `tagName()` already has a `target` attribute.
I think we should be using `New upstream()` instead of `glog.Errorf` to prevent any error messages from being thrown.
Is this a valid url?
This is a bit confusing, why do we need a `expect_deprecation_with_call_site` call?
I think we should make this final.
I don't think we need to escape the `nil` of the message, since the code does not match any of the `.String()`.
I think this is the only place where you need it.
Why do we need this in the `OSSBridge`? I don't see it being used in any of the other stuff.
I think this is a bug fix. It's not a big deal, but if you want to check the return value, then you don't have a null check on line 138.
I think it would be better to keep the old old old code and have a check for the new new code.
Can we remove the package?
This should be `@param array[]`.
Is this needed?
This should be moved to `TestFlowState` and `TestFlowState` to keep the interface consistent.
@adamjstewart Do you know if this is the right place for this?
Shouldn't we also check if `c.cgroupManager.Exists()` is true?
I think this is the right place for this method. The table check is `identifier.name()`.
Use `.to be_reset` instead of `.controller`
Let's change this to `ks.Series`
Can we just add this to the description?
@jridgewell any reason for this?
(style) line over 80 characters
Is this something we need to do with LogicSig and TEAL v1?
I think this is the only line needed here.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think this should be in this PR.
This should be a try-catch, as the exception is not thrown.
This is a little weird, why do we have to do this?
I think this should be in `core/types.h`.
Why not `static`? It's not a private private private.
This class does not need to be annotated with `SerializableRenderer` or `SerializableRenderer` (which is the only place where `SerializableRenderer` is called)
What if we have a `next()` that calls `ip6` and then `ip6_ismaddr`? I'm not sure we should be checking `ip6` in `next()` and not `ip6`.
Why is this error being logged? I don't know why it is being used.
I think it's safe to do this here. This is only needed if `tmpOutput` is `nil` (which is what we want).
Why was this changed?
I think this is a leftover.
@caitp - What is the expected format for this?
should this be `published_on Time.zone.today` ?
I think we should move this to the `if` branch as well, to avoid confusion.
Maybe `substitutionPatternName` is more appropriate here?
This should probably be reverted.
You can do `compressed = false;` instead of `compressed = false`.
I don't think we need to do this, it can just call the `clusterRegionGetter`.
This is not a valid fix. It's not an API break.
This line is too long.
I'm curious why this change?
can we use `errors.extend`?
Why do we have to change the names?
Needs a default value to this string, so this can be set in `violation.get('full_name', '')`.
This file should not be included in any of the changes in this file.
I think we should remove the `.` at the end of the sentence.
this line can be removed
wow, is it OK to test that a deliveries is a scalar and not a scalar?
Is it possible to use the `DockerStopTimeoutSeconds` variable?
This import is unused.
I'm not sure why we need to do this. I think it's better to just remove the `.oss` from the name and make it `None`.
`name=name` would be better.
I think you can remove the `isSelectionAnchoredAtStart` function altogether.
Should this be `github.com/pkg/errors` instead of `hash`?
I think we need a test to verify this in the first place, and then in case of `keyguardPrivacy` is set to `true` in this case.
`Thread.currentThread().getName()` can be removed, as `getName()` is not called anywhere else.
The changes in this file are unrelated to this PR, are they necessary?
Why is this needed?
we could make it private and have it be private
This is an example of how the `Beckler` header is used
I think this is not a typo.
This is the only place where we're using the same API, but I'm not sure we need to do anything about that.
This is the same as `subprocess.games.games.games.games.games` (and the same below). The same is for `subprocess.games` and `subprocess.games.games.games.games`
Should this be called `DisableAutoObservabilityMiddleware`? I think that's the correct term for this.
Shouldn't this include be included by C++ standard library?
I think you can remove this line
I'm not sure if we need to handle this here, but I'm not sure what the best thing this is is.
I think this should just be `SplitN`
I think we can remove the `public` altogether.
I don't like this. If you do, please add a link to the message.
This should not be needed.
I don't see this being used anywhere, can you explain?
This test is testing the same thing as the original test, but the tests are failing on this change.
This is the fix for the PR, but the `Current` is being removed.
I'm not sure this is the correct type. The gchar version is a pointer.
Why do the type match here?
@deads2k @sttts @smarterclayton do we want this to be `oexec "os/exec"`?
@dvoytenko do we need to do this in this PR?
This should be using `DEFINE_bool(enable_opt_collapse_project_rule, true, "")`
Why do we need this? It's a no-op.
I think it is better to move this import to the top of the file.
I think we should use a constant for this.
I would prefer if this would be `determineNonce` or `getSenderNonce` to be `null`
I think we should keep this as it was before.
I think it would be better if we just remove the method `isDocker`
This is an API break.
This is not the right place for this. We should probably be using the `isAnyResourceNameParameter` method in the method instead.
`getMaxFeePerGas()` can return a `Optional<Long>`
Can you remove this line? It is used in the other one.
This should probably have been moved to the `ValidateSessionCount` class.
Why is the FALSE being removed?
Why is this in `TaskArn`?
Can we add a note that the plugin is not managed by the catalog?
I'm not sure if this is the best way to do this, but it seems like we should be using `AWS_JSON_CONTENT_TYPE` here.
This should be moved to `Func<Task>`
Why is it safe to remove this?
This should be removed.
This is the only line needed here.
This is a new error, should not be here.
Use the new Ruby 1.9 hash syntax.
I don't think this is the right approach. We need to make a new version for the new version, and have a new version that is passed to the new version of the template. We need a new version for the new version in the new version, but we can add a new version in the new version.
I think this is the only place where we need it.
The `os.makedirs()` can only return False if `os.path.exists()` returns true.
Can we have a constant for this.
I think you need to add `fontawesome5_icon_mixin` to the `fontawesome5-icon-mixin` file.
I think the `1` should be removed here.
I don't think you need the `foreach` here.
I think this should be `chown` instead of `user`
I would prefer to keep the name of the upload, and add the new name to the upload
I think you should move this to `src/core/utils/types.py`, then you don't need to change this.
Should we just make it part of the trace?
These are two separate condition. We should consider a separate PR to add a `else if` to the `if` and `else if` statements.
Why do you want to remove the AuthFree parameter? It seems like it should be a separate parameter.
Is this really necessary?
Remove empty line.
Line is too long. [85/80]
Why not delete the error?
I think it is better to use array_key_exists instead of $formParams
I don't think we can ever ever do `isFunction?`
Do we want to rename this as well?
Was this removed because we are not using it anywhere in the code?
I wonder if we should have a better default value for this and have a default be set for the `ValueFormatter` value?
I'm not sure about ` axis` here, it should not be `False`.
I think this is a bit vague. I think we can remove it from the `CreateInput` and use it in the `CreateInput` folder. We could just remove the `api` folder from the config and just have a `CreateInput` and use that in the `CreateInput` in the `CreateInput` and `CreateInput` in the `CreateInput` folder.
why are you using the `Debugf`?
I think we should add the span tag to the span in the future. We should not be doing the same here as the other functions in `BaseElement.New`
Why is this package-private and not the other package-private variables?
This is a bit of overkill, but I would have expected it to be called `isPushContainerizedMethodEnabled`, as it is only used in one place.
This is a bit confusing, as it will be a max in the first place and will be read from a second time. I think this will be a problem for the other changes as well.
Shouldn't this be an error if the filename is not null?
I think you can just return s.running ? s.eventsEnabled() : true
Is this change related to the change? It looks like it was just a mistake before, but it looks like this change is not related to this PR.
Why is the s removed?
I think this will break the tests in the next step. The new one is `2012-1-1.1` and `2013-3-11 21`
Isn't it better to use the `getById` function here?
I think we should be able to get rid of this.
There is a race condition here. `attached_listener_mutex` is not guaranteed to be nullptr.
I think this should also check that the `mode` has `restore` attribute. It is a bit confusing to have a `mode_entered` attribute.
Why are we changing this?
Isn't it better to keep this method and pass it in to `getDomainClient` ?
@jona-sassenhagen this is not correct. I would just use ` dom_id` here.
This is a bit confusing. If you're using `i` here, then the h2o is the only thing that should be used here.
I don't think this change is needed, as the code below will fail.
this is a weird change. It's not clear why we need to make this change.
This is the main change that will be merged in the PR description.
Should this be `!fs::FileUtils::remove(checkpointPath.data(), true)`. It's also not a big deal, but I'm not sure if the `fs` should be a `!`
Please add the parameter.
Wouldn't it be more appropriate to add the connected connected to peer (inbound) ?
This test is failing on the clock because the `DateTimeUtils` has been already closed, so I'm not sure if this test is necessary.
This file was moved to the `<CLI />` below so that it can be removed.
I think we can just make the `GROUP` the default, and use the `TEMPLATE` directly.
Please revert this whitespace change.
This is not a hard requirement, but it's not a hard-coded value.
I think this should be a `transpose`.
I think it's not clear what this property does, but it seems to me that it's used in the `use_shared_date` function, and it's used in all other places, maybe it should be renamed to `use_created_date`?
what's the point of this change?
this is the same as the one above, we should just call `NewMasterIndex()`
I don't think this is a good idea. It's a bit weird that this will be a `listEngine` in the future, and it will not be a problem.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
why not just count = 0; ?
I don't know if it's possible to do this in the first place but this seems like it should be an `current["[mongoid]:query_cache"]` instead of the `current["[mongoid]:query_cache"]`
I don't see where we're using the existing table table, is this necessary?
This test doesn't work with the test suite.
I think we should probably have a constant for the `Paths` here, but I think this will make the code more readable.
This should be `else`
Why do you need to import java.lang.reflect.InvocationTargetException?
why did you removeSlugs?
Just to be sure: we're not using `dels` here. We should use `pathCacheEntry.dels` to avoid the need for the copy.
Can you add a note here about that the payment has been removed from the `Redeemed` field?
I think we can also check for approval here, maybe we can check that the policy was not resave unchanged.
I don't think this should be called `serialized.build()`.
It is not a good idea to use `@"\Service` in the `before` method.
I don't think you need this.
It should be `EnvironmentType`.
Why not just move `pendingRequest.configuration.remoteHost = pendingConfiguration.remoteHost;` above above `pendingRequest.configuration.remoteHost;`?
This is not needed anymore?
Why is this removed?
Can you add a check that `TextUtils.isEmpty` is null here?
This test is testing the wrong place for the test case. The test is failing because we want to pass a value to the test.
"A note about the error message"
Is there a reason why this is not just a `s.postageTopUpHandler`? It looks like it would be better if you could move it to a separate line.
`file` key` is not a `*` prefix. I think this is fine for now, but maybe we can just remove this function and use `*` in `A leaf node either has no children or defines a `file` key, or just `file`?
This change is not correct. The test failed because `testor` is a `tester` in the test.
This log_ should be renamed to logIdAndTerm_ to last logIdAndTerm.second
I think you can use RamUsageTester.sizeOf
Is there an issue tracking this? It doesn't seem right to me.
I think you could use `is` instead of ` component_count` here.
Should this be a `default: ''`? I think that would make the default a default, and would be more explicit.
Is this related? It seems like it should be in the first place, not in the test.
This is not needed. It should be removed.
`ManifestFiles` is an array of `null` objects. Can we use `null` here?
This is a very minor thing, but it seems like this function is never used and should be moved inside the `if not forward` block.
what's the purpose of the timeout? can we use it here?
This should be `w.LogWorkflowInfo`
This should be in the `config` package.
(style) line over 80 characters
I'm not sure if it is necessary for these changes, but I'm pretty sure it is worth having a `var` constant in the `confirm` method
shouldn't it be `panic()`?
This doesn't seem to be the right place to define this config. What about something like `var (// ReadConfig represents the connect option of grpc dial) { ... }`, since it's not the correct config.
I think we should remove this line
@jmhooper @jenachoi change the spec.
Might be good to add a note that this is not compatible with `--verbose` but I think it's better to add this flag to `--verbose`.
I don't see where this is used.
I don't understand the point of this change. It seems to me that you need this change. The `CollectionStrategy` package is only used for this class.
can this not be a `str` type?
remove this line
This is a very minor thing, but I think we could add a `default: false` to the index on line 398 instead of `null: false`.
Should this be a `default`? I would think that it is used for the `NodeAddr` field, and not for the other types.
Can we move this to `doNetService.find()` so we don't need to create it every time we use it ?
Why is this not usingLocalPrefs?
Do we need the `||` here?
@agramfort @jihoonsonson can you confirm that this is the right way to fix this ?
This is a bit confusing. What's the difference between this and b""?
I think we can just remove the `jsdom` here and just call `jsdom`.
I think this is not right. We need to check for Mainnet.
This will break all of the other commands, if the `visibleRepoName` is empty.
This is not the right place for this. The rest of this PR should be in a different PR.
So, if this is considered as no filter being configured, we should return the requested request object and should return a boolean.
This is not the right place to do this. I think it's better to do this. But it seems like it could be a `Policy` and not a `Policy`. I'm not a fan of this, so it's probably better to have it be a `Policy` here.
I think this should be `platform.gcp.project`.
why not just change the existing method to `fullTableName =`
I don't like having this logging in the log. The log is already closed by the user.
I think it is more reasonable to do this in `static/static`
`putputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputputGGGGGGGGGGGGGGGGGG
This function is used in many other places, maybe call it `NewTransactions()`?
This is not a pattern that we should use in the code base.
You don't need the `moreThan15MinAgo = true;` here as well.
I think we should just use `IsEnabled` directly, and remove the `Parameter` call here and below
This line breaks the tests where `tizen` is not defined.
I don't understand this. Why is it needed here? Is it only for hipMemcpyPeer?
This is a bit of a nit - can we name it something more descriptive? `indexingConfigurationsToReIndex` or something similar?
I think you can use the constant from pmix_output_verbose(2, pmix_globals.debug_output, ...)
maybe add an `else` here, so that we can get rid of the `if` blocks
**suggestion (non-blocking):** The name of the team_page?** is misleading.
Why not `iv.Length != 16 && ivLength != 32`?
Unused method argument - snapshot_name. If it's necessary, use _ or _restore as an argument name to indicate that it won't be used. You can also write as single quotes if you don't care about it.
why not setuptools as an option to setuptools?
why is this change required?
This is a bit of a nit pick, but I think it would be better if we could just do this in the `self.base_class_path = self.base_class_path` and then we can do it in `base_class_path.extend`
why not just return the `EthAddress`?
I think we can move this to the `conjunctiveMatchFlow` section.
Why is this a list comprehension?
This is not the right place to do this. The code below is not doing anything useful. I would just call it `_`.
You need to also check that `resp` is exposed in the homepage, right? Otherwise the caller will know if it's not exposed in the homepage, right?
This looks like it should not be in a separate PR.
(style) please, no space before tabs
This is not needed, we can remove this line.
I would prefer to have a `Account.DEFAULT_RESIZE_IMAGE_CIRCUMFERENCE` constant. This will be a bit more efficient to read when we have a `Account.DEFAULT_RESIZE_IMAGE_UndoUMFERENCE` property.
We should add a utility for this property to avoid problems with existing server attributes, and that's not a breaking change.
It's not clear to me why `fullSynchronized` is set on every request. Is there a reason for that?
se :=SealedSecretEncryption || sse == nil { sse := piped.SecretEncryption }
@deads2k i don't think we need the "client" option here.
Why do we need this?
I don't see this used anywhere.
I think we can remove this line.
This is the only change that affects TF providers.
I think this will work with the other PR as well, but it would be nice if we could add a `if excluded_portal_link` as an option to `invert` and `invert` to `invert` as well, then we wouldn't need the `invert` here.
I'm not sure if this was the correct thing to do. It was a copy/paste from the previous version, but it seems to me like this was the only place where you need it. It was a copy/paste error from the user's database.
`string` is the correct location here
this should be `return data instanceof`
This should be removed
This is not a public API.
This isn't necessary since the tcs always being cancellation.
It's not a good practice to import static imports from static imports.
I don't think we need this.
Layout/AlignArray: Align the elements of an array literal if they span more than one line.
This is a change of behavior. I think it's ok to just leave it as it was.
I think we should have this check in `Can’t` instead of `isSomeFileRemote`.
I'm not sure this is the best way to do this, but it is not a big deal, just wondering if it is worth it to just have a `catch(Exception ex)` return the same exception?
I don't like this approach. The PoSt can be set in the loop. If it's a `Read`, then it will be set to `0`.
Not sure if we should be using `[NotNullWhen(...)]` here
I think we need to make this configurable.
I'm not a fan of the idea of this change, but we should be using the API API here.
I think this is a typo.
The `--object-prefix` flag is already defined above, so it should be fine.
Why remove this line?
This should be a separate PR
The `etplace_NAME` array is only used in `run_child_child_non-process.go` and so on are all that's necessary, but I don't think it's worth doing here.
This is the only place where the `View.GONE` was used.
This test should be moved to the `@Test` annotation, otherwise we will be using it in the `tmpdir` folder in `Test`
Shouldn't this be `Long getBaseFee` ?
Can you add an example here that will be more expensive in the future?
This will be the most important information for users.
Is this change intentional? I don't know why this was here
Why is this needed?
I don't think this change is necessary.
This is the same as `GetUriTagValueFromRequestUri`?
This should be done in a different PR.
I think this will be better in the future.
Why are these needed?
I'd prefer to have this as a `@deprecated` instead of `namespace Amp`
I think we should also add the `TODO` after this to ensure that it is not written before we merge this PR.
I think you need to move the `controlCallback` into the `MeStore` component. Otherwise, you'll need to update the API to use the `URLURL` as well.
I think this is a leftover from #3838.
This is the wrong place to put this check. The `if` statement should be removed.
Please use `new Dictionary<HttpWebRequest, KeyValuePair<DateTime,AsyncContinuation>>();` to avoid this problem.
This should probably be in `find_by_user` instead.
The `--local-scheduler` flag is now unused, and should be removed.
Thanks for removing the `:` and `template.bundle`!
These are not used.
This is a very minor thing, but it would be nice if we could have a test that would be better than this.
Why was this removed? I don't see it used anywhere.
@JeremyKuhne might want to double-check this change
I'm not sure this will ever get called, since the docroot provided by the user. You can just use the provided name here.
This was a bad typo I was trying to figure out what to do here.
Do these need to be public? I don't see any usage in the name.
why did you remove this?
This is not the only change that affects TF providers. I would suggest you add a `load_script` call that returns a boolean and then call `script.load(self)` in the `scripts` method.
I think we can remove `body` from `toString()`, as we do not need to create a new instance.
Please remove the empty line.
This should be imported at the top of the file.
This is a very minor detail, but I think this is fine to leave as-is
Why the license?
Why is there an `unsigned int` variable in `pgm`?
Why not just pass in the column as the name of the method?
Why is the else needed here?
Nit: This should be a module-level constant, not a module-level constant.
Is it possible to add a `IngressClass` field? It would also be nice to have the `ingress` field became `null` by default.
nit: I would prefer a mock mock to be a mock.
why is it null?
failed creating output output in `NotFound.NotFound`?
`glog.Error` is not needed here
@agramfort this was the reason why I added it to `not_to raise_error`
This is a bit of a hack to me - I think it's better to have a `if time.Since(startTime) < 30*time.Second)` and then use the same condition to check if the time is empty.
Why did we remove this?
I think this is the only real change. The previous version is correct. The previous version was not correct, so it was not. It was a bug in the code so I removed it.
does it make sense to keep the `mvn install -B` part of the test case as well?
This import is unused.
Why is this change necessary?
Is this the correct place to put this line?
Note that I don't think we need these `Xattr` struct, since they're in a few places in the code base.
I think we need to do this for both cases of `assert(0)` and `assert(0)`. I think it is better to use `assert(0)` instead of `assert(0)`
`protocol` was added in this package, can it be removed?
nit: this line was causing a test failure
This should be removed. The `deprecation_deprecate` validation validation is used in the `flash.discard` file.
Do we need to pass the account state here?
We could also make this a helper function in `GetDefaultSourceSource`.
I think we can remove this line.
I think it would be better to use the `acceptedHeaderTypes` property here as well.
I think it's worth adding an empty `if routeUpd.Dst == nil` here
Is this a bug?
Do we need this variable?
I think we should keep this as a separate commit
I don't think you need the `if callable(feval):` statement anymore.
This class is not used anymore.
What is the purpose of this change?
I think we need to pass the `Stat` as a parameter. The `cdsObjectToUpnpavObject` is a `nil` value.
Is this used anywhere? If so, should we remove it?
Should this be `||=`?
I'm not sure if this is necessary, but it seems to work with the `credit_card_form` option.
Standards: Please add braces to this condition and spaces around the `if` operator.
Is this not needed any more?
This is a bit of an unusual, but I don't think it's a good idea to add it here.
Can you use a different name?
This is a very specific name. What about something like `zvolWorkers` or `zvolWorkersWorkers`?
This should be `namespace`
I think we can remove `go-selinux` now
Can you also update the changelog?
Can you use the same name as the other config? I don't see any new usage for this, but just wondering what's the reasoning.
This is a bit of an overkill, but I'm pretty sure it's not an issue here.
Shouldn't this also be `info *serviceInfo. TopologyKeys()`?
I'm not sure why this is here. The `Dependency` logic in `d` is a `FileValidationStatus.remove`, but if you want to call out that it is not used anywhere else, then this should be moved into a `FileValidationStatus`.
I think this will work for you if you don't want to check for an `nil` check
I'm not sure this will work for the future, but it's probably better to use a `get_built_blocks_count` helper function to check for the `num_bbs` function, which will return a `_API` value for this case.
Are there other options? If not, should we use `h2o_push_path_in_link_header()` instead of `if (token == H2O_TOKEN_X_COMPRESS) {`?
why the `cid.CidSet` and not the `baseStateRoot`?
Could you please avoid this change?
I think we need to make sure the property is only available to `azkaban_private.properties`, and if it is not provided it should be `azkaban_private.properties`.
It seems that we don't need the `OnGCE` option anymore?
Can you move this down into the Bios_grub class?
This is the only place where you've changed the API to use the API. It's a good idea to have a `manifest` argument that does the trick.
This should be `Tools.ContainsKey(toolName)`.
This is a breaking change for the tests, but I'm not sure it's worth it.
I would suggest to move this import to line 1.7 so that it's not needed.
Why the `close` argument change here?
I think you should use a different name for this, e.g. `fetch_step`
I think we should also change `\'` to `\'` to match the implementation of `\'`
Can you explain why this change is needed?
This is the only change that breaks backwards compatibility. The value of the value is a string, not a string, not a string
This should be a single `#ifndef` condition.
Do we need to make this change?
can we make this relative import?
Should this be a typedef?
Is this a correct change? I don't think it's a problem, but I think we should be using the `pkg.pkg.pkg.pkg.pkg.pkg.pkg.utils.pkg.pkg.field` to be able to find out.
remove this file.
@t3on I'm not sure if this is the best choice to do. The `+` is not the correct way to go.
can you make this a helper function?
I think we should check for `ctx.CheckImmutableFields` here
Why is this in recorded()?
This is a regression. We should be setting this to `["["["["["["["["["["["["["["["["",", "this is not found"]"]`
Why not `vcr-Request-ID`?
I think this is the right place for cookiePath, but I don't think it's necessary to use a global cookiePath.
I'm not sure what the right thing to do is when I have a `toString()`, but I don't know if this is the right way to do it.
The source code is not correct, because it's not a single source code, but I guess it's not a problem because this is a source code. So, this is not the case, but the source code should be moved to the source code.
We can't do that in the future. If we want to do it in a way, we should at least return an error.
I think it would be better to have a helper function in the `storeName` that takes a `nil` parameter and then use it everywhere else in the function.
I don't like the name of the function. It is used by the `Hack_openvenv` function, but it is used by the `Hack_openv` function.
This doesn't seem related to this PR, but I think it is worth it to remove it and just check if the mocha is not empty.
NIT: `\r\n` should be surrounded with `\n` in the `\n`
This is a bug, we need to fix this.
I think this is not the right place for the default value.
This is the only change that fixes this issue.
Do we have to implement this in `AmpExitEngine.NewNewClient`?
nit: not a big deal, but it's a bit odd to have a style guide on `lodash`.
I think you're still using `provider/goconfig` here.
I think this is not correct. We can remove it from here and remove the `TODO(noteIds)` block.
Why do we have a separate prefix for this?
Nit: remove empty line
I think it would be better if we move the check up the limit here to a new line, then the if statement below should be fine
`_timeout` is an `KeyError` so it's a `@classmethod` (and it's a `@type`).
This is a bug fix.
I think it would be better if the error message could be improved: "rwm" - " as a" - "rwm" // empty permissions is invalid... causes a write invalid argument error upon saving to cgroups" - "rwm" // empty permissions is invalid... causes a write invalid argument error upon saving to cgroups" - "rwm" // empty permissions is invalid: causes a write invalid argument error upon saving to cgroups" - "rwm"
this is a bit weird, I think we should be using the default value here.
I would call this `AccountID` or something like that.
Why is this type of `int`? It's an enum type.
Is this change related to this PR?
holomap is not used anymore
Why is this being made public?
Is this used?
could we rename `debug` to `finest`?
This should be called `mask_TEMPLATES`.
Why are we not changing the option option anymore?
The `ws` is a very generic name. It seems like a good idea to have a `Set` that is passed to this method.
This should be a debug message and not a warning.
This was a change in behavior for the new purpose of the `Converter`.
(style) line over 80 characters
The `selectionArgs` is now unused and can be removed?
This is not the right change to the `A-Za-z_` prefix, since it is a `*`.
Is this a "before" error? I don't know if we want to include the limit, but it's a bit confusing.
I think this should be `content_type in is_redirect`.
Is this a typo?
I think we should add the `if (should_syscall_method_be_sysenter)` check below to avoid the error.
Is this a typo in the title?
I'm not sure this is the best way to do it. It's a little bit odd to have a `IEnumerable<String>` that we don't care about the other `handle`s.
I would put the `BoxSet` in the if block, as it's a separate issue, and the data is not a hardcoded name
Can we move this check to the `init` section of the session instead of the session itself?
This will need to be nullable for `NullValue`.
This is a bit of an overkill, but this line is a bit odd to me. If the goal is to not have the same problem, we could use the `horizontalAdvance` to get the `a` value.
@rhymes I've been wondering why we need this. I'm not sure if this is a good idea to have this in the `build_client` namespace. I think it's better to make it a private method.
We should use the `tab.fetch()` function instead of the `tab.fetch()`
can you use d_oy_count instead of int ? (0 :) )
I'm not sure why the change is needed.
This is not needed.
This should be a bit more specific. `ALIGN_FORWARD(pend_unit_size, YMM_ENABLED() ? ...)` Also `ALIGN_FORWARD(pend_unit_size` is a bit ambiguous to me.
Should we do a `@private:tempArgs` instead? We should probably be looking for the `@taskArgs` in the `if` statement.
I think this will be more readable as `UIA` and `UIProperty`.
The formatting string for the formatting formatting should be a space
This import is unused
Should this be `AWS_SHARED_CREDENTIALS_FILE`?
This is the same change as `Underlying` below.
Why do you need this interface? I don't see it being used in this PR.
This is a bit confusing, since we're not doing this in the DB, maybe it's worth having a `process_fs_path`?
I'm not sure why we need this here. I would expect `to_replace` to be a tuple and not an tuple, but `value` is a tuple.
I'm not sure if this is a good idea. It might make more sense to use a `getComparator()` method to return null.
`MetricsConfig.fromProperties(table.properties()));` should be `setAll(table.schema(), ...)`
This should be done in the if below. `opts.java_primitive_has_method = true;`
I think it would be better to move this to `Config` package. It's not clear to me what the service is and how we use it.
@adamjstewart Is this the right way to fix the issue?
These are not needed anymore.
I don't understand this change. The problem is that `key` is a `Objects` and the other `key`s are being returned, so I would just remove the `key` parameter from the list.
I'm not sure what this is doing here.
This should be `f`, right?
This is a very minor thing but I'm pretty sure it's not used anywhere.
`exists` is a bit confusing to me, it should be a `exists` or something like that.
I think this is the wrong way to do this - it might be a good idea to have a `defaults` block that can be used to determine if the block is not a `defaults`.
This is a breaking change. It should be reverted.
I don't think this change is required
I'm not sure if this is a good idea. The last field is `_root_` but the value is `_root_`.
We should add a link to the issue that the file is already in the `configure` table, so we should change it to `configure` in the `configure` table.
This is a bit of a nit, could you add a line after the opening brace to avoid the space after the comma?
I think we can get rid of this check now. We can just remove the `Declared` property.
These are the same changes, but they are all in a single data data. They're not necessary here.
I think this should be done in a finally clause.
this is the same as the other one, I think we should just make it a string.
Nitpicking: I'd prefer to have this in a separate PR.
I think this is a bit vague. We're not using the `host.each` anywhere else, and it's not a valid url, so I'd just put it in the `host/platform` folder.
why not just use `time.Sleep(time.Second)`?
Should this be `protected`?
This was changed in `#testAllRunner` to be `ConcurrentDictionary`. The return type is not `ConcurrentDictionary`.
This should be done in the other PR too.
Can you use the existing `eventEmitter` variable here instead?
@smarterclayton do we want to add the file name here? I think it's fine to just change the file name to `VIEWPackage`
Why do we need to pass the configuration here? If we do, we should pass the configuration from the request. If we want to do this, we should pass the configuration to the request.
Is it necessary to use `ServiceNameMappings` here?
You're missing the additional_features parameter here.
@smarterclayton do you think we need to move this to the test?
Why remove the package porcelain_test?
The issue is that if a store fails, it will fail if it fails. I think this will fail, but the store will fail if the app is already closed, so it will fail.
nit: I know this is a change, but can you change the code to `final` and change it to `final` and change `final` to `final`?
this should be `||` instead of `if`
I think this should be `ForceRegister` instead of `Name()` since we don't have to pass the `ForceRegister` as an arg to `ReadState` and `Read`.
I'm not sure if we should do the same here, but I'm not sure if the error is still valid. I'm not sure if the body is still in the original state.
This should be done in `Request::setTrustedProxies(['127.0.0.1'], Request::HEADER_X_FORWARDED_ALL);`
`@param theKey Either {@link Keys#SHIFT}, {@link Keys#COMMAND}. If the provided key is none of those`
I think we can revert this file.
I think we should remove these 2 lines.
I think we should be using `element.submit()` instead of `dispatcher.afterClickOn(element, driver);`.
This should be `./gradlew :mismis_user_has_active_subscription?`
`@Nullable` seems redundant.
Why is this test not needed anymore?
how do you know this is the same as above, if you're going to use the same name?
should this be a `null: false`?
I think we should change these log lines to be `mtask.waitForContainerTransitions` and `mtask.waitForContainerTransition`
@tannergooding, do you have an example of a problem with this?
You can use `Config.visit(...)`. It's not clear what's going on here.
nit: `go fmt`?
I think this is wrong, it's not needed anymore
Why is this not needed?
Why is the `resultColNames_` not a global var?
Is there a reason for this change?
the parameter set to be the precedes them.
this is an interesting situation where we should be doing this.
I'm not sure if we need to make these changes in this PR.
@michaelkuhnnnn , can you explain why this change was needed ?
This is a bit weird. It is not the same as the one above, but it seems like it is not related to the other changes.
I think this should be imported before the import statement.
I think we should have a `@Deprecated` annotation on the `Update` method. We should probably make this package package private.
This is a bit confusing, since `new_token` and `new_token` are the same. Is there any way we could just always send the token? If we want to have the user, we can just always set it to `0`, so we could have this be the default. If you don't want the token, then you can use `5` instead.
If you use a custom_pred, you can add a custom function to get the precision.
I'm not sure if this will work as expected. If you have a different name, it would be good to have an `-network` option. If you do this, you could add an `-network` option to the network. If the project id is set, you can use the name to make sure the id is not available.
This should not be needed. `setSourceDataAtCell` is a new instance of `getSourceData()`
The implementation of this attribute is not required, but I would have expected it to be `internal` (or similar) if it's `internal`, not `internal`.
Maybe we should make this `filter.filter(nil)`?
This seems like a bad idea. The `log.run()` calls `spack.log` and `spack.run()` calls `spack.run()` on line 786.
is there a reason to make it a connection closed?
This should be added added in the `GET_SESSION_LOGS` folder as well.
This is not the right place for this. The other place using this is `fstatat(AT_FDCWD, "/run/ostree-mount-deployment-var)` is `/run/ostree-mount-deployment-var`, which is not what is causing a test failure.
Please use `#include "boost/format.hpp` instead of `#include <boost/format.hpp>`, otherwise it will be better to use `#include "error.hpp` instead.
@fmassa Shouldn't this be `self.build_pause(self, duraton=0)`?
Is this change intentional? I think the `copied` is a `toString` call and it seems like we're not doing it in this PR.
I think we should use the `UNIX_PACKAGES.include?` helper here.
This seems to be the only place where we need to expose this value. I'm not sure if we need to do it here.
You can use `<%= @product.tagline %></h2>`
Shouldn't we also add the `{"185.243.112.225", "failed to parse IP"}`?
We could just use `DD_INTEGRATIONS` here.
does this need to be paths?
this should probably be `--stress-test LIMIT` instead of `--stress-test]`
I would add the array because the other keys are used in this class.
This seems to be the only place where `new BoostQuery(elevation.includeQuery, 0f)` is called, which is not the case for the `new` query. The `new` query should be checked if the returned `BooleanClause.Occur.MUST` is false.
This should be `!== null`
Is this a bug?
This is a test where the `registry` is being created, which is the default.
This is a very minor thing to do, but I'm not sure how I feel about this.
Shouldn't this be `verify_check_linux_NONE`?
why not just pass in an err?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
you can drop this `else`
Why remove this?
should we use a single row?
The message should be "CA2210:AssembliesShouldHaveValidStrongNames" or "CA2210:AssembliesShouldHaveValidStrongNames"
This test is not needed anymore
in the case where `self._session['data-address']` is an `None`, is it?
This was a bug I found on my machine. I think it is better to check the value of the manifest, and only if it is true.
Just to make sure, `var slotIndex = (Slot)(startSlot % timeParameters.SlotsPerHistoricalRoot);` will always be true.
I'm not sure if this is a good idea to add the `toExpandableRowHeaderColDef` to the list.
This should be cachedPath.data()
I think this should be `grid: ['aria-label', 'aria-labelledby']`
@mikeshultz did you mean to add this check in the `Transaction`?
I'm not convinced this is correct, if we have a constant for the value of `location`, then we should use `newHashSet()`
Use && instead of and.
I think we should be calling `getPasscode()` here, because we already have the bundle name in the constructor.
This is not a good place to put this method. It is not used anywhere else, and is not a big deal, but if you have a better way to do this, you should just remove this method altogether.
I'm not sure this is the right place to do this, but it seems like we should keep the old method and just call the new one with a `get`.
I don't see where `combined` is used?
This is the only change I've noticed that. The `Logger` is used in a test, so the `String#format` should have been removed.
why removeTables?
I think we need to make sure the lifetime hasPrefetched and lifetime is always a number of lifetime (or whatever we expect it is).
I would use a `get_class`. It is a bit confusing to read the class name, but I think it's a good idea to keep it as a class method.
I think we can remove `CanonicalHeaderKey.Config` altogether since it is not used anywhere else.
Why did this change?
Why is this change needed?
This is a pretty big change. I think we should be able to use the command-line command-line command-line command-line command-line command. We can add an explicit name like `TrivialTestSlasher` or something.
The REC_INT_FRACTION is used in a different order, so it's not used here. The REC_BOOLEAN is used for the same thing in the case where the different different order is used in both different different order.
Should we add `case` to the list here?
Why not `urlstr = url.toString(QUrl.FullyEncoded | QUrl.RemovePassword)`?
This is a very old logic, but it seems a little odd to me.
What about `User.new` ?
I think we should keep this, but say `n.lastRefreshTime.IsZero()`, and use it in other places.
I think this should be a list of imports
I think we should keep this method in the lock.
We should probably move this to `ensureTokensTokenizer` class. The reason for this is that we don't have to use the test class to load the test class.
Does this mean that we can remove this file?
I think we should also remove this line.
Can we have this in a different file? This is a very common package, and I don't know how much of the existing users will have to know if they are going to have a module named "azkaban.flow.kafka".
Why is this needed?
Should this be `.replaceAll` instead? It seems like a method `string.UTF_8`.
Should we do a similar error for `error` in this PR?
Can this be done in a different PR with the `server.execCommand` module above?
Should this be `//`?
We should add an example here.
I don't think we should do this. `getAliasProp` is the name we want. I think it's a good idea to just have the name return a bool, and then do `getAliasProp(alias_, *prop_)` and then do `return getters.getAliasProp(getters, *prop_);`
Should this be a constant or a constant? I'm wondering if this will make more sense in a future PR.
Unnecessary spacing detected.
if we're not going to do this check, we should check if the user has the same result as before
What's the purpose of this change? I think it's not clear what's happening here.
This doesn't need to be in this PR
I'm not sure about this change. The `BALALSTUTIONS` variant is not used anywhere else.
I'm not sure if this is correct, the value is `None` or `None`
You can use `if (!file_exists($carousel->getUploadDir() . DS . $carousel->getFile())) {`
You can use the `update` method in this file.
I'm wondering whether we should have a separate PR for this.
why change this? from `id` to `id.Id`? this will break existing users that don't use `Id`.
I think we should log the `s.Address` and `s.Logger.Debugf` here.
Should this be a separate exception? I think it would be better to be consistent in other places.
This was a bug, the previous code was removed because we didn't run the code during the build. I didn't see it before, but it was just removed. I was looking at this code and I was looking for a while to see it being removed in the PR. @malgorithms @mitchellhenke can you confirm?
I don't think we need to add this to the `PipelineField` interface.
`self.service_account_key_path = kwargs.get( kwargs.get( kwargs.get( kwargs.get))`
I'm a little confused by this. Why are we using `padding` here?
I'm not sure if this is the right place to put this. If the user doesn't use this it should be able to use `serverLacksFeature`
I think it would make more sense to have a `valid_values` arg here to be consistent with the other two.
I'm not sure if this is a good idea. The test is a bit weird and it is a bit hard to see.
I think you can just delete this `addressOffset` and `byteStarts`
Nit: This should probably be called `replaceResultInFormWithNew`, as it's a separate change.
The `:doc` tag should probably stay here, so it should be a bit more explicit.
No need for this change.
The `project_number` keyword was unused.
I think you should remove the `Stop` call here.
This is a breaking change. I think the intent here is to not change the behavior of the code to have a testcase for it. It's not a big deal, though.
I don't think this should be changed. The test failed in the logs, not the logs.
Is this a change in behavior, or should we mark this as deprecated?
Can we remove `ExternalApis::OpenAireService.search`?
(style) code indent should use tabs where possible
I think this is the correct way to go about `DEV_FUSE_MOUNT`.
Can we remove the attribute from the constructor and make this `MarshalAs(UnmanagedType.U1)` since the attribute is already available in the constructor?
I think this should be `lint`
Do not use parentheses for method calls with no arguments.
This will break the code.
This should be `t.Stop()`
why is this a pointer? why is it a pointer?
I think it would be better to use a method for the $codebase->project_analyzer as the cache is not a part of the $codebase.
This is a change in behavior. It was just a mistake. It was only here to fix the issue.
I'm pretty sure this needs to be `if args.seed + rank`, right?
why is this needed?
I'm not sure if this is a good change. If we're doing this, we should just delete it.
Can you please add an expectation that the range is 1..100 and the size of the hash?
I'm not sure if this is correct. The UTF8Encoding is a string, not a string.
I think we can move this to the common interface
nit: `private` -> `final`
Line is too long. [91/90]
logParamsMutex.Lock() to be consistent with line above.
I'm not sure this makes sense here. I'm assuming the `data_encoding` is used for a while. I don't see any related changes to it, so I'm just curious.
I think you can use `if (!gitTag.Ismaster")` here.
I'd like to see this being removed, it's not needed anymore, as it's not used anywhere
Why is this needed?
I'm not sure if we need the #if defined here anymore.
I don't think you need the `LogProvider` here. The `LogProvider` is used for this, so you don't need it for the `LogProvider` class.
This is a breaking change. I don't think we should be removing this anymore.
I think it's better to use `./confluence/...` here instead of `./` since it's a file.
This is not the only place where we use this function. I'm not seeing where we use this function.
Can we avoid using the old name? It's a bit confusing to have the name "Flattening" in the name.
Same here, this can be replaced by `.filter(img_norm_cfg)`.
these are not actually used
Should we use `_cancellationToken` here?
This should also include a period, right?
This is the only change that affects TF providers. The `tpush` is used in the `if` block.
Can we use a better variable name here?
Nit: please also update `go.opentelemetry.io/api/trace`
I think you can remove `....`, right?
Why are you converting spark_column into spark_column directly?
Should be `index`?
I think this should be `findFooter`
I think we can just make this `client` and use the `mode` here to avoid duplicating the code.
This should probably be a `return c.Error()`
why do we need to specify it's arguments ?
@jvwing Thank you for fixing this in a separate PR!
please remove this.
This should be `import functools`
Is this file still needed?
Maybe we should also add the currency name to the API.
This is a little hard to read, but I think we should add a `return err` here.
I'm not sure what the right value here is. I don't think it is a good idea to put the default value in the constructor.
`cur_idx` is unused.
Why is the return type needed here?
I think we should remove the `p` parameter from here. We can remove the `profile_paths` method altogether.
We should not log here.
I think it would be more clear to name this `_contextProperties` or something like that
I'm not sure this is a good idea. The `done` argument is not a `done`. The `done` argument is a `const` and it is a `const` (the `assert`) so it should not be here.
nit: I would use a `BaseFileScanTask` here, and then use the `BaseFileScanTask` directly.
I think we should be more specific here.
I think this should be `w.sourceExists(ci.StartupScript, "")`
Why do you need this? It is always the vals, so you can't do it in the loop.
@sparrowDom This change is the only one I'm worried about. The `error` was only used in the response handler, so it was not there before, so it can be removed. I think it is a bug in the `error`
I think this function should be moved to function since the function name is always a new parameter.
I don't think we want to have to do this. It's the way we're doing this, but I'd rather not have to do it in a separate PR.
I think this is the only place where we should do the check for http.StatusInternalServerError. The code is a bit more complicated than that, and it should be moved into the check for http.StatusStatus.
(style) line over 80 characters
This was the only place where we're using the existing `dockerClient` API which has been used. I'm not sure we should do that. I don't know what the problem is with that, but I think we should just make the `dockerClient` part of the `docker` interface, which would allow us to have a `dockerClient` attribute in a `dockerClient`. I'm not sure what this is for
This seems to work as expected. I'm not sure we want to have a test for this.
I think we should add a `process` method here to avoid the `reason` interface.
I would prefer if you can keep it for now, but it would be nice to have a test for that.
This will need to be re-enabled in the next PR.
We should add this to `tags` and remove all `limit`s. We should add it to `limit` as it is in the `build` namespace.
Not a big deal, but we should probably have a better idea of putting this in `models/dilation_do_model`
Is there a specific reason for changing the config to use a `ReadonlyPaths` rather than `Readonlys` to avoid the need to set it?
Why is this not `static const char * szTypename = "typename"` but ` szTypeRef0` is not a pointer anymore.
Why do we need to import the ec2 sdk here?
Why did you remove the `if`?
This is a bit confusing, as `@param` is a `boolean`.
Rather than having two separate methods, what do you think about calling this `.fetch(:adapter)` to be consistent with the rest of the code?
Can we keep this around as {}, so it's easier to track it?
Should we use a dict here?
Why is this being removed?
Why not use `*testing.T`?
I'm not sure about this. The only place where we're using this in the code is in this file are, but it seems like we should be doing it here.
I don't think this is needed.
This is a little odd - I'd like to see a reason for it to be a `InMemoryedMethodAsyncCallSettings`, but I think that we should keep the same as `FlattenedMethodAsyncCallToken`.
let's remove this. This is a very minor thing, and could be reused.
Is it expected to be called from a version?
Can you explain this change?
I think this can be removed now.
can we make this configurable?
I think this should be `s.idx.BuildIndex(genesisBlk)`
This is a bit weird, `configtypes.List` and `configtypes.LengthList` are both the `List` and `List`. I think we should instead just `List` and `LengthList` should be the same as `List`.
it looks like the test fails without the `.should eq` call
This was a bug.
This should not be needed.
I would suggest to use a different name for the new constants.
Does it need to be `struct`?
I think it would be better to have a method `mne.utils` that calls `isfinite`, which calls `isfinite` and then `mne.utils`.
I don't think this is the right way to go. I'd say we can get a more specific error message here.
Line is too long. [83/80]
This is a breaking change. Please remove.
Is there a better way to check this?
This is an unrelated change.
This is a bit weird - we are trying to figure out how `WebRequestIntegration` is set to `true`.
I'm not a fan of this change, but we should keep the `cache-dev` prefix for consistency.
Can you add a TODO here to remove these lines?
This can be removed.
@scheibelp this is the main change.
Why not just return `Optional[T_Node]]` and return `cross_node_first_ancestor_of_type`?
What about this? Is it not a big deal with the previous code?
We should add some validation to the `kill()` method in `setUp()`
I'm not sure this will work if the field is `CreateString` but it is not `CreateSharedString`.
Why not just delete the whole `checkedIds`?
I don't think we should be changing debug here, because it will be easier to read when debug is not enabled.
This will be a breaking change, but it will break existing clients that have access to the `S3D` source.
`isValid()` doesn't return a string, so this should be safeDateFormat or use a variable to return an empty string.
I think it would be better to have a enum for this enum, and pass it as an argument to the enum that is used for the enum (and the enum for the enum), and then pass it as a parameter to the enum. It would be better to avoid this conflict in the future, and then just have a case when it is set to the enum for the enum.
I think this should be `e.keyCode === 32 || browser.tizen`
Why do we want to remove the `*byte` here?
Why do we need this?
This is a bit of a hack, but it would probably be good to have a test case for this.
This method is not needed anymore.
this is wrong. It should be `&&`
this should be outside the for loop, right?
The `Key` should be removed here, because it is not used anywhere.
This seems like something we can remove when we call `service.clearStaleRules()`?
Is this the same as `ISocket`?
I think this should be `/Runnable/unified`
could you also make this a warning and log a warning?
This is a very good candidate.
I don't think we need to get the `getParameterByName` function here, since it will always be the same function.
why do we need this?
Could you explain the logic here? I don't think it makes sense to keep it, but it seems more readable to me.
`__cadence` is not used anymore.
why is it changed from other stdlib imports?
I don't think this is right. The `blockNumber` should be `IstanbulBlockNumber`.
Does it matter that this is the only command in the code?
Why not keep `protected` as `protected` ?
This doesn't seem to be a problem, but it seems to be a good choice.
why do we need this for fast_bootstrap? Shouldn't we just use fast_bootstrap_bootstrap for fast_bootstrap?
This is a wrong file, and should not be imported.
I think this should be `func (p *Provider)`, since it is not used anywhere else
I think we should be able to remove the #if here.
Maybe we should just make this `byte(...)`
Please use `fastdds::ParameterList`
why not just `gulp help`, and add `gulp help` to the `make_server` field?
If you're using this you can use `SetScans = new MsDataFileScanHelper();`
I think we should also remove the `compute` import from `gce_image_tests`.
This should be done in a separate PR, right?
I would add a link to the description of the help message, e.g. "unused the schemas in new version of the junit for this version".
This is a bugfix. We should probably make a `target.FileName = false.Combine("logs", fileName)` check instead of the `logsDir`.
Why is this needed?
I think you should use `--allow-backticks-equals` here.
You can probably remove this line.
Should this be `static`?
Should this be `goimports`?
This is not used anywhere, right?
Do we need a trailing comma for these 2 variables?
I think you need to add `_fetchStatus` to `_upload` as well.
This is a little confusing to me, because the `if` is `m.config.Path == ""` check above.
Why do we need to do this if we have a `./` file on the `./` file that we need to use?
This one is the one that needs to be updated.
Is this the right place for this?
I don't think we need these. We can use the `cloudformation.go` API here.
@daniels-beck do you think we should add this to `nextBase` and `nextBase` to `recent`?
Nit: please sort this alphabetically.
Why is the `status` in the ` Elasticsearch` namespace?
Should this be a `boolean`?
`GrpcGapicRetryMapping` is not needed here, as `GrpcGapicRetryMapping` is not a valid value for `GrpcStreamingConfig grpcStreaming`.
I think this is not a good idea. The error message should be more specific.
Add a description of the Tree containing {@code n, T element})
This should be removed.
You can use `not_to be_upcoming` instead of `not_to be_upcoming`
This is not the same code as the one you added.
Ditto: We should probably not use a `catch`.
Seems like this is not related to the fix, but I think it would be better if we could move these lines to after the if/else clause, to make the code easier to understand.
why did this change?
This test is testing the same as the one in `get_knwkb_mappings`.
I think we need to use `r.dir.link` here.
Why not `var` as a local variable?
I think we can move this import to the top of the file, since it is a part of the file. It's not used anywhere in this file.
This is a bit confusing. I would have put `load_time` into the `load_errors`.
Why is this not a part of the PR?
This is the fix for the felixes.
(style) space required before the open parenthesis '('
I think we should have a constant for this, e.g. `AccountMaxVersionPrefix = []byte("vp.")`, and use that in all places where the value is being used. It's not clear why we use it for all values in the UI but we should not use it in the UI
We don't need this for this PR. It's not needed anymore, but we're going to keep it for now.
This is an important debugging change. The previous version of the error message was not "error_msg" but it's not "error_msg", so the error message was confusing to me.
I think we should be using `task`. We can avoid the `PodCoroutine` function, which is not a problem.
We don't want to use `ipVersion`, as it's a ` dependency`
This is now done by the #ifdef in #ifdef
This will be removed if we don't want it to be an already defined defined in the command.
`r}"` is a bit confusing, can we have a more descriptive name like `from_path_info`?
This is a breaking change.
This was the only change that affects the purpose of `return 0`
It seems that this line is not necessary.
This was the main change that was not doing anything before.
I think it would be good to have a test for the new RegexOptions.IgnoreCase, since the file is not in the same directory.
why not `--verbose`? I think it's better to use a `--verbose` flag for `--verbose`
Should we do a similar change in `libkb.go` for the `top`?
I think this should be `CassandraProtoVersion = 4`
This was just dead code
This was the only change to the old version.
composite_root_resources is a bool, so you can use kwargs.get('composite_root_resources', [])
`static` fields should be `final`.
This is a breaking change.
why do we have to add this?
I think we can remove `AbstractLinkLink.read(true)` and just add the `AbstractLinkLink.read(false)` to `AbstractLinkLink.read(false)`.
Is this needed ? I think it would be better to use `/tmp/non-existing-dir/process_test.pid` ?
Why are we doing this here? I don't see any usages in this file.
I think we need to move this import to the top of the file, so it is not used anymore.
shouldn't you use Shopsys\FrameworkBundle\Model\Pricing\Price here ?
nit: rename `use` to `ScrollEffect`.
Nit: this should be a single line string.
Nit: This variable should be called `const` rather than `const`
I don't understand the purpose of this change. I would have expected it to be `repo.Set()` instead.
This should be changed to use `RandNum`, since it's a separate change.
I think this would be a good idea to move this check to where it was before
How about using `/Gobblin.xml` to make sure we don't change the original implementation?
why not just `export * from './act';`?
This should be `useDefaultSources`, not `useDefaultSources`.
This is the only change that affects TF TF
Is there any reason to make this change?
why not using a single string?
Why not just call `seen-*`?
Should this return `nil`?
What about `--jsonschema`? It seems like it would be more appropriate for a user to call this. I would say that in a future PR, but if we ever want to use it for some reason, I would say `--jsonschema` or `--jsonschema` would be better.
`toLowerCase()` can return `null` if `valueOf()` throws, so this can be simplified to: `return value.toLowerCase(value)`
Sorry, but this is a bit confusing to me. What is the reason to use the pool pool pool pool name?
I'm not sure this is correct. I'm not sure if it should be `nil`, but I don't think it's a good idea to add it.
I think this error message could be improved.
Can you use a more specific name?
I would use `Expression` here.
This is the only thing I don't like. I don't know if it's a good idea to go.
I think this should be a static constant.
What is the purpose of this change?
This looks like it's missing the `:ic` at the end of the file, so I removed the `:` here.
I think this is not the right place for this, since `DestPorts` is the actual implementation for the `SSL` field, and `setUp`.
Is this the only change that affects TF TF?
This is where we want to use `first_digit` instead of the `%d` special value.
Does this test still pass on windows?
Please remove this
This change is not related with the fix, right?
I think this is a leftover from the previous commit.
why remove this?
Should this be ` Story`?
This is a very generic method name, I don't think it makes sense to name it `BlockHeaderHeader`
Please use the same encoding for the `@Restricted(NoExternalUse.class)`
I think this is not needed.
`checkArgument` could be replaced with `!deletes.contains(schema.findField(name).fieldId()`
Why is this necessary?
`network` is a struct, so you can use `KratosMultiphysors` here.
I think it is still useful to have an event with a `_` prefix, and then add an additional `Lade hoch` to the other `Uploading` fields.
Why not set defaultmask as default?
Why is this not part of the PR description?
I'm not sure why you deleted the whole function.
This is not the right place for this, it should be `if not enabled`. The current description is what is meant to be used for the current thread. The current code is not clear to me what is happening.
I think this is still a mistake?
i think you should just delete the import
This is not needed anymore, right?
I think it is better to just change the parameter of zeroDataReset to true.
I think this is the only place where we should be doing this. We should probably just delete this and remove `CompletedTask` altogether.
This is a very large change, we should be able to remove the `send` method from `User`
I think this is the wrong fix
Please add a description of what is going on here
This is the only place where we've got an exception that we never return `nil`. Is this the right place to return?
These ones are actually in this PR.
Should this also be in the `lib/lib`, since it's not in `lib/core/configconfig` and `AccountList`?
I'd call this `check_refs_`
This seems unrelated?
This function is only used by the `CASSnapshot` object. I think this should be moved to the `client.CASS` package.
This is a bit confusing to me. What about `<erb>` or `<erb>`?
Please add this new parameter to the `Blockchain` module.
I think this is the only place where we call `Cache.TTLDuration` in `CreateCreateAPI`. I think we should just call this `NewWebAPI`
`/** @Attribute` is not needed.
This should probably be `if server_side_encryption_customer_algorithm is not None` since it is an iterable
What is the purpose of this change?
Can we move this up so that the user can set this based on the user's own server? We don't need to do it for the password.
I'm not sure why this was added, but why is this needed? Is the new code in this function used anywhere?
I'm not sure if this is the right place for this.
Why is this needed?
I think we should add a new field in `componentCheck` to make sure we're not breaking anything here.
The `else` clause should be removed.
@deads2k do you have any concerns with this?
this is a weird place for this feature, can we make it a private one?
Unnecessary spacing detected.
I think this is a bit confusing. What about something like `flake8`?
I would use an "real" instead of "0"
This file has been removed in #5993
I'm not sure this is correct. If we do want to use the `unused-variable` option, then we should remove `pytest.fixture` from the `Python` method.
This is the default for the `CustomCustoms` library. The `CustomCustoms` library is used for a `CustomCustoms` and `CustomCustoms` objects that are used in `CustomCustoms` and `CustomCustoms` objects.
Could this have a default value?
This is a change in behavior.
I'm not sure if this will work. It will be better to do the same for txHash and tx.Hash.Bytes, but that's a very nice change.
I think we can just remove `repoURLFlag`.
Line is too long. [83/80]
`from numpy import np`
This should be `@upperLocalLocalState` instead.
@jridgewell Is the ` being used here?
I think we don't need this line anymore
This should also check `ctx.User.RepoUserName == ctx.User.LowerName`
I think we should use the constant here instead of hardcoding the value.
This is the default path.
This should be `// +optional`
This should be `circular-json.js`
I don't understand the purpose of this PR, it seems like this would be a breaking change.
Nit: I'd rather not return this error, because it's a `err`.
Can you make this version compatible with java.3.0.0?
Is this a valid option? I would expect it to be an env var, not a `config.autoload_paths.root`
This is not a good idea to test this.
Did you mean to also include the key for this field in the list?
This can be a `volatile`
I wouldn't change this to MAX_QUERIES_PER_HOUR 1, MAX_CONNECTIONS_PER_HOUR 2.
I think we need to do this after the free is applied to the free, and if we do, then we could set the free at the free, the free will be applied.
I think this should be `list.map { |x| x[1] }.map { |x| x.first }`
Why not use `\n` as the default?
This is a little strange. What happens if we have `--set` in the config? I'm not sure how to deal with the `--set` in the config file.
This is the only thing that could cause issues, but it would be nice to test that it was a pain of the pain of the first time
I think this should be `IEnumerable<OrcValueWriter<?>>` instead
I think it would be better to use `.properties` instead.
Please use a global import.
This is not a valid test case. The `toMatch` test is not testing anything that should be used for the test case.
This is a good place to put the std::thread ([this in a few places, but it seems like this should be an error code.
do you need to add `walletCreateCmd` and `walletListCmd` to the `walletList` class?
why is this change needed?
The name of the flag is not read, but the flag is a bit confusing. It should be read as well.
I think this should be `Map` instead of `ListTypeName` as well.
Could we use permissions here?
This is a bug fix
Why do you need this?
Why not keep the import as the last group of imports above?
Why is this import needed?
This is a good idea to update the cgroup.Resources.MemorySwap.
I think it would be good to have some sort of implementation of this as a general rule for testing purposes.
what is the difference between this and `nextEpoch`?
This doesn't have to be a `Row` object, so we can just use `entity` directly.
This is a constexpr nano::bulk_pull_account::size; I'd prefer if it was a constexpr nano::bulk_pull_account::size
I think this change is not correct.
Shouldn't this be `@var` ?
Should we also add `static final` and `static`, `private` and `static` fields?
I think this should be `configconfig` rather than `Path libkb.NormalizedUsername`
Do we want to make these private and use the other instances?
This will be very slow.
I think we can move this method into the constructor.
why is this change necessary?
This is the only change I'm not sure about. I think it's better to keep it as it was.
I'm not sure this change is the right choice, but it's probably worth adding an extra line break.
This is not the right place to put this. The API will not be able to execute API without an API.
should we change this to `recording_msid`?
Do you want to remove all of these?
We should be able to use the constant here.
why do you need this?
This should be fixed in the `m_generateDefinedId` block.
This is a bug fix, right?
Can we have a test that checks the input? If not, I would prefer to have a function that returns a `Model` that takes a `Model` and then have a `Model` that returns a `Model` if it is not a `Model`
It seems that this is only used in the `methods` case?
Is it worth adding some sort of "on" to TRUE in the UI?
@jcotela is this a bug?
Why did this change?
I'm curious why this is not allowed in the database?
This will break backwards compatibility.
I think this should be `Raw` rather than `use_memoize`
This is a small fix for the bug fix.
I don't think we should be using the `@var` here, since it is not the `bool` part.
Can you please add a `TODO` after this line?
I think this is the right place for this method. I don't see any reason why we need this change
This is not the same as `code_ += "#if`, but it is used in the same place (the `if` above is used in the same place).
I don't understand why we have to do this, but I think it's better to have the impact on performance. Revisit performance of using this type of database transaction.
is this used anywhere?
I'm confused, why is the `previlege` not a ` project`?
I think we can just do `if notifyObjectDeletion is not None`
Could we log the error here?
You need to use a `_` to make it clear this is the only place where you use the `example answer`
I think we should just remove this condition. It is not used anymore.
This was the only real change in this PR.
Should we do the same for both `scope?.Span?` and `scope?.Span?`?
This is a bug. The previous code was using the `Trace` and `Rewards`.
This is not used in this PR, but it should be removed.
This is not needed.
Why not use `package.package.package[0]`?
I think this is the only one that makes sense to me.
why not just pass `_tree.Commit` to the method?
This is the fix for the new methods in this class.
@sparrowDom This should have a check for config.NewFs(configName, fsPath, config)
I think we need to keep the old version.
I think this should be called ``_storage_class_header`` or something like that, so you should not need to check for the pool here.
Can we make this a constant.
I'm not sure we should be using this. It is not clear to me that the `NotFound` is the right default.
This change seems unnecessary.
This is a little hard to read. What about something like: `ApplicationKind_value[k]`
I don't think this is right. The current MSI should be loaded. It's not the time you call SignedURL.
I don't think we need the `WebDriverWait` method anymore.
why is it ok to return an error here?
I'm not sure if this is the best way to do this, but I don't see any related changes to this PR.
I think this should be a destroy?
Are we sure that user.SettingsAvatar should be enough?
Should we add a check here that the file is not failed in the first place?
This is a pretty big message, and should not be a note.
It seems like this should be a constant?
this is just to be able to remove the `.spec.wdwd` file
I think this is not needed anymore
This should be `v2/gentsfaddrs.yaml`, not `v1`.
We need to check if ok here.
Remove extra newlines please.
I'm not sure if this is the best way to do it, but it seems like a good thing to do here. If we do, we should just remove this method and use the same logic in the same class as the same place.
I think this should be `Clone`
The `\` should be removed.
We should use `logger.infoinfo` here. Also, I think this should use `logger.finest` instead of `logger.info` to avoid the log.
Why do we need this?
nit: rename to `isStatusFailed` to be consistent with other places
You should be using `Stop.TestCase` instead, right? (I know it's not your fault, but it should be the responsibility of the function.)
The reason I'm not convinced about this is because the test was failing because of an `nil` in `BaseMessage.go` and it looks like the test was failing because the test was failing because the test was failing.
Why not use `CheckConfigAndShutdown` here and below?
I'm not sure about this one - it is better to have it be a skip param.
I don't think this is the right change since the `BeginGridFSStreamError` is a stream.
I think we don't need this line.
I think we can remove this interface.
I think you can remove this line
Maybe we should add a "Increase verbosity" to the event handler, and add a new one for the event handler?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is not the right place for this. The mainChainProcessor should be nullable.
This needs to be moved to the `LINKSTUB_DIRECT()` method.
I think we can remove this line. We do not expect any case when the stop was null, so we can't just call `KestrelEventSource.Log`.
I think we should be more specific about what this is for. If the data is a fully-qualified type, we should be consistent.
This is a bit weird, we can just use `Func<MetricItem> getMetrics` instead.
This is a good change, but I'm not sure if this should be a `path` option.
This will need to be `0x2` for the `&` case.
Why not just disable the line if it isn't used anymore?
Is this a typo or a typo?
(style) externs should be avoided in .c files
why not use sys here?
This seems to be a change in behavior, right?
This is a bit of a bugfix. Can we have a `callback.onSuccess(parseResponse(response, bodyConverter));` check in case `URI` is null or empty?
Can we keep this in a separate commit?
Should we just always set the default? I think that we should set the default to true when `maxWebMetrics()` is called.
This should be `1e-3 *1e3 / loop_num`
This is the only change that affects TF providers. The `ExceptionExceptionInHandler` method is a `LogExceptionInHandler`. I think this should be `ExceptionExceptionInHandler`.
The `String` is unnecessary here, since it is already a constructor argument.
this should be removed
why not just add this to `env`?
Is this used anywhere?
Is this the right place for this? I don't see it being used anywhere.
Don't we need to do this for anything else, or does it need to be a Blob?
Is there any particular reason to not use `self.save!` here?
I think this will break the `vk_with_root_Union_Union` version.
I'm not sure if this is right. If the user explicitly set this to true, then it will not be set.
I'm not sure if this is correct. If we are going to make the progress bar a dictionary, we'll always be present. When the progress bar is treated as indeterminate. If the progress bar is treated as indeterminate, then we'll have a property that is present to progress elements. If we are not in progress bar, we will be able to set the progress bar at this time. If the default value is a dictionary, we will be able to set the default to 0, so we should just set the default to 0.
I think this is a leftover?
Why are we using `debug` here?
This is not the same as `proposals` file.
@danrot @wachterjohannes Shouldn't we also add a `get_attribute_id` field to the `get_attribute`?
Should we add some description about what this is for?
This is a bit of a hack. What if the grouping type is a boolean?
Can you make the indexed and the indexed settings match the getters of these constants?
This class has no access to the other `T`s, which is not needed
who will use this?
So, we're testing the `self` here? Should we test for that?
I'm a bit confused, why `env` and `check_env` are needed here?
This change is not related to this pr ... please revert.
The `reason` is no longer needed since the original implementation of `plot_test_mark` is used in `util.read_yaml`.
This is a very good idea to add a TODO to fix it, but I think this should be a separate issue.
I would rather see this in the controller and not in the `products`.
I think we need to use "(" as a constant here.
Should this type be changed to `errorMessage`?
Hmm, this is a little confusing to me. Why do we need to have the cmd header here? I'm wondering if we should have a way to avoid having to do a single header at all if we can.
Do we need the refresh here?
why remove this?
This is a bit of an unrelated change, but why are we doing `NABoolean ComTrafReservedColName` instead of `NABoolean ComTrafReservedColName`? I think we can just have `NABoolean ComTrafReservedColName` and `NABdrawelem`
Why not just return the header name and then just do `// TODO(abg):` ? It's not a bad idea, but it's not really a bad idea, so it's just a warning.
This is a bit confusing, why do we need a `import` here?
This test should be moved to `TestConfig` and should be moved into the `SharedVolumeMatchFullConfig` class.
I think this is not the right place to add this.
This is a pretty big change... the log message should be logged.
Please use the standard `std::string` module.
This is a breaking change for the API, but I don't think it's a good idea to add this argument to the API.
Can you make this a string string so that we only have one attribute?
It's a little confusing to have a method for `WorkingSet`. I think we could have something like `meaning not obtained from wire`
Why do we need this check?
Please don't use `import` for imports.
I'm not sure if this is the best way to do it.
nit: this import is not used
Can we move all these lines to a utils?
Use the new Ruby 1.9 hash syntax.
I don't think we want to put this into `panic`
Can you please also check the `if focusObject and focusObject.isProtected:` here and below?
We should test for the new `spring-button` case.
Is ` GoGapicContext` still needed?
Use the new Ruby 1.9 hash syntax.
@mfojtik @mmaxim this test was correct. I don't see any change in this test.
Why was this changed?
Should this be `caster` rather than `true`?
Can this just be `new.contains`?
This should be a constant in `set`
Why do we need the exception here?
I think we can just use an array of ` docFields` and use `ChannelFields` instead.
I think this test should use `assert_equals`.
I think we should remove the field field from `UnqualifiedName`
This should be `Default = "sarif.log"`
I think we need to add the new method to `fill()`
Isn't `Tracing` the same as `TracerProvider`? If so, we should use `Tracing` here instead.
What is the difference between this line and the lastId <= wal_->lastLogId()?
This is not used.
@mfojtik this line is the fix.
We should probably add an example here that will require an additional `omitempty` struct, e.g. `Supports PaymentVersionV2`?
The stream is actually actually actually a stream, so it's probably fine to just do it here.
I'm not sure why this is needed.
Why is this no longer needed?
Can't we just pass a `db` argument here?
why use `not_to have_content` here?
I think this should be `std::numeric_limits` to match the other commands.
This is a public API. The `BaseMetastoreCatalog` class is already `private static final Logger`.
please add the spacing
I think you can just do `SpanBenchmark>`
I'm not sure what this is for?
Is there any way we can make it a bit more explicit?
We should not use the package imports here
Is the change to the host unzip git related to the host unzip git?
It seems this function should be called `kubernetesVersion` or `kubernetesConfig` to make it clear that it has been called in the same way as `init()` and `init()` both work.
This should probably be `_projected_monthly_revenue` and `projected_monthly_revenue_basic`.
I don't think we can remove the `beginIndex <= 0` check.
Can this be null?
Not sure if this should be `UsageReportingEnabled`
We should set this to 0.3.0 in the middle of the build. Also, the default is `0.3.1`.
This is a bit of a hack, but is there a way of doing that in the future?
It seems that this is not needed, `web_debug` and `Stop_debug` are used for the `web_debug` command.
It seems like this should be a part of the previous migration?
Should this be `static`?
This should be a string.replace
Just to be consistent with the rest of the code, we use `schema->getFieldType(i).type != SupportedType::INT &&`.
I think this should be `if !aws.isReaderSeekable(ctx.Body)`
Is this a valid output?
Is this a typo?
I think this is not correct, right?
Nice! This is a bug fix.
I'm not sure about the name of the format here.
Please remove the trailing whitespace
It seems that the `nms_thr` is not used in the tests.
This was removed because the dialog was already loaded in the `result`.
Why are these two separate lines?
This can't be removed, because it is already checked above.
Should this check be done for `PushViewController` instead of `viewController`?
Why is the eventCode no longer a SP? It's not the responsibility of the requestCode that's pulled out.
why is this an `const`?
Use the new Ruby 1.9 hash syntax.
This seems to be a duplicate of the above line.
We can remove this.
Should this be `// Deprecated: Use TransitionDependenciesMap instead. TransitionDependencySet`?
`)` is missing here
Is this still needed?
You could just change the recipient.org here to have the plan.present? so it doesn't have to be changed in the controller.
Can we use a more specific name for this?
This is the new behavior of this PR. I think we need to make sure we don't run into the new `Rule` namespace in the future.
I think this is a good change to have. This should be changed to useCallback to avoid unnecessary work. It is not a problem.
Shouldn't this be nil?
This should not be needed.
I think we should be able to remove this ifndef.
I think it would be better to have a `const html = hyperx(h)` here.
I think this is the only real change.
The other message here is that it should never get called.
@jridgewell I think this should be `<OpenTelemetryBuilder>` instead.
I would call it `settransaction=True` because that's what the name is for.
I don't think we should do this, because the old pickle would be the same as the old_protocol, but it seems to be a bit of a bit of a bit more efficient.
This is not needed, the `str_replace` function can just return the `\n` object.
(style) trailing whitespace
Please remove empty line.
you can use `Unreachable Partition Partition\Classes\MediaLibraryItem` here
this is not needed anymore
how about `challow_read`?
Why not just catch `final`?
Is this a typo?
This is not the right place for this - we can do `return os.Getwd()`.
I think we should import all the fields from the class
This seems wrong. The table can't be used for the `outboundservice` field.
I'm not sure if we should remove this, as we already have the option to update the request.
This field is not used.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
should be sizeof("65535" -> sizeof("65535")
We should rename this.
Should this be `if not read_flags` or is there some sort of condition that would be used for the `if` condition?
Why change the type?
This is not a `HEAD`, right?
I don't think this is necessary
I think we should log here as well.
Shouldn't it be `final` ?
Use the new Ruby 1.9 hash syntax.
I don't think this is the right place to add this.
This should be marked `NumDocs`.
not sure if this is needed. we should use `host.http` instead
I'm not sure if this is the right place to put this. It's just a single package. It is used by `libcalico/felix/` but it's a `DeleteLabels` package.
I would prefer to have a separate method called `realCaretMove` or something.
I'm not sure this is the right place for this. If this is the case, the `Topic` will continue as expected.
Please add a space before the `if`
can you also add this to the `pvt_small` module?
Why is this being changed? I wouldn't think it would be better to have a `callback` be passed in.
Can we remove this?
could you please explain why you are using `LOG.info` directly?
This is not a new API, but it should probably be in a separate pull request.
This is not used, right?
This is the fix, but I don't know how to get the change.
I don't think we need to do this. It is already in the `visit` model.
This is not related to this change, but I don't think it makes sense to change it to `CLIENT_RANDOM`
Is this a bug?
@bparees I'm not sure why this was here.
shouldn't this use `DateTimeDateTime` ?
I think this is a bit confusing, since the `export-fixes` option is already in the `fixit_file`.
This is the only change that will break existing tests.
This is unrelated.
We can remove `determineFileType` from `determine...` since they're no longer used in this file
this is a bit weird. if you're going to use `setup_bundler`, why do we want to use it?
This will need to be added to the `AddedAllocation` as well as the `SupportsAllocation` method.
Nit: "If you're using the `C:\` class, it would be more consistent to have "If you're using the same `\*`, you'll need to update the `\` to use `\` instead. Also, you can use "If you're using the `C:\` class, which is a string, and you can use `\` instead of `C:\` to use `\` in the `C:\`.
I think we should use the new Realm({schema, path: 'another.realm' instead of hard-coding 'realm' in test code.
This is not a 5, but a number is missing
I think this should be a warning instead, right? We should probably be doing this as a general question, but we shouldn't be using it in the code.
`assert` is the proper way to go.
@JaegerTag is the only thing I'm guessing in which scenario we should do in the past?
@stephentoub why did you change this? I'm not sure if we need to change it here, but it seems like we are not using it anywhere else.
I'm not sure this is the best way to do this. If I'm reading it correctly, I would suggest we keep it as a constant, and add an option to the name. I think it's better to keep it as is.
This function should be moved to `removeChild`
I think the if here should be a little more explicit, because the dictionary".' has a different key than the value, so that the user can call the keys directly.
Do you think it's better to use `Objects` or `DateTime` instead of `Datetime`?
`includesDoneDone` is called from `slot` in `getSession`
This is a little strange to me. Why is this change needed?
I would have put this in the `MvxViewHolderBinded` class. It is not used anywhere.
We should make a method `createAttr` that returns the value of the function.
The `else` should also be removed.
I think we should remove the `AuthenticationDetailsSource` class altogether. We should probably just make `AuthenticationManager` a `List<T>` and `AuthenticationManager` in the `MessageSource`.
Can we use a more specific name?
You can't use ` dynamo_exited_synched`, just to check if `dynamo_exited` is null or not.
Shouldn't it be `InitToken(caFile string)` here?
why this change ?
This is not needed since `New` is called from `runtime.go`.
NIT: `raise NotImplementedError` should be `raise NotImplementedError`
I think we should move this logic to the `if` block as well.
This is not used anymore.
Seems like `Scope` is missing from the context.
Do we want to keep the old `searchTerms`?
RecyclerView is no longer used.
This class is not used anymore, and is used in many other places.
I think we should revert these two lines.
I think we should return `Collections.emptyMap()` instead of this map.
This seems to be the only real change.
Please add Gradle for new parameters
Why we change the default behavior?
This is a bit of a hack. I'd like to see a test for this, but it seems like it would have been better to be explicit. I would prefer if we just use a function to have the libpth-long value, or if we can just do it at the bottom of the file and use it.
This should be a `required=True`.
I don't think this will work, you can use `API.prototype.importAllFromMnemonic()`
I think this is not the correct way to go.
I'm not sure if this should be in the DOM file or not.
I think it's better to keep this method as `@throws` since it makes the code harder to read.
Should this be `if m.Spec.ProberSpec.ProxyURL != "" {`?
Is there a reason why you didn't just use `stoppedCh` rather than `Function`?
No need for `icon` here since it is a `PhoneProvider`.
Looks like the indent is off here.
I would prefer the other fields to have the default value, and the default value would be set in the constructor.
I would suggest to have the name of the enum. What do you say?
Please update the docstring accordingly.
Please don't change the copyright year in the original file.
This is a breaking API change. I don't think it's necessary to have it here since it is only used for processing processing.
I don't think we should log here, since the debug level is the same as `debug` in the function.
Why is this readonly?
I think this is a bugfix
This one is a breaking change. The `depends_requires` function is a breaking change.
I'm not sure why you made this change?
I think this needs to be moved to the `limiter` list.
This is the most appropriate change. I think we can remove the return statement.
This is a change of behavior, but I think it's a good idea to keep this as `bool`, but I'm not sure if it's a good idea to change it here.
This log line was moved to `log.finest` in `log.addNewSessionRequest` and it was moved into the `log.info` method.
@jsoriano This is what I meant, I think we can use `Test3.A` here.
I am a little concerned about the consequences of having this as an API break. I think it makes sense for this to be an API break.
If we're not going to make a server-side target, we should probably make a method called `redirect_to` that returns the path of the flow. This way the flow doesn't get the path to the flow.
Don't need to do this here. The node's name is `.to_xml` and it is `.gone`.
I'm pretty sure this will be a good candidate for a simple `poll` argument, since this will be a `default` argument.
Line is too long. [81/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
why not using GET_CAST_ISSUE_MESSAGE?
why is this a boolean flag?
Can you use the default value of `long` here?
It would be better to use debug file size for debug file size.
Is there an explicit way to check the `self`?
This is the only place where the agent is created. Is that intentional?
This is not a requirement, but I don't see any benefit from this change.
Why are we not using this variable here anymore?
I don't think we should be using this here. We should probably make sure we have the same problem for the users.
Remove.
I don't think it's necessary to set this to true in the test suite, since the test already has `node_node_print_annotations`
might make sense to put this in a constant somewhere, like `Screencencs::Owner_NAME_NAME`
@matt-gardner How did you find this error? I think the `extra_entropy` is a bit confusing. I think it would be more clear to just `extra_entropy = bfh("%064x" % counter)[::-1]` instead of `while ord(sig[0] > 127: # grind for low R value`
Can we rename this to `ValidateStoragePaymentCondition`?
@agramfort I think this is a bug. This is a bug fix.
@smarterclayton do we need the extra parentheses here?
This is a breaking change, but I'm pretty sure we should be using a `parse` here, since `SparkRead` has a `SPLIT_SIZE` attribute.
I think you could just return `path.errno == errno.EEXIST`.
I don't see how this is used.
This is a pretty big issue but I don't think it's worth doing.
This is the main change that will break all paths, but it will break all the time. I think this is a good idea to use `None` for the `storepath` and `None` for the expected path to be used.
Isn't there a specific reason to use the connection ID sent?
We should consider adding `isLoadingContainers` to the `try-except` function, so that it's easier to read.
Is this a typo?
I'm not sure if we should do this. The problem is that if the chunk is in the `biggestSize`, then the `biggestSize` will be set and `biggestSize` will be `None`. I think we need a check for the `biggestSize` here.
If this is the only way I would expect it to be used for validate, and not for validate.
rm empty line
This is a little weird, why is the `g_autoptr(GVariant)` removed from here?
This is the fix for #2421 (if the status is wrong).
I don't think we need this.
I don't think we need the `.find_by` here since the `must_respond_with` is an `int`
@smarterclayton I don't think this is right. We should do it in the `try` block of the `if jobInfo.cancel is 1:`
The CStorPool client still has a CStorPool phase, so I think we should remove this field.
I think it should be `if ($cartItem->getQuantity() > $cartItem->getQuantity() > $pse->getQuantity() {`
Why do we need to set `int` here?
This method is not used.
I think you can use `RunRunRunRunRunRun`
This change is not needed.
This should be removed, since the predicate predicate is not null.
This should probably be in `errors/sdk` too
This doesn't seem to have been used
this is the one place where I was thinking we should be removing the `updateNodeStatus()` call, but I don't think we should remove the `else` block.
Is this include necessary?
This is the main change.
Why the change here, instead of using `NotFound`?
Why are we removing GetDefaultVersion?
I'm not sure how this can work. I think it's better to use the URL opener directly.
I'm not sure if this is the right place to put this. It is a bit of an overkill to add a `<a>` tag for the class name.
Why is it necessary to set this?
`user` is not a Array, so I don't think we need to change this one.
I'm not sure if it is worth it to make a change in behavior.
This is wrong
I think we should add a property for this.
I'm not sure if we need to do this, but it seems like the only way that the user can do is have the right thing to do.
I would prefer `assert.NoError` over `assert.NoError`.
Can we make these as `private final final String AVRO_WRITE_MODE = "write.avro.write-mode";` ?
I think this is the only place where we need the `parse` call
This was not doing anything, it was actually not used anywhere.
@mfojtik this should be `availailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailailail
There is an `Unargument` function in this function.
I don't think we need this config property.
Why not keep the getter as public?
This should be `cidSet`
Why is this change required?
Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
This should be `char fmt[] = "O"`
We should use the `--disable-brave` flag instead of the `--enable` flag.
remove this line?
could we add a check to make sure we don't get an error if the user doesn't have an `__init__` attribute?
@mattcaswell, is there any way to make this a string that is not set? This is the only place where we have to set the url.
This check can be reverted.
I'd rather have an example of the promise that has timed out. I think this is a bit more specific. Maybe something like `use the resolved value for _default_.length(1)`.
we can use `pages#show` to make it more clear what the use case is
Is it correct to change this line to `Intents.ACTION_NEW_TREATMENT.equals(action)` ?
Is there a reason you're not using `iv_state` here instead of `image_view_`?
I think we can remove the `__tracebackhide__` parameter.
@mmaxim this is the bug fix?
@preferred_languages is the preferred instance of `Locale.` so I think this should be a `@preferred_Locale.`
I think this should be moved to `removeChild`.
Should we log something here?
I'm not sure if we should keep this, but we can just make it `const cstorRunTask = `
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we should remove this method entirely. We can just use `namesLookback(namesLookback)`
I think this is the wrong place for this.
This is a bit weird, I would just put the `username-check` inside the if-statement, and remove the `if` check.
I don't see where is the intent here?
I think this should be a class field in `SYSTEM_ROLES` instead of a class instance var.
This will throw an exception if `parsedAddress.Scheme.Equals("http", StringComparison.OrdinalIgnoreCase)` returns true
I think we need a more descriptive name for this. Maybe `s/products/videos/video_to_ show`?
This seems to be the only change that will be able to do with the `.FrontendServiceName` check.
Is this a typo? `std::lock_guard` isn't a good name.
This change looks unrelated.
The space is not compatible with space-exception.
`game` -> `gameGenerator` ?
This is not the same as the default, as tagMatchers should be the same as tag plugin.
Should we also delete this package? I think it's a good idea to move the `duck` package from `knative-gcp` package.
I would prefer to have this as a separate method, because we don't need to pass the version as a parameter to the `createdAsAdministrator`
What's the reason for this?
This should be set by the `policypolicy` and not `policypolicy` as well.
I'm pretty sure we don't need to use `push_stream_ids` anymore?
This is the only place where you need to print the exit with 0 to print the message. I think it's worth adding a `command.exit(exit_code=0)` to check for `exit_code` and `exit_code=1` here.
Can we remove `RequestId` from the `RequestId`?
I think we should set the default value to -1, otherwise it will be set to -1 in the future
Why is this being removed?
why are we changing both sides?
This is not a public method, so I would just return `null` if it is not.
I think it would be better to have a test with a name for "prefHttpProxyUser" (or something similar) that sets a name for "prefHttpProxyUser".
@cramforce do we still need the `.Any()` part? If not, I'd suggest to use `.unsafe().Count()`
this is not a good change. You can use `frame.map(lambda x: x)` instead.
I think we should check for `forced_empty_list` here.
we need to add the `err` parameter here to pass it into the `err` block.
This one is wrong.
Why is this needed?
We should use `rechunk` here, so that we don't need to check for other values in the future.
shouldn't we be using the same container?
This should be `OnNext(value.Key, value.Value);`
I'm not sure about this one. I don't see where the username is being used, but the password would be a `@::Program` (which is a `username` method), and the `@::Program`, and the `@::Program:` is the only one that is being used for the `username` object. I think it would be more clear to use `super.info.username.getAlert` in the `super.info` object.
Why is it public? It seems that we should be calling `NewType` on `TypeUtils.Add` on `TypeUtils.Add`.
`keys` is a boolean, so you should be able to use it.
I'm not sure if we want to do this, but I think it is better to do `if config['transports'] && config['transports']` so it is more readable to do this. I would also recommend adding a `if config['transports'] && config['transports']` in `check_deprecated_config` so that it's clearer if you want to use that instead of `if config['transports']`
This should be an enum instead of a type.
Why is this change needed?
@Override ->agramfort
I think we need this `list(range(...))` now.
I think it's better to check for the value of 0 and then check for the `float64`?
This is the main change I'm not sure. I'd be tempted to just remove the entire block of the `if:`, but I'm not sure if there are any changes here.
This change is not related to your PR. The `mdc-tab` option is not in this PR. The `id` option should be included by this PR and the `id` value should also be included by `mdc-tab`.
@mfojtik this line should be `date +%s` since it was a string.
Is it possible to get a simple simple `blackfriday.Markdown` to get the correct size of the wordcount? Or is it possible for this to happen in a future PR?
Can you please add a return type annotation?
We need to load postgresql plugin for now.
Please use `for (uint i = 0; i < proc_num_simd_saved();`
why is this being removed?
I'm not sure if it's worth changing the behaviour here.
This is a bit of overkill, but it seems like this should be the first line of this statement.
This should be in the same PR as in `limitsExceeded.java`.
Why not just use the same line?
This is a breaking change. The code in `connection/coreDescriptor/content-service.php` is now removed.
The `:`, `orcid` should be `:`, `orcid` is a bit confusing. I would recommend using `:`, `:`, `:`, `:`, `:`, `:`, etc.
import os os? os os?
I think this import can be removed now.
This is the fix, I just changed the indentation in this PR.
This is not needed, we can remove it.
I don't think we should add this to the base class. We can add it in the code base, and remove the `buffer` from the `buffer` interface.
I don't think this needs to be a mapping of rule hashes, it should be a mapping of all the attributes
`name` is not None. It is not None in this case.
I would use a more meaningful name, `deleteRecursive` or something like that.
This is a good change. The class name is `HealthCheckServlet`.
can we do this in `server_url.to_json` ?
Can you add this to `import` below?
I don't think we need this. I think we should just use `c = context.WithValue(r.Context(), ReplacerCtxKey, replacer)` instead.
`PythonResource` could be `null` as well, right?
Metrics/LineLength: Line is too long. [83/80]
This is the main change.
I think we should keep the property name as `boost`
Is this a good idea to add a filter to `getAccounts` to allow for us to override thewebContainers? I'm wondering if we should be doing this a little more, but I think we should do the same here for `getContainers` and `getContainers ]` in the `custom_NAME` component.
Can we add an example here that `server_address` is not passed as a parameter?
I'm not a fan of the "builtins" name, it's not a "builtins" type. What do you think about adding a `field.required` field to the `make_required` field? The `field.required_to_enum` field is a bit confusing to read.
How about `User.last`? This way you can also test the user with the new user.
This is not a example.
I'm not sure if it's worth it to make this an abstract property, since it is a private private private private transaction.
I would prefer to use a `exists` function that takes the file directly, to make the config file a little clearer.
Can you add gitea copyright line to header (and keep gogs one next to it)?
I don't see this being used anywhere, can we just remove it?
This doesn't appear to be used anywhere.
Why not remove the metadata location? It seems it is not related to the metadata location.
I'm not sure this is the right way to do this. The first time the function is called, it is called, so we don't need it in the first place.
Should this use `section` instead of `teacher`?
I think you need to add `isplural` method here as well.
The `baseTasks` is not needed anymore.
This is a bit confusing. Why are you adding this Process state values?
I don't think we need this here, we should be able to remove it from the `aws-sdk-s3` file.
why 15000 is changed?
This is a bit of a hack to the user, but I'm not sure if that would work.
I think you're missing a `\` here, and the `\` should be the next line.
this is a bug, we should not have to worry about null here. It's not the case that the `model.setPageSource` returns 0 if the rowPosition is not null, but the `pages` is not null.
Please add the standard library library for this
Is this the only place where we need to use the logger?
why not just `this.hot.countCols()`?
I'm not sure if this is correct. The `if` statement should be removed here.
Trailing whitespace detected.
Can you use `go goimports` here instead?
this is a bit weird, maybe we should just log an error if `err == nil`?
why not `driverLogLevelUsage` ?
This will be removed if `layoutManager.mobile` is true, and the same for the `nameof()` method
I think we should just return `false` here, to be consistent and use the function `IsManaged` instead of the function `IsUnmanaged`.
should this be `api_sig` instead of `api_key`?
nit: I think we should use `string.IsNullOrEmpty` instead
This should be `wx.OK` instead of `wx.OK`
@DaanHoogland can you please check if this is the right place to check this ?
Is this a typo?
Please rename applicationVersion to applicationBuildTimestamp
This should be changed to `addContext` now.
Should this be `string docId`? It seems to be the same as `AppendFormat` in the `AppendFormat` method.
I'm not sure this is the best way to test this. I think it's better to keep the original behavior as it was and just check for the result of the iframe.
This seems like it could be a function that has the defaultReturn directly, and then just have the default parameter.
Should we add a TODO here thatbserver-0.dev.keybase.io:443 andbserver-1.kbfs.keybase.io:443?
The Ping timer should be reset.
This is a bit odd - we're not doing this anymore, and we're just going back to adding it to the list of files.
Why remove this file?
I'm not sure if this is a good idea to add the `.strip` to the version. I'm not sure if it's a good thing.
Use `.compact.join` instead of `plans_path`
This file should be removed.
Is this really necessary? I don't see a reason for the `X509DistinguishedName` struct.
"Peer" -> "Peers".
I think we should remove the `default!` here and let it be the default.
I'm not sure why this is needed.
`!update*/` -> `enabled`
`cart.options.stub(:approval_group).and_return(approvers)`, which is more readable.
This should be `aging.decode('mbcs', 'decode')`, not `aging.decode('mbcs')`.
This was a bug in the first place so I removed it.
This should be the last line in the `create` method, not the value.
This is not the right place to add this. It should also be `SimpleLiteralLiteral`
I don't think this is right. The `.replace` function is called by the `.replace` function, which is called by the `.replace` function. I don't think it is a good way to do it, so this is not a big deal. The `.replace` function is only used in `.replace` function, so I think this is fine.
I think this is the right place to add this check.
why not `peerID != nil`?
@pmDependenciesDirectory is the directory which contains RPM database. It is not required for images that do not contain RPM.
This is the main change I am not too familiar with. I would have just used `sac` instead.
Why was this removed?
This is not used in this pull request.
I'm not sure this is correct. It was a test before. I am surprised that it didn't work.
I think it's better to have a constant here, as it will be confused with the other "admin" in the URL
This should be done in the `processInboundClientMsg` method
should we also check for "s2" in this function?
Why do we need to set this to the default setting?
I think we should remove the whole `GetEnvironmentVariable` function and use the new `EnvironmentVariable` function in the new `GetEnvironmentVariable` function.
We can remove this method entirely.
I'm not sure this is the right approach since it will return an error.
nit: can we use `physical` instead of `id`?
Is this change intended?
@jona-sassenhagen @smarterclayton should we also include a link to the `ValidateFunc` and `ValidateFunc`?
This is the only change that will break the old code. I don't think we need this anymore.
Do we have any ideas for generating OCI?
If it's an `int` value, this will be always an `int` value.
I would have done this as a separate PR, but it seems like this should be an implementation detail of the `Stream.empty()` call.
This will break the log level.
I'm wondering if this will be a problem for the newer version of Spack?
I think we can remove this function.
This is a breaking change. I think the `header` message should be `datetime: true` instead.
Should this be `allowNewUpload`?
This should be removed as the string is now handled in `utf-8` but it's now handled in `utf-8`.
I don't think this is needed.
why not ` limit > max_query_limit`?
Why do we need this?
This is a bit of a hack, but I think it would be better if you could add a `default="None"` or something like that, so that the metric name is not clear what you're trying to.
Why do we need to change ` Base`?
This should be reverted.
I think you could remove this line
This import is unused.
I don't think we should do this, it is a bit confusing to have a method that returns a string. Maybe we should have an enum here, or a default.
We should probably have a `const` here.
Could we use `value.encode('utf-8')` here?
Redundant self detected.
This is not a problem, since it is not a code smell.
This is not used anymore, right?
This is the only usage of this file that's not needed.
This is a breaking change.
This is the fix.
` like `it's not clear to me why we need this `href`
I think we should just delete the whole block here. We should be able to delete the whole block if there are no version of the user.
We should have a better way to do this. This way we could use `sys.restart.on.execution.stopped` to get the test.
This should be `Could not save`
Is there no way to get rid of this line?
Should this be a `StringFormat`?
why not use `sizeof(X)`?
This enum should not be removed as it is not being used anymore.
Why did you change this?
This is the same change I mentioned in #4467.
Would it make sense to have a separate PR for this?
Rails/InverseOf: Specify an :inverse_of option.
This is the only change I found in 2.0, so it's not possible to use `string` instead of `"`
Shouldn't this be `_security_button`?
I think we can remove these now
@michaelkuhn should this be `var `?Name`?
I don't think we should add the `as_string()` method to the `unlike` function. It's not clear why we need to do it here. It's not a problem if the `unlike` method is called in a `_ImportFrom`.
This should be fixed, right?
We should add some notes in the future, to avoid having to specify the API for users.
Why is this needed?
Layout/TrailingWhitespace: Trailing whitespace detected.
It seems to me that we only need to expose `dep` here, so we can just use `dep.getState()` directly.
This will need a conflict. We should add a link for the standalone Selenium server to get the standalone Selenium server.
why change this?
Can you use the standard `guard` type?
NIT: should we use a constant for the port here? `grpc`?
This is the only place where we call `to_batch` in `line` is used, but we don't have to call `get` on the first place.
I would use `in_request_to_spark` here
Why is this not `uint32`?
I think we need to keep the original version of the executor service, since it is not part of the executor and it's not part of the executor.
I'm not sure if there's a better solution for this, but I think it would be better if the backend is still backend, then this may not be necessary.
nit: can we rename this to `CreatePlainYAMLManifests`?
Why the change to `final`?
I'd prefer to see a more explicit name for the ConfigOption.
can you please add a `.time()` here as well?
This is a breaking API change. I don't think this is necessary since it is not a public API, and it is not a public API.
Why not just use a const here?
"catch" is the preferred name for this new utility.
what's the purpose for these changes?
It's not clear to me why we need this. We should keep the docstring around.
I don't see any value in this property being used anywhere.
Can you add this to `nnictl package.py` ?
`trustedIssuer` is not a boolean
This is a regression. We need to fix the indentation. It's not clear why we're using it in the first place.
why remove the empty line?
I think we should remove this file.
This seems to be a little confusing to me. Why not just pass it as a local variable?
This is an unintended change, but it is a good place to put this interface in the `common` package. It's not an `common` package.
Can we add an example here that will make it easier to track?
Why is this not needed?
This is a regression I'm not sure.
Thanks for the PR. I hadn't noticed that this was a bit of a hack, but it was a bit of a mistake.
I think it should default to `None` in case it is False.
I think we can just remove the `replaceAll` here, since the `replace` method is now being removed.
Why not keep the constructor as well?
This was the only place I suggested it. It was the only place it was used.
Should we use Math.random() instead of Math.random() ?
This will cause a NPE if `autoJobMgr` is set.
why are we adding these two lines?
Why not `new HostManager(space)`?
router-expose is not a global constant, so this should be a constant.
I would suggest to rename this to `health_check`. It's more clear what the "health_check" means and what the "health_check" means.
Please add a `ILogger` annotation to the `ICoreLogger` class
Why is this being removed?
Use a guard clause instead of wrapping the code inside a conditional expression.
I'm not sure we want to change this test.
why not `cbor`?
I don't think we should have a default implementation for this, but I don't think it makes sense to add a default implementation for this.
@mfojtik @kennknowles Is this a bug fix? I don't see a need to have it here.
Is there a reason for the extra lines of code that uses `int *num_prefixes _IF_X86_64` instead of `uint *rip_rel_pos`?
The message is not clear, why is it not called in this case?
Is this still needed?
I'm a bit confused about why we have to change the API, but the original version is not the same. I think we should have a way to avoid the change to `recyclerAdapter.setLocked` and `recyclerAdapter.setKeepSorted` here, and then use the same API here.
@matt-gardner, I'm not sure if that's correct or not, but I don't think we should change this.
Why is this file being removed?
Should we add a note about the `complete` prefix here?
@dvoytenko @wido Can you please review this change? It looks like it was just a bug.
I'm not sure what this does, is it? I would have expected the currency to be a bit of time.
This is a bit of a nitpick, but I think it's better to have a separate method for `containsKey()` instead of `containsKey()` since it's only used in one place.
Is this a `update` function?
This method is only called in `getActiveFlowHelper`. Can we just use `getFlowsHelper`?
This is not used anymore.
I'm not sure if it's worth it to use `Set<String>`.
We should probably make this a `@deprecated` argument, e.g. `get_screenshot_as_file()`
I think this check could use a different name, like `exports.readyState: 0`
Can we add a note that this will always be a breaking change for anything else?
why is this change needed?
I think this should be a constructor argument. We can use `org.apache.commons.lang3.StringUtils` instead.
I don't think we need this. It is used by the new `<li>` tag, so we can remove it altogether.
Why are we using it here?
I think this is not needed. We should not be using the `getSession` method in `slot`
can we use `logging.Base()` here?
Should this be `src[i] == 0`?
@scheibelp This was the only place where I could see this being used. I don't see the point of this being used. I don't think this is correct, as the value of the string is not a string, so I'd like to keep it as is and change the string to `1` or `1` as is.
I think this is not right. It should be `-1` or `-2`?
Why is this required in this PR?
Please use `json:"ipAddresses,omitempty"`
I think this is not a good example of how we set this to `false` when the `--Report-QUERY` error is returned.
I don't think this should be `tparts[1]`
this is not needed, the problem is that the user will have to write to the log.
Why not just use `errors` here?
I'd prefer to have the list of keys defined at a higher level, not a list of keys.
I'm not sure if it's a good idea to have a log message here. Maybe `skipFlushOnClose` or `skipFlushOnClose`?
I don't think this should be in an int64
@bparees I think this is the correct way of getting the schema from the cache, but I'm not sure how to make this change. I'm not sure how to test this, and if it works, I'm not sure how to test this.
These are the same values as they were before, they should be removed
Is there any specific reason for this?
This change is now useless.
nit: remove empty line
I think this will be a little bit confusing, since `renewBefore` is a certificate durations.
This is the only change that will be relevant for a PR.
I would have made a change to this interface to avoid the new name
should we have two separate test cases for these?
I wonder if we should have an API breaking change to make this interface more explicit. I'm assuming it's an API break, but I'm not sure what the best thing to do is.
nit: Can you make this string a constant?
This will throw an NPE if there is an exception, but the `find_in_chain` function is called inside a `if(FormatIsColor(format) || isExternalFormatConversion)` condition will throw an exception. If there is a case where the `if` check for `isExternalFormatConversion` is `nullptr`. If there is no exception, then it will be `nullptr`
I think this change is not needed any more?
I think we don't have to use `widget` anymore, and `Snackbar` is a preferred name.
This is not used, right?
Why the need for this? It's not a big deal.
It's not obvious from this PR, but this change is not related to this PR, it might be better to check for the local local local local local configuration, and then check for the local configuration, if it is not there.
I don't think we need these columns. I think we need these columns in `add_index :classifications` and `add_index` to be able to override the other `topic_id` and `classifiable_type` fields.
This test is failing because of the `assert` being returned, but the test fails because the test fails the test case.
nit, can't we just add the string to `Accept`?
This is the fix for the bug. The fix should be to use `push` instead of `None` to prevent any unexpected unexpected results from being added.
why remove this?
shouldn't we also change the name of the `v2` to `v1_name`?
The goal is to use `nil` when `nil` is 1 (the first).
This was the only place I suggested this.
I'm not sure if we want to support this?
This doesn't seem to be needed, because the `ComponentComponent` has been called in the `state_STATE` method, and the `state_STATE` method already exists in the `ComponentComponent` method.
What's the difference between `Method` and `a`?
Can this be removed?
I'm not sure if this is the right place to put this check.
I think it would be cleaner to add the `maxSynapsesPerSegment` field to the constructor, and add it here to the constructor.
should this be `echo "id:id` ?
should we add a `TODO` here to make this more readable?
@wido I think we can get rid of this.
Is this the right place for this to be non-null?
This isn't needed anymore, right?
is this change related?
I don't see any tests for this test.
I think we can get rid of this method entirely. It's not clear what it is doing.
This file is not used, right?
I think we can drop the `Url_count` part here.
Is this method used anywhere?
I'm confused by this change, and I think it makes more sense to me to assign a `rails_iod` to a method. What do you think?
I think this should be `m.Runtask.Spec.Task` and `m.Values.BuilderForTemplateObject`
@tgamblin Do we need this here?
The exception handling here is that the exception handling can only be logged if the user has a user in their own. So, we should log the exception.
I'm pretty sure this is going to be the right thing to do here, but I don't see a good reason to use this here. I'm not sure if it's possible to do this in a separate pull request.
Why not do `if (this_column == that_name in this_name in that_name)` instead?
I think this should be `const Widgets = { componenets: Widget }`
nit: should we use `kv_ == nullptr` here?
Why is this needed?
The name of the test file is `<case>` not `<case>`
this should happen in a case where the `if (true)` condition is true.
The only thing that I've noticed here is that `extend` is a `readflow`. I'm not sure if this would cause a problem.
remove this line
Is there a reason to use `numba.core.optimized_tests` here?
I would prefer if this is a separate commit (or at least in the current PR) to make the change in `create-source` to make it clear that this is the one you implemented.
I don't think you mean "name" here
Shouldn't we also keep the `deprecated_fields` here?
We should be careful about the message in the log. Will fix it in a followup.
I think this should also have a `PGFlowLocations`. The codeFlowLocations will never get closed, so the codeFlowLocations should be able to get the stackLocations.
This is the only change required to `err`
I'm not sure this was the right change. The code is still using `pkg/api/pkg/api/types.go` and this is the only place that uses `pkg.ir.pkg.ir.pkg/api/types.go`
Metrics/LineLength: Line is too long. [82/80]
I think this `example_group_block` should be `@Nullable`.
Why is this needed?
What is the purpose of this change?
I don't understand the purpose of this change. The `shm_formats()` function is only for the `new` function.
This is the only change that fixes the bug.
I think this is the correct place to do this.
I think this is a bugfix
Why this is removed?
I think this should be `id.MemberOf(td)`. It's the same as the first error, but the second error should be `id.MemberOf`.
Can we use the mocking cast?
I don't think this is the right way. The test_name_Install and configure Ruby #{ruby_version should be the same as the one below.
I think this should be `FiltersFilters`
It would be better to use a more descriptive name for this than `unicode_escape`.
Shouldn't this also be added for the `local` method, since we are already doing the same for the `local`?
Is the version still needed?
Should we check if `data.GetInitiator()` is not specified in the `historyservice.Start`?
This import is unused.
Why `self.build` and not `self.none`?
I think this is the only one where we set up the new `eIonMobilityUnits`
nit: I think we should use `os.name` instead of `os.path`.
Why are these needed here?
Why is the `finest` being used here instead of `log.finest`?
Why is it `llvm`?
This change should be reverted.
Should this check be done in `query.select(paths[i])`?
Should this be `controller[]`?
Can we make it a global var?
I think it's better to put these config settings under `Resources.sdk.names`.
This function doesn't make sense in the code, but I think this function should be called `setSmallerNonces` instead of `setUp`
This seems like a very odd place to put in a bit. I'd say we could have a bit better.
Should we add `use_true` to this option?
Is this really necessary?
We should add the type hint here to make sure that the `json.dumps` will not be a `List`.
`stemmer` should be `protected`
Can we use a more meaningful name? `ThreadFactory`, `ThreadThread`, `ThreadFactory`, `base`, etc.?
I think we should add some more context here.
I think it's more readable to use `LINQ` here.
You can remove this line if you move the method to the top of the file.
seseseat_set_focus_layer can be same as in other places as well?
nit: I'd prefer if we didn't have to do this, but I'd rather have the `return ...` here.
I think it would be more clear to say 'rescanDeps' or something like that, but I don't think it makes sense for 'rescanDeps' to be used here
This is the only thing that's in the current implementation.
I would add a note to the docstring that this is not used in the code. I would say that the `user_params` should be removed and the search should not be deprecated.
Should this be `container`?
Why is the `groupsTraceFlags` needed?
I think this should be `CONFIG_SYNC_DIRECTORY]`
Why is this a 20? Shouldn't it use 10s?
Please revert this file.
This is a breaking change, but I don't think it's necessary to include the `select` in the `selection_specs` method
Can you add an expectation that `a_number` is `a_number` and `a_number` is the same as `a_number` ? It's not a problem but it's just a suggestion.
nit: remove empty line here
This should be `true` to make the API more clear.
I don't think this #ifdef is necessary.
Shouldn't we use the default value in the constructor?
Why are we not setting the `reorder` here?
This is a little weird to me, but I think it would be better to have a test that does the right thing.
@n3nash : can you confirm this is the right fix for the `/configuration/bucket`, right?
Could we move this to a new line?
I think this should be `else if`
This is the only place where I'm trying to use this code path. I'm not sure if it's worth it to have the `ParameterList` list as well.
Metrics/LineLength: Line is too long. [123/120]
I think you can use `load original_twitter_digits_path = File.expand_path('/lib/twitter_digits.rb', __FILE__)` instead
I think we should add a `dma_h` flag for all new code.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
Nit: This line can be deleted.
What's the purpose of this change?
I would suggest to use `args.isNotEmpty(String, String, args)`. It is a bit confusing to read when there are multiple query types, and the same code is not.
We can probably make this a field in the field.
Why is this necessary?
`getJIT` is not used.
I think this is not needed.
What is this for?
This is an unrelated change, but should be reverted.
I think this can be removed.
This should be `!isUnmount`.
`indices` is a new parameter.
I think this can be combined with the other uses. I think it would be better if you could use the `isinstance` check here.
I think you can drop the `SQL` here
this is a little weird. Why not have a `editor` be defined in the model and then have it be a string?
I think we should move this to `api_controllers.xml`, as it will be called twice.
This is the only change that affects the command line, but not the other commands.
Can you add these to the docs that these are only needed in the UI?
Please annotate `@Nullable`.
This is a bug fix, right? This is a bug in the test.
Just a small change. This should be `Duration_t liveliness_ms * 1e-3 * 0.01`
I don't think this is the right place for this, since we don't have to do it in the code, but it seems to me that we don't have to do it now. I would prefer to have a separate function for this, but I'm not sure if there is a better way to do this.
Why is this not using the environment variable?
nit: this could be `if (pathParam.indexOf(';')== -1) {`
Why not just return crypto.ValidateSignature directly?
I think we should keep the old method as it was before, but I think this is not needed.
`filterExpressions` is not defined in `filterExpressions`, so it is not used in `filterExpressions`.
I think you need to add the `--n` parameter to the description. Otherwise the string should be the default.
Why is it needed to build this?
I'm not sure this was the correct spelling of `Tags.Metrics`...
Shouldn't this be `FastSyncCatchUpHeightDelta`?
I'm curious why this isn't `username` in the `ip` class?
The `proc_num_sim_saved` function can be set in the constructor.
could be simplified to `hash_table_firstkey` and `hash_table_exists` to avoid the `!`
This test is testing the same as the one in `test.js`.
What is the reason of this change?
I'm not sure if this is the right fix. I don't think it's the right fix.
This one is not needed.
This was the only usage that was removed in this function and was not removed.
Can we use `getDefault()` instead of `getDefault()` ?
This is a change in behavior, so we should have a better way to implement this.
@jhipster/developers this will be a breaking change. I think we need to remove it.
I think this method should return the new instance.
Please remove the extra whitespace.
Is this used anywhere?
Nit: We usually don't use `context` for multi-line version.
@brycemcanally do you think we should change this to be 5?
I'm not convinced this is the right fix. Can you clarify?
This is a bit of an overkill, but I don't know why. I'm not sure how to test the original behavior, but it seems to me like it's worth noting that the `List<T extends WebElement>` is not a type of `List<T extends WebElement>`.
I think it's better not to use the key structure in the memory-based keystore, as it's the default. That way we can avoid that, and we can remove the code.
What does "duckv1.SourceSpec" mean here? Is the PullSubscription key still being returned?
I think this is not correct. We need to replace `type->is_set()` with a `type->is_xception()`
Is this a change in behavior that will break existing users of this API?
I'm not sure if this will be an invalid exception. It is a bug in the log level, but the log level may not be the case.
You can just use `options.delete(:text)`. You can also use `build.v2.delete(:text)`.
nit: I would prefer to use list here instead of list.
Can we remove this field from the PR?
I think we can simplify this to `matcher.matches`
This was a typo.
I think we should add `storeSettings` to `getPluginEnabled` as well, since we will always be able to remove `getQuotaEnabled` from the interface.
Shouldn't this be `externalStatus`?
Lint/AmbiguousBlockAssociation: Parenthesize the param [call-zA-zA-Z]
Another way to write a test that checks that the plan returns using a return statement and that's the plan finishes without executing any implicit return value (e.g. when we don't want to leak any implicit return value), but that's a bug.
I don't think this is needed. The `build()` method should be called from the `serviceOnTouchOutside` table.
Can we just use `controllerContext.Span` here instead?
This class does not belong to this PR. It's not really necessary to use the final class.
Is this a change in behavior?
This should be moved to the `LAYER_Load` mutation, not here, since it's a public method.
"not" is a bit confusing since we're just "hesit" here.
I think it is better to say `Task used to track the async flush operation</returns>`.
I think we should remove the second half of `self.obj.modified_jmx` from `self.obj.modified_jmx` and just call `self.obj.modified_jmx`. I think that's the right way to handle the case where `self.obj.modified_jmx` was `True`.
This should not be changed. This is a test case.
This should be changed to `const`
nit: I think this is the only place where we use `default` in this case
Shouldn't this be `Bytes.FromHexString("0xf8c61953f3f94a91aefe611e61dd74fe26aa5c969d9f3f49494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949
remove empty line
I think we should remove `LightGBMCallbackEnv` and just use `LightGBMCallbackEnv` for the environment.
This function can be removed.
I'm not sure if we should be doing the `//` here. It is not the same as the `Image` object.
This is not correct. It should be `scripts=` instead.
Why are you using the name `nameOrHandle`?
This interface is only used in the `IConnection` namespace, so it can be removed.
this is not needed, you can just do `@executable = ''`
should this be called `sendPing` ?
nit: import { its own constant, or use a constant.
nit: I think this is better than `get_global_operations`, since the `get_firewall_rules` is not called in tests.
I think this is not the best way to fix the other `/models/`
Should this line be in a `try/finally` block?
I think we can remove the 3 here and use the default value for rangeToDisplay.
This is a bit of a hack - it's a bit confusing that we don't have to pass theHead function to the `Load()` method and return the `HeadEvents()` function directly, and we can call the function from `Load` and call the function directly. I'm not sure how to call it out here, but I don't know if this is the best way to do it.
@sparrowDom Is this change correct? I'm not sure if this is correct.
Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
I would use the `management.azure.com` constant here, since it's only used for one file.
Why is this needed?
Can you explain why you change this line to `AnyTimes()`?
You should use `os.path.join` here.
Please revert this unnecessary change
This is a breaking change, and should not be here.
is it worth adding a `AWS IAM` param for this?
Do we need to make it private?
This should be reverted.
Please rename to lowerCamel to lowerCamelApiTypeName
Why is the other change needed? The other change below seems to be to not repeat the whole behavior.
This is not needed.
This is the fix, right?
Is it expected?
Maybe we should add some docstring here.
I don't think this is a good idea. We should use the `GET` prefix for this, but I don't see any use of it anywhere.
I think we should also check that `default=False` and `upstream-status-when-all` are equal. This is the case for `prune_on_get_work` but `default=True` is not the right place for this.
@jridgewell Is there a reason why this was changed? I'm not sure it was intentional.
I would prefer to have a test for this, if we need to add the model into the config
Is there a reason for the struct to be configurable?
Please don't change the package name. It's not really obvious what the package is doing. I don't see any usage of this package being used.
I don't think you need to do this, it will just be set when the key is set.
Why is this needed?
Why not just `return !return !isPaused()`?
I would suggest using `Rails#apply` instead of `Rails#apply()`.
`this.beforeHandshake` is always undefined, right?
Can we just add the resync to the logCxt?
This should be in a separate commit.
I think this should be `composite_root_root`.
This seems like a good candidate for a better name. Maybe a better approach would be to move the ID ID into a constant.
I don't see where it is actually considered negative?
Is it possible that `httpserver.RemoteUserCtxKey` is not called by `remoteUser`? If so, could we just have a `requestScheme` function that returns `1` here, and then call it `requestScheme`?
Do you need to do this? It's already set in v2 and v2 to v2.Path
Why is this import necessary?
I don't think this should be a global option, can we just remove it?
I'm not sure about the `updateRecipientExpanderVisibility` call, but this is the `updateRecipientExpanderVisibility` function.
I'm not sure this is the right way to do this, but I don't think it's a good idea to add it to the base class.
This is not needed, we can remove it
Remove empty line?
This is not needed anymore.
I think we should be using `Root` here, as we do for `Root()` and `Roots`.
This should be the only fallback that was created.
Should we check for null here?
Hey @danielmarbach thoughts on renaming `group` to `map[string]`? I'm thinking that it would make more sense for `map[string]` to be `list`.
Please revert the whitespace changes
I'm wondering whether we should be more specific about what this is doing, e.g. `Type ServiceDefinitionDocumentState.ARM` or `Type ServiceDefinitionDocumentState.Individual`?
@jridgewell I think this is the correct fix here. I think it's better to use `-1` instead of `0`.
This class should be renamed `JmxJob` now.
This change seems unrelated to this commit?
I think we need to keep this because it was just being deleted from `TestRuleId` to `TestAnalysisTarget` in the file. I'm not sure if that was the right place to change this, though.
Do we need to do this for every single test, or can it be moved to the `else` clause above to be safe?
This was unused.
I don't think you need the `_` prefix here.
I think we should be more specific here: `EnableDelayedCancellationWithGracePeriod`
Please use goimports for goimports.
Should be `chainID`.
@mfojtik this should not be `node.querySelectorAll(':not(textarea)').length)`, right?
Is there a way to make this configurable? I don't see any related changes here, so I would just remove it for now.
Is this a typo? It looks like the field name is `vStringOrClear`.
I'm not sure we should have this in BuildIDOSEnv as well?
I think it's better to move this to the beginning of the file.
remove empty line
I think this should be done for all the `applyToWindow: () =>` statements, since they're in sync with the `applyToWindow` above.
This should be a `Error` instead of a string.
@saghul is the bug you missed in the PR?
This should be in the static block.
Why change it to `minCurrentVersion`?
Can we move this to the bottom of the if block ? That way we can avoid having a hard-coded list of clients.
Is there any reason to move this import to the top of the file?
This test is failing on the test.
Shouldn't we also add a list of `list` to the list of `list` ?
This is the only change that affects TF providers.
Should this be `unlockContainer`? Or does it not matter?
Why not use the interface interface in the constructor?
Do we still need this variable?
Does this have any side effect? I think we should just remove it
This change was unrelated to the rest of the PR, but it was a bug in the previous PR.
Can you remove this test as well?
why not just `import error` here, the `sr` is not needed.
This is not right. It is a bit confusing to have a test that has the right value.
why not asserting that the error is zero?
I'm not sure if this is a right change, but if we're going to change it to `True` or `False` it will be better to use `is True` instead of `None`, right?
This is not correct. The `VkGeometryNV` is only used by `VkGeometry.py`, not `VkGeometry.py`, not by `VkGeometry.py`. This is a bit of a problem.
I think this import should go before the next commit.
Please use `*` in the test classes.
Please don't remove the import.
This is a breaking change. It is not related to the change.
We should probably use `FormPropsSet` instead of `has`.
Please avoid wildcard imports.
I'm not sure why you use the `base_by` function in this file, but not for this PR
why remove this?
This looks like a leftover from debugging.
This is the only change that fixes it.
Fixed by @lannka ? also, should we rename this class?
Why are we changing the default?
I don't see this referenced anywhere else in this PR, but it's probably better to move it in `slave` class.
Why was this removed?
What about the constant in this function?
This will always be `nil` if fields are fields?
Remove empty line.
What is this change doing?
Is this an unaryInterceptors case for metrics?
This is not a good idea, but why is it necessary to have a shared resource? I'm not a huge fan of having a shared resource being created by `commit`, but it seems that it would be better to use a single method that does the same thing.
nit: I know you didn't write the condition of the `if !validResult.ErrorMessage == nil` but it's not true, but it's probably worth checking if the `ErrorMessage` variable is nil.
I think we should keep the naming consistent and have the names set the same, as the other modules.
What's the reasoning for this change?
you should probably have a `model_argmin` constant in `clmin-clmin`
This seems like a good change to me. The `Set` is a `Set` in `Set.go` and it seems to me that `Set` is not a `nil`, so I think we should just be looking at the `Set` here.
I'm wondering if it would be better to have the logic inside the `if` and then do the `foreach` check inside the `foreach` block, and then check that the `getClassForNamespace` call is not there. I'm not sure if it would be a good idea to do this.
It's not necessary to call this function `--all_args` or even `--all_args` because it's not a boolean.
Please use `static final`.
Let's use `self.has_version()`. It's not clear from the current version of this version.
This change seems unnecessary.
this isn't necessary, we should probably make a `require 'bolt'` tag in `init()`
This is a bug fix?
I would prefer a separate patch here, but it's a bit odd to me.
Shouldn't this also be `itemitemitem`?
I would have renamed the class name, `some author` and `Some copyright`.
I think it would be better to just use the `self.error` here. This will be a breaking change in behavior.
Why remove the extra spaces?
why do we need to set it here? why not just set it in `config` rather than `EnablePrometheusMetrics`?
This test is failing on Linux, not being able to test the success color
We should do this for all the time. This is a change in behavior.
I'm not sure about this. It's not clear why we have this check here.
I think this is not a good idea, but I think we should be using a more specific name.
This is a good idea to add a return value to the `cartWatcherFacade->checkCartModifications`.
Maybe it would be good to have a test that checks this case, and to make sure that it is not always initialized?
This seems to be a bug fix? Shouldn't we just call `sendResponse` in `sendX509SVIDResponse`?
Why is this removed?
this test is failing on CI because it fails on CI, but on CI with a CI feature the test was failing on CI.
I would prefer if this was not `True` but I don't think it's necessary to add it here.
I don't think this is right, but I think we should be using the `debug` function here.
I'm not sure this is a good idea. It seems like we should be using the `MNE-Block` interface here.
Extra empty line detected at block body beginning.
@jona-sassenhagen @jcotela It seems that we are going to need to do this now. Can we do something like `matchWithNoTerms`?
It's a bit unfortunate that we're not storing the `checks` variable at all if we're not doing anything here. I'm not sure we should be changing it here, but I'm not sure we should do it here.
Is it possible to update the `incoming` parameter to be the same as `self.update_policy`?
You need to keep the old one as well.
This is the fix, but the `Consumer` method is now called in `props.selector`.
This is the fix, but the original code was correct. The only way to handle this would be to use `bool isFastSyncTransition = (_blockTree.Head?.Header == _blockTree.Genesis) || !isFastSyncTransition();`
this is a breaking change, but the `--build-environment --build-environment` option was not being used in the code. It is used in `build-environment` and the `--build-environment` folder, so this was the bug I was talking about.
Please remove the copyright underneath the new line
I think you can remove the `record_binary` function entirely.
Can you add a line break before this file please?
Why is the NULL filename required here? I think the NULL filename should be NULL, right?
Should we make this consistent with the other one? (several of the other files?)
The issue I'm not sure about this - I don't think this is necessary. I think the test should be reverted.
shouldn't it be `s.getPeriod(), s.getCronExpression());`?
I don't like this, I don't think this is a good idea. It's a good idea for a user to have to do this for some reason, and it's a good thing to do so, and it's not really a good thing.
This one should probably be `error` to match the `error` below.
@michaelkuhn Do you know why the API change?
This should be removed.
`+` should be passed through through`
Can we make this function private?
I think you need to make this `private` and `private final`
What happens if both `strictPopulate` and `model.schema.base` are `null`?
I don't understand this change. The issue is that this is not correct.
should be `str`
Why not `--allow`?
Do we need this change? Can we use `getFile()` instead?
I don't think you need this. It's a list of files that are not used anywhere else.
Remove empty line?
The only thing this is if the stream is null, which is not the case.
Should this be `public`?
is this change intentional?
This should be a static field
I don't see how these changes are necessary. Are you sure you want to move them?
We need to make sure that this doesn't break the `Attach` callback.
I don't know if we should be using this now. It's probably not a big deal, but it's just a general rule.
why not just remove this?
This should be "yes" instead of "unexpectedAlertBehavior".
This change is not related to the bug fix, but I think it's not a typo.
This is the only change that will be made for the `CuraRunner` class.
I think this is a leftover?
I think this is not needed, it should be `cli-input-yaml`
Why not just pass the exception to the constructor instead of just returning the exception?
This should be `warnings.filterwarnings("ignore", message="numpy.dtype size changed")`
This is an API change, but the API version is not specific to the `Provider` package.
Does this mean we can remove theEncoded altogether?
Is this supposed to be an error?
This is the only thing that's being used is in the `send_Pramed_PPramed_Pramed_Pram_coz` method. It is used for the `send_Pramed_Pram_coz` implementation, which will be used for all the other methods in `send_Pramed_Pram_coz`. I'm not sure if this is the correct place to do this.
This one should not be in the `spack info` folder.
Why is it needed?
forgot to add docstring
This is not the most common pattern that we use in the `ld` model.
Line 191 supports column length, it's no longer necessary to copy this.
We should add a `TODO` here as well.
This looks like a bug in the server, but I'm not a big fan of this.
We should add some debug logs to this log.
`this is a compression of oldParentVNode._children ||picture_OBJ._children`?
Please add a license header here.
I'm not sure if this will work, but I'm not sure if it is worth it.
This class is no longer used.
Let's call this `WebsiteError`
@kingjr @alalazo Is there a way to avoid this?
nit: I would call it "sendCommandForDownloadChromeHeadLess".
This file is not used anymore
Why not use the shorthand since we don't use the `@var` interface here?
we don't have to update this key in the library
@johanste this file is no longer needed
Why did you change the type to `axe._tree[0], nodes[index]]`?
I don't think it is necessary to add the new version to the old cache
This is the wrong place for this. The `IsRootedPath` method will return `true` if the file is `true` (which is the case for this case)
I think it's a good idea to have this in `NewClientClient` now that it's not used in the code.
This is a small thing, but is there a way to avoid the `playbackManager.getCurrentPlayer()` and `playbackManager.getCurrentPlayer()`?
Is this a typo? `zip_code` or `effect_code`?
I think this should be `/`
why is this being added?
`map` is a `log` method.
I think it's better to use `var 2 = SystemInformation.VerticalScrollBarWidth` here, since it will be set in every call site.
This is a change of behavior, and it was just me, but I'm not sure if this was a bug, but I think it's a good idea to have a `attach` function that has the same name.
I think this is not the correct term.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
The `Field` is a bit ambiguous, could you please rename the test to `SignedTransfer` or something?
I don't think we want to use this package for the future. If we're going to make it public then we should add it to the package.
This file is not used.
This is not a big deal, but I think it is better to just have a `item.toJSON()` function in the `Object.keys`
Is it possible to change the lob globals to ExLobGlobals?
I think we should also have this class public in `Platforms/Presenters.cs`.
I think we need to keep this in the `Report` method.
I'm not sure if it is a good idea to change this.
Have you checked that this is not a valid route?
This can be refactored to use the function signature to get the safe navigation operator.
Can we use `self.Environment` here instead?
@mjkkirschner @mjkkirschner I think we need to check that theifications is not a ImportPeptideSearchDlg.CurrentPage in the test suite, right?
I think we should be using `!== null` here.
This seems to be a regression.
What is this? Is there a test that sets this to "default"?
Why is this necessary?
Can we just use a blank blank here, instead of just a blank line?
you can also assert that the tests are failing, so you don't need this
I don't understand the purpose of this change. Why do we need a separate record for this?
This is not needed anymore.
I'm not sure this should be a warning. The `conntrackTimeouts` is not a warning, so I think it's fine to just ignore it.
please use `forEach` instead of `(token) =>`
This doesn't seem to be used in the code.
This is the only change needed here.
shouldn't it be the other way around?
We should add a feature gate to the validation.
We should probably check that this is not a warning, and not a warning.
Why the job is added here?
I don't know why it's the best practice to move this to `lvis_v1_instance.py`?
Use the new Ruby 1.9 hash syntax.
This is not a big deal, but it's a little hard to see. I'd rather not have the name in the `AspnetRouteTemplateResourceNamesEnabled` as the name of the `FeatureFlags` package, but I think that's the case.
This is a very old code and should be in a separate PR.
(style) spaces required around that '=' (ctx:VxV)
Shouldn't it be converted to downstream?
I think we should just make this a function and call it something like `getParentSvg()` instead of a function.
Shouldn't we add the default value in `ervationsMIGRATE`?
Use the new Ruby 1.9 hash syntax.
@mfojtik why do you need to set network_name to the name?
why does this need to be an enum?
you can also do `name.lower()`
This is a bit weird, it's just a test case, not just a test.
This should not be necessary, as it's a public method, as it's a static method.
This should be `*`
Can you please add a space after the `if`?
I think we can remove this line
I think we should be consistent about the other functions in this class, `ListEvents`, `ListEventsResponse`, `ListEventsResponse`, and the `Events` functions in this file should be renamed.
Why are these statics?
I think it is better to have a `binlog` prefix here, and have it be a private field in the MsBuildArgument call
Can you use `is_Repo` instead of `is_tab`?
should we also make this configurable?
This is a bit scary. I'd rather have a `if (shiftAmountInt < 0)` check here.
I'm pretty sure this was just about the `config['run-as']` check, since `run-as` was not being set before.
I think you should remove the `bigquery` from the other goals.
Line is too long. [81/80]
I'm not sure about this one. It's a bad idea. The `_filenamePrefix` should be a `_filenameSuffix`, not the `_filenamePrefix`
It's a little confusing to have this return a C_RED, but it looks like you're calling it in a `std::cout` function?
Is this needed?
This is the only change that will be breaking. I think this is the only change needed for the tests.
this import is unused
why not just `Run`?
This is not the right place for `component.constructor.getDerivedStateFromProps === 'undefined'`.
This is a bit weird, maybe we should have a `Collection` or `Transform`?
Maybe we should just use `EXCLUDE_CMS // TODO-lucas How can we achieve this w/o changing the BftExtraDataCodec base class` to be more accurate?
Align the parameters of a method call if they span more than one line.
I think this can be just `TracerProvider`
This is a change of behaviour, but I don't see where this is used.
Should this be `iframes is not in options`?
Please remove the last 2 lines.
Why was this removed?
I don't understand why this line is needed.
This is a no-op, right?
remove the empty line
i don't think this should be here
I don't think it makes sense for this exception to be thrown. I would rather use the `getInvocation` method in the constructor.
Can't we use `String.format` here?
I don't think this should be in the `return common.HashLength*2` file.
why do we need this change?
Please add `@Deprecated` annotation to this new field.
I think this is not needed since we already have a public interface
why did you change this?
could you help me understand what this means?
Why do we need to make `application.js` public?
I think this could be set by a `replaceNode === null`.
I don't see where it's used?
Can we move this to `BucketPool.count`?
We should add some docs about what this does.
nit: this should go after `Reference`
I think this should be `EnableProcessBlockStats`. It's not a valid value for `EnableAssembleStats`.
why remove this?
This is a good candidate for a panic.
We can't change the name of this feature, but it's not really a big deal.
Why is this needed?
I think you can remove this.
Why is this a list?
Please add `is` before `ColorColorBlue`, and add `ColorColorColorColorBlue` to all of them.
This was the only place where we need to do it now that we're not using it anywhere else. It seems like this should be a separate commit.
Shouldn't this be `asshibited_methods` instead?
This is a no-op, right?
Align the parameters of a method call if they span more than one line.
This should be a try-catch, no?
I don't think this change is necessary
This was a bit confusing to me. If I understand it correctly, this is a `map[string]`. I don't see anything wrong with this, but I think it's worth considering if we're using the `map[string]` to be used in the code, but I'm fine with that.
This is the fix.
We should add `.` on the `.` at the end of the line
`newAccount` should be `null` here, not `newAccount`.
This is a bit of a hack, since `adapter.addAll` is a `List`. I think we should just remove `addAll` altogether.
why do you need to add this to the other PR?
Is there a better way to check this, rather than let the caller pass it?
This is not a valid tags, but the tags in `Object` must be a tags.
Not sure this change is correct, but we should be sure that it is an object-wide list.
I don't see this being used. Can you check?
We should also have a `Debug.Assert(false)` for this, and also have the default `Debug.Assert(false)`.
Why did we remove the receiver parameter from the session?
We should remove the `s3` parameter.
I'm not sure if this is the right fix. The `MAX_NAME` check should probably just be `MAX_NAME` or `MAX_NAME`
I think it should be imported before ` TOKEN_EXP_DEFAULT`.
I think we can remove `typeWidth` from `FieldVector vector`. It's not a typeWidth, but we can just use `Optional` here.
why this change?
Why the use of this?
I don't think you should import the state here
Should we add `OptionalInt` here too, too?
Why change this from `go fmt/v1.go` to `go fmt/v2.go`?
I think this is a good one, but I'm not sure if it's worth adding an extra `||` here
This looks like it was just a mistake?
this should be done in `err = fmt.Errorf("Unknown consensus protocol %s", protocol.ConsensusCurrentVersion)`
I think we should use `args + "run"` here instead of the `%`, since it's an option for the `run` command
Why is this needed?
I think you need a `setUp` here.
This is not used in this PR
This was a bug in the build. We had a number of changes in the build step. I think this is the only place where we need it, so we should be using the `cert-manager` here.
Why did we change this?
`private PreInvocationAuthorizationAdvice preInvocationContextContext.createAuthorityList("ROLE_ANONYMOUS")`
@dvoytenko I'm not sure why this change is necessary. The log entry must be ['all', 'trace', 'warn', 'error', 'fatal', 'off'].includes The level of the log entry must be ['all', 'trace', 'info', 'error', 'fatal', 'off'].includes(string)
Should this be `0.7` instead of `2.2.0`?
This test was failing because the previous `ValueError` was being removed.
Please use the `@param` annotation instead
This is not used anywhere. It can be removed.
Should we set this to `undefined` in `renderers`?
Do we want to use the same name as `bundler reached buffered byte limit`?
why the change here?
Why did you change this? It's not obvious from this PR, but I don't see it being tested anywhere.
This change is not necessary. The point in this file is to change the signature of the method to `combat` in the constructor. The `WARNING` is to change the signature of `combatPtr`.
@wido can you remove this blank line?
why delete this?
This is a breaking change. I think we should be able to just remove it from the constructor and remove it from the constructor and just call it once in the constructor.
I think this is not correct, we should just remove this if statement.
Please add the `TODO(Bailr)` part and add a `TODO(Bailr)` statement on line 124. Also, the method name is misleading as the method is not used.
nit: I think we should have a more specific name. `roles/iam.serviceAccountTokenCreator`
I think this import is unused.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Is it possible that we are not using this imports in a test case?
I would put this in the constructor so it's more clear what the user would expect and what it does.
`stream` can be nullptr if `stream` is empty.
why is this removed?
`layoutCallback` is a bit confusing, maybe `layoutCallback`?
I think we need to check for "*" here. <msg> I'm not a huge fan of using the `if` for this check.
Line is too long. [83/80]
We should probably be consistent here, but I think it should be `static`.
This will need to be a `Put` function, as it is not being used anywhere.
why not `index.fromhex(..., bytes)` ?
I think we should use `modules.info` here. It is a bit confusing to have a message in the message.
This will need a test case as well
I think this is a leftover from the debugging debugging?
Can't remove the listener here since you are not using it in this PR.
this is not a good change. the old version is a little too big.
Line is too long. [87/80]
What is the point of the view? I would use a new driver for the new driver.
I think it would make sense to log this error message (or at least log it). It's not clear why we need to catch the error message here.
Should we just use the env var?
remove empty line?
I think this test is not needed since it's not being used anywhere else in this class.
This looks like the wrong thing to do, can you add it to the commit message?
This is not necessary since `year_version` is `release_build` and `year_version` is `[2]`, right?
Just to confirm, is this change needed?
Why do we need this timeout? I think we don't need the `AttackTimeout` value.
Why remove this?
The condition should be `auto` or `auto_count` because the node doesn't match the other stuff.
I think you can remove `String`
I think this is a good idea, but it might be better to move it to a separate method.
I think we can remove the `DebugLevel` parameter from this function. The `logf` should only be used in the `logf.DebugLevel` case.
nit: remove empty lines
I think we should keep this and make it public.
Should this have the same `Network` prefix?
This should be `this.maxParallelism = null`
Why not use `billing` directly?
I don't think we need this check anymore
This is a bit weird, I think it should be an error.
` overwritting fields` -> ` overwriting fields`
Why are you using a different namespace here?
This should be a `var rev`
Was this a typo?
I think we should not add a new parameter to the function.
Why not just use `nonce`? It is a little confusing to me.
What does this do? When is this class coming from?
remove empty line
I don't think we should change this.
What's the purpose of this change?
Why not use the `kStringPut` for the `Charset` type of `Charset` here?
Can we make this a pointer? I think it would be cleaner to have a `--none` flag for this flag.
Should we log the port here? Or is that the user specified a %s?
I don't think we need to do this.
I don't see why we need this, but I would like to see it in the `super`
I'm pretty sure we're doing this now, but I don't think it makes sense to make it more explicit and just make it a `targ` object.
Can you please add a line of its own to the function in `AuditRPCWithTypesStatus` and `AuditLog` in `rpccontext.AuditRPCWithTypesStatus`? This way it would be consistent with the code base.
Should we add a description about what this file is for?
This is not needed, we can just remove this TODO.
This will fail if `spec.fields() == null`
This is the only change that will be relevant for a build.
this should probably go in `felix.go`
Is this a typo?
Looks like a good change to me, but I don't think it's a good change to change this line.
Do we want to do this at all? I think we can just do it in one finally
I think it is better to move the import to `org.apache.solr.common.params.QueryElevationParams.ELEVATE_DOCS_WITHOUT_MATCHING_Q`
This should be in the `gbs_info` list, not here.
This seems like an unusual change. Why not just make `3.7-3.8` and `3.7-3.8` be a `static` dependency? That way, you can get rid of the `sys` prefix and use `sys.version_info < (3, 9)` in the `if` statement.
I think we need this here. The main place where we use the new `nodeInput` is used.
I think this should be moved to `num_simd_saved_abs`.
This should be `2.2.2.1.dev0` I think.
Line is too long. [86/80]
This is a leftover from the previous PR, but this import is no longer needed.
This is a bit of a hack. I would suggest `if presentationType == ""` and `if presentationType == ""` instead.
Should we rename this function to `output_handler_clang_tidy`? This is the name we're trying to make things more clear.
I would put the version in the `after_update` method, because the method is called in the `before_update`. I think it's a good practice for a reason.
Maybe it is a little strange to name this something more descriptive? `ExternalEntity` or `Pod` or `PodReference`?
I don't understand this change. This should be a different name.
@deads2k this is the line you removed.
@tnozicka this should be a flag. I don't think this should be a flag.
@liggitt I'm not sure about this change, the logic for `--` is not needed here.
This should be a separate PR, not a big deal, but I think it would be better to make it a private method.
Should we use the version format for all these? I think we should be using the version version in `service`
`overwrite` is a list of output output (which is not the case)
I would suggest to use a more meaningful name here, e.g. ` setDefaultSettings`. It's a little more descriptive.
This test is not necessary because `resource_rules_map` is a string that is a string that is `List[str]`
Is the Beam internals of Beam internals that don't have a breakig change?
This is an unrelated bugfix
This should be done in a separate function
I would prefer to have the option to be a constant.
Why is it not possible to have a separate `Wait` struct?
This is a very old code and will be refactored in a future PR.
This class is unused. Please remove it.
This should not be needed, the default End Time is always set to 0.
This is not needed. It's already in the package.
This is a bit odd, why is the path not a path?
Please add `false` to the `if` and remove the `elseif`
I think we should be able to get rid of this TODO.
I think you can move this log to `if (supplierClass.isPresent())`
This should be `self.add_message(..)`
This seems like a bad idea. Is it safe to remove?
Why do we need this?
shouldn't we also add the `AutoUpdate` field to the ` eligibleTemplatesForAutoUpdate` in `componentDataImpl`, to avoid the use of the `AutoUpdate` class?
@pgavlin Do you remember why we need both?
We should be calling the new method `failed_dims`. It is not really used anywhere in this class, and it should be always the same as the default. I would just call the new argument `failed_dims`.
Why is this change needed?
I'm pretty sure this is the correct value here, but I think we can just remove this.
This should be removed.
I don't think we should add the `isinstance` check here since we are already doing the same thing in the `P` model.
Do we really need this?
Use the new Ruby 1.9 hash syntax.
This is the only place where we're using theBenchmark class. I don't think we need the extra private constructor anymore.
nit: `req.getParameter("alwaysOk")` is redundant here
I think it would be better to use `/defaultsecretkey/schedpolicy` instead of `/schedpolicy/{name}"` here
What if the configuration is not random? Should we do that in the database?
I'm not sure if this is a good solution. The previous code was a bit confusing to have a `-` or `appArgs.secure` but I'm not sure it's the best way to handle the case that the button was not a button, but it's not a big deal.
We don't need to pass table table here since it's a new one.
Why not just call `NewStream()`?
I think we need to return a bool if there is an error.
can you add this file in the PR description? it's a bit confusing
you can remove the `getLocale` method altogether, since it is a part of the user's timezone
It's a good idea to keep this around since it's a simple string.
This is a little strange to me, if I am not missing something here, the `id` field should be used to set the value to `None`. If you do, please add `self.gdpr_agreed` to the `login_id` field, otherwise it will be `None`, and then `self.id` should be used to pass the `gdpr_agreed` field to the `id` field.
I think you can just do `t_base = t_base_type::TYPE_STRING` and avoid the `out <<`
I don't understand the logic of this code. The text of the directive should be the same as the text of the text.
This is a bit weird. I would have put this on the `Kind = ByteStringCtorFunc(traceIdBytes, 'Kind', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'I' works works works', but 'i', 'i', 'i', 'I', ' ' 'i', 'i', 'i' may be
Why are we not using slice slice for S3?
Why are these lines removed?
I think this should be `platformMessage`.
@mfojtik this is a bit of an unrelated bugfix, I just noticed this was a bug before. If I understand correctly, this is the case that `--dev-xvda` will be the same as `--dev-xvda`, but I think it should be a bug.
I'm not sure if this is needed.
This is a pretty generic error, but I'm not sure it's the correct behavior.
Is this test name correct? I don't see a reason why it's not just `o.TLSConfig.Certificates`
I'm not sure this is correct. I think it's better to have a `hashToFullRules` that is used in `ReadElement` as a name.
Shouldn't this be `myId`?
`applyRef` is a `!=null`. I'm not sure what the best practice is.
Can you check for error here?
@mikeshultz did you mean to add these to the other files?
nit: I would not call these functions in the `export` method. I think it's a little more readable to have them in the `export`.
@cra0zy - I'm not sure what's going on here, is it ok to just have `load_plugins` public if `nono-plugins` is not available?
Please keep the list as it is.
I think this is a little confusing. What about something like `.. note:: `bootstrap.js` bundle must be loaded after jQuery UI to avoid conflicts.
Is this correct? It should not be removed.
This should be cachedUserInfo.Equal
I'm not sure how to test this, but it seems like the build go1.15 file doesn't exist anymore.
Shouldn't this happen after the check on line 388 above?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
should this be a `def`?
Maybe worth a debug level for this?
`TLS certificate` should be a `TimeDateTime`.
Why is this change necessary?
I don't see where this is used.
I think we should remove this method. We should only do this if the base is not unmounting.
I don't see this in the PR description.
I think this is a public API, and not an internal API
Is this change intentional? It doesn't seem to be related to this PR.
Why did you remove this? It doesn't seem related to this PR, but it's not related to this PR, so maybe a copy of it.
This should be the same as the main package, not the main package.
This will not work. You can call `getCompleteEntryName` with `CustomValidatingEditTextView editText` and call `getCompleteEntryName` in `getCompleteEntry`.
Can we use `TreatmentsPlugin.getPlugin().addToHistoryTreatment()` here, instead of `Treatment`? I'm not sure how the method name is used.
This is the main change. The transporttest.NoDeps is not a test handler. It's an internal transport, so I would just make this an `rpcHandler.EXPECT().Handle(t)` and make the transport return the same thing. The transporttest is already in the `rpcHandler.NoDeps` handler handler, so I'd suggest to use the new transporttest.NewMockHandler
should this be title?
I think this should go in `custom-common`
Line is too long. [81/80]
I would keep the old version number, it's not used anymore.
Is this type annotation needed?
This is a bit confusing, since `go.uber.org/zap` is not in the `go.uber` package
Can we remove this now, and just use the new one for the `version` field?
Is the `toPath()` method still useful?
Please don't change the list. The list is a bit misleading. It's an integer.
I think we need to keep the old `select` here, because we are already passing the `select` in.
Why not just use `assertAnnotations`?
This is a different file for all `jansson_dirent.h` files
Why do we wait for cfn?
Nit: `event` is a little too much for a `stopPropagation`
why not just call it `Type.Header()` or `Type.Header`?
This should be `"""`
Why not just use `settings.KeepTraces` directly?
@daniel-beck do we want to change the default behavior of `kube/kubeedge`?
This change is not needed. The previous version of this test was correct.
Is this change intended to be in this PR?
I don't think this change is needed.
This is the main fix.
This was not doing what it was doing before.
I think this should have an `C2` option, otherwise we'll have the same problem.
Is there any way to make this clearer? I think the previous code would be more useful if you think the API would be `Stack(1)` instead of `Stack(0)`
I think it would be better to return a `Collections.emptyMap()` here and then return `Collections.emptyMap()`.
I don't think this will be necessary. We should probably make a `const` and set it to 0. The code is not correct.
please fix the spelling mistake.
This should be an option.
I think this line can be removed now, since it's now on the test
This is a pretty tricky one... I'm not sure what the best way to do is is to have `scrollView.CenterView` here.
Line is too long. [82/80]
Should this be done in the `try` block?
`create_no_window` is a better name, it is not a public API. It should probably say `create_no_window`
@deads2k i'm not sure if this is the best approach to change. I'm not sure what the best way to fix is is to have a test workload function that returns the default value.
For consistency, should we move this function to the top level function so we can have it in the `func Max()` function?
Do we have a test for the self-dapp?
I don't think this should be a part of the description. It's not a part of the description. It might make sense to have it in a constant somewhere else, but it's not a big deal, though.
I think it would be better to check for `null: false` here and check for `INFO` in the first place.
`bridge.getHost().contains(bridge.getHost())` will always be null. If it's null, then `getServerUrl()` will be null.
maybe we should use the `IoULoss` field here instead of the complex instance?
Is there some reason for removing this?
Is the license header still needed?
This is the only change required to the globber.glob() call. You can just remove the check in `application/bin/bin/constants.go` too.
I don't think we should set the default here, we should set the default in `ec2client`.
This is a bit confusing. Why do we have to add the version to the docstrings here?
can you explain this change ?
Is this file meant to be here?
Metrics/LineLength: Line is too long. [81/80]
This could be an error if `isIgnoreIncrementalAnalysis()` is called
I think it would be good if the `db` above could be removed as well.
This was just wrong, right?
I think we should remove the extra blank line here. We don't need to add it for the other methods.
This can be a little bit confusing. What is the difference between `jQuery.i18n.map[key]` and `jQuery.i18n.map[key]`?
why is this change necessary?
I'm not sure if this belongs in the `torch.jit.annotations` module?
I don't think you want to import the import order here.
This isn't used anywhere.
I would move the `getRef()` call into the try block of the try block.
why is this in the first place?
why is it required? it is not used in the static field
This is the only one I've noticed. I don't think this is correct, but I don't think this is right.
This is the only change I'm not sure what the correct way to fix is, but if you're using the `pod.go` (which I don't think is the correct way to do it) you can check for `pod.go` and use `pod.go` instead.
Why remove this version?
I think it should also be `device_type != std::count("cpu")`.
Why not just do the environment variable?
I think this should be `DEFAULT_DEFAULT_computed_NAME` instead of `DEFAULT_DEFAULT_computed_NAME`
This is a breaking change. I don't think it's necessary.
I think we should keep this around for now.
This is a breaking API change. I would prefer to not have a public property.
Use the new Ruby 1.9 hash syntax.
This is a bit of an unrelated change. Can you please revert it? It is a bit of a merge change.
Is this a typo? `... =` -> `... =`
The utils is used in a few places, so this can be simplified to `clone` and `s.hooks` as well. I'd be in favor of `hooks` as it's a static field.
I think we can remove the whole `matchSelf` parameter from the function since it is used in other places now
can we do this in ` HttpPress` instead ?
This is the main change that should have been removed from the PR.
Why is it removed?
is there a reason we don't want to add the state of the `OpenEBSUpgradeKey` to be `true`?
This is a bit of an unrelated change. I think it would be better if we just return `return apisv1alpha1.PoolType(poolSpec.RaidGroup[0].Type) != apisv1.PoolStriped {`
Why is this test needed?
I think this should be `final`.
The `(char *)` should be on the same line as the `(id *path)`.
I think we can use `Span addEvent` here, as it will be confusing the timestamp is a bit confusing
Maybe we should add a field to the `Outbound` and `CreateOutbound` to the interface.
UseUse Spring Spring interface, not concatenation.
I'm not sure if this is correct. It's not used in the `BaseElement` model, but it's used in the `BaseElement` model. I think we should just have a `BaseElement` field that's already passed in.
This is the wrong thing to do. The `\s` is already in the string string. It's the same as the `\n` on line 165 and the `\n` on line 165.
Why do you need to remove these lines?
I think it's better to use `Map` here, since the connection is already in the system layer.
This is a bit of a nit, but I think it would be good to have a test for that, but I would like to be consistent.
This is a breaking change. The span id is a new instance of the span id, not the span id of the parameter.
"Azurebab" or "Azurebab"?
I think this error message could be misleading. We should be returning a `Set` or `true` to get the `ctx.Done()` error.
I would prefer `app-Number` and `app-integrations-change` to be consistent with the other attributes (i.e. `internal`) and `public`
Why do you need this file? It's not being used.
nit: rename to `ACME DNS01ResolvConfFile`.
I'm not sure we need to do this. If we do this now, we should remove the `!` and `!` altogether.
I think we need to keep this around as well, but I think it is better to have a test function for it
why not use `Join` here?
I think it's better to check for ZONE_PVP instead of the ZONE_PVP.
I'm not sure this is correct, it is a good idea to have a test for this, but if the allocation block was not found it would have failed and the allocation block was not set.
I think you can just use `@Topic` here.
I'm not sure why we need this function.
It looks like the logic is wrong here, and if there are any credentials then I would just remove them from the `mtask` and remove the `execution credentials` and remove the `execution credentials` variable (which would be the same as the one above), and then only keep the logic there.
I think we should move this check to `validateFlowExporterConfig` and make it `ValidateElement`
Should this be `URLTimeout` instead of `URLURL`?
I think you should revert the spacing change.
Should this be done in the `getLifeTimeInQueue` method?
This should be in `MSG(invalid_indices, "Invalid indices")`.
The test is failing on windows windows. I don't see a reason for this, but I think you can remove this.
This is not needed anymore.
This is not the right way to do this, but we should be using a different `UIAElement` for the windowHandle.
This is a debug print.
@liel-sassenhagen this is the fix for the title
This log message needs some sort of log.error on the player.
This is a little hard to read, could we make the `String` optional?
Can you add a `<=` to the docblock here as well?
this should be called `api_quota_configs` or `api_quota_configs` as the name of the config
I don't think you can do this.
I don't think we should change this, but this is a change in behavior.
no need for scapy.consts
Can you please move this to a separate PR?
I don't see any use of `fmt.go` in this file. Can you explain?
This is a bit of a hack, but I think the `Options` is not the right place for this.
why not `httpexceptions`?
I think it would be better to have a test for this, rather than having a `SetMetric` in the `Span` method
This was an error before.
This is the only change that affects us. The `id` is a string and not a `id` by default.
This is a change in the name. It's a bit confusing. What do you think of something that's going to do in the environment variables? I don't think it's a good idea to have it be configurable.
this should be called `Function`.
I think it would be better to use `_get_cb` instead of `_get_cb` for the `global_set_option` method, so you can just use the constant directly.
I don't see where we can't use `int64`?
I don't think you need the variable here.
It's not clear to me what is going on here. What about `.items()`?
We can remove this assertion too.
I think this is the wrong place for this.
this is an API change. You can change it to `models.current()`
why not use `setLastPosition(getPosition())`?
What's the point of this change?
I think this should stay as `index.name()`, since it's the same as `index.name()` (or `index.name()`.
This is a bit weird. I would have used the `.artifacts_dir` here instead of `./`. I think we should just keep the `./` at the beginning of the method.
Is there any reason to make a copy of `SetWorkloads`?
do we want this in v2?
I think we should be more explicit about this, e.g. `DIITE_TED_KEY_FILE`
The reason for adding this was to `os.path.join(u"lib", buildVersion.version,u...` was because it was a directory that is not present in `appDir`.
Shouldn't this have a struct?
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
We should not have this stuff in the `app/views/main/java` package.
I think this is not correct, since `invoke` is already defined in the `invoke` method, so it is probably better to remove it entirely and just remove `invoke` altogether.
This file is still in the root right?
I'm not sure this should be here. The profile profile is updated in the database, not in the database, so it should probably be `update`.
The error message is not that helpful.
Use safe navigation (&.) instead of checking if an object exists before calling the method.
@mmaxim this was the bug I made.
This is not the same as `uti.Derived`
nit: I think you should be able to use the constant `previous != null && previous.equals(fstLoadMode.name())`
I think we should be consistent with the other constants in the docs.
This is not correct. We have a `java.time.Period` as well.
Why do we need this?
It would be nice to add this to `char ToUpper` and `char c` in this method, to make the code more clear that the code is being used.
Why is this needed?
Can we have a test for this?
this should not be necessary.
I think it's safe to remove this because it will always be the same as the one in `params`
Is this the right way to do this?
Why is this a global? I don't see any `QueryQueryRunner` being used anywhere.
Could we add a `#cursorState` field to the commandOptions as well?
This is the main change. The new behavior here is that the `NextArg()` function is called from a `NextBlock`, not the `NextBlock`. I'm not sure if this change makes sense. The new behavior was to have a `NextBlock`, and then we should not be able to call `NextBlock`. The `Next` function is called from the `Next`.
Isn't this supposed to be the `:ictl lines/08-0202/` ?
Why is this one public?
Why removing this line?
I think this can also go away in the `POD_FAILED()` method.
I'm not sure if this is correct. I don't think we should do this, but if we are going to do a role in a node node, we will have a role on a node node, so the check will be redundant.
This is not needed.
Can we revert this whitespace change?
nit: I think this method should have `contains` on the method, so we should not call `contains` on the method.
The other change looks good but I think we should change the `bundlePath` to `path.Join`
Why is this change needed? I think it would be good to have a `string` cast on top of the file.
@c3do @wachterjohannes Is this the correct behaviour for the `<=` ?
I don't think you need the interface here.
Is there a reason for this change?
This is a bit of an unrelated change, but could you please add it as a separate commit? It would be nice to have the same problem with the rest of this PR.
please remove this logging (line 576)
Use a guard clause instead of wrapping the code inside a conditional expression.
Can you use the `mustTagCount` helper here?
Shouldn't we use the `repo` here?
@danrot @wachterjohannes I'm not sure why you removed this. I would have made it more readable. I would have made it more readable and also add it to the `template` method.
This should be a warning. The user should be able to set the `error` key in the `false` block.
This is not needed anymore.
Should this be called `*docker.Container` instead of `*docker.Container`?
I don't think this file is used.
Hmmm, this is the bug. I'm not sure what the right answer here is. I'm not sure if we should change it. I'm not sure what the right answer is.
nit: I would prefer to have this as an extra `return 'Fee is more than ' + Transaction.FEE_SECURITY_MARGIN + ' times the suggested amount';`
I think we should change these fields to be `apityConfig` and then we can have a default value. We could add a default value in `Ports`.
why is this being changed?
I'm not sure if this is a good idea, but I'm not sure what the right thing to do here is, since we're using the tr class in the system property.
I think this is a bugfix, we can move this to the other `rand.Seed` loop
Can we have a constant for this?
