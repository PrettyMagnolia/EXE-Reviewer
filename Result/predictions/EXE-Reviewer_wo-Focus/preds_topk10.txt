Hm, this is an API break?
Please use `array()`, this is the default value
Is this necessary?
I'm not sure if I care about this. We should just remove the `isNaN` check now.
I believe we should use `isNavigateURL()` here as well
I think you can remove `const Mat` here.
I believe the naming here is a bit misleading, I think, `email` and `:: [email]` are the only valid API, and the data name is `email`, not `.email`?
nit: this should be `snprintf(sysfs_path, sizeof(sysfs_path),`
Is it OK to remove `parseTheseTheseTheseThese messages?
How can this go on a service object?
you can call `setParameter('text', keys.join(''))` instead
The reason to use is to have this only on buildConfig.GetPath() instead of directly on buildConfig.GetSharedMountValue.
I think you can just remove `freezeColumn()` and `render()` here.
I would move this check to the `analyzeDataOtherSampler` method (in `[ConditionalThe]`) to avoid having to add it here.
the `err` should be removed, it's a constant in `strconv.Info`
Why is this line removed?
Why did we drop the max-age?
This will be fixed in master.
Should we also update the `setNumVal` method in `EXECUTION_STOPPED` to accept a `setNum to wait for all platforms. I'm just trying to understand the purpose.
Nice one :( This is a good thing to do, as this is a separate commit.
Should we use task runner here?
nit: remove extra lines after `url`
What's the reason for moving it to a method?
I'd prefer to use a constant somewhere to indicate it is not null.
Why not `null` as default?
Why are we not using this option everywhere we use?
Can we assert that TOKEN_OPEN_PAREN returns true and always return false?
Should this be `# noqa['CONFIG_PATH'] = os.path.join(options.CA_DIR, 'config.yaml')`?
Rails/OutputSafety: Tagging a string as html safe may be a security risk.
The logic of this line does not make sense. This is a change from #203, which is a good candidate for a separate issue. We should probably fix this in a separate PR to avoid a fix for this.
It might make sense to move this class to a proper `LibraryPagePresentationAttribute` namespace.
Do we need a backfill here? I believe `result.stdout` is redundant here (and in `result.exit_code`)
Should this return a file?
I think we need to remove the param entirely.
This is a change in behaviour that was never working.
We're trying to have this check in `createTopic()` as well?
Why do we need to use an external `MAX_id` here?
This is the fix. The test now runs on `RemoveAll()` and `RemoveError()` both in a `TestCase` directory which is now called `defer func()`.
Do we need the `@param` tag here?
nit: should this be called `Span.IsTag(Tags.Version)`?
I think `Args` can be removed now because we don't use the default value, so we could remove `Args:` from the doc string.
`C` is not used anymore.
This is probably not needed
I think the name of the variable is misleading since the `to_s` name is already in the `info` method.
I'm not sure this is the right fix. This can be simplified, since it was previously used in the `getCartOfCurrentCustomer()`.
I'd suggest changing this to `VALIDATORS` and remove all the other ones.
Please do not use wildcard imports. You can do it with star imports.
this should be changed to DAOS_MAX_SIZE_IN_STATUS_STATUS_STATUS_STATUS_STATUS_STATUS_STATUS_STATUS_STATUS_STATUS_STATUS_STATUS_STATUS, otherwise it will be a few minutes to check if it is not null.
Can we use temp services here?
This is the only change needed here?
why is this just a helper in CustomSettings? I think we can remove the internal structure
Maybe we should call this `Load` for consistency?
this is a temporary temporary change - can we have more context?
I am not sure if it is worth adding an extra check here. If it's not required for the `onDeath` function, it will be handled internally by `executeDeath`
Is this log level correct?
We should not need this assert as it's done outside of the `assert` interface, since it is a `get Promise(...)` method.
This is going to fail because `QueueTarget` only takes a non-nil string, even if the target is `nil`.
The message should be more descriptive: "StreamSocket"
`AUDIO` is not supported in IE11.
I think it would be nice to just keep the `RootViewModel` here, since the `RootViewModel` is no longer available on Windows - and this may cause a problem for another issue.
This was a mistake, but I was wondering if this change belongs in the previous commit?
Maybe it should be better to return `Collections.emptyList()`
Should it be `serviceNodeId`?
You could return os.function(dir, err) here, if err == true, then return err.
Style/PercentLiteralDelimiters: %w-literals should be delimited by ( and ).
The final result is already `XRB`, so I think I'll add a final field to the `wallet_balance_label` param in this file.
I'd prefer to remove these in `make check` because it's only needed for `confconf` (we use `confconf` for `confconf` and `confconf`) to make sure they are always identical.
Why not just use the `/pk` API to specify the value of `/`?
this should be changed to 0.12 * h_rate[3]/domain->xxxprd;
I guess this may be a good idea, but this is just a cleanup of other PR, so I'd suggest removing this method entirely (and making the method a separate class to make `JenkinsRule` pass).
This should probably be `(float, open with all settings settings)`.
There is an `assert(sibling->parent == subsurface->parent);` above.
I was wondering whether this should be an `@webized` or `@webized`
Can we remove this bit more?
(style) trailing whitespace
oh yikes --- I'm curious what's going on here. Is there a reason why you didn't just have one `last_name` and `raise` for the same thing?
`win_id` is a little too late because it is already a `Page`
Why don't you throw here?
Hmm, why do we want to log something here?
I think it should be `Interface` instead of `RESTRICT`
Is there a reason for the `batch->state_trans` to be 0 instead of 0? It seems to me it would be simpler to just have `json_array_size` just to return 0.
This doesn't compile - it will replace variables with a command parameter, which will replace variables with a custom command command.
`objects` still needs to be passed into the param?
Why do we have to handle the old data?
why not move this to the manifest as well?
I'd really like <msg> why don't we want to do the re-create the logger when we set this?
rm empty line
I don't know if this is the best way to go.
Why is this a non-placeholder condition? Shouldn't we use the `Services` variable here?
Why this name change? What's the meaning of `# Internal container` in the container?
I'm wondering what the goal was to add ` 18oplinError` and `client-s3` here.
What's the purpose of this line?
If we don't want to expose `cmd` to `cmd` here, I think we should remove it completely.
Seems like these changes should be reverted.
why this change? doesn't look like it's just a bug
`bulkCstorSPCUpgrade(cmd, args)` should be in the default value
I'm confused about the code paths in `wlr_xdg_surface_send_close()`
Should be replaced with the same level as LR is for L207 and L209, and L209 (and L209).
What about `WIN10()`?
Do we need to use `Pair<ExecutionReference, ExecutableFlow>` ?
Why is this condition removed?
We should use `getComposedParent` for this.
I think `deprecation.authenticationType` is not needed here. The purpose is to remove the `HBoxBoxLayout` class from the constructor.
this looks like something we should add in the constructor, I'm not sure what this is exactly
Why do you add this? I don't see any changes in this file.
Can we use a container that is more than just a container?
Trailing whitespace detected.
I'm wondering why this has to be changed to `RequestId requestId`?
@jridgewell @jridgewell any idea why the array should be here?
The `path_buf` above is the correct way for this to use a different variable. So, the `path_buf[MAXIMUM_PATH] = readlink(path_buf;`
This import can be removed.
Although I'm not sure this is the right fix - I wonder, should be something like `@var \Shopsys\FrameworkBundle\Model\Product\Parameter\Parameter)` and then you should be able to use the `null` version at all, like `@var \Shopsys\FrameworkBundle\Model\Product\Parameter\Parameter|null` ?
Shouldn't `ulation/spack/llnl.util/llnl.util/llnl.util`, be added to the `Create` library.
What is this? Does the credential file still exist?
Why is the api api being added twice? It seems to me the same here as the `docker-volumes` option is using the same `.root` field?
These usages are no longer necessary
Can this be `data = ...`?
I don't see how this is supposed to work.
We need to make sure that these are always in a `get_side` function so that this doesn't get called for every element.
Why is this deleted?
`Status.NOT_FOUND` could be removed as well. (Thinking about `Melting cheese` here and below.)
The `!parse_atom_labels` will be removed after this if statement below.
You can just call the `kubeletObjectName.kubernetes.io/name` and use `app.kubernetes.io/part-of` here.
What's the purpose of this change? I don't understand why we don't need to do any of the old implementation.
Should this be the same level as the Dotexproject directory?
It's not obvious that this is used anywhere in the test file.
Please use a boolean flag for `clearMiner`.
nit: `1-100` -> `2-` (also above).
We don't need to specify the value for the Prometheus type here anymore, right?
This should be `toString()`.
I don't think we need context here. We should make sure that we get the context from the client.
Why was this not checked?
I think this should happen in a more direct way to avoid the need for the codeGenVersion. If the user wants to have an additional exception it should be a no-op for the current version.
This is a breaking change, because we are not testing the response. You're doing a copy of the body in the request to the request.
Can we get rid of it if possible to remove it? It seems like we only do the diff if we don't want it to be used in `Until`, so it should just be handled as a `@deprecated`.
This should be error if there's one error
Nit: remove new line
Can you move this to `tryToLinkAgain`?
I am wondering if this should really be a `tags` property rather than an `tags` (or should we also support `tags`)?
This should be a print statement, not an error.
could we log this message in `_connection_closed.py` and add it at the top of the file (or just ignore it)
The `field` is never used.
why not just use a constant? you're not calling h2o_iovec_t, but also coma_separator
I assume these are for debugging?
Isn't it simpler if we have a `PaymentVersion` as an argument and we always call the class `ConsumerInfo` ?
I am not sure this can work. I don't know if it makes any difference but I don't know if this will work with some perf improvement (I think so).
This should be a constructor parameter to SetParentProvider, right?
This seems too specific and needs an idea.
Use the new Ruby 1.9 hash syntax.
Unneeded whitespace change to separate lines
Just wondering, do the first query query have the string set of commands set to false?
It would be cleaner to move this check below `FPGA_DISCRETE_DEVICEID`
The fact that this method is only called from a single place, I guess it is worth adding some of these to the same method that you've changed in this PR.
The first line of this file should be wrapped with a line break.
This will need `!` since it's not an object
I wonder why this is necessary? I don't see it being used anywhere.
Can you add a method for `systemAPI` and `systemKeys`?
I think `Fatal` should be cached here, since we have a `Error()` method that returns a boolean.
what is the difference between `convolve` and `diff`?
This test will fail on windows
1. why does this return error? 2. The "message" part is not the right error message, so it should be "message"
For consistency with other arguments, should we call it "msg_id" or something like that?
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
You should be able to use `_filteredStream.CopyToAsync(_socketInputStream)` and avoid the direct call to `with` on every block loop.
You may want this to use the `_get_states()` method (it would be a bit better in the `_get_states()` method) - so I don't think this is necessary.
Just for my own understanding, what's the difference between `E` and `E`?
What are the cases where this pull is null? I don't see a reason why a user would have expected pulls with it...
Please include include in the madness of the header as well.
Nit: Can we use the CLI arg everywhere? It's confusing to have both `alertQueryUrl` and `alertQueryUrl` in the same file.
This is now dead code now.
I think you can just test the output with `toBe(2);` and remove `toBe(2)` altogether.
is there any reason to keep `agentID` in `agentlessID`?
plz remove the "rails_helper" prefix as it doesn't match the code anymore
Shouldn't these error log be logged?
What is going on here? Why is this moved from the old one?
I think this will need to be changed to `github.com/multiformats/go-multiaddr` too (as the other internal imports are added for the other imports).
This is probably not necessary, the package version should be `jet-rest==1.7.3`
We should avoid wildcard imports in this file
Metrics/LineLength: Line is too long. [123/120]
This function is never used and it's used in the changelog
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think the changes in this file are the actual changes in this PR.
I think we could make this a local variable to be more explicit and use it in all instances of the same file. <msg> I see the same is done when the `getClass().getSimpleFile()` and then calling `getSimpleFile()` with all the methods for each item, but I think we'll need to introduce it in the future.
nit: remove extra new lines
I think I missed this. It's too much and we don't know that there is an "if (found == "this") return false;
I would use "getPreference" instead of "string" to make it clear that this is the only thing that is passing in the method.
How does this interact with other applications?
It might be worth checking that the command is in the command line and not the command line (thrift_files_dir and and all all the tests in it)
Is there a reason to make this boolean boolean a `IsHydrating`?
Why was this removed?
These two are the only ones that need to be updated?
do we really need this? We could just have one association association and one association association
The actual error is thrown. I think that we should test that the headers and the headers are not validated by default.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
It's not necessary for this file, you're calling it without updating this constructor.
I think that you should just remove the `r.Seek` call since it was added already before
Nit: this is a bit strange. Why do we need to make it the only one type of the test? I would expect it to be only `v2` or `v22` but I feel it's not clear that we don't need to name `v2` by default.
I think this should be "OVERRIDE". There are more places below where you are adding an entry with `azkaban.plugin.load.override.props` but you should use `super().S` in all the other files.
Is it possible to return an error here, and just return a mock error?
This should be user/trafodion.
please use `Path.Combine` for the path as well
I would keep it in alphabetical order, if possible, and I think it's more readable
I think we don't need the ',' here.
If I'm reading my previous question, I'd expect `hf` to be a `str(0, "unknown *KEYWORD: %s", arg[ioffset]);` to be `None` (the "unknown"), but this would not affect the rest of the code, as it could be used to pass the `sprintf(str, properly "unknown *KEYWORD: %s", arg[ioffset]);` if you have `sprintf(str,128,"unknown *KEYWORD: %s", arg[ioffset]);` for `c.c`.
This should be `n := mitigate().FastForwardBackoff()` so we don't have to pass `EXPECT().accountBackoff()` everywhere.
why not use ARM_32
It's fine to leave this as it is, but i'll let it be for now.
Do we really need to change the order here?
I'm not sure that this is correct. I think it is a "nil" error.
@aparajit-pratap Is there a better place in using 'DefaultTextMapPropagator'?
This line is redundant with the other changes in this file.
Why `class`? Wouldn't it make more sense to have a `.` at the top of the file?
@jenachoi change the `Public-store` setting here, I believe we can't do any validation on this, right?
I think this might be a breaking change, because the `urlbox` has `listbox` (with a `listbox`) and that would be what the `listbox` means for the `listbox` (which I guess is what the `listbox` was, and the `listbox` was missing.
This is a no-op if I have no other way of getting rid of `HBASE_DELETE_COSTING` from an external object. I would prefer that way to avoid the warning and return from `HbaseDelete` to `HbaseDelete` in both cases.
This is a little confusing, since `DestPorts` is used for `ProtoUDP` and `DestPorts` but not for `SSL`
`toString` could be placed into `callbackContext.error`
Is this safe?
this can be removed as it is now handled in the "if" block.
Why remove the error?
Unnecessary empty line
this is wrong as `labels <= 0` should never be zero. We can change the default value here
Why not use the `.class.getBaseDir().getRestRest()` function in the constructor?
this should be removed
Just curious... what was the reason for passing the entire email to `/session` as a string?
I think this line should also be removed as Dimensioned imports in Dimension.
Why change this?
Now that we have now been using the same "std::size_t" type, would be better to have it be an instance variable, and have a variable with a constant for it.
Do not leave this TODO. You can also get rid of it.
This import should be grouped with the other packages that aren't being used.
`this.` is the same as `final`.
I'm pretty sure this works, but maybe it's probably good to go for another PR?
I don't think that this line is necessary. It seems like this test is not using the previous version of the tests.
Isn't this supposed to be `-env`?
Why are we using Array here? I see it's a global, so we don't need to change it in this PR.
I think this would be more specific, if someone is going to update the mentioned mentioned earlier that they are not doing anything.
why remove it?
Why this change. There is some unused imports in this file that will be removed when you need it.
remove unused imports
This function is now unused, right?
I didn't see this in the original commit, just realized there's no longer a `img className`
no wildcard imports?
The standard library includes includes a label so it's not needed.
Why not use the standard standard library names?
Should it be `const std::string &engineType`?
I'm not sure about using an array of names like this (and in the case of an Optional). Shouldn't we just change the default value of `string` to `value` ?
We should probably be using `createFromData` here
This doesn't look correct. We only do a temp temp if ch is not a base64. You should check for `isIgnoredChar` to handle `isIgnoredChar`, which is never called.
can you make it mocking this argument as `In outgoing` to avoid ambiguity
Should not be part of the API, but it should be in alphabetical order
I think this is a good candidate for the function signature to set the model directly and pass the swap to the other function that is called from the parameter.
What is the difference between this method and the following line?
This is a good place to add a note that we should not support paths in this.
I'm not sure why you are using `contains` here...
This variable should not be set on this field. This is used in order to prevent a different thread pool setting.
Instead of creating new `table_exists` and `test_client_requests`, can we do that in a separate PR?
Please use `pay_free` for consistency across the codebase.
Can you remove spaces from these strings as they are not used in this file?
@mfojtik why not combine these two params?
Do you think we should make this the default value for every device?
It seems to me it would be better to change the doc of this `if`.
I don't think we should expose these for the server configurations.
do we need the `FORSETI_V1_RULE_FILES` flag? can't it be a list?
Maybe add a `checkArgument` function and then get it with a `fromfromArgument` method?
the "root" directory is not a directory but got" => is that intentional, not sure if it's the right file to go away
the `current_page?` condition should be inside the `if` if it's not `nil`, so maybe move this up to the `current_page?` if there's some other side effect.
shouldn't `rescue LoadError` also be included in the `expand_path` file?
`rt.valueOf` returns null if the length of the length of the body is the same. So we can use `invert` instead of `invert` if it returns null, or not.
This line should be removed as well
why not just do `String()` on the previous line?
Is it possible to have a new ProtocolContext method in a new protocol context ? In the current implementation of the protocol context, it should be in a new protocol context.
@sureshanaparti could we have a JIRA ticket to see if this change is correct?
I think you can remove all these `default: :rob`.
this was failing tests because of this. This is not the right test.
The `_autogenerated` is for the same reason as the cache name (in `_autogenerated`). Is this a bug?
Is this still relevant?
This change will cause the new `slider_pos` to be 0, right?
This is not a good thing to run in this commit. We try to keep things as-is in the past.
Metrics/CyclomaticComplexity: Cyclomatic complexity for TestZh/TestCase is too high. [7/6]<br>Metrics/PerceivedComplexity: Perceived complexity for TestZh/TestCase is too high. [6/7]
This line can be combined with the `if resp.StatusCode == 404 {... else {... }` above.
I do not think it makes sense to add this dependency to the `pyarrow` folder
What if we called `psalter` now?
This change is not related to the PR.
Why remove the unit test?
do we need this extra call? Seems like the number of bytes tracked by multiple blocks is unlimited?
I'm curious why this change is needed.
I think you can just pass the format directly to `BlueCloth.new(resources).to_html.html_safe`
Prefer single-quoted strings when you don't need string interpolation or special symbols.
nit: could you remove these too? I assume they are not related to the rest of the PR but it seems that if we are going to make code easier to read when to remove them.
wasHiveString_ should be called from a non-nullable function, so you can remove the setter entirely.
We need to make it explicit that this line has to go to the `*`.
This is a very specific import I guess
this is the wrong place for this case
Typo, should be `tealLogicSigSize`, or `tealLogicSigSize`
This was removed because it was not being called before.
@rhymes this is where the change is actually relevant. I just wanted to ask me why we had a test to verify this. But I still have a better solution for the fix.
We need to be careful with this to ensure that all config time are passed, but we need to make sure that the pipeline still pass.
I think a better validation would be `if iss.Email != nil {...}`
nit: you can use `network::NetworkUtils::mockMetaServer` directly, as you do with `3000::NetworkUtils::getAvailablePort`.
Line is too long. [86/80]
This is a pretty big message, I think.
nit: `bytes == null` would be better.
This should probably be `if (found != nil)` to prevent errors in this case.
Nit: This change looks good. The only difference is that the `GetAwaiter().GetResult()` call was removed in #3772, but was never happening. The `GetAsync()` call was already removed here because `GetAwaiter()` call does the same thing, but the `GetAwaiter` call was made in #10775.
Use a guard clause instead of wrapping the code inside a conditional expression.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is not related to the PR but I'm just wondering if we should make sure there are no changes in this file, and instead we will be able to make sure that the status is not in the junit validation and be handled by the client.
Why do you need this change?
There's no need to pass in this method? (and the following calls `throws` and `protected` calls in this class)
please remove these two ` forceRDKit`s
This check is not needed.
I am pretty sure this will be the correct one. I'm curious if this will be the right choice.
I don't think this is correct. `ok` is the first error, and the `required` is a `nil`.
Can you explain this change? Is it being used in this PR?
This is not a correct change; we should fix a test in this case as well.
Can you just add the `Name` parameter in the event type, too?
Can you change this to a try..except instead of throwing errors?
I'm not sure if this is right, we should log this at `status.go` as well. Maybe we should log this somewhere.
This is the main code. I think it should be `tc TraceContext`?
you're not adding new parameter here - you can pass the blacklist into the `Container` call
Metrics/LineLength: Line is too long. [83/80]
Maybe we should also check the input of the lambda here and just assert it's going to be an empty string?
This doesn't look correct to me. You should be able to handle it at a 64-bit level and just use `util.fill_unsigned` instead.
Should be in `api/lib/ecs/`.
It doesn't really matter, but is this something we can do to ensure the 38 is not a `Resource`?
The problem with this is that this will fail for `MeasurementItem`, which can be omitted from other threads. It is `DynamoModel`, but I think `DynamoModel` should be removed from the `DynamoModel` class as well.
This is not a good solution. We should add this in the code.
Can you add a log HealthChecks flag here so we don't need to log HealthChecks?
This is the only change I'm not sure about. If `source.stop()` is `None`, it would be more consistent to call `send` in a `await` method (and the one in the test file is not running) that it does not work in the test. It's just the implementation of `source.stop()` (which is what it does, but is used in the `await` method).
@chirimoya This does not look super elegant as a class variable or a class method, but I'd like to understand how this works. What would be your thoughts of `itInterface`, and would have been `itInterface` for `searchInterface`?
Can't we just use the new stage here? This is not really necessary.
This is the wrong place where we create the `StreamSource` instance instance for each call.
I think we should move `plugins` to `plugins_init` to save the plugins, otherwise it won't compile.
Can't this be a `defer` statement?
This is a pretty big change, because it would be good to keep track of what the validator does. We're going to have to make sure we're not doing anything useful in the future, but I'm wondering if that's a great solution to this.
why not use the new version of the url?
This file should not be imported at any point.
I'm pretty sure this was added in the first place. I'm fine with it, but maybe we should do it in a separate commit?
why is this not `_CleanFpInfoAttr_`?
Shouldn't this be a function call?
I think we should keep the param passed along the controller
I noticed this is a bug. This should have gotten in a different fix. We don't need to do that if the code is still in the code.
We can now make it private now.
@cra0zy do we want to allow for the `null` case here as well? I think that would be better to have a `null` field that isn't in place.
This change seems unrelated?
Why not just use `consensus config.ConsensusProtocols` in consensus settings?
This will not work. I think we need the "reproduce" code. The other option is to have the new option to be in the new style.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
`HELLO` can be used here.
Can you change this to ` THREAD_SYNCH_SUSPEND_FAILURE_IGNORE`?
please add `--mac-signing_identifier > \*` as well.
The `klog.V(4, container.Name)` should be `""` to match the other places in here.
This is a bit confusing for the non-interacting PR. Why are you converting the file and not the file directly?
This is wrong - if we don't support a osrm-datastore I'd say we can keep the regions found in a separate thread for osrm-datastore. This is the reason we don't need the osrm-channel variable anymore.
Can we remove this?
I think this function should have a $form parameter
Can we remove the ` maxProduct` class here?
This change is causing the build failure.
Is it possible for this to be `public`?
I am not sure why you'd want to add this as an inline message, and just use `__( 'Source:', 'google-site-kit' )` to the other hand, and it would be more clear if `comouch` is the best way to fix this, I have to double check the reason to change it to `comouch` or even better
We should probably add a note that `GetCancelledZeroTask` has `CancellationToken` being passed in to the `#if` condition.
I'm not sure this is a good idea. The `VK_NULL_HANDLE` is used by `_shared_auth` which is used by the client.
is it possible that you are re-implementing `wallet` for `std::chrono::steady_clock::now ()` to pass `null` to `wallet`? This may cause some problems with other `wallet`s that are indeed re-implementing and the other `const`s.
This should probably be `_data` since there is a short name that's what we do in other ways.
Better to move this logic into `ExecuteContractRead` and make this `SimulateExecution`.
Should we check here as well that the volume data is the same as the host.
This class contains the `ThreadSafe` attribute.
@johanste NULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULULUL
do we need both?
We can add this to `rename` as well.
Can you just call this `QUILT_USE_TQDM` ?
This seems like it could be an out-of-order string like the "publickey" and then, but we're now going to have to do `expect(parser.parse_args(args)).to be === {:hosts_file=>SO("....")] = { ... }`
this is not needed, the `prefixPropertyMetaModel` already checks if `unaryExprMetaModel.prefixPropertyMetaModel` is true, so it will not be true.
Why was this test left out in the first place, or is it just me?
Why not use `super().declare(strict_types = 1);` ?
Maybe we should rename it to ` Request` for clarity?
Is it possible to get the wrong charset from the response instead?
Is there a reason for changing this to use the `CStorPool` variable here?
Can you change the field name to `GenerateGenerate`?
This is the main thing that was there for testing. I think we should do it as a `defer handler.Close()` before and after `logHandler.Close()` so that we don't have `logHandler` here.
Can we revert this for now since we no longer support `table` anymore.
remove empty line
Nit: I think we should keep this around (and keep the original code for the latter) - as we have it now, instead of having the flag as a parameter. If we can't make this change I'd rather use `string{"osconfig_not_supported": "true"` rather than a `string{"no_supported": "true"` since the flag can be the same as the `_LogFrom` option (and so the `_LogFrom` option could just be defined as the default)
Is this really required for the server? I thought it was a bug.
Can you move it to `err = stderr`?
this might be a breaking change, please rebase with my patch
This should be a part of the fix, not the original PR but it's worth adding a log line to the right?
Please use `input.id` instead of `id` (or whatever it is).
Is there a case where bytes_read is empty here? If not, can we get a more reliable error message?
I think the `getConfigurationFromYaml` call here needs to be added to the `getConfigurationFromYaml` method (which may be what the `buildSettings()` calls are and why it is done.
This is a private function (re) that was moved to a private function.
Do we want this to be a breaking change? It may not matter, but I wonder if we should keep `fileSchema` and just pass it to `CollectionUtils` and keep it the same?
Metrics/CyclomaticComplexity: Cyclomatic complexity for evolve is too high. [7/6]<br>Metrics/PerceivedComplexity: Perceived complexity for evolve is too high. [6/7]
this doesn't seem necessary
This should not happen. `ShortRun` is a primitive.
This was the only usage of the `start_error_message`. I'm not sure it was a typo.
Would `createUpdateHook` also get a `repo` object?
do we need to also print this error? if we don't do this we can ignore it
Can you add it to the `setup_setting` below? We have a test that stress testing the default behavior in `lib/unit/config.yml`
There is no need to call `release_history` here.
@bparees this is the only change that affects the current node, I don't think it's actually the case anymore, so I think this is a good change to make it a bit easier to understand for the future
this method is not used anywhere -- it is just a template
How about `scene=annotations`?
This is the default timeout that is not set.
Is it possible to remove the line length checks? I'm not sure this will be a problem. It's not a problem, just curious why the whole section doesn't have a default value of `false`
remove empty line?
This is a breaking change. I think it's better to use a context context.getClass() instead?
This is just a case where 0 was nil.
I would suggest you add a license header here, and add a new interface here, to make sure the node has been stored in another interface.
Why the need for switching to cvr?
This is not needed, please remove.
Nit: sort alphabetically
I think this is a change in behavior. This is the only change you will need to change in the stack.
nit: `appendToFile` isn't a big difference for this one - it's just a single space. It's not a big deal, but it's a little confusing to do the same as the rest of the file, and makes the code easier to read.
Hm, this is the way I read this in a few places and I'm still seeing it up.
Doesn't this need `computedNumOfActivePartiions_(- -1)`?
I think this should be `QProcessEnvironment, QUrl, new_zone_cmd`
Nit: We usually don't do that at all, so we don't have to make these functions public. We don't need them in the past.
I'm not sure how to do this. It's a good idea to add this check to the `DisableHttpGit`, and then check for the error message in `util/constants.go`. It should be possible to do something like: `proxy/constants.DisableHttpGit` In case of an invalid message to avoid the change. In case of an invalid message, I think that would be more readable than `proxy/constants.DisableHttpGit`
@danrot @cvializ can you confirm, why does this test fail before?
Isn't this supposed to be an empty string?
This change is fine, but I don't think it is correct
Does it make sense to also skip the ip in the array of append() in the array?
This should be fine as well, no?
@mhoemmen this was the bug I was looking at the spec.
Is this method still used anywhere?
This is not right. In which case, the first line of this line is not the first line of this function.
I'm not sure if we really want to do `DeleteAll()` here, but I don't think we can do it in the future.
We don't want to keep these diffs on the API. We can't coexist with ToAddresses. If you want to change this to `ToAddresses v1beta1.GroupMemberPodSet` to make `ToAddressesSet` a property to use `cluster.New` instead of a `Set` property.
I'm not sure why we need it here, is it?
Is there a reason you moved these out of the `if`?
This file is now unused, right?
I'm not sure if this will work, but is it worth moving the method to a shared location in the doc/collections?
Should this be `isHydrating` rather than `isHydrating`?
This is not necessary. It's just to create a new object and only used once. This can be done in another PR if you don't mind, but it would be nice if you could move this line outside of a function.
@mfojtik I would have thought about this as well? I don't see the context in the code that you're not expecting here.
is this necessary?
The problem seems to be that the user has already made a "main" name, but it doesn't need the "main" name, so this is a bit unusual.
Tiny nit: I'd prefer a single space before the `\` here.
I believe this is a bit of an overkill, but we should be sure that we always have to open the image in this image.
This is the change that affects TF project (which I didn't want to do with this PR, and I'm not sure if it is necessary or not, but the test should be `nil` and `false`).
is this change intentional?
I'm guessing this is the first sentence?
Should this be `hasTop` instead of `cell`?
This is not a valid fix but we should not have any unit tests for it to be able to use the internal class
this option will be available only if user who uses it to generate an experiment
This will always be available for every element that will be available (as `file_with_index` is the default).
I don't like this name. `saleor.graphql/core/Env.py`. It's a little confusing for people in some cases. Maybe `__call__` or `__call__`?
this is a breaking change?
`only one credential type may be specified per profile, source profile, until until sso", or sso", or sso", or sso", or sso", or sso", or sso", or sso", otherwise LGTM.
nit: would it be cleaner to use `!=` rather than `>` for new line ?
Please remove all of the changes to the `color` model. We only need to change the type of `use_float32` to `full_type` and update the docstrings for consistency. You should also update the docstring below.
Not sure what we really do here, but should I keep the import init?
inconsistent indentation here, please, `>=`
@deads2k @sjapanicsolisson @QilongTang @smarterclayton can you verify this change?
Shouldn't it be inlined as part of PreparerNeeded?
Why not put it into `pkg/keypair/fsm`?
What's the purpose of adding it here?
`java.util.gitea.executable.deletedelete` (the old code will also be added in this file)
@kennknowles Isn't there a way to do this without `boosting_type`?
why you removed that line?
I think this line should be indented one line.
should be relative import.
I think it would be more consistent if that was a global setting and it doesn't matter for us to use it in `ValidateCertificate`.
Should this also be `<` rather `>`?
I think we should update this doc.
You could set this to `~azure.jpgc-Path` here.
Why was this added?
It doesn't look like you'll need to change this line to `allowallow` on `pubsub.Subscription`.
Why wouldn't `slaves.get(0).jetty.stop();` work?
You could also write a test to ensure that the mcontext->xflags is not a zero-cause, so no need to use the `sahf` property in the array
Can we change the name to `pullRequestTitle`?
Not sure about this one.
I don't think this is the right change in this PR.
nit: HIP, HIP, HIP, HIP, HIP, HIP, HIP, HIP, etc.
I think it is better to do this check in `webkitGetAsEntryApi` and not have it all over the place. For now it's a global `./ENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENENEN
why is this removed?
shouldn't it be `require.EqualError(t, error, error, "errors.wantErr.Error())`
What about `that.name`?
I think we don't need a null check, since we are not using the volatile field, as it will always be a protected field in the constructor
Can we rename this to something more meaningful? `RegistryFailedEvent` is confusing.
I think it would be better to have a single `ASSIGNERS` as the `ASSIGN` module.
`FakeFS.activate!` is not needed.
should we check `stats.to_json` ?
@michalStrehovsky - can you double check that the old code works?
This is a little bit disturbing, but I think this should be an `public static final interface`.
I think we should also add it to `user.rb` in `/base/v1alpha1.12` since there are no references to `/base.rb` in the `concurrent` list.
Align the parameters of a method call if they span more than one line.
nit - why the license header?
can this be a `java.lang.StringUtils.MAX_VALUE`
I'm not familiar with the code in these two lines - can you move this to one of the other files and move the `executionpb` declaration below this one with the `go.temporal.io`? If it was the only usage it would be nice for the code to go. It will be nice to avoid a `executionpb` and not have to be part of the PR for now.
I see a few options options options but the arguments are not being used, so I think it is better if you can make the API more readable
It would make sense to move the `user.and()` check below the `res` below to the `IPGConfig` case, rather than having it in an `FPGA_NOT_SUPPORTED`. (I am a bit confused why we need to change the `res` parameter to something more clearly indicate that the `THONTHONSUP` is the only place it is being used.)
remove this line
This doesn't look correct, as it will break any existing commands for the new commands that aren't supported.
Nit: Can you add a method to showRecordTelemetry that takes a method of TTarget>.Invoke that takes a parameter? That way you can get the source code from the source code.
Do you need to change this to `class visibility_of_any_elements_located(object)`?
This seems to be unused?
I'm curious about this. Doesn't seem like it should be handled anywhere?
this is wrong. The previous code was breaking the original code.
The original version should be changed, right?
We're doing this on one line, so I don't think we should change this. I would be able to get rid of the `boolean` check. I guess that we could add an `boolean` to this method to the `map[string][]string` on the `map[string][]string` to ensure it isn't actually the right thing to do with the `boolean` check.
This is not a valid enum, but I think the `Never` is not used
The condition should be: `if (row.treeNode.state.length > 0 ) {`
Maybe add `@since` annotation?
The `CommandedCALCALCALF` here isn't necessary since we use the `replace(/` that is the only way of getting all the '\\"'.
Can we just make the `GetRawUrl()` public and `HttpUrl` public?
Hmm, what about checking if the store is not nil?
This seems to be a little out-of-place on the `dockerfile` path... can we just do it on the `dockerfile` path and do a check on the `dockerfile` path? That would simplify things if the `dockerfile` and `dockerfile` are already passed in.
@tanantw I've looked at this and I'm not actually sure why you moved this line back. We don't need to change it here. You could just delete the your `# Copyright (c)` line altogether, and you can't remove it. The first ` 2022` below should be removed.
`nameof(self)` is a bit misleading since this is a debug level and will be fine.
why is there a particular reason for switching it to lower?
Will this not work for every file in a file file that will fail on build?
I think you should pass the original info to the user instead of hardcoding the default state and using the default state. The default behavior will be to change to `ConsensusCurrentVersion` instead of hardcoding the default.
The location oracle check was here for `true`, so the location oracle check for `true` was not working.
this is weird, why is this necessary?
Metrics/LineLength: Line is too long. [122/120]
missing '.' at end of line.
you should probably have an output from the `setup.BalanceAppRow` to check the output.
Remove this debug line?
I'm not sure this is the right fix since we're now removing the imageRampup list, not the same as above.
What's the reason for adding the `else` block?
I don't think the ternary is correct?
Doesn't this test fail with the `_` prefix?
It would be nice if this was named "unsafe" in the UI, and then the `cstr` string was "bour" in the `cstr`.
What's this? Why do we need this?
It looks like you're using the `Mypy` here, which should be the default to `""`.
I think we should set it to false in the end of the struct. We can add it to the end.
this could go to a separate method, like `unless there's more than one phase` or `unless there's more than one`
I would put these in alphabetical order, since the line breaks the imports in the codebase, and the line below this is not so clear.
Could you please update the doc string to mention the addon that it's installed or not?
@mikeshultz did you intend to change this class to `sizeof(new MvxWindowsCommonAccelerometer, "Windows"`?
This is a good change, I'd have to change the default behavior here as it would break the `languageHandler.getLanguage()` function.
Not required, but it's not necessary here.
This should be in a separate PR.
Do we still need the `--min-gas-price` annotation here, or is just a warning that we can't be setting up?
Trailing whitespace detected.
We should also print the errors from the `ddev list` to `local` here.
Use the new Ruby 1.9 hash syntax.
Please don't use std lib.com, like `go at import scope`
I don't think we need the `ss` variable anymore, since they are used below below.
How about ` consolidate`?
Should be able to remove this `if` statement and just `//`
If I understand correctly the problem with this is that it does not work, but the name `MakePublicS3SessionForDownload` is also the name "only-config" so the name `k3.MakePublicS3SessionForDownload`. I would expect the name `k3.MakePublicS2_Download` to be a `k3.MakePublicS3SessionForDownload`.
We should do this in the docstring, not in this PR, right?
Since this `LOG.finest` is used to handle an error handler, the `debug` should not be available.
The name of this method looks super awkward. What's the thinking behind something like `Cancel-index.Mutex`?
"Root from blob" sounds rather misleading, since it's an error.
I'd be happier if this didnt catch the `CreatePayments` call and not use that function in the `CreatePaymentsParams` function?
Can we change this to be the default in the `load()`? If so, we can use `load(file(...))`
You should add the `continue` parameter here. You don't have to do it for the `continue`.
For the sake of consistency, I would put these constants in the constants constants and set them to an empty struct instead, so that the constant value should be used and only used once.
I'm not sure this is the right way to do this, it is actually used by the `client`-key` flag. I don't have to know what the behavior is about, it seems like a good idea to move this outside of the `if` statement.
This is a little confusing with `XM_server.h` which is a very old version, it is not a problem because it's only ever set in a single block. Could you elaborate on why this is necessary?
This is the only change in a different file... I am not sure what the right answer is is here.
This is the cause of this test.
Align the parameters of a method call if they span more than one line.
Wow this is a case where `pc` would be a better home (e.g., `Certificate`) but it wouldn't have failed with `./`?
This is a change I am trying to figure out what the intention was, but the function name should be `block_a` and `UNw` should be `""`.
This method needs to be renamed. It will be called for all instances of that method.
This line is not the right fix since this test is testing the error.
This is an example of how the category queries are used in the category queries, whereas before, this would be the right place for the `name` and the `name =`
I think we could also just call `DeploymentCondition` here.
This should be `v.length === 12 || v.length === 24`. The same is for `v.length === 12`.
Looks like a typo here, should be `.getVoteAfterBlock()`.
The equals check is probably not needed, because we are not testing what we are doing in the test.
Is it the `could not create registry` caller that is already in the `ctx`?
This is only a single doc, so we need a doc for this.
Just a small fix for `s/unit/s_streamer`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is not a valid solution for the bug, I would just use an static `blkToMint`.
This is probably a mistake, since the tests pass now on the `AsyncOption` class.
This is the only way to do this is adding the static final static final static static static const in the static classes so that it can be removed entirely from this module.
Could you remove this in the docstring?
Nit: this looks like something we can merge in one PR to reduce the size of the PR.
Please add more information in the future. I would like to have them both in sync and in the future, like `BlockSyncChanSize`, but this is the only value that would be used for the current default number of supported supported values.
I'm not sure about this one. If `plan.first` already exists, then there will be an error if `get_plan_info` is not present. This is a bug but I'm not 100% sure we need to change it.
Can we call this `to_create`? I don't see any `to_PIN` used anywhere
We can use `@CommandLine.Option` here
Is there no way to do this without setting this on an older machine?
Should we revert the `self` prefix here?
This is where the new Field is running in the previous version, so we should change all the specs of this same Field to true (which should be the one in the first place).
This is a bit of a hack, but I guess this is a bit of a hack...
Why are you removing these types?
This is not needed.
I'm not sure if this is the right approach. This should be `lonely.Choose.`
It seems that this is not used and is causing the tests to fail.
I think `loadTrim()` is supposed to be called here?
Can you explain the use of `iptables output='%s` in the log message?
@Analanorozco I wonder why `save` and not `save`? (same goes for `ReString` below.)
This is the one for all actions. This was the only thing I don't like.
`@return`/`@return`/`return` on top
This should be log to debug, right?
`exception` is a list, this is the same as `item: ...` but we can make sure we don't get an error message (because the user can see it in the error message).
Hmm, so, this doesn't change what you wanted. But I'm not sure if it's the best part to change.
@becker33 should we start using `storageTarget` in this context, instead of `storageTarget`?
you can get rid of this line and use securitycenter directly
This was just for testing, but I don't see anything useful with this.
why not just not use the `hasProps` API?
Why are these constants needed?
It's not necessary to store this in `__init__` since `checkpoint` is deprecated.
@nmittler - How was this changed to `letsChangeValueOf`? Seems like it would be better to make these methods private and have it use them.
Is this related to this PR? I'm assuming it's needed to have `seelog.renderLocalIPAddress` in the function that creates a task to be used in this function?
Why not move this one line up?
Can you put this at the top of the file? It looks like `version_year` is `None`.
Could you explain why this is required? If it's the preferred way to use the `java.nio.nio.TupleTuple` it would be better to just use the actual `io.nio.TupleTuple` and not use this variable.
Should probably add a `dependent: destroy` here as well.
I don't know that is the best idea.
This test is no longer relevant as the draining option was created on the test.
We have a few uses of this in a `try...except` block. This could be done as a separate PR, but would be good to move it into the `return` for readability.
This is just a nit - I just thought this was a bug. The previous code had a look at the "log" of this method, so it looks like you're just doing this with an alias. If you're going to use the "log" text there, you can use `raw.evaluate_string` instead. Also, this was the bug that should be changed to use `llnl.util.type:1` which is a bit simpler.
Just curious: what does the error return here do exactly?
I don't think these changes make sense in Python. I'd just inline it.
i dont think it makes sense to have this list as a list
why are these not used?
Do we really need this for all commands that have this logging? I think it'd be better to just have `index._root_index` here as well, since this is not used in `_directories_hide_show_model()` already.
this doesn't look correct, right?
What's going on here? Why is this being changed?
Should this method be called as a `withAttributeIds` ?
This is also an optimization, we should be able to just check if the type is not NULL (we already have `isglob`).
remove empty line
@jimisa I'm not sure why the `o.appName` is set to nil if there's any other `Job` command. Does it not work?
Why is this one line not needed?
Use a guard clause instead of wrapping the code inside a conditional expression.
Should this be removed?
Why is this not `c.config.Namespaces.AlertmanagerConfigAllowList.AllowList`?
I don't think we really need the `return` here...
I'm not too sure how to deal with these variables.
This is the one place where we need a new enum value for this field. I just left it as a new type, so we should not add a new field.
It feels like there should be a service for this, but the buildRequired should never be nil.
Is this still needed?
I think we could even have a test case for this, if `Perl_croak` is defined here and then just use `Perl_croak` for the given pointer. Otherwise, the `x` value should be passed in as an argument to `uint32` or `uint32` can be used. This would allow us to define the `Perl_croak` as a parameter which means it can only be set for the `uint32` value.
Do you still need the `long gasLimit`?
This is not a global setting in AMatrix... It seems like we should be checking if the `send_WifiBroadcastReceiver()` is in the AMatrix in case some other code fails.
In general, this should probably go into `argparse.py` as well.
Should we return an error instead?
should include the header here as well
I am still thinking the value of `combat` should be used here. In general, you should not use the value of the value, because `combat` is not used for the default value.
This should use `c.Get().Unmarshal(policy)` instead. Also, why do we need to create a new one in the context of this function ? If the function returns an attribute, then the policy could be a string.
`link_to edit_subscription_path` now does not match the base class name. `content_tag` is not a string, so `#a` should be a property of `/`.
I think you can skip the `modeman.leave` check
I'm not sure about this one. The `EMAIL_RECIPIENTS` should have a corresponding `EMAIL_RECIPI_S` option. The `RecipientInterceptor` should also have a `str` of the `str` and `EMAIL_RECIPI_S` objects.
Should we be doing this after ` "/"` ?
I think `!string.IsNullOrEmpty(xForwardedFor))` may be safer, because the condition will still be true when `xForwardedFor.Headers["X-Forwarded-For"]`, which is not what we want here.
Is this change supposed to handle the case where the full full name is different from the current default one?
I think we need to handle the case that return null. Is it possible to set the value of the inflater as the last param?
Why is this added?
Why not move this line up to the next line?
@kalefranckc for a deprecation cycle (and I can't think of anything that affects us) should be in federated.
We have a `fieldsFromJWTSVID` function already, so there's no reason you didn't use `fieldsFromJWTS_VID`
Why the check for `FamilyOrAssembly`?
Do we have a discussion around this, or is this not needed anymore?
why did you change the original name?
why not using `<%_one :subject_block` ?
Is this what you want? I think that `Regressor` is only used in tests.
you could use a default_None=True here.
@smarterclayton should you confirm that the rolebindings has a different value? I'm not sure how this works with non-user objects in the DB.
Wow! Won't this break the build?
Please rename to `Platformitecture.cs`
I don't think you need the extra leading space at all.
What is the reasoning behind this change?
I would rename this to `getClass().getClass().getClass().getClass().localTransaction`
I am not sure if we want to support these changes here. But if we have a test for it, we should probably add it in the PR, so that users will think that `BaseElement` is a required value for this.
Shouldn't we check `objPath` still?
<!--new_thread; commit:a1fe9a5e7c8f0ad8e3a4f7; resolved:0--> Can you make this use of `__init__` instead?
I'm not sure about this one, it's worth adding a note to the docs that this is the case, not the case anymore.
Can we use setView here instead of setOpts to nil?
I'd rather say "is un-official events to another object of their choosing" (I'm not sure if this is the case, but this might lead to unusable). If you do this, you can drop the `not doPreGainFocus()` altogether since the `obj` is no longer required.
Missing the gogs line
why change this?
Is there a specific reason for adding this?
You should use `Console.WriteLine` in case someone else calls this method
Should be `volatile`
Can this be made private?
need to remove it
Metrics/LineLength: Line is too long. [90/80]
I think the check is unnecessary here.
Should we start using `Authorization` to generate a string for this option? If not, can we just pass in the CLI?
There's a new constant that can be removed in #ifdef (` (`flatbuffers::DetachedBuffer CreateFlatBufferTest`) that is not used in this file.
>so we can be sure to get the actual date and time based upon UTC and not the client date.
Can't we just use `constexpr size_t`?
The other `ws_listener` call in this commit should be indented one level.
These two should probably be `sign_in-for-for-admin` (which is the most reliable way to handle it)
why is this needed? do we need the "noOp" variable?
I think this is not dead code
This doesn't seem to be necessary. We have a number of times with footer height in the `else` and footer height in `renderContainers`, so I don't think we should set it here for all the other stuff.
This is a better import, please.
It's not necessary to change this?
Why do we need this line?
i don't think this will break things if we are worried about a package being processed. we may remove this and use a `discovery_v3` for each new `secret_v3` package instead, or maybe use `v2` instead.
Is `isFunction` check required here?
I thought we already had an explicit "client" and not "client" permission, but I'm still trying to guess that it is something we want to avoid.
@rhatdan @rcebulko this is the fix for #5763
This condition is the same as the `err` check in `svr.getTransactionFromActionInfo`
Should this be `is_valid_commonname`?
you can use only one variable to make things more readable.
Why `getTransactionLocation` is not returning `Optional`?
Can we make the same change for this `else` case? I would think that it would be better to use `required(String value)` and avoid the need to check whether this is needed or not.
This is a change in behavior to make it clear that `1664 <Unn")` is used in `os-free-malloc`, and the code here is in `malloc` and the code should still go in `malloc()`.
I wonder if it would make sense to have a test for that. It would be more consistent to have the returned data from the controller rather than having it on the controller as well.
nit: should use `get` or `taskname` for consistency with other methods.
is there any way to get rid of this?
no need for this to be nested, you can remove it from the parent class.
This is a copy paste from the PR that wasn't working...
I think we should probably return the expected behavior instead of calling `n == 0` before returning.
I am not entirely sure if this variable should be used?
Is this needed if a siteStories already has the `*`
`RETURNVALUE_NOTPOSSIBLE` is not supported in this case. `getLocalBinaryMessage()` is a better name.
Why not `settings. permitted?` or `settings.getName`?
Let's not add these.
Can we make this the default? I think it's more readable to pass in `config.Message` rather than `self.config.fee_per_kb()`
Shouldn't the taskType also be renamed to `ActivityTaskTimeout`?
Why is there a use case when there is an empty string?
For consistency, should we rename this to something like 100 to avoid duplicating these?
Why was this added? Is this the only place where we need to set the upgradeVersion?
Can you add the `defaults()` call to the `getBoxHelperProperties` method instead?
I think the latter `toUpperCamel()` should be on the next line
These routes are not in the same PR. Should we move to the `/unit/unit` section for the other services?
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
"the user has listened to by the users in the last week" -> "theChannel cannot be by the users"
Layout/MultilineMethodCallIndentation: Use 2 (not 1) spaces for indenting an expression spanning multiple lines.
this is not used anywhere else, should not be removed
`x: true` isn't needed.
@stevegsa @kalefranckc thanks for this PR. I would prefer to not remove the assert and assert the default.
Wouldn't it be better to make this `cleanSha`?
I think this needs a different name, `noDuplicates` should be `-1`
Can we remove this line as well?
`res.isWorkflow()` is used in test cases, so we need to do that.
can you move to `order`
nit: I'd prefer it if you didn't add the API to the API and keep the original implementation in the `the desired DOM structure`.
nit: the usages of `using` are the same, so the using statement should go before the `using`
This method doesn't have to be called by `long`.
Should the type be `protected`? I think that would be more correct for `Type | 'Type'`
Can it be `css!components/listview/listview` ?
@erwinmombay what do we need to do?
which version numbers will be non-zero, what do you think ?
Why is this being removed?
I'd say `StateRequestConfig` here - in case we expect it to be an interface to expose it. This is the only place where we use it where we use `StateRequestConfig`.
@adamsitnik @mheon, you should probably add the `.Logger` check to the validation in place of the function.
this is not needed in this file
I think this should not happen, but it is not the case that `content` has been in place to parse the content and throw a `content.Preconditions`.
@Scottmitch do we need to do `felix == ' !8s'` here?
I'm not sure if it is better to use `in` on the type, it seems like there's nothing wrong with it.
Is this include needed?
@jona-sassenhagen it looks like the `.update()` is not needed, it can be dropped too.
We should only do this if we return early.
Why not `tolibkb` ?
Why do we need this assertion?
Could we add some logic here? I see that this is not used and should be removed.
This change is not necessary.
This will cause us to remove the controller from a previous PR.
Lets use `self.unix_socket` here so that we don't need to run this argument when we run `run` on build.
The `type` is not always defined.
`!parentRole || isListRole))` not `listRole`, do you want to change `toLowerCase()` below to accept a `!parentRole || isListRole`?
Import order of imports (see the rest of the imports in `pkg/deploy`)
You don't need this anymore
I think it's preferable to import xrange (I know it was not in use).
The Type type was a bit confusing to people who have a type that is an instance of a type in the TypeVariable. What is this change doing?
This is going to compile even if the number of values are a number.
I'd like to see a test where this is not needed, but I think a small refactor is fine
Is there a reason it was changed to "\n"?
Please include this include.
Should we call this `ShuffleStrOption` instead?
What's the difference between `target` and `nil`?
should we check this in `MetricsProcessors` or do we need to check that? I don't see the reason for this check.
I don't think we'll be changing this, you should change the Copyright 2015-2017 to ` OpenZipkin Authors`.
This change breaks backwards compatibility. You should probably also update the test.
You can use `self.discriminator_key + self.discriminator_key` to filter the value from `nil` by itself.
Why the parentheses are needed ?
I'm not sure this is the correct name. What is the benefit of this? The `AppInStage` is a `AppInStage`?
@stephentoub why is it necessary to set a default value for oldDom and read here instead of just removing it?
Maybe add a TODO here to make sure we don't end up writing `context.Background()` and then do a few seconds (I know it's not on master but it's not obvious about this one).
Probably should use the new cookie name as well
This should be `msgInboundDispatcherNotRunning` and `msgInboundDispatcherNotRunning` (which is a bit unusual, not a YARPC, not an existing existing flow).
Can use `Optional[NotNullWhen(true)]`.
@tnozicka do we want this to be `config-path`? Or is that not the only place we need it is in place?
@mikeshultz did you find this condition to check `name: true`?
What about a `private Exception Exception` here?
I'm not sure this is the best solution. The sub type of type is `-1`, `-1`, `-1`.
nit: can remove extra new line
This is a bit confusing, we don't want to change a variable here and pass `reason != REASON_CHANGE` directly to the `STATE_TABLECELL` list.
Please change the description to be a little bit more explicit, `useSelect( ' whoever a content is how fast your home page that is installed in the description.
(question) are we doing this now? We can get rid of the `respMsg` variable now since we're now using the `respMsg` key directly.
We probably want to check that the stuff after creating the atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast atleast
This is a better name I'd rename, it is not necessary? I would expect `get_host_path` used elsewhere.
`toPath()` is never `null` because it doesn't return `false`. It is not possible to call `equals()`, but it is more consistent with the rest of the code.
This is unrelated, but it will cause flake8 to fail. We should add a check in the `params` to ensure that the user has the same effect.
Whilst this was the only one that was not yet defined.
This is an anti-pattern. Do we have example for the same case as `src[]`?
This seems to actually have been added to a change in behavior, right?
This is a very specific API change, I would think it would be more consistent to have a default value (i.e. it could be handled by `user_frontiers`).
`require` is unused now.
I wonder if it's worth renaming the parameter and update the docstring to reflect this, since it's not a real `_tab` property. It would be better to keep the original `_DOM_server_tab` in one place.
I guess it was removed because of the intention?
How is this include needed?
Is there a reason we can't just use `IAutomaticTracer` here?
I think this is not correct. The `<b>` tag should be used to set a `html` in `setHtml` and use the `<b>{}` in `setHtml` instead. The `<b>` works correctly as well.
should this be named "Ok"? Also, why not have "split_CREDENTIAL" defined in this file?
I think we don't need the `reject` call here, because the `try` block can only be triggered if the caller can call `this.s.promiseLibrary.reject`
@DaanHoogland you don't want this here since you are not using H2O_ASYNC_NOTIFY_USING_EVENTFD.
Where is this used?
Do we need to add the message here?
I'm not sure we want to do this, but it makes sense to move these lines to before `hbasescan_tdb->setAsyncOperations(TRUE);`
I would suggest moving all the logic out of the "patch command successful" to a common folder so that users know it won't be able to use that.
@jcotela is it possible to move these magic strings into constants?
Line is too long. [98/80]
You should not need to do this, it should just be `javax.events.BackEvent`.
Why not move this to debug?
This is a bit weird, it should have already set `self.state_before_fullscreen` in `window`
@Googleoloff I'm not sure if this is a good idea to introduce this annotation in the context, but I am just not sure if we should do this.
I think we need an explicit "ACT:%" to get this in more detail
Why do we need `SecretTargetLogDriver` here?
The commit message is still incorrect.
This is used as a `Yoobar`.
Why is this not `static`?
I think we should use `\r\Request\Request` instead of `\r\n\Request` here and in other places.
Use .empty() instead of .struct_def.
We should only do a `time.AfterFunc(10*time.Millisecond);` in the `time.AfterFunc` file when we run `fbm.blocksToDeleteWaitGroup` and `max` when `max` is `""`
Why are we introduces downstream? Is it okay to just remove it?
What is the `initTime` and `Calendar.DATE` values for? I'm not sure that this is right.
`$attributes['class'] !== '';` ?
Not the bugfix. You should replace `LOG(ERROR) << "unknown setence type[" << sentence_->getType() <<"]"` with `!optOpEnum`
Is this still needed?
I feel like this function could be moved to the `trial_command`.
We should probably return an error here instead of using an error.
I guess this is the only fix that should be reverted.
Not the best place to move it to the bottom of the PR, but can you explain why these are removed?
This file is no longer used.
Why do you need to add these checks?
This should use the `log.` constant, no matter how it works.
`Outputs` could be undefined.
I think this will need to be changed as well.
We need to make sure the `isSharded(server)` is only set once, so it is not a big deal.
This looks like an unrelated bug fix. This test is not working anymore
Does this mean that the `PhraseQuery` can be removed from this PR?
Style/Next: Use next to skip iteration.
This will not work. You should use `Change="display:none"` instead. You'll need to add a `.to_fine` attribute for this to be true, too.
nit: The `dso` is also an `Event` instance, so this would be a breaking change
`add_undo` doesn't work in Python 3.6. I guess it's because we use `self._tab(tab, tab)` to determine if this is a `done`.
Can we just use `marshalers.PushBackNamed` instead? The other option is `marshalers.Filters` which is to check for the marshalers to determine whether or not that the marshalers has been set to `map[0]`
This needs a Jira ticket to be done with keyboard navigation
I don't understand the purpose of this check. Can you explain?
Why do you need this? Doesn't `package node` need to be a *currently* order?
Does this work? Shouldn't we use the same name in the `DataflowTaskBase.go`?
nit: rename to `RowKey rowKey`
Does `pj_LOG_ERROR` need to be `sent` here or can we just call it `debug_level`?
Can you put this in a constant somewhere so the user can use the constant?
why change this?
I think we should just make `lvis_v1_instance.py` to be consistent with other files as well.
@agramfort @tannergooding, this was the bug before.
Should we rename this to `RaiseSingleton` or `return`?
I'm not sure if this is a good idea to have a test for this. It doesn't seem safe to make a call to the `publicpublic static final` method.
It might make sense for a proper error message to mention that the error message is "you don't need to specify the associated blocks for errors", but in the future "test case for errors" is confusing.
`omp_get_max_threads()` could be passed as a method to `m_thread_cv_buffer`
@balonajuGames - How can we get rid of "KindRoleBindingApp represents deployment for AWS ECS. Where do you feel about this?
Is there a reason you are doing this?
why remove this newline?
this is not the key key?
Why was this removed?
Can this have a `that` statement instead of a `break`?
Does this need to be a `func (d.outbounds)` to avoid the need for a copy of the map?
What about the "new" format?
Is this the "input_img_shape" change in the `remove_all_list_type` method, or does it need to be a different class, or can it be re-used?
Just a question to make it public?
you are using t3lib_div class instead. please move it to another class.
Is it possible to return types of the FuncDef? I'm not sure which one to use. Is it safe to remove?
What does the original cause of these callbacks? The original code is not used.
This was not used
This should be removed, right?
This file should be below the other group below.
Trailing whitespace detected.
Can we put this in `handle_fullPath_supported.go`?
`**` is probably better
I am not sure I see the purpose of this method being called when the context is actually created.
This is not related to this feature, but it seems to me this test can be deleted.
why `s.Initialize(cfg, phonebookAddresses, string(genesisText[:]))` instead of `s.Initialize(cfg, phonebookAddresses, string(genesisText[:]))` ?
The result of `homogen_table_builder` is used, so `null` must be used instead.
Does this also handle the case when `req.Pagination == 0`? Why is it always true?
`if f.Vectorized != nil`, otherwise the function will always be populated. We will use the FunctionExpression it points to instead of `f`.
TIL this was a fixed form so cant get rid of the if clause too
@kennknowles @smarterclayton might you check if this is intentional?
`command` is not `true` right? I know it's not your fault, but I'd like to see the idea of changing this to `command = Beaker::Command.new("echo '' | wmic osarchitecture | FindStr 64-bit")` but it seems a bit weird that you're trying to check for `if`...
Is this a typo? `var pipeWriter.Complete()` will result in an incorrect pipeWriter.
Style/RedundantSelf: Redundant self detected.
I think it is more consistent to have this field, e.g. `HumanReadableName`.
This will change the behaviour in my next PR. `openshift.current` and `openshift.current` are the same in the first place.
Could you explain why this change is needed?
I don't think this change belongs in ` Confusing`.
Can you please make this `if (_layout.IsThreadAgnostic)`?
Why `LoggerFactory`? There is no `@SuppressWarnings("unchecked")` that is already used in `System.System.ForkKey`.
This would be more appropriate to call `node.network.flood_block (block_a, nano::buffer_drop_policy::no_limiter_drop);`
You are missing a colon at the end of the line
`tools/pantsd/fixtures/except FileNotFoundError as fnfe` - is that the intended behaviour?
We should probably check for procCodeB here as well.
@dvoytenko @kroitor since `executionOptions` is `null`, we don't want to set this to be `null` if it's not. This means `executionOptions.size() > 0` is the default (the default is `false`), and the default wouldn't have to check for null and `slaOptions.size() >= 0`.
Can we just do this in `TextSelector.IsDirectory()` instead of `TextSelector.IsDirectory()`?
I'm surprised this is a BC break?
Should be a global var $property
Do we need this check?
Do we need to call FrameworkDescription.Create()?
I think `WHEN cardinality` is probably more consistent with `1`... but we should probably be consistent with other methods `WHEN cardinality`...
Please check if the table is empty.
this is not necessary, we need `digest` in the `require` block
Why did you move this import up here?
Why the changes here, just the ones below?
This is a bit confusing, maybe just say that it's an empty string
Maybe add a `config.add_api_capability()` function to be explicit and use that as a dependency to the config.
Shouldn't this also be added to the `gocloud.dev` package?
shouldn't this be on top of the loop?
this should be removed from this PR
unused import order. Make the imports in a separate commit.
This check could be moved down, but if it works, this is probably worth adding a new function to the `ddev.IsErr` function which will return a nil error
I don't think this is a good name for this.
I'm wondering what's going on here? Should we allow using `CXSmiles` in the else and set the else to `false` here?
Do we want these functions functions to run in a model that does not exist? Or should we also check if it's called from a model that is called from a model that's called from a dict?
I think we can remove `final` entirely if it isn't used?
This will fail in a user who has been running into the console before merging in a PR but I think this might be too much for a user to run.
I think this is a good change... But it might be a good idea for `IP faked`, but `IP faked` and `IP faked` to be an array. But I'm curious if it makes sense to make the name consistent with the rest of the function, since this is the type of the object that is an object of the child, and we're not doing so many places.
I don't see a reason to use `using System.IO;` on all usages, but I don't think this is necessary.
No need to change this. You can just change the function signature to be consistent with the new API.
Why do we still need to reset `ContentUploader`?
is this constant still needed?
Why are we removing the wait time here? Is that ok?
remove empty line
Why do we need this?
Put one space between the method name and the first argument.
@maarcingebala What's the purpose of this change?
you can just make this `@private`
why is this removed?
Can you make this configurable and add a new struct to `install` as well?
can we put all of this here in `_for_experiment_trail` and `_for_experiment_trail`?
I think we have a better idea to just do this as an alternative approach and then we would not have any other EC2 Metadata, and would be much more likely to cause the EC2 Metadata to fail.
I think we should update this to use the new `ActiveRecord::Prep.new` instead.
This is a bit odd, as the CH-only data can't be used with the CoreCH. This is why we need to remove the need for a get function.
Is this interface supposed to be public?
Should this just be `component` and not `base`?
what is this doc for?
It was actually not possible to have multiple artists and multiple artists, right? I had seen this as a separate PR, but this is fine for now, so it was fine as far as I know
This could use the same logic as above.
Can we have this in `__init__.py`?
Should it call `self._get_selenium_options()` here, too?
nit: maybe move this to the `if '+Content-text' in response.headers.get('Content-Type', ''):`
@citizen428 Maybe we can move this to a constant so it makes sense to keep it there and remove it in a constant somewhere?
Do we have a test to verify that this is actually false?
Is this really necessary?
Could we remove `secpRoot` from the DOM?
does this need to be a constant or can it be moved up?
May be better if a user explicitly set the DAG to `true`, so you don't have to set this value to `true` when the default strategy isn't found
Is this necessary?
I don't have a strong opinion, but should we add another `DisableMetricsSession` attribute to `StartMetrics()` so that it's clear that it's in the base `StartMetrics()`?
It doesn't really matter, but this seems like a bug fix. I think you can just use `./pctx` instead.
this should be `provisionFailedTerminal` (we don't change the status and)
This should be an `f` instead of `f`.
Are we missing an inlined normal component?
Should the user set `r.get_filter()` on line 379?
I think this is the only one where `Space separated` could be used in a single place. I don't think we should change that.
Are these extra flags needed? Is there a way we can keep these old ones but deprecate them?
This seems like it would just be called `update_singular`
This will not work when you run `v1` in the gardenlet package. You have to update that and it will be `v1` in `chaos-mesh` in your `HoodieClient` and `current_version`.
Honestly, I don't think you need the `@param` here, it's just `fn` (and `_memoize`) that would make it impossible.
Why is this a valid path? Should this be a separate option?
This is a little hard to read: it looks like the tutorial is different from different threads to different threads? (The other method above already has the right side-effects that are being used for the other components). I'm going to be happy with that.
This should be final.
This makes me wonder if we should remove the `/` here.
Please use tabs to indent.
Do you mean global_configs?
Please add a quick quick `OP_vgatherdpd` to the shared `.md` file.
I would use `models.settings.gp_settings` instead.
This is the only change that will cause NPE. `canSeeInvisibility` may also be removed in #2746.
Why is this necessary?
Does this work when using `GetLatestEventRequest`? I think it is not a best place to put this.
This seems like the wrong place for the network service in this function. Why should we just always set the default182 before returning?
is this not an removal of this PR?
What happens if this is not `request=True`?
Shouldn't we also update the docblock here, with the new roleText argument? Or is it that users may not want to do anything to parse?
NIT: `dcontext_t *dcontext = doing_detach`
@nickytonline I don't think this is correct, it was not added to fix the issue
It would be nice if this was the only way I'm using forID. The `KeyAlgorithm` was a list of keys that is `isCA`. It would be a reasonable default for `isCA` and it would be `""`.
I wonder what's in the error message. I think the original behavior of this code is `azure.Create(subscribeonandroid.com/))","")` - I think we should just be more specific and add one `public static explicit`
It's not clear why you use the std::string property here, but I'm not sure that's what you need.
@dain is there a reason you removed the line here?
why is the name not valid?
The `Header` is the name `Header` so we could leave it alone in this PR.
This change will break existing posts.
I think it would be better to move this to a separate commit if you think it would be easier to read
why is this required?
Let's not add this file to the test files.
This needs to be a `def active?` to match the `_on` key.
Is it possible to return a `Object<argSpec>` here?
You can remove the extra `0` here if it's not needed. (This may have been a problem.)
No need for `sync` anymore?
I'm guessing this is the right place for this change?
Why not use `showSubjectInMessageHeader` here?
Why does this need to be newer than `DefaultSampler`?
This is incorrect. `useDeploymentStrategicPatch` should already be called from `mergeAuthenticationLabelsAndAnnotations`.
We can't rely on the logging level for the `debug`, right? I'm not sure if we should log it here.
nit: I would call it `MockResult::noTransform` instead.
this method now throws the `StringUtils.getfilesystem()` which is never called in the file
I'm not convinced the problem was that when you're in the `afterPaintEffects` we don't get a `Set`. This is a good use case. I think this should stay as it was and should not be necessary.
@QilongTang This is the one you are using for-each structs, but the implementation of `ROLE_ADMIN` should be removed.
Why are these being changed?
is this used anywhere?
WasmAbi wasn't being set when we can actually set `this.Target.WasmAbi`
We have already done this in `TestRouter` but I don't think we should be testing this. The `Start()` function calls `TestRouter`. The `Start()` function calls `TestRouter` which we'll never know about.
This was changed in #5769 (eg. #5763). I'll revert this to your change. This is a test so that we can make sure we don't run into an issue and we can also get rid of this.
@smarterclayton do we need to update this to use the same level of resources here?
I think there is a more common use case when a user is not a valid `toString()`
Should this be `claimFromRewardingFundGasPerByte = uint64(100)`?
Please add a line like this in the `PyObject::GetSubstructMatch` method to remove these lines.
Why do we care about the `BlockHeight` here? Would it be simpler to just pass `uint64` as an argument or does it allow users to use it?
Why is this needed?
It's not clear that this is a new field in the context, maybe `elements.Sub()` ?
I would rather have this in an `if` instead, because there will be a need to `return` if it will be null, which makes it more difficult to read.
I think this should be `canBeSet` instead?
Maybe include the `data` as a param, so that it will make it more clear what is being used for.
This change was probably causing issues in the tests because `COPILOT_QUEUE_URI` was not present to be present.
Hmmm, so this is fine, but it should really really be a separate commit
Worth adding a static method on the key.Bytes instead of being used.
I think we should return 0 here.
This is a breaking change, I just realized.
I think you meant to remove <msg> You also need to check that the message has already been logged as `log_key` will be used together.
This is not correct. A quick fix was to remove the `putState` in a new store which was not used in master yet.
I think it's more clear to the point of the `collection` field, but this looks a bit strange.
@mhoemmen do you know why this is needed here?
Should this be `_`? Otherwise this will not work.
Do we still need `UsedInList` ?
This one shouldn't be changed.
This is not correct, the order doesn't matter.
Nit: Can we call this function `score float32` or something like that?
I think we should not do this if we're not going to use the http.Header.Get() method to handle browser.HasResult() in the future. If possible this might be a bug. But we want to avoid the browser check in the first place.
I think this is still a regression.
I assume this is only used in this file?
I think this should be a constant somewhere, in case someone adds a constant that has a string and a custom string. It can't be changed in this scenario.
I see this was added to pass a pointer to the key so you are already going to pass the config. This will make it less useful.
Can you use `models.User` from `common.SetProperty`?
Use the new Ruby 1.9 hash syntax.
I would have made it "width"
I'm not sure what the correct way is to have a "dogStatsDMonitor" name and it's more clear what the "dogStats stats agent" means. Can we name this something like `dogStatsDMonitor_dogStatsProcess` ?
@jona-sassenhagen this is a bug fix for `sizeof_mcontext_t`. Can you fix the missing brackets?
why is this change needed?
Please add `Order: true` (and `default`) to `""`, which I guess is fine
It's a good idea to move the check for the the decodedPair variable, and just call the "slim" method in this method.
I think the `getVar` method should be renamed to `getWorldType` instead of the `getVar` method.
the new version of id needs to be changed to confidences since they are only used in one place.
I am surprised this name change isn't it?
`r'[A-Z]:` is a more correct error than `r'`. This one is more correct for `r` (rather than just `l`, and then we're not relying on any of the `is_r` option).
I don't have any idea about this, but why are we using a different state than the default state for each one? Is it possible to have a default state that requires a different state?
`proc` is a bit ambiguous here. Should we rename `NewFactory` to something more meaningful? (same applies for other places in this PR)
I think I'd be tempted to just make this a constant so that we don't have to update all the code to use the same value here. But I guess the code is a bit redundant.
@danrot I removed the `DistributedSpanContext?[HttpHeaderNames.TraceId` property here, it doesn't work for a non-public `DistributedSpanContext?[HttpHeaderNames.ParentId` property. This is a breaking change, but it might be worth it to move the two arguments into the the `DistributedSpanContext?[HttpHeaderNames` property.
this doesn't belong in `MetaClient`
Why not put the `int` right under `NULL`.
What is this for? Does it make sense to rename it to `writewritewriteorer`? The description seems a bit too broad to rename it to something more descriptive.
@Jjagg - I'm wondering why we have `_poSSwitcher` return value for `Header` instead of `newizedHeader`?
should these both be and in the actual actual actual pages?
This should be `.filter(expr)`
It looks like these map map map were just moved over from the first place.
This will have to be a NPE if the item is not cached
why do we need to set it to `ChannelImplementation` here?
Why is a module in addition to the metadataLocation?
this should use `(currentSortOrder == values[i] || (currentSortOrder == null) || ...`
I think there is a better place to put this constant. I'm thinking we need to add this as a global constant in order for now...
This is the change that will prevent errors from being cleaned up.
nit: Add trailing commas to this function.
We should rename this method as well.
I'm not convinced that this is an accidental addition...
Hm, I guess we should consider making a new constant for this
I would like to move the `wallet.Wallet` to `wallet.Json`
(style) trailing whitespace
Why not use `adios2.h` here?
This change is not related to the PR. This PR doesn't fix any issue with the changes here.
This is a change in behavior.
I don't think we need to remove the global part, it's the only way we can do it.
We should remove this blank line
If we're not going to use this code, we should use something like: `testDBFile <msg> who.DbPath` instead to be consistent with other places like `testDBFile.Name()`
Is the change here correct? I don't think we're ever going to use this if statement for docstrings.
I'm a bit confused about the `getState()` call here. Can you explain more about what's going on here? And I don't think so.
Why do you remove this method? There is no public constructor in the constructor
this one is wrong. it is used only when `@team_plans`
these changes are unrelated, are you sure they're not needed anymore?
I think `ChangeForReader.end()` is redundant here because the chit was not in the loop. It looks like you've removed the `update()`.
This is the only place where `Final` is used.
nit: can we keep this method as `public GenericDataFile(org.apache.avro.Schema avroSchema)`, so that we don't need to pass the `public` here.
We need to move this import back to the end of this file (line 257), and keep the next one.
Can you use `_InternalFrame` instead of `data` to be consistent with other places?
We could have named this `ResourceResource`, since we can only use `ResourceResource` when calling `getResourceAsStream`, but we should use `getNamespace()` in the case of empty string.
`SecurityProtocolType.Tls12`, is there a possibility to use a `*` here?
Does this need a migration?
@adamjstewart Is this line intentional? It looks to me like it will go back to before the PR.
This was added because it was removed in #9021
remove the extra line
So if the `BrokerConditionTopicReady` is still used?
Please remove this from the PR
Should we have a test case that we don't support TLS?
I am surprised that the body is not empty... I think we need to do that in the case when the response body is empty.
I would not change the method signature of this method, because it's no longer a part of the main main library, which is not really what we would expect here to be doing. But I guess you could also change it to `[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64]`
Same here, please use `->defaultValue(true)`
I'm surprised you wanted to be sure you have to pass the collection as parameter to `AspNetCoreInstrumentation`?
You can use `G` instead of `GDestroyNotify`.
nit: remove this extra newline
Is this change intended?
Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
This should be `FPGA_IFC_DF_L`
I'd rename this to `ValidateSignature` (as it was before and it's more clear what is going on).
"not used" -> "the"
I'm not sure it's the right solution to this. The github is not the first one at all.
I don't think this is right. The error message was wrong.
Since we are not using this everywhere now, we can remove this method altogether.
`user is a service account`?
I'd rather see some optional fields here and in `test_spec.py` for consistency. <msg> I don't think it makes sense to have them here in a separate file.
Is this really the correct way to get the `HT210176`?
Please use `free(tmp)`.
I think it would be more consistent to make this a property of `AvroSchemaUtil` as the key key is already a value.
This is not needed. This will be replaced by the call to `checkSpaceExist` when it is `spaceName`.
This is probably the only thing I can see. But I'd just delete it. It's not clear what the user is testing here.
I'd put `nio.linklink` on the `GOStage` list instead of these two attributes.
These are unused import.
@strib I don't understand this change. Is the line that we are doing here?
This should be `sigValidator`, right?
This is good, but we should probably move it to `common.TraceList.go`
This is a no-op.
Is this something we should handle, instead of having to wrap the log level in a new log?
I think we want to avoid these, but we're just using the default.
IsSymlink }} the same as the input input? I wouldn't use input input
This line needs to be removed.
why did you add this?
Is the attribute always guaranteed to be non-nullable? If it's the attribute then it'd be nice to be explicit
Is there a reason we can't just use `rom38` instead of `238` here?
Why we need this `isFocus=True`? There's no way to set the `engine.save()` call at all for `# noqa_connect`.
this is the bug fix
this should probably probably be called before the loop above
Is this being used anywhere or can we just pull them out?
This will need to be `writeObject`
Is the old name still valid?
Isn't this just a reusable function?
I'd prefer we rename the administerable parameter to `administerable_by?`, since it will be a administerable object in order to make it more obvious to which user to use, instead of a admin that we can use. The administerable method is a admin that has no admin.
we should add some info about the returned value.
You could add a `limit < posNext` (or similar) to `Long.IndexOfAny` below.
Can we do this in `updateUserapi` instead ?
We don't need the `v2` package.
can you add a similar fix to the one above that just use single quotes?
can we just use the `hyperx` prefix here?
What is the purpose of this test? Can we avoid using the new test?
I think the check is redundant here, and if it's not needed, we should just always set it to the empty string.
This is not necessary. The first `,` in the following line should be enough.
This will need a deprecation cycle if the default argument is a `const`
Nit: you can use a conditional here and below instead
Why not just ignore `Divide`?
The previous logic was wrong. The original code was not calling this twice.
I think it is a good idea to keep the `GET_CONTEXT` prefix as well.
Why not do this check? `GetStackStack` is always a `DataAbsoluteAbsolute` and `HttpInSource` is a `PropertyEncoding`. IMO we should just check that the exception is raised by the user.
`positional` is a boolean flag so this should be removed.
Doesn't the `lib/core/...` need to be re-enabled if this path doesn't exist? I guess the `ReplicaSetNoPrimary` path is always present in the `lib/core` path.
nit: this should be indented to be more explicit and named after `spark_session_local` in the future.
should be `defaultProfile` to be `null`?
sse is only used in the test so it will not affect TF 2.9.
Can you use a else here? It looks like it will get a lot of work. It's probably not the best idea of not having code paths.
Not sure if we should change this. options should be updated as well.
If `Integer` is unused then this could be removed.
I think you need to add the new keyword argument to `FormResource`.
why are you using this?
Please remove this include.
It's not necessary for the error code to be there.
Why we don't remove this?
This is a breaking change. It is not possible to write a breaking change at all, and we won't be able to do anything with it.
@michaelkuhn is there a reason this file needs to be changed to the others?
shouldn't that be `isOwner`?
These two should stay as `Type MonoType`
This one was not used
`Id` is a little too generic, please move all the `Unlocking` methods into `Spec` and `Spec` methods.
I think it would be good idea to add a conflict at other views.
Can you add the context of "you cannot find an extension" or similar (e.g. to convert the category to null to empty string)? I would prefer that, if we can't change the context of this change, we don't want to have an empty list as an alternative, we should just always use the string.
This was not needed, since this is only used in the `TaskFiles.get()` method.
What's the reason for importing this?
is this change needed ?
Can you add gitea copyright line to header (and keep gogs one next to it)?
Please rename `readPeer()` to `getPeer()` or even `setPeer()` to keep it consistent.
You can remove this.
This is not a `nil` statement.
this line is not correct. `p.IsReadOnly` is always false if `ComposedProperties` is a Parameter policy, then `IsConstant == null` should be false
@jcotela do you need this? It seems to me that the `open` function is only used on this module.
Should we use the `ecs` name here, instead of the actual string?
why is this removed?
No need for double, but just use `dtype=`.
We have `break` here, and `instr_get_opcode` should only be defined for the `else` case.
Why do we have a class with Globalize? Shouldn't we use it in the `AddNew` method?
Like you said above, you can use `assert_fill` instead of `assert_eq`
Shouldn't be /var/False in case there are no other `tls.TlsHandshakeHook`s?
Why do we need to remove the `Flush()` here? This is a very confusing behavior of the PR. The `if` condition should just be removed, no? It's just `private`
Can use urlencode to avoid unnecessary format string literals
What's the difference in this line? Is it because `row` is `null`?
If there's an error here, this log message could be helpful to make sure the error is returned.
This is the part that will be used once the user is logged on.
This test is not needed anymore?
You can just do `# NOTE: need slightly more helpful message than this.`
this import is no longer used
The original code was correct, but I was trying to figure out the `str()` out of my ignorance.
Style/SymbolArray: Use %i or %I for an array of symbols.
Why is this necessary?
Why is this now `adapt`?
There is no need for this line now. (And I'll merge it)
I think this may need to be a warning if we have a validation that gets updated too
This was unused so I removed it.
This will need an `if` statement.
I think you could make this `IKestrelHttps`, I don't think there's any need to change.
this is not a correct property
should we add a link to the issue about the service?
why not return readDir directly?
Should this be a constant somewhere?
Can you file a JIRA?
I think you can do `None = get_registry_url()`.
I thought that the sample and ton of versions don't need the address anymore?
Align the parameters of a method call if they span more than one line.
How about `mSessions.size(i)`? Also, I think we can use a list of `i = 'i'` and use a list to `i = new`
Another option would be to have a helper that does its own `currentCulture = 'zh-tw'` and `currentCulture = 'zh-hk')` in the test.
I would keep this as is since it can only ever be used in one place. We need to think about how to do it (as we already have it in `GenericQuery.go`). I am a bit concerned about adding `GenericQuery#visitLeaf` to the `contains` method.
Line is too long. [103/80]
If we want to use it only in the context of the resource, we should use it as the default value. It will be hard to use in the future to make sure there's some other package that we use in the future.
Does this need to change from the v1alpha1.InnerObject?
Why is this `InitContext` now?
This is not the right place for the `command` variable. The `windowHandle` is used by the client. `since` is a bit misleading, I'd recommend using `since` as a name.
I think the last value of this value should be pushed back to the `dom._lastValue` object. It's better to be deleted (we do not want to know about the behavior here if we have to provide a property).
Should probably also include the path being part of the `valid[:modulepath]` here?
Can we put this in a constant in `subnets`?
Can we just return the `String` here?
Can we move this up into `ESProcessorFlushInterval`?
@jackfrancis This is a bug in the service. The previous code was passing a `Address`, which was `GetChecksumAddress` to `String`. I think we should do the same here.
Why this change?
I think you could change the name of this method, as it was previously the only one that would have been this PR
Why is this not an enum class?
@DavidParks8, I think this will cause a conflict in the past. You can't do the trick right now, so you need to add a special check for `EventChange` to add it there.
This should be left over from the other PR, I'll move this one up to a separate commit
I'm not really sure about adding a space before the closing parenthesis.
This is a little scary, but the code above uses the `} else {}` and the new code is redundant.
weird, but can you please add a check here that `noda1` has a `/dev/` in there?
this is the only thing where I'd like to make it so that we don't get a `default` value when the `create` call fails. We should try to keep it in place.
Nit: `p.len is not None and p.value_size is not None`
I think we also need to add an `int64` field for `shortTimeout`.
It is not necessary to call this twice, and just set it once on `CHAR_RTL_MARK` and call it here.
Should we also include `v1alpha1`?
(style) line over 80 characters
Was the intention to move this to `Removed` ?
I don't think we need `noext` anymore.
this should be `if self.num_of_searches` or even better, you could use it here.
I think this is wrong. Why are these two calls needed?
"the second stage" should be "the stage detectors" here, since we don't have any other "the second stage" in the config.
Should this be ` cfg.Server`?
I think we should probably also change `.label` to `label.frastructure`.
This is a pretty specific one, we should have `mlflow` a default of `2.4.0` (e.g. `mlflow` is not a user-friendly string).
Nit: Can we name this as `afterAutofill`? It's a bit confusing to me that the name name `visible` makes it clear that `visible` is not a boolean.
Are these imports used somewhere?
I don't think we should raise a `name` if we don't want to check for `str` here.
This should be a warning if we're using datastore.
Hmm, I think you need to check here? I'm not too familiar with the context of this particular implementation.
I think we should use `COPILOT_ENVIRONMENT_NAME` to be consistent with other tests here
You should not need this `using`s. If `chain.TraceTrace` is true (and `chain.Trace` is true).
I don't think you want to use 4)\n" to get the length of the default value.
This isn't related to the PR, but it is still not necessary, we should be able to remove it, it is a bit unusual.
Is this actually needed for the `libddwaf.ToString() ??` file?
Why use goimports here?
Would there be a case in which this would be the case?
Line is too long. [102/80]
If there is only one element, should we use one element?
What does this do? I'm wondering if it should be "boosting" or similar so it doesn't have the config config parameter?
This should be `/` and `/` to be consistent with `/`
Do we want to pass the config in here?
Maybe rename this to sleep_sleep
so now this is a bit of a hacky :-)
There are some discussion here. I don't understand this. The only difference between `One_nodeAttestor_port` and `One_nodeAttestor_V0` is that I don't want a user to know if the version is the version or not, but I don't know if it's the best way to do this.
I'm going to have a concern about this, and I don't know if this gets called somewhere else. I don't think this is really necessary
Please don't add trailing whitespaces.
Is this "Analytics" needed if the name is 'analytics', in the component in the file that is "analytics". It seems to me that we have a different name for "analytics" but it should be "Analytics". Can you check?
This is a very old code, can a single function call in a separate function
@mfojtik @jridgewell any reason for this change? If you prefer to make changes here, you can use `host.Host` instead of `libp2p.Option`.
Would you mind not seeing a potential for loop where `go timeDuration` is used?
Should we move this to the other language types?
Why change from IP to IP?
Can you change this to a TODO (also in the other PR, in case we're in the middle of new revision field), so that it can't easily easily be changed
Shouldn't we also add `accepted_if` to this list as well? I assume this will always be true?
`< 0.0</ 1.0`
`http.request` is in `isInMemoryableForDoc`, I think we should remove `ok.request`.
<msg> We should add `instr` to `instr_t *instr` as well.
This looks like it is a bit odd. I'm assuming that for example, the `HOSTS` variable is actually being used, but it seems to work. What about the `HOSTS` variable, and then just call it `HOSTS`? If we do have `HOSTS` variable, then this would have to be moved out of it's own `load_pe_version` class.
Why do you use the existing version? It should not be necessary
Why was this removed?
This needs to be a debug line for `host.is_pe?` check, since `host` can only be specified if `host != null`
This can be a problem for daal_parameter.
can we make it `static const int`, `static const size`?
If I'm not wrong, why the need for that `ValueTask<(Keccak?, AddTxResult?)> SendTransaction(Transaction tx, TxHandlingOptions).New(Transaction tx, TxHandlingOptions))`
nit: You can also do `namePiece = newPieces;`
The name `ArrayType` is a bit misleading.
Shouldn't this be an experiment instead of an experiment?
I think it would be better if it is used in `openshift/openshift/util-once`, then you can use the same value from there?
should this be `# :nocov: nil` since we're in the `rescue SecurityError` above?
The last sentence of the docstring is wrong, we should use the existing "real" format for cross-origin resource conflicts with "real" format, and then use it here.
This is not correct. The only reason I've removed is the cache, which is not correct. The problem is that it is indeed the cache itself which is the index in that function. In fact it's not the index of an cache
Use the new Ruby 1.9 hash syntax.
Should be `this.toolbox_ && pagebox_.position();` since we are now creating new ones.
Why don't the pep8 changes?
Please use the final version of `final`.
This image should be defined as a constant somewhere
Do you really need a doc? If not just use an empty string
I'd call this `NpNamespace`, since there are other places that call it `NpNamespace`.
Why the move the client_compile_file and client_invalidate?
I'm a bit confused by what's going on here: `input_steps_to_execute updates the state of ActiveExecution` (since it's `input_steps_to_execute updates`).
I'd prefer if this actually works, as it would be a separate issue for some other case.
Is it safe to move the resources to the minerCallback?
Is this a change in behavior or is it just for debugging?
It seems `POSIX_C_SOURCE 200112L` is not used, right?
`loopBody` is also used in `loopBody` and there's no need for it.
Is there a reason that you're not using the `FLAGS_meta_client_retry_times` flag instead of just checking all the other requests?
Maybe it can be done with `from datatable import *` (where `test_content.py` is used), or better make it a `torch.python_test` (or something).
What is the issue here?
Remove this, it is not used anymore.
Isn't a bit of a big deal, but we could use `FIPS region not allowed in ARN` instead of `a.Region` and `fips` here.
`s3control_stubber` is already imported in the test_tools
@fowczarek What do you think about putting this in the `roi_head` file above the `bbox_head` list, to avoid the `model = dict` call in this list?
you could just do `return bt.limit, bt.currLimit()`. Same for the other others.
I don't like `skip` here because it's not a boolean, but not a boolean. I can't recall why, if we're going to do something like `custom.authentication`, then we should make this a `.call`?
Is it worth adding an extra field to the struct?
I think I'd prefer this not to be `app/services/cp65001.php` rather than `None`.
`Metric name must comply with the OpenTelemetry specification.` -> `OpenTelemetrySdkEventSource.*.*`
This makes me wonder if we should not have this check here.
I would prefer to see the new `model` argument here.
Why not just make this an enum?
This seems like a breaking change for what is needed?
I think we should just make this blockNum, and not use blockNum since this may break anything.
This is a bit weird, can it be moved to `min()`?
The resulting headers aren't used.
Just checking: I see the idea behind the return value in `getService poller`?
this is not needed as the only caller of this function will have `get ALWAYS_UPDATE()`
I think this should be called "zang-format-format" instead of "zang-format off".
nit: can you revert this change? It's not a test, but it is not required
Can you explain how this change should work? Isn't it better to use `continue` on the `class` ?
This is probably better named `os.Exit(2)`
Not sure if it's safe to change the file name here, but I don't think it's worth it
Do not use spaces between -> and opening brace in an array of words.
@mfojtik @wachterjohannes I am not sure why you are not using XSP_SZ here...
I don't think you need this, but it's not used anywhere else.
We can't just pass this as `<!--new`
I'm not sure it is worth it to add more to this interface, since it's not a static factory method. The reason is if you want to add the same method to it (or at least remove it from it) you wouldn't even need to have a default implementation for it.
@michaelkuhnik @cclauss, do we really need the package `itable_INAL`?
The regex should be `/torch/`
We should change the default behaviour so it will be easier for any other user to change it?
(style) do not initialise globals to 0
@jaeilepp this should be `this.txs[t]._getHash()`
I don't think it's necessary to validate the block.
Can we remove this and just have it be part of the scope above?
I'm not sure we should be using `addr.ByteString()` here?
Can you replace the `Approve` text with `cart` in `cart_data_path`?
I think it makes sense for this to be a `elif isinstance(offline, list) and \`. The same applies for `elif` below
If there is no client for this, should we say `type='build' is not None`?
This is the main code.
I think this should be removed. The window.windowState() won't be able to set the window inside the window.windowState(). It should only be set when window.windowState() returns window.windowState() (or should that still work if window.windowState() is specified)
Why was this moved?
It seems these tests are now the same as the first one.
I'm a little confused as to why we don't have to support `protoParser` in the constructor. It's a bit unclear to me why this check is needed to avoid unnecessary `protoParser`
What's the purpose of the `if (doc.connection.destroy())` check?
I don't like this - If you are using an `skip_links`, this would be more correct.
Should we also remove the `result.unlock()` condition in the logic since this is not needed at all? Also, this would require the condition of `if` as we do in the `if` below.
`static` -> `static`
Can you update the test name as well? `get_string_by_dialect` or `get_string_by_dialect_name` to use this name.
Should this be named `BufferIdentifier`?
this should default to True so no need to change it
This feels like a pretty ugly hack to me. I would rather change the default behavior of the `profile_json` and just skip it if it's not explicitly defined. I can change this to a `function.as_json` if it's not a string (e.g. `profile`) or not.
I think it's better to include this include include in the header file.
It seems this can be `null` if we decide to use something like `"^xlink:?/`.
Why does this not need to be added? The other `if` statements are used only once.
@dain is this the place where we remove it?
How about `find_by` here? `e. Push_info` or `e. Push_info` etc?
I see some places where 0, min_x is set to false now, but it will be the wrong thing.
I think it would be better to keep this message a bit more specific, e.g. `--allow-ad:` instead of `--save-ad`
@agramfort : this was the reason why the tests were changed.
Trailing whitespace detected.
I don't think we should remove the extra variables anymore.
why is the JavaScript now replaced by Ruby?
@rhatdan @lannka Please add your name and new option to the docs for this new option (we should also support it in `app/features/egress.js`)
Do we still need the `debug` here?
This could cause the alert on page to run as part of it.
Why is this not just "check camera"?
Should it have the same problem?
This is the fix, we can use the title as the form. The new form uses `app/link` or `app/link` (or even better) and `app/link` because it makes the code more readable.
Should this be `!==` (or am I missing something)?
We should probably make this timeout a constant.
Can we have `Metadata<TableMetadata>`? I'm not sure how to test it.
Do you need `num_levels` here? If you are in a dedicated function you can use `num_little` or `num_levels`
This should probably be `cls.__a = ''`
I don't know if you want this. We have a lot of other places where we need this. If this is the case, it might be worth adding `create_no_window(None)` for example, to get the `create_no_window` value from the docstring and then adding the flag in `build_system.py`.
What's the plan for this?
@mhoemmen do you need to add this option for the view?
This is only used in the doc. You can write `[options.causalConsistency=true] Enables or disables causal consistency for the session.`
I think it makes sense to have a test case for the wildcard. I think the `*` should be removed
Why not move this check?
nit: this is a bit of a hacky but could you make sure the hostname is set to `Namespace`?
This is an API change so you don't need to add the `array` attribute anymore.
It seems that this is only used in an `go/reg` package. Could this be moved to a separate package?
Why not just pass in a mock ? This way we have the `notificationId` field in the constructor and the constructor will not be used
Please use `*`.
why not just `CandidatesByHeight`? This makes it more obvious that the caller does not need to have to pass `SIG` and it's not called with the initial release.
This is the same as the `items.some(leader).toLowerCase()`. This is the same thing as the one above.
@jvillalobos did you notice the other changes related to this file?
this is not right..?
Should we make an `headers_alpha` or just a `headers_dev`? I think it would be more clear, but it seems to have both a `headers_alpha=0.2` and a `headers_dev`. It might make more sense to just make the check in `spack spec --update_alpha` and `spack spec --update-alpha=0.9` and a `spack test`.
Please make these tests more explicit and more specific.
I don't think this will work when `--verbose` is not passed as a parameter. It's not used anymore, but I don't think it's necessary for this test to do that.
Is this removed completely completely? It wouldn't make any difference in this case.
Here and in all the other usages (see #1983). Consider refactoring.
I'm not sure if this is correct. The 'StandardCharsets' part is what is fixed in a follow up. The 'StandardCharsets' is used for, which is why I changed the default.
This could have a `.select` method.
I don't like this new approach. It would be good to move the `if ops != nil` check into the `if` block below.
The `memcmp` is not used, so it should also be `int64`
Would it make more sense to also check for `w.WriteHeader(http)` when the status is 204?
This is the new code. Is it possible to do that in another PR?
We should add an `inline: :observers` parameter to the model as well to prevent the confusion.
I think this should be `//Disconnect if present.`
We could probably just add this to the `Resources-spec` namespace as well. It's very likely a little bit of a very large number of bytes written, since the only place that would be used is when `bytes` is `None`.
should this be `Boolean` now?
Why is this needed here, or is it intentional that we don't want it to be negative?
Is there a reason that we don't add the extra `schema_method` parameter?
Should this error be reported as a part of the JIRA to see if there are two similar errors?
Why do you need a `to_json` here?
I would also make a note to include this in the docs in this file that this PR changes the behavior of the API, rather than in a separate file.
why not using using `random.seed(t0)` ?
I would rename this to `border_color_marked_index`.
can we change this to something more meaningful, like `test.tsts`? or `test.ts` is more generic and consistent with the rest of the package?
It's possible to have the `continue` variable on the first line instead of passing it through the conditional. I would recommend adding `continue` inside the `if` branch and adding a check to `isNullOrEmpty(path)`.
`CountDownLatch` was added in another commit.
why is this a metric name? why not use metric name?
Why are we doing this if we want to make this `if`?
How about adding the check `memcpy(copy->segments == NULL)`?
I'd move this part to `clean_Admin` because it's not used anywhere else in the code base
@deads2k @mfojtik why this change?
This was the only thing I had in mind: the previous version was the correct version, but in this case `nackResponseDelay` was removed in any way. In the future: > I am wondering why this was moved, the `heartbeatPeriod` was removed. I would just keep it as is in the "tum", and not in nack you need to update it
This is the wrong place for this test.
Was that unused and why it was added?
What about making this public? (I mean, you are adding the public methods)
can't we just use the entity_list.GetNPCByNPCTypeID(ZONE_CONTROLLER_NPC_ID)->CastToNPC() ?
The `always_by_sql` calls are not necessary. `accounts.paginate(per_page: limit, page: page)` calls should be removed.
should use `Window::foo` here to get a list of `scores` and `stop_foo` for consistency with the rest of the file
Maybe we should just call this `index`?
I have a concern with this code :)
I think you can also say "Use torchscript or torchscript for node.js".
What is the purpose of this method?
This message is still confusing, as it may be used in a more efficient module for a message that has been received on a tool.
This doesn't make sense in the `getObjectManager()` case.
Is there a test where `Azure.Clients` could be used?
this change is incorrect. It doesn't look correct as it is already a parameter name.
I think we shouldn't be calling `VerifyOutputs` in any place in the response itself. Can we just make it `duration`?
Hmm. I think we need to keep the original value in the `status` here. We should not allow status to be passed in, since `result.Table.TableName` should only be returned if `result.Table.GlobalSecondaryIndexes` is true.
shouldnt we have a `IsWritingCatchpointFile` function or something about it?
Can we use the `--user-path` flag here instead?
is this change related to this PR?
`vcrd` is a better name for users. `foo` or `foo`, `foo` is a better name.
why are we using docker here?
Nit: You can use a protected protected variable for this, or at least have a better name
Why doesn't this use `match` and then use `type` here?
We should rename this function to `req.CreateRepo`.
We should add a `omitempty` tag here.
I know it's a bit hacky but I think we don't need this for `if` and `except` to be the same, and it's just a `except` message. Maybe `from x86`?
Does the config need to be public?
Use the trailing `(` for variable declaration.
I would use `locationProvider` from the `buildManifestFileDF` method here.
is there a case where the `WriteStack` is called with the log level?
Nit: this could be a single import
This is just a minor cleanup... but this should be: `Log.Error(exception, ":rsa(), incoming message.Error(), incoming message: false);`
@cra0zy do you have a better way to do this? We're trying to move it to `pkg/apis/certmanager`
We have a convention for this. Would be nice to have separate RpcApi QUORUM constant in RpcApi.java.
I'm not seeing where `check` is passed in from the `new` function. Is there any reason to use `new.first()` to pass in the `first()` function instead of having to pass it as a parameter?
This is the main code I believe.
@kargakis I think this can be `#define KOKKOS_TOOLS_INDEPENDENT_BUILD`
`if ex_save && guidance && 'guid_save || 'example answer'`. This is a bit of a hack and I can revert to change it, as it is not really related to the PR. If we're looking at how a user would think it can do `!ex_save && !guid_save`.
Shouldn't we put it in the group below to be more general?
Doesn't this work? If we don't, we should have an option to set this to something that we would like to set. I wouldn't make this change a bit more robust, since this will make it easier to understand the change.
Why do we need the `mocks.uninstall.mock` change?
this does not look correct
This can be reworked to be consistent with the other methods in this file.
please make sure it works well with error code below (you don't need to check for error code here :) )
Is this variable used for anything (as they look like it's used in another PR)?
We don't need this function.
Please put spaces between `de.` prefix. Also, add a TODO at the end of the sentence.
Remove this line.
should we include an example here and let the user know that they are installed ?
can we use the name here for consistency?
This will be set to true for both `true` and `false`
Should the name be "handlers"?
@sjenning you should probably move this line down into `doc = axe.commons.dom.getRootNode(node);`
Why not just remove the file if we are not doing anything with it?
I'm not sure how I feel about adding a constant for the entire struct, but I guess it doesn't seem to have any effect if it's going away.
`201Y-%m-%dT%H:%M:%S` is the best choice here.
What about moving the sub-unlock and subresources into the `Cause` function?
This is not needed, `// FakeIDOrBust(id, public)`. IMO, `// FakeIDOrBust(id, public)` is better than `// FakeIDIDIDIDIDIDIDID`.
Please rename this to `DeviceControllerModuleName`
Nit: this should be on next line, like the other files. It should be on next line.
should we just remove this and keep `cci->num_regs_skip <= 2` if needed?
This will not work for all metric-thread versions. The reason is that we don't want to expose this in the future if we can't expose it in the metric-store.
is this because of the issue you did in mind?
I see this being used elsewhere, but it would be nice to have a test case that allows for this to be called from the loop below
There is a docstring here. Can you fix this to use `wxLang=None` instead?
I don't think there is any need to pass here, because I don't think it matters much for users.
I'm wondering if it might be good to have a separate separate PR to move this into a separate PR and then have it here for a separate PR. I'd rather not have to make it a bit more sense to move this to a separate PR.
I think you can remove this `&:to_sym`
nit: I don't think we have a constant somewhere, but let's not have an `BACKEND_SERVICE` here.
We could also just say "Cannot read a delete manifest with a ManifestReader: %s"
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
It's better to use 'Erstellen und' in the context of the list (line 618).
I think this needs to be renamed to `GrpcStreamingDetailView`.
This will probably break the `if` statement, since the line above will throw if statement in a row without a need to send.
this looks like it could just be a static final variable and use impl_->assert_liveliness instead of casting
Why not `\n`?
I don't think it's necessary to include it here. <msg> I would rather just put it back in the baseclass.
I think this needs a `inspect` too.
why do we have this constant here?
I'd prefer to avoid a `0.01 *numpy.array` call here.
This should be a try/catch and use it for the other callers as well.
can you add some info about the `OUTCAR*"`?
Use the new Ruby 1.9 hash syntax.
this is an unrelated error.
How about `git grep pdev`?
Why is this needed?
why are these changed?
Do we need this?
There is a typo here...
do you think we want the same property for "skipZero" ?
This is wrong and will break our API.
I would make this a constant.
Does this need to be set?
Is this change related?
shouldnt this be exposed?
I think the `maintainer` needs the option to be passed by the `maint` below.
I think this should be an error if the out_dir is not empty, otherwise the next line will do the trick.
This doesn't seem right to me. You're calling this from the original, right? Is this the expected behaviour?
I'm not sure we need to have a test for this
Do we need a separate `HasSuffix` call? Or are we sure the path isn't valid?
this change doesn't seem to be related to this PR?
Would this not break some other code? if this is the most commonly used case, then we might not be able to just use `ErrorListener`.
should this use a `JsonType` property rather than an `Array`? or are we sure it isn't used?
can we remove `chainID` and use it in L2424?
`@see` -> `@theme`
Shouldn't this also have a default value?
This function is being called twice, not every time, right?
I think this could be an `Bound_msid` and then you can have a `get_index()` method that returns a boolean, but then we can set `self.recording_msid` to `None`, and then just call `get_index()` instead.
This was changed to use `Math.20` instead of `Math.20`.
This file is removed from `_f '{{` to `^`
The sf.Set() calls are all redundant since we were returning a promise in the `newWorkingSet()`. This is the only way to check for a pointer, so I'm fine with it.
Should be `time.Duration()`, `ksqlConfig`, and `ksqlS_ksqlConfig`
Should we instead have a `from torch.onnx.is_in_onnx` that has been executed?
we need this return nil if bucketName is nil
Can you explain why you need to use `std::chrono::duration_cast<std::chrono::microseconds>(max_blocking_time_point - std::chrono::steady_clock::now());` on line 186?
dodge ->
can you make a similar change in tests?
I wonder if there should be a better way to do this. The way we do not want to expose plugins to the main server, it might be better to move them to a different module.
We should rename the option name from `drilldown` to `content-drilldown` to make it clearer to me.
Is this file unused?
We should remove `EnableAdminAPI` from `api/admin-apis/api` and use that here. I am not sure if it's safe to remove.
This is the wrong place to put this check. I think it will cause other changes to this function, in the case of an invalid map type, in case of the type being an object (like in the constructor).
I think we should make these constants constants and not in the source for consistency with the other configMaps and configMaps. It should be the other options for the other metricsets as well.
these should be `@throws`
Is the old field still required? If this is used in multiple places, we should rename it to `customcustomInfo`
This is not a new instance right? We're going to have to think of a TODO if they do not change the API, but that might make the API more clear?
Nitpick: can you rewrite this to: `return ('base', ':')`
I think `@context` may be better here for clarity.
I'm not sure I follow this change... what if I have an issue with it?
I'd prefer to not have the same result here, because in the context of this function, the `merge()` implementation is a bit more explicit.
This feels like a hack. Do we really need to store the `id` in the `Status.parse` function?
Does this also fix the issue, or are you planning on keeping the type information? (I'm not sure how it feelings, just because I'm not sure why you don't do anything about this)
Why use `size` rather than `1`?
Is this just for debugging?
Why is default needed to be set to true?
This one needs to be reverted.
Should we move this to a new migration too?
Line is too long. [81/80]<br>Redundant `return` detected.
This is a bit unrelated to the PR, but I wonder what's the motivation behind this?
The first line of this `if` should just be `true`: the second line of the method is not needed. Same in the the other two lines.
nit: make this the default value in `src/server/ "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "` "`
It seems like `dumb_int64` is the default for serialNumber. Is there a way we can just use the default?
This is a bug in the code. I think we want a deprecation warning.
This was removed because it was a bad one, and it is no longer needed, right?
Can you remove the pragma here?
`pendingTo` should be a `Set`. The caller can use `pending` to store an empty object.
I think it would be better to move them to `retrievalAPI` and then remove them since they are only used in `constant` in `constant.retrievalAPI`.
Same as above, why the `a` prefix?
This should just be `LookUpIndexRequest.h`. We should probably move it to `cleanUpIndexProcessor.h`.
It may be more correct to write `use PodNotReadyAction` after the write.
why change this?
Shouldn't we use the `init_lock_arrays` here?
Why changing this parameter to `true`?
I think we want to keep the `-40` here. It is not a public API.
I'd keep the struct number of seconds, since 0 is the default. If the struct is set, it should be 0.
Shouldn't this be `self._tab.key_press(Qt.Key_Enter, modifier=Qt.ControlModifier)`? I think it might make more sense to check `Dict` for `Dict` and use `key_press` for `Dict[None]]`
why this change? it doesn't seem to make much sense to me. If there is any wlr_gles2_get_texture() method there, there is no need to modify it
Is this a typo?
I don't think we need to make this change. We need to make sure that we don't have the original we are using.
`''` is not used in this block.
Why does `nullptr` not work?
I think this will change behavior for all of a few different threads. You have to check for - 1 for the other case case.
I think the `if ($query === null)`, otherwise if it does, you will get the empty string from `/`
I don't understand why you added this. I don't think it makes sense to have one return value, just return the value from `address`.
The name of this file doesn't appear to be in the middle of this PR. Do you think it's worth it?
I think it's a good idea to log an `continue` here.
I think we need the getModificationDateFieldName parameter if we want it to be a string, not the maxTimeStamp
Unrelated, but I think you should replace it with a blank line between tags and summary for better readability
This is a very good thing to check. But this might have a problem. The `Flags` is a `DBFlags/class` so it does not have to be a `DBFlags` or `cli.Flag`.
Nice, I thought we had marked this in our testing, but we should do `@user.create?` too and have it in the `letlet` statement for all of the time
I think these are the wrong ones (since they are not related to the PR).
Shouldn't this be set only when there are other occurrences of the method?
I'd be tempted to move this import into `libcalico` package.
I would call it out as List is an integer, not a type.
Is there a reason to delete this line?
this will be better to the PHPDoc in the controller for now
Can we put an upper bound here like `uint64` and `int64`? Or maybe even better, we should just use `int64` as the name to make sure they're not consistent?
This class contains an interface to allow us to delete this class. I think that's the reason for this change.
this should really be removed - it's already in place
What exactly is the purpose of this API? Why not just make it public?
I think the extra space after `:` is redundand here.
Maybe this should be `'index_column = [SPARK_INDEX_NAME_PATTERN.match(name, 'name');`
I am not sure we should do anything with this one. I am a bit concerned about this. Can you explain what this is doing?
Can you use `String.Join` ?
Maybe we should log this error, otherwise this will never be true.
We should not need to do this.
Should be reverted, if `_corruptedRequest` is true, otherwise the code can return `false`
The <msg> Curious: Why does this need to be on the backend list?
Why change this to abstract if it's not required anymore and the cast is needed?
can you make countable subscriptions more obvious?
nit: this looks like some sort of validation that we don't know the answer is that we're in IPv6 /64 but rather we still do a note that `new_connection->remote.address ()` will never be true. Can we get rid of this check? If it doesn't, maybe we should just keep it as the first half of the `warn_from_v4_mapped_address` check in `invokeCache::get_connection_handler` (or just change the `map` statement below)?
This is a change in behaviour, so we should have the `const` at the end of the message, but the value can't be set to an object.
This class does not exist in this file. We have to re-enable this class and it is private. It is used to get an implementation detail of `runtime` which is not used anymore and it is not used in tests. I'd rather remove this class and remove the code in this file.
I am not sure if it will be an enum class or an explicit Enum class. This is not the case, but it's worth having two spaces around the `.getType().equals(type1.getType())` and `.getType().isEnum`
I think we could also make `handlers` a local variable.
Why are you using `useInView`?
I have no idea what this is testing (and it should be in `six.cmd.md`). I'm not sure how to get this.
It looks like this is only added in the _logIdToSend_ function? It's already loaded by the _self_ operation.
Can we make this `return`? `new Tuple1<>(value)`
Is it worth adding another struct to the map that was successful?
It looks like there's a tab after this line.
Should the logger be a stack trace?
Should we use `LibraryorateWebSpan`?
We are removing the app domain from the config? Should we also do this for the app domain as well?
This is not needed, please remove it
Why is "podman run IDE and sending a container into a request." Would be better to have a log message that it throws away.
The observation needs to be kept since it's a separate instance now
Please add the `join_record_record_id` property to the list of flags.
the error will be logged in a later later error, so we could have an error message with some sort of error.
Could you please add the `&& !` and also the `&&` annotations above?
Why is this needed? It seems to me that `Interface interfaze` is never null, right?
This means that `_memoryLimit` will always be `true` (as it would not be null). Is there a way to make that `isDomain`? I guess it should be `false` to be `true`?
This change is not related to the change.
Why not use `ctx.Data["Title"]` directly.
@buchgr should you add a license header to this file so that it's clear what the final `aws-sdk-s3` generates a lot of noise?
Should this be calling `h jsonHandler2.ValueOf(reqBody)`?
Do we need to worry about the existing `TimeSpan.FromSeconds`? If it is, we will need to use it at some point.
nitpick: should we have an `string` or a `string` instead of an `string`?
This is a bit of an odd place to call `Clear()` in a few other places, maybe this is the right place to call `this.TestList`? I guess you can just call `return null;` instead of this one?
How about using the logger logger instead of the logger?
Remove the debug print
Can we revert this back to where I think it's still testing the exact same thing?
Would it be possible to add a type to make `fetch` sound like it is a tuple that will be an array of strings that are not?
How can the minified `utils.New` call call a `_ stages.New` function in `dvc/utils.go`?
Should we have some sort of `/space` controller that checks for each `Design` controller? I think this controller can be used in many other contexts too.
This is incorrect. You should be using `account.getTransportUri()` to create a new server, otherwise it will create a new server.
I am wondering if we should use `ResourceResource` here, instead of `ResourceResource`, since we can't do that if we can. Maybe we should rename this to something more general (and keep the property name a little less helpful).
I am confused by this test. If you're looking for the new plan, it looks like a similar test is needed. It seems to me that we're using the new plan to be the same as a `_else` file and not a `_test` file but it should be `_type` and `_test` as the first one.
It's not immediately clear to me what this is testing?
Can we rename this interface to `NewDynamoViewModel`, now that it's more consistent with the other interface. Also, I am curious if it makes sense to keep it consistent, and change all of them to `NewDynamoViewModel` so we don't change it, it's clearer to me if I am wrong
If this gets called every time `_` is called, we need to wait for the processor to be true.
Would be nice to have the same logic as before.
Should this be `return err`?
This was changed to use `<%= plan.visibility < <strong>` and I removed the indent.
this is the only way to start the environment in production is to not expose the environment to the server.
Please don't make use of the new imports like this, please don't use `isinstance`
@wagnerand any idea why this check is here (I think it's just the one you added below). Is it worth just checking the whole color's type is `text`?
This is a regression.
It seems the `setup.Obsolete()` call can call the function instead of the last call. I'm not sure how the call here was. I can't figure out how to handle the existing `DeleteFiles`, and if I am not mistaken, this call might still be the best way of doing it.
nit: can you put this in a constant? We don't really support this in this PR
nit: remove extra space after `if`.
Isn't it better to use `Filepath` here? That will avoid having to copy the file name in the future. I'd rather not have `new:`, if we want to keep `.xml` as this will affect all the other tests.
This seems like a bug fix?
shouldn't this be a function?
I feel like a good place to put this.
I'm guessing we need this change?
Why remove the docs?
I'm not sure I like this. The other fix is to not use the new syntax for the new functionality (i.e. we don't know why the new one is ready for this). I'm not sure if this is a great thing, but it seems a little strange to me.
shouldn't this be `var`?
I'm not sure this is the best way to do this.
This one still needs to be old.
This change is not necessary. The table table will be empty.
This file was removed in #ifdef
Should this be an `int` check?
@liwood what do you think of changing this to `has_video_tutorial tile`
nit: remove since it is not used anymore and can remove?
No need to change the default value here. No need for a property.
Is there any way to test the presence of a specific behaviour? I thought the name was wrong (I don't think it might be used anywhere else)
nit: can you use `<h2>` instead of `span`?
This is a new code block.
This can be removed.
I think this is wrong, if it should be named 'parameters' in the cache, and not 'parameters' in that folder, then this should also be named 'parameters' instead.
Why not `private static static`?
This is a public API. We're still going to add a new public API for the public API, right?
I assume that this is no longer a part of the code?
This doesn't have the same problem, but the `brave` dependency is used by the `brave` build. It should only be added by the `brave` extension.
This should probably be a different `Stop`.
please remove the empty line, it is not needed.
We should add `klog.Warningf` to the `Get`, `klog.print`, `Get the sync-msg`, `Get`, `Kafkahive.Send` and `Kafkahive.develop`
add a default value,Promise,Promise in session.php
This is an interesting change that makes sense.
do we really need this file at all?
I believe `spawn.h` was added by `#include` and it doesn't have to be in `spawn.h`. I don't think we need it here
This is a bit unrelated, but the rest of the code needs another refactoring.
Is there a test case with it being added to `libkbfs.SingleTeam` in order to use this?
We could probably have a `post_email` notification in some way that could be used here.
i guess it's better to do something like `'<=` and do: `'<=`
This is not necessary since the return value is zero, but the check will not be zero.
I think this might not be necessary. `opts_.scoped_enums` is a pointer and so `user-facing` is the best option for the Vector type. The `scoped_enums` should be checked for the user-facing.
Why change the key and value here?
This could be a constant.
Should this be named `blitzPath.join(__dirname, 'node_modules', 'next', 'dist', 'bin')` instead? It could then be `blitzPath.get('path')`.
The `else` should be indented, otherwise it will be `nil` if `not_found` is set.
Can you use the same error type as in other places in this PR?
I think it would be preferable to use the `LICENSE-2.0` name instead of `LICENSE-2.0` for the other Licenses.
Do you want to add this to the other tests where they're using the `NullMessage`, rather than having it actually pass?
Please add a space before `if not isinstance(as_index, bool):`.
why not `store($currentVersion, $newVersion, ConnectionInterface $con = null);` and remove the `master` here?
I would have added a `common.json` file to `package.json` and then do it in `init()` instead of `super()`.
Is this a typo? Can it be moved to a separate commit?
I'm not sure why we need to set it in the message. We need to check that the `encrypted` is not nil.
This should be `eslint-extraneous-dependencies`, not `eslint-extraneous`.
Use nested module/class definitions instead of compact style.
Should we add the `ClusterInfo` field here? We are going to be able to reuse it from `join_api_calls` and set them to `null` in this PR.
why the rename? is it better to name it as `CloudAuditLogs` or something similar?
Can you please explain why this is required for these two calls? It looks like the rest is wrong, but I think this will cause the NPEs to fail (because if there is no current code).
This is the only use in our tests (as I see the usage of `axe._cache.clear()`), but it seems we don't need a `getClass().clear()` anymore.
I think the idea of not using `when` here is to reduce user's child content to the child, is that intentional?
Is there a better way to do this like `Causef`?
nit: `java.util.List[reason][.File]` is never used.
please add the trailing whitespaces (line 546-1228, too)
You should just make the error message something like `return undefined;`.
Nit: I'd prefer this not to be a new line, instead of the `bhTarget` line.
I don't think we should say `/<bucket>/object` here - we don't want it to be in the `config.PORT_S3 ` in `else`.
What's the difference between this and `isJavaVersionAbove9()` ?
While we're at it, I'd just make the result of an `&` (since it is the same as the result in the first place) and use that in the result of the default value (like in the first place)
Is there a reason to not use `fmt` rather than `llnl.h`?
I wonder if we need this in the future. The package is being called `github.com/pkg/errors` and the package is still in `pkg/errors`.
Is the cleanup needed?
I think you'll need this change
why remove this?
I think `new RuntimeException(String.format("Failed to parse failures XML: %s", sourceReport), e);` should be fine.
Should we make use of this constant here instead? `user.Create()`?
Why this change?
Usually we use `setJavadocComment` to preserve `line` as well (as opposed to an `s3`).
I think the name should be "os" not "operation" or "operation not supported".
Can you explain why this change was made? We need to avoid duplicating the code to understand this.
if we have a new `Unit`, then we could use `mvmv` here
This import seems unnecessary
how often is this delete delete used in this PR?
I assume this is the condition that the path is `boolean` (so it is always `false`.)
Is there a specific reason for removing these 2 bits?
this shouldnt be true right? `body[:sty].ssh` should be false
Why make this change?
Please add `bool` to the config.
nit: updateNameMapping to initialize fieldNameMapping for consistency
This should be `IpcEnv()->getAllConnections()->waitOnAll(0);`
Maybe we can use a better name for this?
Doesn't look like you're calling this with a lock on `ToInt64`, just like you did before.
We should add `// check if transform style exists (don't forget vendor prefixes) { return true }` to this.
Would be better to use an empty `if` block.
Remove the line break.
We should also add it to the namespace namespace.
I don't like this name -- there is nothing to pass without the test. This seems to be the only usage that can be used here. I think a more general test is fine.
Is this a breaking change for the default behavior? If not, can it make more sense to use a `sizeof` instead ?
nit: could we use the more explicit name? `PathPath.getPath(DB_NAME)`?
I think this is a regression. The `#toggle` method should always return a non-null value.
should we set the HashID in the godoc?
The `test_pool` module does not do anything, so I'd just call this function `self.stop_pool()` in each test.
I would move this to line 167, since you're using `page_command`, which is not needed here.
In this function, we're still using the function in the constructor, so it would be better to just check that the field is an `object` value. (I assume this is a bug fix, but not something to notice)
I don't think we should have a default value for this here, since we are only passing the current configuration.
I'm not seeing where `VoucherInterval` is used?
I'm not sure how to test the span here. The span should not be used in the data-service, right?
nit: you're using this function here and above as you're using the `GetRollupContext` function.
I'm not sure what this is for?
This is a bit confusing. Why don't we have two functions, one for each item and one for each one? I see two functions, one for each item, one for the one for each item in one item.
The config name should be `getClusterStateReader().readConfigName(collection)`
Would it make sense to move this method inside `filterFiles(fileFilter)` so that we know they are not null when they call `getMetadataFile()`?
Why is this test needed?
This will cause a crash on the process. You might want to check that the status has disabled logs.
Should we do this in a `test` function?
Why are we adding here? I don't see anything wrong with the previousDataLoaded check
Is there a reason for not making `world_comm_ptr` directly a `auto_type`?
Wondering why this was removed?
Remove empty line
I would keep the old version here.
`has('unlink')` is always false
We don't need to pass a `instantans` value here since we're using it directly in `_getDom`
It doesn't appear that the `||` is not the same as the `List`. Is this intentional?
We're going to be moving away from this file. I think we need to be careful about the number of bytes of `Cobra` to make it clear in the future.
Isn't there a way to make this an actual plugin? This would allow the plugin to be a boolean and the plugin has a name. It would be better if we could just make this the same one as the call.
Can you use `goudl` for this?
nit: remove trailing white space
I don't think that it should be here. In particular, the `daosError` call will be used as more places in this context.
Doesn't this mean that the `cv` key is in `get_temp_file_logical_keys`? It doesn't really matter.
This seems not necessary
Use `Config::is_unconstrained` instead, we will be able to get rid of the `bool` as well.
`apply` doesn't seem to have any meaning, so you don't need to use `self`, as you are already calling a function in the method.
Can we delete this and use it in the function instead?
I would say that this is just some guidance that I don't think you should be setting it to 0.4
You should import `Application` from `WebEngineProfile` to `EngineProfile`, and put them in its own module.
Can you try and fix the indentation here?
I'd prefer we don't have to expose this as an argument in the `RuntimeError`, `springshops` and `status.connect`
I'm pretty sure the string of this logic isn't right. If the manifest is nil, then it should only be returned if the manifest contains the manifest
I don't think we need a default here
Why does this need to be changed?
`javax.ecs` can be removed.
This seems unrelated.
We should probably add a file to the source code to be used in the future.
This is the only place where we create path, is this a problem? It's not clear why we need it, but just in case we do have it here.
What about `continue 0`? I don't think `lax` is needed, just wondering if we should just default to something more specific to the place that's used by the place.
There's a `ITraceSession` member in `terminalterminal`. Should this be made private?
Why is this `apiextensionsv1` and not `k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1`? Why is it necessary to remove the `k8s.io/apiextensions/v1`?
this test doesn't match the rest of the PR
Why is the array needed?
I think this should be `Map<...>`
Isn't it possible for this to happen in the wrong direction?
this should be `cloneURL`
Can we avoid the `--domain-filter`? It's not the responsibility of having this on the `--provider` interface.
I don't think this needs to be here, you can remove the `var_settings: bool` and `var_settings: bool` altogether.
Do we need that call `tracerInstance`?
This can be removed now?
I don't think we can do this since `state_block` is a part of the block's `type`.
We should keep the `DeleteFiles` call here instead of removing the actual `gopts.Quiet` call.
What's the difference between this and `ROW`?
`final` not required.
Should be `@private`
why change this?
Is this the correct way to get the output from the directive? If so, we should probably just use the `classification_1` here instead of hardcoding them. If you want to add an example, I would like to avoid using `Source_name` in the `_create_data()` function.
This is just a small question, but how does 'wrapper' come from? Is it possible?
This import is unused.
I don't really like the version number, but I would expect a separate version to be used for the other packages.
I think we can change the arg arg to a `Task` to return an `int` instead of a `Task`.
Please add the copyright header to this file. It's not needed anymore
I'm not sure why we would want to change the type of the string here?
We might want to use `#encode_ResourceState_OTHER` in this file, too, since this is the key that is not a string.
can you add a typo in the name?
Do we need to change this for all existing `-convert-array-to-keyed` files?
this file is missing the license header
should be `@Nullable`
This isn't the right place for this. You should just remove the `_N` variable and just always print it at the end.
@stephentoub should we move this to the managing user now?
This seems unused now.
Please remove the trailing period in the last argument.
This test does nothing (using the testing testing testing) but now we should be testing the testing testing when it does not exist.
Why is it not `gofmt` or `gofmt`?
you should just set the default to the "WorkloadIPs"
Can you make sure the service is never used?
I think it should be a bit clearer to use `fileset.dest` or whatever.
Why is this necessary? I see no context being added, but the `nameOrHandle` is only called once in a few places.
`topscope_vars` doesn't need to be changed because it is a plan?
@jcotela What's the use of this?
Should we add a `NotImplementedError` here? The content type is the default, which means we can't just get rid of the `PERController` from the `PERController` list.
I think the `.ls` check here is unnecessary since the method returns a boolean
I'm assuming this is the one you wanted?
@jridgewell It works with this change because `\d+/.test` didn't work, because it's not a dependency. This would reduce the size of the `@\`. Now that you have to update this line, you'd be better: `^[a-zA-Z0-9]+$/.test( webDataStreamID );`
This should be in the `err != nil`, not in the `err.Debugf`
Why do we need a separate `states` property? I believe we have a field that would have a `states`?
Isn't the `t.SplitN` used anywhere?
wondering if the default should be `<` instead of `<`
I'm not sure why you would want to do this. I'm assuming you have the "is not nil" check above here.
It's a little strange to have a ` convolutionMetadata` field, so it should have an `LastWriter` field. It's an internal field. I would prefer to have a ` convolutionMetadata` field, so that we don't have to use it everywhere. Also, this field should be `LastWriterWriter`
Why do we need to have both c->maximized and c->maximized? If we do that we should just use c->maximized
why remove these?
Can you explain this better? I know it's just making the list optional (like you did for `key_string_types`), but what is this doing?
I'd prefer to have a separate function, but we should not have a function to know whether this function is going to be called.
what if numAttempts was maxAttempts?
I don't think this is necessary since we are using `.String()` twice.
I think we have to move this check to the top of the file
Layout/MultilineMethodCallIndentation: Align .to with .test_example on line 58.
I'd like to ask if these are optional at the time at the end to keep the time at the time at the start.
>fine [](start = 31, length = 10) Could we use `a2` instead of `a` to get rid of these 2 lines ? #Resolved
Can we remove `protoFile` from the builder? This is a bit odd, as it may also be present in the builder, but not the builder (it has been set to `null`).
I guess this should also default to 1, and should be `SERIES_DEFAULT_NAME = "0"` for consistency with other tests as well.
Would this be better named `num-status-check.max-wait-ms`?
Should we be using `usingUnifiedTopology` here instead of hard coded value?
This change doesn't seem related to this change.
Why do we need this?
Should this be `[UnsupportedOSPlatform("browser")]`?
These lines are a long file, it's better to be removed.
Can this just be `Http2Key`?
@aghassemi I think this should be `undefined` instead of ` getParentWindow`
Can you do a similar change in `isCpuSet()`?
Can you remove this line?
can you move this to the top of the file?
Does this test have to be updated now?
Think this is a bit confusing, it's not a blocker. What about "Duration".
Line is too long. [81/80]
This isn't super important. Can we name it "displayResources"?
Why are we converting to a final variable?
I think this should be ` ZipTime>`.
I think this is still wrong.
Can you move this into the if below?
should we also need to check this?
why is this removed?
It might be a bit cleaner if we made this a default method, e.g. `t.Map == protocol.CompactCertTx && t.Sender == transactions.IsZero()`, and then just call `t.Fee.IsZero()` to get the transaction, if it was `nil` then it wouldn't have to be a default.
This property is already set on every invocation. We should make this the same property as the X509509Certificate (which is set on the UI)
why do you add them here as opposed to just setting them?
Should we not do this anymore because this is a non-Ready case?
I'd rather you set the network::NetworkUtils::getAvailablePort() to default to a specific device object. It's used in other tests, and it's not necessary to pass the network.
This is unrelated to the current PR. Can you file a JIRA to review it?
I'm not sure this line is really needed. `world_repop` will always be 0, and `world_repop` always will be 0. So we should only be sure if `world_repop == 0` is true.
Since this is now unused, can you remove it please?
This is already a part of the fix, right? Can we have a test to verify that there is no such a jira to add to it?
We should avoid the ` isUndefined` variable here, since it is always specified in every decimal. We should also make sure that the order is in all decimal available in this case.
I'm not sure why these are not being used.
This is a very unrelated change?
I'm not sure we should have an option here or is the one to think about it.
I'd prefer not to keep the old variable as it's not used anymore.
We also should be using a flag for consumer create failed, but not sure if it's a problem. If you have any policy on how a consumer does not create a failed and we should get it back to consumer.
This is where `Supported_TypeClass` is used in the code.
Should probably be `pin` now
It is not really a good idea to include this TODO, but we can fix that later :D
We should probably check that these are added before merging.
This was a bad idea as this only gets triggered once and is on the next line.
Should we check here if a pc is present, and the default is set to `false` ?
Should this just be `directConnection not supported with SRV URI`?
I would still have used `float-float-float` here.
should these be public?
I think we should change the doc here to `site site`
this is an improvement
I wonder if it should be called `propagateDeadlineToChildren`. @jglick will it be clearer to just do the branch branch when this node is actually shown?
This is just to check if the target is `true` but not `DEBUG`.
Shouldn't this be inside `getBytes(StandardCharsets.UTF_8, Math.min((0, Math.min((0))` and use the other similar code for the other similar methods?
We're not really using this anywhere... can we remove this check?
This should not be a static method.
if mask.dtype is np.bool, should compare to `mask`
I think there's a better way of getting a better error.
It'd be good to add a log message that will be helpful.
why are we setting this tooptional?
Should be `return`
please revert changes as these lines are not related to the pull request
We can't use this class. This class is never used.
I think we should be consistent and not pass a client function. The code that returns a token, which has this permission. It is a client-side thing but I'm not sure what you want here.
You could write `include_existing_accounts (request.get<update_existing_accounts", false)` to be consistent with other places.
Is it necessary to change the name of conntrack table anymore?
Is this not an issue? I don't see anything in the commit message
You should move this to the `MethodTransformerContext` class (line 219).
Can you add an example of how this method is used?
`pip.utils.handler` can be replaced with `pip install`: `pip._name to `pip._name` can be replaced with `pip._name`
This will need to be a warning if `nameFile` is nil
We can probably set this to something that needs to be done in the `G` branch. And this function can be accessed in several places in this PR, so that if someone is going to have to set it to an error (which is what we're doing).
Why do we want to use backups instead?
this shouldn't be necessary. We're using the list here to make sure this gets done in every single place.
This change breaks the test. This is the fix to the PR.
this can just be a `config` attribute, right?
Why this is not logging?
Is the idea here that we will only return error if `sampleHeight` is `None`, but then we need to return that error again?
can we do closeTime.Before(startTime) here, and in the closeTime below?
Nitpick: please move to the next line
The parameter is not aligned.
@bzz Sorry, I don't think we should be changing this. There isn't a reason I'm doing this. It looks like we are not adding this to your branch.
This change should be reverted.
should we also remove that case since we are not using it in the `if exp.super.StressChaos.ContainerNames` function?
I think it should be an enum instead of the iterator. Otherwise, we can get the iterator from the queue.
Why can't this be done in a debug log?
You should update the tests in this file to include the new tests.
I think that we should add `max_retrials_to_get_pods` to the `K8s` model
What does this mean? Does it need to be?
This was changed to make `max` consistent with other similar instances
This change doesn't seem to be covered by tests?
Is this something we can do? I think, we may want to keep a connection, at least a connection_config[:http_adapter]))
Why is this function being changed?
I think this should be `@proposal`
Why not using the license header?
@kennknowles How do you get this change from the code?
should be an actual fix
why this change? I guess this is a change in behavior.
Nit: We can make use of `MakeFBOsForExistingJournals` here.
I don't understand why `Copyright 2017` was changed here?
I'm not sure we want to make sure that our `boost` parameter is indeed the case that root has a `node.logger.try_log`...
I'm not sure if the best way to fix this is to use the `./pants help` module and let the `containerContainsText` prefix be updated to the `_` of each package. I think it would be easier to find a way to test the value of the role (e.g. `./pants help`). This way you can make a helper method in `containercontainerContainsText`. If the role does not have to be fixed, I think you need to fix it.
I guess this needs to be `sh.export 'PATH'`?
Nit. The reason for this is that there is a `assert.h` already that is for `assert.h` that was the correct one. The code for this is only needed for `stdlib.h` to handle `assert.h`.
For better readability, we can put this in the `isResolveter` method.
Shouldn't this be an `int`?
Why is this a pointer?
You can remove `!` altogether since you are in other places.
Is this a bug fix? Or was it added to the caller and it's already being called here?
I'm wondering if we should just rename this to something like "IConnectionLifetimeFeature" or something like that to be clearer.
Maybe use the `getCallName()` function instead
is this used anywhere?
This would be a great time to use the old format format for this.
This should be a separate const
This should be `nil`, right?
The name "env" should be updated to reflect the new name.
The current code looks like I've been adding an explicit new function to create_persistdir() that does not use the old one. This is a new function that was not written to the old one.
Was this just a mistake or in another PR, or did you test this?
Can we use a different name than the iframe name?
I think we can move these tests to `export` as they can easily easily change the variant/form/export.
Is there any concern with logging this file in the UI? I don't see it.
Should we do this check only for the value being set on the `DefaultUrl` model?
This is a very specific thing and I'm not sure what the best number of synchronization is is about.
Should be `replace(iv.version, '.', '') as unsigned integer)`
should this be `const MAX_HISTORY = 1;` ?
is the target data set to a offset somewhere? doesn't seem to remember?
Why not use the existing method `BaseTree` instead of throwing an exception?
The name `<=` is a bit confusing, maybe "use" or "true" ?
This is a nice improvement. I would rather keep the original return, and keep the current code together.
This needs a different issue (e.g., a different key)?
I'm not sure this `if` statement is really necessary.
This should be `updatePreviews = current_local.type in Blockly.OUTPUT_VALUE` to be consistent with other places where other than previews is created, but not previews.
This should be `v1.vm2.LabelSelectorRequirement` (and the one above).
what about `if sample-r.minRTT >= ackDelay`?
These ones are not in this file, but I don't think that should be here.
This is not needed since you need a admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin admin
Please add a description of this error message.
Do we have a test for that?
If we're not testing the error here, could we just remove this function entirely?
remove the empty line
@steveharter, @stephentoub could you review this change since you're now using a small name which is a bit more descriptive? It's a bit unfortunate to me, as I can see it's an unexported change
nitpick: Can't the ternary be moved to line 121 instead?
Is this change needed? It is not used.
Does this also check the `opnd_size_in_bytes(nnd, "OPSZ_CACHE_LINE != 64)` call?
Please don't use import with empty lines.
this is what I meant by: - [:id, false] (2, length = 1) I can't get it
I'd like to use a flag, but I guess you can make sure you don't need to return a `nil` here as well.
This looks like it was added for debugging - but is not needed
This should go further down in the next call to `setAll`, and be consistent with the rest of the file...
Use normalcase for variable numbers.
To keep the naming consistent, you can use a `@since` (or something like that, but also the naming here is more readable).
@t3on I had to remove the `if` because they were deprecated in the future.
I think the `_set` method should be named `('PolicyNames', policies)`. The reason that this function is to always use the new `formNames` argument, but in the case of some internal policies that are not being used, this function is a breaking change.
suggest to remove this function entirely.
The indent is wrong here. `newMode` can be `break` because if it isn't then it will be the same as the variable variable `newMode = PasscodeMode.Check`.
Can this be changed to 0.2 instead of 0.2?
"the secret key is not kept private/described" (with a period)
We shouldn't be using this, this should be removed.
I'd suggest to remove this line.
shouldn't the other line be changed to `get_handler_registered()`?
Block has too many lines. [32/25]<br>Use 2 (not 4) spaces for indentation.
`checked` is a `string` so this could be `string` (which would be more consistent with the others)
Lint/UriEscapeUnescape: URI.merge over string interpolation.
I think the interface is still incorrect here.
Can we put it to the context context instead of just the `MainActivity.NAV_DRAWER_TAGS`?
Move these to the top of the file (as it is already there in `#define MathSqrt`)
Why are we no longer adding a visibility? Is it not possible to have a visibility visibility visibility? I'm not sure this is the best way to get the visibility information.
Is that the right way to get this behavior and only log it when `entity_list.GetMobID` fails?
I think you want this to be configurable
I think this is not the only place where we need the transaction prefix for all cases.
This seems to not be used anywhere else and is probably just for testing.
This should be `--rst` now.
Any reason this change is necessary?
Metrics/BlockLength: Block has too many lines. [30/25]
I think it was fine to do this, but I don't think there's any need to do this for this.
Did you mean to add a call to `remove_write_guard` here?
This seems like a duplicate of line breaks.
I would use the constant here, not hardcoding the full name (e.g. `sprintf`), but I would add some details about how to use this.
Please remove all references to these variables
Why do you use `import sinon from 'sinon'`?
I don't think the number of arguments is needed if you use a different defaults
why isn't this using a `attacher.go`?
remove this file since we do not use it anywhere else
why is this not the `continue`?
I'm not sure this is necessary since we're removing the definition of `assets-wrapper`. I think it should be ok to remove this one and remove the other one, otherwise we're removing the `assets-wrapper`.
nit: I think this is a pretty common pattern for `change` as it seems to make more sense for one to have this method return an Optional. `change` is not the same as `(JObject, projectJsonRoot)`.
I think it is better if the warning message should be: "Histogram is supplied as a tuple:"
It looks like this is not needed anymore (as is done above in the `test/before` block).
This one is not thread-safe. We can just say _that_ if it's a non-ASCII one that is the type of it's "when the body is empty".
It seems we can leave a TODO to remove the R_AS_INT function from the name of the function (e.g. `LGBM_SE data_idx`) since it is an instance of the other function (e.g. `data_idx`)?
This is not a public API of the `getMedium()`.
Why do we need this?
As far as I know it's not your change, but is it worth moving this to a separate `Validatecost` function and then we can remove that function altogether, and just have a `match_cost` function which has the `match_cost` method, and use that here?
can we use `assertEqual()` instead of `assertEquals(int(count))` ?
@jridgewell It should throw a `NullPointerException` in case `GET_ALL_SESSIONS` is not `null`. It seems we should be checking `null` here.
No. Is this the same as we are changing?
Is this necessary for the password? If yes, why not just remove it?
> This won't have to be a problem. I just saw that we have a cast on the size of the array, because the size of the method is not that important as it's not.
What's the motivation for this change?
I would rather do it in a try.. catch, that is a little strange, because in the case there's a requestContext and it is a bool
@jvillalobos Should I ask why this line was moved?
why not set this as a constant?
Use a guard clause instead of wrapping the code inside a conditional expression.
Why is this needed?
Just a thought, do we really need to use `v2/klogr` here, or is this a leftover from a previous PR?
I think we should just add a 'Config' flag to the new app. If we want to keep it to the existing app, we can change this to `regionUnknown` and `regionUnknown` to be consistent with the rest of the app.
Why is this being changed?
should be a `protected final`
this is wrong. The previous version is "test" in the user. This should be "error_message".
what is the attr_name for?
I wonder how this solves the bug (I have seen the `LOCKTIME_THRESHOLD` value set by `500000000` being set in the constructor and it looks like the `zdb_THRESHOLD` has an `zdb_THRESHOLD` field, so the `zdb_THRESHOLD` field should always be set to the default)...
no wildcard imports please
This should really go in `pkg/api/server/auth.go` since `String.Sprintf` is not a string, and this should probably be changed to `api.server.go` or something.
This should be a should be `debug` with `finest`. If `finest` is not `null`, the exception should be thrown.
The previous PR was merged as the last argument.
should this be an additional exception or just an additional exception?
This is not a good practice. If you do want to extract this into a separate directory it will be easier to track the user to modify the constructor so it gets called in an `progressindicator` object, and then pass the one from the `progressindicator`.
Can you make sure the import is not needed here?
is it worth calling `UnitUnit.VarNum()` only when it's present?
This could be an explicit returned `exists` if the streams still exists.
Just wondering, how did I miss this?
Please do not disable these 2 usings. This class is only used for Nethermind, and the changes in this file have been moved up to your PR. (It might be better to keep these 2 usings in your next PR.)
I'm not sure it's the right place to check here. Is it a bit of a very common case?
Can the same method name as the one above it.
why removing this
Could we make sure `block.call` is nil?
Why are you passing the `async` type here?
Not a fan of "using it and de-indent all the code inside it"?
same here, should be `stages`
This function should return a localized message and we can return an error instead of passing the result from the pending pool.
Can you make the assumption that the `context` is in the context instead?
It would be helpful to use a short version of this package.
Please add an example here to track the fact that the new model has only 2 distinct distinct fields.
I'd rather have a better error message here, since these two options don't match.
This is a test I think
Is it possible to get a redirect from the listener instead of being picked up? What about creating a `/products/13-ruby-science` and then calling `/products/13-ruby-science` every time we get an absolute path? The latter way, it would be much better to get the redirect from the listener to the user.
why did you rename this one?
This seems like a bad merge. The next time I was running `opts` was called, it wasn't a stack, but it doesn't have the right idea. I'm not sure how to fix it though, since we have `opts`, I think it's better to keep it as a stack, just like in the `isFLFL` method. That would be much easier and more readable.
should we make this a private field? I would say that the `user` field should be named `user_reader` instead of `saleor/parsed/user.rb` as the name is confusing
This should be `history_depth(10).init();` because we are calling 2 times where `history_depth(10)` is true.
The original error is returned as the first error. Is that intended?
what is `t.root.lookupPath(buffer[:0], cidr)` supposed to work?
Please rename L20px to L20px
Not sure if you can change the default behavior, it seems that `EnableLogging` is the only thing that affects `flag` to be `true`.
Is it possible to create an issue for this?
I think we want this check to make sure the template is in `/afaict` or `/buyict` (or any location of it) is in `log.url` (and the local file) so we can use this if-statement.
This would need to be updated to not check the `san.ips.0` and `allocated_pem`.
this function was unused.
The `logs` can be removed.
This could be a bug. This will fail to error, right?
Is this related with the change?
Is this an accidental addition? Isn't it a "just a double check" part of the previous `if (!` statement?
This is the only change that will break existing users.
This should be `:=` and not `:=`
I believe that this change is not safe. The method `get` returns a null value in the method `certRecord.getHostName()`.
title is not enough, it should be t.account.title
I think that this is a bit confusing, we should have a look at how this is called.
Please remove this line in the other file.
Can't we just use the `dict.length` instead and use the local variable directly in `verify_object_fields`?
Maybe also check in `validNetworkMode`.
Do we really want to install the package from the filename at some point if it's no longer a response?
Could you use `blockresetHeaderFields` and `blockresetHeaderFields` everywhere in the `super.go` file?
We should probably have some sort of utility function like this: indenting an arbitrary side effect for this PR as well.
Please update this field name to reflect the new parameter name
Do we want this to be a module parameter? I think that's not a good idea.
I think the changes to the file should be removed from the PR.
@mfojtik why are we going to use `reportArgs` directly here and remove `reportArgs` entirely?
Why not keep the `@var` here since it is only used in one place?
No need to call this `errCh` since its already called by the write and we can save it to the backend.
let's also change the @checkout.user_email method signature, as it's a string.
This type is no longer used?
why not leave this as-is ?
It'd be good to rename rename_drag_icon_update_position to rename_drag_icon_update_position.
Nitpick: Can you put the device before the last argument, so it's clear what the purpose is?
Just a note that this should be safe to do, but the config value should not be passed in as a field. I'm just thinking of changing the behavior here (and it seems like this would break some of the other tests).
Can you use the `!$url` var instead of calling `setTrustedHosts()` inside `#addHandler(...)` ?
@smarterclayton now we are not testing this as the default for ClusterGroup.
is it possible to use a different label type to overwrite the label of Karma tests?
Can we just return s.Close rather than let the caller do it?
This should include the repository at least
Does this need to be done after the `//` in order to remove the `if` block?
This is still the version of the package. I think it's ok to remove it, but it's also something that was used by the v1 code below.
I think it would be better to add this into the `_supported_metadata` method. Then you don't need to have it here.
Minor naming nit - `debug` is clearer.
Our style of the rest of the code is to have a line that makes it sound like `if (endif) ...` (or just `else`) will always be true or false) so the code will not be obvious that this is not the case
we should make sure to add delay and not only delay if it's needed
I think we can keep this line at the end of the lines.
Why are we using `distributed` in this file?
I'd keep this import as it's not used anywhere.
This will need to be put into the `settingsSizerHelper` module for the `version` module.
I think I would put it in a field.
I would suggest moving this to the `Rex` model
Didn't know the meaning of `DateTime` so that this can be an `public`?
I don't think this change is necessary. The generating/setter error message can be more descriptive.
Can't you just import this package directly from the other packages?
Should it be updated to reflect the new API version here?
who uses this?
Just to confirm - this is a testing testing testing, right?
Please use `getImplicitRole(virtualNode)`.
Is this really needed?
do we really want to keep the user in the past? If so maybe it can be set somewhere else?
`isEth66Compatible` isn't used for this.
I'm not 100% sure about this one!
This will probably get removed because of the actual error.
It's better to add a space after the comma.
why change this?
@deads2k this means that we are not breaking the thread safe lock?
This can probably stay as `from astroid_version import version as astroid_version` since the version is already in there
Please revert this change.
Is it not enough for you to check `contains` for `cloud`/`get`, or can this just be `contains` instead of `contains`?
Is there a check for `LobTgtFileFlags`?
This can be `LOG.finest(String.format)`.
Do we still need the SNI hostname?
this is the bug you are changing. It was done to make the same update as the other changes.
Is there a better way to avoid this? (I see the code below in the file that I'm worried we don't need it either)
Can we move this to a method in `utils.of`?
This is going to be overkill, since `getChild` returns an boolean and not a boolean.
Does the `Interceptors` have a reason to change the value for both a `*` and the same number of bytes? Is it possible to move this logic up to the `Interceptors` package? I would like to keep these changes in a separate PR though.
This should be `e.Rename(etcdDBDir(e.config), oldDataDir)`
This is the default in libbeat case, we don't need this, right?
same here, can you just say `Eventf`
Is it possible that we don't need to call the API anymore?
Why do you remove this function completely? The code below seems to be missing a `var DecoderByName = decoderByName`
This should not be necessary. You should check if the value is zero before calling the method.
I'm not sure about this change, but it's not a problem if it's a `Object`, right? It's also possible it's going to be simpler to just call `init()` on the `participant_`?
This seems unused and can be removed
The application value is not set when linux.clone-reset is not set. This means that the application." can't be added if it is not set. Also, this doesn't need to be made.
This doesn't belong here if it doesn't exist. It's probably better than adding a helper for it.
Maybe `hasAttr` should be updated too?
Please move these imports into the `os.path_path` module.
Can we make this `map(PrimeNumbers::factorization)` and remove the `.reduce` call? I think it will be cleaner to just have a method with a default for `2`
Why is this file public?
Hmm... this doesn't look right. It seems like the exception is being thrown in the test and the exception is not in the same thread. Why is it a separate thread?
I don't think I've ever seen this used anywhere - can it be a static import?
Why is this protected?
There is `warning` in this function.
Line is too long. [87/80]
Why are you removing the import import from the changelog?
this is just wrong since the field was set to 3 now.
why changing `_clear` to `_dump_online_weight`?
This is the only one I'm worried about about, but it seems more a bit of a brief way to do this. Can we do a simple `return intermediate := ...` here? Or is that an error? It feels like a bug in the next line.
Do we really need this as a separate PR, as it doesn't seem like a good idea to have it in the `Killing` list, so that we can just remove it?
How does "heap_snapshot" get come from a pipeline? Is it not a user-facing url?
this is not right, as the video is in `purchase_return`, so why do we need both `link` and `current_video` ?
Could be made to set the `updatecompleted` property
did you mean to leave this in?
@jridgewell It would have made it a lot easier to read if we used `@SuppressWarnings` for the `T` parameter as it is in `Object.contains`. I think it would be better to remove it.
Did you mean to leave this in?
this change looks like a mistake - is there a reason the import is not required here? or can it be removed?
Another `&&` candidate.
This block can be defined inside the block below.
not a typo
This seems to be unimportant.
we don't really need the full stats in theory, let's keep them in theory for now and make an update on the other time
I think this is a bugfix. I'm not sure it is possible to call the propDialog in a different test.
We should add more information on the normal data types in `ENIType`, not `default`. The `type` field is the default, so we need to introduce a `ENIType` field on `Name`.
I think this is still not correct. It was supposed to be: - When I see it, you need to specify this in core as well. - Why is it OK to specify it in core?
Can this be moved up to the top?
Why? Is `stage`, `None` actually the issue? (I'm not sure if that's a good thing to have). What about the pylint disable disable? It seems like the pylint disable is the case here.
Shouldn't this be the same as the rest of the code?
Why not keep the signature of `declare(strict_types=1);` ?
Why do we need a separate set of different types?
I think this should use a set instead of an empty array
I don't understand why `opts` is necessary. You're returning converted to `true` when it is the same object.
We can probably just pass `res.cancel()` here.
The `key` already exists in this case. The `collectChannel` has to be `PaymentChannel{}`.
this should be removed
This is a breaking API change so we shouldn't wait for the user to get this zero. Also, should we allow the user to wait for some kind of statement to wait for potential failure later? If so, should we wait for it as well?
Can you add the GROUPID field to the `java-chassis` class so we can get rid of this.
Is this change required?
If the CLIENT is not being set to `true` then this will never get called.
why is this needed?
why change this?
> If MapLen, the DecodeMap will be called. It should iterate over the fields of the field names. It should iterate over the value. This is a very expensive number of values that are not shared across all values in `value` but it should be used to specify the field names. So maybe the value should only be called once per field names or not.
`lastBlock` is not necessary, as it is now passed by c.blockInterval, so this was a bug.
why not the static import?
@jridgewell I've added this to `gulp help`. If that's the case, it'll make it a bit easy to do. The rest of the test is not correct, just curious.
This is the fix
Why the constant and not `1`?
Doing the ctor and non-hash have a single-manager type?
This is a bit awkward. Why we need to pass the same token here ?
Is there any way that we could make this a constant? I'm not opposed to making a copy of the list, but I think the list may be correct.
@matt-gcpbroker is this a mistake ?
This line is still a mistake, and should be indented by mistake.
Can you check `self.assertTrue(abs(nrmse.getMetric()["value"]-target)\)`?
This shouldn't be necessary, right?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
What are the goal of moving this into a struct?
I don't understand how this is supposed to work. What do you think about creating a constant somewhere to store in `with_depthstencil_attachment`?
Can we make this public or at least have it be configurable? Or is it the only one we have?
Can't we just delete the code?
The test is failing because of this because the local C++ test does not contain C++ too. The test here is failing because C++ test is missing the test test in `pySp`, which means this test may be failing in some of the test cases (which I'm not sure about it, but is not really worth testing anything) to use C++ test.
This should be `heaviestTipSetCh: c.HeaviestTipSetCh`
is this a bug?
could we use `debug` directly here?
The previous code had an issue to track this, but if this happens to be an error, it should probably be fine.
This should be `defaults()` not `edit()`.
Can you please remove these 2 lines?
This should be moved to `dispatchPipes`.
This line is too long
This change looks incorrect. I think this change would affect all other tests, if someone changes their implementation.
@cra0zy - Can we put this in ProxySettings proxySettings as a property instead of a property? This way we don't have to create it again as a field. I would suggest to use it directly in ProxySettings proxySettings.
What happens if the cache is None?
remove this line.
rm empty line
@jomalStrehovsky - Why did we get away with this? This seems to be a bit hard to see. If I'm wrong, we should add an `if (reg in DR_REG_CNTVCT_EL0)` to `index`
why default default is 1?
I'm not sure this is needed anymore, but this isn't the only difference in the code. The first call to `rbQValueTo` throws exception.
Should we do something like `// 1` here?
This is not a magic field. The only caller of the logger is "hynek/structlog/issues" so the logger should only be outdated. You could make a note to move this to the top of this function.
The member variable `ParentWeightNum` was not used, so the member variable still has no additional `ParentWeightNum` but is not used.
Just curious - what is the difference between `require.Len` and `t.pm`?
I'm confused by this change. If you're using the CSP, you don't want to include the `jelly_mod_path` in our SDK.
nit: we don't need this line, it's in minimal mode
I don't understand this change. The problem is that this is only being used in the user's local machine, so nothing wrong with it is just being removed. The problem is this is, is it just the actual problem?
This should be removed, it's not used.
You can add this line back in.
Nitpick: I don't think this condition should be necessary. In fact, I wonder if `this.splashWindow.close()` should be called from within `amp-story-core` class and the `instanceof` class is not called.
I think this should use `1.31` instead of `1.31` for the version numbers.
where will the user get a message? if it fails then it may not get a message. Shouldn't the user print the message?
I think the GitHub-index is used in the other places, as well as the GitHub-index. I think that it could be a problem if there is an issue with GitHub-index in the view, but I'm not sure how this works.
Please revert the whitespace changes.
shouldn't you set it to `multiStepBestPredictions` instead?
NIT: please add a space before the closing paren
I'd make this `} "Multi paths not supported."`
you can get the right error message from the `got` to the function. If it's not provided, then use `float := := make(chan []*pubsub.Message)`
Assignment Branch Condition size for mixin trying trying to do a body of mixin trying to do some weird thing here.
This is a new import.
We don't need a full `concurrent` param anymore.
This if/else blocks should probably be before the if statement above that should handle if (!pTexDesc->normalizedCoords) return false
should we add a `def specify` or something like that?
I think the `if` is unnecessary here
Remove empty line.
this should be on one line (line 205) too (and there should actually be a test that checks for the value of `headers=403`
I know this is the first part of the previous PR, but wouldn't it make sense to always set the s here?
"not supported"
We could add a `PoolPoolContext` to the `ClusterMembershipPort` as well, as the `PoolContext` will be removed.
Is there an easy way to test this without `mode`? If not, let's add `Optional.toNull("Lucene80")` to the `Provider` as well.
do we need this as its an enum?
I wonder if there is a better way to do this, so we don't have to duplicate these code in `db_schema_version2` (or maybe even a test that uses them for both cases).
Metrics/LineLength: Line is too long. [83/80]
Is this method still used?
Why the change from public to final? It should be the only change needed.
Should this be `protocolView protocol.Dock`?
We're using `_readInputContinuation` everywhere else here so it would be clearer to use `_readInputTask`.
This will create a new node with the new API to be able to get rid of the existing API object. Is that intentional? The only reason we use this method is if the node is in `StartTrackingTouch` but is in the `onStartTrackingTouch` package. If the node is being created in a `StartTrackingTouch` class, it seems this call would be made `onStopTrackingTouch`.
can you instead just do `elif self.reg_class_agnostic:`?
Nitpick: the name `gocloud.dev` is a bit confusing, maybe `platform.dev`?
Can you explain why this import is needed? Can these be static?
This shouldn't have been called for anything else. If it isn't, I will fix it.
@bparees is this related to the previous PR?
I wonder why this was removed.
`getInstance` should be called `getInstanceEnabled(false)` and remove the null check below.
I am not sure this is an issue, but if `input_buffer_size` is not used, then we should probably just always call `splitInfoSize * 2`.
Should we log the request?
Does this also make the engine's `NewNoopStateManager()` call as part of `NewNoopStateManager()`, and we need to handle that here too?
Should we log that the request has been removed?
Shouldn't we have the `As` function return the expected length, given that it is no longer a `*Message`?
nit: no need to store the values in the field.
What if the user wants to do `/` and `file_dict["path"] == ""` ? I mean, we are just trying to avoid the `\path` here, but it's not really the case.
I don't think this class is actually used anywhere.
`self.created_at.month >= 10` is the most helpful check.
The reason this test is because the test itself fails if we run `make test_generate_build_file` and the test itself fails (without `build_package`) without an empty line -- the file was not working before, and now is the default behavior.
Since you're here, do we want to make sure the auth() and resource will be called multiple times?
Though we can't use `--force-only` in the schema, so this might break compatibility with other users.
This is the main change. I think the record should be a bit more specific and the record could be used here.
I think we don't need this change. The metric is already a float64 so we can just ignore it.
why did you change this?
Is this necessary? We try to avoid the sys.stdin.read() twice.
Can you move this block to the next line?
nit : `batchReadsSparkSessionConf` is a good name to make it clearer?
shouldn't this be `\d`?
nitpick: should this be done after `publishTargetDataverse` to be consistent with other methods?
This will change the `name` string when `TEST_text` is set, right? I don't see it being used anywhere?
I'm not sure how I feel about this, but the `pushOncloud` function is actually not doing anything.
I think you can remove `github.com/aws/aws-sdk-go/service/cloudformation`.
I think we need to add these changes to the code base. We need to make sure the type is not an object in the view.
The `a` tag shouldn't be exposed. It's also a string, so `[]` isn't the right value.
I don't understand why this is set and why it is not set. Why not just set the sizeof(a[0]) in the array?
This is just for testing, but can you explain why we are removing this?
This field doesn't make sense as it will be empty on purpose?
I don't think there is any harm in keeping it. Could you explain how it fixes the issue?
Let's keep the old `action_RANGE_OFFSET` and `action_RANGE_OFFSET` as the last one.
We need a dedicated `require` block here too.
Why do we need both `NewKeyStore` and `NewNewKeyStore`?
this function seems too short, please use a const.
Why is this needed?
no `socks_client` imported in this PR
This function is now only called if `dcontext_t * null` is set.
Could you add a TODO with @fowczarek Can you please elaborate on why and why we should keep it as a diff?
You are using the `errors.go` here
If `d_path` is `nil`, the `/` should be the same for `/`. Otherwise, we'll probably never have to add an explicit error to `/`
I think we should have a different name here. `less_Remote_DATA`
nit: str1, str2 Second -> str2,
I don't think we need the `if` statement here. The `if` statement can be removed.
Can you add these extra lines into `NoHeaderSupport`, since that's how we're using it?
Why is this errors necessary?
add `Unit` to the filename, to keep it consistent with the other metrics?
do we need to have a separate `keybase` here?
I don't think this is right. The context is called from outside outside of the transport version.
Why the number here and not `write.watermark.field` but not `write.watermark.field` ?
I would suggest to use `time.Duration(keybase1.UID)`.
Does it make sense to change the default value in this property as well to return `null` in cases where there are only one.
`tls_start.context.client.sni` is always None. It looks like you're not using this anymore. It would be better to do `tls_start.context.client.sni` instead, and just do the `tls_start.context.client.sni.encode()` if you pass in the the `tls_start.context.client.sni` as a constructor argument.
this can be combined with the other "unknown" in the "catch" block, right? You're using the "unknown".
Can you add a TODO to remove the `name` annotation too?
I'm guessing this is needed for the `OpenvpnPort` and the `Port` interface, not the actual port. The sole purpose of the `add_url` function is to pass `mypy` as an input parameter to the `openvpnPort` so this is more confusing to know if it works for all port types, but it is a little strange because it would also make the change to the `validate` interface.
This method is redundant as `topology.connect` returns false if the collection is not found.
I'm a little confused about this. Is it an edge case that we can set `linked: 'sku'` instead of `t`.
can we also delete the `AliasName`?
Why does it need to be waitHandle?
Why not leave `instanceof` on it?
This file was moved to RSpec::Support. We're going to have to move it to RSpec::Support.
Does this need to be annotated?
Is it possible to call it `Config` instead of `Config` since it's used in the `registry`?
I think I saw it in another PR, but the original version is used by the `viewList` command, I'm guessing you could add an `Error` to `makeTimeout` as well.
I think this should stay as `WP_json_encode_default`
I would have called this `Transport`
is there a reason to have this in the middle here? or should it be in `ComputerName $(hostname`?
Nit: I wonder if this will be more readable if we just log the output, e.g. `logger.Printf("[%v] %v", testCase.Name, fmt.Sprintf("Error running cmd: %v\n", err))` or `logger.Printf("[%v] %v", testCase.Name, fmt.Sprintf("Error running cmd: %v\n", err))`?
This should not be <msg> I'm sure about this... how about just `php.IOAddress`?
Can this be `writeMetrics`?
Does this change anything?
This is needed as the default value is `on` in this case.
What's the point of using `dirname` here?
This should probably be `count` if `validation == -10` or `validation == -10`
We're not testing how we can set this on the `handshakeEvent` object. This way we can avoid the `maybeResetTimer` field by itself.
Didn't you mean to leave this in?
Shouldn't this be part of the public API?
This will never be true, and will fail with null values in this case. `actualNode` may be null or empty.
this will never happen because we are returning true for a null value. Why not just catch the error here?
I wonder if it would be good to check the string for manifest here.
Is the `Exclude` argument used anywhere?
Is this what we want? I don't see anything that would expect this to fail.
you don't need the `pathInfo` here
why use a constant for it
why not use `join` instead? it will use a `get` method in the same file.
@jridgewell do we have a way to specify the value? I'm not sure if we should be using the default value in the DB, but I guess it's okay to just use the value in `main.js`?
This file was moved into the line above (and it was moved to line 280).
The `package agreement` parameter is now unused.
Maybe `cuda` is not used anymore?
I am not sure this is correct. We're in favor of `serialized.build()` where we call `connect()` in update.
This is not necessary.
I think this should be the last argument
Didn't know this is true now, or should we allow it to be `nil`?
I'd prefer using json.Marshal as the default here instead of json.MarshalIndent, but we would end up having to copy the json.MarshalIndent here, as the error would still be logged, but I would also appreciate the test.
Do we want this field to be `TimeIngressRules`? We do not allow it to be a map in the security groups.
This is not a problem, but this method is only used in `pkg/class-doc-store.md`. This is a good thing to add. This is a good one. It should not have to be in this PR though so it might not be required.
I don't think this will work for all datum datums.
Not sure about these two methods: - [isWorldState(...)] and [isWorldState(...) This is the main place to refactor the `get` calls from the `MutableWorldState()` calls. If this method only has the `MutableWorldState()` methods, we should keep the existing method to have `MutableWorldState` defined in, as well as in `if...get`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
you're missing an `,` here
I'm not sure this import is needed
Why this code error and why are the err being returned? The error is already handled here.
How about using the standard library imports?
If you want to be more explicit about what the purpose is, what you are saying is to put this inside the if (get_thread_id() == tid) { ?
Can we use a shorter name for this?
If it's still being used in the changelog, why not remove it altogether?
I'm not sure if we should do it without the current state (e.g. `--snap` should be a snapshot) and if it needs to be a directory, that should be a directory that has to be read from the snapshot. So we should just be explicit about whether this should be the first option (not sure if it should be the first.
Is "header" a typo? "fix"?
It seems like this can be set in the `ConfigurationService` module, but not in the `QUILT_USE_TQDM` module. I think there will be a better way to handle this.
Maybe make it explicit the default timeout?
`opts!==FORCE_RENDER` can be `false` because this is the only place that gets called. Is this intended?
why do we need to set this to true for all users of the same package?
Do we really want to use os.environ.get() here? I would suggest to use os.environ.get() which calls os.environ.get(), which you can use here.
this should be below the other standard library imports
I think the original version of the `(pkt, "type")` should work here.
This is going to change the behaviour of the test, but the new import is going to be the same as the static import, since the static import is already gone
Can we have a better description of what the caller does here?
Please revert this file.
The `-l` header was only used by `--no-l`, it was introduced in the first place.
`traceparent` should be nullable here
is this necessary?
I don't think we need this. This is an unrelated change. Could you elaborate?
Should we just do it for `logger.Add` as well?
This one is the one that's causing problems, but I'm not sure what the old `new_size` is here
I don't understand this new method?
This is where `isLongrunningReturnValue` is called, so I guess it's safe to delete as well
I'd rather use the same prefix for the variable `Authorization_url`. I don't see a good reason to change all the variables to use `Authorization_url.username`. I would also like to use it in the `metadata` method (which will be more robust for future use cases, but maybe this is not a big deal though)
This method does not belong into the PR, I just left it and put it in a `before_save`
So you have to do a copy here? I would expect that we don't want to do any errors with the first digit?
We should add type hints onHeight/AtAt. Otherwise, there are other types of elements that are not valid.
Isn't this always true?
should this check be done only once and then only after line 1255?
@steveharter would you mind fixing the fix here so that the change to `MaxPending` is clearer?
We can change the type to `currentUID`.
Should this be `src[]string`?
Why not move all of the imports to the core files, and have the standard library go inside of the dir folder?
Why can't we just return an error here if we're not setting anything here?
Maybe rename this to not null?
I think you have an idea what's happening here.
This looks weird. The `repr` argument is `repr` but `repr` is already `repr`. I don't think this is necessary because the `repr` can be `repr` at all.
Align .first_runs_free with .first_runs_free on line 257.
I think `Proposal` is a little bit confusing to me, maybe just `if a.Tag == protocol.ProposalPayloadTag` since `Map` is more explicit here.
The `$as` and `$param_name` are now unused now.
I don't think you want to add version as it's always used.
This is a bit weird - I can see an error message as "type not None" but I do think there is a race between "gone" and "type not None". I would recommend using a single message (or an empty object).
I don't think we need to remove this as well, let the user know if it's not available or not.
this should be set to `_` in the wrong order (at least in the PR description)
This is the most important change IMO. The default `GuidPrefix_t` is `GuidPrefix_Unknown` so we don't really need an `X` in the list.
I'd rather have this in `__init__`, since that's the one it's an object
Is this needed on all of the DevStatus classes?
Use %i or %I for an array of symbols.
should this be `volatile`, and not `volatile` since its not a big deal, but maybe it can be a different one?
I don't understand the purpose of these new lines.
I'd rename this to something like `js/fileupload.js`
I'm guessing this is the only thing that affects people who may not see it in this PR?
Where is `command` coming from?
I know you're doing this already, but this should probably be a constant somewhere.
I'm not sure if you should change this, but I can't figure out how to test it.
Line is too long. [108/80]<br>Use the new Ruby 1.9 hash syntax.
@kennknowles Is there a way to get the result from `NULL` instead of `NULL`?
I'm not sure this should actually be `getnil` since the user can return `nil` and the user doesn't have to know what the user does
This log message needs to be logged at debug level.
This should only happen if the `--host` option is set in the `else` branch.
Why are we removing this?
@deads2k is this change intended?
Should this just be a `getStagingInstallMedia`?
You need to `num_scan = fscanf(fp, "%d", &n);` here.
>1` This is a better way.
Please remove the property `LibraryTime`, I assume this is the only one used for the other.
can this be an empty file?
I don't quite follow this change - but why do you need the array_only_lengths ? Isn't that a problem ?
This should be set to null when it's empty. Otherwise, if `ap == 5` is set then we should set a null pointer.
Do you really need this interface? I guess it can just be `FeedFile`
Can we use `volatile`?
@jridgewell @tgamblin Do you know if we need to clean up this up?
This will throw NRE if `ServiceName` is `undefined`, and the `ServiceName` is the only `ServiceName` key in `dvc.rst`. It seems like a bug in the service itself. I think it is still worthwhile to have a wrapper around `dvc.rst`.
Do we have a test for this?
I'd rather have this as a flag, e.g. `spaceRet.left() == ResultCode::SUCCEEDED;                                                      \`
I'm not sure if this is correct. What's our use-case?
`createState` is only called by `createState` (which is what we should) is for the service `createState`.
This could be a `public static final` method that takes the exit from a dict or `options` object.
why is this line changed?
I'd rather see a `objreg` class in the test_init function. What do you think?
How about adding a default value of `pickle-protocol` property to the pickle?
I think we should be able to get rid of this. It might be nice if the options were in a separate function, but I wonder if the user could have an explicit port, and then get rid of this function.
`import *` should be `java.util.*`.
Do we even have this check?
We should be able to use `integral_columns` directly.
I would call this `deep_array_stream` because it is the "s" in the name.
Is this a typo?
this should probably be more explicit: `UA`
Is this a global setting?
so it does not matter :)
Why not just remove the ` Directamqp-container` component entirely?
This is no longer the case, right?
We should add an extra `typeof` parameter.
Let's change this to be a bit more cloning, e.g. `skANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGANGRRR
This one is a bit scary, but this one could be a bit confusing. If there were two separate strings, the first one would be good. But if you could have more flexibility on what it would have.
I don't understand what `q == null` is supposed to do here?
Please do not nest imports.
We should probably add an `error.Buffer` check here.
Should we check here if cert has expired? Otherwise, if cert.NotAfter == true, the JWT will be already active
I know it's not part of the change, but this is a separate patch, but should be in separate commit
I am not sure I like how this will work in regular sampling. The regular will still work for the maximal maximal
Should we have a test for this change? I think that would be more consistent with the rest of the tests.
Do we need a check for nil here?
I assume this is going to become the actual fix?
The parameter `input` is now unused and can be removed.
can we add this to the docker docker docker file, so it can be set to the docker docker version?
If the file is not null, it will be removed. Is there a reason you changed the file? If not, I would suggest using `File file` as the class field.
It'd be nice if there was an error here, but that's not the case.
`score_thr` is already set in `utils.py` file
I am not sure about this. If it's the best way to do it it's an empty requirement, I'd rather have it be an instance of `state="hidden"` or `state="hidden="hidden"` if it's an an image, and then I can do something like: "state="hidden"
I think we should use `.replace(/` instead of `.replace(/s+/g` to be able to handle the case where displayname is empty (and the next line)
Is the idea that this `FindQualifiedType` will not return the type of the response anymore?
Nice work for the PR to work!
I would prefer it if we just generate an array of records. This is the same as the others, but I would like to be consistent with all the other `<sessionsessionId/window/minimize>` ones.
We need to set the component in alphabetical order, this PR introduces new functionality in `ModuleSettingsDetails-${ moduleSlug`.
These are the only changes we need to support. The only thing we need to do is is this only for the older version, and only for all versions that need to be changed by itself.
@danrot This needs to be changed since `var_not_present` is no longer a directory.
Please add trailing whitespaces.
I would have called it `||/devnull/dev`. I'd rather it be `||/devnull/dev` because we don't want to update any circular dependencies on the 800 version...
This is not related to the fix, but it seems like a fix for `base` is not a good idea since it's just a single call.
Should we check that the file is `overlayText`?
Use the new Ruby 1.9 hash syntax.
We should keep the name of the `address` and add `@since` in the name. (It looks like it's the only usage of the "to" of the ` `case` in the SDK.)
this line does not appear to be used
We can probably remove this one. It will use the same name as the other one in the future if it's not.
I'm not sure if this needs to be in the view as the DB is the last one, but the locked_features.any? might not be the best choice.
It is possible that `mkdtemp` won't be invoked by `--prefix` but the `-` won't be invoked by the build system (if `!=` is true).
This is a breaking change for the `9245.0` API, so this change shouldn't be needed. The `filename` method should only be called from `util.0` so that we shouldn't have to use `directory` when it's not.
Is this a bug fix?
Extra empty line detected at block body end.
We can probably use `receivable.second`. This will make sure there's no way to go through the `receivable` component.
This should be a `try/except` block so that we don't have to pass the input.
I don't think you'll want the version to be in the first place. I am thinking it would be better to check the version for that version
I think the change should be in the message to make it more obvious what error message is doing...
This looks strange to me. Would you please elaborate?
`variableBase` could be a const (i.e., `reinterpret_cast`)
I guess it should be `SurfaceNamer.getMetadataName()` (or whatever you're calling it, and if it's the default).
This should be `final`.
We could extract to a private constructor, as in the event `Operation not supported`
We should also check that the headers are not in the base header.
@mrunalinikankariya can you confirm this is correct?
This was not a significant impact, and was probably a bad idea.
Nit: Can we put this under the if/else block?
I assume it's intentional?
Please use braces for all the time.
This is a bit confusing. I'd be tempted to move this check in `getVarVarWithoutInitializer`, and if it's the same we could call `getVarWithoutInitializer` with.
why not just say `using target split size for this scan.`?
is this safe to just use msg.maxTrace?
I think there is a good reason to do `parlai_minutes` instead of `mins`
I think the check should be before doing `getRememberMeServices`
I think this will need some changes to make the fix less efficient
@citibeth This should be `LOGGER` and its value should have `get_logger_from ...`
Can't you check the script in `app/views/script.html.erb` and update this so the script itself gets set in the `app/views/script`?
Why does this have to be a local?
`String()` is a generic name. I suggest we use `id := primitives.NewUUID().String()`.
NIT: We shouldn't need this check here because this is only called by `Disposing`.
missing `applied` prefix.
This line should be in `directed_acyclic_graph_model`.
what is the false positive? the change here is because `run_in_parallel` doesn't change the value
Just use `http` and `EXTENSION` here.
We shouldn't be using this here, since it can be only ever used for a single file.
Where do you use the LogManager as a class member?
You don't need to add a parameter to `/tmp/rocksdb_compact_test.XXXXXX` in the test. `/tmp/rocksdb_compact_test.XXXXXX` is the default.
Is this change required?
I'm not sure we want to do that. This is the only change that will need to be here. @danny0405
We might want to have a `version.VersionVersion` function that does not support `versionHistory`
This is not needed because the logging statement can't be removed.
The new `SUBPACKAGE_NAME_FORMAT =` is needed here, as this is the new key for the value of the "[\w-]+)(?:/(.+))?$"".
I assume this was accidentally removed?
Can you move this to a separate const so that when it is needed it will be reused? This would be a little cleaner and more efficient to check for the next line.
Not sure this is the right change. I think it could have been backported by a real bug.
Could you add a line in the indentation here to explain the purpose of this change?
Maybe we don't need to hardcode this. We need to make sure we don't get errors for `/test`s
Is this safe?
@deads2k i'm not sure that it's worth adding the new file here. @kroitor since we don't have to change it this way.
Why was this change needed? It should be the default for the same logic as line 143.
I wonder if this was a good idea. Maybe it would be nice if we could have a better solution to be able to have one test that would have an `/home/foobar` in a `TestTagList` and wouldn't have a good reason to have it?
why not just use System.IO?
I think this error message should be more specific, maybe something like "validate debug mode for session that can bypass any price validation and allow absurd prices during sessions", or something like that.
I'm wondering if we should just be setting nbb.capacity() in the call site instead of using nbb.close(). Also, when we have nbb.capacity(), the call site would be called from within nbb.close(). That will make it easier to grok.
do we need this change?
why not `cmdhistory.py` ?
These properties should also be removed.
Why not move the libon import from imports?
I don't know why we would want to add this to the `GetFilter()` function. Can we just add a `return in.GetFilter() == nil` check?
I think there was a reason not to use `_configurator_errprintf()` in this code.
We're now calling `get_not_not_open()` now, so I think this is still the only way to handle this.
I think the only thing that would fit after this line is that the API of the API has been split across multiple lines.
We have a "unique" at least a "defaults" at the bottom, but this is the only time we need to use it in a `s/conftest/` file. Maybe we just need to do `@Index::get_cache_spec.rb` here?
Nice! Didn't know if these changes are in the `bhTarget` directory, but it seems like the only place it was used here.
You can use `proposal.client_data_legacy.client` directly
Should we also check the `formerpet`?
can you add a `TODO` here to be more explicit about the error code?
Is this an overload of the `PlaybackPreferences`? Is it only for the first one that is set to `true`?
So, the only thing that you're calling is this is `KWindowSystem::forceActiveWindow`? Why not just do an `xcb_flush` in addition to `forceActiveWindow`?
Why is this required?
Can we move this import to the top?
So this was the only place I'm doing this?
Use the new Ruby 1.9 hash syntax.
Can we use `anomaly` here, rather than `Anomaly hotgym example`?
@liggitt do you want to change this to `string`?
This is a breaking change, but it looks like the wrong file and should be moved here.
this is probably the default for this package, but I don't really mind if we want to avoid any of those things.
The Daisy task should be updated to reflect the change here.
Why did this change?
Is this still needed?
We can't remove it if there's a official, right?
Why is it not `KINESIS_PROVIDER == 'kinesalite'`?
Should we use the new format for this new one since that is only used in the `DateInput` constructor?
I am not sure that this is the best way to do this. For backwards compatibility, I think it would be better if you could just always use the same value from the cloudformation.Stack directly to get the cloudformation.
I think this should stay as `dict_index` for consistency with our linter.
is this change intended?
Can we make the function optional and remove the `RemoveEndPointMark`?
This was added in #1848, but I don't think we want this anymore since we're using the `ExtraRuntimes` to build it.
This was not working correctly before, but the original code was not working.
I think you can remove this line
Can we make it non-static? We can't really support it.
We should add an example here for users to think that it could potentially potentially crash with `value` as an argument to the API.
You could remove this conditional statement, it's used elsewhere in the code below
The class `declare` has been deprecated. It should be removed.
I would make the name "allow-message"
this has no side effects, should it be `id == "feedbackable" ||` instead?
Isn't there some reason that we are not calling `add_column` on a column?
I think I would rather change this to use `expectTest.IsNull` (as it doesn't get called by the tests)
Who calls `github.com/mysteriumnetwork/node/openvpn`?
I don't think it's necessary to add it to the `nupic-logging.conf` file.
This is a very old message
Is it correct that `net.ipv4.conf.eth0.rp_filter=2` will be set to `true`? If not, can you add `net.ipv4.conf.eth20.rp_filter=1` here, and remove any change?
why is this a class?
why not return an empty list here?
Can this be lowercase? `doc driver.Document` is only for nodes.
This is an existing bug, can be fixed in a followup PR.
I thought the plan was to have one test to ensure that the new data is not zero?
Nit: can we keep both `success` and `Node`?
Can we use `_context.getTransactionProcessorFactory` to call this with a default? I'd say the `fulfulProcessorFactory` should be an instance of `fulful`.
The formatting of this seems a bit odd to me; it might make sense to have a trailing comma to specify the properties for it. (I'm not sure what the best idea.)
This is not a bit of a big deal. What if `self._files.clear()` is called, and if `keys()` is called (or, `keys()` is called), then `_files.clear()` would be enough.
I'm not sure I get this. What's the error message here?
I think IEnumerable doesn't need to change, since this is not a public API
Why do you want to change the log to log at all?
I think you forgot the naming here :)
I'm assuming this was accidentally removed?
Is this field always available?
why are you keeping this?
I think the more specific error message could be helpful, as it's just a note, what's your idea?
Can you also add these to junit/System.X.X to ensure we're using them everywhere else ?
You can delete this line.
This is now a service with a `0x10: ...` right? I'm not sure if that's right (not sure why the service should change).
Is this a change in behavior? Why do we need `||` here?
$strictTextSearchFields is useless, it should be $searchableProperties.
I think we should remove this line now, no?
Do we need to also set the information if the attribute is running?
The "The image image in `TeamLayout is compatible with aspect_mask and image format" is the same as `auto iv_state = GetImageViewState(image_view);`
Shouldn't this be in the core (and elsewhere, the other files below).
Here it was a bit confusing, why did you delete it?
why is this needed?
I'm not sure if we need to configure the ability to do this if the `cmd` is not `null`?
I think this import can be removed now
I'm not sure about this. I think it might be cleaner to just have a `.decode()` and do the `.get_voice(constan)` method on the `name`.
I would put this file under ` NonVisual Desktop`
This will fail in a separate PR (and the `js` below) - is it really useful to catch this?
What is the purpose of `Päivä`?
I'm not sure if this is right. It means that if a mount is actually active (or whatever you get an empty mount for the mount) it doesn't have a parameter which is called by an empty mount...
Can we use `volatile` instead of `String.format`?
Don't we need to keep the PodReference?
Please change to `json: [DeviceName]` to `[]string`
Can we rename this to `RuntimeTLP`?
Should we make this 10.1 only for 3.1?
I am not sure if I should set the `unused-variable` here. You can't do anything with it when you have a pylint warning.
I would put the message here. It would be nice to also update `beat/application/bin/types.go` to `types/application.go`.
this was causing a test to fail when the test fails
This is the only change required for the C# SDK?
This should probably be the same as `code` since all the code that adds this value.
Yep, this was not a previous change. However, it is not a problem, but it might just be a bug.
I'm not sure this is correct. It should probably be `array`.
This is a little odd - what about calling the function `local_certs`?
Is there a reason to use this `RTPSDomain` class?
`(var scan = 0; scan < count; ++scan)`. `(var scan = scan < count; ++scan)` => `(var scan = scan, count = scan)`
I think we don't need this as this is an Optional<object[]> MongoDB => IEnumerable<object[]> MongoDB =>
This is a bit weird. Why is this check needed in this case?
I'm just surprised we didn't have this on `proposal_url`?
why removing these calls?
Is this supposed to be removed? We're using this for tests, not just for the test suite.
If it wasn't changed the log level to debug. Shouldn't it be debug?
I think the message should go before this PR. The reason is that this is going to be an invalid connection (and it may be useful to not see a null message). The reason is that `sendEmptyMessageOnChannel` can never be returned, but the user can do something like a `GroupLog` or an empty string.
`raise` may be clearer.
Why not just make it `mixed` ?
Nit: could use the name `os.path` directly.
I think you're missing a default value here
`rewriteNot` is only being used here.
@dvoytenko I missed this. Should you remove the commit message as well ?
If we move the "application" button to a single file, then we won't need the `config.add_api_capability()` check here.
It's nice to also test the `class/sonm-deals` class.
Do we need the array here?
I think this should be `case POD_FAILED`.
I don't think we should add all `false`s to the interface.
I don't think you need the variable, since this is the standard for CEL functions. The standard is a bit confusing.
Why was this removed? I'm guessing it still works for some reason, but I'd like to see the `rules` in the code base for the `new ChainFilterOutput`
I think this is what we want. <msg> A bit more important, I would expect that if the `host.cygwin_installed?` setting is `nil`, we should change `host.cygwin_installed?` to `NULL`
nit: can you rename it to `getClass().getSimpleName()` ?
I'm not sure if it's the right place for this. I'd suggest to have a separate constant or something that would be clearer. `rewritten-file-scan-task-set-id` or `rewritten-file-scan-task-set-id`
We shouldn't need the `Command` command. It's the same as `name`.
@smarterclayton do you want to check the error on this line?
can the word "IMAP" be renamed?
I think we can remove this too.
This is probably fine, but I think the `label` field can be replaced with `data` instead of `data`.
if app.ProjectId is set to nil, does it matter that that will be synced?
should not be exported.
I think it is better to have some sort of information on the attribute names. This should read a little bit of time and read the code.
This class is unused. Please remove it.
We should test that the user will not be aware of an existing Realm.User.
Is this change intentional or in future if we want to change the default behavior?
role_none_comment is not a user handler, so why not a user that is using the user id?
Can you please also change the function signature to be `EPISODES_PER_PAGE`?
This will break old code in Python, but it's fine to keep this line as part of this PR
Should not be part of this PR, if you remove this line (as far as I know) - it seems like there is no way to change the version of this file - it could cause any issues with other tests (see `buildCallback`).
"If the IO is the number of sectors that the miner has committed. For now, I I think we need to think of a way to do this.
If it is the reason why we were removing this line from the main build file, I'd remove this line
We need this to return a remote host so this would fail, right?
Shouldn't this block use the `is` here instead or is this done within the `if` block?
I would prefer to use `f` instead of `f...`.
This can be removed, it is now a string
I'm surprised that if it's not empty, it is better to use `$this->Email`.
I think we should make this the default. I would use the "panic" option for this
Should we make this `m_was_finalized`?
I don't understand. Don't we have to check that the address is empty?
I think this import is unused?
Shouldn't the previous set of false be called `ksql.newInst[max]`?
This is an error. I think you should use the new cache instead.
The `if` should be kept.
NIT: this line seems unnecessary?
I don't see a reason for changing this to `thingthing`, but I didn't see any code using a dict :)
I think this should be removed
I removed this method and adding new JavadocComment to the callers, but the new JavadocComment needs to change.
I don't think this should be part of the public API.
I don't think we should set `setName` in these events. I think we should have one `@SuppressWarnings("unused")` for the same reason.
This needs to be moved up one line, right?
This will throw some some weird error. Should it be handled at the moment in this case?
I don't have a holistic picture of this, as it does not always return anything, and you are not checking for the returned error.
@jsoriano is this good or did you intend to leave some test in the tests?
I don't know if there's any harm in making for `slug_matches?` a class method, so I'd recommend to remove it.
This seems like a change in the code. I'd like the `true` to see if there's an exception here that's `false` and if it's `false`, then we can add a `true` to the `bool` check.
this should be `Caddytls.InternalIssuer`
This should probably be set to false in case `this.baseUri` is not null but `this.credentials` is null
This will need `string[]`.
Is this needed anymore?
I'd prefer to keep this as it is.
The fact that I'm a little confused why this is not true, as `randomDocValue` should only be `true` if `30.1` is `false` or `30.0` if the test fails.
This is unrelated to the fix, but why are you doing this as a return error when the function returns error?
Another option is to use H2O_STRLIT in py2O api. H2O api has a client and no server is available.
Why is the min?
Nit: We can add a logging here that this is needed for debugging purposes.
Why use the `AssembleString` function here?
This is not necessary. It will raise when an error will be raised in the database.
@jasmainak Is this the correct thing to do if you say, or should this be `'[a-only-word-name-patch]` instead of `'[a-word-name-patch}`, to match other services?
Is the `DistributedSpanContext` a non-null span?
I think `exflow.getFlowDefinitionId() > 0` should be enough?
I'm pretty sure this will break some existing users as a side effect. The only reason I'm not really familiar with this is that if you're using `DateTimeInterface`, it'll break anyways.
Can't see why we are removing the check here?
i'm not sure about this... the test in `macID_reverse_reverse()` is not correct... the first part I don't know what is the purpose.
@fredericability would it make sense to add this as a separate `if (arc.target < 0 || arc.target < Integer.MAX_VALUE && arc.target < < < Integer.MAX_VALUE) {` check?
Is this part of the fix that you made in the `args` to get the global state from the server?
why do we need this?
Hmm, maybe `sigs.k8s.io/cluster-api/api/v1alpha3`?
Can you add a validation for the item item instead of calling `constexpr` for the item item?
You should check for `str` here if `element` is a dict.
@adamjstewart I am not sure this is the right fix since it's not an issue in the code that you're using?
Why not just use a `clearSearchIndex`.
`dumpConfig().Sdump` is a better name, I think.
Nit: this should be readonly, no?
it's not used anywhere anymore
why do you use a random number here? why not use an underscore?
It doesn't seem like we should use global state from `plugins.delete` and we need to print the global state in the method call as well. I'm not really sure this method should be called here since the new `plugins` method is already called only in `if foreating_plan` or `if foreating_plan`.
This isn't correct.
@agramfort do we know that this is now the correct one?
I think there might be a good way to get the `single_user` string from the settings but I guess it's okay to leave it as-is?
I think this would be clearer if the caller were to use `defer func()` on it
Can you make the `minerCreate` member variable optional?
We need to do the same for the `amp-animation`. If `LoadOrStore` is passed, I think we should do it as well.
I think this should also be in `src/workers/workers.js`?
I don't really understand where this is coming from? This is a test for it so I guess it would just work for the same reason.
Are we adding another name to the public interface for this purpose?
Can you explain the rationale for this? Is there a reason it's not just doing a `ContentMD5`?
can we also move the `i.nodeConfig.NodeTransportIPv4Addr.IP` check below `if i.nodeConfig.NodeTransportIPv4Addr.IP`?
Why do you need the `at the `attr_value`? It seems like the original `attr_value` is always set, which would be a string. I think it's ok to just remove the `is not None` part of the string.
I'm not sure that this will work for other users, I would use a different variable name: `tabbed_browser.get_clipboard(selection=True)`
what does this do? do you want to include it in the Invitation_spec? you can use `confirm` or `confirmitation_spec`
These are not really needed
Should the name be "MetricsProvider"?
`float` is not used here.
Why removing this annotation?
This is not related to the PR. Just a small change.
Can't we use this setter in the constructor and just assign it to a local var? That way we will have to pass the result.
There was some trailing whitespace that can be reverted
Why does this need to be re-enabled?
I think we should be clear that the "B" is in the `AddProcessorPipeline` method.
This change isn't necessary.
is millisecond -> is requested?
The `=` seems to be the right choice in the `chomp` method. I think the extra check would be a little better.
These two were already defined in `RestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestartRestart
Can we have this in the test suite instead?
This is just curious, but it seems like that was a bug
I don't think this should be done in the `setState` if the node is not null.
What does this mean that the caller is not using the previous one?
@adamjstewart Isn't this going to handle the error in some other file where the user doesn't want to include an empty `HDF5Reader`?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
@caglar10ur seems to be unused here and in the next PR
Is there a specific reason for not using the same `HTTP/1.1`?
>UseLane [](start = 34, length = 7) Could you change the condition in the constructor so the steps will never be incorrect? #Resolved
This should be removed.
Shouldn't that be `#if defined(X86_64)`?
This is the one line that was here and should actually fix the problem that is being fixed in this PR.
Since they are only used in a single place, should this be moved to the site object? I'm not 100% sure if it would be cleaner to do the site object in a separate function.
This is the only change needed for the new APIs, is it ok to change `-Wfloat-equal` to `-Wno-deprecated-declarations` (or make the new APIs in this file)? The reason I've changed the name of the code below (the same is that `-Wfloat-equal` is used for the new APIs).
nit: can you also add a `type Options struct` method to ensure the `CheckRemoveRemove` method is called?
Not sure if we need the `ptr` here, but `dp_bits` is also `nullptr`.
Metrics/BlockLength: Block has too many lines. [30/25]
Do you need to add the "VUID-NONE" to the message?
I am a little confused about this. Can you explain why it is a global instead of a global? If we do, can you fix the description of the change.
Why is this necessary? The `[UnsupportedOSPlatform("browser")]` should be defined as well.
We are adding a peerlist for the already built in the `go.uber.org/yarpc/peer` package.
why this one is not logging?
Is this necessary?
What's the reasoning for this change?
Shouldn't we be setting this as a `input` as a parameter?
I'm not sure how the code works. I don't see a reason why these two changes are needed.
I think you meant `allAffectedNodeIDs` here.
This line shouldn't be removed. The previous code did not compile when using `generate_switch_mode_jmp_to_hook`
Line is too long. [83/80]
Why not use a `JSONSetRunner` here?
I think it would be clearer if `PolicyNamespace` is empty (and then `Policy66` is set). Also, maybe add a description of `Policy66` or similar?
This import is removed from the PR.
`telemetryInitialized` is the default and should be `final` because of the `telemetryEnabled` set to `false`.
This method can be private, since we are not in scope yet, just want to make sure that it is not public.
I don't think we should do this here. This is the only usage where we use `createTag` in the context of the `createTag`.
we should consider using `config.updateupdate` in the config object instead. The other similar way is to do is do it for the future.
Why are we passing the error here? Does `TAuthSalt` not exist?
can't we move this to this file and then just the file system?
This isn't a big deal, but I'd rather see `startKubeProxy` passed through a function.
Please add a link to page page.
This will result in an error, but the account is not in the error. It can be in a follow up.
Isn't it supposed to be `default *testing.T`?
It's not immediately clear to me why this isn't true.
Style/RedundantReturn: Redundant not use instance of method definitions.
Nit: I think this is a bit too much and we can't just use the variable name in the variable. Maybe `go.uber.org/yarpc/api/yarpcerrors`?
This function should be set in the `ProcessContext` package and not `personTask`. This way, we can just call `reverse` from `_tab.run_js_async` to avoid the need for `personTask`. Otherwise the function will always return `None`.
I think I'd prefer `var-imports`, but I'm wondering if a lot more on one line would be good.
This file is no longer used. You can remove it.
Should we add a default here? `BASE_IN_days_IN_days` ?
This error is already handled in the `timeout: rename to `timeout: rename to _`.
Shouldn't this use `fragsize` (and the `fragsize`) for the lock instead?
nit: I would move that up to the top of the file so we don't have to duplicate it here
@garyrussell , I think you need to check `sizeof(request, this)`, otherwise you won't need the `getRedirectedUrl()` call.
You'll need to set Duration_t on the zero time.
I am confused, what is this `if` statement doing?
I think we should add more information about "in Baggage spanReference" and "in BaggageeventReference" and "the bound counter metric" and "the bound counter metric"
Should this be in `BaseElement.Base`?
I guess this was the only place this was used?
The _Date_ property is a bit confusing, maybe something like "If "Date.min is used for maximum allowed value" ?
This can be a little more specific. Maybe we can just use `.consent.select()` if the function returns the last value.
Do we need to make this string a ` special Parameter` ?
`site` is not needed.
Maybe we should also check if the time was `default` and then check if `default` is `default`?
you can delete this line
Please use the same as in the other files.
This is the one line that can be replaced by cMsg.
This is not related to the PR but I think we should just rename the key from the generator to the key.
Can this be removed?
We already have a `IsNotIsNot` in `writeCollectionOperation` in `main`
why this is being here?
Shouldn't we use the `ResourceResource` function here?
I think we can make this `async` and change it to use `async.go`, which is more efficient than the other `client` files
@shwstppr why did you remove this?
Nit: I think we use more meaningful name to make it clear, that `\\-` is the correct string.
Should we make this a constant?
Should this if-isset be done for all the new code paths?
The default test case to 15 seconds is a bit confusing to me. Maybe we can move the test case outside the `cltest.Default`?
What is the reason of making this change? I'm not sure that `None` will do in this case. You can just remove the `None` case entirely.
Do we need these changes?
I think this is the right fix here as well.
Should the `isPageable` check go away in this PR?
Is it safe to remove this file completely?
This is unused. You should remove it.
I wonder if we can just delete this test in case we return the stack?
Please create a separate module (see the other files), otherwise it will be better to make a module named `def_scroll_bdd`.
Why did you make this change?
This is now an unused import?
This is the main place where we're calling this. For the future, the first time the code is found, we should just call the first time the code is run, and that the user can run in a second time the code is run. This will avoid a "the linter" file to a linter. We should have a similar code as an "if not" block in the code.
I think it's more reasonable to name this `protocol`, since only one is more of two.
The previous code was correct. The previous code was still passing down a constant to `GetOMAsync` but it was used for a while. But it wasn't there before. So this change should be reverted.
It seems that this could be `PagesHeight` rather than `2`.
I think the original version is correct, we need to keep the old version as well.
@agramfort I think `reporter_by_class` is fine for me, but we could have a way to fix that.
Can you remove this whitespace? It's not related to this PR but we should revert it.
I think you meant `resolveFromThen`?
I think we're missing an `resources` argument here.
nit: This should be -1 instead of -2
Can we use `Integer.empty()` here and below?
I would rename this as `ExecutionReference` or ` ExecutableFlow`
Can we use `sh.cd` to build this package? That way we only have to build it for the current package? We'll probably have to make the same package consistent with all the places where we need to build it in the same package.
do you need to remove?
Use single quotes for strings in a hash, relative to the first position after the preceding left parenthesis.
Can we make this an interface instead of returning a tuple?
You should be able to do this. The `windows` constructor is used in `BaseElement`, which is used in `BaseElement` and `BaseElement` by default. We should make sure the code is correct.
Can you add some context here?
should we also add the "Changing the value" in the name?
Just curious why we have the return value here
Why do we need to add this condition?
I'd rather have the code as part of the separate, but I'm not convinced if that will cause a huge issues. But this should have been the case and not the issue.
Does this need to be added to `oneof` in the `StoreConfig` struct? I think it can be added to `StoreConfigConfig`, no?
can you make it `headTipSetAndState.NoError` instead?
I would return error here, but I don't want to fail if `app.DisableSettingsManagement` is present.
Isn't it good to test this functionality? I don't think it makes sense to have it in the `--on` option.
Similar to above, `error` and `err` should be renamed.
I think you forgot to remove this.
Can you add a description of this?
Please remove the whitespace between the last argument and the last argument.
isn't it redundant to be in the `inc.GetTasks` function?
Nice. I had to ask why we did `ecs_nvidia` to match `nvidia` but `nvidia` is not used in the `development.java`.
Why do these changes?
The name doesn't make it really matter, but is it correct to use the existing function `opmask_with_dsts(void)` ?
Isn't "the" the right thing here? Or do we want to allow this?
The offset here is no longer necessary because of the old offset.
>IsEffectInSpell(uint16 spell_id) [](start = 11, length = 7) Should this be: `IsEffectInSpell(uint16 local variable instead of: `IsEffectInSpell(spell_id, SE_Invisibility2, SE_InvisVsAnimals)`
Why isn't this needed here? I thought we've changed the implementation of `package samples`.
This can be removed if you do not use FileSystemTarget.
If there is an error for x64, the use case will be executed. I'm also wondering what's a valid use case for, if the caller is to change this to `!= x64 | 0`. I guess it's just to be `!= x64`
Nit: "clrstack" => "clrstack"
Hmm, what does this `else` do in the docstring? I don't see a reason to use it.
The commit message should be updated.
This was the only usage of these kinds of retries to pass the map.
`->` is only available in the global scope scope. Could you fix that?
I'm not sure if there is any way for the change to `type Service` to be consistent with the rest of the file, but I don't know if I should think of a better way
Maybe `LoadLoadEntity` and `B` should be in all caps? That way we can make the types more readable.
Hmm, what about `data_function(add, input_type=False)`? It's not clear what we use in this context.
Can we use `modTime.read` and `modTime.read` for the same file name?
Is this still necessary?
Can we remove the version in this function now that it does not exist?
I don't think it should be here?
Why is this required?
We should remove this.
I wonder if it wouldn't even be possible to use something like `B3C_MINIMIZE_WINDOW`.
What do you think about moving this to a constant so the RSpec can use it?
Why do we need this return?
If we don't want to call consensus.ProcessTipSet() then we will call read() twice.
Is `IF_ARM` not available here ? Is `ASSERT_NOT_TESTED()` a new instance?
As this would be a `TODO` I would use this as a default method. If we don't need to pass it through all of them, we can use a `PartitionBody` function that would be used for testing. But I'd also consider renaming `PartitionBody` to `request`, since `groupKey` is a `dict` in the `request` to be an object-wide name.
Why is this needed?
Does this need to be a `linode`?
How about making this constant an URL instead of a constant?
I don't think this is the right place for this. If you want to put `--ignore-chromium` under `--ignore-chromium`. The reason is that it's not a `AutotoolsPackage`, but that is not that it is in `build_system/common_utils` (which you're in `run submoduleers`).
this was just to avoid the wrong value here.
@ptibogxiv @dantleech do we want to remove this method?
Should this error be logged at a `error` level or is it being returned?
Do we use `--keep-namespaces` here? (I know this is the most recent one, but it seems a bit weird and makes sense to add a separate flag to `--keep-prefix` if necessary)
We probably want to use `pkg/server.go` here
`namespace is set to avoid unintentionally`
I think I would just do a `try:except`.
why not use `^` and remove the `caddy-minify` below?
This and all other `providerProvider` instances are listed below `config` and `providerProvider` only used in a few places. Can we rename it to `config to be consistent?
Is there a better way to make this more clear? I think it will be useful if we used this to generate the user's code with the `ecs.internal` file instead of `ecs.save`
This isn't used.
Should we rename this to `clear` or something?
The ACME challenge type shouldn't be changed in this context.
Why do we need this change?
`jsonRpcConfiguration()` already returns null, so we could just have `node.jsonRpcConfiguration().getAuthenticationPublicKeyFile()` return an empty string instead of a null value.
You can drop this too.
nit: should this use single quotes?
why change this one?
Is this needed?
It is not a good idea to test the original paths with the new paths.
I don't know if it's a great idea, but I think this should be `Json.jsonAsDatasetDto`... if not, we can have the default constructor, if the default value isn't `null`
`before` not allowed
I think I saw some issues with `TaskBlockCacheFraction` being added in the first place, but I'm not sure what the best thing to do about this. It seems like we should do this automatically. We can make `TaskBlockCacheFraction` consistent with other types of things that need to be updated in `TaskBlockCacheFraction`.
you can drop `type='None'` as it was originally added by mistake, just wondering if this was not an issue
This should be removed.
Should be an unrelated log message instead of log or log message.
I'm guessing this will work for all sorts of ways, but wouldn't it make sense to have a default with the same value, to make it easier to change the type of the `_expected_error()` to `_meta_error()`?
Please fix the imports.
This is incorrect. It will create a new list if elements are null. You will need to check if `elements == Vector` before the call to `get(i)`.
This is an interesting place to put this code into 2 different places.
please update copyright year in header
Is there a test to cover this ?
Why are we adding a new class here? It should already be a constructor argument.
"newModifications()" shouldn't change happened, it can't be an empty collection.
Is this a different place for PUT? Seems like it might be worth doing some refactoring and having an `@Deprecated` that would be a good place for users.
I think it should be better to simply remove the constructor and use `InitCodeTransformer` directly.
Nitpick: It might be nice to have a space after the colon in the first commit, so that the rest of the lines are grouped grouped.
@mjkkirschner Does this mean you can remove the `_failure` argument from the doc block above when you try to get the `@Deprecated`?
Isn't this the same as `SUMMARY`?
We don't need this one, this should be `using` right?
Could you please add a `=` here? I don't think that is a good idea, since you're going to be setting these as an attribute.
I don't think this will work on Windows, but if the registry is indeed 3.0 (if the number of 3.25 is 20) should it be 20.0, as the latter would probably be a problem in the future.
We should probably use a capitalized `LAN`.
This function will raise a lot. Can we use `testCases := map[string]struct`?
Can this be moved to the above `deleteManifests` variable?
I think this is the wrong place for this class.
This file is not used anymore.
Same here, "The extension method should only be used on <see cref="Activity"/> instances that were created from the command line
`data` is an anti-pattern, so shouldn't this be `f.eth.syncService.ApplyTransaction(signedTx)` instead?
This should be in a try/catch, not in an interface
Can we just catch `e` with `e` (as a general rule), instead of catching `e` (and keep the same exception)?
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I don't think this component is a good idea. It's possible that the HelpMenu here is not part of your component. Maybe we could add a proper component that does this validation and thus remove the expression from the component?
Line is too long. [88/80]
Why is this necessary? The test is testing the same thing as the other languages and the test is testing the right one.
Does this mean we need to add "__. fields using selected case style"?
Why is this removed?
remove unused imports
Can we change the signature of R0 to R0?
"thethethethe Main actor must have a create constructor which takes a single Env."
I'm not sure about this change. What is the use-case for this?
Why this line can't be removed?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
`if(true)` is not correct for me but I'm guessing this is also not the `if(true)` case?
No need for `sprintf()` here, right ?
Seems like something that should be a dictionary, not a dictionary. Which is this change needed?
why is this change necessary?
Should this be called `writeReady`?
this should be the same as the CONFIGNAME_PROP above
I believe you can skip the check in line with `.isEqualTo(`?
Should this also be `&&`?
Can you explain why this change is necessary?
This is the fix, but this test is not testing for the new marker interface. The marker interface is no longer needed.
We can add a lot of data here.
Do you think this should be: `compile_opts = results.compile_opts.get('-I');`, or maybe define this as a directory to the next call? `if not os.path.join(entry['directory'], inc_dir)` or something similar
please add a line tag on top
why are there no &?
Please remove the space between 'Badly-formatted' and it will make all the code much harder to read.
Same here, we should have a small logger with `Node`
This should be `!keybase.new(..)`
I would also include the format here and in the `::: :create`.
Could this cause any regression when the loop is serialized?
Metrics/CyclomaticComplexity: Cyclomatic complexity for /// /// complexity for /// complexity for /// complexity for /// complexity for /// complexity.
Does this need to be in the `if`?
Let's call this `compute_engine` and make it a `_metadata` (we use `_auth.compute_engine` here for the service account)
The `value` is not necessary because we already have to `""` by default
can you also check the error code that you have in the `if (expr->isFunCallExpression() == "near") {` in the else clause?
The name `extraM` doesn't seem very descriptive here. Should it be `capabilitySecretEnvSSM                     ` or something similar?
Why did you move this import from `github.com/gogo/protobuf/jsonpb`?
Why is this needed?
Why the python 3.7?
this should also be removed - does the RPC apply after you added it?
Why do we have to delete this?
Why is `permissions` optional?
This is a bit hacky, but I think we should log the capacity in some cases.
Are you sure we want to make this an API change?
Should the files you add in the directory to make sure this is in sync with a specific folder?
I am curious, why is the \"%s\"" required by the labels?
Is it worth extracting into an `Argument_CSV` to match other enums (i.e. it is for future) and adding more context like the other classes?
This was a bug, no need to delete it.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Why not simply renaming the attributes `Invalid_name`?
Why are we changing it here? I don't remember why it was moved.
I don't think we need this here since we're in an image and the page generation is still in the DB and it doesn't work.
Why are you passing this as an optional parameter?
Nope, we'd probably want to keep this in alphabetical order.
Why not check this?
Should we log this error, or just log the error?
Could we also add `aws.NewConfig().WithRegion(region)` to `NewSessionWithOptions`?
I'd rather have it as `Math.Min(ScanIndex, oldTimeIntensities.NumPoints) - 1` here, as this is the default, right?
It looks like we're making changes to this file, why not just return error?
Why are these needed?
This will not work without the call to System.Net.GetTradeRecipe
is there some reason to keep this line?
I'd like to have an error message here, as it's a bit weird.
We'll want to use `fatal` instead of `click_button` here :)
Isn't this redundant enough for the same reason as above (and the one above)?
This would be a breaking change.
I don't think these two need to be in this PR.
`{...}` in this file shouldn't be needed, as `use` will also have an alias for `theme_admin`.
I would have left `locicing` here.
Why is this required?
Can you rename this to "ignoreContextTypeName" ?
@nvazquez why did you remove arrayLength from here?
@kennknowles Is this the right way to do this? If so, it would be good to have a different message here to fix the issue with a more useful message.
why do we need to set this to the default value if it doesn't exist, just pass in the message to `album_msid`
This change seems unrelated to the bugfix?
I think it is better to check `isHiddenWithCSS` and return `0` here (or in `vNode`) here. Otherwise the code will not be called with a `isHiddenWithCSS` if `isHiddenWithCSS` is the default.
We're using this package package package package for the providers, not the package
I'd suggest using `|| httpBadReq || wrongFileType` for consistency with the rest of the file.
@mfojtik this was the only change I changed from `main.Context`.
This should be more specific IMO.
this can be merged with the upper letter letter, right?
I wonder if it makes sense to move this to where a module does something different, so if you are going to change it, you'd be better off setting `PANEL_DESCRIPTION_WIDTH`
`erb` is deprecated now, and should be removed.
This was an error so no one can be re-used.
@jcotela It should probably be a member variable (and I think it was a bit more efficient).
Since this isn't the only way we can use a Puppetlabs here, I'm not sure what this is supposed to do here... I think that should just be an alias here.
Please use a more accurate term `[]p.Value.EnvironmentDictionary`.
This will create a "Server OSFamily string" in some cases.
This looks good, we need to rebase and remove the `case_state` as well?
Why not `Endpoint`?
`expect(fn).to.throw(/JSX twice`
Why do we need this?
Please annotate `contains`.
should this be a `json:"DeviceID"`?
I don't think we need the `endsWith` here, because we're already doing that in the `pattern.append("")` branch. That might be something we should do to avoid, though.
this will need to be indented
I guess we can use `getComputedStyle` here, since the default value is `false`
Please remove this.
This should be `log.destroy.debug("Saving key config to {}".format(self._configfile, encoding='utf-8') as f:`
If you do this, I'd say, you should keep it here too. The reason is to not start the message, so it would be nice to know the answer to that - I'd say, in which case it is not an event.
Shouldn't this be `.Add` rather than `.Add`?
You can just use the `self.master.stop()` function from the `terminate` module, so you should use `self._last_status["progress"] < 100"]` to check the `master`.
Can you please explain this kind of change? Like a similar formatting, and the previous formatting formatting would be a bit more readable (and maybe even just a `public static final`).
I think it's best to use `README.properties` as well for consistency with other examples.
`!=` is the main change.
I'm not sure I like this. It can be abstract
I don't think the grouping would be in the context of the dialog.
Should use `IReadOnlyDbProvider` and not `IReadOnlyTracerFactory`.
Why not do this if I have a compile time?
should we use the name here?
I don't think that's safe. It looks like we're using the `padding` variable for the new variable.
You don't need to keep the `private const` here since it's the only type of strings. We need to change the field from `this.GetCurrentMethodName` to `this.GetString`.
It's not immediately clear what this variable is used for.
We need a type annotation on line 341: `from listenbrainz.webserver import _and_tools`
You should test this by using `def _` instead of `_`
Why change the meaning of `AccountStateByHash160`?
Does it make sense to keep track of whether the last approval is present in the `prepare_all_yield` method or not? Or is it OK to just remove it from this method and call it with an event?
This is not really an error. Also, if the timeout was 5 seconds, it should be 5 seconds.
This should be initialized as false, in case an empty URI is empty
Should we add `positional-args`?
is it worth moving this line in the `process_wrapper`?
Was this broken before?
This is the fix, the error message should mention that a promise has a different failure.
The new column should be nullable, otherwise this will break existing users of their own.
We could add the `Boolean / SectorSize` constant here as well.
Is there a reason this isn't just passing `run`?
Typo: `MessageAsDefault`
Is there any way this can be an `int` instead? If not, would it make sense to have a `bytes` function?
This will not work. `was_static` is an array or list of strings, which might make sense here.
I don't think I've ever used the `Azkaban.count` file to be a module/class. It would look better in the UI but if there was one, I'd add the `Azkaban-Flow-Version` file to the `Write` and `Write2` file for the default.
nit: `bin.BASH` is a bit odd, maybe this should just use `bin.BASH_1` to avoid a call to `bin.BASH_2`?
This is a different way to run `main_process` during the `config` run, so it would be nice to add some sort of flag to `main_process` that I added to this method so that we don't have to provide a default, and we'd have to check it here too, right?
Can we make the doc string optional?
is this constant ever used anywhere?
Please add the docblock to the docblock
Are you sure this is correct? It isn't being used elsewhere, is it?
`class visibility_of_any_elements_located` doesn't seem like a good name. `class visibility_of_elements_located_located` might be a better name.
Why don't we just use the `.dev` here?
Can't the `false` be `false`?
You should check that the directory has been created in args here
Is this needed?
This check seems a bit redundant, since if `state == null`, it will always be `null`, it will never be true. If `state != null && intent.getExtras().getSerializable("state")` will throw an NPE and return `null` if `state == null` then `else` will be `null`
I would say "This is a bit more like `"Use the string is not a directory", right?
Layout/TrailingWhitespace: Trailing whitespace detected.
This test fails because `testify` doesn't test that it works correctly because some tests pass. It looks like it was a test that wasn't passing in the `testify` tests, which was never there for some reason, so I removed it to see the `testify` test in it.
this is wrong... it will fail in most of the time
Please keep the naming consistent with the other files.
This function is not used anymore, is it?
It would be better to add the `name=...` here and use `byte` for the second argument.
Should not be in separate import statements.
should this have been a `chan interface`, since the error is being returned by `handleInfo`?
why the error log here?
I know there was some discussion where this was not found, but it was just an idea why, but I was getting it right. If you do something similar, then it would be good to add the `template` as the page to the `RI` component, and then just have it in the `services` component.
I think this is a bit hard to follow: - This line is a bit confusing - if `isDarkTheme` is not set, then you should not do the same check in `setToDarkTheme`. - `hasProps()` will return `null` - if `isDarkTheme` is not set, then if `getActivity()` is called, it will return `false`.
This is a pretty hard to read and shouldn't be in this case. I would just say `boolean` instead of `boolean`.
Should this be just `goto err`?
Why is this `mdc-menu-surface--open` instead?
The reffedHeaders is not set when the header is not set. I suggest to use the nearby value to set the headers to the reffedHeaders.includes and set the value to an empty string
I think we can remove the `create CAST` now and remove the `createHeaderHeader` function
I don't think this will work for Python 2.
I think this header is unused now
Would be nice to make sure that this is a `logf` import.
Is `ptr == nullptr` guaranteed to always be 0 here?
This is a test I think, but should not be testing what is being returned
Why is this needed?
This looks like a bug. If a file is removed in master, then the original code can't be removed.
This is not a correct change, since it is a boolean and a user has already been cleaned up by the user. The check for `Issuer.now("Account JWT issuer", juc.Issuer)` should be removed. The check for `Issuer.now("Account JWT issuer) == 0` should be removed.
I don't think these will work.
I think we need to keep track of how to do this, but I'd prefer it be a good time to move this to another place.
Why not `cnb = n >= int64 (len(cnb) > 0`.
Is this really needed?
This isn't really necessary. If the `previouslyConnected` is already `nil`, we should only be checking if the `X` does exist.
I don't see a reason for this, but I don't see where this is needed, and I don't see the reason for this
do you have a test where the app build is created? (I assume that we can't do that)
I think it should be `if` for consistency with other parameters: `validate_param(obj, bool, param_name)`
Why is this necessary?
we should only log the breaking error if we use a breaking error?
please make this a `std::lock_guard` check
The change looks good, but it should be in the `_3p2_GraphStorageServiceAsyncClient`
nit: could you please move this up with the other two imports? I don't think there's much benefit from having it in the list.
Nit: I think we already have a constant for this
Can we add a note here that this is the main point that this is actually used by `MetricsMetricsExporter`?
The `isinstance` check isn't necessary because it is in `static_function()`. The only caller of `class_function()` is to call `static_function()`.
shouldn't we also add the `InstallUtils` in the controller spec to avoid duplicating these?
This method should be `dispatcher.submit()`.
Is `system_approver_emails` guaranteed to always be a non-zero string?
Why do we need this interface?
I think this interface should have gotten used as an example.
@deads2k is there a default?
Why not make this package private with all SparkStreamingWrite calls?
Should we add an option to the the gating setup setup to add these three attributes?
Is there a test that will pass the output of `GET`? If not, we should use something like `GET.POST.ActiveRecord("s")`
I'm not sure this is going to work. We can't just remove it, but we've removed it.
Can we also delete the file from `NONE.EncodeSpanName()`?
Why is this needed?
Again why this is project?
I think it's worthwhile we have a constant for this.
If the previous value is empty, the order is always empty.
This test fails on Python 2 and 2.1 because we don't test that the reset isn't reset
nit: update copyright year in header
Shouldn't we check here that `state` is not `--export`? Or is this a different bug or should it be a different type of exception?
I think you mean `is_pulumi_pulumi_key` or `test_view_on_in_disable_test.py`
You can remove the `current()` method altogether now that you are changing the behaviour.
why do you need this check?
I think this should be a test, since this is not actually a bug, because `o == o` is not thread safe.
Is this change required?
This is only for debugging?
It would be nice if these kind of error messages were added to the caller.
These 2 lines are still not needed.
this is a function, you should use the `net.RegisterHandlers()` function. I suggest removing it
I'm not sure if this should be done here or if `state.Config.Cache.RetrieveCommand` is set to `nil`, otherwise it's not `nil`, so this is not the only thing I would expect is to have the default.
You can use `index = parseInt(step);` directly here.
The problem is that the message is not in hex now. Shouldn't it be in hex?
This function should be renamed. It can be more readable.
`private` here is not needed since it is already in `result.generate_object_based_api`.
I think we want to remove this?
I believe we'll have a better home for a `File` in `escEnum`.
This doesn't need to be a public API.
Is this interface still required?
Why is this gone?
`timeout` is an error for 1 TTL, so we should not have to do this.
Is there a better way to do this at this point? This could be done in a separate PR and I'm a bit confused why we don't add `#ifdef DEBUG` on line 977.
One thing I notice is that this code is called inside the `get_kubernetes_Retry` method. Should we consider putting this code into a method that calls `get_kubernetes_Retry` instead? It seems like we're using the method to call the method, not the method, but it's a simple method.
It would be better to move `worker_state` out of `element.namedtuple()` into it's own file (the `CreateConfig` class name is redundant).
Is this still needed?
Is it not needed anymore?
I think this should be a `validate()` method.
this is the main change in behavior... i think we should just be passing the [] directly into the method
Why is this needed? I don't see this being used anywhere...
I'm not sure about this. If we're adding this to the default we should do this. If we can add an attribute to the `CloudCloud` it means it will be set when it's set.
This is the ` raw` key in the `hack/service/config.yml` file
Is there a way to keep this line, or do we need to leave the file header unchanged?
The name of this file is already named `BaseTests`, it could be "public etc.
you should add the style: `'width: auto'` I'll remove this.
Can you move the code to the message of `if (table == null)`?
Shouldn't this be `res = new ROMol(*mcsRes.QueryMol);`
You probably want to add this to `os.path.join()`
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
remove this file, it doesn't need to be reverted
Maybe we should check the other usings before we call it `can_count` - to make it more clear?
Any chance the dir could go away?
Why don't we just `elif isinstance(by, list(by) == 0)`?
this is not needed as this test is already coming out of sync
This is no longer necessary
Why do we need to add this to the list here?
I think you can use `isNullOrEmpty`
Why are we ignoring this error?
Why do we need this specific test?
@lilleyse Should we have an "upcase" template for this?
This looks like a regression - it would be nice to see if a try/catch/set the exception. I would have expected this to be `null`, and if the code is not found we don't need the `finally` statement and the error message.
I think it would be better if you could move this to a `requiresImageSource`
This should be an error in the test case.
I think you should add `table_index` to `table_names`.
Is this a global setting? It doesn't seem like we are going to have this property.
why this is changed?
I'm not sure why we need to add this. It is not clear to me what's happening in this module. Any reason not to do that?
Why is this needed?
What are the changes to `locatedBefore` and others?
Would you like to add some description to this? I'm not very familiar with the code of using the `tuple` parameter (and maybe even more, it's not a thing that is just a copy/paste error in the future).
@jsoriano Is there a reason why the `status` variable is `null` here rather than just `request.url`?
@LefterisJP would this be a valid expectation that the size of the listener was not the right place in which we can't do this?
@sparrowDom Are these changes necessary?
why not calling `&&` directly here?
This is probably best if you're not using anything in the file :slightly_frowning_face:
Can this be done only once?
nit: import order
`OnStart` has already been called on both `sp` and `sp.OnStart` calls. We should probably just add a `if` statement to `sp.OnStart` so that the span's calls are called in both `sp` and `OnStart` call.
Maybe move it to line 388
I'd like to see a unit test for this. <msg> I'd prefer it as a separate PR.
I think it would be easier to do with a separate change for both `PullPullImage` and `PullPullRetries`.
Typo: Should `namename` instead be a constant? (same for the other one below)
Not needed, but this should be removed, right?
why the change from other one?
This is a little too generic. Why can't we have a constant for each one instead of just having it as an int?
Do we care about creating a flag for this?
Which error can you make Scapy_Exception a private variable with a getter? This makes it clearer to me.
I guess the `tab` is missing here
Is there any reason why we wouldn't always want to log a status?
I think you can also add a function to show the error message in the error message and remove the error message.
This should not be here since `_arg` is a `Type` object that we can.
For consistency with the record, this should use `filter`, not `filter_date`.
Why don't we do this in this PR, but only the test files that need it? It wouldn't be good for this test but it's not related to the test file
The ` returns` is probably not needed here, since `child` is already a component.
why not just `kindToAddress` ?
This is a bad idea, but should probably be a separate PR from the previous commit.
It looks like this can also be `OnKeyableDb stateDb`.
It might be good to use `LOG.info` to handle the case when logging is not found.
I wouldn't change this, this is the wrong place for the response. But it is the wrong place that needs to have a `_best_score_` flag.
Does this need to be in the `app/services.js` file?
This is just a formatting change.
I'm not sure this change is necessary. `getResponse()` returns true for `onInstance()` already exists.
I don't think there's any need for this. We shouldn't be using it in a separate `_get_meta` function. It is only required for the user's configuration.
I'm pretty sure these changes are only needed if there are any callers to handle them.
I would keep this line, because it is a property ID, not a string.
If there's some actionable information we need to remove the action from the `target` class. Can we remove the action from the method and remove the `resolved_targets` function? This way we don't need to remove the action from the `target.name` class (although that's what we do in other places)
The logic seems a bit awkward here. I wonder if we should just pass `contract` as a default instead of an empty list. And if so, we should also allow null value to be non-null.
I guess we could keep it to make_values_to_unpack here and remove it altogether? <msg> I don't feel strongly about having such logic in this class.
This is not an API break. There is no way to send the secret every time it fails. It should only be called in the API then.
I wonder if it would make sense for the file to be the feed type. The feed type can be an object of `chunk swarm.Chunk`.
I think the `isArray` could be simplified to `tmp == null` and use a default value in `ConnectorConnector` here.
Why was this made private?
@chirimoya What's the thinking for calling this a `SolrFor`? It's better not to use `Solr` or `Solr`.
this is not in scope of this PR, is there a reason you picked this in order?
why `is_leaf` is not a `filter`?
Why are all of these lines needed? This is already checked by the `./pants help`, so this isn't a blocker.
Can you make it a `List<Long>`. It is not used in other situations, and we have a `List<Long, Snapshot>` methods.
Shouldn't we check for `helpText`? It could be `helpText ?? '');`
Is this change related to this PR?
we should set the route route to something more meaningful, like in the `aio_clientdata`
I don't understand why we want to change this line?
I don't understand how I see this change. Is it supposed to be here, or why the change is needed?
I would call that `['keybaseState']` -- the name is more consistent with line 468.
@wordpress ->wordpress
Is this intentionally in `BuildQuotaRatio`?
why remove the line break?
Please put it in `src/server/utils.go`. Also please use the same pattern for `src/server/utils.go` (see above).
This is a bit weird, maybe `SerialNumberint`?
Use a more meaningful name
I think you can get rid of it. It's a little more readable with the other two fields.
this is not a typo I think
This is a bit odd. If I understand correctly, this change makes me a little uneasy from the previous implementation of `config` and `host` if there were no keys (and `config`s do not exist). Can you try to figure out how to fix that? I think it's okay to do so: 1) `execute(config.signingKeys, ...)` 2) `execute(config.signingKeys, ...)`
I would rather see `send` and `sr1` here as we do in the past and in case there is a reason to do `print(" SCM') %x]`
You can use `$this_class_name` here. You can use `?empty($var_id, 'self::') === 0`
Do we need to import OrderedDict here?
This is a breaking API change. I think we can move these property to Node.cs
This is now a breaking change so should be added to the `GET` list.
@normanmaurer - is this supposed to be MDLDummy?
This is a change in behavior, right? I'm not a huge fan of this name, and it seems a bit weird to me.
Why did we need this?
Is there some specific reason you added these? The only time I see that you have to do this is that `9c1fb14affb398f850d0642f22f)` is `9c1fb14affb398f` which is the `3584fe777dd090e1d0642f`.
Would prefer `protected` as the variable name for consistency.
This should be pushed back
You need a space after `use` here.
can we make it clear it is used in other places, e.g. `CanBeatatatatatatatatatatatatatatatatatatatat2`?
I'm not sure this test is required, but it seems not necessary here to me. Can you explain? I think the test should just pass `sizeof(default)`
anything bad suggestion to name these "ZeroGasPrice" ?
Shouldn't we check `!= blocks.end (mutex)`?
should be `defaultTabIcon: defaultTabIcon` and then `defaultTabIcon: defaultTabIcon`.
what is going on here? if not you use a `first_notification(subject, string, topic)`
I think we can drop the debug logs here.
I am not entirely sure if we need the `callback` here anymore, but if `callback` can be used in other cases.
This is not correct. It is used in a helper function which does the checkstyle rule
This file is not necessary
This looks like something that can be a string. What do you think?
Is this supposed to be `extra_sql` rather than `sql` ?
Why do we need both ` JavaNode` and `@author`?
Please use a more descriptive name like `_unlock_TIMEOUT_enabled`.
Shouldn't this return `default` instead of the `Supplier`?
I'd say that `attr_value['string'] has been None` is a string and not a string. It's not a string like `attr_value['string'] is None`; it's a string: `attr_value['string'] is not None`
I think this should be `addons` since it's the `addon` package
Layout/IndentHash: Indent the right brace the same as the first position after the preceding left parenthesis.
This is a change in behavior, but it's unrelated?
It's a good idea to move the `isUser` check inside `SymbolSupport` function. It's probably not a big deal but it's also part of the code so that we don't have to.
I think this should be done in the `else` block. The `notify` loop above is not expected to be used by the lock.
Maybe this should be done in `lastPaymentFromUnencryptedWallet()`, similarly to what we did for `lastPaymentFromUnencryptedWallet`.
Is this class still used?
I don't think we need to load the role here since we're in a "amphtml" state.
Please check if `C` has no previous `role` and if not, add `C`. Also, I'd prefer `C`.
`core != null` will never be null. The rest of this file could be reverted.
Do we really want to keep the `setitem` method at all if we have more than one `git blame` instance? If not, we might be better off passing in `git blame` as `git blame` as a `required_and_commit` (or similar) to this `set` call.
<msg> eslint needs to be updated
This is the default for the flag in `spec/fixtures/spiration/fixtures/spiration/config.go`. I know it is used to be a boolean but I think this is the case.
Can you also update the title of the line above, to reflect the new syntax?
We can remove the ConfigOption here. It's a little bit too much to see that the config is a `SingleOptions.defaultValue(2048);`.
These 2 are missing in `System`s.
Does this have the meaning of the `AWS IAM`?
Thanks for the PR! Just a small thing. We can probably remove these.
Should this be `junit`?
This may cause an NPE if the other exception is thrown as well but not in the exception.
Why not use an annotation?
We should log this log in debug mode. In particular, this should be debug mode. The log can be used here, and the debug mode can be removed.
Can you sort these alphabetically please?
We might be able to move the logic up here to `AWS_BOUND_SA_SIGNING_KEY`, since it is no longer used in `ecs.h`.
So I see the point where I've moved these functions to `pkg/backend` but I think they will be better in different files.
There's no point in doing `nano::systemsystem (24000, 1)`, which may not be the best solution. You'll get a bunch of `is_current_user` calls here.
Do we need this check? Can't the user generate in the logs?
If we are sure a promise (e.g. on the go through) we are not doing anything - we are sure that it is always initialized, not sure what's happening here - if anything is not it needs to be done in the go through.
This can lead to a lot of lines in a few places.
I don't think this is the right place for this. We should only remove this if the `metadata` is set by `saleor/re-throw/non-syssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssyssys
I would put the logic in a `setItemVisibilityForservices(menu)` and then do the check in the `if (selectedItem.isLocalFeed())` check in the `isLocalFeed()` check instead.
It looks like this code was removed from the code and it wasn't necessary before
Why do you want to remove it from the PR?
Hmm, does this work with `<link, link=link, name=text`?
Do we need this for anything?
If you're setting `grc.mfout.printf("%s", q);` here, you can remove `if (!q) q = "<account_out/>\n";`
I think we can do `render json = find_show .update(id: show.videos)` and remove the `render json:` block
Can't you just print the error as an error here, instead of adding it?
this line should be reverted
you can use `errors.Sprintf()` here
this is wrong. This will never run on error.
@smarterclayton should we do a similar change in `h2o_quic_close_all_connections` too?
Is `hookState._value[0] = nextValue` necessary?
Don't need the `?`
typo: "String" -> "String"
The error should be more explicit, otherwise it'll just be more than just delegates.
I thought this was an oversight from a while ago, and it was a small typo
We should set this to true if optIssuerAccount is true. We only need to set this if optIssuerAccount.
Is this a change to use the `authCallback` interface?
Forgot to add this to the original version, we could just use the `var mongoErrorContextSymbol = '0')` above as in the `is` function.
@alexander-schranz what are the rationale for removing these `$entry_path_type`s?
In most cases, we are only storing `box#define(1, default)` and then doing `box#define(2, default)`
Let's also mark it as `HttpServerErrorStatuses`.
It looks to me like we're doing this in the same way that the client isn't actually sending `is_directory` and should only be called once. Could we use that here?
The argument `analyzeOptions.Verbose` is nullable, it is not null.
This is a bit weird. Is there any way we can just have `pass` in the context of `pass` and use `pass` in the `pass`?
@attributes = apply_default_attributes ? apply_default_attributes : default_attributes
I think the `-1` should be `-2`?
Do we need this? IIRC we have all the specs using a single `beta` class, not just one.
We can use a better place for this, because we use the path and path directly.
please add unrelated changes
I'm wondering why this is changing at all, but it seems like that would make sense to make this more generic and more expensive, so I would have expected it to be called just in a single place (and then have no been added). I'd prefer if this was just in the future, but that was a bit more accurate and I don't know how I missed something.
I think it should be `var aria = 'aria-hidden';`
Can we add a spec for this string? What happens if we have some sort of search that have different caller?
I don't think we need to keep track of these, but the field is being used for the `_initialized` property.
Should have a test that checks what they are doing before we set the `except` block?
I think we have the discussion about `increasedamage` here, I would say we just want `increasehealing` instead of `increasedamage`. But the above change does the trick. @kennknowles @tnozicka what do you think?
I don't see the invent of this new parameter. Do we use that anywhere?
I would prefer to remove the `firstLevel` from `is_numeric` method and call `getContext()` to keep the logic consistent.
@cramforceTLSSocketFactory is null here and is no longer necessary.
Please make sure your map doesn't exist before calling `getBaseSVIDPath`.
This is a bit of a weird, as it is an `int` (at least the whole `context` module)
`bool` instead of `false` since we are here.
We don't have to store this in the command for the apiName. I don't see why we need to get the format from the date.
Align the elements of an array literal if they span more than one line.
In general, this test fails for `Count` in this test, so it will be re-used with `ToArray` in the test.
I would suggest you add a check here that all callers to the old `name`s are in the same file. The idea is that if we change this in a subsequent PR, we would need to add some check to the new one, we can just remove the new one.
I think we need to get rid of this line, too.
Can you make this test more specific? I think the error message could be more specific like `with pytest.raises(SystemExit, "KeyError", e)` or something like that.
The <msg> why is this not `using System.Net.GetNonceAsync(onBehalfOf)`?
I don't think we want `max` and `max` here. I think we can assume `<` should be a second arg (since the user is returning the same value in the middle of the list).
I wonder if we should instead make the `HeaderDownload` in the call to `code_resource` instead and pass it directly in to the `code_resource` (or just call the `RLock` here)? Or maybe just have an `resource` instance on the `HeaderDownload` instance on the call. And if so, we should just have this method inside `hd.lock.RLock()` as well, so that the call to `resourceType` is called from the appropriate `code_resource` instance and remove the `resourceType` call.
nit: `.de` is misleading.
@bvaradar can you explain why this change is here?
I think this should be moved to the `mne` module since it is now used for the `mne` module
We might want to log this error.
can you please put in a function that sets up the phase as a parameter? e.g. `c.state.ForceRebuild`
@danrot @danrot what do you think @aghassemi ?
It should be "4K" here to make it sound more intuitive to hide all the things in the application.
I'm still wondering whether we should remove load_config from the API?
I'm not sure about this. The idea is to allow this for every request to be a valid set of flags.
Any reason why this was removed?
This change is incorrect. It doesn't seem safe to use the `sourceIDs` field.
This is probably a bug that should be made back to a new commit?
Why change the copyright year?
Can you use `results[]` instead of `resultsMap` here?
Should we add a new param for this to avoid the check in the `_onNvdaStartupComplete`? Or is there anything else we should be able to get here from the actual implementation?
Can we update the `${${${` tests in this controller as well?
Do we have any other response for this?
Where is this defined?
Is this change supposed to be in here?
Shouldn't this be `RemoveDir`?
Should `EnforceShouldRetryCheck` is an `bool` check here. In particular, it's just for the case that the region is set, which is the actual value (or should) be set.
This should be `filename`.
Is this the correct move to the `Down`? I think that we can revert this back to now that we need it in the other files.
Is this needed?
Hi @jridgewell FYI, this PR has to be fixed, but I don't have a better opinion. Let me know if you think about this.
why this change? It looks like we're not using this anymore since we already know how many objects are using this.
shouldn't we replace the templates.first.customization_of.present? as the param?
shouldnt this be `ip /^^ip.*:`?
Is there a reason for this particular capacity being passed in here? It seems like you are doing this in multiple places.
Please use `resp_.get_if_not_exists()`.
If `fbo.rekeyFSM` is `nil`, then this will be `nil` even though `fbo.rekeyNotNeededEvent` will not have a `fbo.rekeyFSM`
I'm pretty sure the config won't work here since `config.order == 'random'` would be the right thing to do. I am wondering if there is a way to keep it so that if we're doing a random build, then we might not have to make changes into a separate PR, but still we need to keep it. But we can probably keep this as it was and keep it in sync with the next time.
I'm not sure if this is needed - the elHeight check should be set as elHeight first and then if elHeight is set it will be set by default.
I believe we can't use `getKey()` if we don't need it
Why not do `return command.GetType();` directly?
This import should go up to the top of the file.
@kargakis do you mean this is the only change to true?
I'm not sure we want to test for this, but if not, we could make it public and provide an annotation
nit: I'd prefer `Kokkos::Tools::popRegion_Tools` as a global variable.
How do we know this is not true if we're returning true?
Why did you remove that?
`low` is a bit vague, can you add a docstring?
Shouldn't this be a `Error` rather than a `dispatch`?
Don't use `.via()` here (and in `then_from_this()`) also need to be updated.
I don't think that this should be done here?
isMonotonicValue isn't used anywhere?
I think you mean `IConnectionHandler` ?
This is a `*Delegate` line for some reason, so we can't just always use the `adding` here as it's not used anywhere.
`ExpireSnapshots cleanExpiredFiles` is not a `boolean clean`. I would just call it `ExpireSnapshots cleanExpiredFiles`.
Does it matter that theip was in the middle of a port?
Why not just do `return maybePromise && typeof maybePromise.then !== 'function'`? The `maybePromise` will only ever be used for the entire Promise, so it should not matter. `isPromiseLike` is a good practice, so `is notPromiseLike(maybePromise)` should be enough
We're not going to be using this anymore, right?
I'm not sure how this was supposed to handle the errors that are not the case, so it looks like there is no way to get the actual error message.
This is not needed since the v1beta1 default page is used in the `gcpduckv1alpha1` package.
I am not sure about having this in the global namespace here. If `manifest` does not exist, it will be `None`. We should be using `manifest.json` instead of `content`.
I don't believe we want to remove them?
Is there a particular reason why this wasn't there before?
This could be a constant, e.g. `this->websocket_server->run (2)`
If a category is not used and does not add any new methods to the interface this should be removed
This should be using `CMAKE_SOURCE_DIR`
should this stay as `Balance`?
there are two places where there are 2 different services. I think you should change these to use the `Containers` constant in `api/v1` and have the value there as well. Also this will allow us to merge those two as we do for all our services.
Should this have a `Token` argument, and have it return something with the same page?
Why set connect_timeout to 10?
Is the TODO still needed?
@Scottmitch do we need a check here that `this is not null`?
Unused method argument - Bolt. If it's necessary, use _ or _evaluator as an argument name to indicate that it won't be used.
@normanmaurer - this is where you can't use a custom priority to get an empty string.
Is it possible to get rid of this call, just like it's done everywhere. We can pass a `read` object to a `read`. I think it would also affect the `_` provider from `ObjectForFn` if you want it to work.
this can be just `vlen === 0` right?
I don't think this should be necessary. The `Text` property is `AnyView`.
You need to use `propStream.read` here.
`adaptivescalar` is the only place where `adaptivescalar` is used.
Nice to see that you can't use `safe` to get rid of this function
We should move the code inside `apply_return_handle_call` so that we can verify no real calls here.
I think we don't need this line anymore
You should use the `attachShadow` function here, not everywhere else.
can we rename this to `runUnifiedTest`?
Should we use `\Request` here too?
We should probably use `<=` to reduce coupling.
@jona-sassenhagen, this is not the correct way to go. The `_MESSAGE` key is used to set the `dest` to `true` in the `argparse` model and this key is also used to set the root key as the last thing that is not the root. We need to think about how to test it, or we could set `_MESSAGE` at that time, or the root user can use `null` as the other side.
This should be the other way round.
Shouldn't this be done in a try block, or a `get` method, and then use that here?
I think the error was not clear. I am assuming you're trying to use the same logic here.
`n.getParent().getNumChildren()` > 1 is probably a better approach than a dummy function.
I believe this is a good change, it should be an anonymous-case
You could change `logId` to `logEntry`.
I don't think this import is needed?
Is this related to the current change?
Shouldn't we add a new property for this to avoid duplicating the API?
I would like to have the same as the API review, but I would like to keep track of all those fields as public and avoid having to make the API review easier.
@mhoemmen Can we have the controller controller use the controller instead of `bootstrap-hidden` in the controller? I know we will have to make sure we don't accidentally remove it.
if uh.Dynamic is false, shouldn't u.MaxFails == 0?
We need a copy of the whole file. We don't use `Query`.
why is this being removed?
This is not true, as it is already defined in a file.
Should be `sessionStorage?StorageStorage`
This is a change in behaviour. You need to move it to a separate function and then call `gStorageServer`. It seems to be not needed in this case.
I would remove the `!` here and change the `if` condition to `latest.BID() > LocalSquashBranchID`
I'm afraid this may be intentional since the user specifies the generator and not the main main enum
I'm not sure this is the right approach since the `44.49.53.43.53.52.56.45.52.5F.30` is indeed the best choice of this.
Not sure if we need to add anything to `register_layout` here but I'm guessing that's the right place for this.
Can we add a `utils.pointer/app/utils/pointer_cmd` to the `install` folder?
Is there a reason we're not passing the IP forwarding in as an error message? I think we should be returning the IP forwarding in the message, so that it is possible we don't have to pass the IP forwarding in.
Is there a reason to not put the `/` on the same line?
`update` is not correct. Also this should be a `var` if you want.
@tnozicka this is the only change I've added, so I added `unpolicy` to this function, so I added it here as well.
Another `_Image_simple_loits` candidate.
I think it would be better to do a `String.valueOf(Object)` instead (or maybe just `if (!search_malloc(filename)) {` to avoid the need to check if `SetHeader` is not nullptr and should only be called when loading from text file."`
This is the only change I'm worried about the changes we're testing. If there were two different changes, the code was just doing some changes and I'm pretty sure this was the case that we've lost, so I'm fine with this change.
Does it work if the user specifies the name of a single variable?
We have to add the new `add` prefix to the `global.js` file, so that it is added there too.
this should be a warning and should not be done as an error.
This will be `str`, `str` and `int` is wrong. We are not going to use the same thing for the other tests.
This should be `.toAbsolutePath()` right?
I don't think it makes sense to move this into a function `getClass`?
Line is too long. [81/80]
nit: don't we need to use the godoc API here too?
shouldn't that be `draw :users`?
Do we need to pass the repoName into `models.RepoPath` here?
I'm not sure if we can revert these changes.
We could probably make this a constant. It's not a good practice for this.
This is the same as `fallthrough != nil` below. You'll need to add this to the `case hasURIs:` below.
I think this should be `Uri getUriForProvidedFile`
Would it be better if the order of mhtml was imported and put it inside the constructor?
Isn't we trying to do this for port port port port port 80? Can we make it configurable?
`:secrets` should only be available if `config.respond_to?` is true
What was changed in this PR?
This seems to be a potential bugfix. Is there any way we could also just remove the `is` check?
I think the idea here is to make rollup-plugin-commonjs automatically automatically automatically automatically automatically automatically automatically enabled. So, letting the default be `""` instead of this new block to avoid leaking into `src/compile/resources/resources`.
This isn't necessary
I wonder if we can remove this TODO?
Can be simplified by using a `@Nullable`.
This seems like it is a bit disturbing, but if it's not going to be called from a machine configuration, it may be useful to just print the validation of the machine.ImageID. I'd also like to see if this works for now, but maybe we want to do a similar thing in the `ubuntu.04`, not something that's a follow-up.
You can probably remove the #ifdef in this file, and just do it for the following.
nit: we have to call `h.Run()`
you should also add `:current: :com();` to the association `new_fmt` here
I think this is not the correct value. It should be a property like `pkg/api-version.go` and then we can set it to a value. The code here is that the file is not being used as part of the file in the interface.
This seems to be wrong... the object does not have an object in the constructor
I don't think it's good practice to keep these since they are for the same reason.
Maybe this can be a one-liner: `const DRIVE_FILES_FIELDS = 'kind,id,name,mimeType,ownedByMe,files(role,modifiedTime,iconLink,thumbnailLink,thumbnailLink)`
`init` seems not used anymore?
I don't think this belongs in this PR.
You need to `return Options{}, nil` here because `usernameusername` will always be nil
The viewBox might be more readable.
Why is this a tipset? Shouldn't it be a `Heaver`?
Nice. Did I have a mistake to change this line to `.mib_re_strings = re.compile(r"^([0-9]+]+::=\s*\{([^\}]+)\}", re.M)` ?
This change is not related to older PR. It should be reverted.
you can use the same name as `defaults()` method
This would be a breaking change. The current implementation is only used for `off`.
shouldnt this be a `@docusaurus/core/lib/babel/preset` file?
Can we make this `@param` (or just `final`) since that's what we already had before?
Should be `old_env` instead of `set_env_prefix` since that's the only use of this feature.
It looks like all the changes in this file are only unrelated to the PR.
This looks a bit weird. I'd like to move to `k8s.io/apimachinery/pkg/util/wait`
The only thing I see is that it should not be possible for this. I think the original version of this is a bug, but I think we should do it now.
Can we add a check if the timeout contains a strictly pre-CMAP world? I think we shouldn't do this in the future
neck is not None by default
This is a `facet_paginator_class` function. It would be better if we could just call this method `facet_paginator_class`. The hook would also have the same problem, but that is not the right solution.
Please make this internal to be consistent with the other types that contain this type.
The original `Need to fix the bug to be able to remove this `#`, since its a no-op.
Can you update the doc?
Use || instead of and.
The `||` should also be kept here
I think it would be better to keep the `FailsafeInboundHostPorts` and `mt` around
why not `static_cast` ? it is not used anywhere else, so I would remove it for now :)
Is it possible that info.info.name will always be null?
I am not sure why this is needed. Is it really a good idea to include a `PythonStore` from this call? Or do we expect it to be zero?
Is it not the expected ?
Why are you using "DatetimeIndex" here?
I think this will break some existing code that is being used.
Is this the right place to use `kind`?
What is the TODO here?
Can this just be `git_hash`?
This is probably OK, but the other option is `static` (see line 118).
This code is a bit weird, maybe in the next if block?
I think this is wrong. I think a function should have a default value (which is null, but also an error).
The `mangle_single_step` function can be used here. The `dcontext` function can be removed.
I do not think we need to do this. If the `TabBar` is present, then we shouldn't need to do this. We should be using `.toString()` to get the `TabBar` value in every place, but I'd like this to be a problem since it doesn't matter what we need.
I think it would be better if we moved this to `toptop` and always do it again. But if we want to do so, we can remove all these checks in a single call to `toptop` and have the same code be used for both
Why are we not "Approvals::Individual" anymore?
What does this mean? Are you sure it's not always true? It's the same as #if addr.Network() == "unix"
Why not use a small private private private set here ?
Why do we have to put this in `project_id`? It seems to be used for `table.project_id` (which would be an immutable BigQuery of both)
Should we log here?
I think it should be "write.delete.parquet.row-group-check-min-record-count"
This needs <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg> <msg>  is it really really `font` to be consistent with the naming here, it's better to use `font.get("UST.category", 'category')
Missing space after #.
I am not really sure if this can be null. It will be safer to use `pkiAuthenticationPlugin.getMetricRegistry()` and `pkiAuthenticationPlugin.toString()`. The `authenticationPlugin` should be used for `QueryRunner`
I think this is wrong. It will always be true if it has a user defined in the session, then the session does not get finished.
Why was this added?
No, we should only support it.
do we really need to copy the outer outer components here? Seems like a copy/paste error?
@kacf @gustavonalle could you help me understand what this was supposed to do? This would prevent us from reorganizing a `<bool>` around if it's `true`, but it would mean that we are not actually using it.
This should be `SpanContext` instead
We're using this because we are still using the default in `byteslice`. The default `bytesary` should only be used for `buffer.length`. So the `byteslice` should only be used in `buffer.length` and `buffer.byteslice()`. The code below should also be moved to `bytes`.
Is this a valid default at the end?
this is going to be something that needs to be set in the config file? I think it's probably okay if it needs to be set in the config file or not. I'll move this to the next PR if you want
This is not used anymore!
so glad to remove these
`king/v1beta1` needs to be added only to the `networkpolicy` namespace.
Wouldn't it be better to move this to the log level?
This is the most important change. I would just call it `nil`, and call this `belongs_to` instead.
I don't understand what `T extends WebElement` is doing here.
I'd prefer to keep the line length limit.
Why did you need `io.ReadCloser` in this file? The `Open` method returns a tuple of paths, so we don't need it to be a string.
I'm not sure what this does if it is in the current state. It doesn't seem that it is in the current state?
This should be `this.member.name || 'NM'` to make it not work?
Looks like this is the default value for `-/.pants.html.erb`. I think we should have `-/.pants.html.erb` or `-/.pants.html.erb`.
why not `cm`?
Can you change to `duckv1.Source` here?
Should we be checking if the object format is not `null` here?
This is an example of what needs updating. You could also do `.fetch(:read) if criteria.options[:read] if cmd.delete(:read)`, I think that would be more appropriate.
We may need to fix the bug, but the old code was good.
I'd like to see a more general const in `deleteNode` for this and then just call `logrus.Warn`.
I don't think you'll want to add `variable` here, but I'll fix it later.
You should be calling this `_botocore_parser_integration_test` here. See `_Feature_test.py` for testing, as this doesn't have anything to do with the fact that this doesn't work.
change to lowercase.
`auth` needs to be an `Iterable` argument to avoid the `request`.
This is where the `-mapping` module has been started. I know that you are doing this, but it's not really a good idea to add that here.
Please use a different name for this test, like `expect(calc.endColumn).toBe(3)`
I'm curious why this is needed.
why did you change the signature of `getChainId()` in this PR?
Can we just pass the `$attributes` argument to the `$htmlAttributes`? I think it is a good idea to check if the array_key_exists('lazy', $attributes) is set and if it is not set we can.
I think we could remove `Cache: false`.
This import should be removed.
Can we rename this to have `fieldId`?
If we do not check that it's nullptr, why do you keep the check here?
Please use `ImmutableList<String, String>`.
This is not the only place I'm thinking.
This is an unrelated cleanup, but I'm not sure what's going on here.
nit: can we call this `ndeltas`?
I don't think this belongs in the interface
`Close` is enough here, maybe we can move it to `criuServer.Close()` and check `error.Start()` if `criuServer.Close()`?
I know it was already here, but would it be better to do `errors.task( 'npm run test:js', ...,` or something to that test.
is this going to break the `Errno::ECONNREFUSED` check above?
We can use `.format` instead of `.format` for the time we get this from the api because it's used for the `movie` instance.
I don't think we need to check for onlyVertexProps_ here since it is not only for debugging.
I don't get why we need this check?
This is now done in `plugins/unitunittests/test_op_daos/unitunittests/test_op.py`, so it should only be added here if you need to use `_getCheckpointFileFile()` in some of the tests
I think this will be more readable as a PEP8 PR to remove this.
I don't think we should be checking if `cfg.External.Enabled()` has already been handled in `Read()`.
I'd move this to `ba.xml`
This needs to be changed back to `namespace Microsoft.CodeAnalysis.Sarif.Readers` for the new `using` statement.
You should also add this conditional to `this.inspector` below. There's no need to create a new `try` block below.
This looks like a bug in the test that I added to `pool.PoolAddEventHandled` to verify that no other case is returned.
Is there any specific reason for adding this check here to ensure that if the provided provided provided provided provided, the coroutine check is not needed (if the provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided provided
I think that in the future I would just make the default a `ProtoUDP` value.
Is this related to our current implementation of `Import`?
I'm guessing this was a "care" error? :smile:
`log.finest` is a bit ambiguous, how about we make a `log.info` function that returns a `In dev mode. Copyed?` ?
I think we should keep these constants for now, as the `SELECTIVE_INDEXING` is a bit misleading.
This TODO and `switch` need to be removed, since it's a TODO, and it's not really what we want. It's possible that the executorManager was being removed and we are still running before, which is the expected behavior, since the executorManager was not expected and so the executorManager would never be true.
Should this say the user provided timestamp? Or is the message "the client was created"?
can we add a `TODO` here?
Is this change intentional?
I'm not sure we should remove the "source" part since it's not being used.
This check is not needed.
This is unrelated to this commit but it's not related to this PR, it will be difficult to read without realizing it.
Why are you using the `config` package named `remote_config` instead of `config/remote`?
Nit: Use temp variable to have `!TEST("1U << 31, enc)`. Also, you can use the `key` operator to get the size of the argument list.
nice! Didn't know how much this works.
add a note to say that this should be `absolute`
I think this is a bug, it could be extracted into a helper function
Can you add a changelog entry?
I would not add this to the `prescort` folder since this is an API break. But I am a bit concerned.
We should probably be using `time.WithWith` here, because this is a no-op.
I don't have the original implementation. Can't we change the bodies?
Maybe rename this field to `ExternalEntityReference` and `ExternalEntity` to be consistent with other services?
Do we have any plans for using `sessionInfo` here?
This is not the only exception the plugin is doing. I'm not sure if we should be doing this. The `exists` will be the only thing in this context (i.e. not for `uppy.log`) but the method should be in the `uppy.info` file (which is not what we want to do for the `script` page, as the error will be `out`
We'll want to keep these three test methods as is.
This is not related to this PR, but I would probably move this line to the bottom, if it's only used once in `weeklyIterationDripMailer`
Why are we doing this?
Should this happen in the new `if` block?
should this be "snakebite" ?
This is probably a bug on the code style. We only need to check for the `attr == ""` and not to check for the content unless content == ""`, and then check for `attr.select!` to check for the `list_tasks` content. I think this may cause a problem for other methods in this PR.
Is this used?
Remove empty line.
This needs to be a `deprecate` right?
Can you please move that to the top of the file and then just have it there, it will be easier to read? Also you can just call `DeleteOldDateArchive` on `context.DeleteOld.Date`.
I don't think we need the assertion to check this, as if no module is present we could get to `XhrClient`.
Is there a reason this was changed? I thought this was a blank field in the migration?
I believe `NetUtils.canClassNameClassName()` should also be a `warning`, and the error message can be more efficient.
Why is this not SELECT_COUNT = " FROM (%s)"?
I'd prefer to keep this, as a general rule. We're not actually doing anything useful in the past. We could try to avoid that. We should be able to make this a little more generic.
Is this an important debugging code or should it be a one-liner?
The name `goto` is very confusing to me, it's a bit confusing to have a name "real" or "err".
The `this.ratio_` can be undefined.
What is this line for? I don't see a guarantee that the IP is initialized to the client (which is not the same) but I'm guessing the semantics of this code would need to be inside `getMaskedIp`?
nit: it'd be nice if you could also get rid of the `find` operator as it is done everywhere else.
Should the test case be updated too? (I assume it does)
I wonder if this should still happen in `source.Create()` and only if the `CreateTChannelDispatcher()` function can return an empty list?
nit: I don't think we should put this here. We could add the old name to `getDownloadSizeNumeric` in the method.
If we don't do this here, maybe move this to the `Amqp.from_params` function?
No need for "log-callback" here.
nit: we usually don't use `!test_with_many()` for this.
If the `isPresent` is not used, can we rename GoQuorumOptions to GoQuorumCompatibilityMode?
Should we log the exception here? I think we may not have to worry about the caller to write it.
This is a bit ambiguous, it would be nice to have it as a constant
can we use an enum instead of an int? i.e. "max-snapshot"
I guess there is a potential issue here, where this is a test-only network function, right?
I don't see the usage of this package anywhere in this package. Can you explain? :stuck_out_tongue_closed_eyes:
We need to add an explicit default value for the image.
Should we also return -10 here?
`len(args) > 0` is not needed.
why is this change needed? it's a separate commit
I'll be tempted to update the `trace` to use the `islevelScript` instead, to make sure the output matches that it's not in the console
Line is too long. [90/80]
This is a bit confusing, why is this needed?
It doesn't seem like we can get rid of this?
shouldn't `host_is_unix_path` be `host_is_unix_path` also? Or was it done in `host_is_unix_path`?
This is now done with the new PR
What's the purpose of this?
`int` and `int` should be `string` IMO.
can we have this in `valuesElement` instead of here?
shouldn't be `final`?
why is this required?
What was the purpose of this line?
can you explain what this change is doing ?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
you can use `<link,class>`
This should be called `pipeline_name`.
Should this be a `AddPath` type?
The above if statement should not be changed
~~Maybe I could just import it in `Infof`~~ I'm sure it should be in this file, but it is not a problem with the changes in this file.~~
I know it is not your change, but it seems like this should be a bit shorter and not a part of the task. It would be good to do a similar in the other changes.
s/80/ ?
What happens when the scriptEngineNameJavaScript is false and when the system is false?
Is this used?
I would prefer the error returned by `CertificateCondition`
This is the same as the one above. The function is `std::lock_guard ...`. Can we fix that?
We can now remove this, it's not needed anymore
This should probably be called `acquire_exercises?`. Also, I'm not sure about the name of this method. It'd make sense to make this part of the class `acquire_exercises` a property (e.g. `acquire_exercises`).
It is possible to reuse the `AVAILABLE.DefaultFeatureGate` value from the `AVAILABLE.DefaultFeatureGate` value, which means that if you use it here you will also need the `networkpolicy.StatusController` value. It can be changed to `networkpolicy.ErrorfController()`
this is a leftover ... please make sure to avoid a conflict.
@daniel-beck I think the change on `pendingRequest.configuration.remoteHost` should be sufficient to just `pendingRequest.configuration.remoteHost` since `reportHost` is a no-op if `remoteHost` is a non-nullable value.
I think `query-settings-in-solrconfig` will be more appropriate here, as `query-settings-in-solrconfig` can also be used.
Please remove the import order.
@michaelkuhn Do you know how you feel about this? I think it's fine to make clear the pattern here.
Please fix your opportunity to update `chconf.sh.api.AbstractAbstractAbstractAbstractAbstractAbstractAbstractAbstractAbstractAbstractAdapterAdapter` to match the other arguments
You will need to fix the merge conflicts.
Why changing this to `typedef`?
We should probably move this import to the top of the file
sounds like a lot. Can you change the name to "BoxWhisker"? Also, I guess it's more like "This is used in the test".
@wido I changed from 1.9.0-master+$Format, so the package is not in there in the middle of the Default and the `v0.0.0` package will be set in the "holint" package. So you should use this here to add the `version` package to be set in the `spack info info` package to make this change.
I believe this is a typo?
I wonder, what if we made this a bit more explicit, say, "--no-Additional"?
This doesn't seem to be related to this PR, but can you revert the change?
Why is this still required? I don't see a reason to change it.
This is a bit dangerous, as you're changing the default behavior of `pgcfg.MaxIdleConnections > 2`
This method name should reflect what it was before, and it is not used.
@jeherveharter, I had been trying to get the most recent version of the versions and made sure it didn't break anything. I'm going to change the version back to 1.0.0-beta.5 here but I don't think it should be a breaking change if you want.
Should we rename `search-console` to `search-console`.
`obj:`dataset` is an optional argument here. You're missing the `Args` argument here, and you're missing an argument.
Do we expect this to be used?
Why did we need to make this change?
This method will throw an NPE if there is no `clear` method.
I don't think we should have a package that takes in a global `github.com/spiffe/sri/pkg/common/plugin` here. `github.com/spiffe/sri/_pkg/common/plugin` is not sufficient.
@bdukes @wido you have changed the type of `window` as well.
should this be `false`?
Can we call it "none" or something?
I think we should be adding the default here, not the default.
Should this be `balance.Int64()` instead (and also in `AvailableBalance.py`)?
I thought that it would be better to have the developer edition of the Node.JS SDK for Realm does not include sync on Linux.
can we call it `username` as well?
I believe the store might be superfluous. We should only use the block value for this store. We can add the block for `main` and not need it at all.
`IP.IP`? Why do we need the `cfg.IP`?
Why are these tests needed?
nit: the order should be in the next line
I think this was the only problem where we need to do `from_enoughr=...` for the `dvc go.py` file. I think the `in_time.py` should also be updated. `dimensions` is probably not needed anymore.
why is this necessary? do you need this line?
I think it would look cleaner if there is some sort of race here, but not in the next PR
Just to be sure, this will need to be `pkg/errors/` too.
Since you're changing the spec I'd write this as `Resources.unsets scheduled_for_deactivation_on: 1.day.from_now` so you know that all these are needed to be updated
Why not simply `private` ?
Why did this need to change? It was not related to the PR.
Let's add a note here to the docstring that this package has no effect.
Why was the one being replaced with this line?
Remove this line.
Not sure what this is for, but it's not doing anything anymore.
these tests were gonna run on macOS but we can't use them in the tests.
This is the fix. This was a bad one to the JIRA issue.
This is the only place where `spec.ach` is used. Can we remove `spec.ach`? (same for the other places in the file?)
The name `how` is not very descriptive. Maybe `howDialog` or something like that, and `howhowResult` is more descriptive of where something like "OK" would be helpful.
Can we add the same description here? Or is it used for some other command that we don't want to set?
Can we use this in the future and put it in the `method` file?
Wouldn't `self.projects` be a good name here?
Do we need this as a call to `Fsync` on the next line? I don't think it can work without it.
I don't know why this isn't a function. Is that related to this change?
Can you revert the change in this file and the next commit?
I think we should add an 'error' error to 'error.message' and 'error.details' to 'assembly.assembly_id'
I would recommend renaming `$access` because it is not really necessary to add `trim($access) !== ""`.
Shouldn't you use `return parser.ParseFile(f, src)` here?
@ruflin I'm not sure about this one :-) Do you think this is the right place for this? I would expect some sort of "if we don't add a "toSeq" method.
I think you are missing an example here.
Can you add an optional parameter `IntPtr`? It seems a bit odd to have `Type` return a `ImmutableMap` if the type has an exception, which will allow us to override some sort of type.
use a `["spec/features]` instead of `assert`
why is this error ignored?
why is there a import from `blob` class?
Is this an error in this file?
Shouldn't this be `if (!service)`?
is LogWarningMsg used anywhere else?
This test case also tests that the `setDefaultDefaultContext()` method returns true to ensure that it does not run.
I don't think the `region` can be removed here. The stackLocations will never be used.
nit: this should be `glog.V(2)`
I think this is a leftover - not needed
Can you also add a `Log.Information` to the log of debug logging so that we can use it?
does `UnknownTypes` need to be public?
The "unsafe" of the type is `ExtractorCallbacks*` but it's better not to check the type `ExtractorCallbacks`, but that's why I didn't see it being done.
Why do we need to make a temporary temporary?
Why not `getPubDate(getComponent())` to avoid this in the previous `getPubDate`?
This will be a bit of a breaking change. Maybe it makes sense to add some file on a system property?
I think the old version should be `since TODO: node.stupid, node.stupid, node.stupid, node.stupid.addadd.addadd.addadd.addadd.add.cscs
Can't you use the `LAYER_INInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterInterD, for clarity?
`Rule` is not a multi-comma naming. Please use a single-character `min_sizes` to resolve all the tests in this file.
The `network` is already in the "defaults" context, not sure if there's more than one link for it.
Why are these being moved? I don't think this import is needed.
Do we need this `role` attribute?
Why does it need this line?
nit: the line should be after the the `isRegion`
What's the motivation for not use a `reportreport` in this file?
Is there a reason for moving this out of the scope of this function?
why is this removed?
This should be moved to a new line.
why do you need both os and the next line?
Is it worth adding `tlsCertTags[certFilename]string` to avoid this kind of issue (and also the following `tlsCertTags` above)?
Since we're now removing the `Number.MIN_SAFE_INTEGER` variable can we have a constant constant for these two variables? It looks like we're using the constant for the first one.
this could be moved back to some common place.
Is there a reason why this line needs to be changed?
Why was this added?
whats with this? why is this not just `calculateUnit::MaxDefaults`?
why do we need to copy it from `spack install --init`?
I think you can just call `Model_index` without adding another field. Otherwise you might get a lot of code by using `configure` to determine that `None` is the default.
Is this change in behavior? I think the test should only pass 1 if it's not being used. @stephentoub do you know why this change is necessary for the fix?
You don't need the `__str__` for this. Just put it in the constructor and add a new one.
This is a very odd change that was not really related to the fix, but I wonder if we want to remove the fix to the next pull request.
@dvoytenko why do we need to clean up the `instanceof` here?
What if the command doesn't exist for `--set-num=True`? I am surprised this works.
This should be removed as the default here is not the default
How about we just put the `ping` on `DATA`? Then we don't need the `reject` method anymore.
`assertEqual` returns `True` if the test fails.
There is a lot of these in the "modules" file that should be changed to "modules".
nit: I think the old name `getInputTimes()` is a bit confusing. Maybe `getInputTimes()`?
Could this be `Git`?
This should be `breaking;` rather than `don't necessarily`... you can have `SetAzureReferenceState` with a `Set<T>`.
Is this still needed?
This was changed to add a new commit.
This doesn't seem like a good idea to me, but I wonder if we should be using `nil` as a `String` and then we have a `String.prototype` and `String.prototype` for this.
Wouldn't this still fail if there is an error in `Stream.java`? If there is any error in the current code, I'd like to keep a test to fix the behaviour.
Do we want to allow mocking manager to have this? (noting that I don't think we need it)
This is going to be the right place to put this (if not) under `KEY` right there, right now will be the `goog:chromeOptions` flag.
Is there a reason why we wouldn't just pass the result directly here?
What's the reason of this change?
We should add an example here to make sure the type is stored in the Writer, otherwise it will be stored in the Writer and you do not need to know about the Writer.
Do we need to also check that if we have `default_options` in each config? Otherwise, it will always be `None` if there are no entries in the database.
This is the one line that should be executed before the old autogenerated strings. In the case when we don't have user provided headers, we still still want the localized version of the `Resources.ImportTransitionListColumnSelectDlg_DisplayData_Column_` + (i+1).
Why is this not just `len(blk. x)`?
We should probably make this configurable.
Shouldn't we use the builder in the constructor as well?
why is this removed?
@mikedoHuke @jridgewell not sure if this is a good idea. It might be a good place to do this, but I can't find it in the future.
Shouldn't this be a regular `delete_files_before_test`?
This file was changed in this PR as well.
Why do we need this getter ?
should we have `global` here as well?
Maybe we should create a single function for that instead ?
This debug statement was added by the mem binding condition to be consistent with existing code.
This was changed to make a difference in the PR.
Is it clearer to have an option to pass an empty arg and update a parameter of the function?
We need to do a `moves` check before trying to do it.
Is this a "common" thing?
This should be removed
Perhaps we should use `Newtonsoft.JsoninED` here instead?
Do we really need it? I would just change it to use tabs. Also if we use it here, I think the code would be more readable if we used to use it in all the `service_confirm` methods.
Did you mean to delete this line?
Should not use `params.merge_for` here.
@Pearl1594 can you add some details here, or was the problem to make this a bit more obvious?
Does this need to be on the wrong line?
Shouldn't we check both `if !sync.isDPoS` and `if !sync.isDPoS`?
This test is not needed since the test case is changed.
Remove the declaration declaration.
I think you can use the same name here: `31.story.       pression`
What if we have a name like `fieldType` that should we use it here?
Where does the endpoint come from?
I don't think this will ever get useful for some reason, since it's a `request`.
>message_a.response->first [](start = 28, length = 1) nit: we don't have the `is_cache_message_endpoint` check.
Use 2 (not 3) spaces for indentation.
This could be done separately if you call `onPreExecute()`
This test is still testing the right thing, is it possible to use this? The specs are still testing what was there before? Also the `with_create?` check should be removed, right?
Please remove the `@Nullable`.
We should have an `with ConnTrackInterfacer` that accepts `localhost:3000` and generate the error from both config and appropriate.
Is this unused
This is just a small small question, can you explain? If you don't need the version, just return `false` and return `stat.getVersion() <= aliases.getZNodeVersion()` then you don't need to have an empty list. I'm not sure we need that here since this is the case anymore but I didn't see a reason to make the code change. If you have any other calls to make it more explicit, how do you feel about adding an assert here, that the caller can call `stat.getVersion()` instead of the `stat`
I would prefer this one to a more specific one (e.g. the `string_trim` function).
I'm not 100% sure this will work, because we don't have any reference for `isApplicationObject`.
This will break the build time.
Should we do this before `#if someone else {`? Otherwise we can get this back for now
move this to a constant so it's clearer to use the value when creating new entries
Why is it being changed to `Done` here?
Should probably use `os.environ.getAmpDoc()` instead, so you don't have to make it work here.
Nitpick: We shouldn't call this command command, `spec.CreateSnapshot` or `spec.Createscheduled`.
I believe the `NetworkPolicy_bad_alloc` calls `Contains::input` as well.
This is not really the right fix to me; it should be fixed in this PR.
I think this needs to stay as `# PrivateKey` since it's an actual real file
Does this still need the `!isDebugEnabled()`?
this is a copy paste change. I think we could just leave it as it is and add a list of exceptions in the list.
Is this the only place that needs this set? Or is the default value set by the user?
Never use `path_info` for the function signature.
Do we need to do anything to check the existence of the var in the constructor? We should just do that in `MetricLoadLoad()` and remove the var in the `**` class
This should be `_create_REQUEST` instead (and a more specific location, as the file name is not clear as the `IOException` name is clear).
We should not need to keep the previous version here since the test code already evaluates to `CouldSrcSrc` and this test was using this method and this test should be removed.
The original code is a bit ambiguous in the code. How about `invocation.addContext(Const.SRC_INSTANCE, getInstanceId())`?
I'd rather use an enum instead of our pylint. (also for the other places below)
Style/RedundantSelf: Redundant return detected.
`assert_is_extension` check isn't needed here?
@michaelkuhn Do you know why this is not being used anywhere?
This is not the most appropriate. The `@deprecated Class` annotation should be removed and stored in the `UIUIImpl` class.
can you remove the package?
It might make sense to rename this to `countlySidebar/updateSelectedMenuItem`. Then the property can be set to the default.
Not sure about this one. The v1alpha1 version is already in the middle of the version, but the v1alpha1 version is not the same.
This should be `x$san_enabled ` in the same line and the one from the test above.
remove the TODO in line 562.
Why is this being removed?
This function is called in one place, not in this file.
How would this ever be null?
I am not sure about this since this is the same code as `server.get()`. The message is also in `serviceStore`.
You might want to add this to the other modules as well.
we use uint64_t for new public api
Is this correct? I don't see it being used.
I'm sure that I'm missing something, but it seems that we have already done this in all places where there was an error. Should we do this at the very least in the first place?
This should be removed, since it isn't used anywhere.
Please rename to "federatesWith" and make it clear that it's a number of metrics.
Please revert the unnecessary whitespace changes.
@matt-gardner Is this correct?
This is a pretty big change. If you need to use a `tagWriter` for a tag creation that would be a `const` (which would allow you to use this), this is a bit more specific.
This is the one we wanted to get back a few months ago, right?
Would we still want to move this `NEWIPC` and use that here?
If this isn't true, we should probably check it's nil. If the `if exp.Target.StressChaos.ContainerName != nil {` check is redundant.
Another place you can use the `AWS IAM` type here.
This line is a duplicate line.
should this be `if (write(fme_irq->evtfd, &data, sizeof(data))` ?
I don't think we want to remove the need for it, there is nothing in that file anywhere.
Does `startActivity` need to be passed in as a class method? If so, can we add a method for `LoadSubscriptionActivity` as well?
I would suggest to set this as `--run-check` instead to make the package build more specific.
`this.isSorted()` is a boolean, right? if it is, we could remove it.
why is this changed?
This should be called 'Sha' with `--bucket-attribute`.
Is there a way to avoid the need for this? I'm wondering if it makes sense to have this return `window.Intl === 'object'` if the window.Intl contains the first pass.
This is a breaking change in behavior. It doesn't seem like a problem to me; it does.
Should this be public for all caps?
Isn't this an `int` or a `andandType`? If so, we're going to be able to remove these.
Why did we remove it from `stop`?
Would it make sense to set this as a field of the backend displays as a set (text)? This may be true for some other backend field.
This code is redundant, as `ClassOrInterfaceDeclaration` already has access to `findInterface`
I don't think we should have a more specific default value here. It is not possible to just store the state in the property in BatchExportProcessor (which I think should use the default value from the BatchExportProcessor runner).
@rhymes this is the name of the key.
`to"...` is not showed on your website` so I would go for it.
Not a fan of these.
nit: can you change this to `downloadInstance.setFileCitationBibtex(datasetService.createCitationBib boot(datasetVersion, fileMetadata));`
why the FYI for these?
@zjffdu I have a question about why you made the same change here. Shouldn't it use the `sscanf` function and then you use it to determine whether the new one works or not? I'm worried that there are no other examples that don't have any additional settings, and the one from the other is needed (either a single one in the local build or the other).
Is there a specific reason for replacing it with `serviceAccounts` and `serviceAccounts`? Seems like it would be more readable and more closely related to the codebase.
How about put the function `isAcceptShowHideCaretEvent` in function?
`$this->createForm` should not accept null, as it is already closed.
I think `ratio.CONNZ` might be a better name, maybe `ratio.v2`?
This should only work for `catalog` and `Do().Unmarshal`.
Line is too long. [86/80]
How does the word "has cancel method which cancels the ongoing API call" get lost? I'm wondering if it could be "has cancel method that cancels the ongoing API call."
Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
Shouldn't it be `;` in the filename suffix? It would be great to have it here as well.
You can remove this and just use `_UnknownOutput` in the `_NumCatgoriesNotSpecified`
I see we don't support this.
It's better to use `org.apache.commons.lang3.StringUtils#comparator()`
nit: remove the extra blank line
this could have been done in a follow up PR
I think the error handling should be in the `BlobSizeLimitWarn`
Seems the goal is to not set the `primaryPivotFacet` anymore?
@mombie-wstnr why this is necessary?
Should we add an extra line after the `if user:` block?
You can actually get rid of the check for `first_metric_only_group` and `feval` are not available at the same time. This is the only case where `first_metric_only` is not a boolean, but the error message is not "if isinstance(cb, 'first_metric_only', 'feval is not None'):`
Should we just name this `stream`?
please also change `float` to `double`
Why remove the extra parentheses?
This is in the source file, I think you should use `way_name=false` to prevent some confusion.
It might be helpful to keep the change here (and in the other `else` clause)
Should `http: approvers` be the default here?
Can you also check the other examples of the stats?
I don't think this should be a part of the context manager. If a user is aware of a message that will be used in different ways of a user being logged, then it should be in the context manager.
We should add a `executionInterface` property to the package.
why need these checks?
Why not move this to the `try` block above?
I don't think this is correct, it should be `raise NotImplementedError`.
I am a bit surprised we don't do this in these cases, as we're doing some refactoring to this code, we don't need to do that in these cases.
Why not the number number in the pool name and set it in the pool name? (and the other pool name in `fetch`)
This will break backwards compatibility with the new IP settings.
This is a breaking change to the code. I'm not sure it should be in this PR.
Why not use `gofmt. There is nothing wrong with this?
The `K9.NO_OPENPGP_PROVIDER` was removed.
Why not just initialize the builddate as a string? This is also a special case for the `windows` model.
This should be a different namespace.
Could you revert this file too?
It seems like this should be in a separate PR, but it's also a lot of places. Can you check that `s.sys.replies` is nil when `s.mu.Lock()` is nil?
Do the row and tags not matter in the next line? I'd like to see it as a separate arg to get rid of the `colCount`.
The value in the value doesn't need to be changed.
I'm guessing you changed the config ID here because of the case when you create this config, it seems weird to pass config to the config ID (or not) in the constructor?
This is a bit of overkill. I would have expected this to be a separate PR to have it just in case I'm missing something.
This isn't needed because the `GrpcHandler.Request` will be set to `undefined` in all cases.
This API should be a CommitStateUnknownException. If the commit is unknown then it is not safe.
I think this will need a `#if defined` check for `HDF5Reader` too. We should be able to remove this now if we have a `else if` branch on an empty `HDF5Reader`.
Style: Typically, this is what kind of format this is doing.
we should probably add this to the event if its not used
I don't think this will work, you will need to move all the keystore_password to the key after the call to `app/index.js` instead. This will simplify the code.
Doesn't this need a check for `iss.Spec.Vault` too?
Was this intentional? Are there other callers that do this?
Is this needed anymore?
let's make this an `let`, not `return`
Please add some examples of what this parameter does.
I'm not sure why this is needed here as the test name is not clear.
Should the same check for `dnsmadeEasy` too?
@stephentoub, is there some specific reason for this change?
Can we move this to the other helper methods that need `HttpMethod`?
Do we need this log?
I don't think these two configs are needed
why not directly use this? it would help readability if you don't use `print traceback.format_exc()`
`docker_helper` or something similar, to be consistent with others.
This is probably wrong, but it should be `ipsets`
This is a bit confusing to people who are trying to understand how metadataFileLocation is used. What about metadataFileLocation?
It would be better to change to use an enum with a value that is a list of strings that are not a list.
`ConfigUtils.config.before(:suite)` may be clearer
Where is this test coming from? If you were going to add it, please add it in the future
We need to do the same for line 267 as well.
why remove this?
Is this not an error?
This could be a one liner with the previous if statement.
Shouldn't it be `<<BonusP2StartEpoch` or something similar? Isn't "pickleBonusP2EndEpoch" the actual URL?
I think we should be able to get rid of the `ILITYpoll_underscore` in this class, and not just in any other `metaable` class.
I think we want to be able to pass the paths here and instead allow the whole file to be used by the `/v1/python1.go` file and then check if it is nil.
I am not sure what the best way to check is about here is to handle the verity config, but if that is the case, it should probably be the current behavior.
This seems like something that needs to be moved outside the `catch` block, so you don't have to remove the check in the `if` statement below.
why is this line removed?
Can this be initialized somewhere else? I don't see any other `this.prevFolderId_` member variable defined anywhere.
can this be changed to `UserResource` and use it in this file?
I'm not sure it would be good to have a cast here.
remove or leave out the above one.
`conan.v2.0` is better
The method name `toUpperCamelAndDigits` is pretty confusing to me. Maybe `toUpperCamelAndDigits` is better for consistency.
why set this to false when the experiment is set?
This should be written ` ctx` to match the other two places.
I think I would have used `stripUnlearnedColumns(outputVector, False)` here and in a few other places to do it.
why is this here? I see that we are setting this to an empty string instead. If there are other options I'm not too sure about the actual behavior of the map and what is failing.
Why not use `i.e. because a renewal is already happening`?
Why is this needed?
This could probably have been a separate commit.
I think this error message could be misleading.
This should have a `NullPointerException`, otherwise we won't have to do anything with `NullPointerException`, but we won't have a `NullPointerException`.
why is this in this PR?
Maybe "Not used"?
Should this be `process` rather than `unsafe`?
Is this error generated by debugging?
I think I'd prefer the word "is79" here, since it's in the `dropStream()` method.
I know it's a bit worse, but I think this should be `<%= _('Instructions') %>`
Is this file meant to be part of this PR?
This should be `raise BigQueryExecutionError(job_id, status['status']))`
This line is not right, I just removed the ``new``
We need to do any validation on the `attr_reader` model to see if it is present or not, since we're still running the `@succeeded` view.
Isn't it better to just have one, that's likely what it's about.
why do we need this?
Is it possible for the account to overwrite the order and then account, and account? If not, I think that would work better to have a null value, but the `is` method would be clearer than `is`
nit: use `const` as the rest of the file
I believe this should be a `public const` since this is the public API and it will break the API.
I don't think we want this line.
This seems like it should be a different check for `theme`
should we just always have the right block?
Does the `EResource` support a single integer value?
@deads2k the test is failing on this one.
Line is too long. [104/80]
Can we make these private? I think we're better off just deleting them.
Is there any reason that this needs to be called for every invocation of `setUp`?
This isn't necessary, since the use of `location#sameSite` isn't in the `SiteSite`, right?
I am wondering if we should have a way to specify `_` on the `_` (or `_` in the `Disallow`) or we should make this configurable. It's just an idea that the `_` package doesn't support `User` and `user` are not used.
Why use 0.3 and 0.43921?
We can't just do this in cancelTimers, because cancel tasks do not know that we're going to need to use cancel-on-files, as it is now a list of cancel list.
It would be good to use `path('abc')` here as well.
Is the intention to remove `Collections.emptyList()` here?
It's better to put this in `pkg/models/client.go` to avoid the need to have a `uint64` field in all the `client`s.
Why not use a different message of truncate.checkArgument?
You could also remove the `i2h` prefix from the docstring.
This is a nice thing to be to have a list of strings (e.g. an empty string for a temporary array) that can be an empty array.
this should be in the `__construct()` method right?
rahey. maybe it would be better to have this as flush in the constructor?
Nit: import the empty line
This is the only change that affects `server.go` and `server.go`
Can we just inline this? We don't really use this code anywhere?
@kingjr @rushi What if a user wants to set this value based on the value, and how is this set to? Would it be better to have a `default` value here for that case?
I am still not sure about this, it is correct. If there are any invalid field, is nutrition data, scroll to the nutrition fragmento. If there is nutrition fragmento.
Is there a specific reason to use `/<user_name>` instead of `/"` here?
Use the new Ruby 1.9 hash syntax.
This is a good example that I think should be `True` for `async_select_unrequired`.
Could we use `delete` here? Or maybe `delete` should be the same as `delete`?
what's the point of this change?
This isn't right. `fetch_SpanContext` is in `SpanContextContext` which is called twice in the `CustomContext` function. In which case, it should return `true` instead of an `IsValid` in the `fetch_SpanContext` function, or `false` would be better.
I'm not sure if this is correct, `wf.Flush` should always be the first `Flush` or `wf.Flusher` (or maybe even just `wf.Flush`). I'd suggest that we do a `Environment()` function instead, or similar, since `Environment`s are the last one.
You might want to rename this method to be "StructLike partition" to be consistent with `StructStructLike_`.
nit: I'd move the `GetOrCreateDir` function under `GetExistingResponse`.
I am a bit concerned about this. Why should the word "local" be a constant somewhere, and not a constant somewhere?
As far as I know `Config::get('cms.enableTwigStrictVariables', null) !== null)` is the default (which is the default value). So why would you want to set it to false ?
It's preferable to not have this import in the base class, as it seems to be used only in static methods.
Why not just move it outside of config?
Should this also handle `nil` by default in the `cancel` package?
Metrics/AbcSize: Assignment Branch Condition size for get_script is too high. [8/15]<br>Metrics/PerceivedComplexity: Perceived complexity for get_script is too high. [7/7]
We should probably use `xmlReader.ReadElementContentAsString()` here since we have a `string` value.
I guess we can merge these two lines as they will be broken out from the DownloadStatus method. It would also be nice to keep the original behavior and make them explicit.
@mmaxim This was the reason why we were using a warning rather than a warning. I am fine with this change.
I think we can remove this, and make sure that `interceptor` can only return the `i.interceptors`
`java.lang.StringUtils` for `java.lang.StringUtils`?
Was the intention here to make `p.shard.GetShardID()` take a `int()` instead?
@dvoytenko I'm not sure why this change was there in the first place.
Why not just use `Enum` here?
This is not a great way to test for `value == ""` and is not needed.
We can remove the positive integer altogether since it's not being used anymore
Please, fix the indentation, and space between the comma. It is not a problem, but it will be nice to fix that.
It's a bit strange to check for `AppendNil` here, because if `AppendNil` is non-zero, `AppendNil` will return `true` by default.
This is wrong and unnecessary.
we could add `Default: true` to the `User` and `User BY` there too (we'll want to update the URL for this one).
Is this not a valid url?
I am not quite sure this is right - this code could probably be moved into `add_cftime_types` - and then in the `try/except` block below, and in the `try/except` block (for now).
why is this block device name?
Please keep the word "logging" instead of "logging force" here.
This is also true, I can remove it
This will not work with other components. I think we should return an error if the FIN returns nil.
This is the main change.
Is this going to give us the option to `defer` or the `name` value?
What was the reason for changing the plugin to `plugin`?
I think it makes more sense to use an `@Restricted(identity)` instead of a `@Options`.
`default=False` here is a bit of an unbounded case. It would be helpful to see if there's something else in the docstring to be sure that this is a breaking change.
I'm not sure this is the best idea. It seems like this will be an NPE in the future. If it is a good idea, we could have a log message that is not a valid length.
Why the move from worker to worker-member?
Nit: please use `[NotNullWhen(true)]`
This can be a `@param {!number|True)` right?
"com.google.orgname.artifact.name" could be empty. This This means "com.google.orgname.artifact.name" will be empty. This means "artifact.name" will be empty. This is more common.
Does this still need to happen?
I think it's okay to remove the second sentence. Maybe something like `ListList` or `ListList`?
Nit: please keep the newline between `proofs` and `errors`.
Maybe this should be a msg.MessageId? I think that's what we want here.
Shouldn't this be ` STORE_NAME ).receiveProfiles( fixtures.propertiesProfiles.profiles );` ?
This is already added.
I would use `Engine` instead of `usingusing`.
I'd prefer `digest: "SHA256"`.
Why did these changes here but not in the `title`?
can you make the 3 values more than 1, and make the 3 values a constant?
Block has too many lines. [40/25]
nit, we could use a static constant for the `00` constant
I don't think we should use `allowOptionalMappings` here. The same is for `init` and `init`.
Can this have `Start()` instead?
why not using the name of the function instead
I don't understand why you need a `nonce` param here.
@bflad this is an accidental change as the original code is being executed on master?
Should this have a single field in the list as well?
doesn't have to be fixed.
do we need to do the null check now?
is this a regular interface?
I don't think you need this
Should we also check this for analogue, and check the old form?
If you use it here, can you rename `NewMutableStateStats` to `NewMutableStateStats`? I think it's fine to use the default value
I'm not sure we really need to do this. I think it's fine but we need to keep the old name for clarity.
Should we assert that the error is unknown?
Is it expected?
why not just do `pr.peerToNode[node]peer.Peer {...}`.
I think you should add it to the constructor and pass it in to the `@param` interface.
please use braces - indent for conditional statements and get tabs, similar to the start of the previous line.
Use the new Ruby 1.9 hash syntax.
This looks like something that would be wrong.
@matt-gardner Is it correct? It seems to me that this file should be renamed test as well.
Can this be `str | int | 'length'` or maybe ` our default value?
I don't think you need the `@link` annotation here
The unused imports should be indented.
Could we remove this setting? We don't want the error/warning stuff in the service
This change is not required because ``local_port``. The only change is if the name is a new one.
why is this change needed? we already have pos_weight in weight.py
Is this test type necessary?
Please add a license header here.
This is not the right way to do this. I'm going to suggest the way to use a variable that uses the `asStructType()` method. In this case, it will be better to keep the methods `as ThusType()` and have an overload which returns `List<Types.NestedField> fields = type.asNestedType().asStructType().fields();` and have a `getStream(String<Types.NestedField)` as the method name.
This is a breaking change. We can pass the value in as a constant.
Why is this finally finally?
It seems `get_link()` should be `create_link()`?
What about `Lamba.stop_server` ?
Are we using this API somewhere? I would rather see `email_email` being used for this email.
I think we should keep a default value from `Public`, to `bool`.
Please remove this
What is the difference between `var response = await` and `var`?
This is still a bit of weird, it was here a "starts_immediately" option, but then it could only be set if purchaseable.starts_immediately?
Can you make a new function for this please?
I'd call it `currentParentDomain`, if it's not really a DNS type and can be omitted (we do not have a DNS type).
Can you use `assert` instead of `assert`?
Is this needed, even in the `DynamoViewModel`?
remove empty line
We should probably make `makeLazyLoader` a global variable.
Should we make this a task? We can't just add any validation to the json encoded in the `external_failure` method since all other tasks in this PR will be able to pass them through.
Can you use `is` instead of ` ===`?
Why do we need to handle pygment by the caller?
can you fix the indentation here?
Since this is the only place where we need to do it, it seems not necessary to have any changes to this file.
Personally I'd like to put this around as a separate module and have it return a boolean if there is no URL? I'm not sure whether it's possible or not...
You could make this a function of `healthAggregator.Report` to avoid unnecessary debug messages.
This is the fix for version 1.18.1.
Are these changes intentional? Are these changes related to the service changes?
Do you need to define this as a constant somewhere?
I'm not sure that this is correct, but the original implementation is `@package` (the `referencesVariables` instance is `False`, which is the correct instance). Is there a reason this is changed?
Who calls `globalVirtualMAC`?
This will probably be missing in the `exclude-too-few-public-methods-for-exclude-too-few-public-methods-for-default.py` file since it can only be one file for the other.
I think we should probably make this a separate function to add this function to `config.py` to keep the API more complex.
This is the only change required to `os.Exit` in the command line (which is the `netty`).
I don't think that we need to keep `internal` since we're using it as a member variable.
why do we need to set the value to null here?
`metric` can return null if it's a `null`?
I think we should move these under the swagger swagger.
I would suggest moving the passcode manager to a set of parameters to a set of parameters. That way we are consistent and the other places where you set `getPasscodeLength()` is called, and `setMinPasscodeLength()` also checks that all the parameters have been called, and that you have to pass the result through the call into `setMinPasscodeLength()` to pass the result through.
Line is too long. [83/80]
We should not need it in the `BuildRepeat` interface, right?
why is this wrong?
Just curious, what was the motivation for not testing the `profile_json`?
This is a very specific API. I would also go with a `spack.db-plugin`.
We can't use `TryGetSwitch`. We should use the existing `Http2.Create` method, which is not a valid value.
I think the `at` here should be on the previous line.
why this change? I think we need the `errors` import at all, so we can remove that import from `pkg/errors` altogether.
I think I should add a special case for "No enter" and "No enter".
Why is this flag still needed?
what is the thinking behind passing `Block` through `remove`? is it possible to have it in the `HttpServer` constructor?
why not use a struct?
We should also check for the error message here, but we should check whether the error is printed or not.
The same thing here, is that the goal is to allow the column to be used in multiple threads?
why not just use the one in the test function? I don't see that used anywhere
i'm wondering if this should be called `_classificationCompute`
Why do we need this?
this is the fix I think (and the one below) to use " startTs" as well.
Can't you just check if the user is not a width beforehand?
Thanks for removing this! One thing I've been looking at the error was that it was trying to find an interesting error when I got an exception and the error was wrong. The error would be very easy to see. But the error would be that an error was reported, so that this was a bug.
Please remove spaces.
can this be imported as an `const`?
change to a `let` here since there is no form on it
I think you're missing the `0.5` here.
Maybe rename to `isNullOrEmpty`, as we did for a few reasons in the same PR.
Does it have to be `??`? It is not used anymore
Was this a bug? It looks like this was added to me.
I think we can delete this.
Should this be `linkedSource.Dispose()` to ensure we don't need to pass `--run-Dispose`?
Can we add `electionCommittee >= genesisConfig.EnableGravityChainVoting || genesisConfig.GravityChainStartHeight == 0` check to avoid this code duplication?
I would move this to the `private_exists` section above it, and add a docblock at the end.
This is a big problem because this function is never used on line 319, so I just wanted to check if this function is empty
This doesn't fix the issue. You should use the same type twice.
I think this is actually a leftover from previous changes, but I'm not sure how to test this.
I'd rather have it return the list of being called in Call. I'm not sure if it's a reasonable default argument for the function.
Do not use semicolons to terminate expressions.
I guess this is not the way to fix, but we should test the CI for Spark3.
Forcing it here will let us get rid of `get_notebook_data` call since it is used in the same file, which would make sense as you did in the `get_notebook_data` method in the `get_notebook_data` method.
what about this naming convention? I would use `search_builder_class`
Why is this in 10.10?
`ami_version` is already set as `None`.
Use `%r` syntax for variable declarations.
can we move these two lines down to one line?
I would not change it here, the function signature is only used when using `util.py`
Looks like this file is not needed anymore?
This should be moved back (above) to some constant.
It is not possible to use `class` instead.
We should add a new type like this in the `cmd/prom` package
why not `t *`?
This will cause problems with the new unit tests
Please remove this. If you remove it I think it's better to remove it, then please remove it.
why is the 12 being removed from the end of this function?
I know this is not part of your PR, but is there a particular reason this isn't named LogHeader1?
Hmm... I don't like this change because of the test.
Why did this change?
You're going to be using EFLAGS_WRITE_ALL for a non-default value. It will also reduce the amount of code for that.
Please revert this change. We don't need this, it is only used in tests. Also, it's probably not necessary to remove it.
can we add a `ReconcileHiveConfig` to the `Client`?
We might want to keep these methods in one place. It's easier to change as it is in another PR.
why the change?
This looks like a copy/paste error and should be moved inside the if statement.
Is this change actually necessary? I think you're still testing the right number of items.
can we use `.html_safe` here?
what do you think about this change (and other similar instances) to `if isinstance(bboxes, torch.Tensor):` (or similar)?
Line is too long. [81/80]
Should be an implementation detail. This is the main change that is needed.
You could also do it on the same line as the other one below. It will be nice to have a test for the new APIs.
We can remove the://%s code. This is the test failure which is working.
It is not possible that the map must be an error?
Can't we throw an exception here?
I think this is the proper fix.
Could you add a note about the doc string?
I wonder if we should have some unit tests for this (which is already tested in the `CharSeq` method).
Why do we need a new clue here? The API seems to call the new client in `/amount/payPeer` and not the new client.
If we're going to be keeping this in, we should also change `HexToAddress` to `HexToAddress` so that you can use it in the name.
The name should be `from kinto import __version__`.
Does this also work with non-empty name?
do we need to add the annotation for every single file?
I think this should be `configParams.KubernetesProvider() == config.ProviderEKS`
@KlausBSautter Any idea why `bool` is not `bool` here?
This was the one that was removed in another PR.
Isn't `itiesRole` redundant here?
We use `DISTINCT.js` instead of `button` here.
Should be in #ifdef X86
nit: the original error is `key[0]==0` which should be `type!=='function`.
`Segment` -> `abs`
<msg> Can we put this logic in a separate if statement?
What does `'teachers'` do exactly?
You should use `container.error("Failed to acquire locks from metastore because 'HIVE_LOCKS' doesn't exist, e);`
This should not be added to the base class
Should this be instead `client = new webdriver.http.XhrClient(url);`?
I wonder if it would be better to have this as a constant in the `ec2_client`?
`keys` should be reversed
This is a bit weird, the import should be removed.
`alias` could be replaced with `.alias(...).alias(...)`
why do you need to invoked with function/create the exception ?
Can we change EffectiveAddr to "EffectiveAddr" ?
Could these belong in another PR or in a separate PR?
Maybe we should move the import to the top of the function, as it's a bit odd to see what it's doing
I guess this should be `SourceContainerTestCase` and `SourceTestCase` as well?
We could consider to make this a static final variable.
I am not sure that this should be a dependency on the name, but it makes sense to have a dependency on the name of a method that returns the right of all the `get_signal` (and is not that a behavior behavior for the method that calls this method, rather than the method being used on the `get_signal_name` method), and it's not really the right of the method itself
This should be a single `($($($['unit-plugin'])` instead.
This can be simplified by calling `nested_flatbuffer` with a non-empty string.
Shouldn't this return be a `return`?
Please use `String#Equals(String, StringComparison)`
would you mind adding a new one here? It seems like the other one is a bit confusing to people.
is this really a test?
Huh? Can this go to the other test?
why did you change this?
This is only relevant for `Rubocop` - can we move this to a new paragraph in the `if pool.numPendingWholeBlocks > 1` block and have an int call to ensure there are no exponentiation?
This looks like something that should be a user-specified service and not a user-specified service.
I would prefer to keep an interface like `getAs` (the only thing that has to be done when it is being used to load and only if it's a file or a class or anything else).
This change should not be made, as it is only used in `Email`
nit: can we do a `JoinSelector.prototype(role)` instead of `roleSelector + ':not([role])`?
I wonder if it would be better to do this as a static field, and only do it once per method, and then check whether the property is present.
How about adding a `protected` getter for `HiveMetastore`?
I think this is a bit vague - if I am not right, the order is incorrect.
Huh, I think this is wrong. `err` should always be `nil` and `nil != nil`.
I don't know if this is actually a good idea. I am pretty sure this will work with an API break.
We can drop `Callused` and `encryptionused` since we're not using them anywhere else in the code.
Nit: you can drop this extra line now
Line is too long. [82/80]
Please keep the code simpler, otherwise it will break users. Also, it is no longer necessary to keep the API surface area in the future.
I think it's better to move metricsToExport check before it is initialized in the constructor.
I don't understand what is going on here; why is this test needed?
Why not just `spaceMessage.99pair`?
Please rename width to 2.
This seems a little strange. Maybe we can have more than one `searchTerm.isEmpty()` or more precise `searchName`?
(style) externs should be avoided in .c files
This was incorrect, so that the image type doesn't match the image anymore.
I think you need to add this conditional to line 152 as well
I'm not sure if we need to add the `set,` to the `Source` field?
The `in_split_into_nhot` calls are the correct values. The goal is to use the new `in_split_into_nhot` functions to check if the condition is the first one.
I am not sure this is correct. The problem with this is that you want `errors. Readers` in the `end` folder. So that it was an error (and not the `.`).
I think the `== ""` is still needed here, right?
I'm not sure about this change... `NextAlreadyDefined` is an interface, and is a very similar interface and is a name of the interface. `NextAlreadyDefined` does not match the interface.
No need to change this.
This should be removed.
I believe that the original version of `gulp help` should not be included in 2.0
Do we want to remove the extra white space here?
So this is the actual fix. The problem is that if the current description is correct, a `statsd.Verify` call will only be executed on a `Type<int>` when the policy is missing.
@matt-gardner I've seen some changes on this file related to the `.env` PR to `.env` when you add a trailing slash on their own line.
Thanks for the PR @agramfort :) It might be better to have an enum in the info that can be accessed by name, so that the output can have a default implementation in case it returns 0.
Missing space after #.
I think this needs to be a little bit more verbose, what's up with a new translation?
Please use `null` here.
Are these tests not needed anymore?
This will not work when you use the 3rd case with the 3rd case. You'll want the left to be the right one to run the C++11 and the left should be the same.
why is this not needed?
Is there any reason why we don't add the "validate" flag?
I'm not sure why this is being removed. This is a change in behavior.
I like the idea of having a version for the version, but I think you should use `sys.version_info < (3, 3)` and use `sys_info_3` instead, to make it `None` by default.
I don't think this should be part of the PR. We might want to move this to some `zdb.py` file.
I wonder what this is doing. If we do, we should not need the same in the head object, right?
This file has no import now.
Does this mean it would be good to add another file to the Bill Dengler that can be changed?
`handle?.Dispose();` is the right value for `Walk` so I would prefer to use `_post.Dispose()`. `handle?.Dispose()` is fine too.
This could also be changed, to be `[0]`
This needs to include snapshotrevert.
This should be `ecs` as well.
This test is not testing that the `home_all_to_a` query is enabled in `local/users` but I couldn't find a way to get it? I don't know how to test this, so I removed it.
You could also just remove the last `static`.
This is a bit ambiguous. Should we add something to the `posmentment` method and say `posmentment`?
I would have used `getSSLackBarHandler` here, not `snackbar`.
Can you please change this to `if (host.isDebugEnabled())`?
I would have expected this to be `const stubString = always('');` since there's an extra `<` in this and `string` (we'll need to support both).
This needs to be changed to `NULL` if filename is "", otherwise the logic is wrong.
I think it is better to move this down to `pkg/apis/meta/apimachinery` and move this `metav1/k8s`. I would also suggest using the directory name from the directory.
Please check if `opts->has_string() != 1` and then check if `private static final` and `private const`
can you change this name to be a bit more descriptive? `render template: 'widgets_metadata'`
(style) line over 80 characters
This is the same as the "Delete" of "Delete mark denotes" as "Delete" and should be added to the "Delete" of the row.
We should log this message on failure.
should be `int escape`
We should probably move the `Accountable NULL_ACCOUNTABLE` to `Accountable NULL` (as it's no longer a property), and just have a `default!` return from `Accountable NULL_ACCOUNTABLE`. Then we could just make this a `map(Accountable NULL_ACCOUNTABLE, null)` and then just have it as a `map(!= 4)`.
Do you need to define define `*str` as an arg here? Otherwise this will be a breaking change.
This is now dead code
You can use `data-toggle`, `data-dict` instead of `data-dict`, right?
These 2 params are the same as the first two, so they can be removed.
I think this is the only change in the old code. It looks like there's some kind of error message to me.
This change doesn't seem to have been added to all other tests, just wanted to be able to run this test to ensure they are not correctly ready to be merged.
This should not be needed, since it is not only used for tests and I'm fine with it.
This is probably an unrelated change - it's just a small optimization...
I think this should be a `use_thousands_sep` parameter and not the default value. We should use the default value from this function.
This doesn't seem to be related to the PR, and I'm not sure if I can change the version on this.
This is not the only real change that fixes this issue.
`encClientSecret` is not null here. I think `ClientTimees` can be removed from `Admin::`
This is going to be a problem when I was getting an error. I think this is the best approach.
I'm not sure that this is correct. The `Server started` is always set as a string that is `true` or a `false`. Could you please check if this is the expected behavior?
Isn't this going to fail if you run "admin can move_topic page" without a "must" prefix?
Do we want this test to run as part of this PR?
This will be `.spec.satisfies(email, pending_approval)` will be enough
Please let me know if it doesn't make any sense to import `.*`.
Does that do anything in this PR?
I think this could be removed now?
I don't think this is a right change. The purpose of this change is to allow nbits to be Negative. It's not just the nbits instance.
@xmatthias I don't think we need a new `tx_begin_read ()` property anymore. Can we update `tx_begin_write ()` and `tx_begin_read ()` to use the new `tx_begin_write ()` to be consistent with the rest of the code?
Should this be a `json:"params"`? We have a similar case for other components. We don't have a `bool` in the `FunctionType`.
This needs to move to SszLimit
I think we should use `LICENSEABLE_FEATURES_overwrite` instead of `ALL_FEATURES` for the `view_*`
If we don't use `os` for this module now, we should just use a `test` that's already imported from `spack install` module.
This is very specific. I suggest to put `from .get import Cloud import read_id` and use an import of `from .get import MMESSAGE_id` instead.
This field isn't used and should be removed.
What do you think do you think about making `await Task.Yield()` return the `await Task.Yield();` of the `Yield()` method so that we can remove the try/catch below when we create the `await Task` block?
Looks like this is the actual fix.
@sparrowDom Just making sure, this is the only thing to do with the space space and not used in the loop.
I think `packages` is not used any more, `libsqreen` is already used in the `libsqreen` decorator. We shouldn't be adding this here anymore (just to be consistent with the other tests, so maybe even `libsqreen.2.0.3.1`)?
@deads2k i'm not sure if this is right, but i think this is the right fix
Are we sure that the compiler won't work anymore?
You can use the shorthand since it is a `X` namespace.
This is a bit weird. Why is this not just "not a boolean"?
is the current logic still needed?
Not sure about BftTransactions... I wonder if there are actually a good reason to use "bft".
is there a test we can write for this? Or is this just making sure we're not breaking anything?
This is not necessary, we can just do `self.load_annotations(local_path)` instead.
remove this then, and change to `.to_seam`
Why not keep this in twoThirds to false?
I would recommend to use `com.github.benmanes.caffeine.cache.sig(org.com.notification.getClass())`. Also, please, use the default for `org.com.notification.hadoop.conf.Configurable` instead (which would require a custom `org.com.notification.c` which is the default)
Why not just `resource.name()`?
This is a breaking API change. Why is it named as `setScorer`?
@alalazo if you want `len(grad_clip=True)` to be the default, it would be better to be explicit about it as `True` if you don't want any other default, but it seems to be a reasonable default for 3.x
Use the new Ruby 1.9 hash syntax.
@deads2k do we need to keep these?
`pendingUrl` needs to be updated too, since this is what the uuid is for.
Is this the default? Can we remove it from the test? I think it is ok.
why do we need this?
Just for my understanding, why is this needed?
why is this changed?
I think this is a little confusing. I would prefer to see it as a variable. I guess it is just making sure it works, and I'm ok with it
does this need an `url` or can you remove it from the service?
This could be `value<T>`.
`NOT_PROVIDED` will always be `null`. We'll need to check that the key isn't present as a key-value value.
I don't think we should change this field here. We are still using `default` elsewhere, because it was already in the default so we can't do this.
@mmaxim could this be removed ?
This will cause issues when we are using `github.com/gofrs/uuid`. I think we should just remove `github.com/gofrs/uuid`.
Maybe we should add an example here to prevent the dashboard path without a Service?
@clebertsuconic That should be `changechange`
Please don't make this change. The code in this function is only called when you create the thread, and you just use this thread to call `dynamo_sync_from_function` on all the `crec = Dynamo_sync_enabled`, not `_executing_`.
I am a bit confused as to why this is necessary. I'm assuming this is not really a property that will trigger a `Python` in the `source` module. I think this might be useful to have a `get_lambda_name_from_arn` module that returns `source` as an arg and we don't care because the `arn` module isn't a `get_lambda_name ` `Python` in the `_arn` module.
Should be moved to the caller so it's clear what metrics is being used in the caller's metrics?
why does this need to be a pointer? I think the previous check should be removed
I don't think this is necessary, it will work in `include_client.rb`. This is not the case in the service account, I think this is better.
I think this should be `user` instead.
You can't change the name of this type. If you don't care, it's fine.
Curious why this change? We should make sure that it doesn't get called everywhere.
There should be a test where we can use the same context as the default `execute.as.user`
Is the `map[hash.Hash32B]*Receipt` always available here? (or should the record still work?)
`warnings.py` isn't the correct spelling. `show or out during test only support 'batch size of 1'` is fine.
Why do we need this struct now?
It's not necessary to change the `ContainerInterface`.
This test was a different request to the current test. I don't know if this isn't a big difference.
This can be reverted. The only thing I don't see this being used is in the public API.
Since this is not used anymore, and we should probably remove the check in line 107 as well.
Why is this in a separate PR?
The name should probably be `ResponseContext`.
This was a typo IMO.
why remove this?
Can we use an enum here instead of a simple string?
Why do we need to addTabIcons here since it's the one we are returning ?
Can we move this to the utils?
I believe the JIT should be modified to be able to get the type of the list instead.
same here, we could simplify this if statement
Why the drop-up"></i?
This is not needed.
why is this change needed?
@rhymes I thought we wanted to avoid calling `process.now()` here, so we can get rid of it.
Align the parameters of a method call if they span more than one line.
I think we don't need `//` here
Should this stay?
Here we can use `.format()`
This should be in `init()`
@xmatthias I am not too familiar with the rest of this file. I have seen some problems with a JIRA to track down the few places. I can't remember why you need to pass the `__all__` param in the constructor.
If we do not want to have any other `FileJsonTask::setHeader` for this, I'm not sure it makes sense to be doing anything useful. I would just remove this method and just call `FileJsonTask::setHeader` in `FileJsonTask.java` and just assign those to a default `FileJsonTask.java` in the `AbstractUtil.java`
this should probably be `return _getattr(obj, 'dtype', None)`
We have a migration for this but a simple table I'm not sure if a migration would be appropriate.
Please revert this file.
Wouldn't it be better to use a set of `IllegalArgumentException` and use `IllegalArgumentException ex` instead of `IllegalArgumentException ex`?
I think you could just drop the "bisect" prefix here.
Is there a reason we are not using the `messages-text` option here, and not use the same `messages-primary` option here?
I think this message could be very confusing, especially if there's a reason we don't do this in a future PR.
this will not work anymore - if not None, this will make the same change in the `if role in (controlTypes.ROLE_TABLECOLUMN,controlTypes.ROLE_TABLECELL)` return true. I think we should remove any validation check in `if role in (controlTypes.ROLE_TABLECOLUMN,controlTypes.CULayer)`, and have the same check be made made in that case.
I think this can be done more than once in a separate commit.
We don't need this line, because we don't run the test twice.
This looks like something I'm not sure we should be using this...
Can we replace the case where $plugin['code'].']. statically? That is more correct.
Can you add the regexp to RUC (I know it's not your change :) ?
Should we do this in a separate PR?
I wonder if we should just be using `Settings.GlobalSamplingRate = (float)Settings.GlobalSamplingRate;` since that means that the value will be set at the beginning of this function.
This will break things, right?
We should be able to remove this, it makes debugging easier for us to just pass the `display: ...` field to the `menu.append` method and make that async on its own.
I'm not really sure what this means. The metric name doesn't match what the metric name was. I'm guessing it's going to match.
I don't think we should add this new class to the base class, it is just a class and not a public class. This is probably what we're doing in a way to get the right value of this field.
I think it is safe to remove the extra check here.
I wonder if it's possible to return a non-null string. It would be better if we would use an unrelated assertion to check the method name.
Why does this need to change?
This seems to be the only place where the user has service Type needs it. Is that going to be an issue or was it just for a reason?
This is not a big problem, it should be removed.
We'll need to do a search or send on `helper ButtonHelper`
Do we want to log it somewhere?
This is a breaking change for the `use_unique_lock` to work with `const`. It doesn't have a lock, which is the reason for the `const` (just for the query) and it's not a final query.
This should be `prepareDiscriminatorCriteria`.
I would have put `bundle.containsKey(DB_NAME) ? DBOpenHelper.DEFAULT_DB_NAME : bundle.getString(DB_NAME)`, as you have done in `sOpenHelper.DEFAULT_DB_NAME` above.
Why not create a temporary var for this, and create a new factory method that returns a boolean?
what's the reason for the `+`?
I'm not a big fan of this PR, but this seems like a breaking change
This was only removed in #ifdef 3.0.
What if we made this `IPAMPlugin`. This type is used for the new API.
This seems like it could be an `model_func` function, but I think it would be more consistent
No need for `--eval`.
Remove the extra blank line
If we're going to make a warning message for all operations, maybe change the error message to something like "Parsing passed IP or IPv6 address, but not specified port number. Acting as though IP was not supplied".
I think I'd prefer to keep the old one as the previous one as the other one as possible.
You should add the first param to the next line.
Use the new Ruby 1.9 hash syntax.
why removing this line ?
`reduce_for_stat_function`? I would say, the function signature is not used by this implementation (or even just just `reduce_for_stat_function`).
I think that `is` and `is not` should be removed.
Please remove these extra spaces and add the new one.
Shouldn't this be `[assembly: BenchmarkDotNet.Attributes.AspNetCoreBenchmark]`?
The name "name" is not required since that can be a single name.
I thought the plan was to have the same index as `in` rather than `for`.
Why is `Exception` needed here?
Nit: Remove this as a separate commit (see `var/Boolean/throw` and more on the same line)
you can move the method call to `_conn.close()`
Should this be `json:"encryption"` ? I'm not sure if it is a problem since `UEncryption` is used in any case but not `what.SecretEncryption()` ?
What do you think about using a newline for this?
Line length violation.
Please remove task::clustering parameter list.
If it's true then it should return false.
nitpick: can you make different color attachments with different layouts as well?
Is this used anywhere?
I think this naming could be misleading as the `parallel_scheduling_processes` is just `a` and `b` is an option. Also maybe the naming `parallel_scheduling_processes` or something. Also, the logic is wrong: this is just a thought but is there a way that we can use is just a naming conventions here?
Should be `service_discovery/dto`
This should be `(Keychains, shouldn't be shown in the keyhint dialog\n\n)`.
Remove this file.
This is not used.
why did the arg change here? you're using the same variable name as the test below, no need to pass it in in the block
I know the reason, the `equals()` method is only called from an actual `New` instance, but it looks like there's a bug with that.
I'm not sure it will work if you don't have an SP: `before_action :set_outside_committers`
@PierreBesson @nickytonline I think it makes sense to put this in a separate commit to make it easy to change a bit more clear. I'm not 100% sure what's going on here but it might make it possible to do so if the copy has been already initialized.
This should be changed to `BailBase.PutUint32` as well
we need to keep default value in finally
Should this really go in `create_new`? I don't think we want to keep `create_new` if it isn't there.
Please remove "If you can redistribute it and/or modify" here.
Could we make this class more general? Like "initialization service mysql restart" or something?
Rails/InverseOf: Specify an :inverse_of option.
How does this change work? I would assume that if `stream->tunnel == NULL` it will never be NULL, but that is also fine.
at least not a big fan of the fix, it might be better to just keep the rest of the file and add the message, then the message wouldn't be helpful.
I think this was accidentally removed?
This is used in a few places. Please remove it.
Is this an accidental change?
Why do we need this condition ?
What if we decide to support an explicit "reallyally" property?
Maybe we should rename it to something like `Requiresproto_gapic`?
Shouldn't `Reflect` be in this case?
@martinwdouglas's change here, will it cause us to ensure we are not using this in an event registry?
Can't the value be set in this value?
This needs to stay as `Int('action', 'INT\Union')`
Please replace `po` with `\`
nit: I know `com.google.common/app/AlertDialog` is not used anymore but is used in a subsequent PR.
@mfojtik I think this can be removed completely, since we're already using this in any place.
I think it is not safe to use torch.zeros_like instead of torch.max
is this change in line with the new `pattern`?
The package `depends_on` version was moved to `beans` so that it is only used by the package name in this file.
nice, this should be removed
What's the motivation for this change? Is there a way to avoid creating a new header if it's not in your test (which is why `out` and so on)? Also, this test should still fail because it's not in the `else` case because `out` already exists, but I guess it's not a problem for this test, since this test isn't related to the rest of this PR.
Is it worth adding a view to this? The current view is already merged in this PR, which is not used in this PR (see #3189).
I don't think you want to remove the assignment assignment.
Why do we need this change?
There's still a `Ring` command, do we need a new command?
Can you put the `configureLogging(true)` in the constructor and avoid the `configureNativeLibs()` call?
Would be better to make this class internal, and have it return `import typing as TYPE_CHECKING`.
I think in most places the docs do not change the signature because it is a bit of an implementation detail and not a big deal either way :)
Why is this needed? The OM is not guaranteed to be used by anything else?
We need to keep the same `strings` as `NULL`
Hmmm... this should not be part of the API. What is it?
We should probably make this an enum instead of an integer
I wonder if this was an issue. Wondering if this should actually be `Serialize()` so it should not be needed to change this interface.
Why is this being deleted?
@rhymes this is still a link to the PR which I'm not sure. This is the only place that uses it. It looks like the `/admin/video/#{video.id` check was necessary when we have the `match` method, but it was a good idea to have the `match` method defined.
not a huge fan of logging a debug statement but this is not something we can do, but I think it's a bit clearer.
Not sure how this change is. It should be in a different PR.
I think this should be on a new line, since now that's how the lines below work.
The original code is a bit confusing. How about a static field `entry.get()`?
I think `str` should be removed here.
should be removed.
If this class is already being passed to `config` (as `config` is used in other classes), then it should be moved to a separate class.
Do we need this?
This doesn't look right to me. Is that what you have in mind?
This was a bad thing that I was not sure of. It is a good practice to test it.
I think we should only keep the `r` arg in the `MolDraw2DQt::setColour` function and use the `this_col` variable in the function to get the same behavior from the `Ksql` object to get the `Ksql` object.
Do we want to call the ReadJson here as well?
" @ mark will be dropped and passed to parser. This seems a bit odd to me. If you want to make sure you have a way to specify `Y3N@C80` and `Y3N@C80`
It would be better to add a `Empty` attribute to the list as a parameter. It would probably be best to use a `value`.
I think this should be a pointer?
I'm a bit surprised this works with a way to determine if we're using `cd.SourceSnapshot`? Is this a common use case for some reason? Maybe it makes sense to use `Get the snapshot snapshot link.link` here as well?
Is this necessary?
We need to make sure we're not breaking anything here. We should only be passing this for when the `sigChan` is not `false`.
I don't think we want a notification notification to send here.
I don't think the `attr_value` is required here as well.
This is a bit odd, but I don't know how I can do it. I don't see where this `sync` is being used (since the `sync` is a `MetricReader`).
@QilongTang I guess this was a bug before, but why do we need to set the test run when we call `// Try shutting down gracefully`?
This needs to be moved to a separate package.
Why are these required now?
These tests were passing around. We are just taking advantage of `func` and `func2` in the code, and `func2` should be `final` because the code will contain a `arg2` object which is a `conda` object and will be an `conda` object.
This should be removed.
why change this?
Are we sure this is safe to remove? I don't get why this code was there to make it work.
Not sure what this does, it's probably not worth it to just remove it for now and just remove the `change` variable entirely, and have `.change` always return `nil` if it's defined.
You may want to move this to the `BindingInflate` class. In this case `getattrViewForHolder` method can be called from the `ViewGroup` method, so it's more efficient. Also, this method is called from `ViewGroup`. Also, it's just a `ViewGroup`.
Why are you replacing this? I would expect a "%s:%s wides".
Can you please also add some information about how we fix these tests.
What about `([([([([([([([([([([([([([([])])`?
This doesn't look right. I would suggest you remove it entirely.
This is not the right place for this. It should be `/action/path/deployment#Conditional_Releases_with-on%3A'`.
Please don't change the variable name.
This is not used?
Can we make this a constant? It's a bad idea, and should be used for the `ECS_SPOT_INSTANCE_DRAINING_ENABLED`
Why is this file needed?
This is a breaking change for session.TranscodingInfo.IsVideoDirect is false.
`s` is a `Watch` function, so the `Watch` function can be removed.
It's a little strange that this will not be `null` if `Chunk::begin_transaction` is `None`, and the `cache` is `false` and is `false`. I guess this is the case?
We need the `//` tag too...
I don't think we need this catch anymore, it is a very good change.
please remove this, it makes the diff harder to read
do we need this one?
This is the fix.
This should be grouped with the other modules, and should have it as `saleor.python.moves` or something.
I have a concern with the other changes to the codebase, just so I don't think it makes much sense to have this in a separate PR...
I'm not sure that ``when_searching`` isn't needed here.
nit: I'd be inclined to give these newlines on a line with the rest of the code base.
Is this interface used anywhere?
This is the same as `.IsStackTraceUsage()`
I'm not sure this needs to be here. The reason this is because we're not using it in other places that we don't have to make it work with anything else.
Why not use an `Optional` here, since we are using a `runDefault`?
This will be wrong, as we have already `Warnf` on the message.
These changes are also not needed for the tests, as that's what you've added for the PR
This method was introduced in #5769 and doesn't need to be changed
Is there a reason to always remove this? The idea was that it still being used elsewhere in the code, but I don't understand why it is necessary, just want to make sure it's only used internally.
I wonder if we could move this check in the `PeptideKeySet`?
Shouldn't that also be `m.ctrl.Call(m, "Next")`?
Do we need this?
you can just change the name of the test
Why is this being changed?
Is this change intentionally in the original PR?
This should be an environment variable to a `index.none`.
Why have you added a general const? I'd like to get away with just using `leafDefaultFirstPingInterval` here as it makes the code cleaner than having a single variable (which I think you'd only use it for your own file)
I think we should use a more meaningful name for this field, e.g. `io.prestosql.plugin.FormPort#test` or something, e.g. `io.prestosql.pluginPort#test` or `io.prestosql.plugin.FormPort#test` or `io.prestosql.plugin.FormPort#test`
I would suggest to keep an old version of `python-daemon<3.0` as the default.
Is there any possibility that a number only calls an empty array with a value of `array`?
If we want to be more specific we'll want to use a different variable name, e.g., `secretsecrets`. We can use `secretsecrets.TrustDomain` for a less-explanatory action.
I would call it `NumServices`.
why is this change?
This could use the `html` helper.
I think `# type` is still not needed here, right?
Why the double blank line?
I think this should not be necessary. `user_on` should only be a single query (it is a `deactivated_on`) and only works with `.active`.
I don't know if we want to do anything to change but it's fine if the tag isn't optional
I'd prefer to keep <msg> I believe, to make sure the class was in the interface interface for consistency (since `@CheckForNull` or similar), and then to be consistent with `@CheckForNull` so the class name doesn't match the class name (which is not the case)
this will never be equal to `corr`, is it ok to remove it?
Why are we passing the same object to `LoadStateTree` now?
I know, this is just to avoid unnecessary logic in the PR, but is there a reason for just this one and not just inline it?
Please add the newline between the two `.CommandLineEdit` and `.MinimalLineEditMixin`.
I guess you mean if there is an explicit nullptr here instead of if (!writeTransaction.get(). But I guess that is fine.
why not use `el.isHidden()`?
This will break existing tests if you pass null
why do you need this?
I think you forgot to rename this line :)
nit: `HashMap` may also be a unused import.
I think we may want to rename wlr_drm_interface iface_legacy to wlr_drm_interface iface_atomic
I think the original change was correct. I am going to ask if this was the original version of the gid in the first place, but I guess it was wrong before.
@MichalStrehovsky - This was causing the test to fail. I think this will break any tests.
Why the change to remove this?
I don't think there is any value in "domain" or "domain". It is a more readable way to do it.
Should we try using `std::string` here?
Can we revert this file, it's not used anymore.
I'd prefer a bit more specific name, `setContainsComment` or `setContainsCommentAndex` for consistency.
This looks a little bit hacky.
Is there an option to flip metricNamespace here?
Maybe we should call `nextPageTokenName` and `responsePageTokenName` to be consistent with the other ` secretKey` method
I'm assuming it is a leftover from debugging?
style: sort alphabetically
This is only needed to check if the `bytes` is `0`.
Do we need to use the constant here as well?
@michaelkuhn Do you have a better idea of why we need this for the list here?
Line is too long. [95/80]
We should be able to skip converting `xyRatio.x` to `number` in this file.
I know this is the same, but would it make sense to add a default value (with_approver)?
Should we make it final and not final?
You should be able to use `span` for the array, as there is no `0` in the array.
isn't this the default in the case of the async validator?
This should be `/* eslint-disable comma-dangle */`, right?
nit: why not just use `dashboard.enabled` instead?
Please keep the original blank line here.
It seems that we don't need this check anymore, right?
Why do we need the new type here?
There are a number of places that could be fixed here
So we are still using the `TxPool` in the server right? Is there any way of writing it?
Why is this necessary?
Don't we need the Type\Union here if we don't implement type coercion?
We should be able to use the `comms` parameter here, since these properties are not available. <msg> This can be done in the next PR.
`packageConfig.shortName()` can be empty, right?
Remove this line, please.
This is the only change that will require an `AtomicInteger` parameter.
Add a link to this method in the `SetUp()` method to avoid calling `setUp()` method and to ensure there was a race condition.
"should comma if number of classes is 1, RuntimeException RuntimeExceptions
Why is this added?
We could also set the dynamoModel in the `serializedDataSize`
Can we just return the current content based on the `Attrs()` method?
This method doesn't seem to be used anymore. If there is a reason why it is removed and doesn't use the `CheckForStream(compileClasspath)` method anymore.
Isn't this supposed to be ` fmt.Sprintf`?
why not use the new `rollback` method here instead ?
Does this mean that the app can't have a `crypto` field?
This looks wrong. `perr` is an error and should not be returned here.
Do we even need this?
The `RandomPort` function can just be `np.RandomPort()` right after the `bootnodePort`.
`create_no_window` was the best API for an API change. I think it may be better to move the API API to `create_no_window` instead of just `create_no_window`.
I think you can do `can_cancel!` without a `not_cancelled!` check.
Can you please describe the reason of using `fee`?
This is a bit confusing to me, but I don't think the name `GetTopLevelCondition` is a better name.
Should probably call this `memory.execute` instead, since we have `execute.GroupLookup`
Why do you need the `countQuery` variable here?
This is a breaking change, it is just a minor thing to do with the next PR: the problem is that a form of `_INPUT_MIN = 8` can be fixed in both branches of the previous set by changing this line. I think I should keep the original version of the set of examples to `_INPUT_MIN`.
Why not `_url.length == 0`?
We may want to move this to `app.SetApptypeSettingsPaths()` since that's what we will do when we add a new settings file.
it's not a matter of tasteful to put a verb after the write, but since the rest of the changes in this migration are a no-op, could we add an additional `patch` here?
@gartung I have no idea what the `face` variable is...
nit: `Could not transfer all bytes of " + from.toPath()`
This should probably be handled by the `removeShutdownHook` methods.
@ryndanovan any idea why this is necessary ?
do not call `New()` method on `o outbound`.
You can use `pkg/apis/...` here.
`test-service` seems like a better name to me. What about `<test-service>`? That way if we don't test the service, the service is not a bad idea?
You can use directly directly `unsigned int`
Why? I would prefer to add this check to the client instead of having it in the client. Also, if there's no way we can get this check.
This line will fail on windows, but we should also be using the `ServiceExternalIP` default to the `ValidateExternalIPPoolController`.
I'm not sure what the best approach is to have this default to `false`?
I think there's a more "use" hook here :)
Why are all of these `kbp_record` condition changed?
There is an NPE on `mapper` in the test suite. It should be fine to get rid of all the `toList()` calls to `requireNonNull`.
Why the change from BaseSnapshot to read to initialization?
I think it's better <msg> I know this is not the case of `c.mcl == 0`, but is it possible for this to be `int32`?
@jridgewell I'm not quite familiar with this code base, I think a `DECIMAL_LITERAL` should be defined in the `org.infinispan.commons.s3.collections.CollectionUtils`
why did you change this?
Should this test be updated to take a `OzoneZeroGasPrice` or can this be merged with `this.useNonZeroGasPrice`?
What do you think about moving this to the `kubectl` package, so we can just use the default value here and have the default value `pulumi up.go`
is there a reason to keep this? or are we just always returning something?
I know this was a bit confusing, maybe I missed something, but it seems like it's more readable than it is
I think you can delete this line, it's already added by line 142.
I would prefer this was only used for a while (not sure how it works).
Why is this not just `timeLeftToClaimRefund > 0` ?
This should be `aws` as well
I think it would be cleaner to have a test to verify these two tests fail. <msg> It looks like the mouse settings panel was added in the middle of the mouse settings.
The original `help` method can be called from this method, and we don't need the `== null` variable anymore.
Why was this added? I don't see it referenced anywhere?
Does this work without the need to have a "chart" attribute? If yes, I'd recommend adding a 'boolean' to this component as well.
@kennknowles can you give me a look at this?
`assert = require('chai')` ?
The other implementation in this `logger.Debug` should be moved into the if so it's possible the status is not found in the debug mode.
what if we called this `prob` (so we don't need to modify `generate_name` above)?
I would suggest `if isinstance(v, dict)` here and below.
We're missing a `var` on this line.
Is there a reason to create the lock here?
Should be able to just use `key.append(...)` here too
These are not used, in particular.
You can put "coupon_id" in another string, like `abc_to_coupon_id` <msg> We can remove this and put it above this if statement.
I think this should be optional and the constructor is only available to the DB
this seems strange. I don't think I understand what this is for
This seems to work without the fix, but the rest of the PR has changed
Do we need to do the change in if the save reads in a separate PR?
can you change the tests for the ExecAgentConfig?
The worker_start_time_option should be set to expire at some time, so the time is not the expected time.
This looks like a duplicate of `func (IsFatalError)` which should return a `err error` and return the error, but in the `switch` statement above it's going to return an error, but I don't think we want the `switch` here.
Can you move imports above next to the last group?
You can make the default `false` by `HOUSE_OWNED_BY_ACCOUNT `
This isn't needed, right?
I think this could have been a separate commit for now.
We need to move this try-catch up to its own try-catch block.
Do you think it's worth making changes in this file for a reason?
I think the "github" import should go into `bincover.RunTest`
Why the move of this change?
Is this needed? If so, why is it needed here?
`client.getLocalPlayer()` doesn't have to be null, it's a case of `client.getLocalPlayer().getWorldLocation()`
I'd prefer to avoid making a copy of the set of examples for these two methods.
Should there be a test to verify this?
shouldn't this be: if (fmd == selectedFiles) {
Could you move this logic to the line below, so that it won't be immutable?
`/*/*cache` and `copy-groth-params.sh` seemed to be the only place where we create it. I know we only need to make sure we're in the middle of a single cache.
I think we can use a better name here to make sense. If this is a volume name, it could also help with an error.
Why do we need this?
Does this need to be an environment variable?
if `min_alpha` is equal to `0` why not use `min_case ? min_length > 1`.
This should be `Write` not `Bytes`.
Looks like this is causing the tests to fail.
Add a space after the colon.
Should we add `Object` here too?
We should use `*host.config` here.
Can we just return the error instead?
This is not related to this PR, but I think we should have a test for this to be a bit more specific and say something like: ```python = True, write: True } if (multi = True) { True } If (is_multi(str) }
Shouldn't we throw if `null` is true?
convention is to rename the struct to `ChainFailsafeIn`
It's not obvious to me what's going on here. Maybe it should be a method called `replace_save`?
I think this won't work if you have `< individual name>` it will be `false` in the test.
Is this a bug fix? I think it should be `putput`
I think this could use Math.max(0, i)
We should probably have a more descriptive name for these fields. This will help prevent users from using `serializeFunctions` to use in the `ClientSession` and `ClientClientClient`. I think we should also add some more `serializeFunctions` values to the query.
Can we call it `security`, `tls` instead?
Can we make this a file `Release.buildConfig`, and have it use `path.join` here? We could also make the file call `buildConfig = cmdOptions`.
should it be checked in the previous block?
I think the import order should be removed.
I think we should deprecate `object` and `current` here.
@rhymes this is the bugfix
I'd prefer to keep this test more readable and add `expect(current_examples).to eq(example1, example2])` to avoid the unnecessary parentheses.
TheseThese are equivalent to the orgs method, not the actual actual name.
Why are you adding these? It's not clear what's the difference between the two.
This is an unrelated change, I don't see any other changes below.
why are the changes in this file needed?
Is this change needed?
@trodro83 I'm not sure about this.
Why can't you just do process.execPath.find(arg) => arg.startsWith('joplin')) instead?
This was the only one that wasn't working
We're using a different key here.
I thought "the blob.Bucket" had to be different from "the /blob" and "the to construct a *blob" was confusing, thanks!
You need to remove this now :)
I think we can use `new Date() + 1, ...` to get rid of the variable.
I guess this is a bit weird. I wouldn't do it like this. You have an idea behind it. I would have expected it to be a bit more efficient.
This was just dead code
What if we decide to change the rule and update the name of Validation ValidationChangesImpact to the same?
Does this make sense as a temporary temporary variable for all `KResource`s?
This should also be `[value]` I think.
Use the new Ruby 1.9 hash syntax.
Could we add this to `reflect.DeepEqual(c.Val, cfg.Creds)`?
Why not use a `List<read>` here instead of a `List<ExternalTool>>` for better readability?
This is a pretty big change as it will make you look at what this is for. It's actually a good idea to fix.
Why not use `HttpConfiguration` in the name? It should be a constant.
Do we not need to record a timestamp? This is a little unforeseen-shoot.
it looks like we were assigning `response.code` to a variable in order to preserve the test suite
It's a lot for the new PR, but I don't think we actually need this import anymore
Do we want to log if there is an error or an error.
Can we make this typing as the full full name? `missingClass` is a bit confusing to how we use it.
is this actually the correct version?
I think this one should go in `h2o_mem_functions`
I'd use `options` instead of `sort_order_id`
I think it makes sense to keep these methods to make the scope of this PR in place and make it more generic.
Can we have a test for the "version" case?
Why are we not setting it to null here?
Please use ` &&` instead of `use` to reduce coupling.
why not using another function `getTableName()` ?
Shouldn't it be `ImmutableList.of` instead?
I think this should be a `List<Query>` and not a `List<Query>`.
This was a mistake, and now it isn't a good way to get the code to see if there is a PR for that
Do we really want this field to be exposed as a string?
Let's rename the parameter as ` slaveOk` to be consistent with ` secondary`
I'm not sure that I like the idea of this change, but we should probably make these changes in another PR as these are only needed for now
Should the count be just `None`?
Very minor - but I think there may be some other reason to use the new api import instead of the new filename.
Could this be a function? It's not used anywhere else.
I think that this could be moved to `if suggestions.index()` as an example.
Why are we removing this test?
We don't use any exit code for these configurations, we don't have them.
It seems to be the only place the `grabQueue` is set. Should `maxMessages` be `int` here?
You can avoid star import by using `java.util.List`
You should use the `TestAuthenticate_WhenBase64MessageSignatureIsCorrect` helper function for these as the previous code would have been used in the `ifmvLuAT+hbtLBX/0xm3C0afywxTIdw1HqLmA4onpwmibHGBKsgE="`
I would move this method into `WebWebLock` for consistency with other methods
This is a bad API change, as this will be removed in the future.
Is there a reason this is `A` and not just `topic`?
What's the default for `team` and `username`? It looks redundant to me.
Why do we need to move this here?
Please, avoid the space between `null` and `String`.
This file was removed from this package.
Could you add a check that `body` has this check?
This ifdef should be deleted in the Cesium specific code.
I think this can be removed too, since it is not used anywhere
I would keep this boolean, it's not a big deal, but it is a very big deal.
Minor thing but this is a change in behavior since the previous release was not working before.
This will be removed.
Why this is necessary?
This is a change in behavior and will break existing users.
This seems to be an `int` not a `dict`. If you do something here, I would say that instead of using `delay` you can use the default value here.
I'm wondering if we should check if the value is non-nil here - the default behavior of `dial` is `false`, so if we do it it would have to check the value, it's not a value, but it would still be better to check it and pass the value of `true` directly.
Msmq does not seem to be used
Are you sure that this isn't an invalid request? I'd expect the user to see this on the user side so that it gets a different user.
what's the purpose of this line?
Please remove this extra line
nit: please move around imports
I'm wondering if it's worth a sanity check, but I am not sure how this is used in other modules.
this line will break the imports in the group by the group by the group by
Shouldn't there be a newline after the colon?
Please also add `e.getMessage()` to the exception.
This is a bit hacky, but if we do have a `index+1` we could check the exact `index` argument (the first argument), and then we could have `netloc.Default()` and then just check if it's present or if it's not present.
I think we should keep this log log.
Why not just use the enum?
So this will not work properly because the main transport is the same as the incoming and the transport is applied to all outgoing and the incoming requests respectively.
if the code returns an error, is that really OK?
@mjkkirschner @mjkkirschner I'm not sure if it is safe, but this one was not intentional to change. I think it was correct, but I think it might not harm to change the default value.
@mramato I guess that's why I moved them?
I think that we can have a better version name. We can change this to something meaningful.
can you make this a private variable?
Can we avoid the dependency on `lodash`?
We should really disable this in 2.0
Why is this needed?
@danielbeck do you think we can move this into a constant somewhere ?
@liwnell @MichalStrehovsky, is this a bug?
I wonder if this should be an enum instead? (i.e. `tablet_tool_v2_grab_interface_tool_interface;`)
How about we make this `openaire.Config`, `s/openaire.*_path/` instead of `active`.
Please make sure that the `routing` is not present on the `ipfs/QmTiRqrF5zkdZyrdsL5q` file, and then you're doing that in your `SPAwaitRg2` file. This needs to be moved to the `init()` file to the `ipfs/QmTiRqrF5...` file.
This should be `static`, right?
Why not name this `EXECUTION_STOPPED(65)` since it's always `false`?
This seems to have a bug in `utilities`
This is not a huge fan of `sentryAddrs`, but I don't see a reason why the old `database` was being used here?
I would use relative imports, like in other files
Why do you keep the `@interpreter_NAME`?
@jenachoi change the name to `aria-label`
@larsoner I noticed we had these whitespace changes in `Particle Argon`, so it's not needed to have them here.
Is there a way to avoid this kinda thing? I don't think it should be there since `scope->buffer` is not set, and `vString` is also a `scope->length`.
could not connect to peer from k, and this is not a peer? or is this the only one, or a peer with this new name?
is this necessary?
this looks like something that should be a test.
This should have been an option. It should be `@psalm-mutation-free`.
This should be `ACEGEDOR`.
This looks odd. Maybe `log.open(b).length`?
Why are these tests needed?
Would you mind adding this in the `void generate_special();` method to avoid the potential to have a `CAPTURE` argument? I think this could be an issue if you are already updating `icks` to get the `_.` and you're not breaking anything.
This one is still still in the specs, but this one is still in Core Core, we need to bump that to the specs for the new specs to ensure we are not using the new one.
I know this is a change in behavior, but it seems to me it should be in `Task.finest` instead of in `Task.info`
I don't understand what's going on here. Is it a `SingleForm`?
`from subprocess import CalledProcessError` would work for you.
I think it's better to put the `AccountActor` call inside the block and call it once after the loop.
same here. This is not a problem.
If this happens only for a single reg delegate to `check_disp` we don't want to install `os_tls_offset()` to the `ushort` object. I think we don't need to change that.
We're not usingBadgerDB anymore, so I removed it.
@Savalek instead of using a `PropertyDate` here, I guess it would be better to put this into a `displayName` and just use the `dateConverter` in the `BaseMessage`.
Indent the first parameter one step more than the previous line.
Since the time is more than 1, this means that the toggle will be the same as the dbt node (float) of the dbt node (model). won't that break other things? The execution duration in the dbt node (model). won't be the same in other parts of the code.
could use `WARNING` for these
should be exception instead of try to catch
(style) line over 80 characters
I'm wondering if we should just remove this 'rdl'?
why changing the value from 0 to 1?
No need for this `else` here. If it doesn't work, we'll need the `if` in one line.
Can we also test `Object.getPrototypeOf(object) == CustomObject.prototype`?
Should we have a different type of information, for example, when the user wants to write a new one? Or is this the right type of information for this function?
Is the indentation intentional?
Can we get rid of this var and have it in the same way as the one in `main.go`?
Shouldn't this be done for `gpu_validation_reserve_binding_slot` instead?
I'm assuming you meant `remove_null_checksum_refs()`?
This should be done in a separate PR.
Do we need to remove `ControlRuntimeBootstrap`?
I think we can remove the whole function here as we already have an pylint disable option.
`txib.GetEncodedLength()` is not needed because they are not related to the same purpose as the same thing.
Line is too long. [88/80]
remove empty line
The name `load_bboxes`. Is it intentional?
Was this a bug? I don't think this is a required attribute.
I'd suggest using `_webfIP_p_lib_quantum.h`
I think a good example here could be changed to the `Unlock` option to the `KEYKEY` option.
I think this will be wrong.
make this a normal version of pending for testing?
I think this is the right fix. It seems that we could get rid of a constant like `list_list_size`.
You'll want to change this to `&&` so that you don't have to do this every time you get a custom table.
I'm curious what the difference here is if we're just checking for a new RuntimeException, and if the current RuntimeException is not the default, why would we remove the `SurfaceNamer.getSourceFilePath` method and use `SurfaceNamer.getSourceFilePath`?
I think you meant <msg> It's better to be using the new option in the `Randww`
This is a bit weird: if this value is `false` then we will remove the extra `Set` value from the class.
You can do the `omitempty` in the `hermetic.h` rather than `hermetic.h`
I don't see any usage of this method used anywhere.
Why does this need to be configurable? `0` is not available in `save` - you need to change it for `pre()` - as you're already on `save`.
why not using single-quotes?
This isn't used, right?
I assume this is the only change needed for tests? Can you change it to be a const in your tests?
can you please elaborate a bit on this change? you should only need to call `setUp` if you are already using `setUp` or `setUp` here.
Instead of doing this, would it be worth adding an example of how this function works?
This should be `return ! !array(vm, "RT")`
@jadarsie this is where you set `self.close_pause(self)` to `none_pause`
This should be reverted.
Are we planning to remove this TODO?
Is `not found` no longer needed?
This is a bit odd. Maybe a better approach might be to just name this something like: `printError.Fatal(e.Error)`?
This test was unrelated to the rest of the PR.
Should we use `useChirality` instead of `useQueryQueryMatches`?
Can the number of request body be a single Publish?
Please use `arc` for consistency with the other imports
It was removed in #9326 since it has moved back to where it is used.
I don't think we can remove this.
why remove this line?
This will change the output, and will not create unnecessary output because of the `checkExprDepth` in `line_ecg_byte.py`
should we use the message instead?
I guess this was a leftover?
I don't think this will work for the first file. It's important we'd need to do a showEdit file.
Please don't use `isNull()` because the input argument doesn't get a `List`. It's not a good idea to use a `List`.
did you run this in? or you'll need to remove it
why are you calling `wallet.defaultAddress` directly instead of doing it here?
I'm a bit surprised this works, but if you're going to do it here then maybe you should just use `Events.trigger(this, 'stopped', [stopInfo]);` instead.
Would you please rename `OperationGenerator` to `ensureGetPackageName` so all the `resourceName` methods are consistent across the different operations and not consistent?
Why is it not public anymore?
nit: rename to `WindowPoStVerifyInfo`.
why did you remove the previous line? The previous one was a bit confusing and I think it makes more sense to add `update` method to `metrics.End`.
I think this is wrong. `?:` is an array in `/` should work.
This is a bit confusing to me; `spack install --version` needs to be set to an empty list.
it seems weird to me that the `time_range` suffix is a pointer. Should we allow the value to be the same?
The `SYSLOG` above should be moved to `zmm_caller` as well.
Is the variable used anywhere?
Use `repr` here and below
shouldn't this be the first argument, so that it could be called from a static constructor?
is it possible for a test to rely on the binary file to change user in the test case ? If so, should we set the value to `true`? If no, wouldn't the binary be allowed here.
This file is not used anymore.
This should be `getTypeNameWithDiscoveryFor()`.
Nit: `os.Duration("ECS_ENABLE_CONTAINER_METADATA")` -> `os.Getenv("ECS_HOST_DATA_DIR")`
You might want to use <msg> <msg> <msg> You can make a `#else` here and make `#ifdef` on the next line :-)
Nitpick: In general this may be better off by using `recoverutil`.
This is incorrect, we can use the cache directly.
i would not make this an inlined and make use of 64
Is this used?
I don't know if it's possible to have a way to do this since the `keyGen KeyGen` was used outside of the `bool` object rather than `bool`. Is there any reason that this is for the `KeyForUser` type?
I think we don't need the `mock` here.
I think you meant `#if (this.options.cursor)` to be safe
Line is too long. [81/80]
@smarterclayton can you explain why this change gets removed?
Why does this need to be `props.defaultValue != null`?
Please revert this change.
The URL name is not very descriptive to me. Maybe we can have one or the other?
why we need this?
Should this be `expected` rather than `1`?
I'm not sure why is this change ok?
This is going to add some details. Should we be using the `BeforeQuery` instead?
This is just a question, but why don't we do this in `app/libPHP`?
What is the motivation behind these? If not, they could be moved to `AsyncOption` as there are a few additional checks around it.
The lock was not always closed here, but now the lock was never registered.
I assume we need to use the new `Subscribe` here?
why not `if scaffold != true`?
no need for an override here? if not just log a message.
This file should probably be in include-swagger (see #1717).
Can you add a check to also say why we need to wrap this test in `test_no_docstring`?
maybe it would be clearer to call this method "prepare_this_controller_in_time_load" to make this more general for future readers.
AddonsExtraParams ->
Why is the default being removed?
This should be `:call_site` IIRC.
Is this a typo? `managerImageTar` is not an instance of `GlobalUtil` so I don't see an instance variable being used.
Let's keep this now.
We don't need to do that. This is the only usage I have is that you need to do is do something like "scope.MachineStatus.InstanceState: &instanceDescription.State.InstanceState = &instanceDescription.State.InstanceState, if the first part of the line is the same as before.
This line does not look right. It's only for `little` and `little`. `change` is only used in several places. If you are going to use `change[]` to get the correct value, it might be worth adding `little` to `little` and using `change[]` on a new line.
All of the `--bfbs-builtin-attrs` flag should probably also be moved inside the `--bfbs-builtin-attrs`.
Why did you rename this folder?
Nit: it would be better to make this return `true`
Did you mean to delete this?
Is there any reason for this check? We should at least make the `wireguard` a constant
`Failure` is the preferred name for this function because we don't expect it to be true in some cases; what the `FailureReasonSizeExceedsLimit` function is called for each individual `Failure`.
Is this TODO still needed?
I would prefer to keep it in one line. It's easier to keep it in one line
Please don't add any trailing whitespace.
I'd prefer to use `modules.@@additional_pkgs + []` instead, but it will be more readable.
`if (validTaskIndex(DeviceIndex)) {`
This looks like the only change to the key.
I think we can revert this, it is a no-op, just drop the variable.
What is the `continue` for?
This class is not used any more
What do you think about just making this `if os.IsNotExist(err) {` instead of calling `IsNotExist(err)`? This function is the more efficient and we don't have to worry about the permissions.
Is this a breaking change? I don't see a cleaner way for it to be calling GetParserWithBuiltins.
Can't we just set this above to be a global setting?
`empty` is not the right API for this. `@return this for method chaining` can be replaced by `@return this for GoogleFile> deletesToAdd`, which is only true for the `DeleteFile` API.
Line is too long. [83/80]
I don't think we need the second `withIcon` anymore.
Do we need to create a new filename here?
Could we use `isInIgnoreCase()` to reduce coupling the order?
Is the `===` needed here?
Why do you need this?
I think this is what we usually do, I'd rather not do the call-site for this.
Shouldn't we use the interface to calculate this?
This is wrong, you need to use universe.SystemTime()
There is no point of view "leaves_time" in your test, please use `1e_leaves_time` and use it in both places as the "no", "no")
Can you move this into the `strings.xml` file then?
Not sure this one is the best way to handle this.
Shouldn't this be const? I don't see it used anywhere
Should we call `pastebin_version` here?
We can probably change these to `sdktrace`, they both go through top of the file.
This is the fix. I think we still want it.
Is this still necessary?
This is probably not a good way of doing a Loggable.
I think you changed this to use `expect` because you want to change the test to be sure the message was always an invalid message.
I think it's better to return an error here, but return an error
Why did you remove the transaction transaction transaction?
This one is still not needed, we can keep the `log` as readonly and add `ConcurrentProvider#getAll()` methods to the `AsyncLocalScopeManager` method
The `.Join` returns the buffer, so the buffer itself is a little bit confusing. Maybe just add a `map[string]string`.
We can remove it from the PR.
I'd move this up here to where it's used.
Do we need to update this to eventually take `hypress.COMPOSITE`?
@Eric89GXL don't we already have a dict() method for this?
Move this right below the method above `backgroundCtx`
Nit: I would not have to ask for the name, I think it's okay to just inline it.
@bparees do you think you meant `except TypeError as message['message']`? If not, you can remove `message` from the end of the message (it is too general)
I guess these log messages should be `info`. The logging is redundant here.
This should just be `false` to match the other places where `false` is used.
This needs a `--local-example` flag in this file.
Why the change from 110000000 to 11?
This condition will be changed in order to not allow `$metadata['associationType']` as an array, and `--multiple --multiple --x` might be a little clearer.
This looks like a wrong choice. If you're using a custom `grant_flows`, you should be able to run `authorization_code implicit password client_credentials`.
I see that the new headers are removed, but it is probably not related to the rest of the PR.
Should this be conditional on the options?
Should the keys be in a list of supported strings?
You can delete this loop
Can we also get the String from `value == null`?
Missing space after #.
This test case should be added to the `@DisabledOnSpanConsumerException`.
can you add a method with a return type to ensure it's empty?
I'm not sure about this one here. I think we should get rid of all the `CharsController` and just call it directly. I'd say that if we ever do, we should also be creating the entire commits model directly, and call it in a single model.
Does this mean that there will be multiple multiple multiple multiple containers? If so, we can just make `# - Identifier: Apache - 2.0` a `# -noqa` that we should add. It would be better to have the single-character `# -noqa` to a `@private` statement.
this is an unrelated change, please remove it
I feel like we should add a `rename_column` and `rename_column_to` to the docstring.
I think this is not the best place to make this more generic as `RemoveSuccessor`, as I don't think we need to make a change from `RemoveSuccessors` to `RemoveRemoveSuccessor`, as we do for the `RemoveSuccessor` and `AddSuccessors`
I don't know what this import is testing, but why is it necessary? If you want to be able to import it then this import is not needed.
`plot.state` is always `None` so the `get_screenshot_as_png` will be `None`.
Is this being used by other threads?
So the default is `1`, but now this is `fmt.Printf`, right?
`scheduled_end_time` is a pointer, so you could use it as it would match the other variables as possible.
Isn't this already set to true?
@bvanessen Could you please explain why this has changed? Is this something we want to support?
Is this being used anywhere?
Why is 0 necessary to change it from 0 to NULL?
This is really hard to follow. I suggest to have a method called `List` for better readability.
This isn't necessary. The `get` method should always call `get` in the actual fields and not `create`. Also, this should not be the same as the `get` method. The `get` method should only be used for merged cell.
Is this intended to be a local variable? If not, why not remove it entirely?
I'm not sure we need to do this... If we don't do the thing, this should be a module-level constant.
We should add a note for `HttpHttpParser` since there is only a `UpdateHeaders` for the other IHttpParser types.
this is a partial partial. not strictly related to this PR, but it seems odd to me to have both `state: :div>` and `state_tag` in `result`
I'd prefer if we didn't make sure this was a separate commit. <msg> it looks like the line above is redundant.
I think this needs to be `(type._lastDomChildSibling !== undefined)`. The `==` can also be omitted if `type._lastDomChildSibling` is false.
This seems to work as expected. `issubset` is a list of packages, which is the same as `str(k, ...)`.
I don't think we should set this default to True. It would be better to set this as default to True.
@RoiEXLab This needs to be updated with a `_shared/py/...` dependency.
You are checking the int line here, as you are in `check_expr` and `check_expr` are in `_start_raw` and in `_stop_raw`.
nit: should this be `break`?
Do we need to also check `!work` or is this not enough to just check the version?
`childExeReplacement` isn't used for this yet. We probably want to keep this for testing.
I am not sure that `WriteResponseHeader` should be used in the context of the API. It would be good to have it there, like you did for `server.Headers` to be able to handle that properly without the API. For example, if the API is not using the `server.Headers`, then the `MessageHandlerHandler` will have `MessageHandler` and `MessageHandler` should return the values.
This looks like a duplicate of line breaks. Is there a reason it is added?
"Consider using Python 3 style super"
I think this property should be set or something, similar to the one in `DefaultContainerContainer`. We should remove it for other types as well to avoid unnecessary confusion.
I think we should update this to 4.10 since we do the same for the Rpool delete.
I think you can get this from `maxFileSize` to avoid potential crash if it's not `directory`
I think it would be good to have some context on the new cluster to avoid this change since we are using `deserialize.go` and not using the actual default value.
I think you can add the other `syncset` field to this one as well.
can we just move it to the file interface, so it's easier to read? We're already adding an empty file here.
This could be a static import.
Why do we have to change this?
Why do we need to remove logging options?
should we include the device check in the image instead?
Please avoid wildcard imports in this PR. Please avoid wildcard imports.
I think a test would be more natural as if the network can be used to upload 4MB.
why don't you just have a unique unique service and set it to `nil`?
@deads2k @sttts - is this a bug that we should use here?
Shouldn't this be 3_000?
Why this change? I think it doesn't matter, but, not your local build.
Do we need this anymore?
This makes the test pass on MDB_put instead of MDB_store as a result
"time a node waits after the blocks to arrive" sounds weird and confusing. How about "time a node waits after the start of an epoch and arrive"?
No need for this file.
It seems to me that there's a `-1` arg that will be there.
I thought the compaction should not be part of the var "with-starting-sequence-number"?
these line are unrelated to the issue.
You can remove the blank line here.
Please use pybind.util.num_unicode instead of using safe_unicode in the tests.
This should be removed as it is not used.
Do you need the logger.Debug?
translator is not a public interface. This should be a public interface, which is not a public API.
I'm not sure if this belongs here
shouldn't we also add this to an `assert` so we only need this one?
I think you can remove the extra lines
Should this be `wlr_INFO`?
We have a `const siteStories = siteStories;` below. Can we remove it if it's not needed.
Was this not a problem in Spack?
We usually do not need six anymore
This will create an experiment if `localOnly` is provided, and will throw an exception.
The `||` should be wrapped in a `expect(err).to.match(/This batch has already been executed, create new batch to execute/);`
This is going to break the API. We do not have any way to make sure the `Converter` is set.
Is there a reason for the new error handling here instead of using the new error handling?
We need to do this in the core branch too. It should work.
Why is there no constant in the error message anymore?
Should this be done with the `get_search_form` function as well?
why not make the struct public?
Why is this change required?
Should it be `GetFileInfo` and not `GetFileCharacteristics`?
why do we need to ensure the existing grabs happens to be a copy of the underlying map?
`configuration.isUnprotectedTransactionsAllowed()` means "UnprotectedTransactionsAllowed" so it's not obvious that this method is called in the code base (which it is in the first place)
I think inversedBy could be a dedicated dedicated interface, e.g. `getEntity` or `getEntity` but I wonder if it would be cleaner if there wouldn't be any benefit that it wouldn't break if you are using the `@ORM\` option.
Is there some way to make this `declare`?
I assume this will break existing models that are not in the same folder? Maybe it would be good to also have the ingress-annotation flag.
`cachedCommonPluginLoadProps` can be deleted since it is only used in one place.
Is this required? This is the only place that needs to be used.
you should not be using a mutable object for Python 2. If it is, just make this a warning.
I'm a bit surprised this doesn't check for 20 and 24.
This is not used.
@jcotela do you think it would be more readable to use `attribution].join(', '))` instead of `many?`.
Maybe we should make this a separate `Debug.CheckCheckManifest` that we have in the `WriteManifest` method, and we have to make sure that the value is not there.
Maybe `--fix-to-fix` or just `--fix-to-fix`?
please use the new enum constant, not tabs
This method was removed as it is now used in many places.
If we're not using the `actions` field, do we still need it?
Was this supposed to be ` Build gowire`?
This test fails without the `true` - `false` returns `true` when running `true` - `false` returns false, which means we can't test it at all.
The exception message should not be below 0 or infinite, but was: {timeoutMilliseconds}"
Shouldn't this be in the Xunit?
This should be in the static import.
This function should be `serviceservice` and `serviceserviceservice`. The function is only used for `serviceservice`, which should be called from `namespace` and not `type` and should be called `namespace`.
Is the key key key guaranteed to be present?
This is not the only change that fixes the issue. The issue here is that the file has changed between "check-length" and "check-streaming". The "Check uploads" seems more appropriate, but the "check-streaming" should be "is-length" (not a problem)
Nit: this could be a `const` statement like the above line
We have `JivaTimeoutType` already.
This is only needed if we remove the `onStartSendRequest` call.
We could have a constant for the name of the old price, e.g. `CreateHashed`
This is unused? I don't think it's the case.
is this really needed?
This makes me sad. I'm assuming we are testing this case but I guess we should be using the `http.SiteStatus` function.
I think this was intentional?
Why is this needed?
I'm wondering if we should just make the tests take care of it. It might just be easier to just pass the tests on `worker_0` instead of passing it to `fmt` and make the test more general.
I'm not sure how to test this. What do you think about adding the `[api.SdkFSTrimUsageRequest, error]` to the `AutoFilesystemTrimUsage` that it is not needed?
why not use a constant for this?
`databaseName` was being set to `Config.config`. I'm not sure why there is `Config.config` here.
This is not the same as `g.Entries.merge()` as in the first place. The name `SampleInsensitive` is too long. Can it be renamed to `CaseInsensitive`?
Please don't use os.path.h in the .h files.
This will throw an exception. It should be removed from here. The `info.info` can be removed in history but it will return `nil` when there is an error.
shouldn't this be true?
Don't need this change since we already have `this.workspace_scale`, right?
Please use `update_cb` to be consistent with the other flags: - `--Override=...` - `--Override=...`
add a note for `DefaultFormatBundle` in the description
I'm not sure about these changes, these changes look good as they are not related to the issue.
We don't want to have the option in the config file. Can we have another one to do this?
What does "underlayer" mean here? If it only exists in the cache, why not just "H"?
What about a more specific class name for this?
Line is too long. [83/80]
I think we can avoid the capitalization by using <msg> Lol, and instead have it return 0. And in the future we don't need to use it, so we should only do this if we do.
why not using a ConcurrentHashMap ?
I wonder if the snapshot is not available at all. The value will be nil if the context has been selected but the input is not empty. Is it something you can do here?
Can you explain why this change is needed?
What's the difference here?
This change is not needed. Just remove the old code in `rfcrfcrfcHandle`
this import should go below `github` too.
Is `std::vector<sycl::device>` enough? I don't see this using gpu_devices.size() anywhere in the code, but I don't see an issue with it being passed in here.
Block body expression is on the same line as the block start.
As you said, you can use the `url()` method here too
`frame` doesn't work here, but `parent` needs to be passed along
I am assuming this was the main use case where we were calling out a different approach (I'm not sure whether or not) - but if there is a way to fix this, then there is a good reason why we should do it for both - this isn't a big deal and I'd prefer using some sort of "styid" to "Dot a bad assumption, as the default one has to be updated to use some other. The "Dot a number" will be the only usage where we want to be the actual "Dot a"
We're using `root` here. We should keep it for now.
This isn't really required.
Why don't we just remove those file?
Should we check `if aws.Bool(false) {` on `Retryable` and then do that again when `!aws.IsReaderSeekable(nil)`? I think `if aws.Bool(false)` is true but `if aws.Bool(false) {` is true.
Can the `go test -f` file be removed?
should we also check currentTime == lastTime.Timestamp here?
Do we need a check for x.find here? I.e. do you expect only a single patch to fail if the version is not provided, but I am wondering if there may be some other patch that would be useful in which case would the patch be missing?
The `AWS IAM` is already namespaced on line 5803.
I think this class should be renamed to `StructList`.
Why are these checks removed? Isn't the type of `IsPossibleDynamicType()` and `IsBaseClass()` now defined by both `IsPossibleDynamicType` and `IsBaseClass()` return?
why is this needed?
This should be in the debug log.
I'm a little nervous about the naming here... I don't think that this is the right place to put this.
I don't understand this change. Why is `json.RawMessage` not used anywhere else?
Is this supposed to be `cni_version.PluginSupports("0.0", "0.2.0", "0.3.1")`?
Please remove this empty line.
@mfojtik @jglick Should this be done on the command line?
I don't understand the purpose of this code. The task status isn't used anywhere, and this seems to be used elsewhere.
Why did this need to check for nullptr?
Why are we removing the warning about the warning here?
Could this just be removed?
I guess this was intentional, @mfojtik @matt-gardner, I'm a bit worried this may break something. Is this going to break something?
What's the reasoning for removing this line?
We have `null` value for `null`, so it is not required here.
Why not simply pass the `GroupByAgg` into `NABoolean` ?
same as above, no need for `childFieldName` here
Why the `-id` is not an intentional decision here?
@deads2k this was the reason I was checking for the internal Group, as it was previously previously.
Can you also move to `currentcurrent`?
I think the `destResult` should also be moved to the `ListPoolClient` class.
This is an unrelated change, it is needed to send a new session view, but that can be removed.
do we have a better name than 'Enable' ?
I would not expose this as the package name since it's not yet the case in the package. This is not the only real case for this.
Could we add a `err.Errorf` check here?
Can we have one in mdserverReconnectBackoffWindow that does the mdserverReconnectBackoffWindow, or just that it's more commonly used?
this is the wrong place for `excludes=false`.
We should probably remove the plugin altogether. We should just always do the plugin in the `/usr/php/` directory.
Is this necessary?
This log statement is not needed.
I've been removing this code, I don't see any code using it in `lib/server/install-server.h`. It is not used anymore, but we are using it in this file to ensure we are doing the same for these.
can you add the "and" string to these lines please?
Nit - was this just a style change?
This interface is not the right place for this. If this interface is called from a KafkaAvroEventReporter, this interface should go into the `boolean report(EventType eventType, Map<String, String> metadata);` interface, and this interface will fail.
I'd rather you pass the `visit_name` attribute to the parent function and then pass in the parameter to the method and call those functions instead of using a dictionary. It would also make things more readable. I am not 100% sure what's happening here.
I don't feel strongly either way (I think this can go in a single row).
Should we also add a note about "was already added"?
This is an error, right? Maybe a warning should be raised?
This should be f'Histogram for feature name {}'.format (it's not a good idea)
This isn't used anywhere.
> temporarily temporarily "length" ?
why this change?
Why did you add this condition to line 118?
Why do we need to check for auto same version here instead of just auto same_name?
We should move this check inside of the `fpga_event_handle`.
Can you please create this file instead of adding it to the `#include` tag?
what's the relation between `need_unmap` and `sampling` here?
Why was this removed?
I assume `acquireTopologyCacheLock` is used for both values of `blockTopologyCache` and `startTopologyCache`
Can this be `h.Dispenser = !caddyfile.Dispenser`?
why do we use cast() here?
why this change? Isn't this an issue?
`v` should be nullable on non-null pointer. Also, I would rather have a `@Nullable` method on `Schema()`.
If you don't have the `Total` field here, you can pass the options directly as the parameter.
should this be `type === 'math_number'` ?
The `AWS IAM` is not used anymore and can be deleted.
I don't see why this is necessary.
why don't you just use a full_backtrace method here?
Why is this changing?
do we need to import mitmproxy here? I don't see any use of import mitmproxy.version.
Should we add a warning for this in the future? I think in the case of a situation where a new API is missing.
We should only import PY310_PLUS when it's defined.
Why do we need this function anymore?
There could be a constant in `const double diff = ...`
This is the same line as above.
This file should be included in the PR.
I'm curious why this change is needed.
How about `(Logical tautology in comparison - %s', something something is compared against itself.):`
Please add a return type for `_request`
I don't think we need to do that. We can't just call this method with the `--pdf`, right?
Why the space between "Got the value" and "Got the value"?
This is the only change that affects TF project. Why not just use `CodeFlow` instead of `CodeFlow`?
This line should just be nested inside the module.
This is the only place where we are calling `setColumnContainers()` in the `addRule` method. So this method should also be moved to `setColumnContainers()`.
I think `getAccounts` and `getAccountsAccount` can be replaced with `setSetAccount`.
I think this would be a better place for this to live in `models/models/models/models.go`.
I don't think this is right, because `rpcSchema` is `null`, not `null`
why not hardcode bytes here?
please use a tab here
I think this type should be public. I don't think it's required.
Isn't this breaking for `wireError`?
Can we use constants here?
This is good as it will cause the build to fail.
I would use `if not class_agnostic:`. Also, I believe you are trying to avoid checking `if not class_agnostic` here. Also, I would use `if not class_agnostic:`. You can use `if not.equals(self.pkg.min())` as it is the `self.max_coordinate + 1` check below so that you can do `if not class_agnostic = `max_coordinate + 1`.
I think it's a reasonable idea to make this change a bit more "row" to make it consistent. Can we name it "public"? "row" is a better name for what "row" means.
The enum value is being set on the `TIME` and it looks like both are `long` and `+` values. Can we just call it `double` or `+`?
I'm a bit confused by the usage of `@next_document` here. Is there a reason why it can't be ` prev: documents`? I thought there were several other ways to get around that?
This is the one place where you need it, `p` is not a function, which is a function.
This is a different approach than my code, but it's not needed.
I'm not seeing where it's used?
Can you make this change to the `key` key? If the string is empty then it doesn't match the string anymore!
Can you explain why this is not a pointer?
this is unused
could you add a check that before, say, @mramato ?
I think this should be removed. It is now used by tests that include `github.com/models/github.com/models/logrus/hooks/test`
This should not be needed. The `else if` isn't true anymore.
@nickytonline I don't get this part of your PR - you're trying to figure it out in your next line.
This does not look like it is used anywhere in the code, please remove it.
The test here should be `TEST_ERRORS_1_before_type`.
I think it's good to have a name for this (it's not a "Resolve" but I feel like it should be a "ResolveBranch"
Should this be a `T extends WebElement>` in case `CreateAndElement` throws exception? If I have a `List<T extends WebElement>`, then I think this will make any difference?
This may not be necessary to run test locally - there's a new test package for that.
What's the reason to make this return the original buf function?
We have some config_shutdown_script_enabled in some order, so I'm not sure if it's good to have this return bool. What do you think of removing this function and using `is_upfront_shutdown_script_enabled` to return `None` for the default value, instead of just setting it at the top of the `self`?
This is not correct, we already have a call to `self.title()` on line 567.
This change looks good, but I don't understand the purpose of the change, since the change in `CreateRunner` is to set a field. Is there a reason we are removing all the `Joiner.Type` calls?
No need to reset the `vers` variable here, it should be `if (rvm != NULL)`
This seems odd. Why are we removing the `goog:chromeOptions`?
Why not `key`?
@mrunalinikankariya do you mind adding this to your PR? I don't see why we need to change it if we are using it.
Let me know if this is OK.
if this is necessary then can we do a `placeholder` in the `__init__` method so that we can do the right thing in the `placeholder` interface?
I think I would use a `listReq.ByBanned` here, as it's not a TODO, just an inconsistency with the rest of the code
Why are we changing from `req.version_ref()` to `leader_partIds_ref()` here, but not here?
Why is this not `xml:lang`? It doesn't seem to have anything to do with anything defined in this scope.
Standards: Please add a space after commas.
This is the same as in `window.location.href`, so it should be always identical to the one from `appRouter`.
> If [](start = 31, length = 3) I would put a check to avoid this warning in the message, because if the list is not in the message, the message could be in the message itself.
@gianm @johnsimons you have fixed your thoughts on the change here. I'm pretty sure this will cause some confusion in our CI and it's OK.
I think we need this now
@mikichan @sierrahobi @chlowell are you intending to use the exact version?
Are both of these also used by `check_NVDAObject_init`?
Why this change?
@martint Are these changes related? Or am i overlooking something?
Can you add gitea copyright line to header (and keep gogs one next to it)?
Should we add a description of what `@since` does?
`this.bulkExecute(_writeConcern, options, callback)`?
The changes in this file have a space after the colon in the colon, don't you?
This change isn't related to the PR. We should revert this to the rest of the PR.
nit: `Date.singletonName` is a big deal, but you can use `Date.singletonName`
Shouldn't we also check for `out` for `out->name` (and other similar places) in this PR?
this could be moved to `on_exact` method
Hmm, maybe a more descriptive name would be `transfer`?
Let's remove this file entirely, it will get added in `mne/utils/utils`
I'm not sure about the `Default: strings` as the default here. I would suggest to make `server_command` a flag for this.
Can be `null`
What's the reason to keep this?
I know that you only test the `test.main` tests, but not `test.copy` tests. This is a good change. It might be a good place to fix this so it wouldn't work.
The "Backoff ended for %.128s" might be confusing. How about "Backoff ended for %.128s" instead? That would be a more consistent description to understand the reasoning...
Why is this in the other PR?
I think we can keep these import-case here, but just to make it clear, can you make it clear?
you don't need this, it will be created in the DB
Please remove this line.
This will never return `false` for the expected behavior. It is not necessary to check for the `null` value of `insertedIntoFocusOrder` if the order is in the focus order but now we should return `true` if the order was empty (which is not found).
i don't think we need to change this
We should probably add this as a separate pull request to avoid confusion with how we are using this in the dashboard.
This is a bug, we need to be sure that we are getting the module version in Spack.
nit: can we change the call to `Settings` here and in the `io.prestosql.plugin.sql.sql.sql.sql.sql.sql.sql.sql.sql-plugin.sql.sql.sql.sql.sql.sql` so the call to `Settings` will only be used if the value was being used.
These should go into the `after` callback
I am not sure this is the best thing to do here. The `C` header is used for ` 2014 CERN `, well-t`, so there is no need to change this file.
I think it is a better idea for making a small small name, like `aws-sdk-s3` and `g3`
use `Http1AndHttp2 `
We could have done this as a separate patch. It makes things more readable
`chained_prio_struct->priority` might be a better name for it.
I don't think you need this. This is a very good practice since this method returns the transaction object to be set to nil (I don't think it's necessary for this). It seems like it should be called in a `TestCommit` or something.
We could use `120.NotFound` or some such.
This isn't necessary, the package is already in form of StandardsPoliceCompileModule
Can we just add the new `fbo.log.CDebugf` here too? The function is already called inside the ` Request` loop.
Shouldn't this be `$media->getProviderReference()`?
Can you remove these changes and use the go property name?
I think this is missing the `Namespace`, and is actually not being used
This is a bit odd, maybe `isElFocusableElements` should just be a `@return {Boolean}`?
I think you need a `_format` call here
I'm wondering if we should just make an abstract class as we could have an `@SuppressWarnings` annotation annotation on `checkstyle`?
Please include the CMakeLists.txt file in the PR.
This is the fix.
@krwq is this an error for the result of the `mFolder`? I mean, the result of the `equals()` will return `null if `mFolder` is null?
Line is too long. [103/80]
We should avoid using `spec['TEAM_NAME'].lower()` on the `team` parameter. The reason is that it doesn't matter, so this change won't affect existing functionality.
Is there a reason for adding this here?
Can we rename this to something more descriptive? What if we added a `Need<char>`.
This is a great way to make sure there's a different name... but there is no way to do that. Maybe `mergedNodeCache.GetOrCreate` is better, or something like that. Maybe something like `mergedNodePaths[0]...`?
I don't know what's going on here. Is it possible to call `start()` in the `Interop()` method and have the check on the other hands `Interop()` method? In the `AbstractSelector` we have `order` that is called. In `order` we already have the default `start()` method and do it only when the `start()` method returns an int. So I'm curious if there is any way to do this, and then you can call `set()` on the same method, so that `order` can be called in a non-null instance.
`getLength` doesn't make any sense, this doesn't have to be in the method call.
I'm not sure this needs to change. I am not sure if this should be a null check.
If this change is necessary, the test failed on the test.
add `import` as default. Also, I think this is the default.
Please replace with `product_user_prer_enable` instead of removing this line.
This should be "specified" not "specified".
We probably want `policydensity` here, but since `policydensity` is a new parameter, we may want to rename `clone` to `clone` for consistency.
This can be simplified to `meterSources.Count() == 0`.
The"A pointer" is a breaking change.
The `defaults` attributes are not necessary anymore.
Is the `is` check needed here? If so, we should be able to remove this check at some point.
Is this used?
I think we should use the `is_platform_like` constant to make sure we don't apply the same data in the tests.
Does anything use this function? If not, please remove it.
Is this change related to the change in behavior?
Why do we need an extra space here?
This is probably what is breaking the build break. The first part of the file is not a valid component and we shouldn't be including that file if we don't want to create a file that is not a valid dictionary. I think it's ok to just add the full file to the docstring to `abspath` and then use that here to add the new `isabs` check.
this is a duplicate of line above
I think this should say `user` instead of `authenticated` (or `post_authenticated`)
I would use a map from the map instead of the map.
Not sure about this. `null` seems a bit confusing since it can be `null`.
The event handler should be in the same line as the last event. (Or should this be in the same line?)
If you make this debug only, let's add it to the end of line.
I'm pretty sure we're not logging here before we just return if there's any error.
Is this not enough? I think we are using the location instead of just returning a `size()` value and not a `isInboundlocation`.
if error, should use `std::Event`
can you remove this file?
It's not a good idea to add the same variable to the `_check_option` method, since it's not a user-facing case.
do we have tests for localstack?
Nit, remove the newline
Why not just `import dom from 'dom'`?
@tnozicka this file should be in the list.
Why not return error?
Why don't you just add `Matrix` to the `KafkaStream` method and remove it? That's what you do below.
This is a little strange, I'd expect to call it once at the beginning. It makes sense to call it `fd` and then call `fd.get()`. This means that it does the same thing in that case, right?
It's probably not a good idea to fix the fix.
Does anyone know why this change is needed?
this doesn't work with non-d.used (to be safe, if I don't get any other read-only code, they would be a bit clearer. WDYT?
It doesn't look like `ListList` will return `null` here. Is this for debugging?
I think we should use a set to `null` for this instead of `_lastDomChildSibling`.
Should the parentheses be removed?
I think you need to change the name of the public API
This change seems unrelated to the fix.
This is not necessary, right?
this should go in `newNetBlockStatus`
The `let title = node.getAttribute('title') || !axe.commons.text.sanitize(title) );` is the correct value for the `labelVirtual` node.getAttribute('title')`.
this import is unused
this one was actually incorrect before
can we use `tf.IntegrationTest(t)`?
nitpick but I wonder if we have a better name for this one to match the version. `version` is already part of the type of the type of `version`, so we're still using `mver.GetVersion()`.
Should we add a test for this as well to be able to see if this can be merged upstream?
This is a bit scary, but I think the labeling should be used for debugging. Also, I think we should probably not do that.
This is not right. The first call was set to `user.go` and the second one was checked to be `!health.HealthReport{Live: false, Ready: false}` and the second one was `games.go`. The first call was not the second one.
This test is now done so that when the previous version is run, this test won't run on windows and is run on windows we should run on windows.
This should be `regexp`, not `end_orig`.
I believe these imports are unused.
We should be moving this into the context, but not in a separate call.
Can this be moved to a different commit.
This change looks good to me. The code is just checking if `serial > 0` and `configure_serial == serial` are not expected.
How does it behave like `DisableEndpointHostPrefix`? Does it make sense to also support the modeled host prefix if you want to support it?
I would prefer to see a constant for this.
Thanks for the PR, but would you mind adding a `again` entry to the `new`? We could probably move this one up one line up to its own?
Why is it required?
This is the only change required here.
How does this test work?
We should add this to `EntityInterface` instead of `EntityManagerInterface` right?
Nit, can you please use `<python::arg>`.
I think this makes more sense as a `const` on the previous line.
Why the 16 * 1024?
It might be worth pulling this out into a separate issue, e.g. `next(transaction.getSender(), ...).json` or something.
I would have put the Stream method here, so the method should return the "tootoo" type of the method.
I think this is fine, but I am fine with this change, but maybe it is ok to leave this in in a separate change?
why is this changed?
Can you elaborate a bit on the error message? I would think you want to be more specific about which case it could be null
Would be good to rename this to can_Partial_native_APP, to make this more clear.
This looks a bit odd to me. Would you be able to remove the `saveSettings` call from here too?
why remove this?
If we're not going to be sure we don't want to be calling `sendError` here, we probably don't need the `if` check anymore.
Can you use `toLowerCase(String, StringComparison)` from the `@param {Element}       = function(node) { return node.tagName; }`
It doesn't seem like this is the actual bug. Maybe it should be in a different PR?
Maybe the name `go.proto` is more clear?
Is the `handle` argument in this file still necessary?
The err check doesn't seem worth it.
Maybe it's worth checking that there's a default in the case that the runtime is set and it's set in the `MustEnablePulls`?
This change should be in the docs for the new project to be sure that the project was not found in project.
This should have an `flash.now` attribute instead of an `flash.now`
Please add the `using` and `//inheritdoc` fields to the `using` interface.
It might be better to just check for this, and check that it is in the next line.
should we check that `queryRelation` is not in `INTERSECTS` in the case of a null pointer?
Why do we need to keep all the errors here?
Style/MutableConstant: Freeze mutable objects assigned to constants.
This should have been added to the `[S]` key as well.
Do we also need this if we have a new API to add it?
@tgamblin Is UVarint represent something we can add here? I'm not sure what this does.
shouldn't this be `argument` instead of `pygment`?
the section in the spec seemed unnecessary
This can probably go in `init_client_requests` or something?
"... is the bad default for this one?
I'm not sure about this test. Is it something we should test to test in the past?
This should be `?`
Can you move this to where it's used?
Does this need to be in the debug mode?
Is this the right place to add it? I think that we should remove it, and maybe in a separate change.
nit: since you changed the logic of this method here, I think this check is unnecessary.
I don't understand this fix, the first part of the `continue` branch is correct.
This should be -1, not -16.
I think I missed one `models/wTimeoutMS` :smile:
why not return 0 here?
Do we need this or can it be an error if it's an integer?
We don't need the lock anymore.
should we use `proto` here?
The result can be removed.
Why did you change this?
I think you want `Microsoft.Naming` to be consistent with the other fields, so I'd like to keep this consistent with the other attributes and use the other methods to make this easier to follow.
Should we also check for `xwayland_server == NULL`?
Huh, so a blank line between the two `//` imports?
this import should not be here.
The first two lines of this file (ifting) should be merged into a single closing bracket.
`--c$/` is not a valid argument name, can you remove it as it's not a net improvement? It's a no-go
As above, `@lm_from_params` can be deleted, no need to add `@token_file`
I think this is not a case where `allowOptionalMappings` is a `bool` that is used in other places (which is what the input does for the case), but I think it's worth noting how it would be a good idea if we would have to add `allowOptionalMappings` to these.
input parameters aren't supposed to be in the type anymore.
Why not just use `@Export` ?
We have an extra lock here. The `tcpServer` returned by this function is used by the `createTCPServer`.
This method should be called when `getById` is called.
This would mean that the type is empty.
I know this is the new code, but is `git rev-parse HEAD 2>/dev/null` still relevant to the version?
Can we remove this in `root`?
I am not sure if this should be done in this PR. The `setChange` method should do the trick.
What do you think about just using the err function instead of setting the env variable?
I would prefer to have only one value for the case that it's not connected with `viSpec`.
It is pretty unfortunate to have a counter here (and below).
@dvoytenko I'm curious why this line was added here, but it looks like it is doing the right thing to do here?
I think we should just pass `fn` to the constructor. That way we will have to add `__CHAR__` as a `const` for `const WCHAR`.
We should rename this to reflect that it is more readable
Can we use the `Time` function in the future?
This is not right. It's the scheme that the user has already added in the `User` in `Start`. It looks like the scheme should be added here.
why not use `break`?
Can you add a note about what this is doing? In this PR, let's not include the new api. It will make the intent easier to read.
rename to `#{_bullet}`
Rather than adding the old namespace, how about adding this one (and using the old one) the right one (which may be confusing to users) so that they're not used anywhere else. This is the right one. The same applies to `getElementReferenceException` below.
It looks like `putExtra` can be removed here (and below).
I'm not sure the exact same reasoning behind the _assert_ thing it is, as I don't know that there is a need for this, but we're probably fine doing this.
This should probably be ` HighVoltage::PagesController` since it's the most commonly used value
Can you remove this as well?
Should we also have access to the `Deployment` model here (since the `Trigger` field is `config.vision(...)`)?
Please use chain.config.client.Meta client-side. It also works as expected.
I think it would be better to just make this `GetViewModel`. That way all the `GetView` will be renamed.
I'm not sure it's the best way to check the result of a method like this. It's not really a deal breaker, but if the result of a directory was not found it should be a bug.
This change would cause NRE if it's not null, right? Can we make the check for `@FunctionalInterface` instead?
Can we add a new function for this to be configurable?
Is it worth adding `opt_searchAttempt` to `handle`?
Why do we allow `self.fuzzyval` to be an int?
@mfojtik this seems like an actual bug, should we add another one to verify that the previous implementation actually has `true`?
I was going to suggest this being changed to `Spec`, but I think that we can remove the whole point where this is being used?
Do these were internal?
Can we just pass this function instead ?
Nice. I think the best is to do is do it in `HTTPResponse.StatusCode` and then use that to check for the `StatusCode` error. I would suggest we add a default here `failed decoding EC2 Query response` to be more explicit and just return `false` when there is no error.
should be TEST_IMPLEMENTS_DELETE and TEST_IMPLEMENTS_CANCEL
Please put back the new back in this file.
Is it necessary for `r` to be used here? We could probably just remove it if not needed.
I think it would be better just to revert this file.
This should be `finest()`.
I'd say that this is a bug, not an issue in the test code : )
Why are you using this instead of doing it everywhere? I don't see why we are doing it for some reason.
Why do you keep `new NodeList<>()`? It seems to be unused.
This will fail if `experiments.util.default` contains multiple data types (the `site.Need action`s have an `_site.default`).
Wouldn't that affect all the `violation_data` implementations?
this should be '$USER_HOME/policy-library and '$USER_HOME/policy-library
Please use `from string interpolation` to reduce duplication, otherwise it will break existing posts.
We should not need the LOG in any way. The test is just testing the code from the X86 process.
Is this the case that hardcoded paths will be built in the future? If the vmware_fusion is still in the first place, we'll need to add more cases like this: - the `vagrant` directory to be consistent with the naming of the `VAGRANT_VMONE_DIRECTORY` - `VVV_RANT_VMONE_DIRECTORY` is not used. - If the vmware_fusion is a boolean, we might want to support a hardcoded path (which might be a path) - If the `vvagrant` directory is not explicitly explicitly set to
rm empty line
You can make these two `Queryforeign` and `Destroy` fields in this file too.
I think we may have to check the `default` error here. If we get an error, then it's an error that's passed to the message. Maybe just check for the error? Or maybe we should just make this `timeout` and `timeout` to be consistent with the message? Also, I think the `default` error may be better.
We can't call it if we need to configure any other node name.
Import packages with wildcard is not recommended. Could you please check your IDE please?
@smarterclayton do we want this?
Can we put this closer to the `version` method, so it doesn't have to go through `service` module?
This is a change, I'm not sure I agree about the change. I'm assuming it does not have the right fix for this, but is there any way to make the change that will be done?
This should probably be removed as well since we now always create the new one.
If we're going to add this, should it still be `compute_service_account`? Also, is it possible to have `--compute-service` set to `true` and `--compute-service` to set the flag to `true`?
This was changed in the previous PR.
we want to use <msg> @ISISPointerException
can this be done with an assert on the image?
Would it be more efficient to return an error here (and then check the whole function)?
Do we need the `ototools` here? Doesn't seem related to this pr, just wanted to confirm
why do you need this function? you can use calling it directly
why we need to pass `queue` to `addons`? I don't see any change to `addons`?
can we avoid using the context? or is there a way to test for an existing context here?
why is this being logged before it becomes error prone
This is a little confusing since the method returns a boolean and returns a boolean
I don't like that this function is called anywhere. Can we move it up to be a property in the form. The same here.
Use the new Ruby 1.9 hash syntax.
(style) line over 80 characters
@stephentoub I'm wondering why we should not have `microservice` not a null check.
Does this also need to be `options.runPoolDescribe()`?
Please remove this.
Can we move this to a different file so that it is clear what we need in the future?
to save a few of these into a struct, maybe `Comparing bare callable` or `comparison-with-callable` should be used only when a single callable is created.
This is a bit odd to have, but the `Array.hasDefault()` method already exist.
It's not necessary to specify `explain` in the generator since `CMakePackage` has the same effect, but if I'm wrong, this doesn't have to handle the `CMakePackage` case.
The root header is unintentional. I have no idea what to do about it.
Can you add `path` here too?
I'm not quite happy about making the `0` default to 0. I'm fine with this, but I'm not sure if it is possible to make the call `0` into its own set.
I think you meant `undefined` here.
Line is too long. [92/80]
I don't think this is needed.
If the client doesn't exist, I would just delete this method and add a new `map[string]` method to the type of `BaseElement`
Why are we not using this propertyID in other places?
I'm not sure this is correct. This can be `m->getNumAtoms() == 7`
The error is probably not an error, I think this one should be removed.
This is an API break. This is an API break, I think. It's not a problem if we want to add this to the `user.go` table as a user could pass the `links.deleted` value as an argument if the API break is in the API break.
I guess you mean "kwargs" ?
Why not use w.Flush from the request?
I would suggest `logger.Close()` (with `error`) instead of `err`
This was not a bug, since we don't use this to generate the file, but we should change it to `1`.
This is a change of behaviour behaviour. We should not log this in `skipskip` in the log message.
I think it's better to use a regex to check for `sync.go` instead of `sync.go` and avoid code duplication.
@jhipster/developers are we going to add these to the constants?
I think this change will cause a regression for `new CommentContentChangedEvent()` when `newIdChangedEvent()` is called.
This import seems unused.
Can we have another log statement for all cases of `FolderBranch`?
@franckc forgot to change this to (if that is what the `is` changed), it should change to a `permitted`. (It's a no-op, just as a note.
@mmaxim this is the main bug that we want to fix in the PR.
Why did you remove these ` OutputArgumentProcessor` changes? It seems to only be used in one place.
Remove empty line?
do you need to add the parent parent here as well? it will be used for the same query.
Instead of using wlr_signal_emit_safe can we use wlr_event_present instead of calling wlr_output_event_present and assign the output to the same string?
moved this to controller class too, so it doesn't matter if anything is worth it
Should we rename this to ConnectionStartStartStart?
Is this line correct?
this should be alphabetically ordered
I think you are missing a check for the error here?
"Chromium-based browser" should be "Chromium-based browser." <msg> "
(style) trailing whitespace
Do we need to check for `self.semantic_roi_extractor`?
I'm curious why these changes are needed
This file should be in include.h
I'm curious how much this is going to work without any `-1`?
Probably worth a log to move this up, since there's already a few lines below the error code below.
@sparrowDom Is it possible that `getNumTautomerCatalog` will return `null` in the loop instead of `getNumTautomerTransforms` since the only usage of `getNumTautomerCatalog` is in `X-x-y` ?
Maybe use `IntPtr` instead?
What about `if (ps.removeHydrides)`?
Maybe "Can time" should be a better message?
This is a `event.client` that can be removed.
Please don't change the doc, I'd like to keep track of what it does, just to keep track of your change.
If it's not used anymore, we can remove it.
I'm not sure if this is the right way to fix this, but I think I'd prefer to have this logic at the top of the file, rather than making `cls.iteritems()` return a dict, since it will always have a copy of the __gestures dictionary. But I guess it would be useful to add an `__gestures` arg to all of this.
do we want to make this change to make it more explicit, or should it be in the `pip install` block?
Is there any way to avoid setting this attribute to the current user? We could probably move it to a single `use_session_finished`, as that would affect the other creation of `sess_manager` and `sess_manager`
I'm not sure if this is the right fix. If the app uses this component to allow for the app that doesn't have the same component, it could just be a one-line task. This will break any existing code.
nit: maybe move this up, so it's clearer that the previous version is the same than the other one.
I know you didn't change the types of `ASTAnyTypeDeclaration` but I'd rather have a test in that order to verify that the types of `ASTAnyTypeDeclaration` are all the first and they're all being used. Can we do that instead, please?
Why did you need this? There aren't much noise in go code, but I don't see it being used.
We should make this internal, it should be implemented to be able to expose the listener as well, and not the listener. If we're going to make the listener a bit more explicit.
`close(keymap_fd, 0)`, this is a bit redundant.
Should this be `clientMaxSendMsgSize`?
Block has too many lines. [26/25]
The `_` prefix here is not correct, because `(line 1)` is `(line 2)` (not `1`).
remove this empty line
Could you please update the tests to cover the case where there is a file with this change?
I would prefer to see some more stuff like this before / after/after what it is about.
Please revert all of these to be consistent with the rest of the code.
what is the default value for?
Why do we need to setSupportActionBar() nullable here? Why do we need to set it on top of the method?
Can you remove this?
Can we also remove the `s.handler` here?
This was just an out bug I found in 2.3, but it was only used for one group that was introduced in 3.3+ (not an `create_create_re`) so I added it to the `create_rely_create_rely` field to do that.
This is the only place where we could return the wrong thing. We'll still need to fix the tests for this.
It seems that this needs to be an unrelated change.
`showDeleteAttachment` doesn't use the `attachment` key. It can be removed if we're not using it outside of the `showDeleteAttachment()` function.
I think we should not have this as well... it seems that the constructor is not called, so the first argument is unnecessary.
I think this is going to need to be a struct, not just a struct. This should have `docker_*`, as you might have `*`, as you're using it for other `*`, as you've done here, and the `DockerLabels` is only used in `build-system/image-image-image-run.go`.
The same here.
Should we have a `return;` here?
Why is this import required?
I think it would be better to add `break;` here to make the method easier to grok.
I think this should be moved to `cniNet`
I think there is also a race condition on the `JsonQueryConverter` field, but not used in `getQueryConverter`
this should be `getBackendConfig()`
I know this doesn't work with the `value` value, but it looks like it was done to have it before...
Should this be in the `openTop` class?
Should we have a method that takes an argument to `__call__`?
should we return if !success || !registerEvent(event, node)) {
Maybe also add the TODO below to say that this is only about testing for all platforms?
I think this file is unused.
Can we remove the param from the struct?
Is it not possible to avoid the `JsonRpcMethod` in order to avoid the `super()` on all platforms (i.e., `super()`)?
This change should be reverted.
This doesn't look like a big deal.
Please rename this to `yaml`, it's a bit confusing now, but let's rename it to `ConfigKeyVersion`
Can we remove this as well?
If you have the first value, you could use `ASSERT_EQ (size_count, response.get_child ("blocks")` instead.
It's not an issue, but we're not doing this now, so just keeping a function that returns the correct object.
Can you also make this a local variable and not use an enum?
We may want to rename the config version to reflect that change.
This file should have been deleted
This is not the best way to go about this code. The user will be "-" if the user is still a string and therefore it is not the "-".
I have a concern about this change. If we can't change this to `fs.argv`. I would prefer to keep the original `fs.argv` as an arg, as that would break.
Why are you converting this to an `int`?
@inva-msften can you explain why this change is here? I thought we had to add `@current_user` because of the email
Not needed, it can be replaced with `from typing import Optional`.
Can you please move this import below the `github.com/...` package?
This method doesn't seem to return anything.
I'm not sure about adding a default implementation of `self._solid_config` to this set, so I guess you can just do `self._solid_config.resources.get("("")`, and if it's not, then the `--solid-config` implementation will return `None` as the default. (In general, you can't use `self.resources._asdict()`)
You can use it `role warnings` to make `roleutin` not return early if `role warnings` is a collection of some sort of absolute content.
why was this changed? is this just because it looks like a user has already added a `ories-enabled` flag?
Do we need this check?
This looks like it can stay.
@franckc forgot to remove this
are we removing this file from this file?
this file should not be included in this PR
Shouldn't this be `final`?
I'm curious why we were just using `momentum_config` in `custom_imports`.
use a closing brace instead of a closing parenthesis
Why does this need to be public?
What's the reason to not use struct here? That seems odd to me. I'm not sure we should add a struct to the client, since we have already used it elsewhere.
Why this include?
Why was this deleted?
Probably you can do a `pathname` and then pass in the `location` directly to the function `pathname`.
Why not just pass in the `ReadWorkloadManifest` rather than using the `ReadWorkDatabase` here?
The way I understand this was, we are now calling `addResponse` now, but I do not see any reason to keep them.
Not sure we need to change the `del` var, but also the var name `augvar += 1`
We could also pass `SessionDto` and `Session stats` to make sure that we don't use the existing `.ision` file
I would use `c.RunOfctlCmd` here.
should we make this configurable?
why not remove this one?
this should go to `mitchellh/go-homedir`.
Shouldn't this be a function to replace the `ovsctlClient` with a constant?
I'm not really sure why the function does this.
You are missing a comma here
This is wrong - `CompilerServices` is the correct name for the `offer` - and `offer` - but is not the correct name for the thread.
This should be `name` not `0`.
Since the original code used `Number.MAX_SAFE_INTEGER`, I think we can keep it as `memcpy3p` for now.
This is not the right fix. We don't want to modify the API for this PR. We should be doing that as well.
Maybe we should add this to `lib/utils` too?
Is there a need for a check to make sure the client is available, or does it already have an error condition?
What is the reason for the new side-effects?
The `wait` method does not throw an exception, so why not `1`?
I would prefer to return `int` rather than `int` for consistency.
Is this still needed?
I would consider renaming `path(zone, "-")` to `path(value, "-")`. Also, not really a blocker. Maybe `path(value)`.
I'd like to make sure that all the tests pass in the `expect` branch were not in the `finally` block
We do not need the -h here and below unless we do not write.
Please use explodedURI[1] instead of explodedURI[1]
This is not correct, the previous code didn't work without `@group_level`.
`auto_type_stride` is redundant here.
This is going to add any type information for the `name` type.
Should we initialize ArraySegment.ArraySegment here?
I'm not a fan of adding new dependency in `io.prestosql.plugin.STdk.open_domain`
Please don't update copyright year
I'd rather we add a new method `ActiveRecordRecord::redirect_NAME()` to the interface (e.g. `ActiveRecordRecord::redirect()`).
I don't think this change should be here, we should also check the `Database convertToDatabase` if the first `maxType` contains `maxType`, `maxType` will get the value.
Please add a space after `$` here and in the next line.
I'd probably go for the "UoE" class here, and add an assertion about that here too.
@tnozicka do we know why this isn't the case?
I believe this was a bug, @marcramforce @saghul1972 @smarterclayton now I have been getting rid of this change.
Can you put this above the `global` below?
If you use a `array_key_exists()` method, the `record()` function will not return null. So this should be a `isset`
How about we make the call sites static and import from `compat.numpy.numpy`, then do it everywhere else? It looks like it might not be necessary.
@chicm-ms @pabloem - I think it's safe to remove the `v(.+` here.
I'm curious, what would be the difference between `structstruct` and `The path`
I've changed the value of the value to `status` but I guess it's the type of this value.
Is this used anywhere?
It seems like we should just check for `cd` here, instead of having a default value in `test`?
Why are these no longer relevant?
Why change this? The default value will be `*float32` anyway.
should we add a column that says "start_date"?
This was a bug.
Just noticed, this works on python 2.0.0? Should it be a single "root-import"?
Since we have `errors.Error` already, let's not use `errors.Error` in these cases.
We should leave a trailing comma, we should add a trailing comma here.
@michaelkuhn @tgamblin Do you remember why this change was here?
Looks like this file has been moved up here.
Why not put this in `componentApplicationBuilder` instead of adding a new `logStartupInfo` ?
I think this should actually just be added to `opt_float_param`.
This might be a breaking change. I would say something like `lower_bound()` and `lower_bound()` should be in the next line
Is this message really "the DB now"? It is the message "only" which I think is what is failing.
I think `@file` could be `@Restricted(stats.py defines ...)`
No need to expose this in pyramid.py, and it should be in pyramid.py.
nit: `//` should be on the previous line.
Can you add a docstring for `dependency.init()`?
this will also be changed once the feature failed, right?
why is this line required?
Do we want to call this method in RequestParsingData's definition? I think it's a better idea to call RequestParsingData.PlaintextAbsoluteUri() directly
`config` is an `web` object.
Was this a bug? The `.pipe.yaml` was left in from some other PR, but I can't remember why.
@cramforce PTAL, why do we use `DeleteOnClose` here?
@smarterclayton do you know why we are not using the `x` in the config? I think we could make this conditional, but I'm pretty concerned that we can't rely on `#build` in the config.
I'm surprised there isn't one of the other uses to determine if they were the same...
Is this supposed to be handled by `python_as_string`?
I thought we added a property to the config for this config?
@jmhooper @rhymes I made this change because I was getting the `APPVEYOR_AGENTS` flag to be able to determine the config when the config is `ProfileProfile`, but I'm not a huge fan of the `ProfileProfile` and not be `ProfileProfile`. Is that going to work?
nit: maybe put in alphabetical order.
Aren't we trying to reduce the number of operations on the field itself and have it return aarehouse? I can imagine that the output of an input row will be printed as a field and it will be printed as a field.
I think this change is unnecessary
We should probably check both here and in the if/else blocks below
The `pos` property should have a `address_string` as well.
It'd be great if we could log these logs at the beginning of the log level.
The name `merge` is confusing now, since it is a bit confusing to people who are trying to get the name into the DB.
This looks like something that's not needed anymore?
Do not re-render in the list
I think it's better to use `URL` here and set `index.html` directly.
I think we can remove the `Assert.NotNull` test now that `headers["custom"]` is not set.
Can't the `sizeSource` and `sizeSource` be passed around?
Nit. I think you meant `ApplicationError`. I think the ` Exception Exception` is redundant here.
Maybe use `String.format` for public key.
Can you add this as `go-sqlite3` to the top of the file so it's clear it's not doing anything?
I think that this is fine too.
It's not immediately clear to me why this change is here. The idea is that if anyone else calls that `x-tar` or `x-mk` they are using different names (as in the same file) they are using this same template (which is why I'm not totally sure if it would be good to change your data and let me know if I should have some thought about what it was before, or if you could add another one in the future). I'm not 100% sure what your intent is to add these files, but if you are to make them up - this is
Could this be a function in `visibleDeploymentConfigTemplates`?
the image_tag 'https://orcid.org/"
Shouldn't this be `str(str)`?
This should be reverted.
I think we're missing a `auto transaction` statement here.
is there a reason this isn't using `MMFF::`? (Or did you remove the `create` function call?)
Can we add a `order` to the levs list as well to avoid having a hard-coded value?
This should be `prime-maintain` since this isn't a name change or any other name.
I think we can remove this. It's not used by other packages
I think we should be consistent and use the `Enable` constant in the name rather than an internal name.
Can you explain why you need to include `scss` here? There shouldn't be any usages of `plet` to store the `plet` in the variable name. Also, I would suggest `plet` to make sure we don't have to do this for now.
This is wrong and will be removed on the previous ifdef. This will avoid calling `remote_hosts` after the remote is called.
Metrics/LineLength: Line is too long. [83/80]
There should be a typo in the name. "yaml")
Line is too long. [98/80]
This is not part of the pull-req...
Why do we need a `list` here? The `UserList` is a reference of `User`, and `UserList` is not a `list`.
should we make this a try/except?
Why not use `Collections.emptyMap()`?
Let's change it to "RetrySettings"
Shouldn't we pass the `SafeEnable` interface as a parameter instead of a reference?
please don't use linting but it looks like this file is only used for the global variable, it's probably not needed.
This is not needed.
I would not change it to `callTChannel`. It would also remove `callTChannel` from `CreateDispatcherForattrs`
could we rename this function to `debug`?
This isn't necessary as the rest of `str` function returns `str(pattern)`.
Is there any chance that the function will be called in the user facing time? I see this being called, but the user's time.
this seems unnecessary
This is wrong. The previous flush was done for flush.
I don't think you want to change the default value here.
What happens if the list is None?
You can get the test to run `t.Fatal() {}` if `fileAll` already exists.
I don't think it is correct to make this message a bit more specific. It might be good to have `value` and return a String.
shouldn't this be `Collections.emptyMap()`?
nit: can you keep the old method as well? The old one is already a long, right?
I think the old name was clearer. Maybe `localProjectAppNames []int`?
@wachterjohannes This is the place where we are using `Array#Block` as a separate function which is set to `width/height` but I don't know if it is the right choice to set to `null` if it doesn't.
Can we put the txids into the tx?
what if `collect_perf_data` sets more than one of `#okehokeh`?
I'd prefer a different name for the flag (i.e. `resume_from_failure`). But I think it's fine to just add a default value to the `run`.
let's avoid using python-mock, we don't need to import the stock file for this
What does this line do?
This seems unused.
Should there be an empty `*` here?
I think it's better to move this block (and the others), and have the method the `Preconditions.IsNullOrEmpty(vol.id)` method call.
This was the wrong issue, but the first time it was actually a general version of 2, so I removed it.
this is still needed
Is this change necessary? I assume it looks like the `mmdet.method` is no longer a `_test_pytest.py` file for some reason
Just checking, is `opus` now unused now?
I don't think you want to use this change. The distributed aggregation logic should be able to generate this, as there's no way to specify what is already the default.
This will be a lot of work. I'll just move it to the `if`s.
Why is this not initcodes?
Why is this being removed? The only option you made is to pass the URL into the registry.
I would move it to the `exports` module.
Why did you change this?
This test was working before but I am not sure we should change it. It was a bad idea though!
Layout/MultilineOperationIndentation: Use 2 (not 4) spaces for indentation.
Why not just remove the method signature?
I believe the "nil is nil" check here might be too late if there are only two options: - `nil: nil` (and `allow_nil`) - `allow_nil: true` (because it's the same, so I think the `invite?` can be done in `scheduled_for_deactivation?` method. - `ccxt` can be non-nullable. - `ccxt` can also be used in the `before_save` method - `scheduled_for_deactivation?`
I'd probably just make this a helper rather than a one-liner.
This should be an `_memory` instead of a `_`
I believe this should just be `(panic: auth, "Won", "[CLY]_push_open", "[CLY]_push_action, auth, "Lost", "Won", "[["Lost", "won", "[["Lost", "won", "won", "[CLY]_push_action"]])`
I'd rather have this in a static field, but it seems like it might be a good way to make it more specific.
I would use the `112` package here to get the test to check for v1.
Style/MutableConstant: Freeze mutable objects assigned to constants.
I'm not sure that this is necessary. `setFlags` will be called when the `Promise.getClient()` does not set the `null` value, so `setFlags` should be the correct value to use to set it.
I know this works but maybe it's probably fine to add it to `ctx.Handle` so it's clear the version of models are in `modules.Get`
I don't think we need the `$this->addCacheHeaders()` call at all.
Why do we want to log it? Is that a common pattern that has a before/after somewhere?
Line is too long. [96/80]
I'd be in favor of adding a new line `F.Flow.Match` that we would have to use, and then just call `viewer.Cookie` here.
Do you want to handle this case?
This class does not belong here. I don't see this used anywhere.
Should we just override the path from `server/server.go` to get this value from the config?
What's the purpose of this change?
The old code was actually not able to call the old one, so it seems like this code should always return a default. It seems to me that the old one would have been `0` and I guess it was not.
"new" -> "new"
What happens if we just used this as a local on Travis? How do you feel about moving the environment inside a local package?
no need to use the same reference to the global var
Why does the username do the trick?
I assume this is now in the first group?
Should be `@deprecated use {@link TimeTracker}`
I'm not sure about the change here, as this is a change from this PR, I'll keep track of this to a separate change in a later PR (I think we're good about to make sure it is correct).
Why not set `spaceLock = true;` here?
I'm still not sure if it's the best idea to do this, but I'm not sure whether there's something in the wrong place. What is the reason for that?
`address` should be `nil`
This was a mistake.
Can we move it to a location? It's a bit confusing to have a strange interface than a copy/paste of ByteSink. And I would suggest that it would be a good place to use that in the future.
You should use pytest's `issue` function.
Is this file still necessary for this PR?
This test doesn't seem to pass. I don't see a test that ensures that we're using this anywhere else (which I think is the right change).
This is not a fix, but a small regression.
I think you can remove this line
This was a bad addition, I'm just wondering... why do we need a second function here? I guess this is not necessary?
`assert 'test_data'` would work here? I would have expected it, but not sure if it is the best way to fix it.
There is no way to get this from the docs. This is only the reason why we remove it from the other PR, but we don't need the `/connect/` directory anymore in the docs.
Do we want to be specific to this? I guess that we could just have a default here?
Why does it throw a close?
Can you check the Ctor specific numbers here?
The class should be renamed as well.
I think this import is unrelated.
why did this get added?
Doing this would be a better name, e.g. `toInfinispanData` or something more specific like that.
Is this test case unrelated to the change?
whats the reason for removing this?
This should be `const ServiceType = "wireguard"`
nice catch. The idea here is to define a default value in the list of `24`, but it's not a list of `48`, so I would just call it `var/index` to make it clear that it's only used in the first place.
is this a `rjust(2)` necessary?
The previous code was correct. The reason that `v4.signedHeaderVals` was `/` but not `/` was was was that we don't want to keep the old code around, so that `v4.signedHeaderVals` was only being invoked once.
This is not right. We have a `DataLoader` method which returns `null` and we have a nullptr value that doesn't need to be passed here, but in that case this function might be called with `(null)` or `(false)`. I believe the code can be deleted.
I'm not sure why this is needed. It does seem to be a big deal.
This looks a little strange to me, if you use another `getParent()` method, you may just call `getParent()` here.
I think this line was added for the bug, is it?
`Using` instead of `size_t` (or just `c`), would it be more efficient to just check `&subreq->buf->size += inbufs[i].len`?
Missing space after #.
print `cert_Rectangles` to keep the old version, and add `cert_Rectangles` to the new version.
If there's a potential NPE, it might be nice to also test this case? I don't see a good reason to use the constant here, as it's used for all code that is currently using their own custom table. Can you explain?
I think this will be more readable as `this.hot.isRtl()` is a boolean value, not a string.
I don't think this is necessary to send files to a directory. It seems to be used by the client and the directory is not the directory
This is not a good way, it is used only in the constructor
This is not required, but it's a problem for another PR.
`BaseId` is always the same string.
Why not use the `getUri` method from `getState`?
This should be changed to `six.io_time`
I don't understand this new check. Is there any particular reason we should use the new error? It looks like the new error can just return an error, so I have an explicit error that we can't see.
Can you move the `resolve_package_registry` call below the `build` function and move that logic there?
Can you add a line of whitespace and spaces here?
This is not the key that should be simplified...?
We have `2` now. Is that correct?
This should be `couldest` to reduce log messages, since we are using it outside the `if` statement.
@fpliger I think you want to keep the `host` here.
This is the only change I'm not sure. It's the right change. We want to allow it to be the first one (e.g. if the network is not a container or not), but we can't do that. It seems like it would be the only place to do this.
I would put this into the name.
`pip install` is not available for this PR. I think it would be best if you didn't add this.
this import should be removed
Can we avoid this, but we should also remove this.
I don't think this method should be deprecated. It's not used in this class, and it's not a good place.
`err` is never used in this function, please remove it.
This may break existing tests in Python.
Nit: The name of this test seems to be misleading.
If this is not needed, can we remove the null check?
IMO, `id` would be more appropriate here.
Why do you add this? If it's not needed, you can directly remove the empty line entirely.
@gianm - Is this being used?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why do you remove it?
I wonder why you deleted this?
We should be able to get rid of this import now.
Please keep goimports in the last group of imports.
Is this the right way to get this from the list of `local2` and `local2`? Or is it not that important to add this as a new list?
I don't think it's worth adding the extra lines.
I think this should just be `aa: %x\n", hash)` instead of `fmt.Printf("aa: %x\n", hash)` right away, it will just have the full `log.Trace`.
I think this is wrong, it may not be the exact same as postgres?
Please use `assertThat(encoder.matches("password")).isTrue()` instead.
While you're at it, I think you can just use `push_back` here.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Please add code for `leader.getState()` and `leader.getName()`.
is this still necessary? `node.getScope()` is a static constant
Is the save save enough for this to be available?
This should just be moved into the above "isWorkflowConditionFailedError" method
Is this a change in behavior?
The `#ifdef` should be removed here.
We should be able to remove these static functions in CRI-config.go.
This is a bit weird, we should do that in a future patch, if that's the case, we'll have to check for the user config and the shared config file, but if not we should do this, then we should move the logic to the `init()` function to `api-config.go` to the `kubernetesConfig` that is not possible
What is the use of NotEnoughBalanceFilter? I thought we had some sort of implementation of NotEnoughBalanceFilter?
Could be a `null` check to avoid the correct type (or any empty list) if it's just `null`.
If you're using this to be able to use the constant here, you may want to use an appropriate name. Also, the `is not None` check is a nice check to ensure the property name is not None or not.
I think we can move this up to `NamedNativeQueries`
Metrics/LineLength: Line is too long. [123/120]
Please change the name of the method
Is it a good idea to include a typedef here, since it has nothing to do with it?
The `key` is always `nil`, not `key`, so the key does not exist in the key by itself.
It might be a problem to move this up with the others, but this may lead to the implications of the change to the others.
I think we should just make the resync passed in here, and pass it to `init` instead.
Could you make it a const in the constructor and pass the pointer as an argument?
These lines are also unrelated to the commit.
Not for this PR, but why does the `genesis-file` option need to be updated to use `gengengenesis-file`?
I think it would be more consistent to have `function(obj, proto)` and `Object.setPrototypeOf` as an arg. This will allow you to return an empty string, and then throw an exception. Then you can just call `obj` with `@VisibleForTesting`.
We need to handle the errors here too, no?
So this looks like a bugfix
We're not using `inventory` in the file yet. We should probably not add new lines at all if we need it.
Shouldn't we just say `Slice`?
This was not related to the PR, but can you change to `Throwable`
Shouldn't `inputs` be a `Dataflow`, too?
Please, change to ` SECURITY`
I wonder if it would make sense to have a `IotxAddressLength defines` property on the `super` and then do it once and then set the value to `""`.
This is a bit weird, I'd like having a single `a` be defined somewhere, but I guess there is a better way to check for one-time-safety to get it?
Why not using a property directly? It makes the code cleaner as well.
can you rename this file to `725`?
I would still keep the change, that's where it does it.
why is the check needed?
This is the fix for the interface IConnectionHeartbeatTickFeature. We should add a `System.AspNetCore.Connections.Features` method that does the interface, not the interface
I am not convinced that this will work well as the other changes in the test code. This is an improvement.
"the alignment ofultimately depends on the alignment of the alignment ofultimately depends on the alignment of the alignment of the alignment of control flow control flow"
There is no need to have two `@Lucenefast`s, as it is used in the test file. The only way it doesn't matter is if you have an issue with the test file that was not in a separate file that does not include the `@Lucenefast` instance
nit: Can we have a method `parentDifficulty` to determine if the difficulty has a value that has the same length as the length of the parent?
We have to be very careful about how to set a default value to `None` in the URL and then doing it with `/foo/bar`. I think we should use the default value.
if len(latest_listen) > 0) is set, shouldn't the initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial initial value?
Please revert this change
I think we should probably use these at least as we discussed
Line is too long. [87/80]
I don't see any changes in this file?
We can use a more specific name. `DST crosss.httpChain`
Can you update the CLI CLI as well?
I don't understand the purpose of the `objectid` module here. If the `drivers` is just a module, then the `objectid` can be used in this file.
why not use default?
You should also specify a `Release` attribute if it is present.
Why not simply `import static junit.framework.TestCase.assertTrue;`?
Should we also add an expectation for the `cs: true` case? If I understand correctly, that's how you're trying to get the `o.shouldHibernate` as a non-blocking `cs` case.
Do we want to make the change in the UI private? I thought we already had an issue with `[Execute] == 'true'` and we didn't think we'll have to do the same in all the places where the code would have been changed.
Does this need a new migration?
I would suggest to use a constant here, and in the `try-except` block.
I think you should not be calling `GetMinimumGasPrice` here. It will result in a more "forEach" information, as that is the only usage that will be used in the most recent manner.
Can you revert formatting changes to header files?
nit: maybe worth adding a line before `String.hasPartitionPerSplit()` (or similar as above), as you know it's not part of your change ...
Nit: extra empty line changes
This should be moved to `train_action`.
@tgamblin This is a very bad idea. This seems like it should be moved into `addDeathSig`, but I think I missed that. This should also be done for `timeout`/`timeout.go` and then this will break any other tests.
Is there a better way to increase the connection flow controller (e.g. to a static field or `sess Session`)? Or `MaxConnectionWindowIncrease func(sess Session, delta int) bool`
Should we use the constant from `New Request` to check this is the proper error message?
This is a little awkward, since the `get` method is a `Attribute()` method, whereas in the `get()` method (which is why I was inlined).
Can we just pass the error here?
shouldn't this be `\r\s` instead of `\n`?
Not used, remove
Line is too long. [111/80]
Is this a BC break?
I think this should be an `filter_condition` variable in `pkg/extension-condition/extension.go`.
This will be removed in #1846
This is probably fine for now but I can't think of any reason that we can make this part of the internal function (and then it would be more correct to do it in the future)
is there a reason to have the two lines for each? I don't know if there would be any other way to check this.
I think this import is not intended.
@jridgewell This was added to allow us to remove configuring user-defined options from the server and not from the server.
Remove this empty line
Does this matter for other actions?
It might be worth adding some validation to the `WantSelf` interface that we've updated from `ErrWantSelf` to `WantSelf`. It might make sense to move this to `WantSelf` to be able to track down the existing closest. I'm not sure if we really want to keep this.
Why `nifi` and not `autoRowSize`?
It looks like you've already defined this in the `break` block, and it doesn't need the pylint.
Why does this need to be Code?
Let's rename this to `privately_visible_percentage` so it's clear what the plan means.
Maybe better to make this `final` and use the actual actual error message for all ops?
This is just a question, but do we need some kind of `_w3c` flag?
We have a strong preference to pass `fromfrom.data import _data` here, and pass the `self._data` as a `raise` object.
Why are we sure it's needed to be a refresh?
Does this need <msg> Does it? Looks like you're just trying to figure out what's causing it to do with a test failure...
Just curious why the change here, is `res` not needed?
The <msg> The `test` argument is unnecessary. It should be `.pth`
The `ChainID` is always used and the `ChainID` is used in the `ChainID`. Isn't it?
Should the logging message be logged as well? If the debug message is logged, the message should be logged.
I'd like <msg> remove this from the other PR, it's not needed for this patch.
I think that `Preconditions.checkArgument` should be split size with a split size that will fail when someone tries to create the plan.
nit: I know you can finally finally finally drop the else here and just do `file = new File(getClass().getResource("phoenicis.png").toExternalForm());`
Align the elements of a hash literal if they span more than one line.
I'm not sure it's safe to do this, but I don't think it's worth it to have a `*confirmation*` field on the `Query` instead.
what is the meaning of OrderedDict? I don't see any related to the changes in this file.
What does the `parent_nodes` format do in this case ?
why is this being removed?
Isn't this supposed to be the same as the version number of(*)? I would expect the version number to be the same as the one that does the same (and should be in that file for the same reason).
Why was this removed?
I am confused by this. There are two more places in our codebase that use `Captcha']['recaptcha_ . $newConfig['Captcha'][$key]))`. If you could use `empty()` as the variable, you could use `empty()`.
Should this have a `*` tag?
I think we also need to keep the old name. The new name doesn't seem to be the same as the new one.
could be done in debug logging
This makes it so that we can get rid of the `selection` now.
Since `_` is not in `Type` this is an instance of `#completeSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSubSub
Is this needed for backward compatibility?
Why is this test needed?
`isGlobal` is not enough, `dbName` is not a boolean.
Why not use the records with the data model?
I assume these globalize are needed in `HardwareEncoding` and `sessionStats` too?
I think this can be removed as it is not a part of the if block
Not needed, `path` will not be used.
We should add a note to the docs about the params in the constructor.
How about `compute_service_account` (or similar)? It's a bit odd to me that if a user doesn't specify an empty string, the `networkPattern` will have an empty string and the `compute_service_account` will have an empty string.
Line is too long. [85/80]
This is wrong. If you have the default value, you need to change the function signature to accept an argument.
We don't need to change the default value for marionette, we should just use `true` to make sure `firefox` attribute is true here.
Should the chain.Store be passed as an argument to the chain store?
I think we can just check that there's an error when the device name is empty here and when the cluster name is empty
Can we name this additional constant for consistency? Also what are the values for the Ask?
So, it's just for testing? Shouldn't we add a new property for this instead?
why this change?
why remove this?
We're now setting `null` to null?
I think you need an `Platform()` here?
why remove from './remove?
We should change the pattern here to be configurable in the `memoryCPULimitsEnabled` setting.
What's the purpose of this line?
This isn't needed since the `unsStatus()` function already gets called every time the event is created.
`Import` is used for `fetch-mock-jest` (which is only available in one place) and should be removed from the other `fetch-mock`, not from the other one (if not)
This is an API break. The `EndStreamReceived` call needs to be moved inside the `if` block.
Does this mean we'll not change a nonsense behavior? I would expect `~!]?` to be immutable and we can remove this.
nit: test the schema name?
why not use `map[string]string` here instead of adding a `map[string]string`?
This doesn't have to be in the list, it makes sense to hide it in the list. (same way, `app/typekit` doesn't exist)
I don't see where this property is used...
Is this not the good idea to log a warning? If so, I guess you should be able to get a warning and not ignore the behavior?
Can we put `js.local.getURI()` after this?
I think we need to update the description to reflect this.
This refactoring will fail because `Fatalf` is not called. It may also be good to have a testcase for this.
We should not change this since there is no more `path` in the constructor.
I know it is not clear to me what the purpose of the method is to use the enum ?
This is no longer a static field?
Is this going to get called when `mathMl` is set?
this is an example of a random random command, should we move to a common header to make sure this is not only in one package?
why are we removing this?
I would not expose `queue` and `queue.isSingleValued()` methods to be safe. The `queue` should only take `queue.isSameAs()` when a queue is created.
this is just a thought. do you think this is needed? if this is not used it should be a refactored method
Shouldn't this logic be removed?
if these tests are changed, these tests should still be reversed
The `$balance` variable must be `$xxx` (and the next line) to align with the rest of the code.
I don't think there's any benefit to using the `kind` parameter.
I'm not sure why this is being logged (and when I had been working) and I didn't notice the build working. If you look at the issue, then I'm going to ask if this is still something the build failed.
this is a bit hard to read, but the default should be `i` (as it's a reference, not `get_*`). So the code would be a little clearer.
why did this go up to `node_classes`?
this was the bug. If dask is False, the value is 'False' in dask.
I think I'll need a better way to fix this. <msg> Maybe I am wrong. I can imagine something like "geting" or something else in which case you can use "geting" or "geting", but the `error` function will not have to change in this PR. Also, I'm pretty sure this method is really not the best idea.
The `30` should be in all of the helpers as well, so it is not necessary to change the config value.
Do we need to check that the method is set to `true`?
Is this a good idea? Should it be a separate function?
Is the extra check now redundant here?
I don't think we need to do anything here, because `getInstance` may be a List object.
shouldn't this be a listTagsEnabled?
Does this still need to be an `omitempty`?
I think we should have a PR to add this in `before_experimental_cloud` as a new field to `before_experimental_ROOT` so that it doesn't get added in the `install` API.
I believe this should be `list<array>', 'array', 'size'=>'bool`
I believe the import is unused
This could be the one on line 435, and then be replaced with `#append("")`
We should check if there're already a `cgroups2` field in the `if` condition.
Not sure what this does, if you wanted to pass the transport directly into the `deep_clone` method
If the Int field is set to 0, this field will be `True`.
Why do we need an `campaignSource` here instead of a new one?
Should this be a constant somewhere?
We don't have to pass a `readPreference` object here as a field in the `CHANGE_STREAM_OPTIONS`.
why do we need this? (no path in the UI?)
What does "Removed" mean here? Isn't "the object should not be disposed"?
Unnecessary empty lines.
This method should have a `confirm_field` function.
It's a bit odd to use a constant here - if there's anything else that takes a length and returns it - how about just a message that does the length and the number of bytes?
This is a bug, if `close_timer.Start()` throws an exception, we won't need to check `if (disable_timer.Disable() == 58 || (disable_timer.Disable()))`. In the case of an empty slice, I suggest `if (enable_timer.Start();`
I think this can be removed now, since we now know the type is `get(pos).type()`.
There is also an explicit function for this function. We do not want this to be necessary.
I would use 0 as the length value.
This needs to check if a user has the table name and they're not using the state. Also, you can check if the user has the role.admin? (but you can do that without having to check if the role is not the user
These three lines can be removed if you are working on the same lines as the `@templates` statement below.
Is this a regression? I'm guessing this isn't a useful thing, but it's a reasonable approach to do it like that. It should be possible to use a flag in your pull request.
Please revert this change.
This check is not needed here, it doesn't seem to check for `a` at all, if `reopen` is not called by `STDERR_FILE` and it is never called by `a`
Can we make this more explicit as `Grating cheese`? I don't see any benefit to using `Melting cheese` anywhere and I don't see any benefit from using it in this PR, as I can tell from this PR if you need to create them
If it is `isinstance` then you can remove the "fix" of type
why do we need to hard-code this function?
Why is this in `borg.mule.runtime.module.config.constants.constants` rather than just in the `else` branch?
Maybe this should be set_format_format and set_format_format_format to be consistent with the rest of the package?
Should this be called `T extends WebElement>` or is it more specific?
Why this one?
is this used anywhere?
I think backend should be None. And I'm not sure why backend is required here.
Is this used anywhere?
This error is being printed on line 562.
In theory, we need this number back to the default step in the test. Will need to change.
Could just be `a peerTrackerAttestor struct {`
Please remove this line.
Why not also add the `handle` param to the parameter, to the function?
Could we use `kubernetes.go` here, or is there a better place for this?
The indentation looks off here.
Should probably be `TODO` here as the line above has a pump id.
The code style is a little confusing now and can be read only if it's `Chunk`.
@chenglin I don't like this change, but this should be `.RequirementsMetCondition`
What do you think about moving these to a constant?
`if a := range actions` -> `if a := range actions`
Why is this necessary?
Shouldn't we have this in the `AutoAutoArgumentArgument` too?
Please add a license header to the license header
I don't know what the difference was here.
This spec doesn't check that the `response.status` is in the `.to` file yet.
Why not make a helper?
Why is this change necessary? I think this is an improvement because of the change.
Why not `addSampleImportTransformer`
this import seems unused
Should this be `ServiceAccount *string `json:"serviceAccount,omitempty"`?
I don't like this - you don't want to set anything here.
Please don't remove the year in this patch.
Please make it not return the underlying map.
this is not the right fix
We could have removed the whole object here, but I'm not sure what it means.
@wenxplorer for the deprecation warning here, the `--version` flag isn't super descriptive here.
I don't like the idea of having this test as a key here.
We should create the logger to log.waitNewBlock() and make sure it gets used.
Is the default version of `1.05` a `-1.05`?
Why is the `gasLimit` being used here? I think you can change it here.
Can this be moved to after line 162?
Please put this on the next line
this is a public API so you should not remove public API
I'm not sure how I feel about this - I'd be fine with just making this a `attr_writer` method and avoid having a single block of code like this - especially if it's something I can imagine we could consider making this a `attr_writer =configuration, :world)` - in which case, `attr_writer =configuration, :world` will be the only one whereas you would be `0`, but you'd have an `attrattr_writer` which is not a `world`
this should be `var will not work for anyone who may have is not working correctly, so you don't need the `||` here
I am not sure about this - it would be good to know why I suggested changing this to the product type. This would mean the `deprecated_case` would be a "real" attribute in the database, not a "real" attribute.
Wouldn't it be better if we just return an error?
This file is not used.
The original error was lost here: we have already checked that this code does not get read anywhere.
If the test failed, does it mean that `strings.Contains(ty, "text/plain")` won't be set as a string?
Can we change the name to be something simple, e.g. `OpenstackRegion`?
It'd be nice if we could use something more meaningful like `\\d[0-9] -2]` rather than something like `\\b[0-5]?\\d[0-3]` (the `[0-5]?\\d]` might be clearer in the future)
why is this being added?
Rails/FindEach: Use find_connection instead of each.
What do you think about adding a private method to the Guiceice that will allow this method to be modified to get the exact same instances, and add the code to the `fulinvoke` method. Then it would be more efficient to have a method that returns a data structure to have the actual data structure. The new way is to use this class.
We need to be careful about what we're trying to do. What I would do is say here: `(casting, "Unable to get the Node with the nodeHostName", hostName)`. But the `url` is used for, not just the `url` label.
Should we add this to the controller migration?
I assume this is now just to stay consistent with the other "uri" command, but we don't need it. I'd like to have it as part of the "Status" part as to why it doesn't have a global option.
This is just to be able to remove the `trigger_error` method in the base class, I think it should be fine to remove.
What's the point of this?
If the test was to be run as a test for the case where the test passes, then it was removed from the test. In this case, the test passes on line 427, not on line 427. The test passes on line 475. I'd be tempted with this to fix the test, if we had any test coverage for that test.
Nit: This is a breaking change - I think the `!` is not needed here.
I wonder if we should throw a `TimeDateTime.from()` when the service is not found.
Need to remove the `[a-z][a-zA-Z0-9]+` line here
It would be better to just remove this line if it's not required.
Is this file needed?
why this change? what is the `updateNotificationService` in the constructor?
shouldn't we add a `email` param to `admin@example` and `aggregate` endpoints here?
Please add this to the interface.
Why is this needed ?
Please put this into a new line, otherwise it's clear what you need.
I think we also need a check for `AudioBitDepth` here
Why did you remove the console?
Can we have a helper in which we don't use the second `KeyValueSpan`? Or we should have a test case for that? `of this.RecordMeasurement` would be a good practice.
I'm not sure this method is needed anymore. It doesn't seem to match the code in master.
This can be `tabUtils.is_ca`
Would it make sense to use `DEFAULT_DEFAULT_wind` here?
This isn't related to your change, but I would say that it should be in `createElement`. This is a breaking change, so I would like to move this outside of the package.
Did the `continue` call not include `defer_continue == 1` in this case?
I'm not sure how this is supposed to work, you have to move the logic to a file and have it in the next line?
We probably want <msg> I think this was added to test the `aston` command.
Should this be a try/catch and/or use `map[string]string`?
This is a bit unfortunate, but I wonder if it's an unrelated change, and should not be necessary if the `MinSize` is the only buffer.
`pool_t *value` should go first, and then go after the next line.
Nitpick: This is a little inconsistent as `TimeWorkspace` and `TimeWorkspace` can be reenabled by itself being reenabled by itself. We should be doing `!this.startWorkspace_.setResizesEnabled(false);` so that we're not not actually reenabled at the end of the drag.
I'd love it if we could get rid of the `processBuilder` variable and have it only be there in this function rather than at the `if` statement.
Maybe it makes sense to have these 2 values more clear? `kube_Proto remotes` is too much for a long time.
Can you remove the bitRead method from the interface?
If I understand correctly, the name is not very useful. I would use `isSolved` (and the name `classOrInterfaceType`). I would use `String.format` (or similar).
I don't think this is correct. It's just a try-except-except-except, but this is probably more clearly something we want to do in the test, and I can't believe that it is correct.
I know it might be missing something, but how can we return here if the Realm already exists and then have the Realm already exists?
`createGrid` is still used in `CommonResource` right? Should we use it instead?
Can we add a note about this in SCMv2?
This is a breaking change, we should be consistent in the rest of the code
The default should be `false`, no?
why do we need to include the check in `test_files`?
This doesn't need the `ExternalSchemaName` check. Also, please use `conflicts_` instead.
nit: this is not related to this PR.
Since this is an API break, I don't think we need to make it public.
`should eq` is a typo
You might want to use `headers_tag` to avoid the need for a second parameter, since `topic_tag` only works if an array is not available.
Should be `string[]`
I'd prefer to avoid the `time.Duration(val)` here, as this will be used in other places instead of the time.
Why not just check if `attr` is str?
Why did you change this to false?
only a GH msg msg msg is a great method to do so on the DB we have to do so
@bparees I added this as a separate PR to confirm that it doesn't affect any other uses of `Operator` and `OperatorContains` types. I have the feeling that the correct operator is the right choice, but this should be the case (and the case in the test suite)
These should stay as they are not used.
Does this need the `TaskQueue` and `Kind` if `TaskQueue` were provided?
Does this have to be a separate `AccessList`? It doesn't look like there's already a constructor argument.
Is there some way to tell whether this is needed when the `request` listener is configured, or should it be the correct listener here?
Wouldn't this result in an error if the flow is activeExecutors?
What about putting this behind `protected-access` in the first place, so that you don't have to make this change here?
This is unrelated to the current change, but it seems like it should be a separate patch if we want to add a note note about this.
Why do we need these columns on `Ratio_to`? Seems like they're just an index on `Ratio_to` and ` classpath`
I would call this `client_connection_http`.
Why do we need this type?
I don't think it's necessary to specify contract [0..1]
Please don't add the following to the following fields and make them both available (i.e. for each component)
Why does this need to be a `var` and not a `Dictionary` ?
It would be nice to have some test cases that I have to make this change. This is just a cleanup change that I have, but maybe not too much of a bug in the code :)
Do not use it without any other predicate method. You can also write `session[:coupon] = coupon.new(params[:id])`
This is a bug fix. I'll merge.
I don't see where this was added, it was added to the doc, but it is still used in the doc.
I guess that we are doing this before merging.
This will fail in the case of `-1`... should be `-2` as well.
I think that this should be a bit more specific, say, if the delimiterIndex can't be -1, the hook hook hook will also be in lowerDomain.
can you add an example here like in `Endpoint`?
The profile response for these days is that it may be useful to use a global for these. Instead, use `this::key` to determine which user is the first.
This is now a leftover from the previous PR
What happens if `allowed == nil`?
why this change? The project is not calling `ReadBatch` in that function.
I think `part` is unnecessary here.
Is the indentation on this line correct? Can you explain what the best way to do is?
Why does this need to be a const?
Is this intentional, because `_standardTypeCount` is only ever used to determine this in the first place? I can't seem to remember why I was able to change it.
We could move this to the top of the file (see the one that checks that `ProxyListener` was created) but it seems to me that we don't need that `netListenerELBV2`
This is the only change needed here. I think you can just do `time.Now().Unix()`
@scheibelp is this a breaking change?
This will run only for a single release, so I think we can put this in a single location, not just for the next PR.
I think we also need the "real" prefix for the "real" case.
Please avoid this import
Do we need to expectation that `Byipt` contains the given `receipt` key?
why removing this?
I believe we need a similar exception for ` PARAMETERof`
The new code is a bit confusing, why not let this be part of a separate file for each `#include` block of files?
I don't like the `.PACKAGING` class but I don't think this is necessary any more
Should we use a more meaningful error message here?
Please let me know if this doesn't affect Saleor's production code.
I would move this code to the `bearer_token_file` file. I can only think of a better name.
I don't see any usages of `api_fixtures` in this PR. Are we sure that's not the case?
`String.prototype` is not supported in the `String`
I'm not sure we should handle the error here, or if the device matching is empty, we don't care.
Does this make it work with our current `s3`?
@nmittler - Is this file meant for some kind of Version? I would expect it to be an entire file in the main file that has the original Version.
I don't think we should do it for this change. The code here only returns a boolean, and it should never happen. So, I think you'll need to add the `excerpt` and a call to `editLink`.
Is this used anywhere?
this shouldnt be changed. We can't use the `get` method without having a `null` check on the controller for its use.
Do we want to make sure the topic is automatically configured and doesn't use the `Topic` topic?
There should be a test case for the `binary_type` that does the `sys.stderr.write` call, not the `sys.stderr.write`.
Shouldn't this be debug instead of debug?
I would make this a global var rather than a global var.
This file is also not needed.
I'd prefer to keep these constants here and add `[style]` to these functions for `ctaLinkExternal` types (not just `defaultProps`) so that `defaultProps` is not a list of attributes.
Same here, if I'm reading this with NRE I think we should not make `Debug.Assert` nullable here but if it isn't, then `Debug.Assert` will return null. We will need to fix it.
Can you add a docblock here?
Why not just check for `return qntCapacity)`?
Shouldn't we check that the content is in the message in the test case? Otherwise it will fail.
I think this function should be renamed to `localstore`, not the call to `localstoreState`
This doesn't seem related to your changes, as it is only used for the changes to the `Map` class and the only class that is used in this class.
Why are we no longer doing this?
is this class still useful, or is it a bit confusing ?
We should add `#toINE` to the message, too.
I think I saw a situation where a test failed to see this in a Bokeh, which is not correct. This is the behavior here.
The `case Blockly.INPUT_VALUE` block is still in `case Blockly.INPUT_VALUE`. Can we just delete the one after this?
I would just remove this one. It is not used anymore.
I'm not sure if it's worth a log.
this shouldEscape is false now.
This is a bit odd - if we have a `isCommitment` set then we wouldn't need it since the Commitment is a struct.
We have a lot of code that uses this method now - we shouldn't be changing public methods. We should probably remove it if not needed.
Why are we returning an error here?
This will break any existing `cpp` namespace.
Seems that the name was a bit misleading, because the ` paused` is not the name of the method, and it seems to be used in the code base. We can remove the `assert` altogether.
I would have expected this to be an EEPROM. It might be good to get rid of the `TOGGLE_KEYS` as this is the way to get a specific service and only add it to the Beam service for the Beam service.
@deads2k i'm not seeing any typos here?
Why change the default value from `411` to `411`?
I think this is the only thing that should be moved to a context context.Background. As is it should be on the context context, not on the other hand we do to be sure there is a problem.
This should be `BYTES_PER_DEL_TERM`, not `Character.BYTES * term.field().length`.
Actually, these are not supposed to be prefixed with the `1` prefix, because they are not prefixed by an underscore. We should add them to the `login` module.
why is this needed?
why do you need `firstTimeEmpySubject`?
should be reverted
I think we should use `.map(e)` here as well since we're not using it anywhere else.
I don't know if it would be good to use `expands_user` from the name, but I guess it's a bit more clear to the naming, and it's more clear what's going on here.
@jsoriano Can you please change this to `isHidden`?
Does it make sense to also set the SAMPLE_CSPROJ_TEMPLATE_FILENAME to this and set it to the other one?
Please rename to `ionClientWhitelistFile` for now and to be consistent with the other files.
These are no more outputtingting `log`.
I don't think this should be part of this PR. I can't think of anything that needs to be changed.
This looks like a leftover from debugging
>self->logIdToSend_ [](start = 8, length = 5) Why do we need the check at all if we set it on the previous step and call it from the list if we are not on same page?
Should there be an error in the logging log here?
these changes seem unrelated?
This is a bit confusing to me as I know, we should probably also check that the formatter exists, if we have a formatter exists and not a duplicate.
I guess this function was duplicated in #5839
I would rename this to `dispose`, to `scipy`, IMO.
I don't think you need to do this. The exception is thrown from the `NullPointerException`, so the method is never invoked.
This is a different fix, but in general it's not really a test.
I'm pretty sure this is the best place for this, but can't the partial manager just use the `esc_process_update` method?
I am not sure about the name here. `getCacheUpdates` is the best way to handle it. The `createCacheUpdates` field is not used by `getCacheUpdates`. It is not the same as `getCacheUpdates`.
why import from kinto.core
This will be a breaking change, as this will break our tests.
Did you check if this is the only thing I have here? It might be useful if you can make the lock required before this lock is set to true, but I don't have better suggestion.
Should this check be actually repeated?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Doesn't this work?
I think this should be `validation.FullName()` instead.
I think we can set a constant in the `consensus.rb` to avoid confusion with our code base.
Don't we also have to expose the configuration as a tag tag? It's just a tag tag for some reason but I think we need to add that.
This is used in many places, so maybe this should be removed?
We could use `Retry.exit_codes` which has a `exit_code != '0'` flag in both places and is not tested. In other words, we should do the same for both cases.
Would you mind adding the `requireNonNull` as part of `bytes` here?
Do we also need to set `upperupper`?
We don't have any docstrings for these two functions. Could you please rename `specify().build()`?
@danrot this is the fix. Why did you change the method name?
Do we need the `validateContinueAsNewWorkflowExecutionAttributes`?
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
How about "should be omitted" or "should be omitted".
This is not correct, the user can use `keybase.type == true` in the case of an empty string.
Do you mean to leave it in?
Should this be part of our `SetCertificateRequestCertificate`?
Why not just use excessDomChildren[index] = -1 ?
Can you make this `off` instead?
Why remove this?
Use the new Ruby 1.9 hash syntax.
This is a bit confusing, if `gka` returns `""`, we don't need an ` FirstImage` here anymore.
`userSchema.index({ username: String: { password: 1 }` is a bit confusing. Maybe `userSchema.index({ username: String`
This is the main purpose of "local_ip", not "local ip"...
This may be called more than once in the context of the `getCustomData()` method, since the method returns `null` if it exists.
I think this can be private.
I don't think this is needed, if the query has no max in the input and this is the default.
I wonder if we should have a unit test or open an issue to track fixing this.
Nit: can you replace all these headers with `lbann/data_store/data_store_jag.hpp`?
Is it possible to return `Task Execute` instead of `failedTask`? If yes we should make a `CompletedTask` as well.
What if we moved these to a `CLIImage`?
Can this be a local var?
why was this removed?
We need to throw `debug` in `validateTables`. If we are going to add a method to `debug`, we'll get a message and update the message to something like `debug` (I can't remember why).
I had to remove changes in this file because this is not a preexisting change in the main repo.
You could use the `MessageURLBase` module to get the `Stage` module as well
This is going to throw an `NullKeyException`, but it would make it more explicit to have a `since: : null`
does this need an `time.Sleep`?
I'm surprised the <msg> so there is a way to make sure the error isn't being returned.
This is the only change that affects SonarQube.
Why not `go schedule`?
Why is this necessary? The test case should be using a null value, which is why we should not use it.
why the include include?
I would rather have the original text change to "Conf height" as the default value is "recovery height", and I would rather use "enabled" or "Conf height".
What do we want this change?
Why is this here? I thought there are already some default implementation.
Wouldn't it be better to do this in `Makefile` itself?
This change should be reverted.
@kacfm @jridgewell do we want to allow a deprecation cycle? I'm not sure whether this should be here or I'm missing something.
Shouldn't it take into account the span names (like `performEvent`?), and then we can add that to the span names here.
I don't know how much about it -- we should probably be just removing this, but it feels like it doesn't make any sense.
Extra empty line detected at block body end.
Nit: This is a bit of a hack...
nit: remove extra blank line
Why is "DEFINITION" and not "DEFINITION".
I think this is the actual fix.
The same goes for both the TTL and the TTL are above, so I'd just add a single one line before all the TTL.
why not do `TypeName.New(selector, _.Stateful)`?
should we get rid of the internal override here? I can see it's not used anywhere.
It's probably better to use the test function in the test that checks the `scripts/tcp_stream_modify.py` file
Did you change the transfered to GPU in %f secs. %d sparse feature groups?
why this line is removed? It should be removed
This one is wrong, as it does not compile on UL, and I'm curious why you're doing this. I wouldn't say that the `const std::const std::const std::get_default()` method is called twice, so I wouldn't do this as part of the cleanup branch here.
why this change from a different pull request?
Please add to the docs.
This should be moved inside `ch == BytePercentage`
It is not clear whether the standard standard standard is to use `appendAuth`, `appendAuth`, etc...
Why do you need the other tests? Seems like it would be easier to have a test if you could just test this with a better name.
nit: `const` should be a single line after `let`
I would still keep these as `prefAllowed` but it makes more sense to have them as `prefMobileUpdateUpdate`
Why is it not hard coded in the tests?
Why do we do this?
This can be simplified to LGBM_Booster = (1) { _correct_ instance(API_BEGIN, ref_booster = (0); }
I think we could add an issue to track fixing this.
I think it is better to make a test here that is not running on tests.
You should move the import to the next line.
I'm wondering if we should return `false` in this case.
Why is this removed?
This is a bit confusing, why are we calling `IsZero()` twice ?
Nit: Can we rename this to `config` and `config.Logger` as well?
Make sure that this callback doesn't change behavior in this PR. The current code is that the root has no relation between `copy` and the current code in `nodeStack`.
This is the only one where we need to add a null check for the flatteningConfigs.
This seems reasonable to me (but probably need to specify a warning for port).
@Savalek should `x.env` be changed to `""` to avoid the `ndkPath` value?
This should be also changed to `if (calculatedStepSpeed < 0) {`
where is the manifest present ?
why not move this check out of the else block, as if the else is not set?
This will never be null. Is this intentional?
I'd prefer if you didn't have to add the new headers here.
1. Not really relevant to this PR, but this should be indented.
why is this not a new test?
I assume the default value for 4 is false?
what do you think about putting these in the `validateCell` method below the `validateCell` method, so that we can just remove these `validateCell`s? It seems to me that we can avoid adding them in the future. I'd prefer we just do that after the call to `validateCell` and `validateCell` that are only used in some way to make the code more clear.
This should be the one you used with the `@Nullable`.
Maybe this should use `name` instead of `seq`? We might as well have a variable named `None` for consistency.
Should we do `import *`. If not, please avoid using start in parallel.
This is not needed. Use `send_resource_list` to keep the last one.
Please use `include` instead.
why this is needed?
Is the new `AbstractArchive` constructor ever used?
The `AdditionalData` is no longer used here?
nit: it's a bit ambiguous to name this method. "getAlgorithmInstance"
Why `StatusGatewayTimeout`? Shouldn't that be the other way around?
The copyright here should be updated to match the copyright.
You can't do this.
I don't think you should remove the doctest from the "pearson" and all these three operations, but it's also not necessary
I'm not sure if this is correct or if a path exists and not used anywhere, maybe it is better to check the path?
This is the only change that affects TF providers. I wonder why we would have to change it. I believe that we can keep the readStateHeight to the actual actual values for each call, but that's a little weird.
Is this a change in behavior?
Is there a chance it's an int? I'd rather not make this a part of the stack, if it's not too long.
this is an important change...
This should be a map. `Response` is a map containing the disk type.
Since we have `undefined` in `this.getState` already the default, we could remove the `isComplexMessage` variable and call `isComplexMessage` once in the function to save some time.
I'd like to know this change out of sync with the `ServiceContext` class - I guess that's what you are trying to figure out where this is coming from.
to be clear, this is not right: `>0` is the right number of proposal?
I don't think there's any need to have this here, just `FilteringSparkAction` is a variable and can be removed.
Please wrap the if statement in a line after the log level
Why are we no longer using this field in the `init_profile()` call?
Is it possible to leave this in, instead of removing it completely?
this is the main test, I think we need to check if `find_or_create_by` is an instance of the email and the `current_user` variable has not been set anywhere else
Why not use `!empty()` instead to avoid the duplication?
We can add this as a doc string to make sure it is always `false`.
@tgamblin Do you know what the "5" of the `value` in here have? The problem is that `py_version.py` doesn't work because `list_version` doesn't have an `value`.
It looks like this can be dropped, or changed to `generators.pattern_machine`.
This is not a good idea, we can just put the b1 local var inside the function, no?
Why do we want to add the real real realob schema here? We're going to have to add `adad_on_progress` as long as this PR is merged upstream. Also, should this use `--prefixed-userid` instead of `--set-backport-issue-issue-prefixed-userid` (and the `adad_on_progress` option could be moved into the `prefixed_userid` class?
The new field `mockDBcache` was not used.
I think this should be grouped with our own line.
We should not use use I18n for this. Please remove.
The span id should not be used as its parent.
Why are we making NET452 a separate file?
If we're going to be going to have access to `cmd` and not to have to worry about `-babel` here, let's just do so.
Please move this to the top of the file, so that the `else` branch gets called everywhere else (it would be more robust to read).
You have to make this change to avoid updating the "evaluation", but I would also suggest to put a constant in all places where `Examples.compile` is actually used. That would allow you to replace the "evaluation" with "evaluation" or something to replace this with "evaluation"
This is wrong. The function is a private method and it does not allow for the protocol to be passed to the function.
Why is this needed?
This is not correct. You are just testing the event is generated in the other one.
I think this might be a better fit?
This is a breaking change, because of the changes in the API, we're now getting a warning for a user that has the `volume_type`. It's not the case here, and it's actually not the case, and it should not be in the public API
Why are we adding `MongoDb`?
This needs to be added in the `ISpecProvider` namespace.
Shouldn't we do this in a `SetProperty`?
I think this is not a correct fix. But the code below looks good.
I am not sure if this will work. I guess we should have "macs" here as well, or is this something we can do in future?
This is an example of what I would expect it to be in `skip_args` - but we can also leave it in
This needs to be in cache
I'm not sure about this change... it seems the only difference here is that `OrderOrder.unsorted()` doesn't return a copy.
You need <msg> You can use `html_format`.
This change is not related to the PR, but it doesn't work with a "trobie" case (i.e. we're not running it yet for the `/a` case)
why is this change needed?
I wouldn't do this... It seems this is an unrelated change?
Can you pass this as an argument to `registerIndexOfIndexOf`?
(style) line over 80 characters
@mfojtik I'm sure this is the best way to go. If you are going to pass a custom validator to it, the template can be an instance of `templateRole` object. I think you can just pass `None` to the `templateRole` object and not pass it directly
This is a breaking change which will break our code. I think `IsOnMainThread` has to be set to `false`. We should be able to introduce `Task ExecuteOnMainThreadAsync` because we need to ensure that it isn't in `IsAllTask`
this is the main change. you could add it to the model as well
This will not work if you have the `user_notification` flag in the `<ath>` tag and the `<ath>` tag
Can you update the docstring please?
This property is no longer used.
why are these added?
why was this removed?
can you add `schema: true` as the last column?
I think it would be better if it was `https://api.github.com` but there's no reason that the user didn't do it.
Is this part of your PR? I am assuming it was here already, but I wonder if it would be better for one step to be `Syntax` or `SyntaxPrefix` to determine which one should be `SyntaxPrefix`?
can you make a test case for `statsRecorder := (r_t *time.Second)`
Is this correct? This is a separate change, right?
There is no need to have a test case when the test is failing. It should be possible to test that the order is not changed.
Why did we change this? This is what we want to keep in mind.
please revert changes or unrelated changes.
I think that in case we don't change this, this is not the case, so you should get a `Set` from the `_timeout`
This is already handled by the `gasPriceRau` below.
Should this be a pointer instead?
Why is this globalization? The globalization is not related to the PR.
This is the only place where `false` is called from in the function, so it would be better to just call it `AddReadWrite` or something.
Can we move this to `config.total.module`? I think it's not needed, as it's used for all instances of `config.install` already
This is a pretty big change, and we can use `free(kds)` instead of `globalWorkSizeX` as this check can be extracted in the PR.
I don't think this is the only place where we use the new configuration
Is there a reason this needs to be configurable?
This should only happen if the database was created.
This is the correct fix for all the test cases.
this should use `.Created` instead of `.concat` as well.
"Either" -> "Either".
@jsoriano This change is the fix to not break existing flows. This breaks things, we need this change. It will be the most commonly fixed version of the code.
If we want to keep a previously invalidated the participant has been previously invalidated (if there is no assertion), we should be able to remove this assert.
Why did this change? We don't seem to be testing anything about the exact exact exact exact exact exact exact exact exact exact exact exact 2.x versions.
So, I'm not seeing `pojoRuntime#findOperationMeta` used anywhere?
I believe we don't need this one anymore, we only test that the `only pending` is an `only pending` key. If we do want to change something, we can also change the existing code and just test that the `only pending` property is actually a `None`.
This should be `./pants help --no-name --no-name/pants help --no-name` -- do we care about that?
Should we use `time.Sleep(1 * time.Second)`, to avoid `time.Sleep`?
Why this line?
Why is this line added?
@Pearl1594 can you explain this change? I'd rather it be `of cref` or some other change, but if it's not really needed and we can also leave it for the public static analyzer.
Do we need a new enum for new entries?
@jcotela It would be nice to keep this as a static variable (i.e. don't have the default value of the flag) and leave it as it was.
This should also be `false`. Same below.
This is not an API break. In particular, I think this class could be deprecated.
Is this needed?
i think it's better to just delete the `link` parameter from `converge`
I think it would be better to just change `send` to match the error message in `main.go`.
The PR doesn't like this, but this one is not really needed.
Why did the transition change?
I think we should remove this spec, as the spec doesn't have the spec anymore.
do we need a test for this?
You can remove `writable: true`.
Why was the end removed?
You should be able to pass in a `Action_ptr` here.
I'm confused. Why would the cast be non-nullable, but not a `ToStringSlice`? Is the `ToStringSlice` still necessary?
I don't think this is necessary, we should also have the `themesthemes.update` structure to handle the case where the v2 app runs on the same app and the v2 image image.
This is an unrelated bugfix.
I'd like to have a special treatment treatment for this.
Is this part of this PR? What happens if `withLockedTasks` is a subtle video?
Please don't change all the docstrings, but we don't have code that makes me think this needs a little more readable.
Not sure how to test this.enabledTypes.filter(..) is done. What about if it can happen that it is not enabled ?
You can get a `TODO` here by doing `from mmdet.models.client import ResLayer`
What would you say is this not an prefixed name? Also I don't think it needs a private default, since it is not an internal one.
@nmittler why do we still need this check ?
The same is for the `mappedClaim`. This will throw if the claim is null.
@gustavonalle I wonder if you could move this logic to `System.createElement` or some other test that checks for a variable?
I'd like to avoid the import.
why this change?
I think you should use "0" as default value here.
I don't think there's need to specify `ctx` in the `init` function since it's not used anywhere.
Nit: newline between "mvn" and "mvn"
We should probably make this error message more specific: `stream requests require a connection establishment timeout on the passed in context`
This should be consistent with the one above (and the others in other files).
I am not quite sure if this test should be in the `test_options()` method, because it is not related to the `j[0]`. If you need the `self.put_json` method, it is not needed.
`sh.failure` is a bit ambiguous, how do you think about `sh.if '$? -ne 0' do` instead?
This file is only used in python3, so it can be removed
This could be a different value than the default. You can change this to something like 100.7
I think we could keep the `azureDNS` and `azure-plugins` parameters in the struct struct, but that can also be done in other places, like in the future. We should add that to the interface.
I think we should keep the "Sign in" tag and remove the link_to 'Sign in', if it's not present any more but we should keep it in the view and remove it again
Why not keep the previous `case` and the `if` here?
I think it is better to name it `MakeLoggerForceEnableDebug`
I think this should be removed, since there is no way to get this from the macOS package.
Use the new Ruby 1.9 hash syntax.<br>Use 2 (not 3) spaces for indentation.
why wouldn't the NUL be a site object? it's a regular expression, and the `upload` value should be a site and a regular expression (the `_` can be a site object).
Is the `NULL` argument used?
Remove the default network port
Why don't you have `version` for it and `MaxBatchSize` in all the places? This would avoid having to have a default value for this (and all other types below).
nit: it might be nice to have a method called `lowestOutputForConfig` or something like that. Or something. I'm not sure what the best thing is if we could move this to. That way we can avoid `@VisibleForTesting` from `lowestOutputForConfig` and keep its name more descriptive and consistent.
nit: we usually avoid changing the param name in front of the `SchemaView`
I'm not convinced if we should be using this API, as I see it used to be called twice. I'm not sure if the searches is necessary. I believe it can be done using the `filter` API as the result of this method, but we should not be doing anything about it in the past. But maybe we should just pass it into the property?
This could have been left by mistake, and then just removed the code and the code that takes an additional argument.
This is the only place in the context.CloseNotifier is used.
This class contains methods that don't have a IDisposable; we need to change the API.
I think this is still used in the case of some sort
I think I added the `Operationss` for users who don't have the better names for users, but I'm not sure it's necessary to be using `Operationss` in this case, so maybe it's clearer that the user would not want to add the `Operationss` to it, but not sure if that's something we'd want.
should we use the `SelfCheck` function instead of using the actual image?
This is the fix. Can we do something like `product->getRingInfo()->numBondRings(pBond->getIdx()) > 0`?
Is it worth keeping the option that can be used in a follow up PR?
The data for verifying the block's Election PoSt was required to be able to be handled directly.
We should make the `Blocklistener` interface match the existing `Block` package.
I think you need to add a `validateMemoryBreakerThreshold()` call here to save the config setting.
why is this needed?
If there's an index with zero inputPattern, we could add a flag to this error.
I would use `super().test.js` since you do this for all tests.
I think that `checkAll` should be removed here as well, because there is no `code` message in the message.
can it be removed?
Another problem with using the `-1` is that it could cause a lint error if the client does not exist.
Can we add a proper `sortOrder` property?
Although this is not used, please remove it.
@krush , we can't do this now
This is a bit unusual, but shouldn't it be a "just" option in the list as the default?
This is not right. You should change the name here, as it will indeed always have a value.
Shouldn't this happen before `IsGreenland`?
I'm not sure if this is an issue for other components (e.g. a single user with a capital letter)
I wonder if we should just add "test" in the h2o package?
I would prefer to keep the code as is for now, to make sure it's safe for now, but I would keep the variable name as it was.
This should probably use `model.sizeToEmpty(value)` to match the implementation.
Do we need to call this? It's not necessarily a whole concept, so if we do, we should be using this model and we can move it down to `configure_group`.
Isn't this already defined by `updateNotInProgress`?
I think this was the only place it was used
I'm a little confused by the previous commit :)
This will cause the hermes to fail in some cases, because `Hermes` is not set by the client.
What is the `PullInterval` for? If it is not boolean, what is the `pull_interval`?
this needs to be added in the list as well, right?
`ImmutableSet.anyMatch()` returns `false` if `literalSet` is `null`
This is not a real problem, but I am wondering if we should do something about the `RuntimeError` check instead of this `if len(lib_path)` check below, and check that instead of a string.
Hm, we should probably remove these "Certificate" attributes as well if they are not required to be included in this PR.
I don't think we need to expose "camunda-integration" since the only time it gets used is when it is used is in "camunda-integration"
This line is not needed.
This is good, but we don't have a unit test for that :wink:
Why not just call the interface `primary` directly?
shouldn't this be `!= null` ?
Why not `getValidatorsForPreviousBlock`?
This is not a typo IMO.
Do we still need the `||` here?
The name should be "h2 className="obvious", but it was "hutions".
We should not do this. It should probably be a warning if we can't set this to false.
I would prefer to see the name of the function, but I don't expect it to work in this PR.
I'm curious about this. Why did we call this twice?
Since we are removing this now, can we just remove it?
can we also make this an `maxRetriesOnRecoverableFailures = 8` instead? It seems like we should be looking at all for `credsTimeout`
We don't really need this change
`assert.isTrue` will always be true for tests (not sure why `assert` was true). If we are going to change that, we can remove the assert.
Is there a reason you changed the signature of this list?
Please include a license header.
why are you passing this in to the constructor instead of passing it in in the constructor?
Should this use `lua_init(L, mem.cached)`
This should be a private method.
Can we rename this to `RewriteFilesCloseCloseable` or something similar? `<NewDataFiles>`
Unnecessary spacing detected.
This should be removed
This isn't required for this PR, but we can keep the `template` action, as it's used in the test suite anyway.
Why would this be needed?
is it better to have an `clearTimeout` field as well?
How about adding the key to the `value` instead?
nit: I think it's a good idea to not add a `downloadProfilePhoto` property in the `customAttributes` package, as it has been moved to the `ApiApi` package as well (the `id` method is already there).
The typehint is `string[]`
the idea was that this function isn't used anywhere else, but it was always used in the code above.
As far as I can see, `tab` is the tab object, right?
This can just be `e := t.Append(sourceSet)`.
@junmhooper I think we need to keep this as well, but can we use `[MaybeNull]` here?
This method is not used outside the scope of this PR.
I think this should be done by the log level in favor of logging.
This can happen if the intention is to happen in the previous line.
Shouldn't this be `[a-zA-form]`
Should be added to `class/base/class/_CACHE_ENABLED/class/_config.php` instead of hard-coding `CACHE_ENABLED` here
This is an actual change, but I think it should probably be better to be explicit here (and the above one above).
I think you mean `type == ""` instead of `type == ""`
Please don't put this in the list, the class is only used in the UI.
This condition is not actually correct: `columnSelected || columnSelected` In this case, `countRows()` is not enough, and `columnSelected` is `null` (and it may be wrong). `column to `0` is the default value of `countRows()` is not a value.
I'm not sure about this one, I'd prefer we move it out of `classtool/classtool` itself, since it's only used once in `pkg/classtool/` and `pkg/classtool/` in this file.
This will overwrite `DRUD_NONINTERACTIVE` for `os.New`. We need to check if it is `/test_system/test_package-uid`
this makes me hesitate to the way we do it. I wonder if it makes sense to have it also work for any other way (and also the one above in line 388) in this PR.
Shouldn't `overrides` be changed to `badated_cert`?
This was also causing tests to fail on develop
This will probably cause some problems, but will this still happen when `auto shifted_bearing > 360` is true?
you could just set this to `SAa_version` instead of the version, since we don't know that anyone is using this at all
should this be `protected rowPosition`?
If the client is now on, then the server is only on the client (if the client is not on server and should be on server), otherwise the client won't be on the client.
It is not clear to me why this method name is needed to be called on the main thread. It is probably not worth it to just remove the `Invalidapprover` method from the main thread.
Can we just call `isFunction` instead of `Function<? super`? That way it doesn't have to be able to take an argument.
this is a bug fix, we don't need it any more
Can we use the `name` field to be consistent with the other variables?
I don't think it's right to have these on the fly side. It's really just the size of this function to have the size of the input (and not just the whole file), so I would make that `0` instead of 1 here.
This file is only for testing, right?
I guess you are missing a test that covers this?
do we need to add this to `config[:columns]` ?
Question - I was wondering if the `skipif` was just a typo: `pytest.fixture` vs `fix_localstack`
Why does this need to be public? It's a private class.
You can use a `default!` here.
It'd be nice to avoid the RWMol **molExt here since it's a separate issue that we could use in the other files
Just for my understanding: What is the pendingCountLocked used for?
Could we just move this to `SetSignature` so that the action is not set before the loop?
I'm not sure why you remove this check
"to" -> "to"
Line is too long. [87/80]
Should this also be called `TestClient` to match other types?
Can we use the `if` for this instead of hard-coding `getBootConfig(frontActivity).shouldAuthenticate()`?
This will not change behavior, as the error is being closed.
Is this change required? It seems we don't support 2 numbers?
I have no idea what the `i`, but I don't think there's anything you had in mind.
I think we should keep the method around.
If there's a default value now, then we can probably remove this default.
I think this check could be moved into `PruneColumns`
This was a typo I guess. We should either create a new directory at the file or drop it.
This might be a little awkward because of the tmImplementation.
`Dashboard.navigate` is the same as `getProviderConfigurationUrl`
We should probably add an early early return.
nit: `UIAHandler.handler`?
What's the purpose of this change?
I'm curious whether it's safe to delete the `OSSBridge` param here
Why are we passing it in here instead of using a function for user?
Do we still need this `if`?
I think we should add some info about "input" naming in the API, like we have for the Beam SDK, like we do for the Beam SDK.
This is a very handy change, and could be tested.
Why not use the enum of LARGE_BYTES? The way I understand it correctly, we need to get rid of the enum from the LARGE context and not the other one.
What is <msg> I'm not convinced about this one. Is it expected?
This seems like a lot of places and I'm not sure what the best way to do is to use the `BalanceRecord` function. It is used to call `AccountData` on the `Sulu\` and not the `AccountData`. I'm pretty sure that's a good idea. Maybe we might consider making `AccountData` a `BalanceRecord` method and just pull the `Account` and `Sulu\` methods out to the existing methods (like `balanceRound`)?
I'm not sure this is the right fix, but the original code was wrong. The `wait` variable was not initialized before and now the `wait_for_at_least_entries` was initialized. The current `if` below below does return `false` if the `wait` was not found.
shouldn't this be `s.dbRecordVersion = 1` ?
I think this might be useful to have a new version, as it's an object.
Please put these in the wrong order.
This log message looks wrong
I wonder if we should have an option to use `stats.SessionStats` instead to be able to get the default value. It's probably not worth it for now though.
This seems like a good change to me, but we should probably have a better suggestion of how this works.
You can remove the corresponding `typeSolver` variable from within the `getSolvedJavaLangObject()` method. The `nit` here is unnecessary.
I don't really like the name of these - I would recommend to use it in the `PlatformModifier` method, rather than introducing an `canEvent()` method.
`mne/utils/video.html.erb` might work as well here?
Unnecessary spacing detected.
Why is this not needed?
Is this used?
This one seems odd. Is there a reason it doesn't do this? Also, if the new implementation is not marked `public`, then I'd say we need to keep the old one.
`pytest.mark.qt_log_ignore` requires `pytest.fixture`. You don't need to do it for `pytest.fixture`.
This should not be needed, it will be the same as `USERPROFILE`, not the `C:\\Program Files`.
Does this test pass if the input type is a sink sink? Should it be an `int` or an `int`?
nit: `KEY_EXCLUDE_FILTER` is not very descriptive, what are you thinking about ` INTEGER DEFAULT -1` instead?
I think we shouldn't have to specify the root cause here. We don't use that here.
why is this change in the PR?
The description says `getExcludeCode` is not used.
The function name is misleading since it returns `nil` (maybe `tNS` or similar) but I didn't see where this was used.
Can we change these back to long instead of removing it? Just curious why we don't have a type annotation for `SystemNamespaceRetention`
Should the be `opts.project_root.c_str()` call too?
I guess this is not a `tpfp_func` and the default `iou_thr=1` case? It would be better to have them live in the `iou_thr` class. But if it is the only possible use for `tpfp_func`, then it would not be in the `iou_thr` fixture.
This looks like a typo
Can you make sure that this is a raw string?
I don't really understand the reasoning behind this change.
What if we added the validation in `pendingUpdate` to get the reader? I mean, why is it only needed if the schema doesn't have a `parentName` and not a `parentName`, like is being set?
We should use some details here, but I'm not sure how to do this in the database.
Could use a single pointer here to indicate you are getting only one value and the value of it.
Not sure why you deleted this here.
The test for the new functionality should go under `assertThat`.
Please update our docs to reflect this.
Use a local var.
Can you elaborate a little bit on the way to do this? I think this is fine, but I feel like it will make more sense for some kind of to just be the key to be missing.
You need to mark these 3 lines as `FailedPrecondition ErrorCode = 7`
I would also suggest to add a new type assertion here for `stringToBytes`, `Rune`, and `stringToRunes`.
I think you could use `history_prepared_env` here.
We already did `install.certificatesigningrequest`, so should it be `github.com/jetstack/cert-manager/cmd/ctl`?
I'm not sure if `show_img` should be a copy of `imread`?
I think this line should be moved inside `src/main/resources.yml` and remove the need for the last offset, otherwise `IAL.min` will just work.
I don't see the original issue -- if this is a connection then the target is not a connection, and the target is not a connection?
This seems like it should go to LUN0 Storage as well.
Why the `echo` here? It is not clear that the exception is run in the `run_task` method.
Metrics/BlockNesting: Avoid more than 3 levels of block nesting.
This is not the best place for this change.
Can the naming be changed to be a property of the naming instead of a function?
Is this still necessary?
I'm pretty sure there's a better way to avoid having a model called `_dependent_show` -- since you can't do it like this, but this is the one you're using in the model.
Can we add a log message here that this is not throwing an exception. This code is actually important for the user to know if they are correct.
can we add this into master branch?
Is this a `/` for this purpose?
Do we really need this method? If so we should be consistent in the rest of our API, no?
I think it makes sense to have this as a variable rather than a `Function`?
I think the error message should be "CC", not "encodeURIComponent(item.file_type)", so that it will be displayed twice.
Is there another reason you didn't just delete it, and just delete it?
I believe this import should be removed
I'd like to see a lot of new tests here.   How about just `github.com/ethereum/models/models`?
Hmm, this makes sense. Is this a "not set" error?
I'd rather it do `h2o_mem_release_shared(ret);` to `h2o_mem_release_shared(ret)`, and then you don't need to pass in a NULL check here
Could you please remove `@deprecated` and use `@private` in `update` methods?
I think `aqua_teen_hunger_force.quote` might be better name?
The name "metricsConfiguration" is a little misleading. We could also check for `metricsConfiguration.isPushEnabled()` if we're already on the same line.
This is not related to this PR, but it could be a separate patch
I would prefer to use `object.Length`, not `default[]`.
can we do this on a constant?
I suggest using <msg> No need to put `//` in the code.
don't you want to keep the rankNum variable?
Why `loss_normalizer == 1` here?
The `u_long nonblock` was removed in this function because it is a private function that can be removed.
Please do not use wildcard imports. You can use wildcard imports
I would say "unrelated to your change, it was an error"
This is the only subtle thing that's done in a different PR. I think it's fine to remove.
Is there an option to return Collections.unmodifiableList(copy) ?
This will be a breaking change in master and will break existing models. It will be nice to get rid of it.
I don't know if this option would be required or not. Maybe something like that.
This is an example of how we would want to fix this. <msg> This is a breaking change. It's not a big deal, but we could add a `Debug.Assert()` that `version` and `map` values for `requires` and `requires` and `set`.
Shouldn't this just be `Secret.StringValue(out.SecretString)`
Should it be `#if defined(PLATFORM_IS_FREEBSD)` here to avoid the `#include` block if it's not defined in this case?
This is actually used outside the test function, it is already inside our codebase. You should only run `fs.unlinkSync()` if `fs.existsSync()` fails.
This is the only thing that was here was `CreateStoragePool(spcGot, false, 0)` but was a `stop(spc)`, which was used by both the `stop()` and `stop()`. I think the other way around would be to remove `stop()` from the function.
nit: I don't think this is the right approach since the class field is only used in the class. Do you think it would be better to rename the class?
This seems a bit ambiguous as it will have a `background_color` value from the `value` value, so the value would be `null` here?
I think we can just delete this method and use it to add more kinds of metadata table.
nit: we normally add an import at the top of the file.
@larsoner this was the only place where I've been considering that, was the idea?
this should probably use attach_case.
I don't think we need this. If we can't use the "ProtocolFragmentationReceived" template, it's not a valid device. We can't make it in a separate PR.
Shouldn't this check be in the `initialized` block above?
is this change intentional?
this is an unrelated bugfix, I didn't run into the previous PR
what about this change?
Doesn't it mean there is a setProp() call here, as the previous call to this method could return an empty set? This may be the case for a future use case for some reason, but the latter is kind of a odd solution.
this is for testing purposes, I think the `find_or_create_by` method should be called `current_user` or maybe `current_user` but I feel like the latter is kind of an odd choice
I am not sure we want to include these changes now - just not?
why use FIXME here?
Why not use the `LICENSE-2.0` file here?
Is there a way to write a test for this?
I don't see where you can actually do this. `BaseTree` seems to work for the `null` parameter. If it is just a `BaseTree`, why not just return a `null`?
For consistency, should we rename this to `API` or something similar?
I would add this to getExtendedTypes(). Also, I'd like to think in the changelog.
This fixes a bug. The test was working because the previous implementation of this test was being moved over to `ltest`.
@dain could you please review this class?
@matt-gardner Could you help me understand what are the cases you meant here?
I believe this should be `args.hasLong(1)`.
Is this change intended? Can it be moved?
I'm not sure why you deleted the `id="opt-in"` part
Can you add a docblock here to make sure `Diins` isn't in this context?
`if current_tab.present?)` isn't necessary because there's no guarantee that `current_tab` is `nil` in the `if` statement
Please make it so that the user can see the same number of values in `${ slug }`
This will be NULL if not NULL. I am fine with the fix.
I think the convention is to make these methods more specific, e.g. something like `scheduleriteite` or `scheduleriteiteite`. In this case the convention is `scheduleriteite` (which is in this scenario). It might be better to rename `scheduleriteite` to `scheduleriteiteite` or something similar.
`key == 0` ?
We should probably return False if there is an error.
The task-level limit is not supported in remote.cs
This was changed to `TierIndex = "tier"` to match the naming convention.
Nice, I wonder if this is a reasonable way to make it into an `UnstableInstrumentation`?
I wonder if it makes sense to set the default to `false` in both branches so that we don't have to change this back in in order to work around `ec2svc.Instance`
Is this still needed?
What is the meaning of `GenericAlias`?
I think it is not worth making the same code as above, since it is used in internal view view view and it is not part of the main template
Doesn't this mean that the previous call to `reset_reporter.reset` will still be called every time a new file uses `reporter.reset`?
I guess you could just use `header.getBaseFee().getName()` here
can we make this final?
This may be useful for some platforms (with the same operation), but I think it would be better to do it without the operation.
I'm wondering if it's worth adding a note to the docstring.
I am pretty certain this is the one that was used to set in a non-put sink (or even better). It seems to me it should only happen in one place, because we can set it there by the way the `if` above is done to ensure that it can be used in the `if` statement.
Use the new Ruby 1.9 hash syntax.
I would also check if the result is not `True` and `False` are equal.
Isn't this already the default?
I don't think this will work for the existing `*` implementations. It's a bad idea to add `@deprecated` as well.
Can you also change the type to `ManifestInFlight()` ?
Why are these moved?
Is this variable used anywhere?
Shouldn't we keep both the `SqlServerIntegration` and the `SqlServerIntegration.ServiceName` fields?
Can this just be an `// TODO: 100% covered by @jridgewell
why do we need this?
This is the only thing that was causing the tests to fail. The `if` was removed as part of the `@path`, and so I just left it in a few minutes when running a file with the same error message.
@clebertsuconic That would be a good place to put the `for` loop here.
`SNAPSHOT` and `SNAPSHOT` are the same, but I think we may be able to remove the `PluginAPSHOT` and `setAPSHOT` methods
I would have added a parameter for each parameter.
I'm not sure if it's safe for this to come back to the newer version of the tests.
I'm guessing this will break some of the other tests.
This makes it harder to review.
Remove empty line.
I'm not sure why we add the factory class here. We should probably add `..:account` everywhere in this PR
I am wondering how does this need to be under the `tls.Config`?
Can this just be `else`?
Can we also change all the other checks? It seems like the wrong idea here.
I think this would be a more proper API.
This is not necessary.
Should we log this error?
Should we also add the `serviceType` parameter in the `local` module, so that we can implement this as a constant in the future?
this is a column in the database. I think it should be a column in the database?
I think it's better to move this to `return None`
why not make this a pointer?
nit: we should move this to the top of the function.
why not just call `TaskTest` and call `Region` directly?
Should probably be `connected` (or something with a short name).
why we change it to a dict?
I think it is a good idea to use a context here.
This was not a good change, but would `str` have any impact on it?
The default should be `sizeof`
Use `.to_i` instead of `.to_i` everywhere
Would be good to make the check in the `adsense` class a bit more readable as well, for example: `_x( 'AdSense', 'google-site-kit' ), error, true, errorObj )`
Isn't it better to have only one `use BadMethodCallException;`?
Can we just do `realmConstructor.Sync.setFeatureToken(featureToken)`, otherwise we won't be able to get rid of this option.
I don't think this change should be here.
Why are we not using wait_fixed? It should be the other way around.
I don't think we want to do any change here. It is just a small change that might break some existing code.
This isn't used by reflection.
Should this be `os.IsNotExist(dir,77)`?
This is a bug fix. This is not a real bug fix and should be removed.
This should be removed.
Does this need to be a union or can it be set to true?
Why are we using it in the 255 here?
Should we also add `prohibited_if` to `prohibited_if`?
Why did you add this here? I mean since you're using kvm in v1, it should be using the kvm in v2 (and it's not that problem)
I think it would be more consistent to use `logEnv` for some of the error messages here, since you are just using the `warn` key in `goimports`.
This and the similar code below seem to be repeated a lot. IMO it should be the same as the allocationUnits and value of the value. We should be consistent with the other part of this expression and just assign to the value in `pkg/virtualDiscDesc/aculateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulateulate
The name `data` is really misleading. What about `test_buckets_can_handle_arbitrary_attributes`?
This is an interesting change, because the new tests are failing because the `assertThat(mm.asMap().get(1).get(1).get()).orElse(1, 3)` returns a string so the default behavior of the string doesn't work.
I would not expect to be able to get a `location.top` here, and use it directly instead.
I think it might be better to make this a function in order to avoid code duplication by putting it here.
If we're not going to be using the API, can we add a check that the API has the permission set and remove the key of all scopes and add the permission set to all scopes? I am not so sure why we need them, just asking.
I thought that `deliveries.clear` will be a non-null string?
Remove the line?
Also needs a test to check that the length of `depts.fl` is limited to single field.
I would add a license header here, since it's only used in one place.
If we're not going to be doing this, we can just use `RSpec.world.register` directly.
Just remove this one too, we should be good to go
I think this should be `Env` since it is not being used anywhere.
Should be in a test function.
Use next to skip iteration.
isn't this a global setting?
Should have a default value for this be a nullable field.
I think the previous implementation could be more descriptive of what `GET` does, but I think it's better to be explicit about what's the use case.
this could cause `props` to be used in the `this.shouldComponentUpdate` method, right? I think that could be done by this PR.
This test no longer needs to stay
Does this mean `if (req.getQueryString() != null && allowedPostRequest(req)) {` ?
I think we should add this flag to all of this validation.
why did you change the names?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Please rename `applicationName` to `"applicationName"`
@tarekgh can you confirm that this is the correct value. The actor batch is already set to default actor batch size in the Celgrind.h - this will break other tests.
This is the same thing as above, IMO.
Should we check if the payload is 20?
Should this be `padding`?
This is a bit dangerous, since it may not be a time to get the same time.
I don't think we should do this. In the `Create` we have `daemonExportFile ` to get its repo repo, which in this case we are trying to load the git-export-ok.
Instead of this, you can use `getcolmentServiceBuilder()` to be consistent with the rest of our calls.
We should do the same for the other `example.com` files
We should not use the `saleor/graphql/pojoProducer` to get the list.
is it possible to also set the relay state in the relay state instead of doing something else?
So the only way I see is the `quorumCompatibilityMode` at all is to avoid the potential NPE on the config side. The only reason this change is that the old version will be executed by the `BlockNumber` level, not the new version. I'd also recommend making the old version optional and pass `config.getThanosBlockNumber()` directly into the config side, but then to ensure that we don't pass `-b` to the config side, then the new version should only be added.
The `:api...` without the `@cancellation` gem. I've been getting the wrong error for a spec but it's not clear why that `reason` was being passed in. It is not needed here and we're not adding the `@cancellation` to the `cancel`.
Can you import the empty line in the last import block?
I don't get a big fan of this, it seems that the `pachctl` option will be updated if there are no callbacks, so we can add a way to add a new option in `s3_common.rb`.
maybe `expect(root.run(" ...).to eql(" ...)`.
Is this change necessary?
why is this test not needed anymore?
I think this is missing a space on the previous line.
I'm not sure if that is the correct name to this field.
This file will be removed from the package.
I think the idea here is that the peer is the one we are on, but it's also the one we are on. I wonder how we can move this logic to the "if the peer is disabled". What if the peer is disabled and is on the "if the peer is disabled" block?
Can you change this to `setBackendInfo` so that it is easier to track on the typehint?
It looks like the `.hide` and `.hide` need to be loaded here.
This should be a `setMenuItem[]` instead of a `use` statement.
The `API-MS-Win-STM` should be `NOT-Derable` as well, not the `ole32.dll`
What's the difference between `private` and `private` here? I'm wondering if this should be renamed to `activePeers` or `activePeersCount`.
Why was this added?
I don't think this can go here.
I think we can get rid of these as well. It's not clear from this PR, but it should be possible to have multiple volumeNamespace in the same way.
Just for my own understanding: what is the reason to not use `||` here?
The `message` should probably be `replace=True`.
how can you get rid of this for clarity?
Can we avoid checking `expires_at` on the specs instead?
I think "method raher than square brackets" would be nicer, since this error message is confusing.
This is not a `@var array`
This is not needed. I'd say this is a bugfix.
isn't this done for some reason? if it is not, wouldn't it be better to just set the default to 0?
Style/GuardClause: Use a guard clause instead of wrapping the code inside a conditional expression.
I think this should go before the base `id` attribute in `start()` method and use it in `start()` to avoid the stack trace (as `id`)
I am not sure why we need the `pipeline` here. Can't the variable be removed?
As `Unless there is a reason the code in `Unless there is some logic to handle these fields (e.g. `Unless there is a reason the `Unless there is a reason for the `Unless there are not much value that we should really use the `Unless there are any additional fields in the `Unless there are some kind of types in the class `Unless there are no additional fields in its names) `Unless there is a reason why we don't want to add `Unless there are only one. `Unless there will be a problem for it.
@cra0zy @jcotela is this a problem with you? Shouldn't we have a custom function for that?
This is a bit odd, I would not expect a message to be sent in the UI but I would rather expect a name that would be a better name
shouldn't this be a `@counter`?
`TriggerManager` is a method of loadTriggerManager. I guess the only time this call will be triggered is when the source manager is used in a `TriggerManager`. So I think this is better, as it would be nice to have the loadTriggerManager as the source manager.
No idea where to remove it?
I wonder if we could get here an error here rather than a try block.
should be `python3.3`
This needs to stay as `while(digit>` since the first line is `while(digit>0){`, which is what's done with `asScrollNum(digit)`.
I would suggest using `[(prefixLength]...` instead, as it's a little bit hard to follow.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why are these being removed?
I think this is still not good, but maybe worth mentioning in the case that the db is null, and if it is null, the db is not null, then the warning will be better.
I don't see where this change is used.
We don't need this any more.
@adamjstewart Is this the correct way to get the libio version of C++ standard standard library?
The option can be renamed to `AWS IAM` now that it has been renamed into the new `AWS` package.
This is the main change. We don't need the `isSupportedImageMimeType` call here, because the `Array.Array` function is actually being called in the `ResourceModel` list, which is a bug. This code path is no longer being found in this case.
What's the rational behind this change?
This seems unnecessary.
This doesn't seem to change any of the tests.
Looks like a typo.
Why are these two changes needed?
The `precision` and `None` are actually used for this function. We should consider making a small wrapper method for this.
Why is this check removed? Why is this not just checking whether the executor is empty?
`localNamespacedName` is nil so no need to parse it.
is it safe for this to be a `working_dir` array?
this should be `TriggerEventType`, right? (and same for the others)
I think you should be able to delete this line.
nit: can we rename it as `FAILED`
Should we have a test for that?
I'm not sure if the user could do this...I don't think this will do anything
please add the extra blank line after the class (forgot to remove it in this file)
@smarterclayton do we want this to go in `updateTaskENIDependencies` ?
Why is this needed?
I am not sure if there is a good idea or a good reason to do this... I think it is better to just do this in `pkg.Newviewer`
This doesn't actually fix the problem because of my understanding of this. Is there a better way to handle this?
Missing space after #.
with the tensor with @fmassa Shouldn't we fail the same exception as `expected_ancestors` in the test?
I think `errors.New` is not correct here.
why are we removing this package? is it still in the changelog? is there any chance of this change?
I'd prefer a single-line URL: `/confirmed/eslint/BaseTree.py`
This is not correct, it should be in `var`. But not in `if (settings.IsResponse)` check right below
Might as well disable `@type` and `undefined`.
You should not need the `.data()` call here if you just return the expected value.
Should we rename this to amp.vm.max.x, so it's clearer to change the string so this is the actual string.
We're missing a `type` argument here; there's no way to get rid of the ``.
It's still a good place to remove this from the `true` PR.
I think this is fine too... i think you should move this into the `try` block, since you don't want to do this in a different way: `self.start_stream_to_path`
Why is this type even needed?
I think this should be `EXPECT_EQ (1, ledger_walker.walked_blocks`)
"The" seems too generic and confusing to me... Maybe say it's just "use a" or something like that?
This will need a conflict?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I don't think we need to specify it in the if.
Can we remove the use of this class and have a use that to get its behavior in order to not have the prefixed settings at all?
Is it necessary to call this `DeepCopy` now?
Is the new `Jenkins` needed anymore?
I think we can remove this, because we don't need it in `initPWMClocks`, right?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
I believe the `#if` is not needed anymore.
we should probably add a note about the other "if iFromPeers" stuff.
This is not a valid fix. This is the fix for this bug fix.
Maybe we should have some sort of log to spot the error?
Nit: The existing RelaxedReclaimPurge triggers the purge of the nodeedReclaim queue for a particular node.
I wonder if you want to keep the previous method name consistent with other tests?
This is not a leftover?
we could get rid of this line. It's a method on the chain, but I don't believe that's a problem, as I understand it's an implementation detail of it.
should we rename this to `Decimal55`?
Please rename to `potentially Brave`
I'm pretty sure this is the wrong way to do this...
Please don't use Ember anymore.
I think this is safe to remove because it is a different thing to do
You can remove the double blank line here, since there's no guarantee that the eventListenerCount will always be 0.
shouldn't there be a check for `onSelectionProps` and then only do `onSelection to not set the value if there is a set?
Maybe better to move this to `ecs.go` or something?
Use `strconv` instead of `strconv` here, to avoid duplicating code duplication (maybe something like `files_for_type` or `type_files_for`)?
>flags & ASIO_DISPOSABLE This is a great idea. I'll try to use a more general name here.
I'm confused. Why do we need a `Load` here? If we have `:` in `LoadLoad` and `Periodic` in both places, why not just make `Load` the default of `Parenthes` (and then call `expect.get()` here)?
Nit: `fine` -> `fine`
We don't really use `GroupByError` in other modules, so just let it be `pass`.
Is it possible to have a named named variable here and avoid the need for this change? It looks like all the places you're doing is using it and you can use the named constant in the function.
Should this stay private as this class is called only by ScanContext() ?
Isn't this also checked for the `login`?
This is going to be very slow when the user wants to write, but it seems to me that it wouldn't have to do anything here and I'd like to see this in a `set` method.
`auto` -> `auto_id`
Please make this a `Set` and not a `list`.
should this be `#ifdef` ?
I think this should be a warning not a warning because you could use some kind of check to make sure all the clients are actually passing something like `@token` and then you can use that here. We could simply check this one and use that instead.
Why is there a reason this wasn't added ?
Is this in `__init__` used?
why not use `errors.jit.annotations.paging`? it doesn't matter.
Should this be "defaulting the server already has"? I think that's the user-facing name.
Maybe we should also add this field to `migrate.go` since the field is not part of the `migrate.go` file.
Why are we doing this?
Remove it completely. I'm not sure what this is actually checking.
Why do we need to return errors here? Isn't the actual error still valid?
why did you mean to change this?
@michaelkuhn Do you know why we did this change?
This should stay as `class` since we don't use it outside of this class. Please don't add any real changes.
This should not be here, it's not a valid package.
You may have to use `type.base_type != BASE_TYPE_DOUBLE` in case this is not null (and also for future proof).
Can you please remove this?
I'm not sure if this is a good way to go. This should be a part of a previous PR.
I think we don't need the folder folder, it should be sufficient to create the directory from the base folder.
Hmm, I'd have feelings about `List<T extends WebElement>` as it is a little confusing. I'd be tempted to not do that here.
>3s [](start = 16, length = 7) Should we keep the `3` and call the function to `curcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcurcur
The `opts.fee` is not a boolean.
`unless windows? # JRuby on Windows runs this even with the conditional on the block`
I think we don't need the `metav1.Time` anymore, since it is the one in the system.
Why is this necessary?
I think that you have to add `javax.servlet.ServletException` to `http.Map`
I don't know if we need more than one place to use this.
could you move this into the `info` level?
I guess that you have to use `conn->_write.base`. The `292O_HTTP2_ERROR_PROTOCOL_CLOSE_IMMEDIATELY` must be in a new line.
Is there any reason for this? I'm assuming the `ReadAsync` function isn't part of the extension code path.
Why do we need to do this? `if going through the base spec == 0`.
This doesn't feel right. It seems a bit of a weird pattern for a new `nextMedia` field, but it is a bit redundant, and maybe in the case of a `nextMedia != null` check.
It is better to use the `name.assign` helper? That may cause the exception to fail.
Remove the extra parens
This was a bug, the function is now unused.
This is not a good change, but this was a bug.
Can we use `reader.group()` directly? Or is this the same as `substring`?
This field is not used anymore and can be removed as it is now unused (it will be a bit of a hack)
I think this should probably be `nil`
I don't see a usage of `protocol` here. Is there a reason for that?
I don't think this `using BenchmarkDotNet.Parameters` is needed, as this PR doesn't need it, so I don't think it can be moved outside this PR.
This was causing a crash....
I think it might make more sense <msg> After exposing the entire path here as well, since the template and the single file will be overwritten by the iframe, so the template will be overwritten by the iframe.
Which Dockerfile would you like to use for building your application's container image? For example, if the user explicitly run "pip install layout" then they will not use the name of the app's architecture.
This change should be reverted, I think.
I am not 100% sure how this could work. The returned list will work if you specify a list. This is the case when you're in ascending order from the first place.
remove this. Use Reader instead.
This should use the `num_bbs_params` variable. `num_threads` is only relevant in a single thread, so it's probably fine to leave this out in.
`SignedData::getAuthor` is a bit ambiguous here, I would recommend using `spring.error()` instead
We should probably move these above.
Why did you change that?
This is not correct and should be fixed in this PR.
Why did you change that? I'm a bit concerned that we're not actually using the filename.
I'd suggest that we don't do this in tests. <msg> I don't think that's intentional.
it can be deleted
I don't think we should do this here, it should be `convert`
Wondering if the `deliver_now` method should have a `@approver_removal` method that is called on the post columns in `approver`?
We have a test for this. It's a bit odd that it's an error (I have no idea what it's testing, but it should be possible). @bvaradar ?
this is a little confusing to me, why does the `_keepAlive` check need to be inside the for loop?
Do we need the rationale for tag name?
Why is this change necessary? It's a breaking change.
What's the purpose of this check?
We can remove this one, it's a no-op
This is not related to the PR. If we need this on the server code, why not just use `#ifdef MPI`?
Why the domain_error vs domain_error?
Remove empty line
I'm a bit not sure this should be a `HashSet`?
There's no guarantee that the CertificateRequest has been modified
Is this a typo?
I don't like this. The `attr_accessor` is a temporary default and we'll get into the build failures.
@jmhooper I think we should have a unit test for this case. It will have to change the test so that if you move the 'y' out of this condition to some utils it will have some sort of if.
Are you sure this is the right thing to do?
this should use `strings.Contains(input, string(phOpen))`
Why do we want to ignore the status here? It seems like the error message is not clear. Should we change that to not change the user?
What about the `get_supportsProsodyOptions` call?
Do you think this should be set to false by default?
This field is never used
This should be a `const` not a `string`.
Why is this necessary?
Should we set the `c.BoolT` as a default?
Is there a reason to use `null` as a default value?
I think the only way the `getStreamRoleRole` is to return a `Object<String, String>` and then `setStreamRoleRoleRole` is called in the `getStreamRole` loop below. It would make sense to return a `String` when a `isStreamRoleRole` is called (from a table, but not a `String`?). So I don't feel strongly about this.
Is this still needed?
Just a question here: why not use `pkg.Once`? It seems like the `transport` can be removed, and the `DictDict` can be removed.
Should we have an option to add the name for the LBFargate-Config string?
Please use `log` as build key.
This is probably a bit unusual. What about an `log`?
This isn't used in this PR.
If a retry is true and should retry be valid? If so, should this retry be optional?
I would call this `﻿` instead as we're consistent across all the others
This is now an unused constant
Why is this removed from the previous version of this PR?
Are you sure that's correct? The `ply` field should be renamed to `ply` or `ply.12`
Is it OK to just send the min to a pointer and pass it to the `MaintenanceMode`? Is it only for testing purposes?
>! [](start = 40, length = 9) Why does this not `Bond::STEREOZ` check for `Bond::STEREOANY`?
Are you sure this doesn't break anything?
The way the code is used is the `sseq` variable and not `sseq` could we change it to `asflr` or `sseq`? This could be a bit confusing for a while, as well, and the logic is a bit confusing. I think you're going to be able to just do `return sseq = nil` or similar
This will have a more `engineTools == null`. Why do you need to check for an empty string ?
I think this is a little confusing to me as it may make the naming more readable. I'm not sure if it would make sense for this to be the first part I think... But it may be useful to just check if there's something wrong wrong with the current_user, if you want, and I'm not sure if it's worth it if you think it is worth it.
What about a boolean? (also in case the value doesn't contain enabled_features_found?)
Is it possible for this to be called a `get` function? That way we will have this hook hook up in the Config class
@danrot @wachterjohannes this is the fix.
It looks like the value here is just an attribute name, not an attribute name.
I think the `.` at the end of the sentence is redundant here
I don't think we should be changing the class here...
I think you're not going to need to add to the list here, because it's already a list of !t->nslist
Why not just call this `super().getName();`? `AbstractRuleSetFactoryTest` already has a dependency on pmd-apex.php
Is there any reason we could just make this return `List<string, string>` instead of repeating the same thing for `get_parameters()`?
I would recommend using `javax.log.Try` to get more specific exceptions.
Metrics/LineLength: Line is too long. [83/80]
Why the get here and not below it?
Shouldn't we do this at the `this.getVariable(name)`?
I am a bit confused by this being added to `idx`. I think this is a very good thing to have
Why not `uint32_t count = 0`, or `uint32_t count = 0`?
This class is not needed
If we're going to be keeping this in, should we just have a test framework that gets updated to be able to run on a non-default create path?
What are the extra space for the suffix?
Should we log the debug level as well?
This should be set to an int. I'm assuming that when we create a type for it, all the other stuff will be to update. I guess it should be `public Layout<Object>` and add another `String` type.
This might make more sense to just move `elements` to `amp-form.js`.
Can you make the interface static? That's a little strange, but I'm curious to know why it's needed.
Why is this necessary?
It's not a good idea to use a `javax.jvm` class to avoid an extra import.
Is this always true?
Can we put this into constant?
"... only save data required for 'execution summary" sounds a bit vague to me. What do you think? Also the 'default' field should be prefixed with 'save_summary_data' to me. What's the thinking for this parameter?
Why this change?
Why is it possible to use `OptionalOutputs`?
Same thing here, should we be consistent and not consistent and link to `ncr-layout`?
What does this mean for all cases of an `properties` in that struct? Is that the intention that the use case could be helpful, or a more specific one?
This import seems unnecessary?
This is a bit ugly. Can we do something with `return (Slots.TryGetValue(name, out var slot) && slot is RuntimeContextSlot<T>(string name))` instead?
Isn't the exception sufficient?
This should be in a single if statement
This will be a breaking change in the API, and will break the API's `healthcheck` package.
wouldn't it be better if `v1alpha1.StorageClassKey` is an array?
Isn't this the same as the one below, so that we don't need the subnet at all ?
you probably want this to be an `find()` that was there before
The changes in this file are unrelated to the PR, just a suggestion... Maybe we should move these to a separate file?
This is a little strange. How about a more idiomatic way of including an empty string ?
"really" -> "really", "really"
I'm not sure it is a good idea to have this `administrator` flag. What is the rationale behind making it clearer?
I'm still not sure we need this. If I understand correctly, I can't find a cleaner way of doing this.
This could be done in `Prefetcher().CancelPrefetch` method, in order to avoid duplication. `fbo.config.BlockOps().Prefetcher().CancelPrefetch(ptr.ID)` might be better
I don't understand, where is this different from what we do? Or is there an exam examined way to write an input (in the `txid`?), and what you have in mind is `lile.lease.lease`?
why are we passing `/se/grid/newsession` as the class?
If we're not changing this, I would suggest moving it to the interface.
`import operator` is a bit ambiguous, maybe `importDOMElement = os.path.dirname(__file__)`?
Could you please add a space between `$` and `$` in the `$`?
This is going to cause issues in #369, but I think it is better to be explicit here.
Style nit: This statement would be on one line.
Why did you remove this?
This should probably be something like `getProductVersion`, since `version == null` is never going to be true.
What about `std::vector*`?
This test should be reverted.
Do you really need these? The default is used in this PR anyway.
This seems like a weird change to me. Why not just have `this.value` always be `change`?
I think these changes are intentional? The reason is not to use "2021" as a default for the `2019` package.
I would use `==` for these as well.
`Java cache` is not closed. I would say `unless we're already in minimal mode, let me know if I should not disable the block cache remain or not.
This is an API break. The `issubtype(X, A, B, ...)` below could be replaced with `isObject(X, A)` for an example that is the `X.get_temp_file(args, ...)` but that doesn't have any impact.
Is this needed? I don't see it in other places
Does this mean all the other occurrences of `KOKKOS_ARCH_VOLTA70` will be set to 1?
@deads2k do you have a better idea to include this as a larger larger example?
This will cause errors when there is a log directive, but is not present. We could probably have an error message here.
I'd like to see a more direct way to get rid of `update_trails_state_for` here and just inline this function. The way I'm just doing `super[:resource_owner]` was to avoid having to create a single `update` object and call `super` in the `resource_owner`
I'm not sure about this. `load-export-ok` is the best thing to do in this case.
Please add doc for all these
We need to make sure we don't get rid of it, but I'd be interested to get it away in making it public if we can use it in a imageIO.
Is there a reason you are doing this here, but in the future we would need to add a new `Cluster` field as before, like we do in `pkg/json.go` - to keep things consistent with the other API changes, and add this all together with all other types.
Why is this needed here?
It seems a bit too big of a hack to have all the names of the API in the API, I wonder if it would make sense to have the API take the `exports` as a name. I don't have a strong opinion that this could be a breaking change.
Please put the rest of the code to a new line, that's what I have in mind.
this will never get called, since the method will not always be called
Shouldn't this be `map[string]` ?
Is this really necessary? It should be a `SetChainID`?
We should not call this method inside it. This is the code that uses the same method.
Why is it not `0`?
I think this should be the default behavior to be 1.0, so you don't have to pass the default value.
Should we set the loginOptions here as well?
@dvoytenko What are the problems with removing these lines? Do we want to do this?
Could we have the test setup as well?
We also need to update the Solaris.txt file.
I'm not sure about this. Is `OriginalURLCtxKey` the correct thing to do here? It seems like you could just do `if reqid != "" {` instead of checking if it is the same as the one above.
Shouldn't we also set the copy? Or should we have a test that failed on the client?
This policy isn't actually used
Is there a better way to do this? It's not the big deal.
You can use the constant here.
We need to implement a `static` property.
I think this should be `return `.formatformat(priority uint16)`
I am confused. The initializers were being used to pass through. If they are used in the podcaster, they shouldn't be used in the call site.
nit: remove this `private file;` (assuming `fs.writeFile`)
I think we could move this to line 147
@mfojtik this is where it might not be helpful to include the lambda in the change in the middle
remove empty line
I think we're right to use `including_An_off` and avoid the actual warning.
@mstruve what do you think of this? I don't think we have enough stuff now, because we don't support `_target#record` anywhere?
Can we just leave out the `_shape_for_onnx`? I think it would be more clear if both inputs were to exist.
can you change this back to an error?
I think this should be part of `verified` and not `userInputState`.
This is the only usage of an object that will never be used. You can use an `find_by?` instead of a `.spec.project.id` here
This is the only change to the API, is it OK to pass a `time.Duration` as an input argument to `NewState` to keep the same function?
Why are we returning nil?
This is a bit odd, why is this a pointer now?
I think we should avoid using the `-ponynoscale` in `init_runtime` if we need it. I don't understand what it means, just thinking out loud.
Do I need these checks? I think it will cause a merge conflict
This test is not needed because `checkContext` is already a `TestCase`.
This line isn't needed anymore.
Isn't it better to make the method static and avoid having it?
This isn't a correct change.
I would like to see this in a separate PR if necessary.
can you use the same range for both `_with_type_code` and `_with_type_type` functions?
Shouldn't this be made private?
I don't think this is right. It should be `settings.icon` or `settings.ico`
Is this a `ordered`? Why should we just call `orderedBootstrapContainer`?
Can we put it in a constant? I find it useful.
In what situation is this true?
Could you please rename this class as well? The constructor is deprecated and we're still trying to figure out the argument name in the context.
It's not clear why we need the `if` here, but I don't know if it's the responsibility of doing that.
Why not keep `libraryController.*` and pass the `updateLibrary` directly directly here?
In other words, you're using `@object.published`, which are `@object.published` and `@object.published`. In this case, you need to check that `blank?` is a `./` on the object instead: `if !@object.present? || @object.is_default || @object.org.funder?`
nioBuffer is a very generic class, should it use a simple call to call `getBytes()` on its own?
I don't think we can remove this block, since there is only one value now.
@kharnabycourt, would this work if it does exist for anyone using it? Is the `OFFCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST` flag still supported in the case of `PRIVACY_GROUP_DOES_NOT_EXIST` being `None`?
This isn't really correct, but we should do something similar in `Amless_Block_fields()`.
Why removing the cast? Shouldn't the line length be removed?
nitpick: could you move this test to `test_add_lambda_function`?
Shouldn't we have an example of how to build it, say, "atingSystem" or "atingSystem"?
@peteranbv this is the wrong logic. It is a `Span` but the `skew` check is actually redundant and the `uint64` above is not actually correct.
This is a bit weird. What is the benefit of this change?
This is a breaking change - it's a little unwieldy to me that there are no errors in the code that I can imagine someone's using something like "New query string" but I don't think it's worth it.
I would use a strict comparison.
Think this should only happen in icon.material_icons when the icon is changed? (And maybe that should be an updated action, if the icon is not defined at any point else)
brace on wrong line
You should use the plugin instead of hard-coding the integer here.
The cache is only done with a custom node.
I am not sure how to do that, but I wonder if we should just return `backend` rather than doing this. Is it possible to get the right thing to do here?
I'm guessing this is not needed any more?
I think it's better to make this class more explicit. `must_respond_with :unauthorized`
why is this needed here?
why change it to ` ER`?
Align the elements of a hash literal if they span more than one line.
Is this the right place to do this? It is used in many cases, but maybe it's worth considering how it gets used.
Is this needed? I thought we were just throwing away the warning when `File.Exists(projectJsonPath) || !projectJson.Equals(File.ReadAllText(projectJsonPath))`
It would be better to keep the check (or even the above if you're just doing that).
wlr_libinput_tablet_tool_destroy() always returns false if there is no `wlr_input_device_destroy(dev);` as a default value, so I would have made the `wlr_libinput_tablet_tool_destroy()` return an `int` value to be false.
this will not work. You can move this to `AbstractMessageHandler`
How about: "The original naming of the `props` should be used if the type is not present."
Again, not sure if `--mode=release` is ever used here
This is not a good way to handle this. The previous approach would be to use `StringUtils.isNullOrEmpty` and `StringUtils.isNullOrEmpty()` which I think would be a good place to do it. If this is a big deal, I suggest to have a more explicit method to handle the `Game.getClass().equals()` and use `getSimpleinScriptEnvResolver` method.
What if an error is raised?
This is a pretty big fan of the number of places we have in a single method. Can we get rid of the `constructor`?
Nit: I'd prefer `String#Equals(String, String, String);`
Use %w or %W for an array of words.
`s/...` => `>`. If the number of those changes, they can be closed.
Should this be a pointer instead of a pointer?
I guess that you are not checking that the file exists in the first place?
We can probably get rid of these tests now as they're just testing the same in the test now.
should we also check the error? the error condition will not match the error.
I'm not sure this is correct, but it makes sense to just rename it to `_blazer`
I guess we need to leave as is
You can use `agent.TestList()` here (and below).
What does this `@Deprecated` do exactly?
This would be better than the one in the `tabwidget.TabWidget`
I guess this looks wrong, it should be `writer_->getGuid()`.
This seems unrelated to the rest of the PR
Please, rename it to `public` or something.
Let's remove this. It's not clear why we need to do this given we're still setting Variable objects in the `invoke` method.
I would have put the `T` tag in here.
Style/RedundantReturn: Redundant self detected.
@dvoytenko I'm not sure if we should be using `enumerable` here? We're not doing the `writeable` anywhere else - I think you should be using the `configurable` as a variable.
Do we really need the explicit `@return` here? Seems like it should be removed from the `#` one.
This is probably a good place to pass a reference to `NewResourceEventBatchId`, but I'm not sure what's the intention here. The new way is to have the `Version` as a parameter which I don't think `NewResourceEventBatchId` is to call `NewResourceEventBatchId`. So I think the old `Version` parameter will be to add the new one.
I think you can remove the lines that you added.
Line longer than 120 cols
I would just add this to the `else` and remove the `if` below.
What does this actually do?
Please add an index on `null: :replace`.
This is a change, and I don't see any benefit in using a struct here. We need a newTaskCleanupWaitDuration. I think we can do it with this value, so we can just make it explicit.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I'm not sure that we want to change this, but maybe we can make sure we don't change `/se/grid/newsessionqueuer` is in `AbstractGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogleGoogle
This could be a separate test and be removed.
This is the actual name of the property. We should change it for some kind of purpose.
We need to remove the `Deprecated` here.
@cra0zy I'm not sure this is the right place for `p` to be `nil` if there are no additional elements that don't work. I don't see a situation where `p` is not `None` but `p` is used. It is not needed for `nil`
nit: I know this is an internal test, but is this really an API change?
can probably remove this line?
I'd like to see a better name. What do you think of: `fetch('quote.famous_last_words')` or `Vision_thoughts`
Could be in a separate PR, and a separate PR to rename it to `ChunkInfo` for clarity?
I'm not sure this is the best way to make this `render layout: false`. We don't have a better way to avoid this, so we can do this in a separate file and we can use a private method like `render: false` in the future.
can you please fix all the `synchronized (exFlowKey) {` annotations?
I am not sure if the first `UpdateTableCapacity` function should be called to return an error, or in that case we return an error. The first `UpdateTableCapacity` call shouldn't be changed. If you want to return an error then you should change the `all()` function of `all()` to pass in `all()` to prevent errors.
AFAIK, this should be "Welch"
Nit: this can be be `The folder was already added` since it's a constant.
@matt-peters, any reason you want this?
The <msg> wait() is not needed here. If the archive does not declare a null pointer, the archive does not exist.
Is there a better way to do this?
We're missing an assertion that `#sort` was never used and this would cause a test failure.
@stevegsa What if `service` is `undefined` here (or a compression)?
I'd like to see this `resolutionOp` a `case` statement. It's a little hard to read but still seems the `GCOp` should be a `resolutionOp`, right? I'm not a fan of having one-line opinion, but I don't have a strong opinion.
The `v` can also be null here.
@agramfort this is the bugfix
Is there a way we can avoid doing this kind of optimization, but is it necessary to use the `str` constant?
Why are we checking this in the config rather than the local preconfigured peers? Why not just always get the exact preconfigured peers?
This is wrong. The year is not needed.
Revert this file.
Why are you changing this to `l.config.ProcessLabel`?
I'm wondering if we should have two separate functions `SharedMemTransportDescriptor::OverflowPolicy`s here. It may be a good opportunity to remove one extra space here.
In my opinion we should add this to the `span_format` method to avoid the need to add this, but it's just a small nitpicking, which in general it's a little strange. <msg> I think in theory we could probably remove the `span_format` method in `source` and have the `html` as `--outfile`.
Line too long. [81/80]
Is there a better way to check if the user doesn't have a `nil`?
Why the change to `applyMode`?
The default behavior is `false`, `true` and is is `false` by default. So it should be set to false by default.
I'm not sure what we should do in conf.HTTPConfig.Validate() in the conf file. I'm a little concerned about it, but I'm wondering if we should just return a conf.HTTPConfig.Validate() here.
Isn't this a pointless behavior? I would expect this to be a very large number and maybe a little more specific.
Nit: remove empty line?
I don't understand how `data` is being used. Is it a `List`, or should it be `data` instead of `data`?
This will likely break if the `addMethodCall` is a `string`.
"the fields ..." -> "the fields ..."
I would rather see if it should be a separate JIRA. It's an internal implementation detail of it - but for now, the prefix is `(1)`.
is this needed?
Nit: import order of imports
We still need `type Handler` in these files
This should be `ipip_id` as well
What happens if both `IsDefined` and `predefinedCategory` are set?
Do we need to do the same in the original environment? I mean, should this just be `"true"`?
This should be `ectx()->addWarningMsg("Data will be deleted completely after restarting the services")`
can we test for the false case?
Remove this, please.
I think this should be done in a separate PR as the line can be merged, since the new code can be simplified to `request.format(val.url.searchengines)`
I'm curious what's going on here. Why was it deleted before?
`MaterializationOrObservation` is not clear. Maybe `MaterializationOrObservation`?
If this is forcing `sorted` calls in a different test case, the test should be moved away from `buildOptions`.
No strong opinion, but this should probably be in a separate directory.
why is this needed? This file is already built there
> the name of the param "scope" should be "scope" instead of "scope" (but it is not clear if it has both)
This should be `#include <rtps/builtin/data/ProxyHashTables.hpp`.
Why not make this protected by `_` ?
Maybe better to have LoadReader and LoadAccount both in account and LoadAccount
This will never be true. It will always be a string if the localCache is not a component. It doesn't need to be checked.
I'm not too sure about a change here? It might work as well, but it would be good to test `assertDictContainsSubset` here.
This should be in the `if (!atom->getAtomicNum() == 0) {`
Can it be `skipOn`?
I think this may be confusing, since `isVersion()` is called in `register()`. The first check in this case will also be redundant.
Was this just a mistake or something?
I don't think we need any more tests for this, since there's another `31557600` in the first place.
@jaeilepp This doesn't make any sense in the tests. We need to be careful about this if I'm wrong.
This is the only place where `resource` is used. Is there a reason we don't return the error here?
I don't like this name either. What do you think of using a named constant like `public` or `public`?
Is it really the right way to write non-null?
You could use the same constant for both usages (maybe it's a class property)?
What about these 2 files?
I wonder if we should just return `true` here and do `return nil` below to verify the type is empty?
This is the one that needs to be removed.
Does this need to be public? If not, why not use a constant?
@deads2k i'm not sure about this. The default is `region`, but it's `region`, not `region`.
Same here. Please use `SkipSkipSkipSkip_ui_Skip_block`.
I think this should be `mailer.proposal_link_text` because `Present_url` is not an `current_Admin`, so maybe `proposal_link_text` and `current_Admin` are more correct?
I think this should be removed?
Why not using `return` here? It will be easier to read if `getSingleTimeMs()` throws an exception, and return new ArrayList<>(); for consistency.
Maybe it would be nice to keep this as a `@private` statement and pass that `repo.className` as a member variable to `BackupRepository`?
I would have made this a private method and just call it with a `isMetricAttributeDisabled` or something like that.
nit: I wonder if it would be better to add this to `than-server-service-Client` (or similar) as well?
Why do we need this? Why not call `close()` before calling `client.close`?
Do we want to make this configurable? (I think we are already going to be passing a `*rclone` in some way.)
can you make this more readable?
We can't modify this process. We can't export this for now. Also, the behavior of `src/service/package-on/package.yaml` is a bit more appropriate to do. It's not important to have this in the code. So maybe I am just missing a check that we can make sure it's not working correctly in #if are the most important case here.
Isn't this also the wrong place to check for the `prev`?
`with blank line. there are no changes below.
We should probably make these tests only ever run in a single place.
I don't see it in this PR, but I would prefer a separate commit (or a separate commit) so we can separate it.
I think we need to keep the old constructor to ensure it isn't needed anymore.
Shouldn't this be `CODE`?
`Status` may not be the timestamp name as long. You should use `Span addEvent` or `Span addEvent(Status, String value)`
This one is wrong. The mock() above should be deleted.
why is this needed?
We should also rename this field. It should rename the column name.
I think the `a registration` field should be `a registration` rather than `a`
`assert_precise = False`
This test should be removed.
Why not use the default here (and the old code) as well? (Or is there an issue tracking this? )
@matt-gardner, I'm wondered what's going on with the `[ setValues, value ]` here? If you do it in a followup, how do we rely on the current user as part of the ` setValues` component? If this flag exists then I would like to keep some of these as possible and make some changes to the original implementation more complex. But I guess it may be worth checking if we're going to have to make `The` statement be a bit simpler.
I wonder if it's more common to use <msg> if the flag `sort-order`?
This file is no longer used, right?
`joins(:video)` might be clearer here as well.
I am curious, what is the purpose of this change?
What is this for? Why don't you add it to the tests?
Why is this needed now?
I think this method can also be replaced with `.replace('tagName().lower() in ('a'):`
Would it be a problem to move this up into some of the other `Klog`/`klog` methods?
This seems like a good place to do this. The current name is misleading. I think it would be better if we moved the `resource.new` to a constant, but not all the `resource.new` to be the default.
This is a test that didn't run `its.new()`. If it doesn't work, the `.its` is only needed at this point.
Do we want to make this configurable or can this be configurable?
`assert.Name()` could be a constant for the code.
This is a very hard error. What's the thinking behind doing `var_type.IsValid()`?
I would like to see an issue where the container was being created, but it's being a bug
How about just calling the `contains` method from the `contains` method? That way the code can fail if the method is empty.
I think the old description of the check is better.
I'm not sure about this change... I am not sure if this is the best approach. The package is called by a word "change" as the name, it is not really in this package. What do you say?
This should be protected and passed in should not be used.
Is this import needed?
should we have an Cache interface to return `null` here?
We may want to catch this error here, but I think it's better to catch `return`.
I think you can just call c.cgroupManager.Exists(), but I think that we are already doing the check on line 185 above.
I would just put this in the message. (We should do the same change in the `test()` method.) The only way to fix the issue is if we can use it at the top of the file, so the message can be improved: - we can change this to be consistent with the other call to `createTableTransaction`. - I guess `identifier.name()` should be a static constant, which would be a more concise version of the table (or at the end).
Use nested module/class definitions instead of compact style.
Is this change necessary?
Is this line needed? I assume it will be removed if it is not `True`
@bvaradar What is the benefit of this? I don't see any related code using it.
`mule_t` should be renamed as well.
Why do we need to change it for protocol?
This line is causing the problem problem.
Let us avoid the route. It makes me think there's something we need, maybe?
Shouldn't we use the Timer function in the `DataflowRunner` and `DataflowRunner`?
@cvializ I'm not sure what `FileInfo info` would mean here.
Is this safe?
Please make a `public static final` constant for all the classes in `src/server/server.h`.
Why are we not changing this field when we are using an object?
I think we could remove these now that `componentName` and `componentNameLayoutRenderer` are no longer needed.
why do we need this if `ip6` is not `None`?
why returnPartly here ?
I think this should be a `var` not a string, right?
Why did this change?
No need to specify in the assign, just return and there is no point in keeping it. Just return in the returned value.
@chicm-ms do you have any insight on what the expected behaviour is ?
This is not the right way to check if the data is deleted. It will be displayed to the user without accessing it right? It may be a bad alternative, and I don't see anything wrong with it.
So, I'm confused why the condition is different here, but is it possible to have a constant for the same value for all values?
Is the indentation intended?
Why the additional check on the `null`?
`compressed` could be passed to `service` in case `compressed` is true
this is a public function. It's used in the `clusterRegionGetter` above? I'm assuming we want it to be `clusterRegionGetter`. It's used here as well, but I think it's better to have this set of logic as `clusterRegionGetter` for a function.
I think this could be moved to "III think that it's not necessary to add the parameter in the constructor and the other constructor in this class.
`if` is a bit redundant here, it will be `False`.
This is the only one where I think the first one should be `(separator, '-')`?
Maybe we could make this a global var in the constructor and add it to the constructor
Is this a breaking API change?
Is it really necessary to set this to `violation.get('Config_name', '')`? It seems that this line is not set anywhere else.
why was this added?
How about using `CheckForDoc` and `CheckForDoc` directly instead of passing in a method? It could be useful if it could be used here or in a different way.
This is the change that will be reverted.
Why is `deliveries` being added here?
This is an unrelated fix for this bugfix. We should add it to the changelog.
Don't import static methods.
I'm not sure if this is correct. `goss` needs to be a goss tag for a specific one.
I think this `Removed` can be removed now that dagster_type=DataFrame is not used anywhere.
It's not necessary to add `isSelectionAnchoredAtStart` here because that is a different code path, and it is not actually the same, and we just need a different `@Formatter` method.
Should this be `github.com/pkg/hash/`?
Let's add a `default` key here. We are already using this `keyguardPrivacy` in the `disambiguate` package.
`Thread.currentThread().getName()` is already used for both `mne.currentThread().getName()`.
Is this needed?
This is wrong, can't you just use the `kubernetes` import directly, to ensure we don't have an import of `k8s` imports in the future?
we can't change this to 200. It's only used from the UI.
Why the change from apply to 5.0?
can this be a `const`?
The same is true here (at least in the other file) - this is why we were not showing this.
This was a bit of nitpicky, but would it be possible to do this by adding `:=` to the end of the list, instead of `:=` to be more efficient to use `games.h`?
I think it is better to do this in `MetricsMetricsConfig.DisableAutoObservabilityMiddleware`.
Shouldn't this include include `stdbool.h`?
I think this should be in a more descriptive name.
Can you remove the space between `go` and `go`?
this change seems unrelated to the current version changes?
This is now public
Do we need to also update the field field?
This file is not used.
I don't think we should add the individual packages for Hydrated RPMs - they are not really related to the other changes here.
I'm not sure that this change is safe. I don't see a test case for this change, and the test case for the `List<=` is expected to run on `<=` (I'm still fine with it, but this test case doesn't actually run on the same `List<=` case).
This one isn't used and can be removed.
The gchar type is also used internally in `value_for_value`. Can this be removed as well?
we don't need to add `Status` here since it is used in other places.
why is there no need to add this
should we use a static factory method here?
This is the correct way to do this, but I'm also wondering if we should do the same for `DEFINE_bool` ?
I would use ``arg.replace('{}', self._filename)``. Also, I wonder if we should be consistent across all the time we call ``conda.pattern()`` and have it take in both call ``conda.stop()`` and then just use ``conda.stop()`` instead.
I guess you meant `GROUP_CHUNK_SIZE` here
Should be ` like `SELECT name FROM principal`, otherwise it may not always be an integer.
This is an API change, but it's not needed to add any validation for the `determineNonce` implementation.
This is a change in behavior. This is the change I had to add.
I think it should be a public method on `SessionSessionCount`.
I think we might want to change it to `repo-msrest` now to make it consistent with the other changes to `repo-msrestazure`
nit: this looks a bit out of place for the `isAnyResourceNameParameter` method. Maybe it would make sense to move those to `getResourceNameUninitializedConfig` instead?
I'd call this `defaultValue()` because we don't use the first one in the map.
Can you move this closer to the next line?
Can we make this a public interface? I would say that `default = up` is not required here.
I think this will not work, as this makes us use the "isClosed" attribute for the culprit, which will cause us to see what is present when we have the "isClosed" attribute
Should be in `payloadHandler.taskHandler.AddStateChangeEvent(te, payloadHandler.ecsClient)`
Can we make an issue to track making _default_ the plugin?
I think this should be part of the API change. We should also add a check that if `AWS_JSON_CONTENT_TYPE` is `True`, this will get confused when `AWS_JSON_CONTENT_TYPE` is `True` and we will see if the classes still are in `__init__`
Why is this needed?
I think we want the term "*round*round elsewhere.
This isn't necessary.
Please use `git grep` from `maneuver` here instead.
This is going to make a difference to this change and should be in next PR.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
@drcrallen would you like to add some details here?
I would have removed the call to `NewStreamFunction` from the `system/common.py` - I'd expect that the `BaseTree.createWeight` could be removed. We don't want to keep the call to `NewStreamFunction`.
The idea here is that there was a reason the file is not checked (and not already). Is it not possible to use `os.makedirs()` in the package? It would be easier to understand if we just use the same `os.makedirs` here as `os.exists()` already checks if there is a `os.mActiveirs()` there.
@jridgewell Is this a public static final?
Please make it configurable, it's already added by default to `scipy.com` in the past. I'd rather not use it in every test file.
nit: I would remove the `1` here and do a `requires_(snapshotMan)` on line 641 above to avoid this
This is probably the correct way to do this. If the default is a new one, then the `addMethodCall` function should only be used once. This can be done by using `addConfigPass`.
I'd rename this to `chown #{user`, it would work easier to just call that function
The module ` upload` should be removed here.
Shouldn't this stay `RetriesFrame` ?
Shouldn't we check here for trace_flags?
you should also add a null pointer here, otherwise it will be a breaking change
I don't think this is correct. I would expect this will be set to true if `AuthFree` is true. I think it's okay to have the AuthFree set to true in the controller. It's not clear why the button is actually not true here.
Why not do this in the future?
The empty line above this file should be dropped.
Line is too long. [85/80]<br>Use the new Ruby 1.9 hash syntax.
this should be backported.
Should this just be `isDomain && $formParams`?
same here, we can have `isNullOrEmpty`
Shouldn't this be `type` instead of `type wsAppManager` since it is already in the context of the package?
Do we need to remove these?
This is not necessary as it will be useful for the new setups
Please add `# TODO: AND the grouping name and as_index: bool = True`
again not sure if this is really a good place to go. This will have to go in another PR, but it might make sense to move it down there.
I think we can get to this `debug` log now since it's no longer used
The `SetTag` has no special handling. You should use the `Origin` as a global instead of a string.
This seems to be the wrong place, it will be changed in the logs.
`isPushContainerizedMethodEnabled` has been added for `isPushContainerizedMethodEnabled` and `isPushContainerizedMethodEnabled` and `isPushContainerizedMethodEnabled` both. Please remove
This is an interesting point of view. This will be much harder to understand. I think we don't need an `if` statement in the if
Should this be catch? (same for the Exception below)
It doesn't look like this is a nil check.
Is the indentation here intentional?
This is not right. The only thing we want is to set is if the s is an instance of `s` or an `U` object to be passed to `newType.getDerivedStateFromProps()`. In this case, we should just make it a `U` object instead of a `U`.
I am not sure this change is correct -- the new version will be 1. Is this change intentional?
I would rename this to `$currencyFacade->currentFromCurrency`.
Don't we still need the TODO about the reported free bytes? (I believe this might have been doing before?)
It might actually be clearer to use `std::lock_guard` here.
This doesn't seem correct, just use `HaRy` or `HaRy`.
Why is this needed?
Why is this using DomainEventProjector?
@JukkaL This will be ` dom_id(plan: %>`
This is a wrong place for h2o_token_t to be a pointer.
The same issue here with the other stuff.
Why the change fromcurrently-played to false?
Nit: remove the `describe` statement.
this is the wrong check for checkpointPath.
Why do we need this `get` function?
I'd use .Debugf() to get the connected value from peer (inbound)
Can we remove the call sites, and just call this once, in the next line?
This was removed because there was no footerText in any place and I removed it.
I'm pretty sure we don't have to introduce any new methods for a long time. It's just a copy/paste issue, but in the future this doesn't have any side effects.
Please revert this whitespace change.
The new config file should be listed here, I think, since the `CABundle []byte ` `
`transpose` should be a `Optional[str]`? We should add some more information to the docstring.
I don't understand how it's going to give you the option to the modified date (for example, the other option is to add an explicit parameter to the UI)
what is this for? I don't see this being used anywhere
Should this go in `NewBlobSaver`?
I think this may need `verifyExecAgentRunningStateChange` now, right?
Metrics/LineLength: Line is too long. [123/120]
Do you need to define this as `int count = 0;`? I mean, I'd prefer to not define an array as the value of `aptr` and just use `int count = 0`.
I think I need this change, I don't think there's any harm in using this as there is nothing there
Can you add an index on the table?
Do we need this? Why are we only passing the entire array once in the test suite?
Again, this will break all the loop on Windows, even though `sprintf(tab.Rows, []interface{}{"", "", "", "", path})` is the default value.
Shouldn't this have `this.` at the beginning of the function too?
It's not a good idea to use a reference to `InvocationTargetException`. In this case, we could avoid using the `@private` object to load it in the `lang` module.
I would suggest moving it to the `config.xml` file, as it's a separate file. We would not have to change it if you prefer. The reason this is to add the new module to `config.types.xml` below would be that the new module can also take a `config.xml` object and the new module to avoid having to change it back to the new module.
Just a small question, do we need `.dels` here and below?
Can you make it a flag indicating or not? The payment channel being set is the only caller of the map that has been found by the caller.
maybe just "No changes were made to the request", and maybe "No changes were made to the request")
This should be `serialized.namespace`, I'll update it here.
Don't we use it in `.cs`?
You may need to remove this line.
It seems we can't use use of `EnvironmentType` directly in this PR, but let's keep it in a separate PR if we don't use it?
This won't work. Instead, the pendingConfiguration.remoteHost will already be null, so we should throw an error.
This will never be true. It doesn't look like an error condition. I don't think we need it. The code in this case is not working, it will fail.
Is this related to the PR?
Can we get rid of this `Text` check entirely?
Is this just a test change? Seems like we may want to rename it to something more clear
I would use `error` instead of `second` since it's the default.
Is it possible to add a new line before each block? That could be a bit more specific, since it may also make the code more readable. I have seen the `s.normal` in the next line.
It would be good to include a node that has no children or defines a `file` key. Maybe something like: `A leaf node either has no children or defines a `file` key`
@deads2k @smarterclayton do we want to make this change in behavior that is not breaking anything?
This variable is not used anywhere.
Line is too long. [91/80]
I would like to have an option in `type ResponseWriter`, as you know the purpose of `Options()` is to be part of a `boolean` interface.
I would recommend to avoid updating the `}` and `is` values (I'm not sure if the `column_count` would be a good idea) to do an `if (clear_count != null) {` check for ` component_count` and only set `list( component_count)`
Why not call them `text` for the default (not the default)? I would also call it `parser.text`, `self.text_type_attributes`, `self.text_type` instead of just `parser.text`
We should probably probably add an `default` or just `case` here.
Shouldn't it use a `NodeSearchContainerBase` ?
`ManifestFiles` doesn't need to be passed in here, since it's an array of `read` method. Also, you can just use `null` directly.
This is the only place where we are doing the `if forward { _ = ClearTombstonesForNewStorage(tds.db, cKey)` in line below. The `if` below is a bit confusing for the keyHash, I don't have a strong opinion on how `if forward { _ = ClearTombstonesForNewStorage(tds.db, cKey), v)` does its own.
what's the point of this timeout? what is the point of view?
nit: should this be `[alpha-]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*]*
This doesn't look right. We should either call it `listenbrainz-z` or `listenbrainz-z` or `listenbrainz-z`.
I think you could add `StopApi` to the `StopApi` and add `StopApi`
Do we need to add the `@bridge` tag here?
Is `key` the correct type?
This is a bit odd - we're not just returning all config options, but still we're trying to move away from this file. What is the reason for this change?
I think you can remove this.
isn't this going to break something?
This is not used, we should remove it.
I think this should be `final`
I see it's used here and I don't quite understand why this change is needed.
@rhtyd I have a better type name? `strtype` is something like "if strtype != "[8", "if strtype is "[8"
remove empty line
this is not a boolean column, it should be `null: false`
I think you can remove the whole variable entirely, it's the last thing that's doing is no longer needed
Is `dataFile` a valid dataset? If not, should it be the same as `dataFile` to avoid the dataset?
Why is this needed?
Also change to `pin-mongos` to match `git grep grep`.
@agramfort : I think this should just use the new header. The current version already contains the new header. The new header is more correct, but it doesn't matter in the current code.
I think `c in range` is the proper way around and can be more informative.
I'm not clear on what `jsdom` means. What if we just pass `jsdom` to this method? This way we could just pass `jsdom` to the `private factory`.
I would move this to a separate method. You can add a TODO and remove the code.
Hmm, I think we should do some validation of `e.deployConfig.PipedSpec.IsInsecureRepository` to avoid a second condition if the `!e.deployConfig.PipedSpec.IsInsecureRepository` is a string. I think it is better to check for the string in the `ImageRepoName`. I would also suggest to use `six.spec.header.SUBConfig(six.PipedSpec.IsInsecureRepository)`. And then I wouldn't think this is an issue, but I'd prefer to not do any of this PR if we want
The name is misleading now. I think that this is a bit confusing and should have the name of it in `tests/v2/internal/key-on-client-config`. Maybe it could be `config-start-s3:[s3.s3_set_bucket_object_acls.rb]` or `config.s3.s3_set_bucket_object_acls.rb`.
This would be a breaking change as there is no way that an assert is considered at all. The same is for `HttpContext.Create()` which does not require any `HttpContext.Create()` and `HttpContext.Create()` methods in the `HttpContext` object.
This isn't used anywhere, right?
I believe this is fine, but it looks like the integration test was to use the generated GCPs version too.
It would be better to just pass `type` through the `BaseMetastoreCatalog` as an argument to `fullTableName` and call it from the same method here.
I think this should be a debug line
I think we should add a warning message here to improve the current behavior and the next time we get an exception
This is a breaking change. You can remove it entirely if you remove it from your PR.
How about using `pkg.Write()` to determine if it is a good idea to make this ` basePath[][]byte`?
This should be `pkg/util/byteutil`.
@ktrzcinx @smarterclayton do you have some ideas on how these are related with the sgvv related stuff are related?
Why not just use `Object.IsEnabled` directly, and then use `access.Error` directly here.
This line has to be in the main file, the `tizen` and `video/mp4` are effectively the same.
I'd have passed a `NULL` parameter to avoid the need to check.
I think this should be `false` by default (and the corresponding code in `setSearchIndex()`. I would think we'll have to introduce `false`)
why not %s ?
Well, I think you can do `)")")"` and get rid of the `else` branch.
Use a guard clause instead of wrapping the code inside a conditional expression.
Why do we need this check? I can see that we have another PR inlining this file.
Unused method argument - snapshot_name. If it's necessary, use _ or _create as an argument name to indicate that it won't be used. You can also write as single quotes if you don't care about it.
why not setuptools to setuptools?
I don't think this is the right fix.
Nitpick: Can you move this to the top of the file?
I am not convinced we should do some checks here, and if so, I will open a PR to remove this and merge this PR once the code is merged.
This is going to cause a conflict in the future (not sure if it should be possible to get a `client` object from the user). This change seems to cause a lot of problems, because the user would still call `flowOperations`.
Why not use `a4adc8f4da9c7ec0d93b50ca5b73dd14df791c0e/stepfunctions-local-patch`?
What is this doing? I don't see where it is used in the PR description.
Do we want to raise an issue about the caller of this test?
Why is this line necessary?
You need to update this variable too.
Should we also remove the file name from the method?
How about adding a `Optional<br>` tag to `resize_image_quality`.
does this need to be added to the docs?
Does this need to be done in `_waitForDownload` too?
se := and below
is it possible for this service to be called from the main build container? I think it would be better to move those models to a new service, and move the one in the "if-openebs" folder, so that the service can't be added to the "return one" one
This is not a big deal and may be confused with some of these being used.
I am not sure this is a valid import for `org.openqa.selenium` but it looks like the imports are only used in `io/prestosql.hive/src/java/org/handle/nio/UncheckedIOException/`
I don't think you need this anymore. It is only working for tests now and can be removed.
Should we also add `config.proxyAutoconfigUrl == config.pacUrl`?
I am just curious, what would happen if we don't have an `invert` & `invert` ?
@alalazo Is there any better way to avoid calling the new copyright function?
why the `toLowerCase`?
This is not correct as `return data` is an `error`, so you don't need this anymore
Can you use guava's docs, please?
Nit: This could be an `IllegalArgumentException`.
should we add cancellationToken to tcs so that its not supported everywhere else?
We can remove this.
What happens if I just made this `# pylint: disable`? Is there a reason not to remove the `protected-access` option?
Align the elements of an array literal if they span more than one line.
Please check to make sure the whole variable is not `null` and the `name` variable is also not present.
Nit: You could have used `apply(Can’t bundle, ...)` directly, which is fine for me.
I think we can just make sure the ex is the same as `this.OnExport.IsEmpty` and throw an exception otherwise it would throw when `this.circularBuffer.Count > 0`
I think we can get rid of this and do nothing in the `poStProof.Read` method, which does not make sense for you.
is it possible to have the list of `ReflectionParameter`?
`//` -> `//`
I'm pretty sure this is the wrong place for the server - is there a reason why the test fails?
Why is this being removed?
The suffix for C++ object-based API is never selected, so this should be "object-suffix", not "C++ object-based API. Default value is \"T\"\n" (and thus, you don't need a flag for this).
I don't think you are intending to remove this, but I don't think this is the correct default for now.
We don't need this change. We're not using a "pack" package in the UI and this should not be an environment variable. It may make sense to use an environment variable to avoid having a hardcoded posting value that wouldn't work for those components.
Since this class creates an issue, you need to pass the registry in to `receiveIsAdBlockerActive`, and then pass in the `process.go` in that class to `close`.
@PierreBesson, I don't think this line is necessary.
@jridgewell any way to specify a test case for this? Or should this test fail with a test case?
I'd rather have this in `Hash getBlockHash` so we don't have to worry about the `Hash getBlockHash` API.
This file should be in the codebase, not in scope.
This seems to be missing some `omitempty` in all the `CLOCK_REALTIME` implementations.
This is the only change needed here.
The above changes are not required, but I'm not sure if it's the right place to put this.
I believe we don't want to keep it to be True by default.
I'm not sure the span is a span based on the element.
The name of the method is very misleading. I suggest `flb_plg_debug()` to be the name.
Do we need to make this configurable?
You might consider adding an `is_many` arg in the model, since there may still be a single source.
I think this should stay `Event`) because the Sabre is already part of the Sabre\Event. I think that's better, and I think we should have the Sabre\Event as a `reportreportreport`.
I think it might be clearer to move this to a common place, like `checkilliillied`
I assume we don't want to remove `URLManager`.
For a future PR, this can be removed now
Shouldn't this be `HIVE_DEFAULT_CHARSET`?
This is a breaking change in API, as we are not going to have a way to handle the value of `null` in this commit.
If I understand correctly, the `User` block can be removed. It is too late for the user to have a valid `find_by`. I wonder if the `before_pipeline` method wouldn't have any effect here.
`--no-lock` is a local variable in the class, so why is it needed here?
Thanks for your contribution. The `serveStatic` is missing the `template` option. `template` is also fine as well, right?
Why we change the type to `Configuration`?
Shouldn't we do the same for all of the input molecule in the constructor?
Do we still need `GetArchiveFileName` on the `GetArchive` implementation?
I wonder if we should have a ticket to get rid of this. The other `ArrowGlacierBlockNumber` is a static field, which is the actual name. The other name `ArrowGlacierBlockNumber` and then it will be the same in both branches.
I think there's an extra need for this check.
This is wrong
I don't believe we are using these default values in this test, since they're only used by one place. Can we have a default value for this default value, then use the default values?
I'm not sure why this was removed.
This is not needed, you can just check if you want to make sure you're not reloading the reload function.
This should be a bit more explicit, e.g. "subject" (with a value to show the return).
Do we want to file a JIRA or rename the file to match the new file?
Why are these not only for eager mode?
Should not be using `[ PMA_hash[Unhashable()` for the actual type of data. If you want to do this, then you'll have a `[[Unhashable()` for the future.
You are doing so many osquery, why not do a full full file at the top
This is a breaking change. I think it's better to move `shader` to `createm` instead of `pgm`.
These lines are not part of this PR, but I think this should be `fromParquetPrimitive(field.type(), stats.genericGetMax()));`
Should this have been moved to the `sysfs_format_ptr` constant so it's more readable (and it's used in many places) as well?
This one is not used anymore, you can delete it.
why are we returning the `IngressClass` class here?
nit: should this be `doc.Redundant curly braces?` instead?
Shouldn't `filter` be `null`?
failed a debug messages?
We could probably return `err` here too
@rhymes this one was breaking for some reason, I added it because `driver.not_to raise_error` was not defined as `expect {...}`
I'd prefer to have this as a method `time.Sleep(...)` so that it can be used directly.
shouldn't this be get AttributeCreatedEventProjector?
You can use the global constant for the constant
there's already a test case that makes this test fail. I think it should still be installing the install history, and I do not expect the test to be there.
I'd move this import up the top of the file.
why not set the node directly?
`More.GetCurrentProcessId()` should be renamed.
Note that I don't think it should be optional here.
I don't think this is the right place for this, since you are just testing the first one of the file.
`protocol` can be empty, remove it from the changelog.
This line was redundant.
@rhymes this is why the controller failed to send a database route without this change, I'm wondering if `deprecation_deprecate discard_flash_if_xhr` should always have `flash.discard`, but I'll let you make the `http` help to get all the other methods in the DB so they're only looking at the `http` route
why is the update here?
Should we also add a `backendConfig` to this property to avoid the need for the new config?
Can we add a new constant for this?
Is this still a `acceptedHeaderTypes`? If not maybe it should be an exception.
I would like to get that in the log.
Can you explain why we don't modify this file?
Should this be named something else?
Isn't it better to keep `iceberg.Files` as `Map` and `iceberg.Platform` as the first param?
This could have been a utility function, not a `try...except` block.
Why this change ?
It seems weird to have a default value here, is that because `time.Duration` is not `int`? We're doing this in the other way.
The `Stat.Path` should be moved inside `addlele.Marshal` block.
I see that this is a copy and paste of the map[string]func() is not used anywhere? Maybe this is not correct?
Should not be needed for this PR, but we should also be removing the `if (foo * *foo*)` condition below.
I guess this is the form we want to use for the `credit_card_form` page? I think it should be `user.all`
Standards: Please add braces to this conditional statement and spaces around the `if` operator.
I believe, this line is the correct thing to do. The rest of the imports are the only changes where the imports are sorted.
Wondering what's going on here in the code, but if you use the `kubeedge` imports you would like to use `pkg/apiserverlite/util` instead. If there is any chance that we could add this as an `int` import in the future, we could add it for a `kubeedge` import or just let you try to add it in the future.
why is this testing needed?
This should go to `zvolWorkers`.
This should go before class Backend\Widgets
Is this used elsewhere, or should it be added to `go-selinux` instead of `selinux`?
"ACTIVE" should go away, right?
Should be named something more meaningful?
I'm not sure that the `Interpolations are supported in lookups outside of a apply block.` seems like it should.
Should this be `panic("NOT IMPLEMENTED")` instead?
Not sure if this is necessary, we should not remove it and just remove it from the call to this function.
why do we need this method? should we just call the name `curl_retries`?
This will break existing users of our own extensions. So the fact that we will get an empty `id` will not be able to do this, and the code is a bit cleaner.
I wouldn't worry about the first time (i) time, i.e. this logic is not needed if the "else" case was a very small value and not a list. I think, that's a better place to put this in the "if" case here.
What is the reason to change this interface?
why is this being removed?
If this is not needed, then set the namespace and `azkaban-k8s-secret` to `true`
Should we be doing the logging check here?
Can we put this in bios-keyboard.md?
Can you please update this to `certFilters(filters,Uid.getTimeFilters())`?
It's a little confusing that this is actually `Joined` but `Joined.It's not really the same as `Tools.ContainsKey(toolName)`.
If we're changing this, let's also rename `--v` to `--Content` to be consistent with other methods (i.e. it's consistent with other methods).
I am not sure if it is worth adding more things to `RemovedInInvenio23Warning` as the default here would be `True`
hmm, we do `self.build` and `self.build` ?
I'd rather this test that the `stat` test fails, as the `c` test fails to run (e.g. `test_util.py`, etc.), and `test_util.py` tests that fail.
Please leave the spacing or add a trailing space
nit: remove extra newlines.
Please add a blank line after this one.
Why is the C# needed?
@Pearl1594 do we need to make sure that all nodes in a file are created when the field is not added to the base class (see line 276).
can't we have a IntegrityError in all the tests instead of usingvising this package?
What do you think about moving this to a separate method, so that the `std::recursive_mutex` can be reused via `NotImplemented` directly?
nit: remove the empty line?
This file doesn't seem to be used anymore
@agramfort @xiaoyuyao, you can also update the `producer` attribute to use `String.format` (which is what `producer` is).
I would have made this a warning on my local testing, and make this a warning in `pkg/api/v3/stderr` so that we can get it properly.
This is a bit vague, I think a bit better would be just to check if `errs > 0` instead of doing the right `errs.Also(ctx, context).(*PullSubscription)`
Is this just for testing purposes? It seems to me the reason for it is to not depend on a version that is the first one in the list of applications, but for example it would be better to make it configurable by the time we call `CURRENT_for_count()` and call it `count_for_count()` to call it in the loop (if needed) and have the code set it to 10, rather than the version.
Why not `trieRebuildAccountChunkSize`?
Why not `path.url`?
This field doesn't make much sense to me, and I'd suggest renaming it to something like `isBlankPath` or something like that
why `sw.toString()` here and below?
This is a bit weird, why the previous one was `Beamn`?
This function is used in many places, and it seems we are adding a `AppendHistoryNodes` function to it. Should I just call it `AppendHistoryNodes_`?
This is the fix that was lost in the previous PR.
I'm not sure we need the `Hack_openvpnBinaryCheck` function for this? I don't think we want to have it here anymore.
Shouldn't this be `validatecha`?
you'll need to change the ``-pants.hash`` to ``-pants.hash``
I'm not sure this is the correct error. The `Save()` is used in `CreateCreate()` function, so it is not needed.
Was this a "ClusterInstallCluster" intentional?
I am fine with this PR, but would this work with an external cache?
Does this need to be added to the `addring` package as well?
nit: you can remove `i18n` from the generator
This was added to allow both the `provider` and the `viper`.
This would break the functionality if `noteIds == null`, right?
I think we should just create an issue for it.
All changes in this file should be reverted.
Can you confirm if it's not a typo?
What's happening here in the first place?
@cvializ I think that we shouldn't have to change this for the ULS side effect. I'm not sure what the best thing to do is. Can you explain the motivation behind this change?
do we expect that the p is a p element, not a p?
The fact that I think `messageTimeout` is not used in the example example. We should also make these two numbers consistent across all our other parts of the code.
why do we need to pass `AccountID` into `Account`?
I would rename it to `TPlanNodeIDKey`, its more clear.
I don't see this used anywhere?
I think this is fine. It was never happening but it's always `False`.
This will need to be refactored to use the closed size for the target.
remove unused imports
could be a warning.
This doesn't look like it should be a constant.
Is this field still needed?
This is the only change that's needed in this PR, because the `Set()` function is now no longer called on the `newWorkingSet`.
This should be log.info
It's better to put it in a constant.
(style) line over 80 characters
I would suggest to use the same name. `MediaStore.partUtil.MEDIA_TYPE_IMAGE)}` as a class name. So, `ABAB.partUtil` can be used to convert `hudi-testing-generated/common/` to `hudi-generated/common.hudi-generated`.
This is not correct, since `_` is not being used anywhere else.
should we change the test case for the new error message too?
Should we be setting it as a 400 instead of an integer?
Should the test also fail on the connection format for the new task?
I'd remove the else part since it's not related to the issue.
Just confirming that you added the text to these two?
You can also do `Array.new(:count)`.
I wonder if it would be a little more readable if `BoxSet` is a hard-coded value.
nit: `// don't include session for unacknowledged writes.`
I don't think the `NullValue.Value` is necessary anymore?
I don't think it's necessary to keep a variable. The old one is better, but this is not an option, and if you really need to keep it to the old one, you need to use an `AzureData`, you need to update the old one.
This is actually a bug I found?
I would use a `Desktop[0-2]` to make sure it is not used.
could you remove some spaces between d_temp and d_oy_val ?
Why did this change?
`process.exit(error.exitCode)` is a better exception than a better exception than a better exception, we may use it to determine if the script is in a non-zero path or not.
The partition partitioning could still be the partitioning state (since its not the most important). The partitioning should probably not depend on the partitioning state that is the case.
Why not use the `Parameters.Keys` variable directly?
This might be better as a class method.
It would be nice if you could use `InputInput<T>` instead of `dimensions}` here, but that's more important than `dimensions` (and maybe not, just a `*`).
why delete this?
What happens if we get the credentials not found (i.e. when error is raised/credentials or not)? This means we get a debug output for the error.
This is an interesting situation where we could set `Underlying` to the type of `Dataset.get`
We should not use `merge.getrequest().getName()` in production code. I see that in tests the other package, we can use `updateToproxy`.
This is not really a blocker than the `--script` option, since we are not checking for calling `chmod u+x \"` now.
Same as above, why change it to return type?
I would make this return `Optional<T>`
Is this a good idea? It looks like `MetricsConfig.fromProperties(table.properties()));` is only for `table.properties()`.
This should be the right one to set `set_empty_to_null` to true when `arg == "--java_primitive_has_method`.
Can you use type hints instead of `StackName` to avoid duplicating the code?
@adamjstewart Should this be `[Rlob]` instead?
These are the only tests that are in the UI so that they can't run without waiting for every single cycle.
What's the purpose of this `Objects`?
Do we want to have some sort of code that sets this? I think we should use the `aria-valuenow` class instead.
This should be `addOption('file', 'f', InputOption::VALUE_REQUIRED, 'File')`
This should be `API Gateway`
this is wrong... it means there is no path to the constructor
The previous code was much more descriptive than what you're trying to do, but I guess it's not too descriptive.
Is this still needed?
I see you have here but not sure why this isn't necessary.. Is this a breaking change?
Please add the same as "id" in the schema.
Can we add a link to this to the PR, or a little little more detail?
This is wrong. You can just pass through ccache or have the libunwind if you're only using it with `libunwind`
I wonder if there is another way of doing this. It doesn't make sense to have it here to be able to check for null and empty string.
In what case `address` is `nil`, `source_address` and `id` are `nil`?
Is it worth logging for `exceptionally`?
we should also create the `getPath` object in the constructor
Why not just delete it?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
you could use a more general `time.Sleep(time, int, int, int, int, int)`
This is not really needed, since the default constructor is already `null`.
`_targetName` is now an `AtomicDictionary` so we can get rid of `ConcurrentDictionary<Address, AddressNonces>`
You are not using the `CreateEventHandler` function, which can be reused. Is it just for the `boolean` package? I don't think we need the `CreateEventHandler` implementation, so we can just do `CreateEventHandler(this)` on the line after all the others.
Nit: I think it would be more readable if we could move this logic into `if (eventEmitter && !changeStream.isClosed()) {`
I can't find the `filename` in these files
Should be part of `assertEquals(policy.Spec.Egress, []api.Rule{{Action: ...)`, right?
`ServiceNameMappings = new ServiceNames(serviceNameMappings);`
You can use `target` to avoid the use of `target` here
Is it necessary to set this to the correct server?
This file is no longer used.
I don't think we should fix the issue here.
nit: `final` and below
if (errorRowCount < cond->getOptionalInteger(0)) { if (errorRowCount < cond->getOptionalInteger(0)) }
This is the only usage of this method I have seen in the past, but I'm wondering if it would be cleaner to make this a `Path` method that checks its value and not need to be used at all
I'd prefer if we could use `resp.getresponse()` to get the full name of the response and use that here.
Isn't it a good idea to use the same constant in a local local var?
@jridgewell I guess we'll probably want both `@param theKey Either {@link Keys#SHIFT}, {@link Keys#COMMAND}.` and `@return A self reference.
This import seems unused?
I think these should be renamed to `SamplesCanner_index_id` and `scanner_index_id` and `_get_index` to be consistent with the others.
@Jjagg - Doesn't this mean you're not actually doing a "shouldn't the driver be created in all contexts?
This isn't necessary because we're already sending this on the `user_has_active_subscription` key, but the current client doesn't have an `if` condition.
This change is unrelated to this PR, but I think it's fine to keep it here for now.
Why these `type(m2) ==` statements? I don't understand why you need the `type` here, but the next line seems to be the opposite, which is not the case anymore.
`TOKEN` should also need to know about `.TOKEN`
Is this on mobile only?
I would prefer if these were `certs`s instead of `certs`s.
@lilleyse you have to add this new column
I assume this would be a breaking change, but I'm not sure. It's probably worth adding some extra spaces here.
This is not used anywhere.
What is the reason to use `var/tmpostree-deltaobj-XXXXXX`? Is it not needed?
I wonder what the plan was to remove this line.
I don't see why this would have failed - it would only be called once (on the debug level)
Should we be doing this in the `config_validator_constraints` list, to avoid the `call` in the `configconfig_validator_constraints`.
the parameter after the doc.
I would prefer if these had been imported before we try to remove them
Hm, why did we have this `null` if it's not?
Why is this changing? There is no reason for the test to be aware of this change.
This is unrelated to the PR, but it seems like something that should have been done in the next PR.
I think this import can be removed.
Let's use `@since TODO` for the future, but can you also add `nio.prestosql.plugin.Indentation.sql.Boolean.relative` as the default in the future?
I think we should move this to `refresh_access_token` now that we can skip existing servers, even when we have the same user (like in API), so we should not add it in this PR.
If we don't have a keys for the `custom_precision` we can use these as arguments instead of the additional parameters.
Are these two options required? Are these options guaranteed to be different?
this should be in the same line
This should be `///` since the implementation of this is a implementation detail.
Why is this `filter_types.go`?
Is this going to make the vendor not working?
this function should be moved to startUnit()
This is now an API break. Please add it to the `GET_CANVAS_URL`.
This is the only change that affects this file (and it is actually not strictly needed), the only case where we're not setting it is in a directory that will be the actual one.
This isn't used anywhere, and you can remove it.
What is this change for?
This can be `static`, since you have the "Could not ...", the exception message is not clear.
Shouldn't there be an if statement here to indicate that the first 2 values of `UNIX_PACKAGES` are 0 ?
This doesn't seem to be right. How about instead making this a `Match to avoid the MongoDB's lowercaseFields`.
I would keep the `h3` since I'm not 100% sure how to deal with it, but it's really a minor nitpick.
We should use the same constant for the test, I think
Does this need to be a part of the if clause?
what happens if we moved this line to `scheme` above?
this should be called `--stress-test LIMIT`
Why did you add this?
I think it's better to set this with `@Entity` since it's the same operation that it's in a row
Why `Enable` and not `GetTelemetryURI()`?
We have a unit test here that `encode_multipart_form` fails. We should always find the boundary header if it is actually not `None`.
If we're not using this anywhere in the repo, do you know what we should be doing here? I feel like the use of this `registry.Register` is pretty trivial, as it will be more readable.
This is a bit awkward. Why isn't the `while (true)` needed for the case that the value is `true`? I think that might be more clear for the `while(true)` case.
Why is the 'verify' needed here as well?
why not pass it as an error to `err` here?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
@yicken this change is a bug in the PR.
It looks like we're missing a period at the end of this line.
should also be `'StringUtils.get()`
Should we have a `System.Mono.distributor.disabled` that we are going to use for the file and we're still using these as an attribute? It's a little confusing to see what we use for.
This file is causing issues with PEP8 issues.
Can you explain this change? I'm not sure what the best practices here is.
I don't like it much <msg> I would suggest using a configurable `split` as the default.
what does this do? I mean, this will break the test
This is not needed for `exportExpandableRowHeaderColDef`.
I don't know how to get the cachedPath from cachedPath. I don't think we actually want to get it from the cachedPath from a cachedPath.
I don't think this is necessary, `aria-labelledby` will work for a non-zero value, so we don't need it.
What about `Transactions.verifyFee`? Why not just check the returned service and ignore the error if the validation doesn't exist?
This was an NPE I'm not sure. It is possible to get both a constant and a constant. The value can be used, but if not, it should be a constant.
as long as i understand the logic here, but I wonder if we should not make this change in `@params` but rather use `.reverse_merge` because of the `#define#reverse_merge`
I think it would make sense to move this block down into the `else` clause
This should be moved to the BftExtraDataCodec class
@bdukes can you explain why this needs to be removed?
Add `@param` annotation here
This is wrong. We don't have a null pointer exception.
why removeTables?
If we are going to take advantage of lifetime and manage, why not use a `Code` for the call to `PrefetchAfterAfterBlockRetrieved`?
I would recommend to keep the `get_class()` method and create a new method (as in the `config` class you can call this method)
What do you think about using a constant somewhere for the service?
Does the `results.passes` change the way we did it?
Is there a reason you chose to replace " HAVE_CONFIG_Hrm" with "global_CONFIG_CONFIG_Hrm"? It seems to only be one of the changes in the PR.
Could you remove this?
Can you rename these lines to `gitC_INT_FRACTION`?
Do we have any tests for `vertigo` here?
This looks like a leftover from a previous PR, but I'd like it to be `lstrip()` instead.
I don't think this will work. The purpose of that code is to have all these in the `argParser` function, which will allow all code to be called without a `null`, so it should still be necessary to have them in the code.
I don't think it should be here. The `users.new` status code will not be found in the process, but the error messages are not displayed in the process. You can't do this without having to write it as `@:2` because it's a no-op.
No need for this change, since we have already done the refresh on the client.
Should we use `*` instead?
The lock here should be applied.
Are the changes in this file related to the changes in this PR? It's important for the PR to rephrase the changes, but I would recommend renaming to `util.isToken()` to avoid a more proper name?
I'm confused by the PR to get rid of these. If you're not going to make the tests more useful and I'd like to see an issue about why this changed.
It would make sense to have `Dispose` be called from the `Collect` module, but it's not doing anything useful for the metric type.
These should be `[cosmetic]`
I think you don't need the else here; this function should only return 0 when the ifdef passes
Should this message say something about "generic file"?
Is this TODO still required?
is this necessary? shouldn't it be the `url.execCommand` property?
I'd prefer not to use the global `AUTH-URL` as the default. I'm a little concerned about the naming conventions here.
This attribute name is very confusing to me. What about "DD_CONVENTION" or something? It's just not a component, since it would be a number.
This is the only place where we need it, since you can't just do `return getters.getAliasProp(alias_, *prop_);` directly.
Can we make this configurable?
Since `gt_masks` and `results` are effectively not created with other `gt_masks` keys in this PR, I think this should stay
if we do not change the value of `info.Description` we should also check the updated value.
This is very strange...
This is going to be a very handy refactor. If you do a message you should use for `/chunk/{address}"` as well - but you can change the default to `s.hasChunkHandler`
I am a little confused with the `.Get13` file, could we have one or the other, and then one with a new `.Get16()`?
If this is an event, maybe we should change the name to `mini_approval`?
Can we make sure this works in all the new functionality?
I am not sure if this is right or not. I think if it is ok for anyone using it, it seems like a bad practice to just show an error. If it's going to make the code easier to read.
The usability of these changes are in this PR. They're all about `ExtensionMethods.cs` and this is the only use of this method.
why are you changing this?
Would this break if the `address` is `nil`? Should the client be the first message in `log.go` (or `s.Addressbook.Put(address, addr)`.
Should we also add a todo to make all errors errors errors run from an older version of `__init__` method?
This is probably the only thing I'm guessing the "##" command is being written to wherever it changes. Maybe we want to keep it as is (not sure if we need to do it now).
I know it was a small typo in the original review, but can you fix it for the time? Thanks
Shouldn't it be `self.config_filename = kwargs.get( kwargs.get( kwargs.get( kwargs.get( kwargs))`?
I would move this above the `padding` block, as it is called twice, but not on the other hand.
Why not use `Clare` here?
Can you use `except issue` here for consistency with other parts of the code?
Shouldn't you be able to pass the `size_t i=0` instead?
I think there are more places where we would call it `addressOffset` and then we would call it `super`.
Why are we adding this flag here? It seems more natural and more important to have the same flag as before.
please also do `subscriptions: true` right below.
This file should be deleted.
Avoid rescuing the parameter name in the parameter list.
Why is this not a `Stop()`?
This seems odd, but we could get rid of the `FApiClient` parameter and `UnknownAsync` directly.
Why not just use `numba.util.bytes`?
@mrajwa everyone who wants to use this function in the code, I think, it's a good idea to have it in the `touch_point_init` and not the use of it here. Can we have a more general ` rename_touch_point_init`?
I'm not sure I see the point of this change. I'm assuming this change is not related to the PR.
So this is an existing function?
nit: use an enum directly
Can this use `MarshalAs(IMethodArgumentsToLoad);` directly?
I'd call it `lint` not `lint`.
I would make the `@offering` index an alias and then reuse it here, so that it is called everywhere else.
Please replace `FeedItemPlayed` with `close()`
Is this the only place it's used in this file?
why do we need this for mined mode?
this method should use the same name as the method in the `project_analyzer` method
This was a bug in the AVR test which means the tests won't actually run.
you could define this outside, the dist.get_rank() should be called directly in the next line
These tests are all unrelated to the test commit
Why are these two lines needed? Doesn't seem to be used anywhere.
Do you want to test for the number of rows in the `system` format?
@gustavonalle do we know why? Maybe it should be an overload of UTF8 and UTF8Encoding, but still I think it would be better to use the UTF8Encoding with the default value for UTF8 and UTF8Encoding as the default is not required at all.
This is still a valid method name, maybe `OutboundMiddleware`?
This could be a private field.
should this default to `false` or will it be set up to `true`?
We should be able to remove the whole `logParamsMutex.Lock()` call here as well.
Why are we adding a new data_encoding? Is there a way to make it work? If it doesn't, then I would also suggest to add one of the new data_encoding that can be passed in.
Why do we need to add this to `AppDomain.CurrentDomain.CurrentDomain.BaseDirectory`?
So this is no longer necessary?
Shouldn't we keep the existing `Privatefs` field and replace its fields with `Integer`?
Why is this not needed?
This is probably better named `transformLogProvider`.
This can be simplified as `Rails.instanceinstanceinstance()`.
Why are we removing the `~3A+` prefix? Is that going to work now with other packages?
I think the error message should be "InitRetryTask" instead of "InitRetryReplication"
Can we remove this unused import?
Same here, should be `if img_norm_cfg: %w[None, ...] / std`
`?void` is also used by all other `string|null` methods.
Why are we making this change?
@caitpelly this was a mistake. It looks like `/bin/flock` is a bit confusing to me but it's not really the right place to put this change.
Why are you removing this?
why do we need both?
Can you also move the goimports in the `go.opentelemetry.io/api/trace` imports?
I assume these changes are for a while
in this case, you should check that `self.data_spark_columns` is `None`, right?
I think it's fine not to do this. "is a Pandas DataFrame..." should not be used"
I don't think this is good. This will result in a very bad situation, and I'm not really sure how to fix this.
I'd prefer to keep this, because the `client` is not a very descriptive name, and not a part of the client.
This looks like the wrong place for this.
remove this, and add a TODO above.
we have a `_settings_backend` that does nothing with it, but `settings_backend` still takes an empty list, so we don't need to copy/paste.
please align the entire loop with the variable
Should be `noop` now?
this file was for testing purpose, only tests
Maybe `promise.amount` is better? Or is there a way to get a "MYST" promise?
Should we add a `controller.Controllers` field to allow the controller?
I'm not sure if it is worth having a `opts.` prefix here?
`cur_idx` is only used in the `argparse` method, so there are no changes in this file.
I think it would be a good time to make the return type optional here.
This looks wrong
You are doing this - this might lead to errors for errors that have been not valid before.
This is just an optimization. We don't know about the existing `Getictionary<string, object>` property of the `Getictionary<string, object>`
This is the fix for #2478
Can we remove this empty line? I see we already had it in the `BaseFileScanTask`
Why not just return?
I wouldn't modify this, but we shouldn't have a way to override the default value for `w.sourceExistsExists`.
I don't believe we need a new loop here?
@jcotela It was probably a mistake before, though, @mramato ?
I think we have an explanation in which function this function returns. If we want to change this function, would that change make the name more readable?
This is a nice part of the PR. It's not a big deal, but it is better to have a separate file called `crypto2`.
What is the rationale behind checking for `||` here?
The length check in both cases.
@kring @jridgewell can you verify this is going to change the behaviour in the future and what's the point here?
Can you please move these log messages to `panic `fmt.Sprintf` too?
Can we move this to a new `cancel` interface? Seems like we should be using `error()` here, too.
As a side note, this class should still exist.
I'm not sure if it is the best place to put this logic in `_marked_apply_state`
Should we add this to all existing files?
doing this in the constructor is really needed
We could probably just set the `ReadonlyPaths` variable in the constructor and then call `config.MaskPaths = maskedPaths` here to avoid the need for the `Readonly` variable if it does not exist.
Why is this being removed?
Do you still need this? I would say it's not used.
Why is this change required?
This seems unnecessary, as it's going to change the method signature and it has nothing to do with it.
If the value is `nil` then there is an error. The `else` statement below will be redundant.
Since we're removing the `aws-global` fixture here, can we just delete the `aws-global` fixture altogether?
Should we consider a `dict` here?
This is the only place of this call that was used. Is there a possibility that the `ticker.C` call will still be called before this call? In theoryory call I think this is not the case here.
Why can't this just call `NewTest()`?
If you do this, you'll want to use the `Next frameFilterCommon` instead of an `Next frameFilterCommon`
Can you please also add a TODO to add this to the docs? (Also in the docs?)
Can we just use the C# to enable this by accident?
let's make this package private and use that as a separate PR
I'm not sure if this is a good idea. It's not a blocker.
I'm assuming the previous line will get removed?
Maybe we should add a new `isNullOrEmpty` annotation to the `Buildwriterlock`?
Seems to me `objp` can be null here as well, no?
This could be a constant.
We should add `.List` to the top of the file and add `configtypes.LengthList`.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
why change it?
I guess this is a bug?
Can we add an annotation to the constructor? I don't think it is.
Does this need to be a struct struct? I thought I'd add it to the `core/rest-store` struct.
Please use `from ..(msg, ...)`. It's better to use `from ..(msg, ...)` (same for the other `if isfinite` block) for this file.
I assume these values should be changed to `Beamort.py`?
Use a guard clause instead of wrapping the code inside a conditional expression.
This makes the other changes clearer to use `dataset` and not `dataset`.
I don't think we need it, if `serverType === ServerType.Standalone` is false, we should use `this.servers.isReadable` check instead
I would keep this here, it doesn't really need the other changes
Should we have a test for `WebRequestIntegration`?
The change in the docs seem to be the right place to put this line in the new file.
this should probably be a `stastics` constant, since we only support it for the other instances. We should probably remove this `stastics` property
This PR is merged and I think this PR is fine for now.
Can this be replaced with `lib/server/max_test.go`?
This function is only used on `get_node_first_ancestor_of_type`. The only caller of this is `node_ancestors` which is not the right place to put it. I think this function would be a no-op and would be better named `Optional` for that.
Is this a BC break? We are trying to keep a test for a request and not a test that's loaded.
Would you mind to explain why you did not need this? We have 2 ways to make it more obvious that the model is `kill` in the UI.
I think this should be a warning, because the user might be able to access the exact field name from this function.
Why is this required?
how about `trace` or `debug`?
`GameInfo` is not set here, since is the flowFailMeter set in the config setting.
This is a breaking change. It doesn't look right to me. The `isValid` should be used by `isValid()`.
This enum seems to be in the same PR as in the remote, but not in the browser.
Shouldn't we just use `e.keyCode === 32 && browser.tizen)`?
Why is this function not named `deployment.go`?
@Path is not needed. this will cause a lot of new tests to fail. In general I think it will be useful for other users to have `Path` in the future.
I'm not sure that the problem with the fix is that we want to make this change. This is a very generic way to use to have a flag to indicate this will be a problem, and not a problem. It might be a problem with the `Switch` method on the `make_shared` that the `SolvingDriver` is not going to be used, and it would be better to just have a static method on `make_shared`.
Why are we passing the flow object as the parameter in this method?
this class has the `Url[]` class, not the class
this was just to prevent some confusion.
Can this be made configurable?
This was moved to `verify()`, not here.
Should this be a specific exception?
I don't think it makes sense to have this constant inside the `./` action
could be one line break
Why is it `exec > >(exports)`?
I'm not sure we need to introduce new function for a `getParameterByName`, as it will only work for Python 2.6+ now and could be a `window` argument.
why was this not needed?
The first test I have to do is make sure you run `nextFetchDate` and `now` twice, but you're not doing so.
`__cadence_sys/"` isn't used?
remove empty line
should we throw an error here?
@jridgewell Is there a better way to make this change? I mean, the `to_BASH` is still in use in this context to be able to get rid of the `BASH`?
Why this change from a public API? This class is used in a few places, and I don't see anything using it.
This is not necessary, you can use `| Exclusion| ExclusionList[0]` instead
use the "block_processor_verification_size" format for fast_bootstrap
This is imported, not used
I assume this works, but I can't think of anything better?
This is now `HOST_X86_` so should not be `HOST_ARM` here (and it's the other other).
This is a leftover from my previous PR, but it looks like you're using `id` here. We are already doing the same for scrub. It is probably best to remove all the scrubbed. I think that is a leftover from scrub.
>fastdds [](start = 36, length = 7) Does using it in a separate thread for the same thing as the module name? #include <rtps/builtin/data/ProxyHashTables.hpp> #include <chrono> #include <chrono>" #include <chrono>" #include <chrono> #include < Httpposed> #include < List< List< List< List< List< List< List< List< List< List< List< List< List< List< List< List< List< List< List<< List< List< List< List
Please remove it if this is a test
I'd move this check to the top of the file...
I don't think there is any need to define a new path in dev.go
Can you remove this line?
nit: "which may cause compatibility problems" sounds a bit more natural.
Is there a way to get the `logsDir` from the filename? If not, I'm not sure it should be the right approach for these.
This was the only place where we use an empty list in the apiConfigs, but there was no other use case, so I just left it.
What about the `reserve.php` prefix?
We can't change this in this PR. The test is passing this on the same line as the `UnitTestExcludedVolume.py` below.
We can also set this to `SERVE` in the config as well.
Isn't this redundant now?
`manager.PathExists()` shouldn't be necessary here since we only need a bool.
Do we need this for `internalAMPContainerID` (and `gaPropertyID` both here and in `internalAMPSupportedID`)? The only reason this is to use `gaAMPPropertyID` is if it is used, but we don't have any changes to it (and other files below).
I'd prefer a single diff on the end of the lines. We don't have a single letter at the end.
What's the purpose of this check?
Isn't this the same as `1.10.1.10.1` ?
I'd make this an `error + 1` instead, since it's used only once.
I would prefer to have a separate service for this, but i guess we could add that to `RunV` for the same reason.
I think `cloudformation` and `AWS::CloudFormation::Stack` are the same as the API.
This should be a `strconv` property. It can be misleading.
Why is this import added?
Why not keep the URL here and only do this if it's not a valid container?
Why not have this `originalRequest` set on the constructor?
I don't think it is a good idea to add a new type of `GrpcGapicRetryMapping` to the end of `GrpcGapicRetryMapping` but I think we should have it only for `GrpcSizeMapping`
It might make sense to log the error if the error isn't "out_es". This is the only time you get a log at the end of the error, it is also the same problem.
Just to make sure you have a specific reason for the Tree containing here.
should it be Integer?
Maybe we should test for each request request and test for each request request here?
This is not the same as the `if hold is not iterations` check above. The `for` conditional should be added to the `if hold` condition.
Indent the right brace the same as the first position after the preceding left parenthesis.
`startSession` needs to be updated after the `session = {}` below
Could you explain why this error happens?
I think the answer is not needed.
Does it make sense to keep `copyCommand` here as well?
Should the type name be `this` to be `this`?
I think the menu item here is not needed when menu is disabled. I would remove the global menu item item and use it instead.
I'm not sure why you don't use `errors` here...
Can we use the `RaulFraileData` here instead?
This was a problem because we have a `RemoveNodeAddresses` function in `infra.RemoveNodeAddresses` and the `Name` function has no value.
(style) code indent should use tabs where possible
We can probably not have another name for this, but `AccountMaxVersionPrefix` sounds like a lot. What do you think?
Should we remove this and add a check in the end of `ap extractedpace` and `apinamespace`?
This is a change in behavior, but I think we should make sure that we don't do this... `error_msg` is still in the error message.
I would add a license header here.
I'd rather we just make this one part of the default `ipVersion` and `ipVersion                ` to make it easier to read...
I don't know why we're still giving `MultiDomainHost` to be the right thing. It would be better if we could just remove the `_shared_authauth`, and then use that in `src/config.go` directly.
This is not correct. It means that if we get more than one version, we will still get this version, even if the user already has the same version.
`r` is a bit ambiguous here, maybe `message_parts` or maybe `message_parts` would work?
This is not a test of the tests.
why did you change this? I don't remember why it was here, but why did you change it?
Should this be a function (or a static static bool for its use case)?
I think we should make a copy of the service package. I don't want to have to create new service.
I'm wondering if this should be `\`, not `\`.
This is what the trouble was doing to fix. I think that we should just remove the `--verbose` option here.
I think the `top` here is a little too generic, because the `err` should be always set to `true`.
I'm not sure if this is the correct version. The protocol version is used to communicate with Cassandra cluster, not distinguishing the protocol version from the UI.
Do we have tests for this now? I think we are not testing this anymore.
I wonder how this would work?
composite_root_resources = [] if kwargs.get('composite_root_resources'):
This can be `final` if you remove the public constructor (and the `final` declaration declaration)
This is not related to this PR, but I think the idea here is that if the output was not found, that `Output` will be nil, then we will still get the output twice. I think there is a good reason, but it should be an error.
Where is this scope coming from? I would keep it as is and keep the old one as it was.
Please add a license header.
Is it possible to use `fs::move_stringPrintf` here? I don't think we want to use it.
I don't think it's needed to add this.
why not `issible_galaxy_install`?
should use Shopsys\FrameworkBundle\Model\Pricing\Price here to avoid loading a list of parameters?
Why do we need `useSelect` here, since we use `use` in `args`?
No need to do this on line 265 - just do `g.auth.is_active`
is this still used?
`repo.ListBranches` is only called from a `Platform` object and can be used in both places.
I don't understand why you deleted this. Can you explain?
`a => a.Key != (key ?? string.Empty)`, it would be nice to also have `a => a.Key` as a default. I think you need to check if `ame === $null` and `ame === $null` as well.
What's the purpose of these options?
what does this change do? Does it work without it?
Should it be `useDefaultSources` instead of `FromDefaultSources`?
The old method doesn't seem to make sense, because we are trying to remove this method. Do we need to add `SUBMIT` to `BIND`?
this could be a `true` to fix the test.
why do we need a separate hash here? This seems a bit of trivial to me
This is a bit odd - can you put `KMSAliasPrefix` into `argate.go`? (This is what is meant to do in all places)
Should be a sort of constant?
@stephentoub do you think we should move this into ` flatbuffers::IDLOptions::kJsonSchema`? or should it be called ` flatbuffers::RestrictSchema` to match some other place?
`toLowerCase()` is a very generic name for this change. What do you think?
Sorry, I have no idea what this is doing. The existing members are supposed to be the same, but the existing members have a "hmm, not the same thing, so I'd suggest renaming the variable to `PoolingParameter pool_param`.
I guess it was just to say "does not exist in ECS API: returns ECS tasks desired to be running by a service."
this should be `t.Log(err.Error)`
Can you please elaborate on this test case? The reason for adding the target is not the names of the test.
`ExpressionExpressionDetectionFilter` doesn't need to be in a single row.
remove empty line.
Should we also include the span opened for RASP.
This seems a little out-of-place on the machine to call `_super().__init__(path='build');`? If so, you need to make `_super()` public.
Why are you removing the `:ic`?
Please add an `DestPorts` block to the top of the file (also `DestPorts`) to keep things simple.
I would prefer `POSTPOSTPOST'` instead of `failing` because I don't see a good reason for that.
This should be more explicit about how `first_digit` and `second_digit`.
Please don't add new migration in this PR, but just wanted to confirm :)
Please rename this var `push` to reflect its behavior.
This is the only usage of this function. We should remove it from the plugin's build file.
This file should be removed.
This could probably be refactored to use the enum constant in the variable name
I think we should use `NewAspParser` here, as we are already doing an `NotImplementedError` check in `pkg/core/BuildState`, since it's not part of the API anymore.
why not just inline the subclass? it should be a subclass.
Please don't add `@Deprecated`
Oops -- I'd like to avoid doing this in alphabetical order, but this file should be sorted in a separate PR.
`checkArgument` could return a `""` object instead of a `""` object.
Nitpick: I think this should be `running/ddev_test.go` and `running/ddev_test.go`
can Devnet be a DevnetConfig?
I'm wondering if we can just change `Uploading` to `Lade hoch` in the other PR, or we will be able to just use it in all other `sulu-dev`s
Why is this in 00?
Why are we removing this?
this was the wrong place to put it back
"if present the failed failed"
This change is not related.
might consider using the same package for both sides?
Was unused?
If the data is zero, this needs to set zero data?
What is this? Does `CancellationToken` return an array of `CancellationToken` to get the value? I think it is the only usage of this method which is called from `CancellationToken`. I'm not sure if this is correct.
This is the only thing that was passing in the `newType()` method I assume.
Can you add an example what is actually actually checking here?
shouldn't this be `@Logger` ?
It's not necessary to return `nil` on the previous line here, because there may be other callers (e.g. `HandleError` with `nil`).
isnt it still necessary to make these 2 constants in the `sort_values`?
Can we also include the config in the config?
This should be a constant so it's clear what the signature does.
This line is the only change required.
Not the real issue, but if it's not, I would suggest `return nil` or `role` instead.
I would prefer `s/scalable/scalable/scalable.erb`, `s/scalable/scalable` or `s/scalable/
Please revert the changes in this file.
I think we should use `TTLDuration` instead.
Do we really need to keep these private ?
`the hook` (and the below) should just be `the hook` right after
I don't think this variable is necessary, if `priority_high` is used and if not, then `io.prestosql.plugin.deletedeleteSchema`, then just `io.prestosql.plugin.deleteSchema` can be used in a more general class.
I think you should remove the 'password' from this and do the 'is' only for the 'is' if no one else (especially as the 'test' is already in the 'is' case).
This is only used by other methods, so we need to use the existing one here.
The indent of this whole if statement is off by 2.
This is the one place where an Project ID is raised
Nit: this variable name seems inconsistent with the other `IdentityCheck` in this file.
I guess if we can save the `FormError` as well, then we can just make this a warning since `FormError` is already added to the `FormError`.
I don't think you're right, `ask StreamKey` is still used and can be removed. The `KeyedStorage` call here is here because you do not want to pass that in.
If the description is the number of client to use the insecure, kerberos or token. This will be the default for the CWD. We should add a link to the CWD.
also needs to add `:show` here, too
This is the same name as in `TaskLocationTuple`. You could use it to generate a `Method` class with an alias in the name.
I would change the default to 0 if it is the default
Why do we need these changes?
nit: remove extra space
Why does this need to be a private constant?
Could you move `Setenv` to `serverConfig`?
Why did you change this?
Can we just make this a const?
I think this change was added by @zhouyx for future-Pcontrib. @mfojtik could we have a better idea?
We'll want to rename this file, and rename the method to `list_list` to match the existing method
please use relative imports as the input
This is a little odd. What about `if (aSelection.isActionAvailable(action)`?
This should probably be reverted. I think it's okay for a second refactor to use a `break` at the top of the file.
We should remove this line.
@mfojtik why not move the `RepoUserName` to `fetch`?
Why are we doing this?
Is there a problem with this?
This should be `// +optional`
I wonder if `circular-json` is a better name for this. `circular-update`?
Shouldn't the validator validator be set when the validator is selected ?
This seems like a leak. Was this just a leftover?
Is this change supposed to be in this PR?
Is there a constant for `services`? I thought it would be clearer?
This is an API break
remove this, see line above
I think the right part here is to use `int` rather than `int`.
I think it's a bit strange that this setting is "USER_CONNECTIONS" and not "MAX_USER_CONNECTIONS 4" ... so maybe the "ACCOUNT LOCK" name is clearer?
This is an example of why I would expect a `labels_` to be set to false.
So you're not going to use the `list.select` variable anymore :)
Not sure if this is correct, but it looks like we have to include a `index` here.
This is the only change I have here is a little bit hesitant. It's a bit ambiguous, but it's not a big deal but we should use `string.enable`.
Do these tests actually run if `beam_test.go` fails?
Is this `writer.writers()` ? Shouldn't we be consistent about how we are doing the writers ?
I'm not sure why we had to add the permissions to the message. I'm pretty sure this is needed.
Let's not import static imports anymore.
This test case isn't actually testing what you're testing?
This should be a `let`, no need to check for `null` here.
Do all of these need to be init?
why the JavaScript?
If you're changing the test case here, I would suggest to change it to `DEFINE_uint32(crash_test, 1024, "The flag could not be read")`
I am still wondering if it makes sense to have the `only requestBodyTypeName` as a property instead of a list of empty string. Maybe something like `WA, page, page, page, page, page`?
should we change permissions to be 0o600?
Please revert unnecessary changes.
I think this is a bit hacky. Maybe a better name would be just `np.where(max_overlaps, self.floor_thr)[0]`
Why was this package changed?
Need to import React from 'react'
This is fine, but I think we should keep this test for all these cgroups
I'm not sure if there should be a better way to do this.
what does this do? it does not add extra parameters
In order to avoid calling `entity` here (and in this case, the `self.getSearch()` returns the row to be visible).
Why is this needed?
I think this may be better as an anonymous string, like the others, not the final one.
This should not have a default, so it should be an array.
The way we can get rid of these "static const ExecutionReference" changes, can we just remove them and use `cache.GetDefault()` instead?
I would have thought about the idea about `/v1/` but not `/v2`...
why not get rid of execution.GasLimit directly?
Is `-50100` still needed here? Should it be just `-foo`?
`op` doesn't seem to be used anywhere, can it be removed?
why is this change needed? it is just a file-wide library and it was a copy-paste from the same one?
This method was only used in the `UpdateUpdateServiceService`.
This should have been `form`, and `form` will never be used.
@jsoriano @korycins : I think the best approach is to move `api_version` above `or api_errors.ApiInitializationError, api_version` to `setup_api` would be nice
This should be `recording_msid` instead of `listened_at`
This is still needed in the baseclass right?
We should be consistent about how to use `LOOKBACK`, but I think we can just have a constant `hparkReadOptions.LOOKBACK, 10` in a class that doesn't use a constant.
Do we need the following checks for these?
You could use the correct value here.
Can we use `node.getAttribute('id')` here?
is this a typo? `Headers` -> `context`?
Could you remove these spaces?
I think if we could just pass TRUE, and call it TRUE. Otherwise if that is right, we could get rid of the logic.
This is probably fine. You have to update `NumericConstant, 260, 7, inf` to `identifier` and make the previous version more complex.
Why did this change?
This is a change to a vulnerable fix. I'm not really sure this is correct. The only place this is used for the "beta" is if it's a bad one.
Why not keep the Assembly.GetType().Assembly here?
why we change the order?
This looks like a fix, but the cast to timer should probably be a separate commit
I don't like the idea of having an array and a single string like this, because it is the type of `@var`.
This will be removed. It is now the only way to check `query.buildSmartQuerySpec` will be the same as `query`.
We have the same `if sc.useV2(ctx, act, context.Receipt, error)` in `stakingCommand`
I would use `moves_ +=` here, since this isn't a boolean.
@tnozicka I would have got a few bytes to happen in this context of this being used by #3511, so I think this can just be removed.
It would be better to remove `return network`
We could make a similar check to the one above that is done above.
why do we need to add it?
We could log the error here so we don't send an error message.
You could replace all of those by `example answer` by `updated_text`.
`t we expect a "yoda checks" in the `ctx.go` file. Maybe we should just make this a constant?
`public` is now useless.
This is the fix. This one should either be reverted or add a TODO to remove the `Context` attribute.
@sparrowDom Just wondering why this was necessary. The first time it was removed, the second time was removed and the previous code was introduced. Is that what this "broken"?
Also add `.split.` here.
Didn't this also need to be updated?
Shouldn't it be `package soc`?
I think we can remove `main` and `main_names`.
can this be changed to `long`?
Why did we need to make the change from `abortReason` to `ConnectionAbortedException`?
Isn't f.reload always true since it's an error?
There is already a template for this one: `/deploy/Nuget/Datadog.Trace.nuspec`, I believe you are using it only on `Datadog.Trace`
It'd be nice to have here a `handle_version` method. The model would also need to handle the logic of: - `_storage_class_header` - `_version_headers` can also handle its usage (or similar) if there exists - `handle_version_headers` fails. - `handle_version_version` can just handle the logic and `handle_version_headers` (or even better) - `handle_version_version_header`
why don't these constants make it more obvious to use an enum?
I think that you could add a note about the new region logic here. I think that we need another new region logic.
Would you be able to remove this check? It's not a big deal but it's not a big deal.
This can't go in the `prefsApplicationKind` - it's only applied to a `ApplicationKind`.
It would be good to rename this to `urlurl` and rename it to `CredentialpieceURL`.
Can we just use this one `WebDriverWait` instead?
The original original code was a little hard to read. I don't see a need to get it, but it is not used and it doesn't need to worry about it.
Do we need this line? I think it is a leftover from a previous PR.
This should be `@role` instead, similar to what was there for `owned_by?`.
I think you can remove `user.AvatarForm{}` here.
This is not the right place to check this. The error can only be logged in if `self._ask_overwrite_question()`
For readability, could this be made `app_name`, then?
This should be `flag`
this will cause the suite to not use the python string, right?
Is this method used anywhere?
I think we should change the default value of `injectCfg.configPath` to `lib/actioninjector/gentsfaddrs`.
Redundant with the `if` value detected.
I'm not sure I follow this change. It seems to be the only thing I'm happy is that this was removed because it looks like the value is not saved in the constructor. Can you please explain this change? Is that on purpose?
I'm not sure I like this change but what is the reason for this change?
`Clone` should be `Git`
The `\` should be in the previous line.
This will log the logging, which does not throw before.
why is this changed?
Can you please also remove this `switch` condition from the other methods?
This log statement can be removed.
The `require.NoError` checks are needed here, as there are no guarantee the `err` is not nil.
Why do we have to call `only` here?
do we need it at all?
We need to think about how many records are written. I'll take a look at this, but that's probably fine as is.
This import should be removed from IP8s.io/api/resource
I think we could keep this interface in the `ISpanDecorator` namespace.
Minor nitpick: We shouldn't be using `require` unless you want to use a `deprecation` here. We can also drop this `require` in the previous version.
why does this need to be an optional string?
I think this is a bit too big and it should actually use print_page instead, because if there's no print_page then we should check the value for the action
This can be removed as its key is used by an abstract class
Should be _a4_ (a4_)_ with this patch (e.g. _a6x_f(a1, _a6)_. The other way is to do this would be to add an extra space to the _a6x_ (a2).
Should `AddAdd` also be nullable?
Please rename to `RendererProvider`
I think a `GetMetricFunction` should have a `Func<MetricItem>` instead so its more clear what this does.
I think it's better to make it work, just like `http://127.0.0.1:{PORT_DYNAMODB_BACKEND`
@TalLinikankariya can you confirm that this is the correct behaviour here to say what happens to 0x2? The "cmek" of X64 is a bit too broad.
Same here, let's just explicitly disable those in `AbstractMessageHandler`
Is this really needed?
This should also be added to the `const char *is` array below.
can you move this import to the top of the file, please?
why not just do this in one line?
This is the only usage of catch block.
Is this really the case that we want to use?
Shouldn't this be `true`?
Maybe rename to `f_as_args_args`?
This is the fix for #1578.
Please consider making use of `OrderedDict` here too (since it is the `ImmutableList`).
Why remove this field?
The fill bg label must be added here, since it is not a dictionary
This feels like a bit of a hack to me. What is the difference?
Can you add a TODO here that the library can be set by the user in this case?
Is `blob` always a good Blob? Shouldn't we just do `type.length > 0` instead of the Blob?
Is there a reason we're not using a guard clause here?
nit: please keep the style of the above `or-method-method` and add a `required` property on the next line
This is not needed if the user has changed the behaviour.
This is a very weird pattern. Maybe it could be a `projectproject.value` and then we could also set that value here, like `progress.type` and do it below.
Why is it needed?
This should be log level.
I don't think this is needed for some kind of action.
I don't think we should use a name that makes it a little bit more sense to just say: "don't trigger status". "just saying that "when you are trying to get the status."
Is `*spmd` available in a different order? You can't assume `*spmd` is a the same thing as in the other order.
This can be a one-liner: `} else { return type} else { return type}`.
This needs to use "<2.0x20, otherwise it's not used.
The class should be renamed to `@return {...}`
nit: move the assignment to `_apply`?
I would not set the return_value here, but also test for the test_include_all_instances, as that is the only case where we can test the return_value. I suggest you keep only `self.assertEqual(all_statuses.next_token, 'page-2')` and set the `self.assertEqual(self.get_all_instance_status(include_all_instances=False)` directly instead of having to pass this value and assign it to a mock.
This is also used by the `env` above.
This may be indeed a bug fix.
I think these tests are also not needed anymore?
Do you know what the items you are trying to do? I would expect it to always return false because the default is not null.
Do not use `@products` for variable declaration.
We should also be moving away from "(" to a general string.
Just curious: why do we need `errorMessage` here?
How about just put in list_open_open_rpl() and put in single header?
Do you need to wait until all refreshes are allowed to be refreshes? I think that's fine for now, but I think this will be clearer with all refreshes.
Can you remove this?
I think this will be the wrong place to check this, since the `colName == TRAF_SYSKEY_COLNAME` will be empty.
I would rather have these header options. There were two places with `[UnsupportedOSPlatform("browser")]` and `[UnsupportedOSPlatform("browser")]` that use it.
Can we make this a local var?
This test is not required, but now an empty string is not provided.
Should we add an example here?
We can simplify this to debug level.
Is `std::unordered_map` guaranteed to be a `std::string`?
We should avoid this options in the constructor.
I think we should add an environment variable to show the v1 version of their package.
It's not the case that the transaction is not obtained from wire and not the whole block. The problem is that if the transaction is not obtained, the transaction is not obtained, the transaction is still not obtained. So I think we should be checking that the block would always be not wire. I am not sure if that would be better for the transaction in the case where the transaction is not obtained.
This should be reverted.
Please add a license to the end of imports
Why is it necessary to remove the `OSSBridge` prefix here?
The import order seems unused
Let's move this to where it is used
I wonder if we should also have a helper for this
Can you use `panic` instead of `panic`?
This is a bit of a hack, but should the `focusObject` be `listObject`?
Do we want these to be public? If we want the `new` in the `WebDriverWait` call, then I think it would make sense to have a more meaningful name for that.
Can we use `Secret` instead, or is this type of thing being passed in to `tlsContext`?
Align the elements of a hash literal if they span more than one line.
We're still running tests on line 48, which is still the same as the test scripts. I suggest using a test with the same name.
Any reason why we're not passing the original implementation? It wouldn't be better to have this as a static field in the test and then use that in the test.
Should this instead be `caster` to match the previous ` ;-)`. The current `caster` argument is the default (or the default) for the target argument.
Can we use the same name as in torchscript?
This needs a space between the two.
Why is the `IOException` needed here?
I don't quite understand this change - if we use `serialVersionChannelFields`, I don't think we should change that field. So, this `serialVersionChannelFields` can be removed, as the default value of `serialVersionChannelFields` is a `serialVersionChannelFields`.
I'm not sure what's going on here.
Why do we still need this?
Can we move the 'log' flag to a constant somewhere so it can be improved?
Can you provide some description what this type of `n` is?
This can't be `Tracing.js`, since we want to be sure that the `TracerProvider` and `Tracing` are both available.
What is the purpose of this line?
This is an unrelated change, but I'd suggest moving the name to be the same package where it is used.
@cicdw you mentioned `textView.path.setOT(getTextColor())` on this line?
I think we can remove this.
Is `System.p.MintX509CA` required here? Why do we need a `NotNil` call?
This is unused.
I think you can delete this line
Can you add a `case` statement to avoid a merge conflicts ?
why is this changed?
Can you update it to the `--storageVer`?
Please use `BaseMetastoreCatalog.getElse()` instead. Also, I believe `BaseMetastoreCatalog` can be `final`.
please make sure the kernel_extent is not a valid dilation_data, but not the dilation_data.
This is wrong. This isn't the only place where we call the function in this function. Can you move the function below the `SpanBenchmark` function?
Does it break anything?
This is not a `TODO`. This is just to be safe to remove.
Should we have a test for this, i.e. `TestConcurrentCommand_UnmarshalJSON`?
I think you'll need a better way to do this...
It looks like this function is called `setEnvVar` - why not have it as an optional argument?
I'm not sure we want this here, maybe we should make sure there is a `required` permission in the test, instead of relying on it for the `projected_monthly_revenue` key, and then in that case it should be `app/config` instead of just `app/config`
This should probably be a warning message.
This is not a good idea. The check should be done in the constructor and is not necessary.
@jcotela Are these config variables defined by Spack not?
We need to add a `CNIVersion` to the package for that. This is used for 3.0.
This can be `from read_LENGTH import 4`
`web_debug` is not used in `filter` function. I don't think we should add it to `filter_debug`
It seems that the two attributes are not defined here, so you could change the existing attributes in the `before_place_chart`
This is a breaking change. The `.dataDir` does not seem necessary anymore.
`string.replace(escape_char, escape_char * 2)` can be removed.
Wouldn't it be better to have a `INT` argument for that?
`err` is never used?
If I'm not mistaken, it is possible that we don't set the first first one, right?
why the `if fee < 21000` check?
I don't feel strongly about this. I would just check that it's an instance of a `StrictSigningKeyUsage` or a `Resources` instead of doing anything related to the `SDKUnsupport` check.
Is the previous code correct?
This is not necessary, we already have `output->format` defined above.
please import its own lines
I think it should be `cfg.nms = (int, 'nms', 'GARPNHead only support ' \` instead.
This is the change that breaks a signal that was not found in the `options` list.
Why is this needed if we don't have to create a `NoError` with a `NoError`?
This can't be a text.
I'm not sure what this setting does, is it supposed to be?
Why is this removed?
this should be `defaultPostWriteInterval = 50 * time.Millisecond` right?
Use the new Ruby 1.9 hash syntax.
This is a bad idea. The resources in the `removeCanaryResources` must be used instead.
"No choice" -> "The message may be "The default of a message". Please fix.
We need to make sure that all callers to use this map is the same as the parent container. The caller can do this as an experiment, but I don't think that's the right place for this
`Lets_table_count` was removed as an example for the `handle_results` case
Does it have to be a bool? It's only used in this file, right?
These are the controller controller I think we should revert them as they are the only one we care about
Not related to this PR. If the escape is not enabled, it should be `prop('disabled', nightShift)`
The new test case looks weird. This is not really the right test.
Nit: this should be lowercase `useCallback`.
This is probably not correct. This is a breaking API change.
`$identifier` isn't being used as a field in the class, so it is always better to avoid using `if` as the parameter.
I think we should be more explicit about the path, like this, we have `.jetpack-patch.xml` and `.jetpack-patch.org`.
This should be a pointer, not a pointer.
`null` check is unnecessary.
Should we also check against an alias of `unsafe` here?
Why not just make the `internal` and `internalinternal` the same as `internal`?
Should probably be addtransaction=True now that the password will be always True
I don't think this is correct, but it doesn't seem like we have a 2/3 compatible compatible way to use it.
I think we should also have this around `str_replace` because `&#10` and `&#9` should not be a valid array.
(style) trailing whitespace
Let's remove the whitespace changes from the file.
Isn't this the same as the one on line 177? Why would someone need `toolLibraryItem::class` use this class?
this is the change in the config file, right? is it intended?
No need for these here, they are already added to the seconds
I wouldn't add a check on line 166.
This is actually a bugfix, and is a very nice API. Can we make it a private member or something like that?
We don't want to do this on every iteration, right?
I think it would be a good idea to use a `*` import of the `*`
This doesn't look right to me, as the first step can't be set, but the last step can't be set.
@mhoemmen can we add a route here to make sure that we don't have any data with a "reciate" or "reciate" ?
is this no longer needed?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Why the sizeof ?
We could add an `json: -just wondering if this can be an optional struct or set to `null,`.
can you change it back if you want.
No change here, we may need to change the length of the var.
I'm a bit confused why `HEAD` is not `static` and `HEAD` is used for some reason. Could we not use that as something else?
I wonder whether we could be consistent and return `org.openqa.selenium.grid.session`? This way we don't have to check this in all other places (in the future they don't have to). Also we don't have to check `package org.openqa.selenium.grid.session.remote` and the test should be `org.openqa.remote.withTest` and the test should be `org.openqa.selenium.grid.session.remote`. But this is the case for this change as the test is not a test, right?
I think we could use `debug` here.
Maybe use `protected` rather than `protected`?
Use the new Ruby 1.9 hash syntax.
use `new ClearSessionQueue(tracer, this)` for consistency with other methods.
This should be `@Deprecated`, not `@Deprecated`...
not sure we should use `endpoint` here, we can use the constant defined at the moment
Why is an empty map needed?
We could move this to line 298 (as it's used outside of the try/except block, so we don't need this method to be called everytime there is a new method)
I think this will actually break our ability to call `topic_arn` without the `51_or_topic` function, so it should not need this parameter.
Please don't use spaces between () and {
Please make these constants so the capitalization can be improved.
Why do we have to close it in the exception instead of in the exception?
Can you add a doc note that there is no associated machine?
I don't think this should be log here, because it is not possible to get the user to create.
I think we want this to be an API break. We should update this dependency on the `cssutils` package.
I'd prefer to keep the matrix for transferred and use the transferred for transferred and keep the full full full full full name in the example. I think this is more readable, especially because the transferred will be able to be the same with the original code.
This is a very confusing name. I suggest `Airbrake.notify_or_ignore` or something like that.
`user.email_address` is an alias for `User` so you don't need to change it here.
Do we need to change this?
Is this the right way to fix this?
@jridgewell I'm not sure we need the `loggingLevel` here, as this is actually a `True` or `true`
Should `DateTime` not be `null` here? It seems to only be used when `dateTime` is `null` when it doesn't.
This is the actual change, but it will cause lint errors in Python 2.6+, which may have different results in the file, and will not be fixed yet.
`metav1` was a typo here, so I removed it here.
what is this doing?
This is going to be problematic for #3022. I think it might be better to have `determineFileType` return `null` here, but I don't think that would make any difference.
I think it's probably better to use a different name than `use_directory_cache` since I think this will not be the case when you need to know about the extra option.
This should be done in another PR as well (and not in scope of your PR but it'd be nice to keep the logic in one place).
Should be :/"`
can we make this a class constant?
This shouldn't be 5, so you should include it as a default, not a `5`.
We need more tests for `r.ContentLength` as well.
Can you also update the test to update the new tests to make sure that the `test_raises` attribute is not explicitly specified?
@adamsitnik @egerTag/abort's suggestion here - should that be "sh" - as I know, is the latter part of the scope of this PR?
Can this test remain remain using `ValidateHostHeadersParsed` if you are not gonna run some tests?
can you add this to the `s3_region` key as well
what is `parentNode` used for? can we remove the node?
Why the if/else clause clause in dictionary".'?
think this is wrong, `DateTime` is the same as `Datetime`?
This is incorrect.
This is the only change to this file. Is this intentional?
Should this be `event Action<MvxViewHolderBindedEventArgs>`? It doesn't look like it's going to be used.
@deads2k we can get rid of these from `createAttr` if we're not doing anything else.
This is a very old code and I think it's better to just have a `return NoError();` field instead of the `else`. I'm also thinking this can be simplified to: `return NoError(fieldn, struct_def.fields.Lookup(name);`
Could we get the `mvmvSource` suffix and have it be the default in the middle of the `AuthenticationDetailsSource`?
why is this needed?
This is a bit odd - we don't even know that we're in here. What about the thread fault is already being executed and that it's not a thread fault?
This function is now a "CACertificate" name which should not really be added. This is a little confusing, and is a bit confusing for what this means if it's not.
why change to 1?
It seems that this only affects one level of errors? Would it make sense to put this in `NewUserClient` instead of having an option in the `NewUser` function?
I think this name might be more descriptive
I would prefer to have the method named `isNestedProperty`.
Is this still needed?
This is just a property property. It's the name we're trying to reuse.
Do we want to add a `.searchTerms-keyword-1` to these URLs? I think we need to keep the `searchTerms-keyword-1` as a string and just have `searchTerms-keyword-2`.
remove empty newline
This doesn't appear to be used.
Why did you change this? It's not used by me
Do we really need this as an interface? If so, why should we have a public API for that?
This is not being used anywhere anymore - it should be removed.
`com/` -> `com/`
Please add a blank line after this one.
I think you want to remove this and use `SYSLOG_INTERNAL_WARNING` directly in the `Mpth_config_and_load_libpth_setting_group` function since you're using that function in other places.
How do you know that we should also add a `required_TYPE_experimental` field for the whole `StoreInbox` ?
this should still be here
I think this is not correct. We should not be using a `_receive_of_args` function for all the other classes.
I'm not sure we want to remove this part.
I think this needs to be renamed
Can you add the `ProxyURL` as parameter to the `ProxyMap` function?
Do we need a separate `inline` instance?
I don't think this change is needed since there is only one value in the "haders" block
We should also update the error message to say "Detected AVX-512 code in use"
I would prefer to use an enum to set the constant here instead of just set it to 3 and use the constant.
this should have been the same in the name, I would call it `StorageStorage`
Maybe `encoding_type`, and `status`.
We don't really need this change. The other files are already in the file.
Why is this API added? There are two parts of the API and parts of the API.
Maybe we should just log the warning here, as it is done above (and only log it at the beginning)
Why was this readonly?
This is not a good idea but is there a reason why you don't pass the `reader` object as a parameter instead of a boolean?
Please don't remove any new lines.
Can't call `init()` directly.
I would suggest to put this in the `common.execute` method so it is more obvious what it is. It also makes sense to put this into `interpreter.limiter` and make it so that we're not not change the actual way it's obvious that it's the only thing to be used in `common.execute`
This change is not related to the PR. I'm not sure if the `err` is necessary anymore.
should we set it to a value of `true`? I don't see the value being set in the original implementation
`log.finest` is the logging level of logging. I think it is better to change the log.warning since the logging level is not the debug level and it's not the logging level.
You can probably remove this line entirely.
Please remove unnecessary controllers.get
Isn't it a valid metric to display a valid metric to the dashboard? I think it would be cleaner if the metric was added to display the metric for different languages than the dashboard.
Trailing whitespace detected.
Should we do something like `show-perf-data-MODE` to prevent any confusion?
This is wrong now? If not, I would suggest that we keep the old name and change the previous one
It would be nice if the rank had been using a constant.
why did you remove this?
I think that `long` is not the correct name. We should be consistent about that.
(style) line over 80 characters
I'm surprised that there is a typo here. The docstring says it is `self.execute(Command.PRINT_PAGE, options)['value'])`.
This should only be done if the header isn't configured.
Are the tests failing in this file really testing a change?
This was just dead code...
Can you also do ` New_malloc.h` and use it directly in the docstring to make sure we don't have other options for the user?
Remove this, as it's not used in core
I think we need to make this configurable, we don't need it.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is a change in behavior to the standard library...
I think we don't need the second param here.
can we do a null check here?
I am assuming there is a typo in the name of the test.
This method looks like the same as before..?
This is not really the only one I was thinking we shouldn't catch this in a case that would be useful. It would be nice to check that `--renew-server` is also available to Python 2, and then we should try to avoid doing `(b, error)`
This looks like a bugfix for some other reason, and I'd recommend adding a `get_tab()` method for `Model` to indicate that the method is not called anywhere else in the code (e.g. for `remove_tab()`).
Can we move this to the `internal` method so they are always called every time it can save an issue?
The `os.rename` is already initialized here, so if you're going to use `None` then the variable will get lost.
"Cannot" is enough to "the connection ID sent"
I think these are redundant, because we have similar checks in the `test` function, and the `test `getContainers` function.
do we need this?
It's not necessary to do this check.
This seems like it should be done by the `validateVarsSubbed()` method? I'd rather avoid the check and only call `validateVarsSubbed()`, which wouldn't work in terms of the `validate` method.
Group with other goals.
Doesn't it cause OSTREE_REPO_MODE_BARE? Or did we get rid of the if statement here and return below that?
Is a statusParts correct here? If the status is set, the status is not set, right?
This is weird. Why is it `SkipOnServers []string // if the test needs to be skipped on particular server?
Does `this` need to be on separate lines? It's just a single `.find_by('')` but `must_respond_with :unauthorized` doesn't need to be in all the other `return` attributes, so you can remove this `if` below
This will be a little cleaner to explicitly try to reuse a message if the job is cancelled.
Is there a better way to specify the CStorPool and CStorVolumeReplica pool are using this?
Should be `$pse->getQuantity()`
Why are we using `int` here?
`if (getAt(leaf, i)` would be more appropriate
The control cgroup.Control isn't used anywhere -- this isn't a copy of some other package - should be removed from the PR
What are these changes and why?
This is not a bug in the PR.
Why are we using the package name to create a local package instead of just the package name?
Can you add an explicit doc and add an explicit doc to the help text here?
@tnozicka this was correct. I removed it because the `updateNodeStatus` was not being called in the same place now...
@michaelkuhn Should this just be `"sys/stat.h"`? (and similar below)
i think the above code would be better than before - no need to set it - no need to set it again here
Is `NotFound` the correct error message?
why is this GetDefaultVersion? it should be GetDefaultVersion.
Why not `#summary`?
This isn't correct. You should just delete the `<` tag to avoid double quotes.
Where is this function used?
The profile phase and Array are not visible. I think it's more appropriate to remove `user` from the interface.
I think 0 is the better default.
This one is wrong
is the property name `DEFAULT_VALIDATE_PROXY_USER` a boolean?
I think we don't need this change anymore, since that makes it more obvious where we are in `winUser.user32.execute()`?
Should we also check that the error is not nil?
This should probably be in the `MutableKeyError` constant in `sharedSource` and not `write.avro.write-mode` (in case of an `InNB-TF`).
is2xxSuccessful is a good candidate for using the method in the `this` component that is passed along to the function. can we add an additional method on `Mono<Map<String, Object>>`
I would prefer to have a method on `currPrefix` but not have all of them
This looks like a wrong place for the nodeattestor.
move this up into the `const` inside the `if` block and then the `return` statement above, to avoid the need to pass the check on line 339.
The property may contain a different name (i.e. `notification_service_factory_class`) to make it more explicit and more explicit
why are these made public?
`cidSet` is never used.
What is the reason for the "ipfs ref" vs "awful", and "awful\": selected encoding" here? I'm not sure this is going to break anything, but is there anything else in the tests?
Use the new Ruby 1.9 hash syntax.
Should this be `char fmt[] = "O";`?
Please, add the full sentence to `--channel`.
remove this, this file cannot be recreated by AllocylineTester
If I understand correctly, the `addle.QUEUEAttributes` option is used only when `--no-standard`. Is there a way to make it clearer to just make it clearer?
Can you revert this change? This seems to do the same thing.
nit: I think you can write `return simpleResult == null`. (It's not obvious what `dictionary.isForbiddenWord` is for.)
"I resolution time for a promise is factored"
What do u think about adding an additional route to the controller so that we don't have to worry about it being able to handle the controller?
nit: remove whitespace changes
I think the more elegant way to do this would be to just `if (image_view_) {` instead of `if (image_view_)` - we can have an `if (iv_state))`.
This line should be kept to match the test.
@bzz Sorry, I'm not 100% sure this is safe to do here...
this is not `@preferred_languages` but it is the same as `Locale.list(languages)` just before the `@preferred_languages` anyways.
We should remove this function.
Is it possible that Ledger will be null here?
Can we add a TODO to remove this?
Use a guard clause instead of wrapping the code inside a conditional expression.<br>Use options[:tty].nil? instead of checking if the string is not present.
The problem seems to be the best place for this method.
Why not just return the error directly?
What if the user wants to be able to use the new `.username-check` ?
Can we use DRIVER_CLASS_NAME instead of DRIVER_CLASS_NAME? And maybe use the name here too, to avoid confusion.
I'd put `.find_or_create_by!` on its own line, because it's not clear why `SYSTEM_ROLES.each` should be enough to check for `.find_or_create_by!`
I think this is the correct place to put this check.
The `unless view` isn't needed in the view because it isn't used anywhere.
Why is this `FrontendServiceName` not `key`?
There are a lot of other issues with `std::lock_guard` in this file. Should `nano::random_pool.unsafe` be used here?
What's the reason for removing the extra lines?
"The default" sounds like "The default" sounds more like an "the default" to me, so I think we should add it to the default number of space.
No longer required.
Just noticed that we're not going to export this value anymore, and let me know if we should remove it
Why is this package changed? I think it is not used anywhere, and can be removed.
If we remove the `$this->getReference(AdministratorDataFixture::ADMINISTRATOR)` parameter it will never be used
What is this used for?
Can we use `Util.Util` for this, and use `KsqlServiceUtils.get` for this?
This is a bit scary, but if a proxy streams is a DTO, we might need to be open. This is one of those cases I would just do `conn->push_stream_ids.max_open`. This isn't really worth the fence.
Nitpick: In fact we're only using the `exit_code` constant. Can we make it more explicit?
This is the only fix that will cause the id to be set for every request. I think you need to change `id` to `updated` here. The `id` should not be needed, because `getObject()` will return `null` by default.
Does it make sense to have this constant set to `false` for this?
we have a `AWS IAM` role, so you can keep it as is
why this change? we need to update this in order for this to work
This should probably be a private variable.
Should this and the other PR be updated to `prefHttpProxyUser`?
`pragma warning` -> `pragma warning`.
this looks like an unnecessary variable.
Maybe make it an `ids` field instead?
Should we rename the variable to `SimulateCustomPolicy`?
Does this change the behavior of all tests?
Why do we need to set `STACK_TRACE` twice?
This should probably be the same as the line above.
Please remove this `StandardServiceContainer`
This is the only thing that is needed, because we have already built the value.Value. At some point we may be able to just use the value from the try..except when we are in the log message, as that's how the test happens, and the log message should be printed there.
Final newline missing.
I don't think we need this private member.
`keys = set(input_groupnames)`? This could be a bit confusing if there are no arguments (e.g. `set(input_groupnames)) or _Optional`).
Maybe we should check this instead? I think it would be a bit cleaner if the `transports` is not defined as `validate_not_validate_not_validate` and `validate_not_validate` is called, and if it's a user who will use it. This way you could do so with me and it doesn't make sense to add `check_deprecated_config(context, name, config)` method to `validate`. I'm not sure it's really worth adding it to that method in `validate` so I would not add it here as a future merge.
Is this just because the previous one has changed?
Why not use the value from `rest`?
This is now dead code
What's the reasoning behind list(range(reference.GetNumAtoms(onlyExplicit=True))
Please make the function name more general and use the same `float64` as the default.
I think this should also have a url that doesn't have a url.
@alexander-schranz you can delete this line
why is this changed? seems to work
Is there any reason why we wouldn't expect a simple simple string for the current buffer? I don't see any new values defined anywhere
This is the default in `false` to prevent us from running `false`. The `return` can never be true, because it doesn't have the return value, but it's not the case in the `return` case.
We don't need this plugin. It was already being done on the server side.
Please add this to the `for (uint i = 0;` to save one `;` statement
can remove this
This was the only change required to `BUILD_TYPE`
why not `if` and `if` here?
can you use `RLock()` here? (also in `limitsExceeded_st_test.go`)
@stephentoub why not use the default now?
This was added in #5340.
Should we make it a `find_by` or can we do it earlier?
Thanks for the PR! This is not a good idea, but the `clang-util` file is not really really unstable.
Please avoid import java.lang.ref.WeakReference, it is not a good practice. Also, this will be an issue.
This should only be needed if the user specifies the `ContentDescription` or `ContentFilter`
Is `reproduceState` the initializers that are actually not supported by the time the last element is `1`. Can you remove this?
Can you please move this to where it is used? We should avoid this in `pkg/buffer` as it may cause Travis failure.
nit: I'd suggest to keep the name as it is and rename the function to `chainsToFullRules`
I wonder if we should just always use ``get_inner_type()``?
This seems to be a bit of a good idea, but should be done with a separate PR, but it should be done in a separate PR.
Why not use `org.slf4j.Logger` to get the enum?
This seems like an API break for `api_versions` since we only do this for the `max_request_area` task?
Can we add an example on how this is merged? I think it is a good idea to move it to `src/pt/pt.js`
I don't think these are needed
Maybe add a `CheckForNull` check?
Style/MutableConstant: Freeze mutable objects assigned to constants.
This is not the case, but if you are going to import it I don't think it's possible to import the `pants.util`, it will get lost.
is this required?
If the `getAccounts` array is empty, then you should add it at the end of every file.
Is there a need for an extra param here?
I am a bit confused by this. If `field.required` is not null, then the `if` and `else` can be empty.
Code Climate says this is not tested.
Nit: we use a `@property` here.
I don't think this will work, you need to get the `_getMiningBeneficiaryCalculator` from the `Hash` event.
This should really be removed. `if not os.path.exists(config_file, ...)`
I'm not sure I like the idea of this one, but this is not really a test, is just a test file?
I am not sure if this is correct... If you have the rewardCalculator, then it should be the same as the settings in the settings in `UnitUnitTestCase`.
Hm, why not just do `grpc.ClientConn`?
Do we really need the `toString()` here? It is used for RReachableFiles, so the current code can't be used.
This is the only usage of this function that is used by the build system (and the build system), not the build system? In case someone runs the build system before it becomes deleted, it is not a big deal either way (e.g. if you try to fix it, and if you don't know how to fix it).
I think this would be better in the `section` method and not the the `teacher` section.
why not just always return 0 ?
This is now the fix, but you're just checking that the list is the same in the list.
Why not using Process state values? I'm pretty sure you didn't put it back.
Just for my own understanding, what is the rationale behind removing this line?
@pgavlin, do I need to change this to 15000? I'd like to keep the intent of #4207
I'm curious why you added the `import addon` here.
This is going to cause `snaps` to be never nil if the volume is not active. This should be an error.
@deads2k i am not familiar with the code base that this is a bug, but the row143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143143
Please rename to `timeout`
I think we can keep the `constructor.setAccessible(true)` method and remove the `if` here. The `cls` can now be the one used in the constructor.
I'd prefer a separate commit, but I don't know if there's any reason to change this.
This is also an option, why do you just change it to `const` if you are not using a local variable?
Trailing whitespace detected.
Nitpick (and the one below): `go ternary` should be `go ternary`.
this will never be true since it will be an error
This is fine but I would use `driverpath.getAmpDoc()`
I think we need to remove this check
I think you can use `IsManaged` directly here, but I think you can remove it.
should these be `api_sig` to match the key in a dict or key?
Should we also include the canonicalized key to the user?
Is the `except` block correct?
This is an existing issue. This is not the case that we should either use the `OpenAPSPlugin` to set the `autosensResult` or remove the `OpenAPSPlugin` parameter from `detectSensOlant` to the existing one.
just confirm, we don't need this condition anymore.
We should not use `getData` in the applicationVersion and use that in the applicationQuota. It should be the same as the one that is implemented in the UI (if not). Also, please move to `BuildFunction#validate()`.
This is a breaking change. There are some tests that need to be updated when running on a previous version.
The `append` method above shouldn't be needed.
We can remove this now, no need to check for `Handsontable.helper.isIE9()`
Can we use `result = LuaScriptInterface::getBoolean(luaState, -1, defaultReturn)` here? This way, we can always use `Boolean` when it does not support `/`
thebserver-0.kbfs.keybase.io:443,bserver-1.kbfs.keybase.io:443 andbserver-1.kbfs.keybase.io:443
This is not right - it may be called once connectless and not result in `c.setPingTimer()`.
Why did you remove this completely? I don't think anyone has a reason to remove all this. It's not related to the commit that should be ready to be merged.
Is that still needed?
This will not work for you. The problem is that the user can switch to `int`, `r`. Also, is this the problem when you use `int`?
Use `!==` instead of `.empty?`.
This import is unused, right?
Is this the correct way to do it?
"the peer might be in the backlog."
I'm guessing you meant `setCookie-Refresh-Token` here?
This is not strictly necessary because it's a default, but the last test case is going to miss.
(style) unnecessary whitespace before a quoted newline
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
The condition should be `Attribute`, `utf8` and `caption` should work. Same with below.
The argument_values.GetValueAtIndex() is always set to 0, right? It should be checked inside the `CalculateExecutionContext()`.
This should be also set on every request to avoid the value being set (it's a bit unwieldy here as far as I can tell), but this will lead to weird bugs if the user is using the default value.
why is this an serialized method? this is an interface
@larsoner can you confirm that this is the correct place for this change? I don't see any related code using the old `./foo` argument.
I think we should also check the `transformer != null` in `nextDoc`.
shouldn't that be `byte` instead of `peerID` ?
`rpm` is the directory that contains the directory that contains the images that do not contain RPM.
This looks like a leftover from previous PR. If this is just used to be a pain from a "rfp" code block, I think you should use a 'rfg' parameter to be `rfp_inplanes` (and a 'sac' parameter), or you could use a 'rfp' name. You could have a 'rfp' or 'rfp' to be `rfp_inplanes`. (This would be more a 'rf' method.
I would prefer to keep the log message as it makes the code cleaner to read
It looks like you've removed this, but it seems like the line below is not needed.
Remove this whole if block (line 577) as it was already handled
I'm not sure we should use this anywhere in tests to verify it's in the `-i` request.
This should be in a constant with the `traceInOp` method
Why check 0 here?
Why do we need an enum here?
You need to remove these.
Can we keep this method in the `Rand_Duration`. We can get rid of it and just use `get` from `CommandLine_ImportPeakBoundaries_Error`
Should this function return a `nil` since it is called from within NATS? Maybe I'm missing something.
I don't think this change is needed, since you have the list above.
This should probably be something like 'stupid' or some sort (in the config? that will be an obvious fix)
The `c.receiveWindowSize/(1<<10)` is already checked here
The problem looks correct, is this an GetVolumeVolume() function always called?
This doesn't actually fix anything, just wondering if this should have a real `configs.NEWUTS` flag?
This should remain unchanged, since it should always happen together.
I think we could do something like `testAppendMillionTimes()` if possible.
We can remove the `finest` log altogether because it's an "log" exception in the log message.
Can you use the version number to make this work? That is, but it is not necessary.
I know it's unclear if the result is the same, but it's a function, and not a big deal.
Actually it looks like there were some whitespace changes in this file, and a few more spaces here in this file, there may be other parts of the file added in the future.
This can be just `allowNewUpload`. Also, do you want to make sure the `updatedFiles` is always available?
This isn't a hodge release, can be fixed in merge
Does this have to be committed?
why not the limit to max_query_limit?
Is this needed?
The default metric should be `None` instead, not `None`.
why not a Base?
This is a breaking change right? It is a breaking change as I'm unsure what the "ddev" part of the code is.
I think this is a bit confusing, why do we have this in `command-common`?
We can avoid the unrelated import statement entirely
We don't need to include the default table here since it is an internal method.
We might want to move this to a helper function to have it in the `https://.go` file.
The python tests are failing because of this, but I'd like to see how it works for Python 2.7.0 (I know there's quite a few cases in the code, but maybe it's worth it).
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
If n, do we need a return value for this case?
Why remove the volatile object?
Why remove this line.
The `p2pAgent` calls are now `p2pAgent` for the error case, so this error message needs to be updated too.
This is the only change that makes sense.
` _ _` makes more sense here.
Do we still need this code? Is it possible for `scratchBucketCreator.IsBucketInProject` to return `nil` as well?
We have the `@sys.platform_restart_EXECUTION` constant in order to match the name.
Does it matter that we're not modifying the "Error saving WebCal" in the $scope? Should we also update the "Could not save" part?
@cramforce do we need to move this into the `VENDOR_COMMAND_PREFIX` constant?
This should be removed.
I think we don't need this function, it's already in this packer.
why remove these?
I'm not sure it is necessary to add `mode` here.
should we log the default instead?
why adding this? the previous one was not entirely used, this one is not used anywhere else
I think it's better to have the source as the first argument and then the old `.Batch` and `.Batch` and `.Batch` to be the same as we do on the other hand we can use the new `.Batch` as the first argument.
You can use `string.Substring(indexOfSubDirectories)` directly instead of using `string` to indicate the value is used.
Rails/DynamicFindBy: Use find_HH instead of dynamic find_HH.
There is a typo in `linux` - should this include "linux"?
This isn't the right place for this. The current implementation of this method should also apply.
There's an error when `my_package1.ImportFrom` is undefined, so I would suggest `as_string().startswith('from .:', when_path(path).as_string(...))`
why not `private static void initialize()` instead?
this is a leftover.
Why is this needed? I don't know if it is needed.
Rails/DynamicFindBy: Use find_equal instead of dynamic find_equal.
Can you explain the usage of this field? Is it only ever used for the payment channel?
This seems to be the wrong way around.
Why not just pass true for the number of bytes? That way we wouldn't have to pass true for the number of bytes.
why do you need both `sizeof` and `600`?
Do we need `Port` here?
it seems like this line is too long and is overkill.
This change makes me realize we are not going to be keeping anything from there. I think I'd rather move it to `utils` package. We could also do something like `name=self._name._name` in this `else` package.
Why is this removed?
@nmittler - Is this what you want? I guess it doesn't. I'm surprised you thought this works.
This line seems too long. You should just write `backend->impl->destroy(backend)` to ensure that everything passes after backend->impl->destroy() check.
Should `key` be in the first place?
This is a bit of hacky, but I guess the "test" is probably a better way to do it (in a single row) and not just a "test" ...
This would be better as `if (2048)`, `not reader fetch`
can we do `latest_listen_ts(time.time())`? I guess it's not a problem in this case.
I guess this should be moved to the other files
This should be constClosingConstants
nit: this should be "catch"
If `Model` is not defined, then it will be inherited from `Model`, not `Model`.
why did you remove this?
What are the semantics of this type?
As above, this should have `Node = import_string(CFG_RELATIONSHIPS_EDGE_ENGINE)`
We should make this `trustedIssuer` so that if there aren't any additional IDs, the `trustedIssuer` would be trusted, no? If the source is empty, then the `trustedIssuer` should be set to `false` (as opposed to `null`).
Use long lines between function definitions.
is the function still used somewhere? I thought there was a reason that `blockDownloadDuration` is not renamed in `fromfromfromColorRank`
Can we do a bit more in the future, e.g. `testTimeout`?
Is this a change that fixes the impact on this?
I think I saw that this interface has nothing to do with the BSD settings and I don't know if the `Replica` interface is a good name. It's not a good idea to have it.
this could be a `Set` with `--min-allow-unprotected-txs`
Why not define a `typedef int` as an argument to `TeamPolicy` as well?
This should be removed as well
The key file should be changed to be consistent with the rest of the code base.
I'm not sure about the name. What about calling it `kernel_id` or `Anyid`?
Should probably use a private `replaceAll` method.
Why not keep it as a GoneHttpException?
Do we need to update the method names here too?
You can omit `matchingRowsPerAnimal` here and use `32.random()` instead.
why not just do gJobMgr->shutDown();
You may want to use the `else`. Otherwise, it will automatically get a `nil` if `pants.any?` doesn't have any `EqImpl`
Is this change required?
You're not using "router-expose" in this file - it's only accepted once in the project. If you want to add a new property in the project, we should also change that to be "router-expose".
In this case I would expect `http.health` to be set, which is a bit more efficient.
This should really be a static import, it's not being used anywhere.
@bparees this was the bug I was about. `json:"-"` was wrong. It was `json:"-"`
this doesn't seem right to me. It only needs to be updated to pass a string and only pass a string to the color. The `exception_class_name` doesn't need to know about the colorizer.
I believe this line is the fix for the test.
I think this should be an optional field.
Why are we adding this?
@deads2k I'm not sure why you did this, but it's a good idea for users to know about this. I don't see why you moved it here, as the other options don't get lost.
I have some concerns about using the Diaspora's name, not the Diaspora. It's more consistent with other code that used to change.
is this still needed?
Can you please add this back in? It's not a big deal, but it's just in case we want to have the option to change the blockchain, and not all the time we know that the blockchain's requests are actually ready.
Is this a bug fix?
I don't think this is going to work. It was just the case that the value of `RevStatus` was a `App` which is `App`, but it doesn't. The reason for this was to have a `SiteRunning` in the `RevStatus` that was not found. We have to do this in a followup PR. It would be good to be able to fix all of these in the future.
Why not put the version number in the filename?
Maybe a better name, `mutex sync.`
Why did you move this?
I think this would be better as `self.amount = Decimal(amount) / exch in currency`
I'm not sure if the warning message is really necessary since this is an error case?
Is there any `update-on` hook somewhere? Or is there any way we could allow the actual `etcd-snapshot` to be `save`?
It looks like we're not using this method anywhere. Should we be returning `unfinished`?
This seems to be a breaking change. I would expect `IntegrationIds.AdoNet` to be the default.
Why is this needed?
We should try to add a different code block for this function
this will prevent a full fix on the line above, but will make a note that this check isn't necessary. (Also for future cleanups in this file.)
Can this go into a `Read` method and use it here?
Why do you remove these lines?
Do we need a separate method for this?
I'm curious, what is the motivation for not using the new provided `consent_types`, as it is the new one?
Should not be in separate commit.
Could you move this into `isSupporting`? I would prefer to avoid the count here
why change this?
I'm surprised this was added because the `i` value isn't `0` (i.e. it's `x, C, C, C`).
Is this change still necessary?
@buchgr you don't need to specify `index` here since you already have `borders`.
I would not add the `id` field here, if this is not used anywhere else we can drop the `publicLink` field.
This is the default behaviour. Is that intended?
Did the old `CreateDeployment` and `ReportDeploymentCompleted` return errors?
I think it can be more readable if `tparts[1]` has a `tparts` attribute.
no need to change the startMs, we do not startMs anymore
`f` is missing from `-` - this should be `-` (because there are other places that might have been removed)
this shouldn't be necessary, as it's in a separate package (either a feature or a commonly built-in feature), and it's in general a separate thread.
We should probably log a message if this fails to happen.
Why are we not using the `task` in these libraries? I don't really see an advantage in having a hardcoded value, especially when it's the config, but the naming looks like it's just the wrong value.
This is a breaking change. It will break backwards compatibility on mobile because we can't set it in the cache, and you can't use it for any other way, but that is probably the case.
why change this?
nit, I would move this up so that the user can specify something like `to_sprintf(..)` and it's the same as the other `glue_property`. I also think `glue_property` is more appropriate when `glue` is used.
why change these tests?
Let's not remove changes in this file. I believe the `createRef` parameter is used only when the `render` object isn't used anymore.
Hmmm ... can we add some error message here as well? If no, we can change both `duration` and `renewBefore` into `renewBefore`. It might help us to add some error message and not do some error message.
This is an API break. It's not an API break, but it's used in the future. I don't know, but I think it's worth considering how we can leave this for now, and let it be to remove it.
Why `storeSamples` and `storeTranscriptions` ? We are trying to move these attributes to `storeSamples` so it's clear what these should be.
Looks very strange to have 2 functions in this class. Can we make them 2 only one class and have 2 only one class?
Why is this interface needed? I see that the interface is used in this PR as well, right?
Could you update the docblock as well?
Is there a better way of doing this? If this is the right one then we should have a unit test for this.
This is not the right way to fix the issue, but I don't think you can do it in the code: > You want the static imports to contain a `List<T>`
Please don't use wildcards in imports. Instead, please don't use wildcards in the lambda, you should use the `widget.Toast` constant.
This is not necessary, it will be a bit hard to follow
The default is correct, but the default value should be zero.
I think you meant `x.Getenv(...)` here, because you've gotta warning about the `else` block
should we add a `Topic` or `Topic_id` to this column as well?
Doesn't look right to me. It's just a test, and I think it's ok to call `TestCheckCompose` in the test.
nit: should this be `request.addHeader("Accept", "application/json")` instead?
This is a little hard to follow. I think we can get rid of the `!` from this line, right?
why is it always close
should we just change this to string "objectId" to be consistent with the name?
Line is too long. [83/80]
I believe it's possible to have a new function for it (the data type is a boolean parameter), then we should also call `reserve` once in the method (like `Kokkos::obj`).
Is this used?
`g_` may be confusing for a target leader?
Remove that `FunctionType` from deprecated methods.
Is this needed?
Shouldn't this also set `routes.WorkOk`?
can use `_correct` for this.
To be safe, we can create an issue if this is not an issue.
shouldn't it be checked for `auto_fire = *af;` as the result is always false?
"{:s} wants to trade" not "{:s} wants to trade"
This is also a bit odd... what about this?
This is the same as `export` above, but should not be changed in the `route.getSetupIncompleteComponent`.
I believe the `tree.getArguments().get(0)` is necessary because we can't have a `get(0)` return types like `tree.getget(0)` in `getInfo` and `getType` is just `tree.`
Why did you remove the `keyDownUp` block of code?
I don't think we want to do this. It's the only place where the `clear_hashed_changesets` is used, since we don't have a few of the nodes with the `mypy` environment variable, but not all.
Should this link to `makeven`?
I'm assuming thefreeze is ok here?
Is this method used by anything?
Metrics/LineLength: Line is too long. [90/80]
this looks like it is a debug level
This should probably be called `pool.*` or `pool.*` or `DEBUG` I think.
The original code is better: `return ok(result);`, and the exception is being tested.
It should be possible to use `&configErr{tk, fmt.Sprintf()` in the `else` case. (We need to keep `&configErr{tk, fmt.Sprintf()` for other reasons, but I don't see a problem)
Space below `{`
nit: move this to line 16
Please use `LoadWith`.
I'm not sure this is the right fix. If we're using a non-zero string, then `setState(...)` will always be true for the `null`. This will make the `setState()` return false by default.
This file has nothing to do with the PR description.
Why do we need this?
The `extend` is used to run a lot of times in the code. Is there a way to create a `readflow` function? Or are we trying to avoid `extend` calls for all the tests?
Is this the right thing to do? It looks like it could be moved out of `kbfshash`
I'm pretty sure this will break any existing functionality. Maybe it is better to use one of `.min_bytes` and have it also work.
Can you move the `applyPreflightCorsRequest` function to the top of `ProcessContext` above as well?
is not yet exit, OnRegister failed? is that something that is not yet exit?
These two are the same as the one from `deprecated_fields`.
This should be `logger.finest` not `warning`.
Is there a reason to use an enum instead of `codeFlowLocations`?
I would like to use `None` here.
Is `File` the correct type?
Layout/MultilineMethodCallIndentation: Align .stdout with .new on line 298.
Why is this needed instead of just storing a reference in the constructor, since this is the only place where someone could use this property.
useCircuitBreakers -> 100 now ...
The point of this is that `ksql-client` may be the same in every iteration of the `SoftKiller` function.
Is the name still useful? If so, should it be `shared_FORMAT_MOD_LINEAR` instead?
This is wrong. The previous version was correct.
This can be replaced by `util::get_activations(const Layer& child)`.
I think this is the way the default value is `None`.
Is this for debugging or for debugging?
I guess we could also move the logic to `////`?
What is the difference between `putContainerExec` and `StartContainerExecInspect`?
`six coupling` or `six c cant`?
I think in the past we don't have any files in the `Filters` method anymore.
It would make sense to use `unicode_escape` instead of the string literal here, since we don't have to do it in the `save()` function above.
This is a change of behavior. Why is this changing?
Can we use `GetToMember` here?
Should this check be set to `user.GetInitiator() == enumspb.CONTINUE_AS_NEW_INITIATOR_WORKFLOW` ? It seems like it should be handled by the `sync.create_INITIATOR` function, and the `add_prepare_bool` function, but the set could be done in `create_INITIATOR_WORKFLOW`. In general `sync.Initiator` should be a property of the values from `sync.Start`.
The name of the `db` is not clear. We have `test_user` function in `saleor/python_policy.py`.
`self.build` needs to be updated too.
why not using a `dvc recreating` method for this one?
Is the `ext` argument used for anything other than the `Field`?
Wouldn't that work without this?
`System.getProperty()` is a bit confusing since `MessageTestTestEnvironment` is called for a `Cleaning test environment`. It is not the case in `buildTestEnvironment`.
Why is it `llvm`? I don't think it is a `llvm`?
Why this change?
This is wrong. We have this check for `isPathInFields`. It's not an error condition so it returns false.
I think we need to do the same changes in `builtins` to make it more intuitive. I'll have to take a look at the implementation of this in the future.
This is an optimization, but I don't think it should be a user option.
I wonder if this should be an enum instead of an enum ?
I would call this removeSmallerNonces
Just wondering, what would we do if `e.Wait()` fails if both `Wait` and `time.Wait()` call? Or do we need to have a test that checks if the current user doesn't exist? Or wouldn't it work without `Wait(t)`?
This is the most appropriate API.
Why was this needed, instead of just setting it as an enum?
Is there any chance it can ever be json?
This should only be used for testing purposes, but we can add a `ReadRead` annotation that is used for testing purposes in this case.
It seems `final` is not needed here.
We should make sure that the `W9021` is not "%s at all.
I am a bit confused about what is going on here. What about an enum (and a string) or a string like `LINQ` to indicate it's an string?
Use 2 (not 3) spaces for indentation.
This is not right - you can set `roots_seat_set_focus_layer` on a buffer with an array of `set_setting_user`, and `set_seat_set_focus(seat, layer).set_setting_get_args()`.
nit: I like to have `getAll()` return `List<...>` in the typehint.
it is a bad idea to have multiple tests with same name and it makes it more obvious that when the test is actually running
Can we make these static if it's empty?
Do we want to do this on `invoke` or should we be doing the same thing on `invoke`?
I am surprised the `test` call works with this `test_test` instance, so I'd prefer to not do `test_run` on all methods on the `start_test` call.
I think that we should add a description of this field in the constructor instead of creating a new method.
This could use the value `false`.
why 20? wouldn't that break the assert?
I think it is better to make the copyright year in the file to prevent the copyright year.
This is not a good place to do this. The previous code should be `.start()` instead of `selection_specs`. I think it should be the same as `selection_specs`.
Can you add an example here that will let people not use the same `+` attributes?
Is this related to this PR, or am I missing it?
Can this just be ` dynamo_exiting_synched`, and then `true` for `exited`?
Why does this need to move up the `#if` condition in the `#if` condition?
Why the change here?
I'm not sure I follow this change. The idea of having a "order" here is that if the user tries to call a "order" it, the previous function will be called "reorder" instead of "order". So we need a "reorder" here, and that if the user passes "order" instead, it's not really necessary for this scope.
This should not affect any other w. Instead of w.width, can it be w.width?
probably need to implement implement implement any files in `/cli`, too.
you don't need to call `get` here since you already already call `fetchPrivate`
I don't understand the point of moving this check here - this is a bit of a hack, and could be moved into the function that takes the arguments, and if the user doesn't have it, then we would need to check that it does in the method signature, or if it is necessary to handle the case.
Please add a license header.
shold we call this `provided` instead of `MIMEions` ?
One of the most important specs are to make the tests pass, but it's not going to be too big of a habit to add a `before` and a `original_twitter_digits_path` key in the config file. We should probably make a note of how to test this.
so we are not using "Invaid DMA Handle" in the DMA data?
I'd rather see the experience with `@project` being changed here, I don't think it's a good idea.
Is this not needed anymore?
why is this removed?
`args.length > 0` is more efficient.
We can use the `Lockmasss` field instead. It is used for a more specific term in `is_Argument()`.
Why not use ` stable.string`?
I don't think this needs to be here as we'll never be able to get into the data from `slot.isSupporting` and we can get rid of it from the `slot` instance.
I am wondering if we should set this to zero even if it's not there. What do you think?
This was the one that was used for a while, I don't think it's an issue. I'm not sure it matters, but maybe it was something I'm missing on?
I don't like the idea of having this return the same string in the source code.
I think it would be nicer to add a `requireNonNull` method to `active_elections_size`
nit: I would prefer to have this in a function.
why `newCIStr()` can return null here?
I am not sure how I feel about this - I would recommend a simple function `isinstance(v, (list, np.data, data))` or similar. Also, I would recommend renaming to: `if ((len(dict[:data] for n in source.data.length))`
You should add a `SQL` field to the form, like you did with the `column` here
this is already handled in the above file
I don't understand the `api_controllers.xml` check. Why are we changing it if we want.
Why not just call the flag something like `elif`?
NIT: maybe `IEnumerable<default>`?
Please rename to `String appId`
Is there any change to remove the assertion at the top of this file?
Why change the default value for the max number of seconds?
Can this be `""` instead of `dict`?
If it's not meant to be called on every environment, does it need to be called on every environment?
Please use `org.infinispan.client.core.config.SimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimpleSimple
Why did this need to change? There's a lot of duplicated code in this file that can be refactored to use it.
I think in this class, can this be removed?
How is the `filterExpressions` argument ever false? It could be a no-op if the `filterExpressions` is `table.spec()`.
(style) externs should be avoided in .c files
Why is this needed?
I don't think we should use 2 here, we are returning a `true` object, not a `inMemory` object
Please keep `FastSync` as default. It's not a boolean, so we should just make it a default.
I'm not sure if this method is used any more?
This is wrong. `proc_num_simd_saved()` should always be an `int`.
This is not an output change, is this a bug fix?
Why change this? I think we should not be using the `{}`.
I assume this is the other way round, but I don't see any other engine type. Could you add them?
I'm not sure this is correct: - if it's length, it's 8 seconds, right?
Why not `private static` and `super(id, name)`?
This seems like a bad assumption, as we now allow a param to be created by any caller.
Maybe rename this to `getDefault()` instead?
No need to change this. The changes in this file look good to me.
@smarterclayton should this be debug?
I'd like to see a new assertion in the new implementation
Please revert unnecessary whitespace changes.
I would call this `PGP_MIME`. This is a little bit confusing with the other ones, IMO.
remove the from stage.
I don't think that we need to change the XNA test. This is because of the new TThreadPoolServer that is being used to create TResource.
move it next to the next `const` after `dilation_w`
I'm not convinced what this change is trying to do with an `List<T extends WebElement>` here. In that case, we can do `List<EXlink WebElement>` with a `T extends WebElement` instead of `T extends WebElement`.
Should this have a separate `Service` key that is already done with this?
What was the plan on moving this up? Seems like a separate issue to track down the other pull request.
Is there a reason why we can't just use `type->is_set()` here?
What if there were more than one registry? This is a bad place to do...
If I recall correctly, it might be worth changing this message to `warn("Received invalid HELLO message, set log level to TRACE for message body", e);` (it's a warning for a body).
You can probably move this outside the if condition to be a bit more efficient (and maybe even more `is_text_only`)
I would make the same change here.
Hey @dvoytenko @deads2k i'm not a huge fan of this, but I'm not sure it's a good idea to have `Sources` be passed here. Is that intended? Can't it just be a List<string>()?
I would suggest using `tree.getMembers().stream()` instead.
Not sure why it was here, this is still necessary for `appId` to be a string rather than an empty string.
You can merge these two ifs into one
These should have been private to match the other key names
Lint/UnusedMethodArgument: Unused method argument - `.select(", ...)`. If it's necessary, use _ or _evaluator as an argument name to indicate that it won't be used. You can also write as `acc + value.select(&:any?)`.
I think it would be more clear if this was just a `[0]` rather than `[0]`. I don't see how this method would do this.
Nit: we can use `.build()`.
I think this is still not the right place for this, since the `TrySpan()` will be set to `null`, but if we do this in an `if(scope)` block, this will throw an exception, and if we ever return false. I think we'll be able to use it here instead.
Why not the final, it's not a final, but the type has been removed?
Is it worth putting the newline before the last sentence (not after the change)?
Why do we need this?
Please keep the `dotnet/#additional-permissions-for-iis` tag.
Why does this need to be `NodeSpan`? I don't think it's necessary.
There's no point in using `remove` here, as this is not related to the fix
Does this need to be a property?
this should be changed in API, it is not used
nit: we can remove this too.
Shouldn't the assert be part of the `Mdc` in both cases?
This empty line break seems to be unused now
We should also have `LightGBMCallbackEnv` be added to the `Nextapi/platform` environment.
What is going on here? Why are we returning a attackedSet instead of silently returning a attacked object?
@salesforce/design-system/components/carousel/__examples__/default.jsx I'm not seeing where it's used. Can you clarify that the siteStories in the list is used?
For readability, I would prefer to have a separate set of flags for the `scripts` field instead of `privkey2electrum`
I see that there is nothing in this PR that should be updated to make it a bit more realistic.
I'm not sure we need to make this package private, since we already have `IConnection` for the `NamedClass<T>`
No `@executable` annotation on this line (this is a leftover)
should we have this call `sendPing()` and call `sendPing()` here and in other similar places?
Let's move this import to the top so that all the generated classes are known at the top.
nit: you can use `get_global_operations` directly.
Should these be `""` rather than `m.Group`?
I wouldn't use a fixed `getRegistry` here as this would simplify the code from what I said to avoid.
I am not sure why you removed this change, is this a bug?
Maybe a better name would be `HeadEventsEvents()`?
Could you please add the same `self.assertItemsEqual(classifier.getPartitionIdPerPattern(), np.inf, 413])` above?
Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
This could be `final`.
Should the chain chain be updated?
Do we need to also test for the enum name?
This test case should have a unit test where `storage_strict_json` is not defined, and the test case needs to be checked in.
This is the fix. The correct spelling is "127.0.0.2"
I think you want the property to be renamed to `ThreadSafe`, and the getter. And we want the setter to handle `ThreadSafe` as well as `ThreadSafe`.
@agramfort this is not needed
I think we should add some type annotation here. I don't think we need them in future.
I don't understand why it's here, the other fix is to use "list of PodIOChaosList already."
Do we still need lowerCamel for lowerCamel to be lowerCamel?
Why is the `IsCompatibleTo` needed?
This was changed to `libkb/storageclass-1r.yaml` which will be fixed in #4209.
I think you meant `Transport.Libuv.Internal` instead?
Is this variable used? Are we going to add it to the base class?
This name isn't very descriptive. What is a difference between the two functions?
We need to be careful here with the code that uses the Response struct which is used by the `GET` struct. Can we remove this field entirely entirely?
I'm pretty sure this will be the best way to fix this, but the `Config.BoolParameter` is not the default, so I would say `upstream_status_when_all` is just forcing the default to the other `Config.Config.Bool`
@deads2k this is where I was seeing a problem before. I'm not sure about this change, but I was thinking about how to avoid the `frame` target.
This is a good idea. The only reason we need the config object to be set to the `Map.getBackingConfigurationSource()` if we do not expect anything to be present in the constructor.
why not using a different name like `LoadImageTimeout`?
Why the v1beta1?
This will break existing code, right?
Isn't this the same as the one on the `ROID` module in `lib/spawn.h`? I don't understand if that's the case anymore.
If I'm understanding this correctly, the first step of IsDeleted returns returns false seems not a boolean, why do we need to add it for a new step? It would be a bit simpler if we keep it in a separate function.
Should we add an assert here that "line 100" is an unknown exception?
The function `value` is not used, it can be deleted.
what are the resync?
I think this should be done on the other line, because they don't seem to have to match what the code was doing, but they are all about the same level as the first line. The second line has the same pattern, so the second line should be the same as the first line.
I'm a bit concerned here, if this is a strange thing to do, then the `class meaningful` will not be the best way to get the `composite_root` from the package.
@smarterclayton do we need this in any way?
Add docstring. "Use the new Ruby 1.9 hash syntax.
`if r.TLS != "https"`
I don't think this is the right approach... but the user would expect it to be `mbable.vn.Path` or `mbable.vn.Path` and `Y_Show`
Should these import changes (line 34) be reverted?
I think the indentation is unnecessary here (and below :stuck_out_tongue_winking_eye: )
Why do we need this change?
I believe this is a bit ambiguous. We can probably remove the `bool` here.
I thought we had a way to test the result of the tests?
This import is unnecessary.
This should probably stay as `javax.annotation.SuppressLint`
Not sure if we need this change. We don't need to do anything with it, since this is a user-specified pool.
The fallback is already done when `$config['primary']` is set to true, so it's not an error.
Can you please make this the default value instead of just the one from `types`?
You need to remove ` careful` here.
What are the implications of removing this assert
I think we should add a TODO to remove this
@jackfrancis I am not sure if there is any need to check for the non-zero case here. I would prefer `LowestInsertedHeader?.Number ?? 0` to be more explicit.
Please add Gobblin.same here, IMO this can be an `@Deprecated`
The original code was correct, but now this doesn't work on Linux.
Shouldn't this just be removed?
Do you think it might be worthwhile to do this by using `_to_yaxis` instead?
Was this a typo?
I think it might be better to change this to `List[str, int]`. It can be a bit more intuitive to have `str` as a default argument
I think the `Default` is wrong here, since this isn't used anywhere.
can you remove this empty line?
should this be `chainID`?
Would this still handle the case when someone calls `querySelectorAll`?
The intention was to make this more explicit, maybe `Scala_tied_PPSZ_half_16_vex32_ev64 = memory` and `Scala_tied_PPSZ_half_16_vex32_ev64 = memory`?
This is a very small change and not quite right. What I think is it that you can just make the constructor static and set the value inside the function and then do `vStringOrClear(label)`?
Why is this here and not in the others?
I'm surprised this didn't compile for the PR.
It is not possible to use the actual actual import. We need to be sure that all of the import blocks have been changed to not to change the order of import blocks.
We shouldn't be using this for loop in production.
this will overwrite the assumption that the disk cache has been closed.
this doesn't have to be done for every use
It's not necessary to use the same method name as for the command line tool.
Why change this one?
Would it be possible to move this logic inside the `else` blocks since it's already a part of the `if` block? That would be a little better if we can just call `gulp dist` with a few more calls in this if clause.
This is now no longer needed.
I would use assertRaisesRegex() as the test name is different
Should we also add the path of `perm_addNodesToWhitelist.get(false)` to the `addNodesToAllowlist`?
Why not `false`, the `empty()` call is not needed anymore?
Why not `unlockContainer` as it's only used in `gulp help`. I'm curious what you are going on here (and the `unlockContainer` function is used in `klog/server/auth/container_node.go`)
Where is this class defined?
I wonder if this could be a separate PR if `TimeName` was not changed to `f1,y,y,y.4,`?
Doesn't look like this is a bug. The API that calls `Support*` on the `*` in the `*` function in `register.go` is called for every `MarshalOptions`.
This looks like it was just a bug before. Please revert this back.
please avoid putting this in a local variable in case it is not used
Why was this added? Seems redundant...
The <msg> Is there a specific reason this needs to be done for the server?
This test needs to use `class.array` since it is an error in `app.js`, not `app.js`.
Should we set this to "None" or something? This will allow the user to override the current time, right?
How about we make `VkGeometryNV` a constant.
I think we should be able to remove this
Import packages should have not used any more.
This file can be removed.
I think this can go away since it is now a constant.
`this` is a subclass of `#merge` so I wonder if this would be a good thing to consider. @pgavlin ?
- [java.js, SE5]
If the wlr_surface contains the wlr format, the output should be the same as the output of the `wlr_log_create`.
@agramfort see `no_to_compare_dataset` used below.
This is an example of why the prefix is set in the schema instead of the default one. The problem with this is that the default one is set in a way that has both a `ent path`, which is not what this was supposed to do.
This is not a `List<?>` anymore.
For example, we can rename this to `use Thelia\Near\CouponNames` and rename the other way around to make it clear
I think it might make sense to rename `tg` to `API` to be consistent with other services
I don't think we shouldn't need to do any changes.
We can delete this line now.
What is this? Is it a runtime name? I would expect it to be `gc` or something, so it could be confusing to read it somewhere else.
Shouldn't this also check for fields? Otherwise the fields wouldn't be equivalent, even if it is a `discriminatorMapping`, right?
This looks like it is used only when the `kexa/commons` package is used, so let's keep it simple.
Is the change here really necessary, or was it just to change the `DiskList` to `string`?
Should the `*Mux` be passed in here to make it more general for users who are seeing here?
It looks like you didn't use `pkt`, but I think this is a bit too short.
Why was this necessary?
I believe these can be grouped together.
What are the differences between these two?
this can't be changed. it can be changed after this PR
I think we are missing a `ws`.
I think we may need a different solution than this. If the user is not aware that it is an enum, but the code does not return a value. This will avoid this problem, if you want to look into it.
This should probably have a trailing comma
can we also move this and `x_rd` keys to where they're used.
I'm not sure this is a good name to add, but it could be `query_args = self.version_id: {}`
This was the only change that affects my own programming. If there were two calls: - `models.decodeMetaData(...)` I wouldn't say "that's an error". This is a little scary and I wouldn't say "that would have failed" but in this case there's no `err != nil` check.
Can we also do `require 'bolt/error'` in `config.html.erbolt.error`?
Can you use a `column_fields` constant in this way? There are some users doing their own `index` objects, so I think `update_col(df)` may need to know about the index (e.g. `update_info_only`)
`hiveScanMode = undefined;` is redundant, because this variable has been initialized with the same value.
I'm not sure this is necessary since we will use the existing API.
Why is this needed?
I wonder if we should be using the `protoproto` here?
This looks a little out-of-place. Perhaps you want to remove the "adamcrestale\n\n* 'mov' in the PR description and just keep the old version.
I think you can just omit this whole `LoadMetrics` altogether
I would probably make this a `dump_summary`, similar to above: `describe "custom_colors" do`
I'm curious how come other similar changes are needed in this PR.
How about `_env.env_mode_on_change`?
Should we have the `Headers()` call at the bottom of the test? Seems like they could be called in a separate test.
Can you please add a `TODO` here as well?
@brycemcanally, this is the fix for the tests, right? If there's some kind of consequences to this change we should not be adding new tests.
Is this a breaking change?
Just noticed this, removed from the PR.
this test does not test anything else?
This should be in `__init__` instead of in `__init__`.
is the error also present on the command line?
I think this should be a part of the interface interface and not a subclass interface
I don't know why this isn't the best approach. Why do we have a single source of manifest file?
I'd rather not have to do this, but I would expect a better method for this to return a `null`.
This will lead to a performance regression, but I am not sure if it makes sense to have this check here.
what is the difference between the two arguments?
I think it would be better to move this to the previous `if` statement, since it's the only one that is used for the other uses.
The reason for this change is because we don't care about the order of the `string` types in the `Consumer(props, context)` method, so this could be `Date.children(props.selector)`
I think `_blockTree.Header == _blockTree.Genesis` was added, to be sure, the code is correct: `blockTree.Header != _blockTree.Genesis` is false
Is there any reason this has to be a path rather than a path?
Not sure why this has changed.
Do we want a space here or `import`? It's more readable and makes the line too specific.
should we make this a string string for all nodes and not have it?
This change is really needed. This change does not seem to be related to this change.
Can we make the property `target_Dveral_MICROSERVICE`? We're trying to make a name change for it to use the internal constant for the internal class name.
The only place where we're testing these tests are the only ones in the file (in `obj.engine.config[Provisioning.PROV]` where we have it). This seems a bit redundant, since it doesn't have `isort` and doesn't have any effect for `isort`
@mjkkirschner Is this the best place for this change?
I guess this is a bit vague, maybe we should just have `sys.path.append(host=config.INFLUX_HOST, port=config.INFLUX_TEST_DB, database=config.INFLUX_TEST_DB):`
Can we make this `_x` or even `analytics`?
I don't know what the API is exactly, if we really want to make a validation sets, do we want to make it configurable?
Can we put this into the `removeHeader` class instead?
`+` instead of `+`?
Can this just be `_getAlgorithm`, and the `_getAlgorithm` function calls in the constructor?
Can we make this `private final` and the `private final` method?
This is a bit confusing, because `strictPopulate` is `null`. Maybe it should just be `strictPopulate=true`?
I am not sure if this test is correct. The test should be testing the correct value of testObject (which is an invalid value).
How can we call this `confirm_backslash` or something? That would be more consistent with other examples of what the `confirm_backslash` and what it does
Why is this change necessary?
`MetadataMetadata` has a `use="keep"` block (like `use="keep"`). I'd suggest using `MetadataMetadataMetadata = ManifestFiles.read(manifest, ops.io(), ops.current().specsById())` and then checking for the reader.
I think there's a typo here.
Please revert the empty line.
Why is this needed?
I'm a bit not entirely convinced about this being used. It should probably be "execution_source.cpp" to make things easier.
is this going to work for you or is it intentional?
Can you create a one-liner to use a static method instead of a new one?
I don't think this line is necessary
I think this should be on the `Attach.where(&:blank?).map(&:to_i)`
I don't understand this. If the test passes, it will return a `dict` if there is no `1` (in `caddyfile`), so we can't just return the `0` (in this case we can't just call the `TestAccch6464`). But if the `TestAccch6464` is defined, it should just be `1.
Could you explain why you need to revisited for the model?
We already have the browser in the DAG so this can be changed to "Never"
This part of the test is a bit scary, but this is a bit scary I think. It seems a bit of a hack I have to make to pass the `split1cheo2y9w` as a field to the `split1cheo2y9w` instead. Can you please change it so that it is clearer that the field name is not in a data part of the data part.
I don't like how this could happen.
I think this is not right. It is supposed to be an error here.
this is only used in one place, right? why not create it in the constructor
nit: I'd prefer a separate PR to not use an explicit `SendException` here
This is the only change I've noticed. I'll remove this.
These can be private, as they are used by the base class.
why is this attribute required? It looks like `event.DataEncoded = true` should be removed. And same for line in line 567 below...
Is this change necessary?
This is not the only usage of `DesktopSwitch::setDesktop`.
I think we should not be using this in Saleor's `root` method.
I don't think it is worth it to avoid the diff if we don't use it in your constructor.
I'm not sure why we would ever want to do this because of an `reason` action. Is it a separate PR?
I know this isn't a spec, but it would be nice to also check for `.send` and `.promotedCatalog`
const auto data_arr_host = la::matrix<float>::wrap(data_arr_device.get_data(), column_count }
This is not right: `default: `false` -> `update_color` or `update_color`. `conda.model.hyperlink` is the correct location for the case that we don't want to support the API. I'm not sure why the API is needed.
Do we need to make sure `Slf4jLogsafeArgs` is set?
Just a suggestion. It's not clear why the name isn't "errors" in the name. I think we could add something like "unable to connect to peer:" but it would be more useful. "unable to connect to peer:"
Nit: It would be nice if we could also have a `let` statement for this instead of passing an empty compression.
Please put "conform" inside the `--filename-suffix` flag. They're not used in both places.
the error is probably wrong - we should keep the `redhat` level around and then check if it's an `Package` level.
This class is removed, and should not be deleted. The same is for the `RetryWidthTypeBinaryBatchReader` class.
Shouldn't this be an error instead of a hardcoded string?
This should be `pin`.
Should we also set the default for "sendCommandForDownloadChromeHeadLess" and "sendCommandForDownloadChromeHeadLess" to "sendCommandForDownloadChromeHeadLess" in the context? Or is this just for clarity? Or will the value in the context in the context in the context of the user-specified setting a different name?
Why is this not needed anymore?
Why don't you use the shorthand like in the `@var`?
Is this supposed to be used in this PR?
Do we need that file? Seems like it is not used by this PR.
`axe._tree[0]` will always be true because `nodes[index] === null` is always true
why not using the actual actual actual actual actual actual ones?
We should probably add this to the `FileHelper.CombinePath` function as well in case of `FileHelper.IsRootedPath`
`Config` is a config object. Should we rename it as `NewConnectionConfig` as well?
I think we might consider recomputing this into a `let item = playbackManager.getPlayerState(playbackManager.getCurrentPlayer()).NowPlayingItem;`
`unsubscribed_from_emails` was a third party, and so it looks like it should be `zip_code, :country` I think.
Should this be `StringBuilder` to prevent mis-use compatibility?
why does this need to be `static`? I believe a less readable solution would be to rename the property to `firstTimepublishSubject`
This needs to be successful.map
We already have `var width = flowFileStatus.Width - 2`, right? We already have `var filePath = loadingStatus.Transform.VerticalScrollBarWidth`. This seems to be the only thing that is needed.
This is an error.
I don't think this is the right place to put this. Maybe it should just be `TestApplyEnv_Platform`? That way we can have the same problem when `TestApplyEnv_Entrypoint` fails to be called from the `TestApplyEnv` instance.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Do you have any idea why we wouldn't expect to run into this test as it's not doing anything else?
I wonder if we could have a separate PR that makes this more obvious, but it may be worth adding an annotation that is in place to make sure it works correctly for now.
Is the line doing a `expect()`, then? If yes, the line will be removed from this line.
This is an oversight.
Should the line break break this line?
I guess I'm mistaken. Do we need this for other types of files? I don't know if it's the case. If it doesn't, why not just make it a private method?
Do we need a similar line for the `require` one?
this is an API break
Anyone have a reason for this change? Can you explain why we have some rule for it?
This doesn't have to be fixed yet.
You should use `TEST_EVENT_PATTERN_1`. It's not necessary for `unittest.TestCase`
why not use the existing `onelyely` method in these cases?
This is a good change that makes the schema id more readable. I'm not sure it makes sense to do this in `schema.getSummary()` if we are not going to change that.
how is this related to the PR?
Is there a constant somewhere?
Why do we need this one? Isn't it redundant with `require.NoError(err)`?
Can you add a blank line after the declarations and before the `:=`?
I'd move these to a new test file.
@gabonisl Can we add a little more details here for users who have used it?
@stephentoub why was this added? Is this change to me, as I remember correctly? Is there any test that was actually being skipped before?
I think you can use a `conntrack.NewScanner` here
`forEach` is not necessary anymore.
Can this use `self._APP.Series` instead of `(pd.Series)`?
I don't think there's anything here
You can use `Language(strict_types=1);` rather than casting the `declare` to `Language(ContainerConfigurator)` so you don't need to add it here
Could it make more sense to just ignore feature gate if we don't have feature gate in this place?
I think it would be a good idea to log a warning about the error that the runners were not actually running at all.
Why not just put this constant in the `flow_trigger` class.
This will likely cause a merge conflict.
Why the change?
What happens if this property is `AspnetRouteTemplateResourceNamesEnabled`, is this the correct type of exception?
I'm not sure what you meant about :IID. I'd say we just don't have to do it after the call to `NoIID`.
(style) space required after that ',' (ctx:VxV)
Is it possible to have two types types as BOOLEAN?
Why `getParentSvg()` is a `null` value and not a `null` value?
@jridgewell I think a better name would be `Nat portRange` or `structizedizedInfo` or something, since this is the default of the `structizedInfo`
There doesn't seem to be any other code in this file, it seems to call the variable twice
why did this get made?
why does the name need to be in the file name?
Why is this change necessary? The addon could use `name.lower()` to get the same value for every `name` attribute, but for `.name`.
Nit: `withType(Test.class)` would be clearer.
This is a breaking change. We should probably make it a bit more general, it's better to use `Thread(Thread(WriterConfig, index)` and use the default values. That way it can be used in all the tests. This is an internal API change as well as the API change we will also need to be updated.
If we're not using `*SupportAssetsPrecision` we can also delete it entirely, since it is the type of `*`
Which issue is this? It should always be the same as `$sortFieldParts[0]` and we should not have `$aliases` here unless a failure is actually triggered.
Why remove this removal? It's not used anywhere.
Is this used anywhere?
Why this test is not asserting that sqlcipher version is not running, but the `assertEquals` tests are in `Assert.assertEqual`? I can't see where where is `@Rule` coming from.
I'm not sure about this change, we are adding this property to `binlog` now. The only thing `binlog` is in `binlog.Create`, but the other two can be moved out of `tools`, `binlog`.
This was the only thing I would suggest to use in the docstring that was working correctly.
Do we really need to make sure that all services are coming through to the same thread?
Isn't that an error?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think this should be here
Line is too long. [91/80]
Does it make sense to call this one `Regex.Escape`? It's not clear what's the purpose of this PR, so the change is not clear to me. I'm not sure why the fact that `Compiled` here is a string in the code. The problem is that it is not doing anything more than it should be a `[ $]`.
Please use `<<` instead of `<<`.
how is this file related with this patch?
Why not using the `\` class here as well?
this import is unused
This is not needed anymore
I don't think you need the `== NULL` part.
We might want to remove the `Data` parameter, since it's not used anywhere
How does this work?
Line is too long. [81/80]<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should we also add an extra `TracerProvider` to the `L`?
This line needs to be removed.
Shouldn't we check both `iframes` and `distributor_setting`? We are checking if both `terraform==false` and `terraform==false`.
`set_record_timestamp` method is not used anymore. You can remove this function.
Should this class be removed as well?
I'd recommend moving `if` into a single line like `if (localFieldGetters && localFieldGetters.length) {` and doing `if (localFieldGetters[0].call(doc, doc[localField]);])` at the beginning to avoid duplication
This was the only one that was needed.
Can you move this import below the `[proto]` imports?
Can you please use a dynamo console.paych from the other place this is not in the codebase as well.
Can you elaborate a bit why we need to do the exact same thing here?
I think it would be better if we keep this private method.
Is there any reason we need to make it a constant?
Is it possible to also check the status code for `isKilledBySLA`? It may also be a case where `node.getStatus() != Status.KILLED` is empty and we could then check that if the status code is not missing.
I don't understand this change. Why is the behavior of the private field visible, but only `mCharset` is declared as `protected ArrayList<Field>`.
I'm not sure I like the name `InFs`
Just a note - we should probably make these `[0x09, 'Z'` as well.
could use `debug` to avoid duplicating log message.
`win._utils.database.getName` is a better choice.
if we don't have a `replaceNode` here, we should just always set it to false.
Should it be wrapped in `assert`?
Does this need to be a `Set`? I don't think this will work in the future
We might want to do this to match the API perspective. If we don't need the `vm.MatchFold` function in `main.go` it will return false when a field is deleted and a `vm.go` is provided. I'm also fine with merging the `vm.go` file, but I don't think there's a better way (and this is fine too). Also we should be able to just make it `vm.go`
Can we remove this `": null`? It should be used instead of `": null`
isn't this an almost identical utility function?
I am wondering about the situation where you changed `pylint.config.Configuration()` to `pylint.config.persistent` would not have been called?
Is there some reason this was added? We are returning only if TYPE_CHECKING
Just a thought, would it make sense to move the feature to the dev list?
I'm not sure how to do this, but this file should be named `synchronizedsynchronizedMAFormatterRule()` IMO
I don't think this is correct. The issue is that you need a specific `formBestHeaderHash` for a getter to be passed.
Please make sure this doesn't happen in anything other than this, but I think it'd be worth having a `[0-9][2]` here as well.
Could we use some more meaningful name? Like `brief` or `ColorColorColorColorColorColorColorColorColorColorColorColorColorColor?
I think it will be easier to read if `p.config.BlockCache().Get(ptr)` was moved to `p.progressCh()` in `p.progressCh()`, no need to check it in `BlockCache()`.
Block body expression is on the same line as the block start.
I think this should be final.
This isn't a boolean flag -- we already know it's an object, and we can just call them `config.force_ssl`?
I'm not sure I see the point of this test...
these are deprecated in this PR
this is now an unrelated change.
nit: `select` is not necessary here.
We can omit the subclass of `ebsOptimized` altogether.
How could a null check be done if `newAccount.getUuid()` is null?
This looks wrong. `result.size() > 0` will be a non-null result.
Why the fix in this PR?
Is this meant to be here?
@h3rian Please write `selectAll(`WITH RECURSIVE)` to avoid unnecessary work here.
@jridgewell I'm not sure why we made this change? I am guessing it's a no-op...
For consistency, we could do something like `config.detach(true)` instead. We can do a `return setupDev.setupDev(true)` for the future.
I think I'd expect this to go to the `buildEnvStored` struct. The `Info` struct is used by the `Info` struct.
Why removing receiver parameter from provider?
We don't need this URL. it should be a URL. The doc says it does not, but it's used to get a query.
I'm not sure what the right thing to do is. The payloadGas check here will be less confusing for people not to know what the value we do.
I know it is not your change, but do you think it is necessary to call TOKEN_EXP_DEFAULT here?
Shouldn't we have a typeWidth as well? (and all other type hint.)
Why was this a "3" bug?
Although this is correct, please use `Module.getBoolean(..., "Module", "Model", "Module", "BaseModule);`
@erwinmombay This import is unused
nit: you can pass `OptionalInt` here and call the function `setNulls` directly to avoid duplicating code duplication.
Why is this change required?
The variable 'to_suggestion'. It seems that 'to_suggestion' is the same, but it seems that the 'to_suggestion' is different. Could you check if you have more than one or more about that? I have a feeling that this is not the case.
@simitt I'm a bit concerned about this being handled in the PR. Does not seem related to your change?
this is going to happen under the state machine if the vensus was empty, but this code was not indeed not being returned. It's the default behavior, and we can add it to the state machine that we have before the vensus is empty.
Does this mean that we don't have to wrap this in a `args`?
I think it will be better to use a String.Format here
I don't think you need the `Backend` here.
why the double read here ?
This was the actual change for #17327 so it's not necessary to change it.
I think that we should change this to `openssl-rfc.mapping.html`
I am not a big fan of this change, it would have been good to get rid of the enum as this is the key of the "new" part of the interface, so it can't be in the final PR but I'm not sure it would be better to leave it.
I believe this is an index into the log entry, not the handle
I think `ldap3` should be updated to the new `ldap` package.
why is `local.Series` removed?
Shouldn't it be $selectFieldRenderer = \TYPO3\\CMS\Core\Utility\GeneralUtility::makeInstance('TYPO3\\\\\\Form\\Element\\SelectElement') ?
This is a bit dangerous, because if the type of the lock is in the base64 class, there is no guarantee that these type of methods are only added to the user's type.
Hmm, this should be `current_backend = 'bokeh'`
We should use the new constants here.
why use `ResourceReference` here instead of `parameterField`?
Why is this change necessary?
I think you could use the capitalization for `combat` as well.
@jsoriano Can you review this change?
why remove this?
Why do you change these three lines and all the others below?
The logic is wrong now that `v := values.New(t.KeyValues[j]) > > v.Value` will always have the value as a value and the value would never be specified. Is that intentional?
shouldn't this be `!` (no need for `permissions)`, as it was before, no?
nitpicking - this is not needed since the `serviceAccountTokenCreator` is used in test files.
I think you may want to import `Color` from `org.apache.commons.lang3.markdown#Color`.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
NIT, and not quite sure if this is needed.
Should we change the 100 column name too? It may be a little better to change it to `current 100`?
The `stream` parameter must be `nullptr`, and if it isn't, I think we should just be able to get rid of it.
Don't change this, import the error from `JSON`
Should this be `getInitializedInitialized` ?
This is a change in behavior, but if we're already using an `else` I'm not sure we want to log a message about it. We might want to add the `if return` to the `else` case.
Line is too long. [93/80]
This should be a different thing than what we had before, since this can be fixed by a different issue.
This is the only use of `Put` for RHEL, but it might be good to have here a `Put_default` or something like that.
Does this work? I would expect all callers to pass it for bytes.fromhex (i.e. not use a private function) because it's a public function and the line breaks would fail.
@bzz Sorry for the fix. This is a bug fix in general. It should say what's going on with the field name and not output. Please fix the message.
Shouldn't it be done after `g_events` check?
This doesn't seem quite right. `index.displayName` should never be used?
I think this could be moved to a common interface interface
should be a `let`
Line is too long. [87/80]
Is there another place that we could could use `ViewModelInstanceRequest`?
Does this really need to be a warning? I thought `num_of_messages` might not be the same as `logging.Constants` (because the messages are disabled with `logging.Constants`?)
Is it a good idea to use pprofHandlers here? Or do we need to track pprof/foo?
remove empty line since this is not a global imports
shouldn't this test also test for the same amount of code?
This is not needed if the s3f consists of the existing `#IPv6` and doesn't have a default value.
This is a `[2]` which is actually not tested. It is still `[2]` which will be removed when you are in other parts of the release notes.
Just noticed that we were using spaces inside square brackets.
"the default mitigation behavior will be used (currently off)"
Why is this removed?
The check should be done for `pending_confirmation_height` and `max_pending_cut_off`, because the logic below will still fail and the call to `send_ptr` is always `nil`.
Please avoid using deprecated import order.
I think the `allCategoryButton#setOnAction` can be `null`, right?
can we also delete the error message?
can this be a const?
We have the config and retry retry. Why can't we use that instead?
I don't know if I need to change `NetworkConfig` because I'm not sure why we need `repository` and all `repository` properties, but `repository` is available at all.
`this` should not be required.
This should be `actions`.
This isn't a good idea, but I would have expected the if statement to be `_hydrating === true`, but I think that it's a bit more readable. What if we used to remain on a `suspended` instead.
Should this be using `os.path.exists('URL is a local file', None)` here?
why did you delete this?
Let's just call it `const`
This is still a random sort change.
Was this left over from debugging?
please make the parameter `double *, double *, double *` not `False`
This feels wrong to me that we have a `nonce` variable but the method `account?` is redundant
@daniel-becker33 I think this test should be reverted.
why not using `UpdateMetadata`?
`CreateCreateFactory.CreateFactory.CreateFactory` should be in the `MetadataProps` and `CreateFactory.CreateFactory`
Can you use `exit()`` here for consistency with how the rest of the file works?
You're missing a space here.
I think this should have a `delete` method on `--blacklist`.
Shouldn't this be an error message instead of an exception?
@jcotela is it ok to use the default value from `bool` to `bool`?
I wonder whether we should make `register_module` a subclass of `_descendM_it_AR`, that way it's not being used in this file?
I think we should also check targ!=True in case it's an invalid path
this is an API break, it could be in a separate commit
Should this be `NotImplementedKey`? I think we should be consistent about whether it's `runtimeKey` or not.
@drcrallen are we able to get rid of this TODO?
This is wrong. The protocol here won't be able to get rid of the `UnpartitionedWriter`. The protocol is still in the final version. The only thing that takes the Java side is that it's a set of constructors (which is now on the stream). The constructor is not being called on the `InternalRow`, so I'd suggest `Function<InternalRow>` that is the correct thing. I would suggest you remove the `TaskWriter` and `Function<InternalRow>`, or some other `Function<InternalRow>`, which can be removed (not to make sure).
why not using `.c_str()` directly?
should this be a Felix + use it in test function?
Is there a test for the `is_builtin` case?
I assume we don't care if parent doesn't exist?
@mjkkirschner Is this going to be a problem with the `interceptors` API? I don't see the `--interceptor` flag defined by the `--interceptors` flag.
I'd move this class to the "main" class to be consistent with the other static methods and into the static classes.
Looks like there is no `memset_s` in this function?
I'd rather not do this. The module is set to `4.7-3.8` and we want to only use 3.7-3.8 if you want to use the stdlib version (and not just 3.7-3.8).
@stephentoub do you think we need this?
this is wrong... it should benum_simd_saved_abs = MCXT_NUM_SIMD_SLOTS;
This should be `2.2.0.dev0` instead of `2.2.2.1` (it would be nice in a separate commit).
Line 158 needs changing, too.
It's fine to leave a static import here but you can get rid of your editor.
This would be a breaking change.
update this (and the one in `setUp`)
This should be in the `after_update`.
Maybe this should be an optional parameter? `PodReference` is a more general purpose here
I am not sure this should be here since the flag name `gcnArch` is not set when calling this. This seems like a good idea to have a more specific name.
I think it's better to have it be `Brave`?
I wonder if we should rename this to `HOUSE_directory_BY_ACCOUNT`.
Can we use this same variable for everyone in this patch?
`target_decoded_bbox` is not used anywhere so I think we should just remove the `target_means` arg altogether.
The only caller of this is setting is `ignoreignore`, so it doesn't matter, but I guess it's not too much of a huge deal since the `env` is only used for some of them (or even just `ignoreignore`)?
Nit: use `print("{owner}/{pkg} already installed.".format(...)`
I think we should add setDefaultSettings as a parameter for these tests. It would have been best if these are needed.
For some reason, when a user passes `...` here, this looks like it will still be able to use `...` with the `...` in `List[str]`.
Not sure if this should be a Beam?
@mmaxim this is the only change required here. `cspcObj` is a list but only used by a single file.
Do you know why we can't just return the exp object, even if it fails (e.g. `hashStr`). I would prefer to have this return `(hashStr, err != nil)` rather than doing that in both cases.
I'd make these changes to make the code less readable.
This doesn't need it any more.
Please consider calling this `minLatitude == maxLongitude`. It should make it clear it is only for debugging.
@daniel-beck, are we sure this will not work if ParameterizedMetricKey is disabled?
Would be good to have this property be in the constant so that we don't have to set it to the default?
This looks like it will be nice to keep some other examples of the imports together. It will have to be re-used.
Not sure if there is a cleaner way to override this for a long time ago but it's possible to have this in all cases so it's possible to move it out of `util` and `util` to `util`. It's a minor thing but I wonder if we should have the other way of doing this for other services and forgot that.
Why removing the else ?
We could probably just remove this TODO altogether?
We should use the `Task.finest` class for this instead of the "Using delegate supplier" message.
Does this make `unnecessary-dict-delay` more generic?
This looks like a bad idea of the actual sort of code. I'm wondering if the other errors in this `/etc/` are needed?
It might be a good idea to introduce a `getOutfitByLookType` method which does this and the other call to this method `getInstance()`. This method will return an empty `* playerOutfit*`
why don't we need this in one place and just make `elggTemplates.php` the `change` interface?
Why do we need to add these?
I think this could be a constant
If you're using a `log.info` here, can you rename `log.finest` to something like `log.finest` so we know `log::info` is a valid meaning. We can do `log.finest.log` or something.
Please don't change the default page's `2`. We should fix it.
This should only be used in the ReuaUtil.h right?
I think `Pulumi up` would be helpful here
Do we need to import `get_root_logger` here?
Use the new Ruby 1.9 hash syntax.
This is going to work without this change. It seems we have to keep the name more descriptive for the S3 endpoint.
The `hasParameter` method has a default value, so the method is only called when the condition is true.
What exactly is this change for? Is it the user facing names?
Why do we need to reset this again?
I think that this can be removed completely if it's not used anymore (as it is now on the above block).
We probably should just rename this to `customcustomMetadata`
Is there a test to cover this behavior?
Shouldn't this be in a `return protocol.MustGetModule`?
Do we have a test for this?
this should be a user's timezone.
Why are we making this part of this PR?
`self.login_id` and `self.gdpr_agreed` should go up to the top level `id` and `gdpr_agreed` should be fine as `id` is the name of the module and should be the default.
Using `out` parameter will be more readable if you have more than one line.
The cast is unnecessary.
This is where I had actually misunderstanding something.
It's better if the image is `s3://`, it doesn't have it.
Can you remove these? It should not be used anymore.
I'm surprised this isn't `platformMessage`. I guess it should be `GenericOutputStream.cs`?
Just checking, if I get `vda` with a `dev/xvda` label, I think, we'll get a `vda this label` label when `--dev` is `nil` but it's not `nil`. This is not the case when `dev/xvda` will be `null` and will be `false`.
Did you mean to include this include in the file file?
This doesn't work, it'll throw.
I'd prefer to keep these constants as is.
nit: `chainsToFullRules` is an odd name for this.
Should we make this configurable or use that instead of hardcoding the interface?
The `applyRef` should be applied for `ATTR_KEY`.
I don't think we can do this. It should just be an error and return nil if the controller isn't being found.
why not use "stdexcept" instead of "fstream"?
This is not used, can we remove it?
Are all of these required now?
Please add a space between `}` and `}` and `:`
Move this to `event_test.py`
Is this unused now.
why is this in the cached cache if it's not present?
Can you remove the line if not needed?
nit: I'd prefer not to use `K9.isQuietTime()` here, since we are not logging logging.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [89/80]
can you change this to use the same logic in `repo_host?` instead of the new one?
This change is needed because we do not start start anymore.
`TLS certificate` needs to be passed to the enum. The enum should not be used for the enum - the value should be `type`.
Why not changing this line?
We can't do this for all the other classes, so I would have used `TFeature`.
Can we remove it from this PR, since the code is now in a single place?
We should also test that the policy was not enabled, right?
Do we need this public?
I don't understand this change. This PR doesn't work with the old way, but we need to update the tests to fix this.
I don't think it's worth having a check here - if `levitate` is 0, then `levitate` will be false.
why is this a separate package?
I think this will be useful to include the `CustomValidatingEditTextView` as a parameter to avoid duplicating this field.
Can we make `TreatmentsPlugin` optional and use `Treatment` everywhere?
This seems to actually be quite useful for a reason. If there are many methods that take up, then this might be a reasonable error.
This should be title('movie.title') to avoid the need for title.
Shouldn't we use a classmethod?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
@ptibogxiv are these two changes required for the version number and the PR?
I think we can drop `# type: ignore`.
This is going to have to be moved out of sync. It's probably better to keep it consistent between `go.uber.org/zap` and `go.uber.org/zap` but the other ones in the tests are in the same file.
Please move the code to the test file.
Is the `equals()` method going to make it clear that the exception is thrown in every case this method is called, and it would be better to be consistent with the code.
"ExtraAugmentation" is a misleading name. There's no need to change this.
Is there a chance that `selectAll` can return `string`?
We shouldn't need to do this. The only time it works is when a user specifies a custom `map` function.
Is this being added to the host context before or after?
Do we want to wait the time being too soon?
@jridgewell @jridgewell I think the old behaviour was wrong here.
I'm not sure if we want to pass in etc if we pass in etc if we pass in a different config for all calls?
I think we can use the base64 constant here.
What are the motivation for the scope of this PR? The new parameter `samplingPirority` was used for the new parameter of the `KeepTraces` which was a bit confusing, so it would just be called directly on each other.
Why is this necessary? It is used in the `CloudCoreReadyCheckURL` folder, so I'd leave it to the other `CloudCoreReadyCheckURL`, as the name of the package should be changed.
Ditto here on line 341.
Is the `[0].r` still needed? `Y` may be a valid element.
This is wrong. It is now empty.
Why the extra space before `messageFrameStack.peekFirst()`?
This should be `SERCOM0_SPI`.
what about this one?
It's a little confusing to have the type checking `is_dask` and `is_array_module()` return value of `Stack` here. Would prefer to call `stack` here instead.
isn't this still needed?
Is it not needed for 1048567?
remove this from the list
This parameter is unused.
These should be `4*time.Second`
I'm guessing the last line of this file is missing...
Line is too long. [82/80]
Isn't this already called by the `clear`?
this is weird. You call `create_no_window` before `create_no_window` (just for my own knowledge) and create_no_window. But I'm guessing you're missing something here?
`Kindable` is a more descriptive variable name for the variable name.
For better readability, I prefer a separate function, to keep the same function for files. I'm not a familiar with the current name, it's worth having a separate function for this function.
Do we have a test that will pass on these APIs?
I don't think we should have a specific name here... Maybe "custom"?
this might be a bug, we don't want to use the user-defined cluster
How about `bridge.getHost().contains(bridge.getHost())`? This will allow you to handle the `atv` case as well.
I think we can use "applied directly"
What about splitting the two into a separate PR? I don't see any code using `setUp` here. Also why don't we have this code here?
`< 0.0` is in this file.
This is the wrong error. You're returning an error.
I don't think this is the right choice.
Do all this need to be `version.__version`?
private is unused now
why was this removed?
Metrics/LineLength: Line is too long. [132/120]
Can the user know what's the point of this check? The message of `pmd_userdocs_getting_started` means that the input `pmd_userdocs` will not be executed.
Just to confirm. The `inventory` method does not need to call `deleteMany` in the next iteration. This method doesn't need to be called inside the `connect()` method.
Whoops, the same goes for the screenshot output.
This file is not really necessary. The `< 0.5` option should be deleted (as you do below).
`IfAbsent` should have a `replace`, not `Countly`.
Are these changes intended to be reverted?
This file doesn't need to be run at all if `jobs` is `final`, so it doesn't need to be run before `List`.
I don't think we need this import.
This is a bit weird. Shouldn't the store-local from a cluster/http-go/kubernetes?
Why do you do this ? This will reduce a amount of time we have to start a new cache and not the current process of the cache.
why not use `\n`, `\n` ?
Is there any reason this needs to be configurable?
>#if NET452 || NET46 [](start = 16, length = 17) what should the `#if` branch be? #Closed
I think this should be `if err is nil && d.Client.Get(ctx, podId, containerName, err)`
We can't keep the old version.
I'm going to assume that on cpu device is a part of a string, not an cpu device.
Why does this differ from a environment variable?
What does this return? Wouldn't it be better to do this as an `List<Interface> getInterfaces`?
Should this be part of the "Can" format? Also, should it be "HMB Sync"?
Do we need the `AzureData` here? Seems like it should be a separate commit
remove `gateway` and `Composed` methods since we are not using them anymore.
Use the new hash syntax (non-blocking):
I'm a bit confused by this change. Why is it needed at all?
Is this still used?
I think it would be better to have this as a utils utils.clone (the other option is to create the utils utils) and pass it as an argument to `clone`
Seems like this is going to break the API. We need to update the `matchSelf` variable name.
Do you have an example in which a KVM is enabled?
This might not be necessary to use `data.current` anymore.
This test now has the test itself, and we should never check if `len(failed_files)` is 1
This should be `glog.V(4), ...`.
@fredezi does this still need to check apisv1alpha1.PoolType?
Why would this be `foo: bar`? I don't think it's the case here.
Thanks, I missed this. This PR wasn't necessary, as a merge issue in the PR.
Please add a return type of `char *chirp_reli_hash`
Do we want to make the timestamp a static variable instead of skipping it? It would be clearer if the `Span addEvent` is not null, but it seems like it would be a bit more intuitive to just pass the value into a method and use it directly in the `Span addEvent` function instead.
The other way around this is that it is clear that we are passing in an unrelated machine threads, but we are going to make them as a separate PR for now.
Line is too long. [83/80]
can we also add this to `minResolution` and `tmImplementation`?
This is probably a good place to add this to the `.py` file in the future. I'd suggest to move this to a separate file, then remove the `\py` file as well.
Why removing these?
Why not use `extensionsEncryption.autoEncryption` ?
Wouldn't this break if the caller didn't have to do something else, or if `os <msg> clone_post` doesn't exist? If it is, please use `,`
What about making this a `ITraceContext` parameter, since it is already in the constructor?
"... [and ] ] ] "If not since"
Just to make sure I understand correctly, the error message for "lookup timed out waiting for response" is not the actual error message.
Should this be named "app-ABLE"?
Why is that in the docstring?
`ACME DNS01ResolvConfFile` is the default. Could you move this line up to the `.conf`? This will be an unrelated change, but I don't think this is correct.
I don't like this - we have to update the API and the hash to include the runtime's fields, so we need to update the hash to pass it
Can't you do a null check on `null` instead of `default`?
Nit: This should be called `Join` rather than `build_langserver`.
Can we remove this case as it could cause the ZONE_PVP to be a ZONE_PVP?
This should be an `else if` or a `if`
I think we could move this to `articlesController`
Does that mean the logic for `svd` will never be `None`?
Why did you add this?
Shouldn't there be a method `validateFlowExporterConfig()` in this case?
Should we make it `clientServer`?
Please revert the whitespace changes
Should this be moved to be here?
This doesn't need to be in the `MSG`
This is the only place where it is used.
This should be a property
I don;t follow up for you.
@smarterclayton now I don't understand why the removal of this is not here?
@Marcohen would you prefer to use the `!empty () || node.peers.total_weight () < node.delta ()` option here?
this should be debug message instead of debug?
Maybe use `JenkinsRule` instead? We're using `JenkinsRule`, so the `switch` can be dropped for the interface to return `Jenkins` (or `false`) and the `switch` can be removed.
@annando - What happens when you have `$sourceFilePath` and `$event->getCacheFilepath()` ?
this can be removed now as we have the config in the config file
The method `evm` can be renamed to something like `List` (which I'm not sure what's going on here). Is that correct?
Hmm, this is a pretty trivial change. I think it might be useful to be a bit more thoroughly re-use the `items` field to have this value a bit less efficient.
remove this line.
We should move this call to `PartitionSpec.readTable` in `ElementUtil`.
Why are you using a workflow instead of a new line? I know the rest of the code changes, but it makes the code hard to understand where it makes things easier to reason about.
Do you need this struct? Can't it just be `// Options supports common options that apply to statsd exporters.`
`HTTPNotFound` was declared within this method and goes out of scope at the end of the method, so nothing else can modify it.
Shouldn't this be the existing implementation?
This is a bad merge, but should not be here since the key's value in the `stateDB` block is used.
I'm not sure what the right fix is, but the original code still uses NRE when it is zero. This is the case I'm not saying this is not the right fix.
The default is `true`, which is `false`, right?
why make this an `Function` instead of an `Function`.
This seems a bit strange to me. Why do we have to store this value in the `_checker_messages` function? Wouldn't it make sense to have it be `_checker_messages`?
I think we can remove this `historyShard` parameter.
I believe this should be `std::ceil` now?
I think this should be `(` rather than `(` rather than `(`; it's an `Enumerable`, and it's easier to understand if it's an `else`.
This test fails because there's a test that checks the chrome.detach capability by default and the chrome.detach capability to be present in the controller. The new functionality needs to be checked to be able to test that the chrome should not have been set (not sure which one is the case here).
This is a change to the behavior, but I'd expect the address to be `localhost` or `127.0.0.1` but the `localhost` would not change. It's a good thing to do, but I would also suggest to move this check to a separate `localhost.utils.localhost` so we don't have to `localhost.utils.localhost` here and then we can just call a helper method.
why did you remove the `propertyAsLong` method?
This is a breaking change, it will break the build when we have an "new" file.
This is a change in behaviour, I think.
I think this needs an `LOG(FATAL) << "...` rather than a `throw`.
Why is this being deleted?
The other option is to create a `Set` and avoid the `ListWorkloads` call
Extra empty line detected at module body beginning.
Do you really need to copy this one?
What is the reason for changing this? I'm not sure how this was doing before. @jglick Could you please double-check this?
I guess we can remove those from the struct, and make it not named `maybemaybe` to keep them simple
let's also add a TODO above that this sets `stop_name`
We need a unit test to verify this change, but not sure if this PR is OK.
Why the change to KeyError?
This file has nothing to do with the PR, but I don't think this change is necessary.
Shouldn't this be `version_first` ? I'm not sure this will break things when reading the code.
I thought the plan was to not report report. If they have any error message that is not set then it will return an error. I would say that the error message was not working.
Use 2 (not 3) spaces for indentation.
The only caller of this is `.Items()` because we don't do this now. `.current()` does return a `.current()` object that has already been called. The only time the object was created is when `.current()` is called. This way we can do this now. It can be done in a different PR, but if we don't want to return a `.current()` object, we don't want to know about the `--allow-lib` object, we can use this to handle the case where we can do the `.current()` object.
This is the only change that is needed in the `_util`, I'm not sure of this.
This check is not necessary if you have an empty previous value in `InterpreterInterpreter` which is set to false. I think you need a check for nil check here.
Can we make this more specific? This is the default for the long time being.
this looks wrong, I'm pretty sure we can't change anything here
Is this type needed? It will be useful to have a boolean return type.
What is the purpose of this method? I don't see where it is used.
Is this file still needed?
Can this be replaced with an explicit operator instead?
it is so specific to the code base, but we might want to get rid of this line as well.
I think in general we should only return one query with the first two. If the `present?` is just a `PredicateName`, then the two query may not be the same as the second one.
This is going to break the tests because of the spec.
Should this be `streamHandle`?
nit: can we use `cursorState.assign` here instead of `cursor.cursorState`? Or maybe we can move this logic into `command` to where it was?
This change should only be made in a single call, as it was not used.
`vic- Vector` should be enough here since the regexp regexp regexp needs to be released, not as the regexp regexp needs to be released.
What does `PackageMeta` do here? Does it break any existing code?
I'd suggest removing both `Greg` and `2016` here and add `//` (we can do `//` here too).
I guess that this is still inherently a "new" right?
`as <msg> ` seems not used anywhere, is it?
This is a public method but it's not a real public API. We have a method `boolean` (which is used as a default for `boolean`) that is a property.
Can you update the test data for this instead, please?
I think this method is not used in any of the other classes, should this class just return an `Optional`?
Is this related to this PR?
should be nullable
This looks wrong. It should be the same as the `lower()` line.
Should add a doc here for example.
@agramfort Is there no way to make it `TBB_INTERFACE_VERSION` here or should it be `TBB_INTERFACE_VERSION`?
I wonder if this should be `s3[0-9]{2]`
please remove this; it will make it more useful to log it
Trailing whitespace detected.
We should throw an exception when the contract wasn't found.
Shouldn't this be `Iterable`?
Another place where we need it?
I'm thinking we can get the webErrorOnce state from the logging level and just pass in the `error.message` param instead of the `error` value. It seems the only time that would happen is when the logging level is `false`.
Nit: `HttpReqIn` and `HttpReqIn` are all over the place. You can use `GetName` in the `if` statement.
Why would we want to do this?
Can you make the variable a local variable `let rootId = 0`? `let rootId = 0`
Hmm, this line is a bit too long :-)
@cston, is this an improvement? I'm surprised that the suggested amount didn't have a "empty" than the suggested amount?
Can you please add a note that this is a pointer in the config file?
why are these alphabetically removed?
Is it not possible to use the tr local variable in the `synchronized` package?
This should probably be in the same line as in `rand.Seed` since the `stateStore` is the same as in `rand.Seed` right ?
Can we get rid of this property? Or just not add the `description` parameter in the `junit-rpc-require-chainid-in-txs`?
